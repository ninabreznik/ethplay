{
  "address": "0xa5e5916a380fea1e633df88d7b5e1835a85b8262",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BrewerscoinToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-29\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address tokenOwner) external view returns (uint256);\n    function allowance(address tokenOwner, address spender) external view returns (uint256);\n    function transfer(address to, uint256 tokenAmount) external returns (bool);\n    function approve(address spender, uint256 tokenAmount) external returns (bool);\n    function transferFrom(address from, address to, uint256 tokenAmount) external returns (bool);\n    function burn(uint256 tokenAmount) external returns (bool success);\n    function burnFrom(address from, uint256 tokenAmount) external returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint256 tokenAmount);\n    event Approval(address indexed tokenHolder, address indexed spender, uint256 tokenAmount);\n    event Burn(address indexed from, uint256 tokenAmount);\n}\n\ninterface tokenRecipient {\n    function receiveApproval(address from, uint256 tokenAmount, address token, bytes extraData) external;\n}\n\n\ncontract owned {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n     * @dev Multiplies two numbers, reverts on overflow.\n     */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b, \"Multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b > 0, \"Division by 0\"); // Solidity only automatically requires when dividing by 0\n        uint256 c = _a / _b;\n        // require(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a, \"Subtraction overflow\");\n        uint256 c = _a - _b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two numbers, reverts on overflow.\n     */\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        require(c >= _a, \"Addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"Dividing by 0\");\n        return a % b;\n    }\n}\n\n\n\n\n\n\n\ncontract BrewerscoinToken is owned, IERC20 {\n\n    using SafeMath for uint256;\n\n    uint256 private constant base = 1e18;\n    uint256 constant MAX_UINT = 2**256 - 1;\n\n    // Public variables of the token\n    string public constant name = \"Brewer's coin\";\n    string public constant symbol = \"BREW\";\n    uint8 public constant decimals = 18;\n    uint256 public totalSupply = 1e26;              // 100 million\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 tokenAmount);\n    event Approval(address indexed tokenHolder, address indexed spender, uint256 tokenAmount);\n    event Burn(address indexed from, uint256 tokenAmount);\n\n    // Error messages\n    string private constant NOT_ENOUGH_TOKENS = \"Not enough tokens\";\n    string private constant NOT_ENOUGH_ETHER = \"Not enough ether\";\n    string private constant NOT_ENOUGH_ALLOWANCE = \"Not enough allowance\";\n    string private constant ADDRESS_0_NOT_ALLOWED = \"Address 0 not allowed\";\n\n    /**\n     * Constructor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    constructor() public {\n\n        // put all tokens on owner balance\n        balances[msg.sender] = totalSupply;\n\n        // allow owner 2^256-1 tokens of this contract, the fee of buyBeer will be transfered to this contract\n        allowance[this][msg.sender] = MAX_UINT;\n    }\n\n    /**\n     * Total Supply\n     *\n     * Get the total supply of tokens\n     */\n    function totalSupply() external view returns (uint256) {\n        return totalSupply;\n    }\n\n    /**\n     * Function to check the amount of tokens that an tokenOwner allowed to a spender\n     *\n     * @param tokenOwner address The address which owns the funds\n     * @param spender address The address which will spend the funds\n     */\n    function allowance(address tokenOwner, address spender) external view returns (uint256) {\n        return allowance[tokenOwner][spender];\n    }\n\n    /**\n     * Function to get the amount of tokens that an address contains\n     *\n     * @param tokenOwner address The address which owns the funds\n     */\n    function balanceOf(address tokenOwner) external view returns (uint256) {\n        return balances[tokenOwner];\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `tokenAmount` tokens to `to` from your account\n     *\n     * @param to the address of the recipient\n     * @param tokenAmount the amount to send\n     */\n    function transfer(address to, uint256 tokenAmount) external returns (bool) {\n        _transfer(msg.sender, to, tokenAmount);\n\n        return true;\n    }\n\n    /**\n     * Transfer tokens from other address if allowed\n     *\n     * Send `tokenAmount` tokens to `to` in behalf of `from`\n     *\n     * @param from The address of the sender\n     * @param to The address of the recipient\n     * @param tokenAmount the amount to send\n     */\n    function transferFrom(address from, address to, uint256 tokenAmount) external returns (bool) {\n\n        // Check allowance\n        require(tokenAmount <= allowance[from][msg.sender], NOT_ENOUGH_ALLOWANCE);\n\n        // transfer\n        _transfer(from, to, tokenAmount);\n\n        // Subtract allowance\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(tokenAmount);\n\n        return true;\n    }\n\n    /**\n     * Internal method for transferring tokens from one address to the other\n     *\n     * Send `tokenAmount` tokens to `to` in behalf of `from`\n     *\n     * @param from the address of the sender\n     * @param to the address of the recipient\n     * @param tokenAmount the amount of tokens to transfer\n     */\n    function _transfer(address from, address to, uint256 tokenAmount) internal {\n\n        // Check if the sender has enough tokens\n        require(tokenAmount <= balances[from], NOT_ENOUGH_TOKENS);\n\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(to != address(0), ADDRESS_0_NOT_ALLOWED);\n\n        // Subtract tokens from sender\n        balances[from] = balances[from].sub(tokenAmount);\n\n        // Add the tokens to the recipient\n        balances[to] = balances[to].add(tokenAmount);\n\n        // Trigger event\n        emit Transfer(from, to, tokenAmount);\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `spender` to spend no more than `tokenAmount` tokens in your behalf\n     *\n     * @param spender The address authorized to spend\n     * @param tokenAmount the max amount they can spend\n     */\n    function approve(address spender, uint256 tokenAmount) external returns (bool success) {\n        return _approve(spender, tokenAmount);\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `spender` to spend no more than `tokenAmount` tokens in your behalf, and then ping the contract about it\n     *\n     * @param spender the address authorised to spend\n     * @param tokenAmount the max amount they can spend\n     * @param extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address spender, uint256 tokenAmount, bytes extraData) external returns (bool success) {\n        tokenRecipient _spender = tokenRecipient(spender);\n        if (_approve(spender, tokenAmount)) {\n            _spender.receiveApproval(msg.sender, tokenAmount, this, extraData);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `spender` to spend no more than `tokenAmount` tokens in your behalf\n     *\n     * @param spender The address authorized to spend\n     * @param tokenAmount the max amount they can spend\n     */\n    function _approve(address spender, uint256 tokenAmount) internal returns (bool success) {\n        allowance[msg.sender][spender] = tokenAmount;\n        emit Approval(msg.sender, spender, tokenAmount);\n        return true;\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `tokenAmount` tokens from the system irreversibly\n     *\n     * @param tokenAmount the amount of tokens to burn\n     */\n    function burn(uint256 tokenAmount) external returns (bool success) {\n\n        _burn(msg.sender, tokenAmount);\n\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `tokenAmount` tokens from the system irreversibly on behalf of `from`.\n     *\n     * @param from the address of the sender\n     * @param tokenAmount the amount of tokens to burn\n     */\n    function burnFrom(address from, uint256 tokenAmount) public returns (bool success) {\n\n        // Check allowance\n        require(tokenAmount <= allowance[from][msg.sender], NOT_ENOUGH_ALLOWANCE);\n\n        // Burn\n        _burn(from, tokenAmount);\n\n        // Subtract from the sender's allowance\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(tokenAmount);\n\n        return true;\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `tokenAmount` tokens from the system irreversibly\n     *\n     * @param from the address to burn tokens from\n     * @param tokenAmount the amount of tokens to burn\n     */\n    function _burn(address from, uint256 tokenAmount) internal {\n\n        // Check if the sender has enough\n        require(tokenAmount <= balances[from], NOT_ENOUGH_TOKENS);\n\n        // Subtract from the sender\n        balances[from] = balances[from].sub(tokenAmount);\n\n        // Updates totalSupply\n        totalSupply = totalSupply.sub(tokenAmount);\n\n        // Burn tokens\n        emit Burn(from, tokenAmount);\n    }\n}",
  "bytecode": "60806040526a52b7d2dcc80cd2e400000060015534801561001f57600080fd5b5060008054600160a060020a03191633908117825560015481835260026020908152604080852092909255308452600381528184209284529190915290206000199055610ca6806100716000396000f3006080604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100df578063095ea7b31461016957806318160ddd146101a157806323b872dd146101c857806327e235e3146101f2578063313ce5671461021357806342966c681461023e57806370a082311461025657806379cc6790146102775780638da5cb5b1461029b57806395d89b41146102cc578063a9059cbb146102e1578063cae9ca5114610305578063dd62ed3e14610336578063f2fde38b1461035d575b600080fd5b3480156100eb57600080fd5b506100f4610380565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012e578181015183820152602001610116565b50505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017557600080fd5b5061018d600160a060020a03600435166024356103b7565b604080519115158252519081900360200190f35b3480156101ad57600080fd5b506101b66103ca565b60408051918252519081900360200190f35b3480156101d457600080fd5b5061018d600160a060020a03600435811690602435166044356103d0565b3480156101fe57600080fd5b506101b6600160a060020a0360043516610525565b34801561021f57600080fd5b50610228610537565b6040805160ff9092168252519081900360200190f35b34801561024a57600080fd5b5061018d60043561053c565b34801561026257600080fd5b506101b6600160a060020a0360043516610550565b34801561028357600080fd5b5061018d600160a060020a036004351660243561056b565b3480156102a757600080fd5b506102b0610682565b60408051600160a060020a039092168252519081900360200190f35b3480156102d857600080fd5b506100f4610691565b3480156102ed57600080fd5b5061018d600160a060020a03600435166024356106c8565b34801561031157600080fd5b5061018d60048035600160a060020a03169060248035916044359182019101356106de565b34801561034257600080fd5b506101b6600160a060020a03600435811690602435166107b7565b34801561036957600080fd5b5061037e600160a060020a03600435166107e2565b005b60408051808201909152600d81527f427265776572277320636f696e00000000000000000000000000000000000000602082015281565b60006103c38383610828565b9392505050565b60015490565b600160a060020a03831660009081526003602090815260408083203384528252808320548151808301909252601482527f4e6f7420656e6f75676820616c6c6f77616e636500000000000000000000000092820192909252908311156104b75760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561047c578181015183820152602001610464565b50505050905090810190601f1680156104a95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506104c384848461088e565b600160a060020a03841660009081526003602090815260408083203384529091529020546104f7908363ffffffff610a7c16565b600160a060020a03851660009081526003602090815260408083203384529091529020555060019392505050565b60026020526000908152604090205481565b601281565b60006105483383610ade565b506001919050565b600160a060020a031660009081526002602052604090205490565b600160a060020a03821660009081526003602090815260408083203384528252808320548151808301909252601482527f4e6f7420656e6f75676820616c6c6f77616e636500000000000000000000000092820192909252908311156106165760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561047c578181015183820152602001610464565b506106218383610ade565b600160a060020a0383166000908152600360209081526040808320338452909152902054610655908363ffffffff610a7c16565b600160a060020a038416600090815260036020908152604080832033845290915290205550600192915050565b600054600160a060020a031681565b60408051808201909152600481527f4252455700000000000000000000000000000000000000000000000000000000602082015281565b60006106d533848461088e565b50600192915050565b6000846106eb8186610828565b156107a9576040517f8f4ffcb1000000000000000000000000000000000000000000000000000000008152336004820181815260248301889052306044840181905260806064850190815260848501889052600160a060020a03861694638f4ffcb194938b93928b928b92919060a40184848082843782019150509650505050505050600060405180830381600087803b15801561078857600080fd5b505af115801561079c573d6000803e3d6000fd5b50505050600191506107ae565b600091505b50949350505050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b600054600160a060020a031633146107f957600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b336000818152600360209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600160a060020a038316600090815260026020908152604091829020548251808401909352601183527f4e6f7420656e6f75676820746f6b656e73000000000000000000000000000000918301919091528211156109315760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561047c578181015183820152602001610464565b5060408051808201909152601581527f416464726573732030206e6f7420616c6c6f77656400000000000000000000006020820152600160a060020a03831615156109c15760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561047c578181015183820152602001610464565b50600160a060020a0383166000908152600260205260409020546109eb908263ffffffff610a7c16565b600160a060020a038085166000908152600260205260408082209390935590841681522054610a20908263ffffffff610c1d16565b600160a060020a0380841660008181526002602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008083831115610ad7576040805160e560020a62461bcd02815260206004820152601460248201527f5375627472616374696f6e206f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b5050900390565b600160a060020a038216600090815260026020908152604091829020548251808401909352601183527f4e6f7420656e6f75676820746f6b656e7300000000000000000000000000000091830191909152821115610b815760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561047c578181015183820152602001610464565b50600160a060020a038216600090815260026020526040902054610bab908263ffffffff610a7c16565b600160a060020a038316600090815260026020526040902055600154610bd7908263ffffffff610a7c16565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b6000828201838110156103c3576040805160e560020a62461bcd02815260206004820152601160248201527f4164646974696f6e206f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd00a165627a7a7230582013b5f9b4705d44fb2744c90394a6ddd65cd41382e5a41b7f4fd8c8a57547e2a70029"
}