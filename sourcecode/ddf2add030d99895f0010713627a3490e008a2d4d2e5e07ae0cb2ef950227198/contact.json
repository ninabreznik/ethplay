{
  "address": "0xdc2d359f59f6a26162972c3bd0cfbfd8c9ef43af",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ClaimsData",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/* Copyright (C) 2017 NexusMutual.io\n\n  This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n    along with this program.  If not, see http://www.gnu.org/licenses/ */\n\npragma solidity 0.5.7;\n\nimport \"./Iupgradable.sol\";\nimport \"./SafeMath.sol\";\n\n\ncontract ClaimsData is Iupgradable {\n    using SafeMath for uint;\n\n    struct Claim {\n        uint coverId;\n        uint dateUpd;\n    }\n\n    struct Vote {\n        address voter;\n        uint tokens;\n        uint claimId;\n        int8 verdict;\n        bool rewardClaimed;\n    }\n\n    struct ClaimsPause {\n        uint coverid;\n        uint dateUpd;\n        bool submit;\n    }\n\n    struct ClaimPauseVoting {\n        uint claimid;\n        uint pendingTime;\n        bool voting;\n    }\n\n    struct RewardDistributed {\n        uint lastCAvoteIndex;\n        uint lastMVvoteIndex;\n\n    }\n\n    struct ClaimRewardDetails {\n        uint percCA;\n        uint percMV;\n        uint tokenToBeDist;\n\n    }\n\n    struct ClaimTotalTokens {\n        uint accept;\n        uint deny;\n    }\n\n    struct ClaimRewardStatus {\n        uint percCA;\n        uint percMV;\n    }\n\n    ClaimRewardStatus[] internal rewardStatus;\n\n    Claim[] internal allClaims;\n    Vote[] internal allvotes;\n    ClaimsPause[] internal claimPause;\n    ClaimPauseVoting[] internal claimPauseVotingEP;\n\n    mapping(address => RewardDistributed) internal voterVoteRewardReceived;\n    mapping(uint => ClaimRewardDetails) internal claimRewardDetail;\n    mapping(uint => ClaimTotalTokens) internal claimTokensCA;\n    mapping(uint => ClaimTotalTokens) internal claimTokensMV;\n    mapping(uint => int8) internal claimVote;\n    mapping(uint => uint) internal claimsStatus;\n    mapping(uint => uint) internal claimState12Count;\n    mapping(uint => uint[]) internal claimVoteCA;\n    mapping(uint => uint[]) internal claimVoteMember;\n    mapping(address => uint[]) internal voteAddressCA;\n    mapping(address => uint[]) internal voteAddressMember;\n    mapping(address => uint[]) internal allClaimsByAddress;\n    mapping(address => mapping(uint => uint)) internal userClaimVoteCA;\n    mapping(address => mapping(uint => uint)) internal userClaimVoteMember;\n    mapping(address => uint) public userClaimVotePausedOn;\n\n    uint internal claimPauseLastsubmit;\n    uint internal claimStartVotingFirstIndex;\n    uint public pendingClaimStart;\n    uint public claimDepositTime;\n    uint public maxVotingTime;\n    uint public minVotingTime;\n    uint public payoutRetryTime;\n    uint public claimRewardPerc;\n    uint public minVoteThreshold;\n    uint public maxVoteThreshold;\n    uint public majorityConsensus;\n    uint public pauseDaysCA;\n   \n    event ClaimRaise(\n        uint indexed coverId,\n        address indexed userAddress,\n        uint claimId,\n        uint dateSubmit\n    );\n\n    event VoteCast(\n        address indexed userAddress,\n        uint indexed claimId,\n        bytes4 indexed typeOf,\n        uint tokens,\n        uint submitDate,\n        int8 verdict\n    );\n\n    constructor() public {\n        pendingClaimStart = 1;\n        maxVotingTime = 48 * 1 hours;\n        minVotingTime = 12 * 1 hours;\n        payoutRetryTime = 24 * 1 hours;\n        allvotes.push(Vote(address(0), 0, 0, 0, false));\n        allClaims.push(Claim(0, 0));\n        claimDepositTime = 7 days;\n        claimRewardPerc = 20;\n        minVoteThreshold = 5;\n        maxVoteThreshold = 10;\n        majorityConsensus = 70;\n        pauseDaysCA = 3 days;\n        _addRewardIncentive();\n    }\n\n    /**\n     * @dev Updates the pending claim start variable, \n     * the lowest claim id with a pending decision/payout.\n     */ \n    function setpendingClaimStart(uint _start) external onlyInternal {\n        require(pendingClaimStart <= _start);\n        pendingClaimStart = _start;\n    }\n\n    /** \n     * @dev Updates the max vote index for which claim assessor has received reward \n     * @param _voter address of the voter.\n     * @param caIndex last index till which reward was distributed for CA\n     */ \n    function setRewardDistributedIndexCA(address _voter, uint caIndex) external onlyInternal {\n        voterVoteRewardReceived[_voter].lastCAvoteIndex = caIndex;\n\n    }\n\n    /** \n     * @dev Used to pause claim assessor activity for 3 days \n     * @param user Member address whose claim voting ability needs to be paused\n     */ \n    function setUserClaimVotePausedOn(address user) external {\n        require(ms.checkIsAuthToGoverned(msg.sender));\n        userClaimVotePausedOn[user] = now;\n    }\n\n    /**\n     * @dev Updates the max vote index for which member has received reward \n     * @param _voter address of the voter.\n     * @param mvIndex last index till which reward was distributed for member \n     */ \n    function setRewardDistributedIndexMV(address _voter, uint mvIndex) external onlyInternal {\n\n        voterVoteRewardReceived[_voter].lastMVvoteIndex = mvIndex;\n    }\n\n    /**\n     * @param claimid claim id.\n     * @param percCA reward Percentage reward for claim assessor\n     * @param percMV reward Percentage reward for members\n     * @param tokens total tokens to be rewarded\n     */ \n    function setClaimRewardDetail(\n        uint claimid,\n        uint percCA,\n        uint percMV,\n        uint tokens\n    )\n        external\n        onlyInternal\n    {\n        claimRewardDetail[claimid].percCA = percCA;\n        claimRewardDetail[claimid].percMV = percMV;\n        claimRewardDetail[claimid].tokenToBeDist = tokens;\n    }\n\n    /**\n     * @dev Sets the reward claim status against a vote id.\n     * @param _voteid vote Id.\n     * @param claimed true if reward for vote is claimed, else false.\n     */ \n    function setRewardClaimed(uint _voteid, bool claimed) external onlyInternal {\n        allvotes[_voteid].rewardClaimed = claimed;\n    }\n\n    /**\n     * @dev Sets the final vote's result(either accepted or declined)of a claim.\n     * @param _claimId Claim Id.\n     * @param _verdict 1 if claim is accepted,-1 if declined.\n     */ \n    function changeFinalVerdict(uint _claimId, int8 _verdict) external onlyInternal {\n        claimVote[_claimId] = _verdict;\n    }\n    \n    /**\n     * @dev Creates a new claim.\n     */ \n    function addClaim(\n        uint _claimId,\n        uint _coverId,\n        address _from,\n        uint _nowtime\n    )\n        external\n        onlyInternal\n    {\n        allClaims.push(Claim(_coverId, _nowtime));\n        allClaimsByAddress[_from].push(_claimId);\n    }\n\n    /**\n     * @dev Add Vote's details of a given claim.\n     */ \n    function addVote(\n        address _voter,\n        uint _tokens,\n        uint claimId,\n        int8 _verdict\n    ) \n        external\n        onlyInternal\n    {\n        allvotes.push(Vote(_voter, _tokens, claimId, _verdict, false));\n    }\n\n    /** \n     * @dev Stores the id of the claim assessor vote given to a claim.\n     * Maintains record of all votes given by all the CA to a claim.\n     * @param _claimId Claim Id to which vote has given by the CA.\n     * @param _voteid Vote Id.\n     */\n    function addClaimVoteCA(uint _claimId, uint _voteid) external onlyInternal {\n        claimVoteCA[_claimId].push(_voteid);\n    }\n\n    /** \n     * @dev Sets the id of the vote.\n     * @param _from Claim assessor's address who has given the vote.\n     * @param _claimId Claim Id for which vote has been given by the CA.\n     * @param _voteid Vote Id which will be stored against the given _from and claimid.\n     */ \n    function setUserClaimVoteCA(\n        address _from,\n        uint _claimId,\n        uint _voteid\n    )\n        external\n        onlyInternal\n    {\n        userClaimVoteCA[_from][_claimId] = _voteid;\n        voteAddressCA[_from].push(_voteid);\n    }\n\n    /**\n     * @dev Stores the tokens locked by the Claim Assessors during voting of a given claim.\n     * @param _claimId Claim Id.\n     * @param _vote 1 for accept and increases the tokens of claim as accept,\n     * -1 for deny and increases the tokens of claim as deny.\n     * @param _tokens Number of tokens.\n     */ \n    function setClaimTokensCA(uint _claimId, int8 _vote, uint _tokens) external onlyInternal {\n        if (_vote == 1)\n            claimTokensCA[_claimId].accept = claimTokensCA[_claimId].accept.add(_tokens);\n        if (_vote == -1)\n            claimTokensCA[_claimId].deny = claimTokensCA[_claimId].deny.add(_tokens);\n    }\n\n    /** \n     * @dev Stores the tokens locked by the Members during voting of a given claim.\n     * @param _claimId Claim Id.\n     * @param _vote 1 for accept and increases the tokens of claim as accept,\n     * -1 for deny and increases the tokens of claim as deny.\n     * @param _tokens Number of tokens.\n     */ \n    function setClaimTokensMV(uint _claimId, int8 _vote, uint _tokens) external onlyInternal {\n        if (_vote == 1)\n            claimTokensMV[_claimId].accept = claimTokensMV[_claimId].accept.add(_tokens);\n        if (_vote == -1)\n            claimTokensMV[_claimId].deny = claimTokensMV[_claimId].deny.add(_tokens);\n    }\n\n    /** \n     * @dev Stores the id of the member vote given to a claim.\n     * Maintains record of all votes given by all the Members to a claim.\n     * @param _claimId Claim Id to which vote has been given by the Member.\n     * @param _voteid Vote Id.\n     */ \n    function addClaimVotemember(uint _claimId, uint _voteid) external onlyInternal {\n        claimVoteMember[_claimId].push(_voteid);\n    }\n\n    /** \n     * @dev Sets the id of the vote.\n     * @param _from Member's address who has given the vote.\n     * @param _claimId Claim Id for which vote has been given by the Member.\n     * @param _voteid Vote Id which will be stored against the given _from and claimid.\n     */ \n    function setUserClaimVoteMember(\n        address _from,\n        uint _claimId,\n        uint _voteid\n    )\n        external\n        onlyInternal\n    {\n        userClaimVoteMember[_from][_claimId] = _voteid;\n        voteAddressMember[_from].push(_voteid);\n\n    }\n\n    /** \n     * @dev Increases the count of failure until payout of a claim is successful.\n     */ \n    function updateState12Count(uint _claimId, uint _cnt) external onlyInternal {\n        claimState12Count[_claimId] = claimState12Count[_claimId].add(_cnt);\n    }\n\n    /** \n     * @dev Sets status of a claim.\n     * @param _claimId Claim Id.\n     * @param _stat Status number.\n     */\n    function setClaimStatus(uint _claimId, uint _stat) external onlyInternal {\n        claimsStatus[_claimId] = _stat;\n    }\n\n    /** \n     * @dev Sets the timestamp of a given claim at which the Claim's details has been updated.\n     * @param _claimId Claim Id of claim which has been changed.\n     * @param _dateUpd timestamp at which claim is updated.\n     */ \n    function setClaimdateUpd(uint _claimId, uint _dateUpd) external onlyInternal {\n        allClaims[_claimId].dateUpd = _dateUpd;\n    }\n\n    /** \n     @dev Queues Claims during Emergency Pause.\n     */ \n    function setClaimAtEmergencyPause(\n        uint _coverId,\n        uint _dateUpd,\n        bool _submit\n    )\n        external\n        onlyInternal\n    {\n        claimPause.push(ClaimsPause(_coverId, _dateUpd, _submit));\n    }\n\n    /** \n     * @dev Set submission flag for Claims queued during emergency pause.\n     * Set to true after EP is turned off and the claim is submitted .\n     */ \n    function setClaimSubmittedAtEPTrue(uint _index, bool _submit) external onlyInternal {\n        claimPause[_index].submit = _submit;\n    }\n\n    /** \n     * @dev Sets the index from which claim needs to be \n     * submitted when emergency pause is swithched off.\n     */ \n    function setFirstClaimIndexToSubmitAfterEP(\n        uint _firstClaimIndexToSubmit\n    )\n        external\n        onlyInternal\n    {\n        claimPauseLastsubmit = _firstClaimIndexToSubmit;\n    }\n\n    /** \n     * @dev Sets the pending vote duration for a claim in case of emergency pause.\n     */ \n    function setPendingClaimDetails(\n        uint _claimId,\n        uint _pendingTime,\n        bool _voting\n    )\n        external\n        onlyInternal\n    {\n        claimPauseVotingEP.push(ClaimPauseVoting(_claimId, _pendingTime, _voting));\n    }\n\n    /** \n     * @dev Sets voting flag true after claim is reopened for voting after emergency pause.\n     */ \n    function setPendingClaimVoteStatus(uint _claimId, bool _vote) external onlyInternal {\n        claimPauseVotingEP[_claimId].voting = _vote;\n    }\n    \n    /** \n     * @dev Sets the index from which claim needs to be \n     * reopened when emergency pause is swithched off. \n     */ \n    function setFirstClaimIndexToStartVotingAfterEP(\n        uint _claimStartVotingFirstIndex\n    )\n        external\n        onlyInternal\n    {\n        claimStartVotingFirstIndex = _claimStartVotingFirstIndex;\n    }\n\n    /** \n     * @dev Calls Vote Event.\n     */ \n    function callVoteEvent(\n        address _userAddress,\n        uint _claimId,\n        bytes4 _typeOf,\n        uint _tokens,\n        uint _submitDate,\n        int8 _verdict\n    )\n        external\n        onlyInternal\n    {\n        emit VoteCast(\n            _userAddress,\n            _claimId,\n            _typeOf,\n            _tokens,\n            _submitDate,\n            _verdict\n        );\n    }\n\n    /** \n     * @dev Calls Claim Event. \n     */ \n    function callClaimEvent(\n        uint _coverId,\n        address _userAddress,\n        uint _claimId,\n        uint _datesubmit\n    ) \n        external\n        onlyInternal\n    {\n        emit ClaimRaise(_coverId, _userAddress, _claimId, _datesubmit);\n    }\n\n    /**\n     * @dev Gets Uint Parameters by parameter code\n     * @param code whose details we want\n     * @return string value of the parameter\n     * @return associated amount (time or perc or value) to the code\n     */\n    function getUintParameters(bytes8 code) external view returns (bytes8 codeVal, uint val) {\n        codeVal = code;\n        if (code == \"CAMAXVT\") {\n            val = maxVotingTime / (1 hours);\n\n        } else if (code == \"CAMINVT\") {\n\n            val = minVotingTime / (1 hours);\n\n        } else if (code == \"CAPRETRY\") {\n\n            val = payoutRetryTime / (1 hours);\n\n        } else if (code == \"CADEPT\") {\n\n            val = claimDepositTime / (1 days);\n\n        } else if (code == \"CAREWPER\") {\n\n            val = claimRewardPerc;\n\n        } else if (code == \"CAMINTH\") {\n\n            val = minVoteThreshold;\n\n        } else if (code == \"CAMAXTH\") {\n\n            val = maxVoteThreshold;\n\n        } else if (code == \"CACONPER\") {\n\n            val = majorityConsensus;\n\n        } else if (code == \"CAPAUSET\") {\n            val = pauseDaysCA / (1 days);\n        }\n    \n    }\n\n    /**\n     * @dev Get claim queued during emergency pause by index.\n     */ \n    function getClaimOfEmergencyPauseByIndex(\n        uint _index\n    ) \n        external\n        view\n        returns(\n            uint coverId,\n            uint dateUpd,\n            bool submit\n        )\n    {\n        coverId = claimPause[_index].coverid;\n        dateUpd = claimPause[_index].dateUpd;\n        submit = claimPause[_index].submit;\n    }\n\n    /**\n     * @dev Gets the Claim's details of given claimid.   \n     */ \n    function getAllClaimsByIndex(\n        uint _claimId\n    )\n        external\n        view\n        returns(\n            uint coverId,\n            int8 vote,\n            uint status,\n            uint dateUpd,\n            uint state12Count\n        )\n    {\n        return(\n            allClaims[_claimId].coverId,\n            claimVote[_claimId],\n            claimsStatus[_claimId],\n            allClaims[_claimId].dateUpd,\n            claimState12Count[_claimId]\n        );\n    }\n\n    /** \n     * @dev Gets the vote id of a given claim of a given Claim Assessor.\n     */ \n    function getUserClaimVoteCA(\n        address _add,\n        uint _claimId\n    )\n        external\n        view\n        returns(uint idVote)\n    {\n        return userClaimVoteCA[_add][_claimId];\n    }\n\n    /** \n     * @dev Gets the vote id of a given claim of a given member.\n     */\n    function getUserClaimVoteMember(\n        address _add,\n        uint _claimId\n    )\n        external\n        view\n        returns(uint idVote)\n    {\n        return userClaimVoteMember[_add][_claimId];\n    }\n\n    /** \n     * @dev Gets the count of all votes.\n     */ \n    function getAllVoteLength() external view returns(uint voteCount) {\n        return allvotes.length.sub(1); //Start Index always from 1.\n    }\n\n    /**\n     * @dev Gets the status number of a given claim.\n     * @param _claimId Claim id.\n     * @return statno Status Number. \n     */ \n    function getClaimStatusNumber(uint _claimId) external view returns(uint claimId, uint statno) {\n        return (_claimId, claimsStatus[_claimId]);\n    }\n\n    /**\n     * @dev Gets the reward percentage to be distributed for a given status id\n     * @param statusNumber the number of type of status\n     * @return percCA reward Percentage for claim assessor\n     * @return percMV reward Percentage for members\n     */\n    function getRewardStatus(uint statusNumber) external view returns(uint percCA, uint percMV) {\n        return (rewardStatus[statusNumber].percCA, rewardStatus[statusNumber].percMV);\n    }\n\n    /** \n     * @dev Gets the number of tries that have been made for a successful payout of a Claim.\n     */ \n    function getClaimState12Count(uint _claimId) external view returns(uint num) {\n        num = claimState12Count[_claimId];\n    }\n\n    /** \n     * @dev Gets the last update date of a claim.\n     */ \n    function getClaimDateUpd(uint _claimId) external view returns(uint dateupd) {\n        dateupd = allClaims[_claimId].dateUpd;\n    }\n\n    /**\n     * @dev Gets all Claims created by a user till date.\n     * @param _member user's address.\n     * @return claimarr List of Claims id.\n     */ \n    function getAllClaimsByAddress(address _member) external view returns(uint[] memory claimarr) {\n        return allClaimsByAddress[_member];\n    }\n\n    /**\n     * @dev Gets the number of tokens that has been locked \n     * while giving vote to a claim by  Claim Assessors.\n     * @param _claimId Claim Id.\n     * @return accept Total number of tokens when CA accepts the claim.\n     * @return deny Total number of tokens when CA declines the claim.\n     */ \n    function getClaimsTokenCA(\n        uint _claimId\n    )\n        external\n        view\n        returns(\n            uint claimId,\n            uint accept,\n            uint deny\n        )\n    {\n        return (\n            _claimId,\n            claimTokensCA[_claimId].accept,\n            claimTokensCA[_claimId].deny\n        );\n    }\n\n    /** \n     * @dev Gets the number of tokens that have been\n     * locked while assessing a claim as a member.\n     * @param _claimId Claim Id.\n     * @return accept Total number of tokens in acceptance of the claim.\n     * @return deny Total number of tokens against the claim.\n     */ \n    function getClaimsTokenMV(\n        uint _claimId\n    )\n        external\n        view\n        returns(\n            uint claimId,\n            uint accept,\n            uint deny\n        )\n    {\n        return (\n            _claimId,\n            claimTokensMV[_claimId].accept,\n            claimTokensMV[_claimId].deny\n        );\n    }\n\n    /**\n     * @dev Gets the total number of votes cast as Claims assessor for/against a given claim\n     */ \n    function getCaClaimVotesToken(uint _claimId) external view returns(uint claimId, uint cnt) {\n        claimId = _claimId;\n        cnt = 0;\n        for (uint i = 0; i < claimVoteCA[_claimId].length; i++) {\n            cnt = cnt.add(allvotes[claimVoteCA[_claimId][i]].tokens);\n        }\n    }\n\n    /**\n     * @dev Gets the total number of tokens cast as a member for/against a given claim  \n     */ \n    function getMemberClaimVotesToken(\n        uint _claimId\n    )   \n        external\n        view\n        returns(uint claimId, uint cnt)\n    {\n        claimId = _claimId;\n        cnt = 0;\n        for (uint i = 0; i < claimVoteMember[_claimId].length; i++) {\n            cnt = cnt.add(allvotes[claimVoteMember[_claimId][i]].tokens);\n        }\n    }\n\n    /**\n     * @dev Provides information of a vote when given its vote id.\n     * @param _voteid Vote Id.\n     */\n    function getVoteDetails(uint _voteid)\n    external view\n    returns(\n        uint tokens,\n        uint claimId,\n        int8 verdict,\n        bool rewardClaimed\n        )\n    {\n        return (\n            allvotes[_voteid].tokens,\n            allvotes[_voteid].claimId,\n            allvotes[_voteid].verdict,\n            allvotes[_voteid].rewardClaimed\n        );\n    }\n\n    /**\n     * @dev Gets the voter's address of a given vote id.\n     */ \n    function getVoterVote(uint _voteid) external view returns(address voter) {\n        return allvotes[_voteid].voter;\n    }\n\n    /**\n     * @dev Provides information of a Claim when given its claim id.\n     * @param _claimId Claim Id.\n     */ \n    function getClaim(\n        uint _claimId\n    )\n        external\n        view\n        returns(\n            uint claimId,\n            uint coverId,\n            int8 vote,\n            uint status,\n            uint dateUpd,\n            uint state12Count\n        )\n    {\n        return (\n            _claimId,\n            allClaims[_claimId].coverId,\n            claimVote[_claimId],\n            claimsStatus[_claimId],\n            allClaims[_claimId].dateUpd,\n            claimState12Count[_claimId]\n            );\n    }\n\n    /**\n     * @dev Gets the total number of votes of a given claim.\n     * @param _claimId Claim Id.\n     * @param _ca if 1: votes given by Claim Assessors to a claim,\n     * else returns the number of votes of given by Members to a claim.\n     * @return len total number of votes for/against a given claim.\n     */ \n    function getClaimVoteLength(\n        uint _claimId,\n        uint8 _ca\n    )\n        external\n        view\n        returns(uint claimId, uint len)\n    {\n        claimId = _claimId;\n        if (_ca == 1)\n            len = claimVoteCA[_claimId].length;\n        else\n            len = claimVoteMember[_claimId].length;\n    }\n\n    /**\n     * @dev Gets the verdict of a vote using claim id and index.\n     * @param _ca 1 for vote given as a CA, else for vote given as a member.\n     * @return ver 1 if vote was given in favour,-1 if given in against.\n     */ \n    function getVoteVerdict(\n        uint _claimId,\n        uint _index,\n        uint8 _ca\n    )\n        external\n        view\n        returns(int8 ver)\n    {\n        if (_ca == 1)\n            ver = allvotes[claimVoteCA[_claimId][_index]].verdict;\n        else\n            ver = allvotes[claimVoteMember[_claimId][_index]].verdict;\n    }\n\n    /**\n     * @dev Gets the Number of tokens of a vote using claim id and index.\n     * @param _ca 1 for vote given as a CA, else for vote given as a member.\n     * @return tok Number of tokens.\n     */ \n    function getVoteToken(\n        uint _claimId,\n        uint _index,\n        uint8 _ca\n    )   \n        external\n        view\n        returns(uint tok)\n    {\n        if (_ca == 1)\n            tok = allvotes[claimVoteCA[_claimId][_index]].tokens;\n        else\n            tok = allvotes[claimVoteMember[_claimId][_index]].tokens;\n    }\n\n    /**\n     * @dev Gets the Voter's address of a vote using claim id and index.\n     * @param _ca 1 for vote given as a CA, else for vote given as a member.\n     * @return voter Voter's address.\n     */ \n    function getVoteVoter(\n        uint _claimId,\n        uint _index,\n        uint8 _ca\n    )\n        external\n        view\n        returns(address voter)\n    {\n        if (_ca == 1)\n            voter = allvotes[claimVoteCA[_claimId][_index]].voter;\n        else\n            voter = allvotes[claimVoteMember[_claimId][_index]].voter;\n    }\n\n    /** \n     * @dev Gets total number of Claims created by a user till date.\n     * @param _add User's address.\n     */ \n    function getUserClaimCount(address _add) external view returns(uint len) {\n        len = allClaimsByAddress[_add].length;\n    }\n\n    /**\n     * @dev Calculates number of Claims that are in pending state.\n     */ \n    function getClaimLength() external view returns(uint len) {\n        len = allClaims.length.sub(pendingClaimStart);\n    }\n\n    /**\n     * @dev Gets the Number of all the Claims created till date.\n     */ \n    function actualClaimLength() external view returns(uint len) {\n        len = allClaims.length;\n    }\n\n    /** \n     * @dev Gets details of a claim.\n     * @param _index claim id = pending claim start + given index\n     * @param _add User's address.\n     * @return coverid cover against which claim has been submitted.\n     * @return claimId Claim  Id.\n     * @return voteCA verdict of vote given as a Claim Assessor.  \n     * @return voteMV verdict of vote given as a Member.\n     * @return statusnumber Status of claim.\n     */ \n    function getClaimFromNewStart(\n        uint _index,\n        address _add\n    )\n        external\n        view\n        returns(\n            uint coverid,\n            uint claimId,\n            int8 voteCA,\n            int8 voteMV,\n            uint statusnumber\n        )\n    {\n        uint i = pendingClaimStart.add(_index);\n        coverid = allClaims[i].coverId;\n        claimId = i;\n        if (userClaimVoteCA[_add][i] > 0)\n            voteCA = allvotes[userClaimVoteCA[_add][i]].verdict;\n        else\n            voteCA = 0;\n\n        if (userClaimVoteMember[_add][i] > 0)\n            voteMV = allvotes[userClaimVoteMember[_add][i]].verdict;\n        else\n            voteMV = 0;\n\n        statusnumber = claimsStatus[i];\n    }\n\n    /**\n     * @dev Gets details of a claim of a user at a given index.  \n     */ \n    function getUserClaimByIndex(\n        uint _index,\n        address _add\n    )\n        external\n        view\n        returns(\n            uint status,\n            uint coverid,\n            uint claimId\n        )\n    {\n        claimId = allClaimsByAddress[_add][_index];\n        status = claimsStatus[claimId];\n        coverid = allClaims[claimId].coverId;\n    }\n\n    /**\n     * @dev Gets Id of all the votes given to a claim.\n     * @param _claimId Claim Id.\n     * @return ca id of all the votes given by Claim assessors to a claim.\n     * @return mv id of all the votes given by members to a claim.\n     */ \n    function getAllVotesForClaim(\n        uint _claimId\n    )\n        external\n        view\n        returns(\n            uint claimId,\n            uint[] memory ca,\n            uint[] memory mv\n        )\n    {\n        return (_claimId, claimVoteCA[_claimId], claimVoteMember[_claimId]);\n    }\n\n    /** \n     * @dev Gets Number of tokens deposit in a vote using\n     * Claim assessor's address and claim id.\n     * @return tokens Number of deposited tokens.\n     */ \n    function getTokensClaim(\n        address _of,\n        uint _claimId\n    )\n        external\n        view\n        returns(\n            uint claimId,\n            uint tokens\n        )\n    {\n        return (_claimId, allvotes[userClaimVoteCA[_of][_claimId]].tokens);\n    }\n\n    /**\n     * @param _voter address of the voter.\n     * @return lastCAvoteIndex last index till which reward was distributed for CA\n     * @return lastMVvoteIndex last index till which reward was distributed for member\n     */ \n    function getRewardDistributedIndex(\n        address _voter\n    ) \n        external\n        view\n        returns(\n            uint lastCAvoteIndex,\n            uint lastMVvoteIndex\n        )\n    {\n        return (\n            voterVoteRewardReceived[_voter].lastCAvoteIndex,\n            voterVoteRewardReceived[_voter].lastMVvoteIndex\n        );\n    }\n\n    /**\n     * @param claimid claim id.\n     * @return perc_CA reward Percentage for claim assessor\n     * @return perc_MV reward Percentage for members\n     * @return tokens total tokens to be rewarded \n     */ \n    function getClaimRewardDetail(\n        uint claimid\n    ) \n        external\n        view\n        returns(\n            uint percCA,\n            uint percMV,\n            uint tokens\n        )\n    {\n        return (\n            claimRewardDetail[claimid].percCA,\n            claimRewardDetail[claimid].percMV,\n            claimRewardDetail[claimid].tokenToBeDist\n        );\n    }\n\n    /**\n     * @dev Gets cover id of a claim.\n     */ \n    function getClaimCoverId(uint _claimId) external view returns(uint claimId, uint coverid) {\n        return (_claimId, allClaims[_claimId].coverId);\n    }\n\n    /**\n     * @dev Gets total number of tokens staked during voting by Claim Assessors.\n     * @param _claimId Claim Id.\n     * @param _verdict 1 to get total number of accept tokens, -1 to get total number of deny tokens.\n     * @return token token Number of tokens(either accept or deny on the basis of verdict given as parameter).\n     */ \n    function getClaimVote(uint _claimId, int8 _verdict) external view returns(uint claimId, uint token) {\n        claimId = _claimId;\n        token = 0;\n        for (uint i = 0; i < claimVoteCA[_claimId].length; i++) {\n            if (allvotes[claimVoteCA[_claimId][i]].verdict == _verdict)\n                token = token.add(allvotes[claimVoteCA[_claimId][i]].tokens);\n        }\n    }\n\n    /**\n     * @dev Gets total number of tokens staked during voting by Members.\n     * @param _claimId Claim Id.\n     * @param _verdict 1 to get total number of accept tokens,\n     *  -1 to get total number of deny tokens.\n     * @return token token Number of tokens(either accept or \n     * deny on the basis of verdict given as parameter).\n     */ \n    function getClaimMVote(uint _claimId, int8 _verdict) external view returns(uint claimId, uint token) {\n        claimId = _claimId;\n        token = 0;\n        for (uint i = 0; i < claimVoteMember[_claimId].length; i++) {\n            if (allvotes[claimVoteMember[_claimId][i]].verdict == _verdict)\n                token = token.add(allvotes[claimVoteMember[_claimId][i]].tokens);\n        }\n    }\n\n    /**\n     * @param _voter address  of voteid\n     * @param index index to get voteid in CA\n     */ \n    function getVoteAddressCA(address _voter, uint index) external view returns(uint) {\n        return voteAddressCA[_voter][index];\n    }\n\n    /**\n     * @param _voter address  of voter\n     * @param index index to get voteid in member vote\n     */ \n    function getVoteAddressMember(address _voter, uint index) external view returns(uint) {\n        return voteAddressMember[_voter][index];\n    }\n\n    /**\n     * @param _voter address  of voter   \n     */ \n    function getVoteAddressCALength(address _voter) external view returns(uint) {\n        return voteAddressCA[_voter].length;\n    }\n\n    /**\n     * @param _voter address  of voter   \n     */ \n    function getVoteAddressMemberLength(address _voter) external view returns(uint) {\n        return voteAddressMember[_voter].length;\n    }\n\n    /**\n     * @dev Gets the Final result of voting of a claim.\n     * @param _claimId Claim id.\n     * @return verdict 1 if claim is accepted, -1 if declined.\n     */ \n    function getFinalVerdict(uint _claimId) external view returns(int8 verdict) {\n        return claimVote[_claimId];\n    }\n\n    /**\n     * @dev Get number of Claims queued for submission during emergency pause.\n     */ \n    function getLengthOfClaimSubmittedAtEP() external view returns(uint len) {\n        len = claimPause.length;\n    }\n\n    /**\n     * @dev Gets the index from which claim needs to be \n     * submitted when emergency pause is swithched off.\n     */ \n    function getFirstClaimIndexToSubmitAfterEP() external view returns(uint indexToSubmit) {\n        indexToSubmit = claimPauseLastsubmit;\n    }\n    \n    /**\n     * @dev Gets number of Claims to be reopened for voting post emergency pause period.\n     */ \n    function getLengthOfClaimVotingPause() external view returns(uint len) {\n        len = claimPauseVotingEP.length;\n    }\n\n    /**\n     * @dev Gets claim details to be reopened for voting after emergency pause.\n     */ \n    function getPendingClaimDetailsByIndex(\n        uint _index\n    )\n        external\n        view\n        returns(\n            uint claimId,\n            uint pendingTime,\n            bool voting\n        )\n    {\n        claimId = claimPauseVotingEP[_index].claimid;\n        pendingTime = claimPauseVotingEP[_index].pendingTime;\n        voting = claimPauseVotingEP[_index].voting;\n    }\n\n    /** \n     * @dev Gets the index from which claim needs to be reopened when emergency pause is swithched off.\n     */ \n    function getFirstClaimIndexToStartVotingAfterEP() external view returns(uint firstindex) {\n        firstindex = claimStartVotingFirstIndex;\n    }\n\n    /**\n     * @dev Updates Uint Parameters of a code\n     * @param code whose details we want to update\n     * @param val value to set\n     */\n    function updateUintParameters(bytes8 code, uint val) public {\n        require(ms.checkIsAuthToGoverned(msg.sender));\n        if (code == \"CAMAXVT\") {\n            _setMaxVotingTime(val * 1 hours);\n\n        } else if (code == \"CAMINVT\") {\n\n            _setMinVotingTime(val * 1 hours);\n\n        } else if (code == \"CAPRETRY\") {\n\n            _setPayoutRetryTime(val * 1 hours);\n\n        } else if (code == \"CADEPT\") {\n\n            _setClaimDepositTime(val * 1 days);\n\n        } else if (code == \"CAREWPER\") {\n\n            _setClaimRewardPerc(val);\n\n        } else if (code == \"CAMINTH\") {\n\n            _setMinVoteThreshold(val);\n\n        } else if (code == \"CAMAXTH\") {\n\n            _setMaxVoteThreshold(val);\n\n        } else if (code == \"CACONPER\") {\n\n            _setMajorityConsensus(val);\n\n        } else if (code == \"CAPAUSET\") {\n            _setPauseDaysCA(val * 1 days);\n        } else {\n\n            revert(\"Invalid param code\");\n        }\n    \n    }\n\n    /**\n     * @dev Iupgradable Interface to update dependent contract address\n     */\n    function changeDependentContractAddress() public onlyInternal {}\n\n    /**\n     * @dev Adds status under which a claim can lie.\n     * @param percCA reward percentage for claim assessor\n     * @param percMV reward percentage for members\n     */\n    function _pushStatus(uint percCA, uint percMV) internal {\n        rewardStatus.push(ClaimRewardStatus(percCA, percMV));\n    }\n\n    /**\n     * @dev adds reward incentive for all possible claim status for Claim assessors and members\n     */\n    function _addRewardIncentive() internal {\n        _pushStatus(0, 0); //0  Pending-Claim Assessor Vote\n        _pushStatus(0, 0); //1 Pending-Claim Assessor Vote Denied, Pending Member Vote\n        _pushStatus(0, 0); //2 Pending-CA Vote Threshold not Reached Accept, Pending Member Vote\n        _pushStatus(0, 0); //3 Pending-CA Vote Threshold not Reached Deny, Pending Member Vote\n        _pushStatus(0, 0); //4 Pending-CA Consensus not reached Accept, Pending Member Vote\n        _pushStatus(0, 0); //5 Pending-CA Consensus not reached Deny, Pending Member Vote\n        _pushStatus(100, 0); //6 Final-Claim Assessor Vote Denied\n        _pushStatus(100, 0); //7 Final-Claim Assessor Vote Accepted\n        _pushStatus(0, 100); //8 Final-Claim Assessor Vote Denied, MV Accepted\n        _pushStatus(0, 100); //9 Final-Claim Assessor Vote Denied, MV Denied\n        _pushStatus(0, 0); //10 Final-Claim Assessor Vote Accept, MV Nodecision\n        _pushStatus(0, 0); //11 Final-Claim Assessor Vote Denied, MV Nodecision\n        _pushStatus(0, 0); //12 Claim Accepted Payout Pending\n        _pushStatus(0, 0); //13 Claim Accepted No Payout \n        _pushStatus(0, 0); //14 Claim Accepted Payout Done\n    }\n\n    /**\n     * @dev Sets Maximum time(in seconds) for which claim assessment voting is open\n     */ \n    function _setMaxVotingTime(uint _time) internal {\n        maxVotingTime = _time;\n    }\n\n    /**\n     *  @dev Sets Minimum time(in seconds) for which claim assessment voting is open\n     */ \n    function _setMinVotingTime(uint _time) internal {\n        minVotingTime = _time;\n    }\n\n    /**\n     *  @dev Sets Minimum vote threshold required\n     */ \n    function _setMinVoteThreshold(uint val) internal {\n        minVoteThreshold = val;\n    }\n\n    /**\n     *  @dev Sets Maximum vote threshold required\n     */ \n    function _setMaxVoteThreshold(uint val) internal {\n        maxVoteThreshold = val;\n    }\n    \n    /**\n     *  @dev Sets the value considered as Majority Consenus in voting\n     */ \n    function _setMajorityConsensus(uint val) internal {\n        majorityConsensus = val;\n    }\n\n    /**\n     * @dev Sets the payout retry time\n     */ \n    function _setPayoutRetryTime(uint _time) internal {\n        payoutRetryTime = _time;\n    }\n\n    /**\n     *  @dev Sets percentage of reward given for claim assessment\n     */ \n    function _setClaimRewardPerc(uint _val) internal {\n\n        claimRewardPerc = _val;\n    }\n  \n    /** \n     * @dev Sets the time for which claim is deposited.\n     */ \n    function _setClaimDepositTime(uint _time) internal {\n\n        claimDepositTime = _time;\n    }\n\n    /**\n     *  @dev Sets number of days claim assessment will be paused\n     */ \n    function _setPauseDaysCA(uint val) internal {\n        pauseDaysCA = val;\n    }\n}\n",
  "bytecode": ""
}