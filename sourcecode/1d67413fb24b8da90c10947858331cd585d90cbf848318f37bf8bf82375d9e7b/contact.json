{
  "address": "0xaae81c0194d6459f320b70ca0cedf88e11a242ce",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "WorldWifi Token",
  "contractName": "WeToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-22\n*/\n\npragma solidity ^0.4.13;\n\ncontract Receiver {\n  function tokenFallback(address from, uint value, bytes data);\n}\n\n/*\n * ERC20 interface\n * see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n  uint public totalSupply;\n  function balanceOf(address who) public constant returns (uint);\n  function allowance(address owner, address spender) public constant returns (uint);\n\n  function transfer(address to, uint value) public returns (bool ok);\n  function transferFrom(address from, address to, uint value) public returns (bool ok);\n  function approve(address spender, uint value) public returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n  function safeMul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint a, uint b) internal returns (uint) {\n    assert(b > 0);\n    uint c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      revert();\n    }\n  }\n}\n\n\n\n/**\n * Standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\n *\n * Based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, SafeMath {\n  event Transfer(address indexed from, address indexed to, uint indexed value, bytes data);\n\n  /* Token supply got increased and a new owner received these tokens */\n  event Minted(address receiver, uint amount);\n\n  /* Actual balances of token holders */\n  mapping(address => uint) balances;\n\n  /* approve() allowances */\n  mapping (address => mapping (address => uint)) allowed;\n\n  /**\n   *\n   * Fix for the ERC20 short address attack\n   *\n   * http://vessenes.com/the-erc20-short-address-attack-explained/\n   */\n  modifier onlyPayloadSize(uint size) {\n     if(msg.data.length != size + 4) {\n       revert();\n     }\n     _;\n  }\n\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) public returns (bool success) {\n      bytes memory _empty;\n\n      return transfer(_to, _value, _empty);\n  }\n\n  function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n    balances[_to] = safeAdd(balances[_to], _value);\n    Transfer(msg.sender, _to, _value, _data);\n    Transfer(msg.sender, _to, _value);\n\n    if (isContract(_to)) {\n      Receiver(_to).tokenFallback(msg.sender, _value, _data);\n    }\n\n    return true;\n  }\n\n  // ERC223 fetch contract size (must be nonzero to be a contract)\n  function isContract( address _addr ) private returns (bool) {\n    uint length;\n    _addr = _addr;\n    assembly { length := extcodesize(_addr) }\n    return (length > 0);\n  }\n\n  function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n    uint _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because safeSub(_allowance, _value) will already throw if this condition is not met\n    // if (_value > _allowance) revert();\n\n    balances[_to] = safeAdd(balances[_to], _value);\n    balances[_from] = safeSub(balances[_from], _value);\n    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) public constant returns (uint balance) {\n    return balances[_owner];\n  }\n\n  function approve(address _spender, uint _value) public returns (bool success) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * Atomic increment of approved spending\n   *\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   */\n  function addApproval(address _spender, uint _addedValue) public\n  onlyPayloadSize(2 * 32)\n  returns (bool success) {\n      uint oldValue = allowed[msg.sender][_spender];\n      allowed[msg.sender][_spender] = safeAdd(oldValue, _addedValue);\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n      return true;\n  }\n\n  /**\n   * Atomic decrement of approved spending.\n   *\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   */\n  function subApproval(address _spender, uint _subtractedValue) public\n  onlyPayloadSize(2 * 32)\n  returns (bool success) {\n\n      uint oldVal = allowed[msg.sender][_spender];\n\n      if (_subtractedValue > oldVal) {\n          allowed[msg.sender][_spender] = 0;\n      } else {\n          allowed[msg.sender][_spender] = safeSub(oldVal, _subtractedValue);\n      }\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n      return true;\n  }\n\n}\n\n\n\ncontract BurnableToken is StandardToken {\n\n  address public constant BURN_ADDRESS = 0;\n\n  /** How many tokens we burned */\n  event Burned(address burner, uint burnedAmount);\n\n  /**\n   * Burn extra tokens from a balance.\n   *\n   */\n  function burn(uint burnAmount) public {\n    address burner = msg.sender;\n    balances[burner] = safeSub(balances[burner], burnAmount);\n    totalSupply = safeSub(totalSupply, burnAmount);\n    Burned(burner, burnAmount);\n  }\n}\n\n\n\n\n\n/**\n * Upgrade agent interface inspired by Lunyr.\n *\n * Upgrade agent transfers tokens to a new contract.\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\n */\ncontract UpgradeAgent {\n\n  uint public originalSupply;\n\n  /** Interface marker */\n  function isUpgradeAgent() public constant returns (bool) {\n    return true;\n  }\n\n  function upgradeFrom(address _from, uint256 _value) public;\n\n}\n\n\n/**\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n *\n * First envisioned by Golem and Lunyr projects.\n */\ncontract UpgradeableToken is StandardToken {\n\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n  address public upgradeMaster;\n\n  /** The next contract where the tokens will be migrated. */\n  UpgradeAgent public upgradeAgent;\n\n  /** How many tokens we have upgraded by now. */\n  uint256 public totalUpgraded;\n\n  /**\n   * Upgrade states.\n   *\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\n   *\n   */\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n\n  /**\n   * Somebody has upgraded some of his tokens.\n   */\n  event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n\n  /**\n   * New upgrade agent available.\n   */\n  event UpgradeAgentSet(address agent);\n\n  /**\n   * Do not allow construction without upgrade master set.\n   */\n  function UpgradeableToken(address _upgradeMaster) public {\n    upgradeMaster = _upgradeMaster;\n  }\n\n  /**\n   * Allow the token holder to upgrade some of their tokens to a new contract.\n   */\n  function upgrade(uint256 value) public {\n\n      UpgradeState state = getUpgradeState();\n      if(!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)) {\n        // Called in a bad state\n        revert();\n      }\n\n      // Validate input value.\n      if (value == 0) revert();\n\n      balances[msg.sender] = safeSub(balances[msg.sender], value);\n\n      // Take tokens out from circulation\n      totalSupply = safeSub(totalSupply, value);\n      totalUpgraded = safeAdd(totalUpgraded, value);\n\n      // Upgrade agent reissues the tokens\n      upgradeAgent.upgradeFrom(msg.sender, value);\n      Upgrade(msg.sender, upgradeAgent, value);\n  }\n\n  /**\n   * Set an upgrade agent that handles\n   */\n  function setUpgradeAgent(address agent) external {\n\n      if(!canUpgrade()) {\n        // The token is not yet in a state that we could think upgrading\n        revert();\n      }\n\n      if (agent == 0x0) revert();\n      // Only a master can designate the next agent\n      if (msg.sender != upgradeMaster) revert();\n      // Upgrade has already begun for an agent\n      if (getUpgradeState() == UpgradeState.Upgrading) revert();\n\n      upgradeAgent = UpgradeAgent(agent);\n\n      // Bad interface\n      if(!upgradeAgent.isUpgradeAgent()) revert();\n      // Make sure that token supplies match in source and target\n      if (upgradeAgent.originalSupply() != totalSupply) revert();\n\n      UpgradeAgentSet(upgradeAgent);\n  }\n\n  /**\n   * Get the state of the token upgrade.\n   */\n  function getUpgradeState() public constant returns(UpgradeState) {\n    if(!canUpgrade()) return UpgradeState.NotAllowed;\n    else if(address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n    else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n    else return UpgradeState.Upgrading;\n  }\n\n  /**\n   * Change the upgrade master.\n   *\n   * This allows us to set a new owner for the upgrade mechanism.\n   */\n  function setUpgradeMaster(address master) public {\n      if (master == 0x0) revert();\n      if (msg.sender != upgradeMaster) revert();\n      upgradeMaster = master;\n  }\n\n  /**\n   * Child contract can enable to provide the condition when the upgrade can begun.\n   */\n  function canUpgrade() public constant returns(bool) {\n     return true;\n  }\n\n}\n\n\ncontract WeToken is BurnableToken, UpgradeableToken {\n\n  string public name;\n  string public symbol;\n  uint public decimals;\n  address public owner;\n\n  bool public mintingFinished = false;\n\n  mapping(address => uint) public previligedBalances;\n\n  /** List of agents that are allowed to create new tokens */\n  mapping(address => bool) public mintAgents;\n  event MintingAgentChanged(address addr, bool state);\n\n  modifier onlyOwner() {\n    if(msg.sender != owner) revert();\n    _;\n  }\n\n  modifier onlyMintAgent() {\n    // Only crowdsale contracts are allowed to mint new tokens\n    if(!mintAgents[msg.sender]) revert();\n    _;\n  }\n\n  /** Make sure we are not done yet. */\n  modifier canMint() {\n    if(mintingFinished) revert();\n    _;\n  }\n\n  modifier onlyNotSame(address _from, address _to) {\n    if(_from == _to) revert();\n    _;\n  }\n\n  function transferOwnership(address newOwner) public onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n  function WeToken(address _owner, string _name, string _symbol, uint _totalSupply, uint _decimals) public UpgradeableToken(_owner) {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n    totalSupply = _totalSupply * 10 ** uint(decimals);\n\n    // Allocate initial balance to the owner\n    balances[_owner] = totalSupply;\n\n    // save the owner\n    owner = _owner;\n  }\n\n  function mintingFinish() public onlyOwner {\n    mintingFinished = true;\n  }\n\n  // privileged transfer\n  function transferPrivileged(address _to, uint _value) public onlyOwner returns (bool success) {\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n    balances[_to] = safeAdd(balances[_to], _value);\n    previligedBalances[_to] = safeAdd(previligedBalances[_to], _value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  // get priveleged balance\n  function getPrivilegedBalance(address _owner) public constant returns (uint balance) {\n    return previligedBalances[_owner];\n  }\n\n  // admin only can transfer from the privileged accounts\n  function transferFromPrivileged(address _from, address _to, uint _value) public onlyOwner onlyNotSame(_from, _to) returns (bool success) {\n    uint availablePrevilegedBalance = previligedBalances[_from];\n\n    balances[_from] = safeSub(balances[_from], _value);\n    balances[_to] = safeAdd(balances[_to], _value);\n    previligedBalances[_from] = safeSub(availablePrevilegedBalance, _value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * Create new tokens and allocate them to an address..\n   *\n   * Only callably by a crowdsale contract (mint agent).\n   */\n  function mint(address receiver, uint amount) onlyMintAgent canMint public {\n    amount *= 10 ** uint(decimals);\n    totalSupply = safeAdd(totalSupply, amount);\n    balances[receiver] = safeAdd(balances[receiver], amount);\n\n    // This will make the mint transaction apper in EtherScan.io\n    // We can remove this after there is a standardized minting event\n    Transfer(0, receiver, amount);\n  }\n\n  /**\n   * Owner can allow a crowdsale contract to mint new tokens.\n   */\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n    mintAgents[addr] = state;\n    MintingAgentChanged(addr, state);\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferPrivileged\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintingFinish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setMintAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromPrivileged\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpgradeState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"previligedBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getPrivilegedBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"addApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setUpgradeAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"subApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"master\",\"type\":\"address\"}],\"name\":\"setUpgradeMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"MintingAgentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"burnedAmount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040526009805460a060020a60ff02191690553480156200002157600080fd5b50604051620018d3380380620018d38339810160409081528151602080840151928401516060850151608086015160038054600160a060020a031916600160a060020a03871617905594860180519496909592019390926200008991600691870190620000e2565b5082516200009f906007906020860190620000e2565b506008819055600a0a026000818155600160a060020a039094168085526001602052604090942055505060098054600160a060020a031916909117905562000187565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200012557805160ff191683800117855562000155565b8280016001018555821562000155579182015b828111156200015557825182559160200191906001019062000138565b506200016392915062000167565b5090565b6200018491905b808211156200016357600081556001016200016e565b90565b61173c80620001976000396000f3006080604052600436106101875763ffffffff60e060020a60003504166305d2035b811461018c57806306fdde03146101b5578063095ea7b31461023f57806318160ddd146102635780631a017f3f1461028a57806323b872dd146102ae578063313ce567146102d85780633ba8c9a7146102ed57806340c10f191461030457806342966c681461032857806342c1867b14610340578063432146751461036157806345977d03146103875780635d3171d91461039f5780635de4ccb0146103c9578063600440cb146103fa57806370a082311461040f5780638444b391146104305780638c133a77146104695780638da5cb5b1461048a57806395d89b411461049f5780639738968c146104b4578063a9059cbb146104c9578063ab7e9dca146104ed578063ac3cb72c1461050e578063be45fd6214610532578063c752ff621461059b578063d7e7088a146105b0578063dd62ed3e146105d1578063e2301d02146105f8578063f2fde38b1461061c578063fccc28131461063d578063ffeb7d7514610652575b600080fd5b34801561019857600080fd5b506101a1610673565b604080519115158252519081900360200190f35b3480156101c157600080fd5b506101ca610694565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102045781810151838201526020016101ec565b50505050905090810190601f1680156102315780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024b57600080fd5b506101a1600160a060020a0360043516602435610722565b34801561026f57600080fd5b506102786107c7565b60408051918252519081900360200190f35b34801561029657600080fd5b506101a1600160a060020a03600435166024356107cd565b3480156102ba57600080fd5b506101a1600160a060020a03600435811690602435166044356108bb565b3480156102e457600080fd5b506102786109aa565b3480156102f957600080fd5b506103026109b0565b005b34801561031057600080fd5b50610302600160a060020a0360043516602435610a02565b34801561033457600080fd5b50610302600435610ad2565b34801561034c57600080fd5b506101a1600160a060020a0360043516610b68565b34801561036d57600080fd5b50610302600160a060020a03600435166024351515610b7d565b34801561039357600080fd5b50610302600435610c24565b3480156103ab57600080fd5b506101a1600160a060020a0360043581169060243516604435610d9f565b3480156103d557600080fd5b506103de610eb8565b60408051600160a060020a039092168252519081900360200190f35b34801561040657600080fd5b506103de610ec7565b34801561041b57600080fd5b50610278600160a060020a0360043516610ed6565b34801561043c57600080fd5b50610445610ef1565b6040518082600481111561045557fe5b60ff16815260200191505060405180910390f35b34801561047557600080fd5b50610278600160a060020a0360043516610f3b565b34801561049657600080fd5b506103de610f4d565b3480156104ab57600080fd5b506101ca610f5c565b3480156104c057600080fd5b506101a1610fb7565b3480156104d557600080fd5b506101a1600160a060020a0360043516602435610fbc565b3480156104f957600080fd5b50610278600160a060020a0360043516610fe3565b34801561051a57600080fd5b506101a1600160a060020a0360043516602435610ffe565b34801561053e57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101a1948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506110ae9650505050505050565b3480156105a757600080fd5b506102786112f2565b3480156105bc57600080fd5b50610302600160a060020a03600435166112f8565b3480156105dd57600080fd5b50610278600160a060020a03600435811690602435166114e0565b34801561060457600080fd5b506101a1600160a060020a036004351660243561150b565b34801561062857600080fd5b50610302600160a060020a03600435166115ea565b34801561064957600080fd5b506103de611640565b34801561065e57600080fd5b50610302600160a060020a0360043516611645565b60095474010000000000000000000000000000000000000000900460ff1681565b6006805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561071a5780601f106106ef5761010080835404028352916020019161071a565b820191906000526020600020905b8154815290600101906020018083116106fd57829003601f168201915b505050505081565b600081158015906107575750600160a060020a0333811660009081526002602090815260408083209387168352929052205415155b1561076157600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294825291829020869055815186815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350600192915050565b60005481565b60095460009033600160a060020a039081169116146107eb57600080fd5b600160a060020a03331660009081526001602052604090205461080e90836116a4565b600160a060020a03338116600090815260016020526040808220939093559085168152205461083d90836116b8565b600160a060020a038416600090815260016020908152604080832093909355600a9052205461086c90836116b8565b600160a060020a038085166000818152600a60209081526040918290209490945580518681529051919333909316926000805160206116f183398151915292918290030190a350600192915050565b600160a060020a0380841660009081526002602090815260408083203385168452825280832054938616835260019091528120549091906108fc90846116b8565b600160a060020a03808616600090815260016020526040808220939093559087168152205461092b90846116a4565b600160a060020a03861660009081526001602052604090205561094e81846116a4565b600160a060020a038087166000818152600260209081526040808320338616845282529182902094909455805187815290519288169391926000805160206116f1833981519152929181900390910190a3506001949350505050565b60085481565b60095433600160a060020a039081169116146109cb57600080fd5b6009805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055565b600160a060020a0333166000908152600b602052604090205460ff161515610a2957600080fd5b60095474010000000000000000000000000000000000000000900460ff1615610a5157600080fd5b600854600a0a81029050610a67600054826116b8565b6000908155600160a060020a038316815260016020526040902054610a8c90826116b8565b600160a060020a03831660008181526001602090815260408083209490945583518581529351929391926000805160206116f18339815191529281900390910190a35050565b33600160a060020a038116600090815260016020526040902054610af690836116a4565b600160a060020a03821660009081526001602052604081209190915554610b1d90836116a4565b60005560408051600160a060020a03831681526020810184905281517f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df7929181900390910190a15050565b600b6020526000908152604090205460ff1681565b60095433600160a060020a03908116911614610b9857600080fd5b60095474010000000000000000000000000000000000000000900460ff1615610bc057600080fd5b600160a060020a0382166000818152600b6020908152604091829020805460ff191685151590811790915582519384529083015280517f4b0adf6c802794c7dde28a08a4e07131abcff3bf9603cd71f14f90bec7865efa9281900390910190a15050565b6000610c2e610ef1565b90506003816004811115610c3e57fe5b1480610c5557506004816004811115610c5357fe5b145b1515610c6057600080fd5b811515610c6c57600080fd5b600160a060020a033316600090815260016020526040902054610c8f90836116a4565b600160a060020a03331660009081526001602052604081209190915554610cb690836116a4565b600055600554610cc690836116b8565b60055560048054604080517f753e88e5000000000000000000000000000000000000000000000000000000008152600160a060020a0333811694820194909452602481018690529051929091169163753e88e59160448082019260009290919082900301818387803b158015610d3b57600080fd5b505af1158015610d4f573d6000803e3d6000fd5b5050600454604080518681529051600160a060020a0392831694503390921692507f7e5c344a8141a805725cb476f76c6953b842222b967edd1f78ddb6e8b3f397ac919081900360200190a35050565b600954600090819033600160a060020a03908116911614610dbf57600080fd5b848480600160a060020a031682600160a060020a03161415610de057600080fd5b600160a060020a0387166000908152600a6020908152604080832054600190925290912054909350610e1290866116a4565b600160a060020a038089166000908152600160205260408082209390935590881681522054610e4190866116b8565b600160a060020a038716600090815260016020526040902055610e6483866116a4565b600160a060020a038089166000818152600a60209081526040918290209490945580518981529051928a169391926000805160206116f1833981519152929181900390910190a35060019695505050505050565b600454600160a060020a031681565b600354600160a060020a031681565b600160a060020a031660009081526001602052604090205490565b6000610efb610fb7565b1515610f0957506001610f38565b600454600160a060020a03161515610f2357506002610f38565b6005541515610f3457506003610f38565b5060045b90565b600a6020526000908152604090205481565b600954600160a060020a031681565b6007805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561071a5780601f106106ef5761010080835404028352916020019161071a565b600190565b60006060604036604414610fcf57600080fd5b610fda8585846110ae565b95945050505050565b600160a060020a03166000908152600a602052604090205490565b60008060403660441461101057600080fd5b600160a060020a03338116600090815260026020908152604080832093891683529290522054915061104282856116b8565b600160a060020a033381166000818152600260209081526040808320948b168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3506001949350505050565b600160a060020a0333166000908152600160205260408120546110d190846116a4565b600160a060020a03338116600090815260016020526040808220939093559086168152205461110090846116b8565b600160a060020a0380861660008181526001602090815260408083209590955584518181528751818301528751899694953316947fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16948a94849392840192908601918190849084905b83811015611181578181015183820152602001611169565b50505050905090810190601f1680156111ae5780820380516001836020036101000a031916815260200191505b509250505060405180910390a483600160a060020a031633600160a060020a03166000805160206116f1833981519152856040518082815260200191505060405180910390a36111fd846116dc565b156112e85783600160a060020a031663c0ee0b8a3385856040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611281578181015183820152602001611269565b50505050905090810190601f1680156112ae5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156112cf57600080fd5b505af11580156112e3573d6000803e3d6000fd5b505050505b5060019392505050565b60055481565b611300610fb7565b151561130b57600080fd5b600160a060020a038116151561132057600080fd5b60035433600160a060020a0390811691161461133b57600080fd5b6004611345610ef1565b600481111561135057fe5b141561135b57600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117808355604080517f61d3d7a6000000000000000000000000000000000000000000000000000000008152905191909216926361d3d7a6928082019260209290918290030181600087803b1580156113db57600080fd5b505af11580156113ef573d6000803e3d6000fd5b505050506040513d602081101561140557600080fd5b5051151561141257600080fd5b600054600460009054906101000a9004600160a060020a0316600160a060020a0316634b2ba0dd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561146857600080fd5b505af115801561147c573d6000803e3d6000fd5b505050506040513d602081101561149257600080fd5b50511461149e57600080fd5b60045460408051600160a060020a039092168252517f7845d5aa74cc410e35571258d954f23b82276e160fe8c188fa80566580f279cc9181900360200190a150565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60008060403660441461151d57600080fd5b600160a060020a0333811660009081526002602090815260408083209389168352929052205491508184111561157a57600160a060020a033381166000908152600260209081526040808320938916835292905290812055611584565b61104282856116a4565b600160a060020a033381166000818152600260209081526040808320948a168084529482529182902054825190815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3506001949350505050565b60095433600160a060020a0390811691161461160557600080fd5b600160a060020a0381161561163d576009805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b600081565b600160a060020a038116151561165a57600080fd5b60035433600160a060020a0390811691161461167557600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60006116b2838311156116e4565b50900390565b60008282016116d58482108015906116d05750838210155b6116e4565b9392505050565b6000903b1190565b80151561163d57600080fd00ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820a82ba4dd9b7e51d85637c6f1e4d75b6111f8174e8457b7b71ad65d2cb645258f0029000000000000000000000000e2186aeb756d6f8bc3acd2a22578a5e1c1eb8c7200000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000023c34600000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000075765546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025754000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000e2186aeb756d6f8bc3acd2a22578a5e1c1eb8c7200000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000023c34600000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000075765546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025754000000000000000000000000000000000000000000000000000000000000"
}