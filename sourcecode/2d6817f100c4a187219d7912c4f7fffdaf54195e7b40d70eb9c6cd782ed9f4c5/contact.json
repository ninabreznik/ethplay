{
  "address": "0xCDD1F32CE272C7291714d5D90c4d0f6041AFECA7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Usdcoins",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-21\n*/\n\npragma solidity ^0.4.17;\n\nlibrary SafeMathMod { // Partial SafeMath Library\n\n    function mul(uint256 a, uint256 b) constant internal returns(uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) constant internal returns(uint256) {\n        assert(b != 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns(uint256 c) {\n        require((c = a - b) < a);\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns(uint256 c) {\n        require((c = a + b) > a);\n    }\n}\n\ncontract Usdcoins { //is inherently ERC20\n    using SafeMathMod\n    for uint256;\n\n    /**\n     * @constant name The name of the token\n     * @constant symbol  The symbol used to display the currency\n     * @constant decimals  The number of decimals used to dispay a balance\n     * @constant totalSupply The total number of tokens times 10^ of the number of decimals\n     * @constant MAX_UINT256 Magic number for unlimited allowance\n     * @storage balanceOf Holds the balances of all token holders\n     * @storage allowed Holds the allowable balance to be transferable by another address.\n     */\n\n    address owner;\n\n\n\n    string constant public name = \"USDC\";\n\n    string constant public symbol = \"USDC\";\n\n    uint256 constant public decimals = 18;\n\n    uint256 constant public totalSupply = 100000000e18;\n\n    uint256 constant private MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowed;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    event TransferFrom(address indexed _spender, address indexed _from, address indexed _to, uint256 _value);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    function() payable {\n        revert();\n    }\n\n    function Usdcoins() public {\n        balanceOf[msg.sender] = totalSupply;\n        owner = msg.sender;\n    }\n\n\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n\n\n    /**\n     * @dev function that sells available tokens\n     */\n\n\n    function transfer(address _to, uint256 _value) public returns(bool success) {\n        /* Ensures that tokens are not sent to address \"0x0\" */\n        require(_to != address(0));\n        /* Prevents sending tokens directly to contracts. */\n\n\n        /* SafeMathMOd.sub will throw if there is not enough balance and if the transfer value is 0. */\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value The amount of token to be transferred\n     * @return Whether the transfer was successful or not\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {\n        /* Ensures that tokens are not sent to address \"0x0\" */\n        require(_to != address(0));\n        /* Ensures tokens are not sent to this contract */\n\n\n        uint256 allowance = allowed[_from][msg.sender];\n        /* Ensures sender has enough available allowance OR sender is balance holder allowing single transsaction send to contracts*/\n        require(_value <= allowance || _from == msg.sender);\n\n        /* Use SafeMathMod to add and subtract from the _to and _from addresses respectively. Prevents under/overflow and 0 transfers */\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n\n        /* Only reduce allowance if not MAX_UINT256 in order to save gas on unlimited allowance */\n        /* Balance holder does not need allowance to send from self. */\n        if (allowed[_from][msg.sender] != MAX_UINT256 && _from != msg.sender) {\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        }\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer the specified amounts of tokens to the specified addresses.\n     * @dev Be aware that there is no check for duplicate recipients.\n     *\n     * @param _toAddresses Receiver addresses.\n     * @param _amounts Amounts of tokens that will be transferred.\n     */\n    function multiPartyTransfer(address[] _toAddresses, uint256[] _amounts) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255);\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length);\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            transfer(_toAddresses[i], _amounts[i]);\n        }\n    }\n\n    /**\n     * @dev Transfer the specified amounts of tokens to the specified addresses from authorized balance of sender.\n     * @dev Be aware that there is no check for duplicate recipients.\n     *\n     * @param _from The address of the sender\n     * @param _toAddresses The addresses of the recipients (MAX 255)\n     * @param _amounts The amounts of tokens to be transferred\n     */\n    function multiPartyTransferFrom(address _from, address[] _toAddresses, uint256[] _amounts) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255);\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length);\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            transferFrom(_from, _toAddresses[i], _amounts[i]);\n        }\n    }\n\n    /**\n     * @notice `msg.sender` approves `_spender` to spend `_value` tokens\n     *\n     * @param _spender The address of the account able to transfer the tokens\n     * @param _value The amount of tokens to be approved for transfer\n     * @return Whether the approval was successful or not\n     */\n    function approve(address _spender, uint256 _value) public returns(bool success) {\n        /* Ensures address \"0x0\" is not assigned allowance. */\n        require(_spender != address(0));\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @param _owner The address of the account owning tokens\n     * @param _spender The address of the account able to transfer the tokens\n     * @return Amount of remaining tokens allowed to spent\n     */\n    function allowance(address _owner, address _spender) public view returns(uint256 remaining) {\n        remaining = allowed[_owner][_spender];\n    }\n\n    function isNotContract(address _addr) private view returns(bool) {\n        uint length;\n        assembly {\n            /* retrieve the size of the code on target address, this needs assembly */\n            length: = extcodesize(_addr)\n        }\n        return (length == 0);\n    }\n\n}",
  "bytecode": "6060604052341561000f57600080fd5b6a52b7d2dcc80cd2e4000000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611016806100ad6000396000f300606060405236156100b8576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100bd578063095ea7b31461014b57806318160ddd146101a557806323b872dd146101ce578063313ce567146102475780635c658165146102705780636e96433f146102dc57806370a082311461039557806395d89b41146103e2578063a9059cbb14610470578063b22c14c7146104ca578063dd62ed3e14610564575b600080fd5b34156100c857600080fd5b6100d06105d0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101105780820151818401526020810190506100f5565b50505050905090810190601f16801561013d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015657600080fd5b61018b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610609565b604051808215151515815260200191505060405180910390f35b34156101b057600080fd5b6101b8610736565b6040518082815260200191505060405180910390f35b34156101d957600080fd5b61022d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610745565b604051808215151515815260200191505060405180910390f35b341561025257600080fd5b61025a610bd0565b6040518082815260200191505060405180910390f35b341561027b57600080fd5b6102c6600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610bd5565b6040518082815260200191505060405180910390f35b34156102e757600080fd5b610393600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050610bfa565b005b34156103a057600080fd5b6103cc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c81565b6040518082815260200191505060405180910390f35b34156103ed57600080fd5b6103f5610c99565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561043557808201518184015260208101905061041a565b50505050905090810190601f1680156104625780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561047b57600080fd5b6104b0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610cd2565b604051808215151515815260200191505060405180910390f35b34156104d557600080fd5b61056260048080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050610ea8565b005b341561056f57600080fd5b6105ba600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f2d565b6040518082815260200191505060405180910390f35b6040805190810160405280600481526020017f555344430000000000000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561064657600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6a52b7d2dcc80cd2e400000081565b600080600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561078457600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311158061083d57503373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b151561084857600080fd5b61089a83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fb490919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061092f83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fcf90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414158015610a4a57503373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b15610b5f57610ade83600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fcf90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b601281565b6002602052816000526040600020602052806000526040600020600091509150505481565b600060ff835111151515610c0d57600080fd5b81518351141515610c1d57600080fd5b600090505b82518160ff161015610c7b57610c6d84848360ff16815181101515610c4357fe5b90602001906020020151848460ff16815181101515610c5e57fe5b90602001906020020151610745565b508080600101915050610c22565b50505050565b60016020528060005260406000206000915090505481565b6040805190810160405280600481526020017f555344430000000000000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610d0f57600080fd5b610d6182600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fcf90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610df682600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fb490919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600060ff835111151515610ebb57600080fd5b81518351141515610ecb57600080fd5b600090505b82518160ff161015610f2857610f1a838260ff16815181101515610ef057fe5b90602001906020020151838360ff16815181101515610f0b57fe5b90602001906020020151610cd2565b508080600101915050610ed0565b505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600082828401915081111515610fc957600080fd5b92915050565b600082828403915081101515610fe457600080fd5b929150505600a165627a7a72305820fad36a1a0ec5726c724034fb7ca2dcb1070ae05e9570e6ab5a9ee785a0cf71390029"
}