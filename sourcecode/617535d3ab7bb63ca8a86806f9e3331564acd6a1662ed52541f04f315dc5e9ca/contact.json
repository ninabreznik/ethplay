{
  "address": "0x36daecfc172fd44a165fb93be5569e72b09ceea2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Winsshar",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-17\n*/\n\npragma solidity 0.4.16;\n\ncontract SafeMath{\n\n  \n\n  function safeMul(uint256 a, uint256 b) internal returns (uint256){\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal returns (uint256){\n    \n    return a / b;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal returns (uint256){\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256){\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  \n  modifier onlyPayloadSize(uint numWords){\n     assert(msg.data.length >= numWords * 32 + 4);\n     _;\n  }\n\n}\n\ncontract Token{ \n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    function balanceOf(address _owner) constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n    function approve(address _spender, uint256 _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n\n}\n\n\ncontract StandardToken is Token, SafeMath{\n\n\n\n    function transfer(address _to, uint256 _value) public returns (bool success){\n        require(_to != address(0));\n        require(balances[msg.sender] >= _value && _value > 0);\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n        balances[_to] = safeAdd(balances[_to], _value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3) returns (bool success){\n        require(_to != address(0));\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\n        balances[_from] = safeSub(balances[_from], _value);\n        balances[_to] = safeAdd(balances[_to], _value);\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance){\n        return balances[_owner];\n    }\n\n    \n    function approve(address _spender, uint256 _value) onlyPayloadSize(2) returns (bool success){\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function changeApproval(address _spender, uint256 _oldValue, uint256 _newValue) onlyPayloadSize(3) returns (bool success){\n        require(allowed[msg.sender][_spender] == _oldValue);\n        allowed[msg.sender][_spender] = _newValue;\n        Approval(msg.sender, _spender, _newValue);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining){\n        return allowed[_owner][_spender];\n    }\n\n    \n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n}\n\ncontract Winsshar is StandardToken {\n\n    string public name = \"Winsshar\";\n    string public symbol = \"WSR\";\n    uint256 public decimals = 6;\n    uint256 public maxSupply = 100000000000000000;\n    uint256 public totalSupply = 1000000000000000;\n    uint256 public administrativeSupply = 20000000000000;\n    address owner;\n    address admin;\n\n    mapping (uint256 => address) public downloaders;\n    uint256 public numberOfDownloaders;\n\n    function Winsshar (address administrativeAddress) {\n        numberOfDownloaders=0;\n        owner = msg.sender;\n        balances[owner] = totalSupply;\n        admin = administrativeAddress;\n        balances[administrativeAddress] = administrativeSupply;\n    }\n\n    modifier checkNumberOfDownloaders {\n        require(numberOfDownloaders <= 1000000);\n        _;\n\n    }\n\n    modifier checkOwner {\n      require(owner == msg.sender);\n      _;\n    }\n\n     modifier checkAdmin {\n      require(admin == msg.sender);\n      _;\n    }\n\n    function giveReward(address awardee) public checkNumberOfDownloaders checkOwner {\n        require(awardee != address(0));\n        numberOfDownloaders++;\n        downloaders[numberOfDownloaders]=awardee;\n        transfer(awardee,10000000);\n\n    }\n\n    function transferDuringIntialOffer(address to, uint256 tokens) public checkNumberOfDownloaders {\n        require(tokens <= 2000);\n        transfer(to,tokens);\n    }\n\n    function administrativePayouts(address to, uint tokens) public checkAdmin {\n        require(to != address(0));\n        transfer(to,tokens);\n    }\n\n    function ownership(address newOwner) public checkOwner {\n        owner = newOwner;\n        balances[owner] = balances[msg.sender];\n        balances[msg.sender] = 0;\n    }\n\n\n    function mintTokens(uint256 addSupply) public checkOwner {\n        require(maxSupply-administrativeSupply >= totalSupply+addSupply);\n        totalSupply = safeAdd(totalSupply,addSupply);\n        balances[owner] = safeAdd(balances[owner],addSupply);\n\n    }\n\n    function burnTokens(uint256 subSupply) public checkOwner{\n        require(totalSupply-subSupply >= 0);\n        totalSupply = safeSub(totalSupply,subSupply);\n        balances[owner] = safeSub(balances[owner],subSupply);\n\n    }\n\n    function() payable {\n        require(tx.origin == msg.sender);\n\n    }\n\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000f0e78bd0b67073c2c6edd81a83825bfad308cac4"
}