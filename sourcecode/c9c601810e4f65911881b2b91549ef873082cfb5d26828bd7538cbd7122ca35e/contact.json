{
  "address": "0x1f7f65b220a0f2d48b28390380f57468e7a382fe",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NameTAOPosition",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\npragma solidity >=0.5.4 <0.6.0;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n\t/**\n\t * @dev Multiplies two numbers, throws on overflow.\n\t */\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tc = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Integer division of two numbers, truncating the quotient.\n\t */\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\t// uint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn a / b;\n\t}\n\n\t/**\n\t * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n\t */\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\t/**\n\t * @dev Adds two numbers, throws on overflow.\n\t */\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\tc = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\n\n\n\n\ncontract TokenERC20 {\n\t// Public variables of the token\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals = 18;\n\t// 18 decimals is the strongly suggested default, avoid changing it\n\tuint256 public totalSupply;\n\n\t// This creates an array with all balances\n\tmapping (address => uint256) public balanceOf;\n\tmapping (address => mapping (address => uint256)) public allowance;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\t// This notifies clients about the amount burnt\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * Constructor function\n\t *\n\t * Initializes contract with initial supply tokens to the creator of the contract\n\t */\n\tconstructor (uint256 initialSupply, string memory tokenName, string memory tokenSymbol) public {\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n\t\tname = tokenName;                                   // Set the name for display purposes\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\n\t}\n\n\t/**\n\t * Internal transfer, only can be called by this contract\n\t */\n\tfunction _transfer(address _from, address _to, uint _value) internal {\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(_to != address(0));\n\t\t// Check if the sender has enough\n\t\trequire(balanceOf[_from] >= _value);\n\t\t// Check for overflows\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\n\t\t// Save this for an assertion in the future\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t\t// Subtract from the sender\n\t\tbalanceOf[_from] -= _value;\n\t\t// Add the same to the recipient\n\t\tbalanceOf[_to] += _value;\n\t\temit Transfer(_from, _to, _value);\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\t}\n\n\t/**\n\t * Transfer tokens\n\t *\n\t * Send `_value` tokens to `_to` from your account\n\t *\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n\t\t_transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Transfer tokens from other address\n\t *\n\t * Send `_value` tokens to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\n\t\tallowance[_from][msg.sender] -= _value;\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t */\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\tallowance[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address and notify\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t * @param _extraData some extra information to send to the approved contract\n\t */\n\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n\t\ttokenRecipient spender = tokenRecipient(_spender);\n\t\tif (approve(_spender, _value)) {\n\t\t\tspender.receiveApproval(msg.sender, _value, address(this), _extraData);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Destroy tokens\n\t *\n\t * Remove `_value` tokens from the system irreversibly\n\t *\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burn(uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\n\t\ttotalSupply -= _value;                      // Updates totalSupply\n\t\temit Burn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Destroy tokens from other account\n\t *\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n\t\ttotalSupply -= _value;                              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n}\n\n\ninterface INameAccountRecovery {\n\tfunction isCompromised(address _id) external view returns (bool);\n}\n\n\ninterface INameTAOPosition {\n\tfunction senderIsAdvocate(address _sender, address _id) external view returns (bool);\n\tfunction senderIsListener(address _sender, address _id) external view returns (bool);\n\tfunction senderIsSpeaker(address _sender, address _id) external view returns (bool);\n\tfunction senderIsPosition(address _sender, address _id) external view returns (bool);\n\tfunction getAdvocate(address _id) external view returns (address);\n\tfunction nameIsAdvocate(address _nameId, address _id) external view returns (bool);\n\tfunction nameIsPosition(address _nameId, address _id) external view returns (bool);\n\tfunction initialize(address _id, address _advocateId, address _listenerId, address _speakerId) external returns (bool);\n\tfunction determinePosition(address _sender, address _id) external view returns (uint256);\n}\n\n\ninterface INameFactory {\n\tfunction nonces(address _nameId) external view returns (uint256);\n\tfunction incrementNonce(address _nameId) external returns (uint256);\n\tfunction ethAddressToNameId(address _ethAddress) external view returns (address);\n\tfunction setNameNewAddress(address _id, address _newAddress) external returns (bool);\n\tfunction nameIdToEthAddress(address _nameId) external view returns (address);\n}\n\n\n\n\n\n/**\n * @title TAO\n */\ncontract TAO {\n\tusing SafeMath for uint256;\n\n\taddress public vaultAddress;\n\tstring public name;\t\t\t\t// the name for this TAO\n\taddress public originId;\t\t// the ID of the Name that created this TAO. If Name, it's the eth address\n\n\t// TAO's data\n\tstring public datHash;\n\tstring public database;\n\tstring public keyValue;\n\tbytes32 public contentId;\n\n\t/**\n\t * 0 = TAO\n\t * 1 = Name\n\t */\n\tuint8 public typeId;\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _vaultAddress\n\t) public {\n\t\tname = _name;\n\t\toriginId = _originId;\n\t\tdatHash = _datHash;\n\t\tdatabase = _database;\n\t\tkeyValue = _keyValue;\n\t\tcontentId = _contentId;\n\n\t\t// Creating TAO\n\t\ttypeId = 0;\n\n\t\tvaultAddress = _vaultAddress;\n\t}\n\n\t/**\n\t * @dev Checks if calling address is Vault contract\n\t */\n\tmodifier onlyVault {\n\t\trequire (msg.sender == vaultAddress);\n\t\t_;\n\t}\n\n\t/**\n\t * Will receive any ETH sent\n\t */\n\tfunction () external payable {\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ETH from this TAO to `_recipient`\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\t_recipient.transfer(_amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ERC20 Token from this TAO to `_recipient`\n\t * @param _erc20TokenAddress The address of ERC20 Token\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferERC20(address _erc20TokenAddress, address _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\tTokenERC20 _erc20 = TokenERC20(_erc20TokenAddress);\n\t\t_erc20.transfer(_recipient, _amount);\n\t\treturn true;\n\t}\n}\n\n\ninterface IAOSetting {\n\tfunction getSettingValuesByTAOName(address _taoId, string calldata _settingName) external view returns (uint256, bool, address, bytes32, string memory);\n\tfunction getSettingTypes() external view returns (uint8, uint8, uint8, uint8, uint8);\n\n\tfunction settingTypeLookup(uint256 _settingId) external view returns (uint8);\n}\n\n\ninterface ITAOAncestry {\n\tfunction initialize(address _id, address _parentId, uint256 _childMinLogos) external returns (bool);\n\n\tfunction getAncestryById(address _id) external view returns (address, uint256, uint256);\n\n\tfunction addChild(address _taoId, address _childId) external returns (bool);\n\n\tfunction isChild(address _taoId, address _childId) external view returns (bool);\n}\n\n\ninterface ITAOFactory {\n\tfunction nonces(address _taoId) external view returns (uint256);\n\tfunction incrementNonce(address _taoId) external returns (uint256);\n}\n\n\n\n\n\n\n\n\n\n\n/**\n * @title Name\n */\ncontract Name is TAO {\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name, address _originId, string memory _datHash, string memory _database, string memory _keyValue, bytes32 _contentId, address _vaultAddress)\n\t\tTAO (_name, _originId, _datHash, _database, _keyValue, _contentId, _vaultAddress) public {\n\t\t// Creating Name\n\t\ttypeId = 1;\n\t}\n}\n\n\n\n\n/**\n * @title AOLibrary\n */\nlibrary AOLibrary {\n\tusing SafeMath for uint256;\n\n\tuint256 constant private _MULTIPLIER_DIVISOR = 10 ** 6; // 1000000 = 1\n\tuint256 constant private _PERCENTAGE_DIVISOR = 10 ** 6; // 100% = 1000000\n\n\t/**\n\t * @dev Check whether or not the given TAO ID is a TAO\n\t * @param _taoId The ID of the TAO\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isTAO(address _taoId) public view returns (bool) {\n\t\treturn (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);\n\t}\n\n\t/**\n\t * @dev Check whether or not the given Name ID is a Name\n\t * @param _nameId The ID of the Name\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isName(address _nameId) public view returns (bool) {\n\t\treturn (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);\n\t}\n\n\t/**\n\t * @dev Check if `_tokenAddress` is a valid ERC20 Token address\n\t * @param _tokenAddress The ERC20 Token address to check\n\t */\n\tfunction isValidERC20TokenAddress(address _tokenAddress) public view returns (bool) {\n\t\tif (_tokenAddress == address(0)) {\n\t\t\treturn false;\n\t\t}\n\t\tTokenERC20 _erc20 = TokenERC20(_tokenAddress);\n\t\treturn (_erc20.totalSupply() >= 0 && bytes(_erc20.name()).length > 0 && bytes(_erc20.symbol()).length > 0);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t * @param _sender The address to check\n\t * @param _theAO The AO address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t * @return true if yes, false otherwise\n\t */\n\tfunction isTheAO(address _sender, address _theAO, address _nameTAOPositionAddress) public view returns (bool) {\n\t\treturn (_sender == _theAO ||\n\t\t\t(\n\t\t\t\t(isTAO(_theAO) || isName(_theAO)) &&\n\t\t\t\t_nameTAOPositionAddress != address(0) &&\n\t\t\t\tINameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate percentage.\n\t *\t\tPercentage stored throughout AO contracts covers 4 decimals,\n\t *\t\tso 1% is 10000, 1.25% is 12500, etc\n\t */\n\tfunction PERCENTAGE_DIVISOR() public pure returns (uint256) {\n\t\treturn _PERCENTAGE_DIVISOR;\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate multiplier.\n\t *\t\tMultiplier stored throughout AO contracts covers 6 decimals,\n\t *\t\tso 1 is 1000000, 0.023 is 23000, etc\n\t */\n\tfunction MULTIPLIER_DIVISOR() public pure returns (uint256) {\n\t\treturn _MULTIPLIER_DIVISOR;\n\t}\n\n\t/**\n\t * @dev deploy a TAO\n\t * @param _name The name of the TAO\n\t * @param _originId The Name ID the creates the TAO\n\t * @param _datHash The datHash of this TAO\n\t * @param _database The database for this TAO\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this TAO\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployTAO(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (TAO _tao) {\n\t\t_tao = new TAO(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev deploy a Name\n\t * @param _name The name of the Name\n\t * @param _originId The eth address the creates the Name\n\t * @param _datHash The datHash of this Name\n\t * @param _database The database for this Name\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this Name\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployName(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (Name _myName) {\n\t\t_myName = new Name(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev Calculate the new weighted multiplier when adding `_additionalPrimordialAmount` at `_additionalWeightedMultiplier` to the current `_currentPrimordialBalance` at `_currentWeightedMultiplier`\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _currentPrimordialBalance Account's current primordial ion balance\n\t * @param _additionalWeightedMultiplier The weighted multiplier to be added\n\t * @param _additionalPrimordialAmount The primordial ion amount to be added\n\t * @return the new primordial weighted multiplier\n\t */\n\tfunction calculateWeightedMultiplier(uint256 _currentWeightedMultiplier, uint256 _currentPrimordialBalance, uint256 _additionalWeightedMultiplier, uint256 _additionalPrimordialAmount) public pure returns (uint256) {\n\t\tif (_currentWeightedMultiplier > 0) {\n\t\t\tuint256 _totalWeightedIons = (_currentWeightedMultiplier.mul(_currentPrimordialBalance)).add(_additionalWeightedMultiplier.mul(_additionalPrimordialAmount));\n\t\t\tuint256 _totalIons = _currentPrimordialBalance.add(_additionalPrimordialAmount);\n\t\t\treturn _totalWeightedIons.div(_totalIons);\n\t\t} else {\n\t\t\treturn _additionalWeightedMultiplier;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the primordial ion multiplier on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Multiplier = S\n\t *\t\tEnding Multiplier = E\n\t *\t\tTo Purchase = P\n\t *\t\tMultiplier for next Lot of Amount = (1 - ((M + P/2) / T)) x (S-E)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion mintable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting multiplier in (10 ** 6)\n\t * @param _endingMultiplier The ending multiplier in (10 ** 6)\n\t * @return The multiplier in (10 ** 6)\n\t */\n\tfunction calculatePrimordialMultiplier(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * Multiplier = (1 - (temp / T)) x (S-E)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply multiplier with _MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR to account for 6 decimals\n\t\t\t * so, Multiplier = (_MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR) * (1 - (temp / T)) * (S-E)\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR * (1 - (temp / T))) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Take out the division by _MULTIPLIER_DIVISOR for now and include in later calculation\n\t\t\t * Multiplier = (_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)\n\t\t\t */\n\t\t\tuint256 multiplier = (_MULTIPLIER_DIVISOR.sub(_MULTIPLIER_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier));\n\t\t\t/**\n\t\t\t * Since _startingMultiplier and _endingMultiplier are in 6 decimals\n\t\t\t * Need to divide multiplier by _MULTIPLIER_DIVISOR\n\t\t\t */\n\t\t\treturn multiplier.div(_MULTIPLIER_DIVISOR);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus percentage of network ion on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Network Bonus Multiplier = Bs\n\t *\t\tEnding Network Bonus Multiplier = Be\n\t *\t\tTo Purchase = P\n\t *\t\tAO Bonus % = B% = (1 - ((M + P/2) / T)) x (Bs-Be)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusPercentage(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * B% = (1 - (temp / T)) x (Bs-Be)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply B% with _PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR to account for 6 decimals\n\t\t\t * so, B% = (_PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR) * (1 - (temp / T)) * (Bs-Be)\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR * (1 - (temp / T))) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * Take out the division by _PERCENTAGE_DIVISOR for now and include in later calculation\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)\n\t\t\t * But since Bs and Be are in 6 decimals, need to divide by _PERCENTAGE_DIVISOR\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be) / _PERCENTAGE_DIVISOR\n\t\t\t */\n\t\t\tuint256 bonusPercentage = (_PERCENTAGE_DIVISOR.sub(_PERCENTAGE_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier)).div(_PERCENTAGE_DIVISOR);\n\t\t\treturn bonusPercentage;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus amount of network ion on a given lot\n\t *\t\tAO Bonus Amount = B% x P\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusAmount(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tuint256 bonusPercentage = calculateNetworkBonusPercentage(_purchaseAmount, _totalPrimordialMintable, _totalPrimordialMinted, _startingMultiplier, _endingMultiplier);\n\t\t/**\n\t\t * Since bonusPercentage is in _PERCENTAGE_DIVISOR format, need to divide it with _PERCENTAGE DIVISOR\n\t\t * when calculating the network ion bonus amount\n\t\t */\n\t\tuint256 networkBonus = bonusPercentage.mul(_purchaseAmount).div(_PERCENTAGE_DIVISOR);\n\t\treturn networkBonus;\n\t}\n\n\t/**\n\t * @dev Calculate the maximum amount of Primordial an account can burn\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_maximumMultiplier = S\n\t *\t\t_amountToBurn = B\n\t *\t\tB = ((S x P) - (P x M)) / S\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _maximumMultiplier The maximum multiplier of this account\n\t * @return The maximum burn amount\n\t */\n\tfunction calculateMaximumBurnAmount(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _maximumMultiplier) public pure returns (uint256) {\n\t\treturn (_maximumMultiplier.mul(_primordialBalance).sub(_primordialBalance.mul(_currentWeightedMultiplier))).div(_maximumMultiplier);\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after burning primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToBurn = B\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P - B)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToBurn The amount of primordial ion to burn\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterBurn(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToBurn) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.sub(_amountToBurn));\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after converting network ion to primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToConvert = C\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P + C)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToConvert The amount of network ion to convert\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterConversion(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToConvert) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.add(_amountToConvert));\n\t}\n\n\t/**\n\t * @dev count num of digits\n\t * @param number uint256 of the nuumber to be checked\n\t * @return uint8 num of digits\n\t */\n\tfunction numDigits(uint256 number) public pure returns (uint8) {\n\t\tuint8 digits = 0;\n\t\twhile(number != 0) {\n\t\t\tnumber = number.div(10);\n\t\t\tdigits++;\n\t\t}\n\t\treturn digits;\n\t}\n}\n\n\n\ncontract TheAO {\n\taddress public theAO;\n\taddress public nameTAOPositionAddress;\n\n\t// Check whether an address is whitelisted and granted access to transact\n\t// on behalf of others\n\tmapping (address => bool) public whitelist;\n\n\tconstructor() public {\n\t\ttheAO = msg.sender;\n\t}\n\n\t/**\n\t * @dev Checks if msg.sender is in whitelist.\n\t */\n\tmodifier inWhitelist() {\n\t\trequire (whitelist[msg.sender] == true);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @title TAOCurrency\n */\ncontract TAOCurrency is TheAO {\n\tusing SafeMath for uint256;\n\n\t// Public variables of the contract\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals;\n\n\t// To differentiate denomination of TAO Currency\n\tuint256 public powerOfTen;\n\n\tuint256 public totalSupply;\n\n\t// This creates an array with all balances\n\t// address is the address of nameId, not the eth public address\n\tmapping (address => uint256) public balanceOf;\n\n\t// This generates a public event on the blockchain that will notify clients\n\t// address is the address of TAO/Name Id, not eth public address\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This notifies clients about the amount burnt\n\t// address is the address of TAO/Name Id, not eth public address\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * Constructor function\n\t *\n\t * Initializes contract with initial supply TAOCurrency to the creator of the contract\n\t */\n\tconstructor (string memory _name, string memory _symbol, address _nameTAOPositionAddress) public {\n\t\tname = _name;\t\t// Set the name for display purposes\n\t\tsymbol = _symbol;\t// Set the symbol for display purposes\n\n\t\tpowerOfTen = 0;\n\t\tdecimals = 0;\n\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t */\n\tmodifier onlyTheAO {\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if `_id` is a Name or a TAO\n\t */\n\tmodifier isNameOrTAO(address _id) {\n\t\trequire (AOLibrary.isName(_id) || AOLibrary.isTAO(_id));\n\t\t_;\n\t}\n\n\t/***** The AO ONLY METHODS *****/\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n\n\t/**\n\t * @dev The AO set the NameTAOPosition Address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\n\t\trequire (_nameTAOPositionAddress != address(0));\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * @dev transfer TAOCurrency from other address\n\t *\n\t * Send `_value` TAOCurrency to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public inWhitelist isNameOrTAO(_from) isNameOrTAO(_to) returns (bool) {\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Create `mintedAmount` TAOCurrency and send it to `target`\n\t * @param target Address to receive TAOCurrency\n\t * @param mintedAmount The amount of TAOCurrency it will receive\n\t * @return true on success\n\t */\n\tfunction mint(address target, uint256 mintedAmount) public inWhitelist isNameOrTAO(target) returns (bool) {\n\t\t_mint(target, mintedAmount);\n\t\treturn true;\n\t}\n\n\t/**\n\t *\n\t * @dev Whitelisted address remove `_value` TAOCurrency from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction whitelistBurnFrom(address _from, uint256 _value) public inWhitelist isNameOrTAO(_from) returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance\n\t\ttotalSupply = totalSupply.sub(_value);              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n\n\t/***** INTERNAL METHODS *****/\n\t/**\n\t * @dev Send `_value` TAOCurrency from `_from` to `_to`\n\t * @param _from The address of sender\n\t * @param _to The address of the recipient\n\t * @param _value The amount to send\n\t */\n\tfunction _transfer(address _from, address _to, uint256 _value) internal {\n\t\trequire (_to != address(0));\t\t\t\t\t\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire (balanceOf[_from] >= _value);\t\t\t\t\t// Check if the sender has enough\n\t\trequire (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\n\t\tuint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);        // Subtract from the sender\n\t\tbalanceOf[_to] = balanceOf[_to].add(_value);            // Add the same to the recipient\n\t\temit Transfer(_from, _to, _value);\n\t\tassert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n\t}\n\n\t/**\n\t * @dev Create `mintedAmount` TAOCurrency and send it to `target`\n\t * @param target Address to receive TAOCurrency\n\t * @param mintedAmount The amount of TAOCurrency it will receive\n\t */\n\tfunction _mint(address target, uint256 mintedAmount) internal {\n\t\tbalanceOf[target] = balanceOf[target].add(mintedAmount);\n\t\ttotalSupply = totalSupply.add(mintedAmount);\n\t\temit Transfer(address(0), address(this), mintedAmount);\n\t\temit Transfer(address(this), target, mintedAmount);\n\t}\n}\n\n\n\n\n\ncontract Logos is TAOCurrency {\n\taddress public nameFactoryAddress;\n\taddress public nameAccountRecoveryAddress;\n\n\tINameFactory internal _nameFactory;\n\tINameTAOPosition internal _nameTAOPosition;\n\tINameAccountRecovery internal _nameAccountRecovery;\n\n\t// Mapping of a Name ID to the amount of Logos positioned by others to itself\n\t// address is the address of nameId, not the eth public address\n\tmapping (address => uint256) public positionFromOthers;\n\n\t// Mapping of Name ID to other Name ID and the amount of Logos positioned by itself\n\tmapping (address => mapping(address => uint256)) public positionOnOthers;\n\n\t// Mapping of a Name ID to the total amount of Logos positioned by itself on others\n\tmapping (address => uint256) public totalPositionOnOthers;\n\n\t// Mapping of Name ID to it's advocated TAO ID and the amount of Logos earned\n\tmapping (address => mapping(address => uint256)) public advocatedTAOLogos;\n\n\t// Mapping of a Name ID to the total amount of Logos earned from advocated TAO\n\tmapping (address => uint256) public totalAdvocatedTAOLogos;\n\n\t// Event broadcasted to public when `from` address position `value` Logos to `to`\n\tevent PositionFrom(address indexed from, address indexed to, uint256 value);\n\n\t// Event broadcasted to public when `from` address unposition `value` Logos from `to`\n\tevent UnpositionFrom(address indexed from, address indexed to, uint256 value);\n\n\t// Event broadcasted to public when `nameId` receives `amount` of Logos from advocating `taoId`\n\tevent AddAdvocatedTAOLogos(address indexed nameId, address indexed taoId, uint256 amount);\n\n\t// Event broadcasted to public when Logos from advocating `taoId` is transferred from `fromNameId` to `toNameId`\n\tevent TransferAdvocatedTAOLogos(address indexed fromNameId, address indexed toNameId, address indexed taoId, uint256 amount);\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor(string memory _name, string memory _symbol, address _nameFactoryAddress, address _nameTAOPositionAddress)\n\t\tTAOCurrency(_name, _symbol, _nameTAOPositionAddress) public {\n\t\tsetNameFactoryAddress(_nameFactoryAddress);\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev Check if `_taoId` is a TAO\n\t */\n\tmodifier isTAO(address _taoId) {\n\t\trequire (AOLibrary.isTAO(_taoId));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if `_nameId` is a Name\n\t */\n\tmodifier isName(address _nameId) {\n\t\trequire (AOLibrary.isName(_nameId));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if msg.sender is the current advocate of _id\n\t */\n\tmodifier onlyAdvocate(address _id) {\n\t\trequire (_nameTAOPosition.senderIsAdvocate(msg.sender, _id));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Only allowed if Name is not compromised\n\t */\n\tmodifier nameNotCompromised(address _id) {\n\t\trequire (!_nameAccountRecovery.isCompromised(_id));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Only allowed if sender's Name is not compromised\n\t */\n\tmodifier senderNameNotCompromised() {\n\t\trequire (!_nameAccountRecovery.isCompromised(_nameFactory.ethAddressToNameId(msg.sender)));\n\t\t_;\n\t}\n\n\t/***** THE AO ONLY METHODS *****/\n\t/**\n\t * @dev The AO sets NameFactory address\n\t * @param _nameFactoryAddress The address of NameFactory\n\t */\n\tfunction setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {\n\t\trequire (_nameFactoryAddress != address(0));\n\t\tnameFactoryAddress = _nameFactoryAddress;\n\t\t_nameFactory = INameFactory(_nameFactoryAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the NameTAOPosition Address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\n\t\trequire (_nameTAOPositionAddress != address(0));\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\n\t\t_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the NameAccountRecovery Address\n\t * @param _nameAccountRecoveryAddress The address of NameAccountRecovery\n\t */\n\tfunction setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {\n\t\trequire (_nameAccountRecoveryAddress != address(0));\n\t\tnameAccountRecoveryAddress = _nameAccountRecoveryAddress;\n\t\t_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * @dev Get the total sum of Logos for an address\n\t * @param _target The address to check\n\t * @return The total sum of Logos (own + positioned + advocated TAOs)\n\t */\n\tfunction sumBalanceOf(address _target) public isName(_target) view returns (uint256) {\n\t\treturn balanceOf[_target].add(positionFromOthers[_target]).add(totalAdvocatedTAOLogos[_target]);\n\t}\n\n\t/**\n\t * @dev Return the amount of Logos that are available to be positioned on other\n\t * @param _sender The sender address to check\n\t * @return The amount of Logos that are available to be positioned on other\n\t */\n\tfunction availableToPositionAmount(address _sender) public isName(_sender) view returns (uint256) {\n\t\treturn balanceOf[_sender].sub(totalPositionOnOthers[_sender]);\n\t}\n\n\t/**\n\t * @dev `_from` Name position `_value` Logos onto `_to` Name\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to position\n\t * @return true on success\n\t */\n\tfunction positionFrom(address _from, address _to, uint256 _value) public isName(_from) isName(_to) nameNotCompromised(_from) nameNotCompromised(_to) onlyAdvocate(_from) senderNameNotCompromised returns (bool) {\n\t\trequire (_from != _to);\t// Can't position Logos to itself\n\t\trequire (availableToPositionAmount(_from) >= _value); // should have enough balance to position\n\t\trequire (positionFromOthers[_to].add(_value) >= positionFromOthers[_to]); // check for overflows\n\n\t\tpositionOnOthers[_from][_to] = positionOnOthers[_from][_to].add(_value);\n\t\ttotalPositionOnOthers[_from] = totalPositionOnOthers[_from].add(_value);\n\t\tpositionFromOthers[_to] = positionFromOthers[_to].add(_value);\n\n\t\temit PositionFrom(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev `_from` Name unposition `_value` Logos from `_to` Name\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to unposition\n\t * @return true on success\n\t */\n\tfunction unpositionFrom(address _from, address _to, uint256 _value) public isName(_from) isName(_to) nameNotCompromised(_from) nameNotCompromised(_to) onlyAdvocate(_from) senderNameNotCompromised returns (bool) {\n\t\trequire (_from != _to);\t// Can't unposition Logos to itself\n\t\trequire (positionOnOthers[_from][_to] >= _value);\n\n\t\tpositionOnOthers[_from][_to] = positionOnOthers[_from][_to].sub(_value);\n\t\ttotalPositionOnOthers[_from] = totalPositionOnOthers[_from].sub(_value);\n\t\tpositionFromOthers[_to] = positionFromOthers[_to].sub(_value);\n\n\t\temit UnpositionFrom(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Add `_amount` logos earned from advocating a TAO `_taoId` to its Advocate\n\t * @param _taoId The ID of the advocated TAO\n\t * @param _amount the amount to reward\n\t * @return true on success\n\t */\n\tfunction addAdvocatedTAOLogos(address _taoId, uint256 _amount) public inWhitelist isTAO(_taoId) returns (bool) {\n\t\trequire (_amount > 0);\n\t\taddress _nameId = _nameTAOPosition.getAdvocate(_taoId);\n\n\t\tadvocatedTAOLogos[_nameId][_taoId] = advocatedTAOLogos[_nameId][_taoId].add(_amount);\n\t\ttotalAdvocatedTAOLogos[_nameId] = totalAdvocatedTAOLogos[_nameId].add(_amount);\n\n\t\temit AddAdvocatedTAOLogos(_nameId, _taoId, _amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Transfer logos earned from advocating a TAO `_taoId` from `_fromNameId` to the Advocate of `_taoId`\n\t * @param _fromNameId The ID of the Name that sends the Logos\n\t * @param _taoId The ID of the advocated TAO\n\t * @return true on success\n\t */\n\tfunction transferAdvocatedTAOLogos(address _fromNameId, address _taoId) public inWhitelist isName(_fromNameId) isTAO(_taoId) returns (bool) {\n\t\taddress _toNameId = _nameTAOPosition.getAdvocate(_taoId);\n\t\trequire (_fromNameId != _toNameId);\n\t\trequire (totalAdvocatedTAOLogos[_fromNameId] >= advocatedTAOLogos[_fromNameId][_taoId]);\n\n\t\tuint256 _amount = advocatedTAOLogos[_fromNameId][_taoId];\n\t\tadvocatedTAOLogos[_fromNameId][_taoId] = 0;\n\t\ttotalAdvocatedTAOLogos[_fromNameId] = totalAdvocatedTAOLogos[_fromNameId].sub(_amount);\n\t\tadvocatedTAOLogos[_toNameId][_taoId] = advocatedTAOLogos[_toNameId][_taoId].add(_amount);\n\t\ttotalAdvocatedTAOLogos[_toNameId] = totalAdvocatedTAOLogos[_toNameId].add(_amount);\n\n\t\temit TransferAdvocatedTAOLogos(_fromNameId, _toNameId, _taoId, _amount);\n\t\treturn true;\n\t}\n}\n\n\n\n/**\n * @title NameTAOPosition\n */\ncontract NameTAOPosition is TheAO, INameTAOPosition {\n\tusing SafeMath for uint256;\n\n\taddress public settingTAOId;\n\taddress public nameFactoryAddress;\n\taddress public nameAccountRecoveryAddress;\n\taddress public taoFactoryAddress;\n\taddress public aoSettingAddress;\n\taddress public taoAncestryAddress;\n\taddress public logosAddress;\n\n\tuint256 public totalTAOAdvocateChallenges;\n\n\tINameFactory internal _nameFactory;\n\tINameAccountRecovery internal _nameAccountRecovery;\n\tITAOFactory internal _taoFactory;\n\tIAOSetting internal _aoSetting;\n\tITAOAncestry internal _taoAncestry;\n\tLogos internal _logos;\n\n\tstruct PositionDetail {\n\t\taddress advocateId;\n\t\taddress listenerId;\n\t\taddress speakerId;\n\t\tbool created;\n\t}\n\n\tstruct TAOAdvocateChallenge {\n\t\tbytes32 challengeId;\n\t\taddress newAdvocateId;\t\t// The Name ID that wants to be the new Advocate\n\t\taddress taoId;\t\t\t\t// The TAO ID being challenged\n\t\tbool completed;\t\t\t\t// Status of the challenge\n\t\tuint256 createdTimestamp;\t// Timestamp when this challenge is created\n\t\tuint256 lockedUntilTimestamp;\t// The deadline for current Advocate to respond\n\t\tuint256 completeBeforeTimestamp; // The deadline for the challenger to respond and complete the challenge\n\t}\n\n\t// Mapping from Name/TAO ID to its PositionDetail info\n\tmapping (address => PositionDetail) internal positionDetails;\n\n\t// Mapping from challengeId to TAOAdvocateChallenge info\n\tmapping (bytes32 => TAOAdvocateChallenge) internal taoAdvocateChallenges;\n\n\t// Event to be broadcasted to public when current Advocate of TAO sets New Advocate\n\tevent SetAdvocate(address indexed taoId, address oldAdvocateId, address newAdvocateId, uint256 nonce);\n\n\t// Event to be broadcasted to public when current Advocate of Name/TAO sets New Listener\n\tevent SetListener(address indexed taoId, address oldListenerId, address newListenerId, uint256 nonce);\n\n\t// Event to be broadcasted to public when current Advocate of Name/TAO sets New Speaker\n\tevent SetSpeaker(address indexed taoId, address oldSpeakerId, address newSpeakerId, uint256 nonce);\n\n\t// Event to be broadcasted to public when a Name challenges to become TAO's new Advocate\n\tevent ChallengeTAOAdvocate(address indexed taoId, bytes32 indexed challengeId, address currentAdvocateId, address challengerAdvocateId, uint256 createdTimestamp, uint256 lockedUntilTimestamp, uint256 completeBeforeTimestamp);\n\n\t// Event to be broadcasted to public when Challenger completes the TAO Advocate challenge\n\tevent CompleteTAOAdvocateChallenge(address indexed taoId, bytes32 indexed challengeId);\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor(address _nameFactoryAddress, address _taoFactoryAddress) public {\n\t\tsetNameFactoryAddress(_nameFactoryAddress);\n\t\tsetTAOFactoryAddress(_taoFactoryAddress);\n\n\t\tnameTAOPositionAddress = address(this);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t */\n\tmodifier onlyTheAO {\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if calling address is Factory\n\t */\n\tmodifier onlyFactory {\n\t\trequire (msg.sender == nameFactoryAddress || msg.sender == taoFactoryAddress);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if `_taoId` is a TAO\n\t */\n\tmodifier isTAO(address _taoId) {\n\t\trequire (AOLibrary.isTAO(_taoId));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if `_nameId` is a Name\n\t */\n\tmodifier isName(address _nameId) {\n\t\trequire (AOLibrary.isName(_nameId));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if `_id` is a Name or a TAO\n\t */\n\tmodifier isNameOrTAO(address _id) {\n\t\trequire (AOLibrary.isName(_id) || AOLibrary.isTAO(_id));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check is msg.sender address is a Name\n\t */\n\t modifier senderIsName() {\n\t\trequire (_nameFactory.ethAddressToNameId(msg.sender) != address(0));\n\t\t_;\n\t }\n\n\t/**\n\t * @dev Check if msg.sender is the current advocate of a Name/TAO ID\n\t */\n\tmodifier onlyAdvocate(address _id) {\n\t\trequire (this.senderIsAdvocate(msg.sender, _id));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Only allowed if sender's Name is not compromised\n\t */\n\tmodifier senderNameNotCompromised() {\n\t\trequire (!_nameAccountRecovery.isCompromised(_nameFactory.ethAddressToNameId(msg.sender)));\n\t\t_;\n\t}\n\n\t/***** The AO ONLY METHODS *****/\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n\n\t/**\n\t * @dev The AO set the NameFactory Address\n\t * @param _nameFactoryAddress The address of NameFactory\n\t */\n\tfunction setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {\n\t\trequire (_nameFactoryAddress != address(0));\n\t\tnameFactoryAddress = _nameFactoryAddress;\n\t\t_nameFactory = INameFactory(_nameFactoryAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the NameAccountRecovery Address\n\t * @param _nameAccountRecoveryAddress The address of NameAccountRecovery\n\t */\n\tfunction setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {\n\t\trequire (_nameAccountRecoveryAddress != address(0));\n\t\tnameAccountRecoveryAddress = _nameAccountRecoveryAddress;\n\t\t_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the TAOFactory Address\n\t * @param _taoFactoryAddress The address of TAOFactory\n\t */\n\tfunction setTAOFactoryAddress(address _taoFactoryAddress) public onlyTheAO {\n\t\trequire (_taoFactoryAddress != address(0));\n\t\ttaoFactoryAddress = _taoFactoryAddress;\n\t\t_taoFactory = ITAOFactory(_taoFactoryAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets setting TAO ID\n\t * @param _settingTAOId The new setting TAO ID to set\n\t */\n\tfunction setSettingTAOId(address _settingTAOId) public onlyTheAO {\n\t\trequire (AOLibrary.isTAO(_settingTAOId));\n\t\tsettingTAOId = _settingTAOId;\n\t}\n\n\t/**\n\t * @dev The AO sets AO Setting address\n\t * @param _aoSettingAddress The address of AOSetting\n\t */\n\tfunction setAOSettingAddress(address _aoSettingAddress) public onlyTheAO {\n\t\trequire (_aoSettingAddress != address(0));\n\t\taoSettingAddress = _aoSettingAddress;\n\t\t_aoSetting = IAOSetting(_aoSettingAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the TAOAncestry Address\n\t * @param _taoAncestryAddress The address of TAOAncestry\n\t */\n\tfunction setTAOAncestryAddress(address _taoAncestryAddress) public onlyTheAO {\n\t\trequire (_taoAncestryAddress != address(0));\n\t\ttaoAncestryAddress = _taoAncestryAddress;\n\t\t_taoAncestry = ITAOAncestry(taoAncestryAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the logosAddress Address\n\t * @param _logosAddress The address of Logos\n\t */\n\tfunction setLogosAddress(address _logosAddress) public onlyTheAO {\n\t\trequire (_logosAddress != address(0));\n\t\tlogosAddress = _logosAddress;\n\t\t_logos = Logos(_logosAddress);\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * @dev Check whether or not a Name/TAO ID exist in the list\n\t * @param _id The ID to be checked\n\t * @return true if yes, false otherwise\n\t */\n\tfunction isExist(address _id) public view returns (bool) {\n\t\treturn positionDetails[_id].created;\n\t}\n\n\t/**\n\t * @dev Check whether or not `_sender` eth address is Advocate of _id\n\t * @param _sender The eth address to check\n\t * @param _id The ID to be checked\n\t * @return true if yes, false otherwise\n\t */\n\tfunction senderIsAdvocate(address _sender, address _id) external view returns (bool) {\n\t\treturn (positionDetails[_id].created && positionDetails[_id].advocateId == _nameFactory.ethAddressToNameId(_sender));\n\t}\n\n\t/**\n\t * @dev Check whether or not `_sender` eth address is Listener of _id\n\t * @param _sender The eth address to check\n\t * @param _id The ID to be checked\n\t * @return true if yes, false otherwise\n\t */\n\tfunction senderIsListener(address _sender, address _id) external view returns (bool) {\n\t\treturn (positionDetails[_id].created && positionDetails[_id].listenerId == _nameFactory.ethAddressToNameId(_sender));\n\t}\n\n\t/**\n\t * @dev Check whether or not `_sender` eth address is Speaker of _id\n\t * @param _sender The eth address to check\n\t * @param _id The ID to be checked\n\t * @return true if yes, false otherwise\n\t */\n\tfunction senderIsSpeaker(address _sender, address _id) external view returns (bool) {\n\t\treturn (positionDetails[_id].created && positionDetails[_id].speakerId == _nameFactory.ethAddressToNameId(_sender));\n\t}\n\n\t/**\n\t * @dev Check whether or not `_sender` eth address is Advocate of Parent of _id\n\t * @param _sender The eth address to check\n\t * @param _id The ID to be checked\n\t * @return true if yes, false otherwise\n\t */\n\tfunction senderIsAdvocateOfParent(address _sender, address _id) public view returns (bool) {\n\t\t(address _parentId,,) = _taoAncestry.getAncestryById(_id);\n\t\t return ((AOLibrary.isName(_parentId) || (AOLibrary.isTAO(_parentId) && _taoAncestry.isChild(_parentId, _id))) && this.senderIsAdvocate(_sender, _parentId));\n\t}\n\n\t/**\n\t * @dev Check whether or not eth address is either Advocate/Listener/Speaker of _id\n\t * @param _sender The eth address to check\n\t * @param _id The ID to be checked\n\t * @return true if yes, false otherwise\n\t */\n\tfunction senderIsPosition(address _sender, address _id) external view returns (bool) {\n\t\taddress _nameId = _nameFactory.ethAddressToNameId(_sender);\n\t\tif (_nameId == address(0)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this.nameIsPosition(_nameId, _id);\n\t\t}\n\t}\n\n\t/**\n\t * @dev Check whether or not _nameId is advocate of _id\n\t * @param _nameId The name ID to be checked\n\t * @param _id The ID to be checked\n\t * @return true if yes, false otherwise\n\t */\n\tfunction nameIsAdvocate(address _nameId, address _id) external view returns (bool) {\n\t\treturn (positionDetails[_id].created && positionDetails[_id].advocateId == _nameId);\n\t}\n\n\t/**\n\t * @dev Check whether or not _nameId is either Advocate/Listener/Speaker of _id\n\t * @param _nameId The name ID to be checked\n\t * @param _id The ID to be checked\n\t * @return true if yes, false otherwise\n\t */\n\tfunction nameIsPosition(address _nameId, address _id) external view returns (bool) {\n\t\treturn (positionDetails[_id].created &&\n\t\t\t(positionDetails[_id].advocateId == _nameId ||\n\t\t\t positionDetails[_id].listenerId == _nameId ||\n\t\t\t positionDetails[_id].speakerId == _nameId\n\t\t\t)\n\t   );\n\t}\n\n\t/**\n\t * @dev Determine whether or not `_sender` is Advocate/Listener/Speaker of the Name/TAO\n\t * @param _sender The ETH address that to check\n\t * @param _id The ID of the Name/TAO\n\t * @return 1 if Advocate. 2 if Listener. 3 if Speaker\n\t */\n\tfunction determinePosition(address _sender, address _id) external view returns (uint256) {\n\t\trequire (this.senderIsPosition(_sender, _id));\n\t\tPositionDetail memory _positionDetail = positionDetails[_id];\n\t\taddress _nameId = _nameFactory.ethAddressToNameId(_sender);\n\t\tif (_nameId == _positionDetail.advocateId) {\n\t\t\treturn 1;\n\t\t} else if (_nameId == _positionDetail.listenerId) {\n\t\t\treturn 2;\n\t\t} else {\n\t\t\treturn 3;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Initialize Position for a Name/TAO\n\t * @param _id The ID of the Name/TAO\n\t * @param _advocateId The Advocate ID of the Name/TAO\n\t * @param _listenerId The Listener ID of the Name/TAO\n\t * @param _speakerId The Speaker ID of the Name/TAO\n\t * @return true on success\n\t */\n\tfunction initialize(address _id, address _advocateId, address _listenerId, address _speakerId)\n\t\texternal\n\t\tisNameOrTAO(_id)\n\t\tisName(_advocateId)\n\t\tisNameOrTAO(_listenerId)\n\t\tisNameOrTAO(_speakerId)\n\t\tonlyFactory returns (bool) {\n\t\trequire (!isExist(_id));\n\n\t\tPositionDetail storage _positionDetail = positionDetails[_id];\n\t\t_positionDetail.advocateId = _advocateId;\n\t\t_positionDetail.listenerId = _listenerId;\n\t\t_positionDetail.speakerId = _speakerId;\n\t\t_positionDetail.created = true;\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Get Name/TAO's Position info\n\t * @param _id The ID of the Name/TAO\n\t * @return the Advocate name\n\t * @return the Advocate ID of Name/TAO\n\t * @return the Listener name\n\t * @return the Listener ID of Name/TAO\n\t * @return the Speaker name\n\t * @return the Speaker ID of Name/TAO\n\t */\n\tfunction getPositionById(address _id) public view returns (string memory, address, string memory, address, string memory, address) {\n\t\trequire (isExist(_id));\n\t\tPositionDetail memory _positionDetail = positionDetails[_id];\n\t\treturn (\n\t\t\tTAO(address(uint160(_positionDetail.advocateId))).name(),\n\t\t\t_positionDetail.advocateId,\n\t\t\tTAO(address(uint160(_positionDetail.listenerId))).name(),\n\t\t\t_positionDetail.listenerId,\n\t\t\tTAO(address(uint160(_positionDetail.speakerId))).name(),\n\t\t\t_positionDetail.speakerId\n\t\t);\n\t}\n\n\t/**\n\t * @dev Get Name/TAO's Advocate\n\t * @param _id The ID of the Name/TAO\n\t * @return the Advocate ID of Name/TAO\n\t */\n\tfunction getAdvocate(address _id) external view returns (address) {\n\t\trequire (isExist(_id));\n\t\tPositionDetail memory _positionDetail = positionDetails[_id];\n\t\treturn _positionDetail.advocateId;\n\t}\n\n\t/**\n\t * @dev Get Name/TAO's Listener\n\t * @param _id The ID of the Name/TAO\n\t * @return the Listener ID of Name/TAO\n\t */\n\tfunction getListener(address _id) public view returns (address) {\n\t\trequire (isExist(_id));\n\t\tPositionDetail memory _positionDetail = positionDetails[_id];\n\t\treturn _positionDetail.listenerId;\n\t}\n\n\t/**\n\t * @dev Get Name/TAO's Speaker\n\t * @param _id The ID of the Name/TAO\n\t * @return the Speaker ID of Name/TAO\n\t */\n\tfunction getSpeaker(address _id) public view returns (address) {\n\t\trequire (isExist(_id));\n\t\tPositionDetail memory _positionDetail = positionDetails[_id];\n\t\treturn _positionDetail.speakerId;\n\t}\n\n\t/**\n\t * @dev Set Advocate for a TAO\n\t * @param _taoId The ID of the TAO\n\t * @param _newAdvocateId The new advocate ID to be set\n\t */\n\tfunction setAdvocate(address _taoId, address _newAdvocateId)\n\t\tpublic\n\t\tisTAO(_taoId)\n\t\tisName(_newAdvocateId)\n\t\tonlyAdvocate(_taoId)\n\t\tsenderIsName\n\t\tsenderNameNotCompromised {\n\t\trequire (isExist(_taoId));\n\t\t// Make sure the newAdvocate is not compromised\n\t\trequire (!_nameAccountRecovery.isCompromised(_newAdvocateId));\n\t\t_setAdvocate(_taoId, _newAdvocateId);\n\t}\n\n\t/**\n\t * Only Advocate of Parent of `_taoId` can replace child `_taoId` 's Advocate with himself\n\t * @param _taoId The ID of the TAO\n\t */\n\tfunction parentReplaceChildAdvocate(address _taoId)\n\t\tpublic\n\t\tisTAO(_taoId)\n\t\tsenderIsName\n\t\tsenderNameNotCompromised {\n\t\trequire (isExist(_taoId));\n\t\trequire (senderIsAdvocateOfParent(msg.sender, _taoId));\n\t\taddress _parentNameId = _nameFactory.ethAddressToNameId(msg.sender);\n\t\taddress _currentAdvocateId = this.getAdvocate(_taoId);\n\n\t\t// Make sure it's not replacing itself\n\t\trequire (_parentNameId != _currentAdvocateId);\n\n\t\t// Parent has to have more Logos than current Advocate\n\t\trequire (_logos.sumBalanceOf(_parentNameId) > _logos.sumBalanceOf(this.getAdvocate(_taoId)));\n\n\t\t_setAdvocate(_taoId, _parentNameId);\n\t}\n\n\t/**\n\t * A Name challenges current TAO's Advocate to be its new Advocate\n\t * @param _taoId The ID of the TAO\n\t */\n\tfunction challengeTAOAdvocate(address _taoId)\n\t\tpublic\n\t\tisTAO(_taoId)\n\t\tsenderIsName\n\t\tsenderNameNotCompromised {\n\t\trequire (isExist(_taoId));\n\t\taddress _newAdvocateId = _nameFactory.ethAddressToNameId(msg.sender);\n\t\taddress _currentAdvocateId = this.getAdvocate(_taoId);\n\n\t\t// Make sure it's not challenging itself\n\t\trequire (_newAdvocateId != _currentAdvocateId);\n\n\t\t// New Advocate has to have more Logos than current Advocate\n\t\trequire (_logos.sumBalanceOf(_newAdvocateId) > _logos.sumBalanceOf(_currentAdvocateId));\n\n\t\t(uint256 _lockDuration, uint256 _completeDuration) = _getSettingVariables();\n\n\t\ttotalTAOAdvocateChallenges++;\n\t\tbytes32 _challengeId = keccak256(abi.encodePacked(this, _taoId, _newAdvocateId, totalTAOAdvocateChallenges));\n\t\tTAOAdvocateChallenge storage _taoAdvocateChallenge = taoAdvocateChallenges[_challengeId];\n\t\t_taoAdvocateChallenge.challengeId = _challengeId;\n\t\t_taoAdvocateChallenge.newAdvocateId = _newAdvocateId;\n\t\t_taoAdvocateChallenge.taoId = _taoId;\n\t\t_taoAdvocateChallenge.createdTimestamp = now;\n\t\t_taoAdvocateChallenge.lockedUntilTimestamp = _taoAdvocateChallenge.createdTimestamp.add(_lockDuration);\n\t\t_taoAdvocateChallenge.completeBeforeTimestamp = _taoAdvocateChallenge.lockedUntilTimestamp.add(_completeDuration);\n\n\t\temit ChallengeTAOAdvocate(_taoId, _challengeId, _currentAdvocateId, _newAdvocateId, _taoAdvocateChallenge.createdTimestamp, _taoAdvocateChallenge.lockedUntilTimestamp, _taoAdvocateChallenge.completeBeforeTimestamp);\n\t}\n\n\t/**\n\t * Get status of a TAOAdvocateChallenge given a `_challengeId` and a `_sender` eth address\n\t * @param _challengeId The ID of TAOAdvocateChallenge\n\t * @param _sender The sender address\n\t * @return status of the challenge\n\t *\t\t1 = Can complete challenge\n\t *\t\t2 = Challenge not exist\n\t *\t\t3 = Sender is not the creator of the challenge\n\t *\t\t4 = Transaction is not in the allowed period of time (locking period of time)\n\t *\t\t5 = Transaction has expired\n\t *\t\t6 = Challenge has been completed\n\t *\t\t7 = Challenger has less Logos than current Advocate of TAO\n\t */\n\tfunction getChallengeStatus(bytes32 _challengeId, address _sender) public view returns (uint8) {\n\t\taddress _challengerNameId = _nameFactory.ethAddressToNameId(_sender);\n\t\tTAOAdvocateChallenge storage _taoAdvocateChallenge = taoAdvocateChallenges[_challengeId];\n\n\t\t// If the challenge does not exist\n\t\tif (_taoAdvocateChallenge.taoId == address(0)) {\n\t\t\treturn 2;\n\t\t} else if (_challengerNameId != _taoAdvocateChallenge.newAdvocateId) {\n\t\t\t// If the calling address is not the creator of the challenge\n\t\t\treturn 3;\n\t\t} else if (now < _taoAdvocateChallenge.lockedUntilTimestamp) {\n\t\t\t// If this transaction is not in the allowed period of time\n\t\t\treturn 4;\n\t\t} else if (now > _taoAdvocateChallenge.completeBeforeTimestamp) {\n\t\t\t// Transaction has expired\n\t\t\treturn 5;\n\t\t} else if (_taoAdvocateChallenge.completed) {\n\t\t\t// If the challenge has been completed\n\t\t\treturn 6;\n\t\t} else if (_logos.sumBalanceOf(_challengerNameId) <= _logos.sumBalanceOf(this.getAdvocate(_taoAdvocateChallenge.taoId))) {\n\t\t\t// If challenger has less Logos than current Advocate of TAO\n\t\t\treturn 7;\n\t\t} else {\n\t\t\t// Can complete!\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t * Only owner of challenge can respond and complete of the challenge\n\t * @param _challengeId The ID of the TAOAdvocateChallenge\n\t */\n\tfunction completeTAOAdvocateChallenge(bytes32 _challengeId)\n\t\tpublic\n\t\tsenderIsName\n\t\tsenderNameNotCompromised {\n\t\tTAOAdvocateChallenge storage _taoAdvocateChallenge = taoAdvocateChallenges[_challengeId];\n\n\t\t// Make sure the challenger can complete this challenge\n\t\trequire (getChallengeStatus(_challengeId, msg.sender) == 1);\n\n\t\t_taoAdvocateChallenge.completed = true;\n\n\t\t_setAdvocate(_taoAdvocateChallenge.taoId, _taoAdvocateChallenge.newAdvocateId);\n\n\t\temit CompleteTAOAdvocateChallenge(_taoAdvocateChallenge.taoId, _challengeId);\n\t}\n\n\t/**\n\t * @dev Get TAOAdvocateChallenge info given an ID\n\t * @param _challengeId The ID of TAOAdvocateChallenge\n\t * @return the new Advocate ID in the challenge\n\t * @return the ID of Name/TAO\n\t * @return the completion status of the challenge\n\t * @return the created timestamp\n\t * @return the lockedUntil timestamp (The deadline for current Advocate to respond)\n\t * @return the completeBefore timestamp (The deadline for the challenger to respond and complete the challenge)\n\t */\n\tfunction getTAOAdvocateChallengeById(bytes32 _challengeId) public view returns (address, address, bool, uint256, uint256, uint256) {\n\t\tTAOAdvocateChallenge memory _taoAdvocateChallenge = taoAdvocateChallenges[_challengeId];\n\t\trequire (_taoAdvocateChallenge.taoId != address(0));\n\t\treturn (\n\t\t\t_taoAdvocateChallenge.newAdvocateId,\n\t\t\t_taoAdvocateChallenge.taoId,\n\t\t\t_taoAdvocateChallenge.completed,\n\t\t\t_taoAdvocateChallenge.createdTimestamp,\n\t\t\t_taoAdvocateChallenge.lockedUntilTimestamp,\n\t\t\t_taoAdvocateChallenge.completeBeforeTimestamp\n\t\t);\n\t}\n\n\t/**\n\t * @dev Set Listener for a Name/TAO\n\t * @param _id The ID of the Name/TAO\n\t * @param _newListenerId The new listener ID to be set\n\t */\n\tfunction setListener(address _id, address _newListenerId)\n\t\tpublic\n\t\tisNameOrTAO(_id)\n\t\tisNameOrTAO(_newListenerId)\n\t\tsenderIsName\n\t\tsenderNameNotCompromised\n\t\tonlyAdvocate(_id) {\n\t\trequire (isExist(_id));\n\n\t\t// If _id is a Name, then new Listener can only be a Name\n\t\t// If _id is a TAO, then new Listener can be a TAO/Name\n\t\tbool _isName = false;\n\t\tif (AOLibrary.isName(_id)) {\n\t\t\t_isName = true;\n\t\t\trequire (AOLibrary.isName(_newListenerId));\n\t\t\trequire (!_nameAccountRecovery.isCompromised(_id));\n\t\t\trequire (!_nameAccountRecovery.isCompromised(_newListenerId));\n\t\t}\n\n\t\tPositionDetail storage _positionDetail = positionDetails[_id];\n\t\taddress _currentListenerId = _positionDetail.listenerId;\n\t\t_positionDetail.listenerId = _newListenerId;\n\n\t\tuint256 _nonce;\n\t\tif (_isName) {\n\t\t\t_nonce = _nameFactory.incrementNonce(_id);\n\t\t} else {\n\t\t\t_nonce = _taoFactory.incrementNonce(_id);\n\t\t}\n\t\temit SetListener(_id, _currentListenerId, _positionDetail.listenerId, _nonce);\n\t}\n\n\t/**\n\t * @dev Set Speaker for a Name/TAO\n\t * @param _id The ID of the Name/TAO\n\t * @param _newSpeakerId The new speaker ID to be set\n\t */\n\tfunction setSpeaker(address _id, address _newSpeakerId)\n\t\tpublic\n\t\tisNameOrTAO(_id)\n\t\tisNameOrTAO(_newSpeakerId)\n\t\tsenderIsName\n\t\tsenderNameNotCompromised\n\t\tonlyAdvocate(_id) {\n\t\trequire (isExist(_id));\n\n\t\t// If _id is a Name, then new Speaker can only be a Name\n\t\t// If _id is a TAO, then new Speaker can be a TAO/Name\n\t\tbool _isName = false;\n\t\tif (AOLibrary.isName(_id)) {\n\t\t\t_isName = true;\n\t\t\trequire (AOLibrary.isName(_newSpeakerId));\n\t\t\trequire (!_nameAccountRecovery.isCompromised(_id));\n\t\t\trequire (!_nameAccountRecovery.isCompromised(_newSpeakerId));\n\t\t}\n\n\t\tPositionDetail storage _positionDetail = positionDetails[_id];\n\t\taddress _currentSpeakerId = _positionDetail.speakerId;\n\t\t_positionDetail.speakerId = _newSpeakerId;\n\n\t\tuint256 _nonce;\n\t\tif (_isName) {\n\t\t\t_nonce = _nameFactory.incrementNonce(_id);\n\t\t} else {\n\t\t\t_nonce = _taoFactory.incrementNonce(_id);\n\t\t}\n\t\temit SetSpeaker(_id, _currentSpeakerId, _positionDetail.speakerId, _nonce);\n\t}\n\n\t/***** INTERNAL METHOD *****/\n\t/**\n\t * @dev Actually setting Advocate for a TAO\n\t * @param _taoId The ID of the TAO\n\t * @param _newAdvocateId The new advocate ID to be set\n\t */\n\tfunction _setAdvocate(address _taoId, address _newAdvocateId) internal {\n\t\tPositionDetail storage _positionDetail = positionDetails[_taoId];\n\t\taddress _currentAdvocateId = _positionDetail.advocateId;\n\t\t_positionDetail.advocateId = _newAdvocateId;\n\n\t\tuint256 _nonce = _taoFactory.incrementNonce(_taoId);\n\t\trequire (_nonce > 0);\n\n\t\t// Transfer Advocated TAO Logos to the new Advocate\n\t\trequire (_logos.transferAdvocatedTAOLogos(_currentAdvocateId, _taoId));\n\n\t\temit SetAdvocate(_taoId, _currentAdvocateId, _positionDetail.advocateId, _nonce);\n\t}\n\n\t/**\n\t * @dev Get setting variables\n\t * @return challengeTAOAdvocateLockDuration = The amount of time for current Advocate to respond to TAO Advocate challenge from another Name\n\t * @return challengeTAOAdvocateCompleteDuration = The amount of time for challenger Advocate to respond and complete the challenge after the lock period ends\n\t */\n\tfunction _getSettingVariables() internal view returns (uint256, uint256) {\n\t\t(uint256 challengeTAOAdvocateLockDuration,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'challengeTAOAdvocateLockDuration');\n\t\t(uint256 challengeTAOAdvocateCompleteDuration,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'challengeTAOAdvocateCompleteDuration');\n\n\t\treturn (\n\t\t\tchallengeTAOAdvocateLockDuration,\n\t\t\tchallengeTAOAdvocateCompleteDuration\n\t\t);\n\t}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"isExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nameId\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"nameIsAdvocate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoSettingAddress\",\"type\":\"address\"}],\"name\":\"setAOSettingAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoSettingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameAccountRecoveryAddress\",\"type\":\"address\"}],\"name\":\"setNameAccountRecoveryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"senderIsSpeaker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taoFactoryAddress\",\"type\":\"address\"}],\"name\":\"setTAOFactoryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTAOAdvocateChallenges\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taoId\",\"type\":\"address\"},{\"name\":\"_newAdvocateId\",\"type\":\"address\"}],\"name\":\"setAdvocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"},{\"name\":\"_newSpeakerId\",\"type\":\"address\"}],\"name\":\"setSpeaker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taoId\",\"type\":\"address\"}],\"name\":\"parentReplaceChildAdvocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"logosAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_challengeId\",\"type\":\"bytes32\"}],\"name\":\"getTAOAdvocateChallengeById\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nameId\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"nameIsPosition\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"},{\"name\":\"_newListenerId\",\"type\":\"address\"}],\"name\":\"setListener\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"senderIsAdvocateOfParent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameTAOPositionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"getListener\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"senderIsAdvocate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taoAncestryAddress\",\"type\":\"address\"}],\"name\":\"setTAOAncestryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"determinePosition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_challengeId\",\"type\":\"bytes32\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getChallengeStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"}],\"name\":\"setNameFactoryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameAccountRecoveryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theAO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"taoAncestryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameFactoryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingTAOId\",\"type\":\"address\"}],\"name\":\"setSettingTAOId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"getPositionById\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"senderIsListener\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"senderIsPosition\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"settingTAOId\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_challengeId\",\"type\":\"bytes32\"}],\"name\":\"completeTAOAdvocateChallenge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taoId\",\"type\":\"address\"}],\"name\":\"challengeTAOAdvocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"getSpeaker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_theAO\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"},{\"name\":\"_advocateId\",\"type\":\"address\"},{\"name\":\"_listenerId\",\"type\":\"address\"},{\"name\":\"_speakerId\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"getAdvocate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"taoFactoryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_logosAddress\",\"type\":\"address\"}],\"name\":\"setLogosAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"},{\"name\":\"_taoFactoryAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"taoId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldAdvocateId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newAdvocateId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"SetAdvocate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"taoId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldListenerId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newListenerId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"SetListener\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"taoId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldSpeakerId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newSpeakerId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"SetSpeaker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"taoId\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"challengeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"currentAdvocateId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"challengerAdvocateId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"createdTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockedUntilTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"completeBeforeTimestamp\",\"type\":\"uint256\"}],\"name\":\"ChallengeTAOAdvocate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"taoId\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"challengeId\",\"type\":\"bytes32\"}],\"name\":\"CompleteTAOAdvocateChallenge\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000010fbf61e4cce57d72eed8b5d9728134ce374bd8200000000000000000000000002a9bb92365b72fb735364af2af55ebfa9eb02c2",
  "libraries": [
    {
      "name": "AOLibrary",
      "address": "0x1150d53299Abb7DE27464D01B626728f5c840229"
    }
  ]
}