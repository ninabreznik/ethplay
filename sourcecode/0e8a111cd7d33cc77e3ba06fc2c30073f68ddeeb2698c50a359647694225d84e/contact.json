{
  "address": "0x4f6bf962f8e16aa761b48e674f9034063c2b2d7f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CoinJzc",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-01\n*/\n\npragma solidity ^0.4.23;\n\ncontract CoinJzc // @eachvar\n{\n    // ======== 初始化代币相关逻辑 ==============\n    // 地址信息\n    address public admin_address = 0x59a6C9d93838E1901990b50469d5126C720716dc; // @eachvar\n    address public account_address = 0x59a6C9d93838E1901990b50469d5126C720716dc; // @eachvar 初始化后转入代币的地址\n    \n    // 定义账户余额\n    mapping(address => uint256) balances;\n    \n    // solidity 会自动为 public 变量添加方法，有了下边这些变量，就能获得代币的基本信息了\n    string public name = \"DaJinZhuCoin\"; // @eachvar\n    string public symbol = \"JZC\"; // @eachvar\n    uint8 public decimals = 18; // @eachvar\n    uint256 initSupply = 200000000; // @eachvar\n    uint256 public totalSupply = 0; // @eachvar\n\n    // 生成代币，并转入到 account_address 地址\n    constructor() \n    payable \n    public\n    {\n        totalSupply = mul(initSupply, 10**uint256(decimals));\n        balances[account_address] = totalSupply;\n\n        \n    }\n\n    function balanceOf( address _addr ) public view returns ( uint )\n    {\n        return balances[_addr];\n    }\n\n    // ========== 转账相关逻辑 ====================\n    event Transfer(\n        address indexed from, \n        address indexed to, \n        uint256 value\n    ); \n\n    function transfer(\n        address _to, \n        uint256 _value\n    ) \n    public \n    returns (bool) \n    {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = sub(balances[msg.sender],_value);\n\n            \n\n        balances[_to] = add(balances[_to], _value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    // ========= 授权转账相关逻辑 =============\n    \n    mapping (address => mapping (address => uint256)) internal allowed;\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n    public\n    returns (bool)\n    {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = sub(balances[_from], _value);\n        \n        \n        balances[_to] = add(balances[_to], _value);\n        allowed[_from][msg.sender] = sub(allowed[_from][msg.sender], _value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(\n        address _spender, \n        uint256 _value\n    ) \n    public \n    returns (bool) \n    {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(\n        address _owner,\n        address _spender\n    )\n    public\n    view\n    returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    function increaseApproval(\n        address _spender,\n        uint256 _addedValue\n    )\n    public\n    returns (bool)\n    {\n        allowed[msg.sender][_spender] = add(allowed[msg.sender][_spender], _addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(\n        address _spender,\n        uint256 _subtractedValue\n    )\n    public\n    returns (bool)\n    {\n        uint256 oldValue = allowed[msg.sender][_spender];\n\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } \n        else \n        {\n            allowed[msg.sender][_spender] = sub(oldValue, _subtractedValue);\n        }\n        \n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    \n    // ========= 直投相关逻辑 ===============\n    bool public direct_drop_switch = true; // 是否开启直投 @eachvar\n    uint256 public direct_drop_rate = 1000; // 兑换比例，注意这里是eth为单位，需要换算到wei @eachvar\n    address public direct_drop_address = 0x59a6C9d93838E1901990b50469d5126C720716dc; // 用于发放直投代币的账户 @eachvar\n    address public direct_drop_withdraw_address = 0x59a6C9d93838E1901990b50469d5126C720716dc; // 直投提现地址 @eachvar\n\n    bool public direct_drop_range = false; // 是否启用直投有效期 @eachvar\n    uint256 public direct_drop_range_start = 1547947620; // 有效期开始 @eachvar\n    uint256 public direct_drop_range_end = 1579483620; // 有效期结束 @eachvar\n\n    event TokenPurchase\n    (\n        address indexed purchaser,\n        address indexed beneficiary,\n        uint256 value,\n        uint256 amount\n    );\n\n    // 支持为别人购买\n    function buyTokens( address _beneficiary ) \n    public \n    payable // 接收支付\n    returns (bool)\n    {\n        require(direct_drop_switch);\n        require(_beneficiary != address(0));\n\n        // 检查有效期开关\n        if( direct_drop_range )\n        {\n            // 当前时间必须在有效期内\n            // solium-disable-next-line security/no-block-members\n            require(block.timestamp >= direct_drop_range_start && block.timestamp <= direct_drop_range_end);\n\n        }\n        \n        // 计算根据兑换比例，应该转移的代币数量\n        // uint256 tokenAmount = mul(div(msg.value, 10**18), direct_drop_rate);\n        \n        uint256 tokenAmount = div(mul(msg.value,direct_drop_rate ), 10**18); //此处用 18次方，这是 wei to  ether 的换算，不是代币的，所以不用 decimals,先乘后除，否则可能为零\n        uint256 decimalsAmount = mul( 10**uint256(decimals), tokenAmount);\n        \n        // 首先检查代币发放账户余额\n        require\n        (\n            balances[direct_drop_address] >= decimalsAmount\n        );\n\n        assert\n        (\n            decimalsAmount > 0\n        );\n\n        \n        // 然后开始转账\n        uint256 all = add(balances[direct_drop_address], balances[_beneficiary]);\n\n        balances[direct_drop_address] = sub(balances[direct_drop_address], decimalsAmount);\n\n            \n\n        balances[_beneficiary] = add(balances[_beneficiary], decimalsAmount);\n        \n        assert\n        (\n            all == add(balances[direct_drop_address], balances[_beneficiary])\n        );\n\n        // 发送事件\n        emit TokenPurchase\n        (\n            msg.sender,\n            _beneficiary,\n            msg.value,\n            tokenAmount\n        );\n\n        return true;\n\n    } \n    \n\n     \n    \n    \n    // ============== admin 相关函数 ==================\n    modifier admin_only()\n    {\n        require(msg.sender==admin_address);\n        _;\n    }\n\n    function setAdmin( address new_admin_address ) \n    public \n    admin_only \n    returns (bool)\n    {\n        require(new_admin_address != address(0));\n        admin_address = new_admin_address;\n        return true;\n    }\n\n    \n    // 直投管理\n    function setDirectDrop( bool status )\n    public\n    admin_only\n    returns (bool)\n    {\n        direct_drop_switch = status;\n        return true;\n    }\n    \n    // ETH提现\n    function withDraw()\n    public\n    {\n        // 管理员和之前设定的提现账号可以发起提现，但钱一定是进提现账号\n        require(msg.sender == admin_address || msg.sender == direct_drop_withdraw_address);\n        require(address(this).balance > 0);\n        // 全部转到直投提现中\n        direct_drop_withdraw_address.transfer(address(this).balance);\n    }\n        // ======================================\n    /// 默认函数\n    function () external payable\n    {\n                \n                buyTokens(msg.sender);\n        \n        \n           \n    }\n\n    // ========== 公用函数 ===============\n    // 主要就是 safemath\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) \n    {\n        if (a == 0) \n        {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        return a / b;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) \n    {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n}",
  "bytecode": "60806040527359a6c9d93838e1901990b50469d5126c720716dc6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507359a6c9d93838e1901990b50469d5126c720716dc600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600c81526020017f44614a696e5a6875436f696e000000000000000000000000000000000000000081525060039080519060200190620000fa9291906200034a565b506040805190810160405280600381526020017f4a5a43000000000000000000000000000000000000000000000000000000000081525060049080519060200190620001489291906200034a565b506012600560006101000a81548160ff021916908360ff160217905550630bebc20060065560006007556001600960006101000a81548160ff0219169083151502179055506103e8600a557359a6c9d93838e1901990b50469d5126c720716dc600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507359a6c9d93838e1901990b50469d5126c720716dc600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600c60146101000a81548160ff021916908315150217905550635c43ce64600d55635e2501e4600e556200029a600654600560009054906101000a900460ff1660ff16600a0a6200030e640100000000026401000000009004565b60078190555060075460026000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620003f9565b60008083141562000323576000905062000344565b81830290508183828115156200033557fe5b041415156200034057fe5b8090505b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200038d57805160ff1916838001178555620003be565b82800160010185558215620003be579182015b82811115620003bd578251825591602001919060010190620003a0565b5b509050620003cd9190620003d1565b5090565b620003f691905b80821115620003f2576000816000905550600101620003d8565b5090565b90565b611ef580620004096000396000f30060806040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461014a57806309451cb2146101da578063095ea7b3146102315780630fdb1c101461029657806318160ddd146102ad57806323b872dd146102d8578063313ce5671461035d578063324f8ac91461038e57806332d76483146103b95780633381601e146103e457806341ec2ec61461041357806344272b2f1461045a5780636618846314610485578063661be157146104ea578063704b6c021461054157806370a082311461059c57806395d89b41146105f3578063a9059cbb14610683578063d373f4ee146106e8578063d73dd6231461073f578063dd62ed3e146107a4578063ec78aa0f1461081b578063ec8ac4d81461084a578063f2e6277214610898575b610147336108ef565b50005b34801561015657600080fd5b5061015f610d72565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561019f578082015181840152602081019050610184565b50505050905090810190601f1680156101cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e657600080fd5b506101ef610e10565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561023d57600080fd5b5061027c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e36565b604051808215151515815260200191505060405180910390f35b3480156102a257600080fd5b506102ab610f28565b005b3480156102b957600080fd5b506102c2611083565b6040518082815260200191505060405180910390f35b3480156102e457600080fd5b50610343600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611089565b604051808215151515815260200191505060405180910390f35b34801561036957600080fd5b5061037261142d565b604051808260ff1660ff16815260200191505060405180910390f35b34801561039a57600080fd5b506103a3611440565b6040518082815260200191505060405180910390f35b3480156103c557600080fd5b506103ce611446565b6040518082815260200191505060405180910390f35b3480156103f057600080fd5b506103f961144c565b604051808215151515815260200191505060405180910390f35b34801561041f57600080fd5b5061044060048036038101908080351515906020019092919050505061145f565b604051808215151515815260200191505060405180910390f35b34801561046657600080fd5b5061046f6114df565b6040518082815260200191505060405180910390f35b34801561049157600080fd5b506104d0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114e5565b604051808215151515815260200191505060405180910390f35b3480156104f657600080fd5b506104ff61176d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561054d57600080fd5b50610582600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611793565b604051808215151515815260200191505060405180910390f35b3480156105a857600080fd5b506105dd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611875565b6040518082815260200191505060405180910390f35b3480156105ff57600080fd5b506106086118be565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561064857808201518184015260208101905061062d565b50505050905090810190601f1680156106755780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561068f57600080fd5b506106ce600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061195c565b604051808215151515815260200191505060405180910390f35b3480156106f457600080fd5b506106fd611b6e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561074b57600080fd5b5061078a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b94565b604051808215151515815260200191505060405180910390f35b3480156107b057600080fd5b50610805600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d87565b6040518082815260200191505060405180910390f35b34801561082757600080fd5b50610830611e0e565b604051808215151515815260200191505060405180910390f35b61087e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108ef565b604051808215151515815260200191505060405180910390f35b3480156108a457600080fd5b506108ad611e21565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600080600080600960009054906101000a900460ff16151561091057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415151561094c57600080fd5b600c60149054906101000a900460ff161561098157600d5442101580156109755750600e544211155b151561098057600080fd5b5b61099e61099034600a54611e46565b670de0b6b3a7640000611e7e565b92506109bf600560009054906101000a900460ff1660ff16600a0a84611e46565b91508160026000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610a3157600080fd5b600082111515610a3d57fe5b610ae760026000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e94565b9050610b5460026000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611eb0565b60026000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c02600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611e94565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cef60026000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e94565b81141515610cf957fe5b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad183486604051808381526020018281526020019250505060405180910390a360019350505050919050565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e085780601f10610ddd57610100808354040283529160200191610e08565b820191906000526020600020905b815481529060010190602001808311610deb57829003601f168201915b505050505081565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610fd05750600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610fdb57600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff163111151561100157600080fd5b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015611080573d6000803e3d6000fd5b50565b60075481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156110c657600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561111457600080fd5b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561119f57600080fd5b6111e8600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611eb0565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611274600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611e94565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061133d600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611eb0565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600560009054906101000a900460ff1681565b600a5481565b600e5481565b600960009054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114bc57600080fd5b81600960006101000a81548160ff02191690831515021790555060019050919050565b600d5481565b600080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156115f6576000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611681565b6116008184611eb0565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117f057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561182c57600080fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119545780601f1061192957610100808354040283529160200191611954565b820191906000526020600020905b81548152906001019060200180831161193757829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561199957600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156119e757600080fd5b611a30600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611eb0565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611abc600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611e94565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611c1c600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611e94565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600c60149054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080831415611e595760009050611e78565b8183029050818382811515611e6a57fe5b04141515611e7457fe5b8090505b92915050565b60008183811515611e8b57fe5b04905092915050565b60008183019050828110151515611ea757fe5b80905092915050565b6000828211151515611ebe57fe5b8183039050929150505600a165627a7a72305820b9de06a95cfbaa0bcbab26917e8fe961a4179b85b1417a51dd8ffa0558930f7b0029"
}