{
  "address": "0xbb49a51ee5a66ca3a8cbe529379ba44ba67e6771",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "CryptoSolarTech Token",
  "contractName": "CrowdsaleToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "0",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-27\n*/\n\npragma solidity ^0.4.19;\n\n/**\n * Originally from https://github.com/TokenMarketNet/ico\n * Modified by https://www.coinfabrik.com/\n */\n\npragma solidity ^0.4.19;\n\n/**\n * Originally from https://github.com/TokenMarketNet/ico\n * Modified by https://www.coinfabrik.com/\n */\n\npragma solidity ^0.4.19;\n\n/**\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\n * Modified by https://www.coinfabrik.com/\n */\n\npragma solidity ^0.4.19;\n\n/**\n * Interface for the standard token.\n * Based on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n */\ncontract EIP20Token {\n\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool success);\n  function transferFrom(address from, address to, uint256 value) public returns (bool success);\n  function approve(address spender, uint256 value) public returns (bool success);\n  function allowance(address owner, address spender) public view returns (uint256 remaining);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n  ** Optional functions\n  *\n  function name() public view returns (string name);\n  function symbol() public view returns (string symbol);\n  function decimals() public view returns (uint8 decimals);\n  *\n  **/\n\n}\npragma solidity ^0.4.19;\n\n/**\n * Originally from  https://github.com/OpenZeppelin/zeppelin-solidity\n * Modified by https://www.coinfabrik.com/\n */\n\n/**\n * Math operations with safety checks\n */\nlibrary SafeMath {\n  function mul(uint a, uint b) internal pure returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint a, uint b) internal pure returns (uint) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint a, uint b) internal pure returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal pure returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint a, uint b) internal pure returns (uint) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint a, uint b) internal pure returns (uint) {\n    return a < b ? a : b;\n  }\n}\n\npragma solidity ^0.4.19;\n\n// Interface for burning tokens\ncontract Burnable {\n  // @dev Destroys tokens for an account\n  // @param account Account whose tokens are destroyed\n  // @param value Amount of tokens to destroy\n  function burnTokens(address account, uint value) internal;\n  event Burned(address account, uint value);\n}\npragma solidity ^0.4.19;\n\n/**\n * Authored by https://www.coinfabrik.com/\n */\n\n\n/**\n * Internal interface for the minting of tokens.\n */\ncontract Mintable {\n\n  /**\n   * @dev Mints tokens for an account\n   * This function should the Minted event.\n   */\n  function mintInternal(address receiver, uint amount) internal;\n\n  /** Token supply got increased and a new owner received these tokens */\n  event Minted(address receiver, uint amount);\n}\n\n/**\n * @title Standard token\n * @dev Basic implementation of the EIP20 standard token (also known as ERC20 token).\n */\ncontract StandardToken is EIP20Token, Burnable, Mintable {\n  using SafeMath for uint;\n\n  uint private total_supply;\n  mapping(address => uint) private balances;\n  mapping(address => mapping (address => uint)) private allowed;\n\n\n  function totalSupply() public view returns (uint) {\n    return total_supply;\n  }\n\n  /**\n   * @dev transfer token for a specified address\n   * @param to The address to transfer to.\n   * @param value The amount to be transferred.\n   */\n  function transfer(address to, uint value) public returns (bool success) {\n    balances[msg.sender] = balances[msg.sender].sub(value);\n    balances[to] = balances[to].add(value);\n    Transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Gets the balance of the specified address.\n   * @param account The address whose balance is to be queried.\n   * @return An uint representing the amount owned by the passed address.\n   */\n  function balanceOf(address account) public view returns (uint balance) {\n    return balances[account];\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint the amout of tokens to be transfered\n   */\n  function transferFrom(address from, address to, uint value) public returns (bool success) {\n    uint allowance = allowed[from][msg.sender];\n\n    // Check is not needed because sub(allowance, value) will already throw if this condition is not met\n    // require(value <= allowance);\n    // SafeMath uses assert instead of require though, beware when using an analysis tool\n\n    balances[from] = balances[from].sub(value);\n    balances[to] = balances[to].add(value);\n    allowed[from][msg.sender] = allowance.sub(value);\n    Transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint value) public returns (bool success) {\n\n    // To change the approve amount you first have to reduce the addresses'\n    //  allowance to zero by calling `approve(spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require (value == 0 || allowed[msg.sender][spender] == 0);\n\n    allowed[msg.sender][spender] = value;\n    Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n   * @param account address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address account, address spender) public view returns (uint remaining) {\n    return allowed[account][spender];\n  }\n\n  /**\n   * Atomic increment of approved spending\n   *\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   */\n  function addApproval(address spender, uint addedValue) public returns (bool success) {\n      uint oldValue = allowed[msg.sender][spender];\n      allowed[msg.sender][spender] = oldValue.add(addedValue);\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n      return true;\n  }\n\n  /**\n   * Atomic decrement of approved spending.\n   *\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   */\n  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\n\n      uint oldVal = allowed[msg.sender][spender];\n\n      if (subtractedValue > oldVal) {\n          allowed[msg.sender][spender] = 0;\n      } else {\n          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\n      }\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n      return true;\n  }\n\n  /**\n   * @dev Provides an internal function for destroying tokens. Useful for upgrades.\n   */\n  function burnTokens(address account, uint value) internal {\n    balances[account] = balances[account].sub(value);\n    total_supply = total_supply.sub(value);\n    Transfer(account, 0, value);\n    Burned(account, value);\n  }\n\n  /**\n   * @dev Provides an internal minting function.\n   */\n  function mintInternal(address receiver, uint amount) internal {\n    total_supply = total_supply.add(amount);\n    balances[receiver] = balances[receiver].add(amount);\n    Minted(receiver, amount);\n\n    // Beware: Address zero may be used for special transactions in a future fork.\n    // This will make the mint transaction appear in EtherScan.io\n    // We can remove this after there is a standardized minting event\n    Transfer(0, receiver, amount);\n  }\n  \n}\npragma solidity ^0.4.19;\n\n/**\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\n * Modified by https://www.coinfabrik.com/\n */\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control \n * functions, this simplifies the implementation of \"user permissions\". \n */\ncontract Ownable {\n  address public owner;\n\n\n  /** \n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() internal {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner. \n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to. \n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    owner = newOwner;\n  }\n\n}\n\n/**\n * Define interface for releasing the token transfer after a successful crowdsale.\n */\ncontract ReleasableToken is StandardToken, Ownable {\n\n  /* The finalizer contract that allows lifting the transfer limits on this token */\n  address public releaseAgent;\n\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n  bool public released = false;\n\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n  mapping (address => bool) public transferAgents;\n\n  /**\n   * Set the contract that can call release and make the token transferable.\n   *\n   * Since the owner of this contract is (or should be) the crowdsale,\n   * it can only be called by a corresponding exposed API in the crowdsale contract in case of input error.\n   */\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n    // We don't do interface check here as we might want to have a normal wallet address to act as a release agent.\n    releaseAgent = addr;\n  }\n\n  /**\n   * Owner can allow a particular address (e.g. a crowdsale contract) to transfer tokens despite the lock up period.\n   */\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n    transferAgents[addr] = state;\n  }\n\n  /**\n   * One way function to release the tokens into the wild.\n   *\n   * Can be called only from the release agent that should typically be the finalize agent ICO contract.\n   * In the scope of the crowdsale, it is only called if the crowdsale has been a success (first milestone reached).\n   */\n  function releaseTokenTransfer() public onlyReleaseAgent {\n    released = true;\n  }\n\n  /**\n   * Limit token transfer until the crowdsale is over.\n   */\n  modifier canTransfer(address sender) {\n    require(released || transferAgents[sender]);\n    _;\n  }\n\n  /** The function can be called only before or after the tokens have been released */\n  modifier inReleaseState(bool releaseState) {\n    require(releaseState == released);\n    _;\n  }\n\n  /** The function can be called only by a whitelisted release agent. */\n  modifier onlyReleaseAgent() {\n    require(msg.sender == releaseAgent);\n    _;\n  }\n\n  /** We restrict transfer by overriding it */\n  function transfer(address to, uint value) public canTransfer(msg.sender) returns (bool success) {\n    // Call StandardToken.transfer()\n   return super.transfer(to, value);\n  }\n\n  /** We restrict transferFrom by overriding it */\n  function transferFrom(address from, address to, uint value) public canTransfer(from) returns (bool success) {\n    // Call StandardToken.transferForm()\n    return super.transferFrom(from, to, value);\n  }\n\n}\n\n\n\npragma solidity ^0.4.19;\n\n/**\n * First envisioned by Golem and Lunyr projects.\n * Originally from https://github.com/TokenMarketNet/ico\n * Modified by https://www.coinfabrik.com/\n */\n\npragma solidity ^0.4.19;\n\n/**\n * Inspired by Lunyr.\n * Originally from https://github.com/TokenMarketNet/ico\n */\n\n/**\n * Upgrade agent transfers tokens to a new contract.\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\n *\n * The Upgrade agent is the interface used to implement a token\n * migration in the case of an emergency.\n * The function upgradeFrom has to implement the part of the creation\n * of new tokens on behalf of the user doing the upgrade.\n *\n * The new token can implement this interface directly, or use.\n */\ncontract UpgradeAgent {\n\n  /** This value should be the same as the original token's total supply */\n  uint public originalSupply;\n\n  /** Interface to ensure the contract is correctly configured */\n  function isUpgradeAgent() public pure returns (bool) {\n    return true;\n  }\n\n  /**\n  Upgrade an account\n\n  When the token contract is in the upgrade status the each user will\n  have to call `upgrade(value)` function from UpgradeableToken.\n\n  The upgrade function adjust the balance of the user and the supply\n  of the previous token and then call `upgradeFrom(value)`.\n\n  The UpgradeAgent is the responsible to create the tokens for the user\n  in the new contract.\n\n  * @param from Account to upgrade.\n  * @param value Tokens to upgrade.\n\n  */\n  function upgradeFrom(address from, uint value) public;\n\n}\n\n\n/**\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n *\n */\ncontract UpgradeableToken is EIP20Token, Burnable {\n  using SafeMath for uint;\n\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n  address public upgradeMaster;\n\n  /** The next contract where the tokens will be migrated. */\n  UpgradeAgent public upgradeAgent;\n\n  /** How many tokens we have upgraded by now. */\n  uint public totalUpgraded = 0;\n\n  /**\n   * Upgrade states.\n   *\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet. This allows changing the upgrade agent while there is time.\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\n   *\n   */\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n\n  /**\n   * Somebody has upgraded some of his tokens.\n   */\n  event Upgrade(address indexed from, address to, uint value);\n\n  /**\n   * New upgrade agent available.\n   */\n  event UpgradeAgentSet(address agent);\n\n  /**\n   * Do not allow construction without upgrade master set.\n   */\n  function UpgradeableToken(address master) internal {\n    setUpgradeMaster(master);\n  }\n\n  /**\n   * Allow the token holder to upgrade some of their tokens to a new contract.\n   */\n  function upgrade(uint value) public {\n    UpgradeState state = getUpgradeState();\n    // Ensure it's not called in a bad state\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n\n    // Validate input value.\n    require(value != 0);\n\n    // Upgrade agent reissues the tokens\n    upgradeAgent.upgradeFrom(msg.sender, value);\n    \n    // Take tokens out from circulation\n    burnTokens(msg.sender, value);\n    totalUpgraded = totalUpgraded.add(value);\n\n    Upgrade(msg.sender, upgradeAgent, value);\n  }\n\n  /**\n   * Set an upgrade agent that handles the upgrade process\n   */\n  function setUpgradeAgent(address agent) onlyMaster external {\n    // Check whether the token is in a state that we could think of upgrading\n    require(canUpgrade());\n\n    require(agent != 0x0);\n    // Upgrade has already begun for an agent\n    require(getUpgradeState() != UpgradeState.Upgrading);\n\n    upgradeAgent = UpgradeAgent(agent);\n\n    // Bad interface\n    require(upgradeAgent.isUpgradeAgent());\n    // Make sure that token supplies match in source and target\n    require(upgradeAgent.originalSupply() == totalSupply());\n\n    UpgradeAgentSet(upgradeAgent);\n  }\n\n  /**\n   * Get the state of the token upgrade.\n   */\n  function getUpgradeState() public view returns(UpgradeState) {\n    if (!canUpgrade()) return UpgradeState.NotAllowed;\n    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n    else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n    else return UpgradeState.Upgrading;\n  }\n\n  /**\n   * Change the upgrade master.\n   *\n   * This allows us to set a new owner for the upgrade mechanism.\n   */\n  function changeUpgradeMaster(address new_master) onlyMaster public {\n    setUpgradeMaster(new_master);\n  }\n\n  /**\n   * Internal upgrade master setter.\n   */\n  function setUpgradeMaster(address new_master) private {\n    require(new_master != 0x0);\n    upgradeMaster = new_master;\n  }\n\n  /**\n   * Child contract can override to provide the condition in which the upgrade can begin.\n   */\n  function canUpgrade() public view returns(bool) {\n     return true;\n  }\n\n\n  modifier onlyMaster() {\n    require(msg.sender == upgradeMaster);\n    _;\n  }\n}\n\npragma solidity ^0.4.19;\n\n/**\n * Authored by https://www.coinfabrik.com/\n */\n\n\n// This contract aims to provide an inheritable way to recover tokens from a contract not meant to hold tokens\n// To use this contract, have your token-ignoring contract inherit this one and implement getLostAndFoundMaster to decide who can move lost tokens.\n// Of course, this contract imposes support costs upon whoever is the lost and found master.\ncontract LostAndFoundToken {\n  /**\n   * @return Address of the account that handles movements.\n   */\n  function getLostAndFoundMaster() internal view returns (address);\n\n  /**\n   * @param agent Address that will be able to move tokens with transferFrom\n   * @param tokens Amount of tokens approved for transfer\n   * @param token_contract Contract of the token\n   */\n  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\n    require(msg.sender == getLostAndFoundMaster());\n    // We use approve instead of transfer to minimize the possibility of the lost and found master\n    //  getting them stuck in another address by accident.\n    token_contract.approve(agent, tokens);\n  }\n}\npragma solidity ^0.4.19;\n\n/**\n * Originally from https://github.com/TokenMarketNet/ico\n * Modified by https://www.coinfabrik.com/\n */\n\n\n/**\n * A public interface to increase the supply of a token.\n *\n * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\n * Only mint agents, usually contracts whitelisted by the owner, can mint new tokens.\n *\n */\ncontract MintableToken is Mintable, Ownable {\n\n  using SafeMath for uint;\n\n  bool public mintingFinished = false;\n\n  /** List of agents that are allowed to create new tokens */\n  mapping (address => bool) public mintAgents;\n\n  event MintingAgentChanged(address addr, bool state);\n\n\n  function MintableToken(uint initialSupply, address multisig, bool mintable) internal {\n    require(multisig != address(0));\n    // Cannot create a token without supply and no minting\n    require(mintable || initialSupply != 0);\n    // Create initially all balance on the team multisig\n    if (initialSupply > 0)\n      mintInternal(multisig, initialSupply);\n    // No more new supply allowed after the token creation\n    mintingFinished = !mintable;\n  }\n\n  /**\n   * Create new tokens and allocate them to an address.\n   *\n   * Only callable by a mint agent (e.g. crowdsale contract).\n   */\n  function mint(address receiver, uint amount) onlyMintAgent canMint public {\n    mintInternal(receiver, amount);\n  }\n\n  /**\n   * Owner can allow a crowdsale contract to mint new tokens.\n   */\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n    mintAgents[addr] = state;\n    MintingAgentChanged(addr, state);\n  }\n\n  modifier onlyMintAgent() {\n    // Only mint agents are allowed to mint new tokens\n    require(mintAgents[msg.sender]);\n    _;\n  }\n\n  /** Make sure we are not done yet. */\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n}\n\n/**\n * A crowdsale token.\n *\n * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\n *\n * - The token transfer() is disabled until the crowdsale is over\n * - The token contract gives an opt-in upgrade path to a new contract\n * - The same token can be part of several crowdsales through the approve() mechanism\n * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\n * - ERC20 tokens transferred to this contract can be recovered by a lost and found master\n *\n */\ncontract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken, LostAndFoundToken {\n\n  string public name = \"Cryptosolartech\";\n\n  string public symbol = \"CST\";\n\n  uint8 public decimals;\n\n  address public lost_and_found_master;\n\n  /**\n   * Construct the token.\n   *\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\n   *\n   * @param initial_supply How many tokens we start with.\n   * @param token_decimals Number of decimal places.\n   * @param team_multisig Address of the multisig that receives the initial supply and is set as the upgrade master.\n   * @param token_retriever Address of the account that handles ERC20 tokens that were accidentally sent to this contract.\n   */\n  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, address token_retriever) public\n  UpgradeableToken(team_multisig) MintableToken(initial_supply, team_multisig, true) {\n    require(token_retriever != address(0));\n    decimals = token_decimals;\n    lost_and_found_master = token_retriever;\n  }\n\n  /**\n   * When token is released to be transferable, prohibit new token creation.\n   */\n  function releaseTokenTransfer() public onlyReleaseAgent {\n    mintingFinished = true;\n    super.releaseTokenTransfer();\n  }\n\n  /**\n   * Allow upgrade agent functionality to kick in only if the crowdsale was a success.\n   */\n  function canUpgrade() public view returns(bool) {\n    return released && super.canUpgrade();\n  }\n\n  function burn(uint value) public {\n    burnTokens(msg.sender, value);\n  }\n\n  function getLostAndFoundMaster() internal view returns(address) {\n    return lost_and_found_master;\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setTransferAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setReleaseAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setMintAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"token_contract\",\"type\":\"address\"}],\"name\":\"enableLostAndFound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpgradeState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lost_and_found_master\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"addApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setUpgradeAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"subApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_master\",\"type\":\"address\"}],\"name\":\"changeUpgradeMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initial_supply\",\"type\":\"uint256\"},{\"name\":\"token_decimals\",\"type\":\"uint8\"},{\"name\":\"team_multisig\",\"type\":\"address\"},{\"name\":\"token_retriever\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"MintingAgentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "606060409081526004805460a060020a60ff02191690556006805460ff191690556000600a558051908101604052600f81527f43727970746f736f6c61727465636800000000000000000000000000000000006020820152600b9080516200006c9291602001906200032b565b5060408051908101604052600381527f43535400000000000000000000000000000000000000000000000000000000006020820152600c908051620000b69291602001906200032b565b503415620000c357600080fd5b604051608080620019148339810160405280805191906020018051919060200180519190602001805160038054600160a060020a03191633600160a060020a039081169190911790915590925083915085908290600190821615156200012857600080fd5b80806200013457508215155b15156200014057600080fd5b60008311156200016457620001648284640100000000620011d0620001e482021704565b6006805460ff19169115919091179055506200019090508164010000000062001491620002dc82021704565b50600160a060020a0381161515620001a757600080fd5b600d8054600160a060020a039092166101000261010060a860020a031960ff90951660ff1990931692909217939093161790915550620003d09050565b600054620002019082640100000000620013706200031482021704565b6000908155600160a060020a038316815260016020526040902054620002369082640100000000620013706200031482021704565b600160a060020a03831660009081526001602052604090819020919091557f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe908390839051600160a060020a03909216825260208201526040908101905180910390a181600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35050565b600160a060020a0381161515620002f257600080fd5b60088054600160a060020a031916600160a060020a0392909216919091179055565b6000828201838110156200032457fe5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200036e57805160ff19168380011785556200039e565b828001600101855582156200039e579182015b828111156200039e57825182559160200191906001019062000381565b50620003ac929150620003b0565b5090565b620003cd91905b80821115620003ac5760008155600101620003b7565b90565b61153480620003e06000396000f3006060604052600436106101925763ffffffff60e060020a60003504166302f652a3811461019757806305d2035b146101bd57806306fdde03146101e4578063095ea7b31461026e57806318160ddd1461029057806323b872dd146102b557806329ff4f53146102dd578063313ce567146102fc57806340c10f191461032557806342966c681461034757806342c1867b1461035d578063432146751461037c57806345977d03146103a05780634a52e506146103b65780635de4ccb0146103df5780635f412d4f1461040e578063600440cb1461042157806370a08231146104345780638444b39114610453578063867c28571461048a5780638da5cb5b146104a957806395d89b41146104bc57806396132521146104cf5780639738968c146104e2578063a64278ce146104f5578063a9059cbb14610508578063ac3cb72c1461052a578063c752ff621461054c578063d1f276d31461055f578063d7e7088a14610572578063dd62ed3e14610591578063e2301d02146105b6578063ea56a44d146105d8578063f2fde38b146105f7575b600080fd5b34156101a257600080fd5b6101bb600160a060020a03600435166024351515610616565b005b34156101c857600080fd5b6101d0610677565b604051901515815260200160405180910390f35b34156101ef57600080fd5b6101f7610680565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561023357808201518382015260200161021b565b50505050905090810190601f1680156102605780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561027957600080fd5b6101d0600160a060020a036004351660243561071e565b341561029b57600080fd5b6102a36107b2565b60405190815260200160405180910390f35b34156102c057600080fd5b6101d0600160a060020a03600435811690602435166044356107b9565b34156102e857600080fd5b6101bb600160a060020a036004351661080d565b341561030757600080fd5b61030f610865565b60405160ff909116815260200160405180910390f35b341561033057600080fd5b6101bb600160a060020a036004351660243561086e565b341561035257600080fd5b6101bb6004356108b3565b341561036857600080fd5b6101d0600160a060020a03600435166108c0565b341561038757600080fd5b6101bb600160a060020a036004351660243515156108d5565b34156103ab57600080fd5b6101bb600435610971565b34156103c157600080fd5b6101bb600160a060020a036004358116906024359060443516610a9b565b34156103ea57600080fd5b6103f2610b3f565b604051600160a060020a03909116815260200160405180910390f35b341561041957600080fd5b6101bb610b4e565b341561042c57600080fd5b6103f2610b80565b341561043f57600080fd5b6102a3600160a060020a0360043516610b8f565b341561045e57600080fd5b610466610baa565b6040518082600481111561047657fe5b60ff16815260200191505060405180910390f35b341561049557600080fd5b6101d0600160a060020a0360043516610bf5565b34156104b457600080fd5b6103f2610c0a565b34156104c757600080fd5b6101f7610c19565b34156104da57600080fd5b6101d0610c84565b34156104ed57600080fd5b6101d0610c94565b341561050057600080fd5b6103f2610cb8565b341561051357600080fd5b6101d0600160a060020a0360043516602435610ccc565b341561053557600080fd5b6101d0600160a060020a0360043516602435610d1e565b341561055757600080fd5b6102a3610db1565b341561056a57600080fd5b6103f2610db7565b341561057d57600080fd5b6101bb600160a060020a0360043516610dc6565b341561059c57600080fd5b6102a3600160a060020a0360043581169060243516610f70565b34156105c157600080fd5b6101d0600160a060020a0360043516602435610f9b565b34156105e357600080fd5b6101bb600160a060020a036004351661105c565b341561060257600080fd5b6101bb600160a060020a0360043516611080565b60035433600160a060020a0390811691161461063157600080fd5b60045460009060a060020a900460ff161561064b57600080fd5b50600160a060020a03919091166000908152600560205260409020805460ff1916911515919091179055565b60065460ff1681565b600b8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107165780601f106106eb57610100808354040283529160200191610716565b820191906000526020600020905b8154815290600101906020018083116106f957829003601f168201915b505050505081565b60008115806107505750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561075b57600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590556000805160206114e98339815191529085905190815260200160405180910390a350600192915050565b6000545b90565b600454600090849060a060020a900460ff16806107ee5750600160a060020a03811660009081526005602052604090205460ff165b15156107f957600080fd5b6108048585856110d2565b95945050505050565b60035433600160a060020a0390811691161461082857600080fd5b60045460009060a060020a900460ff161561084257600080fd5b5060048054600160a060020a031916600160a060020a0392909216919091179055565b600d5460ff1681565b600160a060020a03331660009081526007602052604090205460ff16151561089557600080fd5b60065460ff16156108a557600080fd5b6108af82826111d0565b5050565b6108bd33826112a2565b50565b60076020526000908152604090205460ff1681565b60035433600160a060020a039081169116146108f057600080fd5b60065460ff161561090057600080fd5b600160a060020a03821660009081526007602052604090819020805460ff19168315151790557f4b0adf6c802794c7dde28a08a4e07131abcff3bf9603cd71f14f90bec7865efa908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b600061097b610baa565b9050600381600481111561098b57fe5b14806109a2575060048160048111156109a057fe5b145b15156109ad57600080fd5b8115156109b957600080fd5b600954600160a060020a031663753e88e5338460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610a0f57600080fd5b6102c65a03f11515610a2057600080fd5b505050610a2d33836112a2565b600a54610a40908363ffffffff61137016565b600a55600954600160a060020a03338116917f7e5c344a8141a805725cb476f76c6953b842222b967edd1f78ddb6e8b3f397ac911684604051600160a060020a03909216825260208201526040908101905180910390a25050565b610aa3611386565b600160a060020a031633600160a060020a0316141515610ac257600080fd5b80600160a060020a031663095ea7b3848460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610b1f57600080fd5b6102c65a03f11515610b3057600080fd5b50505060405180515050505050565b600954600160a060020a031681565b60045433600160a060020a03908116911614610b6957600080fd5b6006805460ff19166001179055610b7e61139a565b565b600854600160a060020a031681565b600160a060020a031660009081526001602052604090205490565b6000610bb4610c94565b1515610bc2575060016107b6565b600954600160a060020a03161515610bdc575060026107b6565b600a541515610bed575060036107b6565b5060046107b6565b60056020526000908152604090205460ff1681565b600354600160a060020a031681565b600c8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107165780601f106106eb57610100808354040283529160200191610716565b60045460a060020a900460ff1681565b60045460009060a060020a900460ff168015610cb35750610cb36113cd565b905090565b600d546101009004600160a060020a031681565b600454600090339060a060020a900460ff1680610d015750600160a060020a03811660009081526005602052604090205460ff165b1515610d0c57600080fd5b610d1684846113d2565b949350505050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610d56818463ffffffff61137016565b600160a060020a033381166000818152600260209081526040808320948a168084529490915290819020849055919290916000805160206114e983398151915291905190815260200160405180910390a35060019392505050565b600a5481565b600454600160a060020a031681565b60085433600160a060020a03908116911614610de157600080fd5b610de9610c94565b1515610df457600080fd5b600160a060020a0381161515610e0957600080fd5b6004610e13610baa565b6004811115610e1e57fe5b1415610e2957600080fd5b60098054600160a060020a031916600160a060020a038381169190911791829055166361d3d7a66000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610e8757600080fd5b6102c65a03f11515610e9857600080fd5b505050604051805190501515610ead57600080fd5b610eb56107b2565b600954600160a060020a0316634b2ba0dd6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610efd57600080fd5b6102c65a03f11515610f0e57600080fd5b50505060405180519050141515610f2457600080fd5b6009547f7845d5aa74cc410e35571258d954f23b82276e160fe8c188fa80566580f279cc90600160a060020a0316604051600160a060020a03909116815260200160405180910390a150565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115610ff857600160a060020a033381166000908152600260209081526040808320938816835292905290812055611008565b610d56818463ffffffff61147f16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020546000805160206114e9833981519152915190815260200160405180910390a35060019392505050565b60085433600160a060020a0390811691161461107757600080fd5b6108bd81611491565b60035433600160a060020a0390811691161461109b57600080fd5b600160a060020a03811615156110b057600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a038084166000818152600260209081526040808320339095168352938152838220549282526001905291822054611116908463ffffffff61147f16565b600160a060020a03808716600090815260016020526040808220939093559086168152205461114b908463ffffffff61137016565b600160a060020a038516600090815260016020526040902055611174818463ffffffff61147f16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616916000805160206114c98339815191529086905190815260200160405180910390a3506001949350505050565b6000546111e3908263ffffffff61137016565b6000908155600160a060020a03831681526001602052604090205461120e908263ffffffff61137016565b600160a060020a03831660009081526001602052604090819020919091557f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe908390839051600160a060020a03909216825260208201526040908101905180910390a181600160a060020a031660006000805160206114c98339815191528360405190815260200160405180910390a35050565b600160a060020a0382166000908152600160205260409020546112cb908263ffffffff61147f16565b600160a060020a038316600090815260016020526040812091909155546112f8908263ffffffff61147f16565b6000908155600160a060020a0383166000805160206114c98339815191528360405190815260200160405180910390a37f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df78282604051600160a060020a03909216825260208201526040908101905180910390a15050565b60008282018381101561137f57fe5b9392505050565b600d546101009004600160a060020a031690565b60045433600160a060020a039081169116146113b557600080fd5b6004805460a060020a60ff02191660a060020a179055565b600190565b600160a060020a0333166000908152600160205260408120546113fb908363ffffffff61147f16565b600160a060020a033381166000908152600160205260408082209390935590851681522054611430908363ffffffff61137016565b600160a060020a0380851660008181526001602052604090819020939093559133909116906000805160206114c98339815191529085905190815260200160405180910390a350600192915050565b60008282111561148b57fe5b50900390565b600160a060020a03811615156114a657600080fd5b60088054600160a060020a031916600160a060020a03929092169190911790555600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a165627a7a723058203ee262f8b499031059f514a24cb0a8e6bcff0c8578d5cc51c6f81a2a963fa996002900000000000000000000000000000000000000000014d84ebcc1c5caa6000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000093c4a8ed12bab494bc3045380ee1cfc07507d23400000000000000000000000054d9249c776c56520a62faecb87a00e105e8c9dc",
  "constructorArguments": "00000000000000000000000000000000000000000014d84ebcc1c5caa6000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000093c4a8ed12bab494bc3045380ee1cfc07507d23400000000000000000000000054d9249c776c56520a62faecb87a00e105e8c9dc"
}