{
  "address": "0xfefc38f1904970f3625d1d7f096db3786907e5bc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LUPXSale",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-16\n*/\n\npragma solidity ^0.4.25;\n\ninterface IERC20Token {                                     \n    function balanceOf(address owner) external returns (uint256);\n    function transfer(address to, uint256 amount) external returns (bool);\n    function decimals() external returns (uint256);\n}\n\ncontract LUPXSale {\n    IERC20Token public tokenContract ;\n    address owner ;\n    uint256 public tokensSold ;\n    uint256 public LUPXPrice ;\n    \n    event sold(address buyer, uint256 amount) ;\n    event priceAdjusted(uint256 oldPrice, uint256 newPrice) ;\n    event endOfSale(uint256 timeStamp) ; \n\n    constructor(IERC20Token _tokenContract, uint256 LUPXperETH) public {\n        owner = msg.sender ;\n        tokenContract = _tokenContract ;\n        LUPXPrice = LUPXperETH ; \n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner) ; \n        _;\n    }\n\n    function safeMultiply(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0 ;\n        } else {\n            uint256 c = a * b ;\n            assert(c / a == b) ;\n            return c ;\n        }\n    }\n\n    function () public payable {\n        uint256 soldAmount = 0 ; \n        \n        if (msg.value <= 1 ether) {\n            soldAmount = safeMultiply(msg.value, LUPXPrice) ;\n        }\n        else {\n            soldAmount = safeMultiply(msg.value*3/2, LUPXPrice) ;\n        }\n        require(tokenContract.balanceOf(this) >= soldAmount) ;\n        tokenContract.transfer(msg.sender, soldAmount) ;\n        \n        tokensSold += soldAmount/10**18 ; \n        emit sold(msg.sender, soldAmount/10**18) ; \n\n    }\n    \n    function withdrawETH() public  onlyOwner {\n        msg.sender.transfer(address(this).balance) ;  \n    }\n\n    function endLUPXSale() public onlyOwner { \n        require(tokenContract.transfer(owner, tokenContract.balanceOf(this))) ;\n        msg.sender.transfer(address(this).balance) ;\n        emit endOfSale(now) ; \n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051604080610977833981018060405281019080805190602001909291908051906020019092919050505033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060038190555050506108a1806100d66000396000f30060806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632ef3edaf1461035d578063518ab2a81461038857806355a373d6146103b35780639bc3db461461040a578063e086e5ec14610421575b6000809050670de0b6b3a7640000341115156100965761008f34600354610438565b90506100b4565b6100b16002600334028115156100a857fe5b04600354610438565b90505b806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561017157600080fd5b505af1158015610185573d6000803e3d6000fd5b505050506040513d602081101561019b57600080fd5b8101908080519060200190929190505050101515156101b957600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561027d57600080fd5b505af1158015610291573d6000803e3d6000fd5b505050506040513d60208110156102a757600080fd5b810190808051906020019092919050505050670de0b6b3a7640000818115156102cc57fe5b046002600082825401925050819055507f5b0833cc9b85dfe4167c39867467dbdef9a05060318b433fd5759b5dca79ba7f33670de0b6b3a76400008381151561031157fe5b04604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150005b34801561036957600080fd5b50610372610473565b6040518082815260200191505060405180910390f35b34801561039457600080fd5b5061039d610479565b6040518082815260200191505060405180910390f35b3480156103bf57600080fd5b506103c861047f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561041657600080fd5b5061041f6104a4565b005b34801561042d57600080fd5b506104366107b9565b005b600080600084141561044d576000915061046c565b828402905082848281151561045e57fe5b0414151561046857fe5b8091505b5092915050565b60035481565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561050057600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561061c57600080fd5b505af1158015610630573d6000803e3d6000fd5b505050506040513d602081101561064657600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156106dc57600080fd5b505af11580156106f0573d6000803e3d6000fd5b505050506040513d602081101561070657600080fd5b8101908080519060200190929190505050151561072257600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015801561077f573d6000803e3d6000fd5b507f0d1de6d5bbb27391d1d1609986b22970274fd088b2df5902765a53da12bed5fb426040518082815260200191505060405180910390a1565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561081557600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610872573d6000803e3d6000fd5b505600a165627a7a723058205e237685a964c3399633811dc0fdaa0196aa4626d8c333d6eb21350a284bde7f002900000000000000000000000049c67ae22c334d0123dd6dbdc44f5302e130a88b000000000000000000000000000000000000000000000000000000000003d090",
  "constructorArguments": "00000000000000000000000049c67ae22c334d0123dd6dbdc44f5302e130a88b000000000000000000000000000000000000000000000000000000000003d090"
}