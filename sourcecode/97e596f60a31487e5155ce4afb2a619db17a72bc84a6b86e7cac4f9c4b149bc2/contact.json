{
  "address": "0x954730298304a0b4b4c885244695aed5e0a8a27a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NamiGame",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-07\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * Math operations with safety checks\n */\nlibrary SafeMath {\n  function mul(uint a, uint b) internal pure returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint a, uint b) internal pure returns (uint) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint a, uint b) internal pure returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal pure returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\n/*\n* NamiMultiSigWallet smart contract-------------------------------\n*/\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\ncontract NamiMultiSigWallet {\n\n    uint constant public MAX_OWNER_COUNT = 50;\n\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Revocation(address indexed sender, uint indexed transactionId);\n    event Submission(uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event Deposit(address indexed sender, uint value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint required);\n\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] public owners;\n    uint public required;\n    uint public transactionCount;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n\n    modifier onlyWallet() {\n        require(msg.sender == address(this));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        require(!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require(isOwner[owner]);\n        _;\n    }\n\n    modifier transactionExists(uint transactionId) {\n        require(transactions[transactionId].destination != 0);\n        _;\n    }\n\n    modifier confirmed(uint transactionId, address owner) {\n        require(confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(uint transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(uint transactionId) {\n        require(!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require(_address != 0);\n        _;\n    }\n\n    modifier validRequirement(uint ownerCount, uint _required) {\n        require(!(ownerCount > MAX_OWNER_COUNT\n            || _required > ownerCount\n            || _required == 0\n            || ownerCount == 0));\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function() public payable {\n        if (msg.value > 0)\n            emit Deposit(msg.sender, msg.value);\n    }\n\n    /*\n     * Public functions\n     */\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    constructor(address[] _owners, uint _required)\n        public\n        validRequirement(_owners.length, _required)\n    {\n        for (uint i = 0; i < _owners.length; i++) {\n            require(!(isOwner[_owners[i]] || _owners[i] == 0));\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        emit OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++) {\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        emit OwnerRemoval(owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param owner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyWallet\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint i=0; i<owners.length; i++) {\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        emit OwnerRemoval(owner);\n        emit OwnerAddition(newOwner);\n    }\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        emit RequirementChange(_required);\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes data)\n        public\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        emit Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        emit Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n        public\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            // Transaction tx = transactions[transactionId];\n            transactions[transactionId].executed = true;\n            // tx.executed = true;\n            if (transactions[transactionId].destination.call.value(transactions[transactionId].value)(transactions[transactionId].data)) {\n                emit Execution(transactionId);\n            } else {\n                emit ExecutionFailure(transactionId);\n                transactions[transactionId].executed = false;\n            }\n        }\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n    }\n\n    /*\n     * Internal functions\n     */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes data)\n        internal\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination, \n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        emit Submission(transactionId);\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n        }\n    }\n\n    /// @dev Returns total number of transactions after filers are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i = 0; i < transactionCount; i++) {\n            if (pending && !transactions[i].executed || executed && transactions[i].executed)\n                count += 1;\n        }\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        constant\n        returns (address[])\n    {\n        return owners;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n        public\n        constant\n        returns (address[] _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        }\n        _confirmations = new address[](count);\n        for (i = 0; i < count; i++) {\n            _confirmations[i] = confirmationsTemp[i];\n        }\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n        public\n        constant\n        returns (uint[] _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i = 0; i < transactionCount; i++) {\n            if (pending && !transactions[i].executed || executed && transactions[i].executed) {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        }\n        _transactionIds = new uint[](to - from);\n        for (i = from; i < to; i++) {\n            _transactionIds[i - from] = transactionIdsTemp[i];\n        }\n    }\n}\ncontract PresaleToken {\n    mapping (address => uint256) public balanceOf;\n    function burnTokens(address _owner) public;\n}\n /*\n * Contract that is working with ERC223 tokens\n */\n \n /**\n * @title Contract that will work with ERC223 tokens.\n */\n \ncontract ERC223ReceivingContract {\n/**\n * @dev Standard ERC223 function that will handle incoming token transfers.\n *\n * @param _from  Token sender address.\n * @param _value Amount of tokens.\n * @param _data  Transaction metadata.\n */\n    function tokenFallback(address _from, uint _value, bytes _data) public returns (bool success);\n    function tokenFallbackBuyer(address _from, uint _value, address _buyer) public returns (bool success);\n    function tokenFallbackExchange(address _from, uint _value, uint _price) public returns (bool success);\n}\n// ERC20 token interface is implemented only partially.\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract NamiCrowdSale {\n    using SafeMath for uint256;\n\n    /// NAC Broker Presale Token\n    /// @dev Constructor\n    constructor(address _escrow, address _namiMultiSigWallet, address _namiPresale) public {\n        require(_namiMultiSigWallet != 0x0);\n        escrow = _escrow;\n        namiMultiSigWallet = _namiMultiSigWallet;\n        namiPresale = _namiPresale;\n    }\n\n\n    /*/\n     *  Constants\n    /*/\n\n    string public name = \"Nami ICO\";\n    string public  symbol = \"NAC\";\n    uint   public decimals = 18;\n\n    bool public TRANSFERABLE = false; // default not transferable\n\n    uint public constant TOKEN_SUPPLY_LIMIT = 1000000000 * (1 ether / 1 wei);\n    \n    uint public binary = 0;\n\n    /*/\n     *  Token state\n    /*/\n\n    enum Phase {\n        Created,\n        Running,\n        Paused,\n        Migrating,\n        Migrated\n    }\n\n    Phase public currentPhase = Phase.Created;\n    uint public totalSupply = 0; // amount of tokens already sold\n\n    // escrow has exclusive priveleges to call administrative\n    // functions on this contract.\n    address public escrow;\n\n    // Gathered funds can be withdraw only to namimultisigwallet's address.\n    address public namiMultiSigWallet;\n\n    // nami presale contract\n    address public namiPresale;\n\n    // Crowdsale manager has exclusive priveleges to burn presale tokens.\n    address public crowdsaleManager;\n    \n    // binary option address\n    address public binaryAddress;\n    \n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    modifier onlyCrowdsaleManager() {\n        require(msg.sender == crowdsaleManager); \n        _; \n    }\n\n    modifier onlyEscrow() {\n        require(msg.sender == escrow);\n        _;\n    }\n    \n    modifier onlyTranferable() {\n        require(TRANSFERABLE);\n        _;\n    }\n    \n    modifier onlyNamiMultisig() {\n        require(msg.sender == namiMultiSigWallet);\n        _;\n    }\n    \n    /*/\n     *  Events\n    /*/\n\n    event LogBuy(address indexed owner, uint value);\n    event LogBurn(address indexed owner, uint value);\n    event LogPhaseSwitch(Phase newPhase);\n    // Log migrate token\n    event LogMigrate(address _from, address _to, uint256 amount);\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /*/\n     *  Public functions\n    /*/\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    // Transfer the balance from owner's account to another account\n    // only escrow can send token (to send token private sale)\n    function transferForTeam(address _to, uint256 _value) public\n        onlyEscrow\n    {\n        _transfer(msg.sender, _to, _value);\n    }\n    \n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public\n        onlyTranferable\n    {\n        _transfer(msg.sender, _to, _value);\n    }\n    \n       /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) \n        public\n        onlyTranferable\n        returns (bool success)\n    {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        onlyTranferable\n        returns (bool success) \n    {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        onlyTranferable\n        returns (bool success) \n    {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    // allows transfer token\n    function changeTransferable () public\n        onlyEscrow\n    {\n        TRANSFERABLE = !TRANSFERABLE;\n    }\n    \n    // change escrow\n    function changeEscrow(address _escrow) public\n        onlyNamiMultisig\n    {\n        require(_escrow != 0x0);\n        escrow = _escrow;\n    }\n    \n    // change binary value\n    function changeBinary(uint _binary)\n        public\n        onlyEscrow\n    {\n        binary = _binary;\n    }\n    \n    // change binary address\n    function changeBinaryAddress(address _binaryAddress)\n        public\n        onlyEscrow\n    {\n        require(_binaryAddress != 0x0);\n        binaryAddress = _binaryAddress;\n    }\n    \n    /*\n    * price in ICO:\n    * first week: 1 ETH = 2400 NAC\n    * second week: 1 ETH = 23000 NAC\n    * 3rd week: 1 ETH = 2200 NAC\n    * 4th week: 1 ETH = 2100 NAC\n    * 5th week: 1 ETH = 2000 NAC\n    * 6th week: 1 ETH = 1900 NAC\n    * 7th week: 1 ETH = 1800 NAC\n    * 8th week: 1 ETH = 1700 nac\n    * time: \n    * 1517443200: Thursday, February 1, 2018 12:00:00 AM\n    * 1518048000: Thursday, February 8, 2018 12:00:00 AM\n    * 1518652800: Thursday, February 15, 2018 12:00:00 AM\n    * 1519257600: Thursday, February 22, 2018 12:00:00 AM\n    * 1519862400: Thursday, March 1, 2018 12:00:00 AM\n    * 1520467200: Thursday, March 8, 2018 12:00:00 AM\n    * 1521072000: Thursday, March 15, 2018 12:00:00 AM\n    * 1521676800: Thursday, March 22, 2018 12:00:00 AM\n    * 1522281600: Thursday, March 29, 2018 12:00:00 AM\n    */\n    function getPrice() public view returns (uint price) {\n        if (now < 1517443200) {\n            // presale\n            return 3450;\n        } else if (1517443200 < now && now <= 1518048000) {\n            // 1st week\n            return 2400;\n        } else if (1518048000 < now && now <= 1518652800) {\n            // 2nd week\n            return 2300;\n        } else if (1518652800 < now && now <= 1519257600) {\n            // 3rd week\n            return 2200;\n        } else if (1519257600 < now && now <= 1519862400) {\n            // 4th week\n            return 2100;\n        } else if (1519862400 < now && now <= 1520467200) {\n            // 5th week\n            return 2000;\n        } else if (1520467200 < now && now <= 1521072000) {\n            // 6th week\n            return 1900;\n        } else if (1521072000 < now && now <= 1521676800) {\n            // 7th week\n            return 1800;\n        } else if (1521676800 < now && now <= 1522281600) {\n            // 8th week\n            return 1700;\n        } else {\n            return binary;\n        }\n    }\n\n\n    function() payable public {\n        buy(msg.sender);\n    }\n    \n    \n    function buy(address _buyer) payable public {\n        // Available only if presale is running.\n        require(currentPhase == Phase.Running);\n        // require ICO time or binary option\n        require(now <= 1522281600 || msg.sender == binaryAddress);\n        require(msg.value != 0);\n        uint newTokens = msg.value * getPrice();\n        require (totalSupply + newTokens < TOKEN_SUPPLY_LIMIT);\n        // add new token to buyer\n        balanceOf[_buyer] = balanceOf[_buyer].add(newTokens);\n        // add new token to totalSupply\n        totalSupply = totalSupply.add(newTokens);\n        emit LogBuy(_buyer,newTokens);\n        emit Transfer(this,_buyer,newTokens);\n    }\n    \n\n    /// @dev Returns number of tokens owned by given address.\n    /// @param _owner Address of token owner.\n    function burnTokens(address _owner) public\n        onlyCrowdsaleManager\n    {\n        // Available only during migration phase\n        require(currentPhase == Phase.Migrating);\n\n        uint tokens = balanceOf[_owner];\n        require(tokens != 0);\n        balanceOf[_owner] = 0;\n        totalSupply -= tokens;\n        emit LogBurn(_owner, tokens);\n        emit Transfer(_owner, crowdsaleManager, tokens);\n\n        // Automatically switch phase when migration is done.\n        if (totalSupply == 0) {\n            currentPhase = Phase.Migrated;\n            emit LogPhaseSwitch(Phase.Migrated);\n        }\n    }\n\n\n    /*/\n     *  Administrative functions\n    /*/\n    function setPresalePhase(Phase _nextPhase) public\n        onlyEscrow\n    {\n        bool canSwitchPhase\n            =  (currentPhase == Phase.Created && _nextPhase == Phase.Running)\n            || (currentPhase == Phase.Running && _nextPhase == Phase.Paused)\n                // switch to migration phase only if crowdsale manager is set\n            || ((currentPhase == Phase.Running || currentPhase == Phase.Paused)\n                && _nextPhase == Phase.Migrating\n                && crowdsaleManager != 0x0)\n            || (currentPhase == Phase.Paused && _nextPhase == Phase.Running)\n                // switch to migrated only if everyting is migrated\n            || (currentPhase == Phase.Migrating && _nextPhase == Phase.Migrated\n                && totalSupply == 0);\n\n        require(canSwitchPhase);\n        currentPhase = _nextPhase;\n        emit LogPhaseSwitch(_nextPhase);\n    }\n\n\n    function withdrawEther(uint _amount) public\n        onlyEscrow\n    {\n        require(namiMultiSigWallet != 0x0);\n        // Available at any phase.\n        if (address(this).balance > 0) {\n            namiMultiSigWallet.transfer(_amount);\n        }\n    }\n    \n    function safeWithdraw(address _withdraw, uint _amount) public\n        onlyEscrow\n    {\n        NamiMultiSigWallet namiWallet = NamiMultiSigWallet(namiMultiSigWallet);\n        if (namiWallet.isOwner(_withdraw)) {\n            _withdraw.transfer(_amount);\n        }\n    }\n\n\n    function setCrowdsaleManager(address _mgr) public\n        onlyEscrow\n    {\n        // You can't change crowdsale contract when migration is in progress.\n        require(currentPhase != Phase.Migrating);\n        crowdsaleManager = _mgr;\n    }\n\n    // internal migrate migration tokens\n    function _migrateToken(address _from, address _to)\n        internal\n    {\n        PresaleToken presale = PresaleToken(namiPresale);\n        uint256 newToken = presale.balanceOf(_from);\n        require(newToken > 0);\n        // burn old token\n        presale.burnTokens(_from);\n        // add new token to _to\n        balanceOf[_to] = balanceOf[_to].add(newToken);\n        // add new token to totalSupply\n        totalSupply = totalSupply.add(newToken);\n        emit LogMigrate(_from, _to, newToken);\n        emit Transfer(this,_to,newToken);\n    }\n\n    // migate token function for Nami Team\n    function migrateToken(address _from, address _to) public\n        onlyEscrow\n    {\n        _migrateToken(_from, _to);\n    }\n\n    // migrate token for investor\n    function migrateForInvestor() public {\n        _migrateToken(msg.sender, msg.sender);\n    }\n\n    // Nami internal exchange\n    \n    // event for Nami exchange\n    event TransferToBuyer(address indexed _from, address indexed _to, uint _value, address indexed _seller);\n    event TransferToExchange(address indexed _from, address indexed _to, uint _value, uint _price);\n    \n    \n    /**\n     * @dev Transfer the specified amount of tokens to the NamiExchange address.\n     *      Invokes the `tokenFallbackExchange` function.\n     *      The token transfer fails if the recipient is a contract\n     *      but does not implement the `tokenFallbackExchange` function\n     *      or the fallback function to receive funds.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     * @param _price price to sell token.\n     */\n     \n    function transferToExchange(address _to, uint _value, uint _price) public {\n        uint codeLength;\n        \n        assembly {\n            codeLength := extcodesize(_to)\n        }\n        \n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        emit Transfer(msg.sender,_to,_value);\n        if (codeLength > 0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallbackExchange(msg.sender, _value, _price);\n            emit TransferToExchange(msg.sender, _to, _value, _price);\n        }\n    }\n    \n    /**\n     * @dev Transfer the specified amount of tokens to the NamiExchange address.\n     *      Invokes the `tokenFallbackBuyer` function.\n     *      The token transfer fails if the recipient is a contract\n     *      but does not implement the `tokenFallbackBuyer` function\n     *      or the fallback function to receive funds.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     * @param _buyer address of seller.\n     */\n     \n    function transferToBuyer(address _to, uint _value, address _buyer) public {\n        uint codeLength;\n        \n        assembly {\n            codeLength := extcodesize(_to)\n        }\n        \n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        emit Transfer(msg.sender,_to,_value);\n        if (codeLength > 0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallbackBuyer(msg.sender, _value, _buyer);\n            emit TransferToBuyer(msg.sender, _to, _value, _buyer);\n        }\n    }\n//-------------------------------------------------------------------------------------------------------\n}\n\ncontract NamiGame{\n    using SafeMath for uint256;\n\n    constructor(address _escrow, address _namiMultiSigWallet, address _namiAddress) public {\n        require(_namiMultiSigWallet != 0x0);\n        escrow = _escrow;\n        namiMultiSigWallet = _namiMultiSigWallet;\n        NamiAddr = _namiAddress;\n    }\n\n    // escrow has exclusive priveleges to call administrative\n    // functions on this contract.\n    address public escrow;\n    uint public minWithdraw =  10**16; // 0.01 ether\n    uint public maxWithdraw = 10**18; // max NAC withdraw one time, 1 ether\n\n    // Gathered funds can be withdraw only to namimultisigwallet's address.\n    address public namiMultiSigWallet;\n\n    /// address of Nami token\n    address public NamiAddr;\n    bool public isPause;\n    /*\n    *\n    * list setting function\n    */\n    mapping(address => bool) public isController;\n\n    /**\n     *\n     * List event\n     */\n    event Deposit(address indexed user, uint amount, uint timeDeposit);\n    event Withdraw(address indexed user, uint amount, uint timeWithdraw);\n\n    modifier onlyEscrow() {\n        require(msg.sender == escrow);\n        _;\n    }\n\n    modifier onlyNami {\n        require(msg.sender == NamiAddr);\n        _;\n    }\n\n    modifier onlyNamiMultisig {\n        require(msg.sender == namiMultiSigWallet);\n        _;\n    }\n\n    modifier onlyController {\n        require(isController[msg.sender] == true);\n        _;\n    }\n\n    // change escrow\n    function changeEscrow(address _escrow) public\n        onlyNamiMultisig\n    {\n        require(_escrow != 0x0);\n        escrow = _escrow;\n    }\n\n    // change pause\n    function changePause() public\n        onlyEscrow\n    {\n        isPause = !isPause;\n    }\n\n    // min and max for withdraw nac\n    function changeMinWithdraw(uint _minWithdraw) public\n        onlyEscrow\n    {\n        require(_minWithdraw != 0);\n        minWithdraw = _minWithdraw;\n    }\n\n    function changeMaxWithdraw(uint _maxNac) public\n        onlyEscrow\n    {\n        require(_maxNac != 0);\n        maxWithdraw = _maxNac;\n    }\n\n    /// @dev withdraw ether to nami multisignature wallet, only escrow can call\n    /// @param _amount value ether in wei to withdraw\n    function withdrawEther(uint _amount, address _to) public\n        onlyEscrow\n    {\n        require(_to != address(0x0));\n        // Available at any phase.\n        if (address(this).balance > 0) {\n            _to.transfer(_amount);\n        }\n    }\n\n\n    /// @dev withdraw NAC to nami multisignature wallet, only escrow can call\n    /// @param _amount value NAC to withdraw\n    function withdrawNac(uint _amount) public\n        onlyEscrow\n    {\n        require(namiMultiSigWallet != address(0x0));\n        // Available at any phase.\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\n        if (namiToken.balanceOf(address(this)) > 0) {\n            namiToken.transfer(namiMultiSigWallet, _amount);\n        }\n    }\n\n    // set controller address\n    /**\n     * make new controller\n     * require input address is not a controller\n     * execute any time in sc state\n     */\n    function setController(address _controller)\n        public\n    onlyEscrow\n    {\n        require(!isController[_controller]);\n        isController[_controller] = true;\n    }\n\n    /**\n     * remove controller\n     * require input address is a controller\n     * execute any time in sc state\n     */\n    function removeController(address _controller)\n        public\n    onlyEscrow\n    {\n        require(isController[_controller]);\n        isController[_controller] = false;\n    }\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    string public name = \"Nami Game\";\n\n    function depositEth() public payable\n    {\n        require(msg.value > 0);\n        emit Deposit(msg.sender, msg.value, now);\n    }\n\n    function () public payable\n    {\n        depositEth();\n    }\n\n    function withdrawToken(address _account, uint _amount) public\n        onlyController\n    {\n        require(_account != address(0x0) && _amount != 0);\n        require(_amount >= minWithdraw && _amount <= maxWithdraw);\n        if (address(this).balance > 0) {\n            _account.transfer(_amount);\n        }\n        // emit event\n        emit Withdraw(_account, _amount, now);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"namiMultiSigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNac\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxNac\",\"type\":\"uint256\"}],\"name\":\"changeMaxWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NamiAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changePause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minWithdraw\",\"type\":\"uint256\"}],\"name\":\"changeMinWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_escrow\",\"type\":\"address\"}],\"name\":\"changeEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_escrow\",\"type\":\"address\"},{\"name\":\"_namiMultiSigWallet\",\"type\":\"address\"},{\"name\":\"_namiAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeDeposit\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeWithdraw\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]",
  "bytecode": "662386f26fc10000600155670de0b6b3a764000060025560c0604052600960808190527f4e616d692047616d65000000000000000000000000000000000000000000000060a090815261005591600691906100d8565b5034801561006257600080fd5b50604051606080610ae3833981016040908152815160208301519190920151600160a060020a038216151561009657600080fd5b60008054600160a060020a03948516600160a060020a031991821617909155600380549385169382169390931790925560048054919093169116179055610173565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011957805160ff1916838001178555610146565b82800160010185558215610146579182015b8281111561014657825182559160200191906001019061012b565b50610152929150610156565b5090565b61017091905b80821115610152576000815560010161015c565b90565b610961806101826000396000f3006080604052600436106100fb5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630321f836811461010557806306fdde031461013657806312818f0c146101c057806326e5ab38146101d8578063439370b1146100fb57806386e1e589146101f057806392eefe9b146102055780639e281a9814610226578063ac7a1b5b1461024a578063b429afeb14610271578063c3defb70146102a6578063cc3d2721146102bb578063cc61d0cb146102d0578063ce56c454146102e8578063dcfcda2b1461030c578063e2fdcc171461032d578063f6a74ed714610342578063ff0938a714610363575b610103610378565b005b34801561011157600080fd5b5061011a6103c0565b60408051600160a060020a039092168252519081900360200190f35b34801561014257600080fd5b5061014b6103cf565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018557818101518382015260200161016d565b50505050905090810190601f1680156101b25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101cc57600080fd5b5061010360043561045d565b3480156101e457600080fd5b506101036004356105b5565b3480156101fc57600080fd5b5061011a6105dd565b34801561021157600080fd5b50610103600160a060020a03600435166105ec565b34801561023257600080fd5b50610103600160a060020a036004351660243561064d565b34801561025657600080fd5b5061025f610737565b60408051918252519081900360200190f35b34801561027d57600080fd5b50610292600160a060020a036004351661073d565b604080519115158252519081900360200190f35b3480156102b257600080fd5b50610103610752565b3480156102c757600080fd5b5061025f6107ac565b3480156102dc57600080fd5b506101036004356107b2565b3480156102f457600080fd5b50610103600435600160a060020a03602435166107da565b34801561031857600080fd5b50610103600160a060020a036004351661084b565b34801561033957600080fd5b5061011a6108a6565b34801561034e57600080fd5b50610103600160a060020a03600435166108b5565b34801561036f57600080fd5b50610292610914565b6000341161038557600080fd5b60408051348152426020820152815133927f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15928290030190a2565b600354600160a060020a031681565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104555780601f1061042a57610100808354040283529160200191610455565b820191906000526020600020905b81548152906001019060200180831161043857829003601f168201915b505050505081565b60008054600160a060020a0316331461047557600080fd5b600354600160a060020a0316151561048c57600080fd5b5060048054604080517f70a08231000000000000000000000000000000000000000000000000000000008152309381019390935251600160a060020a039091169160009183916370a0823191602480830192602092919082900301818787803b1580156104f857600080fd5b505af115801561050c573d6000803e3d6000fd5b505050506040513d602081101561052257600080fd5b505111156105b157600354604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810185905290519183169163a9059cbb9160448082019260009290919082900301818387803b15801561059857600080fd5b505af11580156105ac573d6000803e3d6000fd5b505050505b5050565b600054600160a060020a031633146105cc57600080fd5b8015156105d857600080fd5b600255565b600454600160a060020a031681565b600054600160a060020a0316331461060357600080fd5b600160a060020a03811660009081526005602052604090205460ff161561062957600080fd5b600160a060020a03166000908152600560205260409020805460ff19166001179055565b3360009081526005602052604090205460ff16151560011461066e57600080fd5b600160a060020a0382161580159061068557508015155b151561069057600080fd5b60015481101580156106a457506002548111155b15156106af57600080fd5b6000303111156106f157604051600160a060020a0383169082156108fc029083906000818181858888f193505050501580156106ef573d6000803e3d6000fd5b505b604080518281524260208201528151600160a060020a038516927ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568928290030190a25050565b60025481565b60056020526000908152604090205460ff1681565b600054600160a060020a0316331461076957600080fd5b6004805474ff0000000000000000000000000000000000000000198116740100000000000000000000000000000000000000009182900460ff1615909102179055565b60015481565b600054600160a060020a031633146107c957600080fd5b8015156107d557600080fd5b600155565b600054600160a060020a031633146107f157600080fd5b600160a060020a038116151561080657600080fd5b6000303111156105b157604051600160a060020a0382169083156108fc029084906000818181858888f19350505050158015610846573d6000803e3d6000fd5b505050565b600354600160a060020a0316331461086257600080fd5b600160a060020a038116151561087757600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031681565b600054600160a060020a031633146108cc57600080fd5b600160a060020a03811660009081526005602052604090205460ff1615156108f357600080fd5b600160a060020a03166000908152600560205260409020805460ff19169055565b60045474010000000000000000000000000000000000000000900460ff16815600a165627a7a72305820aceb244534a4429574e394d6f26d2983c0ed9d877a511d223350a5fccb37a13c0029000000000000000000000000591c1bfac76a5a5a61fafc6d17489916112119820000000000000000000000004e237f139582708a592a14034b3c1a5b38da45a60000000000000000000000008d80de8a78198396329dfa769ad54d24bf90e7aa",
  "constructorArguments": "000000000000000000000000591c1bfac76a5a5a61fafc6d17489916112119820000000000000000000000004e237f139582708a592a14034b3c1a5b38da45a60000000000000000000000008d80de8a78198396329dfa769ad54d24bf90e7aa"
}