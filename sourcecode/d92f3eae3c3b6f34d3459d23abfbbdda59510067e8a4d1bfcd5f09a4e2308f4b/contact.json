{
  "address": "0xce831af117375e6286eb3c46d696ee3dbf4f4f50",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ProfitSharingToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-06\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract FullERC20 {\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  \n  uint256 public totalSupply;\n  uint8 public decimals;\n\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n}\n\ncontract BalanceHistoryToken is FullERC20 {\n  function balanceOfAtBlock(address who, uint256 blockNumber) public view returns (uint256);\n}\n\ncontract ProfitSharingToken is BalanceHistoryToken {\n  using SafeMath for uint256;\n\n  string public name = \"Fairgrounds\";\n  string public symbol = \"FGD\";\n  uint8 public decimals = 2;\n  uint256 public constant INITIAL_SUPPLY = 10000000000; // 100M\n\n  struct Snapshot {\n    uint192 block; // Still millions of years\n    uint64 balance; // > total supply\n  }\n\n  mapping(address => Snapshot[]) public snapshots;\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  event Burn(address indexed burner, uint256 value);\n\n\n  function ProfitSharingToken() public {\n      totalSupply = INITIAL_SUPPLY;\n      updateBalance(msg.sender, INITIAL_SUPPLY);\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balanceOf(_from));\n    require(_value <= allowed[_from][msg.sender]);\n\n    updateBalance(_from, balanceOf(_from).sub(_value));\n    updateBalance(_to, balanceOf(_to).add(_value));\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n\n    return true;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balanceOf(msg.sender));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    updateBalance(msg.sender, balanceOf(msg.sender).sub(_value));\n    updateBalance(_to, balanceOf(_to).add(_value));\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n  }\n\n  function balanceOfAtBlock(address who, uint256 blockNumber) public view returns (uint256) {\n    Snapshot[] storage snapshotHistory = snapshots[who];\n    if (snapshotHistory.length == 0 || blockNumber < snapshotHistory[0].block) {\n      return 0;\n    }\n\n    // Check the last transfer value first\n    if (blockNumber >= snapshotHistory[snapshotHistory.length-1].block) {\n        return snapshotHistory[snapshotHistory.length-1].balance;\n    }\n\n    // Search the snapshots until the value is found.\n    uint min = 0;\n    uint max = snapshotHistory.length-1;\n    while (max > min) {\n        uint mid = (max + min + 1) / 2;\n        if (snapshotHistory[mid].block <= blockNumber) {\n            min = mid;\n        } else {\n            max = mid-1;\n        }\n    }\n\n    return snapshotHistory[min].balance;\n  }\n\n  /// @dev Updates the balance to the provided value\n  function updateBalance(address who, uint value) internal {\n    snapshots[who].push(Snapshot(uint192(block.number), uint56(value)));\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    uint length = snapshots[_owner].length;\n    if (length == 0) {\n      return 0;\n    }\n\n    return snapshots[_owner][length - 1].balance;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n  * @dev Burns a specific amount of tokens.\n  * @param _value The amount of token to be burned.\n  */\n  function burn(uint256 _value) public {\n    require(_value > 0);\n    require(_value <= balanceOf(msg.sender));\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    address burner = msg.sender;\n    updateBalance(burner, balanceOf(burner).sub(_value));\n    totalSupply = totalSupply.sub(_value);\n    Burn(burner, _value);\n  }\n}",
  "bytecode": "606060405260408051908101604052600b81527f4661697267726f756e6473000000000000000000000000000000000000000000602082015260029080516200004d9291602001906200019b565b506040805190810160405260038082527f46474400000000000000000000000000000000000000000000000000000000006020830152908051620000969291602001906200019b565b506004805460ff191660021790553415620000b057600080fd5b6402540be4006000819055620000d690339064010000000062000b56620000dc82021704565b6200026c565b600160a060020a038216600090815260056020526040902080546001810162000106838262000220565b9160005260206000209001600060408051908101604052600160c060020a034316815266ffffffffffffff8516602082015291905081518154600160c060020a031916600160c060020a03919091161781556020820151815467ffffffffffffffff91909116780100000000000000000000000000000000000000000000000002600160c060020a0390911617905550505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001de57805160ff19168380011785556200020e565b828001600101855582156200020e579182015b828111156200020e578251825591602001919060010190620001f1565b506200021c9291506200024c565b5090565b8154818355818115116200024757600083815260209020620002479181019083016200024c565b505050565b6200026991905b808211156200021c576000815560010162000253565b90565b610c9b806200027c6000396000f3006060604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100df578063095ea7b31461016957806318160ddd1461019f57806323b872dd146101c45780632ff2e9dc146101ec578063313ce567146101ff57806342966c68146102285780636618846314610240578063701b40631461026257806370a082311461028457806395d89b41146102a3578063a9059cbb146102b6578063d73dd623146102d8578063db5517b0146102fa578063dd62ed3e14610348575b600080fd5b34156100ea57600080fd5b6100f261036d565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561012e578082015183820152602001610116565b50505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017457600080fd5b61018b600160a060020a036004351660243561040b565b604051901515815260200160405180910390f35b34156101aa57600080fd5b6101b2610477565b60405190815260200160405180910390f35b34156101cf57600080fd5b61018b600160a060020a036004358116906024351660443561047d565b34156101f757600080fd5b6101b26105bf565b341561020a57600080fd5b6102126105c8565b60405160ff909116815260200160405180910390f35b341561023357600080fd5b61023e6004356105d1565b005b341561024b57600080fd5b61018b600160a060020a036004351660243561065e565b341561026d57600080fd5b6101b2600160a060020a0360043516602435610758565b341561028f57600080fd5b6101b2600160a060020a03600435166108ac565b34156102ae57600080fd5b6100f2610923565b34156102c157600080fd5b61018b600160a060020a036004351660243561098e565b34156102e357600080fd5b61018b600160a060020a0360043516602435610a2c565b341561030557600080fd5b61031c600160a060020a0360043516602435610ad0565b604051600160c060020a03909216825267ffffffffffffffff1660208201526040908101905180910390f35b341561035357600080fd5b6101b2600160a060020a0360043581169060243516610b19565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104035780601f106103d857610100808354040283529160200191610403565b820191906000526020600020905b8154815290600101906020018083116103e657829003601f168201915b505050505081565b600160a060020a03338116600081815260066020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b6000600160a060020a038316151561049457600080fd5b61049d846108ac565b8211156104a957600080fd5b600160a060020a03808516600090815260066020908152604080832033909416835292905220548211156104dc57600080fd5b6104fe846104f9846104ed886108ac565b9063ffffffff610b4416565b610b56565b61051b836104f98461050f876108ac565b9063ffffffff610c0f16565b600160a060020a0380851660009081526006602090815260408083203390941683529290522054610552908363ffffffff610b4416565b600160a060020a03808616600081815260066020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b6402540be40081565b60045460ff1681565b60008082116105df57600080fd5b6105e8336108ac565b8211156105f457600080fd5b5033610607816104f9846104ed836108ac565b60005461061a908363ffffffff610b4416565b600055600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b600160a060020a033381166000908152600660209081526040808320938616835292905290812054808311156106bb57600160a060020a0333811660009081526006602090815260408083209388168352929052908120556106f2565b6106cb818463ffffffff610b4416565b600160a060020a033381166000908152600660209081526040808320938916835292905220555b600160a060020a0333811660008181526006602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a0382166000908152600560205260408120805482908190819015806107a6575083600081548110151561078e57fe5b600091825260209091200154600160c060020a031686105b156107b457600094506108a2565b8354849060001981019081106107c657fe5b600091825260209091200154600160c060020a03168610610817578354849060001981019081106107f357fe5b60009182526020909120015460c060020a900467ffffffffffffffff1694506108a2565b8354600093506000190191505b8282111561087457600260018385010104905085848281548110151561084657fe5b600091825260209091200154600160c060020a0316116108685780925061086f565b6001810391505b610824565b838381548110151561088257fe5b60009182526020909120015460c060020a900467ffffffffffffffff1694505b5050505092915050565b600160a060020a0381166000908152600560205260408120548015156108d5576000915061091d565b600160a060020a0383166000908152600560205260409020805460001983019081106108fd57fe5b60009182526020909120015460c060020a900467ffffffffffffffff1691505b50919050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104035780601f106103d857610100808354040283529160200191610403565b6000600160a060020a03831615156109a557600080fd5b6109ae336108ac565b8211156109ba57600080fd5b6109cb336104f9846104ed336108ac565b6109dc836104f98461050f876108ac565b82600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b600160a060020a033381166000908152600660209081526040808320938616835292905290812054610a64908363ffffffff610c0f16565b600160a060020a0333811660008181526006602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600560205281600052604060002081815481101515610aeb57fe5b600091825260209091200154600160c060020a038116925060c060020a900467ffffffffffffffff16905082565b600160a060020a03918216600090815260066020908152604080832093909416825291909152205490565b600082821115610b5057fe5b50900390565b600160a060020a0382166000908152600560205260409020805460018101610b7e8382610c25565b9160005260206000209001600060408051908101604052600160c060020a034316815266ffffffffffffff851660208201529190508151815477ffffffffffffffffffffffffffffffffffffffffffffffff1916600160c060020a03919091161781556020820151815467ffffffffffffffff9190911660c060020a02600160c060020a0390911617905550505050565b600082820183811015610c1e57fe5b9392505050565b815481835581811511610c4957600083815260209020610c49918101908301610c4e565b505050565b610c6c91905b80821115610c685760008155600101610c54565b5090565b905600a165627a7a723058208bdb0fea571a299b69371220384e93a57243102ab8c241ea601a7d1aa8e942950029"
}