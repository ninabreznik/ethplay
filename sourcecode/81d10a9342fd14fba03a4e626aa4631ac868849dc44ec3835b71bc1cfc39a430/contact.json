{
  "address": "0x80b6bf83d2d0f57330bd1c67b986737cdb5a9da3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Coke",
  "compilerVersion": "v0.5.3+commit.10d17f24",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-31\n*/\n\npragma solidity ^0.5.0;\npragma experimental ABIEncoderV2;\n\n\nlibrary ECStructs {\n\n    struct ECDSASig {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n}\n\ncontract ILotteryForCoke {\n    struct Ticket {\n        address payable ticketAddress;\n        uint256 period;\n        address payable buyer;\n        uint256 amount;\n        uint256 salt;\n    }\n\n    function buy(Ticket memory ticket, ECStructs.ECDSASig memory serverSig) public returns (bool);\n\n    function calcTicketPrice(Ticket memory ticket) public view returns (uint256 cokeAmount);\n}\n\ncontract IPledgeForCoke {\n\n    struct DepositRequest {\n        address payable depositAddress;\n        address payable from;\n        uint256 cokeAmount;\n        uint256 endBlock;\n        bytes32 billSeq;\n        bytes32 salt;\n    }\n\n    //the buyer should approve enough coke and then call this function\n    //or use 'approveAndCall' in Coke.sol in 1 request\n    function deposit(DepositRequest memory request, ECStructs.ECDSASig memory ecdsaSig) payable public returns (bool);\n\n    function depositCheck(DepositRequest memory request, ECStructs.ECDSASig memory ecdsaSig) public view returns (uint256);\n}\n\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath, mul\");\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath, div\");\n        // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath, sub\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath, add\");\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath, mod\");\n        return a % b;\n    }\n}\n\ncontract IRequireUtils {\n    function requireCode(uint256 code) external pure;\n\n    function interpret(uint256 code) public pure returns (string memory);\n}\n\n\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ncontract ReentrancyGuard {\n\n    /// @dev counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n\n    constructor() internal {\n        // The counter starts at one to prevent changing it from zero to a non-zero\n        // value, which is a more expensive operation.\n        _guardCounter = 1;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter, \"nonReentrant\");\n    }\n\n}\n\ncontract ERC20 is IERC20, ReentrancyGuard {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(\n        address owner,\n        address spender\n    )\n    public\n    view\n    returns (uint256)\n    {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0), \"ERC20 approve, spender can not be 0x00\");\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    //be careful, this is 'internal' function,\n    //you must add control permission to manipulate this function\n    function approveFrom(address owner, address spender, uint256 value) internal returns (bool) {\n        require(spender != address(0), \"ERC20 approveFrom, spender can not be 0x00\");\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n    public\n    returns (bool)\n    {\n        require(value <= _allowed[from][msg.sender], \"ERC20 transferFrom, allowance not enough\");\n\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(\n        address spender,\n        uint256 addedValue\n    )\n    public\n    returns (bool)\n    {\n        require(spender != address(0), \"ERC20 increaseAllowance, spender can not be 0x00\");\n\n        _allowed[msg.sender][spender] = (\n        _allowed[msg.sender][spender].add(addedValue));\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(\n        address spender,\n        uint256 subtractedValue\n    )\n    public\n    returns (bool)\n    {\n        require(spender != address(0), \"ERC20 decreaseAllowance, spender can not be 0x00\");\n\n        _allowed[msg.sender][spender] = (\n        _allowed[msg.sender][spender].sub(subtractedValue));\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(value <= _balances[from], \"ERC20 _transfer, not enough balance\");\n        require(to != address(0), \"ERC20 _transfer, to address can not be 0x00\");\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20 _mint, account can not be 0x00\");\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20 _burn, account can not be 0x00\");\n        require(value <= _balances[account], \"ERC20 _burn, not enough balance\");\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        require(value <= _allowed[account][msg.sender], \"ERC20 _burnFrom, allowance not enough\");\n\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n        // this function needs to emit an event with the updated approval.\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n            value);\n        _burn(account, value);\n    }\n}\n\ncontract Coke is ERC20{\n    using SafeMath for uint256;\n\n    IRequireUtils rUtils;\n\n    //1 Coke = 10^18 Tin\n    string public name = \"COKE\";\n    string public symbol = \"COKE\";\n    uint256 public decimals = 18; //1:1\n\n    address public cokeAdmin;// admin has rights to mint and burn and etc.\n    mapping(address => bool) public gameMachineRecords;// game machine has permission to mint coke\n\n\n    uint256 public stagePercent;\n    uint256 public step;\n    uint256 public remain;\n    uint256 public currentDifficulty;//starts from 0\n    uint256 public currentStageEnd;\n\n    address team;\n    uint256 public teamRemain;\n    uint256 public unlockAllBlockNumber;\n    uint256 unlockNumerator;\n    uint256 unlockDenominator;\n\n    event Reward(address indexed account, uint256 amount, uint256 rawAmount);\n    event UnlockToTeam(address indexed account, uint256 amount, uint256 rawReward);\n\n    constructor (IRequireUtils _rUtils, address _cokeAdmin, uint256 _cap, address _team, uint256 _toTeam,\n        uint256 _unlockAllBlockNumber, address _bounty, uint256 _toBounty, uint256 _stagePercent,\n        uint256 _unlockNumerator, uint256 _unlockDenominator) /*ERC20Capped(_cap) */public {\n        rUtils = _rUtils;\n        cokeAdmin = _cokeAdmin;\n        unlockAllBlockNumber = _unlockAllBlockNumber;\n\n        team = _team;\n        teamRemain = _toTeam;\n\n        _mint(address(this), _toTeam);\n\n        _mint(_bounty, _toBounty);\n\n        stagePercent = _stagePercent;\n        step = _cap * _stagePercent / 100;\n        remain = _cap.sub(_toTeam).sub(_toBounty);\n\n        _mint(address(this), remain);\n\n        unlockNumerator = _unlockNumerator;\n        unlockDenominator=_unlockDenominator;\n        if (remain - step > 0) {\n            currentStageEnd = remain - step;\n        } else {\n            currentStageEnd = 0;\n        }\n        currentDifficulty = 0;\n    }\n\n    function approveAndCall(address spender, uint256 value, bytes memory data) public nonReentrant returns (bool) {\n        require(approve(spender, value));\n\n        (bool success, bytes memory returnData) = spender.call(data);\n        rUtils.requireCode(success ? 0 : 501);\n\n        return true;\n    }\n\n    function approveAndBuyLottery(ILotteryForCoke.Ticket memory ticket, ECStructs.ECDSASig memory serverSig) public nonReentrant returns (bool){\n        rUtils.requireCode(approve(ticket.ticketAddress, ILotteryForCoke(ticket.ticketAddress).calcTicketPrice(ticket)) ? 0 : 506);\n        rUtils.requireCode(ILotteryForCoke(ticket.ticketAddress).buy(ticket, serverSig) ? 0 : 507);\n        return true;\n    }\n\n    function approveAndPledgeCoke(IPledgeForCoke.DepositRequest memory depositRequest, ECStructs.ECDSASig memory serverSig) public nonReentrant returns (bool){\n        rUtils.requireCode(approve(depositRequest.depositAddress, depositRequest.cokeAmount) ? 0 : 508);\n        rUtils.requireCode(IPledgeForCoke(depositRequest.depositAddress).deposit(depositRequest, serverSig) ? 0 : 509);\n        return true;\n    }\n\n    function betReward(address _account, uint256 _amount) public mintPermission returns (uint256 minted){\n        uint256 input = _amount;\n        uint256 totalMint = 0;\n        while (input > 0) {\n\n            uint256 factor = 2 ** currentDifficulty;\n            uint256 discount = input / factor;\n            if (input % factor != 0) {\n                discount ++;\n            }\n\n            if (discount > remain - currentStageEnd) {\n                uint256 toMint = remain - currentStageEnd;\n                totalMint += toMint;\n                input = input - toMint * factor;\n                remain = currentStageEnd;\n            } else {\n                totalMint += discount;\n                input = 0;\n                remain = remain - discount;\n            }\n\n            //update to next stage\n            if (remain == currentStageEnd) {\n                if (currentStageEnd != 0) {\n                    currentDifficulty = currentDifficulty + 1;\n                    if (remain - step > 0) {\n                        currentStageEnd = remain - step;\n                    } else {\n                        currentStageEnd = 0;\n                    }\n                } else {\n                    input = 0;\n                }\n            }\n        }\n        _transfer(address(this), _account, totalMint);\n        emit Reward(_account, totalMint, _amount);\n\n        uint256 mintToTeam = totalMint * unlockDenominator / unlockNumerator;\n        if (teamRemain >= mintToTeam) {\n            teamRemain = teamRemain - mintToTeam;\n            _transfer(address(this), team, mintToTeam);\n            emit UnlockToTeam(team, mintToTeam, totalMint);\n        }\n\n        return totalMint;\n    }\n\n    \n    function setGameMachineRecords(address _input, bool _isActivated) public onlyCokeAdmin {\n        gameMachineRecords[_input] = _isActivated;\n    }\n\n    function unlockAllTeamCoke() public onlyCokeAdmin {\n        if (block.number > unlockAllBlockNumber) {\n            _transfer(address(this), team, teamRemain);\n            teamRemain = 0;\n            emit UnlockToTeam(team, teamRemain, 0);\n        }\n    }\n\n    modifier onlyCokeAdmin(){\n        rUtils.requireCode(msg.sender == cokeAdmin ? 0 : 503);\n        _;\n    }\n\n\n    modifier mintPermission(){\n        rUtils.requireCode(gameMachineRecords[msg.sender] == true ? 0 : 505);\n        _;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_input\",\"type\":\"address\"},{\"name\":\"_isActivated\",\"type\":\"bool\"}],\"name\":\"setGameMachineRecords\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockAllBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"betReward\",\"outputs\":[{\"name\":\"minted\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockAllTeamCoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDifficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remain\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"depositAddress\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"cokeAmount\",\"type\":\"uint256\"},{\"name\":\"endBlock\",\"type\":\"uint256\"},{\"name\":\"billSeq\",\"type\":\"bytes32\"},{\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"depositRequest\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"serverSig\",\"type\":\"tuple\"}],\"name\":\"approveAndPledgeCoke\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameMachineRecords\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stagePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cokeAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStageEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamRemain\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"ticketAddress\",\"type\":\"address\"},{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"ticket\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"serverSig\",\"type\":\"tuple\"}],\"name\":\"approveAndBuyLottery\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"step\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rUtils\",\"type\":\"address\"},{\"name\":\"_cokeAdmin\",\"type\":\"address\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_team\",\"type\":\"address\"},{\"name\":\"_toTeam\",\"type\":\"uint256\"},{\"name\":\"_unlockAllBlockNumber\",\"type\":\"uint256\"},{\"name\":\"_bounty\",\"type\":\"address\"},{\"name\":\"_toBounty\",\"type\":\"uint256\"},{\"name\":\"_stagePercent\",\"type\":\"uint256\"},{\"name\":\"_unlockNumerator\",\"type\":\"uint256\"},{\"name\":\"_unlockDenominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rawReward\",\"type\":\"uint256\"}],\"name\":\"UnlockToTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60c0604052600460808190527f434f4b450000000000000000000000000000000000000000000000000000000060a09081526200004091600591906200036a565b506040805180820190915260048082527f434f4b4500000000000000000000000000000000000000000000000000000000602090920191825262000087916006916200036a565b5060126007553480156200009a57600080fd5b5060405161016080620022818339810180604052620000bd919081019062000439565b600160005560048054600160a060020a03808e16600160a060020a031992831617909255600880548d84169083161790556011889055600f8054928b169290911691909117905560108790556200011e3088640100000000620001d9810204565b620001338585640100000000620001d9810204565b600a839055606489840204600b556200017584620001608b8a64010000000062001128620002d782021704565b9064010000000062001128620002d782021704565b600c81905562000190903090640100000000620001d9810204565b60128290556013819055600b54600c5460009190031115620001bc57600b54600c5403600e55620001c2565b6000600e555b50506000600d55506200066a975050505050505050565b600160a060020a038216151562000227576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200021e9062000605565b60405180910390fd5b600354620002449082640100000000620011536200032182021704565b600355600160a060020a0382166000908152600160205260409020546200027a9082640100000000620011536200032182021704565b600160a060020a0383166000818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90620002cb9085906200063b565b60405180910390a35050565b60008282111562000316576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200021e9062000629565b508082035b92915050565b60008282018381101562000363576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200021e9062000617565b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003ad57805160ff1916838001178555620003dd565b82800160010185558215620003dd579182015b82811115620003dd578251825591602001919060010190620003c0565b50620003eb929150620003ef565b5090565b6200040c91905b80821115620003eb5760008155600101620003f6565b90565b60006200036382516200064b565b60006200036382516200065d565b60006200036382516200040c565b60008060008060008060008060008060006101608c8e0312156200045c57600080fd5b60006200046a8e8e6200041d565b9b505060206200047d8e828f016200040f565b9a50506040620004908e828f016200042b565b9950506060620004a38e828f016200040f565b9850506080620004b68e828f016200042b565b97505060a0620004c98e828f016200042b565b96505060c0620004dc8e828f016200040f565b95505060e0620004ef8e828f016200042b565b945050610100620005038e828f016200042b565b935050610120620005178e828f016200042b565b9250506101406200052b8e828f016200042b565b9150509295989b509295989b9093969950565b602481527f4552433230205f6d696e742c206163636f756e742063616e206e6f742062652060208201527f3078303000000000000000000000000000000000000000000000000000000000604082015260600190565b600d81527f536166654d6174682c2061646400000000000000000000000000000000000000602082015260400190565b600d81527f536166654d6174682c2073756200000000000000000000000000000000000000602082015260400190565b620005ff816200040c565b82525050565b602080825281016200031b816200053e565b602080825281016200031b8162000594565b602080825281016200031b81620005c4565b602081016200031b8284620005f4565b6000600160a060020a0382166200031b565b60006200031b826200064b565b611c07806200067a6000396000f3fe608060405234801561001057600080fd5b50600436106101925760003560e060020a900480636ab33368116100e2578063a9059cbb1161009b578063d5a9c38211610075578063d5a9c382146102ff578063dd62ed3e14610307578063e12ca58f1461031a578063e25fe1751461032d57610192565b8063a9059cbb146102d1578063c54dcc57146102e4578063cae9ca51146102ec57610192565b80636ab333681461027357806370a08231146102865780637a303b3d1461029957806395d89b41146102a15780639cbc923e146102a9578063a457c2d7146102be57610192565b806323b872dd1161014f5780633950935111610129578063395093511461023d5780635c062d6c1461025057806361f3c62e14610258578063660f2f981461026057610192565b806323b872dd1461021a578063313ce5671461022d57806338cf64001461023557610192565b806306fdde0314610197578063095ea7b3146101b55780630b99c6f8146101d55780630ca9966a146101ea57806318160ddd146101ff57806318d1027a14610207575b600080fd5b61019f610335565b6040516101ac91906119bd565b60405180910390f35b6101c86101c3366004611469565b6103c3565b6040516101ac91906119af565b6101e86101e3366004611439565b610465565b005b6101f2610509565b6040516101ac9190611ab2565b6101f261050f565b6101f2610215366004611469565b610515565b6101c86102283660046113ec565b61074f565b6101f2610803565b6101e8610809565b6101c861024b366004611469565b6108fb565b6101f26109b4565b6101f26109ba565b6101c861026e366004611512565b6109c0565b6101c861028136600461138c565b610b81565b6101f261029436600461138c565b610b96565b6101f2610bb1565b61019f610bb7565b6102b1610c12565b6040516101ac91906119a1565b6101c86102cc366004611469565b610c21565b6101c86102df366004611469565b610c82565b6101f2610c98565b6101c86102fa366004611499565b610c9e565b6101f2610e0a565b6101f26103153660046113b2565b610e10565b6101c8610328366004611543565b610e3b565b6101f2610fff565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103bb5780601f10610390576101008083540402835291602001916103bb565b820191906000526020600020905b81548152906001019060200180831161039e57829003601f168201915b505050505081565b6000600160a060020a03831615156103f95760405160e560020a62461bcd0281526004016103f090611a1e565b60405180910390fd5b336000818152600260209081526040808320600160a060020a03881680855292529182902085905590519091907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610453908690611ab2565b60405180910390a35060015b92915050565b600454600854600160a060020a039182169163ac29c7399116331461048c576101f761048f565b60005b6040518263ffffffff1660e060020a0281526004016104ae9190611aa4565b60006040518083038186803b1580156104c657600080fd5b505afa1580156104da573d6000803e3d6000fd5b50505050600160a060020a03919091166000908152600960205260409020805460ff1916911515919091179055565b60115481565b60035490565b600454336000908152600960205260408120549091600160a060020a03169063ac29c7399060ff16151560011461054e576101f9610551565b60005b6040518263ffffffff1660e060020a0281526004016105709190611aa4565b60006040518083038186803b15801561058857600080fd5b505afa15801561059c573d6000803e3d6000fd5b5084925060009150505b600082111561066c57600d5460020a600081848115156105c257fe5b04905081848115156105d057fe5b06156105da576001015b600e54600c540381111561060557600e54600c80549082905503828102909403939290920191610617565b600c8054829003905560009350918201915b600e54600c54141561066557600e541561066057600d54600101600d819055506000600b54600c5403111561065557600b54600c5403600e5561065b565b6000600e555b610665565b600093505b50506105a6565b610677308683611005565b84600160a060020a03167f02a6a2be713fedf52f113c0a759f1c1a23a113476d9b1b1a2a453c910660de4e82866040516106b2929190611adb565b60405180910390a2600060125460135483028115156106cd57fe5b0490508060105410151561074657601080548290039055600f546106fc903090600160a060020a031683611005565b600f54604051600160a060020a03909116907f90bee5338e44b87ea85a0c19e7140f0f7546b2f54c2c51a6f19f4a2c3e7005fc9061073d9084908690611adb565b60405180910390a25b50949350505050565b600160a060020a03831660009081526002602090815260408083203384529091528120548211156107955760405160e560020a62461bcd0281526004016103f0906119ee565b600160a060020a03841660009081526002602090815260408083203384529091529020546107c9908363ffffffff61112816565b600160a060020a03851660009081526002602090815260408083203384529091529020556107f8848484611005565b5060015b9392505050565b60075481565b600454600854600160a060020a039182169163ac29c73991163314610830576101f7610833565b60005b6040518263ffffffff1660e060020a0281526004016108529190611aa4565b60006040518083038186803b15801561086a57600080fd5b505afa15801561087e573d6000803e3d6000fd5b505050506011544311156108f957600f546010546108a9913091600160a060020a0390911690611005565b60006010819055600f54604051600160a060020a03909116917f90bee5338e44b87ea85a0c19e7140f0f7546b2f54c2c51a6f19f4a2c3e7005fc916108f091908190611ac0565b60405180910390a25b565b6000600160a060020a03831615156109285760405160e560020a62461bcd0281526004016103f0906119ce565b336000908152600260209081526040808320600160a060020a038716845290915290205461095c908363ffffffff61115316565b336000818152600260209081526040808320600160a060020a038916808552925291829020849055905190927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925916104539190611ab2565b600d5481565b600c5481565b6000805460010180825560045484516040860151600160a060020a039092169163ac29c739916109ef916103c3565b6109fb576101fc6109fe565b60005b6040518263ffffffff1660e060020a028152600401610a1d9190611aa4565b60006040518083038186803b158015610a3557600080fd5b505afa158015610a49573d6000803e3d6000fd5b50506004805487516040517fb3dc57b1000000000000000000000000000000000000000000000000000000008152600160a060020a03928316955063ac29c739945091169163b3dc57b191610aa2918a918a9101611a5e565b602060405180830381600087803b158015610abc57600080fd5b505af1158015610ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610af491908101906114f4565b610b00576101fd610b03565b60005b6040518263ffffffff1660e060020a028152600401610b229190611aa4565b60006040518083038186803b158015610b3a57600080fd5b505afa158015610b4e573d6000803e3d6000fd5b50505050600191506000548114610b7a5760405160e560020a62461bcd0281526004016103f090611a3e565b5092915050565b60096020526000908152604090205460ff1681565b600160a060020a031660009081526001602052604090205490565b600a5481565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103bb5780601f10610390576101008083540402835291602001916103bb565b600854600160a060020a031681565b6000600160a060020a0383161515610c4e5760405160e560020a62461bcd0281526004016103f0906119de565b336000908152600260209081526040808320600160a060020a038716845290915290205461095c908363ffffffff61112816565b6000610c8f338484611005565b50600192915050565b600e5481565b60008054600101808255610cb285856103c3565b1515610cbd57600080fd5b6000606086600160a060020a0316856040518082805190602001908083835b60208310610cfb5780518252601f199092019160209182019101610cdc565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610d5d576040519150601f19603f3d011682016040523d82523d6000602084013e610d62565b606091505b506004549193509150600160a060020a031663ac29c73983610d86576101f5610d89565b60005b6040518263ffffffff1660e060020a028152600401610da89190611aa4565b60006040518083038186803b158015610dc057600080fd5b505afa158015610dd4573d6000803e3d6000fd5b505050506001935050506000548114610e025760405160e560020a62461bcd0281526004016103f090611a3e565b509392505050565b60105481565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600080546001018082556004805485516040517f1435cbfa000000000000000000000000000000000000000000000000000000008152600160a060020a039283169363ac29c73993610eee939290831691631435cbfa91610e9e918c9101611a7a565b60206040518083038186803b158015610eb657600080fd5b505afa158015610eca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101c39190810190611574565b610efa576101fa610efd565b60005b6040518263ffffffff1660e060020a028152600401610f1c9190611aa4565b60006040518083038186803b158015610f3457600080fd5b505afa158015610f48573d6000803e3d6000fd5b50506004805487516040517fb4bdad9c000000000000000000000000000000000000000000000000000000008152600160a060020a03928316955063ac29c739945091169163b4bdad9c91610fa1918a918a9101611a88565b602060405180830381600087803b158015610fbb57600080fd5b505af1158015610fcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ff391908101906114f4565b610b00576101fb610b03565b600b5481565b600160a060020a0383166000908152600160205260409020548111156110405760405160e560020a62461bcd0281526004016103f090611a2e565b600160a060020a038216151561106b5760405160e560020a62461bcd0281526004016103f090611a4e565b600160a060020a038316600090815260016020526040902054611094908263ffffffff61112816565b600160a060020a0380851660009081526001602052604080822093909355908416815220546110c9908263ffffffff61115316565b600160a060020a0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061111b908590611ab2565b60405180910390a3505050565b60008282111561114d5760405160e560020a62461bcd0281526004016103f090611a0e565b50900390565b6000828201838110156107fc5760405160e560020a62461bcd0281526004016103f0906119fe565b60006107fc8235611b49565b60006107fc8235611b54565b60006107fc8251611b54565b60006107fc8235611b59565b6000601f820183136111bc57600080fd5b81356111cf6111ca82611b1d565b611af6565b915080825260208301602083018583830111156111eb57600080fd5b6111f6838284611b8b565b50505092915050565b600060c0828403121561121157600080fd5b61121b60c0611af6565b90506000611229848461117b565b825250602061123a8484830161117b565b602083015250604061124e8482850161119f565b60408301525060606112628482850161119f565b60608301525060806112768482850161119f565b60808301525060a061128a8482850161119f565b60a08301525092915050565b6000606082840312156112a857600080fd5b6112b26060611af6565b905060006112c08484611380565b82525060206112d18484830161119f565b60208301525060406112e58482850161119f565b60408301525092915050565b600060a0828403121561130357600080fd5b61130d60a0611af6565b9050600061131b848461117b565b825250602061132c8484830161119f565b60208301525060406113408482850161117b565b60408301525060606113548482850161119f565b60608301525060806113688482850161119f565b60808301525092915050565b60006107fc8251611b59565b60006107fc8235611b6f565b60006020828403121561139e57600080fd5b60006113aa848461117b565b949350505050565b600080604083850312156113c557600080fd5b60006113d1858561117b565b92505060206113e28582860161117b565b9150509250929050565b60008060006060848603121561140157600080fd5b600061140d868661117b565b935050602061141e8682870161117b565b925050604061142f8682870161119f565b9150509250925092565b6000806040838503121561144c57600080fd5b6000611458858561117b565b92505060206113e285828601611187565b6000806040838503121561147c57600080fd5b6000611488858561117b565b92505060206113e28582860161119f565b6000806000606084860312156114ae57600080fd5b60006114ba868661117b565b93505060206114cb8682870161119f565b925050604084013567ffffffffffffffff8111156114e857600080fd5b61142f868287016111ab565b60006020828403121561150657600080fd5b60006113aa8484611193565b600080610120838503121561152657600080fd5b600061153285856111ff565b92505060c06113e285828601611296565b600080610100838503121561155757600080fd5b600061156385856112f1565b92505060a06113e285828601611296565b60006020828403121561158657600080fd5b60006113aa8484611374565b61159b81611b49565b82525050565b61159b81611b54565b61159b81611b59565b61159b81611b75565b60006115c782611b45565b8084526115db816020860160208601611b97565b6115e481611bc3565b9093016020019392505050565b603081527f455243323020696e637265617365416c6c6f77616e63652c207370656e64657260208201527f2063616e206e6f74206265203078303000000000000000000000000000000000604082015260600190565b603081527f4552433230206465637265617365416c6c6f77616e63652c207370656e64657260208201527f2063616e206e6f74206265203078303000000000000000000000000000000000604082015260600190565b602881527f4552433230207472616e7366657246726f6d2c20616c6c6f77616e6365206e6f60208201527f7420656e6f756768000000000000000000000000000000000000000000000000604082015260600190565b600d81527f536166654d6174682c2061646400000000000000000000000000000000000000602082015260400190565b600d81527f536166654d6174682c2073756200000000000000000000000000000000000000602082015260400190565b602681527f455243323020617070726f76652c207370656e6465722063616e206e6f74206260208201527f6520307830300000000000000000000000000000000000000000000000000000604082015260600190565b602381527f4552433230205f7472616e736665722c206e6f7420656e6f7567682062616c6160208201527f6e63650000000000000000000000000000000000000000000000000000000000604082015260600190565b600c81527f6e6f6e5265656e7472616e740000000000000000000000000000000000000000602082015260400190565b602b81527f4552433230205f7472616e736665722c20746f20616464726573732063616e2060208201527f6e6f742062652030783030000000000000000000000000000000000000000000604082015260600190565b805160c08301906118968482611592565b5060208201516118a96020850182611592565b5060408201516118bc60408501826115aa565b5060608201516118cf60608501826115aa565b5060808201516118e260808501826115aa565b5060a08201516118f560a08501826115aa565b50505050565b8051606083019061190c8482611998565b50602082015161191f60208501826115aa565b5060408201516118f560408501826115aa565b805160a08301906119438482611592565b50602082015161195660208501826115aa565b5060408201516119696040850182611592565b50606082015161197c60608501826115aa565b5060808201516118f560808501826115aa565b61159b81611b80565b61159b81611b6f565b6020810161045f8284611592565b6020810161045f82846115a1565b602080825281016107fc81846115bc565b6020808252810161045f816115f1565b6020808252810161045f81611647565b6020808252810161045f8161169d565b6020808252810161045f816116f3565b6020808252810161045f81611723565b6020808252810161045f81611753565b6020808252810161045f816117a9565b6020808252810161045f816117ff565b6020808252810161045f8161182f565b6101208101611a6d8285611885565b6107fc60c08301846118fb565b60a0810161045f8284611932565b6101008101611a978285611932565b6107fc60a08301846118fb565b6020810161045f828461198f565b6020810161045f82846115aa565b60408101611ace82856115aa565b6107fc60208301846115b3565b60408101611ae982856115aa565b6107fc60208301846115aa565b60405181810167ffffffffffffffff81118282101715611b1557600080fd5b604052919050565b600067ffffffffffffffff821115611b3457600080fd5b506020601f91909101601f19160190565b5190565b600061045f82611b63565b151590565b90565b61ffff1690565b600160a060020a031690565b60ff1690565b600061045f82611b59565b600061045f82611b5c565b82818337506000910152565b60005b83811015611bb2578181015183820152602001611b9a565b838111156118f55750506000910152565b601f01601f19169056fea265627a7a7230582078b84fbc066e10385d10fd5e46eb8832df1bd84c8011eb3d4f422f9606a61dc36c6578706572696d656e74616cf500370000000000000000000000002ad53d3d719ef728530c799ec690edeba57d417400000000000000000000000078caac9bfa4f3a2866898016bf1fc4a2fb77ff42000000000000000000000000000000000000000019d971e4fe8401e7400000000000000000000000000000001cd8fbaf9279d2dc0ecc0d99fd01275421a3d04c0000000000000000000000000000000000000000052b7d2dcc80cd2e400000000000000000000000000000000000000000000000000000000000000000b15e600000000000000000000000002a0a9592120c9c7b95f9b7531db36804890acf6600000000000000000000000000000000000000000295be96e640669720000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000002",
  "constructorArguments": "0000000000000000000000002ad53d3d719ef728530c799ec690edeba57d417400000000000000000000000078caac9bfa4f3a2866898016bf1fc4a2fb77ff42000000000000000000000000000000000000000019d971e4fe8401e7400000000000000000000000000000001cd8fbaf9279d2dc0ecc0d99fd01275421a3d04c0000000000000000000000000000000000000000052b7d2dcc80cd2e400000000000000000000000000000000000000000000000000000000000000000b15e600000000000000000000000002a0a9592120c9c7b95f9b7531db36804890acf6600000000000000000000000000000000000000000295be96e640669720000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000002"
}