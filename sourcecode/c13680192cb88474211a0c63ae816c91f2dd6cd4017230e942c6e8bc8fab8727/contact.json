{
  "address": "0xf239fab41de78533fa974b74d7605f1e68f8772e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CPSTestToken1",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-10\n*/\n\npragma solidity ^0.4.18;\n\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ninterface ERC20 {\n\n    function name() public view returns (string);\n    function symbol() public view returns (string);\n    function decimals() public view returns (uint8);\n\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n\n}\n\ninterface ERC223 {\n    function transfer(address to, uint value, bytes data) payable public;\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n}\n\n\ncontract ERC223ReceivingContract {\n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\n\ncontract ERCAddressFrozenFund is ERC20{\n\n    using SafeMath for uint;\n\n    struct LockedWallet {\n        address owner; // the owner of the locked wallet, he/she must secure the private key\n        uint256 amount; //\n        uint256 start; // timestamp when \"lock\" function is executed\n        uint256 duration; // duration period in seconds. if we want to lock an amount for\n        uint256 release;  // release = start+duration\n        // \"start\" and \"duration\" is for bookkeeping purpose only. Only \"release\" will be actually checked once unlock function is called\n    }\n\n\n    address public owner;\n\n    uint256 _lockedSupply;\n\n    mapping (address => LockedWallet) addressFrozenFund; //address -> (deadline, amount),freeze fund of an address its so that no token can be transferred out until deadline\n\n    function mintToken(address _owner, uint256 amount) internal;\n    function burnToken(address _owner, uint256 amount) internal;\n\n    event LockBalance(address indexed addressOwner, uint256 releasetime, uint256 amount);\n    event LockSubBalance(address indexed addressOwner, uint256 index, uint256 releasetime, uint256 amount);\n    event UnlockBalance(address indexed addressOwner, uint256 releasetime, uint256 amount);\n    event UnlockSubBalance(address indexed addressOwner, uint256 index, uint256 releasetime, uint256 amount);\n\n    function lockedSupply() public view returns (uint256) {\n        return _lockedSupply;\n    }\n\n    function releaseTimeOf(address _owner) public view returns (uint256 releaseTime) {\n        return addressFrozenFund[_owner].release;\n    }\n\n    function lockedBalanceOf(address _owner) public view returns (uint256 lockedBalance) {\n        return addressFrozenFund[_owner].amount;\n    }\n\n    function lockBalance(uint256 duration, uint256 amount) public{\n\n        address _owner = msg.sender;\n\n        require(address(0) != _owner && amount > 0 && duration > 0 && balanceOf(_owner) >= amount);\n        require(addressFrozenFund[_owner].release <= now && addressFrozenFund[_owner].amount == 0);\n\n        addressFrozenFund[_owner].start = now;\n        addressFrozenFund[_owner].duration = duration;\n        addressFrozenFund[_owner].release = addressFrozenFund[_owner].start + duration;\n        addressFrozenFund[_owner].amount = amount;\n        burnToken(_owner, amount);\n        _lockedSupply = SafeMath.add(_lockedSupply, lockedBalanceOf(_owner));\n\n        LockBalance(_owner, addressFrozenFund[_owner].release, amount);\n    }\n\n    //_owner must call this function explicitly to release locked balance in a locked wallet\n    function releaseLockedBalance() public {\n\n        address _owner = msg.sender;\n\n        require(address(0) != _owner && lockedBalanceOf(_owner) > 0 && releaseTimeOf(_owner) <= now);\n        mintToken(_owner, lockedBalanceOf(_owner));\n        _lockedSupply = SafeMath.sub(_lockedSupply, lockedBalanceOf(_owner));\n\n        UnlockBalance(_owner, addressFrozenFund[_owner].release, lockedBalanceOf(_owner));\n\n        delete addressFrozenFund[_owner];\n    }\n\n}\n\ncontract CPSTestToken1 is ERC223, ERCAddressFrozenFund {\n\n    using SafeMath for uint;\n\n    string internal _name;\n    string internal _symbol;\n    uint8 internal _decimals;\n    uint256 internal _totalSupply;\n    address public fundsWallet;           // Where should the raised ETH go?\n    uint256 internal fundsWalletChanged;\n\n    mapping (address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n\n    function CPSTestToken1() public {\n        _symbol = 'CPS';\n        _name = 'CPSCoin';\n        _decimals = 8;\n        _totalSupply = 100000000000000000;\n        balances[msg.sender] = _totalSupply;\n        fundsWallet = msg.sender;\n\n        owner = msg.sender;\n\n        fundsWalletChanged = 0;\n    }\n\n    function changeFundsWallet(address newOwner) public{\n        require(msg.sender == fundsWallet && fundsWalletChanged == 0);\n\n        balances[newOwner] = balances[fundsWallet];\n        balances[fundsWallet] = 0;\n        fundsWallet = newOwner;\n        fundsWalletChanged = 1;\n    }\n\n    function name() public view returns (string) {\n        return _name;\n    }\n\n    function symbol() public view returns (string) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function mintToken(address _owner, uint256 amount) internal {\n        balances[_owner] = SafeMath.add(balances[_owner], amount);\n    }\n\n    function burnToken(address _owner, uint256 amount) internal {\n        balances[_owner] = SafeMath.sub(balances[_owner], amount);\n    }\n\n    function() payable public {\n\n        require(msg.sender == address(0));//disable ICO crowd sale 禁止ICO资金募集，因为本合约已经过了募集阶段\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        if(isContract(_to)) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            bytes memory _data = new bytes(1);\n            receiver.tokenFallback(msg.sender, _value, _data);\n        }\n\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n        balances[_to] = SafeMath.add(balances[_to], _value);\n        Transfer(msg.sender, _to, _value);\n\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        if(_from == fundsWallet){\n            require(_value <= balances[_from]);\n        }\n\n        if(isContract(_to)) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            bytes memory _data = new bytes(1);\n            receiver.tokenFallback(msg.sender, _value, _data);\n        }\n\n        balances[_from] = SafeMath.sub(balances[_from], _value);\n        balances[_to] = SafeMath.add(balances[_to], _value);\n        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = SafeMath.add(allowed[msg.sender][_spender], _addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = SafeMath.sub(oldValue, _subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function transfer(address _to, uint _value, bytes _data) public payable {\n        require(_value > 0 );\n        if(isContract(_to)) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, _data);\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        Transfer(msg.sender, _to, _value, _data);\n    }\n\n    function isContract(address _addr) private view returns (bool is_contract) {\n        uint length;\n        assembly {\n        //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return (length>0);\n    }\n\n    function transferMultiple(address[] _tos, uint256[] _values, uint count)  payable public returns (bool) {\n        uint256 total = 0;\n        uint256 total_prev = 0;\n        uint i = 0;\n\n        for(i=0;i<count;i++){\n            require(_tos[i] != address(0) && !isContract(_tos[i]));//_tos must no contain any contract address\n\n            if(isContract(_tos[i])) {\n                ERC223ReceivingContract receiver = ERC223ReceivingContract(_tos[i]);\n                bytes memory _data = new bytes(1);\n                receiver.tokenFallback(msg.sender, _values[i], _data);\n            }\n\n            total_prev = total;\n            total = SafeMath.add(total, _values[i]);\n            require(total >= total_prev);\n        }\n\n        require(total <= balances[msg.sender]);\n\n        for(i=0;i<count;i++){\n            balances[msg.sender] = SafeMath.sub(balances[msg.sender], _values[i]);\n            balances[_tos[i]] = SafeMath.add(balances[_tos[i]], _values[i]);\n            Transfer(msg.sender, _tos[i], _values[i]);\n        }\n\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"releaseTimeOf\",\"outputs\":[{\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseLockedBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"name\":\"lockedBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeFundsWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"transferMultiple\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addressOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"releasetime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addressOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releasetime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockSubBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addressOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"releasetime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addressOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releasetime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockSubBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "606060405234156200001057600080fd5b60408051908101604052600381527f4350530000000000000000000000000000000000000000000000000000000000602082015260049080516200005992916020019062000101565b5060408051908101604052600781527f435053436f696e0000000000000000000000000000000000000000000000000060208201526003908051620000a392916020019062000101565b506005805460ff1916600890811790915567016345785d8a00006006819055600160a060020a03331660008181526009602052604081209290925560078054600160a060020a031990811683179091558254161781559055620001a6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200014457805160ff191683800117855562000174565b8280016001018555821562000174579182015b828111156200017457825182559160200191906001019062000157565b506200018292915062000186565b5090565b620001a391905b808211156200018257600081556001016200018d565b90565b61170f80620001b66000396000f3006060604052600436106101035763ffffffff60e060020a60003504166306fdde038114610119578063095ea7b3146101a357806318160ddd146101d9578063191723ed146101fe5780632194f3a21461021757806323b872dd14610246578063286c241a1461026e578063313ce5671461028d578063323661f6146102b657806359355736146102c957806366188463146102e857806370a082311461030a5780637d6f0d5f146103295780638da5cb5b1461034857806395d89b411461035b578063a201ed8b1461036e578063a9059cbb146103f4578063be45fd6214610416578063ca5c7b9114610470578063d73dd62314610483578063dd62ed3e146104a5575b33600160a060020a03161561011757600080fd5b005b341561012457600080fd5b61012c6104ca565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610168578082015183820152602001610150565b50505050905090810190601f1680156101955780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101ae57600080fd5b6101c5600160a060020a0360043516602435610572565b604051901515815260200160405180910390f35b34156101e457600080fd5b6101ec6105de565b60405190815260200160405180910390f35b341561020957600080fd5b6101176004356024356105e4565b341561022257600080fd5b61022a61072c565b604051600160a060020a03909116815260200160405180910390f35b341561025157600080fd5b6101c5600160a060020a036004358116906024351660443561073b565b341561027957600080fd5b6101ec600160a060020a0360043516610a3c565b341561029857600080fd5b6102a0610a5a565b60405160ff909116815260200160405180910390f35b34156102c157600080fd5b610117610a63565b34156102d457600080fd5b6101ec600160a060020a0360043516610b78565b34156102f357600080fd5b6101c5600160a060020a0360043516602435610b96565b341561031557600080fd5b6101ec600160a060020a0360043516610c8a565b341561033457600080fd5b610117600160a060020a0360043516610ca5565b341561035357600080fd5b61022a610d2a565b341561036657600080fd5b61012c610d39565b6101c56004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437509496505093359350610dac92505050565b34156103ff57600080fd5b6101c5600160a060020a0360043516602435611137565b61011760048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061134995505050505050565b341561047b57600080fd5b6101ec61156c565b341561048e57600080fd5b6101c5600160a060020a0360043516602435611572565b34156104b057600080fd5b6101ec600160a060020a0360043581169060243516611610565b6104d26116d1565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105685780601f1061053d57610100808354040283529160200191610568565b820191906000526020600020905b81548152906001019060200180831161054b57829003601f168201915b5050505050905090565b600160a060020a033381166000818152600a6020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60065490565b33600160a060020a038116158015906105fd5750600082115b80156106095750600083115b801561061d57508161061a82610c8a565b10155b151561062857600080fd5b600160a060020a03811660009081526002602052604090206004015442901180159061066d5750600160a060020a038116600090815260026020526040902060010154155b151561067857600080fd5b600160a060020a0381166000908152600260208190526040909120429181018290556003810185905590840160048201556001018290556106b9818361163b565b6106cd6001546106c883610b78565b61167e565b600155600160a060020a03811660008181526002602052604090819020600401547f4a5ed3c7d7f33c8c80b3444f04527e6d3bee954c19dac37176e4aa1a86ce87289185905191825260208201526040908101905180910390a2505050565b600754600160a060020a031681565b6000806107466116d1565b600160a060020a038516151561075b57600080fd5b600160a060020a03861660009081526009602052604090205484111561078057600080fd5b600160a060020a038087166000908152600a6020908152604080832033909416835292905220548411156107b357600080fd5b600754600160a060020a03878116911614156107ee57600160a060020a0386166000908152600960205260409020548411156107ee57600080fd5b6107f785611694565b1561090657849150600160405180591061080e5750595b818152601f19601f83011681016020016040529050905081600160a060020a031663c0ee0b8a3386846040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156108a457808201518382015260200161088c565b50505050905090810190601f1680156108d15780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15156108f157600080fd5b6102c65a03f1151561090257600080fd5b5050505b600160a060020a038616600090815260096020526040902054610929908561169c565b600160a060020a038088166000908152600960205260408082209390935590871681522054610958908561167e565b600160a060020a038087166000908152600960209081526040808320949094558983168252600a815283822033909316825291909152205461099a908561169c565b600160a060020a038781166000908152600a60209081526040808320339094168352929052208190556109cd908561169c565b600160a060020a038088166000818152600a6020908152604080832033861684529091529081902093909355908716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9087905190815260200160405180910390a350600195945050505050565b600160a060020a031660009081526002602052604090206004015490565b60055460ff1690565b33600160a060020a03811615801590610a8457506000610a8282610b78565b115b8015610a98575042610a9582610a3c565b11155b1515610aa357600080fd5b610ab581610ab083610b78565b6116ae565b610ac9600154610ac483610b78565b61169c565b600155600160a060020a0381166000818152600260205260409020600401547ff2a470701c29165d36d10c35e36dac1dc397594484071f35785a55c8589be0fa90610b1384610b78565b60405191825260208201526040908101905180910390a2600160a060020a031660009081526002602081905260408220805473ffffffffffffffffffffffffffffffffffffffff19168155600181018390559081018290556003810182905560040155565b600160a060020a031660009081526002602052604090206001015490565b600160a060020a033381166000908152600a6020908152604080832093861683529290529081205480831115610bf357600160a060020a033381166000908152600a60209081526040808320938816835292905290812055610c24565b610bfd818461169c565b600160a060020a033381166000908152600a60209081526040808320938916835292905220555b600160a060020a033381166000818152600a602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526009602052604090205490565b60075433600160a060020a039081169116148015610cc35750600854155b1515610cce57600080fd5b60078054600160a060020a0390811660009081526009602052604080822054948316808352818320959095558354909216815290812055805473ffffffffffffffffffffffffffffffffffffffff191690911790556001600855565b600054600160a060020a031681565b610d416116d1565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105685780601f1061053d57610100808354040283529160200191610568565b6000806000806000610dbc6116d1565b600094508493508392505b86831015610fa8576000898481518110610ddd57fe5b90602001906020020151600160a060020a031614158015610e195750610e17898481518110610e0857fe5b90602001906020020151611694565b155b1515610e2457600080fd5b610e33898481518110610e0857fe5b15610f6c57888381518110610e4457fe5b9060200190602002015191506001604051805910610e5f5750595b818152601f19601f83011681016020016040529050905081600160a060020a031663c0ee0b8a338a8681518110610e9257fe5b90602001906020020151846040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610f0a578082015183820152602001610ef2565b50505050905090810190601f168015610f375780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1515610f5757600080fd5b6102c65a03f11515610f6857600080fd5b5050505b849350610f8e85898581518110610f7f57fe5b9060200190602002015161167e565b945083851015610f9d57600080fd5b600190920191610dc7565b600160a060020a033316600090815260096020526040902054851115610fcd57600080fd5b600092505b8683101561112857600160a060020a0333166000908152600960205260409020546110129089858151811061100357fe5b9060200190602002015161169c565b600160a060020a033316600090815260096020819052604082209290925561107891908b868151811061104157fe5b90602001906020020151600160a060020a0316600160a060020a0316815260200190815260200160002054898581518110610f7f57fe5b600960008b868151811061108857fe5b90602001906020020151600160a060020a031681526020810191909152604001600020558883815181106110b857fe5b90602001906020020151600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8a868151811061110257fe5b9060200190602002015160405190815260200160405180910390a3600190920191610fd2565b50600198975050505050505050565b6000806111426116d1565b600160a060020a038516151561115757600080fd5b600160a060020a03331660009081526009602052604090205484111561117c57600080fd5b61118585611694565b1561129457849150600160405180591061119c5750595b818152601f19601f83011681016020016040529050905081600160a060020a031663c0ee0b8a3386846040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561123257808201518382015260200161121a565b50505050905090810190601f16801561125f5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b151561127f57600080fd5b6102c65a03f1151561129057600080fd5b5050505b600160a060020a0333166000908152600960205260409020546112b7908561169c565b600160a060020a0333811660009081526009602052604080822093909355908716815220546112e6908561167e565b600160a060020a0380871660008181526009602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9087905190815260200160405180910390a3506001949350505050565b600080831161135757600080fd5b61136084611694565b15611448575082600160a060020a03811663c0ee0b8a3385856040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156113e65780820151838201526020016113ce565b50505050905090810190601f1680156114135780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b151561143357600080fd5b6102c65a03f1151561144457600080fd5b5050505b600160a060020a033316600090815260096020526040902054611471908463ffffffff61169c16565b600160a060020a0333811660009081526009602052604080822093909355908616815220546114a6908463ffffffff61167e16565b600160a060020a03851660009081526009602052604090819020919091558290518082805190602001908083835b602083106114f35780518252601f1990920191602091820191016114d4565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902084600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c168660405190815260200160405180910390a450505050565b60015490565b600160a060020a033381166000908152600a602090815260408083209386168352929052908120546115a4908361167e565b600160a060020a033381166000818152600a602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a039182166000908152600a6020908152604080832093909416825291909152205490565b600160a060020a03821660009081526009602052604090205461165e908261169c565b600160a060020a0390921660009081526009602052604090209190915550565b60008282018381101561168d57fe5b9392505050565b6000903b1190565b6000828211156116a857fe5b50900390565b600160a060020a03821660009081526009602052604090205461165e908261167e565b602060405190810160405260008152905600a165627a7a72305820daae87d28e53b696a2a4ba50387ace15ac4e56b3cdfb2ea3497d32a23b333f3b0029"
}