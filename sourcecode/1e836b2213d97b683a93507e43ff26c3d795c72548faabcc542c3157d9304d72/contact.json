{
  "address": "0xad14e61e0c450f525429861b1e482eedf914a541",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CustomToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-07\n*/\n\npragma solidity ^0.4.19;\n\ncontract BaseToken {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != 0x0);\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n        Transfer(_from, _to, _value);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n}\n\ncontract BurnToken is BaseToken {\n    event Burn(address indexed from, uint256 value);\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        totalSupply -= _value;\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(_value <= allowance[_from][msg.sender]);\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        totalSupply -= _value;\n        Burn(_from, _value);\n        return true;\n    }\n}\n\ncontract AirdropToken is BaseToken {\n    uint256 public airAmount;\n    uint256 public airBegintime;\n    uint256 public airEndtime;\n    address public airSender;\n    uint32 public airLimitCount;\n\n    mapping (address => uint32) public airCountOf;\n\n    event Airdrop(address indexed from, uint32 indexed count, uint256 tokenValue);\n\n    function airdrop() public payable {\n        require(now >= airBegintime && now <= airEndtime);\n        require(msg.value == 0);\n        if (airLimitCount > 0 && airCountOf[msg.sender] >= airLimitCount) {\n            revert();\n        }\n        _transfer(airSender, msg.sender, airAmount);\n        airCountOf[msg.sender] += 1;\n        Airdrop(msg.sender, airCountOf[msg.sender], airAmount);\n    }\n}\n\ncontract LockToken is BaseToken {\n    struct LockMeta {\n        uint256 amount;\n        uint256 endtime;\n    }\n    \n    mapping (address => LockMeta) public lockedAddresses;\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(balanceOf[_from] >= _value);\n        LockMeta storage meta = lockedAddresses[_from];\n        require(now >= meta.endtime || meta.amount <= balanceOf[_from] - _value);\n        super._transfer(_from, _to, _value);\n    }\n}\n\ncontract CustomToken is BaseToken, BurnToken, AirdropToken, LockToken {\n    function CustomToken() public {\n        totalSupply = 100000000000000000000000000;\n        name = 'EthLinkerToken';\n        symbol = 'ELT';\n        decimals = 18;\n        balanceOf[0x0926a20aca505b82f7cb7864e1246894eac27ea0] = totalSupply;\n        Transfer(address(0), 0x0926a20aca505b82f7cb7864e1246894eac27ea0, totalSupply);\n\n        airAmount = 66000000000000000000;\n        airBegintime = 1523095200;\n        airEndtime = 1617789600;\n        airSender = 0x8888888888888888888888888888888888888888;\n        airLimitCount = 1;\n\n        lockedAddresses[0xf60340e79829061f1ab918ee92c064dbe06ff168] = LockMeta({amount: 10000000000000000000000000, endtime: 1554652800});\n        lockedAddresses[0x0b03316fe4949c15b3677d67293d3ed359889aac] = LockMeta({amount: 10000000000000000000000000, endtime: 1586275200});\n        lockedAddresses[0x139a911a9086522d84ac54f992a9243e8fedeb95] = LockMeta({amount: 10000000000000000000000000, endtime: 1617811200});\n    }\n\n    function() public payable {\n        airdrop();\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b6a52b7d2dcc80cd2e400000060035560408051908101604052600e81527f4574684c696e6b6572546f6b656e000000000000000000000000000000000000602082015260009080516100659291602001906102fd565b5060408051908101604052600381527f454c540000000000000000000000000000000000000000000000000000000000602082015260019080516100ad9291602001906102fd565b506002805460ff19166012179055600354730926a20aca505b82f7cb7864e1246894eac27ea0600081815260046020527f6bf12a94d07d7df543c79f4ce275af29a2892a3b7e7ec36f75c9e623680a7d2e83905590917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060405190815260200160405180910390a3680393ef1a5127c80000600655635ac896a060075563606d82a06008556009805460a060020a63ffffffff0219600160a060020a0319909116738888888888888888888888888888888888888888171674010000000000000000000000000000000000000000179055604080519081016040526a084595161401484a0000008152635caa1e8060208083019190915273f60340e79829061f1ab918ee92c064dbe06ff168600052600b90527f51266fd725f81e87a1bbe29bf09e1fdb148c0316d831a39d08ad62794123fc2f81518155602082015160019091015550604080519081016040526a084595161401484a0000008152635e8ca380602080830191909152730b03316fe4949c15b3677d67293d3ed359889aac600052600b90527f56d59bcde75ed8a35c4c92ee10b6c8b70abc08a119c3f267253c3841cd182f0881518155602082015160019091015550604080519081016040526a084595161401484a000000815263606dd70060208083019190915273139a911a9086522d84ac54f992a9243e8fedeb95600052600b90527fe6fc55fb7336d121bb39c955fcfcf87b1aa427bfe4aa8973cd73965c645da44381518155602082015160019091015550610398565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061033e57805160ff191683800117855561036b565b8280016001018555821561036b579182015b8281111561036b578251825591602001919060010190610350565b5061037792915061037b565b5090565b61039591905b808211156103775760008155600101610381565b90565b610ad4806103a76000396000f3006060604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461011057806307cc60511461019a578063095ea7b3146101bf57806318160ddd146101f557806323b872dd14610208578063313ce567146102305780633884d6351461010657806342966c681461025957806370a082311461026f57806379cc67901461028e5780637d720296146102b057806395d89b41146102df578063a3fe1ade146102f2578063a5bbd67a1461032a578063a9059cbb14610361578063b0f85a1014610383578063dd62ed3e14610396578063e67ad254146103bb578063e779a8cf146103ce575b61010e6103e1565b005b341561011b57600080fd5b61012361050e565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561015f578082015183820152602001610147565b50505050905090810190601f16801561018c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101a557600080fd5b6101ad6105ac565b60405190815260200160405180910390f35b34156101ca57600080fd5b6101e1600160a060020a03600435166024356105b2565b604051901515815260200160405180910390f35b341561020057600080fd5b6101ad61061e565b341561021357600080fd5b6101e1600160a060020a0360043581169060243516604435610624565b341561023b57600080fd5b61024361069b565b60405160ff909116815260200160405180910390f35b341561026457600080fd5b6101e16004356106a4565b341561027a57600080fd5b6101ad600160a060020a036004351661072f565b341561029957600080fd5b6101e1600160a060020a0360043516602435610741565b34156102bb57600080fd5b6102c361081d565b604051600160a060020a03909116815260200160405180910390f35b34156102ea57600080fd5b61012361082c565b34156102fd57600080fd5b610311600160a060020a0360043516610897565b60405163ffffffff909116815260200160405180910390f35b341561033557600080fd5b610349600160a060020a03600435166108af565b60405191825260208201526040908101905180910390f35b341561036c57600080fd5b6101e1600160a060020a03600435166024356108c8565b341561038e57600080fd5b6101ad6108de565b34156103a157600080fd5b6101ad600160a060020a03600435811690602435166108e4565b34156103c657600080fd5b6101ad610901565b34156103d957600080fd5b610311610907565b60075442101580156103f557506008544211155b151561040057600080fd5b341561040b57600080fd5b60095460007401000000000000000000000000000000000000000090910463ffffffff161180156104785750600954600160a060020a0333166000908152600a602052604090205463ffffffff740100000000000000000000000000000000000000009092048216911610155b1561048257600080fd5b60095460065461049d91600160a060020a031690339061092b565b33600160a060020a03166000818152600a602052604090819020805463ffffffff198116600163ffffffff9283160182161791829055600654911692917fcce6ff7d594e7067a58df51c8588740b7c8b42537da7262add9823085de82e4891905190815260200160405180910390a3565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105a45780601f10610579576101008083540402835291602001916105a4565b820191906000526020600020905b81548152906001019060200180831161058757829003601f168201915b505050505081565b60065481565b600160a060020a03338116600081815260056020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60035481565b600160a060020a0380841660009081526005602090815260408083203390941683529290529081205482111561065957600080fd5b600160a060020a038085166000908152600560209081526040808320339094168352929052208054839003905561069184848461092b565b5060019392505050565b60025460ff1681565b600160a060020a033316600090815260046020526040812054829010156106ca57600080fd5b600160a060020a03331660008181526004602052604090819020805485900390556003805485900390557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a2506001919050565b60046020526000908152604090205481565b600160a060020a0382166000908152600460205260408120548290101561076757600080fd5b600160a060020a038084166000908152600560209081526040808320339094168352929052205482111561079a57600080fd5b600160a060020a038084166000818152600460209081526040808320805488900390556005825280832033909516835293905282902080548590039055600380548590039055907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a250600192915050565b600954600160a060020a031681565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105a45780601f10610579576101008083540402835291602001916105a4565b600a6020526000908152604090205463ffffffff1681565b600b602052600090815260409020805460019091015482565b60006108d533848461092b565b50600192915050565b60085481565b600560209081526000928352604080842090915290825290205481565b60075481565b60095474010000000000000000000000000000000000000000900463ffffffff1681565b600160a060020a0383166000908152600460205260408120548290101561095157600080fd5b50600160a060020a0383166000908152600b6020526040902060018101544210158061099b5750600160a060020a0384166000908152600460205260409020548154908390039011155b15156109a657600080fd5b6109b18484846109b7565b50505050565b6000600160a060020a03831615156109ce57600080fd5b600160a060020a038416600090815260046020526040902054829010156109f457600080fd5b600160a060020a03831660009081526004602052604090205482810111610a1a57600080fd5b50600160a060020a038281166000908152600460205260408082208054938716835291208054848103825582548501928390559054920191018114610a5b57fe5b82600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a3505050505600a165627a7a723058207b278592aa6c51a10ab9b033684a5d509166047b119b88928c6ef3a9356629750029"
}