{
  "address": "0xab6dae2c6fdf3c03c9334c6e0cdcb051c417e465",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TipTokenCrowdsale",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-05\n*/\n\npragma solidity ^0.4.23;\n\n\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that throw on error\n*/\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ncontract Administratable is Ownable {\n    mapping (address => bool) admins;\n\n    event AdminAdded(address indexed _admin);\n\n    event AdminRemoved(address indexed _admin);\n\n    modifier onlyAdmin() {\n        require(admins[msg.sender]);\n        _;\n    }\n\n    function addAdmin(address _addressToAdd) external onlyOwner {\n        require(_addressToAdd != address(0));\n        admins[_addressToAdd] = true;\n\n        emit AdminAdded(_addressToAdd);\n    }\n\n    function removeAdmin(address _addressToRemove) external onlyOwner {\n        require(_addressToRemove != address(0));\n        admins[_addressToRemove] = false;\n\n        emit AdminRemoved(_addressToRemove);\n    }\n}\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\ncontract ERC20 {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\ncontract ERC865 is ERC20 {\n\n    function transferPreSigned(\n        bytes _signature,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool);\n\n    function approvePreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool);\n\n    function increaseApprovalPreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _addedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool);\n\n    function decreaseApprovalPreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _subtractedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool);\n\n    function transferFromPreSigned(\n        bytes _signature,\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool);\n\n    function revokeSignature(bytes _signature)\n    public\n    returns (bool);\n\n}\n\ncontract StandardToken is ERC20  {\n\n  using SafeMath for uint256;\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  mapping(address => uint256) public balances;\n\n  uint256 _totalSupply;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract ERC865Token is ERC865, StandardToken {\n\n    /* Nonces of transfers performed */\n    mapping(bytes => bool) nonces;\n\n    event TransferPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\n    event ApprovalPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\n    event SignatureRevoked(bytes signature, address indexed from);\n\n    /**\n     * @notice Submit a presigned transfer\n     * @param _signature bytes The signature, issued by the owner.\n     * @param _to address The address which you want to transfer to.\n     * @param _value uint256 The amount of tokens to be transferred.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function transferPreSigned(\n        bytes _signature,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_to != address(0));\n        require(!nonces[_signature]);\n\n        bytes32 hashedTx = transferPreSignedHashing(address(this), _to, _value, _fee, _nonce);\n\n        address from = recover(hashedTx, _signature);\n        require(from != address(0));\n\n        nonces[_signature] = true;\n\n        balances[from] = balances[from].sub(_value).sub(_fee);\n        balances[_to] = balances[_to].add(_value);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n\n        emit Transfer(from, _to, _value);\n        emit Transfer(from, msg.sender, _fee);\n        emit TransferPreSigned(from, _to, msg.sender, _value, _fee);\n        return true;\n    }\n\n    /**\n     * @notice Submit a presigned approval\n     * @param _signature bytes The signature, issued by the owner.\n     * @param _spender address The address which will spend the funds.\n     * @param _value uint256 The amount of tokens to allow.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function approvePreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_spender != address(0));\n        require(!nonces[_signature]);\n\n        bytes32 hashedTx = approvePreSignedHashing(address(this), _spender, _value, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0));\n\n        nonces[_signature] = true;\n\n        allowed[from][_spender] = _value;\n        balances[from] = balances[from].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n\n        emit Approval(from, _spender, _value);\n        emit Transfer(from, msg.sender, _fee);\n        emit ApprovalPreSigned(from, _spender, msg.sender, _value, _fee);\n        return true;\n    }\n\n    /**\n     * @notice Increase the amount of tokens that an owner allowed to a spender.\n     * @param _signature bytes The signature, issued by the owner.\n     * @param _spender address The address which will spend the funds.\n     * @param _addedValue uint256 The amount of tokens to increase the allowance by.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function increaseApprovalPreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _addedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_spender != address(0));\n        require(!nonces[_signature]);\n\n        bytes32 hashedTx = increaseApprovalPreSignedHashing(address(this), _spender, _addedValue, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0));\n\n        nonces[_signature] = true;\n\n        allowed[from][_spender] = allowed[from][_spender].add(_addedValue);\n        balances[from] = balances[from].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n\n        emit Approval(from, _spender, allowed[from][_spender]);\n        emit Transfer(from, msg.sender, _fee);\n        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\n        return true;\n    }\n\n    /**\n     * @notice Decrease the amount of tokens that an owner allowed to a spender.\n     * @param _signature bytes The signature, issued by the owner\n     * @param _spender address The address which will spend the funds.\n     * @param _subtractedValue uint256 The amount of tokens to decrease the allowance by.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function decreaseApprovalPreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _subtractedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_spender != address(0));\n        require(!nonces[_signature]);\n\n        bytes32 hashedTx = decreaseApprovalPreSignedHashing(address(this), _spender, _subtractedValue, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0));\n\n        nonces[_signature] = true;\n\n        uint oldValue = allowed[from][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[from][_spender] = 0;\n        } else {\n            allowed[from][_spender] = oldValue.sub(_subtractedValue);\n        }\n        balances[from] = balances[from].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n\n        emit Approval(from, _spender, _subtractedValue);\n        emit Transfer(from, msg.sender, _fee);\n        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\n        return true;\n    }\n\n    /**\n     * @notice Transfer tokens from one address to another\n     * @param _signature bytes The signature, issued by the spender.\n     * @param _from address The address which you want to send tokens from.\n     * @param _to address The address which you want to transfer to.\n     * @param _value uint256 The amount of tokens to be transferred.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the spender.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function transferFromPreSigned(\n        bytes _signature,\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_to != address(0));\n        require(!nonces[_signature]);\n\n        bytes32 hashedTx = transferFromPreSignedHashing(address(this), _from, _to, _value, _fee, _nonce);\n\n        address spender = recover(hashedTx, _signature);\n        require(spender != address(0));\n\n        nonces[_signature] = true;\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][spender] = allowed[_from][spender].sub(_value);\n\n        balances[spender] = balances[spender].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        nonces[_signature] = true;\n\n        emit Transfer(_from, _to, _value);\n        emit Transfer(spender, msg.sender, _fee);\n        return true;\n    }\n\n    /**\n     * Revote previously approved signature\n     * @param  _signature bytes The signature to revoke\n     * @return bool  Returns true if revocation was successful\n     */\n    function revokeSignature(bytes _signature) public returns (bool) {\n        require(!nonces[_signature]);\n        nonces[_signature] = true;\n\n        emit SignatureRevoked(_signature, msg.sender);\n        return true;\n    }\n\n\n    /**\n     * @notice Hash (keccak256) of the payload used by transferPreSigned\n     * @param _token address The address of the token.\n     * @param _to address The address which you want to transfer to.\n     * @param _value uint256 The amount of tokens to be transferred.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function transferPreSignedHashing(\n        address _token,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        pure\n        returns (bytes32)\n    {\n        /* \"48664c16\": transferPreSignedHashing(address,address,address,uint256,uint256,uint256) */\n        return keccak256(bytes4(0x48664c16), _token, _to, _value, _fee, _nonce);\n    }\n\n    /**\n     * @notice Hash (keccak256) of the payload used by approvePreSigned\n     * @param _token address The address of the token\n     * @param _spender address The address which will spend the funds.\n     * @param _value uint256 The amount of tokens to allow.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function approvePreSignedHashing(\n        address _token,\n        address _spender,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        pure\n        returns (bytes32)\n    {\n        /* \"f7ac9c2e\": approvePreSignedHashing(address,address,uint256,uint256,uint256) */\n        return keccak256(bytes4(0xf7ac9c2e), _token, _spender, _value, _fee, _nonce);\n    }\n\n    /**\n     * @notice Hash (keccak256) of the payload used by increaseApprovalPreSigned\n     * @param _token address The address of the token\n     * @param _spender address The address which will spend the funds.\n     * @param _addedValue uint256 The amount of tokens to increase the allowance by.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function increaseApprovalPreSignedHashing(\n        address _token,\n        address _spender,\n        uint256 _addedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        pure\n        returns (bytes32)\n    {\n        /* \"a45f71ff\": increaseApprovalPreSignedHashing(address,address,uint256,uint256,uint256) */\n        return keccak256(bytes4(0xa45f71ff), _token, _spender, _addedValue, _fee, _nonce);\n    }\n\n     /**\n      * @notice Hash (keccak256) of the payload used by decreaseApprovalPreSigned\n      * @param _token address The address of the token\n      * @param _spender address The address which will spend the funds.\n      * @param _subtractedValue uint256 The amount of tokens to decrease the allowance by.\n      * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n      * @param _nonce uint256 Presigned transaction number.\n      */\n    function decreaseApprovalPreSignedHashing(\n        address _token,\n        address _spender,\n        uint256 _subtractedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        pure\n        returns (bytes32)\n    {\n        /* \"59388d78\": decreaseApprovalPreSignedHashing(address,address,uint256,uint256,uint256) */\n        return keccak256(bytes4(0x59388d78), _token, _spender, _subtractedValue, _fee, _nonce);\n    }\n\n    /**\n     * @notice Hash (keccak256) of the payload used by transferFromPreSigned\n     * @param _token address The address of the token\n     * @param _from address The address which you want to send tokens from.\n     * @param _to address The address which you want to transfer to.\n     * @param _value uint256 The amount of tokens to be transferred.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the spender.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function transferFromPreSignedHashing(\n        address _token,\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        pure\n        returns (bytes32)\n    {\n        /* \"b7656dc5\": transferFromPreSignedHashing(address,address,address,uint256,uint256,uint256) */\n        return keccak256(bytes4(0xb7656dc5), _token, _from, _to, _value, _fee, _nonce);\n    }\n\n    /**\n     * @notice Recover signer address from a message by using his signature\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n     * @param sig bytes signature, the signature is generated using web3.eth.sign()\n     */\n    function recover(bytes32 hash, bytes sig) public pure returns (address) {\n      bytes32 r;\n      bytes32 s;\n      uint8 v;\n\n      //Check the signature length\n      if (sig.length != 65) {\n        return (address(0));\n      }\n\n      // Divide the signature in r, s and v variables\n      assembly {\n        r := mload(add(sig, 32))\n        s := mload(add(sig, 64))\n        v := byte(0, mload(add(sig, 96)))\n      }\n\n      // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n      if (v < 27) {\n        v += 27;\n      }\n\n      // If the version is correct return the signer address\n      if (v != 27 && v != 28) {\n        return (address(0));\n      } else {\n        return ecrecover(hash, v, r, s);\n      }\n    }\n\n}\n\ncontract Pausable is Ownable {\n    event Paused();\n    event Unpaused();\n\n    bool public paused = false;\n\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Paused();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpaused();\n    }\n}\n\ncontract Crowdsale {\n  using SafeMath for uint256;\n\n  // The token being sold\n  ERC20 public token;\n\n  // Address where funds are collected\n  address public wallet;\n\n  // How many token units a buyer gets per wei\n  uint256 public rate;\n\n  // Amount of wei raised\n  uint256 public weiRaised;\n\n  // Amount of token sold in wei\n  uint256 public tokenWeiSold;\n\n  /**\n   * Event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n  /**\n   * @param _rate Number of token units a buyer gets per wei\n   * @param _wallet Address where collected funds will be forwarded to\n   * @param _token Address of the token being sold\n   */\n  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n    require(_rate > 0);\n    require(_wallet != address(0));\n    require(_token != address(0));\n\n    rate = _rate;\n    wallet = _wallet;\n    token = _token;\n  }\n\n  // -----------------------------------------\n  // Crowdsale external interface\n  // -----------------------------------------\n\n  /**\n   * @dev fallback function ***DO NOT OVERRIDE***\n   */\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * @dev low level token purchase ***DO NOT OVERRIDE***\n   * @param _beneficiary Address performing the token purchase\n   */\n  function buyTokens(address _beneficiary) public payable {\n\n    uint256 weiAmount = msg.value;\n    _preValidatePurchase(_beneficiary, weiAmount);\n\n    // calculate token amount to be created\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n    tokenWeiSold = tokenWeiSold.add(tokens);\n\n    _processPurchase(_beneficiary, tokens);\n    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n\n    _updatePurchasingState(_beneficiary, weiAmount);\n\n    _forwardFunds();\n    _postValidatePurchase(_beneficiary, weiAmount);\n  }\n\n  // -----------------------------------------\n  // Internal interface (extensible)\n  // -----------------------------------------\n\n  /**\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n    require(_beneficiary != address(0));\n    require(_weiAmount != 0);\n  }\n\n  /**\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) pure internal {\n    // optional override\n  }\n\n  /**\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n   * @param _beneficiary Address performing the token purchase\n   * @param _tokenAmount Number of tokens to be emitted\n   */\n  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n    token.transfer(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n   * @param _beneficiary Address receiving the tokens\n   * @param _tokenAmount Nu mber of tokens to be purchased\n   */\n  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n    _deliverTokens(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n   * @param _beneficiary Address receiving the tokens\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) pure internal {\n    // optional override\n  }\n\n  /**\n   * @dev Override to extend the way in which ether is converted to tokens.\n   * @param _weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n    return _weiAmount.mul(rate);\n  }\n\n  /**\n   * @dev Determines how ETH is stored/forwarded on purchases.\n   */\n  function _forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n}\n\ncontract AllowanceCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  address public tokenWallet;\n\n  /**\n   * @dev Constructor, takes token wallet address.\n   * @param _tokenWallet Address holding the tokens, which has approved allowance to the crowdsale\n   */\n  constructor(address _tokenWallet) public {\n    require(_tokenWallet != address(0));\n    tokenWallet = _tokenWallet;\n  }\n\n  /**\n   * @dev Checks the amount of tokens left in the allowance.\n   * @return Amount of tokens left in the allowance\n   */\n  function remainingTokens() public view returns (uint256) {\n    return token.allowance(tokenWallet, this);\n  }\n\n  /**\n   * @dev Overrides parent behavior by transferring tokens from wallet.\n   * @param _beneficiary Token purchaser\n   * @param _tokenAmount Amount of tokens purchased\n   */\n  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n    token.transferFrom(tokenWallet, _beneficiary, _tokenAmount);\n  }\n}\ncontract CappedCrowdsale is Crowdsale {\n    using SafeMath for uint256;\n\n    uint256 public cap;\n\n    /**\n    * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n    * @param _cap Max amount of wei to be contributed\n    */\n    constructor(uint256 _cap) public {\n        require(_cap > 0);\n        cap = _cap;\n    }\n\n    /**\n    * @dev Checks whether the cap has been reached.\n    * @return Whether the cap was reached\n    */\n    function capReached() public view returns (bool) {\n        return weiRaised >= cap;\n    }\n\n    /**\n    * @dev Extend parent behavior requiring purchase to respect the funding cap.\n    * @param _beneficiary Token purchaser\n    * @param _weiAmount Amount of wei contributed\n    */\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n        super._preValidatePurchase(_beneficiary, _weiAmount);\n        require(weiRaised.add(_weiAmount) <= cap);\n    }\n\n}\ncontract TimedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 public openingTime;\n  uint256 public closingTime;\n\n  /**\n   * @dev Reverts if not in crowdsale time range.\n   */\n  modifier onlyWhileOpen {\n    // solium-disable-next-line security/no-block-members\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n    _;\n  }\n\n  /**\n   * @dev Constructor, takes crowdsale opening and closing times.\n   * @param _openingTime Crowdsale opening time\n   * @param _closingTime Crowdsale closing time\n   */\n  constructor(uint256 _openingTime, uint256 _closingTime) public {\n    // solium-disable-next-line security/no-block-members\n    require(_openingTime >= block.timestamp);\n    require(_closingTime >= _openingTime);\n\n    openingTime = _openingTime;\n    closingTime = _closingTime;\n  }\n\n  /**\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n   * @return Whether crowdsale period has elapsed\n   */\n  function hasClosed() public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp > closingTime;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring to be within contributing period\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n}\ncontract WhitelistedCrowdsale is Crowdsale, Administratable {\n\n  mapping(address => bool) public whitelist;\n\n  /**\n   * Event for logging adding to whitelist\n   * @param _address the address to add to the whitelist\n   */\n  event AddedToWhitelist(address indexed _address);\n\n  /**\n   * Event for logging removing from whitelist\n   * @param _address the address to remove from the whitelist\n   */\n  event RemovedFromWhitelist(address indexed _address);\n\n\n  /**\n   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n   */\n  modifier isWhitelisted(address _beneficiary) {\n    require(whitelist[_beneficiary]);\n    _;\n  }\n\n  /**\n   * @dev Adds single address to whitelist.\n   * @param _beneficiary Address to be added to the whitelist\n   */\n  function addToWhitelist(address _beneficiary) external onlyAdmin {\n    whitelist[_beneficiary] = true;\n    emit AddedToWhitelist(_beneficiary);\n  }\n\n  /**\n   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n   * @param _beneficiaries Addresses to be added to the whitelist\n   */\n  function addManyToWhitelist(address[] _beneficiaries) external onlyAdmin {\n    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n      whitelist[_beneficiaries[i]] = true;\n    }\n  }\n\n  /**\n   * @dev Removes single address from whitelist.\n   * @param _beneficiary Address to be removed to the whitelist\n   */\n  function removeFromWhitelist(address _beneficiary) external onlyAdmin {\n    whitelist[_beneficiary] = false;\n    emit RemovedFromWhitelist(_beneficiary);\n  }\n\n  /**\n   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n   * @param _beneficiary Token beneficiary\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n}\n\ncontract PostDeliveryCrowdsale is TimedCrowdsale, Administratable {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) public balances;\n  /**\n   * Event for logging when token sale tokens are withdrawn\n   * @param _address the address to withdraw tokens for\n   * @param _amount the amount withdrawn for this address\n   */\n  event TokensWithdrawn(address indexed _address, uint256 _amount);\n\n  /**\n   * @dev Withdraw tokens only after crowdsale ends.\n   */\n  function withdrawTokens(address _beneficiary) public onlyAdmin {\n    require(hasClosed());\n    uint256 amount = balances[_beneficiary];\n    require(amount > 0);\n    balances[_beneficiary] = 0;\n    _deliverTokens(_beneficiary, amount);\n    emit TokensWithdrawn(_beneficiary, amount);\n  }\n\n  /**\n   * @dev Overrides parent by storing balances instead of issuing tokens right away.\n   * @param _beneficiary Token purchaser\n   * @param _tokenAmount Amount of tokens purchased\n   */\n  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n    balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);\n  }\n\n  function getBalance(address _beneficiary) public returns (uint256) {\n      return balances[_beneficiary];\n  }\n\n}\n\ncontract MultiRoundCrowdsale is  Crowdsale, Ownable {\n\n    using SafeMath for uint256;\n\n    struct SaleRound {\n        uint256 start;\n        uint256 end;\n        uint256 rate;\n        uint256 roundCap;\n        uint256 minPurchase;\n    }\n\n    SaleRound seedRound;\n    SaleRound presale;\n    SaleRound crowdsaleWeek1;\n    SaleRound crowdsaleWeek2;\n    SaleRound crowdsaleWeek3;\n    SaleRound crowdsaleWeek4;\n\n    bool public saleRoundsSet = false;\n\n    /**\n     * Sets the parameters for each round.\n     *\n     * Each round is defined by an array, with each field mapping to a field in the SaleRound struct.\n     * The array elements are as follows:\n     * array[0]: start time of the round\n     * array[1]: end time of the round\n     * array[2]: the exchange rate of this round. i.e number of TIP per ETH\n     * array[3]: The cumulative cap of this round\n     * array[4]: Minimum purchase of this round\n     *\n     * @param _seedRound [description]\n     * @param _presale [description]\n     * @param _crowdsaleWeek1 [description]\n     * @param _crowdsaleWeek2 [description]\n     * @param _crowdsaleWeek3 [description]\n     * @param _crowdsaleWeek4 [description]\n     */\n    function setTokenSaleRounds(uint256[5] _seedRound, uint256[5] _presale, uint256[5] _crowdsaleWeek1, uint256[5] _crowdsaleWeek2, uint256[5] _crowdsaleWeek3, uint256[5] _crowdsaleWeek4) external onlyOwner returns (bool) {\n        // This function can only be called once\n        require(!saleRoundsSet);\n\n        // Check that each round end time is after the start time\n        require(_seedRound[0] < _seedRound[1]);\n        require(_presale[0] < _presale[1]);\n        require(_crowdsaleWeek1[0] < _crowdsaleWeek1[1]);\n        require(_crowdsaleWeek2[0] < _crowdsaleWeek2[1]);\n        require(_crowdsaleWeek3[0] < _crowdsaleWeek3[1]);\n        require(_crowdsaleWeek4[0] < _crowdsaleWeek4[1]);\n\n        // Check that each round ends before the next begins\n        require(_seedRound[1] < _presale[0]);\n        require(_presale[1] < _crowdsaleWeek1[0]);\n        require(_crowdsaleWeek1[1] < _crowdsaleWeek2[0]);\n        require(_crowdsaleWeek2[1] < _crowdsaleWeek3[0]);\n        require(_crowdsaleWeek3[1] < _crowdsaleWeek4[0]);\n\n        seedRound      = SaleRound(_seedRound[0], _seedRound[1], _seedRound[2], _seedRound[3], _seedRound[4]);\n        presale        = SaleRound(_presale[0], _presale[1], _presale[2], _presale[3], _presale[4]);\n        crowdsaleWeek1 = SaleRound(_crowdsaleWeek1[0], _crowdsaleWeek1[1], _crowdsaleWeek1[2], _crowdsaleWeek1[3], _crowdsaleWeek1[4]);\n        crowdsaleWeek2 = SaleRound(_crowdsaleWeek2[0], _crowdsaleWeek2[1], _crowdsaleWeek2[2], _crowdsaleWeek2[3], _crowdsaleWeek2[4]);\n        crowdsaleWeek3 = SaleRound(_crowdsaleWeek3[0], _crowdsaleWeek3[1], _crowdsaleWeek3[2], _crowdsaleWeek3[3], _crowdsaleWeek3[4]);\n        crowdsaleWeek4 = SaleRound(_crowdsaleWeek4[0], _crowdsaleWeek4[1], _crowdsaleWeek4[2], _crowdsaleWeek4[3], _crowdsaleWeek4[4]);\n\n        saleRoundsSet = true;\n        return saleRoundsSet;\n    }\n\n    function getCurrentRound() internal view returns (SaleRound) {\n        require(saleRoundsSet);\n\n        uint256 currentTime = block.timestamp;\n        if (currentTime > seedRound.start && currentTime <= seedRound.end) {\n            return seedRound;\n        } else if (currentTime > presale.start && currentTime <= presale.end) {\n            return presale;\n        } else if (currentTime > crowdsaleWeek1.start && currentTime <= crowdsaleWeek1.end) {\n            return crowdsaleWeek1;\n        } else if (currentTime > crowdsaleWeek2.start && currentTime <= crowdsaleWeek2.end) {\n            return crowdsaleWeek2;\n        } else if (currentTime > crowdsaleWeek3.start && currentTime <= crowdsaleWeek3.end) {\n            return crowdsaleWeek3;\n        } else if (currentTime > crowdsaleWeek4.start && currentTime <= crowdsaleWeek4.end) {\n            return crowdsaleWeek4;\n        } else {\n            revert();\n        }\n    }\n\n    function getCurrentRate() public view returns (uint256) {\n        require(saleRoundsSet);\n        SaleRound memory currentRound = getCurrentRound();\n        return currentRound.rate;\n    }\n\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n        require(_weiAmount != 0);\n        uint256 currentRate = getCurrentRate();\n        require(currentRate != 0);\n\n        return currentRate.mul(_weiAmount);\n    }\n}\n\ncontract TipToken is ERC865Token, Ownable {\n    using SafeMath for uint256;\n\n    uint256 public constant TOTAL_SUPPLY = 10 ** 9;\n\n    string public constant name = \"Tip Token\";\n    string public constant symbol = \"TIP\";\n    uint8 public constant decimals = 18;\n\n    mapping (address => string) aliases;\n    mapping (string => address) addresses;\n\n    /**\n     * Constructor\n     */\n    constructor() public {\n        _totalSupply = TOTAL_SUPPLY * (10**uint256(decimals));\n        balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, _totalSupply);\n    }\n\n    /**\n     * Returns the available supple (total supply minus tokens held by owner)\n     */\n    function availableSupply() public view returns (uint256) {\n        return _totalSupply.sub(balances[owner]).sub(balances[address(0)]);\n    }\n\n    /**\n     * Token owner can approve for `spender` to transferFrom(...) `tokens`\n     * from the token owner's account. The `spender` contract function\n     * `receiveApproval(...)` is then executed\n     */\n    function approveAndCall(address spender, uint256 tokens, bytes data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n    /**\n     * Don't accept ETH.\n     */\n    function () public payable {\n        revert();\n    }\n\n    /**\n     * Owner can transfer out any accidentally sent ERC20 tokens\n     */\n    function transferAnyERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {\n        return ERC20(tokenAddress).transfer(owner, tokens);\n    }\n\n    /**\n     * Sets the alias for the msg.sender's address.\n     * @param alias the alias to attach to an address\n     */\n    function setAlias(string alias) public {\n        aliases[msg.sender] = alias;\n        addresses[alias] = msg.sender;\n    }\n}\n\ncontract TipTokenCrowdsale is MultiRoundCrowdsale, CappedCrowdsale, WhitelistedCrowdsale, AllowanceCrowdsale, PostDeliveryCrowdsale, Pausable {\n\n    /**\n     * Contract name\n     * String name - the name of the contract\n     */\n    string public constant name = \"Tip Token Crowdsale\";\n\n\n    /**\n     * @param _vault Address where collected funds will be forwarded to\n     * @param _tokenWallet Address holding the tokens, which has approved allowance to the crowdsale\n     * @param _cap the maximum number of tokens to be collected in the sale\n     * @param _token Address of the token being sold\n     */\n    constructor(\n        ERC20 _token,\n        address _tokenWallet,\n        address _vault,\n        uint256 _cap,\n        uint256 _start, uint256 _end, uint256 _baseRate\n        ) public\n        Crowdsale(_baseRate, _vault, _token)\n        CappedCrowdsale(_cap)\n        TimedCrowdsale(_start, _end)\n        PostDeliveryCrowdsale()\n        WhitelistedCrowdsale()\n        AllowanceCrowdsale(_tokenWallet)\n        MultiRoundCrowdsale()\n        {\n    }\n\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal whenNotPaused() {\n        super._preValidatePurchase(_beneficiary, _weiAmount);\n\n        SaleRound memory currentRound = getCurrentRound();\n        require(weiRaised.add(_weiAmount) <= currentRound.roundCap);\n        require(balances[_beneficiary].add(_weiAmount) >= currentRound.minPurchase);\n    }\n\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n        return MultiRoundCrowdsale._getTokenAmount(_weiAmount);\n    }\n\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n        AllowanceCrowdsale._deliverTokens(_beneficiary, _tokenAmount);\n    }\n}",
  "bytecode": "60806040526026805460ff19908116909155602c8054909116905534801561002657600080fd5b5060405160e08061160883398101604090815281516020830151918301516060840151608085015160a086015160c09096015193959293919290918584848484898c6000831161007557600080fd5b600160a060020a038216151561008a57600080fd5b600160a060020a038116151561009f57600080fd5b60029290925560018054600160a060020a03928316600160a060020a03199182161790915560008054929093169116179055428210156100de57600080fd5b818110156100eb57600080fd5b60059190915560065560078054600160a060020a03191633600160a060020a03161790556000811161011c57600080fd5b602755600160a060020a038116151561013457600080fd5b602a8054600160a060020a03909216600160a060020a03199092169190911790555050505050505061149d8061016b6000396000f30060806040526004361061018a5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101955780631515bc2b1461021f5780631785f53c1461024857806327e235e3146102695780632c4e722e1461029c578063355274ea146102b15780633f4ba83a146102c65780634042b66f146102db57806349df728c146102f05780634b6753bc146103115780634f93594514610326578063521eb2731461033b5780635c975abb1461036c5780636afc34741461038157806370480275146103965780638456cb59146103b75780638ab1d681146103cc5780638c10671c146103ed5780638da5cb5b1461040d5780639b19251a14610422578063b7a8807c14610443578063bf58390314610458578063bff99c6c1461046d578063d94929fe14610482578063e43252d7146104a7578063ec8ac4d8146104c8578063f0ec03ae146104dc578063f2fde38b146104f1578063f7fb07b014610512578063f8b2cb4f14610527578063fc0c546a14610548575b6101933361055d565b005b3480156101a157600080fd5b506101aa610620565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101e45781810151838201526020016101cc565b50505050905090810190601f1680156102115780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022b57600080fd5b50610234610657565b604080519115158252519081900360200190f35b34801561025457600080fd5b50610193600160a060020a036004351661065f565b34801561027557600080fd5b5061028a600160a060020a03600435166106d8565b60408051918252519081900360200190f35b3480156102a857600080fd5b5061028a6106ea565b3480156102bd57600080fd5b5061028a6106f0565b3480156102d257600080fd5b506101936106f6565b3480156102e757600080fd5b5061028a610757565b3480156102fc57600080fd5b50610193600160a060020a036004351661075d565b34801561031d57600080fd5b5061028a610823565b34801561033257600080fd5b50610234610829565b34801561034757600080fd5b50610350610834565b60408051600160a060020a039092168252519081900360200190f35b34801561037857600080fd5b50610234610843565b34801561038d57600080fd5b5061023461084c565b3480156103a257600080fd5b50610193600160a060020a0360043516610855565b3480156103c357600080fd5b506101936108d1565b3480156103d857600080fd5b50610193600160a060020a0360043516610934565b3480156103f957600080fd5b5061019360048035602481019101356109a4565b34801561041957600080fd5b50610350610a22565b34801561042e57600080fd5b50610234600160a060020a0360043516610a31565b34801561044f57600080fd5b5061028a610a46565b34801561046457600080fd5b5061028a610a4c565b34801561047957600080fd5b50610350610af0565b34801561048e57600080fd5b50610234600460a46101446101e4610284610324610aff565b3480156104b357600080fd5b50610193600160a060020a0360043516610dce565b610193600160a060020a036004351661055d565b3480156104e857600080fd5b5061028a610e41565b3480156104fd57600080fd5b50610193600160a060020a0360043516610e47565b34801561051e57600080fd5b5061028a610ee0565b34801561053357600080fd5b5061028a600160a060020a0360043516610f11565b34801561055457600080fd5b50610350610f2c565b34600061056a8383610f3b565b61057382610fc5565b600354909150610589908363ffffffff610fd616565b60035560045461059f908263ffffffff610fd616565b6004556105ac8382610ff0565b82600160a060020a031633600160a060020a03167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188484604051808381526020018281526020019250505060405180910390a36106098383611039565b61061161103d565b61061b8383611039565b505050565b60408051808201909152601381527f54697020546f6b656e2043726f776473616c6500000000000000000000000000602082015281565b600654421190565b60075433600160a060020a0390811691161461067a57600080fd5b600160a060020a038116151561068f57600080fd5b600160a060020a038116600081815260286020526040808220805460ff19169055517fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f9190a250565b602b6020526000908152604090205481565b60025481565b60275481565b60075433600160a060020a0390811691161461071157600080fd5b602c5460ff16151561072257600080fd5b602c805460ff191690556040517fa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d1693390600090a1565b60035481565b600160a060020a03331660009081526028602052604081205460ff16151561078457600080fd5b61078c610657565b151561079757600080fd5b50600160a060020a0381166000908152602b60205260408120549081116107bd57600080fd5b600160a060020a0382166000908152602b60205260408120556107e08282611079565b604080518281529051600160a060020a038416917f6352c5382c4a4578e712449ca65e83cdb392d045dfcf1cad9615189db2da244b919081900360200190a25050565b60065481565b602754600354101590565b600154600160a060020a031681565b602c5460ff1681565b60265460ff1681565b60075433600160a060020a0390811691161461087057600080fd5b600160a060020a038116151561088557600080fd5b600160a060020a038116600081815260286020526040808220805460ff19166001179055517f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e3399190a250565b60075433600160a060020a039081169116146108ec57600080fd5b602c5460ff16156108fc57600080fd5b602c805460ff191660011790556040517f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75290600090a1565b600160a060020a03331660009081526028602052604090205460ff16151561095b57600080fd5b600160a060020a038116600081815260296020526040808220805460ff19169055517fcdd2e9b91a56913d370075169cefa1602ba36be5301664f752192bb1709df7579190a250565b600160a060020a03331660009081526028602052604081205460ff1615156109cb57600080fd5b5060005b8181101561061b576001602960008585858181106109e957fe5b60209081029290920135600160a060020a0316835250810191909152604001600020805460ff19169115159190911790556001016109cf565b600754600160a060020a031681565b60296020526000908152604090205460ff1681565b60055481565b60008054602a54604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015230831660248201529051919092169163dd62ed3e91604480830192602092919082900301818787803b158015610abf57600080fd5b505af1158015610ad3573d6000803e3d6000fd5b505050506040513d6020811015610ae957600080fd5b5051905090565b602a54600160a060020a031681565b60075460009033600160a060020a03908116911614610b1d57600080fd5b60265460ff1615610b2d57600080fd5b6020870135873510610b3e57600080fd5b6020860135863510610b4f57600080fd5b6020850135853510610b6057600080fd5b6020840135843510610b7157600080fd5b6020830135833510610b8257600080fd5b6020820135823510610b9357600080fd5b8535602088013510610ba457600080fd5b8435602087013510610bb557600080fd5b8335602086013510610bc657600080fd5b8235602085013510610bd757600080fd5b8135602084013510610be857600080fd5b506040805160a0808201835288358083526020808b01358185018190528b8601358587018190526060808e013581880181905260809e8f0135978f01889052600895909555600992909255600a55600b92909255600c939093558351808301855289358082528a8501358286018190528b8701358388018190528c8501358486018190529c8e0135938e01849052600d92909255600e55600f5560109990995560119890985582518082018452873580825288840135828501819052898601358387018190528a8c0135848d018190529a8d0135938d018490526012929092556013556014556015979097556016969096558151808701835285358082528683013582840181905287850135838601819052888b0135848c01819052988c0135938c01849052601792909255601855601955601a95909555601b949094558051808601825283358082528486013582870181905285840135838501819052868a0135848b01819052968b0135938b01849052601c92909255601d55601e55601f9390935591835581519384018252803580855281840135938501849052818301359285018390528186013595850186905290860135939095018390526021949094556022556023929092556024556025556026805460ff19166001179081905560ff1690565b600160a060020a03331660009081526028602052604090205460ff161515610df557600080fd5b600160a060020a038116600081815260296020526040808220805460ff19166001179055517fa850ae9193f515cbae8d35e8925bd2be26627fc91bce650b8652ed254e9cab039190a250565b60045481565b60075433600160a060020a03908116911614610e6257600080fd5b600160a060020a0381161515610e7757600080fd5b600754604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000610eea611441565b60265460ff161515610efb57600080fd5b610f03611083565b9050806040015191505b5090565b600160a060020a03166000908152602b602052604090205490565b600054600160a060020a031681565b610f43611441565b602c5460ff1615610f5357600080fd5b610f5d838361128a565b610f65611083565b90508060600151610f8183600354610fd690919063ffffffff16565b1115610f8c57600080fd5b6080810151600160a060020a0384166000908152602b6020526040902054610fba908463ffffffff610fd616565b101561061b57600080fd5b6000610fd0826112bd565b92915050565b600082820183811015610fe557fe5b8091505b5092915050565b600160a060020a0382166000908152602b6020526040902054611019908263ffffffff610fd616565b600160a060020a039092166000908152602b602052604090209190915550565b5050565b600154604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015611076573d6000803e3d6000fd5b50565b61103982826112f9565b61108b611441565b60265460009060ff16151561109f57600080fd5b506008544290811180156110b557506009548111155b156110f2576040805160a08101825260085481526009546020820152600a5491810191909152600b546060820152600c5460808201529150610f0d565b600d54811180156111055750600e548111155b15611142576040805160a081018252600d548152600e546020820152600f5491810191909152601054606082015260115460808201529150610f0d565b6012548111801561115557506013548111155b15611192576040805160a0810182526012548152601354602082015260145491810191909152601554606082015260165460808201529150610f0d565b601754811180156111a557506018548111155b156111e2576040805160a0810182526017548152601854602082015260195491810191909152601a546060820152601b5460808201529150610f0d565b601c54811180156111f55750601d548111155b15611235576040805160a081018252601c548152601d54602080830191909152601e5492820192909252601f546060820152905460808201529150610f0d565b6021548111801561124857506022548111155b15611285576040805160a0810182526021548152602254602082015260235491810191909152602454606082015260255460808201529150610f0d565b600080fd5b600160a060020a038216600090815260296020526040902054829060ff1615156112b357600080fd5b61061b83836113a6565b6000808215156112cc57600080fd5b6112d4610ee0565b90508015156112e257600080fd5b6112f2818463ffffffff6113d116565b9392505050565b60008054602a54604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152868316602482015260448101869052905191909216926323b872dd92606480820193602093909283900390910190829087803b15801561137657600080fd5b505af115801561138a573d6000803e3d6000fd5b505050506040513d60208110156113a057600080fd5b50505050565b6113b082826113fc565b6027546003546113c6908363ffffffff610fd616565b111561103957600080fd5b6000808315156113e45760009150610fe9565b508282028284828115156113f457fe5b0414610fe557fe5b600554421015801561141057506006544211155b151561141b57600080fd5b6110398282600160a060020a038216151561143557600080fd5b80151561103957600080fd5b60a060405190810160405280600081526020016000815260200160008152602001600081526020016000815250905600a165627a7a72305820e3d5ba02fa4235007a35c174e65b23085531095d9ef17915f8f308e9336fd897002900000000000000000000000059ae863232238a8bd7953bdfc1b4796f8e9a5b4e0000000000000000000000002b73e72c0f00067e1a69c1ff90e6fb391ff3ac620000000000000000000000009e0660bafe5f8c731e0b306528b321bf8aa4d7d20000000000000000000000000000000000000000000009d60f3e615a3e880000000000000000000000000000000000000000000000000000000000005b118298000000000000000000000000000000000000000000000000000000005b77617f0000000000000000000000000000000000000000000000000000000000002710",
  "constructorArguments": "00000000000000000000000059ae863232238a8bd7953bdfc1b4796f8e9a5b4e0000000000000000000000002b73e72c0f00067e1a69c1ff90e6fb391ff3ac620000000000000000000000009e0660bafe5f8c731e0b306528b321bf8aa4d7d20000000000000000000000000000000000000000000009d60f3e615a3e880000000000000000000000000000000000000000000000000000000000005b118298000000000000000000000000000000000000000000000000000000005b77617f0000000000000000000000000000000000000000000000000000000000002710"
}