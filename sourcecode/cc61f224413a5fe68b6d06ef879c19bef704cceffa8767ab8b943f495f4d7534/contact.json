{
  "address": "0x7a82f2a3f81499408268358e5f6412a0fdd8742e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FabgCoinMarketPack",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-13\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address previousOwner);\n  event OwnershipTransferred(\n    address previousOwner,\n    address newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address from,\n    address to,\n    uint256 value\n  );\n\n  event Approval(\n    address owner,\n    address spender,\n    uint256 value\n  );\n}\n\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n  bool public isPaused;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(isPaused == false, \"transactions on pause\");\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n    require(isPaused == false, \"transactions on pause\");\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n    require(isPaused == false, \"transactions on pause\");\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n    require(isPaused == false, \"transactions on pause\");\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    require(isPaused == false, \"transactions on pause\");\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\ncontract FabgCoin is ERC20, Ownable {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    //tokens per one eth\n    uint256 public rate;\n    uint256 public minimalPayment;\n\n    bool public isBuyBlocked;\n    address saleAgent;\n    uint256 public totalEarnings;\n\n    event TokensCreatedWithoutPayment(address Receiver, uint256 Amount);\n    event BoughtTokens(address Receiver, uint256 Amount, uint256 sentWei);\n    event BuyPaused();\n    event BuyUnpaused();\n    event UsagePaused();\n    event UsageUnpaused();\n    event Payment(address payer, uint256 weiAmount);\n\n    modifier onlySaleAgent() {\n        require(msg.sender == saleAgent);\n        _;\n    }\n\n    function changeRate(uint256 _rate) public onlyOwner {\n        rate = _rate;\n    }\n\n    function pauseCustomBuying() public onlyOwner {\n        require(isBuyBlocked == false);\n        isBuyBlocked = true;\n        emit BuyPaused();\n    }\n\n    function resumeCustomBuy() public onlyOwner {\n        require(isBuyBlocked == true);\n        isBuyBlocked = false;\n        emit BuyUnpaused();\n    }\n\n    function pauseUsage() public onlyOwner {\n        require(isPaused == false);\n        isPaused = true;\n        emit UsagePaused();\n    }\n\n    function resumeUsage() public onlyOwner {\n        require(isPaused == true);\n        isPaused = false;\n        emit UsageUnpaused();\n    }\n\n    function setSaleAgent(address _saleAgent) public onlyOwner {\n        require(saleAgent == address(0));\n        saleAgent = _saleAgent;\n    }\n\n    function createTokenWithoutPayment(address _receiver, uint256 _amount) public onlyOwner {\n        _mint(_receiver, _amount);\n\n        emit TokensCreatedWithoutPayment(_receiver, _amount);\n    }\n\n    function createTokenViaSaleAgent(address _receiver, uint256 _amount) public onlySaleAgent {\n        _mint(_receiver, _amount);\n    }\n\n    function buyTokens() public payable {\n        require(msg.value >= minimalPayment);\n        require(isBuyBlocked == false);\n\n        uint256 amount = msg.value.mul(rate); \n        _mint(msg.sender, amount);\n\n        totalEarnings = totalEarnings.add(amount.div(rate));\n\n        emit BoughtTokens(msg.sender, amount, msg.value);\n    }\n}\n\ncontract FabgCoinMarketPack is FabgCoin {\n    using SafeMath for uint256;\n\n    bool isPausedForSale;\n\n    /**\n     * maping for store amount of tokens to amount of wei per that pack\n     */\n    mapping(uint256 => uint256) packsToWei;\n    uint256[] packs;\n    uint256 public totalEarningsForPackSale;\n    address adminsWallet;\n\n    event MarketPaused();\n    event MarketUnpaused();\n    event PackCreated(uint256 TokensAmount, uint256 WeiAmount);\n    event PackDeleted(uint256 TokensAmount);\n    event PackBought(address Buyer, uint256 TokensAmount, uint256 WeiAmount);\n    event Withdrawal(address receiver, uint256 weiAmount);\n\n    constructor() public {  \n        name = \"FabgCoin\";\n        symbol = \"FABG\";\n        decimals = 18;\n        rate = 100;\n        minimalPayment = 1 ether / 100;\n        isBuyBlocked = true;\n    }\n\n    /**\n     * @dev set address for wallet for withdrawal\n     * @param _newMultisig new address for withdrawals\n     */\n    function setAddressForPayment(address _newMultisig) public onlyOwner {\n        adminsWallet = _newMultisig;\n    }\n\n    /**\n     * @dev fallback function which can receive ether with no actions\n     */\n    function() public payable {\n       emit Payment(msg.sender, msg.value);\n    }\n\n    /**\n     * @dev pause possibility of buying pack of tokens\n     */\n    function pausePackSelling() public onlyOwner {\n        require(isPausedForSale == false);\n        isPausedForSale = true;\n        emit MarketPaused();\n    }\n\n    /**\n     * @dev return possibility of buying pack of tokens\n     */\n    function unpausePackSelling() public onlyOwner {\n        require(isPausedForSale == true);\n        isPausedForSale = false;\n        emit MarketUnpaused();\n    }    \n\n    /**\n     * @dev add pack to list of possible to buy\n     * @param _amountOfTokens amount of tokens in pack\n     * @param _amountOfWei amount of wei for buying 1 pack\n     */\n    function addPack(uint256 _amountOfTokens, uint256 _amountOfWei) public onlyOwner {\n        require(packsToWei[_amountOfTokens] == 0);\n        require(_amountOfTokens != 0);\n        require(_amountOfWei != 0);\n        \n        packs.push(_amountOfTokens);\n        packsToWei[_amountOfTokens] = _amountOfWei;\n\n        emit PackCreated(_amountOfTokens, _amountOfWei);\n    }\n\n    /**\n     * @dev buying existing pack of tokens\n     * @param _amountOfTokens amount of tokens in pack for buying\n     */\n    function buyPack(uint256 _amountOfTokens) public payable {\n        require(packsToWei[_amountOfTokens] > 0);\n        require(msg.value >= packsToWei[_amountOfTokens]);\n        require(isPausedForSale == false);\n\n        _mint(msg.sender, _amountOfTokens * 1 ether);\n        (msg.sender).transfer(msg.value.sub(packsToWei[_amountOfTokens]));\n\n        totalEarnings = totalEarnings.add(packsToWei[_amountOfTokens]);\n        totalEarningsForPackSale = totalEarningsForPackSale.add(packsToWei[_amountOfTokens]);\n\n        emit PackBought(msg.sender, _amountOfTokens, packsToWei[_amountOfTokens]);\n    }\n\n    /**\n     * @dev withdraw all ether from this contract to sender's wallet\n     */\n    function withdraw() public onlyOwner {\n        require(adminsWallet != address(0), \"admins wallet couldn't be 0x0\");\n\n        uint256 amount = address(this).balance;  \n        (adminsWallet).transfer(amount);\n        emit Withdrawal(adminsWallet, amount);\n    }\n\n    /**\n     * @dev delete pack from selling\n     * @param _amountOfTokens which pack delete\n     */\n    function deletePack(uint256 _amountOfTokens) public onlyOwner {\n        require(packsToWei[_amountOfTokens] != 0);\n        require(_amountOfTokens != 0);\n\n        packsToWei[_amountOfTokens] = 0;\n\n        uint256 index;\n\n        for(uint256 i = 0; i < packs.length; i++) {\n            if(packs[i] == _amountOfTokens) {\n                index = i;\n                break;\n            }\n        }\n\n        for(i = index; i < packs.length - 1; i++) {\n            packs[i] = packs[i + 1];\n        }\n        packs.length--;\n\n        emit PackDeleted(_amountOfTokens);\n    }\n\n    /**\n     * @dev get list of all available packs\n     * @return uint256 array of packs\n     */\n    function getAllPacks() public view returns (uint256[]) {\n        return packs;\n    }\n\n    /**\n     * @dev get price of current pack in wei\n     * @param _amountOfTokens current pack for price\n     * @return uint256 amount of wei for buying\n     */\n    function getPackPrice(uint256 _amountOfTokens) public view returns (uint256) {\n        return packsToWei[_amountOfTokens];\n    }\n}",
  "bytecode": ""
}