{
  "address": "0x785c3570623f3d61225659744a5eb2ea83bc1e9d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ShintakuToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-26\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/libs/ERC223Receiver_Interface.sol\n\n/**\n * @title ERC223-compliant contract interface.\n */\ncontract ERC223Receiver {\n    constructor() internal {}\n\n    /**\n     * @dev Standard ERC223 function that will handle incoming token transfers.\n     *\n     * @param _from Token sender address.\n     * @param _value Amount of tokens.\n     * @param _data Transaction metadata.\n     */\n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/libs/ERC223Token.sol\n\n/**\n * @title Implementation of the ERC223 standard token.\n * @dev See https://github.com/Dexaran/ERC223-token-standard\n */\ncontract ERC223Token is StandardToken {\n    using SafeMath for uint;\n\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n\n    modifier enoughBalance(uint _value) {\n        require (_value <= balanceOf(msg.sender));\n        _;\n    }\n\n     /**\n     * @dev Transfer the specified amount of tokens to the specified address.\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\n     *      The token transfer fails if the recipient is a contract\n     *      but does not implement the `tokenFallback` function\n     *      or the fallback function to receive funds.\n     *\n     * @param _to Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     * @param _data Transaction metadata.\n     * @return Success.\n     */\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n        require(_to != address(0));\n\n        return isContract(_to) ?\n            transferToContract(_to, _value, _data) :\n            transferToAddress(_to, _value, _data)\n        ;\n    }\n\n    /**\n     * @dev Transfer the specified amount of tokens to the specified address.\n     *      This function works the same with the previous one\n     *      but doesn't contain `_data` param.\n     *      Added due to backwards compatibility reasons.\n     *\n     * @param _to Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     * @return Success.\n     */\n    function transfer(address _to, uint _value) public returns (bool success) {\n        bytes memory empty;\n\n        return transfer(_to, _value, empty);\n    }\n\n    /**\n     * @dev Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n     * @return If the target is a contract.\n     */\n    function isContract(address _addr) private view returns (bool is_contract) {\n        uint length;\n\n        assembly {\n            // Retrieve the size of the code on target address; this needs assembly\n            length := extcodesize(_addr)\n        }\n\n        return (length > 0);\n    }\n    \n    /**\n     * @dev Helper function that transfers to address.\n     * @return Success.\n     */\n    function transferToAddress(address _to, uint _value, bytes _data) private enoughBalance(_value) returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balanceOf(_to).add(_value);\n\n        emit Transfer(msg.sender, _to, _value, _data);\n\n        return true;\n    }\n\n    /**\n     * @dev Helper function that transfers to contract.\n     * @return Success.\n     */\n    function transferToContract(address _to, uint _value, bytes _data) private enoughBalance(_value) returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balanceOf(_to).add(_value);\n\n        ERC223Receiver receiver = ERC223Receiver(_to);\n        receiver.tokenFallback(msg.sender, _value, _data);\n\n        emit Transfer(msg.sender, _to, _value, _data);\n\n        return true;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardBurnableToken.sol\n\n/**\n * @title Standard Burnable Token\n * @dev Adds burnFrom method to ERC20 implementations\n */\ncontract StandardBurnableToken is BurnableToken, StandardToken {\n\n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param _from address The address which you want to send tokens from\n   * @param _value uint256 The amount of token to be burned\n   */\n  function burnFrom(address _from, uint256 _value) public {\n    require(_value <= allowed[_from][msg.sender]);\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    _burn(_from, _value);\n  }\n}\n\n// File: contracts/libs/BaseToken.sol\n\n/**\n * @title Base token contract for oracle.\n */\ncontract BaseToken is ERC223Token, StandardBurnableToken {\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts/ShintakuToken.sol\n\n/**\n * @title Shintaku token contract\n * @dev Burnable ERC223 token with set emission curve.\n */\ncontract ShintakuToken is BaseToken, Ownable {\n    using SafeMath for uint;\n\n    string public constant symbol = \"SHN\";\n    string public constant name = \"Shintaku\";\n    uint8 public constant demicals = 18;\n\n    // Unit of tokens\n    uint public constant TOKEN_UNIT = (10 ** uint(demicals));\n\n    // Parameters\n\n    // Number of blocks for each period (100000 = ~2-3 weeks)\n    uint public PERIOD_BLOCKS;\n    // Number of blocks to lock owner balance (50x = ~2 years)\n    uint public OWNER_LOCK_BLOCKS;\n    // Number of blocks to lock user remaining balances (25x = ~1 year)\n    uint public USER_LOCK_BLOCKS;\n    // Number of tokens per period during tail emission\n    uint public constant TAIL_EMISSION = 400 * (10 ** 3) * TOKEN_UNIT;\n    // Number of tokens to emit initially: tail emission is 4% of this\n    uint public constant INITIAL_EMISSION_FACTOR = 25;\n    // Absolute cap on funds received per period\n    // Note: this should be obscenely large to prevent larger ether holders\n    //  from monopolizing tokens at low cost. This cap should never be hit in\n    //  practice.\n    uint public constant MAX_RECEIVED_PER_PERIOD = 10000 ether;\n\n    /**\n     * @dev Store relevant data for a period.\n     */\n    struct Period {\n        // Block this period has started at\n        uint started;\n\n        // Total funds received this period\n        uint totalReceived;\n        // Locked owner balance, will unlock after a long time\n        uint ownerLockedBalance;\n        // Number of tokens to mint this period\n        uint minting;\n\n        // Sealed purchases for each account\n        mapping (address => bytes32) sealedPurchaseOrders;\n        // Balance received from each account\n        mapping (address => uint) receivedBalances;\n        // Locked balance for each account\n        mapping (address => uint) lockedBalances;\n\n        // When withdrawing, withdraw to an alias address (e.g. cold storage)\n        mapping (address => address) aliases;\n    }\n\n    // Modifiers\n\n    modifier validPeriod(uint _period) {\n        require(_period <= currentPeriodIndex());\n        _;\n    }\n\n    // Contract state\n\n    // List of periods\n    Period[] internal periods;\n\n    // Address the owner can withdraw funds to (e.g. cold storage)\n    address public ownerAlias;\n\n    // Events\n\n    event NextPeriod(uint indexed _period, uint indexed _block);\n    event SealedOrderPlaced(address indexed _from, uint indexed _period, uint _value);\n    event SealedOrderRevealed(address indexed _from, uint indexed _period, address indexed _alias, uint _value);\n    event OpenOrderPlaced(address indexed _from, uint indexed _period, address indexed _alias, uint _value);\n    event Claimed(address indexed _from, uint indexed _period, address indexed _alias, uint _value);\n\n    // Functions\n\n    constructor(address _alias, uint _periodBlocks, uint _ownerLockFactor, uint _userLockFactor) public {\n        require(_alias != address(0));\n        require(_periodBlocks >= 2);\n        require(_ownerLockFactor > 0);\n        require(_userLockFactor > 0);\n\n        periods.push(Period(block.number, 0, 0, calculateMinting(0)));\n        ownerAlias = _alias;\n\n        PERIOD_BLOCKS = _periodBlocks;\n        OWNER_LOCK_BLOCKS = _periodBlocks.mul(_ownerLockFactor);\n        USER_LOCK_BLOCKS = _periodBlocks.mul(_userLockFactor);\n    }\n\n    /**\n     * @dev Go to the next period, if sufficient time has passed.\n     */\n    function nextPeriod() public {\n        uint periodIndex = currentPeriodIndex();\n        uint periodIndexNext = periodIndex.add(1);\n        require(block.number.sub(periods[periodIndex].started) > PERIOD_BLOCKS);\n\n        periods.push(Period(block.number, 0, 0, calculateMinting(periodIndexNext)));\n\n        emit NextPeriod(periodIndexNext, block.number);\n    }\n\n    /**\n     * @dev Creates a sealed purchase order.\n     * @param _from Account that will purchase tokens.\n     * @param _period Period of purchase order.\n     * @param _value Purchase funds, in wei.\n     * @param _salt Random value to keep purchase secret.\n     * @return The sealed purchase order.\n     */\n    function createPurchaseOrder(address _from, uint _period, uint _value, bytes32 _salt) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_from, _period, _value, _salt));\n    }\n\n    /**\n     * @dev Submit a sealed purchase order. Wei sent can be different then sealed value.\n     * @param _sealedPurchaseOrder The sealed purchase order.\n     */\n    function placePurchaseOrder(bytes32 _sealedPurchaseOrder) public payable {\n        if (block.number.sub(periods[currentPeriodIndex()].started) > PERIOD_BLOCKS) {\n            nextPeriod();\n        }\n        // Note: current period index may update from above call\n        Period storage period = periods[currentPeriodIndex()];\n        // Each address can only make a single purchase per period\n        require(period.sealedPurchaseOrders[msg.sender] == bytes32(0));\n\n        period.sealedPurchaseOrders[msg.sender] = _sealedPurchaseOrder;\n        period.receivedBalances[msg.sender] = msg.value;\n\n        emit SealedOrderPlaced(msg.sender, currentPeriodIndex(), msg.value);\n    }\n\n    /**\n     * @dev Reveal a sealed purchase order and commit to a purchase.\n     * @param _sealedPurchaseOrder The sealed purchase order.\n     * @param _period Period of purchase order.\n     * @param _value Purchase funds, in wei.\n     * @param _period Period for which to reveal purchase order.\n     * @param _salt Random value to keep purchase secret.\n     * @param _alias Address to withdraw tokens and excess funds to.\n     */\n    function revealPurchaseOrder(bytes32 _sealedPurchaseOrder, uint _period, uint _value, bytes32 _salt, address _alias) public {\n        // Sanity check to make sure user enters an alias\n        require(_alias != address(0));\n        // Can only reveal sealed orders in the next period\n        require(currentPeriodIndex() == _period.add(1));\n        Period storage period = periods[_period];\n        // Each address can only make a single purchase per period\n        require(period.aliases[msg.sender] == address(0));\n\n        // Note: don't *need* to advance period here\n\n        bytes32 h = createPurchaseOrder(msg.sender, _period, _value, _salt);\n        require(h == _sealedPurchaseOrder);\n\n        // The value revealed must not be greater than the value previously sent\n        require(_value <= period.receivedBalances[msg.sender]);\n\n        period.totalReceived = period.totalReceived.add(_value);\n        uint remainder = period.receivedBalances[msg.sender].sub(_value);\n        period.receivedBalances[msg.sender] = _value;\n        period.aliases[msg.sender] = _alias;\n\n        emit SealedOrderRevealed(msg.sender, _period, _alias, _value);\n\n        // Return any extra balance to the alias\n        _alias.transfer(remainder);\n    }\n\n    /**\n     * @dev Place an unsealed purchase order immediately.\n     * @param _alias Address to withdraw tokens to.\n     */\n    function placeOpenPurchaseOrder(address _alias) public payable {\n        // Sanity check to make sure user enters an alias\n        require(_alias != address(0));\n\n        if (block.number.sub(periods[currentPeriodIndex()].started) > PERIOD_BLOCKS) {\n            nextPeriod();\n        }\n        // Note: current period index may update from above call\n        Period storage period = periods[currentPeriodIndex()];\n        // Each address can only make a single purchase per period\n        require(period.aliases[msg.sender] == address(0));\n\n        period.totalReceived = period.totalReceived.add(msg.value);\n        period.receivedBalances[msg.sender] = msg.value;\n        period.aliases[msg.sender] = _alias;\n\n        emit OpenOrderPlaced(msg.sender, currentPeriodIndex(), _alias, msg.value);\n    }\n\n    /**\n     * @dev Claim previously purchased tokens for an account.\n     * @param _from Account to claim tokens for.\n     * @param _period Period for which to claim tokens.\n     */\n    function claim(address _from, uint _period) public {\n        // Claiming can only be done at least two periods after submitting sealed purchase order\n        require(currentPeriodIndex() > _period.add(1));\n        Period storage period = periods[_period];\n        require(period.receivedBalances[_from] > 0);\n\n        uint value = period.receivedBalances[_from];\n        delete period.receivedBalances[_from];\n\n        (uint emission, uint spent) = calculateEmission(_period, value);\n        uint remainder = value.sub(spent);\n\n        address alias = period.aliases[_from];\n        // Mint tokens based on spent funds\n        mint(alias, emission);\n\n        // Lock up remaining funds for account\n        period.lockedBalances[_from] = period.lockedBalances[_from].add(remainder);\n        // Lock up spent funds for owner\n        period.ownerLockedBalance = period.ownerLockedBalance.add(spent);\n\n        emit Claimed(_from, _period, alias, emission);\n    }\n\n    /*\n     * @dev Users can withdraw locked balances after the lock time has expired, for an account.\n     * @param _from Account to withdraw balance for.\n     * @param _period Period to withdraw funds for.\n     */\n    function withdraw(address _from, uint _period) public {\n        require(currentPeriodIndex() > _period);\n        Period storage period = periods[_period];\n        require(block.number.sub(period.started) > USER_LOCK_BLOCKS);\n\n        uint balance = period.lockedBalances[_from];\n        require(balance <= address(this).balance);\n        delete period.lockedBalances[_from];\n\n        address alias = period.aliases[_from];\n        // Don't delete this, as a user may have unclaimed tokens\n        //delete period.aliases[_from];\n        alias.transfer(balance);\n    }\n\n    /**\n     * @dev Contract owner can withdraw unlocked owner funds.\n     * @param _period Period to withdraw funds for.\n     */\n    function withdrawOwner(uint _period) public onlyOwner {\n        require(currentPeriodIndex() > _period);\n        Period storage period = periods[_period];\n        require(block.number.sub(period.started) > OWNER_LOCK_BLOCKS);\n\n        uint balance = period.ownerLockedBalance;\n        require(balance <= address(this).balance);\n        delete period.ownerLockedBalance;\n\n        ownerAlias.transfer(balance);\n    }\n\n    /**\n     * @dev The owner can withdraw any unrevealed balances after the deadline.\n     * @param _period Period to withdraw funds for.\n     * @param _from Account to withdraw unrevealed funds against.\n     */\n    function withdrawOwnerUnrevealed(uint _period, address _from) public onlyOwner {\n        // Must be past the reveal deadline of one period\n        require(currentPeriodIndex() > _period.add(1));\n        Period storage period = periods[_period];\n        require(block.number.sub(period.started) > OWNER_LOCK_BLOCKS);\n\n        uint balance = period.receivedBalances[_from];\n        require(balance <= address(this).balance);\n        delete period.receivedBalances[_from];\n\n        ownerAlias.transfer(balance);\n    }\n\n    /**\n     * @dev Calculate the number of tokens to mint during a period.\n     * @param _period The period.\n     * @return Number of tokens to mint.\n     */\n    function calculateMinting(uint _period) internal pure returns (uint) {\n        // Every period, decrease emission by 5% of initial, until tail emission\n        return\n            _period < INITIAL_EMISSION_FACTOR ?\n            TAIL_EMISSION.mul(INITIAL_EMISSION_FACTOR.sub(_period)) :\n            TAIL_EMISSION\n        ;\n    }\n\n    /**\n     * @dev Helper function to get current period index.\n     * @return The array index of the current period.\n     */\n    function currentPeriodIndex() public view returns (uint) {\n        assert(periods.length > 0);\n\n        return periods.length.sub(1);\n    }\n\n    /**\n     * @dev Calculate token emission.\n     * @param _period Period for which to calculate emission.\n     * @param _value Amount paid. Emissions is proportional to this.\n     * @return Number of tokens to emit.\n     * @return The spent balance.\n     */\n    function calculateEmission(uint _period, uint _value) internal view returns (uint, uint) {\n        Period storage currentPeriod = periods[_period];\n        uint minting = currentPeriod.minting;\n        uint totalReceived = currentPeriod.totalReceived;\n\n        uint scaledValue = _value;\n        if (totalReceived > MAX_RECEIVED_PER_PERIOD) {\n            // If the funds received this period exceed the maximum, scale\n            // emission to refund remaining\n            scaledValue = _value.mul(MAX_RECEIVED_PER_PERIOD).div(totalReceived);\n        }\n\n        uint emission = scaledValue.mul(minting).div(MAX_RECEIVED_PER_PERIOD);\n        return (emission, scaledValue);\n    }\n\n    /**\n     * @dev Mints new tokens.\n     * @param _account Account that will receive new tokens.\n     * @param _value Number of tokens to mint.\n     */\n    function mint(address _account, uint _value) internal {\n        balances[_account] = balances[_account].add(_value);\n        totalSupply_ = totalSupply_.add(_value);\n    }\n\n    // Getters\n\n    function getPeriodStarted(uint _period) public view validPeriod(_period) returns (uint) {\n        return periods[_period].started;\n    }\n\n    function getPeriodTotalReceived(uint _period) public view validPeriod(_period) returns (uint) {\n        return periods[_period].totalReceived;\n    }\n\n    function getPeriodOwnerLockedBalance(uint _period) public view validPeriod(_period) returns (uint) {\n        return periods[_period].ownerLockedBalance;\n    }\n\n    function getPeriodMinting(uint _period) public view validPeriod(_period) returns (uint) {\n        return periods[_period].minting;\n    }\n\n    function getPeriodSealedPurchaseOrderFor(uint _period, address _account) public view validPeriod(_period) returns (bytes32) {\n        return periods[_period].sealedPurchaseOrders[_account];\n    }\n\n    function getPeriodReceivedBalanceFor(uint _period, address _account) public view validPeriod(_period) returns (uint) {\n        return periods[_period].receivedBalances[_account];\n    }\n\n    function getPeriodLockedBalanceFor(uint _period, address _account) public view validPeriod(_period) returns (uint) {\n        return periods[_period].lockedBalances[_account];\n    }\n\n    function getPeriodAliasFor(uint _period, address _account) public view validPeriod(_period) returns (address) {\n        return periods[_period].aliases[_account];\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b50604051608080620040688339810180604052810190808051906020019092919080519060200190929190805190602001909291908051906020019092919050505033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515620000d157600080fd5b60028310151515620000e257600080fd5b600082111515620000f257600080fd5b6000811115156200010257600080fd5b600760806040519081016040528043815260200160008152602001600081526020016200013f60006200023c640100000000026401000000009004565b815250908060018154018082558091505090600182039060005260206000209060080201600090919290919091506000820151816000015560208201518160010155604082015181600201556060820151816003015550505083600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600481905550620002038284620002b46401000000000262003cd4179091906401000000009004565b6005819055506200022c8184620002b46401000000000262003cd4179091906401000000009004565b600681905550505050506200030a565b6000601982106200025a57601260ff16600a0a62061a8002620002ad565b620002ac62000282836019620002f06401000000000262003316179091906401000000009004565b601260ff16600a0a62061a8002620002b46401000000000262003cd4179091906401000000009004565b5b9050919050565b600080831415620002c95760009050620002ea565b8183029050818382811515620002db57fe5b04141515620002e657fe5b8090505b92915050565b6000828211151515620002ff57fe5b818303905092915050565b613d4e806200031a6000396000f30060806040526004361061020f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610214578063095ea7b3146102a4578063097dfa2f1461030957806318160ddd1461032d57806323b872dd1461035857806324ed1486146103dd578063250e816b1461046a57806332db8e2b146104d357806336a0f511146104fe57806340dda9af1461053f57806341ecd1cd1461056a57806342966c68146105b757806361543801146105e457806361ed20941461060f57806366188463146106405780636ef98b21146106a557806370a08231146106d2578063715018a614610729578063764218871461074057806379cc67901461076b578063818f92c7146107b85780638da5cb5b1461083957806395d89b4114610890578063a2e23a5114610920578063a5c9cd821461094b578063a9059cbb14610976578063aad3ec96146109db578063af2780ee14610a28578063b19a5f6214610a53578063b88d016914610a89578063be45fd6214610ab4578063c9bebd9014610b5f578063cc06f5ea14610bb6578063d57f62ff14610c17578063d73dd62314610c78578063dd62ed3e14610cdd578063e276729d14610d54578063ec607f7d14610d95578063ef9da13d14610dac578063f09dd84414610ded578063f2fde38b14610e60578063f3fef3a314610ea3578063f951f85614610ef0575b600080fd5b34801561022057600080fd5b50610229610f31565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561026957808201518184015260208101905061024e565b50505050905090810190601f1680156102965780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102b057600080fd5b506102ef600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f6a565b604051808215151515815260200191505060405180910390f35b61032b600480360381019080803560001916906020019092919050505061105c565b005b34801561033957600080fd5b50610342611215565b6040518082815260200191505060405180910390f35b34801561036457600080fd5b506103c3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061121f565b604051808215151515815260200191505060405180910390f35b3480156103e957600080fd5b5061042860048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115d9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561047657600080fd5b506104b560048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611679565b60405180826000191660001916815260200191505060405180910390f35b3480156104df57600080fd5b506104e86116f9565b6040518082815260200191505060405180910390f35b34801561050a57600080fd5b5061052960048036038101908080359060200190929190505050611707565b6040518082815260200191505060405180910390f35b34801561054b57600080fd5b50610554611749565b6040518082815260200191505060405180910390f35b34801561057657600080fd5b506105b560048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061174f565b005b3480156105c357600080fd5b506105e260048036038101908080359060200190929190505050611939565b005b3480156105f057600080fd5b506105f9611946565b6040518082815260200191505060405180910390f35b34801561061b57600080fd5b50610624611976565b604051808260ff1660ff16815260200191505060405180910390f35b34801561064c57600080fd5b5061068b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061197b565b604051808215151515815260200191505060405180910390f35b3480156106b157600080fd5b506106d060048036038101908080359060200190929190505050611c0c565b005b3480156106de57600080fd5b50610713600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d68565b6040518082815260200191505060405180910390f35b34801561073557600080fd5b5061073e611db0565b005b34801561074c57600080fd5b50610755611eb5565b6040518082815260200191505060405180910390f35b34801561077757600080fd5b506107b6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611ebb565b005b3480156107c457600080fd5b5061081b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035600019169060200190929190505050612063565b60405180826000191660001916815260200191505060405180910390f35b34801561084557600080fd5b5061084e61214c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561089c57600080fd5b506108a5612172565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108e55780820151818401526020810190506108ca565b50505050905090810190601f1680156109125780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561092c57600080fd5b506109356121ab565b6040518082815260200191505060405180910390f35b34801561095757600080fd5b506109606121bb565b6040518082815260200191505060405180910390f35b34801561098257600080fd5b506109c1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506121c6565b604051808215151515815260200191505060405180910390f35b3480156109e757600080fd5b50610a26600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506121de565b005b348015610a3457600080fd5b50610a3d6124c0565b6040518082815260200191505060405180910390f35b610a87600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124c6565b005b348015610a9557600080fd5b50610a9e612767565b6040518082815260200191505060405180910390f35b348015610ac057600080fd5b50610b45600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061276c565b604051808215151515815260200191505060405180910390f35b348015610b6b57600080fd5b50610b746127db565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610bc257600080fd5b50610c0160048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612801565b6040518082815260200191505060405180910390f35b348015610c2357600080fd5b50610c6260048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612881565b6040518082815260200191505060405180910390f35b348015610c8457600080fd5b50610cc3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612901565b604051808215151515815260200191505060405180910390f35b348015610ce957600080fd5b50610d3e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612afd565b6040518082815260200191505060405180910390f35b348015610d6057600080fd5b50610d7f60048036038101908080359060200190929190505050612b84565b6040518082815260200191505060405180910390f35b348015610da157600080fd5b50610daa612bc6565b005b348015610db857600080fd5b50610dd760048036038101908080359060200190929190505050612ce1565b6040518082815260200191505060405180910390f35b348015610df957600080fd5b50610e5e600480360381019080803560001916906020019092919080359060200190929190803590602001909291908035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612d23565b005b348015610e6c57600080fd5b50610ea1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506130ac565b005b348015610eaf57600080fd5b50610eee600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613114565b005b348015610efc57600080fd5b50610f1b600480360381019080803590602001909291905050506132d4565b6040518082815260200191505060405180910390f35b6040805190810160405280600881526020017f5368696e74616b7500000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600060045461109b600761106e611946565b81548110151561107a57fe5b9060005260206000209060080201600001544361331690919063ffffffff16565b11156110aa576110a9612bc6565b5b60076110b4611946565b8154811015156110c057fe5b906000526020600020906008020190506000600102600019168160040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000191614151561112b57600080fd5b818160040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208160001916905550348160050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111c3611946565b3373ffffffffffffffffffffffffffffffffffffffff167ff4d040b058d753f5263448bc3f8d259bc339d578ed6675c33079da58540eafd8346040518082815260200191505060405180910390a35050565b6000600154905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561125c57600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156112a957600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561133457600080fd5b611385826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461331690919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611418826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461332f90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506114e982600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461331690919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000826115e4611946565b81111515156115f257600080fd5b60078481548110151561160157fe5b906000526020600020906008020160070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505092915050565b600082611684611946565b811115151561169257600080fd5b6007848154811015156116a157fe5b906000526020600020906008020160040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b69021e19e0c9bab240000081565b600081611712611946565b811115151561172057600080fd5b60078381548110151561172f57fe5b906000526020600020906008020160030154915050919050565b60065481565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117ae57600080fd5b6117c260018561332f90919063ffffffff16565b6117ca611946565b1115156117d657600080fd5b6007848154811015156117e557fe5b9060005260206000209060080201915060055461180f83600001544361331690919063ffffffff16565b11151561181b57600080fd5b8160050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490503073ffffffffffffffffffffffffffffffffffffffff1631811115151561188557600080fd5b8160050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611932573d6000803e3d6000fd5b5050505050565b611943338261334b565b50565b60008060078054905011151561195857fe5b611971600160078054905061331690919063ffffffff16565b905090565b601281565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115611a8c576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b20565b611a9f838261331690919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c6b57600080fd5b82611c74611946565b111515611c8057600080fd5b600783815481101515611c8f57fe5b90600052602060002090600802019150600554611cb983600001544361331690919063ffffffff16565b111515611cc557600080fd5b816002015490503073ffffffffffffffffffffffffffffffffffffffff16318111151515611cf257600080fd5b8160020160009055600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611d62573d6000803e3d6000fd5b50505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e0c57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a26000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60055481565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515611f4657600080fd5b611fd581600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461331690919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061205f828261334b565b5050565b600084848484604051602001808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140184815260200183815260200182600019166000191681526020019450505050506040516020818303038152906040526040518082805190602001908083835b60208310151561211557805182526020820191506020810190506020830392506120f0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050949350505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f53484e000000000000000000000000000000000000000000000000000000000081525081565b601260ff16600a0a62061a800281565b601260ff16600a0a81565b600060606121d584848361276c565b91505092915050565b6000806000806000806121fb60018861332f90919063ffffffff16565b612203611946565b11151561220f57600080fd5b60078781548110151561221e57fe5b9060005260206000209060080201955060008660050160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151561227e57600080fd5b8560050160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205494508560050160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905561231187866134fe565b93509350612328838661331690919063ffffffff16565b91508560070160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061239881856135c0565b6123ec828760060160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461332f90919063ffffffff16565b8660060160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061244883876002015461332f90919063ffffffff16565b86600201819055508073ffffffffffffffffffffffffffffffffffffffff16878973ffffffffffffffffffffffffffffffffffffffff167f8dab6d35466ca3cba614bc5b262979b277949786977e81107f375f7e39f7734a876040518082815260200191505060405180910390a45050505050505050565b60045481565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561250357600080fd5b6004546125406007612513611946565b81548110151561251f57fe5b9060005260206000209060080201600001544361331690919063ffffffff16565b111561254f5761254e612bc6565b5b6007612559611946565b81548110151561256557fe5b90600052602060002090600802019050600073ffffffffffffffffffffffffffffffffffffffff168160070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561261157600080fd5b61262834826001015461332f90919063ffffffff16565b8160010181905550348160050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550818160070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff16612715611946565b3373ffffffffffffffffffffffffffffffffffffffff167f9a9519913ec473f96eca9f27210ac9ffb0179fcd5ab1dfb11531f9a308c4cd38346040518082815260200191505060405180910390a45050565b601981565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156127a957600080fd5b6127b284613672565b6127c6576127c1848484613685565b6127d2565b6127d184848461386d565b5b90509392505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008261280c611946565b811115151561281a57600080fd5b60078481548110151561282957fe5b906000526020600020906008020160050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b60008261288c611946565b811115151561289a57600080fd5b6007848154811015156128a957fe5b906000526020600020906008020160060160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b600061299282600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461332f90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600081612b8f611946565b8111151515612b9d57600080fd5b600783815481101515612bac57fe5b906000526020600020906008020160000154915050919050565b600080612bd1611946565b9150612be760018361332f90919063ffffffff16565b9050600454612c1f600784815481101515612bfe57fe5b9060005260206000209060080201600001544361331690919063ffffffff16565b111515612c2b57600080fd5b60076080604051908101604052804381526020016000815260200160008152602001612c5684613b82565b815250908060018154018082558091505090600182039060005260206000209060080201600090919290919091506000820151816000015560208201518160010155604082015181600201556060820151816003015550505043817fd2f3dd4cf8215b17a7fde20fe09c74e324412d2cee3581c8edeb95f022dadb3e60405160405180910390a35050565b600081612cec611946565b8111151515612cfa57600080fd5b600783815481101515612d0957fe5b906000526020600020906008020160020154915050919050565b60008060008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515612d6357600080fd5b612d7760018861332f90919063ffffffff16565b612d7f611946565b141515612d8b57600080fd5b600787815481101515612d9a57fe5b90600052602060002090600802019250600073ffffffffffffffffffffffffffffffffffffffff168360070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612e4657600080fd5b612e5233888888612063565b915087600019168260001916141515612e6a57600080fd5b8260050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548611151515612eba57600080fd5b612ed186846001015461332f90919063ffffffff16565b8360010181905550612f2d868460050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461331690919063ffffffff16565b9050858360050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550838360070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff16873373ffffffffffffffffffffffffffffffffffffffff167f104e13dace574d5c46ef6bc8fd537b8b671e3cca5464a1e841ba6aaf38a94bf1896040518082815260200191505060405180910390a48373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156130a1573d6000803e3d6000fd5b505050505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561310857600080fd5b61311181613bd8565b50565b600080600083613122611946565b11151561312e57600080fd5b60078481548110151561313d57fe5b9060005260206000209060080201925060065461316784600001544361331690919063ffffffff16565b11151561317357600080fd5b8260060160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491503073ffffffffffffffffffffffffffffffffffffffff163182111515156131dd57600080fd5b8260060160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090558260070160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156132cc573d6000803e3d6000fd5b505050505050565b6000816132df611946565b81111515156132ed57600080fd5b6007838154811015156132fc57fe5b906000526020600020906008020160010154915050919050565b600082821115151561332457fe5b818303905092915050565b6000818301905082811015151561334257fe5b80905092915050565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561339857600080fd5b6133e9816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461331690919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506134408160015461331690919063ffffffff16565b6001819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600080600080600080600060078981548110151561351857fe5b90600052602060002090600802019450846003015493508460010154925087915069021e19e0c9bab240000083111561357d5761357a8361356c69021e19e0c9bab24000008b613cd490919063ffffffff16565b613d0c90919063ffffffff16565b91505b6135ac69021e19e0c9bab240000061359e8685613cd490919063ffffffff16565b613d0c90919063ffffffff16565b905080829650965050505050509250929050565b613611816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461332f90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506136688160015461332f90919063ffffffff16565b6001819055505050565b600080823b905060008111915050919050565b60008261369133611d68565b811115151561369f57600080fd5b6136f0846000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461331690919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061374d8461373f87611d68565b61332f90919063ffffffff16565b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1686866040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561382657808201518184015260208101905061380b565b50505050905090810190601f1680156138535780820380516001836020036101000a031916815260200191505b50935050505060405180910390a360019150509392505050565b6000808361387a33611d68565b811115151561388857600080fd5b6138d9856000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461331690919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506139368561392888611d68565b61332f90919063ffffffff16565b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508591508173ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3387876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613a3d578082015181840152602081019050613a22565b50505050905090810190601f168015613a6a5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015613a8b57600080fd5b505af1158015613a9f573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1687876040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613b3a578082015181840152602081019050613b1f565b50505050905090810190601f168015613b675780820380516001836020036101000a031916815260200191505b50935050505060405180910390a36001925050509392505050565b600060198210613b9e57601260ff16600a0a62061a8002613bd1565b613bd0613bb583601961331690919063ffffffff16565b601260ff16600a0a62061a8002613cd490919063ffffffff16565b5b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515613c1457600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080831415613ce75760009050613d06565b8183029050818382811515613cf857fe5b04141515613d0257fe5b8090505b92915050565b60008183811515613d1957fe5b049050929150505600a165627a7a72305820a4d20920bef1aaae611eaf92fd659a14568cf3097476c9c7c5967bd7f881a9b9002900000000000000000000000042c5992a1a9b17662d2c452a17e9e1a33ca9658900000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000019",
  "constructorArguments": "00000000000000000000000042c5992a1a9b17662d2c452a17e9e1a33ca9658900000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000019"
}