{
  "address": "0xc282f494a0619592a2410166dcc749155804f548",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ContributionReward",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-26\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/controller/Reputation.sol\n\n/**\n * @title Reputation system\n * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .\n * A reputation is use to assign influence measure to a DAO'S peers.\n * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.\n * The Reputation contract maintain a map of address to reputation value.\n * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.\n */\n\ncontract Reputation is Ownable {\n    using SafeMath for uint;\n\n    mapping (address => uint256) public balances;\n    uint256 public totalSupply;\n    uint public decimals = 18;\n\n    // Event indicating minting of reputation to an address.\n    event Mint(address indexed _to, uint256 _amount);\n    // Event indicating burning of reputation for an address.\n    event Burn(address indexed _from, uint256 _amount);\n\n    /**\n    * @dev return the reputation amount of a given owner\n    * @param _owner an address of the owner which we want to get his reputation\n    */\n    function reputationOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /**\n    * @dev Generates `_amount` of reputation that are assigned to `_to`\n    * @param _to The address that will be assigned the new reputation\n    * @param _amount The quantity of reputation to be generated\n    * @return True if the reputation are generated correctly\n    */\n    function mint(address _to, uint _amount)\n    public\n    onlyOwner\n    returns (bool)\n    {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        return true;\n    }\n\n    /**\n    * @dev Burns `_amount` of reputation from `_from`\n    * if _amount tokens to burn > balances[_from] the balance of _from will turn to zero.\n    * @param _from The address that will lose the reputation\n    * @param _amount The quantity of reputation to burn\n    * @return True if the reputation are burned correctly\n    */\n    function burn(address _from, uint _amount)\n    public\n    onlyOwner\n    returns (bool)\n    {\n        uint amountMinted = _amount;\n        if (balances[_from] < _amount) {\n            amountMinted = balances[_from];\n        }\n        totalSupply = totalSupply.sub(amountMinted);\n        balances[_from] = balances[_from].sub(amountMinted);\n        emit Burn(_from, amountMinted);\n        return true;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    hasMintPermission\n    canMint\n    public\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: contracts/token/ERC827/ERC827.sol\n\n/**\n * @title ERC827 interface, an extension of ERC20 token standard\n *\n * @dev Interface of a ERC827 token, following the ERC20 standard with extra\n * methods to transfer value and data and execute calls in transfers and\n * approvals.\n */\ncontract ERC827 is ERC20 {\n\n    function approveAndCall(address _spender,uint256 _value,bytes _data) public payable returns(bool);\n\n    function transferAndCall(address _to,uint256 _value,bytes _data) public payable returns(bool);\n\n    function transferFromAndCall(address _from,address _to,uint256 _value,bytes _data) public payable returns(bool);\n\n}\n\n// File: contracts/token/ERC827/ERC827Token.sol\n\n/* solium-disable security/no-low-level-calls */\n\npragma solidity ^0.4.24;\n\n\n\n\n/**\n * @title ERC827, an extension of ERC20 token standard\n *\n * @dev Implementation the ERC827, following the ERC20 standard with extra\n * methods to transfer value and data and execute calls in transfers and\n * approvals. Uses OpenZeppelin StandardToken.\n */\ncontract ERC827Token is ERC827, StandardToken {\n\n  /**\n   * @dev Addition to ERC20 token methods. It allows to\n   * approve the transfer of value and execute a call with the sent data.\n   * Beware that changing an allowance with this method brings the risk that\n   * someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race condition\n   * is to first reduce the spender's allowance to 0 and set the desired value\n   * afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address that will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   * @param _data ABI-encoded contract call to call `_spender` address.\n   * @return true if the call function was executed successfully\n   */\n    function approveAndCall(\n        address _spender,\n        uint256 _value,\n        bytes _data\n    )\n    public\n    payable\n    returns (bool)\n    {\n        require(_spender != address(this));\n\n        super.approve(_spender, _value);\n\n        // solium-disable-next-line security/no-call-value\n        require(_spender.call.value(msg.value)(_data));\n\n        return true;\n    }\n\n  /**\n   * @dev Addition to ERC20 token methods. Transfer tokens to a specified\n   * address and execute a call with the sent data on the same transaction\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   * @param _data ABI-encoded contract call to call `_to` address.\n   * @return true if the call function was executed successfully\n   */\n    function transferAndCall(\n        address _to,\n        uint256 _value,\n        bytes _data\n    )\n    public\n    payable\n    returns (bool)\n    {\n        require(_to != address(this));\n\n        super.transfer(_to, _value);\n\n        // solium-disable-next-line security/no-call-value\n        require(_to.call.value(msg.value)(_data));\n        return true;\n    }\n\n  /**\n   * @dev Addition to ERC20 token methods. Transfer tokens from one address to\n   * another and make a contract call on the same transaction\n   * @param _from The address which you want to send tokens from\n   * @param _to The address which you want to transfer to\n   * @param _value The amout of tokens to be transferred\n   * @param _data ABI-encoded contract call to call `_to` address.\n   * @return true if the call function was executed successfully\n   */\n    function transferFromAndCall(\n        address _from,\n        address _to,\n        uint256 _value,\n        bytes _data\n    )\n    public payable returns (bool)\n    {\n        require(_to != address(this));\n\n        super.transferFrom(_from, _to, _value);\n\n        // solium-disable-next-line security/no-call-value\n        require(_to.call.value(msg.value)(_data));\n        return true;\n    }\n\n  /**\n   * @dev Addition to StandardToken methods. Increase the amount of tokens that\n   * an owner allowed to a spender and execute a call with the sent data.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   * @param _data ABI-encoded contract call to call `_spender` address.\n   */\n    function increaseApprovalAndCall(\n        address _spender,\n        uint _addedValue,\n        bytes _data\n    )\n    public\n    payable\n    returns (bool)\n    {\n        require(_spender != address(this));\n\n        super.increaseApproval(_spender, _addedValue);\n\n        // solium-disable-next-line security/no-call-value\n        require(_spender.call.value(msg.value)(_data));\n\n        return true;\n    }\n\n  /**\n   * @dev Addition to StandardToken methods. Decrease the amount of tokens that\n   * an owner allowed to a spender and execute a call with the sent data.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   * @param _data ABI-encoded contract call to call `_spender` address.\n   */\n    function decreaseApprovalAndCall(\n        address _spender,\n        uint _subtractedValue,\n        bytes _data\n    )\n    public\n    payable\n    returns (bool)\n    {\n        require(_spender != address(this));\n\n        super.decreaseApproval(_spender, _subtractedValue);\n\n        // solium-disable-next-line security/no-call-value\n        require(_spender.call.value(msg.value)(_data));\n\n        return true;\n    }\n\n}\n\n// File: contracts/controller/DAOToken.sol\n\n/**\n * @title DAOToken, base on zeppelin contract.\n * @dev ERC20 compatible token. It is a mintable, destructible, burnable token.\n */\n\ncontract DAOToken is ERC827Token,MintableToken,BurnableToken {\n\n    string public name;\n    string public symbol;\n    // solium-disable-next-line uppercase\n    uint8 public constant decimals = 18;\n    uint public cap;\n\n    /**\n    * @dev Constructor\n    * @param _name - token name\n    * @param _symbol - token symbol\n    * @param _cap - token cap - 0 value means no cap\n    */\n    constructor(string _name, string _symbol,uint _cap) public {\n        name = _name;\n        symbol = _symbol;\n        cap = _cap;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n        if (cap > 0)\n            require(totalSupply_.add(_amount) <= cap);\n        return super.mint(_to, _amount);\n    }\n}\n\n// File: contracts/controller/Avatar.sol\n\n/**\n * @title An Avatar holds tokens, reputation and ether for a controller\n */\ncontract Avatar is Ownable {\n    bytes32 public orgName;\n    DAOToken public nativeToken;\n    Reputation public nativeReputation;\n\n    event GenericAction(address indexed _action, bytes32[] _params);\n    event SendEther(uint _amountInWei, address indexed _to);\n    event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint _value);\n    event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint _value);\n    event ExternalTokenIncreaseApproval(StandardToken indexed _externalToken, address _spender, uint _addedValue);\n    event ExternalTokenDecreaseApproval(StandardToken indexed _externalToken, address _spender, uint _subtractedValue);\n    event ReceiveEther(address indexed _sender, uint _value);\n\n    /**\n    * @dev the constructor takes organization name, native token and reputation system\n    and creates an avatar for a controller\n    */\n    constructor(bytes32 _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {\n        orgName = _orgName;\n        nativeToken = _nativeToken;\n        nativeReputation = _nativeReputation;\n    }\n\n    /**\n    * @dev enables an avatar to receive ethers\n    */\n    function() public payable {\n        emit ReceiveEther(msg.sender, msg.value);\n    }\n\n    /**\n    * @dev perform a generic call to an arbitrary contract\n    * @param _contract  the contract's address to call\n    * @param _data ABI-encoded contract call to call `_contract` address.\n    * @return the return bytes of the called contract's function.\n    */\n    function genericCall(address _contract,bytes _data) public onlyOwner {\n        // solium-disable-next-line security/no-low-level-calls\n        bool result = _contract.call(_data);\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n        // Copy the returned data.\n        returndatacopy(0, 0, returndatasize)\n\n        switch result\n        // call returns 0 on error.\n        case 0 { revert(0, returndatasize) }\n        default { return(0, returndatasize) }\n        }\n    }\n\n    /**\n    * @dev send ethers from the avatar's wallet\n    * @param _amountInWei amount to send in Wei units\n    * @param _to send the ethers to this address\n    * @return bool which represents success\n    */\n    function sendEther(uint _amountInWei, address _to) public onlyOwner returns(bool) {\n        _to.transfer(_amountInWei);\n        emit SendEther(_amountInWei, _to);\n        return true;\n    }\n\n    /**\n    * @dev external token transfer\n    * @param _externalToken the token contract\n    * @param _to the destination address\n    * @param _value the amount of tokens to transfer\n    * @return bool which represents success\n    */\n    function externalTokenTransfer(StandardToken _externalToken, address _to, uint _value)\n    public onlyOwner returns(bool)\n    {\n        _externalToken.transfer(_to, _value);\n        emit ExternalTokenTransfer(_externalToken, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev external token transfer from a specific account\n    * @param _externalToken the token contract\n    * @param _from the account to spend token from\n    * @param _to the destination address\n    * @param _value the amount of tokens to transfer\n    * @return bool which represents success\n    */\n    function externalTokenTransferFrom(\n        StandardToken _externalToken,\n        address _from,\n        address _to,\n        uint _value\n    )\n    public onlyOwner returns(bool)\n    {\n        _externalToken.transferFrom(_from, _to, _value);\n        emit ExternalTokenTransferFrom(_externalToken, _from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev increase approval for the spender address to spend a specified amount of tokens\n    *      on behalf of msg.sender.\n    * @param _externalToken the address of the Token Contract\n    * @param _spender address\n    * @param _addedValue the amount of ether (in Wei) which the approval is referring to.\n    * @return bool which represents a success\n    */\n    function externalTokenIncreaseApproval(StandardToken _externalToken, address _spender, uint _addedValue)\n    public onlyOwner returns(bool)\n    {\n        _externalToken.increaseApproval(_spender, _addedValue);\n        emit ExternalTokenIncreaseApproval(_externalToken, _spender, _addedValue);\n        return true;\n    }\n\n    /**\n    * @dev decrease approval for the spender address to spend a specified amount of tokens\n    *      on behalf of msg.sender.\n    * @param _externalToken the address of the Token Contract\n    * @param _spender address\n    * @param _subtractedValue the amount of ether (in Wei) which the approval is referring to.\n    * @return bool which represents a success\n    */\n    function externalTokenDecreaseApproval(StandardToken _externalToken, address _spender, uint _subtractedValue )\n    public onlyOwner returns(bool)\n    {\n        _externalToken.decreaseApproval(_spender, _subtractedValue);\n        emit ExternalTokenDecreaseApproval(_externalToken,_spender, _subtractedValue);\n        return true;\n    }\n\n}\n\n// File: contracts/globalConstraints/GlobalConstraintInterface.sol\n\ncontract GlobalConstraintInterface {\n\n    enum CallPhase { Pre, Post,PreAndPost }\n\n    function pre( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\n    function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\n    /**\n     * @dev when return if this globalConstraints is pre, post or both.\n     * @return CallPhase enum indication  Pre, Post or PreAndPost.\n     */\n    function when() public returns(CallPhase);\n}\n\n// File: contracts/controller/ControllerInterface.sol\n\n/**\n * @title Controller contract\n * @dev A controller controls the organizations tokens ,reputation and avatar.\n * It is subject to a set of schemes and constraints that determine its behavior.\n * Each scheme has it own parameters and operation permissions.\n */\ninterface ControllerInterface {\n\n    /**\n     * @dev Mint `_amount` of reputation that are assigned to `_to` .\n     * @param  _amount amount of reputation to mint\n     * @param _to beneficiary address\n     * @return bool which represents a success\n    */\n    function mintReputation(uint256 _amount, address _to,address _avatar)\n    external\n    returns(bool);\n\n    /**\n     * @dev Burns `_amount` of reputation from `_from`\n     * @param _amount amount of reputation to burn\n     * @param _from The address that will lose the reputation\n     * @return bool which represents a success\n     */\n    function burnReputation(uint256 _amount, address _from,address _avatar)\n    external\n    returns(bool);\n\n    /**\n     * @dev mint tokens .\n     * @param  _amount amount of token to mint\n     * @param _beneficiary beneficiary address\n     * @param _avatar address\n     * @return bool which represents a success\n     */\n    function mintTokens(uint256 _amount, address _beneficiary,address _avatar)\n    external\n    returns(bool);\n\n  /**\n   * @dev register or update a scheme\n   * @param _scheme the address of the scheme\n   * @param _paramsHash a hashed configuration of the usage of the scheme\n   * @param _permissions the permissions the new scheme will have\n   * @param _avatar address\n   * @return bool which represents a success\n   */\n    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions,address _avatar)\n    external\n    returns(bool);\n\n    /**\n     * @dev unregister a scheme\n     * @param _avatar address\n     * @param _scheme the address of the scheme\n     * @return bool which represents a success\n     */\n    function unregisterScheme(address _scheme,address _avatar)\n    external\n    returns(bool);\n    /**\n     * @dev unregister the caller's scheme\n     * @param _avatar address\n     * @return bool which represents a success\n     */\n    function unregisterSelf(address _avatar) external returns(bool);\n\n    function isSchemeRegistered( address _scheme,address _avatar) external view returns(bool);\n\n    function getSchemeParameters(address _scheme,address _avatar) external view returns(bytes32);\n\n    function getGlobalConstraintParameters(address _globalConstraint,address _avatar) external view returns(bytes32);\n\n    function getSchemePermissions(address _scheme,address _avatar) external view returns(bytes4);\n\n    /**\n     * @dev globalConstraintsCount return the global constraint pre and post count\n     * @return uint globalConstraintsPre count.\n     * @return uint globalConstraintsPost count.\n     */\n    function globalConstraintsCount(address _avatar) external view returns(uint,uint);\n\n    function isGlobalConstraintRegistered(address _globalConstraint,address _avatar) external view returns(bool);\n\n    /**\n     * @dev add or update Global Constraint\n     * @param _globalConstraint the address of the global constraint to be added.\n     * @param _params the constraint parameters hash.\n     * @param _avatar the avatar of the organization\n     * @return bool which represents a success\n     */\n    function addGlobalConstraint(address _globalConstraint, bytes32 _params,address _avatar)\n    external returns(bool);\n\n    /**\n     * @dev remove Global Constraint\n     * @param _globalConstraint the address of the global constraint to be remove.\n     * @param _avatar the organization avatar.\n     * @return bool which represents a success\n     */\n    function removeGlobalConstraint (address _globalConstraint,address _avatar)\n    external  returns(bool);\n\n  /**\n    * @dev upgrade the Controller\n    *      The function will trigger an event 'UpgradeController'.\n    * @param  _newController the address of the new controller.\n    * @param _avatar address\n    * @return bool which represents a success\n    */\n    function upgradeController(address _newController,address _avatar)\n    external returns(bool);\n\n    /**\n    * @dev perform a generic call to an arbitrary contract\n    * @param _contract  the contract's address to call\n    * @param _data ABI-encoded contract call to call `_contract` address.\n    * @param _avatar the controller's avatar address\n    * @return bytes32  - the return value of the called _contract's function.\n    */\n    function genericCall(address _contract,bytes _data,address _avatar)\n    external\n    returns(bytes32);\n\n  /**\n   * @dev send some ether\n   * @param _amountInWei the amount of ether (in Wei) to send\n   * @param _to address of the beneficiary\n   * @param _avatar address\n   * @return bool which represents a success\n   */\n    function sendEther(uint _amountInWei, address _to,address _avatar)\n    external returns(bool);\n\n    /**\n    * @dev send some amount of arbitrary ERC20 Tokens\n    * @param _externalToken the address of the Token Contract\n    * @param _to address of the beneficiary\n    * @param _value the amount of ether (in Wei) to send\n    * @param _avatar address\n    * @return bool which represents a success\n    */\n    function externalTokenTransfer(StandardToken _externalToken, address _to, uint _value,address _avatar)\n    external\n    returns(bool);\n\n    /**\n    * @dev transfer token \"from\" address \"to\" address\n    *      One must to approve the amount of tokens which can be spend from the\n    *      \"from\" account.This can be done using externalTokenApprove.\n    * @param _externalToken the address of the Token Contract\n    * @param _from address of the account to send from\n    * @param _to address of the beneficiary\n    * @param _value the amount of ether (in Wei) to send\n    * @param _avatar address\n    * @return bool which represents a success\n    */\n    function externalTokenTransferFrom(StandardToken _externalToken, address _from, address _to, uint _value,address _avatar)\n    external\n    returns(bool);\n\n    /**\n    * @dev increase approval for the spender address to spend a specified amount of tokens\n    *      on behalf of msg.sender.\n    * @param _externalToken the address of the Token Contract\n    * @param _spender address\n    * @param _addedValue the amount of ether (in Wei) which the approval is referring to.\n    * @param _avatar address\n    * @return bool which represents a success\n    */\n    function externalTokenIncreaseApproval(StandardToken _externalToken, address _spender, uint _addedValue,address _avatar)\n    external\n    returns(bool);\n\n    /**\n    * @dev decrease approval for the spender address to spend a specified amount of tokens\n    *      on behalf of msg.sender.\n    * @param _externalToken the address of the Token Contract\n    * @param _spender address\n    * @param _subtractedValue the amount of ether (in Wei) which the approval is referring to.\n    * @param _avatar address\n    * @return bool which represents a success\n    */\n    function externalTokenDecreaseApproval(StandardToken _externalToken, address _spender, uint _subtractedValue,address _avatar)\n    external\n    returns(bool);\n\n    /**\n     * @dev getNativeReputation\n     * @param _avatar the organization avatar.\n     * @return organization native reputation\n     */\n    function getNativeReputation(address _avatar)\n    external\n    view\n    returns(address);\n}\n\n// File: contracts/controller/Controller.sol\n\n/**\n * @title Controller contract\n * @dev A controller controls the organizations tokens,reputation and avatar.\n * It is subject to a set of schemes and constraints that determine its behavior.\n * Each scheme has it own parameters and operation permissions.\n */\ncontract Controller is ControllerInterface {\n\n    struct Scheme {\n        bytes32 paramsHash;  // a hash \"configuration\" of the scheme\n        bytes4  permissions; // A bitwise flags of permissions,\n                             // All 0: Not registered,\n                             // 1st bit: Flag if the scheme is registered,\n                             // 2nd bit: Scheme can register other schemes\n                             // 3rd bit: Scheme can add/remove global constraints\n                             // 4th bit: Scheme can upgrade the controller\n                             // 5th bit: Scheme can call genericCall on behalf of\n                             //          the organization avatar\n    }\n\n    struct GlobalConstraint {\n        address gcAddress;\n        bytes32 params;\n    }\n\n    struct GlobalConstraintRegister {\n        bool isRegistered; //is registered\n        uint index;    //index at globalConstraints\n    }\n\n    mapping(address=>Scheme) public schemes;\n\n    Avatar public avatar;\n    DAOToken public nativeToken;\n    Reputation public nativeReputation;\n  // newController will point to the new controller after the present controller is upgraded\n    address public newController;\n  // globalConstraintsPre that determine pre conditions for all actions on the controller\n\n    GlobalConstraint[] public globalConstraintsPre;\n  // globalConstraintsPost that determine post conditions for all actions on the controller\n    GlobalConstraint[] public globalConstraintsPost;\n  // globalConstraintsRegisterPre indicate if a globalConstraints is registered as a pre global constraint\n    mapping(address=>GlobalConstraintRegister) public globalConstraintsRegisterPre;\n  // globalConstraintsRegisterPost indicate if a globalConstraints is registered as a post global constraint\n    mapping(address=>GlobalConstraintRegister) public globalConstraintsRegisterPost;\n\n    event MintReputation (address indexed _sender, address indexed _to, uint256 _amount);\n    event BurnReputation (address indexed _sender, address indexed _from, uint256 _amount);\n    event MintTokens (address indexed _sender, address indexed _beneficiary, uint256 _amount);\n    event RegisterScheme (address indexed _sender, address indexed _scheme);\n    event UnregisterScheme (address indexed _sender, address indexed _scheme);\n    event GenericAction (address indexed _sender, bytes32[] _params);\n    event SendEther (address indexed _sender, uint _amountInWei, address indexed _to);\n    event ExternalTokenTransfer (address indexed _sender, address indexed _externalToken, address indexed _to, uint _value);\n    event ExternalTokenTransferFrom (address indexed _sender, address indexed _externalToken, address _from, address _to, uint _value);\n    event ExternalTokenIncreaseApproval (address indexed _sender, StandardToken indexed _externalToken, address _spender, uint _value);\n    event ExternalTokenDecreaseApproval (address indexed _sender, StandardToken indexed _externalToken, address _spender, uint _value);\n    event UpgradeController(address indexed _oldController,address _newController);\n    event AddGlobalConstraint(address indexed _globalConstraint, bytes32 _params,GlobalConstraintInterface.CallPhase _when);\n    event RemoveGlobalConstraint(address indexed _globalConstraint ,uint256 _index,bool _isPre);\n    event GenericCall(address indexed _contract,bytes _data);\n\n    constructor( Avatar _avatar) public\n    {\n        avatar = _avatar;\n        nativeToken = avatar.nativeToken();\n        nativeReputation = avatar.nativeReputation();\n        schemes[msg.sender] = Scheme({paramsHash: bytes32(0),permissions: bytes4(0x1F)});\n    }\n\n  // Do not allow mistaken calls:\n    function() external {\n        revert();\n    }\n\n  // Modifiers:\n    modifier onlyRegisteredScheme() {\n        require(schemes[msg.sender].permissions&bytes4(1) == bytes4(1));\n        _;\n    }\n\n    modifier onlyRegisteringSchemes() {\n        require(schemes[msg.sender].permissions&bytes4(2) == bytes4(2));\n        _;\n    }\n\n    modifier onlyGlobalConstraintsScheme() {\n        require(schemes[msg.sender].permissions&bytes4(4) == bytes4(4));\n        _;\n    }\n\n    modifier onlyUpgradingScheme() {\n        require(schemes[msg.sender].permissions&bytes4(8) == bytes4(8));\n        _;\n    }\n\n    modifier onlyGenericCallScheme() {\n        require(schemes[msg.sender].permissions&bytes4(16) == bytes4(16));\n        _;\n    }\n\n    modifier onlySubjectToConstraint(bytes32 func) {\n        uint idx;\n        for (idx = 0;idx<globalConstraintsPre.length;idx++) {\n            require((GlobalConstraintInterface(globalConstraintsPre[idx].gcAddress)).pre(msg.sender,globalConstraintsPre[idx].params,func));\n        }\n        _;\n        for (idx = 0;idx<globalConstraintsPost.length;idx++) {\n            require((GlobalConstraintInterface(globalConstraintsPost[idx].gcAddress)).post(msg.sender,globalConstraintsPost[idx].params,func));\n        }\n    }\n\n    modifier isAvatarValid(address _avatar) {\n        require(_avatar == address(avatar));\n        _;\n    }\n\n    /**\n     * @dev Mint `_amount` of reputation that are assigned to `_to` .\n     * @param  _amount amount of reputation to mint\n     * @param _to beneficiary address\n     * @return bool which represents a success\n     */\n    function mintReputation(uint256 _amount, address _to,address _avatar)\n    external\n    onlyRegisteredScheme\n    onlySubjectToConstraint(\"mintReputation\")\n    isAvatarValid(_avatar)\n    returns(bool)\n    {\n        emit MintReputation(msg.sender, _to, _amount);\n        return nativeReputation.mint(_to, _amount);\n    }\n\n    /**\n     * @dev Burns `_amount` of reputation from `_from`\n     * @param _amount amount of reputation to burn\n     * @param _from The address that will lose the reputation\n     * @return bool which represents a success\n     */\n    function burnReputation(uint256 _amount, address _from,address _avatar)\n    external\n    onlyRegisteredScheme\n    onlySubjectToConstraint(\"burnReputation\")\n    isAvatarValid(_avatar)\n    returns(bool)\n    {\n        emit BurnReputation(msg.sender, _from, _amount);\n        return nativeReputation.burn(_from, _amount);\n    }\n\n    /**\n     * @dev mint tokens .\n     * @param  _amount amount of token to mint\n     * @param _beneficiary beneficiary address\n     * @return bool which represents a success\n     */\n    function mintTokens(uint256 _amount, address _beneficiary,address _avatar)\n    external\n    onlyRegisteredScheme\n    onlySubjectToConstraint(\"mintTokens\")\n    isAvatarValid(_avatar)\n    returns(bool)\n    {\n        emit MintTokens(msg.sender, _beneficiary, _amount);\n        return nativeToken.mint(_beneficiary, _amount);\n    }\n\n  /**\n   * @dev register a scheme\n   * @param _scheme the address of the scheme\n   * @param _paramsHash a hashed configuration of the usage of the scheme\n   * @param _permissions the permissions the new scheme will have\n   * @return bool which represents a success\n   */\n    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions,address _avatar)\n    external\n    onlyRegisteringSchemes\n    onlySubjectToConstraint(\"registerScheme\")\n    isAvatarValid(_avatar)\n    returns(bool)\n    {\n\n        Scheme memory scheme = schemes[_scheme];\n\n    // Check scheme has at least the permissions it is changing, and at least the current permissions:\n    // Implementation is a bit messy. One must recall logic-circuits ^^\n\n    // produces non-zero if sender does not have all of the perms that are changing between old and new\n        require(bytes4(0x1F)&(_permissions^scheme.permissions)&(~schemes[msg.sender].permissions) == bytes4(0));\n\n    // produces non-zero if sender does not have all of the perms in the old scheme\n        require(bytes4(0x1F)&(scheme.permissions&(~schemes[msg.sender].permissions)) == bytes4(0));\n\n    // Add or change the scheme:\n        schemes[_scheme].paramsHash = _paramsHash;\n        schemes[_scheme].permissions = _permissions|bytes4(1);\n        emit RegisterScheme(msg.sender, _scheme);\n        return true;\n    }\n\n    /**\n     * @dev unregister a scheme\n     * @param _scheme the address of the scheme\n     * @return bool which represents a success\n     */\n    function unregisterScheme( address _scheme,address _avatar)\n    external\n    onlyRegisteringSchemes\n    onlySubjectToConstraint(\"unregisterScheme\")\n    isAvatarValid(_avatar)\n    returns(bool)\n    {\n    //check if the scheme is registered\n        if (schemes[_scheme].permissions&bytes4(1) == bytes4(0)) {\n            return false;\n          }\n    // Check the unregistering scheme has enough permissions:\n        require(bytes4(0x1F)&(schemes[_scheme].permissions&(~schemes[msg.sender].permissions)) == bytes4(0));\n\n    // Unregister:\n        emit UnregisterScheme(msg.sender, _scheme);\n        delete schemes[_scheme];\n        return true;\n    }\n\n    /**\n     * @dev unregister the caller's scheme\n     * @return bool which represents a success\n     */\n    function unregisterSelf(address _avatar) external isAvatarValid(_avatar) returns(bool) {\n        if (_isSchemeRegistered(msg.sender,_avatar) == false) {\n            return false;\n        }\n        delete schemes[msg.sender];\n        emit UnregisterScheme(msg.sender, msg.sender);\n        return true;\n    }\n\n    function isSchemeRegistered(address _scheme,address _avatar) external isAvatarValid(_avatar) view returns(bool) {\n        return _isSchemeRegistered(_scheme,_avatar);\n    }\n\n    function getSchemeParameters(address _scheme,address _avatar) external isAvatarValid(_avatar) view returns(bytes32) {\n        return schemes[_scheme].paramsHash;\n    }\n\n    function getSchemePermissions(address _scheme,address _avatar) external isAvatarValid(_avatar) view returns(bytes4) {\n        return schemes[_scheme].permissions;\n    }\n\n    function getGlobalConstraintParameters(address _globalConstraint,address) external view returns(bytes32) {\n\n        GlobalConstraintRegister memory register = globalConstraintsRegisterPre[_globalConstraint];\n\n        if (register.isRegistered) {\n            return globalConstraintsPre[register.index].params;\n        }\n\n        register = globalConstraintsRegisterPost[_globalConstraint];\n\n        if (register.isRegistered) {\n            return globalConstraintsPost[register.index].params;\n        }\n    }\n\n   /**\n    * @dev globalConstraintsCount return the global constraint pre and post count\n    * @return uint globalConstraintsPre count.\n    * @return uint globalConstraintsPost count.\n    */\n    function globalConstraintsCount(address _avatar)\n        external\n        isAvatarValid(_avatar)\n        view\n        returns(uint,uint)\n        {\n        return (globalConstraintsPre.length,globalConstraintsPost.length);\n    }\n\n    function isGlobalConstraintRegistered(address _globalConstraint,address _avatar)\n        external\n        isAvatarValid(_avatar)\n        view\n        returns(bool)\n        {\n        return (globalConstraintsRegisterPre[_globalConstraint].isRegistered || globalConstraintsRegisterPost[_globalConstraint].isRegistered);\n    }\n\n    /**\n     * @dev add or update Global Constraint\n     * @param _globalConstraint the address of the global constraint to be added.\n     * @param _params the constraint parameters hash.\n     * @return bool which represents a success\n     */\n    function addGlobalConstraint(address _globalConstraint, bytes32 _params,address _avatar)\n    external\n    onlyGlobalConstraintsScheme\n    isAvatarValid(_avatar)\n    returns(bool)\n    {\n        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\n        if ((when == GlobalConstraintInterface.CallPhase.Pre)||(when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\n            if (!globalConstraintsRegisterPre[_globalConstraint].isRegistered) {\n                globalConstraintsPre.push(GlobalConstraint(_globalConstraint,_params));\n                globalConstraintsRegisterPre[_globalConstraint] = GlobalConstraintRegister(true,globalConstraintsPre.length-1);\n            }else {\n                globalConstraintsPre[globalConstraintsRegisterPre[_globalConstraint].index].params = _params;\n            }\n        }\n        if ((when == GlobalConstraintInterface.CallPhase.Post)||(when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\n            if (!globalConstraintsRegisterPost[_globalConstraint].isRegistered) {\n                globalConstraintsPost.push(GlobalConstraint(_globalConstraint,_params));\n                globalConstraintsRegisterPost[_globalConstraint] = GlobalConstraintRegister(true,globalConstraintsPost.length-1);\n            }else {\n                globalConstraintsPost[globalConstraintsRegisterPost[_globalConstraint].index].params = _params;\n            }\n        }\n        emit AddGlobalConstraint(_globalConstraint, _params,when);\n        return true;\n    }\n\n    /**\n     * @dev remove Global Constraint\n     * @param _globalConstraint the address of the global constraint to be remove.\n     * @return bool which represents a success\n     */\n    function removeGlobalConstraint (address _globalConstraint,address _avatar)\n    external\n    onlyGlobalConstraintsScheme\n    isAvatarValid(_avatar)\n    returns(bool)\n    {\n        GlobalConstraintRegister memory globalConstraintRegister;\n        GlobalConstraint memory globalConstraint;\n        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\n        bool retVal = false;\n\n        if ((when == GlobalConstraintInterface.CallPhase.Pre)||(when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\n            globalConstraintRegister = globalConstraintsRegisterPre[_globalConstraint];\n            if (globalConstraintRegister.isRegistered) {\n                if (globalConstraintRegister.index < globalConstraintsPre.length-1) {\n                    globalConstraint = globalConstraintsPre[globalConstraintsPre.length-1];\n                    globalConstraintsPre[globalConstraintRegister.index] = globalConstraint;\n                    globalConstraintsRegisterPre[globalConstraint.gcAddress].index = globalConstraintRegister.index;\n                }\n                globalConstraintsPre.length--;\n                delete globalConstraintsRegisterPre[_globalConstraint];\n                retVal = true;\n            }\n        }\n        if ((when == GlobalConstraintInterface.CallPhase.Post)||(when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\n            globalConstraintRegister = globalConstraintsRegisterPost[_globalConstraint];\n            if (globalConstraintRegister.isRegistered) {\n                if (globalConstraintRegister.index < globalConstraintsPost.length-1) {\n                    globalConstraint = globalConstraintsPost[globalConstraintsPost.length-1];\n                    globalConstraintsPost[globalConstraintRegister.index] = globalConstraint;\n                    globalConstraintsRegisterPost[globalConstraint.gcAddress].index = globalConstraintRegister.index;\n                }\n                globalConstraintsPost.length--;\n                delete globalConstraintsRegisterPost[_globalConstraint];\n                retVal = true;\n            }\n        }\n        if (retVal) {\n            emit RemoveGlobalConstraint(_globalConstraint,globalConstraintRegister.index,when == GlobalConstraintInterface.CallPhase.Pre);\n        }\n        return retVal;\n    }\n\n  /**\n    * @dev upgrade the Controller\n    *      The function will trigger an event 'UpgradeController'.\n    * @param  _newController the address of the new controller.\n    * @return bool which represents a success\n    */\n    function upgradeController(address _newController,address _avatar)\n    external\n    onlyUpgradingScheme\n    isAvatarValid(_avatar)\n    returns(bool)\n    {\n        require(newController == address(0));   // so the upgrade could be done once for a contract.\n        require(_newController != address(0));\n        newController = _newController;\n        avatar.transferOwnership(_newController);\n        require(avatar.owner()==_newController);\n        if (nativeToken.owner() == address(this)) {\n            nativeToken.transferOwnership(_newController);\n            require(nativeToken.owner()==_newController);\n        }\n        if (nativeReputation.owner() == address(this)) {\n            nativeReputation.transferOwnership(_newController);\n            require(nativeReputation.owner()==_newController);\n        }\n        emit UpgradeController(this,newController);\n        return true;\n    }\n\n    /**\n    * @dev perform a generic call to an arbitrary contract\n    * @param _contract  the contract's address to call\n    * @param _data ABI-encoded contract call to call `_contract` address.\n    * @param _avatar the controller's avatar address\n    * @return bytes32  - the return value of the called _contract's function.\n    */\n    function genericCall(address _contract,bytes _data,address _avatar)\n    external\n    onlyGenericCallScheme\n    onlySubjectToConstraint(\"genericCall\")\n    isAvatarValid(_avatar)\n    returns (bytes32)\n    {\n        emit GenericCall(_contract, _data);\n        avatar.genericCall(_contract, _data);\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n        // Copy the returned data.\n        returndatacopy(0, 0, returndatasize)\n        return(0, returndatasize)\n        }\n    }\n\n  /**\n   * @dev send some ether\n   * @param _amountInWei the amount of ether (in Wei) to send\n   * @param _to address of the beneficiary\n   * @return bool which represents a success\n   */\n    function sendEther(uint _amountInWei, address _to,address _avatar)\n    external\n    onlyRegisteredScheme\n    onlySubjectToConstraint(\"sendEther\")\n    isAvatarValid(_avatar)\n    returns(bool)\n    {\n        emit SendEther(msg.sender, _amountInWei, _to);\n        return avatar.sendEther(_amountInWei, _to);\n    }\n\n    /**\n    * @dev send some amount of arbitrary ERC20 Tokens\n    * @param _externalToken the address of the Token Contract\n    * @param _to address of the beneficiary\n    * @param _value the amount of ether (in Wei) to send\n    * @return bool which represents a success\n    */\n    function externalTokenTransfer(StandardToken _externalToken, address _to, uint _value,address _avatar)\n    external\n    onlyRegisteredScheme\n    onlySubjectToConstraint(\"externalTokenTransfer\")\n    isAvatarValid(_avatar)\n    returns(bool)\n    {\n        emit ExternalTokenTransfer(msg.sender, _externalToken, _to, _value);\n        return avatar.externalTokenTransfer(_externalToken, _to, _value);\n    }\n\n    /**\n    * @dev transfer token \"from\" address \"to\" address\n    *      One must to approve the amount of tokens which can be spend from the\n    *      \"from\" account.This can be done using externalTokenApprove.\n    * @param _externalToken the address of the Token Contract\n    * @param _from address of the account to send from\n    * @param _to address of the beneficiary\n    * @param _value the amount of ether (in Wei) to send\n    * @return bool which represents a success\n    */\n    function externalTokenTransferFrom(StandardToken _externalToken, address _from, address _to, uint _value,address _avatar)\n    external\n    onlyRegisteredScheme\n    onlySubjectToConstraint(\"externalTokenTransferFrom\")\n    isAvatarValid(_avatar)\n    returns(bool)\n    {\n        emit ExternalTokenTransferFrom(msg.sender, _externalToken, _from, _to, _value);\n        return avatar.externalTokenTransferFrom(_externalToken, _from, _to, _value);\n    }\n\n    /**\n    * @dev increase approval for the spender address to spend a specified amount of tokens\n    *      on behalf of msg.sender.\n    * @param _externalToken the address of the Token Contract\n    * @param _spender address\n    * @param _addedValue the amount of ether (in Wei) which the approval is referring to.\n    * @return bool which represents a success\n    */\n    function externalTokenIncreaseApproval(StandardToken _externalToken, address _spender, uint _addedValue,address _avatar)\n    external\n    onlyRegisteredScheme\n    onlySubjectToConstraint(\"externalTokenIncreaseApproval\")\n    isAvatarValid(_avatar)\n    returns(bool)\n    {\n        emit ExternalTokenIncreaseApproval(msg.sender,_externalToken,_spender,_addedValue);\n        return avatar.externalTokenIncreaseApproval(_externalToken, _spender, _addedValue);\n    }\n\n    /**\n    * @dev decrease approval for the spender address to spend a specified amount of tokens\n    *      on behalf of msg.sender.\n    * @param _externalToken the address of the Token Contract\n    * @param _spender address\n    * @param _subtractedValue the amount of ether (in Wei) which the approval is referring to.\n    * @return bool which represents a success\n    */\n    function externalTokenDecreaseApproval(StandardToken _externalToken, address _spender, uint _subtractedValue,address _avatar)\n    external\n    onlyRegisteredScheme\n    onlySubjectToConstraint(\"externalTokenDecreaseApproval\")\n    isAvatarValid(_avatar)\n    returns(bool)\n    {\n        emit ExternalTokenDecreaseApproval(msg.sender,_externalToken,_spender,_subtractedValue);\n        return avatar.externalTokenDecreaseApproval(_externalToken, _spender, _subtractedValue);\n    }\n\n    /**\n     * @dev getNativeReputation\n     * @param _avatar the organization avatar.\n     * @return organization native reputation\n     */\n    function getNativeReputation(address _avatar) external isAvatarValid(_avatar) view returns(address) {\n        return address(nativeReputation);\n    }\n\n    function _isSchemeRegistered(address _scheme,address _avatar) private isAvatarValid(_avatar) view returns(bool) {\n        return (schemes[_scheme].permissions&bytes4(1) != bytes4(0));\n    }\n}\n\n// File: contracts/universalSchemes/ExecutableInterface.sol\n\ncontract ExecutableInterface {\n    function execute(bytes32 _proposalId, address _avatar, int _param) public returns(bool);\n}\n\n// File: contracts/VotingMachines/IntVoteInterface.sol\n\ninterface IntVoteInterface {\n    //When implementing this interface please do not only override function and modifier,\n    //but also to keep the modifiers on the overridden functions.\n    modifier onlyProposalOwner(bytes32 _proposalId) {revert(); _;}\n    modifier votable(bytes32 _proposalId) {revert(); _;}\n\n    event NewProposal(bytes32 indexed _proposalId, address indexed _avatar, uint _numOfChoices, address _proposer, bytes32 _paramsHash);\n    event ExecuteProposal(bytes32 indexed _proposalId, address indexed _avatar, uint _decision, uint _totalReputation);\n    event VoteProposal(bytes32 indexed _proposalId, address indexed _avatar, address indexed _voter, uint _vote, uint _reputation);\n    event CancelProposal(bytes32 indexed _proposalId, address indexed _avatar );\n    event CancelVoting(bytes32 indexed _proposalId, address indexed _avatar, address indexed _voter);\n\n    /**\n     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\n     * generated by calculating keccak256 of a incremented counter.\n     * @param _numOfChoices number of voting choices\n     * @param _proposalParameters defines the parameters of the voting machine used for this proposal\n     * @param _avatar an address to be sent as the payload to the _executable contract.\n     * @param _executable This contract will be executed when vote is over.\n     * @param _proposer address\n     * @return proposal's id.\n     */\n    function propose(\n        uint _numOfChoices,\n        bytes32 _proposalParameters,\n        address _avatar,\n        ExecutableInterface _executable,\n        address _proposer\n        ) external returns(bytes32);\n\n    // Only owned proposals and only the owner:\n    function cancelProposal(bytes32 _proposalId) external returns(bool);\n\n    // Only owned proposals and only the owner:\n    function ownerVote(bytes32 _proposalId, uint _vote, address _voter) external returns(bool);\n\n    function vote(bytes32 _proposalId, uint _vote) external returns(bool);\n\n    function voteWithSpecifiedAmounts(\n        bytes32 _proposalId,\n        uint _vote,\n        uint _rep,\n        uint _token) external returns(bool);\n\n    function cancelVote(bytes32 _proposalId) external;\n\n    //@dev execute check if the proposal has been decided, and if so, execute the proposal\n    //@param _proposalId the id of the proposal\n    //@return bool true - the proposal has been executed\n    //             false - otherwise.\n    function execute(bytes32 _proposalId) external returns(bool);\n\n    function getNumberOfChoices(bytes32 _proposalId) external view returns(uint);\n\n    function isVotable(bytes32 _proposalId) external view returns(bool);\n\n    /**\n     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\n     * @param _proposalId the ID of the proposal\n     * @param _choice the index in the\n     * @return voted reputation for the given choice\n     */\n    function voteStatus(bytes32 _proposalId,uint _choice) external view returns(uint);\n\n    /**\n     * @dev isAbstainAllow returns if the voting machine allow abstain (0)\n     * @return bool true or false\n     */\n    function isAbstainAllow() external pure returns(bool);\n\n    /**\n     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\n     * @return min - minimum number of choices\n               max - maximum number of choices\n     */\n    function getAllowedRangeOfChoices() external pure returns(uint min,uint max);\n}\n\n// File: contracts/universalSchemes/UniversalSchemeInterface.sol\n\ncontract UniversalSchemeInterface {\n\n    function updateParameters(bytes32 _hashedParameters) public;\n\n    function getParametersFromController(Avatar _avatar) internal view returns(bytes32);\n}\n\n// File: contracts/universalSchemes/UniversalScheme.sol\n\ncontract UniversalScheme is Ownable, UniversalSchemeInterface {\n    bytes32 public hashedParameters; // For other parameters.\n\n    function updateParameters(\n        bytes32 _hashedParameters\n    )\n        public\n        onlyOwner\n    {\n        hashedParameters = _hashedParameters;\n    }\n\n    /**\n    *  @dev get the parameters for the current scheme from the controller\n    */\n    function getParametersFromController(Avatar _avatar) internal view returns(bytes32) {\n        return ControllerInterface(_avatar.owner()).getSchemeParameters(this,address(_avatar));\n    }\n}\n\n// File: contracts/universalSchemes/ContributionReward.sol\n\n/**\n * @title A scheme for proposing and rewarding contributions to an organization\n * @dev An agent can ask an organization to recognize a contribution and reward\n * him with token, reputation, ether or any combination.\n */\n\ncontract ContributionReward is UniversalScheme {\n    using SafeMath for uint;\n\n    event NewContributionProposal(\n        address indexed _avatar,\n        bytes32 indexed _proposalId,\n        address indexed _intVoteInterface,\n        bytes32 _contributionDescription,\n        int _reputationChange,\n        uint[5]  _rewards,\n        StandardToken _externalToken,\n        address _beneficiary\n    );\n    event ProposalExecuted(address indexed _avatar, bytes32 indexed _proposalId,int _param);\n    event RedeemReputation(address indexed _avatar, bytes32 indexed _proposalId, address indexed _beneficiary,int _amount);\n    event RedeemEther(address indexed _avatar, bytes32 indexed _proposalId, address indexed _beneficiary,uint _amount);\n    event RedeemNativeToken(address indexed _avatar, bytes32 indexed _proposalId, address indexed _beneficiary,uint _amount);\n    event RedeemExternalToken(address indexed _avatar, bytes32 indexed _proposalId, address indexed _beneficiary,uint _amount);\n\n    // A struct holding the data for a contribution proposal\n    struct ContributionProposal {\n        bytes32 contributionDescriptionHash; // Hash of contribution document.\n        uint nativeTokenReward; // Reward asked in the native token of the organization.\n        int reputationChange; // Organization reputation reward requested.\n        uint ethReward;\n        StandardToken externalToken;\n        uint externalTokenReward;\n        address beneficiary;\n        uint periodLength;\n        uint numberOfPeriods;\n        uint executionTime;\n        uint[4] redeemedPeriods;\n    }\n\n    // A mapping from the organization (Avatar) address to the saved data of the organization:\n    mapping(address=>mapping(bytes32=>ContributionProposal)) public organizationsProposals;\n\n    // A mapping from hashes to parameters (use to store a particular configuration on the controller)\n    // A contribution fee can be in the organization token or the scheme token or a combination\n    struct Parameters {\n        uint orgNativeTokenFee; // a fee (in the organization's token) that is to be paid for submitting a contribution\n        bytes32 voteApproveParams;\n        IntVoteInterface intVote;\n    }\n    // A mapping from hashes to parameters (use to store a particular configuration on the controller)\n    mapping(bytes32=>Parameters) public parameters;\n\n    /**\n    * @dev hash the parameters, save them if necessary, and return the hash value\n    */\n    function setParameters(\n        uint _orgNativeTokenFee,\n        bytes32 _voteApproveParams,\n        IntVoteInterface _intVote\n    ) public returns(bytes32)\n    {\n        bytes32 paramsHash = getParametersHash(\n            _orgNativeTokenFee,\n            _voteApproveParams,\n            _intVote\n        );\n        parameters[paramsHash].orgNativeTokenFee = _orgNativeTokenFee;\n        parameters[paramsHash].voteApproveParams = _voteApproveParams;\n        parameters[paramsHash].intVote = _intVote;\n        return paramsHash;\n    }\n\n    /**\n    * @dev return a hash of the given parameters\n    * @param _orgNativeTokenFee the fee for submitting a contribution in organizations native token\n    * @param _voteApproveParams parameters for the voting machine used to approve a contribution\n    * @param _intVote the voting machine used to approve a contribution\n    * @return a hash of the parameters\n    */\n    // TODO: These fees are messy. Better to have a _fee and _feeToken pair, just as in some other contract (which one?) with some sane default\n    function getParametersHash(\n        uint _orgNativeTokenFee,\n        bytes32 _voteApproveParams,\n        IntVoteInterface _intVote\n    ) public pure returns(bytes32)\n    {\n        return (keccak256(abi.encodePacked(_voteApproveParams, _orgNativeTokenFee, _intVote)));\n    }\n\n    /**\n    * @dev Submit a proposal for a reward for a contribution:\n    * @param _avatar Avatar of the organization that the contribution was made for\n    * @param _contributionDescriptionHash A hash of the contribution's description\n    * @param _reputationChange - Amount of reputation change requested .Can be negative.\n    * @param _rewards rewards array:\n    *         rewards[0] - Amount of tokens requested per period\n    *         rewards[1] - Amount of ETH requested per period\n    *         rewards[2] - Amount of external tokens requested per period\n    *         rewards[3] - Period length - if set to zero it allows immediate redeeming after execution.\n    *         rewards[4] - Number of periods\n    * @param _externalToken Address of external token, if reward is requested there\n    * @param _beneficiary Who gets the rewards\n    */\n    function proposeContributionReward(\n        Avatar _avatar,\n        bytes32 _contributionDescriptionHash,\n        int _reputationChange,\n        uint[5] _rewards,\n        StandardToken _externalToken,\n        address _beneficiary\n    ) public\n      returns(bytes32)\n    {\n        require(((_rewards[3] > 0) || (_rewards[4] == 1)),\"periodLength equal 0 require numberOfPeriods to be 1\");\n        Parameters memory controllerParams = parameters[getParametersFromController(_avatar)];\n        // Pay fees for submitting the contribution:\n        if (controllerParams.orgNativeTokenFee > 0) {\n            _avatar.nativeToken().transferFrom(msg.sender, _avatar, controllerParams.orgNativeTokenFee);\n        }\n\n        bytes32 contributionId = controllerParams.intVote.propose(\n            2,\n            controllerParams.voteApproveParams,\n           _avatar,\n           ExecutableInterface(this),\n           msg.sender\n        );\n\n        // Check beneficiary is not null:\n        address beneficiary = _beneficiary;\n        if (beneficiary == address(0)) {\n            beneficiary = msg.sender;\n        }\n\n        // Set the struct:\n        ContributionProposal memory proposal = ContributionProposal({\n            contributionDescriptionHash: _contributionDescriptionHash,\n            nativeTokenReward: _rewards[0],\n            reputationChange: _reputationChange,\n            ethReward: _rewards[1],\n            externalToken: _externalToken,\n            externalTokenReward: _rewards[2],\n            beneficiary: beneficiary,\n            periodLength: _rewards[3],\n            numberOfPeriods: _rewards[4],\n            executionTime: 0,\n            redeemedPeriods:[uint(0),uint(0),uint(0),uint(0)]\n        });\n        organizationsProposals[_avatar][contributionId] = proposal;\n\n        emit NewContributionProposal(\n            _avatar,\n            contributionId,\n            controllerParams.intVote,\n            _contributionDescriptionHash,\n            _reputationChange,\n            _rewards,\n            _externalToken,\n            beneficiary\n        );\n\n        // vote for this proposal\n        controllerParams.intVote.ownerVote(contributionId, 1, msg.sender); // Automatically votes `yes` in the name of the opener.\n        return contributionId;\n    }\n\n    /**\n    * @dev execution of proposals, can only be called by the voting machine in which the vote is held.\n    * @param _proposalId the ID of the voting in the voting machine\n    * @param _avatar address of the controller\n    * @param _param a parameter of the voting result, 1 yes and 2 is no.\n    */\n    function execute(bytes32 _proposalId, address _avatar, int _param) public returns(bool) {\n        // Check the caller is indeed the voting machine:\n        require(parameters[getParametersFromController(Avatar(_avatar))].intVote == msg.sender);\n        require(organizationsProposals[_avatar][_proposalId].executionTime == 0);\n        require(organizationsProposals[_avatar][_proposalId].beneficiary != address(0));\n        // Check if vote was successful:\n        if (_param == 1) {\n          // solium-disable-next-line security/no-block-members\n            organizationsProposals[_avatar][_proposalId].executionTime = now;\n        }\n        emit ProposalExecuted(_avatar, _proposalId,_param);\n        return true;\n    }\n\n    /**\n    * @dev RedeemReputation reward for proposal\n    * @param _proposalId the ID of the voting in the voting machine\n    * @param _avatar address of the controller\n    * @return  result boolean for success indication.\n    */\n    function redeemReputation(bytes32 _proposalId, address _avatar) public returns(bool) {\n\n        ContributionProposal memory _proposal = organizationsProposals[_avatar][_proposalId];\n        ContributionProposal storage proposal = organizationsProposals[_avatar][_proposalId];\n        require(proposal.executionTime != 0);\n        uint periodsToPay = getPeriodsToPay(_proposalId,_avatar,0);\n        bool result;\n\n        //set proposal reward to zero to prevent reentrancy attack.\n        proposal.reputationChange = 0;\n        int reputation = int(periodsToPay) * _proposal.reputationChange;\n        if (reputation > 0 ) {\n            require(ControllerInterface(Avatar(_avatar).owner()).mintReputation(uint(reputation), _proposal.beneficiary,_avatar));\n            result = true;\n        } else if (reputation < 0 ) {\n            require(ControllerInterface(Avatar(_avatar).owner()).burnReputation(uint(reputation*(-1)), _proposal.beneficiary,_avatar));\n            result = true;\n        }\n        if (result) {\n            proposal.redeemedPeriods[0] = proposal.redeemedPeriods[0].add(periodsToPay);\n            emit RedeemReputation(_avatar,_proposalId,_proposal.beneficiary,reputation);\n        }\n        //restore proposal reward.\n        proposal.reputationChange = _proposal.reputationChange;\n        return result;\n    }\n\n    /**\n    * @dev RedeemNativeToken reward for proposal\n    * @param _proposalId the ID of the voting in the voting machine\n    * @param _avatar address of the controller\n    * @return  result boolean for success indication.\n    */\n    function redeemNativeToken(bytes32 _proposalId, address _avatar) public returns(bool) {\n\n        ContributionProposal memory _proposal = organizationsProposals[_avatar][_proposalId];\n        ContributionProposal storage proposal = organizationsProposals[_avatar][_proposalId];\n        require(proposal.executionTime != 0);\n        uint periodsToPay = getPeriodsToPay(_proposalId,_avatar,1);\n        bool result;\n        //set proposal rewards to zero to prevent reentrancy attack.\n        proposal.nativeTokenReward = 0;\n\n        uint amount = periodsToPay.mul(_proposal.nativeTokenReward);\n        if (amount > 0) {\n            require(ControllerInterface(Avatar(_avatar).owner()).mintTokens(amount, _proposal.beneficiary,_avatar));\n            proposal.redeemedPeriods[1] = proposal.redeemedPeriods[1].add(periodsToPay);\n            result = true;\n            emit RedeemNativeToken(_avatar,_proposalId,_proposal.beneficiary,amount);\n        }\n\n        //restore proposal reward.\n        proposal.nativeTokenReward = _proposal.nativeTokenReward;\n        return result;\n    }\n\n    /**\n    * @dev RedeemEther reward for proposal\n    * @param _proposalId the ID of the voting in the voting machine\n    * @param _avatar address of the controller\n    * @return  result boolean for success indication.\n    */\n    function redeemEther(bytes32 _proposalId, address _avatar) public returns(bool) {\n\n        ContributionProposal memory _proposal = organizationsProposals[_avatar][_proposalId];\n        ContributionProposal storage proposal = organizationsProposals[_avatar][_proposalId];\n        require(proposal.executionTime != 0);\n        uint periodsToPay = getPeriodsToPay(_proposalId,_avatar,2);\n        bool result;\n        //set proposal rewards to zero to prevent reentrancy attack.\n        proposal.ethReward = 0;\n        uint amount = periodsToPay.mul(_proposal.ethReward);\n\n        if (amount > 0) {\n            require(ControllerInterface(Avatar(_avatar).owner()).sendEther(amount, _proposal.beneficiary,_avatar));\n            proposal.redeemedPeriods[2] = proposal.redeemedPeriods[2].add(periodsToPay);\n            result = true;\n            emit RedeemEther(_avatar,_proposalId,_proposal.beneficiary,amount);\n        }\n\n        //restore proposal reward.\n        proposal.ethReward = _proposal.ethReward;\n        return result;\n    }\n\n    /**\n    * @dev RedeemNativeToken reward for proposal\n    * @param _proposalId the ID of the voting in the voting machine\n    * @param _avatar address of the controller\n    * @return  result boolean for success indication.\n    */\n    function redeemExternalToken(bytes32 _proposalId, address _avatar) public returns(bool) {\n\n        ContributionProposal memory _proposal = organizationsProposals[_avatar][_proposalId];\n        ContributionProposal storage proposal = organizationsProposals[_avatar][_proposalId];\n        require(proposal.executionTime != 0);\n        uint periodsToPay = getPeriodsToPay(_proposalId,_avatar,3);\n        bool result;\n        //set proposal rewards to zero to prevent reentrancy attack.\n        proposal.externalTokenReward = 0;\n\n        if (proposal.externalToken != address(0) && _proposal.externalTokenReward > 0) {\n            uint amount = periodsToPay.mul(_proposal.externalTokenReward);\n            if (amount > 0) {\n                require(ControllerInterface(Avatar(_avatar).owner()).externalTokenTransfer(_proposal.externalToken, _proposal.beneficiary, amount,_avatar));\n                proposal.redeemedPeriods[3] = proposal.redeemedPeriods[3].add(periodsToPay);\n                result = true;\n                emit RedeemExternalToken(_avatar,_proposalId,_proposal.beneficiary,amount);\n            }\n        }\n        //restore proposal reward.\n        proposal.externalTokenReward = _proposal.externalTokenReward;\n        return result;\n    }\n\n    /**\n    * @dev redeem rewards for proposal\n    * @param _proposalId the ID of the voting in the voting machine\n    * @param _avatar address of the controller\n    * @param _whatToRedeem whatToRedeem array:\n    *         whatToRedeem[0] - reputation\n    *         whatToRedeem[1] - nativeTokenReward\n    *         whatToRedeem[2] - Ether\n    *         whatToRedeem[3] - ExternalToken\n    * @return  result boolean array for each redeem type.\n    */\n    function redeem(bytes32 _proposalId, address _avatar,bool[4] _whatToRedeem) public returns(bool[4] result) {\n\n        if (_whatToRedeem[0]) {\n            result[0] = redeemReputation(_proposalId,_avatar);\n        }\n\n        if (_whatToRedeem[1]) {\n            result[1] = redeemNativeToken(_proposalId,_avatar);\n        }\n\n        if (_whatToRedeem[2]) {\n            result[2] = redeemEther(_proposalId,_avatar);\n        }\n\n        if (_whatToRedeem[3]) {\n            result[3] = redeemExternalToken(_proposalId,_avatar);\n        }\n\n        return result;\n    }\n\n    /**\n    * @dev getPeriodsToPay return the periods left to be paid for reputation,nativeToken,ether or externalToken.\n    * The function ignore the reward amount to be paid (which can be zero).\n    * @param _proposalId the ID of the voting in the voting machine\n    * @param _avatar address of the controller\n    * @param _redeemType - the type of the reward  :\n    *         0 - reputation\n    *         1 - nativeTokenReward\n    *         2 - Ether\n    *         3 - ExternalToken\n    * @return  periods left to be paid.\n    */\n    function getPeriodsToPay(bytes32 _proposalId, address _avatar,uint _redeemType) public view returns (uint) {\n        ContributionProposal memory _proposal = organizationsProposals[_avatar][_proposalId];\n        if (_proposal.executionTime == 0)\n            return 0;\n        uint periodsFromExecution;\n        if (_proposal.periodLength > 0) {\n          // solium-disable-next-line security/no-block-members\n            periodsFromExecution = (now.sub(_proposal.executionTime))/(_proposal.periodLength);\n        }\n        uint periodsToPay;\n        if ((_proposal.periodLength == 0) || (periodsFromExecution >= _proposal.numberOfPeriods)) {\n            periodsToPay = _proposal.numberOfPeriods.sub(_proposal.redeemedPeriods[_redeemType]);\n        } else {\n            periodsToPay = periodsFromExecution.sub(_proposal.redeemedPeriods[_redeemType]);\n        }\n        return periodsToPay;\n    }\n\n    /**\n    * @dev getRedeemedPeriods return the already redeemed periods for reputation, nativeToken, ether or externalToken.\n    * @param _proposalId the ID of the voting in the voting machine\n    * @param _avatar address of the controller\n    * @param _redeemType - the type of the reward  :\n    *         0 - reputation\n    *         1 - nativeTokenReward\n    *         2 - Ether\n    *         3 - ExternalToken\n    * @return redeemed period.\n    */\n    function getRedeemedPeriods(bytes32 _proposalId, address _avatar,uint _redeemType) public view returns (uint) {\n        return organizationsProposals[_avatar][_proposalId].redeemedPeriods[_redeemType];\n    }\n\n    function getProposalEthReward(bytes32 _proposalId, address _avatar) public view returns (uint) {\n        return organizationsProposals[_avatar][_proposalId].ethReward;\n    }\n\n    function getProposalExternalTokenReward(bytes32 _proposalId, address _avatar) public view returns (uint) {\n        return organizationsProposals[_avatar][_proposalId].externalTokenReward;\n    }\n\n    function getProposalExternalToken(bytes32 _proposalId, address _avatar) public view returns (address) {\n        return organizationsProposals[_avatar][_proposalId].externalToken;\n    }\n\n    function getProposalExecutionTime(bytes32 _proposalId, address _avatar) public view returns (uint) {\n        return organizationsProposals[_avatar][_proposalId].executionTime;\n    }\n\n}\n\n// first code that was uploaded to etherscan by a dao",
  "bytecode": "608060405260008054600160a060020a03191633179055612206806100256000396000f30060806040526004361061010e5763ffffffff60e060020a60003504166302506804811461011357806306e3a978146101525780630d5e1e82146101d15780631c3a5713146102095780632ac2af531461023f578063310ce4e2146102595780633a256daa14610280578063465ff7d7146102a45780636046f71d146102cb578063715018a6146102ef5780638da5cb5b146103045780639a55054c14610335578063b74fd44f146103a5578063b7c251c3146103cc578063bb1c9351146103f3578063cd3ce30614610417578063d58bf09a1461043b578063e074ee55146104c5578063e63b681e146104ec578063f2fde38b14610510578063f70bbb9a14610531578063f98e87ba14610555575b600080fd5b34801561011f57600080fd5b5061012b60043561056a565b604080519384526020840192909252600160a060020a031682820152519081900360600190f35b34801561015e57600080fd5b50610176600160a060020a0360043516602435610594565b604080519a8b5260208b0199909952898901979097526060890195909552600160a060020a03938416608089015260a088019290925290911660c086015260e085015261010084015261012083015251908190036101400190f35b3480156101dd57600080fd5b506101f5600435600160a060020a03602435166105fb565b604080519115158252519081900360200190f35b34801561021557600080fd5b5061022d600435600160a060020a0360243516610a17565b60408051918252519081900360200190f35b34801561024b57600080fd5b50610257600435610a45565b005b34801561026557600080fd5b506101f5600435600160a060020a0360243516604435610a61565b34801561028c57600080fd5b5061022d600435600160a060020a0360243516610b7a565b3480156102b057600080fd5b5061022d600435602435600160a060020a0360443516610ba2565b3480156102d757600080fd5b5061022d600435600160a060020a0360243516610bff565b3480156102fb57600080fd5b50610257610c27565b34801561031057600080fd5b50610319610c93565b60408051600160a060020a039092168252519081900360200190f35b34801561034157600080fd5b506040805160a080820190925261022d9160048035600160a060020a031692602435926044359236929091610104919060649060059083908390808284375093965050600160a060020a038435811695506020909401359093169250610ca2915050565b3480156103b157600080fd5b5061022d600435602435600160a060020a03604435166112af565b3480156103d857600080fd5b5061022d600435600160a060020a0360243516604435611355565b3480156103ff57600080fd5b506101f5600435600160a060020a0360243516611390565b34801561042357600080fd5b506101f5600435600160a060020a0360243516611679565b34801561044757600080fd5b5060408051608081810190925261048d916004803592600160a060020a03602435169236929160c491604490849083908390808284375093965061196295505050505050565b6040518082608080838360005b838110156104b257818101518382015260200161049a565b5050505090500191505060405180910390f35b3480156104d157600080fd5b5061022d600435600160a060020a03602435166044356119db565b3480156104f857600080fd5b506101f5600435600160a060020a0360243516611b8c565b34801561051c57600080fd5b50610257600160a060020a0360043516611ea6565b34801561053d57600080fd5b50610319600435600160a060020a0360243516611ec9565b34801561056157600080fd5b5061022d611ef7565b600360205260009081526040902080546001820154600290920154909190600160a060020a031683565b60026020818152600093845260408085209091529183529120805460018201549282015460038301546004840154600585015460068601546007870154600888015460099098015496989795969495600160a060020a03948516959394909216929091908a565b60006106056120cb565b600160a060020a0383811660009081526002602081815260408084208985528252808420815161016081018352815481526001820154938101939093529283015482820152600383015460608301526004808401548616608080850191909152600585015460a0850152600685015490961660c0840152600784015460e08401526008840154610100840152600984015461012084015281519586019182905293948594859485949390926101408501929091600a8501919082845b8154815260200190600101908083116106c15750505091909252505050600160a060020a03881660009081526002602090815260408083208c8452909152902060098101549196509450151561071657600080fd5b610722888860006119db565b92506000846002018190555084604001518302905060008113156108635786600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561077e57600080fd5b505af1158015610792573d6000803e3d6000fd5b505050506040513d60208110156107a857600080fd5b505160c0860151604080517feaf994b200000000000000000000000000000000000000000000000000000000815260048101859052600160a060020a0392831660248201528a831660448201529051919092169163eaf994b29160648083019260209291908290030181600087803b15801561082357600080fd5b505af1158015610837573d6000803e3d6000fd5b505050506040513d602081101561084d57600080fd5b5051151561085a57600080fd5b6001915061098e565b600081121561098e5786600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156108aa57600080fd5b505af11580156108be573d6000803e3d6000fd5b505050506040513d60208110156108d457600080fd5b505160c0860151604080517f6e94d27800000000000000000000000000000000000000000000000000000000815260008581036004830152600160a060020a0393841660248301528b8416604483015291519290931692636e94d2789260648083019360209383900390910190829087803b15801561095257600080fd5b505af1158015610966573d6000803e3d6000fd5b505050506040513d602081101561097c57600080fd5b5051151561098957600080fd5b600191505b81156109fd576109ad83600a860160005b01549063ffffffff611efd16565b600a85015560c0850151604080518381529051600160a060020a03928316928b92908b16917feab8bc4bf2fd6ce5634b8e75023e0e48367e68249ce2aa2c0ef7c0efe5648bee9181900360200190a45b604085015160028501559094508490505050505092915050565b600160a060020a03811660009081526002602090815260408083208584529091529020600501545b92915050565b600054600160a060020a03163314610a5c57600080fd5b600155565b600033600382610a7086611f0a565b8152602081019190915260400160002060020154600160a060020a031614610a9757600080fd5b600160a060020a038316600090815260026020908152604080832087845290915290206009015415610ac857600080fd5b600160a060020a038381166000908152600260209081526040808320888452909152902060060154161515610afc57600080fd5b8160011415610b3057600160a060020a03831660009081526002602090815260408083208784529091529020426009909101555b6040805183815290518591600160a060020a038616917fd2632e80f5364f02aded1c64e8a04637b7c8bb9c2db2bedf4b6ac47c013acbc09181900360200190a35060019392505050565b600160a060020a03166000908152600260209081526040808320938352929052206009015490565b600080610bb08585856112af565b6000818152600360205260409020958655600186019490945550506002909201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03939093169290921790915590565b600160a060020a03166000908152600260209081526040808320938352929052206003015490565b600054600160a060020a03163314610c3e57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031681565b6000610cac612140565b600080610cb76120cb565b606088015160001080610cce575060808801516001145b1515610d6157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f706572696f644c656e67746820657175616c20302072657175697265206e756d60448201527f6265724f66506572696f647320746f2062652031000000000000000000000000606482015290519081900360840190fd5b60036000610d6e8d611f0a565b81526020808201929092526040908101600090812082516060810184528154808252600183015495820195909552600290910154600160a060020a0316928101929092529095501015610ec7578a600160a060020a031663e1758bd86040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610df957600080fd5b505af1158015610e0d573d6000803e3d6000fd5b505050506040513d6020811015610e2357600080fd5b50518451604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a038f811660248301526044820193909352905191909216916323b872dd9160648083019260209291908290030181600087803b158015610e9a57600080fd5b505af1158015610eae573d6000803e3d6000fd5b505050506040513d6020811015610ec457600080fd5b50505b60408085015160208087015183517f0905c9f9000000000000000000000000000000000000000000000000000000008152600260048201526024810191909152600160a060020a038f8116604483015230606483015233608483015293519390921692630905c9f99260a48082019392918290030181600087803b158015610f4e57600080fd5b505af1158015610f62573d6000803e3d6000fd5b505050506040513d6020811015610f7857600080fd5b50519250859150600160a060020a0382161515610f93573391505b60408051610160810182528b815289516020808301919091528183018c90528a01516060820152600160a060020a038981166080830152918a015160a082015290831660c082015260e081018960036020908102919091015182520189600460200201518152602001600081526020016080604051908101604052806000815260200160008152602001600081526020016000815250815250905080600260008d600160a060020a0316600160a060020a03168152602001908152602001600020600085600019166000191681526020019081526020016000206000820151816000019060001916905560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a815481600160a060020a030219169083600160a060020a0316021790555060a0820151816005015560c08201518160060160006101000a815481600160a060020a030219169083600160a060020a0316021790555060e082015181600701556101008201518160080155610120820151816009015561014082015181600a01906004611137929190612160565b509050508360400151600160a060020a031683600019168c600160a060020a03167f5b4cba14eb387b69d923b37c2989ce3da21ca17cfebd07644b8b7ff1f4cec7df8d8d8d8d8960405180866000191660001916815260200185815260200184600560200280838360005b838110156111ba5781810151838201526020016111a2565b5050505090500183600160a060020a0316600160a060020a0316815260200182600160a060020a0316600160a060020a031681526020019550505050505060405180910390a460408085015181517f339e23d100000000000000000000000000000000000000000000000000000000815260048101869052600160248201523360448201529151600160a060020a039091169163339e23d19160648083019260209291908290030181600087803b15801561127457600080fd5b505af1158015611288573d6000803e3d6000fd5b505050506040513d602081101561129e57600080fd5b50929b9a5050505050505050505050565b6040805160208082018590528183018690526c01000000000000000000000000600160a060020a038516026060830152825160548184030181526074909201928390528151600093918291908401908083835b602083106113215780518252601f199092019160209182019101611302565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120979650505050505050565b600160a060020a03821660009081526002602090815260408083208684529091528120600a01826004811061138657fe5b0154949350505050565b600061139a6120cb565b600160a060020a0383811660009081526002602081815260408084208985528252808420815161016081018352815481526001820154938101939093529283015482820152600383015460608301526004808401548616608080850191909152600585015460a0850152600685015490961660c0840152600784015460e08401526008840154610100840152600984015461012084015281519586019182905293948594859485949390926101408501929091600a8501919082845b8154815260200190600101908083116114565750505091909252505050600160a060020a03881660009081526002602090815260408083208c845290915290206009810154919650945015156114ab57600080fd5b6114b7888860016119db565b6000600186015560208601519093506114d790849063ffffffff61201316565b9050600081111561165f5786600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561152057600080fd5b505af1158015611534573d6000803e3d6000fd5b505050506040513d602081101561154a57600080fd5b505160c0860151604080517f6407e43200000000000000000000000000000000000000000000000000000000815260048101859052600160a060020a0392831660248201528a8316604482015290519190921691636407e4329160648083019260209291908290030181600087803b1580156115c557600080fd5b505af11580156115d9573d6000803e3d6000fd5b505050506040513d60208110156115ef57600080fd5b505115156115fc57600080fd5b61160b83600a8601600161099f565b600b85015560c085015160408051838152905160019450600160a060020a03928316928b92908b16917f13f7471cab9806ac4ff5d80ae879babfbf1081e240d05c4450b75f69c626cb2e9181900360200190a45b602085015160018501559094508490505050505092915050565b60006116836120cb565b600160a060020a0383811660009081526002602081815260408084208985528252808420815161016081018352815481526001820154938101939093529283015482820152600383015460608301526004808401548616608080850191909152600585015460a0850152600685015490961660c0840152600784015460e08401526008840154610100840152600984015461012084015281519586019182905293948594859485949390926101408501929091600a8501919082845b81548152602001906001019080831161173f5750505091909252505050600160a060020a03881660009081526002602090815260408083208c8452909152902060098101549196509450151561179457600080fd5b6117a0888860026119db565b6000600386015560608601519093506117c090849063ffffffff61201316565b905060008111156119485786600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561180957600080fd5b505af115801561181d573d6000803e3d6000fd5b505050506040513d602081101561183357600080fd5b505160c0860151604080517f634965da00000000000000000000000000000000000000000000000000000000815260048101859052600160a060020a0392831660248201528a831660448201529051919092169163634965da9160648083019260209291908290030181600087803b1580156118ae57600080fd5b505af11580156118c2573d6000803e3d6000fd5b505050506040513d60208110156118d857600080fd5b505115156118e557600080fd5b6118f483600a8601600261099f565b600c85015560c085015160408051838152905160019450600160a060020a03928316928b92908b16917f7dd55ea53ce2c347b544c257b778e1dd6638f232fa6b94320e740440e72b4b879181900360200190a45b606085015160038501559094508490505050505092915050565b61196a61219e565b8151156119805761197b84846105fb565b151581525b60208201511561199c576119948484611390565b151560208201525b6040820151156119b8576119b08484611679565b151560408201525b6060820151156119d4576119cc8484611b8c565b151560608201525b9392505050565b60006119e56120cb565b600160a060020a0384811660009081526002602081815260408084208a85528252808420815161016081018352815481526001820154938101939093529283015482820152600383015460608301526004808401548616608080850191909152600585015460a0850152600685015490961660c0840152600784015460e08401526008840154610100840152600984015461012084015281519586019182905293948594929392610140850192600a8501919082845b815481526020019060010190808311611a9b57505050505081525050925082610120015160001415611ad05760009350611b82565b60008360e001511115611b065760e0830151610120840151611af990429063ffffffff61203c16565b811515611b0257fe5b0491505b60e08301511580611b1c57508261010001518210155b15611b5457610140830151611b4d908660048110611b3657fe5b60200201516101008501519063ffffffff61203c16565b9050611b7e565b610140830151611b7b908660048110611b6957fe5b6020020151839063ffffffff61203c16565b90505b8093505b5050509392505050565b6000611b966120cb565b600160a060020a0383811660009081526002602081815260408084208985528252808420815161016081018352815481526001820154938101939093529283015482820152600383015460608301526004808401548616608080850191909152600585015460a0850152600685015490961660c0840152600784015460e08401526008840154610100840152600984015461012084015281519586019182905293948594859485949390926101408501929091600a8501919082845b815481526020019060010190808311611c525750505091909252505050600160a060020a03881660009081526002602090815260408083208c84529091529020600981015491965094501515611ca757600080fd5b611cb3888860036119db565b600060058601556004850154909350600160a060020a031615801590611cdd575060008560a00151115b15611e8c5760a0850151611cf890849063ffffffff61201316565b90506000811115611e8c5786600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611d4157600080fd5b505af1158015611d55573d6000803e3d6000fd5b505050506040513d6020811015611d6b57600080fd5b5051608086015160c0870151604080517fb9a04cdd000000000000000000000000000000000000000000000000000000008152600160a060020a0393841660048201529183166024830152604482018590528a8316606483015251919092169163b9a04cdd9160848083019260209291908290030181600087803b158015611df257600080fd5b505af1158015611e06573d6000803e3d6000fd5b505050506040513d6020811015611e1c57600080fd5b50511515611e2957600080fd5b611e3883600a8601600361099f565b600d85015560c085015160408051838152905160019450600160a060020a03928316928b92908b16917f5a66e28cdcd3bc22082d9f07be2b6bed5f50f349e5d89f655d750ecdd19883749181900360200190a45b60a085015160058501559094508490505050505092915050565b600054600160a060020a03163314611ebd57600080fd5b611ec68161204e565b50565b600160a060020a03908116600090815260026020908152604080832094835293905291909120600401541690565b60015481565b81810182811015610a3f57fe5b600081600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611f4a57600080fd5b505af1158015611f5e573d6000803e3d6000fd5b505050506040513d6020811015611f7457600080fd5b5051604080517f1c4d5608000000000000000000000000000000000000000000000000000000008152306004820152600160a060020a03858116602483015291519190921691631c4d56089160448083019260209291908290030181600087803b158015611fe157600080fd5b505af1158015611ff5573d6000803e3d6000fd5b505050506040513d602081101561200b57600080fd5b505192915050565b600082151561202457506000610a3f565b5081810281838281151561203457fe5b0414610a3f57fe5b60008282111561204857fe5b50900390565b600160a060020a038116151561206357600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6101c060405190810160405280600080191681526020016000815260200160008152602001600081526020016000600160a060020a03168152602001600081526020016000600160a060020a0316815260200160008152602001600081526020016000815260200161213b61219e565b905290565b604080516060810182526000808252602082018190529181019190915290565b826004810192821561218e579160200282015b8281111561218e578251825591602001919060010190612173565b5061219a9291506121bd565b5090565b6080604051908101604052806004906020820280388339509192915050565b6121d791905b8082111561219a57600081556001016121c3565b905600a165627a7a72305820971fab3243ea0d86679af134694e44a8ce5fb2ab154da558946bbff6e4fe29ff0029"
}