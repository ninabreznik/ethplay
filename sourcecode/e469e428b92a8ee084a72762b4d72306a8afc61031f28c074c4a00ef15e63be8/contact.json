{
  "address": "0xa13db2f412cef4b4186ed1d2d12c9ec16bde82f4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GameV001",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-04\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner public {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\n/// @title AccessByGame\ncontract AccessByGame is Pausable, Claimable {\n  mapping(address => bool) internal contractAccess;\n\n  modifier onlyAccessByGame {\n    require(!paused && (msg.sender == owner || contractAccess[msg.sender] == true));\n    _;\n  }\n\n  function grantAccess(address _address)\n    onlyOwner\n    public\n  {\n    contractAccess[_address] = true;\n  }\n\n  function revokeAccess(address _address)\n    onlyOwner\n    public\n  {\n    contractAccess[_address] = false;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title ERC827 interface, an extension of ERC20 token standard\n *\n * @dev Interface of a ERC827 token, following the ERC20 standard with extra\n * @dev methods to transfer value and data and execute calls in transfers and\n * @dev approvals.\n */\ncontract ERC827 is ERC20 {\n  function approveAndCall(\n    address _spender,\n    uint256 _value,\n    bytes _data\n  )\n    public\n    payable\n    returns (bool);\n\n  function transferAndCall(\n    address _to,\n    uint256 _value,\n    bytes _data\n  )\n    public\n    payable\n    returns (bool);\n\n  function transferFromAndCall(\n    address _from,\n    address _to,\n    uint256 _value,\n    bytes _data\n  )\n    public\n    payable\n    returns (bool);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract ERC827Caller {\n  function makeCall(address _target, bytes _data) external payable returns (bool) {\n    // solium-disable-next-line security/no-call-value\n    return _target.call.value(msg.value)(_data);\n  }\n}\n\n/**\n * @title ERC827, an extension of ERC20 token standard\n *\n * @dev Implementation the ERC827, following the ERC20 standard with extra\n * @dev methods to transfer value and data and execute calls in transfers and\n * @dev approvals.\n *\n * @dev Uses OpenZeppelin StandardToken.\n */\ncontract ERC827Token is ERC827, StandardToken {\n  ERC827Caller internal caller_;\n\n  constructor() public {\n    caller_ = new ERC827Caller();\n  }\n\n  /**\n   * @dev Addition to ERC20 token methods. It allows to\n   * @dev approve the transfer of value and execute a call with the sent data.\n   *\n   * @dev Beware that changing an allowance with this method brings the risk that\n   * @dev someone may use both the old and the new allowance by unfortunate\n   * @dev transaction ordering. One possible solution to mitigate this race condition\n   * @dev is to first reduce the spender's allowance to 0 and set the desired value\n   * @dev afterwards:\n   * @dev https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * @param _spender The address that will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   * @param _data ABI-encoded contract call to call `_to` address.\n   *\n   * @return true if the call function was executed successfully\n   */\n  function approveAndCall(\n    address _spender,\n    uint256 _value,\n    bytes _data\n  )\n    public\n    payable\n    returns (bool)\n  {\n    require(_spender != address(this));\n\n    super.approve(_spender, _value);\n\n    // solium-disable-next-line security/no-call-value\n    require(caller_.makeCall.value(msg.value)(_spender, _data));\n\n    return true;\n  }\n\n  /**\n   * @dev Addition to ERC20 token methods. Transfer tokens to a specified\n   * @dev address and execute a call with the sent data on the same transaction\n   *\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   * @param _data ABI-encoded contract call to call `_to` address.\n   *\n   * @return true if the call function was executed successfully\n   */\n  function transferAndCall(\n    address _to,\n    uint256 _value,\n    bytes _data\n  )\n    public\n    payable\n    returns (bool)\n  {\n    require(_to != address(this));\n\n    super.transfer(_to, _value);\n\n    // solium-disable-next-line security/no-call-value\n    require(caller_.makeCall.value(msg.value)(_to, _data));\n    return true;\n  }\n\n  /**\n   * @dev Addition to ERC20 token methods. Transfer tokens from one address to\n   * @dev another and make a contract call on the same transaction\n   *\n   * @param _from The address which you want to send tokens from\n   * @param _to The address which you want to transfer to\n   * @param _value The amout of tokens to be transferred\n   * @param _data ABI-encoded contract call to call `_to` address.\n   *\n   * @return true if the call function was executed successfully\n   */\n  function transferFromAndCall(\n    address _from,\n    address _to,\n    uint256 _value,\n    bytes _data\n  )\n    public payable returns (bool)\n  {\n    require(_to != address(this));\n\n    super.transferFrom(_from, _to, _value);\n\n    // solium-disable-next-line security/no-call-value\n    require(caller_.makeCall.value(msg.value)(_to, _data));\n    return true;\n  }\n\n  /**\n   * @dev Addition to StandardToken methods. Increase the amount of tokens that\n   * @dev an owner allowed to a spender and execute a call with the sent data.\n   *\n   * @dev approve should be called when allowed[_spender] == 0. To increment\n   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n   * @dev the first transaction is mined)\n   * @dev From MonolithDAO Token.sol\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   * @param _data ABI-encoded contract call to call `_spender` address.\n   */\n  function increaseApprovalAndCall(\n    address _spender,\n    uint _addedValue,\n    bytes _data\n  )\n    public\n    payable\n    returns (bool)\n  {\n    require(_spender != address(this));\n\n    super.increaseApproval(_spender, _addedValue);\n\n    // solium-disable-next-line security/no-call-value\n    require(caller_.makeCall.value(msg.value)(_spender, _data));\n\n    return true;\n  }\n\n  /**\n   * @dev Addition to StandardToken methods. Decrease the amount of tokens that\n   * @dev an owner allowed to a spender and execute a call with the sent data.\n   *\n   * @dev approve should be called when allowed[_spender] == 0. To decrement\n   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n   * @dev the first transaction is mined)\n   * @dev From MonolithDAO Token.sol\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   * @param _data ABI-encoded contract call to call `_spender` address.\n   */\n  function decreaseApprovalAndCall(\n    address _spender,\n    uint _subtractedValue,\n    bytes _data\n  )\n    public\n    payable\n    returns (bool)\n  {\n    require(_spender != address(this));\n\n    super.decreaseApproval(_spender, _subtractedValue);\n\n    // solium-disable-next-line security/no-call-value\n    require(caller_.makeCall.value(msg.value)(_spender, _data));\n\n    return true;\n  }\n\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    hasMintPermission\n    canMint\n    public\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n/// @title EverGold\n/// @dev ERC827 Token for games.\ncontract EverGold is ERC827Token, MintableToken, AccessByGame {\n  string public constant name = \"Ever Gold\";\n  string public constant symbol = \"EG\";\n  uint8 public constant decimals = 0;\n\n/**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    onlyAccessByGame\n    canMint\n    public\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n  function transfer(address _to, uint256 _value)\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value)\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function approveAndCall(\n    address _spender,\n    uint256 _value,\n    bytes _data\n  )\n    public\n    payable\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approveAndCall(_spender, _value, _data);\n  }\n\n  function transferAndCall(\n    address _to,\n    uint256 _value,\n    bytes _data\n  )\n    public\n    payable\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferAndCall(_to, _value, _data);\n  }\n\n  function transferFromAndCall(\n    address _from,\n    address _to,\n    uint256 _value,\n    bytes _data\n  )\n    public\n    payable\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFromAndCall(_from, _to, _value, _data);\n  }\n\n  function increaseApprovalAndCall(\n    address _spender,\n    uint _addedValue,\n    bytes _data\n  )\n    public\n    payable\n    whenNotPaused\n    returns (bool)\n  {\n    return super.increaseApprovalAndCall(_spender, _addedValue, _data);\n  }\n\n  function decreaseApprovalAndCall(\n    address _spender,\n    uint _subtractedValue,\n    bytes _data\n  )\n    public\n    payable\n    whenNotPaused\n    returns (bool)\n  {\n    return super.decreaseApprovalAndCall(_spender, _subtractedValue, _data);\n  }\n}\n\nlibrary StringLib {\n  function generateName(bytes16 _s, uint256 _len, uint256 _n)\n    public\n    pure\n    returns (bytes16 ret)\n  {\n    uint256 v = _n;\n    bytes16 num = 0;\n    while (v > 0) {\n      num = bytes16(uint(num) / (2 ** 8));\n      num |= bytes16(((v % 10) + 48) * 2 ** (8 * 15));\n      v /= 10;\n    }\n    ret = _s | bytes16(uint(num) / (2 ** (8 * _len)));\n    return ret;\n  }\n}\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic {\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 _tokenId\n  );\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 _tokenId\n  );\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId)\n    public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator)\n    public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n    public;\n\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public;\n}\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC721Basic {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256 _tokenId);\n\n  function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n  function name() public view returns (string _name);\n  function symbol() public view returns (string _symbol);\n  function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   *  as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(addr) }\n    return size > 0;\n  }\n\n}\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n *  from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   *  after a `safetransfer`. This function MAY throw to revert and reject the\n   *  transfer. This function MUST use 50,000 gas or less. Return of other\n   *  than the magic value MUST result in the transaction being reverted.\n   *  Note: the contract address is always the message sender.\n   * @param _from The sending address\n   * @param _tokenId The NFT identifier which is being transfered\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _from,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    returns(bytes4);\n}\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721BasicToken is ERC721Basic {\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) internal tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) internal ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  /**\n   * @dev Guarantees msg.sender is owner of the given token\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n   */\n  modifier onlyOwnerOf(uint256 _tokenId) {\n    require(ownerOf(_tokenId) == msg.sender);\n    _;\n  }\n\n  /**\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n   * @param _tokenId uint256 ID of the token to validate\n   */\n  modifier canTransfer(uint256 _tokenId) {\n    require(isApprovedOrOwner(msg.sender, _tokenId));\n    _;\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(_owner != address(0));\n    return ownedTokensCount[_owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param _tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function exists(uint256 _tokenId) public view returns (bool) {\n    address owner = tokenOwner[_tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * @dev The zero address indicates there is no approved address.\n   * @dev There can only be one approved address per token at a given time.\n   * @dev Can only be called by the token owner or an approved operator.\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId) public {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n      tokenApprovals[_tokenId] = _to;\n      emit Approval(owner, _to, _tokenId);\n    }\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param _to operator address to set the approval\n   * @param _approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address _to, bool _approved) public {\n    require(_to != msg.sender);\n    operatorApprovals[msg.sender][_to] = _approved;\n    emit ApprovalForAll(msg.sender, _to, _approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return operatorApprovals[_owner][_operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * @dev Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    require(_from != address(0));\n    require(_to != address(0));\n\n    clearApproval(_from, _tokenId);\n    removeTokenFrom(_from, _tokenId);\n    addTokenTo(_to, _tokenId);\n\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\n   *  which is called upon a safe transfer, and return the magic value\n   *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\n   *  the transfer is reverted.\n   * @dev Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\n   *  which is called upon a safe transfer, and return the magic value\n   *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\n   *  the transfer is reverted.\n   * @dev Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    transferFrom(_from, _to, _tokenId);\n    // solium-disable-next-line arg-overflow\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function isApprovedOrOwner(\n    address _spender,\n    uint256 _tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(_tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      _spender == owner ||\n      getApproved(_tokenId) == _spender ||\n      isApprovedForAll(owner, _spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * @dev Reverts if the given token ID already exists\n   * @param _to The address that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addTokenTo(_to, _tokenId);\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * @dev Reverts if the token does not exist\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    clearApproval(_owner, _tokenId);\n    removeTokenFrom(_owner, _tokenId);\n    emit Transfer(_owner, address(0), _tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * @dev Reverts if the given address is not indeed the owner of the token\n   * @param _owner owner of the token\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function clearApproval(address _owner, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _owner);\n    if (tokenApprovals[_tokenId] != address(0)) {\n      tokenApprovals[_tokenId] = address(0);\n      emit Approval(_owner, address(0), _tokenId);\n    }\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _from);\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n    tokenOwner[_tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * @dev The call is not executed if the target address is not a contract\n   * @param _from address representing the previous owner of the given token ID\n   * @param _to target address that will receive the tokens\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallSafeTransfer(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_to.isContract()) {\n      return true;\n    }\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\n      _from, _tokenId, _data);\n    return (retval == ERC721_RECEIVED);\n  }\n}\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Token is ERC721, ERC721BasicToken {\n  // Token name\n  string internal name_;\n\n  // Token symbol\n  string internal symbol_;\n\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) internal ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) internal ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] internal allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) internal allTokensIndex;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) internal tokenURIs;\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string _name, string _symbol) public {\n    name_ = _name;\n    symbol_ = _symbol;\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() public view returns (string) {\n    return name_;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() public view returns (string) {\n    return symbol_;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * @dev Throws if the token ID does not exist. May return an empty string.\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string) {\n    require(exists(_tokenId));\n    return tokenURIs[_tokenId];\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param _owner address owning the tokens list to be accessed\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(_index < balanceOf(_owner));\n    return ownedTokens[_owner][_index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * @dev Reverts if the index is greater or equal to the total number of tokens\n   * @param _index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\n    require(_index < totalSupply());\n    return allTokens[_index];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * @dev Reverts if the token ID does not exist\n   * @param _tokenId uint256 ID of the token to set its URI\n   * @param _uri string URI to assign\n   */\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n    require(exists(_tokenId));\n    tokenURIs[_tokenId] = _uri;\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    super.addTokenTo(_to, _tokenId);\n    uint256 length = ownedTokens[_to].length;\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    super.removeTokenFrom(_from, _tokenId);\n\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n    ownedTokens[_from][lastTokenIndex] = 0;\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokens[_from].length--;\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * @dev Reverts if the given token ID already exists\n   * @param _to address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    super._mint(_to, _tokenId);\n\n    allTokensIndex[_tokenId] = allTokens.length;\n    allTokens.push(_tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * @dev Reverts if the token does not exist\n   * @param _owner owner of the token to burn\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    super._burn(_owner, _tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\n      delete tokenURIs[_tokenId];\n    }\n\n    // Reorg all tokens array\n    uint256 tokenIndex = allTokensIndex[_tokenId];\n    uint256 lastTokenIndex = allTokens.length.sub(1);\n    uint256 lastToken = allTokens[lastTokenIndex];\n\n    allTokens[tokenIndex] = lastToken;\n    allTokens[lastTokenIndex] = 0;\n\n    allTokens.length--;\n    allTokensIndex[_tokenId] = 0;\n    allTokensIndex[lastToken] = tokenIndex;\n  }\n\n}\n\ncontract CastleToken is ERC721Token, AccessByGame {\n  string constant NAME = \"Crypto Ninja Game Castle\";\n  string constant SYMBOL = \"CNC\";\n\n  uint256 constant MAX_WIDTH = 10;\n\n  uint8 constant LOG_SET = 0;\n  uint8 constant LOG_RESET = 1;\n  uint8 constant LOG_WIN = 2;\n  uint8 constant LOG_LOSS = 3;\n\n  struct Castle {\n    bytes16 name;\n    uint16 level;\n    uint32 exp;\n    uint8 width;\n    uint8 depth;\n    uint32 readyTime;\n    uint16 tryCount;\n    uint16 winCount;\n    uint16 lossCount;\n    uint8 levelPoint;\n    uint16 reward;\n  }\n\n  mapping (uint256 => bytes) internal traps;\n  mapping (uint256 => bytes32[]) internal logs;\n\n  EverGold internal goldToken;\n\n  uint8 public initWidth = 5;\n  uint8 public initDepth = 8;\n\n  uint256 public itemsPerPage = 10;\n\n  uint8 internal expOnSuccess = 3;\n  uint8 internal expOnFault = 1;\n  uint8 internal leveupExp = 10;\n\n  uint256 internal cooldownTime = 5 minutes;\n\n  Castle[] internal castles;\n\n  uint16 public price = 1000;\n\n  event NewCastle(uint256 castleid, uint256 width, uint256 depth);\n  event SetTraps(uint256 castleid);\n  event ResetTraps(uint256 castleid);\n  event UseTrap(uint256 castleid, uint256 path, uint256 trapIndex, uint256 power);\n\n  event AddLog(uint8 id, uint32 datetime, uint256 castleid, uint256 ninjaid, uint8 x, uint8 y, bool win);\n\n  constructor()\n    public\n    ERC721Token(NAME, SYMBOL)\n  {\n    castles.push(Castle({\n      name: \"DUMMY\", level: 0, exp: 0,\n      width: 0, depth: 0,\n      readyTime: 0,\n      tryCount: 0, winCount: 0, lossCount: 0,\n      levelPoint: 0,\n      reward: 0}));\n  }\n\n  function mint(address _beneficiary)\n    public\n    whenNotPaused\n    onlyAccessByGame\n    returns (bool)\n  {\n    require(_beneficiary != address(0));\n    return _create(_beneficiary, initWidth, initDepth);\n  }\n\n  function setTraps(\n    uint256 _castleid,\n    uint16 _reward,\n    bytes _traps)\n    public\n    whenNotPaused()\n    onlyAccessByGame\n    returns (bool)\n  {\n    require((_castleid > 0) && (_castleid < castles.length));\n    require(_reward > 0);\n    Castle storage castle = castles[_castleid];\n    castle.reward = _reward;\n    traps[_castleid] = _traps;\n\n    logs[_castleid].push(_generateLog(uint32(now), LOG_SET, 0, 0, 0, 0));\n\n    emit SetTraps(_castleid);\n\n    return true;\n  }\n\n  function resetTraps(uint256 _castleid)\n    public\n    onlyAccessByGame\n    returns (bool)\n  {\n    require((_castleid > 0) && (_castleid < castles.length));\n    Castle storage castle = castles[_castleid];\n    for (uint256 i = 0; i < castle.width * castle.depth; i++) {\n      traps[_castleid][i] = byte(0);\n    }\n    castle.reward = 0;\n    logs[_castleid].push(_generateLog(uint32(now), LOG_RESET, 0, 0, 0, 0));\n\n    emit ResetTraps(_castleid);\n\n    return true;\n  }\n\n  function win(\n    uint256 _castleid, uint256 _ninjaid, uint256 _path, bytes _steps, uint256 _count)\n    public\n    onlyAccessByGame\n    returns (bool)\n  {\n    require((_castleid > 0) && (_castleid < castles.length));\n    uint8 width = getWidth(_castleid);\n    for (uint256 i = 0; i < _count; i++) {\n      traps[_castleid][uint256(_steps[i])] = byte(0);\n    }\n    Castle storage castle = castles[_castleid];\n    castle.winCount++;\n    castle.exp += expOnSuccess;\n    castle.levelPoint += expOnSuccess;\n    _levelUp(castle);\n    logs[_castleid].push(\n      _generateLog(\n        uint32(now), LOG_WIN, uint32(_ninjaid),\n        uint8(_path % width), uint8(_path / width), 1\n      )\n    );\n\n    _triggerCooldown(_castleid);\n\n    return true;\n  }\n\n  function lost(uint256 _castleid, uint256 _ninjaid)\n    public\n    onlyAccessByGame\n    returns (bool)\n  {\n    require((_castleid > 0) && (_castleid < castles.length));\n    Castle storage castle = castles[_castleid];\n    castle.reward = 0;\n    castle.lossCount++;\n    castle.exp += expOnFault;\n    castle.levelPoint += expOnFault;\n    _levelUp(castle);\n\n    logs[_castleid].push(_generateLog(uint32(now), LOG_LOSS, uint32(_ninjaid), 0, 0, 0));\n\n    resetTraps(_castleid);\n\n    _triggerCooldown(_castleid);\n\n    return true;\n  }\n\n  function setName(uint256 _castleid, bytes16 _newName)\n    external\n    onlyOwnerOf(_castleid)\n  {\n    castles[_castleid].name = _newName;\n  }\n\n  function setGoldContract(address _goldTokenAddress)\n    public\n    onlyOwner\n  {\n    require(_goldTokenAddress != address(0));\n\n    goldToken = EverGold(_goldTokenAddress);\n  }\n\n  function setFee(uint16 _price)\n    external\n    onlyOwner\n  {\n    price = _price;\n  }\n\n  function setItemPerPage(uint16 _amount)\n    external\n    onlyOwner\n  {\n    itemsPerPage = _amount;\n  }\n\n  function setMaxCoordinate(uint256 _cooldownTime)\n    public\n    onlyOwner\n  {\n    cooldownTime = _cooldownTime;\n  }\n\n  function _create(address _beneficiary, uint8 _width, uint8 _depth)\n    internal\n    onlyAccessByGame\n    returns (bool)\n  {\n    require(_beneficiary != address(0));\n    require((_width > 0) && (_depth > 0));\n    uint256 tokenid = castles.length;\n    bytes16 name = StringLib.generateName(\"CASTLE#\", 7, tokenid);\n\n    uint256 id = castles.push(Castle({\n      name: name, level: 1, exp: 0,\n      width: _width, depth: _depth,\n      readyTime: uint32(now + cooldownTime),\n      tryCount: 0, winCount: 0, lossCount: 0,\n      levelPoint: 0,\n      reward: 0})) - 1;\n\n    traps[id] = new bytes(_width * _depth);\n    _mint(_beneficiary, id);\n    emit NewCastle(id, _width, _depth);\n\n    return true;\n  }\n\n  function _levelUp(Castle storage _castle)\n    internal\n    onlyAccessByGame\n  {\n    if (_castle.levelPoint >= leveupExp) {\n      _castle.levelPoint -= leveupExp;\n      _castle.level++;\n    }\n  }\n\n  function _triggerCooldown(uint256 _castleid)\n    internal\n    onlyAccessByGame\n  {\n    require((_castleid > 0) && (_castleid < castles.length));\n    Castle storage castle = castles[_castleid];\n    castle.readyTime = uint32(now + cooldownTime);\n  }\n\n  function getAll()\n    external\n    view\n    returns (uint256[] result)\n  {\n    return allTokens;\n  }\n\n  function getOpen(uint256 _startIndex)\n    external\n    view\n    returns (uint256[] result)\n  {\n    uint256 n = 0;\n    uint256 i = 0;\n    for (i = _startIndex; i < castles.length; i++) {\n      Castle storage castle = castles[i];\n      if ((castle.reward > 0) &&\n          (ownerOf(i) != msg.sender)) {\n        n++;\n        if (n >= _startIndex) {\n          break;\n        }\n      }\n    }\n    uint256[] memory castleids = new uint256[](itemsPerPage + 1);\n    n = 0;\n    while (i < castles.length) {\n      castle = castles[i];\n      if ((castle.reward > 0) &&\n          (ownerOf(i) != msg.sender)) {\n        castleids[n++] = i;\n        if (n > itemsPerPage) {\n          break;\n        }\n      }\n      i++;\n    }\n    return castleids;\n  }\n\n  function getByOwner(address _owner)\n    external\n    view\n    returns (uint256[] result)\n  {\n    return ownedTokens[_owner];\n  }\n\n  function getInfo(uint256 _castleid)\n    external\n    view\n    returns (bytes16, uint16, uint32,\n      uint8, uint8, uint16, uint16,\n      uint16)\n  {\n    require((_castleid > 0) && (_castleid < castles.length));\n    Castle storage castle = castles[_castleid];\n    return (\n      castle.name,\n      castle.level,\n      castle.exp,\n      castle.width,\n      castle.depth,\n      castle.winCount,\n      castle.lossCount,\n      castle.reward);\n  }\n\n  function getLevel(uint256 _castleid)\n    external\n    view\n    returns (uint16)\n  {\n    Castle storage castle = castles[_castleid];\n    return castle.level;\n  }\n\n  function getLogs(uint256 _castleid)\n    external\n    view\n    returns (bytes32[])\n  {\n    require((_castleid > 0) && (_castleid < castles.length));\n    return logs[_castleid];\n  }\n\n  function getTrapInfo(uint256 _castleid)\n    external\n    view\n    returns (bytes)\n  {\n    require((ownerOf(_castleid) == msg.sender) || (contractAccess[msg.sender] == true));\n    return traps[_castleid];\n  }\n\n  function isReady(uint256 _castleid)\n    public\n    view\n    returns (bool)\n  {\n    require((_castleid > 0) && (_castleid < castles.length));\n    Castle storage castle = castles[_castleid];\n    return (castle.readyTime <= now);\n  }\n\n  function getReward(uint256 _castleid)\n    public\n    view\n    returns (uint16)\n  {\n    require((_castleid > 0) && (_castleid < castles.length));\n    Castle storage castle = castles[_castleid];\n    return castle.reward;\n  }\n\n  function getWidth(uint256 _castleid)\n    public\n    view\n    returns (uint8)\n  {\n    require((_castleid > 0) && (_castleid < castles.length));\n    Castle storage castle = castles[_castleid];\n    return castle.width;\n  }\n\n  function getTrapid(uint256 _castleid, uint8 _path)\n    public\n    onlyAccessByGame\n    view\n    returns (uint8)\n  {\n    return uint8(traps[_castleid][_path]);\n  }\n\n  function getPrice()\n    public\n    view\n    returns (uint256)\n  {\n    return price;\n  }\n\n  function _generateLog(\n    uint32 _datetime,\n    uint8 _id,\n    uint32 _ninjaid,\n    uint8 _x,\n    uint8 _y,\n    uint8 _win)\n    internal\n    pure\n    returns (bytes32)\n  {\n    return\n      bytes32(\n        (uint256(_datetime) * (2 ** (8 * 28))) |\n        (uint256(_id) * (2 ** (8 * 24))) |\n        (uint256(_ninjaid) * (2 ** (8 * 20))) |\n        (uint256(_x) * (2 ** (8 * 16))) |\n        (uint256(_y) * (2 ** (8 * 12))) |\n        (uint256(_win) * (2 ** (8 * 8))));\n  }\n}\n\ncontract ItemToken is AccessByGame {\n  struct Item {\n    bytes16 name;\n    uint16 price;\n    uint16 power;\n    bool enabled;\n  }\n\n  EverGold internal goldToken;\n\n  Item[] private items;\n\n  uint8 public itemKindCount = 0;\n\n  mapping (address => mapping (uint256 => uint256)) private ownedItems;\n\n  event NewItem(bytes32 name, uint16 price, uint16 power);\n  event UseItem(uint256 itemid, uint256 amount);\n\n  constructor()\n    public\n  {\n    addItem(\"None\", 0, 0, false);\n    addItem(\"Arrow\", 10, 10, true);\n    addItem(\"Tiger\", 30, 20, true);\n    addItem(\"Spear\", 50, 30, true);\n    addItem(\"Wood\", 50, 20, true);\n    addItem(\"Fire\", 50, 20, true);\n    addItem(\"Earth\", 50, 20, true);\n    addItem(\"Metal\", 50, 20, true);\n    addItem(\"Water\", 50, 20, true);\n  }\n\n  function setGoldContract(address _goldTokenAddress)\n    public\n    onlyOwner\n  {\n    require(_goldTokenAddress != address(0));\n\n    goldToken = EverGold(_goldTokenAddress);\n  }\n\n  function buy(address _to, uint256 _itemid, uint256 _amount)\n    public\n    onlyAccessByGame\n    whenNotPaused\n    returns (bool)\n  {\n    require(_amount > 0);\n    require(_itemid > 0 && _itemid < itemKindCount);\n    ownedItems[_to][_itemid] += _amount;\n\n    return true;\n  }\n\n  function useItem(address _owner, uint256 _itemid, uint256 _amount)\n    public\n    onlyAccessByGame\n    whenNotPaused\n    returns (bool)\n  {\n    require(_amount > 0);\n    require((_itemid > 0) && (_itemid < itemKindCount));\n    require(_amount <= ownedItems[_owner][_itemid]);\n\n    ownedItems[_owner][_itemid] -= _amount;\n\n    emit UseItem(_itemid, _amount);\n\n    return true;\n  }\n\n  function addItem(bytes16 _name, uint16 _price, uint16 _power, bool _enabled)\n    public\n    onlyOwner()\n    returns (bool)\n  {\n    require(_name != 0x0);\n    items.push(Item({\n      name:_name,\n      price: _price,\n      power: _power,\n      enabled: _enabled\n      }));\n    itemKindCount++;\n\n    emit NewItem(_name, _price, _power);\n    return true;\n  }\n\n  function setItemAvailable(uint256 _itemid, bool _enabled)\n    public\n    onlyOwner()\n  {\n    require(_itemid > 0 && _itemid < itemKindCount);\n\n    items[_itemid].enabled = _enabled;\n  }\n\n  function getItemCounts()\n    public\n    view\n    returns (uint256[])\n  {\n    uint256[] memory itemCounts = new uint256[](itemKindCount);\n    for (uint256 i = 0; i < itemKindCount; i++) {\n      itemCounts[i] = ownedItems[msg.sender][i];\n    }\n    return itemCounts;\n  }\n\n  function getItemCount(uint256 _itemid)\n    public\n    view\n    returns (uint256)\n  {\n    require(_itemid > 0 && _itemid < itemKindCount);\n    return ownedItems[msg.sender][_itemid];\n  }\n\n  function getItemKindCount()\n    public\n    view\n    returns (uint256)\n  {\n    return itemKindCount;\n  }\n\n  function getItem(uint256 _itemid)\n    public\n    view\n    returns (bytes16 name, uint16 price, uint16 power, bool enabled)\n  {\n    require(_itemid < itemKindCount);\n    return (items[_itemid].name, items[_itemid].price, items[_itemid].power, items[_itemid].enabled);\n  }\n\n  function getPower(uint256 _itemid)\n    public\n    view\n    returns (uint16 power)\n  {\n    require(_itemid < itemKindCount);\n    return items[_itemid].power;\n  }\n\n  function getPrice(uint256 _itemid)\n    public\n    view\n    returns (uint16)\n  {\n    require(_itemid < itemKindCount);\n    return items[_itemid].price;\n  }\n}\n\ncontract NinjaToken is ERC721Token, AccessByGame {\n  string public constant NAME = \"Crypto Ninja Game Ninja\";\n  string public constant SYMBOL = \"CNN\";\n\n  event NewNinja(uint256 ninjaid, bytes16 name, bytes32 pattern);\n\n  struct Ninja {\n    bytes32 pattern;\n    bytes16 name;\n    uint16 level;\n    uint32 exp;\n    uint8 dna1;\n    uint8 dna2;\n    uint32 readyTime;\n    uint16 winCount;\n    uint8 levelPoint;\n    uint16 lossCount;\n    uint16 reward;\n    uint256 lastAttackedCastleid;\n  }\n\n  mapping (uint256 => bytes) private paths;\n\n  mapping (uint256 => bytes) private steps;\n\n  EverGold internal goldToken;\n\n  uint8 internal expOnSuccess = 3;\n  uint8 internal expOnFault = 1;\n  uint8 internal leveupExp = 10;\n\n  uint256 internal cooldownTime = 5 minutes;\n\n  uint256 internal maxCoordinate = 12;\n\n  Ninja[] internal ninjas;\n\n  uint256 private randNonce = 0;\n\n  uint8 public kindCount = 2;\n  uint32[] public COLORS = [\n    0xD7003A00,\n    0xF3980000,\n    0x00552E00,\n    0x19448E00,\n    0x543F3200,\n    0xE7609E00,\n    0xFFEC4700,\n    0x68BE8D00,\n    0x0095D900,\n    0xE9DFE500,\n    0xEE836F00,\n    0xF2F2B000,\n    0xAACF5300,\n    0x0A3AF00,\n    0xF8FBF800,\n    0xF4B3C200,\n    0x928C3600,\n    0xA59ACA00,\n    0xABCED800,\n    0x30283300,\n    0xFDEFF200,\n    0xDDBB9900,\n    0x74539900,\n    0xAA4C8F00\n  ];\n\n  uint256 public price = 1000;\n\n  constructor()\n      public\n      ERC721Token(NAME, SYMBOL)\n  {\n    ninjas.push(Ninja({\n      pattern: 0, name: \"DUMMY\", level: 0, exp: 0,\n      dna1: 0, dna2: 0,\n      readyTime: 0,\n      winCount: 0, lossCount: 0,\n      levelPoint:0, reward: 0,\n      lastAttackedCastleid: 0 }));\n  }\n\n  function mint(address _beneficiary)\n    public\n    whenNotPaused\n    onlyAccessByGame\n    returns (bool)\n  {\n    require(_beneficiary != address(0));\n    return _create(_beneficiary, 0, 0);\n  }\n\n  function burn(uint256 _tokenId) external onlyOwnerOf(_tokenId) {\n    super._burn(msg.sender, _tokenId);\n  }\n\n  function setPath(\n    uint256 _ninjaid,\n    uint256 _castleid,\n    bytes _path,\n    bytes _steps)\n    public\n    onlyAccessByGame\n  {\n    Ninja storage ninja = ninjas[_ninjaid];\n    ninja.lastAttackedCastleid = _castleid;\n    paths[_ninjaid] = _path;\n    steps[_ninjaid] = _steps;\n  }\n\n  function win(uint256 _ninjaid)\n    public\n    onlyAccessByGame\n    returns (bool)\n  {\n    Ninja storage ninja = ninjas[_ninjaid];\n    ninja.winCount++;\n    ninja.exp += expOnSuccess;\n    ninja.levelPoint += expOnSuccess;\n    _levelUp(ninja);\n\n    _triggerCooldown(_ninjaid);\n\n    return true;\n  }\n\n  function lost(uint256 _ninjaid)\n    public\n    onlyAccessByGame\n    returns (bool)\n  {\n    Ninja storage ninja = ninjas[_ninjaid];\n    ninja.lossCount++;\n    ninja.exp += expOnFault;\n    ninja.levelPoint += expOnFault;\n    _levelUp(ninja);\n\n    _triggerCooldown(_ninjaid);\n\n    return true;\n  }\n\n  function setName(uint256 _ninjaid, bytes16 _newName)\n    external\n    onlyOwnerOf(_ninjaid)\n  {\n    ninjas[_ninjaid].name = _newName;\n  }\n\n  function setGoldContract(address _goldTokenAddress)\n    public\n    onlyOwner\n  {\n    require(_goldTokenAddress != address(0));\n\n    goldToken = EverGold(_goldTokenAddress);\n  }\n\n  function setNinjaKindCount(uint8 _kindCount)\n    public\n    onlyOwner\n  {\n    kindCount = _kindCount;\n  }\n\n  function setPrice(uint16 _price)\n    public\n    onlyOwner\n  {\n    price = _price;\n  }\n\n  function setMaxCoordinate(uint16 _maxCoordinate)\n    public\n    onlyOwner\n  {\n    maxCoordinate = _maxCoordinate;\n  }\n\n  function setMaxCoordinate(uint256 _cooldownTime)\n    public\n    onlyOwner\n  {\n    cooldownTime = _cooldownTime;\n  }\n\n  function _create(address _beneficiary, uint8 _dna1, uint8 _dna2)\n    private\n    returns (bool)\n  {\n    bytes32 pattern = _generateInitialPattern();\n    uint256 tokenid = ninjas.length;\n    bytes16 name = StringLib.generateName(\"NINJA#\", 6, tokenid);\n\n    uint256 id = ninjas.push(Ninja({\n      pattern: pattern, name: name, level: 1, exp: 0,\n      dna1: _dna1, dna2: _dna2,\n      readyTime: uint32(now + cooldownTime),\n      winCount: 0, lossCount: 0,\n      levelPoint:0, reward: 0,\n      lastAttackedCastleid: 0})) - 1;\n    super._mint(_beneficiary, id);\n\n    emit NewNinja(id, name, pattern);\n\n    return true;\n  }\n\n  function _triggerCooldown(uint256 _ninjaid)\n    internal\n    onlyAccessByGame\n  {\n    Ninja storage ninja = ninjas[_ninjaid];\n    ninja.readyTime = uint32(now + cooldownTime);\n  }\n\n  function _levelUp(Ninja storage _ninja)\n    internal\n    onlyAccessByGame\n  {\n    if (_ninja.levelPoint >= leveupExp) {\n      _ninja.levelPoint -= leveupExp;\n      _ninja.level++;\n      if (_ninja.level == 2) {\n        _ninja.dna1 = uint8(_getRandom(6));\n      } else if (_ninja.level == 5) {\n        _ninja.dna2 = uint8(_getRandom(6));\n      }\n    }\n  }\n\n  function getByOwner(address _owner)\n    external\n    view\n    returns(uint256[] result)\n  {\n    return ownedTokens[_owner];\n  }\n\n  function getInfo(uint256 _ninjaid)\n    external\n    view\n    returns (bytes16, uint32, uint16, uint16, bytes32, uint8, uint8)\n  {\n    Ninja storage ninja = ninjas[_ninjaid];\n    return (ninja.name, ninja.level, ninja.winCount, ninja.lossCount, ninja.pattern,\n      ninja.dna1, ninja.dna2);\n  }\n\n  function getHp(uint256 _ninjaid)\n    public\n    view\n    returns (uint32)\n  {\n    Ninja storage ninja = ninjas[_ninjaid];\n    return uint32(100 + (ninja.level - 1) * 10);\n  }\n\n  function getDna1(uint256 _ninjaid)\n    public\n    view\n    returns (uint8)\n  {\n    Ninja storage ninja = ninjas[_ninjaid];\n    return ninja.dna1;\n  }\n\n  function getDna2(uint256 _ninjaid)\n    public\n    view\n    returns (uint8)\n  {\n    Ninja storage ninja = ninjas[_ninjaid];\n    return ninja.dna2;\n  }\n\n  function isReady(uint256 _ninjaid)\n    public\n    view\n    returns (bool)\n  {\n    Ninja storage ninja = ninjas[_ninjaid];\n    return (ninja.readyTime <= now);\n  }\n\n  function getReward(uint256 _ninjaid)\n    public\n    view\n    onlyOwnerOf(_ninjaid)\n    returns (uint16)\n  {\n    Ninja storage ninja = ninjas[_ninjaid];\n    return ninja.reward;\n  }\n\n  function getPath(uint256 _ninjaid)\n    public\n    view\n    onlyOwnerOf(_ninjaid)\n    returns (bytes path)\n  {\n    return paths[_ninjaid];\n  }\n\n  function getLastAttack(uint256 _ninjaid)\n    public\n    view\n    onlyOwnerOf(_ninjaid)\n    returns (uint256 castleid, bytes path)\n  {\n    Ninja storage ninja = ninjas[_ninjaid];\n    return (ninja.lastAttackedCastleid, paths[_ninjaid]);\n  }\n\n  function getAttr(bytes32 _pattern, uint256 _n)\n    internal\n    pure\n    returns (bytes4)\n  {\n    require(_n < 8);\n    uint32 mask = 0xffffffff;\n    return bytes4(uint256(_pattern) / (2 ** ((7 - _n) * 8)) & mask);\n  }\n\n  function _getRandom(uint256 _modulus)\n    internal\n    onlyAccessByGame\n    returns(uint32)\n  {\n    randNonce = randNonce.add(1);\n    return uint32(uint256(keccak256(abi.encodePacked(now, msg.sender, randNonce))) % _modulus);\n//    return uint8(uint256(keccak256(block.timestamp, block.difficulty))%251);\n  }\n\n  function _generateInitialPattern()\n    internal\n    onlyAccessByGame\n    returns (bytes32)\n  {\n    uint256 pattern = 0;\n\n    uint32 color = COLORS[(_getRandom(COLORS.length))];\n    for (uint256 i = 0; i < 8; i++) {\n      uint32 temp = color;\n      if (i == 1) {\n        temp |= _getRandom(2);\n      } else {\n        temp |= _getRandom(maxCoordinate);\n      }\n      pattern = pattern | (temp * 2 ** (8 * 4 * (7 - i)));\n    }\n    return bytes32(pattern);\n  }\n\n  function getPrice()\n    public\n    view\n    returns (uint256)\n  {\n    return price;\n  }\n}\n\ncontract UserToken is AccessByGame {\n  struct User {\n    string name;\n    uint32 registeredDate;\n  }\n\n  string constant public DEFAULT_NAME = \"NONAME\";\n\n  User[] private users;\n\n  uint256 public userCount = 0;\n\n  mapping (address => uint256) private ownerToUser;\n\n  constructor()\n    public\n  {\n    mint(msg.sender, \"OWNER\");\n  }\n\n  function mint(address _beneficiary, string _name)\n    public\n    onlyAccessByGame\n    whenNotPaused()\n    returns (bool)\n  {\n    require(_beneficiary != address(0));\n    require(ownerToUser[_beneficiary] == 0);\n\n    User memory user = User({\n      name: _name,\n      registeredDate: uint32(now)\n    });\n\n    uint256 id = users.push(user) - 1;\n\n    ownerToUser[_beneficiary] = id;\n\n    userCount++;\n\n    return true;\n  }\n\n  function setName(string _name)\n    public\n    whenNotPaused()\n    returns (bool)\n  {\n    require(bytes(_name).length > 1);\n    require(ownerToUser[msg.sender] != 0);\n\n    uint256 userid = ownerToUser[msg.sender];\n    users[userid].name = _name;\n\n    return true;\n  }\n\n  function getUserid(address _owner)\n    external\n    view\n    onlyAccessByGame\n    returns(uint256 result)\n  {\n    if (ownerToUser[_owner] == 0) {\n      return 0;\n    }\n    return ownerToUser[_owner];\n  }\n\n  function getUserInfo()\n    public\n    view\n    returns (uint256, string, uint32)\n  {\n    uint256 userid = ownerToUser[msg.sender];\n    return getUserInfoById(userid);\n  }\n\n  function getUserInfoById(uint256 _userid)\n    public\n    view\n    returns (uint256, string, uint32)\n  {\n    User storage user = users[_userid];\n    return (_userid, user.name, user.registeredDate);\n  }\n}\n\n/**\n * @title TokenDestructible:\n * @author Remco Bloemen <[email protected]π.com>\n * @dev Base contract that can be destroyed by owner. All funds in contract including\n * listed tokens will be sent to the owner.\n */\ncontract TokenDestructible is Ownable {\n\n  constructor() public payable { }\n\n  /**\n   * @notice Terminate contract and refund to owner\n   * @param tokens List of addresses of ERC20 or ERC20Basic token contracts to\n   refund.\n   * @notice The called token contracts could try to re-enter this contract. Only\n   supply token contracts you trust.\n   */\n  function destroy(address[] tokens) onlyOwner public {\n\n    // Transfer tokens to owner\n    for (uint256 i = 0; i < tokens.length; i++) {\n      ERC20Basic token = ERC20Basic(tokens[i]);\n      uint256 balance = token.balanceOf(this);\n      token.transfer(owner, balance);\n    }\n\n    // Transfer Eth to owner and terminate contract\n    selfdestruct(owner);\n  }\n}\n\ncontract GameV001 is AccessByGame, TokenDestructible {\n  using SafeMath for uint256;\n\n  uint8 constant INIT_WIDTH = 5;\n  uint8 constant INIT_DEPTH = 8;\n\n  UserToken private userToken;\n  EverGold private goldToken;\n  CastleToken private castleToken;\n  NinjaToken private ninjaToken;\n  ItemToken private itemToken;\n\n  struct AttackLog {\n    uint256 castleid;\n    uint16 reward;\n    uint32 hp;\n    uint8 path;\n    uint32 trapDamage;\n    bool dead;\n  }\n\n  mapping (uint256 => AttackLog[]) private attackLogs;\n  mapping (uint256 => uint256) private numAttackLogs;\n\n  event Attack(uint256 ninjaid, uint256 castleid, uint32 hp, uint8 path, uint32 trapDamage, uint32 damage);\n  event AttackStart(uint256 ninjaid, uint256 castleid, uint32 hp);\n  event AttackEnd(uint256 ninjaid, uint256 castleid, bool result);\n\n  constructor(\n    address _goldTokenAddress,\n    address _castleTokenAddress,\n    address _ninjaTokenAddress,\n    address _userTokenAddress,\n    address _itemTokenAddress)\n    public\n  {\n    require(_goldTokenAddress != address(0));\n    require(_castleTokenAddress != address(0));\n    require(_ninjaTokenAddress != address(0));\n    require(_userTokenAddress != address(0));\n    require(_itemTokenAddress != address(0));\n\n    goldToken = EverGold(_goldTokenAddress);\n    castleToken = CastleToken(_castleTokenAddress);\n    ninjaToken = NinjaToken(_ninjaTokenAddress);\n    userToken = UserToken(_userTokenAddress);\n    itemToken = ItemToken(_itemTokenAddress);\n  }\n\n  function  registerUser(string _name)\n    public\n    returns (bool)\n  {\n    require(msg.sender != address(0));\n    require(userToken.mint(msg.sender, _name));\n\n    return true;\n  }\n\n  function  buyNinja(address _beneficiary)\n    public\n    payable\n    returns (bool)\n  {\n    require(msg.sender != address(0));\n    uint256 price = ninjaToken.getPrice();\n    require(msg.value == price);\n    require(ninjaToken.mint(_beneficiary));\n\n    return true;\n  }\n\n  function buyCastle(address _beneficiary)\n    public\n    payable\n    returns (bool)\n  {\n    require(msg.sender != address(0));\n    uint256 price = castleToken.getPrice();\n    require(msg.value == price);\n    require(castleToken.mint(_beneficiary));\n\n    return true;\n  }\n\n  function buyItem(address _beneficiary, uint8 _itemid, uint256 _amount)\n    public\n    payable\n    returns (bool)\n  {\n    require(msg.sender != address(0));\n    uint16 price = itemToken.getPrice(_itemid);\n    uint256 totalPrice = price * _amount;\n    require(msg.value == totalPrice);\n    require(itemToken.buy(_beneficiary, _itemid, _amount));\n\n    return true;\n  }\n\n  function defence(\n    address _beneficiary,\n    uint256 _castleid,\n    uint16 _reward,\n    bytes _traps,\n    uint256[] _useTraps)\n    public\n    payable\n    whenNotPaused\n    returns (bool)\n  {\n    require(msg.value == _reward);\n\n    for (uint256 i = 1; i < _useTraps.length; i++) {\n      if (_useTraps[i] > 0) {\n        require(itemToken.useItem(_beneficiary, i, _useTraps[i]));\n      }\n    }\n    require(castleToken.setTraps(_castleid, _reward, _traps));\n\n    return true;\n  }\n\n  function addTraps(\n    uint256 _castleid,\n    bytes _traps,\n    uint256[] _useTraps)\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    require(castleToken.getReward(_castleid) > 0);\n    bytes memory traps = castleToken.getTrapInfo(_castleid);\n    for (uint256 i = 1; i < _useTraps.length; i++) {\n      if ((traps[i]) == 0 &&\n        (_useTraps[i] > 0)) {\n        require(itemToken.useItem(msg.sender, i, _useTraps[i]));\n      }\n    }\n    require(castleToken.setTraps(_castleid, castleToken.getReward(_castleid), _traps));\n    return true;\n  }\n\n  function attack(\n    uint256 _ninjaid,\n    uint256 _castleid,\n    bytes _path)\n    public\n    payable\n    whenNotPaused\n    returns (bool)\n  {\n    uint16 reward = castleToken.getReward(_castleid);\n    require(msg.value == reward / 2);\n\n    uint32 hp = ninjaToken.getHp(_ninjaid);\n\n    _clearAttackLog(_ninjaid);\n\n    bytes memory steps = new bytes(_path.length);\n    uint256 count = 0;\n    uint32 damage = 0;\n    for (uint256 i = 0; i < _path.length; i++) {\n      uint32 trapDamage = _computeDamage(_castleid, _ninjaid, uint8(_path[i]));\n      if (trapDamage > 0) {\n        steps[count++] = _path[i];\n        damage = damage + trapDamage;\n        if (hp <= damage) {\n          _insertAttackLog(_ninjaid, _castleid, reward, hp, uint8(_path[i]), trapDamage, true);\n          address castleOwner = castleToken.ownerOf(_castleid);\n          goldToken.transfer(castleOwner, reward / 2);\n          castleToken.win(_castleid, _ninjaid, uint256(_path[i]), steps, count);\n          ninjaToken.lost(_ninjaid);\n          ninjaToken.setPath(_ninjaid, _castleid, _path, steps);\n          emit AttackEnd(_ninjaid, _castleid, false);\n\n          return true;\n        }\n      }\n      _insertAttackLog(_ninjaid, _castleid, reward, hp, uint8(_path[i]), trapDamage, false);\n    }\n    require(goldToken.transfer(ninjaToken.ownerOf(_ninjaid), reward + reward / 2));\n    require(castleToken.lost(_castleid, _ninjaid));\n    require(ninjaToken.win(_ninjaid));\n    ninjaToken.setPath(_ninjaid, _castleid, _path, steps);\n    emit AttackEnd(_ninjaid, _castleid, true);\n    return true;\n  }\n\n  function _computeDamage(uint256 _castleid, uint256 _ninjaid, uint8 _itemid)\n    internal\n    view\n    returns (uint32)\n  {\n    uint32 trapPower = itemToken.getPower(castleToken.getTrapid(_castleid, uint8(_itemid)));\n    if (trapPower <= 0) {\n      return 0;\n    }\n    uint32 trapDamage = trapPower + castleToken.getLevel(_castleid) - 1;\n    uint8 dna1 = ninjaToken.getDna1(_ninjaid);\n    uint8 dna2 = ninjaToken.getDna2(_ninjaid);\n    if (_itemid == 1) {\n      if (dna1 == 4) {\n        trapDamage *= 2;\n      }\n      if (dna2 == 4) {\n        trapDamage *= 2;\n      }\n      if (dna1 == 3) {\n        trapDamage /= 2;\n      }\n      if (dna2 == 3) {\n        trapDamage /= 2;\n      }\n    } else if (_itemid == 2) {\n      if (dna1 == 5) {\n        trapDamage *= 2;\n      }\n      if (dna2 == 5) {\n        trapDamage *= 2;\n      }\n      if (dna1 == 4) {\n        trapDamage /= 2;\n      }\n      if (dna2 == 4) {\n        trapDamage /= 2;\n      }\n    } else if (_itemid == 3) {\n      if (dna1 == 1) {\n        trapDamage *= 2;\n      }\n      if (dna2 == 1) {\n        trapDamage *= 2;\n      }\n      if (dna1 == 5) {\n        trapDamage /= 2;\n      }\n      if (dna2 == 5) {\n        trapDamage /= 2;\n      }\n    } else if (_itemid == 4) {\n      if (dna1 == 2) {\n        trapDamage *= 2;\n      }\n      if (dna2 == 2) {\n        trapDamage *= 2;\n      }\n      if (dna1 == 1) {\n        trapDamage /= 2;\n      }\n      if (dna2 == 1) {\n        trapDamage /= 2;\n      }\n    } else if (_itemid == 5) {\n      if (dna1 == 3) {\n        trapDamage *= 2;\n      }\n      if (dna2 == 3) {\n        trapDamage *= 2;\n      }\n      if (dna1 == 2) {\n        trapDamage /= 2;\n      }\n      if (dna2 == 2) {\n        trapDamage /= 2;\n      }\n    }\n    return trapDamage;\n  }\n\n  function _insertAttackLog(\n    uint256 _ninjaid,\n    uint256 _castleid,\n    uint16 _reward,\n    uint32 _hp,\n    uint8 _path,\n    uint32 _trapDamage,\n    bool _dead)\n    private\n  {\n    if(numAttackLogs[_ninjaid] == attackLogs[_ninjaid].length) {\n      attackLogs[_ninjaid].length += 1;\n    }\n    AttackLog memory log = AttackLog(_castleid, _reward, _hp, _path, _trapDamage, _dead);\n    attackLogs[_ninjaid][numAttackLogs[_ninjaid]++] = log;\n  }\n\n  function _clearAttackLog(uint256 _ninjaid)\n    private\n  {\n    numAttackLogs[_ninjaid] = 0;\n  }\n\n  function setGoldContract(address _goldTokenAddress)\n    public\n    onlyOwner\n  {\n    require(_goldTokenAddress != address(0));\n\n    goldToken = EverGold(_goldTokenAddress);\n  }\n\n  function setCastleContract(address _castleTokenAddress)\n    public\n    onlyOwner\n  {\n    require(_castleTokenAddress != address(0));\n\n    castleToken = CastleToken(_castleTokenAddress);\n  }\n\n  function setNinjaContract(address _ninjaTokenAddress)\n    public\n    onlyOwner\n  {\n    require(_ninjaTokenAddress != address(0));\n\n    ninjaToken = NinjaToken(_ninjaTokenAddress);\n  }\n\n  function setItemContract(address _itemTokenAddress)\n    public\n    onlyOwner\n  {\n    require(_itemTokenAddress != address(0));\n\n    itemToken = ItemToken(_itemTokenAddress);\n  }\n\n  function setUserContract(address _userTokenAddress)\n    public\n    onlyOwner\n  {\n    require(_userTokenAddress != address(0));\n\n    userToken = UserToken(_userTokenAddress);\n  }\n\n  function getLastAttack(uint256 _ninjaid, uint256 _index)\n    public\n    view\n    returns (uint256 castleid, uint16 reward, uint32 hp, uint8 path, uint32 trapDamage, bool dead)\n  {\n    require(ninjaToken.ownerOf(_ninjaid) == msg.sender);\n    AttackLog memory log = attackLogs[_ninjaid][_index];\n    return (log.castleid, log.reward, log.hp, log.path, log.trapDamage, log.dead);\n  }\n\n  function getLastAttackCount(uint256 _ninjaid)\n    public\n    view\n    returns (uint256)\n  {\n    require(ninjaToken.ownerOf(_ninjaid) == msg.sender);\n    return numAttackLogs[_ninjaid];\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_ninjaid\",\"type\":\"uint256\"},{\"name\":\"_castleid\",\"type\":\"uint256\"},{\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"attack\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"grantAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_castleid\",\"type\":\"uint256\"},{\"name\":\"_traps\",\"type\":\"bytes\"},{\"name\":\"_useTraps\",\"type\":\"uint256[]\"}],\"name\":\"addTraps\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_goldTokenAddress\",\"type\":\"address\"}],\"name\":\"setGoldContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyCastle\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_castleid\",\"type\":\"uint256\"},{\"name\":\"_reward\",\"type\":\"uint16\"},{\"name\":\"_traps\",\"type\":\"bytes\"},{\"name\":\"_useTraps\",\"type\":\"uint256[]\"}],\"name\":\"defence\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"registerUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"revokeAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ninjaid\",\"type\":\"uint256\"}],\"name\":\"getLastAttackCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userTokenAddress\",\"type\":\"address\"}],\"name\":\"setUserContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemTokenAddress\",\"type\":\"address\"}],\"name\":\"setItemContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyNinja\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ninjaid\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLastAttack\",\"outputs\":[{\"name\":\"castleid\",\"type\":\"uint256\"},{\"name\":\"reward\",\"type\":\"uint16\"},{\"name\":\"hp\",\"type\":\"uint32\"},{\"name\":\"path\",\"type\":\"uint8\"},{\"name\":\"trapDamage\",\"type\":\"uint32\"},{\"name\":\"dead\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_castleTokenAddress\",\"type\":\"address\"}],\"name\":\"setCastleContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ninjaTokenAddress\",\"type\":\"address\"}],\"name\":\"setNinjaContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_itemid\",\"type\":\"uint8\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_goldTokenAddress\",\"type\":\"address\"},{\"name\":\"_castleTokenAddress\",\"type\":\"address\"},{\"name\":\"_ninjaTokenAddress\",\"type\":\"address\"},{\"name\":\"_userTokenAddress\",\"type\":\"address\"},{\"name\":\"_itemTokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ninjaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"castleid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hp\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"path\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"trapDamage\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"damage\",\"type\":\"uint32\"}],\"name\":\"Attack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ninjaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"castleid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hp\",\"type\":\"uint32\"}],\"name\":\"AttackStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ninjaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"castleid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"AttackEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000005c493a221ae9b49c3e45f2df8a3b34223855c1f4000000000000000000000000dfe6beca1e3cb35f051276d713e420de5de58577000000000000000000000000acf466567114ce47e4615f527d4dc4020a81438c000000000000000000000000f35470b6182cbd9a0f0c01d8f491b18445707c7d0000000000000000000000000a8b758bbc4a5791c5647ca80351e008f1e3bca1"
}