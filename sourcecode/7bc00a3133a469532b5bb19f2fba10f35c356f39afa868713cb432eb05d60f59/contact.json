{
  "address": "0xe3c8ff66d14341a35bcf6302047b92c6bc49824d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Presale",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "0",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-07\n*/\n\npragma solidity ^0.4.21;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n\n\ncontract ERC20 {\n\n    uint256 public totalSupply;\n\n    function balanceOf(address _owner) public view returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\ncontract MultiOwnable {\n\n    mapping (address => bool) public isOwner;\n    address[] public ownerHistory;\n\n    event OwnerAddedEvent(address indexed _newOwner);\n    event OwnerRemovedEvent(address indexed _oldOwner);\n\n    constructor() {\n        // Add default owner\n        address owner = msg.sender;\n        ownerHistory.push(owner);\n        isOwner[owner] = true;\n    }\n\n    modifier onlyOwner() {\n        require(isOwner[msg.sender]);\n        _;\n    }\n\n    function ownerHistoryCount() public view returns (uint) {\n        return ownerHistory.length;\n    }\n\n    /** Add extra owner. */\n    function addOwner(address owner) onlyOwner public {\n        require(owner != address(0));\n        require(!isOwner[owner]);\n        ownerHistory.push(owner);\n        isOwner[owner] = true;\n        emit OwnerAddedEvent(owner);\n    }\n\n    /** Remove extra owner. */\n    function removeOwner(address owner) onlyOwner public {\n        require(isOwner[owner]);\n        isOwner[owner] = false;\n        emit OwnerRemovedEvent(owner);\n    }\n}\n\n\n\n\n\n\n\n\n\ncontract Pausable is MultiOwnable {\n\n    bool public paused;\n\n    modifier ifNotPaused {\n        require(!paused);\n        _;\n    }\n\n    modifier ifPaused {\n        require(paused);\n        _;\n    }\n\n    // Called by the owner on emergency, triggers paused state\n    function pause() external onlyOwner ifNotPaused {\n        paused = true;\n    }\n\n    // Called by the owner on end of emergency, returns to normal state\n    function resume() external onlyOwner ifPaused {\n        paused = false;\n    }\n}\n\n\n\n\n\n\n\n\ncontract StandardToken is ERC20 {\n\n    using SafeMath for uint;\n\n    mapping(address => uint256) balances;\n\n    mapping(address => mapping(address => uint256)) allowed;\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n    /// @param _from Address from where tokens are withdrawn.\n    /// @param _to Address to where tokens are sent.\n    /// @param _value Number of tokens to transfer.\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /// @dev Sets approved amount of tokens for spender. Returns success.\n    /// @param _spender Address of allowed account.\n    /// @param _value Number of approved tokens.\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /// @dev Returns number of allowed tokens for given address.\n    /// @param _owner Address of token owner.\n    /// @param _spender Address of token spender.\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n\n\n\ncontract CommonToken is StandardToken, MultiOwnable {\n\n    string public constant name   = 'TMSY';\n    string public constant symbol = 'TMSY';\n    uint8 public constant decimals = 18;\n\n    uint256 public saleLimit;   // 85% of tokens for sale.\n    uint256 public teamTokens;  // 7% of tokens goes to the team and will be locked for 1 year.\n    uint256 public partnersTokens;\n    uint256 public advisorsTokens;\n    uint256 public reservaTokens;\n\n    // 7% of team tokens will be locked at this address for 1 year.\n    address public teamWallet; // Team address.\n    address public partnersWallet; // bountry address.\n    address public advisorsWallet; // Team address.\n    address public reservaWallet;\n\n    uint public unlockTeamTokensTime = now + 365 days;\n\n    // The main account that holds all tokens at the beginning and during tokensale.\n    address public seller; // Seller address (main holder of tokens)\n\n    uint256 public tokensSold; // (e18) Number of tokens sold through all tiers or tokensales.\n    uint256 public totalSales; // Total number of sales (including external sales) made through all tiers or tokensales.\n\n    // Lock the transfer functions during tokensales to prevent price speculations.\n    bool public locked = true;\n    mapping (address => bool) public walletsNotLocked;\n\n    event SellEvent(address indexed _seller, address indexed _buyer, uint256 _value);\n    event ChangeSellerEvent(address indexed _oldSeller, address indexed _newSeller);\n    event Burn(address indexed _burner, uint256 _value);\n    event Unlock();\n\n    constructor (\n        address _seller,\n        address _teamWallet,\n        address _partnersWallet,\n        address _advisorsWallet,\n        address _reservaWallet\n    ) MultiOwnable() public {\n\n        totalSupply    = 600000000 ether;\n        saleLimit      = 390000000 ether;\n        teamTokens     = 120000000 ether;\n        partnersTokens =  30000000 ether;\n        reservaTokens  =  30000000 ether;\n        advisorsTokens =  30000000 ether;\n\n        seller         = _seller;\n        teamWallet     = _teamWallet;\n        partnersWallet = _partnersWallet;\n        advisorsWallet = _advisorsWallet;\n        reservaWallet  = _reservaWallet;\n\n        uint sellerTokens = totalSupply - teamTokens - partnersTokens - advisorsTokens - reservaTokens;\n        balances[seller] = sellerTokens;\n        emit Transfer(0x0, seller, sellerTokens);\n\n        balances[teamWallet] = teamTokens;\n        emit Transfer(0x0, teamWallet, teamTokens);\n\n        balances[partnersWallet] = partnersTokens;\n        emit Transfer(0x0, partnersWallet, partnersTokens);\n\n        balances[reservaWallet] = reservaTokens;\n        emit Transfer(0x0, reservaWallet, reservaTokens);\n\n        balances[advisorsWallet] = advisorsTokens;\n        emit Transfer(0x0, advisorsWallet, advisorsTokens);\n    }\n\n    modifier ifUnlocked(address _from, address _to) {\n        //TODO: lockup excepto para direcciones concretas... pago de servicio, conversion fase 2\n        //TODO: Hacer funcion que aÃ±ada direcciones de excepcion\n        //TODO: Para el team hacer las exceptions\n        require(walletsNotLocked[_to]);\n\n        require(!locked);\n\n        // If requested a transfer from the team wallet:\n        // TODO: fecha cada 6 meses 25% de desbloqueo\n        /*if (_from == teamWallet) {\n            require(now >= unlockTeamTokensTime);\n        }*/\n        // Advisors: 25% cada 3 meses\n\n        // Reserva: 25% cada 6 meses\n\n        // Partners: El bloqueo de todos... no pueden hacer nada\n\n        _;\n    }\n\n    /** Can be called once by super owner. */\n    function unlock() onlyOwner public {\n        require(locked);\n        locked = false;\n        emit Unlock();\n    }\n\n    function walletLocked(address _wallet) onlyOwner public {\n      walletsNotLocked[_wallet] = false;\n    }\n\n    function walletNotLocked(address _wallet) onlyOwner public {\n      walletsNotLocked[_wallet] = true;\n    }\n\n    /**\n     * An address can become a new seller only in case it has no tokens.\n     * This is required to prevent stealing of tokens  from newSeller via\n     * 2 calls of this function.\n     */\n    function changeSeller(address newSeller) onlyOwner public returns (bool) {\n        require(newSeller != address(0));\n        require(seller != newSeller);\n\n        // To prevent stealing of tokens from newSeller via 2 calls of changeSeller:\n        require(balances[newSeller] == 0);\n\n        address oldSeller = seller;\n        uint256 unsoldTokens = balances[oldSeller];\n        balances[oldSeller] = 0;\n        balances[newSeller] = unsoldTokens;\n        emit Transfer(oldSeller, newSeller, unsoldTokens);\n\n        seller = newSeller;\n        emit ChangeSellerEvent(oldSeller, newSeller);\n        return true;\n    }\n\n    /**\n     * User-friendly alternative to sell() function.\n     */\n    function sellNoDecimals(address _to, uint256 _value) public returns (bool) {\n        return sell(_to, _value * 1e18);\n    }\n\n    function sell(address _to, uint256 _value)  public returns (bool) {\n        // Check that we are not out of limit and still can sell tokens:\n        // Cambiar a hardcap en usd\n        //require(tokensSold.add(_value) <= saleLimit);\n        require(msg.sender == seller, \"User not authorized\");\n\n        require(_to != address(0), \"Not address authorized\");\n        require(_value > 0, \"Value is 0\");\n\n        require(_value <= balances[seller]);\n\n        balances[seller] = balances[seller].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(seller, _to, _value);\n\n        totalSales++;\n        tokensSold = tokensSold.add(_value);\n        emit SellEvent(seller, _to, _value);\n        return true;\n    }\n\n    /**\n     * Until all tokens are sold, tokens can be transfered to/from owner's accounts.\n     */\n    function transfer(address _to, uint256 _value) ifUnlocked(msg.sender, _to) public returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * Until all tokens are sold, tokens can be transfered to/from owner's accounts.\n     */\n    function transferFrom(address _from, address _to, uint256 _value) ifUnlocked(_from, _to) public returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function burn(uint256 _value) public returns (bool) {\n        require(_value > 0, \"Value is zero\");\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Transfer(msg.sender, 0x0, _value);\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n}\n\n\n\ncontract CommonTokensale is MultiOwnable, Pausable {\n\n    using SafeMath for uint;\n\n    address public beneficiary;\n    uint public refundDeadlineTime;\n\n    // Balances of beneficiaries:\n    uint public balance;\n    uint public balanceComision;\n    uint public balanceComisionHold;\n    uint public balanceComisionDone;\n\n    // Token contract reference.\n    CommonToken public token;\n\n    uint public minPaymentUSD = 250;\n\n    uint public minCapWei;\n    uint public maxCapWei;\n\n    uint public minCapUSD;\n    uint public maxCapUSD;\n\n    uint public startTime;\n    uint public endTime;\n\n    // Stats for current tokensale:\n\n    uint public totalTokensSold;  // Total amount of tokens sold during this tokensale.\n    uint public totalWeiReceived; // Total amount of wei received during this tokensale.\n    uint public totalUSDReceived; // Total amount of wei received during this tokensale.\n\n    // This mapping stores info on how many ETH (wei) have been sent to this tokensale from specific address.\n    mapping (address => uint256) public buyerToSentWei;\n    mapping (address => uint256) public sponsorToComisionDone;\n    mapping (address => uint256) public sponsorToComision;\n    mapping (address => uint256) public sponsorToComisionHold;\n    mapping (address => uint256) public sponsorToComisionFromInversor;\n    mapping (address => bool) public kicInversor;\n    mapping (address => bool) public validateKYC;\n    mapping (address => bool) public comisionInTokens;\n\n    address[] public sponsorToComisionList;\n\n    // TODO: realizar opcion de que el inversor quiera cobrar en ETH o TMSY\n\n    event ReceiveEthEvent(address indexed _buyer, uint256 _amountWei);\n    event NewInverstEvent(address indexed _child, address indexed _sponsor);\n    event ComisionEvent(address indexed _sponsor, address indexed _child, uint256 _value, uint256 _comision);\n    event ComisionPayEvent(address indexed _sponsor, uint256 _value, uint256 _comision);\n    event ComisionInversorInTokensEvent(address indexed _sponsor, bool status);\n    event ChangeEndTimeEvent(address _sender, uint endTime, uint _date);\n    event verifyKycEvent(address _sender, uint _date, bool _status);\n    event payComisionSponsorTMSY(address _sponsor, uint _date, uint _value);\n    event payComisionSponsorETH(address _sponsor, uint _date, uint _value);\n    event withdrawEvent(address _sender, address _to, uint value, uint _date);\n    event conversionToUSDEvent(uint _value, uint rateUsd, uint usds);\n    event newRatioEvent(uint _value, uint date);\n    event conversionETHToTMSYEvent(address _buyer, uint value, uint tokensE18SinBono, uint tokensE18Bono);\n    event createContractEvent(address _token, address _beneficiary, uint _startTime, uint _endTime);\n    // ratio USD-ETH\n    uint public rateUSDETH;\n\n    bool public isSoftCapComplete = false;\n\n    // Array para almacenar los inversores\n    mapping(address => bool) public inversors;\n    address[] public inversorsList;\n\n    // Array para almacenar los sponsors para hacer reparto de comisiones\n    mapping(address => address) public inversorToSponsor;\n\n    constructor (\n        address _token,\n        address _beneficiary,\n        uint _startTime,\n        uint _endTime\n    ) MultiOwnable() public {\n\n        require(_token != address(0));\n        token = CommonToken(_token);\n\n        emit createContractEvent(_token, _beneficiary, _startTime, _endTime);\n\n        beneficiary = _beneficiary;\n\n        startTime = now;\n        endTime   = 1544313600;\n\n\n        minCapUSD = 400000;\n        maxCapUSD = 4000000;\n    }\n\n    function setRatio(uint _rate) onlyOwner public returns (bool) {\n      rateUSDETH = _rate;\n      emit newRatioEvent(rateUSDETH, now);\n      return true;\n    }\n\n    //TODO: validateKYC\n    //En el momento que validan el KYC se les entregan los tokens\n\n    function burn(uint _value) onlyOwner public returns (bool) {\n      return token.burn(_value);\n    }\n\n    function newInversor(address _newInversor, address _sponsor) onlyOwner public returns (bool) {\n      inversors[_newInversor] = true;\n      inversorsList.push(_newInversor);\n      inversorToSponsor[_newInversor] = _sponsor;\n      emit NewInverstEvent(_newInversor,_sponsor);\n      return inversors[_newInversor];\n    }\n    function setComisionInvesorInTokens(address _inversor, bool _inTokens) onlyOwner public returns (bool) {\n      comisionInTokens[_inversor] = _inTokens;\n      emit ComisionInversorInTokensEvent(_inversor, _inTokens);\n      return true;\n    }\n    function setComisionInTokens() public returns (bool) {\n      comisionInTokens[msg.sender] = true;\n      emit ComisionInversorInTokensEvent(msg.sender, true);\n      return true;\n    }\n    function setComisionInETH() public returns (bool) {\n      comisionInTokens[msg.sender] = false;\n      emit ComisionInversorInTokensEvent(msg.sender, false);\n\n      return true;\n    }\n    function inversorIsKyc(address who) public returns (bool) {\n      return validateKYC[who];\n    }\n    function unVerifyKyc(address _inversor) onlyOwner public returns (bool) {\n      require(!isSoftCapComplete);\n\n      validateKYC[_inversor] = false;\n\n      address sponsor = inversorToSponsor[_inversor];\n      uint balanceHold = sponsorToComisionFromInversor[_inversor];\n\n      //Actualizamos contadores globales\n      balanceComision = balanceComision.sub(balanceHold);\n      balanceComisionHold = balanceComisionHold.add(balanceHold);\n\n      //Actualizamos contadores del sponsor\n      sponsorToComision[sponsor] = sponsorToComision[sponsor].sub(balanceHold);\n      sponsorToComisionHold[sponsor] = sponsorToComisionHold[sponsor].add(balanceHold);\n\n      //Actualizamos contador comision por inversor\n    //  sponsorToComisionFromInversor[_inversor] = sponsorToComisionFromInversor[_inversor].sub(balanceHold);\n      emit verifyKycEvent(_inversor, now, false);\n    }\n    function verifyKyc(address _inversor) onlyOwner public returns (bool) {\n      validateKYC[_inversor] = true;\n\n      address sponsor = inversorToSponsor[_inversor];\n      uint balanceHold = sponsorToComisionFromInversor[_inversor];\n\n      //Actualizamos contadores globales\n      balanceComision = balanceComision.add(balanceHold);\n      balanceComisionHold = balanceComisionHold.sub(balanceHold);\n\n      //Actualizamos contadores del sponsor\n      sponsorToComision[sponsor] = sponsorToComision[sponsor].add(balanceHold);\n      sponsorToComisionHold[sponsor] = sponsorToComisionHold[sponsor].sub(balanceHold);\n\n      //Actualizamos contador comision por inversor\n      //sponsorToComisionFromInversor[_inversor] = sponsorToComisionFromInversor[_inversor].sub(balanceHold);\n      emit verifyKycEvent(_inversor, now, true);\n      //Enviamos comisiones en caso de tener\n      /*uint256 value = sponsorToComision[_inversor];\n      sponsorToComision[_inversor] = sponsorToComision[_inversor].sub(value);\n      _inversor.transfer(value);*/\n      return true;\n    }\n    function buyerToSentWeiOf(address who) public view returns (uint256) {\n      return buyerToSentWei[who];\n    }\n    function balanceOf(address who) public view returns (uint256) {\n      return token.balanceOf(who);\n    }\n    function balanceOfComision(address who)  public view returns (uint256) {\n      return sponsorToComision[who];\n    }\n    function balanceOfComisionHold(address who)  public view returns (uint256) {\n      return sponsorToComisionHold[who];\n    }\n    function balanceOfComisionDone(address who)  public view returns (uint256) {\n      return sponsorToComisionDone[who];\n    }\n\n    function isInversor(address who) public view returns (bool) {\n      return inversors[who];\n    }\n    function payComisionSponsor(address _inversor) private {\n      //comprobamos que el inversor quiera cobrar en tokens...\n      //si es asÃ­ le pagamos directo y aÃ±adimos los tokens a su cuenta\n      if(comisionInTokens[_inversor]) {\n        uint256 val = 0;\n        uint256 valueHold = sponsorToComisionHold[_inversor];\n        uint256 valueReady = sponsorToComision[_inversor];\n\n        val = valueReady.add(valueHold);\n        //comprobamos que tenga comisiones a cobrar\n        if(val > 0) {\n          require(balanceComision >= valueReady);\n          require(balanceComisionHold >= valueHold);\n          uint256 comisionTokens = weiToTokens(val);\n\n          sponsorToComision[_inversor] = 0;\n          sponsorToComisionHold[_inversor] = 0;\n\n          balanceComision = balanceComision.sub(valueReady);\n          balanceComisionDone = balanceComisionDone.add(val);\n          balanceComisionHold = balanceComisionHold.sub(valueHold);\n\n          balance = balance.add(val);\n\n          token.sell(_inversor, comisionTokens);\n          emit payComisionSponsorTMSY(_inversor, now, val); //TYPO TMSY\n        }\n      } else {\n        uint256 value = sponsorToComision[_inversor];\n\n        //comprobamos que tenga comisiones a cobrar\n        if(value > 0) {\n          require(balanceComision >= value);\n\n          //Si lo quiere en ETH\n          //comprobamos que hayamos alcanzado el softCap\n          assert(isSoftCapComplete);\n\n          //Comprobamos que el KYC estÃ© validado\n          assert(validateKYC[_inversor]);\n\n          sponsorToComision[_inversor] = sponsorToComision[_inversor].sub(value);\n          balanceComision = balanceComision.sub(value);\n          balanceComisionDone = balanceComisionDone.add(value);\n\n          _inversor.transfer(value);\n          emit payComisionSponsorETH(_inversor, now, value); //TYPO TMSY\n\n        }\n\n      }\n    }\n    function payComision() public {\n      address _inversor = msg.sender;\n      payComisionSponsor(_inversor);\n    }\n    //Enviamos las comisiones que se han congelado o por no tener kyc o por ser en softcap\n    /*function sendHoldComisions() onlyOwner public returns (bool) {\n      //repartimos todas las comisiones congeladas hasta ahora\n      uint arrayLength = sponsorToComisionList.length;\n      for (uint i=0; i<arrayLength; i++) {\n        // do something\n        address sponsor = sponsorToComisionList[i];\n\n        if(validateKYC[sponsor]) {\n          uint256 value = sponsorToComision[sponsor];\n          sponsorToComision[sponsor] = sponsorToComision[sponsor].sub(value);\n          sponsor.transfer(value);\n        }\n      }\n      return true;\n    }*/\n    function isSoftCapCompleted() public view returns (bool) {\n      return isSoftCapComplete;\n    }\n    function softCapCompleted() public {\n      uint totalBalanceUSD = weiToUSD(balance.div(1e18));\n      if(totalBalanceUSD >= minCapUSD) isSoftCapComplete = true;\n    }\n\n    function balanceComisionOf(address who) public view returns (uint256) {\n      return sponsorToComision[who];\n    }\n    function getNow() public returns (uint) {\n      return now;\n    }\n    /** The fallback function corresponds to a donation in ETH. */\n    function() public payable {\n        //sellTokensForEth(msg.sender, msg.value);\n\n        uint256 _amountWei = msg.value;\n        address _buyer = msg.sender;\n        uint valueUSD = weiToUSD(_amountWei);\n\n        require(now <= endTime, 'endtime');\n        require(inversors[_buyer] != false, 'No invest');\n        require(valueUSD >= minPaymentUSD, 'Min in USD not allowed');\n        //require(totalUSDReceived.add(valueUSD) <= maxCapUSD);\n        emit ReceiveEthEvent(_buyer, _amountWei);\n\n        uint tokensE18SinBono = weiToTokens(msg.value);\n        uint tokensE18Bono = weiToTokensBono(msg.value);\n        emit conversionETHToTMSYEvent(_buyer, msg.value, tokensE18SinBono, tokensE18Bono);\n\n        uint tokensE18 = tokensE18SinBono.add(tokensE18Bono);\n\n        //Ejecutamos la transferencia de tokens y paramos si ha fallado\n        require(token.sell(_buyer, tokensE18SinBono), \"Falla la venta\");\n        if(tokensE18Bono > 0)\n          assert(token.sell(_buyer, tokensE18Bono));\n\n        //repartimos al sponsor su parte 10%\n        uint256 _amountSponsor = (_amountWei * 10) / 100;\n        uint256 _amountBeneficiary = (_amountWei * 90) / 100;\n\n        totalTokensSold = totalTokensSold.add(tokensE18);\n        totalWeiReceived = totalWeiReceived.add(_amountWei);\n        buyerToSentWei[_buyer] = buyerToSentWei[_buyer].add(_amountWei);\n\n        //por cada compra miramos cual es la cantidad actual de USD... si hemos llegado al softcap lo activamos\n        if(!isSoftCapComplete) {\n          uint256 totalBalanceUSD = weiToUSD(balance);\n          if(totalBalanceUSD >= minCapUSD) {\n            softCapCompleted();\n          }\n        }\n        address sponsor = inversorToSponsor[_buyer];\n        sponsorToComisionList.push(sponsor);\n\n        if(validateKYC[_buyer]) {\n          //AÃ±adimos el saldo al sponsor\n          balanceComision = balanceComision.add(_amountSponsor);\n          sponsorToComision[sponsor] = sponsorToComision[sponsor].add(_amountSponsor);\n\n        } else {\n          //AÃ±adimos el saldo al sponsor\n          balanceComisionHold = balanceComisionHold.add(_amountSponsor);\n          sponsorToComisionHold[sponsor] = sponsorToComisionHold[sponsor].add(_amountSponsor);\n          sponsorToComisionFromInversor[_buyer] = sponsorToComisionFromInversor[_buyer].add(_amountSponsor);\n        }\n\n\n        payComisionSponsor(sponsor);\n\n\n        balance = balance.add(_amountBeneficiary);\n    }\n\n    function weiToUSD(uint _amountWei) public view returns (uint256) {\n      uint256 ethers = _amountWei;\n\n      uint256 valueUSD = rateUSDETH.mul(_amountWei);\n\n      emit conversionToUSDEvent(_amountWei, rateUSDETH, valueUSD.div(1e18));\n      return valueUSD.div(1e18);\n    }\n\n    function weiToTokensBono(uint _amountWei) public view returns (uint256) {\n      uint bono = 0;\n\n      uint256 valueUSD = weiToUSD(_amountWei);\n\n      // Calculamos bono\n      //Tablas de bonos\n      if(valueUSD >= uint(500 * 10**18))   bono = 10;\n      if(valueUSD >= uint(1000 * 10**18))   bono = 20;\n      if(valueUSD >= uint(2500 * 10**18))   bono = 30;\n      if(valueUSD >= uint(5000 * 10**18))   bono = 40;\n      if(valueUSD >= uint(10000 * 10**18))   bono = 50;\n\n\n      uint256 bonoUsd = valueUSD.mul(bono).div(100);\n      uint256 tokens = bonoUsd.mul(tokensPerUSD());\n\n      return tokens;\n    }\n    /** Calc how much tokens you can buy at current time. */\n    function weiToTokens(uint _amountWei) public view returns (uint256) {\n\n        uint256 valueUSD = weiToUSD(_amountWei);\n\n        uint256 tokens = valueUSD.mul(tokensPerUSD());\n\n        return tokens;\n    }\n\n    function tokensPerUSD() public pure returns (uint256) {\n        return 65; // Default token price with no bonuses.\n    }\n\n    function canWithdraw() public view returns (bool);\n\n    function withdraw(address _to, uint value) public returns (uint) {\n        require(canWithdraw(), 'No es posible retirar');\n        require(msg.sender == beneficiary, 'SÃ³lo puede solicitar el beneficiario los fondos');\n        require(balance > 0, 'Sin fondos');\n        require(balance >= value, 'No hay suficientes fondos');\n        require(_to.call.value(value).gas(1)(), 'No se que es');\n\n        balance = balance.sub(value);\n        emit withdrawEvent(msg.sender, _to, value,now);\n        return balance;\n    }\n\n    //Manage timelimit. For exception\n    function changeEndTime(uint _date) onlyOwner public returns (bool) {\n     // require(endTime < _date);\n      endTime = _date;\n      refundDeadlineTime = endTime + 3 * 30 days;\n      emit ChangeEndTimeEvent(msg.sender,endTime,_date);\n      return true;\n    }\n}\n\n\ncontract Presale is CommonTokensale {\n\n    // In case min (soft) cap is not reached, token buyers will be able to\n    // refund their contributions during 3 months after presale is finished.\n\n    // Total amount of wei refunded if min (soft) cap is not reached.\n    uint public totalWeiRefunded;\n\n    event RefundEthEvent(address indexed _buyer, uint256 _amountWei);\n\n    constructor(\n        address _token,\n        address _beneficiary,\n        uint _startTime,\n        uint _endTime\n    ) CommonTokensale(\n        _token,\n        _beneficiary,\n        _startTime,\n        _endTime\n    ) public {\n      refundDeadlineTime = _endTime + 3 * 30 days;\n    }\n\n    /**\n     * During presale it will be possible to withdraw only in two cases:\n     * min cap reached OR refund period expired.\n     */\n    function canWithdraw() public view returns (bool) {\n        return isSoftCapComplete;\n    }\n\n    /**\n     * It will be possible to refund only if min (soft) cap is not reached and\n     * refund requested during 3 months after presale finished.\n     */\n    function canRefund() public view returns (bool) {\n        return !isSoftCapComplete && endTime < now && now <= refundDeadlineTime;\n    }\n\n    function refund() public {\n        require(canRefund());\n\n        address buyer = msg.sender;\n        uint amount = buyerToSentWei[buyer];\n        require(amount > 0);\n\n        // Redistribute left balance between three beneficiaries.\n        uint newBal = balance.sub(amount);\n        balance = newBal;\n\n        emit RefundEthEvent(buyer, amount);\n        buyerToSentWei[buyer] = 0;\n        totalWeiRefunded = totalWeiRefunded.add(amount);\n        buyer.transfer(amount);\n    }\n}",
  "bytecode": "608060405260fa6009556000601d60006101000a81548160ff02191690831515021790555034801561003057600080fd5b506040516080806200489a8339810180604052810190808051906020019092919080519060200190929190805190602001909291908051906020019092919050505083838383600033905060018190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561017557600080fd5b83600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f06106446ac3dfdefe69681e87f7e22c8ba6b524977d23757d91a63e2009e6a2484848484604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a182600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600e81905550635c0c5b00600f8190555062061a80600c81905550623d0900600d81905550505050506276a7008101600381905550505050506145b280620002e86000396000f30060806040526004361061032d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063046f7da214610cf05780630964818114610d075780630fea81fe14610d32578063115f2f2f14610d61578063173825d914610d8c5780631af5dd4114610dcf5780631fa096e614610e2657806326d4ba1114610e815780632f54bf6e14610eac5780633052b75e14610f075780633197cbb614610f4c57806331ee080d14610f775780633703485314610fde57806338af3eed1461100957806342966c681461106057806343f5e989146110a5578063461fc090146110d05780634db8349e1461113d57806353aaef7d1461119457806357138106146111d5578063590e1ae3146112305780635c2c593d146112475780635c975abb146112a25780635cec5ded146112d157806360154e851461132857806363b201171461133f57806369b73c961461136a5780636b7d90ff146113c15780637065cb481461141c57806370a082311461145f578063720f7dd8146114b657806378e979251461150d5780637d6d28ef146115385780637f32f6de146115675780637f83a4a6146115965780638456cb59146115c557806388d12a4d146115dc5780638c950a90146116075780639c5fafa41461165e5780639d2330b7146116b5578063a4369fd9146116e4578063a56c2ac01461173b578063aef8c38e14611766578063b2237ba3146117d3578063b51459fe14611818578063b69ef8a814611847578063bab7bdf814611872578063bbe4fd50146118cd578063c92eeb4a146118f8578063cf567d1e14611953578063d10ac7eb146119aa578063d18ffb8d14611a01578063d2df254c14611a5c578063d5f5b78814611a9d578063ded317a814611ac8578063e11b09e014611af3578063e97678d914611b0a578063ebc2042614611b35578063f1309d5614611b60578063f1c4ecb414611b8b578063f2fc6deb14611bb6578063f37d074214611bf7578063f3995db714611c22578063f3fef3a314611c4d578063f6f6e66c14611cae578063fc0c546a14611d1b578063fc398d6c14611d72578063fd47587514611dcd578063fe53522714611e48575b60008060008060008060008060008034995033985061034b8a611ecb565b9750600f5442111515156103c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260078152602001807f656e6474696d650000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60001515601e60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151515610490576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4e6f20696e76657374000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600954881015151561050a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4d696e20696e20555344206e6f7420616c6c6f7765640000000000000000000081525060200191505060405180910390fd5b8873ffffffffffffffffffffffffffffffffffffffff167f9f2aa993778384d1a464178bc602fe2f113364d0faad0eb68cbff639d2932bcb8b6040518082815260200191505060405180910390a261056134611f71565b965061056c34611fa7565b95507f3cf2d41c1d8f4f861737e90eaa95cdc9ddbec8acd33e0d9f9d779e4403f8cebb89348989604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a16105fc868861208290919063ffffffff16565b9450600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636c197ff58a896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156106c357600080fd5b505af11580156106d7573d6000803e3d6000fd5b505050506040513d60208110156106ed57600080fd5b81019080805190602001909291905050501515610772576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f46616c6c61206c612076656e746100000000000000000000000000000000000081525060200191505060405180910390fd5b600086111561088457600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636c197ff58a886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561084057600080fd5b505af1158015610854573d6000803e3d6000fd5b505050506040513d602081101561086a57600080fd5b8101908080519060200190929190505050151561088357fe5b5b6064600a8b0281151561089357fe5b0493506064605a8b028115156108a557fe5b0492506108bd8560105461208290919063ffffffff16565b6010819055506108d88a60115461208290919063ffffffff16565b6011819055506109308a601360008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461208290919063ffffffff16565b601360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601d60009054906101000a900460ff1615156109ab57610994600454611ecb565b9150600c54821015156109aa576109a96120a0565b5b5b602060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050601b8190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050601960008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610b7a57610ada8460055461208290919063ffffffff16565b600581905550610b3284601560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461208290919063ffffffff16565b601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cc0565b610b8f8460065461208290919063ffffffff16565b600681905550610be784601660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461208290919063ffffffff16565b601660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c7c84601760008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461208290919063ffffffff16565b601760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b610cc9816120f3565b610cde8360045461208290919063ffffffff16565b60048190555050505050505050505050005b348015610cfc57600080fd5b50610d056126e8565b005b348015610d1357600080fd5b50610d1c612777565b6040518082815260200191505060405180910390f35b348015610d3e57600080fd5b50610d4761277d565b604051808215151515815260200191505060405180910390f35b348015610d6d57600080fd5b50610d76612830565b6040518082815260200191505060405180910390f35b348015610d9857600080fd5b50610dcd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612839565b005b348015610ddb57600080fd5b50610e10600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612984565b6040518082815260200191505060405180910390f35b348015610e3257600080fd5b50610e67600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506129cd565b604051808215151515815260200191505060405180910390f35b348015610e8d57600080fd5b50610e96612a23565b6040518082815260200191505060405180910390f35b348015610eb857600080fd5b50610eed600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a29565b604051808215151515815260200191505060405180910390f35b348015610f1357600080fd5b50610f3260048036038101908080359060200190929190505050612a49565b604051808215151515815260200191505060405180910390f35b348015610f5857600080fd5b50610f61612b35565b6040518082815260200191505060405180910390f35b348015610f8357600080fd5b50610fc4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050612b3b565b604051808215151515815260200191505060405180910390f35b348015610fea57600080fd5b50610ff3612c47565b6040518082815260200191505060405180910390f35b34801561101557600080fd5b5061101e612c54565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561106c57600080fd5b5061108b60048036038101908080359060200190929190505050612c7a565b604051808215151515815260200191505060405180910390f35b3480156110b157600080fd5b506110ba612da6565b6040518082815260200191505060405180910390f35b3480156110dc57600080fd5b506110fb60048036038101908080359060200190929190505050612dac565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561114957600080fd5b5061117e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612dea565b6040518082815260200191505060405180910390f35b3480156111a057600080fd5b506111bf60048036038101908080359060200190929190505050611f71565b6040518082815260200191505060405180910390f35b3480156111e157600080fd5b50611216600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612e33565b604051808215151515815260200191505060405180910390f35b34801561123c57600080fd5b5061124561316e565b005b34801561125357600080fd5b50611288600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506132f2565b604051808215151515815260200191505060405180910390f35b3480156112ae57600080fd5b506112b7613312565b604051808215151515815260200191505060405180910390f35b3480156112dd57600080fd5b50611312600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613325565b6040518082815260200191505060405180910390f35b34801561133457600080fd5b5061133d61336e565b005b34801561134b57600080fd5b5061135461337f565b6040518082815260200191505060405180910390f35b34801561137657600080fd5b506113ab600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613385565b6040518082815260200191505060405180910390f35b3480156113cd57600080fd5b50611402600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061339d565b604051808215151515815260200191505060405180910390f35b34801561142857600080fd5b5061145d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506136f0565b005b34801561146b57600080fd5b506114a0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506138de565b6040518082815260200191505060405180910390f35b3480156114c257600080fd5b506114f7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506139df565b6040518082815260200191505060405180910390f35b34801561151957600080fd5b506115226139f7565b6040518082815260200191505060405180910390f35b34801561154457600080fd5b5061154d6139fd565b604051808215151515815260200191505060405180910390f35b34801561157357600080fd5b5061157c613ab1565b604051808215151515815260200191505060405180910390f35b3480156115a257600080fd5b506115ab613ac8565b604051808215151515815260200191505060405180910390f35b3480156115d157600080fd5b506115da613afb565b005b3480156115e857600080fd5b506115f1613b8b565b6040518082815260200191505060405180910390f35b34801561161357600080fd5b50611648600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613b91565b6040518082815260200191505060405180910390f35b34801561166a57600080fd5b5061169f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613ba9565b6040518082815260200191505060405180910390f35b3480156116c157600080fd5b506116ca613bf2565b604051808215151515815260200191505060405180910390f35b3480156116f057600080fd5b50611725600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613c05565b6040518082815260200191505060405180910390f35b34801561174757600080fd5b50611750613c1d565b6040518082815260200191505060405180910390f35b34801561177257600080fd5b5061179160048036038101908080359060200190929190505050613c23565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156117df57600080fd5b506117fe60048036038101908080359060200190929190505050613c61565b604051808215151515815260200191505060405180910390f35b34801561182457600080fd5b5061182d613d0b565b604051808215151515815260200191505060405180910390f35b34801561185357600080fd5b5061185c613d22565b6040518082815260200191505060405180910390f35b34801561187e57600080fd5b506118b3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613d28565b604051808215151515815260200191505060405180910390f35b3480156118d957600080fd5b506118e2613d48565b6040518082815260200191505060405180910390f35b34801561190457600080fd5b50611939600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613d50565b604051808215151515815260200191505060405180910390f35b34801561195f57600080fd5b50611994600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613d70565b6040518082815260200191505060405180910390f35b3480156119b657600080fd5b506119eb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613d88565b6040518082815260200191505060405180910390f35b348015611a0d57600080fd5b50611a42600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613dd1565b604051808215151515815260200191505060405180910390f35b348015611a6857600080fd5b50611a8760048036038101908080359060200190929190505050611ecb565b6040518082815260200191505060405180910390f35b348015611aa957600080fd5b50611ab2613e27565b6040518082815260200191505060405180910390f35b348015611ad457600080fd5b50611add613e2d565b6040518082815260200191505060405180910390f35b348015611aff57600080fd5b50611b086120a0565b005b348015611b1657600080fd5b50611b1f613e33565b6040518082815260200191505060405180910390f35b348015611b4157600080fd5b50611b4a613e39565b6040518082815260200191505060405180910390f35b348015611b6c57600080fd5b50611b75613e3f565b6040518082815260200191505060405180910390f35b348015611b9757600080fd5b50611ba0613e45565b6040518082815260200191505060405180910390f35b348015611bc257600080fd5b50611be160048036038101908080359060200190929190505050611fa7565b6040518082815260200191505060405180910390f35b348015611c0357600080fd5b50611c0c613e4b565b6040518082815260200191505060405180910390f35b348015611c2e57600080fd5b50611c37613e51565b6040518082815260200191505060405180910390f35b348015611c5957600080fd5b50611c98600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613e57565b6040518082815260200191505060405180910390f35b348015611cba57600080fd5b50611cd960048036038101908080359060200190929190505050614225565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015611d2757600080fd5b50611d30614263565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015611d7e57600080fd5b50611db3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614289565b604051808215151515815260200191505060405180910390f35b348015611dd957600080fd5b50611e2e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506142a9565b604051808215151515815260200191505060405180910390f35b348015611e5457600080fd5b50611e89600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506144ed565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000806000839150611ee884601c5461451f90919063ffffffff16565b90507fdc99fd0ec89be4686087e474d7e62f2e03d18563ab02c2785b0a382c8e6d0f9f84601c54611f2a670de0b6b3a76400008561455290919063ffffffff16565b60405180848152602001838152602001828152602001935050505060405180910390a1611f68670de0b6b3a76400008261455290919063ffffffff16565b92505050919050565b6000806000611f7f84611ecb565b9150611f9b611f8c612830565b8361451f90919063ffffffff16565b90508092505050919050565b6000806000806000809350611fbb86611ecb565b9250681b1ae4d6e2ef50000083101515611fd457600a93505b683635c9adc5dea0000083101515611feb57601493505b68878678326eac9000008310151561200257601e93505b69010f0cf064dd592000008310151561201a57602893505b69021e19e0c9bab24000008310151561203257603293505b612058606461204a868661451f90919063ffffffff16565b61455290919063ffffffff16565b9150612074612065612830565b8361451f90919063ffffffff16565b905080945050505050919050565b600080828401905083811015151561209657fe5b8091505092915050565b60006120c76120c2670de0b6b3a764000060045461455290919063ffffffff16565b611ecb565b9050600c54811015156120f0576001601d60006101000a81548160ff0219169083151502179055505b50565b6000806000806000601a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156124905760009450601660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549350601560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205492506121e8848461208290919063ffffffff16565b9450600085111561248b57826005541015151561220457600080fd5b836006541015151561221557600080fd5b61221e85611f71565b91506000601560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000601660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506122bf8360055461456d90919063ffffffff16565b6005819055506122da8560075461208290919063ffffffff16565b6007819055506122f58460065461456d90919063ffffffff16565b6006819055506123108560045461208290919063ffffffff16565b600481905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636c197ff587846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156123db57600080fd5b505af11580156123ef573d6000803e3d6000fd5b505050506040513d602081101561240557600080fd5b8101908080519060200190929190505050507faf125e12ca75bf768749f5341bd6d27b98c81a22d86e366198f6d6db3a7eef50864287604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a15b6126e0565b601560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111156126df5780600554101515156124ec57600080fd5b601d60009054906101000a900460ff16151561250457fe5b601960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561255957fe5b6125ab81601560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461456d90919063ffffffff16565b601560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506126038160055461456d90919063ffffffff16565b60058190555061261e8160075461208290919063ffffffff16565b6007819055508573ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561266a573d6000803e3d6000fd5b507f4dfd6422846384dac8648df8b24fcc838e4c9ab965cdadbc849315814132c546864283604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a15b5b505050505050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561273f57600080fd5b600260009054906101000a900460ff16151561275a57600080fd5b6000600260006101000a81548160ff021916908315150217905550565b60035481565b600080601a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f325ba1fcaf76db5966f48dde35b40cf527ef4b8733ff921643d2c24e25b6994c6000604051808215151515815260200191505060405180910390a26001905090565b60006041905090565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561289057600080fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156128e757600080fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f6740775dd30bf47d42458b7044f4a4b0a275934f8a4f9269c8af6ab00b3a1e4560405160405180910390a250565b6000601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000601e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60075481565b60006020528060005260406000206000915054906101000a900460ff1681565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515612aa257600080fd5b81600f819055506276a700600f54016003819055507f5ccef46849f25e627f4883dfdc93950201a96cf9955e163545f8e0775d7f7ac633600f5484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a160019050919050565b600f5481565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515612b9457600080fd5b81601a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff167f325ba1fcaf76db5966f48dde35b40cf527ef4b8733ff921643d2c24e25b6994c83604051808215151515815260200191505060405180910390a26001905092915050565b6000600180549050905090565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515612cd357600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015612d6457600080fd5b505af1158015612d78573d6000803e3d6000fd5b505050506040513d6020811015612d8e57600080fd5b81019080805190602001909291905050509050919050565b60055481565b600181815481101515612dbb57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515612e8f57600080fd5b6001601960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550602060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150601760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050612fa08160055461208290919063ffffffff16565b600581905550612fbb8160065461456d90919063ffffffff16565b60068190555061301381601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461208290919063ffffffff16565b601560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506130a881601660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461456d90919063ffffffff16565b601660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f912e4d0cd0a2a590cc2e469948cba79fef3be5864ee968d6bf93ab291941ce3184426001604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182151515158152602001935050505060405180910390a1600192505050919050565b600080600061317b613ac8565b151561318657600080fd5b339250601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506000821115156131da57600080fd5b6131ef8260045461456d90919063ffffffff16565b9050806004819055508273ffffffffffffffffffffffffffffffffffffffff167fb80902938c68dd27d1b6cd79d202976fec736f73fe1d8c133123fc5a894f85c2836040518082815260200191505060405180910390a26000601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506132a08260215461208290919063ffffffff16565b6021819055508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156132ec573d6000803e3d6000fd5b50505050565b60196020528060005260406000206000915054906101000a900460ff1681565b600260009054906101000a900460ff1681565b6000601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600033905061337c816120f3565b50565b60105481565b60146020528060005260406000206000915090505481565b60008060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156133f957600080fd5b601d60009054906101000a900460ff1615151561341557600080fd5b6000601960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550602060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150601760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506135268160055461456d90919063ffffffff16565b6005819055506135418160065461208290919063ffffffff16565b60068190555061359981601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461456d90919063ffffffff16565b601560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061362e81601660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461208290919063ffffffff16565b601660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f912e4d0cd0a2a590cc2e469948cba79fef3be5864ee968d6bf93ab291941ce3184426000604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182151515158152602001935050505060405180910390a15050919050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561374757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561378357600080fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156137db57600080fd5b60018190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f0775e4f247a7723929d271ccf476b51fb4284053cb3fd6cf3400228a9c02dbb860405160405180910390a250565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561399d57600080fd5b505af11580156139b1573d6000803e3d6000fd5b505050506040513d60208110156139c757600080fd5b81019080805190602001909291905050509050919050565b60176020528060005260406000206000915090505481565b600e5481565b60006001601a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f325ba1fcaf76db5966f48dde35b40cf527ef4b8733ff921643d2c24e25b6994c6001604051808215151515815260200191505060405180910390a26001905090565b6000601d60009054906101000a900460ff16905090565b6000601d60009054906101000a900460ff16158015613ae8575042600f54105b8015613af657506003544211155b905090565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515613b5257600080fd5b600260009054906101000a900460ff16151515613b6e57600080fd5b6001600260006101000a81548160ff021916908315150217905550565b60115481565b60166020528060005260406000206000915090505481565b6000601660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b601d60009054906101000a900460ff1681565b60156020528060005260406000206000915090505481565b60215481565b601b81815481101515613c3257fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515613cba57600080fd5b81601c819055507f7e47dc25e4aa57fb38c1282da20ce09b02a0bf7a94194095e00283bfacb38e82601c5442604051808381526020018281526020019250505060405180910390a160019050919050565b6000601d60009054906101000a900460ff16905090565b60045481565b601a6020528060005260406000206000915054906101000a900460ff1681565b600042905090565b601e6020528060005260406000206000915054906101000a900460ff1681565b60136020528060005260406000206000915090505481565b6000601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000601960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600d5481565b600c5481565b60065481565b600a5481565b60125481565b600b5481565b601c5481565b60095481565b6000613e61613d0b565b1515613ed5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4e6f20657320706f7369626c652072657469726172000000000000000000000081525060200191505060405180910390fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613fc0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f53c3b36c6f20707565646520736f6c69636974617220656c2062656e6566696381526020017f696172696f206c6f7320666f6e646f730000000000000000000000000000000081525060400191505060405180910390fd5b600060045411151561403a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f53696e20666f6e646f730000000000000000000000000000000000000000000081525060200191505060405180910390fd5b81600454101515156140b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4e6f2068617920737566696369656e74657320666f6e646f730000000000000081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1682600190604051600060405180830381858888f193505050501515614158576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4e6f20736520717565206573000000000000000000000000000000000000000081525060200191505060405180910390fd5b61416d8260045461456d90919063ffffffff16565b6004819055507fe3f91f3a65f93ea80405dcfe6b50885ba312f836c97da89b6b56ecb6ab9d1f4c33848442604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a1600454905092915050565b601f8181548110151561423457fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60186020528060005260406000206000915054906101000a900460ff1681565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561430257600080fd5b6001601e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550601f8390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505081602060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f356a53776ccd0466a734ac40e86a0a16a3220ee12a171870d5d58d62ea09cee060405160405180910390a3601e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b602080528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008082840290506000841480614540575082848281151561453d57fe5b04145b151561454857fe5b8091505092915050565b600080828481151561456057fe5b0490508091505092915050565b600082821115151561457b57fe5b8183039050929150505600a165627a7a723058207ee61b1748c4e3bf29a9887de754e2126d96628721481e5f32d74a6c14025f5e0029000000000000000000000000692dccc0560f92a3dbf795156ab8cd9e4cfb9976000000000000000000000000f2c984258fdf4dfa5362a7552bb22f92ad5dcd76000000000000000000000000000000000000000000000000000001662cecac00000000000000000000000000000000000000000000000000000001677baa0800",
  "constructorArguments": "000000000000000000000000692dccc0560f92a3dbf795156ab8cd9e4cfb9976000000000000000000000000f2c984258fdf4dfa5362a7552bb22f92ad5dcd76000000000000000000000000000000000000000000000000000001662cecac00000000000000000000000000000000000000000000000000000001677baa0800"
}