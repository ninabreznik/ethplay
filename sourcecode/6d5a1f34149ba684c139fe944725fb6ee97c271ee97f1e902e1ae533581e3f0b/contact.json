{
  "address": "0x7f37f78cbd74481e593f9c737776f7113d76b315",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BalanceChecker",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-18\n*/\n\npragma solidity ^0.4.24;\n\ncontract Token {\n    function balanceOf(address) public view returns (uint);\n}\n\n\ncontract BalanceChecker {\n\n    function tokenBalance(address user, address token) public view returns (uint) {\n        // check if token is actually a contract\n        uint256 tokenCode;\n        assembly { tokenCode := extcodesize(token) } // contract code size\n\n        // is it a contract and does it implement balanceOf\n        if (tokenCode > 0 && token.call(bytes4(0x70a08231), user)) {\n            return Token(token).balanceOf(user);\n        } else {\n            return 0;\n        }\n    }\n\n    function balances(address user, address[] tokens) external view returns (uint[]) {\n        uint[] memory addrBalances = new uint[](tokens.length);\n\n        for(uint i = 0; i < tokens.length; i++) {\n            addrBalances[i] = tokenBalance(user, tokens[i]);\n        }\n        return addrBalances;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
  "bytecode": "608060405234801561001057600080fd5b5061042a806100206000396000f30060806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631049334f14610051578063d3e5ca87146100c8575b600080fd5b34801561005d57600080fd5b506100b2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610178565b6040518082815260200191505060405180910390f35b3480156100d457600080fd5b50610121600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190820180359060200191909192939192939050505061034b565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610164578082015181840152602081019050610149565b505050509050019250505060405180910390f35b600080823b905060008111801561025d57508273ffffffffffffffffffffffffffffffffffffffff166370a082317c0100000000000000000000000000000000000000000000000000000000027c01000000000000000000000000000000000000000000000000000000009004856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506000604051808303816000875af1925050505b1561033f578273ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156102fd57600080fd5b505af1158015610311573d6000803e3d6000fd5b505050506040513d602081101561032757600080fd5b81019080805190602001909291905050509150610344565b600091505b5092915050565b6060806000848490506040519080825280602002602001820160405280156103825781602001602082028038833980820191505090505b509150600090505b848490508110156103f2576103c98686868481811015156103a757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16610178565b82828151811015156103d757fe5b9060200190602002018181525050808060010191505061038a565b819250505093925050505600a165627a7a72305820d431490e91fedb511b1533f21c2c0258cc968d5ee4ed72ea36608bea41a521cf0029"
}