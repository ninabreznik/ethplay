{
  "address": "0x8e4428008900589869a8d38c69d7b905823de144",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ReferralCircle",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-01\n*/\n\npragma solidity ^0.4.25;\n\n// just ownable contract\ncontract Ownable {\n    address public owner;\n\n    constructor() public{\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) external onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n\n// Pausable contract which allows children to implement an emergency stop mechanism.\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    // Modifier to make a function callable only when the contract is not paused.\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    // Modifier to make a function callable only when the contract is paused.\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n\n    // Сalled by the owner to pause, triggers stopped state\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    // Сalled by the owner to unpause, returns to normal state\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}\n\n// Interface for pet contract\ncontract ParentInterface {\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\n    function getPet(uint256 _id) external view returns (uint64 birthTime, uint256 genes,uint64 breedTimeout,uint16 quality,address owner);\n    function totalSupply() public view returns (uint);\n}\n\n// Simple utils, which calculate circle seats and grade by quality\ncontract Utils {\n    \n    function getGradeByQuailty(uint16 quality) public pure returns (uint8 grade) {\n        \n        require(quality <= uint16(0xF000));\n        require(quality >= uint16(0x1000));\n        \n        if(quality == uint16(0xF000))\n            return 7;\n        \n        quality+= uint16(0x1000);\n        \n        return uint8 ( quality / uint16(0x2000) );\n    }\n    \n    function seatsByGrade(uint8 grade) public pure returns(uint8 seats) {\n\t    if(grade > 4)\n\t        return 1;\n\t\n\t\tseats = 8 - grade - 2;\n\n\t\treturn seats;\n\t}\n}\n\n// Main contract, which calculating queue\ncontract ReferralQueue {\n    \n    // ID in circle\n    uint64 currentReceiverId = 1;\n\n    // Circle length\n    uint64 public circleLength;\n    \n    // Store queue of referral circle\n    struct ReferralSeat {\n        uint64 petId;\n        uint64 givenPetId;\n    }\n    \n    mapping (uint64 => ReferralSeat) public referralCircle;\n    \n    // Store simple information about each pet: parent parrot and current referral reward\n    struct PetInfo {\n        uint64 parentId;\n        uint256 amount;\n    }\n    \n    mapping (uint64 => PetInfo) public petsInfo;\n\n    \n    function addPetIntoCircle(uint64 _id, uint8 _seats) internal {\n        \n        // Adding seats into queue\n        for(uint8 i=0; i < _seats; i++)\n\t\t{\n\t\t    ReferralSeat memory _seat = ReferralSeat({\n                petId: _id,\n                givenPetId: 0\n            });\n\n            // Increasing circle length and save current seat in circle            \n            circleLength++;\n            referralCircle[circleLength] = _seat;\n\t\t}\n\t\t\n\t\t// Attach the parrot to the current receiver in the circle \n\t\t// First 3 parrots adding without attaching\n\t\tif(_id>103) {\n\t\t    \n\t\t    referralCircle[currentReceiverId].givenPetId = _id;\n\t\t    \n\t\t    // adding new pet into information list\n\t\t    PetInfo memory petInfo = PetInfo({\n\t\t        parentId: referralCircle[currentReceiverId].petId,\n\t\t        amount: 0\n\t\t    });\n\t\t    \n\t\t    petsInfo[_id] = petInfo;\n\t\t    \n\t\t    // Increace circle receiver ID\n            currentReceiverId++;\n        }\n    }\n    \n    // Current pet ID in circle for automatical attach\n    function getCurrentReceiverId() view public returns(uint64 receiverId) {\n        \n        return referralCircle[currentReceiverId].petId;\n    }\n}\n\ncontract Reward is ReferralQueue {\n    \n    // Getting egg price by id and quality\n    function getEggPrice(uint64 _petId, uint16 _quality) pure public returns(uint256 price) {\n        \t\t\n        uint64[6] memory egg_prices = [0, 150 finney, 600 finney, 3 ether, 12 ether, 600 finney];\n        \n\t\tuint8 egg = 2;\n\t\n\t\tif(_quality > 55000)\n\t\t    egg = 1;\n\t\t\t\n\t\tif(_quality > 26000 && _quality < 26500)\n\t\t\tegg = 3;\n\t\t\t\n\t\tif(_quality > 39100 && _quality < 39550)\n\t\t\tegg = 3;\n\t\t\t\n\t\tif(_quality > 31000 && _quality < 31250)\n\t\t\tegg = 4;\n\t\t\t\n\t\tif(_quality > 34500 && _quality < 35500)\n\t\t\tegg = 5;\n\t\t\t\n\t\tprice = egg_prices[egg];\n\t\t\n\t\tuint8 discount = 10;\n\t\t\n\t\tif(_petId<= 600)\n\t\t\tdiscount = 20;\n\t\tif(_petId<= 400)\n\t\t\tdiscount = 30;\n\t\tif(_petId<= 200)\n\t\t\tdiscount = 50;\n\t\tif(_petId<= 120)\n\t\t\tdiscount = 80;\n\t\t\n\t\tprice = price - (price*discount / 100);\n    }\n    \n    // Save rewards for all referral levels\n    function applyReward(uint64 _petId, uint16 _quality) internal {\n        \n        uint8[6] memory rewardByLevel = [0,250,120,60,30,15];\n        \n        uint256 eggPrice = getEggPrice(_petId, _quality);\n        \n        uint64 _currentPetId = _petId;\n        \n        // make rewards for 5 levels\n        for(uint8 level=1; level<=5; level++) {\n            uint64 _parentId = petsInfo[_currentPetId].parentId;\n            // if no parent referral - break\n            if(_parentId == 0)\n                break;\n            \n            // increase pet balance\n            petsInfo[_parentId].amount+= eggPrice * rewardByLevel[level] / 1000;\n            \n            // get parent id from parent id to move to the next level\n            _currentPetId = _parentId;\n        }\n        \n    }\n    \n    // Save rewards for all referral levels\n    function applyRewardByAmount(uint64 _petId, uint256 _price) internal {\n        \n        uint8[6] memory rewardByLevel = [0,250,120,60,30,15];\n        \n        uint64 _currentPetId = _petId;\n        \n        // Make rewards for 5 levels\n        for(uint8 i=1; i<=5; i++) {\n            uint64 _parentId = petsInfo[_currentPetId].parentId;\n            // if no parent referral - break\n            if(_parentId == 0)\n                break;\n            \n            // Increase pet balance\n            petsInfo[_parentId].amount+= _price * rewardByLevel[i] / 1000;\n            \n            // Get parent id from parent id to move to the next level\n            _currentPetId = _parentId;\n        }\n        \n    }\n}\n\n// Launch it\ncontract ReferralCircle is Reward, Utils, Pausable {\n    \n    // Interface link\n    ParentInterface public parentInterface;\n    \n    // Limit of manual synchronization repeats\n    uint8 public syncLimit = 5;\n    \n    // Pet counter\n    uint64 public lastPetId = 100;\n    \n    // Manual sync enabled\n    bool public petSyncEnabled = true;\n    \n    // Setting default parent interface    \n    constructor() public {\n        parentInterface = ParentInterface(0x115f56742474f108AD3470DDD857C31a3f626c3C);\n    }\n\n    // Disable manual synchronization\n    function disablePetSync() external onlyOwner {\n        petSyncEnabled = false;\n    }\n\n    // Enable manual synchronization\n    function enablePetSync() external onlyOwner {\n        petSyncEnabled = true;\n    }\n    \n    // Make synchronization, available for any sender\n    function sync() external whenNotPaused {\n        \n        // Checking synchronization status\n        require(petSyncEnabled);\n        \n        // Get supply of pets from parent contract\n        uint64 petSupply = uint64(parentInterface.totalSupply());\n        require(petSupply > lastPetId);\n\n        // Synchronize pets        \n        for(uint8 i=0; i < syncLimit; i++)\n        {\n            lastPetId++;\n            \n            if(lastPetId > petSupply)\n            {\n                lastPetId = petSupply;\n                break;\n            }\n            \n            addPet(lastPetId);\n        }\n    }\n    \n    // Change synchronization limit by owner\n    function setSyncLimit(uint8 _limit) external onlyOwner {\n        syncLimit = _limit;\n    }\n\n    // Function of manual add pet    \n    function addPet(uint64 _id) internal {\n        (uint64 birthTime, uint256 genes, uint64 breedTimeout, uint16 quality, address owner) = parentInterface.getPet(_id);\n        \n        uint16 gradeQuality = quality;\n\n        // For first pets - bonus quality in grade calculating\n        if(_id < 244)\n\t\t\tgradeQuality = quality - 13777;\n\t\t\t\n\t\t// Calculating seats in circle\n        uint8 petGrade = getGradeByQuailty(gradeQuality);\n        uint8 petSeats = seatsByGrade(petGrade);\n        \n        // Adding pet into circle\n        addPetIntoCircle(_id, petSeats);\n        \n        // Save reward for each referral level\n        applyReward(_id, quality);\n    }\n    \n    // Function for automatic add pet\n    function automaticPetAdd(uint256 _price, uint16 _quality, uint64 _id) external {\n        require(!petSyncEnabled);\n        require(msg.sender == address(parentInterface));\n        \n        lastPetId = _id;\n        \n        // Calculating seats in circle\n        uint8 petGrade = getGradeByQuailty(_quality);\n        uint8 petSeats = seatsByGrade(petGrade);\n        \n        // Adding pet into circle\n        addPetIntoCircle(_id, petSeats);\n        \n        // Save reward for each referral level\n        applyRewardByAmount(_id, _price);\n    }\n    \n    // Function for withdraw reward by pet owner\n    function withdrawReward(uint64 _petId) external whenNotPaused {\n        \n        // Get pet information\n        PetInfo memory petInfo = petsInfo[_petId];\n        \n        // Get owner of pet from pet contract and check it\n         (uint64 birthTime, uint256 genes, uint64 breedTimeout, uint16 quality, address petOwner) = parentInterface.getPet(_petId);\n        require(petOwner == msg.sender);\n\n        // Transfer reward\n        msg.sender.transfer(petInfo.amount);\n        \n        // Change reward amount in pet information\n        petInfo.amount = 0;\n        petsInfo[_petId] = petInfo;\n    }\n    \n    // Emergency reward sending by admin\n    function sendRewardByAdmin(uint64 _petId) external onlyOwner whenNotPaused {\n        \n        // Get pet information\n        PetInfo memory petInfo = petsInfo[_petId];\n        \n        // Get owner of pet from pet contract and check it\n        (uint64 birthTime, uint256 genes, uint64 breedTimeout, uint16 quality, address petOwner) = parentInterface.getPet(_petId);\n\n        // Transfer reward\n        petOwner.transfer(petInfo.amount);\n        \n        // Change reward amount in pet information\n        petInfo.amount = 0;\n        petsInfo[_petId] = petInfo;\n    }\n        \n    // Change parent contract\n    function setParentAddress(address _address) public whenPaused onlyOwner\n    {\n        parentInterface = ParentInterface(_address);\n    }\n\n    // Just refill    \n    function () public payable {}\n    \n    // Withdraw balance by owner\n    function withdrawBalance(uint256 summ) external onlyOwner {\n        owner.transfer(summ);\n    }\n}",
  "bytecode": "608060405260008054600167ffffffffffffffff199091161790556003805460a060020a60ff0219908116909155600480547d0100000000000000000000000000000000000000000000000000000000009216740500000000000000000000000000000000000000001760a860020a60e860020a03191675640000000000000000000000000000000000000000001760e860020a60ff0219169190911790553480156100aa57600080fd5b5060038054600160a060020a031990811633179091556004805490911673115f56742474f108ad3470ddd857c31a3f626c3c179055611494806100ee6000396000f3006080604052600436106101485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630b5734b6811461014a57806324c5ca581461017c57806337fdca62146101915780633f4ba83a146101a657806345ce06b9146101bb5780634ef9c3a5146101d05780635c975abb146102195780636564213e14610242578063713311cd1461026d5780637a2b4871146102995780637ba6151e146102ae5780638456cb59146102d0578063845b342d146102e55780638da5cb5b1461030057806390ca9dbf14610331578063b1da85f91461034d578063b2c35c2514610368578063bd2eb1f41461038a578063da76d5cd146103d0578063e472e356146103e8578063e541ac7114610423578063f2fde38b14610438578063f6f7896d14610459578063fa5afe401461046e578063fff6cae91461048f575b005b34801561015657600080fd5b5061015f6104a4565b6040805167ffffffffffffffff9092168252519081900360200190f35b34801561018857600080fd5b5061015f6104c5565b34801561019d57600080fd5b5061015f6104e1565b3480156101b257600080fd5b506101486104f8565b3480156101c757600080fd5b50610148610570565b3480156101dc57600080fd5b506101f267ffffffffffffffff600435166105b7565b6040805167ffffffffffffffff938416815291909216602082015281519081900390910190f35b34801561022557600080fd5b5061022e6105e3565b604080519115158252519081900360200190f35b34801561024e57600080fd5b506102576105f3565b6040805160ff9092168252519081900360200190f35b34801561027957600080fd5b5061014860043561ffff6024351667ffffffffffffffff60443516610603565b3480156102a557600080fd5b5061022e61069f565b3480156102ba57600080fd5b5061014867ffffffffffffffff600435166106af565b3480156102dc57600080fd5b50610148610864565b3480156102f157600080fd5b5061025760ff600435166108e1565b34801561030c57600080fd5b50610315610907565b60408051600160a060020a039092168252519081900360200190f35b34801561033d57600080fd5b5061025761ffff60043516610916565b34801561035957600080fd5b5061014860ff60043516610967565b34801561037457600080fd5b5061014867ffffffffffffffff600435166109af565b34801561039657600080fd5b506103ac67ffffffffffffffff60043516610b0e565b6040805167ffffffffffffffff909316835260208301919091528051918290030190f35b3480156103dc57600080fd5b50610148600435610b34565b3480156103f457600080fd5b5061041167ffffffffffffffff6004351661ffff60243516610b89565b60408051918252519081900360200190f35b34801561042f57600080fd5b50610148610d20565b34801561044457600080fd5b50610148600160a060020a0360043516610d61565b34801561046557600080fd5b50610315610db3565b34801561047a57600080fd5b50610148600160a060020a0360043516610dc2565b34801561049b57600080fd5b50610148610e20565b6000805467ffffffffffffffff908116825260016020526040909120541690565b60005468010000000000000000900467ffffffffffffffff1681565b60045460a860020a900467ffffffffffffffff1681565b600354600160a060020a0316331461050f57600080fd5b60035460a060020a900460ff16151561052757600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600354600160a060020a0316331461058757600080fd5b600480547fffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1660e860020a179055565b60016020526000908152604090205467ffffffffffffffff808216916801000000000000000090041682565b60035460a060020a900460ff1681565b60045460a060020a900460ff1681565b600454600090819060e860020a900460ff161561061f57600080fd5b600454600160a060020a0316331461063657600080fd5b600480547cffffffffffffffff000000000000000000000000000000000000000000191660a860020a67ffffffffffffffff86160217905561067784610916565b9150610682826108e1565b905061068e8382610fd8565b6106988386611141565b5050505050565b60045460e860020a900460ff1681565b6106b7611432565b6003546000908190819081908190600160a060020a031633146106d957600080fd5b60035460a060020a900460ff16156106f057600080fd5b67ffffffffffffffff8088166000818152600260209081526040808320815180830183528154909616865260010154918501919091526004805482517f59d55194000000000000000000000000000000000000000000000000000000008152918201949094529051939950600160a060020a03909216926359d551949260248082019360a0939283900390910190829087803b15801561078f57600080fd5b505af11580156107a3573d6000803e3d6000fd5b505050506040513d60a08110156107b957600080fd5b5080516020808301516040808501516060860151608090960151938c01519151949a509198509096509294509250600160a060020a0383169180156108fc02916000818181858888f19350505050158015610818573d6000803e3d6000fd5b50506000602086810182815267ffffffffffffffff9889168352600290915260409091209551865467ffffffffffffffff19169716969096178555505092516001909201919091555050565b600354600160a060020a0316331461087b57600080fd5b60035460a060020a900460ff161561089257600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600060048260ff1611156108f757506001610902565b506001196008829003015b919050565b600354600160a060020a031681565b600061f00061ffff8316111561092b57600080fd5b61100061ffff8316101561093e57600080fd5b61ffff821661f000141561095457506007610902565b506120006110009190910161ffff160490565b600354600160a060020a0316331461097e57600080fd5b6004805460ff90921660a060020a0274ff000000000000000000000000000000000000000019909216919091179055565b6109b7611432565b6000806000806000600360149054906101000a900460ff161515156109db57600080fd5b67ffffffffffffffff8088166000818152600260209081526040808320815180830183528154909616865260010154918501919091526004805482517f59d55194000000000000000000000000000000000000000000000000000000008152918201949094529051939950600160a060020a03909216926359d551949260248082019360a0939283900390910190829087803b158015610a7a57600080fd5b505af1158015610a8e573d6000803e3d6000fd5b505050506040513d60a0811015610aa457600080fd5b50805160208201516040830151606084015160809094015192985090965094509092509050600160a060020a0381163314610ade57600080fd5b6020860151604051339180156108fc02916000818181858888f19350505050158015610818573d6000803e3d6000fd5b6002602052600090815260409020805460019091015467ffffffffffffffff9091169082565b600354600160a060020a03163314610b4b57600080fd5b600354604051600160a060020a039091169082156108fc029083906000818181858888f19350505050158015610b85573d6000803e3d6000fd5b5050565b6000610b93611449565b506040805160c0810182526000808252670214e8348c4f00006020830152670853a0d2313c00009282018390526729a2241af62c0000606083015267a688906bd8b00000608083015260a08201929092529060029061d6d861ffff86161115610bfb57600191505b6165908561ffff16118015610c1557506167848561ffff16105b15610c1f57600391505b6198bc8561ffff16118015610c395750619a7e8561ffff16105b15610c4357600391505b6179188561ffff16118015610c5d5750617a128561ffff16105b15610c6757600491505b6186c48561ffff16118015610c815750618aac8561ffff16105b15610c8b57600591505b8260ff831660068110610c9a57fe5b602002015167ffffffffffffffff169350600a90506102588667ffffffffffffffff16111515610cc8575060145b61019067ffffffffffffffff871611610cdf5750601e5b60c867ffffffffffffffff871611610cf5575060325b607867ffffffffffffffff871611610d0b575060505b606460ff821685020490930395945050505050565b600354600160a060020a03163314610d3757600080fd5b600480547fffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff169055565b600354600160a060020a03163314610d7857600080fd5b600160a060020a03811615610db0576003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b600454600160a060020a031681565b60035460a060020a900460ff161515610dda57600080fd5b600354600160a060020a03163314610df157600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600090819060a060020a900460ff1615610e3c57600080fd5b60045460e860020a900460ff161515610e5457600080fd5b60048054604080517f18160ddd0000000000000000000000000000000000000000000000000000000081529051600160a060020a03909216926318160ddd9282820192602092908290030181600087803b158015610eb157600080fd5b505af1158015610ec5573d6000803e3d6000fd5b505050506040513d6020811015610edb57600080fd5b505160045490925067ffffffffffffffff60a860020a909104811690831611610f0357600080fd5b5060005b60045460ff60a060020a90910481169082161015610b855760048054600167ffffffffffffffff60a860020a808404821692909201811682027cffffffffffffffff0000000000000000000000000000000000000000001990931692909217928390558482169204161115610fb357600480547cffffffffffffffff000000000000000000000000000000000000000000191660a860020a67ffffffffffffffff851602179055610b85565b600454610fd09060a860020a900467ffffffffffffffff16611219565b600101610f07565b6000610fe2611432565b610fea611432565b600092505b8360ff168360ff16101561108c5760408051808201825267ffffffffffffffff808816825260006020808401828152825460016801000000000000000080830487168201871681026fffffffffffffffff0000000000000000199384161780875581900487168652938190529690932085518154925186169093029290941667ffffffffffffffff19909116179091161790559301929150610fef565b60678567ffffffffffffffff1611156106985750506000805467ffffffffffffffff908116825260016020818152604080852080546fffffffffffffffff0000000000000000191668010000000000000000998616998a02179055805180820182528554851686528186205485168152808301868152988652600290925284209051815467ffffffffffffffff1990811691851691909117825596519082015582549586169582160116939093179092555050565b611149611449565b506040805160c081018252600080825260fa6020830152607892820192909252603c6060820152601e6080820152600f60a08201529083906001905b600560ff831611611211575067ffffffffffffffff808316600090815260026020526040902054168015156111b957611211565b6103e88460ff8416600681106111cb57fe5b602002015160ff1686028115156111de57fe5b67ffffffffffffffff83166000908152600260205260409020600190810180549390920490920190559092500181611185565b505050505050565b600080600080600080600080600460009054906101000a9004600160a060020a0316600160a060020a03166359d551948a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808267ffffffffffffffff16815260200191505060a060405180830381600087803b1580156112a657600080fd5b505af11580156112ba573d6000803e3d6000fd5b505050506040513d60a08110156112d057600080fd5b508051602082015160408301516060840151608090940151929b509099509750909550935084925060f467ffffffffffffffff8a161015611313576135d1850392505b61131c83610916565b9150611327826108e1565b90506113338982610fd8565b61133d8986611348565b505050505050505050565b611350611449565b506040805160c081018252600080825260fa6020830152607892820192909252603c6060820152601e6080820152600f60a0820152908080806113938787610b89565b9350869250600191505b600560ff831611611429575067ffffffffffffffff808316600090815260026020526040902054168015156113d157611429565b6103e88560ff8416600681106113e357fe5b602002015160ff1685028115156113f657fe5b67ffffffffffffffff8316600090815260026020526040902060019081018054939092049092019055909250018161139d565b50505050505050565b604080518082019091526000808252602082015290565b60c06040519081016040528060069060208202803883395091929150505600a165627a7a7230582017103c3e2fcd054d9615118d0a639fe764b876757fc004b8606bd97656441eed0029"
}