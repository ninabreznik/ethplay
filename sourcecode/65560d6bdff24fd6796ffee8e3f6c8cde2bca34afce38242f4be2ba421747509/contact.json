{
  "address": "0x807b3f6868d2cae3c093b3f01ec985e4af5312f2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PTA",
  "compilerVersion": "v0.5.9+commit.e560f70d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-08\n*/\n\npragma solidity ^0.5.4;\n\n/* taking ideas from FirstBlood token */\ncontract SafeMath {\n\n    /* function assert(bool assertion) internal { */\n    /*   if (!assertion) { */\n    /*     throw; */\n    /*   } */\n    /* }      // assert no longer needed once solidity is on 0.4.10 */\n\n    function safeAdd(uint256 x, uint256 y) internal pure returns(uint256) {\n      uint256 z = x + y;\n      assert((z >= x) && (z >= y));\n      return z;\n    }\n\n    function safeSub(uint256 x, uint256 y) internal pure returns(uint256) {\n      assert(x >= y);\n      uint256 z = x - y;\n      return z;\n    }\n\n    function safeMult(uint256 x, uint256 y) internal pure returns(uint256) {\n      uint256 z = x * y;\n      assert((x == 0)||(z/x == y));\n      return z;\n    }\n\n    function safeDiv(uint256 x, uint256 y) internal pure returns(uint256) {\n        require(y > 0);\n        return x / y;\n    }\n}\n\ncontract Authorization {\n    mapping(address => bool) internal authbook;\n    address[] public operators;\n    address public owner;\n    bool public powerStatus = true;\n    constructor()\n        public\n        payable\n    {\n        owner = msg.sender;\n        assignOperator(msg.sender);\n    }\n    modifier onlyOwner\n    {\n        assert(msg.sender == owner);\n        _;\n    }\n    modifier onlyOperator\n    {\n        assert(checkOperator(msg.sender));\n        _;\n    }\n    modifier onlyActive\n    {\n        assert(powerStatus);\n        _;\n    }\n    function powerSwitch(\n        bool onOff_\n    )\n        public\n        onlyOperator\n    {\n        powerStatus = onOff_;\n    }\n    function transferOwnership(address newOwner_)\n        onlyOwner\n        public\n    {\n        owner = newOwner_;\n    }\n    \n    function assignOperator(address user_)\n        public\n        onlyOwner\n    {\n        if(user_ != address(0) && !authbook[user_]) {\n            authbook[user_] = true;\n            operators.push(user_);\n        }\n    }\n    \n    function dismissOperator(address user_)\n        public\n        onlyOwner\n    {\n        delete authbook[user_];\n        for(uint i = 0; i < operators.length; i++) {\n            if(operators[i] == user_) {\n                operators[i] = operators[operators.length - 1];\n                operators.length -= 1;\n            }\n        }\n    }\n\n    function checkOperator(address user_)\n        public\n        view\n    returns(bool) {\n        return authbook[user_];\n    }\n}\n\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\n\ncontract Token is Authorization {\n    uint256 public totalSupply;\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n    \n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n/*  ERC 20 token */\ncontract StandardToken is SafeMath, Token {\n    /* Send coins */\n    function transfer(address _to, uint256 _value) onlyActive public returns (bool success) {\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] = safeSub(balances[msg.sender], _value);\n            balances[_to] = safeAdd(balances[_to], _value);\n            emit Transfer(msg.sender, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) onlyActive public returns (bool success) {\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] = safeAdd(balances[_to], _value);\n            balances[_from] = safeSub(balances[_from], _value);\n            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n            emit Transfer(_from, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function balanceOf(address _owner) view public returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /* Allow another contract to spend some tokens in your behalf */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        assert((_value == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /* This creates an array with all balances */\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n}\n\ncontract PTA is StandardToken {\n\n    // metadata\n    string public name = \"Plant Technology Alliance\";\n    string public symbol = \"PTA\";\n    uint256 public constant decimals = 18;\n    string public version = \"1.0\";\n    uint256 public tokenCreationCap =  1 * (10**9) * 10**decimals;\n\n    // fund accounts\n    address public FundAccount;      // deposit address for Owner.\n\n    // events\n    event CreateToken(address indexed _to, uint256 _value);\n\n    // constructor\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint256 _tokenCreationCap,\n        address _FundAccount\n    ) public\n    {\n        name = _name;\n        symbol = _symbol;\n        tokenCreationCap = _tokenCreationCap * 10**decimals;\n        FundAccount = _FundAccount;\n        totalSupply = tokenCreationCap;\n        balances[FundAccount] = tokenCreationCap;    // deposit all token to Owner.\n        emit CreateToken(FundAccount, tokenCreationCap);    // logs deposit of Owner\n    }\n\n    /* Approve and then communicate the approved contract in a single tx */\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public\n        returns (bool success) {    \n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n            return true;\n        }\n    }\n}",
  "bytecode": "60806040526001600260146101000a81548160ff0219169083151502179055506040518060400160405280601981526020017f506c616e7420546563686e6f6c6f677920416c6c69616e636500000000000000815250600690805190602001906200006c9291906200056e565b506040518060400160405280600381526020017f505441000000000000000000000000000000000000000000000000000000000081525060079080519060200190620000ba9291906200056e565b506040518060400160405280600381526020017f312e30000000000000000000000000000000000000000000000000000000000081525060089080519060200190620001089291906200056e565b506012600a0a633b9aca00026009553480156200012457600080fd5b506040516200201a3803806200201a833981810160405260808110156200014a57600080fd5b8101908080516401000000008111156200016357600080fd5b828101905060208101848111156200017a57600080fd5b81518560018202830111640100000000821117156200019857600080fd5b50509291906020018051640100000000811115620001b557600080fd5b82810190506020810184811115620001cc57600080fd5b8151856001820283011164010000000082111715620001ea57600080fd5b5050929190602001805190602001909291908051906020019092919050505033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200025b33620003c860201b60201c565b8360069080519060200190620002739291906200056e565b5082600790805190602001906200028c9291906200056e565b506012600a0a820260098190555080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060095460038190555060095460046000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb378e89b40ac5bbe0e2241b596fbe1adc3cf1fb7c982aa1b4560165cf264ee936009546040518082815260200191505060405180910390a2505050506200061d565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200042057fe5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015620004a757506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b156200056b5760016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060018190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620005b157805160ff1916838001178555620005e2565b82800160010185558215620005e2579182015b82811115620005e1578251825591602001919060010190620005c4565b5b509050620005f19190620005f5565b5090565b6200061a91905b8082111562000616576000816000905550600101620005fc565b5090565b90565b6119ed806200062d6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806385ddf726116100b8578063dd1219fd1161007c578063dd1219fd146106e2578063dd62ed3e14610712578063de1ac2fd1461078a578063df9204b6146107e6578063e28d490614610808578063f2fde38b1461087657610137565b806385ddf7261461046e5780638da5cb5b146104b257806395d89b41146104fc578063a9059cbb1461057f578063cae9ca51146105e557610137565b80633eb10ab3116100ff5780633eb10ab3146102e757806354fd4d50146103315780636f7920fd146103b457806370a08231146103d257806384385c6f1461042a57610137565b806306fdde031461013c578063095ea7b3146101bf57806318160ddd1461022557806323b872dd14610243578063313ce567146102c9575b600080fd5b6101446108ba565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610184578082015181840152602081019050610169565b50505050905090810190601f1680156101b15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61020b600480360360408110156101d557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610958565b604051808215151515815260200191505060405180910390f35b61022d610ada565b6040518082815260200191505060405180910390f35b6102af6004803603606081101561025957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ae0565b604051808215151515815260200191505060405180910390f35b6102d1610e6c565b6040518082815260200191505060405180910390f35b6102ef610e71565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610339610e97565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561037957808201518184015260208101905061035e565b50505050905090810190601f1680156103a65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103bc610f35565b6040518082815260200191505060405180910390f35b610414600480360360208110156103e857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f3b565b6040518082815260200191505060405180910390f35b61046c6004803603602081101561044057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f84565b005b6104b06004803603602081101561048457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611127565b005b6104ba611307565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61050461132d565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610544578082015181840152602081019050610529565b50505050905090810190601f1680156105715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6105cb6004803603604081101561059557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113cb565b604051808215151515815260200191505060405180910390f35b6106c8600480360360608110156105fb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561064257600080fd5b82018360208201111561065457600080fd5b8035906020019184600183028401116401000000008311171561067657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506115c8565b604051808215151515815260200191505060405180910390f35b610710600480360360208110156106f857600080fd5b81019080803515159060200190929190505050611730565b005b6107746004803603604081101561072857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061175c565b6040518082815260200191505060405180910390f35b6107cc600480360360208110156107a057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117e3565b604051808215151515815260200191505060405180910390f35b6107ee611838565b604051808215151515815260200191505060405180910390f35b6108346004803603602081101561081e57600080fd5b810190808035906020019092919050505061184b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6108b86004803603602081101561088c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611887565b005b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109505780601f1061092557610100808354040283529160200191610950565b820191906000526020600020905b81548152906001019060200180831161093357829003601f168201915b505050505081565b6000808214806109e457506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b6109ea57fe5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60035481565b6000600260149054906101000a900460ff16610af857fe5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610bc3575081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610bcf5750600082115b15610e6057610c1d600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611922565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ca9600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361194a565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d72600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361194a565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610e65565b600090505b9392505050565b601281565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60088054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f2d5780601f10610f0257610100808354040283529160200191610f2d565b820191906000526020600020905b815481529060010190602001808311610f1057829003601f168201915b505050505081565b60095481565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fdb57fe5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415801561106157506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b156111245760016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060018190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461117e57fe5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff021916905560008090505b600180549050811015611303578173ffffffffffffffffffffffffffffffffffffffff166001828154811061120357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156112f6576001808080549050038154811061125d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001828154811061129557fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600180818180549050039150816112f49190611967565b505b80806001019150506111d2565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113c35780601f10611398576101008083540402835291602001916113c3565b820191906000526020600020905b8154815290600101906020018083116113a657829003601f168201915b505050505081565b6000600260149054906101000a900460ff166113e357fe5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156114325750600082115b156115bd57611480600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361194a565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061150c600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611922565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190506115c2565b600090505b92915050565b6000808490506115d88585610958565b15611727578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156116b657808201518184015260208101905061169b565b50505050905090810190601f1680156116e35780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561170557600080fd5b505af1158015611719573d6000803e3d6000fd5b505050506001915050611729565b505b9392505050565b611739336117e3565b61173f57fe5b80600260146101000a81548160ff02191690831515021790555050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600260149054906101000a900460ff1681565b6001818154811061185857fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146118de57fe5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080828401905083811015801561193a5750828110155b61194057fe5b8091505092915050565b60008183101561195657fe5b600082840390508091505092915050565b81548183558181111561198e5781836000526020600020918201910161198d9190611993565b5b505050565b6119b591905b808211156119b1576000816000905550600101611999565b5090565b9056fea265627a7a7230582046b1f762c87af07902c0e66633ccb57336f7cdf92e8a6c8268ac57bd56a6c47464736f6c63430005090032000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000001270a0aad453a315c5ab99397d88121c34453eb40000000000000000000000000000000000000000000000000000000000000019506c616e7420546563686e6f6c6f677920416c6c69616e63650000000000000000000000000000000000000000000000000000000000000000000000000000035054410000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000001270a0aad453a315c5ab99397d88121c34453eb40000000000000000000000000000000000000000000000000000000000000019506c616e7420546563686e6f6c6f677920416c6c69616e63650000000000000000000000000000000000000000000000000000000000000000000000000000035054410000000000000000000000000000000000000000000000000000000000"
}