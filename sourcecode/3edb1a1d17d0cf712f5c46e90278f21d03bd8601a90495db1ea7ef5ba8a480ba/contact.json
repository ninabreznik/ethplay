{
  "address": "0x2823589ae095d99bd64deea80b4690313e2fb519",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WeenusToken",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-06\n*/\n\npragma solidity ^0.5.4;\n\n// ----------------------------------------------------------------------------\n// 'WEENUS' 'Weenus ðŸ’ª' token contract with a faucet minting for testing\n//\n// Send an 0 value transaction with no data to mint 1,000 new tokens\n//\n// Symbol      : WEENUS\n// Name        : Weenus ðŸ’ª\n// Total supply: 1,000,000.000000000000000000 + faucet minting\n// Decimals    : 18\n// Deployed to : Mainnet 0x2823589Ae095D99bD64dEeA80B4690313e2fB519\n//\n//\n// Enjoy.\n//\n// (c) BokkyPooBah / Bok Consulting Pty Ltd 2019. The MIT Licence.\n// ----------------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n}\n\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and a\n// fixed supply\n// ----------------------------------------------------------------------------\ncontract WeenusToken is ERC20Interface, Owned {\n    using SafeMath for uint;\n\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint _totalSupply;\n    uint _drop;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n\n    constructor() public {\n        symbol = \"WEENUS\";\n        name = \"Weenus ðŸ’ª\";\n        decimals = 18;\n        _totalSupply = 1000000 * 10**uint(decimals);\n        _drop = 1000 * 10**uint(decimals);\n        balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, _totalSupply);\n    }\n    function totalSupply() public view returns (uint) {\n        return _totalSupply.sub(balances[address(0)]);\n    }\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return balances[tokenOwner];\n    }\n    function transfer(address to, uint tokens) public returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n    function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n        return true;\n    }\n    function mint(address tokenOwner, uint tokens) internal returns (bool success) {\n        balances[tokenOwner] = balances[tokenOwner].add(tokens);\n        _totalSupply = _totalSupply.add(tokens);\n        emit Transfer(address(0), tokenOwner, tokens);\n        return true;\n    }\n    function drip() public {\n        mint(msg.sender, _drop);\n    }\n\n    function () external payable {\n        mint(msg.sender, _drop);\n        if (msg.value > 0) {\n            msg.sender.transfer(msg.value);\n        }\n    }\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a031916331790556040805180820190915260068082527f5745454e55530000000000000000000000000000000000000000000000000000602090920191825261006791600291610134565b5060408051808201909152600b8082527f5765656e757320f09f92aa00000000000000000000000000000000000000000060209092019182526100ac91600391610134565b5060048054601260ff19909116179081905560ff16600a0a620f4240810260058190556103e890910260065560008054600160a060020a0390811682526007602090815260408084208590558354815195865290519216937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a36101cf565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061017557805160ff19168380011785556101a2565b828001600101855582156101a2579182015b828111156101a2578251825591602001919060010190610187565b506101ae9291506101b2565b5090565b6101cc91905b808211156101ae57600081556001016101b8565b90565b610cc6806101de6000396000f3fe608060405260043610610110576000357c01000000000000000000000000000000000000000000000000000000009004806395d89b41116100a7578063d4ee1d9011610076578063d4ee1d9014610466578063dc39d06d1461047b578063dd62ed3e146104b4578063f2fde38b146104ef57610110565b806395d89b411461033b5780639f678cca14610350578063a9059cbb14610365578063cae9ca511461039e57610110565b8063313ce567116100e3578063313ce5671461029757806370a08231146102c257806379ba5097146102f55780638da5cb5b1461030a57610110565b806306fdde0314610156578063095ea7b3146101e057806318160ddd1461022d57806323b872dd14610254575b61011c33600654610522565b5060003411156101545760405133903480156108fc02916000818181858888f19350505050158015610152573d6000803e3d6000fd5b505b005b34801561016257600080fd5b5061016b6105c5565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a557818101518382015260200161018d565b50505050905090810190601f1680156101d25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ec57600080fd5b506102196004803603604081101561020357600080fd5b50600160a060020a038135169060200135610653565b604080519115158252519081900360200190f35b34801561023957600080fd5b506102426106b9565b60408051918252519081900360200190f35b34801561026057600080fd5b506102196004803603606081101561027757600080fd5b50600160a060020a038135811691602081013590911690604001356106fc565b3480156102a357600080fd5b506102ac610807565b6040805160ff9092168252519081900360200190f35b3480156102ce57600080fd5b50610242600480360360208110156102e557600080fd5b5035600160a060020a0316610810565b34801561030157600080fd5b5061015461082b565b34801561031657600080fd5b5061031f6108b3565b60408051600160a060020a039092168252519081900360200190f35b34801561034757600080fd5b5061016b6108c2565b34801561035c57600080fd5b5061015461091a565b34801561037157600080fd5b506102196004803603604081101561038857600080fd5b50600160a060020a038135169060200135610929565b3480156103aa57600080fd5b50610219600480360360608110156103c157600080fd5b600160a060020a03823516916020810135918101906060810160408201356401000000008111156103f157600080fd5b82018360208201111561040357600080fd5b8035906020019184600183028401116401000000008311171561042557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506109d9945050505050565b34801561047257600080fd5b5061031f610b3a565b34801561048757600080fd5b506102196004803603604081101561049e57600080fd5b50600160a060020a038135169060200135610b49565b3480156104c057600080fd5b50610242600480360360408110156104d757600080fd5b50600160a060020a0381358116916020013516610c04565b3480156104fb57600080fd5b506101546004803603602081101561051257600080fd5b5035600160a060020a0316610c2f565b600160a060020a03821660009081526007602052604081205461054b908363ffffffff610c7516565b600160a060020a038416600090815260076020526040902055600554610577908363ffffffff610c7516565b600555604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35060015b92915050565b6003805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561064b5780601f106106205761010080835404028352916020019161064b565b820191906000526020600020905b81548152906001019060200180831161062e57829003601f168201915b505050505081565b336000818152600860209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600080805260076020527f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6df546005546106f79163ffffffff610c8516565b905090565b600160a060020a038316600090815260076020526040812054610725908363ffffffff610c8516565b600160a060020a0385166000908152600760209081526040808320939093556008815282822033835290522054610762908363ffffffff610c8516565b600160a060020a0380861660009081526008602090815260408083203384528252808320949094559186168152600790915220546107a6908363ffffffff610c7516565b600160a060020a0380851660008181526007602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b60045460ff1681565b600160a060020a031660009081526007602052604090205490565b600154600160a060020a0316331461084257600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152929183018282801561064b5780601f106106205761010080835404028352916020019161064b565b61092633600654610522565b50565b33600090815260076020526040812054610949908363ffffffff610c8516565b3360009081526007602052604080822092909255600160a060020a0385168152205461097b908363ffffffff610c7516565b600160a060020a0384166000818152600760209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000818152600860209081526040808320600160a060020a038816808552908352818420879055815187815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a36040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018690523060448401819052608060648501908152865160848601528651600160a060020a038a1695638f4ffcb195948a94938a939192909160a490910190602085019080838360005b83811015610ac9578181015183820152602001610ab1565b50505050905090810190601f168015610af65780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610b1857600080fd5b505af1158015610b2c573d6000803e3d6000fd5b506001979650505050505050565b600154600160a060020a031681565b60008054600160a060020a03163314610b6157600080fd5b60008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810186905290519186169263a9059cbb926044808401936020939083900390910190829087803b158015610bd157600080fd5b505af1158015610be5573d6000803e3d6000fd5b505050506040513d6020811015610bfb57600080fd5b50519392505050565b600160a060020a03918216600090815260086020908152604080832093909416825291909152205490565b600054600160a060020a03163314610c4657600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b818101828110156105bf57600080fd5b600082821115610c9457600080fd5b5090039056fea165627a7a7230582039806f4d6c5cf7caf5b6167c964e7be3f312232c72a5e710eb2ad72d191720f50029"
}