{
  "address": "0x9d66fe7409a7c13f7715eecb50e259b95fede410",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "subdomainSale",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-07-29\n*/\n\npragma solidity ^0.4.13;\n\ncontract AbstractENS{\n    function owner(bytes32 node) constant returns(address);\n    function setOwner(bytes32 node, address owner);\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\n}\n\ncontract Registrar {\n  function transfer(bytes32 _hash, address newOwner);\n  function entries(bytes32 _hash) constant returns (uint, Deed, uint, uint, uint);\n}\n\ncontract Deed {\n  address public owner;\n  address public previousOwner;\n}\n\ncontract subdomainSale{\n  AbstractENS ens = AbstractENS(0x314159265dD8dbb310642f98f50C066173C1259b);\n  Registrar registrar = Registrar(0x6090A6e47849629b7245Dfa1Ca21D94cd15878Ef);  \n  address admin = 0x8301Fb8945760Fa2B3C669e8F420B8795Dc03766;\n\n\n  struct Domain{\n    address originalOwner;\n    uint commitPeriod;\n    uint regPeriod;\n    bool subSale;\n    uint subPrice;\n    uint subExpiry;\n  }\n\n  mapping(bytes32=>Domain) records;\n\n  modifier deed_check(bytes32 label){\n     Deed deed;\n     (,deed,,,) = registrar.entries(label); \n     if(deed.owner() != address(this)) throw;\n     _;\n  }\n \n  modifier prevOwn_check(bytes32 label){\n    Deed deed;\n     (,deed,,,) = registrar.entries(label); \n     if(deed.previousOwner() != msg.sender) throw;\n     _;\n  }\n\n  modifier ens_check(bytes32 node){\n    if(ens.owner(node) != address(this)) throw;\n    _;\n  }\n\n\n  modifier recorded_owner(bytes32 node){\n    if (records[node].originalOwner != msg.sender) throw;\n    _;\n  }\n\n  function subdomainSale() {}\n\n  function listSubName(bytes32 label,bytes32 node,uint commit, uint price,uint expiry) prevOwn_check(label) deed_check(label) ens_check(node){\n    require(records[node].subSale == false); \n    require(expiry>=604800);   \n    require(expiry<=commit);\n\n    records[node].originalOwner=msg.sender;\n    records[node].subSale=true;\n    records[node].subPrice=price;\n    records[node].subExpiry=expiry;\n    records[node].commitPeriod=now + commit + 86400;\n  }\n\n  function unlistSubName(bytes32 label,bytes32 node) recorded_owner(node) ens_check(node) deed_check(label){\n    require(records[node].commitPeriod <= now);    \n\n    ens.setOwner(node,records[node].originalOwner);\n    registrar.transfer(label,records[node].originalOwner);\n \n    records[node].originalOwner=address(0x0);\n    records[node].subSale=false;\n    records[node].subPrice = 0;\n    records[node].subExpiry = 0;\n    records[node].commitPeriod=0;\n  }\n\n  function nodeCheck(bytes32 node) returns(address){\n    return ens.owner(node);\n  }\n\n  function subRegistrationPeriod(bytes32 node) returns(uint){\n    return records[node].subExpiry;\n  }\n\n  function checkSubAvailability(bytes32 node) returns(bool){\n    return records[node].subSale;\n  }\n\n  function checkSubPrice(bytes32 node) returns(uint){\n    return records[node].subPrice;\n  }\n\n  function checkCommitPeriod(bytes32 node) returns(uint){\n    return records[node].commitPeriod;\n  }\n\n  function checkRegPeriod(bytes32 node) returns(uint){\n    return records[node].regPeriod;\n  }\n\n  function subBuy(bytes32 ensName,bytes32 subNode,bytes32 newNode,address newOwner) payable ens_check(ensName) {\n    require( (records[ensName].subExpiry + now + 5) < records[ensName].commitPeriod );\n    require(records[ensName].subSale == true);\n    require(msg.value >= records[ensName].subPrice);\n    \n    require(records[newNode].regPeriod < now);\n\n    uint fee = msg.value/20;\n    uint netPrice = msg.value - fee;\n\n    admin.transfer(fee);\n    records[ensName].originalOwner.transfer(netPrice);\n\n    records[newNode].regPeriod = now + records[ensName].subExpiry;\n    records[newNode].subSale = false;\n    records[newNode].subPrice = 0;\n    records[newNode].subExpiry = 0;\n    records[newNode].commitPeriod=0;\n\n    ens.setSubnodeOwner(ensName,subNode,newOwner);\n  }\n\n function() payable{\n    admin.transfer(msg.value);\n  }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"ensName\",\"type\":\"bytes32\"},{\"name\":\"subNode\",\"type\":\"bytes32\"},{\"name\":\"newNode\",\"type\":\"bytes32\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"subBuy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"label\",\"type\":\"bytes32\"},{\"name\":\"node\",\"type\":\"bytes32\"},{\"name\":\"commit\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"listSubName\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"checkCommitPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"label\",\"type\":\"bytes32\"},{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"unlistSubName\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"subRegistrationPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"nodeCheck\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"checkSubPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"checkSubAvailability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"checkRegPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]",
  "bytecode": "606060405260008054600160a060020a031990811673314159265dd8dbb310642f98f50c066173c1259b17909155600180548216736090a6e47849629b7245dfa1ca21d94cd15878ef17905560028054909116738301fb8945760fa2b3c669e8f420b8795dc03766179055341561007557600080fd5b5b5b5b610c04806100876000396000f3006060604052361561007d5763ffffffff60e060020a60003504166346b5541681146100ba578063639d3e69146100d95780636437ab0b146100fd578063753d764c14610125578063935600ce146101405780639f45c8ec14610168578063a85165e01461019a578063df10dd6e146101c2578063f6ac54dd146101ec575b6100b85b600254600160a060020a03163480156108fc0290604051600060405180830381858888f1935050505015156100b557600080fd5b5b565b005b6100b8600435602435604435600160a060020a0360643516610214565b005b34156100e457600080fd5b6100b860043560243560443560643560843561046f565b005b341561010857600080fd5b6101136004356107ba565b60405190815260200160405180910390f35b341561013057600080fd5b6100b86004356024356107d2565b005b341561014b57600080fd5b610113600435610b01565b60405190815260200160405180910390f35b341561017357600080fd5b61017e600435610b19565b604051600160a060020a03909116815260200160405180910390f35b34156101a557600080fd5b610113600435610b8c565b60405190815260200160405180910390f35b34156101cd57600080fd5b6101d8600435610ba4565b604051901515815260200160405180910390f35b34156101f757600080fd5b610113600435610bc0565b60405190815260200160405180910390f35b6000805481908690600160a060020a0330811691166302571be383856040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561026d57600080fd5b6102c65a03f1151561027e57600080fd5b50505060405180519050600160a060020a031614151561029d57600080fd5b600087815260036020526040902060018101546005918201544201909101106102c557600080fd5b6000878152600360208190526040909120015460ff1615156001146102e957600080fd5b60008781526003602052604090206004015434101561030757600080fd5b60008581526003602052604090206002015442901061032557600080fd5b6014345b6002549190049350348490039250600160a060020a031683156108fc0284604051600060405180830381858888f19350505050151561036757600080fd5b6000878152600360205260409081902054600160a060020a03169083156108fc0290849051600060405180830381858888f1935050505015156103a957600080fd5b6000878152600360208190526040808320600590810154898552828520429091016002820155928301805460ff1916905560048301849055820183905560019091018290559054600160a060020a0316906306ab5923908990899088905160e060020a63ffffffff861602815260048101939093526024830191909152600160a060020a03166044820152606401600060405180830381600087803b151561045057600080fd5b6102c65a03f1151561046157600080fd5b5050505b5b50505050505050565b6001548590600090600160a060020a031663267b6922838360405160a0015260405160e060020a63ffffffff8416028152600481019190915260240160a060405180830381600087803b15156104c457600080fd5b6102c65a03f115156104d557600080fd5b50505060405180519060200180519060200180519060200180519060200180515092945050600160a060020a0333811693508416915063674f220f90506000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561054957600080fd5b6102c65a03f1151561055a57600080fd5b50505060405180519050600160a060020a031614151561057957600080fd5b6001548790600090600160a060020a031663267b6922838360405160a0015260405160e060020a63ffffffff8416028152600481019190915260240160a060405180830381600087803b15156105ce57600080fd5b6102c65a03f115156105df57600080fd5b50505060405180519060200180519060200180519060200180519060200180515092945050600160a060020a03308116935084169150638da5cb5b90506000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561065357600080fd5b6102c65a03f1151561066457600080fd5b50505060405180519050600160a060020a031614151561068357600080fd5b600080548991600160a060020a033081169216906302571be39084906040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156106dc57600080fd5b6102c65a03f115156106ed57600080fd5b50505060405180519050600160a060020a031614151561070c57600080fd5b6000898152600360208190526040909120015460ff161561072c57600080fd5b62093a8086101561073c57600080fd5b8786111561074957600080fd5b6000898152600360208190526040909120805473ffffffffffffffffffffffffffffffffffffffff191633600160a060020a0316178155908101805460ff191660019081179091556004820189905560058201889055428a0162015180019101555b5b505b50505b50505050505050565b6000818152600360205260409020600101545b919050565b600081815260036020526040902054819033600160a060020a039081169116146107fb57600080fd5b600080548391600160a060020a033081169216906302571be39084906040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561085457600080fd5b6102c65a03f1151561086557600080fd5b50505060405180519050600160a060020a031614151561088457600080fd5b6001548490600090600160a060020a031663267b6922838360405160a0015260405160e060020a63ffffffff8416028152600481019190915260240160a060405180830381600087803b15156108d957600080fd5b6102c65a03f115156108ea57600080fd5b50505060405180519060200180519060200180519060200180519060200180515092945050600160a060020a03308116935084169150638da5cb5b90506000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561095e57600080fd5b6102c65a03f1151561096f57600080fd5b50505060405180519050600160a060020a031614151561098e57600080fd5b600085815260036020526040902060010154429011156109ad57600080fd5b60008054868252600360205260409182902054600160a060020a0391821692635b0fc9c392899216905160e060020a63ffffffff85160281526004810192909252600160a060020a03166024820152604401600060405180830381600087803b1515610a1857600080fd5b6102c65a03f11515610a2957600080fd5b50506001546000878152600360205260409081902054600160a060020a0392831693506379ce9fac928a929116905160e060020a63ffffffff85160281526004810192909252600160a060020a03166024820152604401600060405180830381600087803b1515610a9957600080fd5b6102c65a03f11515610aaa57600080fd5b50505060008581526003602081905260408220805473ffffffffffffffffffffffffffffffffffffffff19168155908101805460ff191690556004810182905560058101829055600101555b5b50505b505b505050565b6000818152600360205260409020600501545b919050565b60008054600160a060020a03166302571be383836040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515610b6a57600080fd5b6102c65a03f11515610b7b57600080fd5b50505060405180519150505b919050565b6000818152600360205260409020600401545b919050565b6000818152600360208190526040909120015460ff165b919050565b6000818152600360205260409020600201545b9190505600a165627a7a723058201ff2e77fbda47d3b3cff777b41c0e31c3bf5b49bd4c4aa8717c4c6c895335f330029"
}