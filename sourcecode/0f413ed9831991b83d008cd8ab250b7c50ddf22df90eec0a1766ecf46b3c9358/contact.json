{
  "address": "0x8bca9dada921a9b848e1bc12a3668f8121e75e4c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Presale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "0",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-28\n*/\n\npragma solidity ^0.4.24;\n// produced by the Solididy File Flattener (c) David Appleton 2018\n// contact : [emailÂ protected]\n// released under Apache 2.0 licence\n// input  D:\\Repositories\\GitHub\\Cronos\\src\\CRS.Presale.Contract\\contracts\\Presale.sol\n// flattened :  Friday, 28-Dec-18 10:47:36 UTC\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\ncontract ReentrancyGuard {\n\n  /// @dev counter to allow mutex lock with only one SSTORE operation\n  uint256 private _guardCounter;\n\n  constructor() internal {\n    // The counter starts at one to prevent changing it from zero to a non-zero\n    // value, which is a more expensive operation.\n    _guardCounter = 1;\n  }\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * Calling a `nonReentrant` function from another `nonReentrant`\n   * function is not supported. It is possible to prevent this from happening\n   * by making the `nonReentrant` function external, and make it call a\n   * `private` function that does the actual work.\n   */\n  modifier nonReentrant() {\n    _guardCounter += 1;\n    uint256 localCounter = _guardCounter;\n    _;\n    require(localCounter == _guardCounter);\n  }\n\n}\n\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\ncontract Presale is Ownable, ReentrancyGuard {\n  using SafeMath for uint256;\n\n  struct ReferralData {\n    uint256 referrals; // number of referrals\n    uint256 bonusSum;  // sum of all bonuses - this is just for showing the total amount - for payouts the referralBonuses mapping will be used\n    address[] children; // child referrals\n  }\n\n  uint256 public currentPrice = 0;\n\n  bool public isActive = false;\n\n  uint256 public currentDiscountSum = 0;                       // current sum of all discounts (have to stay in the contract for payout)\n  uint256 public overallDiscountSum = 0;                       // sum of all discounts given since beginning\n\n  bool public referralsEnabled = true;                      // are referrals enabled in general\n\n  mapping(address => uint) private referralBonuses;\n\n  uint256 public referralBonusMaxDepth = 3;                                  // used to ensure the max depth\n  mapping(uint256 => uint) public currentReferralCommissionPercentages;      // commission levels\n  uint256 public currentReferralBuyerDiscountPercentage = 5;                 // discount percentage if a buyer uses a valid affiliate link\n\n  mapping(address => address) private parentReferrals;    // parent relationship\n  mapping(address => ReferralData) private referralData;  // referral data for this address\n  mapping(address => uint) private nodesBought;           // number of bought nodes\n\n  mapping(address => bool) private manuallyAddedReferrals; // we need a chance to add referrals manually since this is needed for promotion\n\n  event MasternodeSold(address buyer, uint256 price, string coinsTargetAddress, bool referral);\n  event MasternodePriceChanged(uint256 price);\n  event ReferralAdded(address buyer, address parent);\n\n  constructor() public {\n    currentReferralCommissionPercentages[0] = 10;\n    currentReferralCommissionPercentages[1] = 5;\n    currentReferralCommissionPercentages[2] = 3;\n  }\n\n  function () external payable {\n      // nothing to do\n  }\n\n  function buyMasternode(string memory coinsTargetAddress) public nonReentrant payable {\n    _buyMasternode(coinsTargetAddress, false, owner());\n  }\n\n  function buyMasternodeReferral(string memory coinsTargetAddress, address referral) public nonReentrant payable {\n    _buyMasternode(coinsTargetAddress, referralsEnabled, referral);\n  }\n\n  function _buyMasternode(string memory coinsTargetAddress, bool useReferral, address referral) internal {\n    require(isActive, \"Buying is currently deactivated.\");\n    require(currentPrice > 0, \"There was no MN price set so far.\");\n\n    uint256 nodePrice = currentPrice;\n\n    // nodes can be bought cheaper if the user uses a valid referral address\n    if (useReferral && isValidReferralAddress(referral)) {\n      nodePrice = getDiscountedNodePrice();\n    }\n\n    require(msg.value >= nodePrice, \"Sent amount of ETH was too low.\");\n\n    // check target address\n    uint256 length = bytes(coinsTargetAddress).length;\n    require(length >= 30 && length <= 42 , \"Coins target address invalid\");\n\n    if (useReferral && isValidReferralAddress(referral)) {\n\n      require(msg.sender != referral, \"You can't be your own referral.\");\n\n      // set parent/child relations (only if there is no connection/parent yet available)\n      // --> this also means that a referral structure can't be changed\n      address parent = parentReferrals[msg.sender];\n      if (referralData[parent].referrals == 0) {\n        referralData[referral].referrals = referralData[referral].referrals.add(1);\n        referralData[referral].children.push(msg.sender);\n        parentReferrals[msg.sender] = referral;\n      }\n\n      // iterate over commissionLevels and calculate commissions\n      uint256 discountSumForThisPayment = 0;\n      address currentReferral = referral;\n\n      for (uint256 level=0; level < referralBonusMaxDepth; level++) {\n        // only apply discount if referral address is valid (or as long we can step up the hierarchy)\n        if(isValidReferralAddress(currentReferral)) {\n\n          require(msg.sender != currentReferral, \"Invalid referral structure (you can't be in your own tree)\");\n\n          // do not take node price here since it could be already dicounted\n          uint256 referralBonus = currentPrice.div(100).mul(currentReferralCommissionPercentages[level]);\n\n          // set payout bonus\n          referralBonuses[currentReferral] = referralBonuses[currentReferral].add(referralBonus);\n\n          // set stats/counters\n          referralData[currentReferral].bonusSum = referralData[currentReferral].bonusSum.add(referralBonus);\n          discountSumForThisPayment = discountSumForThisPayment.add(referralBonus);\n\n          // step up one hierarchy level\n          currentReferral = parentReferrals[currentReferral];\n        } else {\n          // we can't find any parent - stop hierarchy calculation\n          break;\n        }\n      }\n\n      require(discountSumForThisPayment < nodePrice, \"Wrong calculation of bonuses/discounts - would be higher than the price itself\");\n\n      currentDiscountSum = currentDiscountSum.add(discountSumForThisPayment);\n      overallDiscountSum = overallDiscountSum.add(discountSumForThisPayment);\n    }\n\n    // set the node bought counter\n    nodesBought[msg.sender] = nodesBought[msg.sender].add(1);\n\n    emit MasternodeSold(msg.sender, currentPrice, coinsTargetAddress, useReferral);\n  }\n\n  function setActiveState(bool active) public onlyOwner {\n    isActive = active;\n  }\n\n  function setPrice(uint256 price) public onlyOwner {\n    require(price > 0, \"Price has to be greater than zero.\");\n\n    currentPrice = price;\n\n    emit MasternodePriceChanged(price);\n  }\n\n  function setReferralsEnabledState(bool _referralsEnabled) public onlyOwner {\n    referralsEnabled = _referralsEnabled;\n  }\n\n  function setReferralCommissionPercentageLevel(uint256 level, uint256 percentage) public onlyOwner {\n    require(percentage >= 0 && percentage <= 20, \"Percentage has to be between 0 and 20.\");\n    require(level >= 0 && level < referralBonusMaxDepth, \"Invalid depth level\");\n\n    currentReferralCommissionPercentages[level] = percentage;\n  }\n\n  function setReferralBonusMaxDepth(uint256 depth) public onlyOwner {\n    require(depth >= 0 && depth <= 10, \"Referral bonus depth too high.\");\n\n    referralBonusMaxDepth = depth;\n  }\n\n  function setReferralBuyerDiscountPercentage(uint256 percentage) public onlyOwner {\n    require(percentage >= 0 && percentage <= 20, \"Percentage has to be between 0 and 20.\");\n\n    currentReferralBuyerDiscountPercentage = percentage;\n  }\n\n  function addReferralAddress(address addr) public onlyOwner {\n    manuallyAddedReferrals[addr] = true;\n  }\n\n  function removeReferralAddress(address addr) public onlyOwner {\n    manuallyAddedReferrals[addr] = false;\n  }\n\n  function withdraw(uint256 amount) public onlyOwner {\n    owner().transfer(amount);\n  }\n\n  function withdrawReferralBonus() public nonReentrant returns (bool) {\n    uint256 amount = referralBonuses[msg.sender];\n\n    if (amount > 0) {\n        referralBonuses[msg.sender] = 0;\n        currentDiscountSum = currentDiscountSum.sub(amount);\n\n        if (!msg.sender.send(amount)) {\n            referralBonuses[msg.sender] = amount;\n            currentDiscountSum = currentDiscountSum.add(amount);\n\n            return false;\n        }\n    }\n\n    return true;\n  }\n\n  function checkReferralBonusHeight(address addr) public view returns (uint) {\n      return referralBonuses[addr];\n  }\n\n  function getNrOfReferrals(address addr) public view returns (uint) {\n      return referralData[addr].referrals;\n  }\n\n  function getReferralBonusSum(address addr) public view returns (uint) {\n      return referralData[addr].bonusSum;\n  }\n\n  function getReferralChildren(address addr) public view returns (address[] memory) {\n      return referralData[addr].children;\n  }\n\n  function getReferralChild(address addr, uint256 idx) public view returns (address) {\n      return referralData[addr].children[idx];\n  }\n\n  function isValidReferralAddress(address addr) public view returns (bool) {\n      return nodesBought[addr] > 0 || manuallyAddedReferrals[addr] == true;\n  }\n\n  function getNodesBoughtCountForAddress(address addr) public view returns (uint256) {\n      return nodesBought[addr];\n  }\n\n  function getDiscountedNodePrice() public view returns (uint256) {\n      return currentPrice.sub(currentPrice.div(100).mul(currentReferralBuyerDiscountPercentage));\n  }\n}",
  "bytecode": "608060405260006002556000600360006101000a81548160ff021916908315150217905550600060045560006005556001600660006101000a81548160ff02191690831515021790555060036008556005600a5534801561005f57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360018081905550600a6009600080815260200190815260200160002081905550600560096000600181526020019081526020016000208190555060036009600060028152602001908152602001600020819055506123238061017f6000396000f300608060405260043610610196576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630ebd7fdd146101985780630f592306146101cf5780631f2c47981461021057806322f3e2d41461023f57806324352a101461026e578063247d55a4146102c55780632e1a7d4d1461035d57806338d8d3451461038a57806354ed490d146104175780635e5d8beb1461046e57806360546016146104b157806368c45a8d14610508578063715018a614610535578063792134651461054c5780638a9df47f146105775780638da5cb5b146105a25780638f32d59b146105f957806391b7f5ed1461062857806391ca7f3c1461065557806392fd373a146106845780639d1b464a146106af578063a4bf754e146106da578063ab3597f414610735578063b330445e14610760578063b7e04c37146107bc578063ba2c337c14610838578063bfe22a0114610863578063d379a5b414610892578063dcb9aab9146108c1578063f025ed0c146108ee578063f2fde38b14610931578063fd6a1a9414610974575b005b3480156101a457600080fd5b506101cd60048036038101908080359060200190929190803590602001909291905050506109cb565b005b3480156101db57600080fd5b506101fa60048036038101908080359060200190929190505050610b2c565b6040518082815260200191505060405180910390f35b34801561021c57600080fd5b5061023d600480360381019080803515159060200190929190505050610b44565b005b34801561024b57600080fd5b50610254610b74565b604051808215151515815260200191505060405180910390f35b34801561027a57600080fd5b506102af600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b87565b6040518082815260200191505060405180910390f35b3480156102d157600080fd5b50610306600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bd3565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561034957808201518184015260208101905061032e565b505050509050019250505060405180910390f35b34801561036957600080fd5b5061038860048036038101908080359060200190929190505050610ca3565b005b34801561039657600080fd5b506103d5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d07565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561042357600080fd5b50610458600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d8b565b6040518082815260200191505060405180910390f35b34801561047a57600080fd5b506104af600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dd4565b005b3480156104bd57600080fd5b506104f2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e42565b6040518082815260200191505060405180910390f35b34801561051457600080fd5b5061053360048036038101908080359060200190929190505050610e8e565b005b34801561054157600080fd5b5061054a610f57565b005b34801561055857600080fd5b50610561611029565b6040518082815260200191505060405180910390f35b34801561058357600080fd5b5061058c61102f565b6040518082815260200191505060405180910390f35b3480156105ae57600080fd5b506105b7611074565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561060557600080fd5b5061060e61109d565b604051808215151515815260200191505060405180910390f35b34801561063457600080fd5b50610653600480360381019080803590602001909291905050506110f4565b005b34801561066157600080fd5b5061066a6111e6565b604051808215151515815260200191505060405180910390f35b34801561069057600080fd5b50610699611369565b6040518082815260200191505060405180910390f35b3480156106bb57600080fd5b506106c461136f565b6040518082815260200191505060405180910390f35b3480156106e657600080fd5b5061071b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611375565b604051808215151515815260200191505060405180910390f35b34801561074157600080fd5b5061074a61141b565b6040518082815260200191505060405180910390f35b6107ba600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611421565b005b610836600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061145f565b005b34801561084457600080fd5b5061084d6114a5565b6040518082815260200191505060405180910390f35b34801561086f57600080fd5b506108906004803603810190808035151590602001909291905050506114ab565b005b34801561089e57600080fd5b506108a76114db565b604051808215151515815260200191505060405180910390f35b3480156108cd57600080fd5b506108ec600480360381019080803590602001909291905050506114ee565b005b3480156108fa57600080fd5b5061092f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611591565b005b34801561093d57600080fd5b50610972600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115ff565b005b34801561098057600080fd5b506109b5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061161e565b6040518082815260200191505060405180910390f35b6109d361109d565b15156109de57600080fd5b600081101580156109f0575060148111155b1515610a8a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f50657263656e746167652068617320746f206265206265747765656e2030206181526020017f6e642032302e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008210158015610a9c575060085482105b1515610b10576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f496e76616c6964206465707468206c6576656c0000000000000000000000000081525060200191505060405180910390fd5b8060096000848152602001908152602001600020819055505050565b60096020528060005260406000206000915090505481565b610b4c61109d565b1515610b5757600080fd5b80600660006101000a81548160ff02191690831515021790555050565b600360009054906101000a900460ff1681565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b6060600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201805480602002602001604051908101604052809291908181526020018280548015610c9757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c4d575b50505050509050919050565b610cab61109d565b1515610cb657600080fd5b610cbe611074565b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d03573d6000803e3d6000fd5b5050565b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020182815481101515610d5857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610ddc61109d565b1515610de757600080fd5b6000600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b610e9661109d565b1515610ea157600080fd5b60008110158015610eb3575060148111155b1515610f4d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f50657263656e746167652068617320746f206265206265747765656e2030206181526020017f6e642032302e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b80600a8190555050565b610f5f61109d565b1515610f6a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60085481565b600061106f61105e600a54611050606460025461166790919063ffffffff16565b61169190919063ffffffff16565b6002546116cf90919063ffffffff16565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6110fc61109d565b151561110757600080fd5b6000811115156111a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f50726963652068617320746f2062652067726561746572207468616e207a657281526020017f6f2e00000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b806002819055507fbce4e3638ca0442dab62b0194ce60c937db5d7d2b424181a9703c8c29968a33d816040518082815260200191505060405180910390a150565b6000806000600180600082825401925050819055506001549050600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150600082111561134f576000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112a5826004546116cf90919063ffffffff16565b6004819055503373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050151561134e5781600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061133f826004546116f090919063ffffffff16565b60048190555060009250611354565b5b600192505b6001548114151561136457600080fd5b505090565b60055481565b60025481565b600080600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541180611414575060011515600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b9050919050565b60045481565b600060018060008282540192505081905550600154905061144b826000611446611074565b611711565b6001548114151561145b57600080fd5b5050565b600060018060008282540192505081905550600154905061149083600660009054906101000a900460ff1684611711565b600154811415156114a057600080fd5b505050565b600a5481565b6114b361109d565b15156114be57600080fd5b80600360006101000a81548160ff02191690831515021790555050565b600660009054906101000a900460ff1681565b6114f661109d565b151561150157600080fd5b600081101580156115135750600a8111155b1515611587576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f526566657272616c20626f6e757320646570746820746f6f20686967682e000081525060200191505060405180910390fd5b8060088190555050565b61159961109d565b15156115a457600080fd5b6001600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b61160761109d565b151561161257600080fd5b61161b816121fd565b50565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060008311151561167957600080fd5b828481151561168457fe5b0490508091505092915050565b60008060008414156116a657600091506116c8565b82840290508284828115156116b757fe5b041415156116c457600080fd5b8091505b5092915050565b6000808383111515156116e157600080fd5b82840390508091505092915050565b600080828401905083811015151561170757600080fd5b8091505092915050565b6000806000806000806000600360009054906101000a900460ff1615156117a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f427579696e672069732063757272656e746c792064656163746976617465642e81525060200191505060405180910390fd5b6000600254111515611840576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f546865726520776173206e6f204d4e2070726963652073657420736f2066617281526020017f2e0000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6002549650888015611857575061185688611375565b5b156118675761186461102f565b96505b8634101515156118df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f53656e7420616d6f756e74206f66204554482077617320746f6f206c6f772e0081525060200191505060405180910390fd5b89519550601e86101580156118f55750602a8611155b1515611969576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f436f696e7320746172676574206164647265737320696e76616c69640000000081525060200191505060405180910390fd5b88801561197b575061197a88611375565b5b15612075578773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515611a24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f596f752063616e277420626520796f7572206f776e20726566657272616c2e0081525060200191505060405180910390fd5b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1694506000600c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541415611c9257611b276001600c60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546116f090919063ffffffff16565b600c60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550600c60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002013390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505087600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b60009350879250600091505b600854821015611f7b57611cb183611375565b15611f69578273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515611d80576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a8152602001807f496e76616c696420726566657272616c207374727563747572652028796f752081526020017f63616e277420626520696e20796f7572206f776e20747265652900000000000081525060400191505060405180910390fd5b611dbb6009600084815260200190815260200160002054611dad606460025461166790919063ffffffff16565b61169190919063ffffffff16565b9050611e0f81600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116f090919063ffffffff16565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ea781600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546116f090919063ffffffff16565b600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550611f0081856116f090919063ffffffff16565b9350600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250611f6e565b611f7b565b8180600101925050611c9e565b868410151561203e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604e8152602001807f57726f6e672063616c63756c6174696f6e206f6620626f6e757365732f64697381526020017f636f756e7473202d20776f756c6420626520686967686572207468616e20746881526020017f6520707269636520697473656c6600000000000000000000000000000000000081525060600191505060405180910390fd5b612053846004546116f090919063ffffffff16565b60048190555061206e846005546116f090919063ffffffff16565b6005819055505b6120c86001600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116f090919063ffffffff16565b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fde5f884b0afee90f5dc32f5b060da217825132c40b348794e2f0693e6b5e513c336002548c8c604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018060200183151515158152602001828103825284818151815260200191508051906020019080838360005b838110156121b4578082015181840152602081019050612199565b50505050905090810190601f1680156121e15780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a150505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561223957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820665f727a3c0efe6c26affc0c21655304223eff23eb7ef7f3c26592cb52d715300029"
}