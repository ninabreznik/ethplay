{
  "address": "0xe9bf74656fac252a3c2cc738803a2d50345bc323",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenReward",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-08\n*/\n\npragma solidity ^0.4.24;\n\n/*\n    CryptoPrize(address _token_address)   // this will unlock the prize and send yum to user\n  @author Yumerium Ltd\n*/\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\ncontract YUM {\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    mapping (address => uint256) public balanceOf;\n    function transfer(address _to, uint256 _value) public;\n}\n\n\ncontract TokenReward {\n    using SafeMath for uint256;\n    uint256 public maxCount = 2 ** 256 - 1;\n    uint256 public budget;\n    uint256 public totalUnlocked;\n    uint256 public startYum;\n    uint256 public nextRewardAmount;\n    uint256 public count;\n    address public owner;\n    YUM public token;\n\n    event UnlockReward(address to, uint256 amount);\n    event CalcNextReward(uint256 count, uint256 amount);\n    event Retrieve(address to, uint256 amount);\n    event AddBudget(uint256 budget, uint256 startYum);\n\n    // start with 0 budget and 0 Yum for the prize\n    constructor(address _token_address) public {\n        budget = 0;\n        startYum = 0;\n        count = 0;\n        owner = msg.sender;\n        token = YUM(_token_address);\n    }\n\n    /* \n     * Calculate the next prize\n     * TODO: Change the equation if needed\n    */\n    function calcNextReward() public returns (uint256) {\n        uint256 oneYUM = 10 ** 8;\n        uint256 amount = startYum.mul(oneYUM).div(count.mul(oneYUM).div(500).add(oneYUM)); // 100 YUM / (1 YUM / 500 + 1 YUM)\n        emit CalcNextReward(count, amount);\n        return amount;\n    }\n    \n    // unlock the prize\n    function sendNextRewardTo(address to) external {\n        require(msg.sender==owner);\n        uint256 amount = nextRewardAmount;\n        require(amount > 0);\n        uint256 total = totalUnlocked.add(amount);\n        require(total<=budget);\n        token.transfer(to, amount);\n        budget = budget.sub(amount);\n        if (count < maxCount)\n            count++;\n        totalUnlocked = total;\n        nextRewardAmount = calcNextReward();\n        emit UnlockReward(to, amount);\n    }\n\n    // change creator address\n    function changeOwnerTo(address _creator) external {\n        require(msg.sender==owner);\n        owner = _creator;\n    }\n\n    // change creator address\n    function changeYumAddressTo(address _token_address) external {\n        require(msg.sender==owner);\n        token = YUM(_token_address);\n    }\n\n    // Retrieve all YUM token left from the contract\n    function retrieveAll() external {\n        require(msg.sender==owner);\n        uint256 amount = token.balanceOf(this);\n        token.transfer(owner, amount);   \n        emit Retrieve(owner, amount);   \n    }\n\n    // add more budget and reset startYum and count\n    function addBudget(uint256 _budget, uint256 _startYum, uint256 _count) external {\n        require(msg.sender==owner);\n        require(token.transferFrom(msg.sender, this, _budget));\n        budget = budget.add(_budget);\n        startYum = _startYum;\n        count = _count;\n        nextRewardAmount = calcNextReward();\n        emit AddBudget(budget, startYum);\n    }\n}",
  "bytecode": "608060405260001960005534801561001657600080fd5b506040516020806108e5833981016040525160006001819055600381905560055560068054600160a060020a0319908116331790915560078054600160a060020a0390931692909116919091179055610871806100746000396000f3006080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306661abd81146100d457806310a80397146100fb5780631a1e63d41461011b57806337a583581461013c5780635c5204d6146101515780638804d119146101725780638da5cb5b1461019357806390187332146101c457806395607ced146101d95780639ef2d87a146101ee578063a779d08014610203578063d586e30f14610218578063ed01bf291461022d578063fc0c546a14610242575b600080fd5b3480156100e057600080fd5b506100e9610257565b60408051918252519081900360200190f35b34801561010757600080fd5b5061011960043560243560443561025d565b005b34801561012757600080fd5b50610119600160a060020a036004351661038f565b34801561014857600080fd5b506100e96103d5565b34801561015d57600080fd5b50610119600160a060020a03600435166103db565b34801561017e57600080fd5b50610119600160a060020a0360043516610421565b34801561019f57600080fd5b506101a8610580565b60408051600160a060020a039092168252519081900360200190f35b3480156101d057600080fd5b506100e961058f565b3480156101e557600080fd5b50610119610595565b3480156101fa57600080fd5b506100e9610715565b34801561020f57600080fd5b506100e961071b565b34801561022457600080fd5b506100e9610721565b34801561023957600080fd5b506100e96107bf565b34801561024e57600080fd5b506101a86107c5565b60055481565b600654600160a060020a0316331461027457600080fd5b600754604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b1580156102e757600080fd5b505af11580156102fb573d6000803e3d6000fd5b505050506040513d602081101561031157600080fd5b5051151561031e57600080fd5b600154610331908463ffffffff6107d416565b60015560038290556005819055610346610721565b60045560015460035460408051928352602083019190915280517f3baad8942faec7878a8f097eb50312f0f01fe82cfd6eb26c27c3c2bf07acdff49281900390910190a1505050565b600654600160a060020a031633146103a657600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60045481565b600654600160a060020a031633146103f257600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6006546000908190600160a060020a0316331461043d57600080fd5b60045491506000821161044f57600080fd5b600254610462908363ffffffff6107d416565b60015490915081111561047457600080fd5b600754604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152602482018690529151919092169163a9059cbb91604480830192600092919082900301818387803b1580156104e257600080fd5b505af11580156104f6573d6000803e3d6000fd5b505060015461050e925090508363ffffffff6107ea16565b6001556000546005541015610527576005805460010190555b6002819055610534610721565b60045560408051600160a060020a03851681526020810184905281517f36690193ab24ce9ef766dab267851637bfb0c5f0c937e15cf579d6d56614f5bd929181900390910190a1505050565b600654600160a060020a031681565b60035481565b600654600090600160a060020a031633146105af57600080fd5b600754604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b15801561061557600080fd5b505af1158015610629573d6000803e3d6000fd5b505050506040513d602081101561063f57600080fd5b5051600754600654604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015260248101859052905193945091169163a9059cbb9160448082019260009290919082900301818387803b1580156106b457600080fd5b505af11580156106c8573d6000803e3d6000fd5b505060065460408051600160a060020a0390921682526020820185905280517f7d2175f2cd61ac503293c950aa8e75a2e2f44aa89f350cc22be3e4d9e5b3fbcf945091829003019150a150565b60005481565b60025481565b60008060006305f5e100915061077a6107678361075b6101f461074f876005546107ff90919063ffffffff16565b9063ffffffff61082416565b9063ffffffff6107d416565b60035461074f908563ffffffff6107ff16565b600554604080519182526020820183905280519293507fb781bfe7f54b9843ee135561a9c3b73dc1e04e33475ccb1760f66f2057cdbcf192918290030190a192915050565b60015481565b600754600160a060020a031681565b818101828110156107e457600080fd5b92915050565b6000828211156107f957600080fd5b50900390565b818102821580610819575081838281151561081657fe5b04145b15156107e457600080fd5b600080821161083257600080fd5b818381151561083d57fe5b0493925050505600a165627a7a723058209506d300b4b5c6617a0b0030958eccb7f693a7379c1a4de495daef72f631e57b00290000000000000000000000007f4404db6a3f4d3cfb41d5920d81d44d64759235",
  "constructorArguments": "0000000000000000000000007f4404db6a3f4d3cfb41d5920d81d44d64759235"
}