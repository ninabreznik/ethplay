{
  "address": "0x5228577d88521d12b409682f255fad46d2433bee",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoClassCertificate",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-27\n*/\n\npragma solidity ^0.5.1;\ncontract Operations {\n    function copyBytesNToBytes(bytes32 source, bytes memory destination, uint[1] memory pointer) internal pure {\n        for (uint i=0; i < 32; i++) {\n            if (source[i] == 0)\n                break;\n            else {\n                destination[pointer[0]]=source[i];\n                pointer[0]++;\n            }\n        }\n    }\n    function copyBytesToBytes(bytes memory source, bytes memory destination, uint[1] memory pointer) internal pure {\n        for (uint i=0; i < source.length; i++) {\n            if (source[i] == 0)\n                break;\n            destination[pointer[0]]=source[i];\n            pointer[0]++;\n        }\n    }\n    function uintToBytesN(uint v) internal pure returns (bytes32 ret) {\n        if (v == 0) {\n            ret = '0';\n        }\n        else {\n            while (v > 0) {\n//                ret = bytes32(uint(ret) / (2 ** 8));\n//                ret |= bytes32(((v % 10) + 48) * 2 ** (8 * 31));\n                ret = bytes32(uint(ret) >> 8);\n                ret |= bytes32(((v % 10) + 48) << (8 * 31));\n                v /= 10;\n            }\n        }\n        return ret;\n    }\n    function stringToBytes32(string memory str) internal pure returns(bytes32) {\n        bytes32 bStrN;\n        assembly {\n            bStrN := mload(add(str, 32))\n        }\n        return(bStrN);\n    }\n}\n\ncontract DataRegister is Operations {\n    bytes32 Institute; \n    address owner;\n    mapping(bytes10 => bytes) Instructor;\n    mapping(uint => bytes10) InstructorUIds;\n    uint public InstructorCount = 0;\n    struct course {\n        bytes CourseName;\n        bytes10 StartDate;\n        bytes10 EndDate;\n        uint Hours;\n    }\n    struct courseInstructor {\n        uint CourseId;\n        uint InstructorId;\n    }\n    courseInstructor[] CourseInstructor;\n    mapping(bytes10 => course) Course;\n    mapping(uint => bytes10) CourseUIds;\n    uint CourseCount = 0;\n    mapping(bytes10 => bytes) Student;\n    mapping(uint => bytes10) StudentUIds;\n    uint StudentCount = 0;\n    struct certificate {\n        uint CourseId;\n        uint StudentId;\n        uint CertificateType;\n        bytes10 Result;\n        bool Enabled;\n    }\n    mapping(bytes10 => certificate) Certificate;\n    uint CertificateCount = 0;\n    mapping(uint => bytes10) CertificateUIds;\n    modifier onlyOwner() {\n        require(msg.sender==owner);\n        _;\n    }\n    modifier notEmpty(string memory str) {\n        bytes memory bStr = bytes(str);\n        require(bStr.length > 0);\n        _;\n    }\n    modifier isPositive(uint number) {\n        require(number > 0);\n        _;\n    }\n    modifier haveInstructor(uint InstructorId) {\n        require(Instructor[InstructorUIds[InstructorId]].length > 0);\n        _;\n    }\n    modifier haveCourse(uint CourseId) {\n        require(CourseUIds[CourseId].length > 0);\n        _;\n    }\n    modifier haveStudent(uint StudentId) {\n        require(Student[StudentUIds[StudentId]].length > 0);\n        _;\n    }\n    modifier uniqueCertificateUId(string memory certificateUId) {\n        require(Certificate[bytes10(stringToBytes32(certificateUId))].CourseId == 0);\n        _;\n    }\n    modifier uniqueInstructorUId(string memory _instructorUId) {\n        require(Instructor[bytes10(stringToBytes32(_instructorUId))].length == 0);\n        _;\n    }\n    modifier uniqueCourseUId(string memory _courseUId) {\n        require(Course[bytes10(stringToBytes32(_courseUId))].CourseName.length == 0);\n        _;\n    }\n    modifier uniqueStudentUId(string memory _studentUId) {\n        require(Student[bytes10(stringToBytes32(_studentUId))].length == 0);\n        _;\n    }\n    modifier notRepeat(uint CourseId, uint InstructorId) {\n        bool found = false;\n        for (uint i = 0; i < CourseInstructor.length; i++) {\n            if (CourseInstructor[i].CourseId == CourseId && CourseInstructor[i].InstructorId == InstructorId) {\n                found = true;\n                break;\n            }\n        }\n        require(! found);\n        _;\n    }\n    function RegisterInstructor(\n        string memory NationalId, \n        string memory instructor\n        ) public onlyOwner notEmpty(NationalId) notEmpty(instructor) uniqueInstructorUId(NationalId) returns(bool) {\n            bytes10 _instructorUId = bytes10(stringToBytes32(NationalId));\n            InstructorCount++;\n            Instructor[_instructorUId] = bytes(instructor);\n            InstructorUIds[InstructorCount]=_instructorUId;\n            return(true);\n    }\n    function RegisterCourse(\n        string memory CourseUId,\n        string memory CourseName,\n        string memory StartDate,\n        string memory EndDate,\n        uint Hours,\n        uint InstructorId\n        ) public onlyOwner notEmpty(CourseUId) notEmpty(CourseName) \n            isPositive(Hours) haveInstructor(InstructorId) uniqueCourseUId(CourseUId) {\n            course memory _course = setCourseElements(CourseName, StartDate, EndDate, Hours);\n            CourseCount++;\n            bytes10 _courseUId = bytes10(stringToBytes32(CourseUId));\n            CourseUIds[CourseCount] = _courseUId;\n            Course[_courseUId] = _course;\n            courseInstructor memory _courseInstructor;\n            _courseInstructor.CourseId = CourseCount;\n            _courseInstructor.InstructorId = InstructorId;\n            CourseInstructor.push(_courseInstructor);\n    }\n    function AddCourseInstructor(\n        uint CourseId,\n        uint InstructorId\n        ) public onlyOwner haveCourse(CourseId) notRepeat(CourseId, InstructorId) haveInstructor(InstructorId) {\n            courseInstructor memory _courseInstructor;\n            _courseInstructor.CourseId = CourseId;\n            _courseInstructor.InstructorId = InstructorId;\n            CourseInstructor.push(_courseInstructor);\n        }\n    function setCourseElements(\n        string memory CourseName, \n        string memory StartDate, \n        string memory EndDate,\n        uint Hours\n        ) internal pure returns(course memory) {\n        course memory _course;\n        _course.CourseName = bytes(CourseName);\n        _course.StartDate = bytes10(stringToBytes32(StartDate));\n        _course.EndDate = bytes10(stringToBytes32(EndDate));\n        _course.Hours = Hours;\n        return(_course);\n    }\n    function RegisterStudent(\n        string memory NationalId,\n        string memory Name\n        ) public onlyOwner notEmpty(Name) notEmpty(NationalId) uniqueStudentUId(NationalId) returns(bool) {\n            StudentCount++;\n            StudentUIds[StudentCount] = bytes10(stringToBytes32(NationalId));\n            Student[StudentUIds[StudentCount]]=bytes(Name);\n        return(true);\n    }\n    function RegisterCertificate(\n        string memory CertificateUId,\n        uint CourseId,\n        uint StudentId,\n        uint CertificateType,\n        string memory Result\n        ) public onlyOwner haveStudent(StudentId) haveCourse(CourseId) \n        uniqueCertificateUId(CertificateUId) isPositive(CertificateType) returns(bool) {\n            certificate memory _certificate;\n            _certificate.CourseId = CourseId;\n            _certificate.StudentId = StudentId;\n            _certificate.CertificateType = CertificateType;\n            _certificate.Result = bytes10(stringToBytes32(Result));\n            _certificate.Enabled = true;\n            bytes10 cert_uid = bytes10(stringToBytes32(CertificateUId));\n            CertificateCount++;\n            Certificate[cert_uid] = _certificate;\n            CertificateUIds[CertificateCount] = cert_uid;\n            return(true);\n    }\n    function EnableCertificate(string memory CertificateId) public onlyOwner notEmpty(CertificateId) returns(bool) {\n        bytes10 _certificateId = bytes10(stringToBytes32(CertificateId));\n        certificate memory _certificate = Certificate[_certificateId];\n        require(_certificate.Result != '');\n        require(! _certificate.Enabled);\n        Certificate[_certificateId].Enabled = true;\n        return(true);\n    }\n    function DisableCertificate(string memory CertificateId) public onlyOwner notEmpty(CertificateId) returns(bool) {\n        bytes10 _certificateId = bytes10(stringToBytes32(CertificateId));\n        certificate memory _certificate = Certificate[_certificateId];\n        require(_certificate.Result != '');\n        require(_certificate.Enabled);\n        Certificate[_certificateId].Enabled = false;\n        return(true);\n    }\n}\n\ncontract CryptoClassCertificate is DataRegister {\n    constructor(string memory _Institute) public notEmpty(_Institute) {\n        owner = msg.sender;\n        Institute = stringToBytes32(_Institute);\n    }\n    function GetInstitute() public view returns(string  memory) {\n        uint[1] memory pointer;\n        pointer[0]=0;\n        bytes memory institute=new bytes(48);\n        copyBytesToBytes('{\"Institute\":\"', institute, pointer);\n        copyBytesNToBytes(Institute, institute, pointer);\n        copyBytesToBytes('\"}', institute, pointer);\n        return(string(institute));\n    }\n    function GetInstructors() public view onlyOwner returns(string memory) {\n        uint len = 70;\n        uint i;\n        for (i=1 ; i <= InstructorCount ; i++) \n            len += 100 + Instructor[InstructorUIds[i]].length;\n        bytes memory instructors = new bytes(len);\n        uint[1] memory pointer;\n        pointer[0]=0;\n        copyBytesNToBytes('{ \"Instructors\":[', instructors, pointer);\n        for (i=1 ; i <= InstructorCount ; i++) {\n            if (i > 1) \n                copyBytesNToBytes(',', instructors, pointer);\n            copyBytesNToBytes('{\"National Id\":\"', instructors, pointer);\n            copyBytesNToBytes(InstructorUIds[i], instructors, pointer);\n            copyBytesNToBytes('\",\"Name\":\"', instructors, pointer);\n            copyBytesToBytes(Instructor[InstructorUIds[i]], instructors, pointer);\n            copyBytesNToBytes('\"}', instructors, pointer);\n        }\n        copyBytesNToBytes(']}', instructors, pointer);\n        return(string(instructors));\n    }\n    function GetInstructor(string memory InstructorNationalId) public view notEmpty(InstructorNationalId) returns(string memory) {\n        bytes10 _instructorUId = bytes10(stringToBytes32(InstructorNationalId));\n        require(Instructor[_instructorUId].length > 0);\n        uint len = 100 + Instructor[_instructorUId].length;\n        bytes memory _instructor = new bytes(len);\n        uint[1] memory pointer;\n        pointer[0]=0;\n        copyBytesNToBytes('{ \"Instructor\":{\"NationalId\":\"', _instructor, pointer);\n        copyBytesNToBytes(_instructorUId, _instructor, pointer);\n        copyBytesNToBytes('\",\"Name\":\"', _instructor, pointer);\n        copyBytesToBytes(Instructor[_instructorUId], _instructor, pointer);\n        copyBytesNToBytes('\"}}', _instructor, pointer);\n        return(string(_instructor));\n    }\n    function GetInstructorCourses(string memory InstructorNationalId) public view notEmpty(InstructorNationalId) returns(string memory) {\n        bytes10 _instructorNationalId = bytes10(stringToBytes32(InstructorNationalId));\n        require(Instructor[_instructorNationalId].length > 0);\n        uint _instructorId = 0;\n        uint i;\n        for (i = 1; i <= InstructorCount; i++)\n            if (InstructorUIds[i] == _instructorNationalId) {\n                _instructorId = i;\n                break;\n            }\n        uint len = 50;\n        course memory _course;\n        for (i=0; i< CourseInstructor.length; i++) {\n            if (CourseInstructor[i].InstructorId == _instructorId) { \n                _course = Course[CourseUIds[CourseInstructor[i].CourseId]];\n                len += 200 + Institute.length + _course.CourseName.length + Instructor[InstructorUIds[_instructorId]].length;\n            }\n        }\n        bytes memory courseInfo = new bytes(len);\n        uint[1] memory pointer;\n        pointer[0]=0;\n        copyBytesNToBytes('{\"Courses\":[', courseInfo, pointer);\n        bool first = true;\n        for (i=0; i< CourseInstructor.length; i++) {\n            if (CourseInstructor[i].InstructorId == _instructorId) { \n                _course = Course[CourseUIds[CourseInstructor[i].CourseId]];\n                if (first)\n                    first = false;\n                else\n                    copyBytesNToBytes(',', courseInfo, pointer);\n                copyBytesNToBytes('{\"Course Id\":\"', courseInfo, pointer);\n                copyBytesNToBytes(CourseUIds[CourseInstructor[i].CourseId], courseInfo, pointer);\n                copyBytesNToBytes('\",\"Course Name\":\"', courseInfo, pointer);\n                copyBytesToBytes(_course.CourseName, courseInfo, pointer);\n                copyBytesNToBytes('\",\"Start Date\":\"', courseInfo, pointer);\n                copyBytesNToBytes(_course.StartDate, courseInfo, pointer);\n                copyBytesNToBytes('\",\"End Date\":\"', courseInfo, pointer);\n                copyBytesNToBytes(_course.EndDate, courseInfo, pointer);\n                copyBytesNToBytes('\",\"Duration\":\"', courseInfo, pointer);\n                copyBytesNToBytes( uintToBytesN(_course.Hours), courseInfo, pointer);\n                copyBytesNToBytes(' Hours\"}', courseInfo, pointer);\n            }\n        }\n        copyBytesNToBytes(']}', courseInfo, pointer);\n        return(string(courseInfo));\n    }\n    function CourseIdByUId(bytes10 CourseUId) private view returns(uint CourseId) {\n        CourseId = 0;\n        for (uint i=1; i<=CourseCount;i++)\n            if (CourseUIds[i] == CourseUId) {\n                CourseId = i;\n                break;\n            }\n        require(CourseId > 0);\n    }\n    function GetCourseInfo(string memory CourseUId) public view notEmpty(CourseUId) returns(string memory) {\n        bytes10 _courseUId=bytes10(stringToBytes32(CourseUId));\n        course memory _course;\n        _course = Course[_courseUId];\n        require(_course.CourseName.length > 0);\n        uint len = 200;\n        bytes memory instructorsList = CourseInstructorDescription(_courseUId);\n        len += instructorsList.length + Institute.length + _course.CourseName.length;\n        bytes memory courseInfo = new bytes(len);\n        uint[1] memory pointer;\n        pointer[0]=0;\n        copyBytesNToBytes('{\"Course\":', courseInfo, pointer);\n        copyBytesNToBytes('{\"Issuer\":\"', courseInfo, pointer);\n        copyBytesNToBytes(Institute, courseInfo, pointer);\n        copyBytesNToBytes('\",\"Course Id\":\"', courseInfo, pointer);\n        copyBytesNToBytes(_courseUId, courseInfo, pointer);\n        copyBytesNToBytes('\",\"Course Name\":\"', courseInfo, pointer);\n        copyBytesToBytes(_course.CourseName, courseInfo, pointer);\n        copyBytesNToBytes('\",', courseInfo, pointer);\n        copyBytesToBytes(instructorsList, courseInfo, pointer);\n        copyBytesNToBytes(',\"Start Date\":\"', courseInfo, pointer);\n        copyBytesNToBytes(_course.StartDate, courseInfo, pointer);\n        copyBytesNToBytes('\",\"End Date\":\"', courseInfo, pointer);\n        copyBytesNToBytes(_course.EndDate, courseInfo, pointer);\n        copyBytesNToBytes('\",\"Duration\":\"', courseInfo, pointer);\n        copyBytesNToBytes( uintToBytesN(_course.Hours), courseInfo, pointer);\n        copyBytesNToBytes(' Hours\"}}', courseInfo, pointer);\n        return(string(courseInfo));\n    }\n    function GetCourses() public view returns(string memory) {\n        uint len = 50;\n        uint i;\n        course memory _course;\n        for (i=1 ; i <= CourseCount ; i++) {\n            _course = Course[CourseUIds[i]];\n            len += 200 + _course.CourseName.length;\n        }\n        bytes memory courses = new bytes(len);\n        uint[1] memory pointer;\n        pointer[0]=0;\n        bytes32 hrs;\n        copyBytesNToBytes('{\"Courses\":[', courses, pointer);\n        for (i=1 ; i <= CourseCount ; i++) {\n            if (i > 1)\n                copyBytesNToBytes(',', courses, pointer);\n            _course = Course[CourseUIds[i]];\n            copyBytesNToBytes('{\"Id\":\"', courses, pointer);\n            copyBytesNToBytes(CourseUIds[i], courses, pointer);\n            copyBytesNToBytes('\",\"Name\":\"', courses, pointer);\n            copyBytesToBytes(_course.CourseName, courses, pointer);\n            copyBytesNToBytes('\",\"Start Date\":\"', courses, pointer);\n            copyBytesNToBytes(_course.StartDate, courses, pointer);\n            copyBytesNToBytes('\",\"End Date\":\"', courses, pointer);\n            copyBytesNToBytes(_course.EndDate, courses, pointer);\n            copyBytesNToBytes('\",\"Duration\":\"', courses, pointer);\n            hrs = uintToBytesN(_course.Hours);\n            copyBytesNToBytes(hrs, courses, pointer);\n            copyBytesNToBytes(' Hours\"}', courses, pointer);\n        }\n        copyBytesNToBytes(']}', courses, pointer);\n        return(string(courses));\n    }\n    function GetStudentInfo(string memory NationalId) public view notEmpty(NationalId) returns(string memory) {\n        bytes10 _nationalId=bytes10(stringToBytes32(NationalId));\n        bytes memory _student = Student[_nationalId];\n        require(_student.length > 0);\n        uint len = 150 + Institute.length + _student.length;\n        bytes memory studentInfo = new bytes(len);\n        uint[1] memory pointer;\n        pointer[0]=0;\n        copyBytesNToBytes('{\"Student\":', studentInfo, pointer);\n        copyBytesNToBytes('{\"Issuer\":\"', studentInfo, pointer);\n        copyBytesNToBytes(Institute, studentInfo, pointer);\n        copyBytesNToBytes('\",\"National Id\":\"', studentInfo, pointer);\n        copyBytesNToBytes(_nationalId, studentInfo, pointer);\n        copyBytesNToBytes('\",\"Name\":\"', studentInfo, pointer);\n        copyBytesToBytes(_student, studentInfo, pointer);\n        copyBytesNToBytes('\"}}', studentInfo, pointer);\n        return(string(studentInfo));\n    }\n    function GetStudents() public view onlyOwner returns(string memory) {\n        uint len = 50;\n        uint i;\n        for (i=1 ; i <= StudentCount ; i++) \n            len += 50 + Student[StudentUIds[i]].length;\n        bytes memory students = new bytes(len);\n        uint[1] memory pointer;\n        pointer[0]=0;\n        copyBytesNToBytes('{\"Students\":[', students, pointer);\n        for (i=1 ; i <= StudentCount ; i++) {\n            if (i > 1)\n                copyBytesNToBytes(',', students, pointer);\n            bytes memory _student = Student[StudentUIds[i]];\n            copyBytesNToBytes('{\"National Id\":\"', students, pointer);\n            copyBytesNToBytes(StudentUIds[i], students, pointer);\n            copyBytesNToBytes('\",\"Name\":\"', students, pointer);\n            copyBytesToBytes(_student, students, pointer);\n            copyBytesNToBytes('\"}', students, pointer);\n        }\n        copyBytesNToBytes(']}', students, pointer);\n        return(string(students));\n    }\n    function GetCertificates() public view onlyOwner returns(string memory) {\n        uint len = 50;\n        uint i;\n        len += CertificateCount * 60;\n        bytes memory certificates = new bytes(len);\n        uint[1] memory pointer;\n        pointer[0]=0;\n        copyBytesNToBytes('{\"Certificates\":[', certificates, pointer);\n        for (i = 1 ; i <= CertificateCount ; i++) {\n            if (i > 1)\n                copyBytesNToBytes(',', certificates, pointer);\n            copyBytesNToBytes('{\"Certificate Id\":\"', certificates, pointer);\n            copyBytesNToBytes(CertificateUIds[i], certificates, pointer);\n            copyBytesNToBytes('\",\"Active\":', certificates, pointer);\n            if (Certificate[CertificateUIds[i]].Enabled)\n                copyBytesNToBytes('true}', certificates, pointer);\n            else\n                copyBytesNToBytes('false}', certificates, pointer);\n        }\n        copyBytesNToBytes(']}', certificates, pointer);\n        return(string(certificates));\n    }\n    function GetStudentCertificates(string memory NationalId) public view notEmpty(NationalId) returns(string memory) {\n        uint len = 50;\n        uint i;\n        bytes10 _nationalId=bytes10(stringToBytes32(NationalId));\n        require(Student[_nationalId].length > 0);\n        for (i = 1 ; i <= CertificateCount ; i++) {\n            if (StudentUIds[Certificate[CertificateUIds[i]].StudentId] == _nationalId && \n                Certificate[CertificateUIds[i]].Enabled) {\n                len += 100 + Course[CourseUIds[Certificate[CertificateUIds[i]].CourseId]].CourseName.length;\n            }\n        }\n        bytes memory certificates = new bytes(len);\n        uint[1] memory pointer;\n        pointer[0]=0;\n        copyBytesNToBytes('{\"Certificates\":[', certificates, pointer);\n        bool first=true;\n        for (i = 1 ; i <= CertificateCount ; i++) {\n            if (StudentUIds[Certificate[CertificateUIds[i]].StudentId] == _nationalId && \n                Certificate[CertificateUIds[i]].Enabled) {\n                if (first)\n                    first = false;\n                else\n                    copyBytesNToBytes(',', certificates, pointer);\n                copyBytesNToBytes('{\"Certificate Id\":\"', certificates, pointer);\n                copyBytesNToBytes(CertificateUIds[i], certificates, pointer);\n                copyBytesNToBytes('\",\"Course Name\":\"', certificates, pointer);\n                copyBytesToBytes(Course[CourseUIds[Certificate[CertificateUIds[i]].CourseId]].CourseName, certificates, pointer);\n                copyBytesNToBytes('\"}', certificates, pointer);\n            }\n        }\n        copyBytesNToBytes(']}', certificates, pointer);\n        return(string(certificates));\n    }\n    function GetCertificate(string memory CertificateId) public view notEmpty(CertificateId) returns(string memory) {\n        bytes10 _certificateId = bytes10(stringToBytes32(CertificateId));\n        require(Certificate[_certificateId].Enabled);\n        certificate memory _certificate = Certificate[_certificateId];\n        course memory _course = Course[CourseUIds[_certificate.CourseId]];\n        bytes memory _student = Student[StudentUIds[_certificate.StudentId]];\n        bytes memory certSpec;\n        bytes memory instructorsList = CourseInstructorDescription(CourseUIds[_certificate.CourseId]);\n        uint len = 500;\n        len += _course.CourseName.length + instructorsList.length;\n        uint[1] memory pointer;\n        pointer[0] = 0;\n        certSpec = new bytes(len);\n        require(_certificate.StudentId > 0);\n        require(_certificate.Enabled);\n        copyBytesNToBytes('{\"Certificate\":{\"Issuer\":\"', certSpec, pointer);\n        copyBytesNToBytes(Institute, certSpec, pointer);\n        copyBytesNToBytes('\",\"Certificate Id\":\"', certSpec, pointer);\n        copyBytesNToBytes(_certificateId, certSpec, pointer);\n        copyBytesNToBytes('\",\"Name\":\"', certSpec, pointer);\n        copyBytesToBytes(_student, certSpec, pointer);\n        copyBytesNToBytes('\",\"National Id\":\"', certSpec, pointer);\n        copyBytesNToBytes( StudentUIds[_certificate.StudentId], certSpec, pointer);\n        copyBytesNToBytes('\",\"Course Id\":\"', certSpec, pointer);\n        copyBytesNToBytes(CourseUIds[_certificate.CourseId], certSpec, pointer);\n        copyBytesNToBytes('\",\"Course Name\":\"', certSpec, pointer);\n        copyBytesToBytes(_course.CourseName, certSpec, pointer);\n        copyBytesNToBytes('\",\"Start Date\":\"', certSpec, pointer);\n        copyBytesNToBytes(_course.StartDate, certSpec, pointer);\n        copyBytesNToBytes('\",\"End Date\":\"', certSpec, pointer);\n        copyBytesNToBytes(_course.EndDate, certSpec, pointer);\n        copyBytesNToBytes('\",\"Duration\":\"', certSpec, pointer);\n        copyBytesNToBytes(uintToBytesN(_course.Hours), certSpec, pointer);\n        copyBytesNToBytes(' Hours\",', certSpec, pointer);\n        copyBytesToBytes(instructorsList, certSpec, pointer);\n        bytes10 _certType = CertificateTypeDescription(_certificate.CertificateType);\n        copyBytesNToBytes(',\"Course Type\":\"', certSpec, pointer);\n        copyBytesNToBytes(_certType, certSpec, pointer);\n        copyBytesNToBytes('\",\"Result\":\"', certSpec, pointer);\n        copyBytesNToBytes(_certificate.Result, certSpec, pointer);\n        copyBytesNToBytes('\"}}', certSpec, pointer);\n        return(string(certSpec));\n    }\n    function CertificateTypeDescription(uint Type) pure internal returns(bytes10) {\n        if (Type == 1) \n            return('Attendance');\n        else if (Type == 2)\n            return('Online');\n        else if (Type == 3)\n            return('Video');\n        else if (Type == 4)\n            return('ELearning');\n        else\n            return(bytes10(uintToBytesN(Type)));\n    }\n    function GetAdminStats() public view onlyOwner returns(string memory) {\n        bytes memory stat;\n        uint[1] memory pointer;\n        pointer[0] = 0;\n        stat = new bytes(400);\n        copyBytesNToBytes('{\"Instructors\":', stat, pointer);\n        copyBytesNToBytes(uintToBytesN(InstructorCount), stat, pointer);\n        copyBytesNToBytes(',\"Courses\":', stat, pointer);\n        copyBytesNToBytes(uintToBytesN(CourseCount), stat, pointer);\n        copyBytesNToBytes(',\"Students\":', stat, pointer);\n        copyBytesNToBytes(uintToBytesN(StudentCount), stat, pointer);\n        copyBytesNToBytes(',\"Certificates\":', stat, pointer);\n        copyBytesNToBytes(uintToBytesN(CertificateCount), stat, pointer);\n        copyBytesNToBytes('}', stat, pointer);\n        return(string(stat));\n    }\n    function GetStats() public view returns(string memory) {\n        bytes memory stat;\n        uint[1] memory pointer;\n        pointer[0] = 0;\n        stat = new bytes(200);\n        copyBytesNToBytes('{\"Instructors\":', stat, pointer);\n        copyBytesNToBytes(uintToBytesN(InstructorCount), stat, pointer);\n        copyBytesNToBytes(',\"Courses\":', stat, pointer);\n        copyBytesNToBytes(uintToBytesN(CourseCount), stat, pointer);\n        copyBytesNToBytes('}', stat, pointer);\n        return(string(stat));\n    }\n    function GetCourseStudents(string memory InstructorUId, string memory CourseUId) public view notEmpty(CourseUId) returns(string memory) {\n        bytes10 _instructorUId = bytes10(stringToBytes32(InstructorUId));\n        bytes10 _courseUId = bytes10(stringToBytes32(CourseUId));\n        uint i;\n        uint _instructorId = 0;\n\n        for (i = 1;  i<= InstructorCount; i++)\n            if (InstructorUIds[i] == _instructorUId) {\n                _instructorId = i;\n                break;\n            }\n//        require(_instructorId != 0);\n        uint _courseId = 0;\n\n        for (i = 1;  i<= CourseCount; i++)\n            if (CourseUIds[i] == _courseUId) {\n                _courseId = i;\n                break;\n            }\n\n        require(_courseId != 0);\n        bool found = false;\n        for (i = 0; i < CourseInstructor.length; i++)\n            if (CourseInstructor[i].InstructorId == _instructorId && CourseInstructor[i].CourseId == _courseId) {\n                found = true;\n                break;\n            }\n        require(found || (msg.sender == owner));\n        course memory _course = Course[_courseUId];\n        bytes memory students;\n        uint[1] memory pointer;\n        pointer[0] = 0;\n        bytes memory studentsList = CourseStudentDescription(_courseId);\n        bytes memory instructorsList = CourseInstructorDescription(CourseUIds[_courseId]);\n        uint len = 150 + studentsList.length + instructorsList.length + Institute.length + _course.CourseName.length;\n        students = new bytes(len);\n        copyBytesNToBytes('{\"Course\":{\"Issuer\":\"', students, pointer);\n        copyBytesNToBytes(Institute, students, pointer);\n        copyBytesNToBytes('\",\"Course Id\":\"', students, pointer);\n        copyBytesNToBytes(_courseUId, students, pointer);\n        copyBytesNToBytes('\",\"Course Name\":\"', students, pointer);\n        copyBytesToBytes(_course.CourseName, students, pointer);\n        copyBytesNToBytes('\",', students, pointer);\n        copyBytesToBytes(instructorsList, students, pointer);\n        copyBytesNToBytes(',\"Start Date\":\"', students, pointer);\n        copyBytesNToBytes(_course.StartDate, students, pointer);\n        copyBytesNToBytes('\",\"End Date\":\"', students, pointer);\n        copyBytesNToBytes(_course.EndDate, students, pointer);\n        copyBytesNToBytes('\",\"Duration\":\"', students, pointer);\n        copyBytesNToBytes( uintToBytesN(_course.Hours), students, pointer);\n        copyBytesNToBytes(' Hours\",', students, pointer);\n        copyBytesToBytes(studentsList, students, pointer);\n        copyBytesNToBytes('}}', students, pointer);\n        return(string(students));\n    }\n    function CourseStudentDescription(uint CourseId) internal view returns(bytes memory) {\n        bytes memory students;\n        uint[1] memory pointer;\n        pointer[0] = 0;\n        uint i;\n        bytes10 _studentId;\n        uint len = 20;\n        for (i = 1; i <= CertificateCount; i++)\n            if (Certificate[CertificateUIds[i]].CourseId == CourseId) {\n                _studentId = StudentUIds[Certificate[CertificateUIds[i]].StudentId];\n                len += 60 + Student[_studentId].length;\n            }\n        students = new bytes(len);\n        copyBytesNToBytes('\"Students\":[', students, pointer);\n        bool first = true;\n        for (i = 1; i <= CertificateCount; i++) {\n            if (Certificate[CertificateUIds[i]].CourseId == CourseId) {\n                if (first)\n                    first = false;\n                else\n                    copyBytesNToBytes(',', students, pointer);\n                _studentId = StudentUIds[Certificate[CertificateUIds[i]].StudentId];\n                copyBytesNToBytes('{\"National Id\":\"', students, pointer);\n                copyBytesNToBytes(_studentId, students, pointer);\n                copyBytesNToBytes('\",\"Name\":\"', students, pointer);\n                copyBytesToBytes(Student[_studentId], students, pointer);\n                copyBytesNToBytes('\"}', students, pointer);\n            }\n        }\n        copyBytesNToBytes(']', students, pointer);\n        return(students);\n   }\n   function CourseInstructorDescription(bytes10 CourseUId) internal view returns(bytes memory) {\n        bytes memory instructors;\n        uint[1] memory pointer;\n        uint len=100;\n        uint i;\n        uint courseInstructorCount = 0;\n        for (i=0; i< CourseInstructor.length; i++)\n            if (CourseUIds[CourseInstructor[i].CourseId] == CourseUId)\n                courseInstructorCount++;\n        uint[] memory courseInstructors = new uint[](courseInstructorCount); \n        courseInstructorCount = 0;\n        for (i=0; i< CourseInstructor.length; i++)\n            if (CourseUIds[CourseInstructor[i].CourseId] == CourseUId) {\n                courseInstructors[courseInstructorCount] = CourseInstructor[i].InstructorId;\n                courseInstructorCount++;\n                len += Instructor[InstructorUIds[CourseInstructor[i].InstructorId]].length + 20;\n            }\n        instructors = new bytes(len);\n        if (courseInstructorCount == 1) {\n            copyBytesNToBytes('\"Instructor\":\"', instructors, pointer);\n            copyBytesToBytes(Instructor[InstructorUIds[courseInstructors[0]]], instructors, pointer);\n            copyBytesNToBytes('\"', instructors, pointer);\n        }\n        else {\n            copyBytesNToBytes('\"Instructors\":[', instructors, pointer);\n            for (i=0; i<courseInstructorCount; i++){\n                if (i > 0)\n                    copyBytesNToBytes(',', instructors, pointer);\n                copyBytesNToBytes('\"', instructors, pointer);\n                copyBytesToBytes(Instructor[InstructorUIds[courseInstructors[i]]], instructors, pointer);\n                copyBytesNToBytes('\"', instructors, pointer);\n            }\n            copyBytesNToBytes(']', instructors, pointer);\n        }\n        return(instructors);\n   }\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b43727970746f436c617373000000000000000000000000000000000000000000"
}