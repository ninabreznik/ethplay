{
  "address": "0xfe0a38f4e1a8833f5db7830bf62d93e80568e7eb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "InbestDistribution",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-01\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title InbestToken\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n * Note they can later distribute these tokens as they wish using `transfer` and other\n * `StandardToken` functions.\n */\ncontract InbestToken is StandardToken {\n\n  string public constant name = \"Inbest Token\";\n  string public constant symbol = \"IBST\";\n  uint8 public constant decimals = 18;\n\n  // TBD\n  uint256 public constant INITIAL_SUPPLY = 17656263110 * (10 ** uint256(decimals));\n\n  /**\n   * @dev Constructor that gives msg.sender all of existing tokens.\n   */\n  function InbestToken() public {\n    totalSupply_ = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n    Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Inbest Token initial distribution\n *\n * @dev Distribute Investors' and Company's tokens\n */\ncontract InbestDistribution is Ownable {\n  using SafeMath for uint256;\n\n  // Token\n  InbestToken public IBST;\n\n  // Status of admins\n  mapping (address => bool) public admins;\n\n  // Number of decimal places for tokens\n  uint256 private constant DECIMALFACTOR = 10**uint256(18);\n\n  // Cliff period = 6 months\n  uint256 CLIFF = 180 days;  \n  // Vesting period = 12 months after cliff\n  uint256 VESTING = 365 days; \n\n  // Total of tokens\n  uint256 public constant INITIAL_SUPPLY   =    17656263110 * DECIMALFACTOR; // 14.000.000.000 IBST\n  // Total of available tokens\n  uint256 public AVAILABLE_TOTAL_SUPPLY    =    17656263110 * DECIMALFACTOR; // 14.000.000.000 IBST\n  // Total of available tokens for presale allocations\n  uint256 public AVAILABLE_PRESALE_SUPPLY  =    16656263110 * DECIMALFACTOR; // 500.000.000 IBST, 18 months vesting, 6 months cliff\n  // Total of available tokens for company allocation\n  uint256 public AVAILABLE_COMPANY_SUPPLY  =    1000000000 * DECIMALFACTOR; // 13.500.000.000 INST at token distribution event\n\n  // Allocation types\n  enum AllocationType { PRESALE, COMPANY}\n\n  // Amount of total tokens claimed\n  uint256 public grandTotalClaimed = 0;\n  // Time when InbestDistribution goes live\n  uint256 public startTime;\n\n  // The only wallet allowed for Company supply\n  address public companyWallet;\n\n  // Allocation with vesting and cliff information\n  struct Allocation {\n    uint8 allocationType;   // Type of allocation\n    uint256 endCliff;       // Tokens are locked until\n    uint256 endVesting;     // This is when the tokens are fully unvested\n    uint256 totalAllocated; // Total tokens allocated\n    uint256 amountClaimed;  // Total tokens claimed\n  }\n  mapping (address => Allocation) public allocations;\n\n  // Modifier to control who executes functions\n  modifier onlyOwnerOrAdmin() {\n    require(msg.sender == owner || admins[msg.sender]);\n    _;\n  }\n\n  // Event fired when a new allocation is made\n  event LogNewAllocation(address indexed _recipient, AllocationType indexed _fromSupply, uint256 _totalAllocated, uint256 _grandTotalAllocated);\n  // Event fired when IBST tokens are claimed\n  event LogIBSTClaimed(address indexed _recipient, uint8 indexed _fromSupply, uint256 _amountClaimed, uint256 _totalAllocated, uint256 _grandTotalClaimed);\n  // Event fired when admins are modified\n  event SetAdmin(address _caller, address _admin, bool _allowed);\n  // Event fired when refunding tokens mistakenly sent to contract\n  event RefundTokens(address _token, address _refund, uint256 _value);\n\n  /**\n    * @dev Constructor function - Set the inbest token address\n    * @param _startTime The time when InbestDistribution goes live\n    * @param _companyWallet The wallet to allocate Company tokens\n    */\n  function InbestDistribution(uint256 _startTime, address _companyWallet) public {\n    require(_companyWallet != address(0));\n    require(_startTime >= now);\n    require(AVAILABLE_TOTAL_SUPPLY == AVAILABLE_PRESALE_SUPPLY.add(AVAILABLE_COMPANY_SUPPLY));\n    startTime = _startTime;\n    companyWallet = _companyWallet;\n    IBST = new InbestToken();\n    require(AVAILABLE_TOTAL_SUPPLY == IBST.totalSupply()); //To verify that totalSupply is correct\n\n    // Allocate Company Supply\n    uint256 tokensToAllocate = AVAILABLE_COMPANY_SUPPLY;\n    AVAILABLE_COMPANY_SUPPLY = 0;\n    allocations[companyWallet] = Allocation(uint8(AllocationType.COMPANY), 0, 0, tokensToAllocate, 0);\n    AVAILABLE_TOTAL_SUPPLY = AVAILABLE_TOTAL_SUPPLY.sub(tokensToAllocate);\n    LogNewAllocation(companyWallet, AllocationType.COMPANY, tokensToAllocate, grandTotalAllocated());\n  }\n\n  /**\n    * @dev Allow the owner or admins of the contract to assign a new allocation\n    * @param _recipient The recipient of the allocation\n    * @param _totalAllocated The total amount of IBST tokens available to the receipient (after vesting and cliff)\n    */\n  function setAllocation (address _recipient, uint256 _totalAllocated) public onlyOwnerOrAdmin {\n    require(_recipient != address(0));\n    require(startTime > now); //Allocations are allowed only before starTime\n    require(AVAILABLE_PRESALE_SUPPLY >= _totalAllocated); //Current allocation must be less than remaining presale supply\n    require(allocations[_recipient].totalAllocated == 0 && _totalAllocated > 0); // Must be the first and only allocation for this recipient\n    require(_recipient != companyWallet); // Receipient of presale allocation can't be company wallet\n\n    // Allocate\n    AVAILABLE_PRESALE_SUPPLY = AVAILABLE_PRESALE_SUPPLY.sub(_totalAllocated);\n    allocations[_recipient] = Allocation(uint8(AllocationType.PRESALE), startTime.add(CLIFF), startTime.add(CLIFF).add(VESTING), _totalAllocated, 0);\n    AVAILABLE_TOTAL_SUPPLY = AVAILABLE_TOTAL_SUPPLY.sub(_totalAllocated);\n    LogNewAllocation(_recipient, AllocationType.PRESALE, _totalAllocated, grandTotalAllocated());\n  }\n\n  /**\n   * @dev Transfer a recipients available allocation to their address\n   * @param _recipient The address to withdraw tokens for\n   */\n function transferTokens (address _recipient) public {\n   require(_recipient != address(0));\n   require(now >= startTime); //Tokens can't be transfered until start date\n   require(_recipient != companyWallet); // Tokens allocated to COMPANY can't be withdrawn.\n   require(now >= allocations[_recipient].endCliff); // Cliff period must be ended\n   // Receipient can't claim more IBST tokens than allocated\n   require(allocations[_recipient].amountClaimed < allocations[_recipient].totalAllocated);\n\n   uint256 newAmountClaimed;\n   if (allocations[_recipient].endVesting > now) {\n     // Transfer available amount based on vesting schedule and allocation\n     newAmountClaimed = allocations[_recipient].totalAllocated.mul(now.sub(allocations[_recipient].endCliff)).div(allocations[_recipient].endVesting.sub(allocations[_recipient].endCliff));\n   } else {\n     // Transfer total allocated (minus previously claimed tokens)\n     newAmountClaimed = allocations[_recipient].totalAllocated;\n   }\n\n   //Transfer\n   uint256 tokensToTransfer = newAmountClaimed.sub(allocations[_recipient].amountClaimed);\n   allocations[_recipient].amountClaimed = newAmountClaimed;\n   require(IBST.transfer(_recipient, tokensToTransfer));\n   grandTotalClaimed = grandTotalClaimed.add(tokensToTransfer);\n   LogIBSTClaimed(_recipient, allocations[_recipient].allocationType, tokensToTransfer, newAmountClaimed, grandTotalClaimed);\n }\n\n /**\n  * @dev Transfer IBST tokens from Company allocation to reicipient address - Only owner and admins can execute\n  * @param _recipient The address to transfer tokens for\n  * @param _tokensToTransfer The amount of IBST tokens to transfer\n  */\n function manualContribution(address _recipient, uint256 _tokensToTransfer) public onlyOwnerOrAdmin {\n   require(_recipient != address(0));\n   require(_recipient != companyWallet); // Company can't withdraw tokens for itself\n   require(_tokensToTransfer > 0); // The amount must be valid\n   require(now >= startTime); // Tokens cant't be transfered until start date\n   //Company can't trasnfer more tokens than allocated\n   require(allocations[companyWallet].amountClaimed.add(_tokensToTransfer) <= allocations[companyWallet].totalAllocated);\n\n   //Transfer\n   allocations[companyWallet].amountClaimed = allocations[companyWallet].amountClaimed.add(_tokensToTransfer);\n   require(IBST.transfer(_recipient, _tokensToTransfer));\n   grandTotalClaimed = grandTotalClaimed.add(_tokensToTransfer);\n   LogIBSTClaimed(_recipient, uint8(AllocationType.COMPANY), _tokensToTransfer, allocations[companyWallet].amountClaimed, grandTotalClaimed);\n }\n\n /**\n  * @dev Returns remaining Company allocation\n  * @return Returns remaining Company allocation\n  */\n function companyRemainingAllocation() public view returns (uint256) {\n   return allocations[companyWallet].totalAllocated.sub(allocations[companyWallet].amountClaimed);\n }\n\n /**\n  * @dev Returns the amount of IBST allocated\n  * @return Returns the amount of IBST allocated\n  */\n  function grandTotalAllocated() public view returns (uint256) {\n    return INITIAL_SUPPLY.sub(AVAILABLE_TOTAL_SUPPLY);\n  }\n\n  /**\n   * @dev Admin management\n   * @param _admin Address of the admin to modify\n   * @param _allowed Status of the admin\n   */\n  function setAdmin(address _admin, bool _allowed) public onlyOwner {\n    require(_admin != address(0));\n    admins[_admin] = _allowed;\n     SetAdmin(msg.sender,_admin,_allowed);\n  }\n\n  function refundTokens(address _token, address _refund, uint256 _value) public onlyOwner {\n    require(_refund != address(0));\n    require(_token != address(0));\n    require(_token != address(IBST));\n    ERC20 token = ERC20(_token);\n    require(token.transfer(_refund, _value));\n    RefundTokens(_token, _refund, _value);\n  }\n}",
  "bytecode": "608060405262ed4e006003556301e133806004556b390ceb251785ac719b5800006005556b35d1bce877b52c34b35800006006556b033b2e3c9fd0803ce800000060075560006008553480156200005557600080fd5b5060405160408062001a9a83398101604052805160209091015160008054600160a060020a03191633178155600160a060020a03821615156200009757600080fd5b42831015620000a557600080fd5b600754600654620000c49164010000000062000dfa620002cc82021704565b60055414620000d257600080fd5b6009839055600a8054600160a060020a031916600160a060020a038416179055620000fc62000328565b604051809103906000f08015801562000119573d6000803e3d6000fd5b5060018054600160a060020a031916600160a060020a039283161790819055604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905191909216916318160ddd9160048083019260209291908290030181600087803b1580156200018e57600080fd5b505af1158015620001a3573d6000803e3d6000fd5b505050506040513d6020811015620001ba57600080fd5b505160055414620001ca57600080fd5b50600780546000918290556040805160a081018252600180825260208083018681528385018781526060850187815260808601898152600a54600160a060020a03168a52600b909452959097209351845460ff191660ff909116178455519183019190915593516002820155905160038201559151600490920191909155600554620002659082640100000000620002e3810262000e141704565b6005556001600a54600160a060020a03167f1ee7c4bce4c301d0c55622a01f860f1b71b72f582250922fa662d173c32164ff83620002ab640100000000620002f6810204565b6040805192835260208301919091528051918290030190a350505062000339565b600082820183811015620002dc57fe5b9392505050565b600082821115620002f057fe5b50900390565b60055460009062000323906b390ceb251785ac719b5800009064010000000062000e14620002e382021704565b905090565b6040516108bd80620011dd83390190565b610e9480620003496000396000f3006080604052600436106101065763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630a3a0531811461010b5780630c89a0df1461013157806312e43d92146101525780631ec32d15146101795780632b41a901146101aa5780632ff2e9dc146101bf57806337292eeb146101d457806338ca60a2146101e9578063429b62e5146101fe5780634b0bddd21461023357806352a9039c1461025957806378e97925146102a957806389519c50146102be5780638da5cb5b146102e85780639076c166146102fd5780639377530f14610321578063a92259fc14610336578063b58ee9a31461034b578063f2fde38b14610360575b600080fd5b34801561011757600080fd5b5061012f600160a060020a0360043516602435610381565b005b34801561013d57600080fd5b5061012f600160a060020a03600435166105b2565b34801561015e57600080fd5b50610167610899565b60408051918252519081900360200190f35b34801561018557600080fd5b5061018e61089f565b60408051600160a060020a039092168252519081900360200190f35b3480156101b657600080fd5b506101676108ae565b3480156101cb57600080fd5b506101676108d6565b3480156101e057600080fd5b506101676108e6565b3480156101f557600080fd5b5061018e6108ec565b34801561020a57600080fd5b5061021f600160a060020a03600435166108fb565b604080519115158252519081900360200190f35b34801561023f57600080fd5b5061012f600160a060020a03600435166024351515610910565b34801561026557600080fd5b5061027a600160a060020a03600435166109aa565b6040805160ff909616865260208601949094528484019290925260608401526080830152519081900360a00190f35b3480156102b557600080fd5b506101676109dd565b3480156102ca57600080fd5b5061012f600160a060020a03600435811690602435166044356109e3565b3480156102f457600080fd5b5061018e610b34565b34801561030957600080fd5b5061012f600160a060020a0360043516602435610b43565b34801561032d57600080fd5b50610167610d26565b34801561034257600080fd5b50610167610d2c565b34801561035757600080fd5b50610167610d32565b34801561036c57600080fd5b5061012f600160a060020a0360043516610d66565b600054600160a060020a03163314806103a957503360009081526002602052604090205460ff165b15156103b457600080fd5b600160a060020a03821615156103c957600080fd5b600a54600160a060020a03838116911614156103e457600080fd5b600081116103f157600080fd5b60095442101561040057600080fd5b600a54600160a060020a03166000908152600b602052604090206003810154600490910154610435908363ffffffff610dfa16565b111561044057600080fd5b600a54600160a060020a03166000908152600b602052604090206004015461046e908263ffffffff610dfa16565b600a54600160a060020a039081166000908152600b6020908152604080832060049081019590955560015481517fa9059cbb0000000000000000000000000000000000000000000000000000000081528886169681019690965260248601879052905193169363a9059cbb9360448083019491928390030190829087803b1580156104f857600080fd5b505af115801561050c573d6000803e3d6000fd5b505050506040513d602081101561052257600080fd5b5051151561052f57600080fd5b600854610542908263ffffffff610dfa16565b6008819055600a54600160a060020a039081166000908152600b6020908152604091829020600401548251868152918201528082019390935251600192918516917fd25a06c3403b07ef7b5e593da77676afc867e3bf6a44b4c381fca77581831a68919081900360600190a35050565b600080600160a060020a03831615156105ca57600080fd5b6009544210156105d957600080fd5b600a54600160a060020a03848116911614156105f457600080fd5b600160a060020a0383166000908152600b602052604090206001015442101561061c57600080fd5b600160a060020a0383166000908152600b6020526040902060038101546004909101541061064957600080fd5b600160a060020a0383166000908152600b602052604090206002015442101561070f57600160a060020a0383166000908152600b602052604090206001810154600290910154610708916106a3919063ffffffff610e1416565b600160a060020a0385166000908152600b60205260409020600101546106fc906106d490429063ffffffff610e1416565b600160a060020a0387166000908152600b60205260409020600301549063ffffffff610e2616565b9063ffffffff610e5116565b915061072e565b600160a060020a0383166000908152600b602052604090206003015491505b600160a060020a0383166000908152600b602052604090206004015461075b90839063ffffffff610e1416565b600160a060020a038085166000818152600b60209081526040808320600490810189905560015482517fa9059cbb00000000000000000000000000000000000000000000000000000000815291820195909552602481018790529051959650929093169363a9059cbb936044808501949193918390030190829087803b1580156107e457600080fd5b505af11580156107f8573d6000803e3d6000fd5b505050506040513d602081101561080e57600080fd5b5051151561081b57600080fd5b60085461082e908263ffffffff610dfa16565b6008819055600160a060020a0384166000818152600b602090815260409182902054825186815291820187905281830194909452905160ff909316927fd25a06c3403b07ef7b5e593da77676afc867e3bf6a44b4c381fca77581831a689181900360600190a3505050565b60065481565b600a54600160a060020a031681565b6005546000906108d1906b390ceb251785ac719b5800009063ffffffff610e1416565b905090565b6b390ceb251785ac719b58000081565b60075481565b600154600160a060020a031681565b60026020526000908152604090205460ff1681565b600054600160a060020a0316331461092757600080fd5b600160a060020a038216151561093c57600080fd5b600160a060020a038216600081815260026020908152604091829020805485151560ff19909116811790915582513381529182019390935280820192909252517fd1805363f4431503eae1e5f36c56c593ca412b7df26632d571879aeccf0190079181900360600190a15050565b600b602052600090815260409020805460018201546002830154600384015460049094015460ff90931693919290919085565b60095481565b60008054600160a060020a031633146109fb57600080fd5b600160a060020a0383161515610a1057600080fd5b600160a060020a0384161515610a2557600080fd5b600154600160a060020a0385811691161415610a4057600080fd5b50604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152602482018490529151859283169163a9059cbb9160448083019260209291908290030181600087803b158015610aad57600080fd5b505af1158015610ac1573d6000803e3d6000fd5b505050506040513d6020811015610ad757600080fd5b50511515610ae457600080fd5b60408051600160a060020a0380871682528516602082015280820184905290517ffab5e7a27e02736e52f60776d307340051d8bc15aee0ef211c7a4aa2a8cdc1549181900360600190a150505050565b600054600160a060020a031681565b600054600160a060020a0316331480610b6b57503360009081526002602052604090205460ff165b1515610b7657600080fd5b600160a060020a0382161515610b8b57600080fd5b6009544210610b9957600080fd5b600654811115610ba857600080fd5b600160a060020a0382166000908152600b6020526040902060030154158015610bd15750600081115b1515610bdc57600080fd5b600a54600160a060020a0383811691161415610bf757600080fd5b600654610c0a908263ffffffff610e1416565b6006556040805160a08101909152600081526003546009546020830191610c37919063ffffffff610dfa16565b8152602001610c65600454610c59600354600954610dfa90919063ffffffff16565b9063ffffffff610dfa16565b8152602080820184905260006040928301819052600160a060020a0386168152600b82528290208351815460ff191660ff90911617815590830151600182015590820151600282015560608201516003820155608090910151600490910155600554610cd19082610e14565b600555600082600160a060020a03167f1ee7c4bce4c301d0c55622a01f860f1b71b72f582250922fa662d173c32164ff83610d0a6108ae565b6040805192835260208301919091528051918290030190a35050565b60085481565b60055481565b600a54600160a060020a03166000908152600b6020526040812060048101546003909101546108d19163ffffffff610e1416565b600054600160a060020a03163314610d7d57600080fd5b600160a060020a0381161515610d9257600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082820183811015610e0957fe5b8091505b5092915050565b600082821115610e2057fe5b50900390565b600080831515610e395760009150610e0d565b50828202828482811515610e4957fe5b0414610e0957fe5b6000808284811515610e5f57fe5b049493505050505600a165627a7a72305820f0712b0b7667c7248bc7e8b804a2a4f8ca47c56fb7cf11c3d4d90017c19b67660029608060405234801561001057600080fd5b506b390ceb251785ac719b580000600181905533600081815260208181526040808320859055805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3610844806100796000396000f3006080604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100be578063095ea7b31461014857806318160ddd1461018057806323b872dd146101a75780632ff2e9dc146101d1578063313ce567146101e6578063661884631461021157806370a082311461023557806395d89b4114610256578063a9059cbb1461026b578063d73dd6231461028f578063dd62ed3e146102b3575b600080fd5b3480156100ca57600080fd5b506100d36102da565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561010d5781810151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015457600080fd5b5061016c600160a060020a0360043516602435610311565b604080519115158252519081900360200190f35b34801561018c57600080fd5b50610195610377565b60408051918252519081900360200190f35b3480156101b357600080fd5b5061016c600160a060020a036004358116906024351660443561037d565b3480156101dd57600080fd5b506101956104f4565b3480156101f257600080fd5b506101fb610504565b6040805160ff9092168252519081900360200190f35b34801561021d57600080fd5b5061016c600160a060020a0360043516602435610509565b34801561024157600080fd5b50610195600160a060020a03600435166105f9565b34801561026257600080fd5b506100d3610614565b34801561027757600080fd5b5061016c600160a060020a036004351660243561064b565b34801561029b57600080fd5b5061016c600160a060020a036004351660243561072c565b3480156102bf57600080fd5b50610195600160a060020a03600435811690602435166107c5565b60408051808201909152600c81527f496e6265737420546f6b656e0000000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b6000600160a060020a038316151561039457600080fd5b600160a060020a0384166000908152602081905260409020548211156103b957600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156103e957600080fd5b600160a060020a038416600090815260208190526040902054610412908363ffffffff6107f016565b600160a060020a038086166000908152602081905260408082209390935590851681522054610447908363ffffffff61080216565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610489908363ffffffff6107f016565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b6b390ceb251785ac719b58000081565b601281565b336000908152600260209081526040808320600160a060020a03861684529091528120548083111561055e57336000908152600260209081526040808320600160a060020a0388168452909152812055610593565b61056e818463ffffffff6107f016565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b60408051808201909152600481527f4942535400000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a038316151561066257600080fd5b3360009081526020819052604090205482111561067e57600080fd5b3360009081526020819052604090205461069e908363ffffffff6107f016565b3360009081526020819052604080822092909255600160a060020a038516815220546106d0908363ffffffff61080216565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a0386168452909152812054610760908363ffffffff61080216565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6000828211156107fc57fe5b50900390565b60008282018381101561081157fe5b93925050505600a165627a7a723058201bd4f1cffda80c9e86570911792d5fd77bcb2e9358a57e85d81d6d4c629954620029000000000000000000000000000000000000000000000000000000005b149e9c000000000000000000000000f8357b4913764838d2f45a5362caeedacb823ff9",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000005b149e9c000000000000000000000000f8357b4913764838d2f45a5362caeedacb823ff9"
}