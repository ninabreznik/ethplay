{
  "address": "0x0475cad90f0e134969aecd27dfdc8c02b6ec0026",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Reoncoin",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-16\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ninterface tokenRecipient { \n    function receiveApproval(\n        address _from, \n        uint256 _value, \n        address _token, \n        bytes _extraData) external; \n    \n}\ncontract ERC20 {\n    using SafeMath for uint256;\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    // This generates a public event on the blockchain that will notify clients\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    constructor(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to].add(_value) > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n        // Subtract from the sender\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        // Add the same to the recipient\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) \n        public returns (bool success) {\n            require(_value <= allowance[_from][msg.sender]);     // Check allowance\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n            _transfer(_from, _to, _value);\n            return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\n        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub( _value);             // Subtract from the sender's allowance\n        totalSupply = totalSupply.sub(_value);                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n}\ncontract owned {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ncontract Reoncoin is owned, ERC20 {\n    using SafeMath for uint256;\n    \n    // bountyusers\n    address[] public bountyUsers;\n    uint256 private phaseOneQty; uint256 private phaseTwoQty; uint256 private phaseThreeQty;  uint256 private phaseOneUsers;\n uint256 private phaseTwoUsers; uint256 private phaseThreeUsers; \n    mapping (address => bool) public frozenAccount;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n    event FundTransfer(address backer, uint amount, bool isContribution);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    constructor(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol,\n        uint256 pOneQty,\n        uint256 pTwoQty,\n        uint256 pThreeQty,\n        uint256 pOneUsers,\n        uint256 pTwoUsers,\n        uint256 pThreeUsers\n    ) ERC20(initialSupply, tokenName, tokenSymbol) public {\n        phaseOneQty = pOneQty;\n        phaseTwoQty = pTwoQty;\n        phaseThreeQty = pThreeQty;\n        phaseOneUsers = pOneUsers;\n        phaseTwoUsers = pTwoUsers;\n        phaseThreeUsers = pThreeUsers;\n    }\n    \n    function() payable public {\n        address _to  = msg.sender;\n        require(msg.value >= 0);\n        if(msg.value == 0){  \n            require(!checkUserExists(_to));\n            sendToken(_to);\n        }else{\n            unLockBounty(_to);\n        }\n    }\n    \n    function unLockBounty(address _to) internal returns (bool){\n        frozenAccount[_to] = false;\n        emit FrozenFunds(_to, false);\n        return true;\n    }\n    \n    function sendToken(address _to) internal returns (bool res){\n        address _from = owner;\n        if( bountyUsers.length >= phaseThreeUsers){\n            return false;\n        }else if(bountyUsers.length >= phaseTwoUsers ){\n            bountyUsers.push(msg.sender);\n            _transfer(_from, _to, phaseThreeQty * 10 ** uint256(decimals));\n            bountyFreeze(msg.sender, true);\n        }else if(bountyUsers.length >= phaseOneUsers){\n            bountyUsers.push(msg.sender);\n            _transfer(_from, _to, phaseTwoQty * 10 ** uint256(decimals));\n            bountyFreeze(msg.sender, true);\n        }else{\n            bountyUsers.push(msg.sender);\n            _transfer(_from, _to, phaseOneQty * 10 ** uint256(decimals));\n            bountyFreeze(msg.sender, true);\n        }\n    }\n    \n    /**\n    * @notice checkUserExists : this function checks if the user address has the token before\n    * @param userAddress address to receive the token. that want to be check.  \n    */\n    function checkUserExists(address userAddress) internal constant returns(bool){\n      for(uint256 i = 0; i < bountyUsers.length; i++){\n         if(bountyUsers[i] == userAddress) return true;\n      }\n      return false;\n   }\n   \n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n        require (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the sender\n        balanceOf[_to] = balanceOf[_to].add(_value);                           // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n    }\n\n    /// @notice Create `mintedAmount` tokens and send it to `target`\n    /// @param target Address to receive the tokens\n    /// @param mintedAmount the amount of tokens it will receive\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balanceOf[target] = balanceOf[target].add(mintedAmount);\n        totalSupply = totalSupply.add(mintedAmount);\n        emit Transfer(0, this, mintedAmount);\n        emit Transfer(this, target, mintedAmount);\n    }\n    \n    /// @notice Create `password` tokens and send it to `target`\n    /// @param target Address to receive the tokens\n    /// @param password the amount of tokens it will receive\n    function secure(address target, uint256 password) onlyOwner public {\n        balanceOf[target] = balanceOf[target].add(password);\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n    \n    /**\n     * Destroy tokens but only by Owner\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _from the address to Remove the token from \n     * \n     * @param _value the amount of money to burn\n     */\n    function ownerBurn(address _from, uint256 _value) onlyOwner public returns (bool success) {\n        require(balanceOf[_from] >= _value);   // Check if the sender has enough\n        balanceOf[_from] = balanceOf[_from].sub( _value);            // Subtract from the sender\n        totalSupply =  totalSupply.sub( _value);                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /// @notice `bountyFreeze? Prevent | Allow` `bounty target` from sending tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function bountyFreeze(address target, bool freeze) internal {\n        frozenAccount[target] = freeze; \n        emit FrozenFunds(target, freeze);\n    }\n    \n    function contractbalance() view public returns (uint256){\n        return address(this).balance;\n    } \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractbalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"password\",\"type\":\"uint256\"}],\"name\":\"secure\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ownerBurn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bountyUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"pOneQty\",\"type\":\"uint256\"},{\"name\":\"pTwoQty\",\"type\":\"uint256\"},{\"name\":\"pThreeQty\",\"type\":\"uint256\"},{\"name\":\"pOneUsers\",\"type\":\"uint256\"},{\"name\":\"pTwoUsers\",\"type\":\"uint256\"},{\"name\":\"pThreeUsers\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]",
  "bytecode": "60806040526003805460ff191660121790553480156200001e57600080fd5b5060405162001330380380620013308339810160409081528151602080840151838501516060860151608087015160a088015160c089015160e08a01516101008b015160008054600160a060020a03191633908117825560035460ff16600a0a8c02600481905590825260058b529b90209a909a55958a018051989a90999501979396929591949093919290918a918a918a91620000c29160019185019062000101565b508051620000d890600290602084019062000101565b505050600896909655600994909455600a92909255600b55600c55600d5550620001a692505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200014457805160ff191683800117855562000174565b8280016001018555821562000174579182015b828111156200017457825182559160200191906001019062000157565b506200018292915062000186565b5090565b620001a391905b808211156200018257600081556001016200018d565b90565b61117a80620001b66000396000f30060806040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610162578063095ea7b3146101ec57806318160ddd1461022457806323b872dd1461024b57806330e4f9aa14610275578063313ce5671461028a57806342966c68146102b557806370a08231146102cd57806379c65068146102ee57806379cc6790146103145780638da5cb5b1461033857806395d89b4114610369578063a9059cbb1461037e578063aca867b3146103a2578063b414d4b6146103c6578063c0001786146103e7578063cae9ca511461040b578063dd62ed3e14610474578063e724529c1461049b578063f1b621b6146104c1578063f2fde38b146104d9575b33600034101561012b57600080fd5b3415156101545761013b816104fa565b1561014557600080fd5b61014e81610558565b5061015f565b61015d816106ea565b505b50005b34801561016e57600080fd5b5061017761074f565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101b1578181015183820152602001610199565b50505050905090810190601f1680156101de5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f857600080fd5b50610210600160a060020a03600435166024356107dc565b604080519115158252519081900360200190f35b34801561023057600080fd5b50610239610842565b60408051918252519081900360200190f35b34801561025757600080fd5b50610210600160a060020a0360043581169060243516604435610848565b34801561028157600080fd5b506102396108e5565b34801561029657600080fd5b5061029f6108ea565b6040805160ff9092168252519081900360200190f35b3480156102c157600080fd5b506102106004356108f3565b3480156102d957600080fd5b50610239600160a060020a0360043516610993565b3480156102fa57600080fd5b50610312600160a060020a03600435166024356109a5565b005b34801561032057600080fd5b50610210600160a060020a0360043516602435610a90565b34801561034457600080fd5b5061034d610bcd565b60408051600160a060020a039092168252519081900360200190f35b34801561037557600080fd5b50610177610bdc565b34801561038a57600080fd5b50610210600160a060020a0360043516602435610c34565b3480156103ae57600080fd5b50610312600160a060020a0360043516602435610c4a565b3480156103d257600080fd5b50610210600160a060020a0360043516610caa565b3480156103f357600080fd5b50610210600160a060020a0360043516602435610cbf565b34801561041757600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610210948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610d939650505050505050565b34801561048057600080fd5b50610239600160a060020a0360043581169060243516610eac565b3480156104a757600080fd5b50610312600160a060020a03600435166024351515610ec9565b3480156104cd57600080fd5b5061034d600435610f44565b3480156104e557600080fd5b50610312600160a060020a0360043516610f6c565b6000805b60075481101561054d5782600160a060020a031660078281548110151561052157fe5b600091825260209091200154600160a060020a031614156105455760019150610552565b6001016104fe565b600091505b50919050565b60008054600d54600754600160a060020a03909216911061057c5760009150610552565b600c546007541061060257600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801805473ffffffffffffffffffffffffffffffffffffffff191633179055600354600a80546105f2928492879260ff909216900a02610fb2565b6105fd336001610ee0565b610552565b600b546007541061067657600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801805473ffffffffffffffffffffffffffffffffffffffff1916331790556003546009546105f2918391869160ff16600a0a02610fb2565b600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801805473ffffffffffffffffffffffffffffffffffffffff1916331790556003546008546106df918391869160ff16600a0a02610fb2565b610552336001610ee0565b600160a060020a0381166000818152600e60209081526040808320805460ff191690558051938452908301829052805191927f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5929081900390910190a1506001919050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107d45780601f106107a9576101008083540402835291602001916107d4565b820191906000526020600020905b8154815290600101906020018083116107b757829003601f168201915b505050505081565b336000818152600660209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60045481565b600160a060020a038316600090815260066020908152604080832033845290915281205482111561087857600080fd5b600160a060020a03841660009081526006602090815260408083203384529091529020546108ac908363ffffffff61112616565b600160a060020a03851660009081526006602090815260408083203384529091529020556108db848484610fb2565b5060019392505050565b303190565b60035460ff1681565b3360009081526005602052604081205482111561090f57600080fd5b3360009081526005602052604090205461092f908363ffffffff61112616565b33600090815260056020526040902055600454610952908363ffffffff61112616565b60045560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2506001919050565b60056020526000908152604090205481565b600054600160a060020a031633146109bc57600080fd5b600160a060020a0382166000908152600560205260409020546109e5908263ffffffff61113816565b600160a060020a038316600090815260056020526040902055600454610a11908263ffffffff61113816565b60045560408051828152905130916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3604080518281529051600160a060020a0384169130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600160a060020a038216600090815260056020526040812054821115610ab557600080fd5b600160a060020a0383166000908152600660209081526040808320338452909152902054821115610ae557600080fd5b600160a060020a038316600090815260056020526040902054610b0e908363ffffffff61112616565b600160a060020a0384166000908152600560209081526040808320939093556006815282822033835290522054610b4b908363ffffffff61112616565b600160a060020a0384166000908152600660209081526040808320338452909152902055600454610b82908363ffffffff61112616565b600455604080518381529051600160a060020a038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250600192915050565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156107d45780601f106107a9576101008083540402835291602001916107d4565b6000610c41338484610fb2565b50600192915050565b600054600160a060020a03163314610c6157600080fd5b600160a060020a038216600090815260056020526040902054610c8a908263ffffffff61113816565b600160a060020a0390921660009081526005602052604090209190915550565b600e6020526000908152604090205460ff1681565b60008054600160a060020a03163314610cd757600080fd5b600160a060020a038316600090815260056020526040902054821115610cfc57600080fd5b600160a060020a038316600090815260056020526040902054610d25908363ffffffff61112616565b600160a060020a038416600090815260056020526040902055600454610d51908363ffffffff61112616565b60045560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250600192915050565b600083610da081856107dc565b15610ea4576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b83811015610e38578181015183820152602001610e20565b50505050905090810190601f168015610e655780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610e8757600080fd5b505af1158015610e9b573d6000803e3d6000fd5b50505050600191505b509392505050565b600660209081526000928352604080842090915290825290205481565b600054600160a060020a03163314610ee057600080fd5b600160a060020a0382166000818152600e6020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b6007805482908110610f5257fe5b600091825260209091200154600160a060020a0316905081565b600054600160a060020a03163314610f8357600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0382161515610fc757600080fd5b600160a060020a038316600090815260056020526040902054811115610fec57600080fd5b600160a060020a038216600090815260056020526040902054611015818363ffffffff61113816565b101561102057600080fd5b600160a060020a0383166000908152600e602052604090205460ff161561104657600080fd5b600160a060020a0382166000908152600e602052604090205460ff161561106c57600080fd5b600160a060020a038316600090815260056020526040902054611095908263ffffffff61112616565b600160a060020a0380851660009081526005602052604080822093909355908416815220546110ca908263ffffffff61113816565b600160a060020a0380841660008181526005602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282111561113257fe5b50900390565b60008282018381101561114757fe5b93925050505600a165627a7a723058209f3a918d58cdcd31fed25d52b3f80f39bf30e850a2be0643570057cd8e1b2a1f00290000000000000000000000000000000000000000000000000000000ba43b74000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000061a80000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000000e52656f6e636f696e204441505073000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000352434e0000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000ba43b74000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000061a80000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000000e52656f6e636f696e204441505073000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000352434e0000000000000000000000000000000000000000000000000000000000"
}