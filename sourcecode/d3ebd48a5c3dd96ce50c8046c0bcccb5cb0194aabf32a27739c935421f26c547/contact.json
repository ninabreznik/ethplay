{
  "address": "0xa3afe717038d4e12133d84088754811220af9329",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VMembersCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-31\n*/\n\npragma solidity ^0.4.24;\n\ncontract owned {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ncontract ERC223ReceivingContract { \n  function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\ncontract ERC20CompatibleToken is owned {\n  using SafeMath for uint;\n\n  // Public variables of the token\n  string public name;\n  string public symbol;\n  uint8 public decimals = 18;\n  uint256 public totalSupply;\n\n  mapping(address => uint) balances; // List of user balances.\n\n  event Transfer(address indexed from, address indexed to, uint value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  mapping (address => mapping (address => uint256)) internal allowed;\n  mapping (address => bool) public frozenAccount;\n\n  /**\n   * Constrctor function\n   *\n   * Initializes contract with initial supply tokens to the creator of the contract\n   */\n  constructor(\n      uint256 initialSupply,\n      string memory tokenName,\n      string memory tokenSymbol\n  ) public {\n      totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n      balances[msg.sender] = totalSupply;                    // Give the creator all initial tokens\n      name = tokenName;                                       // Set the name for display purposes\n      symbol = tokenSymbol;                                   // Set the symbol for display purposes\n  }\n\n  /**\n  * @dev Transfer tokens from one address to another\n  * @param _from address The address which you want to send tokens from\n  * @param _to address The address which you want to transfer to\n  * @param _value uint256 the amount of tokens to be transferred\n  */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    uint codeLength;\n    bytes memory empty;\n\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    require(!frozenAccount[_from]);                         // Check if sender is frozen\n    require(!frozenAccount[_to]);                           // Check if recipient is frozen\n\n    assembly {\n      // Retrieve the size of the code on target address, this needs assembly .\n      codeLength := extcodesize(_to)\n    }\n    if(codeLength>0) {\n      ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n      receiver.tokenFallback(_from, _value, empty);\n    }\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /* This generates a public event on the blockchain that will notify clients */\n  event FrozenFunds(address target, bool frozen);\n\n  /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n  /// @param target Address to be frozen\n  /// @param freeze either to freeze it or not\n  function freezeAccount(address target, bool freeze) onlyOwner public {\n      frozenAccount[target] = freeze;\n      emit FrozenFunds(target, freeze);\n  }\n\n}\n\ncontract ERC223Interface {\n    function balanceOf(address who) public constant returns (uint);\n    function transfer(address to, uint value) public;\n    function transfer(address to, uint value, bytes data) public;\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title VMembers Coin Main Contract\n * @dev Reference implementation of the ERC223 standard token.\n */\ncontract VMembersCoin is owned, ERC223Interface, ERC20CompatibleToken {\n    using SafeMath for uint;\n\n    mapping (address => bool) public frozenAccount;\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    constructor(\n        uint256 initialSupply,\n        string memory tokenName,\n        string memory tokenSymbol\n    ) ERC20CompatibleToken(initialSupply, tokenName, tokenSymbol) public {}\n\n    /**\n     * @dev Transfer the specified amount of tokens to the specified address.\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\n     *      The token transfer fails if the recipient is a contract\n     *      but does not implement the `tokenFallback` function\n     *      or the fallback function to receive funds.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     * @param _data  Transaction metadata.\n     */\n    function transfer(address _to, uint _value, bytes _data) public {\n        // Standard function transfer similar to ERC20 transfer with no _data .\n        // Added due to backwards compatibility reasons .\n        uint codeLength;\n\n        require(!frozenAccount[msg.sender]);                    // Check if sender is frozen\n        require(!frozenAccount[_to]);                           // Check if recipient is frozen\n\n        assembly {\n            // Retrieve the size of the code on target address, this needs assembly .\n            codeLength := extcodesize(_to)\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        if(codeLength>0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, _data);\n        }\n        emit Transfer(msg.sender, _to, _value);\n        return ;\n    }\n\n    /**\n     * @dev Transfer the specified amount of tokens to the specified address.\n     *      This function works the same with the previous one\n     *      but doesn't contain `_data` param.\n     *      Added due to backwards compatibility reasons.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     */\n    function transfer(address _to, uint _value) public {\n        uint codeLength;\n        bytes memory empty;\n\n        require(!frozenAccount[msg.sender]);                    // Check if sender is frozen\n        require(!frozenAccount[_to]);                           // Check if recipient is frozen\n\n        assembly {\n            // Retrieve the size of the code on target address, this needs assembly .\n            codeLength := extcodesize(_to)\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        if(codeLength>0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, empty);\n        }\n        emit Transfer(msg.sender, _to, _value);\n        return ;\n    }\n\n\n    /**\n     * @dev Returns balance of the `_owner`.\n     *\n     * @param _owner   The address whose balance will be returned.\n     * @return balance Balance of the `_owner`.\n     */\n    function balanceOf(address _owner) public constant returns (uint balance) {\n        return balances[_owner];\n    }\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n        return ;\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526003805460ff1916601217905534801561001d57600080fd5b5060405162000fbb38038062000fbb83398101604090815281516020808401518385015160008054600160a060020a03191633908117825560035460ff16600a0a86026004819055908252600585529590209490945584018051929490930191849184918491610092916001918501906100b2565b5080516100a69060029060208401906100b2565b5050505050505061014d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100f357805160ff1916838001178555610120565b82800160010185558215610120579182015b82811115610120578251825591602001919060010190610105565b5061012c929150610130565b5090565b61014a91905b8082111561012c5760008155600101610136565b90565b610e5e806200015d6000396000f3006080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ea578063095ea7b31461017457806318160ddd146101ac57806323b872dd146101d3578063313ce567146101fd578063661884631461022857806370a082311461024c5780638da5cb5b1461026d57806395d89b411461029e578063a9059cbb146102b3578063b414d4b6146102d9578063be45fd62146102fa578063d73dd62314610363578063dd62ed3e14610387578063e724529c146103ae578063f2fde38b146103d4575b600080fd5b3480156100f657600080fd5b506100ff6103f5565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610139578181015183820152602001610121565b50505050905090810190601f1680156101665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018057600080fd5b50610198600160a060020a0360043516602435610482565b604080519115158252519081900360200190f35b3480156101b857600080fd5b506101c16104e8565b60408051918252519081900360200190f35b3480156101df57600080fd5b50610198600160a060020a03600435811690602435166044356104ee565b34801561020957600080fd5b506102126107b9565b6040805160ff9092168252519081900360200190f35b34801561023457600080fd5b50610198600160a060020a03600435166024356107c2565b34801561025857600080fd5b506101c1600160a060020a03600435166108b2565b34801561027957600080fd5b506102826108cd565b60408051600160a060020a039092168252519081900360200190f35b3480156102aa57600080fd5b506100ff6108dc565b3480156102bf57600080fd5b506102d7600160a060020a0360043516602435610934565b005b3480156102e557600080fd5b50610198600160a060020a0360043516610b2b565b34801561030657600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526102d7948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610b409650505050505050565b34801561036f57600080fd5b50610198600160a060020a0360043516602435610c85565b34801561039357600080fd5b506101c1600160a060020a0360043581169060243516610d1e565b3480156103ba57600080fd5b506102d7600160a060020a03600435166024351515610d49565b3480156103e057600080fd5b506102d7600160a060020a0360043516610dc4565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561047a5780601f1061044f5761010080835404028352916020019161047a565b820191906000526020600020905b81548152906001019060200180831161045d57829003601f168201915b505050505081565b336000818152600660209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60045481565b600080606081600160a060020a038616151561050957600080fd5b600160a060020a03871660009081526005602052604090205485111561052e57600080fd5b600160a060020a038716600090815260066020908152604080832033845290915290205485111561055e57600080fd5b600160a060020a03871660009081526007602052604090205460ff161561058457600080fd5b600160a060020a03861660009081526007602052604090205460ff16156105aa57600080fd5b853b925060008311156106a957506040517fc0ee0b8a000000000000000000000000000000000000000000000000000000008152600160a060020a03878116600483019081526024830187905260606044840190815284516064850152845189949385169363c0ee0b8a938c938b93899360840190602085019080838360005b8381101561064257818101518382015260200161062a565b50505050905090810190601f16801561066f5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561069057600080fd5b505af11580156106a4573d6000803e3d6000fd5b505050505b600160a060020a0387166000908152600560205260409020546106d2908663ffffffff610e0a16565b600160a060020a038089166000908152600560205260408082209390935590881681522054610707908663ffffffff610e1c16565b600160a060020a03808816600090815260056020908152604080832094909455918a16815260068252828120338252909152205461074b908663ffffffff610e0a16565b600160a060020a0380891660008181526006602090815260408083203384528252918290209490945580518981529051928a169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019695505050505050565b60035460ff1681565b336000908152600660209081526040808320600160a060020a03861684529091528120548083111561081757336000908152600660209081526040808320600160a060020a038816845290915281205561084c565b610827818463ffffffff610e0a16565b336000908152600660209081526040808320600160a060020a03891684529091529020555b336000818152600660209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526005602052604090205490565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152929183018282801561047a5780601f1061044f5761010080835404028352916020019161047a565b33600090815260086020526040812054606090829060ff161561095657600080fd5b600160a060020a03851660009081526008602052604090205460ff161561097c57600080fd5b33600090815260056020526040902054853b93506109a0908563ffffffff610e0a16565b3360009081526005602052604080822092909255600160a060020a038716815220546109d2908563ffffffff610e1c16565b600160a060020a038616600090815260056020526040812091909155831115610ae457506040517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081523360048201818152602483018690526060604484019081528451606485015284518894600160a060020a0386169463c0ee0b8a9490938a93899360840190602085019080838360005b83811015610a7d578181015183820152602001610a65565b50505050905090810190601f168015610aaa5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610acb57600080fd5b505af1158015610adf573d6000803e3d6000fd5b505050505b604080518581529051600160a060020a0387169133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050505050565b60086020526000908152604090205460ff1681565b33600090815260086020526040812054819060ff1615610b5f57600080fd5b600160a060020a03851660009081526008602052604090205460ff1615610b8557600080fd5b33600090815260056020526040902054853b9250610ba9908563ffffffff610e0a16565b3360009081526005602052604080822092909255600160a060020a03871681522054610bdb908563ffffffff610e1c16565b600160a060020a038616600090815260056020526040812091909155821115610ae457506040517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081523360048201818152602483018690526060604484019081528551606485015285518894600160a060020a0386169463c0ee0b8a9490938a938a93608401906020850190808383600083811015610a7d578181015183820152602001610a65565b336000908152600660209081526040808320600160a060020a0386168452909152812054610cb9908363ffffffff610e1c16565b336000818152600660209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260066020908152604080832093909416825291909152205490565b600054600160a060020a03163314610d6057600080fd5b600160a060020a038216600081815260086020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b600054600160a060020a03163314610ddb57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610e1657fe5b50900390565b600082820183811015610e2b57fe5b93925050505600a165627a7a72305820118ba0d386a2d22bb721f6addb748f35f9575b1924ccb391b3d99bbd4fa1fff9002900000000000000000000000000000000000000000000000000000006fc23ac00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000d564d656d6265727320436f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003564d430000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000006fc23ac00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000d564d656d6265727320436f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003564d430000000000000000000000000000000000000000000000000000000000"
}