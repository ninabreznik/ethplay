{
  "address": "0x17e090c0d3193c783a8928e4fd81185e1794b0b5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Airtoto",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-15\n*/\n\npragma solidity 0.4.25;\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n        // this function needs to emit an event with the updated approval.\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n    }\n}\n\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string name, string symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n **/\ncontract ERC20Pausable is ERC20, Pausable {\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from,address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n}\n\n\ncontract Airtoto is ERC20Pausable, ERC20Detailed, Ownable {\n    using SafeMath for uint256;\n\tuint256 public constant initialSupply = 300000000 * (10 ** uint256(decimals()));\n    uint256 public constant sum_bounties_wallet = initialSupply.mul(10).div(100);\n    address public constant address_bounties_wallet = 0x5E4C4043A5C96FEFc61F6548FcF14Abc5a92654B;\n    uint256 public constant sum_team_wallet = initialSupply.mul(20).div(100);\n    address public constant address_team_wallet = 0xDeFb454cB3771C98144CbfC1359Eb7FE2bDd054B;\t\n    uint256 public constant sum_crowdsale = initialSupply.mul(70).div(100);\n\t\n    constructor () public ERC20Detailed(\"Airtoto\", \"Att\", 18) {\n\t\t_mint(address_bounties_wallet, sum_bounties_wallet);\n\t\t_mint(address_team_wallet, sum_team_wallet);\n\t\t_mint(msg.sender, sum_crowdsale);\t\t\n    }\n\t\n    function transferForICO (address _to, uint256 _value) public onlyOwner{\n        _transfer(msg.sender, _to, _value);\n    }\t\n\t /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n}\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <[email protected]?.com>, Eenae <[email protected]>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /// @dev counter to allow mutex lock with only one SSTORE operation\n  uint256 private _guardCounter;\n\n  constructor() internal {\n    // The counter starts at one to prevent changing it from zero to a non-zero\n    // value, which is a more expensive operation.\n    _guardCounter = 1;\n  }\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * Calling a `nonReentrant` function from another `nonReentrant`\n   * function is not supported. It is possible to prevent this from happening\n   * by making the `nonReentrant` function external, and make it call a\n   * `private` function that does the actual work.\n   */\n  modifier nonReentrant() {\n    _guardCounter += 1;\n    uint256 localCounter = _guardCounter;\n    _;\n    require(localCounter == _guardCounter);\n  }\n}\n\ncontract Crowdsale is Ownable, ReentrancyGuard {\n\n  using SafeMath for uint256;  \n  \n  Airtoto public token;\n  //IERC20 public token;\n  \n  //start and end timestamps where investments are allowed (both inclusive)\n  uint256 public   startPreICOStage;\n  uint256 public   endPreICOStage;\n  uint256 public   startICOStage1;\n  uint256 public   endICOStage1;  \n  uint256 public   startICOStage2;\n  uint256 public   endICOStage2; \n  uint256 public   startICOStage3;\n  uint256 public   endICOStage3;  \n\n  //balances for softcap\n  mapping(address => uint256) public balances;  \n  //token distribution\n  uint256 public amountOfTokensSold; \n  uint256 public minimumPayment;  \n  //AirDrop\n  uint256 public valueAirDrop;\n  uint8 public airdropOn;\n  uint8 public referralSystemOn;\n  mapping (address => uint8) public payedAddress; \n  // rate ETH/USD\n  uint256 public rateETHUSD;    \n  // address where funds are collected\n  address public wallet;\n\n/**\n* event for token Procurement logging\n* @param contributor who Pledged for the tokens\n* @param beneficiary who got the tokens\n* @param value weis Contributed for Procurement\n* @param amount amount of tokens Procured\n*/\n  event TokenProcurement(address indexed contributor, address indexed beneficiary, uint256 value, uint256 amount, address indexed referrer, uint256 amountReferrer);\n\n  constructor() public {    \n    token = createTokenContract();\n\t// rate ETH - USD\n    rateETHUSD = 10000; //2 decimals\n    // start and end timestamps where investments are allowed\n    // start/end for stage of ICO\n    startPreICOStage  = 1544875200; //Sat, 15 Dec 2018 12:00:00 +0000\n    endPreICOStage    = 1546084800; //Sat, 29 Dec 2018 12:00:00 +0000\t \n    startICOStage1    = 1546084800; //Sat, 29 Dec 2018 12:00:00 +0000\n    endICOStage1      = 1547294400; //Sat, 12 Jan 2019 12:00:00 +0000\n    startICOStage2    = 1547294400; //Sat, 12 Jan 2019 12:00:00 +0000  \n    endICOStage2      = 1550059200; //Wed, 13 Feb 2019 12:00:00 +0000\n    startICOStage3    = 1550059200; //Wed, 13 Feb 2019 12:00:00 +0000 \n    endICOStage3      = 1552564800; //Thu, 14 Mar 2019 12:00:00 +0000\t\n\n    // minimum payment in ETH\t\n    minimumPayment = 980000000000000000; // 0.98 ether = ca. 150 USD\n\n    // valueAirDrop in tokens\n    valueAirDrop = 1 * 1 ether;\t\n    // address where funds are collected\n    wallet = 0xfc19e8fD7564A48b82a51d106e6D0E6098032811;\n  }\n  \n  function setMinimumPayment(uint256 _minimumPayment) public onlyOwner{\n    minimumPayment = _minimumPayment;\n  } \n  function setValueAirDrop(uint256 _valueAirDrop) public onlyOwner{\n    valueAirDrop = _valueAirDrop;\n  } \n\n  function setRateIco(uint256 _rateETHUSD) public onlyOwner  {\n    rateETHUSD = _rateETHUSD;\n  }  \n  // fallback function can be used to Procure tokens\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n  \n  function createTokenContract() internal returns (Airtoto) {\n    return new Airtoto();\n  }\n  \n  function getRateTokeUSD() public view returns (uint256) {\n    uint256 rate; //6 decimals\n    if (now >= startPreICOStage && now < endPreICOStage){\n      rate = 100000;    \n    }\t\n    if (now >= startICOStage1 && now < endICOStage1){\n      rate = 100000;    \n    } \n    if (now >= startICOStage2 && now < endICOStage2){\n      rate = 150000;    \n    }    \n    if (now >= startICOStage3 && now < endICOStage3){\n      rate = 200000;    \n    }    \t\n    return rate;\n  }\n  \n  function getRateIcoWithBonus() public view returns (uint256) {\n    uint256 bonus;\n    if (now >= startPreICOStage && now < endPreICOStage){\n      bonus = 20;    \n    }\n    if (now >= startICOStage1 && now < endICOStage1){\n      bonus = 15;    \n    }\n    if (now >= startICOStage2 && now < endICOStage2){\n      bonus = 10;    \n    }   \n    if (now >= startICOStage3 && now < endICOStage3){\n      bonus = 5;    \n    }       \n    return rateETHUSD + rateETHUSD.mul(bonus).div(100);\n  }  \n \n  function bytesToAddress(bytes source) internal pure returns(address) {\n    uint result;\n    uint mul = 1;\n    for(uint i = 20; i > 0; i--) {\n      result += uint8(source[i-1])*mul;\n      mul = mul*256;\n    }\n    return address(result);\n  }\n  function setAirdropOn(uint8 _flag) public onlyOwner{\n    airdropOn = _flag;\n  } \n  function setReferralSystemOn(uint8 _flag) public onlyOwner{\n    referralSystemOn = _flag;\n  }   \n  function buyTokens(address _beneficiary) public nonReentrant payable {\n    uint256 tokensAmount;\n    uint256 weiAmount = msg.value;\n    uint256 rate;\n\tuint256 referrerTokens;\n\tuint256 restTokensAmount;\n\tuint256 restWeiAmount;\n\taddress referrer; \n    address _this = this;\n    uint256 rateTokenUSD;  \n    require(now >= startPreICOStage);\n    require(now <= endICOStage3);\n\trequire(token.balanceOf(_this) > 0);\n    require(_beneficiary != address(0));\n\t\n\tif (weiAmount == 0 && airdropOn == 1){ \n\t  require(payedAddress[_beneficiary] == 0);\n      payedAddress[_beneficiary] = 1;\n\t  token.transferForICO(_beneficiary, valueAirDrop);\n\t}\n\telse{\t\n\t  require(weiAmount >= minimumPayment);\n      rate = getRateIcoWithBonus();\n\t  rateTokenUSD = getRateTokeUSD();\n      tokensAmount = weiAmount.mul(rate).mul(10000).div(rateTokenUSD);\n\t  // referral system\n\t  if(msg.data.length == 20 && referralSystemOn == 1) {\n        referrer = bytesToAddress(bytes(msg.data));\n        require(referrer != msg.sender);\n\t    // add tokensAmount to the referrer\n        referrerTokens = tokensAmount.mul(5).div(100);\n\t    // add tokensAmount to the referral\n\t    tokensAmount = tokensAmount + tokensAmount.mul(5).div(100);\n      }\n\t  // last sale of tokens\n      if (tokensAmount.add(referrerTokens) > token.balanceOf(_this)) {\n\t    restTokensAmount = tokensAmount.add(referrerTokens) - token.balanceOf(_this);\n\t    tokensAmount = token.balanceOf(_this);\n\t    referrerTokens = 0;\n\t    restWeiAmount = restTokensAmount.mul(rateTokenUSD).div(rate).div(10000);\n\t  }\n        amountOfTokensSold = amountOfTokensSold.add(tokensAmount);\n\t    balances[_beneficiary] = balances[_beneficiary].add(msg.value);\n\t  if (referrerTokens != 0){\n        token.transferForICO(referrer, referrerTokens);\t  \n\t  }\n\t  if (restWeiAmount != 0){\n\t    _beneficiary.transfer(restWeiAmount);\n\t\tweiAmount = weiAmount.sub(restWeiAmount);\n\t  }\n      token.transferForICO(_beneficiary, tokensAmount);\n\t  wallet.transfer(weiAmount);\n      emit TokenProcurement(msg.sender, _beneficiary, weiAmount, tokensAmount, referrer, referrerTokens);\n\t}\n  }\n  function manualSendTokens(address _to, uint256 _value) public onlyOwner{\n    address _this = this;\n    require(_value > 0);\n\trequire(_value <= token.balanceOf(_this));\n    require(_to != address(0));\n    amountOfTokensSold = amountOfTokensSold.add(_value);\n    token.transferForICO(_to, _value);\n\temit TokenProcurement(msg.sender, _to, 0, _value, address(0), 0);\n  } \n  function pause() public onlyOwner{\n    token.pause();\n  }\n  function unpause() public onlyOwner{\n    token.unpause();\n  }\n \n}",
  "bytecode": "60806040523480156200001157600080fd5b506040805190810160405280600781526020017f416972746f746f000000000000000000000000000000000000000000000000008152506040805190810160405280600381526020017f417474000000000000000000000000000000000000000000000000000000000081525060126200009a3362000380640100000000026401000000009004565b6000600460006101000a81548160ff0219169083151502179055508260059080519060200190620000cd9291906200075e565b508160069080519060200190620000e69291906200075e565b5080600760006101000a81548160ff021916908360ff16021790555050505033600760016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36200025c735e4c4043a5c96fefc61f6548fcf14abc5a92654b6200024760646200022a600a62000201620003ea640100000000026401000000009004565b60ff16600a0a6311e1a30002620004016401000000000262001850179091906401000000009004565b62000443640100000000026200188e179091906401000000009004565b6200046f640100000000026401000000009004565b620002f573defb454cb3771c98144cbfc1359eb7fe2bdd054b620002e06064620002c360146200029a620003ea640100000000026401000000009004565b60ff16600a0a6311e1a30002620004016401000000000262001850179091906401000000009004565b62000443640100000000026200188e179091906401000000009004565b6200046f640100000000026401000000009004565b6200037a336200036560646200034860466200031f620003ea640100000000026401000000009004565b60ff16600a0a6311e1a30002620004016401000000000262001850179091906401000000009004565b62000443640100000000026200188e179091906401000000009004565b6200046f640100000000026401000000009004565b6200080d565b620003a4816003620005e46401000000000262001ebf179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b6000600760009054906101000a900460ff16905090565b60008060008414156200041857600091506200043c565b82840290508284828115156200042a57fe5b041415156200043857600080fd5b8091505b5092915050565b6000806000831115156200045657600080fd5b82848115156200046257fe5b0490508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515620004ac57600080fd5b620004d181600254620006a76401000000000262001def179091906401000000009004565b60028190555062000538816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620006a76401000000000262001def179091906401000000009004565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156200062157600080fd5b6200063c8282620006c9640100000000026401000000009004565b1515156200064957600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000808284019050838110151515620006bf57600080fd5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200070757600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620007a157805160ff1916838001178555620007d2565b82800160010185558215620007d2579182015b82811115620007d1578251825591602001919060010190620007b4565b5b509050620007e19190620007e5565b5090565b6200080a91905b8082111562000806576000816000905550600101620007ec565b5090565b90565b611f9b806200081d6000396000f300608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461017a578063095ea7b31461020a57806318160ddd1461026f57806323b872dd1461029a5780632b172c051461031f578063313ce56714610376578063378dc3dc146103a757806339509351146103d25780633f4ba83a1461043757806342966c681461044e57806346fbf68e1461047b57806352ffcfbc146104d65780635c975abb1461052d5780636ef8d66d1461055c57806370a0823114610573578063715018a6146105ca57806382dc1ec4146105e15780638456cb59146106245780638da5cb5b1461063b5780638f32d59b1461069257806395d89b41146106c15780639bbc34a914610751578063a457c2d71461077c578063a4e1038f146107e1578063a75e28531461080c578063a9059cbb14610859578063d4f5c71b146108be578063dd62ed3e146108e9578063f2fde38b14610960575b600080fd5b34801561018657600080fd5b5061018f6109a3565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101cf5780820151818401526020810190506101b4565b50505050905090810190601f1680156101fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021657600080fd5b50610255600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a45565b604051808215151515815260200191505060405180910390f35b34801561027b57600080fd5b50610284610a75565b6040518082815260200191505060405180910390f35b3480156102a657600080fd5b50610305600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a7f565b604051808215151515815260200191505060405180910390f35b34801561032b57600080fd5b50610334610ab1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561038257600080fd5b5061038b610ac9565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103b357600080fd5b506103bc610ae0565b6040518082815260200191505060405180910390f35b3480156103de57600080fd5b5061041d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610af7565b604051808215151515815260200191505060405180910390f35b34801561044357600080fd5b5061044c610b27565b005b34801561045a57600080fd5b5061047960048036038101908080359060200190929190505050610bd6565b005b34801561048757600080fd5b506104bc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610be3565b604051808215151515815260200191505060405180910390f35b3480156104e257600080fd5b506104eb610c00565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561053957600080fd5b50610542610c18565b604051808215151515815260200191505060405180910390f35b34801561056857600080fd5b50610571610c2f565b005b34801561057f57600080fd5b506105b4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c3a565b6040518082815260200191505060405180910390f35b3480156105d657600080fd5b506105df610c82565b005b3480156105ed57600080fd5b50610622600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d56565b005b34801561063057600080fd5b50610639610d76565b005b34801561064757600080fd5b50610650610e26565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561069e57600080fd5b506106a7610e50565b604051808215151515815260200191505060405180910390f35b3480156106cd57600080fd5b506106d6610ea8565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107165780820151818401526020810190506106fb565b50505050905090810190601f1680156107435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561075d57600080fd5b50610766610f4a565b6040518082815260200191505060405180910390f35b34801561078857600080fd5b506107c7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f87565b604051808215151515815260200191505060405180910390f35b3480156107ed57600080fd5b506107f6610fb7565b6040518082815260200191505060405180910390f35b34801561081857600080fd5b50610857600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ff4565b005b34801561086557600080fd5b506108a4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611016565b604051808215151515815260200191505060405180910390f35b3480156108ca57600080fd5b506108d3611046565b6040518082815260200191505060405180910390f35b3480156108f557600080fd5b5061094a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611083565b6040518082815260200191505060405180910390f35b34801561096c57600080fd5b506109a1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061110a565b005b606060058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a3b5780601f10610a1057610100808354040283529160200191610a3b565b820191906000526020600020905b815481529060010190602001808311610a1e57829003601f168201915b5050505050905090565b6000600460009054906101000a900460ff16151515610a6357600080fd5b610a6d8383611129565b905092915050565b6000600254905090565b6000600460009054906101000a900460ff16151515610a9d57600080fd5b610aa8848484611256565b90509392505050565b735e4c4043a5c96fefc61f6548fcf14abc5a92654b81565b6000600760009054906101000a900460ff16905090565b610ae8610ac9565b60ff16600a0a6311e1a3000281565b6000600460009054906101000a900460ff16151515610b1557600080fd5b610b1f838361137d565b905092915050565b610b3033610be3565b1515610b3b57600080fd5b600460009054906101000a900460ff161515610b5657600080fd5b6000600460006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b610be033826115b4565b50565b6000610bf982600361170890919063ffffffff16565b9050919050565b73defb454cb3771c98144cbfc1359eb7fe2bdd054b81565b6000600460009054906101000a900460ff16905090565b610c383361179c565b565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610c8a610e50565b1515610c9557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600760016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610d5f33610be3565b1515610d6a57600080fd5b610d73816117f6565b50565b610d7f33610be3565b1515610d8a57600080fd5b600460009054906101000a900460ff16151515610da657600080fd5b6001600460006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b606060068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f405780601f10610f1557610100808354040283529160200191610f40565b820191906000526020600020905b815481529060010190602001808311610f2357829003601f168201915b5050505050905090565b610f846064610f766014610f5c610ac9565b60ff16600a0a6311e1a3000261185090919063ffffffff16565b61188e90919063ffffffff16565b81565b6000600460009054906101000a900460ff16151515610fa557600080fd5b610faf83836118b8565b905092915050565b610ff16064610fe3600a610fc9610ac9565b60ff16600a0a6311e1a3000261185090919063ffffffff16565b61188e90919063ffffffff16565b81565b610ffc610e50565b151561100757600080fd5b611012338383611aef565b5050565b6000600460009054906101000a900460ff1615151561103457600080fd5b61103e8383611cbb565b905092915050565b61108060646110726046611058610ac9565b60ff16600a0a6311e1a3000261185090919063ffffffff16565b61188e90919063ffffffff16565b81565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b611112610e50565b151561111d57600080fd5b61112681611cd2565b50565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561116657600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60006112e782600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dce90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611372848484611aef565b600190509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156113ba57600080fd5b61144982600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611def90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156115f057600080fd5b61160581600254611dce90919063ffffffff16565b60028190555061165c816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dce90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561174557600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6117b0816003611e1090919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b61180a816003611ebf90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b60008060008414156118655760009150611887565b828402905082848281151561187657fe5b0414151561188357600080fd5b8091505b5092915050565b6000806000831115156118a057600080fd5b82848115156118ab57fe5b0490508091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156118f557600080fd5b61198482600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dce90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611b2b57600080fd5b611b7c816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dce90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c0f816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611def90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000611cc8338484611aef565b6001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611d0e57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600760016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080838311151515611de057600080fd5b82840390508091505092915050565b6000808284019050838110151515611e0657600080fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611e4c57600080fd5b611e568282611708565b1515611e6157600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611efb57600080fd5b611f058282611708565b151515611f1157600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505600a165627a7a72305820c25e33f66a0dcc508ca84ba5939bf8b85e0581f24d017d4a57051e3d7df188490029"
}