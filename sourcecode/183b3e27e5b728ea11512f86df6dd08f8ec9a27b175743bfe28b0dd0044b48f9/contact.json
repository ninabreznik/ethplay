{
  "address": "0x41374200D72e8F6a1e3f7afcD19BF14E29dA9f78",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Port",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "20000",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-25\n*/\n\npragma solidity ^0.5.2;\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n// File: contracts/FoundationOwnable.sol\n\ncontract FoundationOwnable is Pausable {\n\n\taddress public foundation;\n\n\tevent FoundationTransferred(address oldAddr, address newAddr);\n\n\tconstructor() public {\n\t\tfoundation = msg.sender;\n\t}\n\n\tmodifier onlyFoundation() {\n\t\trequire(msg.sender == foundation, 'foundation required');\n\t\t_;\n\t}\n\n\tfunction transferFoundation(address f) public onlyFoundation {\n\t\trequire(f != address(0), 'empty address');\n\t\temit FoundationTransferred(foundation, f);\n\t\t_removePauser(foundation);\n\t\t_addPauser(f);\n\t\tfoundation = f;\n\t}\n}\n\n// File: contracts/TeleportOwnable.sol\n\ncontract TeleportOwnable {\n\n\taddress public teleport;\n\n\tevent TeleportTransferred(address oldAddr, address newAddr);\n\n\tconstructor() public {\n\t\tteleport = msg.sender;\n\t}\n\n\tmodifier onlyTeleport() {\n\t\trequire(msg.sender == teleport, 'caller not teleport');\n\t\t_;\n\t}\n\n\tfunction transferTeleport(address f) public onlyTeleport {\n\t\trequire(f != address(0));\n\t\temit TeleportTransferred(teleport, f);\n\t\tteleport = f;\n\t}\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n// File: contracts/PortedToken.sol\n\ncontract PortedToken is TeleportOwnable, ERC20, ERC20Detailed{\n\n\tconstructor(string memory name, string memory symbol, uint8 decimals)\n\t\tpublic ERC20Detailed(name, symbol, decimals) {}\n\n\tfunction mint(address to, uint256 value) public onlyTeleport {\n\t\tsuper._mint(to, value);\n\t}\n\n\tfunction burn(address from, uint256 value) public onlyTeleport {\n\t\tsuper._burn(from, value);\n\t}\n}\n\n// File: contracts/Port.sol\n\n// Port is a contract that sends and recieves tokens to implement token\n// teleportation between chains.\n//\n// Naming convention:\n// - token: \"main\" is the original token and \"cloned\" is the ported one on\n//          this/another chain.\n// - address: \"addr\" is the address on this chain and \"alt\" is the one on\n//            another chain.\ncontract Port is FoundationOwnable {\n\t// Library\n\tusing SafeMath for uint256;\n\n\t// States\n\n\t// Beneficiary address is the address that the remaining tokens will be\n\t// transferred to for selfdestruct.\n\taddress payable public beneficiary;\n\n\t// registeredMainTokens stores the tokens that are ported on this chain.\n\taddress[] public registeredMainTokens;\n\n\t// registeredClonedTokens stores the ported tokens created by the foundation.\n\taddress[] public registeredClonedTokens;\n\n\t// breakoutTokens is an address to address mapping that maps the currencies\n\t// to break out to the destination contract address on the destination chain.\n\t// Note that the zero address 0x0 represents the native token in this mapping.\n\t//\n\t// mapping structure\n\t//    main currency address                [this chain]\n\t// -> alt chain id of cloned token address\n\t// -> cloned token address                  [alt chain]\n\tmapping (address => mapping (uint256 => bytes)) public breakoutTokens;\n\n\t// breakinTokens is an address to address mapping that maps the ported token\n\t// contracts on this chain to the currencies on the source chain.\n\t//\n\t// mapping structure\n\t//    cloned token address                   [this chain]\n\t// -> alt chain id of main currency address\n\t// -> main currency address                   [alt chain]\n\tmapping (address => mapping (uint256 => bytes)) public breakinTokens;\n\n\t// proofs is an bytes to bool mapping that labels a proof is used, including\n\t// for withdrawal and mint.\n\tmapping (bytes => bool) proofs;\n\n\t// minPortValue records the minimum allowed porting value for each currency.\n\t//\n\t// mapping structure\n\t//    main/cloned currency address [this chain]\n\t// -> chain id of main/cloned currency address\n\t// -> minimum breakout value\n\tmapping (address => mapping (uint256 => uint256)) public minPortValue;\n\n\n\t// Events\n\n\t// A Deposit event is emitted when a user deposits native currency or tokens\n\t// with value into the Port contract to break out to the dest_addr as ported\n\t// token with cloned_token as address on the chain with chain_id\n\tevent Deposit(\n\t\tuint256 indexed chain_id,        // id of the destination chain.\n\t\tbytes indexed cloned_token_hash,\n\t\tbytes indexed alt_addr_hash,\n\t\taddress main_token,              // the source token address\n\t\tbytes cloned_token,              // alt token address on the destination chain.\n\t\tbytes alt_addr,                  // address of receiving alt token on the dest chain.\n\t\tuint256 value                    // value to deposit.\n\t);\n\n\t// A Withdraw event is emitted when a user sends withdrawal transaction\n\t// with proof to the Port on the destination chain to withdraw native\n\t// currency or token with value to the dest_addr.\n\tevent Withdraw(\n\t\tuint256 indexed chain_id,   // id of the destination chain.\n\t\taddress indexed main_token, // the source token address on this chain.\n\t\taddress indexed addr,       // address to withdraw to on this chain.\n\t\tbytes proof,                // proof on the destination chain.\n\t\tbytes cloned_token,         // the dest token address on alt chain.\n\t\tuint256 value               // value to withdraw.\n\t);\n\n\t// A RegisterBreakout event is emitted when the foundation registers a pair\n\t// of currencies to break out to a destination chain.\n\t// Note that\n\t//   - the zero address 0x0 of main_token represents the native currency\n\t//   - cloned_token must be a PortedToken\n\tevent RegisterBreakout(\n\t\tuint256 indexed chain_id,        // id of the destination chain.\n\t\taddress indexed main_token,      // source token address on this chain.\n\t\tbytes indexed cloned_token_hash,\n\t\tbytes cloned_token,              // new destination address on the destination chain.\n\t\tbytes old_cloned_token,          // old destination address on the destination chain.\n\t\tuint256 minValue                 // minimum value to deposit and withdraw.\n\t);\n\n\t// A RegisterBreakin event is emitted when the foundation registers a pair\n\t// of currencies to break in from a source chain.\n\t// Note that\n\t//   - the zero address 0x0 of main_token represents the native currency\n\t//   - cloned_token must be a PortedToken\n\tevent RegisterBreakin(\n\t\tuint256 indexed chain_id,      // id of the source chain.\n\t\taddress indexed cloned_token,  // destination token address on this chain.\n\t\tbytes indexed main_token_hash,\n\t\tbytes main_token,              // new source address on the source chain.\n\t\tbytes old_main_token,          // old source address on the source chain.\n\t\tuint256 minValue               // minimum value to mint and burn.\n\t);\n\n\t// A Mint event is emitted when the foundation mints token with value to the\n\t// dest_addr as a user sends the transaction with proof on the source chain.\n\tevent Mint(\n\t\tuint256 indexed chain_id,     // id of the source chain.\n\t\taddress indexed cloned_token, // destination token address on this chain.\n\t\taddress indexed addr,         // destination address to mint to.\n\t\tbytes proof,                  // proof of the deposit on the source chain.\n\t\tbytes main_token,             // the source token on alt chain.\n\t\tuint256 value                 // value to mint.\n\t);\n\n\t// A Burn event is emitted when a user burns broken-in tokens to withdraw to\n\t// dest_addr on the source chain.\n\tevent Burn(\n\t\tuint256 indexed chain_id,      // id of the source chain to burn to.\n\t\tbytes indexed main_token_hash,\n\t\tbytes indexed alt_addr_hash,\n\t\taddress cloned_token,          // destination token on this chain.\n\t\tbytes main_token,              // source token on the source chain.\n\t\tbytes alt_addr,                // destination address on the source chain.\n\t\tuint256 value                  // value to burn\n\t);\n\n\tconstructor(address payable foundation_beneficiary) public {\n\t\tbeneficiary = foundation_beneficiary;\n\t}\n\n\tfunction destruct() public onlyFoundation {\n\t\t// transfer all tokens to beneficiary.\n\t\tfor (uint i=0; i<registeredMainTokens.length; i++) {\n\t\t\tIERC20 token = IERC20(registeredMainTokens[i]);\n\t\t\tuint256 balance = token.balanceOf(address(this));\n\t\t\ttoken.transfer(beneficiary, balance);\n\t\t}\n\n\t\t// transfer the ported tokens' control to the beneficiary\n\t\tfor (uint i=0; i<registeredClonedTokens.length; i++) {\n\t\t\tPortedToken token = PortedToken(registeredClonedTokens[i]);\n\t\t\ttoken.transferTeleport(beneficiary);\n\t\t}\n\n\t\tselfdestruct(beneficiary);\n\t}\n\n\tmodifier breakoutRegistered(uint256 chain_id, address token) {\n\t\trequire(breakoutTokens[token][chain_id].length != 0, 'unregistered token');\n\t\t_;\n\t}\n\n\tmodifier breakinRegistered(uint256 chain_id, address token) {\n\t\trequire(breakinTokens[token][chain_id].length != 0, 'unregistered token');\n\t\t_;\n\t}\n\n\tmodifier validAmount(uint256 chain_id, address token, uint256 value) {\n\t\trequire(value >= minPortValue[token][chain_id], \"value less than min amount\");\n\t\t_;\n\t}\n\n\tmodifier validProof(bytes memory proof) {\n\t\trequire(!proofs[proof], 'duplicate proof');\n\t\t_;\n\t}\n\n\tfunction isProofUsed(bytes memory proof) view public returns (bool) {\n\t\treturn proofs[proof];\n\t}\n\n\t// Caller needs to send at least min value native token when called (payable).\n\t// A Deposit event will be emitted for the foundation server to mint the\n\t// corresponding wrapped tokens to the dest_addr on the destination chain.\n\t//\n\t// chain_id: The id of destination chain.\n\t// alt_addr: The address to mint to on the destination chain.\n\t// value: The value to mint.\n\tfunction depositNative(\n\t\tuint256 chain_id,\n\t\tbytes memory alt_addr\n\t)\n\t\tpayable\n\t\tpublic\n\t\twhenNotPaused\n\t\tbreakoutRegistered(chain_id, address(0))\n\t\tvalidAmount(chain_id, address(0), msg.value)\n\t{\n\t\tbytes memory cloned_token = breakoutTokens[address(0)][chain_id];\n\t\temit Deposit(chain_id,\n\t\t\tcloned_token, alt_addr, // indexed bytes value hashed automatically\n\t\t\taddress(0), cloned_token, alt_addr, msg.value);\n\t}\n\n\tfunction () payable external {\n\t\trevert('not allowed to send value');\n\t}\n\n\t// Caller needs to provide a proof of the transfer (proof).\n\t// A Deposit event will be emitted for the foundation server to mint the\n\t// corresponding wrapped tokens to the dest_addr on the destination chain.\n\t//\n\t// main_token: The token to deposit with.\n\t// chain_id: The id of destination chain.\n\t// alt_addr: The address to mint to on the destination chain.\n\t// value: The value to mint.\n\tfunction depositToken(\n\t\taddress main_token,\n\t\tuint256 chain_id,\n\t\tbytes memory alt_addr,\n\t\tuint256 value\n\t)\n\t\tpublic\n\t\twhenNotPaused\n\t\tbreakoutRegistered(chain_id, main_token)\n\t\tvalidAmount(chain_id, main_token, value)\n\t{\n\t\tbytes memory cloned_token = breakoutTokens[main_token][chain_id];\n\t\temit Deposit(chain_id,\n\t\t\tcloned_token, alt_addr, // indexed bytes value hashed automatically\n\t\t\tmain_token, cloned_token, alt_addr, value);\n\n\t\tIERC20 token = IERC20(main_token);\n\t\trequire(token.transferFrom(msg.sender, address(this), value));\n\t}\n\n\t// Caller needs to provide a proof of the transfer (proof).\n\t//\n\t// chain_id: The alt chain where the burn proof is.\n\t// proof: The proof of the corresponding transaction on the source chain.\n\t// addr: The address to withdraw to on this chain.\n\t// value: The value to withdraw.\n\tfunction withdrawNative(\n\t\tuint256 chain_id,\n\t\tbytes memory proof,\n\t\taddress payable addr,\n\t\tuint256 value\n\t)\n\t\tpublic\n\t\twhenNotPaused\n\t\tonlyFoundation\n\t\tbreakoutRegistered(chain_id, address(0))\n\t\tvalidProof(proof)\n\t\tvalidAmount(chain_id, address(0), value)\n\t{\n\t\tbytes memory cloned_token = breakoutTokens[address(0)][chain_id];\n\t\temit Withdraw(chain_id, address(0), addr, proof, cloned_token, value);\n\n\t\tproofs[proof] = true;\n\n\t\taddr.transfer(value);\n\t}\n\n\t// Caller needs to provide a proof of the transfer (proof).\n\t//\n\t// chain_id: The alt chain where the burn proof is.\n\t// proof: The proof of the corresponding transaction on the destination chain.\n\t// main_token: The address of the token to mint on this chain.\n\t// addr: The address to withdraw to on this chain.\n\t// value: The value to withdraw.\n\tfunction withdrawToken(\n\t\tuint256 chain_id,\n\t\tbytes memory proof,\n\t\taddress main_token,\n\t\taddress addr,\n\t\tuint256 value\n\t)\n\t\tpublic\n\t\twhenNotPaused\n\t\tonlyFoundation\n\t\tbreakoutRegistered(chain_id, main_token)\n\t\tvalidAmount(chain_id, main_token, value)\n\t\tvalidProof(proof)\n\t{\n\t\tbytes memory cloned_token = breakoutTokens[main_token][chain_id];\n\t\temit Withdraw(chain_id, main_token, addr, proof, cloned_token, value);\n\n\t\tproofs[proof] = true;\n\n\t\tIERC20 token = IERC20(main_token);\n\t\trequire(token.transfer(addr, value));\n\t}\n\n\n\t// Caller needs to provide the source and the destination of the mapped\n\t// token contract. The mapping will be updated if the register function is\n\t// called with a registered source address. The token is revoked if the dest\n\t// address is set to zero-length bytes.\n\t//\n\t// main_token: The address of the token on this chain.\n\t// chain_id: The id of the chain the cloned token is in.\n\t// cloned_token: The address of the token on the alt chain (dest chain).\n\t// old_cloned_token: The original address of the cloned token.\n\t// minValue: The minimum amount of each deposit/burn can transfer with.\n\tfunction registerBreakout(\n\t\taddress main_token,\n\t\tuint256 chain_id,\n\t\tbytes memory old_cloned_token,\n\t\tbytes memory cloned_token,\n\t\tuint256 minValue\n\t)\n\t\tpublic\n\t\twhenNotPaused\n\t\tonlyFoundation\n\t{\n\t\trequire(keccak256(breakoutTokens[main_token][chain_id]) == keccak256(old_cloned_token), 'wrong old dest');\n\n\t\temit RegisterBreakout(chain_id, main_token,\n\t\t\tcloned_token, // indexed bytes value is hashed automatically\n\t\t\tcloned_token, old_cloned_token, minValue);\n\n\t\tbreakoutTokens[main_token][chain_id] = cloned_token;\n\t\tminPortValue[main_token][chain_id] = minValue;\n\n\t\tbool firstTimeRegistration = old_cloned_token.length == 0;\n\t\tif (main_token != address(0) && firstTimeRegistration) {\n\t\t\tregisteredMainTokens.push(main_token);\n\t\t}\n\t}\n\n\t// Caller needs to provide the source and the destination of the mapped\n\t// token contract. The mapping will be updated if the register function is\n\t// called with a registered source address. The token is revoked if the dest\n\t// address is set to zero-length bytes.\n\t//\n\t// cloned_token: The address of the token on this chain.\n\t// chain_id: The id of the chain the main token is in.\n\t// main_token: The address of the token on the alt chain (source chain).\n\t// old_main_token: The original address of the main token.\n\t// minValue: The minimum amount of each deposit/burn can transfer with.\n\tfunction registerBreakin(\n\t\taddress cloned_token,\n\t\tuint256 chain_id,\n\t\tbytes memory old_main_token,\n\t\tbytes memory main_token,\n\t\tuint256 minValue\n\t)\n\t\tpublic\n\t\twhenNotPaused\n\t\tonlyFoundation\n\t{\n\t\trequire(keccak256(breakinTokens[cloned_token][chain_id]) == keccak256(old_main_token), 'wrong old src');\n\n\t\temit RegisterBreakin(chain_id, cloned_token,\n\t\t\tmain_token, // indexed bytes value is hashed automatically\n\t\t\tmain_token, old_main_token, minValue);\n\n\t\tbreakinTokens[cloned_token][chain_id] = main_token;\n\t\tminPortValue[cloned_token][chain_id] = minValue;\n\n\t\tbool firstTimeRegistration = old_main_token.length == 0;\n\t\tif (firstTimeRegistration) {\n\t\t\tregisteredClonedTokens.push(cloned_token);\n\t\t}\n\t}\n\n\t// Caller needs to provide the proof of the Deposit (proof), which\n\t// can be verified on the source chain with corresponding transaction.\n\t//\n\t// chain_id: The id of the chain the main token is in.\n\t// proof: The proof of the corresponding transaction on alt chain.\n\t// cloned_token: The address of the token to mint on this chain.\n\t// addr: The address to mint to on this chain.\n\t// value: The value to mint.\n\tfunction mint(\n\t\tuint256 chain_id,\n\t\tbytes memory proof,\n\t\taddress cloned_token,\n\t\taddress addr,\n\t\tuint256 value\n\t)\n\t\tpublic\n\t\twhenNotPaused\n\t\tonlyFoundation\n\t\tbreakinRegistered(chain_id, cloned_token)\n\t\tvalidAmount(chain_id, cloned_token, value)\n\t\tvalidProof(proof)\n\t{\n\t\tbytes memory main_token = breakinTokens[cloned_token][chain_id];\n\t\temit Mint(chain_id, cloned_token, addr, proof, main_token, value);\n\n\t\tproofs[proof] = true;\n\n\t\tPortedToken token = PortedToken(cloned_token);\n\t\ttoken.mint(addr, value);\n\t}\n\n\t// Caller needs to provide the proof of the Burn (proof), which contains\n\t// proof matching the destination and value.\n\t//\n\t// chain_id: The id of the chain the main token is in.\n\t// cloned_token: The address of the ported token on this chain.\n\t// alt_addr: The address to withdraw to on altchain.\n\t// value: The value to withdraw.\n\tfunction burn(\n\t\tuint256 chain_id,\n\t\taddress cloned_token,\n\t\tbytes memory alt_addr,\n\t\tuint256 value\n\t)\n\t\tpublic\n\t\twhenNotPaused\n\t\tbreakinRegistered(chain_id, cloned_token)\n\t\tvalidAmount(chain_id, cloned_token, value)\n\t{\n\t\tbytes memory main_token = breakinTokens[cloned_token][chain_id];\n\t\temit Burn(chain_id,\n\t\t\tmain_token, alt_addr, // indexed value are hashed automatically\n\t\t\tcloned_token, main_token, alt_addr, value);\n\n\t\tPortedToken token = PortedToken(cloned_token);\n\t\ttoken.burn(msg.sender, value);\n\t}\n}",
  "bytecode": "60806040523480156200001157600080fd5b50604051602080620041c3833981018060405260208110156200003357600080fd5b5051620000493364010000000062000085810204565b60018054600160a860020a031916610100330217905560028054600160a060020a031916600160a060020a03929092169190911790556200016a565b620000a060008264010000000062003eff620000d782021704565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600160a060020a0381161515620000ed57600080fd5b62000102828264010000000062000132810204565b156200010d57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a03821615156200014a57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b614049806200017a6000396000f3fe6080604052600436106101a8576000357c0100000000000000000000000000000000000000000000000000000000900480636ef8d66d116100f3578063ab48c3491161009c578063c01a236011610076578063c01a236014610b52578063c8acc18f14610c29578063ed2183b614610cfe576101a8565b8063ab48c34914610982578063adc7602c14610a35578063b76c104e14610a7b576101a8565b806382dc1ec4116100cd57806382dc1ec41461084e5780638456cb591461088e57806395ccedcd146108a3576101a8565b80636ef8d66d1461069f57806372003131146106b4578063753d644e14610793576101a8565b806341fbb050116101555780635707cdcc1161012f5780635707cdcc146104d45780635c975abb1461052c578063635fa85714610541576101a8565b806341fbb0501461044157806346fbf68e14610456578063471553e5146104aa576101a8565b8063320432d411610186578063320432d4146103d757806338af3eed146104175780633f4ba83a1461042c576101a8565b80631841de461461020f57806321b25c1d1461036f5780632b68b9c6146103c2575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f6e6f7420616c6c6f77656420746f2073656e642076616c756500000000000000604482015290519081900360640190fd5b34801561021b57600080fd5b5061036d600480360360a081101561023257600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169160208101359181019060608101604082013564010000000081111561026f57600080fd5b82018360208201111561028157600080fd5b803590602001918460018302840111640100000000831117156102a357600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156102f657600080fd5b82018360208201111561030857600080fd5b8035906020019184600183028401116401000000008311171561032a57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250610dab915050565b005b34801561037b57600080fd5b506103996004803603602081101561039257600080fd5b50356111e5565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156103ce57600080fd5b5061036d61121a565b3480156103e357600080fd5b5061036d600480360360208110156103fa57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166114ff565b34801561042357600080fd5b506103996116e4565b34801561043857600080fd5b5061036d611700565b34801561044d57600080fd5b50610399611782565b34801561046257600080fd5b506104966004803603602081101561047957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166117a3565b604080519115158252519081900360200190f35b3480156104b657600080fd5b50610399600480360360208110156104cd57600080fd5b50356117bb565b3480156104e057600080fd5b5061051a600480360360408110156104f757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356117c9565b60408051918252519081900360200190f35b34801561053857600080fd5b506104966117e6565b34801561054d57600080fd5b5061036d600480360360a081101561056457600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516916020810135918101906060810160408201356401000000008111156105a157600080fd5b8201836020820111156105b357600080fd5b803590602001918460018302840111640100000000831117156105d557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561062857600080fd5b82018360208201111561063a57600080fd5b8035906020019184600183028401116401000000008311171561065c57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050913592506117f0915050565b3480156106ab57600080fd5b5061036d611c36565b3480156106c057600080fd5b5061036d600480360360a08110156106d757600080fd5b813591908101906040810160208201356401000000008111156106f957600080fd5b82018360208201111561070b57600080fd5b8035906020019184600183028401116401000000008311171561072d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505073ffffffffffffffffffffffffffffffffffffffff83358116945060208401351692604001359150611c419050565b34801561079f57600080fd5b506107d9600480360360408110156107b657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135612241565b6040805160208082528351818301528351919283929083019185019080838360005b838110156108135781810151838201526020016107fb565b50505050905090810190601f1680156108405780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561085a57600080fd5b5061036d6004803603602081101561087157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166122e5565b34801561089a57600080fd5b5061036d612305565b3480156108af57600080fd5b5061036d600480360360a08110156108c657600080fd5b813591908101906040810160208201356401000000008111156108e857600080fd5b8201836020820111156108fa57600080fd5b8035906020019184600183028401116401000000008311171561091c57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505073ffffffffffffffffffffffffffffffffffffffff833581169450602084013516926040013591506123889050565b34801561098e57600080fd5b50610496600480360360208110156109a557600080fd5b8101906020810181356401000000008111156109c057600080fd5b8201836020820111156109d257600080fd5b803590602001918460018302840111640100000000831117156109f457600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061296d945050505050565b348015610a4157600080fd5b506107d960048036036040811015610a5857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356129d8565b348015610a8757600080fd5b5061036d60048036036080811015610a9e57600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691602081013591810190606081016040820135640100000000811115610adb57600080fd5b820183602082011115610aed57600080fd5b80359060200191846001830284011164010000000083111715610b0f57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250612a49915050565b348015610b5e57600080fd5b5061036d60048036036080811015610b7557600080fd5b81359173ffffffffffffffffffffffffffffffffffffffff60208201351691810190606081016040820135640100000000811115610bb257600080fd5b820183602082011115610bc457600080fd5b80359060200191846001830284011164010000000083111715610be657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250612f23915050565b348015610c3557600080fd5b5061036d60048036036080811015610c4c57600080fd5b81359190810190604081016020820135640100000000811115610c6e57600080fd5b820183602082011115610c8057600080fd5b80359060200191846001830284011164010000000083111715610ca257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505073ffffffffffffffffffffffffffffffffffffffff83351693505050602001356133d7565b61036d60048036036040811015610d1457600080fd5b81359190810190604081016020820135640100000000811115610d3657600080fd5b820183602082011115610d4857600080fd5b80359060200191846001830284011164010000000083111715610d6a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613965945050505050565b60015460ff1615610dbb57600080fd5b600154610100900473ffffffffffffffffffffffffffffffffffffffff163314610e4657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f666f756e646174696f6e20726571756972656400000000000000000000000000604482015290519081900360640190fd5b8280519060200120600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000206040518082805460018160011615610100020316600290048015610ef95780601f10610ed7576101008083540402835291820191610ef9565b820191906000526020600020905b815481529060010190602001808311610ee5575b50509150506040518091039020141515610f7457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f77726f6e67206f6c642073726300000000000000000000000000000000000000604482015290519081900360640190fd5b816040518082805190602001908083835b60208310610fa45780518252601f199092019160209182019101610f85565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208573ffffffffffffffffffffffffffffffffffffffff16857fbee4580f62d5b09703278043af637edd9a3fca767a60999f2cbd673d88f81ac7858786604051808060200180602001848152602001838103835286818151815260200191508051906020019080838360005b8381101561105457818101518382015260200161103c565b50505050905090810190601f1680156110815780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b838110156110b457818101518382015260200161109c565b50505050905090810190601f1680156110e15780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a473ffffffffffffffffffffffffffffffffffffffff851660009081526006602090815260408083208784528252909120835161112f92850190613f85565b5073ffffffffffffffffffffffffffffffffffffffff85166000908152600860209081526040808320878452909152902081905582511580156111dd57600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff88161790555b505050505050565b60048054829081106111f357fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b600154610100900473ffffffffffffffffffffffffffffffffffffffff1633146112a557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f666f756e646174696f6e20726571756972656400000000000000000000000000604482015290519081900360640190fd5b60005b6003548110156114215760006003828154811015156112c357fe5b6000918252602080832090910154604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216945084926370a0823192602480840193829003018186803b15801561133c57600080fd5b505afa158015611350573d6000803e3d6000fd5b505050506040513d602081101561136657600080fd5b5051600254604080517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201526024810184905290519293509084169163a9059cbb916044808201926020929091908290030181600087803b1580156113e757600080fd5b505af11580156113fb573d6000803e3d6000fd5b505050506040513d602081101561141157600080fd5b5050600190920191506112a89050565b5060005b6004548110156114e357600060048281548110151561144057fe5b6000918252602082200154600254604080517f330aa40d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201529051919092169350839263330aa40d926024808201939182900301818387803b1580156114be57600080fd5b505af11580156114d2573d6000803e3d6000fd5b505060019093019250611425915050565b5060025473ffffffffffffffffffffffffffffffffffffffff16ff5b600154610100900473ffffffffffffffffffffffffffffffffffffffff16331461158a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f666f756e646174696f6e20726571756972656400000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116151561160e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f656d707479206164647265737300000000000000000000000000000000000000604482015290519081900360640190fd5b6001546040805173ffffffffffffffffffffffffffffffffffffffff61010090930483168152918316602083015280517f42b2106c6e11d8f27f56e2a54d3992cc18b75bf961c83f0d5f03d9072ffef0dd9281900390910190a160015461168f90610100900473ffffffffffffffffffffffffffffffffffffffff16613d80565b61169881613dd5565b6001805473ffffffffffffffffffffffffffffffffffffffff909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b611709336117a3565b151561171457600080fd5b60015460ff16151561172557600080fd5b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b600154610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60006117b5818363ffffffff613e2a16565b92915050565b60038054829081106111f357fe5b600860209081526000928352604080842090915290825290205481565b60015460ff165b90565b60015460ff161561180057600080fd5b600154610100900473ffffffffffffffffffffffffffffffffffffffff16331461188b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f666f756e646174696f6e20726571756972656400000000000000000000000000604482015290519081900360640190fd5b8280519060200120600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020604051808280546001816001161561010002031660029004801561193e5780601f1061191c57610100808354040283529182019161193e565b820191906000526020600020905b81548152906001019060200180831161192a575b505091505060405180910390201415156119b957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f77726f6e67206f6c642064657374000000000000000000000000000000000000604482015290519081900360640190fd5b816040518082805190602001908083835b602083106119e95780518252601f1990920191602091820191016119ca565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208573ffffffffffffffffffffffffffffffffffffffff16857fee0dd04c76596fab5a07f4d74d17c478420c6d76ef1cd49728e213fb842b2501858786604051808060200180602001848152602001838103835286818151815260200191508051906020019080838360005b83811015611a99578181015183820152602001611a81565b50505050905090810190601f168015611ac65780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015611af9578181015183820152602001611ae1565b50505050905090810190601f168015611b265780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a473ffffffffffffffffffffffffffffffffffffffff8516600090815260056020908152604080832087845282529091208351611b7492850190613f85565b5073ffffffffffffffffffffffffffffffffffffffff8516600081815260086020908152604080832088845290915290208290558351159015801590611bb75750805b156111dd57600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805473ffffffffffffffffffffffffffffffffffffffff88167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116179055505050505050565b611c3f33613d80565b565b60015460ff1615611c5157600080fd5b600154610100900473ffffffffffffffffffffffffffffffffffffffff163314611cdc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f666f756e646174696f6e20726571756972656400000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260056020908152604080832088845290915290205485908490600260001961010060018416150201909116041515611d9157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f756e7265676973746572656420746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff851660009081526008602090815260408083208a8452909152902054879086908590811015611e3657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f76616c7565206c657373207468616e206d696e20616d6f756e74000000000000604482015290519081900360640190fd5b886007816040518082805190602001908083835b60208310611e695780518252601f199092019160209182019101611e4a565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff16159150611f08905057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6475706c69636174652070726f6f660000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff891660009081526005602090815260408083208e845282529182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015611fbc5780601f10611f9157610100808354040283529160200191611fbc565b820191906000526020600020905b815481529060010190602001808311611f9f57829003601f168201915b505050505090508873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168d7f8af2d96919652332f9adba36c0a82ffed089dee62ac0bbabf68f5e1639cc2afe8e858d604051808060200180602001848152602001838103835286818151815260200191508051906020019080838360005b8381101561205d578181015183820152602001612045565b50505050905090810190601f16801561208a5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b838110156120bd5781810151838201526020016120a5565b50505050905090810190601f1680156120ea5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a4600160078c6040518082805190602001908083835b6020831061212e5780518252601f19909201916020918201910161210f565b51815160209384036101000a600019018019909216911617905292019485525060408051948590038201852080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016961515969096179095557fa9059cbb00000000000000000000000000000000000000000000000000000000845273ffffffffffffffffffffffffffffffffffffffff8e81166004860152602485018e905294518f9586169463a9059cbb945060448082019450908290030181600087803b1580156121fb57600080fd5b505af115801561220f573d6000803e3d6000fd5b505050506040513d602081101561222557600080fd5b5051151561223257600080fd5b50505050505050505050505050565b60066020908152600092835260408084208252918352918190208054825160026001831615610100026000190190921691909104601f8101859004850282018501909352828152929091908301828280156122dd5780601f106122b2576101008083540402835291602001916122dd565b820191906000526020600020905b8154815290600101906020018083116122c057829003601f168201915b505050505081565b6122ee336117a3565b15156122f957600080fd5b61230281613dd5565b50565b61230e336117a3565b151561231957600080fd5b60015460ff161561232957600080fd5b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016811790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b60015460ff161561239857600080fd5b600154610100900473ffffffffffffffffffffffffffffffffffffffff16331461242357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f666f756e646174696f6e20726571756972656400000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff83166000908152600660209081526040808320888452909152902054859084906002600019610100600184161502019091160415156124d857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f756e7265676973746572656420746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff851660009081526008602090815260408083208a845290915290205487908690859081101561257d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f76616c7565206c657373207468616e206d696e20616d6f756e74000000000000604482015290519081900360640190fd5b886007816040518082805190602001908083835b602083106125b05780518252601f199092019160209182019101612591565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff1615915061264f905057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6475706c69636174652070726f6f660000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff891660009081526006602090815260408083208e845282529182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452606093928301828280156127035780601f106126d857610100808354040283529160200191612703565b820191906000526020600020905b8154815290600101906020018083116126e657829003601f168201915b505050505090508873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168d7fcc810d23c59d6987d4acd569b8cffcd464f920ac03abd8d31569ffc41220b2148e858d604051808060200180602001848152602001838103835286818151815260200191508051906020019080838360005b838110156127a457818101518382015260200161278c565b50505050905090810190601f1680156127d15780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b838110156128045781810151838201526020016127ec565b50505050905090810190601f1680156128315780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a4600160078c6040518082805190602001908083835b602083106128755780518252601f199092019160209182019101612856565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003909101842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169515159590951790945550507f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b81166004830152602482018b905291518c928316916340c10f1991604480830192600092919082900301818387803b15801561294657600080fd5b505af115801561295a573d6000803e3d6000fd5b5050505050505050505050505050505050565b60006007826040518082805190602001908083835b602083106129a15780518252601f199092019160209182019101612982565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff16949350505050565b60056020908152600092835260408084208252918352918190208054825160026001831615610100026000190190921691909104601f8101859004850282018501909352828152929091908301828280156122dd5780601f106122b2576101008083540402835291602001916122dd565b60015460ff1615612a5957600080fd5b73ffffffffffffffffffffffffffffffffffffffff8416600090815260056020908152604080832086845290915290205483908590600260001961010060018416150201909116041515612b0e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f756e7265676973746572656420746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff86166000908152600860209081526040808320888452909152902054859087908590811015612bb357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f76616c7565206c657373207468616e206d696e20616d6f756e74000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff891660009081526005602090815260408083208b845282529182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015612c675780601f10612c3c57610100808354040283529160200191612c67565b820191906000526020600020905b815481529060010190602001808311612c4a57829003601f168201915b50505050509050876040518082805190602001908083835b60208310612c9e5780518252601f199092019160209182019101612c7f565b51815160209384036101000a6000190180199092169116179052604051919093018190038120865190955086945090928392508401908083835b60208310612cf75780518252601f199092019160209182019101612cd8565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208a7fec313504f07cadd01ac718bc117fa39df43e1d32850d5fd8e79c92112584fa6f8d858d8d604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b83811015612dc3578181015183820152602001612dab565b50505050905090810190601f168015612df05780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015612e23578181015183820152602001612e0b565b50505050905090810190601f168015612e505780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a4604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810189905290518b9173ffffffffffffffffffffffffffffffffffffffff8316916323b872dd916064808201926020929091908290030181600087803b158015612edf57600080fd5b505af1158015612ef3573d6000803e3d6000fd5b505050506040513d6020811015612f0957600080fd5b50511515612f1657600080fd5b5050505050505050505050565b60015460ff1615612f3357600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260066020908152604080832087845290915290205484908490600260001961010060018416150201909116041515612fe857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f756e7265676973746572656420746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8516600090815260086020908152604080832089845290915290205486908690859081101561308d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f76616c7565206c657373207468616e206d696e20616d6f756e74000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff881660009081526006602090815260408083208c845282529182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452606093928301828280156131415780601f1061311657610100808354040283529160200191613141565b820191906000526020600020905b81548152906001019060200180831161312457829003601f168201915b50505050509050876040518082805190602001908083835b602083106131785780518252601f199092019160209182019101613159565b51815160209384036101000a6000190180199092169116179052604051919093018190038120865190955086945090928392508401908083835b602083106131d15780518252601f1990920191602091820191016131b2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208b7f4f458ec9fb617f85b04055824fc30aeb5e72dc5b95068645eb498678159781b88c858d8d604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b8381101561329d578181015183820152602001613285565b50505050905090810190601f1680156132ca5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b838110156132fd5781810151838201526020016132e5565b50505050905090810190601f16801561332a5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a4604080517f9dc29fac0000000000000000000000000000000000000000000000000000000081523360048201526024810189905290518a9173ffffffffffffffffffffffffffffffffffffffff831691639dc29fac9160448082019260009290919082900301818387803b1580156133b257600080fd5b505af11580156133c6573d6000803e3d6000fd5b505050505050505050505050505050565b60015460ff16156133e757600080fd5b600154610100900473ffffffffffffffffffffffffffffffffffffffff16331461347257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f666f756e646174696f6e20726571756972656400000000000000000000000000604482015290519081900360640190fd5b60008481527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604081205485919060026000196101006001841615020190911604151561352357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f756e7265676973746572656420746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b846007816040518082805190602001908083835b602083106135565780518252601f199092019160209182019101613537565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff161591506135f5905057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6475706c69636174652070726f6f660000000000000000000000000000000000604482015290519081900360640190fd5b60008781527f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c76020526040812054889190869081101561369657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f76616c7565206c657373207468616e206d696e20616d6f756e74000000000000604482015290519081900360640190fd5b60008a81527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084526060939283018282801561374a5780601f1061371f5761010080835404028352916020019161374a565b820191906000526020600020905b81548152906001019060200180831161372d57829003601f168201915b505050505090508873ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168c7f8af2d96919652332f9adba36c0a82ffed089dee62ac0bbabf68f5e1639cc2afe8d858d604051808060200180602001848152602001838103835286818151815260200191508051906020019080838360005b838110156137ec5781810151838201526020016137d4565b50505050905090810190601f1680156138195780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b8381101561384c578181015183820152602001613834565b50505050905090810190601f1680156138795780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a4600160078b6040518082805190602001908083835b602083106138bd5780518252601f19909201916020918201910161389e565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016941515949094179093555073ffffffffffffffffffffffffffffffffffffffff8b1691506108fc8a1502908a906000818181858888f19350505050158015613957573d6000803e3d6000fd5b505050505050505050505050565b60015460ff161561397557600080fd5b60008281527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc6020526040812054839190600260001961010060018416150201909116041515613a2657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f756e7265676973746572656420746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b60008481527f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c760205260408120548591903490811015613ac757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f76616c7565206c657373207468616e206d696e20616d6f756e74000000000000604482015290519081900360640190fd5b60008781527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015613b7b5780601f10613b5057610100808354040283529160200191613b7b565b820191906000526020600020905b815481529060010190602001808311613b5e57829003601f168201915b50505050509050866040518082805190602001908083835b60208310613bb25780518252601f199092019160209182019101613b93565b51815160209384036101000a6000190180199092169116179052604051919093018190038120865190955086945090928392508401908083835b60208310613c0b5780518252601f199092019160209182019101613bec565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020897fec313504f07cadd01ac718bc117fa39df43e1d32850d5fd8e79c92112584fa6f6000858c34604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b83811015613cd8578181015183820152602001613cc0565b50505050905090810190601f168015613d055780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015613d38578181015183820152602001613d20565b50505050905090810190601f168015613d655780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a45050505050505050565b613d9160008263ffffffff613e7b16565b60405173ffffffffffffffffffffffffffffffffffffffff8216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b613de660008263ffffffff613eff16565b60405173ffffffffffffffffffffffffffffffffffffffff8216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600073ffffffffffffffffffffffffffffffffffffffff82161515613e4e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff166000908152602091909152604090205460ff1690565b73ffffffffffffffffffffffffffffffffffffffff81161515613e9d57600080fd5b613ea78282613e2a565b1515613eb257600080fd5b73ffffffffffffffffffffffffffffffffffffffff1660009081526020919091526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b73ffffffffffffffffffffffffffffffffffffffff81161515613f2157600080fd5b613f2b8282613e2a565b15613f3557600080fd5b73ffffffffffffffffffffffffffffffffffffffff1660009081526020919091526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613fc657805160ff1916838001178555613ff3565b82800160010185558215613ff3579182015b82811115613ff3578251825591602001919060010190613fd8565b50613fff929150614003565b5090565b6117ed91905b80821115613fff576000815560010161400956fea165627a7a72305820c21a1941d81363302ac34619103a8f5b2b1d3e000f546c6212a4445a8f32fab30029000000000000000000000000da3517c5d6c0c7ae9a416310e7f8a16635d00d85",
  "constructorArguments": "000000000000000000000000da3517c5d6c0c7ae9a416310e7f8a16635d00d85"
}