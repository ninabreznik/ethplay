{
  "address": "0xe0ae35fe7df8b86ef08557b535b89bb6cb036c23",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Smartolution",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-14\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * Smartolution.org!\n *\n * Hey, \n * \n * You know the rules of ponzi already,\n * but let me briefly explain how this one works ;)\n * \n * This is your personal 45 days magic piggy bank!\n * \n * 1. Send fixed amount of ether every 24 hours (5900 blocks).\n * 2. With every new transaction collect exponentially greater return!\n * 3. Keep sending the same amount of ether! (can't trick the code, bro)\n * 4. Don't send too often (early transactions will be rejected, uh oh)\n * 5. Don't be late, you won't loose your %, but who wants to be the last?\n *  \n * Play by the rules and save up to 170%!\n *\n * Gas limit: 150 000 (only the first time, average ~ 50 000)\n * Gas price: https://ethgasstation.info/\n *\n */\ncontract Smartolution {\n\n    struct User {\n        uint value;\n        uint index;\n        uint atBlock;\n    }\n\n    mapping (address => User) public users;\n    \n    uint public total;\n    uint public advertisement;\n    uint public team;\n   \n    address public teamAddress;\n    address public advertisementAddress;\n\n    constructor(address _advertisementAddress, address _teamAddress) public {\n        advertisementAddress = _advertisementAddress;\n        teamAddress = _teamAddress;\n    }\n\n    function () public payable {\n        require(msg.value == 0.00001111 ether || (msg.value >= 0.01 ether && msg.value <= 5 ether), \"Min: 0.01 ether, Max: 5 ether, Exit: 0.00001111 eth\");\n\n        User storage user = users[msg.sender]; // this is you\n\n        if (msg.value != 0.00001111 ether) {\n            total += msg.value;                 // total \n            advertisement += msg.value / 30;    // 3.3% advertisement\n            team += msg.value / 200;            // 0.5% team\n            \n            if (user.value == 0) { \n                user.value = msg.value;\n                user.atBlock = block.number;\n                user.index = 1;     \n            } else {\n                require(msg.value == user.value, \"Amount should be the same\");\n                require(block.number - user.atBlock >= 5900, \"Too soon, try again later\");\n\n                uint idx = ++user.index;\n                \n                if (idx == 45) {\n                    user.value = 0; // game over for you, my friend!\n                } else {\n                    // if you are late for more than 4 hours (984 blocks)\n                    // then next deposit/payment will be delayed accordingly\n                    if (block.number - user.atBlock - 5900 < 984) { \n                        user.atBlock += 5900;\n                    } else {\n                        user.atBlock = block.number - 984;\n                    }\n                }\n\n                // sprinkle that with some magic numbers and voila\n                msg.sender.transfer(msg.value * idx * idx * (24400 - 500 * msg.value / 1 ether) / 10000000);\n            }\n        } else {\n            require(user.index <= 10, \"It's too late to request a refund at this point\");\n\n            msg.sender.transfer(user.index * user.value * 70 / 100);\n            user.value = 0;\n        }\n        \n    }\n\n    /**\n     * This one is easy, claim reserved ether for the team or advertisement\n     */ \n    function claim(uint amount) public {\n        if (msg.sender == advertisementAddress) {\n            require(amount > 0 && amount <= advertisement, \"Can't claim more than was reserved\");\n\n            advertisement -= amount;\n            msg.sender.transfer(amount);\n        } else \n        if (msg.sender == teamAddress) {\n            require(amount > 0 && amount <= team, \"Can't claim more than was reserved\");\n\n            team -= amount;\n            msg.sender.transfer(amount);\n        }\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405160408061079e83398101604052805160209091015160058054600160a060020a03938416600160a060020a03199182161790915560048054939092169216919091179055610737806100676000396000f3006080604052600436106100825763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631c75f08581146103c35780632ddbd13a14610401578063379607f5146104285780633f7db0531461044257806385f2aef214610457578063a715d9bf1461046c578063a87430ba14610481575b60008034650a1abf9a7c0014806100b35750662386f26fc1000034101580156100b35750674563918244f400003411155b151561012f576040805160e560020a62461bcd02815260206004820152603360248201527f4d696e3a20302e30312065746865722c204d61783a20352065746865722c204560448201527f7869743a20302e30303030313131312065746800000000000000000000000000606482015290519081900360840190fd5b3360009081526020819052604090209150650a1abf9a7c0034146102f657600180543490810190915560028054601e83040190556003805460c890920490910190558154151561018d573482554360028301556001808301556102f1565b815434146101e5576040805160e560020a62461bcd02815260206004820152601960248201527f416d6f756e742073686f756c64206265207468652073616d6500000000000000604482015290519081900360640190fd5b61170c8260020154430310151515610247576040805160e560020a62461bcd02815260206004820152601960248201527f546f6f20736f6f6e2c2074727920616761696e206c6174657200000000000000604482015290519081900360640190fd5b506001808201805490910190819055602d8114156102685760008255610299565b6103d861170c8360020154430303101561028d5760028201805461170c019055610299565b6103d719430160028301555b336108fc62989680670de0b6b3a76400006101f4340204615f50038485340202028115156102c357fe5b049081150290604051600060405180830381858888f193505050501580156102ef573d6000803e3d6000fd5b505b6103bf565b6001820154600a1015610379576040805160e560020a62461bcd02815260206004820152602f60248201527f4974277320746f6f206c61746520746f2072657175657374206120726566756e60448201527f64206174207468697320706f696e740000000000000000000000000000000000606482015290519081900360840190fd5b8154600183015433916108fc9160649102604602049081150290604051600060405180830381858888f193505050501580156103b9573d6000803e3d6000fd5b50600082555b5050005b3480156103cf57600080fd5b506103d86104cd565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561040d57600080fd5b506104166104e9565b60408051918252519081900360200190f35b34801561043457600080fd5b506104406004356104ef565b005b34801561044e57600080fd5b506103d86106c2565b34801561046357600080fd5b506104166106de565b34801561047857600080fd5b506104166106e4565b34801561048d57600080fd5b506104af73ffffffffffffffffffffffffffffffffffffffff600435166106ea565b60408051938452602084019290925282820152519081900360600190f35b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b60055473ffffffffffffffffffffffffffffffffffffffff163314156105d95760008111801561052157506002548111155b151561059d576040805160e560020a62461bcd02815260206004820152602260248201527f43616e277420636c61696d206d6f7265207468616e207761732072657365727660448201527f6564000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600280548290039055604051339082156108fc029083906000818181858888f193505050501580156105d3573d6000803e3d6000fd5b506106bf565b60045473ffffffffffffffffffffffffffffffffffffffff163314156106bf5760008111801561060b57506003548111155b1515610687576040805160e560020a62461bcd02815260206004820152602260248201527f43616e277420636c61696d206d6f7265207468616e207761732072657365727660448201527f6564000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600380548290039055604051339082156108fc029083906000818181858888f193505050501580156106bd573d6000803e3d6000fd5b505b50565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b60025481565b600060208190529081526040902080546001820154600290920154909190835600a165627a7a723058201056144f4ec43d8b76ff4198883952fc58c43e74c70f9337e0b77d5fe935254d0029000000000000000000000000e1f3294e25bb72a2fb53addb82aa1a033797e6e3000000000000000000000000fef4c8d00521696871857c12a098f86c6bc5340e",
  "constructorArguments": "000000000000000000000000e1f3294e25bb72a2fb53addb82aa1a033797e6e3000000000000000000000000fef4c8d00521696871857c12a098f86c6bc5340e"
}