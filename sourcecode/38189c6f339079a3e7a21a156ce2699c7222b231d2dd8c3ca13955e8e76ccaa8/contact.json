{
  "address": "0xa5e5be69c923c701ae6ac8f1f5936af3ae610c68",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Collectables",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-10\n*/\n\npragma solidity ^0.4.24;\n\nlibrary Address {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n    function isContract(address addr) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solium-disable-next-line security/no-inline-assembly\n        assembly { size := extcodesize(addr) }\n        return size > 0;\n    }\n\n}\n\ncontract Ownable {\n\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function setOwner(address _owner) public onlyOwner {\n        owner = _owner;\n    }\n\n    function getOwner() public view returns (address) {\n        return owner;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n}\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\nlibrary Strings {\n    \n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n  function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n      bytes memory _ba = bytes(_a);\n      bytes memory _bb = bytes(_b);\n      bytes memory _bc = bytes(_c);\n      bytes memory _bd = bytes(_d);\n      bytes memory _be = bytes(_e);\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n      bytes memory babcde = bytes(abcde);\n      uint k = 0;\n      for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n      for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n      for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n      for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n      for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n      return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string _a, string _b) internal pure returns (string) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    function uint2str(uint i) internal pure returns (string) {\n        if (i == 0) return \"0\";\n        uint j = i;\n        uint len;\n        while (j != 0){\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (i != 0){\n            bstr[k--] = byte(48 + i % 10);\n            i /= 10;\n        }\n        return string(bstr);\n    }\n}\n\ninterface IERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId) external view returns (bool);\n  \n}\n\ncontract IERC721Receiver {\n    /**\n    * @dev Magic value to be returned upon successful reception of an NFT\n    *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\n    *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n    */\n    bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n\n    /**\n    * @notice Handle the receipt of an NFT\n    * @dev The ERC721 smart contract calls this function on the recipient\n    * after a `safetransfer`. This function MAY throw to revert and reject the\n    * transfer. Return of other than the magic value MUST result in the \n    * transaction being reverted.\n    * Note: the contract address is always the message sender.\n    * @param _operator The address which called `safeTransferFrom` function\n    * @param _from The address which previously owned the token\n    * @param _tokenId The NFT identifier which is being transfered\n    * @param _data Additional data with no specified format\n    * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    */\n    function onERC721Received(\n        address _operator,\n        address _from,\n        uint256 _tokenId,\n        bytes memory _data\n    )\n        public\n        returns(bytes4);\n}\n\ncontract IERC721Holder is IERC721Receiver {\n\n    function onERC721Received(address, address, uint256, bytes) public returns(bytes4) {\n        return ERC721_RECEIVED;\n    }\n\n}\n\ncontract IERC721 is IERC165 {\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n\n}\n\ncontract IERC721Enumerable is IERC721 {\n    function totalSupply() public view returns (uint256);\n    function tokenOfOwnerByIndex(\n        address _owner,\n        uint256 _index\n    )\n        public\n        view\n        returns (uint256 _tokenId);\n\n    function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\ncontract IERC721Metadata is IERC721 {\n    function name() external view returns (string memory _name);\n    function symbol() external view returns (string memory _symbol);\n    function tokenURI(uint256 _tokenId) public view returns (string memory);\n}\n\ncontract SupportsInterfaceWithLookup is IERC165 {\n    bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n    /**\n    * 0x01ffc9a7 ===\n    *   bytes4(keccak256('supportsInterface(bytes4)'))\n    */\n\n    /**\n    * @dev a mapping of interface id to whether or not it's supported\n    */\n    mapping(bytes4 => bool) internal supportedInterfaces;\n\n    /**\n    * @dev A contract implementing SupportsInterfaceWithLookup\n    * implement ERC165 itself\n    */\n    constructor() public {\n        _registerInterface(InterfaceId_ERC165);\n    }\n\n    /**\n    * @dev implement supportsInterface(bytes4) using a lookup table\n    */\n    function supportsInterface(bytes4 _interfaceId) external view returns (bool) {\n        return supportedInterfaces[_interfaceId];\n    }\n\n    /**\n    * @dev private method for registering an interface\n    */\n    function _registerInterface(bytes4 _interfaceId) internal {\n        require(_interfaceId != 0xffffffff);\n        supportedInterfaces[_interfaceId] = true;\n    }\n}\n\ncontract Delegate {\n\n    function mint(address _sender, address _to) public returns (bool);\n\n    function approve(address _sender, address _to, uint256 _tokenId) public returns (bool);\n\n    function setApprovalForAll(address _sender, address _operator, bool _approved) public returns (bool);\n\n    function transferFrom(address _sender, address _from, address _to, uint256 _tokenId) public returns (bool);\n    \n    function safeTransferFrom(address _sender, address _from, address _to, uint256 _tokenId) public returns (bool);\n\n    function safeTransferFrom(address _sender, address _from, address _to, uint256 _tokenId, bytes memory _data) public returns (bool);\n\n}\n\n/**\n * @title ERC165\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract ERC165 is IERC165 {\n\n    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n    /**\n    * 0x01ffc9a7 ===\n    *   bytes4(keccak256('supportsInterface(bytes4)'))\n    */\n\n    /**\n    * @dev a mapping of interface id to whether or not it's supported\n    */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n    * @dev A contract implementing SupportsInterfaceWithLookup\n    * implement ERC165 itself\n    */\n    constructor()\n      internal\n    {\n        _registerInterface(_InterfaceId_ERC165);\n    }\n\n    /**\n    * @dev implement supportsInterface(bytes4) using a lookup table\n    */\n    function supportsInterface(bytes4 interfaceId)\n      external\n      view\n      returns (bool)\n    {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n    * @dev internal method for registering an interface\n    */\n    function _registerInterface(bytes4 interfaceId)\n      internal\n    {\n        require(interfaceId != 0xffffffff);\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\ncontract ERC721 is ERC165, IERC721 {\n\n    using SafeMath for uint256;\n    using Address for address;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from token ID to owner\n    mapping (uint256 => address) private _tokenOwner;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to number of owned token\n    mapping (address => uint256) private _ownedTokensCount;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n    /*\n    * 0x80ac58cd ===\n    *   bytes4(keccak256('balanceOf(address)')) ^\n    *   bytes4(keccak256('ownerOf(uint256)')) ^\n    *   bytes4(keccak256('approve(address,uint256)')) ^\n    *   bytes4(keccak256('getApproved(uint256)')) ^\n    *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n    *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n    *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n    *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n    *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n    */\n\n    constructor()\n        public\n    {\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_InterfaceId_ERC721);\n    }\n\n    /**\n    * @dev Gets the balance of the specified address\n    * @param owner address to query the balance of\n    * @return uint256 representing the amount owned by the passed address\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        require(owner != address(0));\n        return _ownedTokensCount[owner];\n    }\n\n    /**\n    * @dev Gets the owner of the specified token ID\n    * @param tokenId uint256 ID of the token to query the owner of\n    * @return owner address currently marked as the owner of the given token ID\n    */\n    function ownerOf(uint256 tokenId) public view returns (address) {\n        address owner = _tokenOwner[tokenId];\n        require(owner != address(0));\n        return owner;\n    }\n\n    /**\n    * @dev Approves another address to transfer the given token ID\n    * The zero address indicates there is no approved address.\n    * There can only be one approved address per token at a given time.\n    * Can only be called by the token owner or an approved operator.\n    * @param to address to be approved for the given token ID\n    * @param tokenId uint256 ID of the token to be approved\n    */\n    function approve(address to, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n        require(to != owner);\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n    * @dev Gets the approved address for a token ID, or zero if no address set\n    * Reverts if the token ID does not exist.\n    * @param tokenId uint256 ID of the token to query the approval of\n    * @return address currently approved for the given token ID\n    */\n    function getApproved(uint256 tokenId) public view returns (address) {\n        require(_exists(tokenId));\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n    * @dev Sets or unsets the approval of a given operator\n    * An operator is allowed to transfer all tokens of the sender on their behalf\n    * @param to operator address to set the approval\n    * @param approved representing the status of the approval to be set\n    */\n    function setApprovalForAll(address to, bool approved) public {\n        require(to != msg.sender);\n        _operatorApprovals[msg.sender][to] = approved;\n        emit ApprovalForAll(msg.sender, to, approved);\n    }\n\n    /**\n    * @dev Tells whether an operator is approved by a given owner\n    * @param owner owner address which you want to query the approval of\n    * @param operator operator address which you want to query the approval of\n    * @return bool whether the given operator is approved by the given owner\n    */\n    function isApprovedForAll(\n        address owner,\n        address operator\n    )\n        public\n        view\n        returns (bool)\n    {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n    * @dev Transfers the ownership of a given token ID to another address\n    * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n    * Requires the msg sender to be the owner, approved, or operator\n    * @param from current owner of the token\n    * @param to address to receive the ownership of the given token ID\n    * @param tokenId uint256 ID of the token to be transferred\n    */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    )\n        public\n    {\n        require(_isApprovedOrOwner(msg.sender, tokenId));\n        require(to != address(0));\n\n        _clearApproval(from, tokenId);\n        _removeTokenFrom(from, tokenId);\n        _addTokenTo(to, tokenId);\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n    * @dev Safely transfers the ownership of a given token ID to another address\n    * If the target address is a contract, it must implement `onERC721Received`,\n    * which is called upon a safe transfer, and return the magic value\n    * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n    * the transfer is reverted.\n    *\n    * Requires the msg sender to be the owner, approved, or operator\n    * @param from current owner of the token\n    * @param to address to receive the ownership of the given token ID\n    * @param tokenId uint256 ID of the token to be transferred\n    */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    )\n        public\n    {\n        // solium-disable-next-line arg-overflow\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n    * @dev Safely transfers the ownership of a given token ID to another address\n    * If the target address is a contract, it must implement `onERC721Received`,\n    * which is called upon a safe transfer, and return the magic value\n    * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n    * the transfer is reverted.\n    * Requires the msg sender to be the owner, approved, or operator\n    * @param from current owner of the token\n    * @param to address to receive the ownership of the given token ID\n    * @param tokenId uint256 ID of the token to be transferred\n    * @param _data bytes data to send along with a safe transfer check\n    */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    )\n        public\n    {\n        transferFrom(from, to, tokenId);\n        // solium-disable-next-line arg-overflow\n        require(_checkAndCallSafeTransfer(from, to, tokenId, _data));\n    }\n\n    /**\n    * @dev Returns whether the specified token exists\n    * @param tokenId uint256 ID of the token to query the existence of\n    * @return whether the token exists\n    */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        address owner = _tokenOwner[tokenId];\n        return owner != address(0);\n    }\n\n    /**\n    * @dev Returns whether the given spender can transfer a given token ID\n    * @param spender address of the spender to query\n    * @param tokenId uint256 ID of the token to be transferred\n    * @return bool whether the msg.sender is approved for the given token ID,\n    *  is an operator of the owner, or is the owner of the token\n    */\n    function _isApprovedOrOwner(\n        address spender,\n        uint256 tokenId\n    )\n        internal\n        view\n        returns (bool)\n    {\n        address owner = ownerOf(tokenId);\n        // Disable solium check because of\n        // https://github.com/duaraghav8/Solium/issues/175\n        // solium-disable-next-line operator-whitespace\n        return (\n        spender == owner ||\n        getApproved(tokenId) == spender ||\n        isApprovedForAll(owner, spender)\n        );\n    }\n\n    /**\n    * @dev Internal function to mint a new token\n    * Reverts if the given token ID already exists\n    * @param to The address that will own the minted token\n    * @param tokenId uint256 ID of the token to be minted by the msg.sender\n    */\n    function _mint(address to, uint256 tokenId) internal {\n        require(to != address(0));\n        _addTokenTo(to, tokenId);\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n    * @dev Internal function to burn a specific token\n    * Reverts if the token does not exist\n    * @param tokenId uint256 ID of the token being burned by the msg.sender\n    */\n    function _burn(address owner, uint256 tokenId) internal {\n        _clearApproval(owner, tokenId);\n        _removeTokenFrom(owner, tokenId);\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n    * @dev Internal function to clear current approval of a given token ID\n    * Reverts if the given address is not indeed the owner of the token\n    * @param owner owner of the token\n    * @param tokenId uint256 ID of the token to be transferred\n    */\n    function _clearApproval(address owner, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == owner);\n        if (_tokenApprovals[tokenId] != address(0)) {\n            _tokenApprovals[tokenId] = address(0);\n        }\n    }\n\n    /**\n    * @dev Internal function to add a token ID to the list of a given address\n    * @param to address representing the new owner of the given token ID\n    * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n    */\n    function _addTokenTo(address to, uint256 tokenId) internal {\n        require(_tokenOwner[tokenId] == address(0));\n        _tokenOwner[tokenId] = to;\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n    }\n\n    /**\n    * @dev Internal function to remove a token ID from the list of a given address\n    * @param from address representing the previous owner of the given token ID\n    * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n    */\n    function _removeTokenFrom(address from, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == from);\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n        _tokenOwner[tokenId] = address(0);\n    }\n\n    /**\n    * @dev Internal function to invoke `onERC721Received` on a target address\n    * The call is not executed if the target address is not a contract\n    * @param from address representing the previous owner of the given token ID\n    * @param to target address that will receive the tokens\n    * @param tokenId uint256 ID of the token to be transferred\n    * @param _data bytes optional data to send along with the call\n    * @return whether the call correctly returned the expected magic value\n    */\n    function _checkAndCallSafeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    )\n        internal\n        returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n        bytes4 retval = IERC721Receiver(to).onERC721Received(\n        msg.sender, from, tokenId, _data);\n        return (retval == _ERC721_RECEIVED);\n    }\n}\n\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => uint256[]) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n    /**\n    * 0x780e9d63 ===\n    *   bytes4(keccak256('totalSupply()')) ^\n    *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n    *   bytes4(keccak256('tokenByIndex(uint256)'))\n    */\n\n    /**\n    * @dev Constructor function\n    */\n    constructor() public {\n        // register the supported interface to conform to ERC721 via ERC165\n        _registerInterface(_InterfaceId_ERC721Enumerable);\n    }\n\n    /**\n    * @dev Gets the token ID at a given index of the tokens list of the requested owner\n    * @param owner address owning the tokens list to be accessed\n    * @param index uint256 representing the index to be accessed of the requested tokens list\n    * @return uint256 token ID at the given index of the tokens list owned by the requested address\n    */\n    function tokenOfOwnerByIndex(\n        address owner,\n        uint256 index\n    )\n        public\n        view\n        returns (uint256)\n    {\n        require(index < balanceOf(owner));\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n    * @dev Gets the total amount of tokens stored by the contract\n    * @return uint256 representing the total amount of tokens\n    */\n    function totalSupply() public view returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n    * @dev Gets the token ID at a given index of all the tokens in this contract\n    * Reverts if the index is greater or equal to the total number of tokens\n    * @param index uint256 representing the index to be accessed of the tokens list\n    * @return uint256 token ID at the given index of the tokens list\n    */\n    function tokenByIndex(uint256 index) public view returns (uint256) {\n        require(index < totalSupply());\n        return _allTokens[index];\n    }\n\n    /**\n    * @dev Internal function to add a token ID to the list of a given address\n    * @param to address representing the new owner of the given token ID\n    * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n    */\n    function _addTokenTo(address to, uint256 tokenId) internal {\n        super._addTokenTo(to, tokenId);\n        uint256 length = _ownedTokens[to].length;\n        _ownedTokens[to].push(tokenId);\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n    * @dev Internal function to remove a token ID from the list of a given address\n    * @param from address representing the previous owner of the given token ID\n    * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n    */\n    function _removeTokenFrom(address from, uint256 tokenId) internal {\n        super._removeTokenFrom(from, tokenId);\n\n        // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n        // then delete the last slot.\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n        uint256 lastToken = _ownedTokens[from][lastTokenIndex];\n\n        _ownedTokens[from][tokenIndex] = lastToken;\n        // This also deletes the contents at the last position of the array\n        _ownedTokens[from].length--;\n\n        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n        // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\n        // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n        _ownedTokensIndex[tokenId] = 0;\n        _ownedTokensIndex[lastToken] = tokenIndex;\n    }\n\n    /**\n    * @dev Internal function to mint a new token\n    * Reverts if the given token ID already exists\n    * @param to address the beneficiary that will own the minted token\n    * @param tokenId uint256 ID of the token to be minted by the msg.sender\n    */\n    function _mint(address to, uint256 tokenId) internal {\n        super._mint(to, tokenId);\n\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n    * @dev Internal function to burn a specific token\n    * Reverts if the token does not exist\n    * @param owner owner of the token to burn\n    * @param tokenId uint256 ID of the token being burned by the msg.sender\n    */\n    function _burn(address owner, uint256 tokenId) internal {\n        super._burn(owner, tokenId);\n\n        // Reorg all tokens array\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\n        uint256 lastToken = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastToken;\n        _allTokens[lastTokenIndex] = 0;\n\n        _allTokens.length--;\n        _allTokensIndex[tokenId] = 0;\n        _allTokensIndex[lastToken] = tokenIndex;\n    }\n}\n\n\ncontract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\n    // Token name\n    string internal _name;\n\n    // Token symbol\n    string internal _symbol;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n    /**\n    * 0x5b5e139f ===\n    *   bytes4(keccak256('name()')) ^\n    *   bytes4(keccak256('symbol()')) ^\n    *   bytes4(keccak256('tokenURI(uint256)'))\n    */\n\n    /**\n    * @dev Constructor function\n    */\n    constructor(string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(InterfaceId_ERC721Metadata);\n    }\n\n    /**\n    * @dev Gets the token name\n    * @return string representing the token name\n    */\n    function name() external view returns (string memory) {\n        return _name;\n    }\n\n    /**\n    * @dev Gets the token symbol\n    * @return string representing the token symbol\n    */\n    function symbol() external view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n    * @dev Returns an URI for a given token ID\n    * Throws if the token ID does not exist. May return an empty string.\n    * @param tokenId uint256 ID of the token to query\n    */\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\n        require(_exists(tokenId));\n        return _tokenURIs[tokenId];\n    }\n\n    /**\n    * @dev Internal function to set the token URI for a given token\n    * Reverts if the token ID does not exist\n    * @param tokenId uint256 ID of the token to set its URI\n    * @param uri string URI to assign\n    */\n    function _setTokenURI(uint256 tokenId, string memory uri) internal {\n        require(_exists(tokenId));\n        _tokenURIs[tokenId] = uri;\n    }\n\n    /**\n    * @dev Internal function to burn a specific token\n    * Reverts if the token does not exist\n    * @param owner owner of the token to burn\n    * @param tokenId uint256 ID of the token being burned by the msg.sender\n    */\n    function _burn(address owner, uint256 tokenId) internal {\n        super._burn(owner, tokenId);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\n  \n    constructor(string memory name, string memory symbol) ERC721Metadata(name, symbol) public {\n\n    }\n\n}\n\ncontract Collectables is ERC721Full(\"GU Collectable\", \"TRINKET\"), Ownable {\n\n    using Strings for string;\n\n    // delegate item specific storage/logic to other contracts\n    // one main contract manages transfers etc\n    mapping(uint32 => address) public delegates;\n\n    // use uint32s instead of addresses to reduce the storage size needed\n    // individual token properties should be stored in the delegate contract\n    uint32[] public collectables;\n    uint public delegateCount;\n\n    event DelegateAdded(address indexed delegate, uint32 indexed delegateID);\n\n    function addDelegate(address delegate) public onlyOwner {\n        uint32 delegateID = uint32(delegateCount++);\n        // should never happen, but check anyway\n        require(delegates[delegateID] == address(0), \"delegate is already set for collectable type\");\n        delegates[delegateID] = delegate;\n        emit DelegateAdded(delegate, delegateID);\n    }\n\n    function mint(uint32 delegateID, address to) public returns (uint) {\n        Delegate delegate = getDelegate(delegateID);\n        require(delegate.mint(msg.sender, to), \"delegate could not mint token\");\n        uint id = collectables.push(delegateID) - 1;\n        super._mint(to, id);\n        return id;\n    }\n\n    function transferFrom(address from, address to, uint256 tokenId) public {\n        Delegate delegate = getTokenDelegate(tokenId);\n        require(delegate.transferFrom(msg.sender, from, to, tokenId), \"could not transfer token\");\n        super.transferFrom(from, to, tokenId);\n    }\n\n    function approve(address to, uint256 tokenId) public {\n        Delegate delegate = getTokenDelegate(tokenId);\n        require(delegate.approve(msg.sender, to, tokenId), \"could not approve token\");\n        super.approve(to, tokenId);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) public {\n        Delegate delegate = getTokenDelegate(tokenId);\n        require(delegate.safeTransferFrom(msg.sender, from, to, tokenId, data), \"could not safe transfer token\");\n        super.safeTransferFrom(from, to, tokenId, data);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        Delegate delegate = getTokenDelegate(tokenId);\n        require(delegate.safeTransferFrom(msg.sender, from, to, tokenId), \"could not safe transfer token\");\n        super.safeTransferFrom(from, to, tokenId);\n    }\n\n    function getTokenDelegate(uint id) public view returns (Delegate) {\n        address d = delegates[collectables[id]];\n        require(d != address(0), \"invalid delegate\");\n        return Delegate(d);\n    }\n\n    function getDelegate(uint32 id) public view returns (Delegate) {\n        address d = delegates[id];\n        require(d != address(0), \"invalid delegate\");\n        return Delegate(d);\n    }\n\n    string public constant tokenMetadataBaseURI = \"https://api.godsunchained.com/collectable/\";\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        require(_exists(_tokenId), \"token doesn't exist\");\n        return Strings.strConcat(\n            tokenMetadataBaseURI,\n            Strings.uint2str(_tokenId)\n        );\n    }\n\n    \n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delegateCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegateID\",\"type\":\"uint32\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTokenDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"delegates\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collectables\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenMetadataBaseURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"addDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint32\"}],\"name\":\"getDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"delegateID\",\"type\":\"uint32\"}],\"name\":\"DelegateAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]",
  "bytecode": ""
}