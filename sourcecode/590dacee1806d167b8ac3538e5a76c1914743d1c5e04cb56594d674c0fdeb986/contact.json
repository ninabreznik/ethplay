{
  "address": "0xb9250c9581e4594b7c6914897823ad18d6b78e96",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "LORDLESS: Bounty",
  "contractName": "BountyNFT",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-28\n*/\n\npragma solidity ^0.4.24;\n\n// File: node_modules/openzeppelin-solidity/contracts/access/Roles.sol\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n\ncontract MinterRole {\n  using Roles for Roles.Role;\n\n  event MinterAdded(address indexed account);\n  event MinterRemoved(address indexed account);\n\n  Roles.Role private minters;\n\n  constructor() internal {\n    _addMinter(msg.sender);\n  }\n\n  modifier onlyMinter() {\n    require(isMinter(msg.sender));\n    _;\n  }\n\n  function isMinter(address account) public view returns (bool) {\n    return minters.has(account);\n  }\n\n  function addMinter(address account) public onlyMinter {\n    _addMinter(account);\n  }\n\n  function renounceMinter() public {\n    _removeMinter(msg.sender);\n  }\n\n  function _addMinter(address account) internal {\n    minters.add(account);\n    emit MinterAdded(account);\n  }\n\n  function _removeMinter(address account) internal {\n    minters.remove(account);\n    emit MinterRemoved(account);\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol\n\n/**\n * @title IERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface IERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol\n\n/**\n * @title ERC165\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract ERC165 is IERC165 {\n\n  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) private _supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    internal\n  {\n    _registerInterface(_InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return _supportedInterfaces[interfaceId];\n  }\n\n  /**\n   * @dev internal method for registering an interface\n   */\n  function _registerInterface(bytes4 interfaceId)\n    internal\n  {\n    require(interfaceId != 0xffffffff);\n    _supportedInterfaces[interfaceId] = true;\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/utils/Address.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param account address of the account to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address account) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(account) }\n    return size > 0;\n  }\n\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721 is IERC165 {\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 indexed tokenId\n  );\n  event Approval(\n    address indexed owner,\n    address indexed approved,\n    uint256 indexed tokenId\n  );\n  event ApprovalForAll(\n    address indexed owner,\n    address indexed operator,\n    bool approved\n  );\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n  function approve(address to, uint256 tokenId) public;\n  function getApproved(uint256 tokenId)\n    public view returns (address operator);\n\n  function setApprovalForAll(address operator, bool _approved) public;\n  function isApprovedForAll(address owner, address operator)\n    public view returns (bool);\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n    public;\n\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes data\n  )\n    public;\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract IERC721Receiver {\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safeTransfer`. This function MUST return the function selector,\n   * otherwise the caller will revert the transaction. The selector to be\n   * returned can be obtained as `this.onERC721Received.selector`. This\n   * function MAY throw to revert and reject the transfer.\n   * Note: the ERC721 contract address is always the message sender.\n   * @param operator The address which called `safeTransferFrom` function\n   * @param from The address which previously owned the token\n   * @param tokenId The NFT identifier which is being transferred\n   * @param data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address operator,\n    address from,\n    uint256 tokenId,\n    bytes data\n  )\n    public\n    returns(bytes4);\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC165, IERC721 {\n\n  using SafeMath for uint256;\n  using Address for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) private _tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) private _tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) private _ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  constructor()\n    public\n  {\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(_InterfaceId_ERC721);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address owner) public view returns (uint256) {\n    require(owner != address(0));\n    return _ownedTokensCount[owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 tokenId) public view returns (address) {\n    address owner = _tokenOwner[tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param to address to be approved for the given token ID\n   * @param tokenId uint256 ID of the token to be approved\n   */\n  function approve(address to, uint256 tokenId) public {\n    address owner = ownerOf(tokenId);\n    require(to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    _tokenApprovals[tokenId] = to;\n    emit Approval(owner, to, tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * Reverts if the token ID does not exist.\n   * @param tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 tokenId) public view returns (address) {\n    require(_exists(tokenId));\n    return _tokenApprovals[tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param to operator address to set the approval\n   * @param approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address to, bool approved) public {\n    require(to != msg.sender);\n    _operatorApprovals[msg.sender][to] = approved;\n    emit ApprovalForAll(msg.sender, to, approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param owner owner address which you want to query the approval of\n   * @param operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address owner,\n    address operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return _operatorApprovals[owner][operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  )\n    public\n  {\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n    require(to != address(0));\n\n    _clearApproval(from, tokenId);\n    _removeTokenFrom(from, tokenId);\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(from, to, tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  )\n    public\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(from, to, tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes _data\n  )\n    public\n  {\n    transferFrom(from, to, tokenId);\n    // solium-disable-next-line arg-overflow\n    require(_checkOnERC721Received(from, to, tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function _exists(uint256 tokenId) internal view returns (bool) {\n    address owner = _tokenOwner[tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param spender address of the spender to query\n   * @param tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function _isApprovedOrOwner(\n    address spender,\n    uint256 tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      spender == owner ||\n      getApproved(tokenId) == spender ||\n      isApprovedForAll(owner, spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param to The address that will own the minted token\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address to, uint256 tokenId) internal {\n    require(to != address(0));\n    _addTokenTo(to, tokenId);\n    emit Transfer(address(0), to, tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address owner, uint256 tokenId) internal {\n    _clearApproval(owner, tokenId);\n    _removeTokenFrom(owner, tokenId);\n    emit Transfer(owner, address(0), tokenId);\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n   * @param to address representing the new owner of the given token ID\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function _addTokenTo(address to, uint256 tokenId) internal {\n    require(_tokenOwner[tokenId] == address(0));\n    _tokenOwner[tokenId] = to;\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n   * and doesn't clear approvals.\n   * @param from address representing the previous owner of the given token ID\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n    require(ownerOf(tokenId) == from);\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n    _tokenOwner[tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param from address representing the previous owner of the given token ID\n   * @param to target address that will receive the tokens\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function _checkOnERC721Received(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!to.isContract()) {\n      return true;\n    }\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n      msg.sender, from, tokenId, _data);\n    return (retval == _ERC721_RECEIVED);\n  }\n\n  /**\n   * @dev Private function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param owner owner of the token\n   * @param tokenId uint256 ID of the token to be transferred\n   */\n  function _clearApproval(address owner, uint256 tokenId) private {\n    require(ownerOf(tokenId) == owner);\n    if (_tokenApprovals[tokenId] != address(0)) {\n      _tokenApprovals[tokenId] = address(0);\n    }\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Burnable.sol\n\ncontract ERC721Burnable is ERC721 {\n  function burn(uint256 tokenId)\n    public\n  {\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n    _burn(ownerOf(tokenId), tokenId);\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Enumerable is IERC721 {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address owner,\n    uint256 index\n  )\n    public\n    view\n    returns (uint256 tokenId);\n\n  function tokenByIndex(uint256 index) public view returns (uint256);\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol\n\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) private _ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) private _ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] private _allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) private _allTokensIndex;\n\n  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  /**\n   * @dev Constructor function\n   */\n  constructor() public {\n    // register the supported interface to conform to ERC721 via ERC165\n    _registerInterface(_InterfaceId_ERC721Enumerable);\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param owner address owning the tokens list to be accessed\n   * @param index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address owner,\n    uint256 index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(index < balanceOf(owner));\n    return _ownedTokens[owner][index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return _allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 index) public view returns (uint256) {\n    require(index < totalSupply());\n    return _allTokens[index];\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * This function is internal due to language limitations, see the note in ERC721.sol.\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n   * @param to address representing the new owner of the given token ID\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function _addTokenTo(address to, uint256 tokenId) internal {\n    super._addTokenTo(to, tokenId);\n    uint256 length = _ownedTokens[to].length;\n    _ownedTokens[to].push(tokenId);\n    _ownedTokensIndex[tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * This function is internal due to language limitations, see the note in ERC721.sol.\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n   * and doesn't clear approvals.\n   * @param from address representing the previous owner of the given token ID\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n    super._removeTokenFrom(from, tokenId);\n\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n    // then delete the last slot.\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\n    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\n\n    _ownedTokens[from][tokenIndex] = lastToken;\n    // This also deletes the contents at the last position of the array\n    _ownedTokens[from].length--;\n\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    _ownedTokensIndex[tokenId] = 0;\n    _ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param to address the beneficiary that will own the minted token\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address to, uint256 tokenId) internal {\n    super._mint(to, tokenId);\n\n    _allTokensIndex[tokenId] = _allTokens.length;\n    _allTokens.push(tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param owner owner of the token to burn\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address owner, uint256 tokenId) internal {\n    super._burn(owner, tokenId);\n\n    // Reorg all tokens array\n    uint256 tokenIndex = _allTokensIndex[tokenId];\n    uint256 lastTokenIndex = _allTokens.length.sub(1);\n    uint256 lastToken = _allTokens[lastTokenIndex];\n\n    _allTokens[tokenIndex] = lastToken;\n    _allTokens[lastTokenIndex] = 0;\n\n    _allTokens.length--;\n    _allTokensIndex[tokenId] = 0;\n    _allTokensIndex[lastToken] = tokenIndex;\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Metadata is IERC721 {\n  function name() external view returns (string);\n  function symbol() external view returns (string);\n  function tokenURI(uint256 tokenId) external view returns (string);\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol\n\ncontract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\n  // Token name\n  string private _name;\n\n  // Token symbol\n  string private _symbol;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) private _tokenURIs;\n\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string name, string symbol) public {\n    _name = name;\n    _symbol = symbol;\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string) {\n    return _name;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string) {\n    return _symbol;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 tokenId) external view returns (string) {\n    require(_exists(tokenId));\n    return _tokenURIs[tokenId];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param tokenId uint256 ID of the token to set its URI\n   * @param uri string URI to assign\n   */\n  function _setTokenURI(uint256 tokenId, string uri) internal {\n    require(_exists(tokenId));\n    _tokenURIs[tokenId] = uri;\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param owner owner of the token to burn\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address owner, uint256 tokenId) internal {\n    super._burn(owner, tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\n      delete _tokenURIs[tokenId];\n    }\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\n  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n    public\n  {\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Mintable.sol\n\n/**\n * @title ERC721Mintable\n * @dev ERC721 minting logic\n */\ncontract ERC721Mintable is ERC721, MinterRole {\n  /**\n   * @dev Function to mint tokens\n   * @param to The address that will receive the minted tokens.\n   * @param tokenId The token id to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address to,\n    uint256 tokenId\n  )\n    public\n    onlyMinter\n    returns (bool)\n  {\n    _mint(to, tokenId);\n    return true;\n  }\n}\n\n// File: contracts/strings.sol\n\nlibrary Strings {\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n  function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n      bytes memory _ba = bytes(_a);\n      bytes memory _bb = bytes(_b);\n      bytes memory _bc = bytes(_c);\n      bytes memory _bd = bytes(_d);\n      bytes memory _be = bytes(_e);\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n      bytes memory babcde = bytes(abcde);\n      uint k = 0;\n      for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n      for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n      for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n      for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n      for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n      return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string _a, string _b) internal pure returns (string) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    function uint2str(uint i) internal pure returns (string) {\n        if (i == 0) return \"0\";\n        uint j = i;\n        uint len;\n        while (j != 0){\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (i != 0){\n            bstr[k--] = byte(48 + i % 10);\n            i /= 10;\n        }\n        return string(bstr);\n    }\n}\n\n// File: contracts/BountyNFT.sol\n\ncontract MinterRoleMock is MinterRole, Ownable {\n  function removeMinter(address account) public onlyOwner{\n    _removeMinter(account);\n  }\n\n  function onlyMinterMock() public view onlyMinter {\n  }\n\n  function _removeMinter(address account) internal {\n    super._removeMinter(account);\n  }\n}\n\ncontract BountyNFT is ERC721Full, ERC721Mintable, MinterRoleMock, ERC721Burnable {\n  // address proxyRegistryAddress;\n  string _baseTokenURI = \"https://game.lordless.com/api/bounty/detail/\";\n  uint256 public nextId = 0x0;\n  constructor() ERC721Full(\"LORDLESS:Bounty\", \"Bounty\") public {}\n\n  /**\n   * @dev Returns an URI for a given token ID\n   */\n  \n  function tokenURI(uint256 _tokenId) external view returns (string) {\n    return Strings.strConcat(\n        baseTokenURI(),\n        Strings.uint2str(_tokenId)\n    );\n  }\n  \n  function baseTokenURI() public view returns (string) {\n    return _baseTokenURI;\n  }\n\n  function setBaseTokenURI(string baseTokenURI) external onlyOwner {\n    _baseTokenURI = baseTokenURI;\n  }\n  \n  function mint(address to, uint256 tokenId) public onlyMinter returns (bool) {\n    _mint(to, tokenId);\n    nextId++;\n    return true;\n  }\n\n  function mintTo(address _to) external onlyMinter returns (bool, uint256) {\n    uint256 newTokenId = _getNextTokenId();\n    return (mint(_to, newTokenId), newTokenId);\n  }\n\n  function _getNextTokenId() private view returns (uint256) {\n    return nextId;\n  }\n}",
  "bytecode": "60e0604052602c60808190527f68747470733a2f2f67616d652e6c6f72646c6573732e636f6d2f6170692f626f60a09081527f756e74792f64657461696c2f000000000000000000000000000000000000000060c0526200006491600e9190620003a1565b506000600f553480156200007757600080fd5b50604080518082018252600f81527f4c4f52444c4553533a426f756e747900000000000000000000000000000000006020808301919091528251808401909352600683527f426f756e7479000000000000000000000000000000000000000000000000000090830152908181620001177f01ffc9a7000000000000000000000000000000000000000000000000000000006401000000006200024f810204565b6200014b7f80ac58cd000000000000000000000000000000000000000000000000000000006401000000006200024f810204565b6200017f7f780e9d63000000000000000000000000000000000000000000000000000000006401000000006200024f810204565b815162000194906009906020850190620003a1565b508051620001aa90600a906020840190620003a1565b50620001df7f5b5e139f000000000000000000000000000000000000000000000000000000006401000000006200024f810204565b50505050620001fd33620002bc640100000000026401000000009004565b600d8054600160a060020a031916331790819055604051600160a060020a0391909116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a362000446565b7fffffffff0000000000000000000000000000000000000000000000000000000080821614156200027f57600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b620002d7600c826401000000006200163a6200030e82021704565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b600160a060020a03811615156200032457600080fd5b62000339828264010000000062000369810204565b156200034457600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a03821615156200038157600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003e457805160ff191683800117855562000414565b8280016001018555821562000414579182015b8281111562000414578251825591602001919060010190620003f7565b506200042292915062000426565b5090565b6200044391905b808211156200042257600081556001016200042d565b90565b611ac780620004566000396000f30060806040526004361061018a5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461018f57806306fdde03146101da578063081812fc14610264578063095ea7b31461029857806318160ddd146102be57806323b872dd146102e55780632f745c591461030f57806330176e13146103335780633092afd51461035357806340c10f191461037457806342842e0e1461039857806342966c68146103c25780634f6ccce7146103da57806361b8ce8c146103f25780636352211e1461040757806370a082311461041f578063715018a614610440578063755edd17146104555780638da5cb5b146104915780638f32d59b146104a657806395d89b41146104bb578063983b2d56146104d057806398650275146104f1578063a22cb46514610506578063aa271e1a1461052c578063b5dba35b1461054d578063b88d4fde14610562578063c87b56dd146105d1578063d547cfb7146105e9578063e985e9c5146105fe578063f2fde38b14610625575b600080fd5b34801561019b57600080fd5b506101c67bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960043516610646565b604080519115158252519081900360200190f35b3480156101e657600080fd5b506101ef61067a565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610229578181015183820152602001610211565b50505050905090810190601f1680156102565780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561027057600080fd5b5061027c600435610711565b60408051600160a060020a039092168252519081900360200190f35b3480156102a457600080fd5b506102bc600160a060020a0360043516602435610743565b005b3480156102ca57600080fd5b506102d36107f9565b60408051918252519081900360200190f35b3480156102f157600080fd5b506102bc600160a060020a03600435811690602435166044356107ff565b34801561031b57600080fd5b506102d3600160a060020a036004351660243561088d565b34801561033f57600080fd5b506102bc60048035602481019101356108da565b34801561035f57600080fd5b506102bc600160a060020a03600435166108fe565b34801561038057600080fd5b506101c6600160a060020a036004351660243561091d565b3480156103a457600080fd5b506102bc600160a060020a0360043581169060243516604435610950565b3480156103ce57600080fd5b506102bc60043561096c565b3480156103e657600080fd5b506102d3600435610993565b3480156103fe57600080fd5b506102d36109c8565b34801561041357600080fd5b5061027c6004356109ce565b34801561042b57600080fd5b506102d3600160a060020a03600435166109f8565b34801561044c57600080fd5b506102bc610a2b565b34801561046157600080fd5b50610476600160a060020a0360043516610a95565b60408051921515835260208301919091528051918290030190f35b34801561049d57600080fd5b5061027c610acb565b3480156104b257600080fd5b506101c6610ada565b3480156104c757600080fd5b506101ef610aeb565b3480156104dc57600080fd5b506102bc600160a060020a0360043516610b4c565b3480156104fd57600080fd5b506102bc610b69565b34801561051257600080fd5b506102bc600160a060020a03600435166024351515610b74565b34801561053857600080fd5b506101c6600160a060020a0360043516610bf8565b34801561055957600080fd5b506102bc610c0b565b34801561056e57600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526102bc94600160a060020a038135811695602480359092169560443595369560849401918190840183828082843750949750610c1f9650505050505050565b3480156105dd57600080fd5b506101ef600435610c47565b3480156105f557600080fd5b506101ef610c62565b34801561060a57600080fd5b506101c6600160a060020a0360043581169060243516610cc3565b34801561063157600080fd5b506102bc600160a060020a0360043516610cf1565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107065780601f106106db57610100808354040283529160200191610706565b820191906000526020600020905b8154815290600101906020018083116106e957829003601f168201915b505050505090505b90565b600061071c82610d0d565b151561072757600080fd5b50600090815260026020526040902054600160a060020a031690565b600061074e826109ce565b9050600160a060020a03838116908216141561076957600080fd5b33600160a060020a038216148061078557506107858133610cc3565b151561079057600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60075490565b6108093382610d2a565b151561081457600080fd5b600160a060020a038216151561082957600080fd5b6108338382610d89565b61083d8382610dfa565b6108478282610f01565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000610898836109f8565b82106108a357600080fd5b600160a060020a03831660009081526005602052604090208054839081106108c757fe5b9060005260206000200154905092915050565b6108e2610ada565b15156108ed57600080fd5b6108f9600e838361199f565b505050565b610906610ada565b151561091157600080fd5b61091a81610f4a565b50565b600061092833610bf8565b151561093357600080fd5b61093d8383610f53565b50600f8054600190810190915592915050565b6108f98383836020604051908101604052806000815250610c1f565b6109763382610d2a565b151561098157600080fd5b61091a61098d826109ce565b82610fa2565b600061099d6107f9565b82106109a857600080fd5b60078054839081106109b657fe5b90600052602060002001549050919050565b600f5481565b600081815260016020526040812054600160a060020a03168015156109f257600080fd5b92915050565b6000600160a060020a0382161515610a0f57600080fd5b50600160a060020a031660009081526003602052604090205490565b610a33610ada565b1515610a3e57600080fd5b600d54604051600091600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600d805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000806000610aa333610bf8565b1515610aae57600080fd5b610ab6610fea565b9050610ac2848261091d565b94909350915050565b600d54600160a060020a031690565b600d54600160a060020a0316331490565b600a8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107065780601f106106db57610100808354040283529160200191610706565b610b5533610bf8565b1515610b6057600080fd5b61091a81610ff0565b610b7233610f4a565b565b600160a060020a038216331415610b8a57600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b60006109f2600c8363ffffffff61103816565b610c1433610bf8565b1515610b7257600080fd5b610c2a8484846107ff565b610c368484848461106f565b1515610c4157600080fd5b50505050565b60606109f2610c54610c62565b610c5d846111f1565b6112e4565b600e8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107065780601f106106db57610100808354040283529160200191610706565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b610cf9610ada565b1515610d0457600080fd5b61091a81611320565b600090815260016020526040902054600160a060020a0316151590565b600080610d36836109ce565b905080600160a060020a031684600160a060020a03161480610d71575083600160a060020a0316610d6684610711565b600160a060020a0316145b80610d815750610d818185610cc3565b949350505050565b81600160a060020a0316610d9c826109ce565b600160a060020a031614610daf57600080fd5b600081815260026020526040902054600160a060020a031615610df6576000818152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b5050565b6000806000610e09858561139e565b600084815260066020908152604080832054600160a060020a0389168452600590925290912054909350610e4490600163ffffffff61143416565b600160a060020a038616600090815260056020526040902080549193509083908110610e6c57fe5b90600052602060002001549050806005600087600160a060020a0316600160a060020a0316815260200190815260200160002084815481101515610eac57fe5b6000918252602080832090910192909255600160a060020a0387168152600590915260409020805490610ee3906000198301611a1d565b50600093845260066020526040808520859055908452909220555050565b6000610f0d838361144b565b50600160a060020a039091166000908152600560209081526040808320805460018101825590845282842081018590559383526006909152902055565b61091a816114db565b610f5d8282611523565b600780546000838152600860205260408120829055600182018355919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688015550565b610fac828261157e565b6000818152600b60205260409020546002600019610100600184161502019091160415610df6576000818152600b60205260408120610df691611a41565b600f5490565b611001600c8263ffffffff61163a16565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b6000600160a060020a038216151561104f57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b60008061108485600160a060020a0316611688565b151561109357600191506111e8565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b8381101561112657818101518382015260200161110e565b50505050905090810190601f1680156111535780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561117557600080fd5b505af1158015611189573d6000803e3d6000fd5b505050506040513d602081101561119f57600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b6060600080828185151561123a5760408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015294506112db565b8593505b831561125557600190920191600a8404935061123e565b826040519080825280601f01601f191660200182016040528015611283578160200160208202803883390190505b5091505060001982015b85156112d757815160001982019160f860020a6030600a8a0601029184919081106112b457fe5b906020010190600160f860020a031916908160001a905350600a8604955061128d565b8194505b50505050919050565b604080516020818101835260008083528351808301855281815284519283019094528152606092611319928692869290611690565b9392505050565b600160a060020a038116151561133557600080fd5b600d54604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600d805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b81600160a060020a03166113b1826109ce565b600160a060020a0316146113c457600080fd5b600160a060020a0382166000908152600360205260409020546113ee90600163ffffffff61143416565b600160a060020a03909216600090815260036020908152604080832094909455918152600190915220805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000808383111561144457600080fd5b5050900390565b600081815260016020526040902054600160a060020a03161561146d57600080fd5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03881690811790915584526003909152909120546114bb916118f1565b600160a060020a0390921660009081526003602052604090209190915550565b6114ec600c8263ffffffff61190316565b604051600160a060020a038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b600160a060020a038216151561153857600080fd5b6115428282610f01565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600080600061158d858561194f565b6000848152600860205260409020546007549093506115b390600163ffffffff61143416565b91506007828154811015156115c457fe5b90600052602060002001549050806007848154811015156115e157fe5b600091825260208220019190915560078054849081106115fd57fe5b600091825260209091200155600780549061161c906000198301611a1d565b50600093845260086020526040808520859055908452909220555050565b600160a060020a038116151561164f57600080fd5b6116598282611038565b1561166357600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000903b1190565b6060806060806060806060806000808e98508d97508c96508b95508a94508451865188518a518c51010101016040519080825280601f01601f1916602001820160405280156116e9578160200160208202803883390190505b50935083925060009150600090505b885181101561175657888181518110151561170f57fe5b90602001015160f860020a900460f860020a02838380600101945081518110151561173657fe5b906020010190600160f860020a031916908160001a9053506001016116f8565b5060005b87518110156117b857878181518110151561177157fe5b90602001015160f860020a900460f860020a02838380600101945081518110151561179857fe5b906020010190600160f860020a031916908160001a90535060010161175a565b5060005b865181101561181a5786818151811015156117d357fe5b90602001015160f860020a900460f860020a0283838060010194508151811015156117fa57fe5b906020010190600160f860020a031916908160001a9053506001016117bc565b5060005b855181101561187c57858181518110151561183557fe5b90602001015160f860020a900460f860020a02838380600101945081518110151561185c57fe5b906020010190600160f860020a031916908160001a90535060010161181e565b5060005b84518110156118de57848181518110151561189757fe5b90602001015160f860020a900460f860020a0283838060010194508151811015156118be57fe5b906020010190600160f860020a031916908160001a905350600101611880565b50909d9c50505050505050505050505050565b60008282018381101561131957600080fd5b600160a060020a038116151561191857600080fd5b6119228282611038565b151561192d57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b6119598282610d89565b6119638282610dfa565b6040518190600090600160a060020a038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106119e05782800160ff19823516178555611a0d565b82800160010185558215611a0d579182015b82811115611a0d5782358255916020019190600101906119f2565b50611a19929150611a81565b5090565b8154818355818111156108f9576000838152602090206108f9918101908301611a81565b50805460018160011615610100020316600290046000825580601f10611a67575061091a565b601f01602090049060005260206000209081019061091a91905b61070e91905b80821115611a195760008155600101611a875600a165627a7a72305820da805bc604752a4cbdf937471db745a65e8a24223b367cfcc91ae4b217833c6b0029"
}