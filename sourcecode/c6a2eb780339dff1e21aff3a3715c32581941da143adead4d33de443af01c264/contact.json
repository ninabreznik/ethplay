{
  "address": "0x908D27839Fd542425af72770b2AffA422b5Dbc8a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Multisig",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-09\n*/\n\npragma solidity ^0.5.8;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract ERC223ReceiverMixin {\n  function tokenFallback(address _from, uint256 _value, bytes memory _data) public;\n}\n\n/// @title Custom implementation of ERC223 \n/// @author Mai Abha <[emailÂ protected]>\ncontract ERC223Mixin is StandardToken {\n  event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  ) public returns (bool) \n  {\n    bytes memory empty;\n    return transferFrom(\n      _from, \n      _to,\n      _value,\n      empty);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value,\n    bytes memory _data\n  ) public returns (bool)\n  {\n    require(_value <= allowed[_from][msg.sender], \"Reached allowed value\");\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    if (isContract(_to)) {\n      return transferToContract(\n        _from, \n        _to, \n        _value, \n        _data);\n    } else {\n      return transferToAddress(\n        _from, \n        _to, \n        _value, \n        _data); \n    }\n  }\n\n  function transfer(address _to, uint256 _value, bytes memory _data) public returns (bool success) {\n    if (isContract(_to)) {\n      return transferToContract(\n        msg.sender,\n        _to,\n        _value,\n        _data); \n    } else {\n      return transferToAddress(\n        msg.sender,\n        _to,\n        _value,\n        _data);\n    }\n  }\n\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n    bytes memory empty;\n    return transfer(_to, _value, empty);\n  }\n\n  function isContract(address _addr) internal view returns (bool) {\n    uint256 length;\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n      //retrieve the size of the code on target address, this needs assembly\n      length := extcodesize(_addr)\n    }  \n    return (length>0);\n  }\n\n  function moveTokens(address _from, address _to, uint256 _value) internal returns (bool success) {\n    if (balanceOf(_from) < _value) {\n      revert();\n    }\n    balances[_from] = balanceOf(_from).sub(_value);\n    balances[_to] = balanceOf(_to).add(_value);\n\n    return true;\n  }\n\n  function transferToAddress(\n    address _from,\n    address _to,\n    uint256 _value,\n    bytes memory _data\n  ) internal returns (bool success) \n  {\n    require(moveTokens(_from, _to, _value), \"Move is not successful\");\n    emit Transfer(_from, _to, _value);\n    emit Transfer(_from, _to, _value, _data); // solium-disable-line arg-overflow\n    return true;\n  }\n  \n  //function that is called when transaction target is a contract\n  function transferToContract(\n    address _from,\n    address _to,\n    uint256 _value,\n    bytes memory _data\n  ) internal returns (bool success) \n  {\n    require(moveTokens(_from, _to, _value), \"Move is not successful\");\n    ERC223ReceiverMixin(_to).tokenFallback(_from, _value, _data);\n    emit Transfer(_from, _to, _value);\n    emit Transfer(_from, _to, _value, _data); // solium-disable-line arg-overflow\n    return true;\n  }\n}\n\n/// @title Role based access control mixin for Vinci Platform\n/// @author Mai Abha <[emailÂ protected]>\n/// @dev Ignore DRY approach to achieve readability\ncontract RBACMixin {\n  /// @notice Constant string message to throw on lack of access\n  string constant FORBIDDEN = \"Doesn't have enough rights\";\n  string constant DUPLICATE = \"Requirement already satisfied\";\n\n  /// @notice Public owner\n  address public owner;\n\n  /// @notice Public map of minters\n  mapping (address => bool) public minters;\n\n  /// @notice The event indicates a set of a new owner\n  /// @param who is address of added owner\n  event SetOwner(address indexed who);\n\n  /// @notice The event indicates the addition of a new minter\n  /// @param who is address of added minter\n  event AddMinter(address indexed who);\n  /// @notice The event indicates the deletion of a minter\n  /// @param who is address of deleted minter\n  event DeleteMinter(address indexed who);\n\n  constructor () public {\n    _setOwner(msg.sender);\n  }\n\n  /// @notice The functional modifier rejects the interaction of sender who is not an owner\n  modifier onlyOwner() {\n    require(isOwner(msg.sender), FORBIDDEN);\n    _;\n  }\n\n  /// @notice Functional modifier for rejecting the interaction of senders that are not minters\n  modifier onlyMinter() {\n    require(isMinter(msg.sender), FORBIDDEN);\n    _;\n  }\n\n  /// @notice Look up for the owner role on providen address\n  /// @param _who is address to look up\n  /// @return A boolean of owner role\n  function isOwner(address _who) public view returns (bool) {\n    return owner == _who;\n  }\n\n  /// @notice Look up for the minter role on providen address\n  /// @param _who is address to look up\n  /// @return A boolean of minter role\n  function isMinter(address _who) public view returns (bool) {\n    return minters[_who];\n  }\n\n  /// @notice Adds the owner role to provided address\n  /// @dev Requires owner role to interact\n  /// @param _who is address to add role\n  /// @return A boolean that indicates if the operation was successful.\n  function setOwner(address _who) public onlyOwner returns (bool) {\n    require(_who != address(0));\n    _setOwner(_who);\n  }\n\n  /// @notice Adds the minter role to provided address\n  /// @dev Requires owner role to interact\n  /// @param _who is address to add role\n  /// @return A boolean that indicates if the operation was successful.\n  function addMinter(address _who) public onlyOwner returns (bool) {\n    _setMinter(_who, true);\n  }\n\n  /// @notice Deletes the minter role to provided address\n  /// @dev Requires owner role to interact\n  /// @param _who is address to delete role\n  /// @return A boolean that indicates if the operation was successful.\n  function deleteMinter(address _who) public onlyOwner returns (bool) {\n    _setMinter(_who, false);\n  }\n\n  /// @notice Changes the owner role to provided address\n  /// @param _who is address to change role\n  /// @param _flag is next role status after success\n  /// @return A boolean that indicates if the operation was successful.\n  function _setOwner(address _who) private returns (bool) {\n    require(owner != _who, DUPLICATE);\n    owner = _who;\n    emit SetOwner(_who);\n    return true;\n  }\n\n  /// @notice Changes the minter role to provided address\n  /// @param _who is address to change role\n  /// @param _flag is next role status after success\n  /// @return A boolean that indicates if the operation was successful.\n  function _setMinter(address _who, bool _flag) private returns (bool) {\n    require(minters[_who] != _flag, DUPLICATE);\n    minters[_who] = _flag;\n    if (_flag) {\n      emit AddMinter(_who);\n    } else {\n      emit DeleteMinter(_who);\n    }\n    return true;\n  }\n}\n\ncontract RBACMintableTokenMixin is StandardToken, RBACMixin {\n  /// @notice Total issued tokens\n  uint256 totalIssued_;\n\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n  modifier canMint() {\n    require(!mintingFinished, \"Minting is finished\");\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    onlyMinter\n    canMint\n    public\n    returns (bool)\n  {\n    totalIssued_ = totalIssued_.add(_amount);\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n/**\n * @title Standard Burnable Token\n * @dev Adds burnFrom method to ERC20 implementations\n */\ncontract StandardBurnableToken is BurnableToken, StandardToken {\n\n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param _from address The address which you want to send tokens from\n   * @param _value uint256 The amount of token to be burned\n   */\n  function burnFrom(address _from, uint256 _value) public {\n    require(_value <= allowed[_from][msg.sender]);\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    _burn(_from, _value);\n  }\n}\n\n/// @title Vinci token implementation\n/// @author Mai Abha <[emailÂ protected]>\n/// @dev Implements ERC20, ERC223 and MintableToken interfaces\ncontract VinciToken is StandardBurnableToken, RBACMintableTokenMixin, ERC223Mixin {\n  /// @notice Constant field with token full name\n  // solium-disable-next-line uppercase\n  string constant public name = \"Vinci\"; \n  /// @notice Constant field with token symbol\n  string constant public symbol = \"VINCI\"; // solium-disable-line uppercase\n  /// @notice Constant field with token precision depth\n  uint256 constant public decimals = 18; // solium-disable-line uppercase\n  /// @notice Constant field with token cap (total supply limit)\n  uint256 constant public cap = 1500 * (10 ** 6) * (10 ** decimals); // solium-disable-line uppercase\n\n  /// @notice Overrides original mint function from MintableToken to limit minting over cap\n  /// @param _to The address that will receive the minted tokens.\n  /// @param _amount The amount of tokens to mint.\n  /// @return A boolean that indicates if the operation was successful.\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    returns (bool) \n  {\n    require(totalIssued_.add(_amount) <= cap, \"Cap is reached\");\n    return super.mint(_to, _amount);\n  }\n}\n\ncontract BasicMultisig {\n  string constant ALREADY_EXECUTED = \"Operation already executed\";\n\n  VinciToken public vinci_contract;  // address of the VinciToken contract\n\n  /// @notice Public map of owners\n  mapping (address => bool) public owners;\n  /// @notice Public map of admins\n  mapping (address => bool) public admins;\n\n  /// @notice multisig owners counters\n  mapping (uint => uint) public ownersConfirmations;\n  /// @notice multisig admins counters\n  mapping (uint => uint) public adminsConfirmations;\n\n  mapping (uint => mapping (address => bool)) public ownersSigns;\n  mapping (uint => mapping (address => bool)) public adminsSigns;\n\n  /// @notice executed tasks to prevent multiple execution\n  mapping (uint => bool) public executed;\n\n  modifier manageable() {\n    require(isOwner(msg.sender) || isAdmin(msg.sender), \"You're not admin or owner\");\n    _;\n  }\n\n  modifier shouldNotBeAlreadyExecuted(uint _operation) {\n    require(!executed[_operation], ALREADY_EXECUTED);\n    _;\n  }\n\n  modifier increasesConfirmationsCounter(uint _operation) {\n    increaseConfirmationsCounter(_operation);\n    _;\n  }\n\n  function isOwner(address who) public view returns (bool) {\n    return owners[who];\n  }\n\n  function isAdmin(address who) public view returns (bool) {\n    return admins[who];\n  }\n\n  uint public operation = 0;\n\n  /// @dev Fallback function: don't accept ETH\n  function() external payable {\n    revert();\n  }\n\n  // common method\n  modifier createsNewOperation() {\n    operation++;\n    if (isOwner(msg.sender)) {\n      ownersConfirmations[operation] = 1;\n      adminsConfirmations[operation] = 0;\n      ownersSigns[operation][msg.sender] = true;\n    } else {\n      if (isAdmin(msg.sender)) {\n        ownersConfirmations[operation] = 0;\n        adminsConfirmations[operation] = 1;\n        adminsSigns[operation][msg.sender] = true;\n      }\n    }\n    _;\n  }\n\n  function increaseConfirmationsCounter(uint _operation) internal {\n    if (isOwner(msg.sender)) {\n      if (ownersSigns[_operation][msg.sender]) revert();\n      ownersConfirmations[_operation] += 1;\n    } else {\n      if (isAdmin(msg.sender)) {\n        if (adminsSigns[_operation][msg.sender]) revert();\n        adminsConfirmations[_operation] += 1;\n      }\n    }\n  }\n\n  function enoughConfirmations(uint _operation) public view returns (bool) {\n    uint totalConfirmations = ownersConfirmations[_operation] + adminsConfirmations[_operation];\n    return ((ownersConfirmations[_operation] > 0) && (totalConfirmations > 2));\n  }\n  //\n}\n\ncontract SetOwnerMultisig is BasicMultisig {\n  struct SetOwnerParams { address who; }\n\n  mapping (uint => SetOwnerParams) public setOwnerOperations;\n\n\n  // EVENTS\n  event setOwnerAction(uint operation, address indexed who);\n  event setOwnerConfirmation(uint operation, address indexed who, uint ownersConfirmations, uint adminsConfirmations);\n\n\n  function setOwner(address who) public manageable\n                                 createsNewOperation\n                                 returns (uint) {\n\n    setOwnerOperations[operation] = SetOwnerParams(who);\n\n    emit setOwnerAction(operation, who);\n    return operation;\n  }\n\n  function setOwnerConfirm(uint _operation) public manageable\n                                            shouldNotBeAlreadyExecuted(_operation)\n                                            increasesConfirmationsCounter(_operation)\n                                            returns (bool) {\n    if (enoughConfirmations(_operation)){\n      vinci_contract.setOwner(setOwnerOperations[_operation].who);\n      executed[_operation] = true;\n    }\n\n    emit setOwnerConfirmation(_operation,\n                              setOwnerOperations[_operation].who,\n                              ownersConfirmations[_operation],\n                              adminsConfirmations[_operation]);\n  }\n}\n\ncontract DeleteMinterMultisig is BasicMultisig {\n  struct DeleteMinterParams { address who; }\n\n  mapping (uint => DeleteMinterParams) public deleteMinterOperations;\n\n\n  // EVENTS\n  event deleteMinterAction(uint operation, address indexed who);\n\n  event deleteMinterConfirmation(uint operation,\n                                 address indexed who,\n                                 uint ownersConfirmations,\n                                 uint adminsConfirmations);\n\n\n  function deleteMinter(address who) public manageable\n                                    createsNewOperation\n                                    returns (uint) {\n\n    deleteMinterOperations[operation] = DeleteMinterParams(who);\n\n    emit deleteMinterAction(operation, who);\n    return operation;\n  }\n\n  function deleteMinterConfirm(uint _operation) public manageable\n                                                shouldNotBeAlreadyExecuted(_operation)\n                                                increasesConfirmationsCounter(_operation)\n                                                returns (bool) {\n    if (enoughConfirmations(_operation)){\n      vinci_contract.deleteMinter(deleteMinterOperations[_operation].who);\n      executed[_operation] = true;\n    }\n\n    emit deleteMinterConfirmation(_operation,\n                                 deleteMinterOperations[_operation].who,\n                                 ownersConfirmations[_operation],\n                                 adminsConfirmations[_operation]);\n  }\n}\n\ncontract AddMinterMultisig is BasicMultisig {\n  struct AddMinterParams { address who; }\n\n  mapping (uint => AddMinterParams) public addMinterOperations;\n\n\n  // EVENTS\n  event addMinterAction(uint operation, address indexed who);\n\n  event addMinterConfirmation(uint operation,\n                              address indexed who,\n                              uint ownersConfirmations,\n                              uint adminsConfirmations);\n\n\n  function addMinter(address who) public manageable\n                                  createsNewOperation\n                                  returns (uint) {\n\n    addMinterOperations[operation] = AddMinterParams(who);\n\n    emit addMinterAction(operation, who);\n    return operation;\n  }\n\n  function addMinterConfirm(uint _operation) public manageable\n                                             shouldNotBeAlreadyExecuted(_operation)\n                                             increasesConfirmationsCounter(_operation)\n                                             returns (bool) {\n\n    if (enoughConfirmations(_operation)){\n      vinci_contract.addMinter(addMinterOperations[_operation].who);\n      executed[_operation] = true;\n    }\n\n    emit addMinterConfirmation(_operation,\n                               addMinterOperations[_operation].who,\n                               ownersConfirmations[_operation],\n                               adminsConfirmations[_operation]);\n  }\n}\n\ncontract MintMultisig is BasicMultisig {\n  struct MintParams { address to; uint256 amount; }\n\n  mapping (uint => MintParams) public mintOperations;\n\n\n  // EVENTS\n  event mintAction(uint operation,\n                   address indexed to,\n                   uint256 amount);\n\n  event mintConfirmation(uint operation,\n                         address indexed to,\n                         uint256 amount,\n                         uint ownersConfirmations,\n                         uint adminsConfirmations);\n\n\n  function mint(address to, uint256 amount) public manageable\n                             createsNewOperation\n                             returns (uint) {\n\n    mintOperations[operation] = MintParams(to, amount);\n\n    emit mintAction(operation, to, amount);\n    return operation;\n  }\n\n  function mintConfirm(uint _operation) public manageable\n                                        shouldNotBeAlreadyExecuted(_operation)\n                                        increasesConfirmationsCounter(_operation)\n                                        returns (bool) {\n    if (enoughConfirmations(_operation)){\n      vinci_contract.mint(mintOperations[_operation].to, mintOperations[_operation].amount);\n      executed[_operation] = true;\n    }\n\n    emit mintConfirmation(_operation,\n                          mintOperations[_operation].to,\n                          mintOperations[_operation].amount,\n                          ownersConfirmations[_operation],\n                          adminsConfirmations[_operation]);\n  }\n}\n\ncontract FinishMintingMultisig is BasicMultisig {\n  // EVENTS\n  event finishMintingAction(uint operation);\n\n  event finishMintingConfirmation(uint operation,\n                                  uint ownersConfirmations,\n                                  uint adminsConfirmations);\n\n\n  function finishMinting() public manageable\n                           createsNewOperation\n                           returns (uint) {\n\n    emit finishMintingAction(operation);\n    return operation;\n  }\n\n  function finishMintingConfirm(uint _operation) public manageable\n                                                 shouldNotBeAlreadyExecuted(_operation)\n                                                 increasesConfirmationsCounter(_operation)\n                                                 returns (bool) {\n    if (enoughConfirmations(_operation)){\n      vinci_contract.finishMinting();\n      executed[_operation] = true;\n    }\n\n    emit finishMintingConfirmation(_operation,\n                                   ownersConfirmations[_operation],\n                                   adminsConfirmations[_operation]);\n  }\n}\n\ncontract Multisig is SetOwnerMultisig,\n\n                     AddMinterMultisig,\n                     DeleteMinterMultisig,\n\n                     MintMultisig,\n                     FinishMintingMultisig {\n\n  constructor(VinciToken _vinci_contract) public {\n    vinci_contract = _vinci_contract;\n\n    owners[0x22e936f4a00ABc4120208D7E8EF9f76d3555Cb05] = true;\n    owners[0x95a06E0B6F94A6Cbae49317ED0c87056Eb8494e8] = true;\n\n    admins[0x020748bFeB4E877125ABa9A1D283d41A48f12584] = true;\n    admins[0xED182c9CE936C541599A049570DD7EEFE06387e9] = true;\n    admins[0x2ef7AC759F06509535750403663278cc22FDaEF1] = true;\n    admins[0x27481f1D81F8B6eff5860c43111acFEc6A8C5290] = true;\n  }\n}",
  "bytecode": "6080604052600060085534801561001557600080fd5b50604051602080611cde8339810180604052602081101561003557600080fd5b5051600080546001600160a01b039092166001600160a01b03199092169190911781557fd17a2ebd62a57b335d98be26a14439259b71ca7f90616ade962dbcddddeaceb2805460ff1990811660019081179092557fd4f3e34647b314f38ed8e863db4753be49c95c8a7f8f234874e86a55e8e41a21805482168317905560026020527fce865a41fed4a1e63a3407daa100c7c8a99210d96a7edb005ebbd107d807d45780548216831790557fa8ec31c38a4f5ef8f305c448ea830e702d78fa528704aca7ac893fbc5ce891b780548216831790557fbf66484f11cebac6971ee5cb8158a597fc87919bbc95f2d17332a048020c7bc280548216831790557327481f1d81f8b6eff5860c43111acfec6a8c52909092527f9d24df6e922e82b618085c349b4d89cd131c3779c2a6564fbae8c1f0fc5da8588054909216179055611b5c806101826000396000f3fe6080604052600436106101815760003560e01c8063429b62e5116100d157806395f6ec2d1161008a578063d3ecebd711610064578063d3ecebd714610588578063d82f94a3146105b2578063ec38e855146105e5578063ed978b5e1461063257610181565b806395f6ec2d14610516578063983b2d561461052b578063c7bee5e41461055e57610181565b8063429b62e51461043b5780634581838d1461046e57806374a4381f14610498578063775fc127146104c25780637d64bcb4146104d75780637fb48212146104ec57610181565b806324d7806c1161013e5780632f54bf6e116101185780632f54bf6e1461037b5780633c581b37146103ae5780633dfb372a146103d857806340c10f191461040257610181565b806324d7806c146102d8578063259869f91461030b57806328b7aab11461033557610181565b8063022914a714610186578063083a7b98146101cd57806313af403514610209578063175cae7f1461023c5780631b66acd3146102665780631e0fcdf51461029f575b600080fd5b34801561019257600080fd5b506101b9600480360360208110156101a957600080fd5b50356001600160a01b031661065c565b604080519115158252519081900360200190f35b3480156101d957600080fd5b506101f7600480360360208110156101f057600080fd5b5035610671565b60408051918252519081900360200190f35b34801561021557600080fd5b506101f76004803603602081101561022c57600080fd5b50356001600160a01b0316610683565b34801561024857600080fd5b506101b96004803603602081101561025f57600080fd5b5035610815565b34801561027257600080fd5b506101b96004803603604081101561028957600080fd5b50803590602001356001600160a01b0316610848565b3480156102ab57600080fd5b506101b9600480360360408110156102c257600080fd5b50803590602001356001600160a01b0316610868565b3480156102e457600080fd5b506101b9600480360360208110156102fb57600080fd5b50356001600160a01b0316610888565b34801561031757600080fd5b506101b96004803603602081101561032e57600080fd5b50356108a6565b34801561034157600080fd5b5061035f6004803603602081101561035857600080fd5b5035610afa565b604080516001600160a01b039092168252519081900360200190f35b34801561038757600080fd5b506101b96004803603602081101561039e57600080fd5b50356001600160a01b0316610b15565b3480156103ba57600080fd5b506101b9600480360360208110156103d157600080fd5b5035610b33565b3480156103e457600080fd5b506101b9600480360360208110156103fb57600080fd5b5035610d4a565b34801561040e57600080fd5b506101f76004803603604081101561042557600080fd5b506001600160a01b038135169060200135610f3f565b34801561044757600080fd5b506101b96004803603602081101561045e57600080fd5b50356001600160a01b03166110e6565b34801561047a57600080fd5b506101b96004803603602081101561049157600080fd5b50356110fb565b3480156104a457600080fd5b506101b9600480360360208110156104bb57600080fd5b5035611330565b3480156104ce57600080fd5b506101f7611547565b3480156104e357600080fd5b506101f761154d565b3480156104f857600080fd5b506101f76004803603602081101561050f57600080fd5b503561169e565b34801561052257600080fd5b5061035f6116b0565b34801561053757600080fd5b506101f76004803603602081101561054e57600080fd5b50356001600160a01b03166116bf565b34801561056a57600080fd5b5061035f6004803603602081101561058157600080fd5b5035611851565b34801561059457600080fd5b506101b9600480360360208110156105ab57600080fd5b503561186c565b3480156105be57600080fd5b506101f7600480360360208110156105d557600080fd5b50356001600160a01b0316611881565b3480156105f157600080fd5b5061060f6004803603602081101561060857600080fd5b5035611a13565b604080516001600160a01b03909316835260208301919091528051918290030190f35b34801561063e57600080fd5b5061035f6004803603602081101561065557600080fd5b5035611a38565b60016020526000908152604090205460ff1681565b60046020526000908152604090205481565b600061068e33610b15565b8061069d575061069d33610888565b6106df5760408051600160e51b62461bcd0281526020600482015260196024820152600080516020611b11833981519152604482015290519081900360640190fd5b6008805460010190556106f133610b15565b1561074257600880546000908152600360209081526040808320600190819055845484526004835281842084905593548352600582528083203384529091529020805460ff19169091179055610798565b61074b33610888565b1561079857600880546000908152600360209081526040808320839055835483526004825280832060019081905593548352600682528083203384529091529020805460ff191690911790555b60408051602080820183526001600160a01b0385811680845260088054600090815260098552869020945185546001600160a01b031916931692909217909355548351908152925191927fb9cca138a3b8c659f62ddbdb6196327a6f3fd1728fd4eb66a943ff978c131750929081900390910190a2505060085490565b600081815260046020908152604080832054600390925282205490810190158015906108415750600281115b9392505050565b600560209081526000928352604080842090915290825290205460ff1681565b600660209081526000928352604080842090915290825290205460ff1681565b6001600160a01b031660009081526002602052604090205460ff1690565b60006108b133610b15565b806108c057506108c033610888565b6109025760408051600160e51b62461bcd0281526020600482015260196024820152600080516020611b11833981519152604482015290519081900360640190fd5b600082815260076020908152604091829020548251808401909352601a8352600080516020611af18339815191529183019190915283919060ff16156109c957604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561098e578181015183820152602001610976565b50505050905090810190601f1680156109bb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50826109d481611a53565b6109dd84610815565b15610a865760008054858252600a60209081526040808420548151600160e11b634c1d96ab0281526001600160a01b039182166004820152915193169363983b2d5693602480840194939192918390030190829087803b158015610a4057600080fd5b505af1158015610a54573d6000803e3d6000fd5b505050506040513d6020811015610a6a57600080fd5b50506000848152600760205260409020805460ff191660011790555b6000848152600a6020908152604080832054600383528184205460048452938290205482518981529384019490945282820193909352516001600160a01b03909216917fa9722e0a3b1deaa5e3eeec3f1246e612039c93b9e7bd7088053e0f3c0b6580419181900360600190a25050919050565b600b602052600090815260409020546001600160a01b031681565b6001600160a01b031660009081526001602052604090205460ff1690565b6000610b3e33610b15565b80610b4d5750610b4d33610888565b610b8f5760408051600160e51b62461bcd0281526020600482015260196024820152600080516020611b11833981519152604482015290519081900360640190fd5b600082815260076020908152604091829020548251808401909352601a8352600080516020611af18339815191529183019190915283919060ff1615610c1957604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561098e578181015183820152602001610976565b5082610c2481611a53565b610c2d84610815565b15610cd65760008054858252600960209081526040808420548151600160e01b6313af40350281526001600160a01b03918216600482015291519316936313af403593602480840194939192918390030190829087803b158015610c9057600080fd5b505af1158015610ca4573d6000803e3d6000fd5b505050506040513d6020811015610cba57600080fd5b50506000848152600760205260409020805460ff191660011790555b600084815260096020908152604080832054600383528184205460048452938290205482518981529384019490945282820193909352516001600160a01b03909216917fa9c9c778abc534943a8516ecd78015689bc80de632261df36ee50a11dfc6711a9181900360600190a25050919050565b6000610d5533610b15565b80610d645750610d6433610888565b610da65760408051600160e51b62461bcd0281526020600482015260196024820152600080516020611b11833981519152604482015290519081900360640190fd5b600082815260076020908152604091829020548251808401909352601a8352600080516020611af18339815191529183019190915283919060ff1615610e3057604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561098e578181015183820152602001610976565b5082610e3b81611a53565b610e4484610815565b15610ede576000809054906101000a90046001600160a01b03166001600160a01b0316637d64bcb46040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610e9857600080fd5b505af1158015610eac573d6000803e3d6000fd5b505050506040513d6020811015610ec257600080fd5b50506000848152600760205260409020805460ff191660011790555b6000848152600360209081526040808320546004835292819020548151888152928301939093528181019290925290517f626af1bb695bfeae5c9cba38fd6b59d6750da1744294bbc41e96423562684ba69181900360600190a15050919050565b6000610f4a33610b15565b80610f595750610f5933610888565b610f9b5760408051600160e51b62461bcd0281526020600482015260196024820152600080516020611b11833981519152604482015290519081900360640190fd5b600880546001019055610fad33610b15565b15610ffe57600880546000908152600360209081526040808320600190819055845484526004835281842084905593548352600582528083203384529091529020805460ff19169091179055611054565b61100733610888565b1561105457600880546000908152600360209081526040808320839055835483526004825280832060019081905593548352600682528083203384529091529020805460ff191690911790555b6040805180820182526001600160a01b038581168083526020808401878152600880546000908152600c8452879020955186546001600160a01b03191695169490941785555160019094019390935590548351908152918201859052825190927fa70501039f44f0ba42f40bbf971f822b24d033641433d09033682e01bcdb485b928290030190a25060085492915050565b60026020526000908152604090205460ff1681565b600061110633610b15565b80611115575061111533610888565b6111575760408051600160e51b62461bcd0281526020600482015260196024820152600080516020611b11833981519152604482015290519081900360640190fd5b600082815260076020908152604091829020548251808401909352601a8352600080516020611af18339815191529183019190915283919060ff16156111e157604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561098e578181015183820152602001610976565b50826111ec81611a53565b6111f584610815565b156112ad5760008054858252600c6020908152604080842080546001909101548251600160e01b6340c10f190281526001600160a01b039283166004820152602481019190915291519316936340c10f1993604480840194939192918390030190829087803b15801561126757600080fd5b505af115801561127b573d6000803e3d6000fd5b505050506040513d602081101561129157600080fd5b50506000848152600760205260409020805460ff191660011790555b6000848152600c602090815260408083208054600190910154600384528285205460048552948390205483518a815294850191909152838301949094526060830193909352516001600160a01b03909216917f12e8aabb4f863adbeeb7d54b7bd56a858a9d934b652f82efd5542026d2627ae09181900360800190a25050919050565b600061133b33610b15565b8061134a575061134a33610888565b61138c5760408051600160e51b62461bcd0281526020600482015260196024820152600080516020611b11833981519152604482015290519081900360640190fd5b600082815260076020908152604091829020548251808401909352601a8352600080516020611af18339815191529183019190915283919060ff161561141657604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561098e578181015183820152602001610976565b508261142181611a53565b61142a84610815565b156114d35760008054858252600b60209081526040808420548151600160e01b63d82f94a30281526001600160a01b039182166004820152915193169363d82f94a393602480840194939192918390030190829087803b15801561148d57600080fd5b505af11580156114a1573d6000803e3d6000fd5b505050506040513d60208110156114b757600080fd5b50506000848152600760205260409020805460ff191660011790555b6000848152600b6020908152604080832054600383528184205460048452938290205482518981529384019490945282820193909352516001600160a01b03909216917f60709dd060b53bc2c71cad6fbd4af228e65982dcb3ef32273103f27522df5a729181900360600190a25050919050565b60085481565b600061155833610b15565b80611567575061156733610888565b6115a95760408051600160e51b62461bcd0281526020600482015260196024820152600080516020611b11833981519152604482015290519081900360640190fd5b6008805460010190556115bb33610b15565b1561160c57600880546000908152600360209081526040808320600190819055845484526004835281842084905593548352600582528083203384529091529020805460ff19169091179055611662565b61161533610888565b1561166257600880546000908152600360209081526040808320839055835483526004825280832060019081905593548352600682528083203384529091529020805460ff191690911790555b60085460408051918252517f70c5a46554dc38db4d8009735ca0b5a474b9fee4fc8d4a3b6c036beafb0c61fb9181900360200190a15060085490565b60036020526000908152604090205481565b6000546001600160a01b031681565b60006116ca33610b15565b806116d957506116d933610888565b61171b5760408051600160e51b62461bcd0281526020600482015260196024820152600080516020611b11833981519152604482015290519081900360640190fd5b60088054600101905561172d33610b15565b1561177e57600880546000908152600360209081526040808320600190819055845484526004835281842084905593548352600582528083203384529091529020805460ff191690911790556117d4565b61178733610888565b156117d457600880546000908152600360209081526040808320839055835483526004825280832060019081905593548352600682528083203384529091529020805460ff191690911790555b60408051602080820183526001600160a01b03858116808452600880546000908152600a8552869020945185546001600160a01b031916931692909217909355548351908152925191927ffacc7363a125dbf9d0c506817575c00f591680521d8bb92793a384b7baa6d443929081900390910190a2505060085490565b600a602052600090815260409020546001600160a01b031681565b60076020526000908152604090205460ff1681565b600061188c33610b15565b8061189b575061189b33610888565b6118dd5760408051600160e51b62461bcd0281526020600482015260196024820152600080516020611b11833981519152604482015290519081900360640190fd5b6008805460010190556118ef33610b15565b1561194057600880546000908152600360209081526040808320600190819055845484526004835281842084905593548352600582528083203384529091529020805460ff19169091179055611996565b61194933610888565b1561199657600880546000908152600360209081526040808320839055835483526004825280832060019081905593548352600682528083203384529091529020805460ff191690911790555b60408051602080820183526001600160a01b03858116808452600880546000908152600b8552869020945185546001600160a01b031916931692909217909355548351908152925191927ff6c6bd04fe21e79fb69998eef0f9c203a663b6b573bad16b353a2b75c3c7b8bc929081900390910190a2505060085490565b600c60205260009081526040902080546001909101546001600160a01b039091169082565b6009602052600090815260409020546001600160a01b031681565b611a5c33610b15565b15611aa257600081815260056020908152604080832033845290915290205460ff1615611a8857600080fd5b600081815260036020526040902080546001019055611aed565b611aab33610888565b15611aed57600081815260066020908152604080832033845290915290205460ff1615611ad757600080fd5b6000818152600460205260409020805460010190555b5056fe4f7065726174696f6e20616c7265616479206578656375746564000000000000596f75277265206e6f742061646d696e206f72206f776e657200000000000000a165627a7a723058206c7f2f51045c83f70e32d33f71df7be9fec581eedaba5353ce2d53f0578120d100290000000000000000000000004cf514824f035cc9440f6316e327156c0da6c541",
  "constructorArguments": "0000000000000000000000004cf514824f035cc9440f6316e327156c0da6c541"
}