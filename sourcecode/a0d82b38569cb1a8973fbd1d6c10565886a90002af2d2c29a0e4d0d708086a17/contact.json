{
  "address": "0xc97fe365d35b06ddf2a0a29d0761f63ee27f4eea",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NewB1MP",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-14\n*/\n\npragma solidity ^ 0.4.24;\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n\t/**\n\t * @dev Multiplies two numbers, reverts on overflow.\n\t */\n\tfunction mul(uint256 a, uint256 b) internal pure returns(uint256) {\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tuint256 c = a * b;\n\t\trequire(c / a == b);\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n\t */\n\tfunction div(uint256 a, uint256 b) internal pure returns(uint256) {\n\t\trequire(b > 0); // Solidity only automatically asserts when dividing by 0\n\t\tuint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n\t */\n\tfunction sub(uint256 a, uint256 b) internal pure returns(uint256) {\n\t\trequire(b <= a);\n\t\tuint256 c = a - b;\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Adds two numbers, reverts on overflow.\n\t */\n\tfunction add(uint256 a, uint256 b) internal pure returns(uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a);\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n\t * reverts when dividing by zero.\n\t */\n\tfunction mod(uint256 a, uint256 b) internal pure returns(uint256) {\n\t\trequire(b != 0);\n\t\treturn a % b;\n\t}\n}\n\n/**\n * @title BaseAccessControl\n * @dev Basic control permissions are setting here\n */\ncontract BaseAccessControl {\n\n\taddress public ceo;\n\taddress public coo;\n\taddress public cfo;\n\n\tconstructor() public {\n\t\tceo = msg.sender;\n\t\tcoo = msg.sender;\n\t\tcfo = msg.sender;\n\t}\n\n\t/** roles modifer */\n\tmodifier onlyCEO() {\n\t\trequire(msg.sender == ceo, \"CEO Only\");\n\t\t_;\n\t}\n\tmodifier onlyCOO() {\n\t\trequire(msg.sender == coo, \"COO Only\");\n\t\t_;\n\t}\n\tmodifier onlyCFO() {\n\t\trequire(msg.sender == cfo, \"CFO Only\");\n\t\t_;\n\t}\n\tmodifier onlyCLevel() {\n\t\trequire(msg.sender == ceo || msg.sender == coo || msg.sender == cfo, \"CLevel Only\");\n\t\t_;\n\t}\n\t/** end modifier */\n\n\t/** util modifer */\n\tmodifier required(address addr) {\n\t\trequire(addr != address(0), \"Address is required.\");\n\t\t_;\n\t}\n\tmodifier onlyHuman(address addr) {\n\t\tuint256 codeLength;\n\t\tassembly {\n\t\t\tcodeLength: = extcodesize(addr)\n\t\t}\n\t\trequire(codeLength == 0, \"Humans only\");\n\t\t_;\n\t}\n\tmodifier onlyContract(address addr) {\n\t\tuint256 codeLength;\n\t\tassembly {\n\t\t\tcodeLength: = extcodesize(addr)\n\t\t}\n\t\trequire(codeLength > 0, \"Contracts only\");\n\t\t_;\n\t}\n\t/** end util modifier */\n\n\t/** setter */\n\tfunction setCEO(address addr) external onlyCEO() required(addr) onlyHuman(addr) {\n\t\tceo = addr;\n\t}\n\n\tfunction setCOO(address addr) external onlyCEO() required(addr) onlyHuman(addr) {\n\t\tcoo = addr;\n\t}\n\n\tfunction setCFO(address addr) external onlyCEO() required(addr) onlyHuman(addr) {\n\t\tcfo = addr;\n\t}\n\t/** end setter */\n}\n\n/**\n * @title MinerAccessControl\n * @dev Expanding the access control module for miner contract, especially for B1MP contract here\n */\ncontract MinerAccessControl is BaseAccessControl {\n\n\taddress public companyWallet;\n\n\tbool public paused = false;\n\n\t/** modifer */\n\tmodifier whenNotPaused() {\n\t\trequire(!paused, \"Paused\");\n\t\t_;\n\t}\n\tmodifier whenPaused() {\n\t\trequire(paused, \"Running\");\n\t\t_;\n\t}\n\t/** end modifier */\n\n\t/** setter */\n\tfunction setCompanyWallet(address newCompanyWallet) external onlyCEO() required(newCompanyWallet) {\n\t\tcompanyWallet = newCompanyWallet;\n\t}\n\n\tfunction paused() public onlyCLevel() whenNotPaused() {\n\t\tpaused = true;\n\t}\n\n\tfunction unpaused() external onlyCEO() whenPaused() {\n\t\tpaused = false;\n\t}\n\t/** end setter */\n}\n\n/**\n * @title B1MPToken\n * @dev This contract is One-Minute Profit Option Contract.\n * And all users can get their one-minute profit option as a ERC721 token through this contract.\n * Even more, all users can exchange their one-minute profit option in the future.\n */\ninterface B1MPToken {\n\tfunction mintByTokenId(address to, uint256 tokenId) external returns(bool);\n}\n\n/**\n * @title B1MP\n * @dev This is the old B1MP contract.\n * Because of some problem, we have decided to migrate all data and use a new one contract.\n */\ninterface B1MP {\n\tfunction _global() external view returns(uint256 revenue, uint256 g_positionAmount, uint256 earlierPayoffPerPosition, uint256 totalRevenue);\n\tfunction _userAddrBook(uint256 index) external view returns(address addr);\n\tfunction _users(address addr) external view returns(uint256 id, uint256 positionAmount, uint256 earlierPayoffMask, uint256 lastRefId);\n\tfunction _invitations(address addr) external view returns(uint256 invitationAmount, uint256 invitationPayoff);\n\tfunction _positionBook(uint256 index1, uint256 index2) external view returns(uint256 minute);\n\tfunction _positionOnwers(uint256 minute) external view returns(address addr);\n\tfunction totalUsers() external view returns(uint256);\n\tfunction getUserPositionIds(address addr) external view returns(uint256[]);\n}\n\n/**\n * @title NewB1MP\n * @dev Because the old one has some problem, we re-devise the whole contract.\n * All actions, such as buying, withdrawing, and etc., are responding and recording by this contract.\n */\ncontract NewB1MP is MinerAccessControl {\n\n\tusing SafeMath for * ;\n\n\t// the activity configurations\n\tstruct Config {\n\t\tuint256 start; // the activity's start-time\n\t\tuint256 end; // the activity's end-time\n\t\tuint256 price; // the price of any one-minute profit option\n\t\tuint256 withdrawFee; // the basic fee for withdrawal request\n\t\tuint8 earlierPayoffRate; // the proportion of dividends to early buyers\n\t\tuint8 invitationPayoffRate; // the proportion of dividends to inviters\n\t\tuint256 finalPrizeThreshold; // the threshold for opening the final prize\n\t\tuint8[10] finalPrizeRates; // a group proportions for the final prize, the final selected proportion will be decided by some parameters\n\t}\n\n\tstruct Global {\n\t\tuint256 revenue; // reserved revenue of the project holder\n\t\tuint256 positionAmount; // the total amount of minutes been sold\n\t\tuint256 earlierPayoffPerPosition; // the average dividends for every minute been sold before\n\t\tuint256 totalRevenue; // total amount of revenue\n\t}\n\n\tstruct User {\n\t\tuint256 id; // user's id, equal to user's index + 1, increment\n\t\tuint256 positionAmount; // the total amount of minutes bought by this user\n\t\tuint256 earlierPayoffMask; // the pre-purchaser dividend that the user should not receive\n\t\tuint256 lastRefId; // the inviter's user-id\n\t\tuint256[] positionIds; // all position ids hold by this user\n\t}\n\n\tstruct Invitation {\n\t\tuint256 amount; // how many people invited\n\t\tuint256 payoff; // how much payoff through invitation\n\t}\n\n\tB1MP public oldB1MPContract; // the old B1MP contract, just for data migration\n\tB1MPToken public tokenContract; // the one-minute profit option contract\n\tConfig public _config; // configurations\n\tGlobal public _global; // globa info\n\taddress[] public _userAddrBook; // users' addresses list, for registration\n\tmapping(address => User) public _users; // all users' detail info\n\tmapping(address => Invitation) public _invitations; // the invitations info\n\n\tuint256[2][] public _positionBook; // all positions list\n\tmapping(uint256 => address) public _positionOwners; // positionId (index + 1) => owner\n\tmapping(uint256 => address) public _positionMiners; // position minute => miner\n\n\tuint256 public _prizePool; // the pool of final prize\n\tuint256 public _prizePoolWithdrawn; // how much money been withdrawn through final prize pool\n\tbool public _isPrizeActivated; // whether the final prize is activated\n\n\taddress[] public _winnerPurchaseListForAddr; // final prize winners list\n\tuint256[] public _winnerPurchaseListForPositionAmount; // the purchase history of final prize winners\n\tmapping(address => uint256) public _winnerPositionAmounts; // the total position amount of any final prize winner\n\tuint256 public _currentWinnerIndex; // the index of current winner, using for a looping array of all winners\n\tuint256 private _winnerCounter; // the total amount of final prize winners\n\tuint256 public _winnerTotalPositionAmount; // the total amount of positons bought by all final prize winners\n\n\tbool private _isReady; // whether the data migration has been completed\n\tuint256 private _userMigrationCounter; // how many users have been migrated\n\n\t/** modifer */\n\tmodifier paymentLimit(uint256 ethVal) {\n\t\trequire(ethVal > 0, \"Too poor.\");\n\t\trequire(ethVal <= 100000 ether, \"Too rich.\");\n\t\t_;\n\t}\n\tmodifier buyLimit(uint256 ethVal) {\n\t\trequire(ethVal >= _config.price, 'Not enough.');\n\t\t_;\n\t}\n\tmodifier withdrawLimit(uint256 ethVal) {\n\t\trequire(ethVal == _config.withdrawFee, 'Not enough.');\n\t\t_;\n\t}\n\tmodifier whenNotEnded() {\n\t\trequire(_config.end == 0 || now < _config.end, 'Ended.');\n\t\t_;\n\t}\n\tmodifier whenEnded() {\n\t\trequire(_config.end != 0 && now >= _config.end, 'Not ended.');\n\t\t_;\n\t}\n\tmodifier whenPrepare() {\n\t\trequire(_config.end == 0, 'Started.');\n\t\trequire(_isReady == false, 'Ready.');\n\t\t_;\n\t}\n\tmodifier whenReady() {\n\t\trequire(_isReady == true, 'Not ready.');\n\t\t_;\n\t}\n\t/** end modifier */\n\n\t// initialize\n\tconstructor(address tokenAddr, address oldB1MPContractAddr) onlyContract(tokenAddr) onlyContract(oldB1MPContractAddr) public {\n\t\t// ready for migration\n\t\toldB1MPContract = B1MP(oldB1MPContractAddr);\n\t\t_isReady = false;\n\t\t_userMigrationCounter = 0;\n\t\t// initialize base info\n\t\ttokenContract = B1MPToken(tokenAddr);\n\t\t_config = Config(1541993890, 0, 90 finney, 5 finney, 10, 20, 20000 ether, [\n\t\t\t5, 6, 7, 8, 10, 13, 15, 17, 20, 25\n\t\t]);\n\t\t_global = Global(0, 0, 0, 0);\n\n\t\t// ready for final prize\n\t\t_currentWinnerIndex = 0;\n\t\t_isPrizeActivated = false;\n\t}\n\n\tfunction migrateUserData(uint256 n) whenPrepare() onlyCEO() public {\n\t\t// intialize _userAddrBook & _users\n\t\tuint256 userAmount = oldB1MPContract.totalUsers();\n\t\t_userAddrBook.length = userAmount;\n\t\t// migrate n users per time\n\t\tuint256 lastMigrationNumber = _userMigrationCounter;\n\t\tfor (_userMigrationCounter; _userMigrationCounter < userAmount && _userMigrationCounter < lastMigrationNumber + n; _userMigrationCounter++) {\n\t\t\t// A. get user address\n\t\t\taddress userAddr = oldB1MPContract._userAddrBook(_userMigrationCounter);\n\t\t\t/// save to _userAddrBook\n\t\t\t_userAddrBook[_userMigrationCounter] = userAddr;\n\t\t\t// B. get user info\n\t\t\t(uint256 id, uint256 positionAmount, uint256 earlierPayoffMask, uint256 lastRefId) = oldB1MPContract._users(userAddr);\n\t\t\tuint256[] memory positionIds = oldB1MPContract.getUserPositionIds(userAddr);\n\t\t\t/// save to _users\n\t\t\t_users[userAddr] = User(id, positionAmount, earlierPayoffMask, lastRefId, positionIds);\n\t\t\t// C. get invitation info\n\t\t\t(uint256 invitationAmount, uint256 invitationPayoff) = oldB1MPContract._invitations(userAddr);\n\t\t\t/// save to _invitations\n\t\t\t_invitations[userAddr] = Invitation(invitationAmount, invitationPayoff);\n\t\t\t// D. get & save position info\n\t\t\tfor (uint256 i = 0; i < positionIds.length; i++) {\n\t\t\t\tuint256 pid = positionIds[i];\n\t\t\t\tif (pid > 0) {\n\t\t\t\t\tif (pid > _positionBook.length) {\n\t\t\t\t\t\t_positionBook.length = pid;\n\t\t\t\t\t}\n\t\t\t\t\tuint256 pIndex = pid.sub(1);\n\t\t\t\t\t_positionBook[pIndex] = [oldB1MPContract._positionBook(pIndex, 0), oldB1MPContract._positionBook(pIndex, 1)];\n\t\t\t\t\t_positionOwners[pIndex] = userAddr;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction migrateGlobalData() whenPrepare() onlyCEO() public {\n\t\t// intialize _global\n\t\t(uint256 revenue, uint256 g_positionAmount, uint256 earlierPayoffPerPosition, uint256 totalRevenue) = oldB1MPContract._global();\n\t\t_global = Global(revenue, g_positionAmount, earlierPayoffPerPosition, totalRevenue);\n\t}\n\n\tfunction depositeForMigration() whenPrepare() onlyCEO() public payable {\n\t\trequire(_userMigrationCounter == oldB1MPContract.totalUsers(), 'Continue to migrate.');\n\t\trequire(msg.value >= address(oldB1MPContract).balance, 'Not enough.');\n\t\t// update revenue, but don't update totalRevenue\n\t\t// because it's the dust of deposit, but not the revenue of sales\n\t\t// it will be not used for final prize\n\t\t_global.revenue = _global.revenue.add(msg.value.sub(address(oldB1MPContract).balance));\n\t\t_isReady = true;\n\t}\n\n\tfunction () whenReady() whenNotEnded() whenNotPaused() onlyHuman(msg.sender) paymentLimit(msg.value) buyLimit(msg.value) public payable {\n\t\tbuyCore(msg.sender, msg.value, 0);\n\t}\n\n\tfunction buy(uint256 refId) whenReady() whenNotEnded() whenNotPaused() onlyHuman(msg.sender) paymentLimit(msg.value) buyLimit(msg.value) public payable {\n\t\tbuyCore(msg.sender, msg.value, refId);\n\t}\n\n\tfunction buyCore(address addr_, uint256 revenue_, uint256 refId_) private {\n\t\t// 1. prepare some data\n\t\tuint256 _positionAmount_ = (revenue_).div(_config.price); // actual amount \n\t\tuint256 _realCost_ = _positionAmount_.mul(_config.price);\n\t\tuint256 _invitationPayoffPart_ = _realCost_.mul(_config.invitationPayoffRate).div(100);\n\t\tuint256 _earlierPayoffPart_ = _realCost_.mul(_config.earlierPayoffRate).div(100);\n\t\trevenue_ = revenue_.sub(_invitationPayoffPart_).sub(_earlierPayoffPart_);\n\t\tuint256 _earlierPayoffMask_ = 0;\n\n\t\t// 2. register a new user\n\t\tif (_users[addr_].id == 0) {\n\t\t\t_userAddrBook.push(addr_); // add to user address list\n\t\t\t_users[addr_].id = _userAddrBook.length; // assign the user id, especially id = userAddrBook.index + 1\n\t\t}\n\n\t\t// 3. update global info\n\t\tif (_global.positionAmount > 0) {\n\t\t\tuint256 eppp = _earlierPayoffPart_.div(_global.positionAmount);\n\t\t\t_global.earlierPayoffPerPosition = eppp.add(_global.earlierPayoffPerPosition); // update global earlier payoff for per position\n\t\t\trevenue_ = revenue_.add(_earlierPayoffPart_.sub(eppp.mul(_global.positionAmount))); // the dust for this dividend\n\t\t} else {\n\t\t\trevenue_ = revenue_.add(_earlierPayoffPart_); // no need to dividend, especially for first one\n\t\t}\n\t\t// update the total position amount\n\t\t_global.positionAmount = _positionAmount_.add(_global.positionAmount);\n\t\t// calculate the current user's earlier payoff mask for this tx\n\t\t_earlierPayoffMask_ = _positionAmount_.mul(_global.earlierPayoffPerPosition);\n\n\t\t// 4. update referral data\n\t\tif (refId_ <= 0 || refId_ > _userAddrBook.length || refId_ == _users[addr_].id) { // the referrer doesn't exist, or is clien self\n\t\t\trefId_ = _users[addr_].lastRefId;\n\t\t} else if (refId_ != _users[addr_].lastRefId) {\n\t\t\t_users[addr_].lastRefId = refId_;\n\t\t}\n\t\t// update referrer's invitation info if he exists\n\t\tif (refId_ != 0) {\n\t\t\taddress refAddr = _userAddrBook[refId_.sub(1)];\n\t\t\t// modify old one or create a new on if it doesn't exist\n\t\t\t_invitations[refAddr].amount = (1).add(_invitations[refAddr].amount); // update invitation amount\n\t\t\t_invitations[refAddr].payoff = _invitationPayoffPart_.add(_invitations[refAddr].payoff); // update invitation payoff\n\t\t} else {\n\t\t\trevenue_ = revenue_.add(_invitationPayoffPart_); // no referrer\n\t\t}\n\n\t\t// 5. update user info\n\t\t_users[addr_].positionAmount = _positionAmount_.add(_users[addr_].positionAmount);\n\t\t_users[addr_].earlierPayoffMask = _earlierPayoffMask_.add(_users[addr_].earlierPayoffMask);\n\t\t// update user's positions details, and record the position\n\t\t_positionBook.push([_global.positionAmount.sub(_positionAmount_).add(1), _global.positionAmount]);\n\t\t_positionOwners[_positionBook.length] = addr_;\n\t\t_users[addr_].positionIds.push(_positionBook.length);\n\n\t\t// 6. archive revenue\n\t\t_global.revenue = revenue_.add(_global.revenue);\n\t\t_global.totalRevenue = revenue_.add(_global.totalRevenue);\n\n\t\t// 7. select 1% user for final prize when the revenue is more than final prize threshold\n\t\tif (_global.totalRevenue > _config.finalPrizeThreshold) {\n\t\t\tuint256 maxWinnerAmount = countWinners(); // the max amount of winners, 1% of total users\n\t\t\t// activate final prize module at least there are more than 100 users\n\t\t\tif (maxWinnerAmount > 0) {\n\t\t\t\tif (maxWinnerAmount > _winnerPurchaseListForAddr.length) {\n\t\t\t\t\t_winnerPurchaseListForAddr.length = maxWinnerAmount;\n\t\t\t\t\t_winnerPurchaseListForPositionAmount.length = maxWinnerAmount;\n\t\t\t\t}\n\t\t\t\t// get the last winner's address\n\t\t\t\taddress lwAddr = _winnerPurchaseListForAddr[_currentWinnerIndex];\n\t\t\t\tif (lwAddr != address(0)) { // deal the last winner's info\n\t\t\t\t\t// deduct this purchase record's positions amount from total amount\n\t\t\t\t\t_winnerTotalPositionAmount = _winnerTotalPositionAmount.sub(_winnerPurchaseListForPositionAmount[_currentWinnerIndex]);\n\t\t\t\t\t// deduct the winner's position amount from  this winner's amount\n\t\t\t\t\t_winnerPositionAmounts[lwAddr] = _winnerPositionAmounts[lwAddr].sub(_winnerPurchaseListForPositionAmount[_currentWinnerIndex]);\n\t\t\t\t\t// this is the winner's last record\n\t\t\t\t\tif (_winnerPositionAmounts[lwAddr] == 0) {\n\t\t\t\t\t\t// delete the winner's info\n\t\t\t\t\t\t_winnerCounter = _winnerCounter.sub(1);\n\t\t\t\t\t\tdelete _winnerPositionAmounts[lwAddr];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// set the new winner's info, or update old winner's info\n\t\t\t\t// register a new winner\n\t\t\t\tif (_winnerPositionAmounts[msg.sender] == 0) {\n\t\t\t\t\t// add a new winner\n\t\t\t\t\t_winnerCounter = _winnerCounter.add(1);\n\t\t\t\t}\n\t\t\t\t// update total amount of winner's positions bought finally\n\t\t\t\t_winnerTotalPositionAmount = _positionAmount_.add(_winnerTotalPositionAmount);\n\t\t\t\t// update winner's position amount\n\t\t\t\t_winnerPositionAmounts[msg.sender] = _positionAmount_.add(_winnerPositionAmounts[msg.sender]);\n\t\t\t\t// directly reset the winner list\n\t\t\t\t_winnerPurchaseListForAddr[_currentWinnerIndex] = msg.sender;\n\t\t\t\t_winnerPurchaseListForPositionAmount[_currentWinnerIndex] = _positionAmount_;\n\t\t\t\t// move the index to next\n\t\t\t\t_currentWinnerIndex = _currentWinnerIndex.add(1);\n\t\t\t\tif (_currentWinnerIndex >= maxWinnerAmount) { // the max index = total amount - 1\n\t\t\t\t\t_currentWinnerIndex = 0; // start a new loop when the number of winners exceed over the max amount allowed\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 8. update end time\n\t\t_config.end = (now).add(2 days); // expand the end time for every tx\n\t}\n\n\tfunction redeemOptionContract(uint256 positionId, uint256 minute) whenReady() whenNotPaused() onlyHuman(msg.sender) public {\n\t\trequire(_users[msg.sender].id != 0, 'Unauthorized.');\n\t\trequire(positionId <= _positionBook.length && positionId > 0, 'Position Id error.');\n\t\trequire(_positionOwners[positionId] == msg.sender, 'No permission.');\n\t\trequire(minute >= _positionBook[positionId - 1][0] && minute <= _positionBook[positionId - 1][1], 'Wrong interval.');\n\t\trequire(_positionMiners[minute] == address(0), 'Minted.');\n\n\t\t// record the miner\n\t\t_positionMiners[minute] = msg.sender;\n\n\t\t// mint this minute's token\n\t\trequire(tokenContract.mintByTokenId(msg.sender, minute), \"Mining Error.\");\n\t}\n\n\tfunction activateFinalPrize() whenReady() whenEnded() whenNotPaused() onlyCOO() public {\n\t\trequire(_isPrizeActivated == false, 'Activated.');\n\t\t// total revenue should be more than final prize threshold\n\t\tif (_global.totalRevenue > _config.finalPrizeThreshold) {\n\t\t\t// calculate the prize pool\n\t\t\tuint256 selectedfinalPrizeRatesIndex = _winnerCounter.mul(_winnerTotalPositionAmount).mul(_currentWinnerIndex).mod(_config.finalPrizeRates.length);\n\t\t\t_prizePool = _global.totalRevenue.mul(_config.finalPrizeRates[selectedfinalPrizeRatesIndex]).div(100);\n\t\t\t// deduct the final prize pool from the reserved revenue\n\t\t\t_global.revenue = _global.revenue.sub(_prizePool);\n\t\t}\n\t\t// maybe not enough to final prize\n\t\t_isPrizeActivated = true;\n\t}\n\n\tfunction withdraw() whenReady() whenNotPaused() onlyHuman(msg.sender) withdrawLimit(msg.value) public payable {\n\t\t_global.revenue = _global.revenue.add(msg.value); // archive withdrawal fee to revenue, but not total revenue which is for final prize\n\n\t\t// 1. deduct invitation payoff\n\t\tuint256 amount = _invitations[msg.sender].payoff;\n\t\t_invitations[msg.sender].payoff = 0; // clear the user's invitation payoff\n\n\t\t// 2. deduct earlier payoff\n\t\tuint256 ep = (_global.earlierPayoffPerPosition).mul(_users[msg.sender].positionAmount);\n\t\tamount = amount.add(ep.sub(_users[msg.sender].earlierPayoffMask));\n\t\t_users[msg.sender].earlierPayoffMask = ep; // reset the user's earlier payoff mask which include this withdrawal part\n\n\t\t// 3. get the user's final prize, and deduct it\n\t\tif (_isPrizeActivated == true && _winnerPositionAmounts[msg.sender] > 0 &&\n\t\t\t_winnerTotalPositionAmount > 0 && _winnerCounter > 0 && _prizePool > _prizePoolWithdrawn) {\n\t\t\t// calculate the user's prize amount\n\t\t\tuint256 prizeAmount = prize(msg.sender);\n\t\t\t// set the user withdrawal amount\n\t\t\tamount = amount.add(prizeAmount);\n\t\t\t// refresh withdrawal amount of prize pool\n\t\t\t_prizePoolWithdrawn = _prizePoolWithdrawn.add(prizeAmount);\n\t\t\t// clear the user's finally bought position amount, so clear the user's final prize\n\t\t\tclearPrize(msg.sender);\n\t\t\t_winnerCounter = _winnerCounter.sub(1);\n\t\t}\n\n\t\t// 4. send eth\n\t\t(msg.sender).transfer(amount);\n\t}\n\n\tfunction withdrawByCFO(uint256 amount) whenReady() whenNotPaused() onlyCFO() required(companyWallet) public {\n\t\trequire(amount > 0, 'Payoff too samll.');\n\t\tuint256 max = _global.revenue;\n\t\tif (_isPrizeActivated == false) { // when haven't sent final prize\n\t\t\t// deduct the max final prize pool\n\t\t\tmax = max.sub(_global.totalRevenue.mul(_config.finalPrizeRates[_config.finalPrizeRates.length.sub(1)]).div(100));\n\t\t}\n\t\trequire(amount <= max, 'Payoff too big.');\n\n\t\t// deduct the withdrawal amount\n\t\t_global.revenue = _global.revenue.sub(amount);\n\n\t\t// send eth\n\t\tcompanyWallet.transfer(amount);\n\t}\n\n\tfunction withdrawByCFO(address addr) whenReady() whenNotPaused() onlyCFO() onlyContract(addr) required(companyWallet) public {\n\t\t// send all erc20\n\t\trequire(IERC20(addr).transfer(companyWallet, IERC20(addr).balanceOf(this)));\n\t}\n\n\tfunction collectPrizePoolDust() whenReady() whenNotPaused() onlyCOO() public {\n\t\t// when final prize has been sent, and all winners have received prizes\n\t\trequire(_isPrizeActivated == true, 'Not activited.');\n\t\t// collect the prize pool dust\n\t\tif (_winnerCounter == 0 || now > _config.end.add(180 days)) {\n\t\t\t_global.revenue = _global.revenue.add(_prizePool.sub(_prizePoolWithdrawn));\n\t\t\t_prizePoolWithdrawn = _prizePool;\n\t\t}\n\t}\n\n\tfunction totalUsers() public view returns(uint256) {\n\t\treturn _userAddrBook.length;\n\t}\n\n\tfunction getUserAddress(uint256 id) public view returns(address userAddrRet) {\n\t\tif (id <= _userAddrBook.length && id > 0) {\n\t\t\tuserAddrRet = _userAddrBook[id.sub(1)];\n\t\t}\n\t}\n\n\tfunction getUserPositionIds(address addr) public view returns(uint256[]) {\n\t\treturn _users[addr].positionIds;\n\t}\n\n\tfunction countPositions() public view returns(uint256) {\n\t\treturn _positionBook.length;\n\t}\n\n\tfunction getPositions(uint256 id) public view returns(uint256[2] positionsRet) {\n\t\tif (id <= _positionBook.length && id > 0) {\n\t\t\tpositionsRet = _positionBook[id.sub(1)];\n\t\t}\n\t}\n\n\tfunction prize(address addr) public view returns(uint256) {\n\t\tif (_winnerTotalPositionAmount == 0 || _prizePool == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn _winnerPositionAmounts[addr].mul(_prizePool).div(_winnerTotalPositionAmount);\n\t}\n\n\tfunction clearPrize(address addr) private {\n\t\tdelete _winnerPositionAmounts[addr];\n\t}\n\n\tfunction countWinners() public view returns(uint256) {\n\t\treturn _userAddrBook.length.div(100);\n\t}\n\n\tfunction allWinners() public view returns(address[]) {\n\t\treturn _winnerPurchaseListForAddr;\n\t}\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n\tfunction totalSupply() external view returns(uint256);\n\n\tfunction balanceOf(address who) external view returns(uint256);\n\n\tfunction allowance(address owner, address spender)\n\texternal view returns(uint256);\n\n\tfunction transfer(address to, uint256 value) external returns(bool);\n\n\tfunction approve(address spender, uint256 value)\n\texternal returns(bool);\n\n\tfunction transferFrom(address from, address to, uint256 value)\n\texternal returns(bool);\n\n\tevent Transfer(\n\t\taddress indexed from,\n\t\taddress indexed to,\n\t\tuint256 value\n\t);\n\n\tevent Approval(\n\t\taddress indexed owner,\n\t\taddress indexed spender,\n\t\tuint256 value\n\t);\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000af8d39416474817a677ef6a32abb425dbc74e2a40000000000000000000000001d42a7bc62c4b377105e0de6707a77fcfc71957f"
}