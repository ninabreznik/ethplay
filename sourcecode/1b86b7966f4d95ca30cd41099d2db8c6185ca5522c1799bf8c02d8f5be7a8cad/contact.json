{
  "address": "0x4fd62361e708309ec219fe63e5ce4676863f350d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VendiCoins",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-28\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\n\ncontract Owned {\n    address private _owner;\n    address private _newOwner;\n\n    event TransferredOwner(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n\t/**\n\t* @dev The Ownable constructor sets the original `owner` of the contract to the sender\n\t* account.\n\t*/\n    constructor() internal {\n        _owner = msg.sender;\n        emit TransferredOwner(address(0), _owner);\n    }\n\n\t/**\n\t* @return the address of the owner.\n\t*/\n\n    function owner() public view returns(address) {\n        return _owner;\n    }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n    modifier onlyOwner() {\n        require(isOwner(), \"Access is denied\");\n        _;\n    }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n    function isOwner() public view returns(bool) {\n        return msg.sender == _owner;\n    }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n    function renounceOwner() public onlyOwner {\n        emit TransferredOwner(_owner, address(0));\n        _owner = address(0);\n    }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n    function transferOwner(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Empty address\");\n        _newOwner = newOwner;\n    }\n\n\n    function cancelOwner() public onlyOwner {\n        _newOwner = address(0);\n    }\n\n    function confirmOwner() public {\n        require(msg.sender == _newOwner, \"Access is denied\");\n        emit TransferredOwner(_owner, _newOwner);\n        _owner = _newOwner;\n    }\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n */\n\ncontract ERC20CoreBase {\n\n    // string public name;\n    // string public symbol;\n    // uint8 public decimals;\n\n\n    mapping (address => uint) internal _balanceOf;\n    uint internal _totalSupply; \n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n\n    function totalSupply() public view returns(uint) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n\n    function balanceOf(address owner) public view returns(uint) {\n        return _balanceOf[owner];\n    }\n\n\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n\n    function _transfer(address from, address to, uint256 value) internal {\n        _checkRequireERC20(to, value, true, _balanceOf[from]);\n\n        _balanceOf[from] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(from, to, value);\n    }\n\n\n    /**\n    * @dev Internal function that mints an amount of the token and assigns it to\n    * an account. This encapsulates the modification of balances such that the\n    * proper events are emitted.\n    * @param account The account that will receive the created tokens.\n    * @param value The amount that will be created.\n    */\n\n    function _mint(address account, uint256 value) internal {\n        _checkRequireERC20(account, value, false, 0);\n        _totalSupply += value;\n        _balanceOf[account] += value;\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n    * @dev Internal function that burns an amount of the token of a given\n    * account.\n    * @param account The account whose tokens will be burnt.\n    * @param value The amount that will be burnt.\n    */\n\n    function _burn(address account, uint256 value) internal {\n        _checkRequireERC20(account, value, true, _balanceOf[account]);\n\n        _totalSupply -= value;\n        _balanceOf[account] -= value;\n        emit Transfer(account, address(0), value);\n    }\n\n\n    function _checkRequireERC20(address addr, uint value, bool checkMax, uint max) internal pure {\n        require(addr != address(0), \"Empty address\");\n        require(value > 0, \"Empty value\");\n        if (checkMax) {\n            require(value <= max, \"Out of value\");\n        }\n    }\n\n}\n\n\ncontract ERC20Core is ERC20CoreBase {\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n}\n\n\ncontract ERC20WithApproveBase is ERC20CoreBase {\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    ); \n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param owner address The address which owns the funds.\n    * @param spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    \n    function allowance(address owner, address spender) public view returns(uint) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param spender The address which will spend the funds.\n    * @param value The amount of tokens to be spent.\n    */\n\n    function _approve(address spender, uint256 value) internal {\n        _checkRequireERC20(spender, value, true, _balanceOf[msg.sender]);\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n    }\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param from address The address which you want to send tokens from\n    * @param to address The address which you want to transfer to\n    * @param value uint256 the amount of tokens to be transferred\n    */\n\n    function _transferFrom(address from, address to, uint256 value) internal {\n        _checkRequireERC20(to, value, true, _allowed[from][msg.sender]);\n\n        _allowed[from][msg.sender] -= value;\n        _transfer(from, to, value);\n    }\n\n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed_[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * @param spender The address which will spend the funds.\n    * @param value The amount of tokens to increase the allowance by.\n    */\n\n    function _increaseAllowance(address spender, uint256 value)  internal {\n        _checkRequireERC20(spender, value, false, 0);\n        require(_balanceOf[msg.sender] >= (_allowed[msg.sender][spender] + value), \"Out of value\");\n\n        _allowed[msg.sender][spender] += value;\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    }\n\n\n\n    /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed_[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * @param spender The address which will spend the funds.\n    * @param value The amount of tokens to decrease the allowance by.\n    */\n\n    function _decreaseAllowance(address spender, uint256 value) internal {\n        _checkRequireERC20(spender, value, true, _allowed[msg.sender][spender]);\n\n        _allowed[msg.sender][spender] -= value;\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    }\n\n}\n\n\ncontract ERC20WithApprove is ERC20WithApproveBase {\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param spender The address which will spend the funds.\n    * @param value The amount of tokens to be spent.\n    */\n\n    function approve(address spender, uint256 value) public {\n        _approve(spender, value);\n    }\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param from address The address which you want to send tokens from\n    * @param to address The address which you want to transfer to\n    * @param value uint256 the amount of tokens to be transferred\n    */\n\n    function transferFrom(address from, address to, uint256 value) public {\n        _transferFrom(from, to, value);\n    }\n\n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed_[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * @param spender The address which will spend the funds.\n    * @param value The amount of tokens to increase the allowance by.\n    */\n\n    function increaseAllowance(address spender, uint256 value)  public {\n        _increaseAllowance(spender, value);\n    }\n\n\n\n    /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed_[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * @param spender The address which will spend the funds.\n    * @param value The amount of tokens to decrease the allowance by.\n    */\n\n    function decreaseAllowance(address spender, uint256 value) public {\n        _decreaseAllowance(spender, value);\n    }\n}\n\n\ncontract VendiCoins is ERC20WithApprove, Owned {\n\tstring public name;\n\tstring public symbol;\n\tuint public decimals;\n\tbool public frozen;\n\n\n\t/**\n\t* Logged when token transfers were frozen/unfrozen.\n\t*/\n\tevent Freeze ();\n\tevent Unfreeze ();\n\n\n    modifier onlyUnfreeze() {\n        require(!frozen, \"Action temporarily paused\");\n        _;\n    }\n\n\n\n\tconstructor(string _name, string _symbol, uint _decimals, uint total, bool _frozen) public {\n\t\tname = _name;\n\t\tsymbol = _symbol;\n\t\tdecimals = _decimals;\n\t\tfrozen = _frozen;\n\n\t\t_mint(msg.sender, total);\n\t} \n\n\tfunction mint(address account, uint value) public onlyOwner {\n\t\t_mint(account, value);\n\t}\n\n\tfunction burn(uint value) public {\n\t\t_burn(msg.sender, value);\n\t} \n\n\n\tfunction transfer(address to, uint value) public onlyUnfreeze {\n\t\t_transfer(msg.sender, to, value);\n\t}\n\n\tfunction transferFrom(address from, address to, uint value) public onlyUnfreeze {\n\t\t_transferFrom(from, to, value);\n\t}\n\n\n\tfunction freezeTransfers () public onlyOwner {\n\t\tif (!frozen) {\n\t\t\tfrozen = true;\n\t\t\temit Freeze();\n\t\t}\n\t}\n\n\t/**\n\t* Unfreeze token transfers.\n\t* May only be called by smart contract owner.\n\t*/\n\tfunction unfreezeTransfers () public onlyOwner {\n\t\tif (frozen) {\n\t\t\tfrozen = false;\n\t\t\temit Unfreeze();\n\t\t}\n\t}\n}",
  "bytecode": "60806040523480156200001157600080fd5b50604051620013c6380380620013c683398101604081815282516020840151918401516060850151608086015160038054600160a060020a031916331790819055938701969490940194919390929091600160a060020a0391909116906000907f6675173a8fe1b89f5898691dfddeaf1677f56a1ec486d2643c36a42643a3d6e8908290a38451620000ab906005906020880190620002cf565b508351620000c1906006906020870190620002cf565b5060078390556008805460ff1916821515179055620000ea3383640100000000620000f5810204565b505050505062000374565b6200010d82826000806401000000006200016a810204565b6001805482019055600160a060020a038216600081815260208181526040808320805486019055805185815290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35050565b600160a060020a0384161515620001e257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f456d707479206164647265737300000000000000000000000000000000000000604482015290519081900360640190fd5b600083116200025257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f456d7074792076616c7565000000000000000000000000000000000000000000604482015290519081900360640190fd5b8115620002c95780831115620002c957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f7574206f662076616c75650000000000000000000000000000000000000000604482015290519081900360640190fd5b50505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200031257805160ff191683800117855562000342565b8280016001018555821562000342579182015b828111156200034257825182559160200191906001019062000325565b506200035092915062000354565b5090565b6200037191905b808211156200035057600081556001016200035b565b90565b61104280620003846000396000f3006080604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301502460811461012c578063054f7d9c1461014357806306fdde031461016c578063095ea7b3146101f657806318160ddd1461021a57806323b872dd1461024157806328c23a451461026b578063313ce5671461028057806331c420d41461029557806339509351146102aa57806340c10f19146102ce57806342966c68146102f25780634fb2e45d1461030a57806370a082311461032b5780638da5cb5b1461034c5780638f32d59b1461037d57806395d89b4114610392578063a457c2d7146103a7578063a9059cbb146103cb578063bd9b6d86146103ef578063d128f2de14610404578063dd62ed3e14610419575b600080fd5b34801561013857600080fd5b50610141610440565b005b34801561014f57600080fd5b506101586104d1565b604080519115158252519081900360200190f35b34801561017857600080fd5b506101816104da565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101bb5781810151838201526020016101a3565b50505050905090810190601f1680156101e85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020257600080fd5b50610141600160a060020a0360043516602435610568565b34801561022657600080fd5b5061022f610576565b60408051918252519081900360200190f35b34801561024d57600080fd5b50610141600160a060020a036004358116906024351660443561057c565b34801561027757600080fd5b506101416105e7565b34801561028c57600080fd5b5061022f61068a565b3480156102a157600080fd5b50610141610690565b3480156102b657600080fd5b50610141600160a060020a036004351660243561071c565b3480156102da57600080fd5b50610141600160a060020a0360043516602435610726565b3480156102fe57600080fd5b5061014160043561077c565b34801561031657600080fd5b50610141600160a060020a0360043516610789565b34801561033757600080fd5b5061022f600160a060020a0360043516610864565b34801561035857600080fd5b5061036161087f565b60408051600160a060020a039092168252519081900360200190f35b34801561038957600080fd5b5061015861088e565b34801561039e57600080fd5b5061018161089f565b3480156103b357600080fd5b50610141600160a060020a03600435166024356108fa565b3480156103d757600080fd5b50610141600160a060020a0360043516602435610904565b3480156103fb57600080fd5b5061014161096a565b34801561041057600080fd5b50610141610a2a565b34801561042557600080fd5b5061022f600160a060020a0360043581169060243516610a95565b61044861088e565b151561048c576040805160e560020a62461bcd0281526020600482015260106024820152600080516020610ff7833981519152604482015290519081900360640190fd5b60085460ff1615156104cf576008805460ff191660011790556040517f615acbaede366d76a8b8cb2a9ada6a71495f0786513d71aa97aaf0c3910b78de90600090a15b565b60085460ff1681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105605780601f1061053557610100808354040283529160200191610560565b820191906000526020600020905b81548152906001019060200180831161054357829003601f168201915b505050505081565b6105728282610ac0565b5050565b60015490565b60085460ff16156105d7576040805160e560020a62461bcd02815260206004820152601960248201527f416374696f6e2074656d706f726172696c792070617573656400000000000000604482015290519081900360640190fd5b6105e2838383610b42565b505050565b6105ef61088e565b1515610633576040805160e560020a62461bcd0281526020600482015260106024820152600080516020610ff7833981519152604482015290519081900360640190fd5b600354604051600091600160a060020a0316907f6675173a8fe1b89f5898691dfddeaf1677f56a1ec486d2643c36a42643a3d6e8908390a36003805473ffffffffffffffffffffffffffffffffffffffff19169055565b60075481565b61069861088e565b15156106dc576040805160e560020a62461bcd0281526020600482015260106024820152600080516020610ff7833981519152604482015290519081900360640190fd5b60085460ff16156104cf576008805460ff191690556040517f2f05ba71d0df11bf5fa562a6569d70c4f80da84284badbe015ce1456063d0ded90600090a1565b6105728282610bab565b61072e61088e565b1515610772576040805160e560020a62461bcd0281526020600482015260106024820152600080516020610ff7833981519152604482015290519081900360640190fd5b6105728282610ca6565b6107863382610d10565b50565b61079161088e565b15156107d5576040805160e560020a62461bcd0281526020600482015260106024820152600080516020610ff7833981519152604482015290519081900360640190fd5b600160a060020a0381161515610835576040805160e560020a62461bcd02815260206004820152600d60248201527f456d707479206164647265737300000000000000000000000000000000000000604482015290519081900360640190fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a031690565b600354600160a060020a0316331490565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105605780601f1061053557610100808354040283529160200191610560565b6105728282610da3565b60085460ff161561095f576040805160e560020a62461bcd02815260206004820152601960248201527f416374696f6e2074656d706f726172696c792070617573656400000000000000604482015290519081900360640190fd5b610572338383610e3f565b600454600160a060020a031633146109ba576040805160e560020a62461bcd0281526020600482015260106024820152600080516020610ff7833981519152604482015290519081900360640190fd5b600454600354604051600160a060020a0392831692909116907f6675173a8fe1b89f5898691dfddeaf1677f56a1ec486d2643c36a42643a3d6e890600090a36004546003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055565b610a3261088e565b1515610a76576040805160e560020a62461bcd0281526020600482015260106024820152600080516020610ff7833981519152604482015290519081900360640190fd5b6004805473ffffffffffffffffffffffffffffffffffffffff19169055565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b33600090815260208190526040902054610ae09083908390600190610eda565b336000818152600260209081526040808320600160a060020a03871680855290835292819020859055805185815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35050565b600160a060020a0383166000908152600260209081526040808320338452909152902054610b769083908390600190610eda565b600160a060020a03831660009081526002602090815260408083203384529091529020805482900390556105e2838383610e3f565b610bb88282600080610eda565b336000818152600260209081526040808320600160a060020a0387168452825280832054938352908290529020549082011115610c3f576040805160e560020a62461bcd02815260206004820152600c60248201527f4f7574206f662076616c75650000000000000000000000000000000000000000604482015290519081900360640190fd5b336000818152600260209081526040808320600160a060020a038716808552908352928190208054860190819055815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35050565b610cb38282600080610eda565b6001805482019055600160a060020a038216600081815260208181526040808320805486019055805185815290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35050565b610d418282600160008087600160a060020a0316600160a060020a0316815260200190815260200160002054610eda565b600180548290039055600160a060020a03821660008181526020818152604080832080548690039055805185815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35050565b336000908152600260209081526040808320600160a060020a0386168452909152902054610dd79083908390600190610eda565b336000818152600260209081526040808320600160a060020a03871680855290835292819020805486900390819055815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35050565b610e708282600160008088600160a060020a0316600160a060020a0316815260200190815260200160002054610eda565b600160a060020a0380841660008181526020818152604080832080548790039055938616808352918490208054860190558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3505050565b600160a060020a0384161515610f3a576040805160e560020a62461bcd02815260206004820152600d60248201527f456d707479206164647265737300000000000000000000000000000000000000604482015290519081900360640190fd5b60008311610f92576040805160e560020a62461bcd02815260206004820152600b60248201527f456d7074792076616c7565000000000000000000000000000000000000000000604482015290519081900360640190fd5b8115610ff05780831115610ff0576040805160e560020a62461bcd02815260206004820152600c60248201527f4f7574206f662076616c75650000000000000000000000000000000000000000604482015290519081900360640190fd5b5050505056004163636573732069732064656e69656400000000000000000000000000000000a165627a7a72305820207fbcd2317eb0285c6da1c9c07706ef60061c5efcad06db912a573d17c3d6ee002900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000012a05f2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a56656e6469636f696e7300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000556454e4449000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000012a05f2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a56656e6469636f696e7300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000556454e4449000000000000000000000000000000000000000000000000000000"
}