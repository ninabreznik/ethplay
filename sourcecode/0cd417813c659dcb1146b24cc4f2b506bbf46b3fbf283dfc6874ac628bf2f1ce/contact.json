{
  "address": "0x1be138effe5fa00b4c2d5ec62b8d555646389476",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ESTTokenSale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-19\n*/\n\npragma solidity 0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor () public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n     emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ninterface Token {\n    function transfer(address _to, uint256 _amount) external  returns (bool success);\n    function balanceOf(address _owner) external view returns (uint256 balance);\n    function decimals()external view returns (uint8);\n}\n\n/**\n * @title Vault\n * @dev This contract is used for storing funds while a crowdsale\n * is in progress. Funds will be transferred to owner once sale ends\n */\ncontract Vault is Ownable {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) public deposited;\n    address public wallet;\n   \n    event Withdrawn(address _wallet);\n         \n    constructor (address _wallet) public {\n        require(_wallet != address(0));\n        wallet = _wallet;\n    }\n\n    function deposit(address investor) public onlyOwner  payable{\n        \n        deposited[investor] = deposited[investor].add(msg.value);\n        \n    }\n    \n    function withdrawToWallet() onlyOwner public{\n    \n    wallet.transfer(address(this).balance);\n     emit Withdrawn(wallet);\n  }\n}\n\n\ncontract ESTTokenSale is Ownable{\n      using SafeMath for uint256;\n      \n      //Token to be used for this sale\n      Token public token;\n      \n      //All funds will go into this vault\n      Vault public vault;\n\n     // This mapping stores the addresses of whitelisted users\n      mapping(address => bool) public whitelisted;\n  \n      //rate of token :  1 EST = 0.00005804 ETH\n      uint256 public rate = 58040000000000;\n      /*\n      *There will be 4 phases\n      * 1. Pre-sale\n      * 2. ICO Phase 1\n      * 3. ICO Phase 2\n      * 4. ICO Phase 3\n      */\n      struct PhaseInfo{\n          uint256 cummulativeHardCap;\n          uint256 startTime;\n          uint256 endTime;\n          uint8 bonusPercentages;\n          uint256 weiRaised;\n      }\n      \n      //info of each phase\n      PhaseInfo[] public phases;\n      \n      //Total funding\n      uint256 public totalFunding;\n      \n      //total tokens available for sale\n      uint256 tokensAvailableForSale = 45050000000000000; //considering 8 decimal places\n      \n      \n      uint8 public noOfPhases;\n      \n      \n      //Keep track of whether contract is up or not\n      bool public contractUp;\n      \n      //Keep track of whether the sale has ended or not\n      bool public saleEnded;\n      \n      //Event to trigger Sale stop\n      event SaleStopped(address _owner, uint256 time);\n      \n      //Event to trigger normal flow of sale end\n      event SaleEnded(address _owner, uint256 time);\n      \n      //Event to add user to the whitelist\n      event LogUserAdded(address user);\n\n      //Event to remove user to the whitelist\n      event LogUserRemoved(address user);\n    \n     /**\n     * event for token purchase logging\n     * @param purchaser who paid for the tokens\n     * @param beneficiary who got the tokens\n     * @param value weis paid for purchase\n     * @param amount amount of tokens purchased\n     */\n     event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n    \n    //modifiers    \n    modifier _contractUp(){\n        require(contractUp);\n        _;\n    }\n  \n     modifier nonZeroAddress(address _to) {\n        require(_to != address(0));\n        _;\n    }\n    \n        \n    modifier _saleEnded() {\n        require(saleEnded);\n        _;\n    }\n    \n    modifier _saleNotEnded() {\n        require(!saleEnded);\n        _;\n    }\n  \n    \n    /**\n    *     @dev Check if sale contract has enough tokens on its account balance \n    *     to reward all possible participations within sale period\n    */\n    function powerUpContract() external onlyOwner {\n        // Contract should not be powered up previously\n        require(!contractUp);\n\n        // Contract should have enough EST credits\n        require(token.balanceOf(this) >= tokensAvailableForSale);\n        \n        //activate the sale process\n        contractUp = true;\n    }\n    \n    //for Emergency/Hard stop of the sale\n    function emergencyStop() external onlyOwner _contractUp _saleNotEnded{\n    \n      saleEnded = true;    \n        \n      emit SaleStopped(msg.sender, now);\n    }\n    \n    /**\n   * @dev Must be called to end the sale\n   */\n\n   function endSale() public onlyOwner _contractUp _saleNotEnded {\n\n       require(saleTimeOver());\n\n       saleEnded = true;\n       emit SaleEnded(msg.sender, now);\n   }\n    \n\n      // @return true if all the tiers has been ended\n  function saleTimeOver() public view returns (bool) {\n    \n    return now > phases[noOfPhases-1].endTime;\n  }\n\n  \n  /**\n  * @dev Can be called only once. The method to allow owner to set tier information\n  * @param _noOfPhases The integer to set number of tiers\n  * @param _startTimes The array containing start time of each tier\n  * @param _endTimes The array containing end time of each tier\n  * @param _cummulativeHardCaps The array containing cumulative hard cap for each tier\n  * @param _bonusPercentages The array containing bonus percentage for each tier\n  * The arrays should be in sync with each other. For each index 0 for each of the array should contain info about Tier 1, similarly for Tier2, 3 and 4 .\n  * Sales hard cap will be the hard cap of last tier\n  */\n  function setTiersInfo(uint8 _noOfPhases, uint256[] _startTimes, uint256[] _endTimes, uint256[] _cummulativeHardCaps, uint8[4] _bonusPercentages)private {\n    \n    \n    require(_noOfPhases == 4);\n    \n    //Each array should contain info about each tier\n    require(_startTimes.length == _noOfPhases);\n    require(_endTimes.length ==_noOfPhases);\n    require(_cummulativeHardCaps.length ==_noOfPhases);\n    require(_bonusPercentages.length ==_noOfPhases);\n    \n    noOfPhases = _noOfPhases;\n    \n    for(uint8 i = 0; i < _noOfPhases; i++){\n        require(_cummulativeHardCaps[i] > 0);\n        require(_endTimes[i] > _startTimes[i]);\n        if(i > 0){\n            \n            //start time of this tier should be greater than previous tier\n            require(_startTimes[i] > _endTimes[i-1]);\n            \n            phases.push(PhaseInfo({\n                cummulativeHardCap:_cummulativeHardCaps[i],\n                startTime:_startTimes[i],\n                endTime:_endTimes[i],\n                bonusPercentages:_bonusPercentages[i],\n                weiRaised:0\n            }));\n        }\n        else{\n            //start time of tier1 should be greater than current time\n            require(_startTimes[i] > now);\n          \n            phases.push(PhaseInfo({\n                cummulativeHardCap:_cummulativeHardCaps[i],\n                startTime:_startTimes[i],\n                endTime:_endTimes[i],\n                bonusPercentages:_bonusPercentages[i],\n                weiRaised:0\n            }));\n        }\n    }\n  }\n  \n  \n    /**\n    * @dev Constructor method\n    * @param _tokenToBeUsed Address of the token to be used for Sales\n    * @param _wallet Address of the wallet which will receive the collected funds\n    */  \n    constructor (address _tokenToBeUsed, address _wallet)public nonZeroAddress(_tokenToBeUsed) nonZeroAddress(_wallet){\n        \n        token = Token(_tokenToBeUsed);\n        vault = new Vault(_wallet);\n        \n        uint256[] memory startTimes = new uint256[](4);\n        uint256[] memory endTimes = new uint256[](4);\n        uint256[] memory cummulativeHardCaps = new uint256[](4);\n        uint8 [4] memory bonusPercentages;\n        \n        //pre-sales\n        startTimes[0] = 1532044800; //JULY 20, 2018 12:00:00 AM GMT\n        endTimes[0] = 1535759999; //AUGUST 31, 2018 11:59:59 PM GMT\n        cummulativeHardCaps[0] = 2107040600000000000000 wei;\n        bonusPercentages[0] = 67;\n        \n        //phase-1\n        startTimes[1] = 1535846400; //SEPTEMBER 02, 2018 12:00:00 AM GMT \n        endTimes[1] = 1539647999; //OCTOBER 15, 2018 11:59:59 PM GMT\n        cummulativeHardCaps[1] = 7766345900000000000000 wei;\n        bonusPercentages[1] = 33;\n        \n        \n        //phase-2\n        startTimes[2] = 1539648000; //OCTOBER 16, 2018 12:00:00 AM GMT\n        endTimes[2] = 1543622399; //NOVEMBER 30, 2018 11:59:59 PM GMT\n        cummulativeHardCaps[2] = 14180545900000000000000 wei;\n        bonusPercentages[2] = 18;\n        \n        //phase-3\n        startTimes[3] = 1543622400; //DECEMBER 01, 2018 12:00:00 AM GMT\n        endTimes[3] = 1546300799; //DECEMBER 31, 2018 11:59:59 PM GMT\n        cummulativeHardCaps[3] = 21197987200000000000000 wei;\n        bonusPercentages[3] = 8;\n\n        setTiersInfo(4, startTimes, endTimes, cummulativeHardCaps, bonusPercentages);\n        \n    }\n    \n\n   //Fallback function used to buytokens\n   function()public payable{\n       buyTokens(msg.sender);\n   }\n   \n   function getFundingInfoOfPhase(uint8 phase) public view returns (uint256){\n       \n       PhaseInfo storage currentlyRunningPhase = phases[uint256(phase)];\n       \n       return currentlyRunningPhase.weiRaised;\n       \n   } \n   \n   /**\n   * @dev Low level token purchase function\n   * @param beneficiary The address who will receive the tokens for this transaction\n   */\n   function buyTokens(address beneficiary)public _contractUp _saleNotEnded nonZeroAddress(beneficiary) payable returns(bool){\n       \n       require(whitelisted[beneficiary]);\n\n       int8 currentPhaseIndex = getCurrentlyRunningPhase();\n       assert(currentPhaseIndex >= 0);\n       \n        // recheck this for storage and memory\n       PhaseInfo storage currentlyRunningPhase = phases[uint256(currentPhaseIndex)];\n       \n       \n       uint256 weiAmount = msg.value;\n\n       //Check cummulative Hard Cap for this phase has not been reached\n       require(weiAmount.add(totalFunding) <= currentlyRunningPhase.cummulativeHardCap);\n       \n       \n       uint256 tokens = weiAmount.div(rate).mul(100000000);//considering decimal places to be 8 for token\n       \n       uint256 bonusedTokens = applyBonus(tokens, currentlyRunningPhase.bonusPercentages);\n             \n       totalFunding = totalFunding.add(weiAmount);\n       \n       currentlyRunningPhase.weiRaised = currentlyRunningPhase.weiRaised.add(weiAmount);\n       \n       vault.deposit.value(msg.value)(msg.sender);\n       \n       token.transfer(beneficiary, bonusedTokens);\n       \n       emit TokenPurchase(msg.sender, beneficiary, weiAmount, bonusedTokens);\n\n       return true;\n       \n   }\n   \n    /**\n    *@dev Method to calculate bonus for the user as per currently running phase and contribution by the user\n    * @param tokens Total tokens purchased by the user\n    * @param percentage  of bonus  for the phase \n    */\n     function applyBonus(uint256 tokens, uint8 percentage) private pure returns  (uint256) {\n         \n         uint256 tokensToAdd = 0;\n         tokensToAdd = tokens.mul(percentage).div(100);\n         return tokens.add(tokensToAdd);\n    } \n    \n   /**\n    * @dev returns the currently running tier index as per time\n    * Return -1 if no tier is running currently\n    * */\n   function getCurrentlyRunningPhase()public view returns(int8){\n      for(uint8 i = 0; i < noOfPhases; i++){\n          if(now >= phases[i].startTime && now <= phases[i].endTime){\n              return int8(i);\n          }\n      }   \n      return -1;\n   }\n   \n   // Add a user to the whitelist\n   function addUser(address user) public nonZeroAddress(user) onlyOwner returns (bool) {\n\n       require(whitelisted[user] == false);\n       \n       whitelisted[user] = true;\n\n       emit LogUserAdded(user);\n       \n       return true;\n\n    }\n\n    // Remove an user from the whitelist\n    function removeUser(address user) public nonZeroAddress(user) onlyOwner returns(bool){\n      \n        require(whitelisted[user] = true);\n\n        whitelisted[user] = false;\n        \n        emit LogUserRemoved(user);\n        \n        return true;\n\n\n    }\n\n    // Add many users in one go to the whitelist\n    function addManyUsers(address[] users)public onlyOwner {\n        \n        require(users.length < 100);\n\n        for (uint8 index = 0; index < users.length; index++) {\n\n             whitelisted[users[index]] = true;\n\n             emit LogUserAdded(users[index]);\n\n        }\n    }\n\n     //Method to check whether a user is there in the whitelist or not\n    function checkUser(address user) onlyOwner public view  returns (bool){\n        return whitelisted[user];\n    }\n   \n   /**\n   * @dev Get funding info of user/address. It will return how much funding the user has made in terms of wei\n   */\n   function getFundingInfoForUser(address _user)public view nonZeroAddress(_user) returns(uint256){\n       return vault.deposited(_user);\n   }\n   \n   \n   /**\n   *@dev Method to transfer all remanining tokens left to owner left with the sales contract after the sale has ended\n   */\n   function transferRemainingTokens()public onlyOwner _contractUp _saleEnded {\n       \n       token.transfer(msg.sender,address(this).balance);\n      \n   }\n   \n   //method to check how many tokens are left\n   function tokensLeftForSale() public view returns (uint256){\n       return token.balanceOf(address(this));\n   }\n   \n   //method to check the user balance\n   function checkUserTokenBalance(address _user) public view returns(uint256) {\n       return token.balanceOf(_user);\n   }\n   \n   //method to check how many tokens have been sold out till now out of 450.5 Million\n   function tokensSold() public view returns (uint256) {\n       return tokensAvailableForSale.sub(token.balanceOf(address(this)));\n   }\n   \n   //Allowing owner to transfer the  money rasied to the wallet address\n   function withDrawFunds()public onlyOwner _contractUp {\n      \n       vault.withdrawToWallet();\n    }\n      \n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getFundingInfoForUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"phase\",\"type\":\"uint8\"}],\"name\":\"getFundingInfoOfPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentlyRunningPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phases\",\"outputs\":[{\"name\":\"cummulativeHardCap\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"bonusPercentages\",\"type\":\"uint8\"},{\"name\":\"weiRaised\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkUserTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"powerUpContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyStop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferRemainingTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleTimeOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensLeftForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"noOfPhases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractUp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withDrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"addManyUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenToBeUsed\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SaleStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SaleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"LogUserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"LogUserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526534c97d95300060045566a00cbc7f21a0006007553480156200002657600080fd5b5060405160408062001d8b833981016040528051602090910151606080806200004e6200068f565b60008054600160a060020a0319163317905585600160a060020a03811615156200007757600080fd5b85600160a060020a03811615156200008e57600080fd5b60018054600160a060020a031916600160a060020a038a1617905586620000b4620006ae565b600160a060020a03909116815260405190819003602001906000f080158015620000e2573d6000803e3d6000fd5b5060028054600160a060020a031916600160a060020a039290921691909117905560408051600480825260a082019092529060208201608080388339505060408051600480825260a08201909252929850905060208201608080388339505060408051600480825260a08201909252929750905060208201608080388339019050509350635b5126008660008151811015156200017b57fe5b602090810290910101528451635b89d67f90869060009081106200019b57fe5b6020908102909101015283516872390ff61ed5ed80009085906000908110620001c057fe5b6020908102919091010152604383528551635b8b28009087906001908110620001e557fe5b602090810290910101528451635bc529ff90869060019081106200020557fe5b6020908102909101015283516901a503b3502f9766c00090859060019081106200022b57fe5b6020908102919091018101919091526021908401528551635bc52a0090879060029081106200025657fe5b602090810290910101528451635c01ceff90869060029081106200027657fe5b602090810290910101528351690300ba9b644c3df2c00090859060029081106200029c57fe5b6020908102919091010152601260408401528551635c01cf009087906003908110620002c457fe5b602090810290910101528451635c2aad7f9086906003908110620002e457fe5b60209081029091010152835169047d252b16a67d58000090859060039081106200030a57fe5b6020908102919091010152600860608401526200033560048787878764010000000062000343810204565b5050505050505050620006bf565b6000600460ff8716146200035657600080fd5b845160ff8716146200036757600080fd5b835160ff8716146200037857600080fd5b825160ff8716146200038957600080fd5b600460ff8716146200039a57600080fd5b506008805460ff191660ff871617905560005b8560ff168160ff16101562000687576000838260ff16815181101515620003d057fe5b6020908102909101015111620003e557600080fd5b848160ff16815181101515620003f757fe5b90602001906020020151848260ff168151811015156200041357fe5b60209081029091010151116200042857600080fd5b60008160ff1611156200056b57836001820360ff168151811015156200044a57fe5b90602001906020020151858260ff168151811015156200046657fe5b60209081029091010151116200047b57600080fd5b600560a060405190810160405280858460ff168151811015156200049b57fe5b906020019060200201518152602001878460ff16815181101515620004bc57fe5b906020019060200201518152602001868460ff16815181101515620004dd57fe5b60209081029091018101518252018460ff851660048110620004fb57fe5b6020908102919091015160ff90811683526000928201839052845460018082018755958452928290208451600590940201928355908301519382019390935560408201516002820155606082015160038201805460ff19169190941617909255608001516004909101556200067e565b42858260ff168151811015156200057e57fe5b60209081029091010151116200059357600080fd5b600560a060405190810160405280858460ff16815181101515620005b357fe5b906020019060200201518152602001878460ff16815181101515620005d457fe5b906020019060200201518152602001868460ff16815181101515620005f557fe5b60209081029091018101518252018460ff8516600481106200061357fe5b6020908102919091015160ff90811683526000928201839052845460018082018755958452928290208451600590940201928355908301519382019390935560408201516002820155606082015160038201805460ff19169190941617909255608001516004909101555b600101620003ad565b505050505050565b6080604051908101604052806004906020820280388339509192915050565b6040516103ae80620019dd83390190565b61130e80620006cf6000396000f3006080604052600436106101695763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306d145c981146101755780631a6d7561146101a85780631b35f56f146101c35780631e9d48cf146101f15780632c4e722e146102265780632e37eef61461023b578063380d831b146102815780633a7befc614610298578063421b2d8b146102b9578063518ab2a8146102da5780635b389dbb146102ef57806363a599a41461030457806363cc4aa2146103195780638b6932f11461032e5780638da5cb5b1461034357806396b58ac81461037457806398575188146103895780639b8906ae146103aa578063a0edc204146103bf578063ac270c37146103ea578063b78da386146103ff578063d936547e14610414578063ec8ac4d814610435578063ed28ef5114610449578063f2fde38b1461049e578063fbfa77cf146104bf578063fc0c546a146104d4578063fe47a8a7146104e9575b610172336104fe565b50005b34801561018157600080fd5b50610196600160a060020a03600435166107bc565b60408051918252519081900360200190f35b3480156101b457600080fd5b5061019660ff6004351661086f565b3480156101cf57600080fd5b506101d861089f565b60408051600092830b90920b8252519081900360200190f35b3480156101fd57600080fd5b50610212600160a060020a0360043516610927565b604080519115158252519081900360200190f35b34801561023257600080fd5b5061019661095e565b34801561024757600080fd5b50610253600435610964565b6040805195865260208601949094528484019290925260ff1660608401526080830152519081900360a00190f35b34801561028d57600080fd5b506102966109a9565b005b3480156102a457600080fd5b50610196600160a060020a0360043516610a4c565b3480156102c557600080fd5b50610212600160a060020a0360043516610ad3565b3480156102e657600080fd5b50610196610b89565b3480156102fb57600080fd5b50610296610c1f565b34801561031057600080fd5b50610296610ce6565b34801561032557600080fd5b50610296610d76565b34801561033a57600080fd5b50610212610e55565b34801561034f57600080fd5b50610358610e8b565b60408051600160a060020a039092168252519081900360200190f35b34801561038057600080fd5b50610196610e9a565b34801561039557600080fd5b50610212600160a060020a0360043516610f1a565b3480156103b657600080fd5b50610212610fad565b3480156103cb57600080fd5b506103d4610fbc565b6040805160ff9092168252519081900360200190f35b3480156103f657600080fd5b50610212610fc5565b34801561040b57600080fd5b50610296610fd3565b34801561042057600080fd5b50610212600160a060020a0360043516611086565b610212600160a060020a03600435166104fe565b34801561045557600080fd5b50604080516020600480358082013583810280860185019096528085526102969536959394602494938501929182918501908490808284375094975061109b9650505050505050565b3480156104aa57600080fd5b50610296600160a060020a036004351661117b565b3480156104cb57600080fd5b5061035861120f565b3480156104e057600080fd5b5061035861121e565b3480156104f557600080fd5b5061019661122d565b600080600080600080600860019054906101000a900460ff16151561052257600080fd5b60085462010000900460ff161561053857600080fd5b86600160a060020a038116151561054e57600080fd5b600160a060020a03881660009081526003602052604090205460ff16151561057557600080fd5b61057d61089f565b9550600086810b121561058c57fe5b60058660000b81548110151561059e57fe5b9060005260206000209060050201945034935084600001546105cb6006548661123390919063ffffffff16565b11156105d657600080fd5b6105ff6305f5e1006105f36004548761124d90919063ffffffff16565b9063ffffffff61126416565b600386015490935061061590849060ff1661128f565b60065490925061062b908563ffffffff61123316565b6006556004850154610643908563ffffffff61123316565b600480870191909155600254604080517ff340fa01000000000000000000000000000000000000000000000000000000008152339381019390935251600160a060020a039091169163f340fa0191349160248082019260009290919082900301818588803b1580156106b457600080fd5b505af11580156106c8573d6000803e3d6000fd5b5050600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038e8116600483015260248201899052915191909216945063a9059cbb9350604480830193506020928290030181600087803b15801561073a57600080fd5b505af115801561074e573d6000803e3d6000fd5b505050506040513d602081101561076457600080fd5b505060408051858152602081018490528151600160a060020a038b169233927f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18929081900390910190a3506001979650505050505050565b600081600160a060020a03811615156107d457600080fd5b600254604080517fcb13cddb000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301529151919092169163cb13cddb9160248083019260209291908290030181600087803b15801561083c57600080fd5b505af1158015610850573d6000803e3d6000fd5b505050506040513d602081101561086657600080fd5b50519392505050565b60008060058360ff1681548110151561088457fe5b60009182526020909120600460059092020101549392505050565b6000805b60085460ff908116908216101561091d576005805460ff83169081106108c557fe5b906000526020600020906005020160010154421015801561090857506005805460ff83169081106108f257fe5b9060005260206000209060050201600201544211155b1561091557809150610923565b6001016108a3565b60001991505b5090565b60008054600160a060020a0316331461093f57600080fd5b50600160a060020a031660009081526003602052604090205460ff1690565b60045481565b600580548290811061097257fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401549294509092909160ff9091169085565b600054600160a060020a031633146109c057600080fd5b600854610100900460ff1615156109d657600080fd5b60085462010000900460ff16156109ec57600080fd5b6109f4610e55565b15156109ff57600080fd5b6008805462ff00001916620100001790556040805133815242602082015281517f349f939aaa1895cee67485b264474f0d2a1aac01083917b8ea9f96e4036cbb27929181900390910190a1565b6001546040805160e060020a6370a08231028152600160a060020a038481166004830152915160009392909216916370a082319160248082019260209290919082900301818787803b158015610aa157600080fd5b505af1158015610ab5573d6000803e3d6000fd5b505050506040513d6020811015610acb57600080fd5b505192915050565b600081600160a060020a0381161515610aeb57600080fd5b600054600160a060020a03163314610b0257600080fd5b600160a060020a03831660009081526003602052604090205460ff1615610b2857600080fd5b600160a060020a038316600081815260036020908152604091829020805460ff19166001179055815192835290517f187047b56eb20e7a0313254e37dc60b8c1a9d25707114d2caaaee420b2b7ec239281900390910190a150600192915050565b6001546040805160e060020a6370a082310281523060048201529051600092610c1a92600160a060020a03909116916370a082319160248082019260209290919082900301818887803b158015610bdf57600080fd5b505af1158015610bf3573d6000803e3d6000fd5b505050506040513d6020811015610c0957600080fd5b50516007549063ffffffff6112d016565b905090565b600054600160a060020a03163314610c3657600080fd5b600854610100900460ff1615610c4b57600080fd5b6007546001546040805160e060020a6370a082310281523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b158015610c9e57600080fd5b505af1158015610cb2573d6000803e3d6000fd5b505050506040513d6020811015610cc857600080fd5b50511015610cd557600080fd5b6008805461ff001916610100179055565b600054600160a060020a03163314610cfd57600080fd5b600854610100900460ff161515610d1357600080fd5b60085462010000900460ff1615610d2957600080fd5b6008805462ff00001916620100001790556040805133815242602082015281517f4898556e3bd8b06263e50e938f30f736c1fd2030390474dd6bc0b28d8c545037929181900390910190a1565b600054600160a060020a03163314610d8d57600080fd5b600854610100900460ff161515610da357600080fd5b60085462010000900460ff161515610dba57600080fd5b600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152303160248201529051600160a060020a039092169163a9059cbb916044808201926020929091908290030181600087803b158015610e2757600080fd5b505af1158015610e3b573d6000803e3d6000fd5b505050506040513d6020811015610e5157600080fd5b5050565b6008546005805460009260001960ff9182160116908110610e7257fe5b9060005260206000209060050201600201544211905090565b600054600160a060020a031681565b6001546040805160e060020a6370a082310281523060048201529051600092600160a060020a0316916370a0823191602480830192602092919082900301818787803b158015610ee957600080fd5b505af1158015610efd573d6000803e3d6000fd5b505050506040513d6020811015610f1357600080fd5b5051905090565b600081600160a060020a0381161515610f3257600080fd5b600054600160a060020a03163314610f4957600080fd5b600160a060020a0383166000818152600360209081526040918290208054600160ff1991821617169055815192835290517f820cfa068d67f8bd8bb05be4525aca026c8a81dd1925efc320ecd01ab716569f9281900390910190a150600192915050565b60085462010000900460ff1681565b60085460ff1681565b600854610100900460ff1681565b600054600160a060020a03163314610fea57600080fd5b600854610100900460ff16151561100057600080fd5b600260009054906101000a9004600160a060020a0316600160a060020a03166303ba27f66040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561106c57600080fd5b505af1158015611080573d6000803e3d6000fd5b50505050565b60036020526000908152604090205460ff1681565b60008054600160a060020a031633146110b357600080fd5b81516064116110c157600080fd5b5060005b81518160ff161015610e5157600160036000848460ff168151811015156110e857fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff191691151591909117905581517f187047b56eb20e7a0313254e37dc60b8c1a9d25707114d2caaaee420b2b7ec2390839060ff841690811061114d57fe5b602090810290910181015160408051600160a060020a039092168252519081900390910190a16001016110c5565b600054600160a060020a0316331461119257600080fd5b600160a060020a03811615156111a757600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600160a060020a031681565b600154600160a060020a031681565b60065481565b60008282018381101561124257fe5b8091505b5092915050565b600080828481151561125b57fe5b04949350505050565b6000808315156112775760009150611246565b5082820282848281151561128757fe5b041461124257fe5b6000806112b660646112aa8660ff871663ffffffff61126416565b9063ffffffff61124d16565b90506112c8848263ffffffff61123316565b949350505050565b6000828211156112dc57fe5b509003905600a165627a7a72305820064ec42f9efed12118d439d7079466b11ae316720b080232313ac6d314f233850029608060405234801561001057600080fd5b506040516020806103ae833981016040525160008054600160a060020a03191633179055600160a060020a038116151561004957600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055610336806100786000396000f3006080604052600436106100775763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166303ba27f6811461007c578063521eb273146100935780638da5cb5b146100c4578063cb13cddb146100d9578063f2fde38b1461010c578063f340fa011461012d575b600080fd5b34801561008857600080fd5b50610091610141565b005b34801561009f57600080fd5b506100a86101d4565b60408051600160a060020a039092168252519081900360200190f35b3480156100d057600080fd5b506100a86101e3565b3480156100e557600080fd5b506100fa600160a060020a03600435166101f2565b60408051918252519081900360200190f35b34801561011857600080fd5b50610091600160a060020a0360043516610204565b610091600160a060020a0360043516610298565b600054600160a060020a0316331461015857600080fd5b600254604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015610192573d6000803e3d6000fd5b5060025460408051600160a060020a039092168252517ff45a04d08a70caa7eb4b747571305559ad9fdf4a093afd41506b35c8a306fa949181900360200190a1565b600254600160a060020a031681565b600054600160a060020a031681565b60016020526000908152604090205481565b600054600160a060020a0316331461021b57600080fd5b600160a060020a038116151561023057600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031633146102af57600080fd5b600160a060020a0381166000908152600160205260409020546102d8903463ffffffff6102f416565b600160a060020a03909116600090815260016020526040902055565b60008282018381101561030357fe5b93925050505600a165627a7a72305820b2aacc27130d4d6b547b948faa15acdad45bfed3e57ba18ec55184cb97e78c6d00290000000000000000000000002ce59e1f4c4159e087d1e2e16db2b606f67a2f3a00000000000000000000000035c80475dc70c70a52cb93646528377b43a8c53f",
  "constructorArguments": "0000000000000000000000002ce59e1f4c4159e087d1e2e16db2b606f67a2f3a00000000000000000000000035c80475dc70c70a52cb93646528377b43a8c53f"
}