{
  "address": "0xc19d0f1e2b38aa283e226ca4044766a43aa7b02b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SaverProxy",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-28\n*/\n\npragma solidity ^0.5.0;\n\n\ncontract TokenInterface {\n    function allowance(address, address) public returns (uint);\n    function balanceOf(address) public returns (uint);\n    function approve(address, uint) public;\n    function transfer(address, uint) public returns (bool);\n    function transferFrom(address, address, uint) public returns (bool);\n    function deposit() public payable;\n    function withdraw(uint) public;\n}\n\ncontract PipInterface {\n    function read() public returns (bytes32);\n}\n\ncontract PepInterface {\n    function peek() public returns (bytes32, bool);\n}\n\ncontract VoxInterface {\n    function par() public returns (uint);\n}\n\ncontract TubInterface {\n    event LogNewCup(address indexed lad, bytes32 cup);\n\n    function open() public returns (bytes32);\n    function join(uint) public;\n    function exit(uint) public;\n    function lock(bytes32, uint) public;\n    function free(bytes32, uint) public;\n    function draw(bytes32, uint) public;\n    function wipe(bytes32, uint) public;\n    function give(bytes32, address) public;\n    function shut(bytes32) public;\n    function bite(bytes32) public;\n    function cups(bytes32) public returns (address, uint, uint, uint);\n    function gem() public returns (TokenInterface);\n    function gov() public returns (TokenInterface);\n    function skr() public returns (TokenInterface);\n    function sai() public returns (TokenInterface);\n    function vox() public returns (VoxInterface);\n    function ask(uint) public returns (uint);\n    function mat() public returns (uint);\n    function chi() public returns (uint);\n    function ink(bytes32) public returns (uint);\n    function tab(bytes32) public returns (uint);\n    function rap(bytes32) public returns (uint);\n    function per() public returns (uint);\n    function pip() public returns (PipInterface);\n    function pep() public returns (PepInterface);\n    function tag() public returns (uint);\n    function drip() public;\n    function lad(bytes32 cup) public view returns (address);\n}\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint supply);\n    function balanceOf(address _owner) external view returns (uint balance);\n    function transfer(address _to, uint _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n    function approve(address _spender, uint _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\n    function decimals() external view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ninterface ExchangeInterface {\n    function swapEtherToToken (uint _ethAmount, address _tokenAddress) payable external returns(uint);\n    function swapTokenToEther (address _tokenAddress, uint _amount) external returns(uint);\n    function swapTokenToToken (address _srcAddr, address _destAddr, uint srcQty) external returns(uint);\n\n    function getExpectedRate(address src, address dest, uint srcQty) external\n        returns (uint expectedRate, uint slippageRate);\n}\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n/// @title SaverProxy implements advanced dashboard features repay/boost\ncontract SaverProxy is DSMath {\n    //KOVAN\n    // address public constant WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n    // address public constant DAI_ADDRESS = 0xC4375B7De8af5a38a93548eb8453a498222C4fF2;\n    // address public constant MKR_ADDRESS = 0xAaF64BFCC32d0F15873a02163e7E500671a4ffcD;\n    // address public constant VOX_ADDRESS = 0xBb4339c0aB5B1d9f14Bd6e3426444A1e9d86A1d9;\n    // address public constant PETH_ADDRESS = 0xf4d791139cE033Ad35DB2B2201435fAd668B1b64;\n    // address public constant KYBER_WRAPPER = 0x82CD6436c58A65E2D4263259EcA5843d3d7e0e65;\n    // address public constant TUB_ADDRESS = 0xa71937147b55Deb8a530C7229C442Fd3F31b7db2;\n    // address public constant ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    \n    // MAINNET\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address public constant DAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n    address public constant MKR_ADDRESS = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\n    address public constant VOX_ADDRESS = 0x9B0F70Df76165442ca6092939132bBAEA77f2d7A;\n    address public constant PETH_ADDRESS = 0xf53AD2c6851052A81B42133467480961B2321C09;\n    address public constant TUB_ADDRESS = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\n    address public constant ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address public constant KYBER_WRAPPER = 0x283Cc5C26e53D66ed2Ea252D986F094B37E6e895;\n\n    event Repay(address indexed owner, uint collateralAmount, uint daiAmount);\n    event Boost(address indexed owner, uint daiAmount, uint collateralAmount);\n\n    /// @notice Withdraws Eth collateral, swaps Eth -> Dai with Kyber, and pays back the debt in Dai\n    /// @dev If _buyMkr is false user needs to have MKR tokens and approve his DSProxy\n    /// @param _cup Id of the CDP\n    /// @param _amount Amount of Eth to sell, if the value is 0 it will take the max. avaialable amount\n    /// @param _buyMkr If true it will convert ETH -> MKR to pay stability fee, if false it will take MKR from user\n    /// @param _userAddr The address of the user who called the function, so we can send extra Dai to user\n    function repay(bytes32 _cup, uint _amount, bool _buyMkr, address _userAddr) public {\n        TubInterface tub = TubInterface(TUB_ADDRESS);\n\n        approveTub(DAI_ADDRESS);\n        approveTub(MKR_ADDRESS);\n        approveTub(PETH_ADDRESS);\n        approveTub(WETH_ADDRESS);\n\n        uint startingRatio = getRatio(tub, _cup);\n\n        if (_amount == 0) {\n            _amount = maxFreeCollateral(tub, _cup);\n        }\n\n        withdrawEth(tub, _cup, _amount);\n\n        uint daiAmount = wmul(_amount, estimatedDaiPrice(_amount));\n        uint daiDebt = daiAmount > getDebt(tub, _cup) ? getDebt(tub, _cup) : daiAmount;\n\n        if (_buyMkr) {\n            uint ethFee = stabilityFeeInEth(tub, _cup, daiDebt);\n            ExchangeInterface(KYBER_WRAPPER).swapEtherToToken.\n                            value(ethFee)(ethFee, MKR_ADDRESS);\n\n            _amount = sub(_amount, ethFee);\n        } else {\n            uint mkrAmount = stabilityFeeInMkr(tub, _cup, daiDebt);\n            ERC20(MKR_ADDRESS).transferFrom(msg.sender, address(this), mkrAmount);\n        }\n\n        daiAmount = ExchangeInterface(KYBER_WRAPPER).swapEtherToToken.\n                            value(_amount)(_amount, DAI_ADDRESS);\n        \n        if (daiAmount > daiDebt) {\n            tub.wipe(_cup, daiDebt);\n            ERC20(DAI_ADDRESS).transfer(_userAddr, sub(daiAmount, daiDebt));\n        } else {\n            tub.wipe(_cup, daiAmount);\n            require(getRatio(tub, _cup) > startingRatio, \"ratio must be better off at the end\");\n\n        }\n\n        emit Repay(msg.sender, _amount, daiAmount);\n    }\n\n    /// @notice Boost will draw Dai, swap Dai -> Eth on kyber, and add that Eth to the CDP\n    /// @dev Amount must be less then the max. amount available Dai to generate\n    /// @param _cup Id of the CDP\n    /// @param _amount Amount of Dai to sell, if the value is 0 it will take the max. avaialable amount \n    function boost(bytes32 _cup, uint _amount) public {\n        TubInterface tub = TubInterface(TUB_ADDRESS);\n\n        ERC20(WETH_ADDRESS).approve(TUB_ADDRESS, uint(-1));\n        ERC20(PETH_ADDRESS).approve(TUB_ADDRESS, uint(-1));\n        ERC20(DAI_ADDRESS).approve(TUB_ADDRESS, uint(-1));\n        \n        if (_amount == 0) {\n            _amount = maxFreeDai(tub, _cup);\n        }\n\n        uint startingCollateral = tub.ink(_cup);\n        \n        tub.draw(_cup, _amount);\n        \n        uint ethAmount = swapDaiAndLockEth(tub, _cup, _amount);\n\n        require(tub.ink(_cup) > startingCollateral, \"collateral must be bigger than starting point\");\n        \n        emit Boost(msg.sender, _amount, ethAmount);\n    }\n\n    /// @notice Max. amount of collateral available to withdraw\n    /// @param _tub Tub interface\n    /// @param _cup Id of the CDP\n    function maxFreeCollateral(TubInterface _tub, bytes32 _cup) public returns (uint) {\n        return sub(_tub.ink(_cup), wdiv(wmul(wmul(_tub.tab(_cup), rmul(_tub.mat(), WAD)),\n                VoxInterface(VOX_ADDRESS).par()), _tub.tag()));\n    }\n    \n    /// @notice Max. amount of Dai available to generate\n    /// @param _tub Tub interface\n    /// @param _cup Id of the CDP\n    function maxFreeDai(TubInterface _tub, bytes32 _cup) public returns (uint) {\n        return sub(wdiv(rmul(_tub.ink(_cup), _tub.tag()), rmul(_tub.mat(), WAD)), _tub.tab(_cup));\n    }\n\n    /// @notice Stability fee amount in Eth\n    /// @param _tub Tub interface\n    /// @param _cup Id of the CDP\n    /// @param _daiRepay Amount of dai we are repaying\n    function stabilityFeeInEth(TubInterface _tub, bytes32 _cup, uint _daiRepay) public returns (uint) {\n        uint feeInDai = rmul(_daiRepay, rdiv(_tub.rap(_cup), _tub.tab(_cup)));\n\n        bytes32 ethPrice = _tub.pip().read();\n\n        return wdiv(feeInDai, uint(ethPrice));\n    }\n\n    /// @notice Stability fee amount in Mkr\n    /// @param _tub Tub interface\n    /// @param _cup Id of the CDP\n    /// @param _daiRepay Amount of dai we are repaying\n    function stabilityFeeInMkr(TubInterface _tub, bytes32 _cup, uint _daiRepay) public returns (uint) {\n        bytes32 mkrPrice;\n        bool ok;\n\n        uint feeInDai = rmul(_daiRepay, rdiv(_tub.rap(_cup), _tub.tab(_cup)));\n\n        (mkrPrice, ok) = _tub.pep().peek();\n\n        return wdiv(feeInDai, uint(mkrPrice));\n    }\n    \n    /// @notice Helper function which swaps Dai for Eth and adds the collateral to the CDP\n    /// @param _tub Tub interface\n    /// @param _cup Id of the CDP\n    /// @param _daiAmount Amount of Dai to swap for Eth\n    function swapDaiAndLockEth(TubInterface _tub, bytes32 _cup, uint _daiAmount) internal returns(uint) {\n        ERC20(DAI_ADDRESS).transferFrom(address(this), KYBER_WRAPPER, _daiAmount);\n\n        uint ethAmount = ExchangeInterface(KYBER_WRAPPER).swapTokenToEther(DAI_ADDRESS, _daiAmount);\n        \n        _tub.gem().deposit.value(ethAmount)();\n\n        uint ink = rdiv(ethAmount, _tub.per());\n        \n        _tub.join(ink);\n\n        _tub.lock(_cup, ink);\n        \n        return ethAmount;\n    }\n\n    /// @notice Approve a token if it's not already approved\n    /// @param _tokenAddress Address of the ERC20 token we want to approve\n    function approveTub(address _tokenAddress) internal {\n        if (ERC20(_tokenAddress).allowance(msg.sender, _tokenAddress) != uint(-1)) {\n            ERC20(_tokenAddress).approve(TUB_ADDRESS, uint(-1));\n        }\n    }\n\n    /// @notice Returns the current collaterlization ratio for the CDP\n    /// @param _tub Tub interface\n    /// @param _cup Id of the CDP\n    function getRatio(TubInterface _tub, bytes32 _cup) internal returns(uint) {\n        return (wdiv(rmul(rmul(_tub.ink(_cup), _tub.tag()), WAD), _tub.tab(_cup)));\n    }\n\n    /// @notice Helper function which withdraws collateral from CDP\n    /// @param _tub Tub interface\n    /// @param _cup Id of the CDP\n    /// @param _ethAmount Amount of Eth to withdraw\n    function withdrawEth(TubInterface _tub, bytes32 _cup, uint _ethAmount) internal {\n        uint ink = rdiv(_ethAmount, _tub.per());\n        _tub.free(_cup, ink);\n        \n        _tub.exit(ink);\n        _tub.gem().withdraw(_ethAmount);\n    }\n\n    /// @notice Returns expected rate for Eth -> Dai conversion\n    /// @param _amount Amount of Ether\n    function estimatedDaiPrice(uint _amount) internal returns (uint expectedRate) {\n        (expectedRate, ) = ExchangeInterface(KYBER_WRAPPER).getExpectedRate(ETHER_ADDRESS, DAI_ADDRESS, _amount);\n    }\n\n    /// @notice Returns current Dai debt of the CDP\n    /// @param _tub Tub interface\n    /// @param _cup Id of the CDP\n    function getDebt(TubInterface _tub, bytes32 _cup) internal returns (uint debt) {\n        ( , , debt, ) = _tub.cups(_cup);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50612b08806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638ef124311161008c578063c9fde27011610066578063c9fde27014610437578063cf1d21c014610481578063d325a2c1146104cb578063f0d405e51461052d576100ea565b80638ef1243114610315578063b175afa114610381578063c387fd86146103cb576100ea565b80632a4c0a1a116100c85780632a4c0a1a146101d557806336e6da111461021f578063730fd68014610269578063825ffd92146102cb576100ea565b8063040141e5146100ef57806304500f4e1461013957806323a66a991461019d575b600080fd5b6100f7610577565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61019b6004803603608081101561014f57600080fd5b810190808035906020019092919080359060200190929190803515159060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061058f565b005b6101d3600480360360408110156101b357600080fd5b810190808035906020019092919080359060200190929190505050610c37565b005b6101dd6111dd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102276111f5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102b56004803603604081101561027f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061120d565b6040518082815260200191505060405180910390f35b6102d3611462565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61036b6004803603606081101561032b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505061147a565b6040518082815260200191505060405180910390f35b6103896116cd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610421600480360360608110156103e157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506116e5565b6040518082815260200191505060405180910390f35b61043f611949565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610489611961565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610517600480360360408110156104e157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611979565b6040518082815260200191505060405180910390f35b610535611c6d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b600073448a5065aebb8e423f0896e6c5d525c040f59af390506105c57389d24a6b4ccb1b6faa2625fe562bdd9a23260359611c85565b6105e2739f8f72aa9304c8b593d555f12ef6589cc3a579a2611c85565b6105ff73f53ad2c6851052a81b42133467480961b2321c09611c85565b61061c73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2611c85565b60006106288287611e92565b905060008514156106405761063d8287611979565b94505b61064b82878761205c565b600061065f8661065a886122bd565b612404565b9050600061066d8489612444565b82116106795781610684565b6106838489612444565b5b90508515610799576000610699858a8461147a565b905073283cc5c26e53d66ed2ea252d986f094b37e6e89573ffffffffffffffffffffffffffffffffffffffff166389c786268283739f8f72aa9304c8b593d555f12ef6589cc3a579a26040518463ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001925050506020604051808303818588803b15801561074a57600080fd5b505af115801561075e573d6000803e3d6000fd5b50505050506040513d602081101561077557600080fd5b8101908080519060200190929190505050506107918882612504565b9750506108b5565b60006107a6858a846116e5565b9050739f8f72aa9304c8b593d555f12ef6589cc3a579a273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561087757600080fd5b505af115801561088b573d6000803e3d6000fd5b505050506040513d60208110156108a157600080fd5b810190808051906020019092919050505050505b73283cc5c26e53d66ed2ea252d986f094b37e6e89573ffffffffffffffffffffffffffffffffffffffff166389c7862688897389d24a6b4ccb1b6faa2625fe562bdd9a232603596040518463ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001925050506020604051808303818588803b15801561096457600080fd5b505af1158015610978573d6000803e3d6000fd5b50505050506040513d602081101561098f57600080fd5b8101908080519060200190929190505050915080821115610b02578373ffffffffffffffffffffffffffffffffffffffff166373b3810189836040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b158015610a0557600080fd5b505af1158015610a19573d6000803e3d6000fd5b505050507389d24a6b4ccb1b6faa2625fe562bdd9a2326035973ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86610a588585612504565b6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610ac157600080fd5b505af1158015610ad5573d6000803e3d6000fd5b505050506040513d6020811015610aeb57600080fd5b810190808051906020019092919050505050610bd7565b8373ffffffffffffffffffffffffffffffffffffffff166373b3810189846040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b158015610b5d57600080fd5b505af1158015610b71573d6000803e3d6000fd5b5050505082610b80858a611e92565b11610bd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180612aba6023913960400191505060405180910390fd5b5b3373ffffffffffffffffffffffffffffffffffffffff167f77c6871227e5d2dec8dadd5354f78453203e22e669cd0ec4c19d9a8c5edb31d08884604051808381526020018281526020019250505060405180910390a25050505050505050565b600073448a5065aebb8e423f0896e6c5d525c040f59af3905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff1663095ea7b373448a5065aebb8e423f0896e6c5d525c040f59af37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610d1f57600080fd5b505af1158015610d33573d6000803e3d6000fd5b505050506040513d6020811015610d4957600080fd5b81019080805190602001909291905050505073f53ad2c6851052a81b42133467480961b2321c0973ffffffffffffffffffffffffffffffffffffffff1663095ea7b373448a5065aebb8e423f0896e6c5d525c040f59af37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610e2a57600080fd5b505af1158015610e3e573d6000803e3d6000fd5b505050506040513d6020811015610e5457600080fd5b8101908080519060200190929190505050507389d24a6b4ccb1b6faa2625fe562bdd9a2326035973ffffffffffffffffffffffffffffffffffffffff1663095ea7b373448a5065aebb8e423f0896e6c5d525c040f59af37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610f3557600080fd5b505af1158015610f49573d6000803e3d6000fd5b505050506040513d6020811015610f5f57600080fd5b8101908080519060200190929190505050506000821415610f8757610f84818461120d565b91505b60008173ffffffffffffffffffffffffffffffffffffffff16631f3634ed856040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015610fdc57600080fd5b505af1158015610ff0573d6000803e3d6000fd5b505050506040513d602081101561100657600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663440f19ba85856040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b15801561107457600080fd5b505af1158015611088573d6000803e3d6000fd5b50505050600061109983868661251e565b9050818373ffffffffffffffffffffffffffffffffffffffff16631f3634ed876040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b1580156110ef57600080fd5b505af1158015611103573d6000803e3d6000fd5b505050506040513d602081101561111957600080fd5b810190808051906020019092919050505011611180576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d815260200180612a8d602d913960400191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167faadc628cb4fd3bb7a62795eb460290459458bdc6f387ffde727c740f42c183378583604051808381526020018281526020019250505060405180910390a25050505050565b7389d24a6b4ccb1b6faa2625fe562bdd9a2326035981565b739b0f70df76165442ca6092939132bbaea77f2d7a81565b600061145a6113c761132e8573ffffffffffffffffffffffffffffffffffffffff16631f3634ed866040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561126b57600080fd5b505af115801561127f573d6000803e3d6000fd5b505050506040513d602081101561129557600080fd5b81019080805190602001909291905050508673ffffffffffffffffffffffffffffffffffffffff166351f910666040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156112ee57600080fd5b505af1158015611302573d6000803e3d6000fd5b505050506040513d602081101561131857600080fd5b810190808051906020019092919050505061298a565b6113c28673ffffffffffffffffffffffffffffffffffffffff1663ab0783da6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561137957600080fd5b505af115801561138d573d6000803e3d6000fd5b505050506040513d60208110156113a357600080fd5b8101908080519060200190929190505050670de0b6b3a764000061298a565b6129d2565b8473ffffffffffffffffffffffffffffffffffffffff1663f7c8d634856040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561141a57600080fd5b505af115801561142e573d6000803e3d6000fd5b505050506040513d602081101561144457600080fd5b8101908080519060200190929190505050612504565b905092915050565b739f8f72aa9304c8b593d555f12ef6589cc3a579a281565b6000806115aa836115a58773ffffffffffffffffffffffffffffffffffffffff16636f78ee0d886040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b1580156114d757600080fd5b505af11580156114eb573d6000803e3d6000fd5b505050506040513d602081101561150157600080fd5b81019080805190602001909291905050508873ffffffffffffffffffffffffffffffffffffffff1663f7c8d634896040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561156557600080fd5b505af1158015611579573d6000803e3d6000fd5b505050506040513d602081101561158f57600080fd5b8101908080519060200190929190505050612a0a565b61298a565b905060008573ffffffffffffffffffffffffffffffffffffffff1663d741e2f96040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156115f657600080fd5b505af115801561160a573d6000803e3d6000fd5b505050506040513d602081101561162057600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff166357de26a46040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561167857600080fd5b505af115801561168c573d6000803e3d6000fd5b505050506040513d60208110156116a257600080fd5b810190808051906020019092919050505090506116c2828260001c6129d2565b925050509392505050565b73283cc5c26e53d66ed2ea252d986f094b37e6e89581565b600080600080611818856118138973ffffffffffffffffffffffffffffffffffffffff16636f78ee0d8a6040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561174557600080fd5b505af1158015611759573d6000803e3d6000fd5b505050506040513d602081101561176f57600080fd5b81019080805190602001909291905050508a73ffffffffffffffffffffffffffffffffffffffff1663f7c8d6348b6040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b1580156117d357600080fd5b505af11580156117e7573d6000803e3d6000fd5b505050506040513d60208110156117fd57600080fd5b8101908080519060200190929190505050612a0a565b61298a565b90508673ffffffffffffffffffffffffffffffffffffffff1663ace237f56040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561186257600080fd5b505af1158015611876573d6000803e3d6000fd5b505050506040513d602081101561188c57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff166359e02dd76040518163ffffffff1660e01b81526004016040805180830381600087803b1580156118e357600080fd5b505af11580156118f7573d6000803e3d6000fd5b505050506040513d604081101561190d57600080fd5b810190808051906020019092919080519060200190929190505050809350819450505061193d818460001c6129d2565b93505050509392505050565b73f53ad2c6851052a81b42133467480961b2321c0981565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6000611c658373ffffffffffffffffffffffffffffffffffffffff16631f3634ed846040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b1580156119d157600080fd5b505af11580156119e5573d6000803e3d6000fd5b505050506040513d60208110156119fb57600080fd5b8101908080519060200190929190505050611c60611bd8611b3c8773ffffffffffffffffffffffffffffffffffffffff1663f7c8d634886040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015611a6857600080fd5b505af1158015611a7c573d6000803e3d6000fd5b505050506040513d6020811015611a9257600080fd5b8101908080519060200190929190505050611b378973ffffffffffffffffffffffffffffffffffffffff1663ab0783da6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611aee57600080fd5b505af1158015611b02573d6000803e3d6000fd5b505050506040513d6020811015611b1857600080fd5b8101908080519060200190929190505050670de0b6b3a764000061298a565b612404565b739b0f70df76165442ca6092939132bbaea77f2d7a73ffffffffffffffffffffffffffffffffffffffff1663495d32cb6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611b9857600080fd5b505af1158015611bac573d6000803e3d6000fd5b505050506040513d6020811015611bc257600080fd5b8101908080519060200190929190505050612404565b8673ffffffffffffffffffffffffffffffffffffffff166351f910666040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611c2057600080fd5b505af1158015611c34573d6000803e3d6000fd5b505050506040513d6020811015611c4a57600080fd5b81019080805190602001909291905050506129d2565b612504565b905092915050565b73448a5065aebb8e423f0896e6c5d525c040f59af381565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015611d5757600080fd5b505afa158015611d6b573d6000803e3d6000fd5b505050506040513d6020811015611d8157600080fd5b810190808051906020019092919050505014611e8f578073ffffffffffffffffffffffffffffffffffffffff1663095ea7b373448a5065aebb8e423f0896e6c5d525c040f59af37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611e5257600080fd5b505af1158015611e66573d6000803e3d6000fd5b505050506040513d6020811015611e7c57600080fd5b8101908080519060200190929190505050505b50565b6000612054611fc1611fb38573ffffffffffffffffffffffffffffffffffffffff16631f3634ed866040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015611ef057600080fd5b505af1158015611f04573d6000803e3d6000fd5b505050506040513d6020811015611f1a57600080fd5b81019080805190602001909291905050508673ffffffffffffffffffffffffffffffffffffffff166351f910666040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611f7357600080fd5b505af1158015611f87573d6000803e3d6000fd5b505050506040513d6020811015611f9d57600080fd5b810190808051906020019092919050505061298a565b670de0b6b3a764000061298a565b8473ffffffffffffffffffffffffffffffffffffffff1663f7c8d634856040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561201457600080fd5b505af1158015612028573d6000803e3d6000fd5b505050506040513d602081101561203e57600080fd5b81019080805190602001909291905050506129d2565b905092915050565b60006120ea828573ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156120aa57600080fd5b505af11580156120be573d6000803e3d6000fd5b505050506040513d60208110156120d457600080fd5b8101908080519060200190929190505050612a0a565b90508373ffffffffffffffffffffffffffffffffffffffff1663a5cd184e84836040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b15801561214757600080fd5b505af115801561215b573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16637f8661a1826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156121b257600080fd5b505af11580156121c6573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561221257600080fd5b505af1158015612226573d6000803e3d6000fd5b505050506040513d602081101561223c57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561229f57600080fd5b505af11580156122b3573d6000803e3d6000fd5b5050505050505050565b600073283cc5c26e53d66ed2ea252d986f094b37e6e89573ffffffffffffffffffffffffffffffffffffffff1663809a9e5573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee7389d24a6b4ccb1b6faa2625fe562bdd9a23260359856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200193505050506040805180830381600087803b1580156123b557600080fd5b505af11580156123c9573d6000803e3d6000fd5b505050506040513d60408110156123df57600080fd5b8101908080519060200190929190805190602001909291905050505080915050919050565b6000670de0b6b3a764000061243461241c8585612a46565b6002670de0b6b3a76400008161242e57fe5b04612a72565b8161243b57fe5b04905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff1663fdac0025836040518263ffffffff1660e01b815260040180828152602001915050608060405180830381600087803b15801561249957600080fd5b505af11580156124ad573d6000803e3d6000fd5b505050506040513d60808110156124c357600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919050505090919250909150508091505092915050565b600082828403915081111561251857600080fd5b92915050565b60007389d24a6b4ccb1b6faa2625fe562bdd9a2326035973ffffffffffffffffffffffffffffffffffffffff166323b872dd3073283cc5c26e53d66ed2ea252d986f094b37e6e895856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561260357600080fd5b505af1158015612617573d6000803e3d6000fd5b505050506040513d602081101561262d57600080fd5b810190808051906020019092919050505050600073283cc5c26e53d66ed2ea252d986f094b37e6e89573ffffffffffffffffffffffffffffffffffffffff166326680ef87389d24a6b4ccb1b6faa2625fe562bdd9a23260359856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156126f057600080fd5b505af1158015612704573d6000803e3d6000fd5b505050506040513d602081101561271a57600080fd5b810190808051906020019092919050505090508473ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561277557600080fd5b505af1158015612789573d6000803e3d6000fd5b505050506040513d602081101561279f57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156127f757600080fd5b505af115801561280b573d6000803e3d6000fd5b5050505050600061289e828773ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561285e57600080fd5b505af1158015612872573d6000803e3d6000fd5b505050506040513d602081101561288857600080fd5b8101908080519060200190929190505050612a0a565b90508573ffffffffffffffffffffffffffffffffffffffff1663049878f3826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156128f357600080fd5b505af1158015612907573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663b3b77a5186836040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b15801561296657600080fd5b505af115801561297a573d6000803e3d6000fd5b5050505081925050509392505050565b60006b033b2e3c9fd0803ce80000006129c26129a68585612a46565b60026b033b2e3c9fd0803ce8000000816129bc57fe5b04612a72565b816129c957fe5b04905092915050565b6000816129fa6129ea85670de0b6b3a7640000612a46565b600285816129f457fe5b04612a72565b81612a0157fe5b04905092915050565b600081612a36612a26856b033b2e3c9fd0803ce8000000612a46565b60028581612a3057fe5b04612a72565b81612a3d57fe5b04905092915050565b600080821480612a635750828283850292508281612a6057fe5b04145b612a6c57600080fd5b92915050565b6000828284019150811015612a8657600080fd5b9291505056fe636f6c6c61746572616c206d75737420626520626967676572207468616e207374617274696e6720706f696e74726174696f206d75737420626520626574746572206f66662061742074686520656e64a165627a7a72305820cf28460c44bd96a206764e639ddbb3d74641ad5f5a6cdacf1a52bee23f4951030029"
}