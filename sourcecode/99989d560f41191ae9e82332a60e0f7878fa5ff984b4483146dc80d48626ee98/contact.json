{
  "address": "0xdA1b4119DAbD92920A13b077FB3DaED637253da9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenERC20",
  "compilerVersion": "v0.4.26+commit.4563c3fc",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-06\n*/\n\npragma solidity ^0.4.16;\ninterface tokenRecipient {  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\ncontract TokenERC20 {\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 8;\n    address public owner;\n    uint256 public totalSupply;\n    bool public lockIn;\n    mapping (address => bool) whitelisted;\n\tmapping (address => bool) admin;\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    constructor(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol,\n        address crowdsaleOwner\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[crowdsaleOwner] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n        lockIn = true;\n\t\tadmin[msg.sender] = true;\n        whitelisted[msg.sender] = true;\n        owner = crowdsaleOwner;\n    }\n    \n    function toggleLockIn() public {\n        require(msg.sender == owner);\n        lockIn = !lockIn;\n    }\n    \n    function addToWhitelist(address newAddress) public {\n        require(admin[msg.sender]);\n        whitelisted[newAddress] = true;\n    }\n\t\n\tfunction removeFromWhitelist(address oldaddress) public {\n\t    require(admin[msg.sender]);\n\t\trequire(oldaddress != owner);\n\t\twhitelisted[oldaddress] = false;\n\t}\n\t\n\tfunction addToAdmin(address newAddress) public {\n\t\trequire(admin[msg.sender]);\n\t\tadmin[newAddress]=true;\n\t}\n\t\n\tfunction removeFromAdmin(address oldAddress) public {\n\t\trequire(admin[msg.sender]);\n\t\trequire(oldAddress != owner);\n\t\tadmin[oldAddress]=false;\n\t}\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        if (lockIn) {\n            require(whitelisted[_from]);\n        }\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        \n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` on behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n}",
  "bytecode": "60806040526002805460ff1916600817905534801561001d57600080fd5b50604051610d63380380610d63833981016040908152815160208084015183850151606086015160025460ff16600a0a85026003819055600160a060020a0382166000908152600786529687205591860180519496909591019391926100869290860190610108565b50815161009a906001906020850190610108565b506004805460ff1990811660019081179092553360009081526006602090815260408083208054851686179055600590915290208054909116909117905560028054600160a060020a03929092166101000261010060a860020a0319909216919091179055506101a3915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061014957805160ff1916838001178555610176565b82800160010185558215610176579182015b8281111561017657825182559160200191906001019061015b565b50610182929150610186565b5090565b6101a091905b80821115610182576000815560010161018c565b90565b610bb1806101b26000396000f3006080604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461010b578063095ea7b3146101955780631564d706146101cd57806318160ddd146101e257806323b872dd14610209578063313ce56714610233578063329150e81461025e57806342966c68146102815780635410913c1461029957806370a08231146102ba57806379cc6790146102db5780638ab1d681146102ff5780638da5cb5b1461032057806395d89b4114610351578063a9059cbb14610366578063b5c055701461038a578063cae9ca511461039f578063dd62ed3e14610408578063e43252d71461042f575b600080fd5b34801561011757600080fd5b50610120610450565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015a578181015183820152602001610142565b50505050905090810190601f1680156101875780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a157600080fd5b506101b9600160a060020a03600435166024356104de565b604080519115158252519081900360200190f35b3480156101d957600080fd5b506101b9610544565b3480156101ee57600080fd5b506101f761054d565b60408051918252519081900360200190f35b34801561021557600080fd5b506101b9600160a060020a0360043581169060243516604435610553565b34801561023f57600080fd5b506102486105c2565b6040805160ff9092168252519081900360200190f35b34801561026a57600080fd5b5061027f600160a060020a03600435166105cb565b005b34801561028d57600080fd5b506101b960043561062a565b3480156102a557600080fd5b5061027f600160a060020a03600435166106a2565b3480156102c657600080fd5b506101f7600160a060020a03600435166106e4565b3480156102e757600080fd5b506101b9600160a060020a03600435166024356106f6565b34801561030b57600080fd5b5061027f600160a060020a03600435166107c7565b34801561032c57600080fd5b50610335610826565b60408051600160a060020a039092168252519081900360200190f35b34801561035d57600080fd5b5061012061083a565b34801561037257600080fd5b5061027f600160a060020a0360043516602435610894565b34801561039657600080fd5b5061027f6108a3565b3480156103ab57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101b9948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506108d39650505050505050565b34801561041457600080fd5b506101f7600160a060020a03600435811690602435166109ec565b34801561043b57600080fd5b5061027f600160a060020a0360043516610a09565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104d65780601f106104ab576101008083540402835291602001916104d6565b820191906000526020600020905b8154815290600101906020018083116104b957829003601f168201915b505050505081565b336000818152600860209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60045460ff1681565b60035481565b600160a060020a038316600090815260086020908152604080832033845290915281205482111561058357600080fd5b600160a060020a03841660009081526008602090815260408083203384529091529020805483900390556105b8848484610a4b565b5060019392505050565b60025460ff1681565b3360009081526006602052604090205460ff1615156105e957600080fd5b600254600160a060020a0382811661010090920416141561060957600080fd5b600160a060020a03166000908152600660205260409020805460ff19169055565b3360009081526007602052604081205482111561064657600080fd5b3360008181526007602090815260409182902080548690039055600380548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b3360009081526006602052604090205460ff1615156106c057600080fd5b600160a060020a03166000908152600660205260409020805460ff19166001179055565b60076020526000908152604090205481565b600160a060020a03821660009081526007602052604081205482111561071b57600080fd5b600160a060020a038316600090815260086020908152604080832033845290915290205482111561074b57600080fd5b600160a060020a0383166000818152600760209081526040808320805487900390556008825280832033845282529182902080548690039055600380548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a250600192915050565b3360009081526006602052604090205460ff1615156107e557600080fd5b600254600160a060020a0382811661010090920416141561080557600080fd5b600160a060020a03166000908152600560205260409020805460ff19169055565b6002546101009004600160a060020a031681565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104d65780601f106104ab576101008083540402835291602001916104d6565b61089f338383610a4b565b5050565b6002546101009004600160a060020a031633146108bf57600080fd5b6004805460ff19811660ff90911615179055565b6000836108e081856104de565b156109e4576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b83811015610978578181015183820152602001610960565b50505050905090810190601f1680156109a55780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156109c757600080fd5b505af11580156109db573d6000803e3d6000fd5b50505050600191505b509392505050565b600860209081526000928352604080842090915290825290205481565b3360009081526006602052604090205460ff161515610a2757600080fd5b600160a060020a03166000908152600560205260409020805460ff19166001179055565b60045460009060ff1615610a8057600160a060020a03841660009081526005602052604090205460ff161515610a8057600080fd5b600160a060020a0383161515610a9557600080fd5b600160a060020a038416600090815260076020526040902054821115610aba57600080fd5b600160a060020a03831660009081526007602052604090205482810111610ae057600080fd5b50600160a060020a038083166000818152600760209081526040808320805495891680855282852080548981039091559486905281548801909155815187815291519390950194927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600160a060020a03808416600090815260076020526040808220549287168252902054018114610b7f57fe5b505050505600a165627a7a72305820a67b2aaca77846f2cc9af1652dd84687c8f1b9f233aba55059b86425bf7c4a2b0029000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000053f68a17ec836babbc661fe6315b54980abbb738000000000000000000000000000000000000000000000000000000000000001c5368616e67204865206368616d626572206f6620436f6d6d6572636500000000000000000000000000000000000000000000000000000000000000000000000453484f5300000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000053f68a17ec836babbc661fe6315b54980abbb738000000000000000000000000000000000000000000000000000000000000001c5368616e67204865206368616d626572206f6620436f6d6d6572636500000000000000000000000000000000000000000000000000000000000000000000000453484f5300000000000000000000000000000000000000000000000000000000"
}