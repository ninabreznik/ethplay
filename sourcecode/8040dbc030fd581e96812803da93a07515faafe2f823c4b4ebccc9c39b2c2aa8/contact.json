{
  "address": "0x77d1fd0af544275b0e40d07543d5ffc2cab2dfbf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EuroX",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-23\n*/\n\npragma solidity ^0.4.25;\n\nlibrary SafeMath {\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n      c = a + b;\n      require(c >= a);\n  }\n  function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n      require(b <= a);\n      c = a - b;\n  }\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n      c = a * b;\n      require(a == 0 || c / a == b);\n  }\n  function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\n      require(b > 0);\n      c = a / b;\n  }\n}\n\ncontract ERC20Interface {\n  function totalSupply() public constant returns (uint256);\n  function balanceOf(address tokenOwner) public constant returns (uint256 balance);\n  function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);\n  function transfer(address to, uint256 tokens) public returns (bool success);\n  function approve(address spender, uint256 tokens) public returns (bool success);\n  function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n\n  event Transfer(address indexed from, address indexed to, uint256 tokens);\n  event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n  event Burn(address indexed from, uint256 value);\n}\n\ncontract Owned {\n  address public owner;\n  address public newOwner;\n\n  event OwnershipTransferred(address indexed from, address indexed _to);\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address _newOwner) public onlyOwner {\n    newOwner = _newOwner;\n  }\n  function acceptOwnership() public {\n    require(msg.sender == newOwner);\n    owner = newOwner;\n    newOwner = address(0);\n    emit OwnershipTransferred(owner, newOwner);\n  }\n}\n\ncontract Pausable is Owned {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\ncontract EuroX is ERC20Interface, Owned, Pausable {\n  using SafeMath for uint256;\n\n  string public symbol;\n  string public name;\n  uint8 public decimals;\n  uint256 _totalSupply;\n\n  mapping(address => uint256) balances;\n  mapping(address => mapping(address => uint256)) allowed;\n\n  constructor() public {\n    symbol = \"EUROX\";\n    name = \"EuroX\";\n    decimals = 18;\n    _totalSupply = 100000 * 10 ** uint256(decimals);\n    balances[owner] = _totalSupply;\n    emit Transfer(address(0), owner, _totalSupply);\n  }\n  \n  modifier onlyPayloadSize(uint256 numWords) {\n    assert(msg.data.length >= numWords * 32 + 4);\n    _;\n  }\n    \n /**\n  * @dev function to check whether passed address is a contract address\n  */\n    function isContract(address _address) private view returns (bool is_contract) {\n      uint256 length;\n      assembly {\n      //retrieve the size of the code on target address, this needs assembly\n        length := extcodesize(_address)\n      }\n      return (length > 0);\n    }\n    \n  /**\n  * @dev Total number of tokens in existence\n  */\n    function totalSupply() public view returns (uint256) {\n      return _totalSupply;\n    }\n    \n    \n /**\n  * @dev Gets the balance of the specified address.\n  * @param tokenOwner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n\n  function balanceOf(address tokenOwner) public view returns (uint256 balance) {\n    return balances[tokenOwner];\n  }\n\n\n /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param tokenOwner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address tokenOwner, address spender) public view returns (uint256 remaining) {\n    return allowed[tokenOwner][spender];\n  }\n    \n    \n /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param tokens The amount to be transferred.\n  */\n  function transfer(address to, uint256 tokens) public whenNotPaused onlyPayloadSize(2) returns (bool success) {\n    require(to != address(0));\n    require(tokens > 0);\n    require(tokens <= balances[msg.sender]);\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\n    balances[to] = balances[to].add(tokens);\n    emit Transfer(msg.sender, to, tokens);\n    return true;\n  }\n /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param spender The address which will spend the funds.\n   * @param tokens The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 tokens) public whenNotPaused onlyPayloadSize(2) returns (bool success) {\n    require(spender != address(0));\n    allowed[msg.sender][spender] = tokens;\n    emit Approval(msg.sender, spender, tokens);\n    return true;\n  }\n\n    \n /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param tokens uint256 the amount of tokens to be transferred\n   */\n    function transferFrom(address from, address to, uint256 tokens) public whenNotPaused onlyPayloadSize(3) returns (bool success) {\n        require(tokens > 0);\n        require(from != address(0));\n        require(to != address(0));\n        require(allowed[from][msg.sender] > 0);\n        require(balances[from]>0);\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n \n\n /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        _totalSupply =_totalSupply.sub(_value);\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n  \n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param from address The address which you want to send tokens from\n   * @param _value uint256 The amount of token to be burned\n   */\n    function burnFrom(address from, uint256 _value) public returns (bool success) {\n        require(balances[from] >= _value);\n        require(_value <= allowed[from][msg.sender]);\n        balances[from] = balances[from].sub(_value);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(_value);\n        _totalSupply = _totalSupply.sub(_value);\n        emit Burn(from, _value);\n        return true;\n    }\n /**\n   * @dev Function to mint tokens\n   * @param target The address that will receive the minted tokens.\n   * @param mintedAmount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public  returns (bool) {\n        require(mintedAmount > 0);\n        require(target != address(0));\n        balances[target] = balances[target].add(mintedAmount);\n        _totalSupply = _totalSupply.add(mintedAmount);\n        emit Transfer(owner, target, mintedAmount);\n        return true;\n    }\n\n    function () public payable {\n        revert();\n    }\n    \n    \n/**\n   * @dev Function to transfer any ERC20 token  to owner address which gets accidentally transferred to this contract\n   * @param tokenAddress The address of the ERC20 contract\n   * @param tokens The amount of tokens to transfer.\n   * @return A boolean that indicates if the operation was successful.\n   */\n    function transferAnyERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {\n        require(tokenAddress != address(0));\n        require(isContract(tokenAddress));\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n}",
  "bytecode": "60806040526000600160146101000a81548160ff0219169083151502179055503480156200002c57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600581526020017f4555524f5800000000000000000000000000000000000000000000000000000081525060029080519060200190620000ba9291906200023c565b506040805190810160405280600581526020017f4575726f5800000000000000000000000000000000000000000000000000000081525060039080519060200190620001089291906200023c565b506012600460006101000a81548160ff021916908360ff160217905550600460009054906101000a900460ff1660ff16600a0a620186a002600581905550600554600660008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6005546040518082815260200191505060405180910390a3620002eb565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200027f57805160ff1916838001178555620002b0565b82800160010185558215620002b0579182015b82811115620002af57825182559160200191906001019062000292565b5b509050620002bf9190620002c3565b5090565b620002e891905b80821115620002e4576000816000905550600101620002ca565b5090565b90565b611e3480620002fb6000396000f300608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610117578063095ea7b3146101a757806318160ddd1461020c57806323b872dd14610237578063313ce567146102bc5780633f4ba83a146102ed57806342966c68146103045780635c975abb1461034957806370a082311461037857806379ba5097146103cf57806379c65068146103e657806379cc67901461044b5780638456cb59146104b05780638da5cb5b146104c757806395d89b411461051e578063a9059cbb146105ae578063d4ee1d9014610613578063dc39d06d1461066a578063dd62ed3e146106cf578063f2fde38b14610746575b600080fd5b34801561012357600080fd5b5061012c610789565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561016c578082015181840152602081019050610151565b50505050905090810190601f1680156101995780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b357600080fd5b506101f2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610827565b604051808215151515815260200191505060405180910390f35b34801561021857600080fd5b5061022161098a565b6040518082815260200191505060405180910390f35b34801561024357600080fd5b506102a2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610994565b604051808215151515815260200191505060405180910390f35b3480156102c857600080fd5b506102d1610dd4565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102f957600080fd5b50610302610de7565b005b34801561031057600080fd5b5061032f60048036038101908080359060200190929190505050610ea6565b604051808215151515815260200191505060405180910390f35b34801561035557600080fd5b5061035e610ffd565b604051808215151515815260200191505060405180910390f35b34801561038457600080fd5b506103b9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611010565b6040518082815260200191505060405180910390f35b3480156103db57600080fd5b506103e4611059565b005b3480156103f257600080fd5b50610431600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111f8565b604051808215151515815260200191505060405180910390f35b34801561045757600080fd5b50610496600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113e0565b604051808215151515815260200191505060405180910390f35b3480156104bc57600080fd5b506104c56116d2565b005b3480156104d357600080fd5b506104dc611791565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561052a57600080fd5b506105336117b6565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610573578082015181840152602081019050610558565b50505050905090810190601f1680156105a05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105ba57600080fd5b506105f9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611854565b604051808215151515815260200191505060405180910390f35b34801561061f57600080fd5b50610628611abd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561067657600080fd5b506106b5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611ae3565b604051808215151515815260200191505060405180910390f35b3480156106db57600080fd5b50610730600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c97565b6040518082815260200191505060405180910390f35b34801561075257600080fd5b50610787600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d1e565b005b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561081f5780601f106107f45761010080835404028352916020019161081f565b820191906000526020600020905b81548152906001019060200180831161080257829003601f168201915b505050505081565b6000600160149054906101000a900460ff1615151561084557600080fd5b60026004602082020160003690501015151561085d57fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561089957600080fd5b82600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505092915050565b6000600554905090565b6000600160149054906101000a900460ff161515156109b257600080fd5b6003600460208202016000369050101515156109ca57fe5b6000831115156109d957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614151515610a1557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515610a5157600080fd5b6000600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515610adc57600080fd5b6000600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515610b2a57600080fd5b610b7c83600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dbd90919063ffffffff16565b600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c4e83600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dbd90919063ffffffff16565b600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d2083600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dd990919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b600460009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e4257600080fd5b600160149054906101000a900460ff161515610e5d57600080fd5b6000600160146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610ef657600080fd5b610f4882600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dbd90919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fa082600554611dbd90919063ffffffff16565b6005819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a260019050919050565b600160149054906101000a900460ff1681565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b557600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561125557600080fd5b60008211151561126457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156112a057600080fd5b6112f282600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dd990919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061134a82600554611dd990919063ffffffff16565b6005819055508273ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561143057600080fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156114bb57600080fd5b61150d82600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dbd90919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115df82600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dbd90919063ffffffff16565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061167482600554611dbd90919063ffffffff16565b6005819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a26001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561172d57600080fd5b600160149054906101000a900460ff1615151561174957600080fd5b60018060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561184c5780601f106118215761010080835404028352916020019161184c565b820191906000526020600020905b81548152906001019060200180831161182f57829003601f168201915b505050505081565b6000600160149054906101000a900460ff1615151561187257600080fd5b60026004602082020160003690501015151561188a57fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156118c657600080fd5b6000831115156118d557600080fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561192357600080fd5b61197583600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dbd90919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a0a83600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dd990919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b4057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611b7c57600080fd5b611b8583611df5565b1515611b9057600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611c5457600080fd5b505af1158015611c68573d6000803e3d6000fd5b505050506040513d6020811015611c7e57600080fd5b8101908080519060200190929190505050905092915050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d7957600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000828211151515611dce57600080fd5b818303905092915050565b60008183019050828110151515611def57600080fd5b92915050565b600080823b9050600081119150509190505600a165627a7a72305820accae2c862feee5d238ed866075537319d0b6db38d656f03764843532c3a6cff0029"
}