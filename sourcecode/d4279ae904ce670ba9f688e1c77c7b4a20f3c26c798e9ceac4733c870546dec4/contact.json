{
  "address": "0x571df2dd34ee470b80128515835f616074d4dcc9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CoVEXTokenERC223",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-10\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC223 {\n  uint public totalSupply;\n  function balanceOf(address who) constant returns (uint);\n\n  function name() constant returns (string _name);\n  function symbol() constant returns (string _symbol);\n  function decimals() constant returns (uint8 _decimals);\n  function totalSupply() constant returns (uint256 _supply);\n\n  function transfer(address to, uint value) returns (bool ok);\n  function transfer(address to, uint value, bytes data) returns (bool ok);\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n}\n\ncontract ContractReceiver {\n  function tokenFallback(address _from, uint _value, bytes _data);\n}\n\ncontract ERC223Token is ERC223 {\n  using SafeMath for uint;\n\n  mapping(address => uint) balances;\n\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n  uint256 public totalSupply;\n\n\n  // Function to access name of token .\n  function name() constant returns (string _name) {\n      return name;\n  }\n  // Function to access symbol of token .\n  function symbol() constant returns (string _symbol) {\n      return symbol;\n  }\n  // Function to access decimals of token .\n  function decimals() constant returns (uint8 _decimals) {\n      return decimals;\n  }\n  // Function to access total supply of tokens .\n  function totalSupply() constant returns (uint256 _totalSupply) {\n      return totalSupply;\n  }\n\n  // Function that is called when a user or another contract wants to transfer funds .\n  function transfer(address _to, uint _value, bytes _data) returns (bool success) {\n    if(isContract(_to)) {\n        return transferToContract(_to, _value, _data);\n    }\n    else {\n        return transferToAddress(_to, _value, _data);\n    }\n}\n\n  // Standard function transfer similar to ERC20 transfer with no _data .\n  // Added due to backwards compatibility reasons .\n  function transfer(address _to, uint _value) returns (bool success) {\n\n    //standard function transfer similar to ERC20 transfer with no _data\n    //added due to backwards compatibility reasons\n    bytes memory empty;\n    if(isContract(_to)) {\n        return transferToContract(_to, _value, empty);\n    }\n    else {\n        return transferToAddress(_to, _value, empty);\n    }\n}\n\n//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n  function isContract(address _addr) private returns (bool is_contract) {\n      uint length;\n      assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        if(length>0) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n  //function that is called when transaction target is an address\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n    if (balanceOf(msg.sender) < _value) revert();\n    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n    balances[_to] = balanceOf(_to).add(_value);\n    Transfer(msg.sender, _to, _value);\n    ERC223Transfer(msg.sender, _to, _value, _data);\n    return true;\n  }\n\n  //function that is called when transaction target is a contract\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n    if (balanceOf(msg.sender) < _value) revert();\n    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n    balances[_to] = balanceOf(_to).add(_value);\n    ContractReceiver reciever = ContractReceiver(_to);\n    reciever.tokenFallback(msg.sender, _value, _data);\n    Transfer(msg.sender, _to, _value);\n    ERC223Transfer(msg.sender, _to, _value, _data);\n    return true;\n  }\n\n\n  function balanceOf(address _owner) constant returns (uint balance) {\n    return balances[_owner];\n  }\n}\n\ncontract CoVEXTokenERC223 is ERC223Token{\n    using SafeMath for uint256;\n\n    string public name = \"CoVEX Coin\";\n    string public symbol = \"CoVEX\";\n    uint256 public decimals = 18;\n\n    // 250M\n    uint256 public totalSupply = 250*1000000 * (uint256(10) ** decimals);\n    uint256 public totalRaised; // total ether raised (in wei)\n\n    uint256 public startTimestamp; // timestamp after which ICO will start\n    uint256 public durationSeconds; // 1 month= 1 * 30 * 24 * 60 * 60\n\n    uint256 public maxCap;\n\n    uint256 coinsPerETH;\n\n    mapping(address => uint) etherBalance;\n\n    mapping(uint => uint) public weeklyRewards;\n\n    uint256 minPerUser = 0.1 ether;\n    uint256 maxPerUser = 100 ether;\n\n    /**\n     * Address which will receive raised funds \n     * and owns the total supply of tokens\n     */\n    address public fundsWallet;\n\n    function CoVEXTokenERC223() {\n        fundsWallet = msg.sender;\n        \n        startTimestamp = now;\n        durationSeconds = 0; //admin can set it later\n\n        //initially assign all tokens to the fundsWallet\n        balances[fundsWallet] = totalSupply;\n\n        Transfer(0x0, fundsWallet, totalSupply);\n    }\n\n    function() isIcoOpen checkMinMax payable{\n        totalRaised = totalRaised.add(msg.value);\n\n        uint256 tokenAmount = calculateTokenAmount(msg.value);\n        balances[fundsWallet] = balances[fundsWallet].sub(tokenAmount);\n        balances[msg.sender] = balances[msg.sender].add(tokenAmount);\n\n        etherBalance[msg.sender] = etherBalance[msg.sender].add(msg.value);\n\n        Transfer(fundsWallet, msg.sender, tokenAmount);\n\n        // immediately transfer ether to fundsWallet\n        fundsWallet.transfer(msg.value);\n    }\n\n    function calculateTokenAmount(uint256 weiAmount) constant returns(uint256) {\n        uint256 tokenAmount = weiAmount.mul(coinsPerETH);\n        // setting rewards is possible only for 4 weeks\n        for (uint i = 1; i <= 4; i++) {\n            if (now <= startTimestamp + (i * 7 days)) {\n                return tokenAmount.mul(100+weeklyRewards[i]).div(100);    \n            }\n        }\n        return tokenAmount;\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function adminBurn(uint256 _value) public {\n      require(_value <= balances[msg.sender]);\n      // no need to require value <= totalSupply, since that would imply the\n      // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n      address burner = msg.sender;\n      balances[burner] = balances[burner].sub(_value);\n      totalSupply = totalSupply.sub(_value);\n      Transfer(burner, address(0), _value);\n    }\n\n    function adminAddICO(uint256 _startTimestamp, uint256 _durationSeconds, \n        uint256 _coinsPerETH, uint256 _maxCap, uint _week1Rewards,\n        uint _week2Rewards, uint _week3Rewards, uint _week4Rewards) isOwner{\n\n        startTimestamp = _startTimestamp;\n        durationSeconds = _durationSeconds;\n        coinsPerETH = _coinsPerETH;\n        maxCap = _maxCap * 1 ether;\n\n        weeklyRewards[1] = _week1Rewards;\n        weeklyRewards[2] = _week2Rewards;\n        weeklyRewards[3] = _week3Rewards;\n        weeklyRewards[4] = _week4Rewards;\n\n        // reset totalRaised\n        totalRaised = 0;\n    }\n\n    modifier isIcoOpen() {\n        require(now >= startTimestamp);\n        require(now <= (startTimestamp + durationSeconds));\n        require(totalRaised <= maxCap);\n        _;\n    }\n\n    modifier checkMinMax(){\n      require(msg.value >= minPerUser);\n      require(msg.value <= maxPerUser);\n      _;\n    }\n\n    modifier isOwner(){\n        require(msg.sender == fundsWallet);\n        _;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"durationSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weeklyRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"name\":\"_durationSeconds\",\"type\":\"uint256\"},{\"name\":\"_coinsPerETH\",\"type\":\"uint256\"},{\"name\":\"_maxCap\",\"type\":\"uint256\"},{\"name\":\"_week1Rewards\",\"type\":\"uint256\"},{\"name\":\"_week2Rewards\",\"type\":\"uint256\"},{\"name\":\"_week3Rewards\",\"type\":\"uint256\"},{\"name\":\"_week4Rewards\",\"type\":\"uint256\"}],\"name\":\"adminAddICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"adminBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ERC223Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526040805190810160405280600a81526020017f436f56455820436f696e0000000000000000000000000000000000000000000081525060069080519060200190620000519291906200020b565b506040805190810160405280600581526020017f436f564558000000000000000000000000000000000000000000000000000000815250600790805190602001906200009f9291906200020b565b506012600855600854600a0a630ee6b2800260095567016345785d8a000060115568056bc75e2d631000006012553415620000d957600080fd5b33601360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600b819055506000600c8190555060095460016000601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6009546040518082815260200191505060405180910390a3620002ba565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024e57805160ff19168380011785556200027f565b828001600101855582156200027f579182015b828111156200027e57825182559160200191906001019062000261565b5b5090506200028e919062000292565b5090565b620002b791905b80821115620002b357600081600090555060010162000299565b5090565b90565b61149380620002ca6000396000f3006060604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461045857806318160ddd146104e65780632194f3a21461050f57806323548b8b14610564578063313ce5671461058d57806370a08231146105b657806395d89b41146106035780639acba2af14610691578063a24bcf46146106ba578063a9059cbb146106f1578063af364c051461074b578063af7d189014610782578063badb97ff146107e4578063be45fd6214610807578063c5c4744c146108a4578063e6fd48bc146108cd575b6000600b5442101515156100f957600080fd5b600c54600b5401421115151561010e57600080fd5b600d54600a541115151561012157600080fd5b601154341015151561013257600080fd5b601254341115151561014357600080fd5b61015834600a546108f690919063ffffffff16565b600a8190555061016734610914565b90506101dd8160016000601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109ac90919063ffffffff16565b60016000601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061029481600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108f690919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061032934600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108f690919063ffffffff16565b600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050151561045557600080fd5b50005b341561046357600080fd5b61046b6109c5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104ab578082015181840152602081019050610490565b50505050905090810190601f1680156104d85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104f157600080fd5b6104f9610a63565b6040518082815260200191505060405180910390f35b341561051a57600080fd5b610522610a69565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561056f57600080fd5b610577610a8f565b6040518082815260200191505060405180910390f35b341561059857600080fd5b6105a0610a95565b6040518082815260200191505060405180910390f35b34156105c157600080fd5b6105ed600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a9b565b6040518082815260200191505060405180910390f35b341561060e57600080fd5b610616610ae4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561065657808201518184015260208101905061063b565b50505050905090810190601f1680156106835780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561069c57600080fd5b6106a4610b82565b6040518082815260200191505060405180910390f35b34156106c557600080fd5b6106db6004808035906020019091905050610914565b6040518082815260200191505060405180910390f35b34156106fc57600080fd5b610731600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b88565b604051808215151515815260200191505060405180910390f35b341561075657600080fd5b61076c6004808035906020019091905050610bc7565b6040518082815260200191505060405180910390f35b341561078d57600080fd5b6107e26004808035906020019091908035906020019091908035906020019091908035906020019091908035906020019091908035906020019091908035906020019091908035906020019091905050610bdf565b005b34156107ef57600080fd5b6108056004808035906020019091905050610cd7565b005b341561081257600080fd5b61088a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610e44565b604051808215151515815260200191505060405180910390f35b34156108af57600080fd5b6108b7610e7b565b6040518082815260200191505060405180910390f35b34156108d857600080fd5b6108e0610e81565b6040518082815260200191505060405180910390f35b600080828401905083811015151561090a57fe5b8091505092915050565b600080600061092e600e5485610e8790919063ffffffff16565b9150600190505b6004811115156109a15762093a808102600b5401421115156109945761098d606461097f601060008581526020019081526020016000205460640185610e8790919063ffffffff16565b610ec290919063ffffffff16565b92506109a5565b8080600101915050610935565b8192505b5050919050565b60008282111515156109ba57fe5b818303905092915050565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a5b5780601f10610a3057610100808354040283529160200191610a5b565b820191906000526020600020905b815481529060010190602001808311610a3e57829003601f168201915b505050505081565b60095481565b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d5481565b60085481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b7a5780601f10610b4f57610100808354040283529160200191610b7a565b820191906000526020600020905b815481529060010190602001808311610b5d57829003601f168201915b505050505081565b600c5481565b6000610b92611453565b610b9b84610edd565b15610bb257610bab848483610f01565b9150610bc0565b610bbd84848361123e565b91505b5092915050565b60106020528060005260406000206000915090505481565b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c3b57600080fd5b87600b8190555086600c8190555085600e81905550670de0b6b3a76400008502600d81905550836010600060018152602001908152602001600020819055508260106000600281526020019081526020016000208190555081601060006003815260200190815260200160002081905550806010600060048152602001908152602001600020819055506000600a819055505050505050505050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610d2757600080fd5b339050610d7c82600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109ac90919063ffffffff16565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dd4826009546109ac90919063ffffffff16565b600981905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35050565b6000610e4f84610edd565b15610e6657610e5f848484610f01565b9050610e74565b610e7184848461123e565b90505b9392505050565b600a5481565b600b5481565b6000806000841415610e9c5760009150610ebb565b8284029050828482811515610ead57fe5b04141515610eb757fe5b8091505b5092915050565b6000808284811515610ed057fe5b0490508091505092915050565b600080823b90506000811115610ef65760019150610efb565b600091505b50919050565b60008083610f0e33610a9b565b1015610f1957600080fd5b610f3484610f2633610a9b565b6109ac90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f9284610f8487610a9b565b6108f690919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508490508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3386866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561109a57808201518184015260208101905061107f565b50505050905090810190601f1680156110c75780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15156110e757600080fd5b6102c65a03f115156110f857600080fd5b5050508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a38473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9bfafdc2ae8835972d7b64ef3f8f307165ac22ceffde4a742c52da5487f45fd186866040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156111f75780820151818401526020810190506111dc565b50505050905090810190601f1680156112245780820380516001836020036101000a031916815260200191505b50935050505060405180910390a360019150509392505050565b60008261124a33610a9b565b101561125557600080fd5b6112708361126233610a9b565b6109ac90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112ce836112c086610a9b565b6108f690919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9bfafdc2ae8835972d7b64ef3f8f307165ac22ceffde4a742c52da5487f45fd185856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561140d5780820151818401526020810190506113f2565b50505050905090810190601f16801561143a5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3600190509392505050565b6020604051908101604052806000815250905600a165627a7a7230582012d31e5bc4f52ffe836486dd2015a103c5293812e6d5d7da731cd4c666de32da0029"
}