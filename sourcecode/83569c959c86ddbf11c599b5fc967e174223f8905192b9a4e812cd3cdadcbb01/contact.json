{
  "address": "0xe810f80e3401f67e5cb2dd803599bfc9d3bffcb9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "JYToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-09\n*/\n\npragma solidity ^0.4.23;\n\n\ncontract JYToken {\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n    // only people with tokens\n    modifier onlyBagholders() {\n        require(myTokens() > 0);\n        _;\n    }\n    \n    // only people with profits\n    modifier onlyStronghands() {\n        require(myDividends(true) > 0);\n        _;\n    }\n    \n    // administrators can:\n    // -> change the name of the contract\n    // -> change the name of the token\n    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\n    // they CANNOT:\n    // -> take funds\n    // -> disable withdrawals\n    // -> kill the contract\n    // -> change the price of tokens\n    modifier onlyAdministrator(){\n        address _customerAddress = msg.sender;\n        require(administrators[keccak256(_customerAddress)]);\n        _;\n    }\n    \n    \n    // ensures that the first tokens in the contract will be equally distributed\n    // meaning, no divine dump will be ever possible\n    // result: healthy longevity.\n    modifier antiEarlyWhale(uint256 _amountOfEthereum){\n        address _customerAddress = msg.sender;\n        \n        // are we still in the vulnerable phase?\n        // if so, enact anti early whale protocol \n        if( onlyAmbassadors && ((totalEthereumBalance() - _amountOfEthereum) <= ambassadorQuota_ )){\n            require(\n                // is the customer in the ambassador list?\n                ambassadors_[_customerAddress] == true &&\n                \n                // does the customer purchase exceed the max ambassador quota?\n                (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfEthereum) <= ambassadorMaxPurchase_\n                \n            );\n            \n            // updated the accumulated quota    \n            ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfEthereum);\n        \n            // execute\n            _;\n        } else {\n            // in case the ether count drops low, the ambassador phase won't reinitiate\n            onlyAmbassadors = false;\n            _;    \n        }\n        \n    }\n    \n    \n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy\n    );\n    \n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned\n    );\n    \n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n    \n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n    \n    // ERC20\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n    \n    \n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n    string public name = \"Jie Yue Token\";\n    string public symbol = \"JYT\";\n    uint8 constant public decimals = 18;\n    uint8 constant internal dividendFee_ = 5;\n    uint8 constant internal funderFee_ = 2;\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n    uint256 constant internal magnitude = 2**64;\n    \n    // proof of stake (defaults at 5 tokens)\n    uint256 public stakingRequirement = 5e18;\n    \n    // ambassador program\n    mapping(address => bool) internal ambassadors_;\n    uint256 constant internal ambassadorMaxPurchase_ = 1 ether;\n    uint256 constant internal ambassadorQuota_ = 20 ether;\n    \n    \n    \n   /*================================\n    =            DATASETS            =\n    ================================*/\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    \n    uint256 public funderBalance_ = 0;    \n    \n    mapping(address => int256) internal payoutsTo_;\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n    uint256 internal tokenSupply_ = 0;\n    uint256 internal profitPerShare_;\n    \n    // administrator list (see above on what they can do)\n    mapping(bytes32 => bool) public administrators;\n    \n    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n    bool public onlyAmbassadors = false;\n    \n\n\n    /*=======================================\n    =            PUBLIC FUNCTIONS            =\n    =======================================*/\n    /*\n    * -- APPLICATION ENTRY POINTS --  \n    */\n    constructor()\n        public\n    {\n        // add administrators here\n        administrators[0xb82d8144edd3d84dbc65095bcc01dfceca604445bd09dfe24f98dfbfe79a3bfa] = true;\n        \n        // add the ambassadors here.\n        ambassadors_[0x47FdcB06AFa4e01f0e3d48CFc71908FF0dD86a27] = true;\n        \n\n    }\n    \n     \n    /**\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n     */\n    function buy(address _referredBy)\n        public\n        payable\n        returns(uint256)\n    {\n        purchaseTokens(msg.value, _referredBy);\n    }\n    \n    /**\n     * Fallback function to handle ethereum that was send straight to the contract\n     * Unfortunately we cannot use a referral address this way.\n     */\n    function()\n        payable\n        public\n    {\n        purchaseTokens(msg.value, 0x0);\n    }\n    \n    /**\n     * Converts all of caller's dividends to tokens.\n     */\n    function reinvest()\n        onlyStronghands()\n        public\n    {\n        // fetch dividends\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n        \n        // pay out the dividends virtually\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        \n        // retrieve ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        \n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n        \n        // fire event\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n    \n    /**\n     * Alias of sell() and withdraw().\n     */\n    function exit()\n        public\n    {\n        // get token count for caller & sell them all\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if(_tokens > 0) sell(_tokens);\n        \n        // lambo delivery service\n        withdraw();\n    }\n\n    /**\n     * Withdraws all of the callers earnings.\n     */\n    function withdraw()\n        onlyStronghands()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n        \n        // update dividend tracker\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        \n        // add ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        \n        // lambo delivery service\n        _customerAddress.transfer(_dividends);\n        \n        // fire event\n        emit onWithdraw(_customerAddress, _dividends);\n    }\n    \n    /**\n     * Liquifies tokens to ethereum.\n     */\n    function sell(uint256 _amountOfTokens)\n        onlyBagholders()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        // russian hackers BTFO\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n \n        //funder bonus \n        uint256 _funderBonus = SafeMath.div(_dividends, funderFee_);\n        funderBalance_ = SafeMath.add(funderBalance_, _funderBonus);\n        uint256 _dividends_to_holder = SafeMath.sub(_dividends,_funderBonus);\n         \n        \n        // burn the sold tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n        \n        // update dividends tracker\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;       \n        \n        // dividing by zero is a bad idea\n        if (tokenSupply_ > 0) {\n            // update the amount of dividends per token\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends_to_holder * magnitude) / tokenSupply_);\n        }\n        \n        // fire event\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n    }\n    \n    \n    /**\n     * Transfer tokens from the caller to a new holder.\n     * Remember, there's a 10% fee here as well.\n     */\n    function transfer(address _toAddress, uint256 _amountOfTokens)\n        onlyBagholders()\n        public\n        returns(bool)\n    {\n        // setup\n        address _customerAddress = msg.sender;\n        \n        // make sure we have the requested tokens\n        // also disables transfers until ambassador phase is over\n        // ( we dont want whale premines )\n        require(!onlyAmbassadors && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        \n        // withdraw all outstanding dividends first\n        if(myDividends(true) > 0) withdraw();\n        \n        // liquify 10% of the tokens that are transfered\n        // these are dispersed to shareholders\n        uint256 _tokenFee = SafeMath.div(_amountOfTokens, dividendFee_);\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\n        \n        //funder bonus\n        uint256 _funderBonus = SafeMath.div(_dividends, funderFee_);\n        funderBalance_ = SafeMath.add(funderBalance_, _funderBonus);\n        uint256 _dividends_to_holder = SafeMath.sub(_dividends,_funderBonus);\n  \n        // burn the fee tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n\n        // exchange tokens\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n        \n        // update dividend trackers\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n        \n        // disperse dividends among holders\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends_to_holder * magnitude) / tokenSupply_);\n        \n        // fire event\n        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\n        \n        // ERC20\n        return true;\n       \n    }\n\n\n    function batchTransfer(address[] _receivers, uint256 _value)\n      onlyBagholders()\n      public\n      returns (bool)\n    {\n        // setup\n        address _fromAddress = msg.sender;        \n        \n        uint cnt = _receivers.length;\n        uint256 amount = SafeMath.mul(uint256(cnt) , _value);\n        require(cnt > 0 && cnt <= 20);\n        require(_value > 0 && tokenBalanceLedger_[_fromAddress] >= amount);\n        \n\n        // withdraw all outstanding dividends first\n        if(myDividends(true) > 0) withdraw();\n\n        \n        uint256 _tokenFee;\n        uint256 _taxedTokens;\n        uint256 _dividends;\n        uint256 _funderBonus;\n        uint256 _dividends_to_holder;\n\n        for (uint i = 0; i < cnt; i++) {\n            \n            // liquify 10% of the tokens that are transfered\n            // these are dispersed to shareholders\n            _tokenFee = SafeMath.div(_value, dividendFee_);\n            _taxedTokens = SafeMath.sub(_value, _tokenFee);\n            _dividends = tokensToEthereum_(_tokenFee);\n        \n            //funder bonus\n            _funderBonus = SafeMath.div(_dividends, funderFee_);\n            funderBalance_ = SafeMath.add(funderBalance_, _funderBonus);\n            _dividends_to_holder = SafeMath.sub(_dividends,_funderBonus);\n  \n            // burn the fee tokens\n            tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n\n            // exchange tokens\n            tokenBalanceLedger_[_fromAddress] = SafeMath.sub(tokenBalanceLedger_[_fromAddress], _value);\n            tokenBalanceLedger_[_receivers[i]] = SafeMath.add(tokenBalanceLedger_[_receivers[i]], _taxedTokens);\n        \n            // update dividend trackers\n            payoutsTo_[_fromAddress] -= (int256) (profitPerShare_ * _value);\n            payoutsTo_[_receivers[i]] += (int256) (profitPerShare_ * _taxedTokens);\n        \n            // disperse dividends among holders\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends_to_holder * magnitude) / tokenSupply_);\n            \n            emit Transfer(_fromAddress, _receivers[i], _value);\n        }\n        return true;\n    }\n\n    \n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n    \n    function funderWithdraw()\n        onlyAdministrator()\n        public\n    {\n        require(funderBalance_>0);\n    \n        uint256 _dividends = funderBalance_;\n        funderBalance_ = 0;     \n            \n        address _funderAddress=0xC3Ca29B303196F4F94b7928254Eb166E4Ce2FCda;\n        _funderAddress.transfer(_dividends);\n        \n    \n        // fire event\n        emit onWithdraw(_funderAddress, _dividends);\n    }    \n    \n    \n    /**\n     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\n     */\n    function disableInitialStage()\n        onlyAdministrator()\n        public\n    {\n        onlyAmbassadors = false;\n    }\n    \n    /**\n     * In case one of us dies, we need to replace ourselves.\n     */\n    function setAdministrator(bytes32 _identifier, bool _status)\n        onlyAdministrator()\n        public\n    {\n        administrators[_identifier] = _status;\n    }\n    \n    /**\n     * Precautionary measures in case we need to adjust the masternode rate.\n     */\n    function setStakingRequirement(uint256 _amountOfTokens)\n        onlyAdministrator()\n        public\n    {\n        stakingRequirement = _amountOfTokens;\n    }\n    \n    /**\n     * If we want to rebrand, we can.\n     */\n    function setName(string _name)\n        onlyAdministrator()\n        public\n    {\n        name = _name;\n    }\n    \n    /**\n     * If we want to rebrand, we can.\n     */\n    function setSymbol(string _symbol)\n        onlyAdministrator()\n        public\n    {\n        symbol = _symbol;\n    }\n\n    \n    /*----------  HELPERS AND CALCULATORS  ----------*/\n    /**\n     * Method to view the current Ethereum stored in the contract\n     * Example: totalEthereumBalance()\n     */\n    function totalEthereumBalance()\n        public\n        view\n        returns(uint)\n    {\n        return this.balance;\n    }\n    \n    /**\n     * Retrieve the total token supply.\n     */\n    function totalSupply()\n        public\n        view\n        returns(uint256)\n    {\n        return tokenSupply_;\n    }\n    \n    /**\n     * Retrieve the tokens owned by the caller.\n     */\n    function myTokens()\n        public\n        view\n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n    \n    /**\n     * Retrieve the dividends owned by the caller.\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     * But in the internal calculations, we want them separate. \n     */ \n    function myDividends(bool _includeReferralBonus) \n        public \n        view \n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n    \n    /**\n     * Retrieve the token balance of any single address.\n     */\n    function balanceOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n    \n    /**\n     * Retrieve the dividend balance of any single address.\n     */\n    function dividendsOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n    \n    /**\n     * Return the buy price of 1 individual token.\n     */\n    function sellPrice() \n        public \n        view \n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n            return _taxedEthereum;\n        }\n    }\n    \n    /**\n     * Return the sell price of 1 individual token.\n     */\n    function buyPrice() \n        public \n        view \n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n            return _taxedEthereum;\n        }\n    }\n    \n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n     */\n    function calculateTokensReceived(uint256 _ethereumToSpend) \n        public \n        view \n        returns(uint256)\n    {\n        uint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        \n        return _amountOfTokens;\n    }\n    \n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n     */\n    function calculateEthereumReceived(uint256 _tokensToSell) \n        public \n        view \n        returns(uint256)\n    {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _taxedEthereum;\n    }\n    \n    \n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n        antiEarlyWhale(_incomingEthereum)\n        internal\n        returns(uint256)\n    {\n        // data setup\n        uint256 _dividends = SafeMath.div(_incomingEthereum, dividendFee_);\n        uint256 _funderBonus= SafeMath.div(_dividends, funderFee_);        \n        uint256 _dividends_to_holder=SafeMath.sub( _dividends, _funderBonus);\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends_to_holder * magnitude;        \n        \n \n        // no point in continuing execution if OP is a poorfag russian hacker\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n        // (or hackers)\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n \n        //funder balance get bonus\n        funderBalance_ = SafeMath.add(funderBalance_, _funderBonus);\n        \n        // is the user referred by a masternode?\n        if(\n            // is this a referred purchase?\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n            // no cheating!\n            _referredBy != msg.sender &&\n            \n            // does the referrer have at least X whole tokens?\n            // i.e is the referrer a godly chad masternode\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ){\n            uint256 _referralBonus = SafeMath.div(_dividends_to_holder, 3);\n            _dividends_to_holder = SafeMath.sub(_dividends_to_holder, _referralBonus);   \n            _fee = _dividends_to_holder * magnitude;\n            \n            // wealth redistribution\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } \n        \n        // we can't give people infinite ethereum\n        if(tokenSupply_ > 0){\n            \n            // add tokens to the pool\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n \n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n            profitPerShare_ += (_dividends_to_holder * magnitude / (tokenSupply_));\n            \n            // calculate the amount of tokens the customer receives over his purchase \n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends_to_holder * magnitude / (tokenSupply_))));\n        \n        } else {\n            // add tokens to the pool\n            tokenSupply_ = _amountOfTokens;\n        }\n        \n        // update circulating supply & the ledger address for the customer\n        tokenBalanceLedger_[msg.sender] = SafeMath.add(tokenBalanceLedger_[msg.sender], _amountOfTokens);\n        \n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n        //really i know you think you do but you don't\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n        payoutsTo_[msg.sender] += _updatedPayouts;\n        \n        // fire event\n        emit onTokenPurchase(msg.sender, _incomingEthereum, _amountOfTokens, _referredBy);\n        \n        return _amountOfTokens;\n    }\n\n    /**\n     * Calculate Token price based on an amount of incoming ethereum\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function ethereumToTokens_(uint256 _ethereum)\n        internal\n        view\n        returns(uint256)\n    {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived = \n         (\n            (\n                // underflow attempts BTFO\n                SafeMath.sub(\n                    (sqrt\n                        (\n                            (_tokenPriceInitial**2)\n                            +\n                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n                            +\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n                            +\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n                        )\n                    ), _tokenPriceInitial\n                )\n            )/(tokenPriceIncremental_)\n        )-(tokenSupply_)\n        ;\n  \n        return _tokensReceived;\n    }\n    \n    /**\n     * Calculate token sell value.\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n     function tokensToEthereum_(uint256 _tokens)\n        internal\n        view\n        returns(uint256)\n    {\n\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n        (\n            // underflow attempts BTFO\n            SafeMath.sub(\n                (\n                    (\n                        (\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n                        )-tokenPriceIncremental_\n                    )*(tokens_ - 1e18)\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n            )\n        /1e18);\n        return _etherReceived;\n    }\n    \n    \n    //This is where all your gas goes, sorry\n    //Not sorry, you probably only paid 1 gwei\n    function sqrt(uint x) internal pure returns (uint y) {\n        uint z = (x + 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "bytecode": "60806040526040805190810160405280600d81526020017f4a69652059756520546f6b656e000000000000000000000000000000000000008152506000908051906020019062000051929190620001a4565b506040805190810160405280600381526020017f4a59540000000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f929190620001a4565b50674563918244f40000600255600060065560006009556000600c60006101000a81548160ff021916908315150217905550348015620000de57600080fd5b506001600b60007fb82d8144edd3d84dbc65095bcc01dfceca604445bd09dfe24f98dfbfe79a3bfa60010260001916815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600360007347fdcb06afa4e01f0e3d48cfc71908ff0dd86a2773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555062000253565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001e757805160ff191683800117855562000218565b8280016001018555821562000218579182015b8281111562000217578251825591602001919060010190620001fa565b5b5090506200022791906200022b565b5090565b6200025091905b808211156200024c57600081600090555060010162000232565b5090565b90565b612b6880620002636000396000f30060806040526004361061017f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806265318b1461018d57806306fdde03146101e457806310d0ffdd1461027457806318160ddd146102b557806322609373146102e057806327defa1f14610321578063313ce56714610350578063392efb52146103815780633ccfd60b146103ca5780634b750334146103e157806356d399e81461040c578063597fef7914610437578063688abbf7146104625780636b2f4632146104a557806370a08231146104d05780638328b6101461052757806383f12fec146105545780638620410b146105dc57806389135ae914610607578063949e8acd1461064457806395d89b411461066f578063a8e04f34146106ff578063a9059cbb14610716578063b6ef44541461077b578063b84c824614610792578063c47f0027146107fb578063e4849b3214610864578063e9fad8ee14610891578063f088d547146108a8578063fdb5a03e146108f2575b61018a346000610909565b50005b34801561019957600080fd5b506101ce600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061123d565b6040518082815260200191505060405180910390f35b3480156101f057600080fd5b506101f96112df565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561023957808201518184015260208101905061021e565b50505050905090810190601f1680156102665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561028057600080fd5b5061029f6004803603810190808035906020019092919050505061137d565b6040518082815260200191505060405180910390f35b3480156102c157600080fd5b506102ca6113b5565b6040518082815260200191505060405180910390f35b3480156102ec57600080fd5b5061030b600480360381019080803590602001909291905050506113bf565b6040518082815260200191505060405180910390f35b34801561032d57600080fd5b50610336611408565b604051808215151515815260200191505060405180910390f35b34801561035c57600080fd5b5061036561141b565b604051808260ff1660ff16815260200191505060405180910390f35b34801561038d57600080fd5b506103b06004803603810190808035600019169060200190929190505050611420565b604051808215151515815260200191505060405180910390f35b3480156103d657600080fd5b506103df611440565b005b3480156103ed57600080fd5b506103f66115e4565b6040518082815260200191505060405180910390f35b34801561041857600080fd5b50610421611642565b6040518082815260200191505060405180910390f35b34801561044357600080fd5b5061044c611648565b6040518082815260200191505060405180910390f35b34801561046e57600080fd5b5061048f60048036038101908080351515906020019092919050505061164e565b6040518082815260200191505060405180910390f35b3480156104b157600080fd5b506104ba6116ba565b6040518082815260200191505060405180910390f35b3480156104dc57600080fd5b50610511600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116d9565b6040518082815260200191505060405180910390f35b34801561053357600080fd5b5061055260048036038101908080359060200190929190505050611722565b005b34801561056057600080fd5b506105c260048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001909291905050506117b6565b604051808215151515815260200191505060405180910390f35b3480156105e857600080fd5b506105f1611bb8565b6040518082815260200191505060405180910390f35b34801561061357600080fd5b506106426004803603810190808035600019169060200190929190803515159060200190929190505050611c16565b005b34801561065057600080fd5b50610659611cd7565b6040518082815260200191505060405180910390f35b34801561067b57600080fd5b50610684611cec565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106c45780820151818401526020810190506106a9565b50505050905090810190601f1680156106f15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561070b57600080fd5b50610714611d8a565b005b34801561072257600080fd5b50610761600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611e31565b604051808215151515815260200191505060405180910390f35b34801561078757600080fd5b50610790612196565b005b34801561079e57600080fd5b506107f9600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506122f1565b005b34801561080757600080fd5b50610862600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612395565b005b34801561087057600080fd5b5061088f60048036038101908080359060200190929190505050612439565b005b34801561089d57600080fd5b506108a661269a565b005b6108dc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612701565b6040518082815260200191505060405180910390f35b3480156108fe57600080fd5b50610907612713565b005b60008060008060008060008060008a6000339050600c60009054906101000a900460ff16801561094b57506801158e460913d00000826109476116ba565b0311155b15610e535760011515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151480156109f95750670de0b6b3a764000082600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111155b1515610a0457600080fd5b610a4d600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612887565b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a9e8d600560ff166128a5565b9950610aae8a600260ff166128a5565b9850610aba8a8a6128c0565b9750610ac68d8b6128c0565b9650610ad1876128d9565b95506801000000000000000088029450600086118015610afd5750600954610afb87600954612887565b115b1515610b0857600080fd5b610b146006548a612887565b600681905550600073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614158015610b8357503373ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614155b8015610bd05750600254600460008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b15610c8957610be08860036128a5565b9350610bec88856128c0565b97506801000000000000000088029450610c45600560008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485612887565b600560008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60006009541115610cf457610ca060095487612887565b600981905550600954680100000000000000008902811515610cbe57fe5b04600a60008282540192505081905550600954680100000000000000008902811515610ce657fe5b048602850385039450610cfc565b856009819055505b610d45600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205487612887565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508486600a540203925082600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d58f89604051808381526020018281526020019250505060405180910390a3859a5061122d565b6000600c60006101000a81548160ff021916908315150217905550610e7c8d600560ff166128a5565b9950610e8c8a600260ff166128a5565b9850610e988a8a6128c0565b9750610ea48d8b6128c0565b9650610eaf876128d9565b95506801000000000000000088029450600086118015610edb5750600954610ed987600954612887565b115b1515610ee657600080fd5b610ef26006548a612887565b600681905550600073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614158015610f6157503373ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614155b8015610fae5750600254600460008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b1561106757610fbe8860036128a5565b9350610fca88856128c0565b97506801000000000000000088029450611023600560008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485612887565b600560008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600060095411156110d25761107e60095487612887565b60098190555060095468010000000000000000890281151561109c57fe5b04600a600082825401925050819055506009546801000000000000000089028115156110c457fe5b0486028503850394506110da565b856009819055505b611123600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205487612887565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508486600a540203925082600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d58f89604051808381526020018281526020019250505060405180910390a3859a505b5050505050505050505092915050565b600068010000000000000000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600a5402038115156112d757fe5b049050919050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113755780601f1061134a57610100808354040283529160200191611375565b820191906000526020600020905b81548152906001019060200180831161135857829003601f168201915b505050505081565b60008060008061139185600560ff166128a5565b925061139d85846128c0565b91506113a8826128d9565b9050809350505050919050565b6000600954905090565b60008060008060095485111515156113d657600080fd5b6113df85612966565b92506113ef83600560ff166128a5565b91506113fb83836128c0565b9050809350505050919050565b600c60009054906101000a900460ff1681565b601281565b600b6020528060005260406000206000915054906101000a900460ff1681565b600080600061144f600161164e565b11151561145b57600080fd5b339150611468600061164e565b9050680100000000000000008102600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054810190506000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611591573d6000803e3d6000fd5b508173ffffffffffffffffffffffffffffffffffffffff167fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc826040518082815260200191505060405180910390a25050565b60008060008060006009541415611609576402540be40064174876e80003935061163c565b61161a670de0b6b3a7640000612966565b925061162a83600560ff166128a5565b915061163683836128c0565b90508093505b50505090565b60025481565b60065481565b60008033905082611667576116628161123d565b6116b2565b600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116b08261123d565b015b915050919050565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000339050600b600082604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390206000191660001916815260200190815260200160002060009054906101000a900460ff1615156117ab57600080fd5b816002819055505050565b60008060008060008060008060008060006117cf611cd7565b1115156117db57600080fd5b3398508b5197506117ec888c612a11565b96506000881180156117ff575060148811155b151561180a57600080fd5b60008b118015611859575086600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b151561186457600080fd5b6000611870600161164e565b111561187f5761187e611440565b5b600090505b87811015611ba55761189a8b600560ff166128a5565b95506118a68b876128c0565b94506118b186612966565b93506118c184600260ff166128a5565b92506118cf60065484612887565b6006819055506118df84846128c0565b91506118ed600954876128c0565b60098190555061193c600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548c6128c0565b600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506119df600460008e8481518110151561199457fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486612887565b600460008e848151811015156119f157fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508a600a5402600760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555084600a5402600760008e84815181101515611aa157fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550611b16600a54600954680100000000000000008502811515611b1057fe5b04612887565b600a819055508b81815181101515611b2a57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8d6040518082815260200191505060405180910390a38080600101915050611884565b6001995050505050505050505092915050565b60008060008060006009541415611bdd576402540be40064174876e800019350611c10565b611bee670de0b6b3a7640000612966565b9250611bfe83600560ff166128a5565b9150611c0a8383612887565b90508093505b50505090565b6000339050600b600082604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390206000191660001916815260200190815260200160002060009054906101000a900460ff161515611c9f57600080fd5b81600b6000856000191660001916815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b600080339050611ce6816116d9565b91505090565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d825780601f10611d5757610100808354040283529160200191611d82565b820191906000526020600020905b815481529060010190602001808311611d6557829003601f168201915b505050505081565b6000339050600b600082604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390206000191660001916815260200190815260200160002060009054906101000a900460ff161515611e1357600080fd5b6000600c60006101000a81548160ff02191690831515021790555050565b600080600080600080600080611e45611cd7565b111515611e5157600080fd5b339550600c60009054906101000a900460ff16158015611eb05750600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548811155b1515611ebb57600080fd5b6000611ec7600161164e565b1115611ed657611ed5611440565b5b611ee488600560ff166128a5565b9450611ef088866128c0565b9350611efb85612966565b9250611f0b83600260ff166128a5565b9150611f1960065483612887565b600681905550611f2983836128c0565b9050611f37600954866128c0565b600981905550611f86600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054896128c0565b600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612012600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485612887565b600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555087600a5402600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555083600a5402600760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555061211b600a5460095468010000000000000000840281151561211557fe5b04612887565b600a819055508873ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a36001965050505050505092915050565b6000806000339050600b600082604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390206000191660001916815260200190815260200160002060009054906101000a900460ff16151561222257600080fd5b600060065411151561223357600080fd5b6006549250600060068190555073c3ca29b303196f4f94b7928254eb166e4ce2fcda91508173ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f1935050505015801561229d573d6000803e3d6000fd5b508173ffffffffffffffffffffffffffffffffffffffff167fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc846040518082815260200191505060405180910390a2505050565b6000339050600b600082604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390206000191660001916815260200190815260200160002060009054906101000a900460ff16151561237a57600080fd5b8160019080519060200190612390929190612a97565b505050565b6000339050600b600082604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390206000191660001916815260200190815260200160002060009054906101000a900460ff16151561241e57600080fd5b8160009080519060200190612434929190612a97565b505050565b600080600080600080600080600061244f611cd7565b11151561245b57600080fd5b339750600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205489111515156124ac57600080fd5b8896506124b887612966565b95506124c886600560ff166128a5565b94506124d486866128c0565b93506124e485600260ff166128a5565b92506124f260065484612887565b60068190555061250285846128c0565b9150612510600954886128c0565b60098190555061255f600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054886128c0565b600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555068010000000000000000840287600a540201905080600760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506000600954111561263957612632600a5460095468010000000000000000850281151561262c57fe5b04612887565b600a819055505b8773ffffffffffffffffffffffffffffffffffffffff167fc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a311398886604051808381526020018281526020019250505060405180910390a2505050505050505050565b600080339150600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111156126f5576126f481612439565b5b6126fd611440565b5050565b600061270d3483610909565b50919050565b600080600080612723600161164e565b11151561272f57600080fd5b612739600061164e565b9250339150680100000000000000008302600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054830192506000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061282a836000610909565b90508173ffffffffffffffffffffffffffffffffffffffff167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588483604051808381526020018281526020019250505060405180910390a2505050565b600080828401905083811015151561289b57fe5b8091505092915050565b60008082848115156128b357fe5b0490508091505092915050565b60008282111515156128ce57fe5b818303905092915050565b6000806000670de0b6b3a764000064174876e8000291506009546402540be40061294f612949600954866402540be400600202020260026009540a60026402540be4000a02670de0b6b3a76400008a02670de0b6b3a76400006402540be40002600202026002890a010101612a4c565b856128c0565b81151561295857fe5b040390508092505050919050565b600080600080670de0b6b3a764000085019250670de0b6b3a7640000600954019150670de0b6b3a76400006129fa670de0b6b3a764000085036402540be400670de0b6b3a7640000868115156129b857fe5b046402540be4000264174876e8000103026002670de0b6b3a7640000876002890a038115156129e357fe5b046402540be400028115156129f457fe5b046128c0565b811515612a0357fe5b049050809350505050919050565b6000806000841415612a265760009150612a45565b8284029050828482811515612a3757fe5b04141515612a4157fe5b8091505b5092915050565b600080600260018401811515612a5e57fe5b0490508291505b81811015612a91578091506002818285811515612a7e57fe5b0401811515612a8957fe5b049050612a65565b50919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612ad857805160ff1916838001178555612b06565b82800160010185558215612b06579182015b82811115612b05578251825591602001919060010190612aea565b5b509050612b139190612b17565b5090565b612b3991905b80821115612b35576000816000905550600101612b1d565b5090565b905600a165627a7a723058201abafb36c51d4a7755d30c63718e4c133b5a86e0ba35024018be5bcb0e14ee2e0029"
}