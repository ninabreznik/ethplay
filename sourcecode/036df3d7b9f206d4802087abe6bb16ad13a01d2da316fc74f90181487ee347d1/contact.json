{
  "address": "0x992447bbd9d9e1d98deaa7d6237b3ebd0ced728e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Syndicate",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-12\n*/\n\npragma solidity ^0.5.0;\n\n/**\n * Syndicate\n *\n * A way to distribute ownership of ether in time\n **/\n\ncontract Syndicate {\n\n  mapping (address => uint256) public balances;\n\n  struct Payment {\n    address sender;\n    address payable receiver;\n    uint256 timestamp;\n    uint256 time;\n    uint256 weiValue;\n    uint256 weiPaid;\n    bool isFork;\n    uint256 parentIndex;\n  }\n\n  Payment[] public payments;\n\n  // A mapping of Payment index to forked payments that have been created\n  mapping (uint256 => uint256[2]) public forkIndexes;\n\n  event PaymentUpdated(uint256 index);\n  event PaymentCreated(uint256 index);\n  event BalanceUpdated(address payable target);\n\n  /**\n   * Deposit to a given address over a certain amount of time.\n   **/\n  function deposit(address payable _receiver, uint256 _time) external payable {\n    balances[msg.sender] += msg.value;\n    emit BalanceUpdated(msg.sender);\n    pay(_receiver, msg.value, _time);\n  }\n\n  /**\n   * Pay from sender to receiver a certain amount over a certain amount of time.\n   **/\n  function pay(address payable _receiver, uint256 _weiValue, uint256 _time) public {\n    // Verify that the balance is there and value is non-zero\n    require(_weiValue <= balances[msg.sender] && _weiValue > 0);\n    // Verify the time is non-zero\n    require(_time > 0);\n    payments.push(Payment({\n      sender: msg.sender,\n      receiver: _receiver,\n      timestamp: block.timestamp,\n      time: _time,\n      weiValue: _weiValue,\n      weiPaid: 0,\n      isFork: false,\n      parentIndex: 0\n    }));\n    // Update the balance value of the sender to effectively lock the funds in place\n    balances[msg.sender] -= _weiValue;\n    emit BalanceUpdated(msg.sender);\n    emit PaymentCreated(payments.length - 1);\n  }\n\n  /**\n   * Settle an individual payment at the current point in time.\n   *\n   * Can be called idempotently.\n   **/\n  function paymentSettle(uint256 index) public {\n    uint256 owedWei = paymentWeiOwed(index);\n    balances[payments[index].receiver] += owedWei;\n    emit BalanceUpdated(payments[index].receiver);\n    payments[index].weiPaid += owedWei;\n    emit PaymentUpdated(index);\n  }\n\n  /**\n   * Return the wei owed on a payment at the current block timestamp.\n   **/\n  function paymentWeiOwed(uint256 index) public view returns (uint256) {\n    assertPaymentIndexInRange(index);\n    Payment memory payment = payments[index];\n    // Calculate owed wei based on current time and total wei owed/paid\n    return max(payment.weiPaid, payment.weiValue * min(block.timestamp - payment.timestamp, payment.time) / payment.time) - payment.weiPaid;\n  }\n\n  /**\n   * Forks a payment to another address for the duration of a payment. Allows\n   * responsibility of funds to be delegated to other addresses by payment\n   * recipient.\n   *\n   * Payment completion time is unaffected by forking, the only thing that\n   * changes is recipient.\n   *\n   * Payments can be forked until weiValue is 0, at which point the Payment is\n   * settled. Child payments can also be forked.\n   **/\n  function paymentFork(uint256 index, address payable _receiver, uint256 _weiValue) public {\n    Payment memory payment = payments[index];\n    // Make sure the payment owner is operating\n    require(msg.sender == payment.receiver);\n\n    uint256 remainingWei = payment.weiValue - payment.weiPaid;\n    uint256 remainingTime = max(0, payment.time - (block.timestamp - payment.timestamp));\n\n    // Ensure there is enough unsettled wei in the payment\n    require(remainingWei >= _weiValue);\n    require(_weiValue > 0);\n\n    // Create a new Payment of _weiValue to _receiver over the remaining time of\n    // Payment at index\n    payments[index].weiValue = payments[index].weiPaid;\n    emit PaymentUpdated(index);\n\n    payments.push(Payment({\n      sender: msg.sender,\n      receiver: _receiver,\n      timestamp: block.timestamp,\n      time: remainingTime,\n      weiValue: _weiValue,\n      weiPaid: 0,\n      isFork: true,\n      parentIndex: index\n    }));\n    forkIndexes[index][0] = payments.length - 1;\n    emit PaymentCreated(payments.length - 1);\n\n    payments.push(Payment({\n      sender: payment.receiver,\n      receiver: payment.receiver,\n      timestamp: block.timestamp,\n      time: remainingTime,\n      weiValue: remainingWei - _weiValue,\n      weiPaid: 0,\n      isFork: true,\n      parentIndex: index\n    }));\n    forkIndexes[index][1] = payments.length - 1;\n    emit PaymentCreated(payments.length - 1);\n  }\n\n  function paymentForkIndexes(uint256 index) public view returns (uint256[2] memory) {\n    assertPaymentIndexInRange(index);\n    return forkIndexes[index];\n  }\n\n  function isPaymentForked(uint256 index) public view returns (bool) {\n    assertPaymentIndexInRange(index);\n    return forkIndexes[index][0] != 0 && forkIndexes[index][1] != 0;\n  }\n\n  /**\n   * Accessor for determining if a given payment is fully settled.\n   **/\n  function isPaymentSettled(uint256 index) public view returns (bool) {\n    assertPaymentIndexInRange(index);\n    Payment memory payment = payments[index];\n    return payment.weiValue == payment.weiPaid;\n  }\n\n  /**\n   * Reverts if the supplied payment index is out of range\n   **/\n  function assertPaymentIndexInRange(uint256 index) public view {\n    require(index < payments.length);\n  }\n\n  /**\n   * Withdraw target address balance from Syndicate to ether.\n   **/\n  function withdraw(address payable target, uint256 weiValue) public {\n    require(balances[target] >= weiValue);\n    balances[target] -= weiValue;\n    emit BalanceUpdated(target);\n    target.transfer(weiValue);\n  }\n\n  /**\n   * One argument, target address.\n   **/\n  function withdraw(address payable target) public {\n    withdraw(target, balances[target]);\n  }\n\n  /**\n   * No arguments, withdraws full balance to sender from sender balance.\n   **/\n  function withdraw() public {\n    withdraw(msg.sender, balances[msg.sender]);\n  }\n\n  /**\n   * Accessor for array length\n   **/\n  function paymentCount() public view returns (uint) {\n    return payments.length;\n  }\n\n  /**\n   * Return the smaller of two values.\n   **/\n  function min(uint a, uint b) private pure returns (uint) {\n    return a < b ? a : b;\n  }\n\n  /**\n   * Return the larger of two values.\n   **/\n  function max(uint a, uint b) private pure returns (uint) {\n    return a > b ? a : b;\n  }\n}",
  "bytecode": ""
}