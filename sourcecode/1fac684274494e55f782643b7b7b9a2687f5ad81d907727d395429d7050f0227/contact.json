{
  "address": "0x9e2de29ba408f7ad0a014164e5fca0d2d5a45b1a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WhitelistedBasicCrowdsale",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-20\n*/\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\npragma solidity ^0.4.21;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.4.21;\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.4.21;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n\npragma solidity ^0.4.21;\n\n\n\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale,\n * allowing investors to purchase tokens with ether. This contract implements\n * such functionality in its most fundamental form and can be extended to provide additional\n * functionality and/or custom behavior.\n * The external interface represents the basic interface for purchasing tokens, and conform\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n * behavior.\n */\ncontract Crowdsale {\n  using SafeMath for uint256;\n\n  // The token being sold\n  ERC20 public token;\n\n  // Address where funds are collected\n  address public wallet;\n\n  // How many token units a buyer gets per wei\n  uint256 public rate;\n\n  // Amount of wei raised\n  uint256 public weiRaised;\n\n  /**\n   * Event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n  /**\n   * @param _rate Number of token units a buyer gets per wei\n   * @param _wallet Address where collected funds will be forwarded to\n   * @param _token Address of the token being sold\n   */\n  function Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public {\n    require(_rate > 0);\n    require(_wallet != address(0));\n    require(_token != address(0));\n\n    rate = _rate;\n    wallet = _wallet;\n    token = _token;\n  }\n\n  // -----------------------------------------\n  // Crowdsale external interface\n  // -----------------------------------------\n\n  /**\n   * @dev fallback function ***DO NOT OVERRIDE***\n   */\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * @dev low level token purchase ***DO NOT OVERRIDE***\n   * @param _beneficiary Address performing the token purchase\n   */\n  function buyTokens(address _beneficiary) public payable {\n\n    uint256 weiAmount = msg.value;\n    _preValidatePurchase(_beneficiary, weiAmount);\n\n    // calculate token amount to be created\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    _processPurchase(_beneficiary, tokens);\n    emit TokenPurchase(\n      msg.sender,\n      _beneficiary,\n      weiAmount,\n      tokens\n    );\n\n    _updatePurchasingState(_beneficiary, weiAmount);\n\n    _forwardFunds();\n    _postValidatePurchase(_beneficiary, weiAmount);\n  }\n\n  // -----------------------------------------\n  // Internal interface (extensible)\n  // -----------------------------------------\n\n  /**\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n    require(_beneficiary != address(0));\n    require(_weiAmount != 0);\n  }\n\n  /**\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n    // optional override\n  }\n\n  /**\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n   * @param _beneficiary Address performing the token purchase\n   * @param _tokenAmount Number of tokens to be emitted\n   */\n  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n    token.transfer(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n   * @param _beneficiary Address receiving the tokens\n   * @param _tokenAmount Number of tokens to be purchased\n   */\n  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n    _deliverTokens(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n   * @param _beneficiary Address receiving the tokens\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n    // optional override\n  }\n\n  /**\n   * @dev Override to extend the way in which ether is converted to tokens.\n   * @param _weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n    return _weiAmount.mul(rate);\n  }\n\n  /**\n   * @dev Determines how ETH is stored/forwarded on purchases.\n   */\n  function _forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\npragma solidity ^0.4.21;\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\npragma solidity ^0.4.21;\n\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.4.21;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n\npragma solidity ^0.4.21;\n\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: zeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol\n\npragma solidity ^0.4.21;\n\n\n\n\n/**\n * @title MintedCrowdsale\n * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\n * Token ownership should be transferred to MintedCrowdsale for minting. \n */\ncontract MintedCrowdsale is Crowdsale {\n\n  /**\n   * @dev Overrides delivery by minting tokens upon purchase.\n   * @param _beneficiary Token purchaser\n   * @param _tokenAmount Number of tokens to be minted\n   */\n  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n    require(MintableToken(token).mint(_beneficiary, _tokenAmount));\n  }\n}\n\n// File: zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\n\npragma solidity ^0.4.21;\n\n\n\n\n/**\n * @title TimedCrowdsale\n * @dev Crowdsale accepting contributions only within a time frame.\n */\ncontract TimedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 public openingTime;\n  uint256 public closingTime;\n\n  /**\n   * @dev Reverts if not in crowdsale time range.\n   */\n  modifier onlyWhileOpen {\n    // solium-disable-next-line security/no-block-members\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n    _;\n  }\n\n  /**\n   * @dev Constructor, takes crowdsale opening and closing times.\n   * @param _openingTime Crowdsale opening time\n   * @param _closingTime Crowdsale closing time\n   */\n  function TimedCrowdsale(uint256 _openingTime, uint256 _closingTime) public {\n    // solium-disable-next-line security/no-block-members\n    require(_openingTime >= block.timestamp);\n    require(_closingTime >= _openingTime);\n\n    openingTime = _openingTime;\n    closingTime = _closingTime;\n  }\n\n  /**\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n   * @return Whether crowdsale period has elapsed\n   */\n  function hasClosed() public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp > closingTime;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring to be within contributing period\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol\n\npragma solidity ^0.4.21;\n\n\n\n\n\n/**\n * @title FinalizableCrowdsale\n * @dev Extension of Crowdsale where an owner can do extra work\n * after finishing.\n */\ncontract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n  using SafeMath for uint256;\n\n  bool public isFinalized = false;\n\n  event Finalized();\n\n  /**\n   * @dev Must be called after crowdsale ends, to do some extra finalization\n   * work. Calls the contract's finalization function.\n   */\n  function finalize() onlyOwner public {\n    require(!isFinalized);\n    require(hasClosed());\n\n    finalization();\n    emit Finalized();\n\n    isFinalized = true;\n  }\n\n  /**\n   * @dev Can be overridden to add finalization logic. The overriding function\n   * should call super.finalization() to ensure the chain of finalization is\n   * executed entirely.\n   */\n  function finalization() internal {\n  }\n\n}\n\n// File: contracts/Crowdsale/BasicCrowdsale.sol\n\npragma solidity ^0.4.24;\n\n\n\n\ncontract BasicCrowdsale is MintedCrowdsale, FinalizableCrowdsale {\n    \n    uint256 public cap = 100000000 * (10 ** 18); // Total number of MYO tokens that would be created\n    uint256 public capForSale = 71000000 * (10 ** 18); // Total MYO tokens that could be sold during the ICO\n    uint256 public bountyTokensCap = 5000000 * (10 ** 18); // Total number of MYO tokens that would be given as a reward\n    uint256 public reservedForTeamTokens = 29000000 * (10 ** 18); // Tokens reserved for rewardpool, advisors and team that will be minted after Crowdsale\n    uint256 public totalMintedBountyTokens; // Total number of MYO tokens given as a reward\n\n    uint256 public privateSaleEndDate;\n    mapping (address => bool) public minters;\n\n    uint256 constant MIN_CONTRIBUTION_AMOUNT = 10 finney;\n    uint256 constant MAX_CONTRIBUTION_AMOUNT = 250 ether;\n\n    uint256 public constant PRIVATE_SALE_CAP = 26000000 * (10 ** 18);\n    uint256 public constant PRIVATE_SALE_DURATION = 24 days; // to be calculated according to deployment day; the end date should be 15 May\n\n    uint256 public constant MAIN_SALE_DURATION = 60 days;\n    uint256 public mainSaleDurationExtentionLimitInDays = 120; //max days the duration of the ICO can be extended\n\n    event LogFiatTokenMinted(address sender, address beficiary, uint256 amount);\n    event LogFiatTokenMintedToMany(address sender, address[] beneficiaries, uint256[] amount);\n    event LogBountyTokenMinted(address minter, address beneficiary, uint256 amount);\n    event LogBountyTokenMintedToMany(address sender, address[] beneficiaries, uint256[] amount);\n    event LogPrivateSaleExtended(uint256 extentionInDays);\n    event LogMainSaleExtended(uint256 extentionInDays);\n    event LogRateChanged(uint256 rate);\n    event LogMinterAdded(address minterAdded);\n    event LogMinterRemoved(address minterRemoved);\n\n    constructor(uint256 _rate, address _wallet, address _token, uint256 _openingTime, uint256 _closingTime)\n    Crowdsale(_rate, _wallet, ERC20(_token))\n    TimedCrowdsale(_openingTime, _closingTime) public {\n        privateSaleEndDate = _openingTime.add(PRIVATE_SALE_DURATION);\n    }\n\n    // only addresses who are allowed to mint\n    modifier onlyMinter (){\n        require(minters[msg.sender]);\n        _;\n    }\n\n    function buyTokens(address beneficiary) public payable {\n        require(msg.value >= MIN_CONTRIBUTION_AMOUNT);\n        require(msg.value <= MAX_CONTRIBUTION_AMOUNT);\n        uint amount = _getTokenAmount(msg.value);\n        if(now <= privateSaleEndDate) {\n            require(MintableToken(token).totalSupply().add(amount) < PRIVATE_SALE_CAP);\n        }\n        \n        require(MintableToken(token).totalSupply().add(amount) <= capForSale);\n        super.buyTokens(beneficiary);\n    }\n\n    function addMinter(address _minter) public onlyOwner {\n        require(_minter != address(0));\n        minters[_minter] = true;\n        emit LogMinterAdded(_minter);\n    }\n\n    function removeMinter(address _minter) public onlyOwner {\n        minters[_minter] = false;\n        emit LogMinterRemoved(_minter);\n    }\n\n    function createFiatToken(address beneficiary, uint256 amount) public onlyMinter() returns(bool){\n        require(!hasClosed());\n        mintFiatToken(beneficiary, amount);\n        emit LogFiatTokenMinted(msg.sender, beneficiary, amount);\n        return true;\n    }\n\n    function createFiatTokenToMany(address[] beneficiaries, uint256[] amount) public onlyMinter() returns(bool){\n        multiBeneficiariesValidation(beneficiaries, amount);\n        for(uint i = 0; i < beneficiaries.length; i++){\n            mintFiatToken(beneficiaries[i], amount[i]);\n        } \n        emit LogFiatTokenMintedToMany(msg.sender, beneficiaries, amount);\n        return true;\n    }\n\n    function mintFiatToken(address beneficiary, uint256 amount) internal {\n        require(MintableToken(token).totalSupply().add(amount) <= capForSale);\n        MintableToken(token).mint(beneficiary, amount);\n    }\n\n    function createBountyToken(address beneficiary, uint256 amount) public onlyMinter() returns (bool) {\n        require(!hasClosed());\n        mintBountyToken(beneficiary, amount);\n        emit LogBountyTokenMinted(msg.sender, beneficiary, amount);\n        return true;\n    }\n\n    function createBountyTokenToMany(address[] beneficiaries, uint256[] amount) public onlyMinter() returns (bool) {\n        multiBeneficiariesValidation(beneficiaries, amount);\n        for(uint i = 0; i < beneficiaries.length; i++){\n            mintBountyToken(beneficiaries[i], amount[i]);\n        }\n        \n        emit LogBountyTokenMintedToMany(msg.sender, beneficiaries, amount);\n        return true;\n    }\n\n    function mintBountyToken(address beneficiary, uint256 amount) internal {\n        require(MintableToken(token).totalSupply().add(amount) <= capForSale);\n        require(totalMintedBountyTokens.add(amount) <= bountyTokensCap);\n        MintableToken(token).mint(beneficiary, amount);\n        totalMintedBountyTokens = totalMintedBountyTokens.add(amount);\n    }\n\n    function multiBeneficiariesValidation(address[] beneficiaries, uint256[] amount) internal view {\n        require(!hasClosed());\n        require(beneficiaries.length > 0);\n        require(beneficiaries.length == amount.length);\n    }\n\n    /**\n        @param extentionInDays is a simple number of the days, e.c. 3 => 3 days\n     */\n    function extendPrivateSaleDuration(uint256 extentionInDays) public onlyOwner returns (bool) {\n        require(now <= privateSaleEndDate);\n        extentionInDays = extentionInDays.mul(1 days); // convert the days in seconds\n        privateSaleEndDate = privateSaleEndDate.add(extentionInDays);\n        closingTime = closingTime.add(extentionInDays);\n        emit LogPrivateSaleExtended(extentionInDays);\n        return true;\n    }\n\n    /**\n        @param extentionInDays is a simple number of the days, e.c. 3 => 3 days\n     */\n    function extendMainSaleDuration(uint256 extentionInDays) public onlyOwner returns (bool) {\n        require(now > privateSaleEndDate);\n        require(!hasClosed());\n        require(mainSaleDurationExtentionLimitInDays.sub(extentionInDays) >= 0);\n\n        uint256 extention = extentionInDays.mul(1 days); // convert the days in seconds\n        mainSaleDurationExtentionLimitInDays = mainSaleDurationExtentionLimitInDays.sub(extentionInDays); // substract days from the limit\n        closingTime = closingTime.add(extention);\n\n        emit LogMainSaleExtended(extentionInDays);\n        return true;\n    }\n\n    function changeRate(uint _newRate) public onlyOwner returns (bool) {\n        require(!hasClosed());\n        require(_newRate != 0);\n        rate = _newRate;\n        emit LogRateChanged(_newRate);\n        return true;\n    }\n\n    // after finalization will be minted manually reservedForTeamTokens amount\n    function finalization() internal {\n        MintableToken(token).transferOwnership(owner);\n        super.finalization();\n    }\n}\n\n// File: contracts/Crowdsale/MultipleWhitelistedCrowdsale.sol\n\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title MultipleWhitelistedCrowdsale\n * @dev Crowdsale in which only whitelisted users can contribute.\n */\ncontract MultipleWhitelistedCrowdsale is Crowdsale, Ownable {\n\n  mapping(address => bool) public whitelist;\n  // keeps all addresses who can manage the whitelist\n  mapping(address => bool) public whitelistManagers;\n\n  constructor() public {\n      whitelistManagers[owner] = true;\n  }\n\n  /**\n   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n   */\n  modifier isWhitelisted(address _beneficiary) {\n    require(whitelist[_beneficiary]);\n    _;\n  }\n\n  /**\n   * @dev Reverts if msg.sender is not whitelist manager\n   */\n  modifier onlyWhitelistManager(){\n      require(whitelistManagers[msg.sender]);\n      _;\n  }\n\n  /**\n   * @dev Adds single address who can manage the whitelist.\n   * @param _manager Address to be added to the whitelistManagers\n   */\n  function addWhitelistManager(address _manager) public onlyOwner {\n      require(_manager != address(0));\n      whitelistManagers[_manager] = true;\n  }\n\n  /**\n  * @param _manager Address to remove from whitelistManagers\n   */\n\n  function removeWhitelistManager(address _manager) public onlyOwner {\n      whitelistManagers[_manager] = false;\n  }\n\n  /**\n   * @dev Adds single address to whitelist.\n   * @param _beneficiary Address to be added to the whitelist\n   */\n  function addToWhitelist(address _beneficiary) external onlyWhitelistManager() {\n    whitelist[_beneficiary] = true;\n  }\n\n  /**\n   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n   * @param _beneficiaries Addresses to be added to the whitelist\n   */\n  function addManyToWhitelist(address[] _beneficiaries) external onlyWhitelistManager() {\n    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n      whitelist[_beneficiaries[i]] = true;\n    }\n  }\n\n  /**\n   * @dev Removes single address from whitelist.\n   * @param _beneficiary Address to be removed to the whitelist\n   */\n  function removeFromWhitelist(address _beneficiary) external onlyWhitelistManager() {\n    whitelist[_beneficiary] = false;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n   * @param _beneficiary Token beneficiary\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n}\n\n// File: contracts/Crowdsale/WhitelistedBasicCrowdsale.sol\n\npragma solidity ^0.4.24;\n\n\n\n\ncontract WhitelistedBasicCrowdsale is BasicCrowdsale, MultipleWhitelistedCrowdsale {\n\n\n    constructor(uint256 _rate, address _wallet, address _token, uint256 _openingTime, uint256 _closingTime)\n    BasicCrowdsale(_rate, _wallet, ERC20(_token), _openingTime, _closingTime)\n    MultipleWhitelistedCrowdsale()\n    public {\n    }\n}",
  "bytecode": "60806040526000600660146101000a81548160ff0219169083151502179055506a52b7d2dcc80cd2e40000006007556a3abad5b65ad5e7a70000006008556a0422ca8b0a00a4250000006009556a17fcfd266d36eb3d000000600a556078600e553480156200006d57600080fd5b5060405160a08062002d6d833981018060405281019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505084848484848181868686600083111515620000d357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200011057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156200014d57600080fd5b8260028190555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050428210151515620001e857600080fd5b818110151515620001f857600080fd5b8160048190555080600581905550505033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200026f621fa40083620002ff6401000000000262002120179091906401000000009004565b600c819055505050505050600160106000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050506200031c565b600081830190508281101515156200031357fe5b80905092915050565b612a41806200032c6000396000f3006080604052600436106101e2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680626c2abc146101ed5780631515bc2b146102185780632c4e722e146102475780633092afd51461027257806331e8e0a2146102b5578063352cf07a14610310578063355274ea146103d157806336facd8d146103fc5780634042b66f1461043f578063431454fb1461046a5780634b6753bc146104955780634bb278f3146104c0578063521eb273146104d7578063532cf78d1461052e5780635b909e2d146105735780636178dbeb1461059e5780636b7837d4146105c957806374e7493b1461068a5780637de528ad146106cf5780638ab1d681146106fa5780638b3f520e1461073d5780638c10671c146107685780638d4e4083146107a35780638da5cb5b146107d25780638eab0f8614610829578063983b2d5614610854578063993721d4146108975780639b19251a146108dc578063b7a8807c14610937578063c18bab4a14610962578063c28f06f71461098d578063d81685fc146109f2578063e43252d714610a35578063ec0290ad14610a78578063ec8ac4d814610aa3578063f1a6373314610ad9578063f2fde38b14610b3e578063f46eccc414610b81578063fc0c546a14610bdc575b6101eb33610c33565b005b3480156101f957600080fd5b50610202610e53565b6040518082815260200191505060405180910390f35b34801561022457600080fd5b5061022d610e59565b604051808215151515815260200191505060405180910390f35b34801561025357600080fd5b5061025c610e65565b6040518082815260200191505060405180910390f35b34801561027e57600080fd5b506102b3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e6b565b005b3480156102c157600080fd5b506102f6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f85565b604051808215151515815260200191505060405180910390f35b34801561031c57600080fd5b506103b76004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610fa5565b604051808215151515815260200191505060405180910390f35b3480156103dd57600080fd5b506103e661115d565b6040518082815260200191505060405180910390f35b34801561040857600080fd5b5061043d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611163565b005b34801561044b57600080fd5b50610454611256565b6040518082815260200191505060405180910390f35b34801561047657600080fd5b5061047f61125c565b6040518082815260200191505060405180910390f35b3480156104a157600080fd5b506104aa611262565b6040518082815260200191505060405180910390f35b3480156104cc57600080fd5b506104d5611268565b005b3480156104e357600080fd5b506104ec611344565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561053a57600080fd5b506105596004803603810190808035906020019092919050505061136a565b604051808215151515815260200191505060405180910390f35b34801561057f57600080fd5b506105886114a0565b6040518082815260200191505060405180910390f35b3480156105aa57600080fd5b506105b36114a6565b6040518082815260200191505060405180910390f35b3480156105d557600080fd5b5061067060048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506114ac565b604051808215151515815260200191505060405180910390f35b34801561069657600080fd5b506106b560048036038101908080359060200190929190505050611664565b604051808215151515815260200191505060405180910390f35b3480156106db57600080fd5b506106e461172d565b6040518082815260200191505060405180910390f35b34801561070657600080fd5b5061073b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061173c565b005b34801561074957600080fd5b506107526117ef565b6040518082815260200191505060405180910390f35b34801561077457600080fd5b506107a16004803603810190808035906020019082018035906020019190919293919293905050506117f6565b005b3480156107af57600080fd5b506107b86118f4565b604051808215151515815260200191505060405180910390f35b3480156107de57600080fd5b506107e7611907565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561083557600080fd5b5061083e61192d565b6040518082815260200191505060405180910390f35b34801561086057600080fd5b50610895600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611934565b005b3480156108a357600080fd5b506108c260048036038101908080359060200190929190505050611a8a565b604051808215151515815260200191505060405180910390f35b3480156108e857600080fd5b5061091d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b87565b604051808215151515815260200191505060405180910390f35b34801561094357600080fd5b5061094c611ba7565b6040518082815260200191505060405180910390f35b34801561096e57600080fd5b50610977611bad565b6040518082815260200191505060405180910390f35b34801561099957600080fd5b506109d8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611bb3565b604051808215151515815260200191505060405180910390f35b3480156109fe57600080fd5b50610a33600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cd4565b005b348015610a4157600080fd5b50610a76600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d8b565b005b348015610a8457600080fd5b50610a8d611e3e565b6040518082815260200191505060405180910390f35b610ad7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c33565b005b348015610ae557600080fd5b50610b24600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611e44565b604051808215151515815260200191505060405180910390f35b348015610b4a57600080fd5b50610b7f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f65565b005b348015610b8d57600080fd5b50610bc2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120bd565b604051808215151515815260200191505060405180910390f35b348015610be857600080fd5b50610bf16120dd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000662386f26fc100003410151515610c4b57600080fd5b680d8d726b7177a800003411151515610c6357600080fd5b610c6c34612102565b9050600c5442111515610d64576a1581b6d300d0225a000000610d57826000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610d0e57600080fd5b505af1158015610d22573d6000803e3d6000fd5b505050506040513d6020811015610d3857600080fd5b810190808051906020019092919050505061212090919063ffffffff16565b101515610d6357600080fd5b5b600854610e39826000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610df057600080fd5b505af1158015610e04573d6000803e3d6000fd5b505050506040513d6020811015610e1a57600080fd5b810190808051906020019092919050505061212090919063ffffffff16565b11151515610e4657600080fd5b610e4f8261213c565b5050565b600c5481565b60006005544211905090565b60025481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ec757600080fd5b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f4f2e45736bb0b7476bb1aaf6ee5b6f4ae1783384c4f707a4158e14d64d7eda0481604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b60106020528060005260406000206000915054906101000a900460ff1681565b600080600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561100057600080fd5b61100a848461220a565b600090505b835181101561105d57611050848281518110151561102957fe5b90602001906020020151848381518110151561104157fe5b90602001906020020151612242565b808060010191505061100f565b7f737d5cf083c6df12390be993628fed9e8cffb9adcdeab9b73a4d388219b9ec31338585604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156110fa5780820151818401526020810190506110df565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561113c578082015181840152602081019050611121565b505050509050019550505050505060405180910390a1600191505092915050565b60075481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111bf57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156111fb57600080fd5b6001601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60035481565b600b5481565b60055481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c457600080fd5b600660149054906101000a900460ff161515156112e057600080fd5b6112e8610e59565b15156112f357600080fd5b6112fb612468565b7f6823b073d48d6e3a7d385eeb601452d680e74bb46afe3255a7d778f3a9b1768160405160405180910390a16001600660146101000a81548160ff021916908315150217905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113c957600080fd5b600c54421115156113d957600080fd5b6113e1610e59565b1515156113ed57600080fd5b600061140484600e5461256890919063ffffffff16565b1015151561141157600080fd5b611427620151808461258190919063ffffffff16565b905061143e83600e5461256890919063ffffffff16565b600e819055506114598160055461212090919063ffffffff16565b6005819055507fd56dc2c860b2962a58ce1023598b72cac28c14ecf3087a391d2c3825ea8ccb7e836040518082815260200191505060405180910390a16001915050919050565b600a5481565b60085481565b600080600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561150757600080fd5b611511848461220a565b600090505b835181101561156457611557848281518110151561153057fe5b90602001906020020151848381518110151561154857fe5b906020019060200201516125b9565b8080600101915050611516565b7fb753273e44b9730704674aac88c238e01a104313f167154be5853064e1dd66f0338585604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156116015780820151818401526020810190506115e6565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015611643578082015181840152602081019050611628565b505050509050019550505050505060405180910390a1600191505092915050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116c257600080fd5b6116ca610e59565b1515156116d657600080fd5b600082141515156116e657600080fd5b816002819055507f9d6ef0d454e23e234e8c1cf70cee49a44226ffb036017442229a7a5bd1d0957e826040518082815260200191505060405180910390a160019050919050565b6a1581b6d300d0225a00000081565b601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561179457600080fd5b6000600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b621fa40081565b6000601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561185057600080fd5b600090505b828290508110156118ef576001600f6000858585818110151561187457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050611855565b505050565b600660149054906101000a900460ff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b624f1a0081565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561199057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156119cc57600080fd5b6001600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507ff520dd67ceedf317bc1fd6202af56f22510a422039748e1dc927ad4f5dcfd51c81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ae857600080fd5b600c544211151515611af957600080fd5b611b0f620151808361258190919063ffffffff16565b9150611b2682600c5461212090919063ffffffff16565b600c81905550611b418260055461212090919063ffffffff16565b6005819055507f7df78e9fd0846ddf39f6308d970e33c9c54abfcfb0090cb6c0d716f7986f8b29826040518082815260200191505060405180910390a160019050919050565b600f6020528060005260406000206000915054906101000a900460ff1681565b60045481565b600e5481565b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611c0d57600080fd5b611c15610e59565b151515611c2157600080fd5b611c2b83836125b9565b7f95a520a21ce4355b93aeb1d7ee5a2c3fc33509998055b6d5779ef10097a52cc2338484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a16001905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d3057600080fd5b6000601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611de357600080fd5b6001600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60095481565b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611e9e57600080fd5b611ea6610e59565b151515611eb257600080fd5b611ebc8383612242565b7fda06cceac0e5d29c435bd56e522309bbd7c1a35f7192d1aa7b533903d94854f0338484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a16001905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611fc157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611ffd57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600d6020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006121196002548361258190919063ffffffff16565b9050919050565b6000818301905082811015151561213357fe5b80905092915050565b60008034915061214c838361279f565b61215582612102565b905061216c8260035461212090919063ffffffff16565b60038190555061217c8382612807565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188484604051808381526020018281526020019250505060405180910390a36121f38383612815565b6121fb612819565b6122058383612884565b505050565b612212610e59565b15151561221e57600080fd5b6000825111151561222e57600080fd5b8051825114151561223e57600080fd5b5050565b600854612317826000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156122ce57600080fd5b505af11580156122e2573d6000803e3d6000fd5b505050506040513d60208110156122f857600080fd5b810190808051906020019092919050505061212090919063ffffffff16565b1115151561232457600080fd5b60095461233c82600b5461212090919063ffffffff16565b1115151561234957600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561240d57600080fd5b505af1158015612421573d6000803e3d6000fd5b505050506040513d602081101561243757600080fd5b81019080805190602001909291905050505061245e81600b5461212090919063ffffffff16565b600b819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2fde38b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561254657600080fd5b505af115801561255a573d6000803e3d6000fd5b50505050612566612888565b565b600082821115151561257657fe5b818303905092915050565b60008083141561259457600090506125b3565b81830290508183828115156125a557fe5b041415156125af57fe5b8090505b92915050565b60085461268e826000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561264557600080fd5b505af1158015612659573d6000803e3d6000fd5b505050506040513d602081101561266f57600080fd5b810190808051906020019092919050505061212090919063ffffffff16565b1115151561269b57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561275f57600080fd5b505af1158015612773573d6000803e3d6000fd5b505050506040513d602081101561278957600080fd5b8101908080519060200190929190505050505050565b81600f60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156127f857600080fd5b612802838361288a565b505050565b61281182826128b7565b5050565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015612881573d6000803e3d6000fd5b50565b5050565b565b600454421015801561289e57506005544211155b15156128a957600080fd5b6128b382826129c5565b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561297b57600080fd5b505af115801561298f573d6000803e3d6000fd5b505050506040513d60208110156129a557600080fd5b810190808051906020019092919050505015156129c157600080fd5b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612a0157600080fd5b60008114151515612a1157600080fd5b50505600a165627a7a72305820e45b51dcf8eb0dd3aa18d68d8f0ec7029d854310020ed4b611b0783817c33ea100290000000000000000000000000000000000000000000000000000000000000258000000000000000000000000f603b0226b2901464e6833d1424340547ac0bce300000000000000000000000050987e6be405ebac691f8988304562e5efc3b2ea000000000000000000000000000000000000000000000000000000005cbd0400000000000000000000000000000000000000000000000000000000005d2bc200",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000258000000000000000000000000f603b0226b2901464e6833d1424340547ac0bce300000000000000000000000050987e6be405ebac691f8988304562e5efc3b2ea000000000000000000000000000000000000000000000000000000005cbd0400000000000000000000000000000000000000000000000000000000005d2bc200"
}