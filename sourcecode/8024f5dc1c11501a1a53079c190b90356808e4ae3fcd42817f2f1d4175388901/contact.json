{
  "address": "0x55c4ec02d22cc26d9dacd5ab5977a62439476e79",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Beethoven",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-21\n*/\n\npragma solidity ^0.5.0;\n\ninterface IMultiSigManager {\n\tfunction provideAddress(address origin, uint poolIndex) external returns (address payable);\n\tfunction passedContract(address) external returns (bool);\n\tfunction moderator() external returns(address);\n}\n\ninterface ICustodianToken {\n\tfunction emitTransfer(address from, address to, uint value) external returns (bool success);\n}\n\ninterface IWETH {\n\tfunction balanceOf(address) external returns (uint);\n\tfunction transfer(address to, uint value) external returns (bool success);\n\tfunction transferFrom(address from, address to, uint value) external returns (bool success);\n\tfunction approve(address spender, uint value) external returns (bool success);\n\tfunction allowance(address owner, address spender) external returns (uint);\n\tfunction withdraw(uint value) external;\n\tfunction deposit() external;\n}\n\ninterface IOracle {\n\tfunction getLastPrice() external returns(uint, uint);\n\tfunction started() external returns(bool);\n}\n\nlibrary SafeMath {\n\tfunction mul(uint a, uint b) internal pure returns (uint) {\n\t\tuint c = a * b;\n\t\tassert(a == 0 || c / a == b);\n\t\treturn c;\n\t}\n\n\tfunction div(uint a, uint b) internal pure returns (uint) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\tuint c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn c;\n\t}\n\n\tfunction sub(uint a, uint b) internal pure returns (uint) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\tfunction add(uint a, uint b) internal pure returns (uint) {\n\t\tuint c = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n\n\tfunction diff(uint a, uint b) internal pure returns (uint) {\n\t\treturn a > b ? sub(a, b) : sub(b, a);\n\t}\n\n\tfunction gt(uint a, uint b) internal pure returns(bytes1) {\n\t\tbytes1 c;\n\t\tc = 0x00;\n\t\tif (a > b) {\n\t\t\tc = 0x01;\n\t\t}\n\t\treturn c;\n\t}\n}\n\ncontract Managed {\n\tIMultiSigManager roleManager;\n\taddress public roleManagerAddress;\n\taddress public operator;\n\tuint public lastOperationTime;\n\tuint public operationCoolDown;\n\tuint constant BP_DENOMINATOR = 10000;\n\n\tevent UpdateRoleManager(address newManagerAddress);\n\tevent UpdateOperator(address updater, address newOperator);\n\n\tmodifier only(address addr) {\n\t\trequire(msg.sender == addr);\n\t\t_;\n\t}\n\n\tmodifier inUpdateWindow() {\n\t\tuint currentTime = getNowTimestamp();\n\t\trequire(currentTime - lastOperationTime >= operationCoolDown);\n\t\t_;\n\t\tlastOperationTime = currentTime;\n\t}\n\n\tconstructor(\n\t\taddress roleManagerAddr,\n\t\taddress opt, \n\t\tuint optCoolDown\n\t) public {\n\t\troleManagerAddress = roleManagerAddr;\n\t\troleManager = IMultiSigManager(roleManagerAddr);\n\t\toperator = opt;\n\t\toperationCoolDown = optCoolDown;\n\t}\n\n\tfunction updateRoleManager(address newManagerAddr) \n\t\tinUpdateWindow() \n\t\tpublic \n\treturns (bool) {\n\t\trequire(roleManager.passedContract(newManagerAddr));\n\t\troleManagerAddress = newManagerAddr;\n\t\troleManager = IMultiSigManager(roleManagerAddress);\n\t\trequire(roleManager.moderator() != address(0));\n\t\temit UpdateRoleManager(newManagerAddr);\n\t\treturn true;\n\t}\n\n\tfunction updateOperator() public inUpdateWindow() returns (bool) {\t\n\t\taddress updater = msg.sender;\t\n\t\toperator = roleManager.provideAddress(updater, 0);\n\t\temit UpdateOperator(updater, operator);\t\n\t\treturn true;\n\t}\n\n\tfunction getNowTimestamp() internal view returns (uint) {\n\t\treturn now;\n\t}\n}\n\n/// @title Custodian - every derivative contract should has basic custodian properties\n/// @author duo.network\ncontract Custodian is Managed {\n\tusing SafeMath for uint;\n\n\t/*\n     * Constants\n     */\n\tuint constant decimals = 18;\n\tuint constant WEI_DENOMINATOR = 1000000000000000000;\n\tenum State {\n\t\tInception,\n\t\tTrading,\n\t\tPreReset,\n\t\tReset,\n\t\tMatured\n\t}\n\n\t/*\n     * Storage\n     */\n\tIOracle oracle;\n\tICustodianToken aToken;\n\tICustodianToken bToken;\n\tstring public contractCode;\n\taddress payable feeCollector;\n\taddress oracleAddress;\n\taddress aTokenAddress;\n\taddress bTokenAddress;\n\tmapping(address => uint)[2] public balanceOf;\n\tmapping (address => mapping (address => uint))[2] public allowance;\n\taddress[] public users;\n\tmapping (address => uint) public existingUsers;\n\tState state;\n\tuint minBalance = 10000000000000000; // set at constructor\n\tuint public totalSupplyA;\n\tuint public totalSupplyB;\n\tuint ethCollateralInWei;\n\tuint navAInWei;\n\tuint navBInWei;\n\tuint lastPriceInWei;\n\tuint lastPriceTimeInSecond;\n\tuint resetPriceInWei;\n\tuint resetPriceTimeInSecond;\n\tuint createCommInBP;\n\tuint redeemCommInBP;\n\tuint period;\n\tuint maturityInSecond; // set to 0 for perpetuals\n\tuint preResetWaitingBlocks;\n\tuint priceFetchCoolDown;\n\t\n\t// cycle state variables\n\tuint lastPreResetBlockNo = 0;\n\tuint nextResetAddrIndex;\n\n\t/*\n     *  Modifiers\n     */\n\tmodifier inState(State _state) {\n\t\trequire(state == _state);\n\t\t_;\n\t}\n\n\t/*\n     *  Events\n     */\n\tevent StartTrading(uint navAInWei, uint navBInWei);\n\tevent StartPreReset();\n\tevent StartReset(uint nextIndex, uint total);\n\tevent Matured(uint navAInWei, uint navBInWei);\n\tevent AcceptPrice(uint indexed priceInWei, uint indexed timeInSecond, uint navAInWei, uint navBInWei);\n\tevent Create(address indexed sender, uint ethAmtInWei, uint tokenAInWei, uint tokenBInWei, uint feeInWei);\n\tevent Redeem(address indexed sender, uint ethAmtInWei, uint tokenAInWei, uint tokenBInWei, uint feeInWei);\n\tevent TotalSupply(uint totalSupplyAInWei, uint totalSupplyBInWei);\n\t// token events\n\tevent Transfer(address indexed from, address indexed to, uint value, uint index);\n\tevent Approval(address indexed tokenOwner, address indexed spender, uint tokens, uint index);\n\t// operation events\n\tevent CollectFee(address addr, uint feeInWei, uint feeBalanceInWei);\n\tevent UpdateOracle(address newOracleAddress);\n\tevent UpdateFeeCollector(address updater, address newFeeCollector);\n\n\t/*\n     *  Constructor\n     */\n\t/// @dev Contract constructor sets operation cool down and set address pool status.\n\t///\t@param code contract name\n\t///\t@param maturity marutiry time in second\n\t///\t@param roleManagerAddr roleManagerContract Address\n\t///\t@param fc feeCollector address\n\t///\t@param comm commission rate\n\t///\t@param pd period\n\t///\t@param preResetWaitBlk pre reset waiting block numbers\n\t///\t@param pxFetchCoolDown price fetching cool down\n\t///\t@param opt operator\n\t///\t@param optCoolDown operation cooldown\n\t///\t@param minimumBalance niminum balance required\n\tconstructor(\n\t\tstring memory code,\n\t\tuint maturity,\n\t\taddress roleManagerAddr,\n\t\taddress payable fc,\n\t\tuint comm,\n\t\tuint pd,\n\t\tuint preResetWaitBlk, \n\t\tuint pxFetchCoolDown,\n\t\taddress opt,\n\t\tuint optCoolDown,\n\t\tuint minimumBalance\n\t\t) \n\t\tpublic\n\t\tManaged(roleManagerAddr, opt, optCoolDown) \n\t{\n\t\tcontractCode = code;\n\t\tmaturityInSecond = maturity;\n\t\tstate = State.Inception;\n\t\tfeeCollector = fc;\n\t\tcreateCommInBP = comm;\n\t\tredeemCommInBP = comm;\n\t\tperiod = pd;\n\t\tpreResetWaitingBlocks = preResetWaitBlk;\n\t\tpriceFetchCoolDown = pxFetchCoolDown;\n\t\tnavAInWei = WEI_DENOMINATOR;\n\t\tnavBInWei = WEI_DENOMINATOR;\n\t\tminBalance = minimumBalance;\n\t}\n\n\t/*\n     * Public functions\n     */\n\n\t/// @dev return totalUsers in the system.\n\tfunction totalUsers() public view returns (uint) {\n\t\treturn users.length;\n\t}\n\n\tfunction feeBalanceInWei() public view returns(uint) {\n\t\treturn address(this).balance.sub(ethCollateralInWei);\n\t}\n\n\t/*\n     * ERC token functions\n     */\n\t/// @dev transferInternal function.\n\t/// @param index 0 is classA , 1 is class B\n\t/// @param from  from address\n\t/// @param to   to address\n\t/// @param tokens num of tokens transferred\n\tfunction transferInternal(uint index, address from, address to, uint tokens) \n\t\tinternal \n\t\tinState(State.Trading)\n\t\treturns (bool success) \n\t{\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(to != address(0));\n\t\t// Check if the sender has enough\n\t\trequire(balanceOf[index][from] >= tokens);\n\n\t\t// Save this for an assertion in the future\n\t\tuint previousBalances = balanceOf[index][from].add(balanceOf[index][to]);\n\t\t// Subtract from the sender\n\t\tbalanceOf[index][from] = balanceOf[index][from].sub(tokens);\n\t\t// Add the same to the recipient\n\t\tbalanceOf[index][to] = balanceOf[index][to].add(tokens);\n\t\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n\t\tassert(balanceOf[index][from].add(balanceOf[index][to]) == previousBalances);\n\t\temit Transfer(from, to, tokens, index);\n\t\tcheckUser(from, balanceOf[index][from], balanceOf[1 - index][from]);\n\t\tcheckUser(to, balanceOf[index][to], balanceOf[1 - index][to]);\n\t\treturn true;\n\t}\n\n\tfunction determineAddress(uint index, address from) internal view returns (address) {\n\t\treturn index == 0 && msg.sender == aTokenAddress || \n\t\t\tindex == 1 && msg.sender == bTokenAddress \n\t\t\t? from : msg.sender;\n\t}\n\n\tfunction transfer(uint index, address from, address to, uint tokens)\n\t\tpublic\n\t\tinState(State.Trading)\n\t\treturns (bool success) \n\t{\n\t\trequire(index == 0 || index == 1);\n\t\treturn transferInternal(index, determineAddress(index, from), to, tokens);\n\t}\n\n\tfunction transferFrom(uint index, address spender, address from, address to, uint tokens) \n\t\tpublic \n\t\tinState(State.Trading)\n\t\treturns (bool success) \n\t{\n\t\trequire(index == 0 || index == 1);\n\t\taddress spenderToUse = determineAddress(index, spender);\n\t\trequire(tokens <= allowance[index][from][spenderToUse]);\t // Check allowance\n\t\tallowance[index][from][spenderToUse] = allowance[index][from][spenderToUse].sub(tokens);\n\t\treturn transferInternal(index, from, to, tokens);\n\t}\n\n\tfunction approve(uint index, address sender, address spender, uint tokens) \n\t\tpublic \n\t\treturns (bool success) \n\t{\n\t\trequire(index == 0 || index == 1);\n\t\taddress senderToUse = determineAddress(index, sender);\n\t\tallowance[index][senderToUse][spender] = tokens;\n\t\temit Approval(senderToUse, spender, tokens, index);\n\t\treturn true;\n\t}\n\t// end of token functions\n\n\t/*\n     * Internal Functions\n     */\n\t// start of internal utility functions\n\tfunction checkUser(address user, uint256 balanceA, uint256 balanceB) internal {\n\t\tuint userIdx = existingUsers[user];\n\t\tif ( userIdx > 0) {\n\t\t\tif (balanceA < minBalance && balanceB < minBalance) {\n\t\t\t\tuint lastIdx = users.length;\n\t\t\t\taddress lastUser = users[lastIdx - 1];\n\t\t\t\tif (userIdx < lastIdx) {\n\t\t\t\t\tusers[userIdx - 1] = lastUser;\n\t\t\t\t\texistingUsers[lastUser] = userIdx;\n\t\t\t\t}\n\t\t\t\tdelete users[lastIdx - 1];\n\t\t\t\texistingUsers[user] = 0;\n\t\t\t\tusers.length--;\t\t\t\t\t\n\t\t\t}\n\t\t} else if (balanceA >= minBalance || balanceB >= minBalance) {\n\t\t\tusers.push(user);\n\t\t\texistingUsers[user] = users.length;\n\t\t}\n\t}\n\t// end of internal utility functions\n\n\t/*\n     * Operation Functions\n     */\n\tfunction collectFee(uint amountInWei) \n\t\tpublic \n\t\tonly(feeCollector) \n\t\tinState(State.Trading) \n\t\treturns (bool success) \n\t{\n\t\tuint feeBalance = feeBalanceInWei().sub(amountInWei);\n\t\tfeeCollector.transfer(amountInWei);\n\t\temit CollectFee(feeCollector, amountInWei, feeBalance);\n\t\treturn true;\n\t}\n\n\tfunction updateOracle(address newOracleAddr) \n\t\tonly(roleManager.moderator())\n\t\tinUpdateWindow() \n\t\tpublic \n\treturns (bool) {\n\t\trequire(roleManager.passedContract(newOracleAddr));\n\t\toracleAddress = newOracleAddr;\n\t\toracle = IOracle(oracleAddress);\n\t\t(uint lastPrice, uint lastPriceTime) = oracle.getLastPrice();\n\t\trequire(lastPrice > 0 && lastPriceTime > 0);\n\t\temit UpdateOracle(newOracleAddr);\n\t\treturn true;\n\t}\n\n\tfunction updateFeeCollector() \n\t\tpublic \n\t\tinUpdateWindow() \n\treturns (bool) {\n\t\taddress updater = msg.sender;\n\t\tfeeCollector = roleManager.provideAddress(updater, 0);\n\t\temit UpdateFeeCollector(updater, feeCollector);\n\t\treturn true;\n\t}\n}\n\n/// @title DualClassCustodian - dual class token contract\n/// @author duo.network\ncontract DualClassCustodian is Custodian {\n\t/*\n     * Storage\n     */\n\n\tuint alphaInBP;\n\tuint betaInWei;\n\tuint limitUpperInWei; \n\tuint limitLowerInWei;\n\tuint iterationGasThreshold;\n\tuint periodCouponInWei; \n\tuint limitPeriodicInWei; \n\n\t// reset intermediate values\n\tuint newAFromAPerA;\n\tuint newAFromBPerB;\n\tuint newBFromAPerA;\n\tuint newBFromBPerB;\n\n\tenum ResetState {\n\t\tUpwardReset,\n\t\tDownwardReset,\n\t\tPeriodicReset\n\t}\n\n\tResetState resetState;\n\n\t/*\n     * Events\n     */\n\tevent SetValue(uint index, uint oldValue, uint newValue);\n\n\tfunction() external payable {}\n\t\n\t/*\n     * Constructor\n     */\n\tconstructor(\n\t\tstring memory code,\n\t\tuint maturity,\n\t\taddress roleManagerAddr,\n\t\taddress payable fc,\n\t\tuint alpha,\n\t\tuint r,\n\t\tuint hp,\n\t\tuint hu,\n\t\tuint hd,\n\t\tuint comm,\n\t\tuint pd,\n\t\tuint optCoolDown,\n\t\tuint pxFetchCoolDown,\n\t\tuint iteGasTh,\n\t\tuint preResetWaitBlk,\n\t\tuint minimumBalance\n\t\t) \n\t\tpublic \n\t\tCustodian ( \n\t\tcode,\n\t\tmaturity,\n\t\troleManagerAddr,\n\t\tfc,\n\t\tcomm,\n\t\tpd,\n\t\tpreResetWaitBlk, \n\t\tpxFetchCoolDown,\n\t\tmsg.sender,\n\t\toptCoolDown,\n\t\tminimumBalance\n\t\t)\n\t{\n\t\talphaInBP = alpha;\n\t\tbetaInWei = WEI_DENOMINATOR;\n\t\tperiodCouponInWei = r;\n\t\tlimitPeriodicInWei = hp;\n\t\tlimitUpperInWei = hu; \n\t\tlimitLowerInWei = hd;\n\t\titerationGasThreshold = iteGasTh; // 65000;\n\t}\n\n\n\t/*\n     * Public Functions\n     */\n\t/// @dev startCustodian\n\t///\t@param aAddr contract address of Class A\n\t///\t@param bAddr contract address of Class B\n\t///\t@param oracleAddr contract address of Oracle\n\tfunction startCustodian(\n\t\taddress aAddr,\n\t\taddress bAddr,\n\t\taddress oracleAddr\n\t\t) \n\t\tpublic \n\t\tinState(State.Inception) \n\t\tonly(operator)\n\t\treturns (bool success) \n\t{\t\n\t\taTokenAddress = aAddr;\n\t\taToken = ICustodianToken(aTokenAddress);\n\t\tbTokenAddress = bAddr;\n\t\tbToken = ICustodianToken(bTokenAddress);\n\t\toracleAddress = oracleAddr;\n\t\toracle = IOracle(oracleAddress);\n\t\t(uint priceInWei, uint timeInSecond) = oracle.getLastPrice();\n\t\trequire(priceInWei > 0 && timeInSecond > 0);\n\t\tlastPriceInWei = priceInWei;\n\t\tlastPriceTimeInSecond = timeInSecond;\n\t\tresetPriceInWei = priceInWei;\n\t\tresetPriceTimeInSecond = timeInSecond;\n\t\troleManager = IMultiSigManager(roleManagerAddress);\n\t\tstate = State.Trading;\n\t\temit AcceptPrice(priceInWei, timeInSecond, WEI_DENOMINATOR, WEI_DENOMINATOR);\n\t\temit StartTrading(navAInWei, navBInWei);\n\t\treturn true;\n\t}\n\n\t/// @dev create with ETH\n\tfunction create() \n\t\tpublic \n\t\tpayable \n\t\tinState(State.Trading) \n\t\treturns (bool) \n\t{\t\n\t\treturn createInternal(msg.sender, msg.value);\n\t}\n\n\t/// @dev create with ETH\n\t///\t@param amount amount of WETH to create\n\t///\t@param wethAddr wrapEth contract address\n\tfunction createWithWETH(uint amount, address wethAddr)\n\t\tpublic \n\t\tinState(State.Trading) \n\t\treturns (bool success) \n\t{\n\t\trequire(amount > 0 && wethAddr != address(0));\n\t\tIWETH wethToken = IWETH(wethAddr);\n\t\twethToken.transferFrom(msg.sender, address(this), amount);\n\t\tuint wethBalance = wethToken.balanceOf(address(this));\n\t\trequire(wethBalance >= amount);\n\t\tuint beforeEthBalance = address(this).balance;\n        wethToken.withdraw(wethBalance);\n\t\tuint ethIncrement = address(this).balance.sub(beforeEthBalance);\n\t\trequire(ethIncrement >= wethBalance);\n\t\treturn createInternal(msg.sender, amount);\n\t}\n\n\tfunction createInternal(address sender, uint ethAmtInWei) \n\t\tinternal \n\t\treturns(bool)\n\t{\n\t\trequire(ethAmtInWei > 0);\n\t\tuint feeInWei;\n\t\t(ethAmtInWei, feeInWei) = deductFee(ethAmtInWei, createCommInBP);\n\t\tethCollateralInWei = ethCollateralInWei.add(ethAmtInWei);\n\t\tuint numeritor = ethAmtInWei\n\t\t\t\t\t\t.mul(resetPriceInWei)\n\t\t\t\t\t\t.mul(betaInWei)\n\t\t\t\t\t\t.mul(BP_DENOMINATOR\n\t\t);\n\t\tuint denominator = WEI_DENOMINATOR\n\t\t\t\t\t\t.mul(WEI_DENOMINATOR)\n\t\t\t\t\t\t.mul(alphaInBP\n\t\t\t\t\t\t\t.add(BP_DENOMINATOR)\n\t\t);\n\t\tuint tokenValueB = numeritor.div(denominator);\n\t\tuint tokenValueA = tokenValueB.mul(alphaInBP).div(BP_DENOMINATOR);\n\t\tbalanceOf[0][sender] = balanceOf[0][sender].add(tokenValueA);\n\t\tbalanceOf[1][sender] = balanceOf[1][sender].add(tokenValueB);\n\t\tcheckUser(sender, balanceOf[0][sender], balanceOf[1][sender]);\n\t\ttotalSupplyA = totalSupplyA.add(tokenValueA);\n\t\ttotalSupplyB = totalSupplyB.add(tokenValueB);\n\n\t\temit Create(\n\t\t\tsender, \n\t\t\tethAmtInWei, \n\t\t\ttokenValueA, \n\t\t\ttokenValueB, \n\t\t\tfeeInWei\n\t\t\t);\n\t\temit TotalSupply(totalSupplyA, totalSupplyB);\n\t\taToken.emitTransfer(address(0), sender, tokenValueA);\n\t\tbToken.emitTransfer(address(0), sender, tokenValueB);\n\t\treturn true;\n\n\t}\n\n\tfunction redeem(uint amtInWeiA, uint amtInWeiB) \n\t\tpublic \n\t\tinState(State.Trading) \n\t\treturns (bool success) \n\t{\n\t\tuint adjAmtInWeiA = amtInWeiA.mul(BP_DENOMINATOR).div(alphaInBP);\n\t\tuint deductAmtInWeiB = adjAmtInWeiA < amtInWeiB ? adjAmtInWeiA : amtInWeiB;\n\t\tuint deductAmtInWeiA = deductAmtInWeiB.mul(alphaInBP).div(BP_DENOMINATOR);\n\t\taddress payable sender = msg.sender;\n\t\trequire(balanceOf[0][sender] >= deductAmtInWeiA && balanceOf[1][sender] >= deductAmtInWeiB);\n\t\tuint ethAmtInWei = deductAmtInWeiA\n\t\t\t.add(deductAmtInWeiB)\n\t\t\t.mul(WEI_DENOMINATOR)\n\t\t\t.mul(WEI_DENOMINATOR)\n\t\t\t.div(resetPriceInWei)\n\t\t\t.div(betaInWei);\n\t\treturn redeemInternal(sender, ethAmtInWei, deductAmtInWeiA, deductAmtInWeiB);\n\t}\n\n\tfunction redeemAll() public inState(State.Matured) returns (bool success) {\n\t\taddress payable sender = msg.sender;\n\t\tuint balanceAInWei = balanceOf[0][sender];\n\t\tuint balanceBInWei = balanceOf[1][sender];\n\t\trequire(balanceAInWei > 0 || balanceBInWei > 0);\n\t\tuint ethAmtInWei = balanceAInWei\n\t\t\t.mul(navAInWei)\n\t\t\t.add(balanceBInWei\n\t\t\t\t.mul(navBInWei))\n\t\t\t.div(lastPriceInWei);\n\t\treturn redeemInternal(sender, ethAmtInWei, balanceAInWei, balanceBInWei);\n\t}\n\n\tfunction redeemInternal(\n\t\taddress payable sender, \n\t\tuint ethAmtInWei, \n\t\tuint deductAmtInWeiA, \n\t\tuint deductAmtInWeiB) \n\t\tinternal \n\t\treturns(bool) \n\t{\n\t\trequire(ethAmtInWei > 0);\n\t\tethCollateralInWei = ethCollateralInWei.sub(ethAmtInWei);\n\t\tuint feeInWei;\n\t\t(ethAmtInWei,  feeInWei) = deductFee(ethAmtInWei, redeemCommInBP);\n\n\t\tbalanceOf[0][sender] = balanceOf[0][sender].sub(deductAmtInWeiA);\n\t\tbalanceOf[1][sender] = balanceOf[1][sender].sub(deductAmtInWeiB);\n\t\tcheckUser(sender, balanceOf[0][sender], balanceOf[1][sender]);\n\t\ttotalSupplyA = totalSupplyA.sub(deductAmtInWeiA);\n\t\ttotalSupplyB = totalSupplyB.sub(deductAmtInWeiB);\n\t\tsender.transfer(ethAmtInWei);\n\t\temit Redeem(\n\t\t\tsender, \n\t\t\tethAmtInWei, \n\t\t\tdeductAmtInWeiA, \n\t\t\tdeductAmtInWeiB, \n\t\t\tfeeInWei\n\t\t);\n\t\temit TotalSupply(totalSupplyA, totalSupplyB);\n\t\taToken.emitTransfer(sender, address(0), deductAmtInWeiA);\n\t\tbToken.emitTransfer(sender, address(0), deductAmtInWeiB);\n\t\treturn true;\n\t}\n\n\tfunction deductFee(\n\t\tuint ethAmtInWei, \n\t\tuint commInBP\n\t) \n\t\tinternal pure\n\t\treturns (\n\t\t\tuint ethAmtAfterFeeInWei, \n\t\t\tuint feeInWei) \n\t{\n\t\trequire(ethAmtInWei > 0);\n\t\tfeeInWei = ethAmtInWei.mul(commInBP).div(BP_DENOMINATOR);\n\t\tethAmtAfterFeeInWei = ethAmtInWei.sub(feeInWei);\n\t}\n\t// end of conversion\n\n\n\t// start of operator functions\n\tfunction setValue(uint idx, uint newValue) public only(operator) inState(State.Trading) inUpdateWindow() returns (bool success) {\n\t\tuint oldValue;\n\t\tif (idx == 0) {\n\t\t\trequire(newValue <= BP_DENOMINATOR);\n\t\t\toldValue = createCommInBP;\n\t\t\tcreateCommInBP = newValue;\n\t\t} else if (idx == 1) {\n\t\t\trequire(newValue <= BP_DENOMINATOR);\n\t\t\toldValue = redeemCommInBP;\n\t\t\tredeemCommInBP = newValue;\n\t\t} else if (idx == 2) {\n\t\t\toldValue = iterationGasThreshold;\n\t\t\titerationGasThreshold = newValue;\n\t\t} else if (idx == 3) {\n\t\t\toldValue = preResetWaitingBlocks;\n\t\t\tpreResetWaitingBlocks = newValue;\n\t\t} else {\n\t\t\trevert();\n\t\t}\n\n\t\temit SetValue(idx, oldValue, newValue);\n\t\treturn true;\n\t}\n\t// end of operator functions\n\n\tfunction getStates() public view returns (uint[30] memory) {\n\t\treturn [\n\t\t\t// managed\n\t\t\tlastOperationTime,\n\t\t\toperationCoolDown,\n\t\t\t// custodian\n\t\t\tuint(state),\n\t\t\tminBalance,\n\t\t\ttotalSupplyA,\n\t\t\ttotalSupplyB,\n\t\t\tethCollateralInWei,\n\t\t\tnavAInWei,\n\t\t\tnavBInWei,\n\t\t\tlastPriceInWei,\n\t\t\tlastPriceTimeInSecond,\n\t\t\tresetPriceInWei,\n\t\t\tresetPriceTimeInSecond,\n\t\t\tcreateCommInBP,\n\t\t\tredeemCommInBP,\n\t\t\tperiod,\n\t\t\tmaturityInSecond,\n\t\t\tpreResetWaitingBlocks,\n\t\t\tpriceFetchCoolDown,\n\t\t\tnextResetAddrIndex,\n\t\t\ttotalUsers(),\n\t\t\tfeeBalanceInWei(),\n\t\t\t// dual class custodian\n\t\t\tuint(resetState),\n\t\t\talphaInBP,\n\t\t\tbetaInWei,\n\t\t\tperiodCouponInWei, \n\t\t\tlimitPeriodicInWei, \n\t\t\tlimitUpperInWei, \n\t\t\tlimitLowerInWei,\n\t\t\titerationGasThreshold\n\t\t];\n\t}\n\n\tfunction getAddresses() public view returns (address[6] memory) {\n\t\treturn [\n\t\t\troleManagerAddress,\n\t\t\toperator,\n\t\t\tfeeCollector,\n\t\t\toracleAddress,\n\t\t\taTokenAddress,\n\t\t\tbTokenAddress\n\t\t];\n\t}\n}\n\n\n/// @title Beethoven - dual class token contract\n/// @author duo.network\ncontract Beethoven is DualClassCustodian {\n\t/*\n     * Storage\n     */\n\t// reset intermediate values\n\tuint bAdj;\n\n\t/*\n     * Constructor\n     */\n\tconstructor(\n\t\tstring memory code,\n\t\tuint maturity,\n\t\taddress roleManagerAddr,\n\t\taddress payable fc,\n\t\tuint alpha,\n\t\tuint r,\n\t\tuint hp,\n\t\tuint hu,\n\t\tuint hd,\n\t\tuint comm,\n\t\tuint pd,\n\t\tuint optCoolDown,\n\t\tuint pxFetchCoolDown,\n\t\tuint iteGasTh,\n\t\tuint preResetWaitBlk,\n\t\tuint minimumBalance\n\t\t) \n\t\tpublic \n\t\tDualClassCustodian ( \n\t\t\tcode,\n\t\t\tmaturity,\n\t\t\troleManagerAddr,\n\t\t\tfc,\n\t\t\talpha,\n\t\t\tr,\n\t\t\thp,\n\t\t\thu,\n\t\t\thd,\n\t\t\tcomm,\n\t\t\tpd,\n\t\t\toptCoolDown,\n\t\t\tpxFetchCoolDown,\n\t\t\titeGasTh,\n\t\t\tpreResetWaitBlk,\n\t\t\tminimumBalance\n\t\t)\n\t{\n\t\tbAdj = alphaInBP.add(BP_DENOMINATOR).mul(WEI_DENOMINATOR).div(BP_DENOMINATOR);\n\t}\n\n\t// start of priceFetch funciton\n\tfunction fetchPrice() public inState(State.Trading) returns (bool) {\n\t\tuint currentTime = getNowTimestamp();\n\t\trequire(currentTime > lastPriceTimeInSecond.add(priceFetchCoolDown));\n\t\t(uint priceInWei, uint timeInSecond) = oracle.getLastPrice();\n\t\trequire(timeInSecond > lastPriceTimeInSecond && timeInSecond <= currentTime && priceInWei > 0);\n\t\tlastPriceInWei = priceInWei;\n\t\tlastPriceTimeInSecond = timeInSecond;\n\t\t(navAInWei, navBInWei) = calculateNav(\n\t\t\tpriceInWei, \n\t\t\ttimeInSecond, \n\t\t\tresetPriceInWei, \n\t\t\tresetPriceTimeInSecond, \n\t\t\tbetaInWei);\n\t\tif (maturityInSecond > 0 && timeInSecond > maturityInSecond) {\n\t\t\tstate = State.Matured;\n\t\t\temit Matured(navAInWei, navBInWei);\n\t\t} else if (navBInWei >= limitUpperInWei || navBInWei <= limitLowerInWei || (limitPeriodicInWei > 0 && navAInWei >= limitPeriodicInWei)) {\n\t\t\tstate = State.PreReset;\n\t\t\tlastPreResetBlockNo = block.number;\n\t\t\temit StartPreReset();\n\t\t} \n\t\temit AcceptPrice(priceInWei, timeInSecond, navAInWei, navBInWei);\n\t\treturn true;\n\t}\n\t\n\tfunction calculateNav(\n\t\tuint priceInWei, \n\t\tuint timeInSecond, \n\t\tuint rstPriceInWei, \n\t\tuint rstTimeInSecond,\n\t\tuint bInWei) \n\t\tinternal \n\t\tview \n\t\treturns (uint, uint) \n\t{\n\t\tuint numOfPeriods = timeInSecond.sub(rstTimeInSecond).div(period);\n\t\tuint navParent = priceInWei.mul(WEI_DENOMINATOR).div(rstPriceInWei);\n\t\tnavParent = navParent\n\t\t\t.mul(WEI_DENOMINATOR)\n\t\t\t.mul(alphaInBP.add(BP_DENOMINATOR))\n\t\t\t.div(BP_DENOMINATOR)\n\t\t\t.div(bInWei\n\t\t);\n\t\tuint navA = periodCouponInWei.mul(numOfPeriods).add(WEI_DENOMINATOR);\n\t\tuint navAAdj = navA.mul(alphaInBP).div(BP_DENOMINATOR);\n\t\tif (navParent <= navAAdj)\n\t\t\treturn (navParent.mul(BP_DENOMINATOR).div(alphaInBP), 0);\n\t\telse\n\t\t\treturn (navA, navParent.sub(navAAdj));\n\t}\n\t// end of priceFetch function\n\n\t// start of reset function\n\tfunction startPreReset() public inState(State.PreReset) returns (bool success) {\n\t\tif (block.number - lastPreResetBlockNo >= preResetWaitingBlocks) {\n\t\t\tuint newBFromA;\n\t\t\tuint newAFromA;\n\t\t\tif (navBInWei >= limitUpperInWei) {\n\t\t\t\tstate = State.Reset;\n\t\t\t\tresetState = ResetState.UpwardReset;\n\t\t\t\tbetaInWei = WEI_DENOMINATOR;\n\t\t\t\tuint excessAInWei = navAInWei.sub(WEI_DENOMINATOR);\n\t\t\t\tuint excessBInWei = navBInWei.sub(WEI_DENOMINATOR);\n\t\t\t\t// excessive B is enough to cover excessive A\n\t\t\t\t//if (excessBInWei >= excessAInWei) {\n\t\t\t\tuint excessBAfterAInWei = excessBInWei.sub(excessAInWei);\n\t\t\t\tnewAFromAPerA = excessAInWei;\n\t\t\t\tnewBFromAPerA = 0;\n\t\t\t\tuint newBFromExcessBPerB = excessBAfterAInWei.mul(betaInWei).div(bAdj);\n\t\t\t\tnewAFromBPerB = newBFromExcessBPerB.mul(alphaInBP).div(BP_DENOMINATOR);\n\t\t\t\tnewBFromBPerB = excessAInWei.add(newBFromExcessBPerB);\t\t\t\n\t\t\t\t// ignore this case for now as it requires a very high coupon rate \n\t\t\t\t// and very low upper limit for upward reset and a very high periodic limit\n\t\t\t\t/*} else {\n\t\t\t\t\tuint excessAForBInWei = excessBInWei.mul(alphaInBP).div(BP_DENOMINATOR);\n\t\t\t\t\tuint excessAAfterBInWei = excessAInWei.sub(excessAForBInWei);\n\t\t\t\t\tnewAFromBPerB = 0;\n\t\t\t\t\tnewBFromBPerB = excessBInWei;\n\t\t\t\t\tnewBFromAPerA = excessAAfterBInWei.mul(betaInWei).div(bAdj);\n\t\t\t\t\tnewAFromAPerA = excessAForBInWei.add(newBFromAPerA.mul(alphaInBP).div(BP_DENOMINATOR));\n\t\t\t\t}*/\n\t\t\t\t// adjust total supply\n\t\t\t\ttotalSupplyA = totalSupplyA\n\t\t\t\t\t.add(totalSupplyA\n\t\t\t\t\t\t.mul(newAFromAPerA)\n\t\t\t\t\t\t.add(totalSupplyB\n\t\t\t\t\t\t\t.mul(newAFromBPerB))\n\t\t\t\t\t\t.div(WEI_DENOMINATOR)\n\t\t\t\t);\n\t\t\t\ttotalSupplyB = totalSupplyB\n\t\t\t\t\t.add(totalSupplyA\n\t\t\t\t\t\t.mul(newBFromAPerA)\n\t\t\t\t\t\t.add(totalSupplyB\n\t\t\t\t\t\t\t.mul(newBFromBPerB))\n\t\t\t\t\t\t.div(WEI_DENOMINATOR)\n\t\t\t\t);\n\t\t\t} else if (navBInWei <= limitLowerInWei) {\n\t\t\t\tstate = State.Reset;\n\t\t\t\tresetState = ResetState.DownwardReset;\n\t\t\t\tbetaInWei = WEI_DENOMINATOR;\n\t\t\t\tnewBFromAPerA = navAInWei.sub(navBInWei).mul(betaInWei).div(bAdj);\n\t\t\t\t// below are not used and set to 0\n\t\t\t\tnewAFromAPerA = 0;\n\t\t\t\tnewBFromBPerB = 0;\n\t\t\t\tnewAFromBPerB = 0;\n\t\t\t\t// adjust total supply\n\t\t\t\tnewBFromA = totalSupplyA.mul(newBFromAPerA).div(WEI_DENOMINATOR);\n\t\t\t\tnewAFromA = newBFromA.mul(alphaInBP).div(BP_DENOMINATOR);\n\t\t\t\ttotalSupplyA = totalSupplyA.mul(navBInWei).div(WEI_DENOMINATOR).add(newAFromA);\n\t\t\t\ttotalSupplyB = totalSupplyB.mul(navBInWei).div(WEI_DENOMINATOR).add(newBFromA);\n\t\t\t} else { // limitPeriodicInWei > 0 && navAInWei >= limitPeriodicInWei\n\t\t\t\tstate = State.Reset;\n\t\t\t\tresetState = ResetState.PeriodicReset;\n\t\t\t\tuint num = alphaInBP\n\t\t\t\t\t.add(BP_DENOMINATOR)\n\t\t\t\t\t.mul(lastPriceInWei);\n\t\t\t\tuint den = num\n\t\t\t\t\t.sub(\n\t\t\t\t\t\tresetPriceInWei\n\t\t\t\t\t\t\t.mul(alphaInBP)\n\t\t\t\t\t\t\t.mul(betaInWei)\n\t\t\t\t\t\t\t.mul(navAInWei\n\t\t\t\t\t\t\t\t.sub(WEI_DENOMINATOR))\n\t\t\t\t\t\t\t.div(WEI_DENOMINATOR)\n\t\t\t\t\t\t\t.div(WEI_DENOMINATOR)\n\t\t\t\t);\n\t\t\t\tbetaInWei = betaInWei.mul(num).div(den);\n\t\t\t\tnewBFromAPerA = navAInWei.sub(WEI_DENOMINATOR).mul(betaInWei).div(bAdj);\n\t\t\t\t// below are not used and set to 0\n\t\t\t\tnewBFromBPerB = 0;\n\t\t\t\tnewAFromAPerA = 0;\n\t\t\t\tnewAFromBPerB = 0;\n\t\t\t\t// adjust total supply\n\t\t\t\tnewBFromA = totalSupplyA.mul(newBFromAPerA).div(WEI_DENOMINATOR);\n\t\t\t\tnewAFromA = newBFromA.mul(alphaInBP).div(BP_DENOMINATOR);\n\t\t\t\ttotalSupplyA = totalSupplyA.add(newAFromA);\n\t\t\t\ttotalSupplyB = totalSupplyB.add(newBFromA);\n\t\t\t}\n\n\t\t\temit TotalSupply(totalSupplyA, totalSupplyB);\n\n\t\t\temit StartReset(nextResetAddrIndex, users.length);\n\t\t} else \n\t\t\temit StartPreReset();\n\n\t\treturn true;\n\t}\n\n\tfunction startReset() public inState(State.Reset) returns (bool success) {\n\t\tuint currentBalanceA;\n\t\tuint currentBalanceB;\n\t\tuint newBalanceA;\n\t\tuint newBalanceB;\n\t\tuint newAFromA;\n\t\tuint newBFromA;\n\t\taddress currentAddress;\n\t\tuint localResetAddrIndex = nextResetAddrIndex;\n\t\twhile (localResetAddrIndex < users.length && gasleft() > iterationGasThreshold) {\n\t\t\tcurrentAddress = users[localResetAddrIndex];\n\t\t\tcurrentBalanceA = balanceOf[0][currentAddress];\n\t\t\tcurrentBalanceB = balanceOf[1][currentAddress];\n\t\t\tif (resetState == ResetState.DownwardReset) {\n\t\t\t\tnewBFromA = currentBalanceA.mul(newBFromAPerA).div(WEI_DENOMINATOR);\n\t\t\t\tnewAFromA = newBFromA.mul(alphaInBP).div(BP_DENOMINATOR);\n\t\t\t\tnewBalanceA = currentBalanceA.mul(navBInWei).div(WEI_DENOMINATOR).add(newAFromA);\n\t\t\t\tnewBalanceB = currentBalanceB.mul(navBInWei).div(WEI_DENOMINATOR).add(newBFromA);\n\t\t\t}\n\t\t\telse if (resetState == ResetState.UpwardReset) {\n\t\t\t\tnewBalanceA = currentBalanceA\n\t\t\t\t\t.add(currentBalanceA\n\t\t\t\t\t\t.mul(newAFromAPerA)\n\t\t\t\t\t\t.add(currentBalanceB\n\t\t\t\t\t\t\t.mul(newAFromBPerB))\n\t\t\t\t\t\t.div(WEI_DENOMINATOR)\n\t\t\t\t);\n\t\t\t\tnewBalanceB = currentBalanceB\n\t\t\t\t\t.add(currentBalanceA\n\t\t\t\t\t\t.mul(newBFromAPerA)\n\t\t\t\t\t\t.add(currentBalanceB\n\t\t\t\t\t\t\t.mul(newBFromBPerB))\n\t\t\t\t\t\t.div(WEI_DENOMINATOR)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tnewBFromA = currentBalanceA.mul(newBFromAPerA).div(WEI_DENOMINATOR);\n\t\t\t\tnewAFromA = newBFromA.mul(alphaInBP).div(BP_DENOMINATOR);\n\t\t\t\tnewBalanceA = currentBalanceA.add(newAFromA);\n\t\t\t\tnewBalanceB = currentBalanceB.add(newBFromA);\n\t\t\t}\n\n\t\t\tbalanceOf[0][currentAddress] = newBalanceA;\n\t\t\tbalanceOf[1][currentAddress] = newBalanceB;\n\t\t\tlocalResetAddrIndex++;\n\t\t}\n\n\t\tif (localResetAddrIndex >= users.length) {\n\t\t\tif (resetState != ResetState.PeriodicReset) {\n\t\t\t\tresetPriceInWei = lastPriceInWei;\n\t\t\t\tnavBInWei = WEI_DENOMINATOR;\n\t\t\t}\n\t\t\tresetPriceTimeInSecond = lastPriceTimeInSecond;\n\t\t\t\n\t\t\tnavAInWei = WEI_DENOMINATOR;\n\t\t\tnextResetAddrIndex = 0;\n\n\t\t\tstate = State.Trading;\n\t\t\temit StartTrading(navAInWei, navBInWei);\n\t\t\treturn true;\n\t\t} else {\n\t\t\tnextResetAddrIndex = localResetAddrIndex;\n\t\t\temit StartReset(localResetAddrIndex, users.length);\n\t\t\treturn false;\n\t\t}\n\t}\n\t// end of reset function\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"updateFeeCollector\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newManagerAddr\",\"type\":\"address\"}],\"name\":\"updateRoleManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fetchPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPreReset\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyB\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastOperationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOracleAddr\",\"type\":\"address\"}],\"name\":\"updateOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeemAll\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startReset\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operationCoolDown\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractCode\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"},{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setValue\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amtInWeiA\",\"type\":\"uint256\"},{\"name\":\"amtInWeiB\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeBalanceInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"wethAddr\",\"type\":\"address\"}],\"name\":\"createWithWETH\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[6]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"aAddr\",\"type\":\"address\"},{\"name\":\"bAddr\",\"type\":\"address\"},{\"name\":\"oracleAddr\",\"type\":\"address\"}],\"name\":\"startCustodian\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"collectFee\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"existingUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roleManagerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[30]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"create\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"maturity\",\"type\":\"uint256\"},{\"name\":\"roleManagerAddr\",\"type\":\"address\"},{\"name\":\"fc\",\"type\":\"address\"},{\"name\":\"alpha\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"uint256\"},{\"name\":\"hp\",\"type\":\"uint256\"},{\"name\":\"hu\",\"type\":\"uint256\"},{\"name\":\"hd\",\"type\":\"uint256\"},{\"name\":\"comm\",\"type\":\"uint256\"},{\"name\":\"pd\",\"type\":\"uint256\"},{\"name\":\"optCoolDown\",\"type\":\"uint256\"},{\"name\":\"pxFetchCoolDown\",\"type\":\"uint256\"},{\"name\":\"iteGasTh\",\"type\":\"uint256\"},{\"name\":\"preResetWaitBlk\",\"type\":\"uint256\"},{\"name\":\"minimumBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SetValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"navAInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"navBInWei\",\"type\":\"uint256\"}],\"name\":\"StartTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StartPreReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"nextIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"StartReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"navAInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"navBInWei\",\"type\":\"uint256\"}],\"name\":\"Matured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"timeInSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"navAInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"navBInWei\",\"type\":\"uint256\"}],\"name\":\"AcceptPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethAmtInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenBInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"feeInWei\",\"type\":\"uint256\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethAmtInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenBInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"feeInWei\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalSupplyAInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalSupplyBInWei\",\"type\":\"uint256\"}],\"name\":\"TotalSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"feeInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"feeBalanceInWei\",\"type\":\"uint256\"}],\"name\":\"CollectFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOracleAddress\",\"type\":\"address\"}],\"name\":\"UpdateOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"updater\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdateFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newManagerAddress\",\"type\":\"address\"}],\"name\":\"UpdateRoleManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"updater\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"UpdateOperator\",\"type\":\"event\"}]",
  "bytecode": "6080604052662386f26fc1000060145560006024553480156200002157600080fd5b5060405162005e3538038062005e3583398101806040526102008110156200004857600080fd5b8101908080516401000000008111156200006157600080fd5b828101905060208101848111156200007857600080fd5b81518560018202830111640100000000821117156200009657600080fd5b50509291906020018051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050508f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8a8a878a338d8a88838382600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806004819055505050508a600890805190602001906200023992919062000445565b50896021819055506000601360006101000a81548160ff021916908360048111156200026157fe5b021790555087600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086601e8190555086601f81905550856020819055508460228190555083602381905550670de0b6b3a7640000601881905550670de0b6b3a76400006019819055508060148190555050505050505050505050508b602681905550670de0b6b3a76400006027819055508a602b8190555089602c81905550886028819055508760298190555082602a8190555050505050505050505050505050505050620003b86127106200039b670de0b6b3a76400006200037e612710602654620003d464010000000002620046ec179091906401000000009004565b620003f3640100000000026200489f179091906401000000009004565b6200042964010000000002620048d2179091906401000000009004565b60328190555050505050505050505050505050505050620004f4565b6000808284019050838110151515620003e957fe5b8091505092915050565b600080828402905060008414806200041657508284828115156200041357fe5b04145b15156200041f57fe5b8091505092915050565b60008082848115156200043857fe5b0490508091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200048857805160ff1916838001178555620004b9565b82800160010185558215620004b9579182015b82811115620004b85782518255916020019190600101906200049b565b5b509050620004c89190620004cc565b5090565b620004f191905b80821115620004ed576000816000905550600101620004d3565b5090565b90565b61593180620005046000396000f3fe608060405260043610610196576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630565f7c0146101985780630a23b9b1146101c75780630d550b75146102845780630f36a16d146103135780630fdb11cf1461037c578063134e92a8146103ab57806315ed0793146103da57806316d43a97146104055780631cb44dfc146104305780632f4350c21461049957806332a3bc0c146104c85780633656eec2146104f7578063365b98b21461056657806336cd52a6146105e15780635623732e1461067e578063570ca735146106a95780635c44bfcb146107005780636c67b21e146107905780637b8d56e3146107bb5780637cbc237314610818578063912be04b14610875578063a1dec2d6146108a0578063a39fac1214610913578063a64e8f5a14610966578063a969ff0a14610a0f578063b337f8cc14610a62578063bff1f9e114610ac7578063d33b8d2314610af2578063d5934b7614610b49578063d8ab827414610b78578063efc81a8c14610bcb578063f20f76ba14610bed575b005b3480156101a457600080fd5b506101ad610c8a565b604051808215151515815260200191505060405180910390f35b3480156101d357600080fd5b5061026a600480360360a08110156101ea57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610eba565b604051808215151515815260200191505060405180910390f35b34801561029057600080fd5b506102fd600480360360608110156102a757600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110f6565b6040518082815260200191505060405180910390f35b34801561031f57600080fd5b506103626004803603602081101561033657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061112a565b604051808215151515815260200191505060405180910390f35b34801561038857600080fd5b50610391611460565b604051808215151515815260200191505060405180910390f35b3480156103b757600080fd5b506103c061175b565b604051808215151515815260200191505060405180910390f35b3480156103e657600080fd5b506103ef611e91565b6040518082815260200191505060405180910390f35b34801561041157600080fd5b5061041a611e97565b6040518082815260200191505060405180910390f35b34801561043c57600080fd5b5061047f6004803603602081101561045357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e9d565b604051808215151515815260200191505060405180910390f35b3480156104a557600080fd5b506104ae6122c3565b604051808215151515815260200191505060405180910390f35b3480156104d457600080fd5b506104dd612428565b604051808215151515815260200191505060405180910390f35b34801561050357600080fd5b506105506004803603604081101561051a57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a07565b6040518082815260200191505060405180910390f35b34801561057257600080fd5b5061059f6004803603602081101561058957600080fd5b8101908080359060200190929190505050612a2e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105ed57600080fd5b506106646004803603608081101561060457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612a6c565b604051808215151515815260200191505060405180910390f35b34801561068a57600080fd5b50610693612add565b6040518082815260200191505060405180910390f35b3480156106b557600080fd5b506106be612ae3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561070c57600080fd5b50610715612b09565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561075557808201518184015260208101905061073a565b50505050905090810190601f1680156107825780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561079c57600080fd5b506107a5612ba7565b6040518082815260200191505060405180910390f35b3480156107c757600080fd5b506107fe600480360360408110156107de57600080fd5b810190808035906020019092919080359060200190929190505050612bad565b604051808215151515815260200191505060405180910390f35b34801561082457600080fd5b5061085b6004803603604081101561083b57600080fd5b810190808035906020019092919080359060200190929190505050612d51565b604051808215151515815260200191505060405180910390f35b34801561088157600080fd5b5061088a612f3e565b6040518082815260200191505060405180910390f35b3480156108ac57600080fd5b506108f9600480360360408110156108c357600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612f71565b604051808215151515815260200191505060405180910390f35b34801561091f57600080fd5b506109286132e8565b6040518082600660200280838360005b83811015610953578082015181840152602081019050610938565b5050505090500191505060405180910390f35b34801561097257600080fd5b506109f56004803603606081101561098957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506134f7565b604051808215151515815260200191505060405180910390f35b348015610a1b57600080fd5b50610a4860048036036020811015610a3257600080fd5b810190808035906020019092919050505061399f565b604051808215151515815260200191505060405180910390f35b348015610a6e57600080fd5b50610ab160048036036020811015610a8557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613b5b565b6040518082815260200191505060405180910390f35b348015610ad357600080fd5b50610adc613b73565b6040518082815260200191505060405180910390f35b348015610afe57600080fd5b50610b07613b80565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b5557600080fd5b50610b5e613ba6565b604051808215151515815260200191505060405180910390f35b348015610b8457600080fd5b50610b8d613dd6565b6040518082601e60200280838360005b83811015610bb8578082015181840152602081019050610b9d565b5050505090500191505060405180910390f35b610bd3613f18565b604051808215151515815260200191505060405180910390f35b348015610bf957600080fd5b50610c7060048036036080811015610c1057600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613f5f565b604051808215151515815260200191505060405180910390f35b600080610c95614091565b9050600454600354820310151515610cac57600080fd5b60003390506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d04787a78260006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610d7657600080fd5b505af1158015610d8a573d6000803e3d6000fd5b505050506040513d6020811015610da057600080fd5b8101908080519060200190929190505050600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fcc882185e6edeeb762130016ea1faf3d7aa9c01b199bfd646f965b58ab74106381600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a16001925050806003819055505090565b60006001806004811115610eca57fe5b601360009054906101000a900460ff166004811115610ee557fe5b141515610ef157600080fd5b6000871480610f005750600187145b1515610f0b57600080fd5b6000610f178888614099565b9050600f88600281101515610f2857fe5b0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548411151515610fb257600080fd5b61104f84600f8a600281101515610fc557fe5b0160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461416f90919063ffffffff16565b600f8960028110151561105e57fe5b0160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110e988878787614188565b9250505095945050505050565b600f8360028110151561110557fe5b0160205281600052604060002060205280600052604060002060009250925050505481565b600080611135614091565b905060045460035482031015151561114c57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b0a93414846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561120857600080fd5b505af115801561121c573d6000803e3d6000fd5b505050506040513d602081101561123257600080fd5b8101908080519060200190929190505050151561124e57600080fd5b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663387439046040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561138e57600080fd5b505af11580156113a2573d6000803e3d6000fd5b505050506040513d60208110156113b857600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16141515156113ec57600080fd5b7fce93baa0b608a7d420822b6b90cfcccb70574363ba4fd26ef5ac17dd465016c483604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1600191508060038190555050919050565b6000600180600481111561147057fe5b601360009054906101000a900460ff16600481111561148b57fe5b14151561149757600080fd5b60006114a1614091565b90506114ba602354601b546146ec90919063ffffffff16565b811115156114c757600080fd5b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d8cf24fd6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016040805180830381600087803b15801561154f57600080fd5b505af1158015611563573d6000803e3d6000fd5b505050506040513d604081101561157957600080fd5b81019080805190602001909291908051906020019092919050505091509150601b54811180156115a95750828111155b80156115b55750600082115b15156115c057600080fd5b81601a8190555080601b819055506115e18282601c54601d5460275461470a565b60186000601960008491905055839190505550506000602154118015611608575060215481115b15611679576004601360006101000a81548160ff0219169083600481111561162c57fe5b02179055507f30a742d45111295203c4b8db614c8b05dd1323a7c5159fb88b0cc73be46b7a75601854601954604051808381526020018281526020019250505060405180910390a161170b565b602854601954101580611690575060295460195411155b806116ad57506000602c541180156116ac5750602c5460185410155b5b1561170a576002601360006101000a81548160ff021916908360048111156116d157fe5b0217905550436024819055507fa1f85a3680dfb51f7db8069e794f07f371ef5a545a9c915ac6315b0768a08b3f60405160405180910390a15b5b80827f9044c32331b11a41789cda95b2838242d103fe41d345b0ed821b6b3728283a0f601854601954604051808381526020018281526020019250505060405180910390a3600194505050505090565b6000600280600481111561176b57fe5b601360009054906101000a900460ff16600481111561178657fe5b14151561179257600080fd5b6022546024544303101515611e5c576000806028546019541015156119d4576003601360006101000a81548160ff021916908360048111156117d057fe5b02179055506000603160006101000a81548160ff021916908360028111156117f457fe5b0217905550670de0b6b3a76400006027819055506000611827670de0b6b3a764000060185461416f90919063ffffffff16565b90506000611848670de0b6b3a764000060195461416f90919063ffffffff16565b9050600061185f838361416f90919063ffffffff16565b905082602d819055506000602f81905550600061189b60325461188d6027548561489f90919063ffffffff16565b6148d290919063ffffffff16565b90506118c66127106118b86026548461489f90919063ffffffff16565b6148d290919063ffffffff16565b602e819055506118df81856146ec90919063ffffffff16565b603081905550611952611941670de0b6b3a764000061193361190e602e5460165461489f90919063ffffffff16565b611925602d5460155461489f90919063ffffffff16565b6146ec90919063ffffffff16565b6148d290919063ffffffff16565b6015546146ec90919063ffffffff16565b6015819055506119c56119b4670de0b6b3a76400006119a661198160305460165461489f90919063ffffffff16565b611998602f5460155461489f90919063ffffffff16565b6146ec90919063ffffffff16565b6148d290919063ffffffff16565b6016546146ec90919063ffffffff16565b60168190555050505050611dcc565b602954601954111515611b8a576003601360006101000a81548160ff02191690836004811115611a0057fe5b02179055506001603160006101000a81548160ff02191690836002811115611a2457fe5b0217905550670de0b6b3a7640000602781905550611a77603254611a69602754611a5b60195460185461416f90919063ffffffff16565b61489f90919063ffffffff16565b6148d290919063ffffffff16565b602f819055506000602d8190555060006030819055506000602e81905550611ac6670de0b6b3a7640000611ab8602f5460155461489f90919063ffffffff16565b6148d290919063ffffffff16565b9150611af1612710611ae36026548561489f90919063ffffffff16565b6148d290919063ffffffff16565b9050611b3681611b28670de0b6b3a7640000611b1a60195460155461489f90919063ffffffff16565b6148d290919063ffffffff16565b6146ec90919063ffffffff16565b601581905550611b7f82611b71670de0b6b3a7640000611b6360195460165461489f90919063ffffffff16565b6148d290919063ffffffff16565b6146ec90919063ffffffff16565b601681905550611dcb565b6003601360006101000a81548160ff02191690836004811115611ba957fe5b02179055506002603160006101000a81548160ff02191690836002811115611bcd57fe5b02179055506000611bff601a54611bf16127106026546146ec90919063ffffffff16565b61489f90919063ffffffff16565b90506000611ca2611c93670de0b6b3a7640000611c85670de0b6b3a7640000611c77611c3e670de0b6b3a764000060185461416f90919063ffffffff16565b611c69602754611c5b602654601c5461489f90919063ffffffff16565b61489f90919063ffffffff16565b61489f90919063ffffffff16565b6148d290919063ffffffff16565b6148d290919063ffffffff16565b8361416f90919063ffffffff16565b9050611ccb81611cbd8460275461489f90919063ffffffff16565b6148d290919063ffffffff16565b602781905550611d16603254611d08602754611cfa670de0b6b3a764000060185461416f90919063ffffffff16565b61489f90919063ffffffff16565b6148d290919063ffffffff16565b602f8190555060006030819055506000602d819055506000602e81905550611d65670de0b6b3a7640000611d57602f5460155461489f90919063ffffffff16565b6148d290919063ffffffff16565b9350611d90612710611d826026548761489f90919063ffffffff16565b6148d290919063ffffffff16565b9250611da7836015546146ec90919063ffffffff16565b601581905550611dc2846016546146ec90919063ffffffff16565b60168190555050505b5b7fce065be89501ad8aef77e0eb0160264c2d1eb1732a004bcb98735bb0b8102205601554601654604051808381526020018281526020019250505060405180910390a17f69b6a1e0fd2f9f5af1f0c0d638c544eb53a8e2218b46c49e91cdf6b9100bb12a602554601180549050604051808381526020018281526020019250505060405180910390a15050611e89565b7fa1f85a3680dfb51f7db8069e794f07f371ef5a545a9c915ac6315b0768a08b3f60405160405180910390a15b600191505090565b60165481565b60035481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663387439046040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611f2457600080fd5b505af1158015611f38573d6000803e3d6000fd5b505050506040513d6020811015611f4e57600080fd5b81019080805190602001909291905050508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f9957600080fd5b6000611fa3614091565b9050600454600354820310151515611fba57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b0a93414856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561207657600080fd5b505af115801561208a573d6000803e3d6000fd5b505050506040513d60208110156120a057600080fd5b810190808051906020019092919050505015156120bc57600080fd5b83600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d8cf24fd6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016040805180830381600087803b1580156121e857600080fd5b505af11580156121fc573d6000803e3d6000fd5b505050506040513d604081101561221257600080fd5b810190808051906020019092919080519060200190929190505050915091506000821180156122415750600081115b151561224c57600080fd5b7f09ad0a3595604db9b7aef0dbd4918cea3642b96bc65ad7c9fb501a1529becd7986604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1600194505050806003819055505050919050565b600060048060048111156122d357fe5b601360009054906101000a900460ff1660048111156122ee57fe5b1415156122fa57600080fd5b60003390506000600d600060028110151561231157fe5b0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600d600160028110151561236457fe5b0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008211806123b45750600081115b15156123bf57600080fd5b6000612410601a546124026123df6019548661489f90919063ffffffff16565b6123f46018548861489f90919063ffffffff16565b6146ec90919063ffffffff16565b6148d290919063ffffffff16565b905061241e848285856148ed565b9550505050505090565b6000600380600481111561243857fe5b601360009054906101000a900460ff16600481111561245357fe5b14151561245f57600080fd5b60008060008060008060008060255490505b601180549050811080156124865750602a545a115b156128be5760118181548110151561249a57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600d60006002811015156124d757fe5b0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549750600d600160028110151561252857fe5b0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205496506001600281111561257657fe5b603160009054906101000a900460ff16600281111561259157fe5b141561267e576125c6670de0b6b3a76400006125b8602f548b61489f90919063ffffffff16565b6148d290919063ffffffff16565b92506125f16127106125e36026548661489f90919063ffffffff16565b6148d290919063ffffffff16565b935061263484612626670de0b6b3a76400006126186019548d61489f90919063ffffffff16565b6148d290919063ffffffff16565b6146ec90919063ffffffff16565b955061267783612669670de0b6b3a764000061265b6019548c61489f90919063ffffffff16565b6148d290919063ffffffff16565b6146ec90919063ffffffff16565b945061280b565b6000600281111561268b57fe5b603160009054906101000a900460ff1660028111156126a657fe5b141561278357612713612704670de0b6b3a76400006126f66126d3602e548c61489f90919063ffffffff16565b6126e8602d548e61489f90919063ffffffff16565b6146ec90919063ffffffff16565b6148d290919063ffffffff16565b896146ec90919063ffffffff16565b955061277c61276d670de0b6b3a764000061275f61273c6030548c61489f90919063ffffffff16565b612751602f548e61489f90919063ffffffff16565b6146ec90919063ffffffff16565b6148d290919063ffffffff16565b886146ec90919063ffffffff16565b945061280a565b6127b2670de0b6b3a76400006127a4602f548b61489f90919063ffffffff16565b6148d290919063ffffffff16565b92506127dd6127106127cf6026548661489f90919063ffffffff16565b6148d290919063ffffffff16565b93506127f284896146ec90919063ffffffff16565b955061280783886146ec90919063ffffffff16565b94505b5b85600d600060028110151561281c57fe5b0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555084600d600160028110151561286f57fe5b0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508080600101915050612471565b601180549050811015156129ab576002808111156128d857fe5b603160009054906101000a900460ff1660028111156128f357fe5b14151561291357601a54601c81905550670de0b6b3a76400006019819055505b601b54601d81905550670de0b6b3a764000060188190555060006025819055506001601360006101000a81548160ff0219169083600481111561295257fe5b02179055507fe59d261c86f3e28ec60b2625dd89458b15cc93d4b260e2122846d5823a5aafab601854601954604051808381526020018281526020019250505060405180910390a1600199505050505050505050612a03565b806025819055507f69b6a1e0fd2f9f5af1f0c0d638c544eb53a8e2218b46c49e91cdf6b9100bb12a81601180549050604051808381526020018281526020019250505060405180910390a16000995050505050505050505b5090565b600d82600281101515612a1657fe5b01602052806000526040600020600091509150505481565b601181815481101515612a3d57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001806004811115612a7c57fe5b601360009054906101000a900460ff166004811115612a9757fe5b141515612aa357600080fd5b6000861480612ab25750600186145b1515612abd57600080fd5b612ad286612acb8888614099565b8686614188565b915050949350505050565b60045481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60088054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b9f5780601f10612b7457610100808354040283529160200191612b9f565b820191906000526020600020905b815481529060010190602001808311612b8257829003601f168201915b505050505081565b60155481565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612c0c57600080fd5b6001806004811115612c1a57fe5b601360009054906101000a900460ff166004811115612c3557fe5b141515612c4157600080fd5b6000612c4b614091565b9050600454600354820310151515612c6257600080fd5b600080871415612c8e576127108611151515612c7d57600080fd5b601e54905085601e81905550612cf5565b6001871415612cb9576127108611151515612ca857600080fd5b601f54905085601f81905550612cf4565b6002871415612cd357602a54905085602a81905550612cf3565b6003871415612ced57602254905085602281905550612cf2565b600080fd5b5b5b5b7fabd08d77cf1eed600c8ba851f4210365f6695aa58b9500aa52a83db7d8b534ba87828860405180848152602001838152602001828152602001935050505060405180910390a160019450508060038190555050505092915050565b60006001806004811115612d6157fe5b601360009054906101000a900460ff166004811115612d7c57fe5b141515612d8857600080fd5b6000612db3602654612da56127108861489f90919063ffffffff16565b6148d290919063ffffffff16565b90506000848210612dc45784612dc6565b815b90506000612df3612710612de56026548561489f90919063ffffffff16565b6148d290919063ffffffff16565b9050600033905081600d6000600281101515612e0b57fe5b0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015612ea6575082600d6001600281101515612e6457fe5b0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b1515612eb157600080fd5b6000612f22602754612f14601c54612f06670de0b6b3a7640000612ef8670de0b6b3a7640000612eea8c8c6146ec90919063ffffffff16565b61489f90919063ffffffff16565b61489f90919063ffffffff16565b6148d290919063ffffffff16565b6148d290919063ffffffff16565b9050612f30828285876148ed565b965050505050505092915050565b6000612f6c6017543073ffffffffffffffffffffffffffffffffffffffff163161416f90919063ffffffff16565b905090565b60006001806004811115612f8157fe5b601360009054906101000a900460ff166004811115612f9c57fe5b141515612fa857600080fd5b600084118015612fe55750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b1515612ff057600080fd5b60008390508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156130cc57600080fd5b505af11580156130e0573d6000803e3d6000fd5b505050506040513d60208110156130f657600080fd5b81019080805190602001909291905050505060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156131a557600080fd5b505af11580156131b9573d6000803e3d6000fd5b505050506040513d60208110156131cf57600080fd5b810190808051906020019092919050505090508581101515156131f157600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff163190508273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561327c57600080fd5b505af1158015613290573d6000803e3d6000fd5b5050505060006132c0823073ffffffffffffffffffffffffffffffffffffffff163161416f90919063ffffffff16565b90508281101515156132d157600080fd5b6132db3389614eda565b9550505050505092915050565b6132f061586d565b60c060405190810160405280600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250905090565b60008080600481111561350657fe5b601360009054906101000a900460ff16600481111561352157fe5b14151561352d57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561358a57600080fd5b85600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d8cf24fd6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016040805180830381600087803b1580156137fe57600080fd5b505af1158015613812573d6000803e3d6000fd5b505050506040513d604081101561382857600080fd5b810190808051906020019092919080519060200190929190505050915091506000821180156138575750600081115b151561386257600080fd5b81601a8190555080601b8190555081601c8190555080601d81905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001601360006101000a81548160ff021916908360048111156138ff57fe5b021790555080827f9044c32331b11a41789cda95b2838242d103fe41d345b0ed821b6b3728283a0f670de0b6b3a764000080604051808381526020018281526020019250505060405180910390a37fe59d261c86f3e28ec60b2625dd89458b15cc93d4b260e2122846d5823a5aafab601854601954604051808381526020018281526020019250505060405180910390a160019450505050509392505050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156139fe57600080fd5b6001806004811115613a0c57fe5b601360009054906101000a900460ff166004811115613a2757fe5b141515613a3357600080fd5b6000613a4f85613a41612f3e565b61416f90919063ffffffff16565b9050600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050158015613ab9573d6000803e3d6000fd5b507f5b5b4c58fded589766d5845c3cddd53ffcb18bcb7e21933ec1858dddafb2d9a5600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168683604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a160019350505050919050565b60126020528060005260406000206000915090505481565b6000601180549050905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080613bb1614091565b9050600454600354820310151515613bc857600080fd5b60003390506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d04787a78260006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015613c9257600080fd5b505af1158015613ca6573d6000803e3d6000fd5b505050506040513d6020811015613cbc57600080fd5b8101908080519060200190929190505050600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff7fa3b6184cd955c4d8db1b118f541d29ad3cde98ac41ffac1864077b27acc5b81600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a16001925050806003819055505090565b613dde615890565b6103c06040519081016040528060035481526020016004548152602001601360009054906101000a900460ff166004811115613e1657fe5b8152602001601454815260200160155481526020016016548152602001601754815260200160185481526020016019548152602001601a548152602001601b548152602001601c548152602001601d548152602001601e548152602001601f54815260200160205481526020016021548152602001602254815260200160235481526020016025548152602001613eab613b73565b8152602001613eb8612f3e565b8152602001603160009054906101000a900460ff166002811115613ed857fe5b815260200160265481526020016027548152602001602b548152602001602c54815260200160285481526020016029548152602001602a54815250905090565b60006001806004811115613f2857fe5b601360009054906101000a900460ff166004811115613f4357fe5b141515613f4f57600080fd5b613f593334614eda565b91505090565b600080851480613f6f5750600185145b1515613f7a57600080fd5b6000613f868686614099565b905082600f87600281101515613f9857fe5b0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fb3fd5071835887567a0671151121894ddccc2842f1d10bedad13e0d17cace9a78589604051808381526020018281526020019250505060405180910390a36001915050949350505050565b600042905090565b600080831480156140f75750600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b8061415b575060018314801561415a5750600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b5b6141655733614167565b815b905092915050565b600082821115151561417d57fe5b818303905092915050565b6000600180600481111561419857fe5b601360009054906101000a900460ff1660048111156141b357fe5b1415156141bf57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156141fb57600080fd5b82600d8760028110151561420b57fe5b0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561425757600080fd5b6000614306600d8860028110151561426b57fe5b0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600d896002811015156142b957fe5b0160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546146ec90919063ffffffff16565b905061436884600d8960028110151561431b57fe5b0160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461416f90919063ffffffff16565b600d8860028110151561437757fe5b0160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061441984600d896002811015156143cc57fe5b0160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546146ec90919063ffffffff16565b600d8860028110151561442857fe5b0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080614518600d8960028110151561447d57fe5b0160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600d8a6002811015156144cb57fe5b0160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546146ec90919063ffffffff16565b14151561452157fe5b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f9ed053bb818ff08b8353cd46f78db1f0799f31c9e4458fdb425c10eccd2efc44868a604051808381526020018281526020019250505060405180910390a361463686600d896002811015156145a157fe5b0160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600d8a6001036002811015156145f257fe5b0160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461554e565b6146de85600d8960028110151561464957fe5b0160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600d8a60010360028110151561469a57fe5b0160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461554e565b600192505050949350505050565b600080828401905083811015151561470057fe5b8091505092915050565b6000806000614736602054614728878a61416f90919063ffffffff16565b6148d290919063ffffffff16565b9050600061476787614759670de0b6b3a76400008c61489f90919063ffffffff16565b6148d290919063ffffffff16565b90506147d2856147c46127106147b661478d6127106026546146ec90919063ffffffff16565b6147a8670de0b6b3a76400008861489f90919063ffffffff16565b61489f90919063ffffffff16565b6148d290919063ffffffff16565b6148d290919063ffffffff16565b90506000614805670de0b6b3a76400006147f785602b5461489f90919063ffffffff16565b6146ec90919063ffffffff16565b905060006148326127106148246026548561489f90919063ffffffff16565b6148d290919063ffffffff16565b90508083111515614878576148666026546148586127108661489f90919063ffffffff16565b6148d290919063ffffffff16565b60008090509550955050505050614895565b8161488c828561416f90919063ffffffff16565b95509550505050505b9550959350505050565b600080828402905060008414806148c057508284828115156148bd57fe5b04145b15156148c857fe5b8091505092915050565b60008082848115156148e057fe5b0490508091505092915050565b600080841115156148fd57600080fd5b6149128460175461416f90919063ffffffff16565b601781905550600061492685601f54615816565b809250819650505061498f84600d600060028110151561494257fe5b0160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461416f90919063ffffffff16565b600d600060028110151561499f57fe5b0160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550614a4283600d60016002811015156149f557fe5b0160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461416f90919063ffffffff16565b600d6001600281101515614a5257fe5b0160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550614b3b86600d6000600281101515614aa857fe5b0160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600d6001600281101515614af757fe5b0160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461554e565b614b508460155461416f90919063ffffffff16565b601581905550614b6b8360165461416f90919063ffffffff16565b6016819055508573ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050158015614bb7573d6000803e3d6000fd5b508573ffffffffffffffffffffffffffffffffffffffff167fe02f6383e19e87c24e0c03e2cd5dbd05156cb29a1b0f3dbca1fa3430e444f63d868686856040518085815260200184815260200183815260200182815260200194505050505060405180910390a27fce065be89501ad8aef77e0eb0160264c2d1eb1732a004bcb98735bb0b8102205601554601654604051808381526020018281526020019250505060405180910390a1600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323de6651876000876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015614d5b57600080fd5b505af1158015614d6f573d6000803e3d6000fd5b505050506040513d6020811015614d8557600080fd5b810190808051906020019092919050505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323de6651876000866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015614e9157600080fd5b505af1158015614ea5573d6000803e3d6000fd5b505050506040513d6020811015614ebb57600080fd5b8101908080519060200190929190505050506001915050949350505050565b60008082111515614eea57600080fd5b6000614ef883601e54615816565b8092508194505050614f15836017546146ec90919063ffffffff16565b6017819055506000614f5a612710614f4c602754614f3e601c548961489f90919063ffffffff16565b61489f90919063ffffffff16565b61489f90919063ffffffff16565b90506000614fa1614f786127106026546146ec90919063ffffffff16565b614f93670de0b6b3a76400008061489f90919063ffffffff16565b61489f90919063ffffffff16565b90506000614fb882846148d290919063ffffffff16565b90506000614fe5612710614fd76026548561489f90919063ffffffff16565b6148d290919063ffffffff16565b905061504881600d6000600281101515614ffb57fe5b0160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546146ec90919063ffffffff16565b600d600060028110151561505857fe5b0160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506150fb82600d60016002811015156150ae57fe5b0160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546146ec90919063ffffffff16565b600d600160028110151561510b57fe5b0160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506151f488600d600060028110151561516157fe5b0160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600d60016002811015156151b057fe5b0160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461554e565b615209816015546146ec90919063ffffffff16565b601581905550615224826016546146ec90919063ffffffff16565b6016819055508773ffffffffffffffffffffffffffffffffffffffff167f1bbfc9eb113af4226de738bd6f2c94b98c4618014c7d65650e0b5d179697bf27888385896040518085815260200184815260200183815260200182815260200194505050505060405180910390a27fce065be89501ad8aef77e0eb0160264c2d1eb1732a004bcb98735bb0b8102205601554601654604051808381526020018281526020019250505060405180910390a1600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323de665160008a846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156153cd57600080fd5b505af11580156153e1573d6000803e3d6000fd5b505050506040513d60208110156153f757600080fd5b810190808051906020019092919050505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323de665160008a856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561550357600080fd5b505af1158015615517573d6000803e3d6000fd5b505050506040513d602081101561552d57600080fd5b81019080805190602001909291905050505060019550505050505092915050565b6000601260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081111561574757601454831080156155ad575060145482105b15615742576000601180549050905060006011600183038154811015156155d057fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050818310156156a5578060116001850381548110151561561857fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082601260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6011600183038154811015156156b757fe5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000601260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601180548091906001900361573e91906158b4565b5050505b615810565b6014548310158061575a57506014548210155b1561580f5760118490806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050601180549050601260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b50505050565b60008060008411151561582857600080fd5b61584f612710615841858761489f90919063ffffffff16565b6148d290919063ffffffff16565b9050615864818561416f90919063ffffffff16565b91509250929050565b60c060405190810160405280600690602082028038833980820191505090505090565b6103c060405190810160405280601e90602082028038833980820191505090505090565b8154818355818111156158db578183600052602060002091820191016158da91906158e0565b5b505050565b61590291905b808211156158fe5760008160009055506001016158e6565b5090565b9056fea165627a7a72305820aacad3419dc856bfb3ce652816d4a9b40914b16514b1dee01ed55e88c7d5e6f1002900000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d728681490d63582047a6cd2fc80b1343c6aba20000000000000000000000000597be94b5491da37f26ab36650971367cdfd2b3c000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000574fbde60000000000000000000000000000000000000000000000000000e0ee622057880000000000000000000000000000000000000000000000000001bc16d674ec8000000000000000000000000000000000000000000000000000003782dace9d9000000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000e1000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000000000000000000000000000000000000000fde8000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000000000000d42454554484f56454e2d50505400000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d728681490d63582047a6cd2fc80b1343c6aba20000000000000000000000000597be94b5491da37f26ab36650971367cdfd2b3c000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000574fbde60000000000000000000000000000000000000000000000000000e0ee622057880000000000000000000000000000000000000000000000000001bc16d674ec8000000000000000000000000000000000000000000000000000003782dace9d9000000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000e1000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000000000000000000000000000000000000000fde8000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000000000000d42454554484f56454e2d50505400000000000000000000000000000000000000"
}