{
  "address": "0x66a9f1e53173de33bec727ef76afa84956ae1b25",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Bankroll",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-05\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * \n * World War Goo - Competitive Idle Game\n * \n * https://ethergoo.io\n * \n */\n\ncontract Bankroll {\n    \n    uint256 public gooPurchaseAllocation; // Wei destined to pay to burn players' goo\n    uint256 public tokenPurchaseAllocation; // Wei destined to purchase tokens for clans\n    address public owner;\n    \n    GooBurnAlgo public gooBurner = GooBurnAlgo(0x0);\n    Clans clans = Clans(0x0);\n    address constant gooToken = address(0xdf0960778c6e6597f197ed9a25f12f5d971da86c);\n    event TokenPurchase(address tokenAddress, uint256 tokensBought, uint256 reimbursementWei);\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    function() payable external {\n        // Accepts donations\n    }\n    \n    function setClans(address clansContract) external {\n        require(msg.sender == owner);\n        clans = Clans(clansContract);\n    }\n    \n    function depositEth(uint256 gooAllocation, uint256 tokenAllocation) payable external {\n        require(gooAllocation <= 100);\n        require(tokenAllocation <= 100);\n        require(gooAllocation + tokenAllocation <= 100);\n        \n        gooPurchaseAllocation += (msg.value * gooAllocation) / 100;\n        tokenPurchaseAllocation += (msg.value * tokenAllocation) / 100;\n    }\n    \n    function updateGooBurnAlgo(address config) external {\n        require(msg.sender == owner);\n        gooBurner = GooBurnAlgo(config);\n    }\n    \n    // Not entirely trustless but seems only way\n    function refundTokenPurchase(uint256 clanId, uint256 tokensAmount, uint256 reimbursement) external {\n        require(msg.sender == owner);\n        require(tokensAmount > 0);\n        require(clans.exists(clanId));\n        \n        // Transfer tokens\n        address tokenAddress = clans.clanToken(clanId);\n        require(ERC20(tokenAddress).transferFrom(owner, address(clans), tokensAmount));\n        \n        // Reimburse purchaser\n        require(reimbursement >= tokenPurchaseAllocation);\n        tokenPurchaseAllocation -= reimbursement;\n        owner.transfer(reimbursement);\n        \n        // Auditable log\n        emit TokenPurchase(tokenAddress, tokensAmount, reimbursement);\n    }\n    \n    function increaseGooPurchaseAllocation(uint256 newAllocation) external {\n        require(msg.sender == owner);\n        require(newAllocation < (address(this).balance - tokenPurchaseAllocation));\n        gooPurchaseAllocation = newAllocation;\n    }\n    \n    function increaseTokenPurchaseAllocation(uint256 newAllocation) external {\n        require(msg.sender == owner);\n        require(newAllocation < (address(this).balance - gooPurchaseAllocation));\n        tokenPurchaseAllocation = newAllocation;\n    }\n    \n    function receiveApproval(address player, uint256 amount, address, bytes) external {\n        require(msg.sender == gooToken);\n        \n        // Calculate payment\n        uint256 payment = gooBurner.priceOf(amount);\n        require(payment <= gooPurchaseAllocation);\n        \n        // Burn Goo\n        ERC20(msg.sender).transferFrom(player, address(0), amount);\n        \n        // Send Eth\n        gooPurchaseAllocation -= payment;\n        player.transfer(payment);\n    }\n    \n}\n\ncontract GooBurnAlgo {\n    \n    Bankroll constant bankroll = Bankroll(0x66a9f1e53173de33bec727ef76afa84956ae1b25);\n    GooToken constant goo = GooToken(0xdf0960778c6e6597f197ed9a25f12f5d971da86c);\n\n    address public owner; // Minor Management\n\n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    // Initial naive algorithm, splitting (half) eth between totalSupply\n    function priceOf(uint256 amount) external view returns(uint256 payment) {\n        payment = (bankroll.gooPurchaseAllocation() * amount) / (goo.totalSupply() * 2);\n    }\n    \n    function price() external view returns(uint256 gooPrice) {\n        gooPrice = bankroll.gooPurchaseAllocation() / (goo.totalSupply() * 2);\n    }\n    \n}\n\ncontract Clans {\n    function exists(uint256 clanId) public view returns (bool);\n    mapping(uint256 => address) public clanToken; // i.e. BNB\n}\n\ncontract GooToken {\n    function totalSupply() external view returns(uint256);\n}\n\ncontract ERC20 {\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\n}",
  "bytecode": "608060405260038054600160a060020a031990811690915560048054909116905534801561002c57600080fd5b5060028054600160a060020a031916331790556107e88061004e6000396000f3006080604052600436106100ad5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662fc195e81146100af57806324be33a2146100d057806366c985c914610101578063707504a8146101195780638da5cb5b146101315780638f4ffcb114610146578063a3b287b51461017e578063bb17fa9d146101a5578063d22e5b04146101ba578063ed50aeb9146101d8578063f40b26bd146101e6575b005b3480156100bb57600080fd5b506100ad600160a060020a0360043516610207565b3480156100dc57600080fd5b506100e561024d565b60408051600160a060020a039092168252519081900360200190f35b34801561010d57600080fd5b506100ad60043561025c565b34801561012557600080fd5b506100ad600435610289565b34801561013d57600080fd5b506100e56102b6565b34801561015257600080fd5b506100ad60048035600160a060020a0390811691602480359260443516916064359182019101356102c5565b34801561018a57600080fd5b50610193610471565b60408051918252519081900360200190f35b3480156101b157600080fd5b50610193610477565b3480156101c657600080fd5b506100ad60043560243560443561047d565b6100ad600435602435610729565b3480156101f257600080fd5b506100ad600160a060020a0360043516610776565b600254600160a060020a0316331461021e57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600254600160a060020a0316331461027357600080fd5b600154303103811061028457600080fd5b600055565b600254600160a060020a031633146102a057600080fd5b60005430310381106102b157600080fd5b600155565b600254600160a060020a031681565b60003373df0960778c6e6597f197ed9a25f12f5d971da86c146102e757600080fd5b600354604080517fb9186d7d000000000000000000000000000000000000000000000000000000008152600481018890529051600160a060020a039092169163b9186d7d916024808201926020929091908290030181600087803b15801561034e57600080fd5b505af1158015610362573d6000803e3d6000fd5b505050506040513d602081101561037857600080fd5b505160005490915081111561038c57600080fd5b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a038816600482015260006024820181905260448201889052915133926323b872dd92606480820193602093909283900390910190829087803b1580156103ff57600080fd5b505af1158015610413573d6000803e3d6000fd5b505050506040513d602081101561042957600080fd5b5050600080548290038155604051600160a060020a0388169183156108fc02918491818181858888f19350505050158015610468573d6000803e3d6000fd5b50505050505050565b60015481565b60005481565b600254600090600160a060020a0316331461049757600080fd5b600083116104a457600080fd5b60048054604080517f4f558e7900000000000000000000000000000000000000000000000000000000815292830187905251600160a060020a0390911691634f558e799160248083019260209291908290030181600087803b15801561050957600080fd5b505af115801561051d573d6000803e3d6000fd5b505050506040513d602081101561053357600080fd5b5051151561054057600080fd5b60048054604080517f1c2d699800000000000000000000000000000000000000000000000000000000815292830187905251600160a060020a0390911691631c2d69989160248083019260209291908290030181600087803b1580156105a557600080fd5b505af11580156105b9573d6000803e3d6000fd5b505050506040513d60208110156105cf57600080fd5b505160025460048054604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a039485169381019390935290831660248301526044820187905251929350908316916323b872dd916064808201926020929091908290030181600087803b15801561065057600080fd5b505af1158015610664573d6000803e3d6000fd5b505050506040513d602081101561067a57600080fd5b5051151561068757600080fd5b60015482101561069657600080fd5b600180548390039055600254604051600160a060020a039091169083156108fc029084906000818181858888f193505050501580156106d9573d6000803e3d6000fd5b5060408051600160a060020a03831681526020810185905280820184905290517fcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f9181900360600190a150505050565b606482111561073757600080fd5b606481111561074557600080fd5b6064828201111561075557600080fd5b60008054606434948502819004909101909155600180549290930204019055565b600254600160a060020a0316331461078d57600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058202e4df2c15683bc430d362d3fa2b9812ee64b74d8b7c96d1028e098acba20e83e0029"
}