{
  "address": "0x9ceaf86c4f96dadb746544f89675bc7f5f543c54",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BitSwap_5",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-08\n*/\n\npragma solidity ^0.5.0;\n\ncontract owned {\n    address owner;\n\n    modifier onlyowner() {\n        require(msg.sender == owner);\n        _;\n\n    }\n\n     constructor() public {\n        owner = msg.sender;\n    }\n}\n\nlibrary SafeMath {\n  function safeMul(uint a, uint b) internal pure returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeSub(uint a, uint b) internal pure returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint a, uint b) internal pure returns (uint) {\n    uint c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n\n}\n\ncontract ERC20Interface {\n    // Get the total token supply\n    function totalSupply() view public returns (uint256);\n\n    // Get the account balance of another account with address _owner\n    function balanceOf(address _owner) view public returns (uint256);\n\n    // Send _value amount of tokens to address _to\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    // Send _value amount of tokens from address _from to address _to\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    // this function is required for some DEX functionality\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    // Returns the amount which _spender is still allowed to withdraw from _owner\n    function allowance(address _owner, address _spender) view public returns (uint256 remaining);\n\n    // Triggered when tokens are transferred.\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract BitSwap_5 is  owned{\n    ////////////////\n    ///// EVENTS /////\n    //////////////////\n    event DepositForEthReceived(address indexed _from, uint _amount, uint _timestamp);\n    event withdrawalSwappedAsset(address indexed _to, uint indexed _symbolIndex, uint _amount, uint _timestamp);\n    event DepositForTokenReceived(address indexed _from, uint indexed _symbolIndex, uint _amount, uint _timestamp);\n\n    using SafeMath for uint256;\n    \n      //////////////\n    // BALANCES //\n    //////////////\n    mapping (address => mapping (uint256 => uint)) tokenBalanceForAddress;\n      struct Contracts {\n         address contractAddr;\n    }\n    mapping (uint => Contracts) public ContractAddresses;\n   \n\n    mapping (address => uint) balanceEthForAddress;\n       function depositEther() public payable {\n        require(balanceEthForAddress[msg.sender] + msg.value >= balanceEthForAddress[msg.sender]);\n        balanceEthForAddress[msg.sender] += msg.value;\n        emit DepositForEthReceived(msg.sender, msg.value, now);\n    }\n    \n    \n     function addTokenContractAddress(string memory _symbol, address _contract) onlyowner() public{\n         \n         uint index = getSymbolContract(_symbol);\n          require(index > 0);\n         ContractAddresses[index] = Contracts(_contract);\n        \n    }\n    \n    \n    \n      function getSymbolContract(string memory _symbol) internal pure returns (uint) {\n          uint index = 0;\n         if(compareStringsbyBytes(_symbol,\"BINS\") || compareStringsbyBytes(_symbol,\"BIB\") || compareStringsbyBytes(_symbol,\"DAIX\")){\n             if(compareStringsbyBytes(_symbol,\"BINS\")){\n               index = 1;\n             }else if(compareStringsbyBytes(_symbol,\"BIB\")){\n                index = 2; \n             }else if(compareStringsbyBytes(_symbol,\"DAIX\")){\n                index = 3; \n             }\n             return index;\n         }else{\n            revert(); \n         }\n         \n        return 0;\n    }\n\n\n function compareStringsbyBytes(string memory s1, string memory s2) public pure returns(bool){\n    return keccak256(bytes(s1)) == keccak256(bytes(s2));\n}\n\n    \n      function getTokenContractAddress(string memory _a) view public returns(address){\n           uint index = getSymbolContract(_a);\n           require(index > 0);\n          return ContractAddresses[index].contractAddr;\n     }\n     \n        function getTokenSymbolByContractAddress(string memory _a) view public returns(uint256){\n          \n           uint index = getSymbolContract(_a);\n           require(index > 0);\n            ERC20Interface token = ERC20Interface(ContractAddresses[index].contractAddr);\n\n            return token.totalSupply();\n     }\n     \n    \n      \n      \n      function swapAsset(string memory _symbol) public {\n           if(compareStringsbyBytes(_symbol,\"DAIX\")) revert(); \n       uint amountDue = 0;\n       uint swapFromindex = getSymbolContract(_symbol);\n     \n      \n       require(swapFromindex > 0);\n       ERC20Interface swapFrom = ERC20Interface(ContractAddresses[swapFromindex].contractAddr);\n  \n      // require(swapFrom.approve(address(this), swapFrom.balanceOf(msg.sender)) == true);\n        require(ContractAddresses[swapFromindex].contractAddr != address(0));\n        \n\n        require(tokenBalanceForAddress[msg.sender][swapFromindex] + swapFrom.balanceOf(msg.sender) >= tokenBalanceForAddress[msg.sender][swapFromindex]);\n       if(compareStringsbyBytes(_symbol,\"BINS\")){\n            amountDue = swapFrom.balanceOf(msg.sender);\n        }else if(compareStringsbyBytes(_symbol,\"BIB\")){\n             amountDue = swapFrom.balanceOf(msg.sender) / 200 * 3;\n        }\n        require(swapFrom.transferFrom(msg.sender, address(this), swapFrom.balanceOf(msg.sender)) == true);\n       uint total = amountDue * 0.00000001 ether;\n       \n      \n        tokenBalanceForAddress[msg.sender][swapFromindex] += total;\n        emit DepositForTokenReceived(msg.sender, swapFromindex, total, now);\n        \n      }\n      \n    function withdrawSwappedAsset(string memory _symbol) public {\n        string memory toAssetSymbol = \"DAIX\";\n        uint symbolIndex = getSymbolContract(toAssetSymbol);\n        uint withdrawSymbolIndex = getSymbolContract(_symbol);\n        uint256 amount = tokenBalanceForAddress[msg.sender][withdrawSymbolIndex];\n        require(ContractAddresses[symbolIndex].contractAddr != address(0));\n\n        ERC20Interface token = ERC20Interface(ContractAddresses[symbolIndex].contractAddr);\n\n        require(tokenBalanceForAddress[msg.sender][withdrawSymbolIndex] - amount >= 0);\n        require(tokenBalanceForAddress[msg.sender][withdrawSymbolIndex] - amount <= tokenBalanceForAddress[msg.sender][withdrawSymbolIndex]);\n\n        tokenBalanceForAddress[msg.sender][withdrawSymbolIndex] -= amount;\n        \n        require(token.transfer(msg.sender, amount) == true);\n        emit withdrawalSwappedAsset(msg.sender, withdrawSymbolIndex, amount, now);\n    }\n    \n      function getBalance(string memory symbolName) view public returns (uint) {\n          uint withdrawSymbolIndex = getSymbolContract(symbolName);\n        return tokenBalanceForAddress[msg.sender][withdrawSymbolIndex];\n    }\n    \n    //   function calculate(uint symbolName) view public returns (uint) {\n    //     uint total = symbolName * 0.00000001 ether;\n    //     return total;\n    // }\n    \n}",
  "bytecode": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506119d4806100536000396000f3fe608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633a51d2461461009e5780634512009c1461017a57806373e387ec146102565780637f64aad31461031e57806398ea5fca14610426578063a86ae53414610430578063d6bd0bc5146104f8578063e9a734ff14610573578063fc436770146106ea575b600080fd5b3480156100aa57600080fd5b50610164600480360360208110156100c157600080fd5b81019080803590602001906401000000008111156100de57600080fd5b8201836020820111156100f057600080fd5b8035906020019184600183028401116401000000008311171561011257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506107d2565b6040518082815260200191505060405180910390f35b34801561018657600080fd5b506102406004803603602081101561019d57600080fd5b81019080803590602001906401000000008111156101ba57600080fd5b8201836020820111156101cc57600080fd5b803590602001918460018302840111640100000000831117156101ee57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610839565b6040518082815260200191505060405180910390f35b34801561026257600080fd5b5061031c6004803603602081101561027957600080fd5b810190808035906020019064010000000081111561029657600080fd5b8201836020820111156102a857600080fd5b803590602001918460018302840111640100000000831117156102ca57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610937565b005b34801561032a57600080fd5b506103e46004803603602081101561034157600080fd5b810190808035906020019064010000000081111561035e57600080fd5b82018360208201111561037057600080fd5b8035906020019184600183028401116401000000008311171561039257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610d4d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61042e610da9565b005b34801561043c57600080fd5b506104f66004803603602081101561045357600080fd5b810190808035906020019064010000000081111561047057600080fd5b82018360208201111561048257600080fd5b803590602001918460018302840111640100000000831117156104a457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610edd565b005b34801561050457600080fd5b506105316004803603602081101561051b57600080fd5b8101908080359060200190929190505050611681565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561057f57600080fd5b506106d06004803603604081101561059657600080fd5b81019080803590602001906401000000008111156105b357600080fd5b8201836020820111156105c557600080fd5b803590602001918460018302840111640100000000831117156105e757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561064a57600080fd5b82018360208201111561065c57600080fd5b8035906020019184600183028401116401000000008311171561067e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506116bf565b604051808215151515815260200191505060405180910390f35b3480156106f657600080fd5b506107d06004803603604081101561070d57600080fd5b810190808035906020019064010000000081111561072a57600080fd5b82018360208201111561073c57600080fd5b8035906020019184600183028401116401000000008311171561075e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116da565b005b6000806107de836117d9565b9050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002054915050919050565b600080610845836117d9565b905060008111151561085657600080fd5b60006002600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156108f357600080fd5b505afa158015610907573d6000803e3d6000fd5b505050506040513d602081101561091d57600080fd5b810190808051906020019092919050505092505050919050565b60606040805190810160405280600481526020017f44414958000000000000000000000000000000000000000000000000000000008152509050600061097c826117d9565b90506000610989846117d9565b90506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020549050600073ffffffffffffffffffffffffffffffffffffffff166002600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610a5257600080fd5b60006002600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600082600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020540310151515610aef57600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000205482600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020540311151515610ba057600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060008282540392505081905550600115158173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610ca557600080fd5b505af1158015610cb9573d6000803e3d6000fd5b505050506040513d6020811015610ccf57600080fd5b81019080805190602001909291905050501515141515610cee57600080fd5b823373ffffffffffffffffffffffffffffffffffffffff167f15afe328ec31d5f928e11735ebfff39c99be024e93ce1d9b3631a29869ff2d8e8442604051808381526020018281526020019250505060405180910390a3505050505050565b600080610d59836117d9565b9050600081111515610d6a57600080fd5b6002600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205434600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110151515610e3857600080fd5b34600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167f42dbebeb8f6fb795e3007753aef2d4b1a292dd123f6de06a41050186741506373442604051808381526020018281526020019250505060405180910390a2565b610f1c816040805190810160405280600481526020017f44414958000000000000000000000000000000000000000000000000000000008152506116bf565b15610f2657600080fd5b60008090506000610f36836117d9565b9050600081111515610f4757600080fd5b60006002600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610ff457600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020548173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156110de57600080fd5b505afa1580156110f2573d6000803e3d6000fd5b505050506040513d602081101561110857600080fd5b8101908080519060200190929190505050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002054011015151561117857600080fd5b6111b7846040805190810160405280600481526020017f42494e53000000000000000000000000000000000000000000000000000000008152506116bf565b15611297578073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561125557600080fd5b505afa158015611269573d6000803e3d6000fd5b505050506040513d602081101561127f57600080fd5b810190808051906020019092919050505092506113c2565b6112d6846040805190810160405280600381526020017f42494200000000000000000000000000000000000000000000000000000000008152506116bf565b156113c157600360c88273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561137857600080fd5b505afa15801561138c573d6000803e3d6000fd5b505050506040513d60208110156113a257600080fd5b81019080805190602001909291905050508115156113bc57fe5b040292505b5b600115158173ffffffffffffffffffffffffffffffffffffffff166323b872dd33308573ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561147d57600080fd5b505afa158015611491573d6000803e3d6000fd5b505050506040513d60208110156114a757600080fd5b81019080805190602001909291905050506040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561157057600080fd5b505af1158015611584573d6000803e3d6000fd5b505050506040513d602081101561159a57600080fd5b810190808051906020019092919050505015151415156115b957600080fd5b60006402540be4008402905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060008282540192505081905550823373ffffffffffffffffffffffffffffffffffffffff167fc0aa5496c7b01c4b317a58e270b45f383bcd6ae57f9e5124db9c0674b77764998342604051808381526020018281526020019250505060405180910390a35050505050565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081565b60008180519060200120838051906020012014905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561173557600080fd5b6000611740836117d9565b905060008111151561175157600080fd5b6020604051908101604052808373ffffffffffffffffffffffffffffffffffffffff168152506002600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050505050565b6000806000905061181f836040805190810160405280600481526020017f42494e53000000000000000000000000000000000000000000000000000000008152506116bf565b806118655750611864836040805190810160405280600381526020017f42494200000000000000000000000000000000000000000000000000000000008152506116bf565b5b806118ab57506118aa836040805190810160405280600481526020017f44414958000000000000000000000000000000000000000000000000000000008152506116bf565b5b1561199e576118ef836040805190810160405280600481526020017f42494e53000000000000000000000000000000000000000000000000000000008152506116bf565b156118fd5760019050611995565b61193c836040805190810160405280600381526020017f42494200000000000000000000000000000000000000000000000000000000008152506116bf565b1561194a5760029050611994565b611989836040805190810160405280600481526020017f44414958000000000000000000000000000000000000000000000000000000008152506116bf565b1561199357600390505b5b5b809150506119a3565b600080fd5b91905056fea165627a7a72305820d827dc2b10ff2bb38b05225ec2e197d9c60156ce73d52c545437590eccc5237c0029"
}