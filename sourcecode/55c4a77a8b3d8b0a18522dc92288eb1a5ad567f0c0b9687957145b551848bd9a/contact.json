{
  "address": "0xa2c1e04aca801da92fa95af161040d37f103d69d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CoyToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-26\n*/\n\npragma solidity 0.4.24;\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\math\\SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public onlyOwner canMint returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\CappedToken.sol\n\n/**\n * @title Capped token\n * @dev Mintable token with a token cap.\n */\ncontract CappedToken is MintableToken {\n\n  uint256 public cap;\n\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    returns (bool)\n  {\n    require(totalSupply_.add(_amount) <= cap);\n\n    return super.mint(_to, _amount);\n  }\n\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\DetailedERC20.sol\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\lifecycle\\Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: contracts\\CoyToken.sol\n\n/**\n * @title COYToken\n * @dev CoinAnalyst's ERC20 Token.\n * Besides the standard ERC20 functionality, the token allows minting, batch minting, \n * burning, and assigning. Furthermore, it is a pausable capped token.\n * When paused, transfers are impossible.\n *\n * This contract is heavily based on the Open Zeppelin classes:\n * - CappedToken\n * - BurnableToken\n * - Pausable\n * - SafeMath\n */\ncontract CoyToken is CappedToken, BurnableToken, DetailedERC20, Pausable {\n    using SafeMath for uint256;\n    using SafeMath for uint8;\n    \n    string private constant COY_NAME = \"CoinAnalyst\";\n    string private constant COY_SYMBOL = \"COY\";\n    uint8 private constant COY_DECIMALS = 18;\n    \n    /** \n     * Define cap internally to later use for capped token.\n     * Using same number of decimal figures as ETH (i.e. 18).\n     * Maximum number of tokens in circulation: 3.75 billion.\n     */\n    uint256 private constant TOKEN_UNIT = 10 ** uint256(COY_DECIMALS);\n    uint256 private constant COY_CAP = (3.75 * 10 ** 9) * TOKEN_UNIT;\n    \n    // Token roles\n    address public minter;\n    address public assigner;\n    address public burner;\n\n    /**\n     * @dev Constructor that initializes the COYToken contract.\n     * @param _minter The minter account.\n     * @param _assigner The assigner account.\n     * @param _burner The burner account.\n     */\n    constructor(address _minter, address _assigner, address _burner) \n        CappedToken(COY_CAP) \n        DetailedERC20(COY_NAME, COY_SYMBOL, COY_DECIMALS)\n        public\n    {\n        require(_minter != address(0), \"Minter must be a valid non-null address\");\n        require(_assigner != address(0), \"Assigner must be a valid non-null address\");\n        require(_burner != address(0), \"Burner must be a valid non-null address\");\n\n        minter = _minter;\n        assigner = _assigner;\n        burner = _burner;\n    }\n\n    event MinterTransferred(address indexed _minter, address indexed _newMinter);\n    event AssignerTransferred(address indexed _assigner, address indexed _newAssigner);\n    event BurnerTransferred(address indexed _burner, address indexed _newBurner);\n    event BatchMint(uint256 _totalMintedTokens, uint256 _batchMintId);\n    event Assign(address indexed _to, uint256 _amount);\n    event BatchAssign(uint256 _totalAssignedTokens, uint256 _batchAssignId);\n    event BatchTransfer(uint256 _totalTransferredTokens, uint256 _batchTransferId);\n    \n    /** \n     * @dev Throws if called by any account other than the minter.\n     *      Override from MintableToken\n     */\n    modifier hasMintPermission() {\n        require(msg.sender == minter, \"Only the minter can do this.\");\n        _;\n    }\n    \n    /** \n     * @dev Throws if called by any account other than the assigner.\n     */\n    modifier hasAssignPermission() {\n        require(msg.sender == assigner, \"Only the assigner can do this.\");\n        _;\n    }\n    \n    /**\n     *  @dev Throws if called by any account other than the burner.\n     */\n    modifier hasBurnPermission() {\n        require(msg.sender == burner, \"Only the burner can do this.\");\n        _;\n    }\n    \n    /**\n     *  @dev Throws if minting period is still ongoing.\n     */\n    modifier whenMintingFinished() {\n        require(mintingFinished, \"Minting has to be finished.\");\n        _;\n    }\n\n\n    /**\n     *  @dev Allows the current owner to change the minter.\n     *  @param _newMinter The address of the new minter.\n     *  @return True if the operation was successful.\n     */\n    function setMinter(address _newMinter) external \n        canMint\n        onlyOwner \n        returns(bool) \n    {\n        require(_newMinter != address(0), \"New minter must be a valid non-null address\");\n        require(_newMinter != minter, \"New minter has to differ from previous minter\");\n\n        emit MinterTransferred(minter, _newMinter);\n        minter = _newMinter;\n        return true;\n    }\n    \n    /**\n     *  @dev Allows the current owner to change the assigner.\n     *  @param _newAssigner The address of the new assigner.\n     *  @return True if the operation was successful.\n     */\n    function setAssigner(address _newAssigner) external \n        onlyOwner \n        canMint\n        returns(bool) \n    {\n        require(_newAssigner != address(0), \"New assigner must be a valid non-null address\");\n        require(_newAssigner != assigner, \"New assigner has to differ from previous assigner\");\n\n        emit AssignerTransferred(assigner, _newAssigner);\n        assigner = _newAssigner;\n        return true;\n    }\n    \n    /**\n     *  @dev Allows the current owner to change the burner.\n     *  @param _newBurner The address of the new burner.\n     *  @return True if the operation was successful.\n     */\n    function setBurner(address _newBurner) external \n        onlyOwner \n        returns(bool) \n    {\n        require(_newBurner != address(0), \"New burner must be a valid non-null address\");\n        require(_newBurner != burner, \"New burner has to differ from previous burner\");\n\n        emit BurnerTransferred(burner, _newBurner);\n        burner = _newBurner;\n        return true;\n    }\n    \n    /**\n     * @dev Function to batch mint tokens.\n     * @param _to An array of addresses that will receive the minted tokens.\n     * @param _amounts An array with the amounts of tokens each address will get minted.\n     * @param _batchMintId Identifier for the batch in order to synchronize with internal (off-chain) processes.\n     * @return A boolean that indicates whether the operation was successful.\n     */\n    function batchMint(address[] _to, uint256[] _amounts, uint256 _batchMintId) external\n        canMint\n        hasMintPermission\n        returns (bool) \n    {\n        require(_to.length == _amounts.length, \"Input arrays must have the same length\");\n        \n        uint256 totalMintedTokens = 0;\n        for (uint i = 0; i < _to.length; i++) {\n            mint(_to[i], _amounts[i]);\n            totalMintedTokens = totalMintedTokens.add(_amounts[i]);\n        }\n        \n        emit BatchMint(totalMintedTokens, _batchMintId);\n        return true;\n    }\n    \n    /**\n     * @dev Function to assign any number of tokens to a given address.\n     *      Compared to the `mint` function, the `assign` function allows not just to increase but also to decrease\n     *      the number of tokens of an address by assigning a lower value than the address current balance.\n     *      This function can only be executed during initial token sale.\n     * @param _to The address that will receive the assigned tokens.\n     * @param _amount The amount of tokens to assign.\n     * @return True if the operation was successful.\n     */\n    function assign(address _to, uint256 _amount) public \n        canMint\n        hasAssignPermission \n        returns(bool) \n    {\n        // The desired value to assign (`_amount`) can be either higher or lower than the current number of tokens\n        // of the address (`balances[_to]`). To calculate the new `totalSupply_` value, the difference between `_amount`\n        // and `balances[_to]` (`delta`) is calculated first, and then added or substracted to `totalSupply_` accordingly.\n        uint256 delta = 0;\n        if (balances[_to] < _amount) {\n            // balances[_to] will be increased, so totalSupply_ should be increased\n            delta = _amount.sub(balances[_to]);\n            totalSupply_ = totalSupply_.add(delta);\n            require(totalSupply_ <= cap, \"Total supply cannot be higher than cap\");\n            emit Transfer(address(0), _to, delta); // conformity to mint and burn functions for easier balance retrieval via event logs\n        } else {\n            // balances[_to] will be decreased, so totalSupply_ should be decreased\n            delta = balances[_to].sub(_amount);\n            totalSupply_ = totalSupply_.sub(delta);\n            emit Transfer(_to, address(0), delta); // conformity to mint and burn functions for easier balance retrieval via event logs\n        }\n        \n        require(delta > 0, \"Delta should not be zero\");\n\n        balances[_to] = _amount;\n        emit Assign(_to, _amount);\n        return true;\n    }\n    \n    /**\n     * @dev Function to assign a list of numbers of tokens to a given list of addresses.\n     * @param _to The addresses that will receive the assigned tokens.\n     * @param _amounts The amounts of tokens to assign.\n     * @param _batchAssignId Identifier for the batch in order to synchronize with internal (off-chain) processes.\n     * @return True if the operation was successful.\n     */\n    function batchAssign(address[] _to, uint256[] _amounts, uint256 _batchAssignId) external\n        canMint\n        hasAssignPermission\n        returns (bool) \n    {\n        require(_to.length == _amounts.length, \"Input arrays must have the same length\");\n        \n        uint256 totalAssignedTokens = 0;\n        for (uint i = 0; i < _to.length; i++) {\n            assign(_to[i], _amounts[i]);\n            totalAssignedTokens = totalAssignedTokens.add(_amounts[i]);\n        }\n        \n        emit BatchAssign(totalAssignedTokens, _batchAssignId);\n        return true;\n    }\n    \n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public\n        hasBurnPermission\n    {\n        super.burn(_value);\n    }\n\n    /**\n     * @dev transfer token for a specified address when minting is finished.\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) public\n        whenMintingFinished\n        whenNotPaused\n        returns (bool) \n    {\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another when minting is finished.\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public\n        whenMintingFinished\n        whenNotPaused\n        returns (bool) \n    {\n        return super.transferFrom(_from, _to, _value);\n    }\n    \n    /**\n     * @dev Transfer tokens from one address to several others when minting is finished.\n     * @param _to addresses The addresses which you want to transfer to\n     * @param _amounts uint256 the amounts of tokens to be transferred\n     * @param _batchTransferId Identifier for the batch in order to synchronize with internal (off-chain) processes.\n     */\n    function transferInBatches(address[] _to, uint256[] _amounts, uint256 _batchTransferId) public\n        whenMintingFinished\n        whenNotPaused\n        returns (bool) \n    {\n        require(_to.length == _amounts.length, \"Input arrays must have the same length\");\n        \n        uint256 totalTransferredTokens = 0;\n        for (uint i = 0; i < _to.length; i++) {\n            transfer(_to[i], _amounts[i]);\n            totalTransferredTokens = totalTransferredTokens.add(_amounts[i]);\n        }\n        \n        emit BatchTransfer(totalTransferredTokens, _batchTransferId);\n        return true;\n    }\n}",
  "bytecode": "60806040526000600360146101000a81548160ff0219169083151502179055506000600760016101000a81548160ff0219169083151502179055503480156200004757600080fd5b50604051606080620040098339810180604052810190808051906020019092919080519060200190929190805190602001909291905050506040805190810160405280600b81526020017f436f696e416e616c7973740000000000000000000000000000000000000000008152506040805190810160405280600381526020017f434f59000000000000000000000000000000000000000000000000000000000081525060128060ff16600a0a63df8475800233600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000811115156200014b57600080fd5b806004819055505082600590805190602001906200016b929190620004d3565b50816006908051906020019062000184929190620004d3565b5080600760006101000a81548160ff021916908360ff160217905550505050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156200026f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f4d696e746572206d75737420626520612076616c6964206e6f6e2d6e756c6c2081526020017f616464726573730000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200033b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f41737369676e6572206d75737420626520612076616c6964206e6f6e2d6e756c81526020017f6c2061646472657373000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151562000407576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f4275726e6572206d75737420626520612076616c6964206e6f6e2d6e756c6c2081526020017f616464726573730000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b82600760026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000582565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200051657805160ff191683800117855562000547565b8280016001018555821562000547579182015b828111156200054657825182559160200191906001019062000529565b5b5090506200055691906200055a565b5090565b6200057f91905b808211156200057b57600081600090555060010162000561565b5090565b90565b613a7780620005926000396000f300608060405260043610610196576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b1461019b57806306fdde03146101ca578063075461721461025a578063095ea7b3146102b157806318160ddd14610316578063199732611461034157806323b872dd1461039857806327810b6e1461041d578063313ce56714610474578063355274ea146104a55780633f4ba83a146104d057806340c10f19146104e757806342966c681461054c5780635c975abb1461057957806366188463146105a857806370a082311461060d578063715018a6146106645780637d64bcb41461067b5780637e283081146106aa578063809738161461071f5780638456cb59146107945780638da5cb5b146107ab57806395d89b4114610802578063a9059cbb14610892578063a996d6ce146108f7578063b045e6af14610952578063be76048814610a1d578063c797a3e414610a82578063d73dd62314610add578063dd62ed3e14610b42578063f2fde38b14610bb9578063fca3b5aa14610bfc575b600080fd5b3480156101a757600080fd5b506101b0610c57565b604051808215151515815260200191505060405180910390f35b3480156101d657600080fd5b506101df610c6a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561021f578082015181840152602081019050610204565b50505050905090810190601f16801561024c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561026657600080fd5b5061026f610d08565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102bd57600080fd5b506102fc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d2e565b604051808215151515815260200191505060405180910390f35b34801561032257600080fd5b5061032b610e20565b6040518082815260200191505060405180910390f35b34801561034d57600080fd5b50610356610e2a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103a457600080fd5b50610403600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e50565b604051808215151515815260200191505060405180910390f35b34801561042957600080fd5b50610432610f06565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561048057600080fd5b50610489610f2c565b604051808260ff1660ff16815260200191505060405180910390f35b3480156104b157600080fd5b506104ba610f3f565b6040518082815260200191505060405180910390f35b3480156104dc57600080fd5b506104e5610f45565b005b3480156104f357600080fd5b50610532600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611005565b604051808215151515815260200191505060405180910390f35b34801561055857600080fd5b506105776004803603810190808035906020019092919050505061103e565b005b34801561058557600080fd5b5061058e61110f565b604051808215151515815260200191505060405180910390f35b3480156105b457600080fd5b506105f3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611122565b604051808215151515815260200191505060405180910390f35b34801561061957600080fd5b5061064e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113b4565b6040518082815260200191505060405180910390f35b34801561067057600080fd5b506106796113fc565b005b34801561068757600080fd5b50610690611501565b604051808215151515815260200191505060405180910390f35b3480156106b657600080fd5b50610705600480360381019080803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390803590602001909291905050506115c9565b604051808215151515815260200191505060405180910390f35b34801561072b57600080fd5b5061077a60048036038101908080359060200190820180359060200191909192939192939080359060200190820180359060200191909192939192939080359060200190929190505050611833565b604051808215151515815260200191505060405180910390f35b3480156107a057600080fd5b506107a9611a9d565b005b3480156107b757600080fd5b506107c0611b5e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561080e57600080fd5b50610817611b84565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561085757808201518184015260208101905061083c565b50505050905090810190601f1680156108845780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561089e57600080fd5b506108dd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c22565b604051808215151515815260200191505060405180910390f35b34801561090357600080fd5b50610938600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cd6565b604051808215151515815260200191505060405180910390f35b34801561095e57600080fd5b50610a03600480360381019080803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190929190505050611fb1565b604051808215151515815260200191505060405180910390f35b348015610a2957600080fd5b50610a68600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506121c5565b604051808215151515815260200191505060405180910390f35b348015610a8e57600080fd5b50610ac3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612657565b604051808215151515815260200191505060405180910390f35b348015610ae957600080fd5b50610b28600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061294e565b604051808215151515815260200191505060405180910390f35b348015610b4e57600080fd5b50610ba3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b4a565b6040518082815260200191505060405180910390f35b348015610bc557600080fd5b50610bfa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612bd1565b005b348015610c0857600080fd5b50610c3d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c39565b604051808215151515815260200191505060405180910390f35b600360149054906101000a900460ff1681565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d005780601f10610cd557610100808354040283529160200191610d00565b820191906000526020600020905b815481529060010190602001808311610ce357829003601f168201915b505050505081565b600760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600154905090565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360149054906101000a900460ff161515610ed6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d696e74696e672068617320746f2062652066696e69736865642e000000000081525060200191505060405180910390fd5b600760019054906101000a900460ff16151515610ef257600080fd5b610efd848484612f30565b90509392505050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900460ff1681565b60045481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fa157600080fd5b600760019054906101000a900460ff161515610fbc57600080fd5b6000600760016101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600060045461101f836001546132eb90919063ffffffff16565b1115151561102c57600080fd5b6110368383613307565b905092915050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611103576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4f6e6c7920746865206275726e65722063616e20646f20746869732e0000000081525060200191505060405180910390fd5b61110c81613556565b50565b600760019054906101000a900460ff1681565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083101515611234576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112c8565b611247838261356390919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561145857600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a26000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561155f57600080fd5b600360149054906101000a900460ff1615151561157b57600080fd5b6001600360146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b6000806000600360149054906101000a900460ff161515156115ea57600080fd5b600760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4f6e6c7920746865206d696e7465722063616e20646f20746869732e0000000081525060200191505060405180910390fd5b8585905088889050141515611752576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f496e70757420617272617973206d7573742068617665207468652073616d652081526020017f6c656e677468000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60009150600090505b878790508110156117e5576117ae888883818110151561177757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1687878481811015156117a257fe5b90506020020135611005565b506117d686868381811015156117c057fe5b90506020020135836132eb90919063ffffffff16565b9150808060010191505061175b565b7f3cd64f1871164ea9247e20f279f16455c731ec3a1a706b584d6d9a9d19c62c028285604051808381526020018281526020019250505060405180910390a160019250505095945050505050565b6000806000600360149054906101000a900460ff1615151561185457600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611919576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f4f6e6c79207468652061737369676e65722063616e20646f20746869732e000081525060200191505060405180910390fd5b85859050888890501415156119bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f496e70757420617272617973206d7573742068617665207468652073616d652081526020017f6c656e677468000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60009150600090505b87879050811015611a4f57611a1888888381811015156119e157fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168787848181101515611a0c57fe5b905060200201356121c5565b50611a408686838181101515611a2a57fe5b90506020020135836132eb90919063ffffffff16565b915080806001019150506119c5565b7f4b58d88542fe78a7862e89df05e9ff08a7d81eb3d751ff49d1b9c874297047718285604051808381526020018281526020019250505060405180910390a160019250505095945050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611af957600080fd5b600760019054906101000a900460ff16151515611b1557600080fd5b6001600760016101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c1a5780601f10611bef57610100808354040283529160200191611c1a565b820191906000526020600020905b815481529060010190602001808311611bfd57829003601f168201915b505050505081565b6000600360149054906101000a900460ff161515611ca8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d696e74696e672068617320746f2062652066696e69736865642e000000000081525060200191505060405180910390fd5b600760019054906101000a900460ff16151515611cc457600080fd5b611cce838361357c565b905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d3457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611dff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001807f4e6577206275726e6572206d75737420626520612076616c6964206e6f6e2d6e81526020017f756c6c206164647265737300000000000000000000000000000000000000000081525060400191505060405180910390fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611eeb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f4e6577206275726e65722068617320746f206469666665722066726f6d20707281526020017f6576696f7573206275726e65720000000000000000000000000000000000000081525060400191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167feee90df09f0bc4f2408d904f2b5c22873e54185001290d225b5b2ced5212814960405160405180910390a381600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b6000806000600360149054906101000a900460ff16151561203a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d696e74696e672068617320746f2062652066696e69736865642e000000000081525060200191505060405180910390fd5b600760019054906101000a900460ff1615151561205657600080fd5b845186511415156120f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f496e70757420617272617973206d7573742068617665207468652073616d652081526020017f6c656e677468000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60009150600090505b85518110156121795761213f868281518110151561211857fe5b90602001906020020151868381518110151561213057fe5b90602001906020020151611c22565b5061216a858281518110151561215157fe5b90602001906020020151836132eb90919063ffffffff16565b915080806001019150506120fe565b7ff06d5829339ff49fdd3d05c6b6a0a7bf6b82b2412af10126ccfee2831a949b088285604051808381526020018281526020019250505060405180910390a16001925050509392505050565b600080600360149054906101000a900460ff161515156121e457600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156122a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f4f6e6c79207468652061737369676e65722063616e20646f20746869732e000081525060200191505060405180910390fd5b60009050826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561246e576123446000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548461356390919063ffffffff16565b905061235b816001546132eb90919063ffffffff16565b60018190555060045460015411151515612403576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f546f74616c20737570706c792063616e6e6f742062652068696768657220746881526020017f616e20636170000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3612543565b6124bf836000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461356390919063ffffffff16565b90506124d68160015461356390919063ffffffff16565b600181905550600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b6000811115156125bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f44656c74612073686f756c64206e6f74206265207a65726f000000000000000081525060200191505060405180910390fd5b826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff167f8a0e37b73a0d9c82e205d4d1a3ff3d0b57ce5f4d7bccf6bac03336dc101cb7ba846040518082815260200191505060405180910390a2600191505092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156126b557600080fd5b600360149054906101000a900460ff161515156126d157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561279c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f4e65772061737369676e6572206d75737420626520612076616c6964206e6f6e81526020017f2d6e756c6c20616464726573730000000000000000000000000000000000000081525060400191505060405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612888576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001807f4e65772061737369676e65722068617320746f206469666665722066726f6d2081526020017f70726576696f75732061737369676e657200000000000000000000000000000081525060400191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f96796c61aa903b86a8d91c28b1355e94a6d8126dc339e81028ca80a0b04ac98360405160405180910390a381600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b60006129df82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132eb90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612c2d57600080fd5b612c368161379c565b50565b6000600360149054906101000a900460ff16151515612c5757600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612cb357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612d7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001807f4e6577206d696e746572206d75737420626520612076616c6964206e6f6e2d6e81526020017f756c6c206164647265737300000000000000000000000000000000000000000081525060400191505060405180910390fd5b600760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612e6a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f4e6577206d696e7465722068617320746f206469666665722066726f6d20707281526020017f6576696f7573206d696e7465720000000000000000000000000000000000000081525060400191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16600760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f02ad39e5173f89bdd5497202bd74024b5da045106c3163ddb078d2e89ff6d6de60405160405180910390a381600760026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515612f7f57600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561300a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561304657600080fd5b613097826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461356390919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061312a826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132eb90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506131fb82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461356390919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600081830190508281101515156132fe57fe5b80905092915050565b6000600760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156133ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4f6e6c7920746865206d696e7465722063616e20646f20746869732e0000000081525060200191505060405180910390fd5b600360149054906101000a900460ff161515156133ea57600080fd5b6133ff826001546132eb90919063ffffffff16565b600181905550613456826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132eb90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6135603382613898565b50565b600082821115151561357157fe5b818303905092915050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156135cb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561360757600080fd5b613658826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461356390919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506136eb826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132eb90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156137d857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111515156138e557600080fd5b613936816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461356390919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061398d8160015461356390919063ffffffff16565b6001819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350505600a165627a7a72305820424cf3f1fa0fb24783510c9496b38f878c278e7443f883f75512abf3003b26220029000000000000000000000000070b31d52b208322d01314901b14941190da2c1b000000000000000000000000070b31d52b208322d01314901b14941190da2c1b000000000000000000000000070b31d52b208322d01314901b14941190da2c1b",
  "constructorArguments": "000000000000000000000000070b31d52b208322d01314901b14941190da2c1b000000000000000000000000070b31d52b208322d01314901b14941190da2c1b000000000000000000000000070b31d52b208322d01314901b14941190da2c1b"
}