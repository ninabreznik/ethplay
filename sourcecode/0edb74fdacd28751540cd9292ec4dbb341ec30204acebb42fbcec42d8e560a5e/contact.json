{
  "address": "0xd3006f35c0286f5485971f935b87f84e72e8e43f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VIPToken",
  "compilerVersion": "v0.4.20-nightly.2017.12.20+commit.efc198d5",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-25\n*/\n\npragma solidity ^0.4.18;\n\ncontract Owner {\n    address public owner;\n    //添加断路器\n    bool public stopped = false;\n\n    function Owner() internal {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n       require (msg.sender == owner);\n       _;\n    }\n\n    function transferOwnership(address newOwner) external onlyOwner {\n        require (newOwner != 0x0);\n        require (newOwner != owner);\n        OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n    }\n\n    function toggleContractActive() onlyOwner public {\n        //可以预置改变状态的条件，如基于投票人数\n        stopped = !stopped;\n    }\n\n    modifier stopInEmergency {\n        require(stopped == false);\n        _;\n    }\n\n    modifier onlyInEmergency {\n        require(stopped == true);\n        _;\n    }\n\n    event OwnerUpdate(address _prevOwner, address _newOwner);\n}\n\ncontract Mortal is Owner {\n    //销毁合约\n    function close() external onlyOwner {\n        selfdestruct(owner);\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Token is Owner, Mortal {\n    using SafeMath for uint256;\n\n    string public name; //代币名称\n    string public symbol; //代币符号\n    uint8 public decimals; //显示多少小数点\n    uint256 public totalSupply; //总供应量\n\n    //冻结的基金,解锁的数量根据时间动态计算出来\n    struct Fund{\n        uint amount;            //总冻结数量，固定值\n\n        uint unlockStartTime;   //从什么时候开始解锁\n        uint unlockInterval;    //每次解锁的周期，单位 秒\n        uint unlockPercent;     //每次解锁的百分比 50 为50%\n\n        bool isValue; // exist value\n    }\n\n    //所有的账户数据\n    mapping (address => uint) public balances;\n    //代理\n    mapping(address => mapping(address => uint)) approved;\n\n    //所有的账户冻结数据，时间，到期自动解冻，同时只支持一次冻结\n    mapping (address => Fund) public frozenAccount;\n\n    //事件日志\n    event Transfer(address indexed from, address indexed to, uint value);\n    event FrozenFunds(address indexed target, uint value, uint unlockStartTime, uint unlockIntervalUnit, uint unlockInterval, uint unlockPercent);\n    event Approval(address indexed accountOwner, address indexed spender, uint256 value);\n\n    /**\n    *\n    * Fix for the ERC20 short address attack\n    *\n    * http://vessenes.com/the-erc20-short-address-attack-explained/\n    */\n    modifier onlyPayloadSize(uint256 size) {\n        require(msg.data.length == size + 4);\n        _;\n    }\n\n    //冻结固定时间\n    function freezeAccount(address target, uint value, uint unlockStartTime, uint unlockIntervalUnit, uint unlockInterval, uint unlockPercent) external onlyOwner freezeOutCheck(target, 0) {\n        require (value > 0);\n        require (frozenAccount[target].isValue == false);\n        require (balances[msg.sender] >= value);\n        require (unlockStartTime > now);\n        require (unlockInterval > 0);\n        require (unlockPercent > 0 && unlockPercent <= 100);\n\n        uint unlockIntervalSecond = toSecond(unlockIntervalUnit, unlockInterval);\n\n        frozenAccount[target] = Fund(value, unlockStartTime, unlockIntervalSecond, unlockPercent, true);\n        FrozenFunds(target, value, unlockStartTime, unlockIntervalUnit, unlockInterval, unlockPercent);\n    }\n\n    //转账并冻结\n    function transferAndFreeze(address target, uint256 value, uint unlockStartTime, uint unlockIntervalUnit, uint unlockInterval, uint unlockPercent) external onlyOwner freezeOutCheck(target, 0) {\n        require (value > 0);\n        require (frozenAccount[target].isValue == false);\n        require (unlockStartTime > now);\n        require (unlockInterval > 0);\n        require (unlockPercent > 0 && unlockPercent <= 100);\n\n        _transfer(msg.sender, target, value);\n\n        uint unlockIntervalSecond = toSecond(unlockIntervalUnit, unlockInterval);\n        frozenAccount[target] = Fund(value, unlockStartTime, unlockIntervalSecond, unlockPercent, true);\n        FrozenFunds(target, value, unlockStartTime, unlockIntervalUnit, unlockInterval, unlockPercent);\n    }\n\n    //转换单位时间到秒\n    function toSecond(uint unitType, uint value) internal pure returns (uint256 Seconds) {\n        uint _seconds;\n        if (unitType == 5){\n            _seconds = value.mul(1 years);\n        }else if(unitType == 4){\n            _seconds = value.mul(1 days);\n        }else if (unitType == 3){\n            _seconds = value.mul(1 hours);\n        }else if (unitType == 2){\n            _seconds = value.mul(1 minutes);\n        }else if (unitType == 1){\n            _seconds = value;\n        }else{\n            revert();\n        }\n        return _seconds;\n    }\n\n    modifier freezeOutCheck(address sender, uint value) {\n        require ( getAvailableBalance(sender) >= value);\n        _;\n    }\n\n    //计算可用余额 去除冻结部分\n    function getAvailableBalance(address sender) internal returns(uint balance) {\n        if (frozenAccount[sender].isValue) {\n            //未开始解锁\n            if (now < frozenAccount[sender].unlockStartTime){\n                return balances[sender] - frozenAccount[sender].amount;\n            }else{\n                //计算解锁了多少数量\n                uint unlockPercent = ((now - frozenAccount[sender].unlockStartTime ) / frozenAccount[sender].unlockInterval + 1) * frozenAccount[sender].unlockPercent;\n                if (unlockPercent > 100){\n                    unlockPercent = 100;\n                }\n\n                //计算可用余额 = 总额 - 冻结总额\n                assert(frozenAccount[sender].amount <= balances[sender]);\n                uint available = balances[sender] - (100 - unlockPercent) * frozenAccount[sender].amount / 100;\n                if ( unlockPercent >= 100){\n                    //release\n                    frozenAccount[sender].isValue = false;\n                    delete frozenAccount[sender];\n                }\n\n                return available;\n            }\n        }\n        return balances[sender];\n    }\n\n    function balanceOf(address sender) constant external returns (uint256 balance){\n        return balances[sender];\n    }\n\n    /* 代币转移的函数 */\n    function transfer(address to, uint256 value) external stopInEmergency onlyPayloadSize(2 * 32) {\n        _transfer(msg.sender, to, value);\n    }\n\n    function _transfer(address _from, address _to, uint _value) internal freezeOutCheck(_from, _value) {\n        require(_to != 0x0);\n        require(_from != _to);\n        require(_value > 0);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        Transfer(_from, _to, _value);\n    }\n\n    //设置代理交易\n    //允许spender多次取出您的帐户，最高达value金额。value可以设置超过账户余额\n    function approve(address spender, uint value) external returns (bool success) {\n        approved[msg.sender][spender] = value;\n        Approval(msg.sender, spender, value);\n\n        return true;\n    }\n\n    //返回spender仍然被允许从accountOwner提取的金额\n    function allowance(address accountOwner, address spender) constant external returns (uint remaining) {\n        return approved[accountOwner][spender];\n    }\n\n    //使用代理交易\n    //0值的传输必须被视为正常传输并触发传输事件\n    //代理交易不自动为对方补充gas\n    function transferFrom(address from, address to, uint256 value) external stopInEmergency freezeOutCheck(from, value)  returns (bool success) {\n        require(value > 0);\n        require(value <= approved[from][msg.sender]);\n        require(value <= balances[from]);\n\n        approved[from][msg.sender] = approved[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        return true;\n    }\n}\n\ncontract MigrationAgent {\n  function migrateFrom(address from, uint256 value) public;\n}\n\ncontract UpgradeableToken is Owner, Token {\n  address public migrationAgent;\n\n  /**\n   * Somebody has upgraded some of his tokens.\n   */\n  event Upgrade(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * New upgrade agent available.\n   */\n  event UpgradeAgentSet(address agent);\n\n  // Migrate tokens to the new token contract\n  function migrate() public {\n    require(migrationAgent != 0);\n    uint value = balances[msg.sender];\n    balances[msg.sender] = balances[msg.sender].sub(value);\n    totalSupply = totalSupply.sub(value);\n    MigrationAgent(migrationAgent).migrateFrom(msg.sender, value);\n    Upgrade(msg.sender, migrationAgent, value);\n  }\n\n  function () public payable {\n    require(migrationAgent != 0);\n    require(balances[msg.sender] > 0);\n    migrate();\n    msg.sender.transfer(msg.value);\n  }\n\n  function setMigrationAgent(address _agent) onlyOwner external {\n    migrationAgent = _agent;\n    UpgradeAgentSet(_agent);\n  }\n}\n\ncontract VIPToken is UpgradeableToken {\n\n  function VIPToken() public {\n    name = \"VIP Tokens\";\n    symbol = \"VIP\";\n    decimals = 18;\n\n    owner = msg.sender;\n    uint initialSupply = 300000000;\n\n    totalSupply = initialSupply * 10 ** uint256(decimals);\n    require (totalSupply >= initialSupply);\n\n    balances[msg.sender] = totalSupply;\n    Transfer(0x0, msg.sender, totalSupply);\n  }\n}",
  "bytecode": "60606040526000805460a060020a60ff021916905534156200002057600080fd5b60008054600160a060020a03191633600160a060020a031617815560408051908101604052600a81527f56495020546f6b656e7300000000000000000000000000000000000000000000602082015260019080516200008492916020019062000179565b5060408051908101604052600381527f564950000000000000000000000000000000000000000000000000000000000060208201526002908051620000ce92916020019062000179565b50506003805460ff19166012179081905560008054600160a060020a033316600160a060020a031990911617905560ff16600a0a6311e1a3009081026004819055819010156200011d57600080fd5b600454600160a060020a033316600081815260056020526040808220849055919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91905190815260200160405180910390a3506200021e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001bc57805160ff1916838001178555620001ec565b82800160010185558215620001ec579182015b82811115620001ec578251825591602001919060010190620001cf565b50620001fa929150620001fe565b5090565b6200021b91905b80821115620001fa576000815560010162000205565b90565b61115c806200022e6000396000f30060606040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610192578063095ea7b31461021c5780631385d24c1461025257806318160ddd1461026557806323b872dd1461028a57806327e235e3146102b2578063313ce567146102d157806343d726d6146102fa57806370a082311461030d57806375e2ff651461032c57806375f12b211461034b5780638328dbcd1461035e5780638da5cb5b1461038d5780638fd3ab80146103a057806391e1cc5a146103b357806395d89b41146103e1578063a9059cbb146103f4578063b414d4b614610416578063ca2748bd14610466578063dd62ed3e14610494578063f2fde38b146104b9575b600854600160a060020a0316151561013357600080fd5b600160a060020a0333166000908152600560205260408120541161015657600080fd5b61015e6104d8565b600160a060020a0333163480156108fc0290604051600060405180830381858888f19350505050151561019057600080fd5b005b341561019d57600080fd5b6101a5610615565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101e15780820151838201526020016101c9565b50505050905090810190601f16801561020e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561022757600080fd5b61023e600160a060020a03600435166024356106b3565b604051901515815260200160405180910390f35b341561025d57600080fd5b61019061071f565b341561027057600080fd5b61027861076c565b60405190815260200160405180910390f35b341561029557600080fd5b61023e600160a060020a0360043581169060243516604435610772565b34156102bd57600080fd5b610278600160a060020a036004351661087b565b34156102dc57600080fd5b6102e461088d565b60405160ff909116815260200160405180910390f35b341561030557600080fd5b610190610896565b341561031857600080fd5b610278600160a060020a03600435166108bf565b341561033757600080fd5b610190600160a060020a03600435166108da565b341561035657600080fd5b61023e61095d565b341561036957600080fd5b61037161096d565b604051600160a060020a03909116815260200160405180910390f35b341561039857600080fd5b61037161097c565b34156103ab57600080fd5b6101906104d8565b34156103be57600080fd5b610190600160a060020a036004351660243560443560643560843560a43561098b565b34156103ec57600080fd5b6101a5610b46565b34156103ff57600080fd5b610190600160a060020a0360043516602435610bb1565b341561042157600080fd5b610435600160a060020a0360043516610be7565b60405194855260208501939093526040808501929092526060840152901515608083015260a0909101905180910390f35b341561047157600080fd5b610190600160a060020a036004351660243560443560643560843560a435610c19565b341561049f57600080fd5b610278600160a060020a0360043581169060243516610cc3565b34156104c457600080fd5b610190600160a060020a0360043516610cee565b600854600090600160a060020a031615156104f257600080fd5b50600160a060020a03331660009081526005602052604090205461051c818063ffffffff610dba16565b600160a060020a033316600090815260056020526040902055600454610548908263ffffffff610dba16565b600455600854600160a060020a0316637a3130e333836040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b15156105ba57600080fd5b6102c65a03f115156105cb57600080fd5b5050600854600160a060020a03908116915033167f7e5c344a8141a805725cb476f76c6953b842222b967edd1f78ddb6e8b3f397ac8360405190815260200160405180910390a350565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106ab5780601f10610680576101008083540402835291602001916106ab565b820191906000526020600020905b81548152906001019060200180831161068e57829003601f168201915b505050505081565b600160a060020a03338116600081815260066020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005433600160a060020a0390811691161461073a57600080fd5b6000805474ff000000000000000000000000000000000000000019811660a060020a9182900460ff1615909102179055565b60045481565b6000805460a060020a900460ff161561078a57600080fd5b83828061079683610dcc565b10156107a157600080fd5b600084116107ae57600080fd5b600160a060020a03808716600090815260066020908152604080832033909416835292905220548411156107e157600080fd5b600160a060020a03861660009081526005602052604090205484111561080657600080fd5b600160a060020a038087166000908152600660209081526040808320339094168352929052205461083d908563ffffffff610dba16565b600160a060020a038088166000908152600660209081526040808320339094168352929052205561086f868686610f5b565b50600195945050505050565b60056020526000908152604090205481565b60035460ff1681565b60005433600160a060020a039081169116146108b157600080fd5b600054600160a060020a0316ff5b600160a060020a031660009081526005602052604090205490565b60005433600160a060020a039081169116146108f557600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790557f7845d5aa74cc410e35571258d954f23b82276e160fe8c188fa80566580f279cc81604051600160a060020a03909116815260200160405180910390a150565b60005460a060020a900460ff1681565b600854600160a060020a031681565b600054600160a060020a031681565b6000805433600160a060020a039081169116146109a757600080fd5b866000806109b483610dcc565b10156109bf57600080fd5b600088116109cc57600080fd5b600160a060020a03891660009081526007602052604090206004015460ff16156109f557600080fd5b600160a060020a03331660009081526005602052604090205488901015610a1b57600080fd5b428711610a2757600080fd5b60008511610a3457600080fd5b600084118015610a45575060648411155b1515610a5057600080fd5b610a5a8686611069565b925060a0604051908101604090815289825260208083018a90528183018690526060830187905260016080840152600160a060020a038c166000908152600790915220815181556020820151816001015560408201518160020155606082015181600301556080820151600491909101805460ff191691151591909117905550600160a060020a0389167f05f5c0f3cb75bf43dcb2ef0c74fd5aa4debe5de724cb1f1803d73d71ea25957a8989898989604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390a2505050505050505050565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106ab5780601f10610680576101008083540402835291602001916106ab565b60005460a060020a900460ff1615610bc857600080fd5b604036604414610bd757600080fd5b610be2338484610f5b565b505050565b600760205260009081526040902080546001820154600283015460038401546004909401549293919290919060ff1685565b6000805433600160a060020a03908116911614610c3557600080fd5b86600080610c4283610dcc565b1015610c4d57600080fd5b60008811610c5a57600080fd5b600160a060020a03891660009081526007602052604090206004015460ff1615610c8357600080fd5b428711610c8f57600080fd5b60008511610c9c57600080fd5b600084118015610cad575060648411155b1515610cb857600080fd5b610a50338a8a610f5b565b600160a060020a03918216600090815260066020908152604080832093909416825291909152205490565b60005433600160a060020a03908116911614610d0957600080fd5b600160a060020a0381161515610d1e57600080fd5b600054600160a060020a0382811691161415610d3957600080fd5b6000547f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a90600160a060020a031682604051600160a060020a039283168152911660208201526040908101905180910390a16000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610dc657fe5b50900390565b600160a060020a0381166000908152600760205260408120600401548190819060ff1615610f3857600160a060020a038416600090815260076020526040902060010154421015610e4457600160a060020a038416600090815260076020908152604080832054600590925290912054039250610f54565b600160a060020a0384166000908152600760205260409020600381015460028201546001909201549091904203811515610e7a57fe5b046001010291506064821115610e8f57606491505b600160a060020a0384166000908152600560209081526040808320546007909252909120541115610ebc57fe5b50600160a060020a03831660009081526007602090815260408083205460059092529091205460648381039092028290049003908210610f3057600160a060020a038416600090815260076020526040812060048101805460ff191690558181556001810182905560028101829055600301555b809250610f54565b600160a060020a03841660009081526005602052604090205492505b5050919050565b828180610f6783610dcc565b1015610f7257600080fd5b600160a060020a0384161515610f8757600080fd5b600160a060020a038581169085161415610fa057600080fd5b60008311610fad57600080fd5b600160a060020a038516600090815260056020526040902054610fd6908463ffffffff610dba16565b600160a060020a03808716600090815260056020526040808220939093559086168152205461100b908463ffffffff6110fd16565b600160a060020a03808616600081815260056020526040908190209390935591908716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a35050505050565b600080836005141561109057611089836301e1338063ffffffff61110c16565b90506110f6565b83600414156110ac57611089836201518063ffffffff61110c16565b83600314156110c75761108983610e1063ffffffff61110c16565b83600214156110e15761108983603c63ffffffff61110c16565b83600114156110f15750816110f6565b600080fd5b9392505050565b6000828201838110156110f657fe5b6000828202831580611128575082848281151561112557fe5b04145b15156110f657fe00a165627a7a72305820e197b727aaee90ec27a0fbad77f518072c72ec2432579715f568d646c3ef0d3e0029"
}