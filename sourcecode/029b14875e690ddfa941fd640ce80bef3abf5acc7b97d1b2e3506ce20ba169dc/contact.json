{
  "address": "0x688ead4d12cec85330de5993849ab039e1d48650",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AvatarNameRegistry",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-29\n*/\n\n// File: zos-lib/contracts/Initializable.sol\n\npragma solidity >=0.4.24 <0.6.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool wasInitializing = initializing;\n    initializing = true;\n    initialized = true;\n\n    _;\n\n    initializing = wasInitializing;\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    uint256 cs;\n    assembly { cs := extcodesize(address) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: contracts/AvatarNameStorage.sol\n\npragma solidity ^0.5.0;\n\ncontract ERC20Interface {\n    function balanceOf(address from) public view returns (uint256);\n    function transferFrom(address from, address to, uint tokens) public returns (bool);\n    function allowance(address owner, address spender) public view returns (uint256);\n    function burn(uint256 amount) public;\n}\n\ncontract AvatarNameStorage {\n    // Storage\n    ERC20Interface public manaToken;\n    uint256 public blocksUntilReveal;\n    uint256 public price;\n\n    struct Data {\n        string username;\n        string metadata;\n    }\n    struct Commit {\n        bytes32 commit;\n        uint256 blockNumber;\n        bool revealed;\n    }\n\n    // Stores commit messages by accounts\n    mapping (address => Commit) public commit;\n    // Stores usernames used\n    mapping (string => address) usernames;\n    // Stores account data\n    mapping (address => Data) public user;\n    // Stores account roles\n    mapping (address => bool) public allowed;\n\n    // Events\n    event Register(\n        address indexed _owner,\n        string _username,\n        string _metadata,\n        address indexed _caller\n    );\n    event MetadataChanged(address indexed _owner, string _metadata);\n    event Allow(address indexed _caller, address indexed _account, bool _allowed);\n    event CommitUsername(address indexed _owner, bytes32 indexed _hash, uint256 _blockNumber);\n    event RevealUsername(address indexed _owner, bytes32 indexed _hash, uint256 _blockNumber);\n}\n\n// File: contracts/AvatarNameRegistry.sol\n\npragma solidity ^0.5.0;\n\n\n\n\ncontract AvatarNameRegistry is Initializable, AvatarNameStorage {\n\n    /**\n    * @dev Initializer of the contract\n    * @param _mana - address of the mana token\n    * @param _register - address of the user allowed to register usernames and assign the role\n    * @param _blocksUntilReveal - uint256 for the blocks that should pass before reveal a commit\n    */\n    function initialize(\n        ERC20Interface _mana,\n        address _register,\n        uint256 _blocksUntilReveal\n    )\n    public initializer\n    {\n        require(_blocksUntilReveal != 0, \"Blocks until reveal should be greather than 0\");\n\n\n        manaToken = _mana;\n        blocksUntilReveal = _blocksUntilReveal;\n        price = 100000000000000000000; // 100 in wei\n\n        // Allow deployer to register usernames\n        allowed[_register] = true;\n    }\n\n    /**\n    * @dev Check if the sender is an allowed account\n    */\n    modifier onlyAllowed() {\n        require(\n            allowed[msg.sender] == true,\n            \"The sender is not allowed to register a username\"\n        );\n        _;\n    }\n\n    /**\n    * @dev Manage role for an account\n    * @param _account - address of the account to be managed\n    * @param _allowed - bool whether the account should be allowed or not\n    */\n    function setAllowed(address _account, bool _allowed) external onlyAllowed {\n        require(_account != msg.sender, \"You can not manage your role\");\n        allowed[_account] = _allowed;\n        emit Allow(msg.sender, _account, _allowed);\n    }\n\n    /**\n    * @dev Register a usename\n    * @notice that the username should be less than or equal 32 bytes and blanks are not allowed\n    * @param _beneficiary - address of the account to be managed\n    * @param _username - string for the username\n    * @param _metadata - string for the metadata\n    */\n    function _registerUsername(\n        address _beneficiary,\n        string memory _username,\n        string memory _metadata\n    )\n    internal\n    {\n        _requireUsernameValid(_username);\n        require(isUsernameAvailable(_username), \"The username was already taken\");\n\n        // Save username\n        usernames[_username] = _beneficiary;\n\n        Data storage data = user[_beneficiary];\n\n        // Free previous username\n        delete usernames[data.username];\n\n        // Set data\n        data.username = _username;\n\n        bytes memory metadata = bytes(_metadata);\n        if (metadata.length > 0) {\n            data.metadata = _metadata;\n        }\n\n        emit Register(\n            _beneficiary,\n            _username,\n            data.metadata,\n            msg.sender\n        );\n    }\n\n    /**\n    * @dev Register a usename\n    * @notice that the username can only be registered by an allowed account\n    * @param _beneficiary - address of the account to be managed\n    * @param _username - string for the username\n    * @param _metadata - string for the metadata\n    */\n    function registerUsername(\n        address _beneficiary,\n        string calldata _username,\n        string calldata _metadata\n    )\n    external\n    onlyAllowed\n    {\n        _registerUsername(_beneficiary, _username, _metadata);\n    }\n\n    /**\n    * @dev Commit a hash for a desire username\n    * @notice that the reveal should happen after the blocks defined on {blocksUntilReveal}\n    * @param _hash - bytes32 of the commit hash\n    */\n    function commitUsername(bytes32 _hash) public {\n        commit[msg.sender].commit = _hash;\n        commit[msg.sender].blockNumber = block.number;\n        commit[msg.sender].revealed = false;\n\n        emit CommitUsername(msg.sender, _hash, block.number);\n    }\n\n    /**\n    * @dev Reveal a commit\n    * @notice that the reveal should happen after the blocks defined on {blocksUntilReveal}\n    * @param _username - string for the username\n    * @param _metadata - string for the metadata\n    * @param _salt - bytes32 for the salt\n    */\n    function revealUsername(\n        string memory _username,\n        string memory _metadata,\n        bytes32 _salt\n    )\n    public\n    {\n        Commit storage userCommit = commit[msg.sender];\n\n        require(userCommit.commit != 0, \"User has not a commit to be revealed\");\n        require(userCommit.revealed == false, \"Commit was already revealed\");\n        require(\n            getHash(_username, _metadata, _salt) == userCommit.commit,\n            \"Revealed hash does not match commit\"\n        );\n        require(\n            block.number > userCommit.blockNumber + blocksUntilReveal,\n            \"Reveal can not be done before blocks passed\"\n        );\n\n        userCommit.revealed = true;\n\n        emit RevealUsername(msg.sender, userCommit.commit, block.number);\n\n        _registerUsername(msg.sender, _username, _metadata);\n    }\n\n    /**\n    * @dev Return a bytes32 hash for the given arguments\n    * @param _username - string for the username\n    * @param _metadata - string for the metadata\n    * @param _salt - bytes32 for the salt\n    * @return bytes32 - for the hash of the given arguments\n    */\n    function getHash(\n        string memory _username,\n        string memory _metadata,\n        bytes32 _salt\n    )\n    public\n    view\n    returns (bytes32)\n    {\n        return keccak256(\n            abi.encodePacked(address(this), _username, _metadata, _salt)\n        );\n    }\n\n    /**\n    * @dev Set metadata for an existing user\n    * @param _metadata - string for the metadata\n    */\n    function setMetadata(string calldata _metadata) external {\n        require(userExists(msg.sender), \"The user does not exist\");\n\n        user[msg.sender].metadata = _metadata;\n        emit MetadataChanged(msg.sender, _metadata);\n    }\n\n    /**\n    * @dev Check whether a user exist or not\n    * @param _user - address for the user\n    * @return bool - whether the user exist or not\n    */\n    function userExists(address _user) public view returns (bool) {\n        Data memory data = user[_user];\n        bytes memory username = bytes(data.username);\n        return username.length > 0;\n    }\n\n    /**\n    * @dev Check whether a username is available or not\n    * @param _username - string for the username\n    * @return bool - whether the username is available or not\n    */\n    function isUsernameAvailable(string memory _username) public view returns (bool) {\n        return usernames[_username] == address(0);\n    }\n\n    /**\n    * @dev Validate a username\n    * @param _username - string for the username\n    */\n    function _requireUsernameValid(string memory _username) internal pure {\n        bytes memory tempUsername = bytes(_username);\n        require(tempUsername.length <= 32, \"Username should be less than or equal 32 characters\");\n        for(uint256 i = 0; i < tempUsername.length; i++) {\n            require(tempUsername[i] != \" \", \"No blanks are allowed\");\n        }\n    }\n\n    /**\n    * @dev Validate if a user has balance and the contract has enough allowance\n    * to use user MANA on his belhalf\n    * @param _user - address of the user\n    */\n    function _requireBalance(address _user) internal view {\n        require(\n            manaToken.balanceOf(_user) >= price,\n            \"Insufficient funds\"\n        );\n        require(\n            manaToken.allowance(_user, address(this)) >= price,\n            \"The contract is not authorized to use MANA on sender behalf\"\n        );\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mana\",\"type\":\"address\"},{\"name\":\"_register\",\"type\":\"address\"},{\"name\":\"_blocksUntilReveal\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksUntilReveal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"commit\",\"outputs\":[{\"name\":\"commit\",\"type\":\"bytes32\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"revealed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_metadata\",\"type\":\"string\"},{\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"getHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"commitUsername\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manaToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"metadata\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"registerUsername\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"setMetadata\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_metadata\",\"type\":\"string\"},{\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"revealUsername\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"isUsernameAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_username\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_metadata\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"MetadataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"Allow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"CommitUsername\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"RevealUsername\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50612302806100206000396000f3fe6080604052600436106100d5576000357c0100000000000000000000000000000000000000000000000000000000900480630e666e49146100da5780631794bb3c1461014357806335a55b27146101be578063369e8c1d146101e957806340796ce4146102605780634697f05d146103dd578063482919481461043a57806374c97c991461047557806381e7e20e146104cc57806388dd45ba14610602578063a035b1fe146106fd578063a49a1e7d14610728578063bf785dea146107ae578063d63a8e1114610917578063f69c6dec14610980575b600080fd5b3480156100e657600080fd5b50610129600480360360208110156100fd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a60565b604051808215151515815260200191505060405180910390f35b34801561014f57600080fd5b506101bc6004803603606081101561016657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c11565b005b3480156101ca57600080fd5b506101d3610e98565b6040518082815260200191505060405180910390f35b3480156101f557600080fd5b506102386004803603602081101561020c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e9e565b6040518084815260200183815260200182151515158152602001935050505060405180910390f35b34801561026c57600080fd5b506103c76004803603606081101561028357600080fd5b81019080803590602001906401000000008111156102a057600080fd5b8201836020820111156102b257600080fd5b803590602001918460018302840111640100000000831117156102d457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561033757600080fd5b82018360208201111561034957600080fd5b8035906020019184600183028401116401000000008311171561036b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610ed5565b6040518082815260200191505060405180910390f35b3480156103e957600080fd5b506104386004803603604081101561040057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610ff4565b005b34801561044657600080fd5b506104736004803603602081101561045d57600080fd5b810190808035906020019092919050505061124a565b005b34801561048157600080fd5b5061048a611385565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104d857600080fd5b5061051b600480360360208110156104ef57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113ab565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561055f578082015181840152602081019050610544565b50505050905090810190601f16801561058c5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156105c55780820151818401526020810190506105aa565b50505050905090810190601f1680156105f25780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561060e57600080fd5b506106fb6004803603606081101561062557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561066257600080fd5b82018360208201111561067457600080fd5b8035906020019184600183028401116401000000008311171561069657600080fd5b9091929391929390803590602001906401000000008111156106b757600080fd5b8201836020820111156106c957600080fd5b803590602001918460018302840111640100000000831117156106eb57600080fd5b90919293919293905050506114ff565b005b34801561070957600080fd5b50610712611687565b6040518082815260200191505060405180910390f35b34801561073457600080fd5b506107ac6004803603602081101561074b57600080fd5b810190808035906020019064010000000081111561076857600080fd5b82018360208201111561077a57600080fd5b8035906020019184600183028401116401000000008311171561079c57600080fd5b909192939192939050505061168d565b005b3480156107ba57600080fd5b50610915600480360360608110156107d157600080fd5b81019080803590602001906401000000008111156107ee57600080fd5b82018360208201111561080057600080fd5b8035906020019184600183028401116401000000008311171561082257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561088557600080fd5b82018360208201111561089757600080fd5b803590602001918460018302840111640100000000831117156108b957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506117da565b005b34801561092357600080fd5b506109666004803603602081101561093a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b21565b604051808215151515815260200191505060405180910390f35b34801561098c57600080fd5b50610a46600480360360208110156109a357600080fd5b81019080803590602001906401000000008111156109c057600080fd5b8201836020820111156109d257600080fd5b803590602001918460018302840111640100000000831117156109f457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611b41565b604051808215151515815260200191505060405180910390f35b6000610a6a612197565b603860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604080519081016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b4d5780601f10610b2257610100808354040283529160200191610b4d565b820191906000526020600020905b815481529060010190602001808311610b3057829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bef5780601f10610bc457610100808354040283529160200191610bef565b820191906000526020600020905b815481529060010190602001808311610bd257829003601f168201915b5050505050815250509050606081600001519050600081511192505050919050565b600060019054906101000a900460ff1680610c305750610c2f611c04565b5b80610c4757506000809054906101000a900460ff16155b1515610ce1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f436f6e747261637420696e7374616e63652068617320616c726561647920626581526020017f656e20696e697469616c697a656400000000000000000000000000000000000081525060400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff02191690831515021790555060008214151515610dc8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f426c6f636b7320756e74696c2072657665616c2073686f756c6420626520677281526020017f656174686572207468616e20300000000000000000000000000000000000000081525060400191505060405180910390fd5b83603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160348190555068056bc75e2d631000006035819055506001603960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080600060016101000a81548160ff02191690831515021790555050505050565b60345481565b60366020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900460ff16905083565b600030848484604051602001808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140184805190602001908083835b602083101515610f545780518252602082019150602081019050602083039250610f2f565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083101515610fa75780518252602082019150602081019050602083039250610f82565b6001836020036101000a0380198251168184511680821785525050505050509050018281526020019450505050506040516020818303038152906040528051906020012090509392505050565b60011515603960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156110e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f5468652073656e646572206973206e6f7420616c6c6f77656420746f2072656781526020017f6973746572206120757365726e616d650000000000000000000000000000000081525060400191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f596f752063616e206e6f74206d616e61676520796f757220726f6c650000000081525060200191505060405180910390fd5b80603960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f3f8c96c03a6584cf3cd46585f8fbd566115fd879ec0b0363da69f9595a72347683604051808215151515815260200191505060405180910390a35050565b80603660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555043603660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506000603660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff021916908315150217905550803373ffffffffffffffffffffffffffffffffffffffff167fe677c521d1a61b29afbb9810bef1864cee9013d1dd5aa755f13e74c0de8ec466436040518082815260200191505060405180910390a350565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6038602052806000526040600020600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114575780601f1061142c57610100808354040283529160200191611457565b820191906000526020600020905b81548152906001019060200180831161143a57829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114f55780601f106114ca576101008083540402835291602001916114f5565b820191906000526020600020905b8154815290600101906020018083116114d857829003601f168201915b5050505050905082565b60011515603960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156115ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f5468652073656e646572206973206e6f7420616c6c6f77656420746f2072656781526020017f6973746572206120757365726e616d650000000000000000000000000000000081525060400191505060405180910390fd5b6116808585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611c15565b5050505050565b60355481565b61169633610a60565b151561170a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f546865207573657220646f6573206e6f7420657869737400000000000000000081525060200191505060405180910390fd5b8181603860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101919061175b9291906121b1565b503373ffffffffffffffffffffffffffffffffffffffff167fd6c2dec04e066cf016fee75889cec067f59fc4f82aa9347447e4afaca3a0748f838360405180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060405180910390a25050565b6000603660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060006001028160000154141515156118c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f5573657220686173206e6f74206120636f6d6d697420746f206265207265766581526020017f616c65640000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600015158160020160009054906101000a900460ff161515141515611950576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f436f6d6d69742077617320616c72656164792072657665616c6564000000000081525060200191505060405180910390fd5b8060000154611960858585610ed5565b1415156119fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f52657665616c6564206861736820646f6573206e6f74206d6174636820636f6d81526020017f6d6974000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60345481600101540143111515611aa0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001807f52657665616c2063616e206e6f7420626520646f6e65206265666f726520626c81526020017f6f636b732070617373656400000000000000000000000000000000000000000081525060400191505060405180910390fd5b60018160020160006101000a81548160ff02191690831515021790555080600001543373ffffffffffffffffffffffffffffffffffffffff167f5486c3748d8d1373dbb5b9d80ead3a0aaed7504860abd10316fedc9def36a448436040518082815260200191505060405180910390a3611b1b338585611c15565b50505050565b60396020528060005260406000206000915054906101000a900460ff1681565b60008073ffffffffffffffffffffffffffffffffffffffff166037836040518082805190602001908083835b602083101515611b925780518252602082019150602081019050602083039250611b6d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b600080303b90506000811491505090565b611c1e82611fbf565b611c2782611b41565b1515611c9b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f54686520757365726e616d652077617320616c72656164792074616b656e000081525060200191505060405180910390fd5b826037836040518082805190602001908083835b602083101515611cd45780518252602082019150602081019050602083039250611caf565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000603860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506037816000016040518082805460018160011615610100020316600290048015611de95780601f10611dc7576101008083540402835291820191611de9565b820191906000526020600020905b815481529060010190602001808311611dd5575b5050915050908152602001604051809103902060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905582816000019080519060200190611e37929190612231565b506060829050600081511115611e615782826001019080519060200190611e5f929190612231565b505b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f18baae3be22d8ffd3907fcc6eebc24bfce8ce9d86e690c51e12b76b8ccb02d278685600101604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015611ef9578082015181840152602081019050611ede565b50505050905090810190601f168015611f265780820380516001836020036101000a031916815260200191505b50838103825284818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015611fa85780601f10611f7d57610100808354040283529160200191611fa8565b820191906000526020600020905b815481529060010190602001808311611f8b57829003601f168201915b505094505050505060405180910390a35050505050565b60608190506020815111151515612064576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001807f557365726e616d652073686f756c64206265206c657373207468616e206f722081526020017f657175616c20333220636861726163746572730000000000000000000000000081525060400191505060405180910390fd5b60008090505b8151811015612192577f200000000000000000000000000000000000000000000000000000000000000082828151811015156120a257fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614151515612185576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4e6f20626c616e6b732061726520616c6c6f776564000000000000000000000081525060200191505060405180910390fd5b808060010191505061206a565b505050565b604080519081016040528060608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106121f257803560ff1916838001178555612220565b82800160010185558215612220579182015b8281111561221f578235825591602001919060010190612204565b5b50905061222d91906122b1565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061227257805160ff19168380011785556122a0565b828001600101855582156122a0579182015b8281111561229f578251825591602001919060010190612284565b5b5090506122ad91906122b1565b5090565b6122d391905b808211156122cf5760008160009055506001016122b7565b5090565b9056fea165627a7a723058205e7d61e1463f64ab273c6945fb10aba0b14058d3b4c3ac123638bab74b2fe65d0029"
}