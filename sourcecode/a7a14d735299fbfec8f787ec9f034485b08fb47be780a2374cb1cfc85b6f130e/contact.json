{
  "address": "0xf825251d8d0c4da7ebd83b564b61ff3eb0852384",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Curatoken",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-14\n*/\n\npragma solidity ^0.4.20;\n\n/*\n * Abstract Token Smart Contract.  Copyright © 2017 by ABDK Consulting.\n * Author: Mikhail Vladimirov <[email protected]>\n */\n\n/*\n * EIP-20 Standard Token Smart Contract Interface.\n * Copyright © 2016–2018 by ABDK Consulting.\n * Author: Mikhail Vladimirov <[email protected]>\n */\n\n/**\n * ERC-20 standard token interface, as defined\n * <a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\">here</a>.\n */\ncontract Token {\n  /**\n   * Get total number of tokens in circulation.\n   *\n   * @return total number of tokens in circulation\n   */\n  function totalSupply () public view returns (uint256 supply);\n\n  /**\n   * Get number of tokens currently belonging to given owner.\n   *\n   * @param _owner address to get number of tokens currently belonging to the\n   *        owner of\n   * @return number of tokens currently belonging to the owner of given address\n   */\n  function balanceOf (address _owner) public view returns (uint256 balance);\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer (address _to, uint256 _value)\n  public returns (bool success);\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom (address _from, address _to, uint256 _value)\n  public returns (bool success);\n\n  /**\n   * Allow given spender to transfer given number of tokens from message sender.\n   *\n   * @param _spender address to allow the owner of to transfer tokens from\n   *        message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n  function approve (address _spender, uint256 _value)\n  public returns (bool success);\n\n  /**\n   * Tell how many tokens given spender is currently allowed to transfer from\n   * given owner.\n   *\n   * @param _owner address to get number of tokens allowed to be transferred\n   *        from the owner of\n   * @param _spender address to get number of tokens allowed to be transferred\n   *        by the owner of\n   * @return number of tokens given spender is currently allowed to transfer\n   *         from given owner\n   */\n  function allowance (address _owner, address _spender)\n  public view returns (uint256 remaining);\n\n  /**\n   * Logged when tokens were transferred from one owner to another.\n   *\n   * @param _from address of the owner, tokens were transferred from\n   * @param _to address of the owner, tokens were transferred to\n   * @param _value number of tokens transferred\n   */\n  event Transfer (address indexed _from, address indexed _to, uint256 _value);\n\n  /**\n   * Logged when owner approved his tokens to be transferred by some spender.\n   *\n   * @param _owner owner who approved his tokens to be transferred\n   * @param _spender spender who were allowed to transfer the tokens belonging\n   *        to the owner\n   * @param _value number of tokens belonging to the owner, approved to be\n   *        transferred by the spender\n   */\n  event Approval (\n    address indexed _owner, address indexed _spender, uint256 _value);\n}\n/*\n * Safe Math Smart Contract.  Copyright © 2016–2017 by ABDK Consulting.\n * Author: Mikhail Vladimirov <[email protected]>\n */\npragma solidity ^0.4.20;\n\n/**\n * Provides methods to safely add, subtract and multiply uint256 numbers.\n */\ncontract SafeMath {\n  uint256 constant private MAX_UINT256 =\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n  /**\n   * Add two uint256 values, throw in case of overflow.\n   *\n   * @param x first value to add\n   * @param y second value to add\n   * @return x + y\n   */\n  function safeAdd (uint256 x, uint256 y)\n  pure internal\n  returns (uint256 z) {\n    assert (x <= MAX_UINT256 - y);\n    return x + y;\n  }\n\n  /**\n   * Subtract one uint256 value from another, throw in case of underflow.\n   *\n   * @param x value to subtract from\n   * @param y value to subtract\n   * @return x - y\n   */\n  function safeSub (uint256 x, uint256 y)\n  pure internal\n  returns (uint256 z) {\n    assert (x >= y);\n    return x - y;\n  }\n\n  /**\n   * Multiply two uint256 values, throw in case of overflow.\n   *\n   * @param x first value to multiply\n   * @param y second value to multiply\n   * @return x * y\n   */\n  function safeMul (uint256 x, uint256 y)\n  pure internal\n  returns (uint256 z) {\n    if (y == 0) return 0; // Prevent division by zero at the next line\n    assert (x <= MAX_UINT256 / y);\n    return x * y;\n  }\n}\n\n\n/**\n * Abstract Token Smart Contract that could be used as a base contract for\n * ERC-20 token contracts.\n */\ncontract AbstractToken is Token, SafeMath {\n  /**\n   * Create new Abstract Token contract.\n   */\n  function AbstractToken () public {\n    // Do nothing\n  }\n\n  /**\n   * Get number of tokens currently belonging to given owner.\n   *\n   * @param _owner address to get number of tokens currently belonging to the\n   *        owner of\n   * @return number of tokens currently belonging to the owner of given address\n   */\n  function balanceOf (address _owner) public view returns (uint256 balance) {\n    return accounts [_owner];\n  }\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer (address _to, uint256 _value)\n  public returns (bool success) {\n    uint256 fromBalance = accounts [msg.sender];\n    if (fromBalance < _value) return false;\n    if (_value > 0 && msg.sender != _to) {\n      accounts [msg.sender] = safeSub (fromBalance, _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    Transfer (msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom (address _from, address _to, uint256 _value)\n  public returns (bool success) {\n    uint256 spenderAllowance = allowances [_from][msg.sender];\n    if (spenderAllowance < _value) return false;\n    uint256 fromBalance = accounts [_from];\n    if (fromBalance < _value) return false;\n\n    allowances [_from][msg.sender] =\n      safeSub (spenderAllowance, _value);\n\n    if (_value > 0 && _from != _to) {\n      accounts [_from] = safeSub (fromBalance, _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    Transfer (_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * Allow given spender to transfer given number of tokens from message sender.\n   *\n   * @param _spender address to allow the owner of to transfer tokens from\n   *        message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n  function approve (address _spender, uint256 _value)\n  public returns (bool success) {\n    allowances [msg.sender][_spender] = _value;\n    Approval (msg.sender, _spender, _value);\n\n    return true;\n  }\n\n  /**\n   * Tell how many tokens given spender is currently allowed to transfer from\n   * given owner.\n   *\n   * @param _owner address to get number of tokens allowed to be transferred\n   *        from the owner of\n   * @param _spender address to get number of tokens allowed to be transferred\n   *        by the owner of\n   * @return number of tokens given spender is currently allowed to transfer\n   *         from given owner\n   */\n  function allowance (address _owner, address _spender)\n  public view returns (uint256 remaining) {\n    return allowances [_owner][_spender];\n  }\n\n  /**\n   * Mapping from addresses of token holders to the numbers of tokens belonging\n   * to these token holders.\n   */\n  mapping (address => uint256) internal accounts;\n\n  /**\n   * Mapping from addresses of token holders to the mapping of addresses of\n   * spenders to the allowances set by these token holders to these spenders.\n   */\n  mapping (address => mapping (address => uint256)) internal allowances;\n}\n\n\n/**\n * Curaizon token smart contract.\n */\ncontract Curatoken is AbstractToken {\n  /**\n   * Address of the owner of this smart contract.\n   */\n  address private owner;\n\n  /**\n   * Total number of tokens in circulation.\n   */\n  uint256 tokenCount;\n\n  /**\n   * True if tokens transfers are currently frozen, false otherwise.\n   */\n  bool frozen = false;\n\n  /**\n   * Create new Curaizon token smart contract, with given number of tokens issued\n   * and given to msg.sender, and make msg.sender the owner of this smart\n   * contract.\n   *\n   * @param _tokenCount number of tokens to issue and give to msg.sender\n   */\n  function Curatoken (uint256 _tokenCount) public {\n    owner = msg.sender;\n    tokenCount = _tokenCount;\n    accounts [msg.sender] = _tokenCount;\n  }\n\n  /**\n   * Get total number of tokens in circulation.\n   *\n   * @return total number of tokens in circulation\n   */\n  function totalSupply () public view returns (uint256 supply) {\n    return tokenCount;\n  }\n\n  /**\n   * Get name of this token.\n   *\n   * @return name of this token\n   */\n  function name () public pure returns (string result) {\n    return \"Curatoken\";\n  }\n\n  /**\n   * Get symbol of this token.\n   *\n   * @return symbol of this token\n   */\n  function symbol () public pure returns (string result) {\n    return \"CTKN\";\n  }\n  \n    /**\n   * Get number of decimals for this token.\n   *\n   * @return number of decimals for this token\n   */\n  function decimals () public pure returns (uint8 result) {\n    return 6;\n  }\n\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer (address _to, uint256 _value)\n    public returns (bool success) {\n    if (frozen) return false;\n    else return AbstractToken.transfer (_to, _value);\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom (address _from, address _to, uint256 _value)\n    public returns (bool success) {\n    if (frozen) return false;\n    else return AbstractToken.transferFrom (_from, _to, _value);\n  }\n\n  /**\n   * Change how many tokens given spender is allowed to transfer from message\n   * spender.  In order to prevent double spending of allowance, this method\n   * receives assumed current allowance value as an argument.  If actual\n   * allowance differs from an assumed one, this method just returns false.\n   *\n   * @param _spender address to allow the owner of to transfer tokens from\n   *        message sender\n   * @param _currentValue assumed number of tokens currently allowed to be\n   *        transferred\n   * @param _newValue number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n  function approve (address _spender, uint256 _currentValue, uint256 _newValue)\n    public returns (bool success) {\n    if (allowance (msg.sender, _spender) == _currentValue)\n      return approve (_spender, _newValue);\n    else return false;\n  }\n\n  /**\n   * Set new owner for the smart contract.\n   * May only be called by smart contract owner.\n   *\n   * @param _newOwner address of new owner of the smart contract\n   */\n  function setOwner (address _newOwner) public {\n    require (msg.sender == owner);\n\n    owner = _newOwner;\n  }\n\n  /**\n   * Freeze token transfers.\n   * May only be called by smart contract owner.\n   */\n  function freezeTransfers () public {\n    require (msg.sender == owner);\n\n    if (!frozen) {\n      frozen = true;\n      Freeze ();\n    }\n  }\n\n  /**\n   * Unfreeze token transfers.\n   * May only be called by smart contract owner.\n   */\n  function unfreezeTransfers () public {\n    require (msg.sender == owner);\n\n    if (frozen) {\n      frozen = false;\n      Unfreeze ();\n    }\n  }\n\n  /**\n   * Logged when token transfers were frozen.\n   */\n  event Freeze ();\n\n  /**\n   * Logged when token transfers were unfrozen.\n   */\n  event Unfreeze ();\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"freezeTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreezeTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_currentValue\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526000600460006101000a81548160ff021916908315150217905550341561002a57600080fd5b6040516020806110428339810160405280805190602001909190505033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600381905550806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050610f61806100e16000396000f3006060604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301502460146100ca57806306fdde03146100df578063095ea7b31461016d57806313af4035146101c757806318160ddd1461020057806323b872dd14610229578063313ce567146102a257806331c420d4146102d1578063426a8493146102e657806370a082311461034957806395d89b4114610396578063a9059cbb14610424578063dd62ed3e1461047e575b600080fd5b34156100d557600080fd5b6100dd6104ea565b005b34156100ea57600080fd5b6100f26105a6565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610132578082015181840152602081019050610117565b50505050905090810190601f16801561015f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017857600080fd5b6101ad600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506105e9565b604051808215151515815260200191505060405180910390f35b34156101d257600080fd5b6101fe600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506106db565b005b341561020b57600080fd5b61021361077b565b6040518082815260200191505060405180910390f35b341561023457600080fd5b610288600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610785565b604051808215151515815260200191505060405180910390f35b34156102ad57600080fd5b6102b56107ba565b604051808260ff1660ff16815260200191505060405180910390f35b34156102dc57600080fd5b6102e46107c3565b005b34156102f157600080fd5b61032f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001909190505061087e565b604051808215151515815260200191505060405180910390f35b341561035457600080fd5b610380600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108ae565b6040518082815260200191505060405180910390f35b34156103a157600080fd5b6103a96108f6565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103e95780820151818401526020810190506103ce565b50505050905090810190601f1680156104165780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561042f57600080fd5b610464600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610939565b604051808215151515815260200191505060405180910390f35b341561048957600080fd5b6104d4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061096c565b6040518082815260200191505060405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561054657600080fd5b600460009054906101000a900460ff1615156105a4576001600460006101000a81548160ff0219169083151502179055507f615acbaede366d76a8b8cb2a9ada6a71495f0786513d71aa97aaf0c3910b78de60405160405180910390a15b565b6105ae610f21565b6040805190810160405280600981526020017f43757261746f6b656e0000000000000000000000000000000000000000000000815250905090565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561073757600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600354905090565b6000600460009054906101000a900460ff16156107a557600090506107b3565b6107b08484846109f3565b90505b9392505050565b60006006905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561081f57600080fd5b600460009054906101000a900460ff161561087c576000600460006101000a81548160ff0219169083151502179055507f2f05ba71d0df11bf5fa562a6569d70c4f80da84284badbe015ce1456063d0ded60405160405180910390a15b565b60008261088b338661096c565b14156108a25761089b84836105e9565b90506108a7565b600090505b9392505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6108fe610f21565b6040805190810160405280600481526020017f43544b4e00000000000000000000000000000000000000000000000000000000815250905090565b6000600460009054906101000a900460ff16156109595760009050610966565b6109638383610cef565b90505b92915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915083821015610a885760009250610ce6565b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015610ada5760009250610ce6565b610ae48285610ecd565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600084118015610ba057508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b15610c7c57610baf8185610ecd565b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485610ee6565b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3600192505b50509392505050565b6000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610d445760009150610ec6565b600083118015610d8057508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610e5c57610d8f8184610ecd565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e196000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484610ee6565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505b5092915050565b6000818310151515610edb57fe5b818303905092915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038311151515610f1657fe5b818301905092915050565b6020604051908101604052806000815250905600a165627a7a723058204a0a3ecdd86a84e2b92e6bcb856a4ee82fef030aa627e7d6d9469f92740dafb900290000000000000000000000000000000000000000000000000001c6bf52634000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000001c6bf52634000"
}