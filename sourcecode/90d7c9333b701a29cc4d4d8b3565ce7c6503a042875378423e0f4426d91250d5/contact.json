{
  "address": "0xf91ee8732fa50a71c63cc677ac72e3afb29c6b35",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PryvateCoin",
  "compilerVersion": "v0.5.3+commit.10d17f24",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-04\n*/\n\npragma solidity ^0.5.3;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n  * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n  * account.\n  */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n  * @dev Throws if called by any account other than the owner.\n  */\n  modifier onlyOwner() {\n    require(msg.sender == owner, \"Only the Contract owner can perform this action\");\n    _;\n  }\n\n  /**\n  * @dev Allows the current owner to transfer control of the contract to a newOwner.\n  * @param newOwner The address to transfer ownership to.\n  */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0), \"New owner cannot be current owner\");\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n\n  /// Total amount of tokens\n  uint256 public totalSupply;\n\n  function balanceOf(address _owner) public view returns (uint256 balance);\n\n  function transfer(address _to, uint256 _amount) public returns (bool success);\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success);\n\n  function approve(address _spender, uint256 _amount) public returns (bool success);\n\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n\n  using SafeMath for uint256;\n  uint balanceOfParticipant;\n  uint lockedAmount;\n  uint allowedAmount;\n  bool lockupIsActive = false;\n  uint256 lockupStartTime;\n\n  // balances for each address\n  mapping(address => uint256) balances;\n\n  struct Lockup {\n    uint256 lockupAmount;\n  }\n  Lockup lockup;\n  mapping(address => Lockup) lockupParticipants;\n  event LockupStarted(uint256 indexed lockupStartTime);\n\n  function requireWithinLockupRange(address _spender, uint256 _amount) internal {\n    if (lockupIsActive) {\n      uint timePassed = now - lockupStartTime;\n      balanceOfParticipant = balances[_spender];\n      lockedAmount = lockupParticipants[_spender].lockupAmount;\n      allowedAmount = lockedAmount;\n      if (timePassed < 92 days) {\n        allowedAmount = lockedAmount.mul(5).div(100);\n      } else if (timePassed >= 92 days && timePassed < 183 days) {\n        allowedAmount = lockedAmount.mul(30).div(100);\n      } else if (timePassed >= 183 days && timePassed < 365 days) {\n        allowedAmount = lockedAmount.mul(55).div(100);\n      }\n      require(\n        balanceOfParticipant.sub(_amount) >= lockedAmount.sub(allowedAmount),\n        \"Must maintain correct % of PVC during lockup periods\"\n      );\n    }\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _amount The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _amount) public returns (bool success) {\n    require(_to != msg.sender, \"Cannot transfer to self\");\n    require(_to != address(this), \"Cannot transfer to Contract\");\n    require(_to != address(0), \"Cannot transfer to 0x0\");\n    require(\n      balances[msg.sender] >= _amount && _amount > 0 && balances[_to].add(_amount) > balances[_to],\n      \"Cannot transfer (Not enough balance)\"\n    );\n\n    requireWithinLockupRange(msg.sender, _amount);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Transfer(msg.sender, _to, _amount);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  /**\n  * @dev Transfer tokens from one address to another\n  * @param _from address The address which you want to send tokens from\n  * @param _to address The address which you want to transfer to\n  * @param _amount uint256 the amount of tokens to be transferred\n  */\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n    require(_from != msg.sender, \"Cannot transfer from self, use transfer function instead\");\n    require(_from != address(this) && _to != address(this), \"Cannot transfer from or to Contract\");\n    require(_to != address(0), \"Cannot transfer to 0x0\");\n    require(balances[_from] >= _amount, \"Not enough balance to transfer from\");\n    require(allowed[_from][msg.sender] >= _amount, \"Not enough allowance to transfer from\");\n    require(_amount > 0 && balances[_to].add(_amount) > balances[_to], \"Amount must be > 0 to transfer from\");\n\n    requireWithinLockupRange(_from, _amount);\n\n    balances[_from] = balances[_from].sub(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n    emit Transfer(_from, _to, _amount);\n    return true;\n  }\n\n  /**\n  * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n  *\n  * Beware that changing an allowance with this method brings the risk that someone may use both the old\n  * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n  * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n  * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n  * @param _spender The address which will spend the funds.\n  * @param _amount The amount of tokens to be spent.\n  */\n  function approve(address _spender, uint256 _amount) public returns (bool success) {\n    require(_spender != msg.sender, \"Cannot approve an allowance to self\");\n    require(_spender != address(this), \"Cannot approve contract an allowance\");\n    require(_spender != address(0), \"Cannot approve 0x0 an allowance\");\n    allowed[msg.sender][_spender] = _amount;\n    emit Approval(msg.sender, _spender, _amount);\n    return true;\n  }\n\n  /**\n  * @dev Function to check the amount of tokens that an owner allowed to a spender.\n  * @param _owner address The address which owns the funds.\n  * @param _spender address The address which will spend the funds.\n  * @return A uint256 specifying the amount of tokens still available for the spender.\n  */\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken, Ownable {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n    * @dev Burns a specific amount of tokens.\n    * @param _value The amount of token to be burned.\n    */\n  function burn(uint256 _value) public onlyOwner {\n    require(_value <= balances[msg.sender], \"Not enough balance to burn\");\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    totalSupply = totalSupply.sub(_value);\n    emit Burn(msg.sender, _value);\n  }\n\n}\n\n/**\n * @title PVC Token\n * @dev Token representing PVC.\n */\ncontract PryvateCoin is BurnableToken {\n\n  string public name;\n  string public symbol;\n  uint8 public decimals = 18;\n  \n  /**\n  * @dev users sending ether to this contract will be reverted. Any ether sent to the contract will be sent back to the caller\n  */\n  function() external payable {\n    revert(\"Cannot send Ether to this contract\");\n  }\n    \n  /**\n  * @dev Constructor function to initialize the initial supply of token to the creator of the contract\n  */\n  constructor(address wallet) public {\n    owner = wallet;\n    totalSupply = uint(50000000).mul(10 ** uint256(decimals)); //Update total supply with the decimal amount\n    name = \"PryvateCoin\";\n    symbol = \"PVC\";\n    balances[wallet] = totalSupply;\n    \n    //Emitting transfer event since assigning all tokens to the creator also corresponds to the transfer of tokens to the creator\n    emit Transfer(address(0), msg.sender, totalSupply);\n  }\n    \n  /**\n  * @dev helper method to get token details, name, symbol and totalSupply in one go\n  */\n  function getTokenDetail() public view returns (string memory, string memory, uint256) {\n    return (name, symbol, totalSupply);\n  }\n\n  function vest(address[] memory _owners, uint[] memory _amounts) public onlyOwner {\n    require(_owners.length == _amounts.length, \"Length of addresses & token amounts are not the same\");\n    for (uint i = 0; i < _owners.length; i++) {\n      _amounts[i] = _amounts[i].mul(10 ** 18);\n      require(_owners[i] != address(0), \"Vesting funds cannot be sent to 0x0\");\n      require(_amounts[i] > 0, \"Amount must be > 0\");\n      require(balances[owner] > _amounts[i], \"Not enough balance to vest\");\n      require(balances[_owners[i]].add(_amounts[i]) > balances[_owners[i]], \"Internal vesting error\");\n\n      // SafeMath.sub will throw if there is not enough balance.\n      balances[owner] = balances[owner].sub(_amounts[i]);\n      balances[_owners[i]] = balances[_owners[i]].add(_amounts[i]);\n      emit Transfer(owner, _owners[i], _amounts[i]);\n      lockup = Lockup({ lockupAmount: _amounts[i] });\n      lockupParticipants[_owners[i]] = lockup;\n    }\n  }\n\n  function initiateLockup() public onlyOwner {\n    uint256 currentTime = now;\n    lockupIsActive = true;\n    lockupStartTime = currentTime;\n    emit LockupStarted(currentTime);\n  }\n\n  function lockupActive() public view returns (bool) {\n    return lockupIsActive;\n  }\n\n  function lockupAmountOf(address _owner) public view returns (uint256) {\n    return lockupParticipants[_owner].lockupAmount;\n  }\n\n}",
  "bytecode": "60806040526000600460006101000a81548160ff0219169083151502179055506012600d60006101000a81548160ff021916908360ff1602179055503480156200004857600080fd5b5060405160208062003186833981018060405260208110156200006a57600080fd5b810190808051906020019092919050505033600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000139600d60009054906101000a900460ff1660ff16600a0a6302faf080620002906401000000000262002b48179091906401000000009004565b6000819055506040805190810160405280600b81526020017f50727976617465436f696e000000000000000000000000000000000000000000815250600b90805190602001906200018c929190620002cf565b506040805190810160405280600381526020017f5056430000000000000000000000000000000000000000000000000000000000815250600c9080519060200190620001da929190620002cf565b50600054600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000546040518082815260200191505060405180910390a3506200037e565b600080831415620002a55760009050620002c9565b60008284029050828482811515620002b957fe5b04141515620002c457fe5b809150505b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200031257805160ff191683800117855562000343565b8280016001018555821562000343579182015b828111156200034257825182559160200191906001019062000325565b5b50905062000352919062000356565b5090565b6200037b91905b80821115620003775760008160009055506001016200035d565b5090565b90565b612df8806200038e6000396000f3fe60806040526004361061011b576000357c0100000000000000000000000000000000000000000000000000000000900480634c00edba116100b25780638da5cb5b116100815780638da5cb5b1461070557806395d89b411461075c578063a9059cbb146107ec578063dd62ed3e1461085f578063f2fde38b146108e45761011b565b80634c00edba1461050157806356febaa01461051857806370a0823114610671578063721678e2146106d65761011b565b8063289de615116100ee578063289de6151461032d578063313ce5671461043057806332cf261d1461046157806342966c68146104c65761011b565b806306fdde031461016c578063095ea7b3146101fc57806318160ddd1461026f57806323b872dd1461029a575b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180612d2e6022913960400191505060405180910390fd5b34801561017857600080fd5b50610181610935565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101c15780820151818401526020810190506101a6565b50505050905090810190601f1680156101ee5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020857600080fd5b506102556004803603604081101561021f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109d3565b604051808215151515815260200191505060405180910390f35b34801561027b57600080fd5b50610284610c78565b6040518082815260200191505060405180910390f35b3480156102a657600080fd5b50610313600480360360608110156102bd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c7e565b604051808215151515815260200191505060405180910390f35b34801561033957600080fd5b50610342611385565b604051808060200180602001848152602001838103835286818151815260200191508051906020019080838360005b8381101561038c578082015181840152602081019050610371565b50505050905090810190601f1680156103b95780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156103f25780820151818401526020810190506103d7565b50505050905090810190601f16801561041f5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561043c57600080fd5b506104456114d4565b604051808260ff1660ff16815260200191505060405180910390f35b34801561046d57600080fd5b506104b06004803603602081101561048457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114e7565b6040518082815260200191505060405180910390f35b3480156104d257600080fd5b506104ff600480360360208110156104e957600080fd5b8101908080359060200190929190505050611533565b005b34801561050d57600080fd5b50610516611793565b005b34801561052457600080fd5b5061066f6004803603604081101561053b57600080fd5b810190808035906020019064010000000081111561055857600080fd5b82018360208201111561056a57600080fd5b8035906020019184602083028401116401000000008311171561058c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156105ec57600080fd5b8201836020820111156105fe57600080fd5b8035906020019184602083028401116401000000008311171561062057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050611892565b005b34801561067d57600080fd5b506106c06004803603602081101561069457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612088565b6040518082815260200191505060405180910390f35b3480156106e257600080fd5b506106eb6120d1565b604051808215151515815260200191505060405180910390f35b34801561071157600080fd5b5061071a6120e8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561076857600080fd5b5061077161210e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107b1578082015181840152602081019050610796565b50505050905090810190601f1680156107de5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156107f857600080fd5b506108456004803603604081101561080f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506121ac565b604051808215151515815260200191505060405180910390f35b34801561086b57600080fd5b506108ce6004803603604081101561088257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061267f565b6040518082815260200191505060405180910390f35b3480156108f057600080fd5b506109336004803603602081101561090757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612706565b005b600b8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109cb5780601f106109a0576101008083540402835291602001916109cb565b820191906000526020600020905b8154815290600101906020018083116109ae57829003601f168201915b505050505081565b60003373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610a5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180612bc46023913960400191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610ae3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180612be76024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610b88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f43616e6e6f7420617070726f76652030783020616e20616c6c6f77616e63650081525060200191505060405180910390fd5b81600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b60003373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515610d07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526038815260200180612d716038913960400191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015610d6f57503073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b1515610dc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180612c0b6023913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610e6b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f43616e6e6f74207472616e7366657220746f203078300000000000000000000081525060200191505060405180910390fd5b81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610f05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180612ca86023913960400191505060405180910390fd5b81600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610fdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180612b9f6025913960400191505060405180910390fd5b60008211801561107b5750600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461107983600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546128f690919063ffffffff16565b115b15156110d2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180612c856023913960400191505060405180910390fd5b6110dc8483612914565b61112e82600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b2f90919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111c382600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546128f690919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061129582600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b2f90919063ffffffff16565b600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6060806000600b600c600054828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114265780601f106113fb57610100808354040283529160200191611426565b820191906000526020600020905b81548152906001019060200180831161140957829003601f168201915b50505050509250818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114c25780601f10611497576101008083540402835291602001916114c2565b820191906000526020600020905b8154815290600101906020018083116114a557829003601f168201915b50505050509150925092509250909192565b600d60009054906101000a900460ff1681565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180612ccb602f913960400191505060405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515611692576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4e6f7420656e6f7567682062616c616e636520746f206275726e00000000000081525060200191505060405180910390fd5b6116e481600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b2f90919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061173c81600054612b2f90919063ffffffff16565b6000819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a250565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561183b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180612ccb602f913960400191505060405180910390fd5b60004290506001600460006101000a81548160ff02191690831515021790555080600581905550807f45ef3fbfb2b569bf30c97c4f489d0c1fb879c054638ba6f09f48461d8e7d219e60405160405180910390a250565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561193a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180612ccb602f913960400191505060405180910390fd5b80518251141515611996576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526034815260200180612c2e6034913960400191505060405180910390fd5b60008090505b8251811015612083576119d7670de0b6b3a764000083838151811015156119bf57fe5b90602001906020020151612b4890919063ffffffff16565b82828151811015156119e557fe5b9060200190602002018181525050600073ffffffffffffffffffffffffffffffffffffffff168382815181101515611a1957fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1614151515611a92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180612c626023913960400191505060405180910390fd5b60008282815181101515611aa257fe5b90602001906020020151111515611b21576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f416d6f756e74206d757374206265203e2030000000000000000000000000000081525060200191505060405180910390fd5b8181815181101515611b2f57fe5b9060200190602002015160066000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515611c10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4e6f7420656e6f7567682062616c616e636520746f207665737400000000000081525060200191505060405180910390fd5b600660008483815181101515611c2257fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ce78383815181101515611c7857fe5b90602001906020020151600660008786815181101515611c9457fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546128f690919063ffffffff16565b111515611d5c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f496e7465726e616c2076657374696e67206572726f720000000000000000000081525060200191505060405180910390fd5b611de78282815181101515611d6d57fe5b9060200190602002015160066000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b2f90919063ffffffff16565b60066000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ecc8282815181101515611e5d57fe5b90602001906020020151600660008685815181101515611e7957fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546128f690919063ffffffff16565b600660008584815181101515611ede57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508281815181101515611f3457fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8484815181101515611fbc57fe5b906020019060200201516040518082815260200191505060405180910390a36020604051908101604052808383815181101515611ff557fe5b90602001906020020151815250600760008201518160000155905050600760086000858481518110151561202557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201548160000155905050808060010191505061199c565b505050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600460009054906101000a900460ff16905090565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121a45780601f10612179576101008083540402835291602001916121a4565b820191906000526020600020905b81548152906001019060200180831161218757829003601f168201915b505050505081565b60003373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515612252576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000081525060200191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156122f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f43616e6e6f74207472616e7366657220746f20436f6e7472616374000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561239b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f43616e6e6f74207472616e7366657220746f203078300000000000000000000081525060200191505060405180910390fd5b81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156123ea5750600082115b80156124855750600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461248383600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546128f690919063ffffffff16565b115b15156124dc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180612da96024913960400191505060405180910390fd5b6124e63383612914565b61253882600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b2f90919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506125cd82600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546128f690919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156127ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180612ccb602f913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612836576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180612d506021913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080828401905083811015151561290a57fe5b8091505092915050565b600460009054906101000a900460ff1615612b2b57600060055442039050600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600181905550600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015460028190555060025460038190555062794a00811015612a09576129fe60646129f06005600254612b4890919063ffffffff16565b612b8390919063ffffffff16565b600381905550612aa4565b62794a008110158015612a1e575062f1428081105b15612a5757612a4c6064612a3e601e600254612b4890919063ffffffff16565b612b8390919063ffffffff16565b600381905550612aa3565b62f142808110158015612a6d57506301e1338081105b15612aa257612a9b6064612a8d6037600254612b4890919063ffffffff16565b612b8390919063ffffffff16565b6003819055505b5b5b612abb600354600254612b2f90919063ffffffff16565b612ad083600154612b2f90919063ffffffff16565b10151515612b29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526034815260200180612cfa6034913960400191505060405180910390fd5b505b5050565b6000828211151515612b3d57fe5b818303905092915050565b600080831415612b5b5760009050612b7d565b60008284029050828482811515612b6e57fe5b04141515612b7857fe5b809150505b92915050565b6000808284811515612b9157fe5b049050809150509291505056fe4e6f7420656e6f75676820616c6c6f77616e636520746f207472616e736665722066726f6d43616e6e6f7420617070726f766520616e20616c6c6f77616e636520746f2073656c6643616e6e6f7420617070726f766520636f6e747261637420616e20616c6c6f77616e636543616e6e6f74207472616e736665722066726f6d206f7220746f20436f6e74726163744c656e677468206f6620616464726573736573202620746f6b656e20616d6f756e747320617265206e6f74207468652073616d6556657374696e672066756e64732063616e6e6f742062652073656e7420746f20307830416d6f756e74206d757374206265203e203020746f207472616e736665722066726f6d4e6f7420656e6f7567682062616c616e636520746f207472616e736665722066726f6d4f6e6c792074686520436f6e7472616374206f776e65722063616e20706572666f726d207468697320616374696f6e4d757374206d61696e7461696e20636f72726563742025206f662050564320647572696e67206c6f636b757020706572696f647343616e6e6f742073656e6420457468657220746f207468697320636f6e74726163744e6577206f776e65722063616e6e6f742062652063757272656e74206f776e657243616e6e6f74207472616e736665722066726f6d2073656c662c20757365207472616e736665722066756e6374696f6e20696e737465616443616e6e6f74207472616e7366657220284e6f7420656e6f7567682062616c616e636529a165627a7a72305820762348b00efe31ea81afb51dd4ec3b3321215e9994049cd5ea84d37b840851ec0029000000000000000000000000c50c5acabbc5c6f18d0dc863b7922abea0effcc7",
  "constructorArguments": "000000000000000000000000c50c5acabbc5c6f18d0dc863b7922abea0effcc7"
}