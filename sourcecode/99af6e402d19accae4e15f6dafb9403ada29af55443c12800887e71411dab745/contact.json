{
  "address": "0x6ad25194cd7b966c05eb2bec7f6be76639f98172",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VANMCrowdsale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-05\n*/\n\npragma solidity ^0.4.24;\n\n/**\n  * @title SafeMath\n  * @dev Math operations with safety checks that throw on error\n  */\nlibrary SafeMath {\n/**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/**\n* @title Ownable\n* @dev The Ownable contract has an owner address, and provides basic authorization control\n* functions, this simplifies the implementation of \"user permissions\".\n*/\ncontract Ownable {\n    address public owner;\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n    /**\n    * @dev Allows the current owner to relinquish control of the contract.\n    */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract VANMToken is ERC20, Ownable {\n    using SafeMath for uint256;\n\n    //Variables\n    string public symbol;\n    string public name;\n    uint8 public decimals;\n    uint256 public _totalSupply;\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) internal allowed;\n\n    uint256 public presaleSupply;\n    address public presaleAddress;\n\n    uint256 public crowdsaleSupply;\n    address public crowdsaleAddress;\n\n    uint256 public platformSupply;\n    address public platformAddress;\n\n    uint256 public incentivisingSupply;\n    address public incentivisingAddress;\n\n    uint256 public teamSupply;\n    address public teamAddress;\n\n    uint256 public crowdsaleEndsAt;\n\n    uint256 public teamVestingPeriod;\n\n    bool public presaleFinalized = false;\n\n    bool public crowdsaleFinalized = false;\n\n    //Modifiers\n    //Only presale contract\n    modifier onlyPresale() {\n        require(msg.sender == presaleAddress);\n        _;\n    }\n\n    //Only crowdsale contract\n    modifier onlyCrowdsale() {\n        require(msg.sender == crowdsaleAddress);\n        _;\n    }\n\n    //crowdsale has to be over\n    modifier notBeforeCrowdsaleEnds(){\n        require(block.timestamp >= crowdsaleEndsAt);\n        _;\n    }\n\n    // Check if vesting period is over\n    modifier checkTeamVestingPeriod() {\n        require(block.timestamp >= teamVestingPeriod);\n        _;\n    }\n\n    //Events\n    event PresaleFinalized(uint tokensRemaining);\n\n    event CrowdsaleFinalized(uint tokensRemaining);\n\n    //Constructor\n    constructor() public {\n\n        //Basic information\n        symbol = \"VANM\";\n        name = \"VANM\";\n        decimals = 18;\n\n        //Total VANM supply\n        _totalSupply = 240000000 * 10**uint256(decimals);\n\n        // 10% of total supply for presale\n        presaleSupply = 24000000 * 10**uint256(decimals);\n\n        // 50% of total supply for crowdsale\n        crowdsaleSupply = 120000000 * 10**uint256(decimals);\n\n        // 10% of total supply for platform\n        platformSupply = 24000000 * 10**uint256(decimals);\n\n        // 20% of total supply for incentivising\n        incentivisingSupply = 48000000 * 10**uint256(decimals);\n\n        // 10% of total supply for team\n        teamSupply = 24000000 * 10**uint256(decimals);\n\n        platformAddress = 0x6962371D5a9A229C735D936df5CE6C690e66b718;\n\n        teamAddress = 0xB9e54846da59C27eFFf06C3C08D5d108CF81FEae;\n\n        // 01.05.2019 00:00:00 UTC\n        crowdsaleEndsAt = 1556668800;\n\n        // 2 years vesting period\n        teamVestingPeriod = crowdsaleEndsAt.add(2 * 365 * 1 days);\n\n        balances[platformAddress] = platformSupply;\n        emit Transfer(0x0, platformAddress, platformSupply);\n\n        balances[incentivisingAddress] = incentivisingSupply;\n    }\n\n    //External functions\n    //Set Presale Address when it's deployed\n    function setPresaleAddress(address _presaleAddress) external onlyOwner {\n        require(presaleAddress == 0x0);\n        presaleAddress = _presaleAddress;\n        balances[_presaleAddress] = balances[_presaleAddress].add(presaleSupply);\n    }\n\n    // Finalize presale. Leftover tokens will overflow to crowdsale.\n    function finalizePresale() external onlyPresale {\n        require(presaleFinalized == false);\n        uint256 amount = balanceOf(presaleAddress);\n        if (amount > 0) {\n            balances[presaleAddress] = 0;\n            balances[crowdsaleAddress] = balances[crowdsaleAddress].add(amount);\n        }\n        presaleFinalized = true;\n        emit PresaleFinalized(amount);\n    }\n\n    //Set Crowdsale Address when it's deployed\n    function setCrowdsaleAddress(address _crowdsaleAddress) external onlyOwner {\n        require(presaleAddress != 0x0);\n        require(crowdsaleAddress == 0x0);\n        crowdsaleAddress = _crowdsaleAddress;\n        balances[_crowdsaleAddress] = balances[_crowdsaleAddress].add(crowdsaleSupply);\n    }\n\n    // Finalize crowdsale. Leftover tokens will overflow to platform.\n    function finalizeCrowdsale() external onlyCrowdsale {\n        require(presaleFinalized == true && crowdsaleFinalized == false);\n        uint256 amount = balanceOf(crowdsaleAddress);\n        if (amount > 0) {\n            balances[crowdsaleAddress] = 0;\n            balances[platformAddress] = balances[platformAddress].add(amount);\n            emit Transfer(0x0, platformAddress, amount);\n        }\n        crowdsaleFinalized = true;\n        emit CrowdsaleFinalized(amount);\n    }\n\n    //Public functions\n    //ERC20 functions\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function transfer(address _to, uint256 _value) public\n    notBeforeCrowdsaleEnds\n    returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public\n    notBeforeCrowdsaleEnds\n    returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    //Token functions\n    //Incentivising function to transfer tokens\n    function transferFromIncentivising(address _to, uint256 _value) public\n    onlyOwner\n    returns (bool) {\n    require(_value <= balances[incentivisingAddress]);\n        balances[incentivisingAddress] = balances[incentivisingAddress].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(0x0, _to, _value);\n        return true;\n    }\n\n    //Presalefunction to transfer tokens\n    function transferFromPresale(address _to, uint256 _value) public\n    onlyPresale\n    returns (bool) {\n    require(_value <= balances[presaleAddress]);\n        balances[presaleAddress] = balances[presaleAddress].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(0x0, _to, _value);\n        return true;\n    }\n\n    //Crowdsalefunction to transfer tokens\n    function transferFromCrowdsale(address _to, uint256 _value) public\n    onlyCrowdsale\n    returns (bool) {\n    require(_value <= balances[crowdsaleAddress]);\n        balances[crowdsaleAddress] = balances[crowdsaleAddress].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(0x0, _to, _value);\n        return true;\n    }\n\n    // Release team supply after vesting period is finished.\n    function releaseTeamTokens() public checkTeamVestingPeriod onlyOwner returns(bool) {\n        require(teamSupply > 0);\n        balances[teamAddress] = teamSupply;\n        emit Transfer(0x0, teamAddress, teamSupply);\n        teamSupply = 0;\n        return true;\n    }\n\n    //Check remaining incentivising tokens\n    function checkIncentivisingBalance() public view returns (uint256) {\n        return balances[incentivisingAddress];\n    }\n\n    //Check remaining presale tokens after presale contract is deployed\n    function checkPresaleBalance() public view returns (uint256) {\n        return balances[presaleAddress];\n    }\n\n    //Check remaining crowdsale tokens after crowdsale contract is deployed\n    function checkCrowdsaleBalance() public view returns (uint256) {\n        return balances[crowdsaleAddress];\n    }\n\n    //Recover ERC20 Tokens\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20(tokenAddress).transfer(owner, tokens);\n    }\n\n    //Don't accept ETH\n    function () public payable {\nrevert();\n    }\n}\n\ncontract VANMCrowdsale is Ownable {\n    using SafeMath for uint256;\n\n    //Variables\n    uint256 public crowdsaleStartsAt;\n    uint256 public crowdsaleEndsAt;\n\n    uint256 public weiRaised;\n    address public crowdsaleWallet;\n\n    address public tokenAddress;\n    VANMToken public token;\n\n    //Load whitelist\n    mapping(address => bool) public whitelist;\n\n    //Modifiers\n    //Only during crowdsale\n    modifier whileCrowdsale {\n        require(block.timestamp >= crowdsaleStartsAt && block.timestamp <= crowdsaleEndsAt);\n        _;\n    }\n\n    //crowdsale has to be over\n    modifier notBeforeCrowdsaleEnds {\n        require(block.timestamp > crowdsaleEndsAt);\n        _;\n    }\n\n    //msg.sender has to be whitelisted\n    modifier isWhitelisted(address _to) {\n        require(whitelist[_to]);\n        _;\n    }\n\n    //Events\n    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n\n    event AmountRaised(address beneficiary, uint amountRaised);\n\n    event WalletChanged(address _wallet);\n\n    //Constructor\n    constructor() public {\n\n        // 01.01.2019 00:00 UTC\n        crowdsaleStartsAt = 1546300800;\n\n        // 01.05.2019 00:00 UTC\n        crowdsaleEndsAt = 1556668800;\n\n        //Amount of raised Funds in wei\n        weiRaised = 0;\n\n        //Wallet for raised crowdsale funds\n        crowdsaleWallet = 0xedaFdA45fedcCE4D2b81e173F1D2F21557E97aA5;\n\n        //VANM token address\n        tokenAddress = 0x0d155aaa5C94086bCe0Ad0167EE4D55185F02943;\n        token = VANMToken(tokenAddress);\n    }\n\n    //External functions\n    //Add one address to whitelist\n    function addToWhitelist(address _to) external onlyOwner {\n        whitelist[_to] = true;\n    }\n\n    //Add multiple addresses to whitelist\n    function addManyToWhitelist(address[] _to) external onlyOwner {\n        for (uint256 i = 0; i < _to.length; i++) {\n            whitelist[_to[i]] = true;\n        }\n    }\n\n    // Remove one address from whitelist\n    function removeFromWhitelist(address _to) external onlyOwner {\n        whitelist[_to] = false;\n    }\n\n    //Remove multiple addresses from whitelist\n    function removeManyFromWhitelist(address[] _to) external onlyOwner {\n        for (uint256 i = 0; i < _to.length; i++) {\n            whitelist[_to[i]] = false;\n        }\n    }\n\n    //Change crowdsale wallet\n    function changeWallet(address _crowdsaleWallet) external onlyOwner {\n        crowdsaleWallet = _crowdsaleWallet;\n        emit WalletChanged(_crowdsaleWallet);\n    }\n\n    // Close the crowdsale\n    //Remaining tokens will be transferred to platform\n    function closeCrowdsale() external notBeforeCrowdsaleEnds onlyOwner returns (bool) {\n        emit AmountRaised(crowdsaleWallet, weiRaised);\n        token.finalizeCrowdsale();\n        return true;\n    }\n\n    //Public functions\n    //Check if crowdsale has closed\n    function crowdsaleHasClosed() public view returns (bool) {\n        return block.timestamp > crowdsaleEndsAt;\n    }\n\n    //Buy tokens by sending ETH to the contract\n    function () public payable {\n        buyTokens(msg.sender);\n    }\n\n    //Buy tokens and send it to an address\n    function buyTokens(address _to) public\n    whileCrowdsale\n    isWhitelisted (_to)\n    payable {\n        uint256 weiAmount = msg.value;\n        uint256 tokens = weiAmount * getCrowdsaleRate();\n        weiRaised = weiRaised.add(weiAmount);\n        crowdsaleWallet.transfer(weiAmount);\n        if (!token.transferFromCrowdsale(_to, tokens)) {\n            revert();\n        }\n        emit TokenPurchase(_to, weiAmount, tokens);\n    }\n\n    //Get current crowdsale rate / amount of token for 1 ETH\n    function getCrowdsaleRate() public view returns (uint price) {\n        if (token.checkCrowdsaleBalance() < ((token.crowdsaleSupply() * 25) / 100)) {\n            return 2000; // Last 25%\n        } else if (token.checkCrowdsaleBalance() < ((token.crowdsaleSupply() * 50) / 100)) {\n            return 2100; // Third 25%\n        } else if (token.checkCrowdsaleBalance() < ((token.crowdsaleSupply() * 75) / 100)) {\n            return 2250; // Second 25%\n        } else if (token.checkCrowdsaleBalance() < (token.crowdsaleSupply())) {\n            return 2400; // First 25%\n        } else {\n            return 2600; // Leftover Presale Tokens\n        }\n    }\n\n//Recover ERC20 Tokens\n    function transferAnyERC20Token(address ERC20Address, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20(ERC20Address).transfer(owner, tokens);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550635c2aad80600181905550635cc8e180600281905550600060038190555073edafda45fedcce4d2b81e173f1d2f21557e97aa5600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550730d155aaa5c94086bce0ad0167ee4d55185f02943600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506119f08061018b6000396000f300608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806334324f6c1461011d5780634042b66f146101485780634cd9c3e41461017357806356ff83c81461019e578063715018a6146101f55780638ab1d6811461020c5780638c10671c1461024f5780638da5cb5b1461028a578063983c0a01146102e157806398b9a2dc146103105780639b19251a146103535780639d76ea58146103ae578063d44943f314610405578063dc39d06d14610434578063e43252d714610499578063ec8ac4d8146104dc578063f2fde38b14610512578063f674d79914610555578063fc0c546a14610590578063fddcc48a146105e7575b61011b33610612565b005b34801561012957600080fd5b50610132610887565b6040518082815260200191505060405180910390f35b34801561015457600080fd5b5061015d610f07565b6040518082815260200191505060405180910390f35b34801561017f57600080fd5b50610188610f0d565b6040518082815260200191505060405180910390f35b3480156101aa57600080fd5b506101b3610f13565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561020157600080fd5b5061020a610f39565b005b34801561021857600080fd5b5061024d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061103b565b005b34801561025b57600080fd5b506102886004803603810190808035906020019082018035906020019190919293919293905050506110f1565b005b34801561029657600080fd5b5061029f6111f2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102ed57600080fd5b506102f6611217565b604051808215151515815260200191505060405180910390f35b34801561031c57600080fd5b50610351600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113b8565b005b34801561035f57600080fd5b50610394600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114ba565b604051808215151515815260200191505060405180910390f35b3480156103ba57600080fd5b506103c36114da565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561041157600080fd5b5061041a611500565b604051808215151515815260200191505060405180910390f35b34801561044057600080fd5b5061047f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061150c565b604051808215151515815260200191505060405180910390f35b3480156104a557600080fd5b506104da600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611670565b005b610510600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610612565b005b34801561051e57600080fd5b50610553600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611726565b005b34801561056157600080fd5b5061058e60048036038101908080359060200190820180359060200191909192939192939050505061187b565b005b34801561059c57600080fd5b506105a561197c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105f357600080fd5b506105fc6119a2565b6040518082815260200191505060405180910390f35b600080600154421015801561062957506002544211155b151561063457600080fd5b82600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561068d57600080fd5b349250610698610887565b830291506106b1836003546119a890919063ffffffff16565b600381905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f1935050505015801561071f573d6000803e3d6000fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631109ef9285846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156107e557600080fd5b505af11580156107f9573d6000803e3d6000fd5b505050506040513d602081101561080f57600080fd5b8101908080519060200190929190505050151561082b57600080fd5b8373ffffffffffffffffffffffffffffffffffffffff167fcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f8484604051808381526020018281526020019250505060405180910390a250505050565b600060646019600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cdcb3cdb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561091357600080fd5b505af1158015610927573d6000803e3d6000fd5b505050506040513d602081101561093d57600080fd5b81019080805190602001909291905050500281151561095857fe5b04600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166326848b686040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156109df57600080fd5b505af11580156109f3573d6000803e3d6000fd5b505050506040513d6020811015610a0957600080fd5b81019080805190602001909291905050501015610a2a576107d09050610f04565b60646032600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cdcb3cdb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ab457600080fd5b505af1158015610ac8573d6000803e3d6000fd5b505050506040513d6020811015610ade57600080fd5b810190808051906020019092919050505002811515610af957fe5b04600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166326848b686040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610b8057600080fd5b505af1158015610b94573d6000803e3d6000fd5b505050506040513d6020811015610baa57600080fd5b81019080805190602001909291905050501015610bcb576108349050610f04565b6064604b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cdcb3cdb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610c5557600080fd5b505af1158015610c69573d6000803e3d6000fd5b505050506040513d6020811015610c7f57600080fd5b810190808051906020019092919050505002811515610c9a57fe5b04600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166326848b686040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610d2157600080fd5b505af1158015610d35573d6000803e3d6000fd5b505050506040513d6020811015610d4b57600080fd5b81019080805190602001909291905050501015610d6c576108ca9050610f04565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cdcb3cdb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610df257600080fd5b505af1158015610e06573d6000803e3d6000fd5b505050506040513d6020811015610e1c57600080fd5b8101908080519060200190929190505050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166326848b686040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610eb357600080fd5b505af1158015610ec7573d6000803e3d6000fd5b505050506040513d6020811015610edd57600080fd5b81019080805190602001909291905050501015610efe576109609050610f04565b610a2890505b90565b60035481565b60025481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f9457600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561109657600080fd5b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561114e57600080fd5b600090505b828290508110156111ed57600160076000858585818110151561117257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050611153565b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006002544211151561122957600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561128457600080fd5b7f388489111a71afaf5f6b58d047fce6d8592b378d2c55d3113d836a7fa6918fd8600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600354604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630bf318a36040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561139957600080fd5b505af11580156113ad573d6000803e3d6000fd5b505050506001905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561141357600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3ce716f94fe275e52428cbf6b7f388e5a65976d4edabc34355a77f5e89655bdc81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b60076020528060005260406000206000915054906101000a900460ff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006002544211905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561156957600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561162d57600080fd5b505af1158015611641573d6000803e3d6000fd5b505050506040513d602081101561165757600080fd5b8101908080519060200190929190505050905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116cb57600080fd5b6001600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561178157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156117bd57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118d857600080fd5b600090505b828290508110156119775760006007600085858581811015156118fc57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806001019150506118dd565b505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b600081830190508281101515156119bb57fe5b809050929150505600a165627a7a723058203f5249d88f9a502d89daa5b6454fe34469fad9f1b42553624ffab7526a5da1990029"
}