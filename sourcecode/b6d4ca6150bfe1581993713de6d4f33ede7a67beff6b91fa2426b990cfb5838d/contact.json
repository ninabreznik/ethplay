{
  "address": "0x9e67c652aef503926e0dbaad1535b604ddb72db7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Bank",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-19\n*/\n\npragma solidity 0.5.1;\n\n/*\n* @title Bank\n* @dev Bank contract which contained all ETH from Dragons and Hamsters teams.\n* When time in blockchain will be grater then current deadline or last deadline need call getWinner function\n* then participants able get prizes.\n*\n* Last participant(last hero) win 10% from all bank\n*\n* - To get prize send 0 ETH to this contract\n*/\ncontract Bank {\n\n    using SafeMath for uint256;\n\n    mapping (address => uint256) public depositBears;\n    mapping (address => uint256) public depositBulls;\n    uint256 public currentDeadline;\n    uint256 public lastDeadline;\n    uint256 public countOfBears;\n    uint256 public countOfBulls;\n    uint256 public totalSupplyOfBulls;\n    uint256 public totalSupplyOfBears;\n    uint256 public totalCBCSupplyOfBulls;\n    uint256 public totalCBCSupplyOfBears;\n    uint256 public probabilityOfBulls;\n    uint256 public probabilityOfBears;\n    address public lastHero;\n    address public lastHeroHistory;\n    uint256 public jackPot;\n    uint256 public winner;\n    bool public finished = false;\n\n    Bears public BearsContract;\n    Bulls public BullsContract;\n    CBCToken public CBCTokenContract;\n\n    /*\n    * @dev Constructor create first deadline\n    */\n    constructor() public {\n        currentDeadline = block.timestamp + 60 * 60 * 24 * 3;\n        lastDeadline = block.timestamp + 60 * 60 * 24 * 7;\n    }\n\n    /**\n    * @dev Setter the CryptoBossCoin contract address. Address can be set at once.\n    * @param _CBCTokenAddress Address of the CryptoBossCoin contract\n    */\n    function setCBCTokenAddress(address _CBCTokenAddress) public {\n        require(address(CBCTokenContract) == address(0x0));\n        CBCTokenContract = CBCToken(_CBCTokenAddress);\n    }\n\n    /**\n    * @dev Setter the Bears contract address. Address can be set at once.\n    * @param _bearsAddress Address of the Bears contract\n    */\n    function setBearsAddress(address payable _bearsAddress) external {\n        require(address(BearsContract) == address(0x0));\n        BearsContract = Bears(_bearsAddress);\n    }\n\n    /**\n    * @dev Setter the Bulls contract address. Address can be set at once.\n    * @param _bullsAddress Address of the Bulls contract\n    */\n    function setBullsAddress(address payable _bullsAddress) external {\n        require(address(BullsContract) == address(0x0));\n        BullsContract = Bulls(_bullsAddress);\n    }\n\n    /**\n    * @dev Getting time from blockchain for timer\n    */\n    function getNow() view public returns(uint){\n        return block.timestamp;\n    }\n\n    /**\n    * @dev Getting state of game. True - game continue, False - game stopped\n    */\n    function getState() view public returns(bool) {\n        if (block.timestamp > currentDeadline) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n    * @dev Setting info about participant from Bears or Bulls contract\n    * @param _lastHero Address of participant\n    * @param _deposit Amount of deposit\n    */\n    function setInfo(address _lastHero, uint256 _deposit) public {\n        require(address(BearsContract) == msg.sender || address(BullsContract) == msg.sender);\n\n        if (address(BearsContract) == msg.sender) {\n            require(depositBulls[_lastHero] == 0, \"You are already in bulls team\");\n            if (depositBears[_lastHero] == 0)\n                countOfBears++;\n            totalSupplyOfBears = totalSupplyOfBears.add(_deposit.mul(90).div(100));\n            depositBears[_lastHero] = depositBears[_lastHero].add(_deposit.mul(90).div(100));\n        }\n\n        if (address(BullsContract) == msg.sender) {\n            require(depositBears[_lastHero] == 0, \"You are already in bears team\");\n            if (depositBulls[_lastHero] == 0)\n                countOfBulls++;\n            totalSupplyOfBulls = totalSupplyOfBulls.add(_deposit.mul(90).div(100));\n            depositBulls[_lastHero] = depositBulls[_lastHero].add(_deposit.mul(90).div(100));\n        }\n\n        lastHero = _lastHero;\n\n        if (currentDeadline.add(120) <= lastDeadline) {\n            currentDeadline = currentDeadline.add(120);\n        } else {\n            currentDeadline = lastDeadline;\n        }\n\n        jackPot = (address(this).balance.add(_deposit)).mul(10).div(100);\n\n        calculateProbability();\n    }\n\n    /**\n    * @dev Calculation probability for team's win\n    */\n    function calculateProbability() public {\n        require(winner == 0 && getState());\n\n        totalCBCSupplyOfBulls = CBCTokenContract.balanceOf(address(BullsContract));\n        totalCBCSupplyOfBears = CBCTokenContract.balanceOf(address(BearsContract));\n        uint256 percent = (totalSupplyOfBulls.add(totalSupplyOfBears)).div(100);\n\n        if (totalCBCSupplyOfBulls < 1 ether) {\n            totalCBCSupplyOfBulls = 0;\n        }\n\n        if (totalCBCSupplyOfBears < 1 ether) {\n            totalCBCSupplyOfBears = 0;\n        }\n\n        if (totalCBCSupplyOfBulls <= totalCBCSupplyOfBears) {\n            uint256 difference = totalCBCSupplyOfBears.sub(totalCBCSupplyOfBulls).div(0.01 ether);\n            probabilityOfBears = totalSupplyOfBears.mul(100).div(percent).add(difference);\n\n            if (probabilityOfBears > 8000) {\n                probabilityOfBears = 8000;\n            }\n            if (probabilityOfBears < 2000) {\n                probabilityOfBears = 2000;\n            }\n            probabilityOfBulls = 10000 - probabilityOfBears;\n        } else {\n            uint256 difference = totalCBCSupplyOfBulls.sub(totalCBCSupplyOfBears).div(0.01 ether);\n            probabilityOfBulls = totalSupplyOfBulls.mul(100).div(percent).add(difference);\n\n            if (probabilityOfBulls > 8000) {\n                probabilityOfBulls = 8000;\n            }\n            if (probabilityOfBulls < 2000) {\n                probabilityOfBulls = 2000;\n            }\n            probabilityOfBears = 10000 - probabilityOfBulls;\n        }\n\n        totalCBCSupplyOfBulls = CBCTokenContract.balanceOf(address(BullsContract));\n        totalCBCSupplyOfBears = CBCTokenContract.balanceOf(address(BearsContract));\n    }\n\n    /**\n    * @dev Getting winner team\n    */\n    function getWinners() public {\n        require(winner == 0 && !getState());\n\n        uint256 seed1 = address(this).balance;\n        uint256 seed2 = totalSupplyOfBulls;\n        uint256 seed3 = totalSupplyOfBears;\n        uint256 seed4 = totalCBCSupplyOfBulls;\n        uint256 seed5 = totalCBCSupplyOfBulls;\n        uint256 seed6 = block.difficulty;\n        uint256 seed7 = block.timestamp;\n\n        bytes32 randomHash = keccak256(abi.encodePacked(seed1, seed2, seed3, seed4, seed5, seed6, seed7));\n        uint randomNumber = uint(randomHash);\n\n        if (randomNumber == 0){\n            randomNumber = 1;\n        }\n\n        uint winningNumber = randomNumber % 10000;\n\n        if (1 <= winningNumber && winningNumber <= probabilityOfBears){\n            winner = 1;\n        }\n\n        if (probabilityOfBears < winningNumber && winningNumber <= 10000){\n            winner = 2;\n        }\n    }\n\n    /**\n    * @dev Payable function for take prize\n    */\n    function () external payable {\n        if (msg.value == 0 &&  !getState() && winner > 0){\n            require(depositBears[msg.sender] > 0 || depositBulls[msg.sender] > 0);\n\n            uint payout = 0;\n            uint payoutCBC = 0;\n\n            if (winner == 1 && depositBears[msg.sender] > 0) {\n                payout = calculateETHPrize(msg.sender);\n            }\n            if (winner == 2 && depositBulls[msg.sender] > 0) {\n                payout = calculateETHPrize(msg.sender);\n            }\n\n            if (payout > 0) {\n                depositBears[msg.sender] = 0;\n                depositBulls[msg.sender] = 0;\n                msg.sender.transfer(payout);\n            }\n\n            if ((winner == 1 && depositBears[msg.sender] == 0) || (winner == 2 && depositBulls[msg.sender] == 0)) {\n                payoutCBC = calculateCBCPrize(msg.sender);\n                if (CBCTokenContract.balanceOf(address(BullsContract)) > 0)\n                    CBCTokenContract.transferFrom(\n                        address(BullsContract),\n                        address(this),\n                        CBCTokenContract.balanceOf(address(BullsContract))\n                    );\n                if (CBCTokenContract.balanceOf(address(BearsContract)) > 0)\n                    CBCTokenContract.transferFrom(\n                        address(BearsContract),\n                        address(this),\n                        CBCTokenContract.balanceOf(address(BearsContract))\n                    );\n                CBCTokenContract.transfer(msg.sender, payoutCBC);\n            }\n\n            if (msg.sender == lastHero) {\n                lastHeroHistory = lastHero;\n                lastHero = address(0x0);\n                msg.sender.transfer(jackPot);\n            }\n        }\n    }\n\n    /**\n    * @dev Getting ETH prize of participant\n    * @param participant Address of participant\n    */\n    function calculateETHPrize(address participant) public view returns(uint) {\n\n        uint payout = 0;\n        uint256 totalSupply = (totalSupplyOfBears.add(totalSupplyOfBulls));\n\n        if (depositBears[participant] > 0) {\n            payout = totalSupply.mul(depositBears[participant]).div(totalSupplyOfBears);\n        }\n\n        if (depositBulls[participant] > 0) {\n            payout = totalSupply.mul(depositBulls[participant]).div(totalSupplyOfBulls);\n        }\n\n        return payout;\n    }\n\n    /**\n    * @dev Getting CBC Token prize of participant\n    * @param participant Address of participant\n    */\n    function calculateCBCPrize(address participant) public view returns(uint) {\n\n        uint payout = 0;\n        uint totalSupply = (totalCBCSupplyOfBears.add(totalCBCSupplyOfBulls)).mul(80).div(100);\n\n        if (depositBears[participant] > 0) {\n            payout = totalSupply.mul(depositBears[participant]).div(totalSupplyOfBears);\n        }\n\n        if (depositBulls[participant] > 0) {\n            payout = totalSupply.mul(depositBulls[participant]).div(totalSupplyOfBulls);\n        }\n\n        return payout;\n    }\n}\n\n\n/**\n* @dev Base contract for teams\n*/\ncontract CryptoTeam {\n    using SafeMath for uint256;\n\n    //Developers fund\n    address payable public teamAddressOne = 0x5947D8b85c5D3f8655b136B5De5D0Dd33f8E93D9;\n    address payable public teamAddressTwo = 0xC923728AD95f71BC77186D6Fb091B3B30Ba42247;\n    address payable public teamAddressThree = 0x763BFB050F9b973Dd32693B1e2181A68508CdA54;\n\n    Bank public BankContract;\n    CBCToken public CBCTokenContract;\n\n    /**\n    * @dev Payable function. 10% will send to Developers fund and 90% will send to JackPot contract.\n    * Also setting info about player.\n    */\n    function () external payable {\n        require(BankContract.getState() && msg.value >= 0.05 ether);\n\n        BankContract.setInfo(msg.sender, msg.value.mul(90).div(100));\n\n        teamAddressOne.transfer(msg.value.mul(4).div(100));\n        teamAddressTwo.transfer(msg.value.mul(4).div(100));\n        teamAddressThree.transfer(msg.value.mul(2).div(100));\n        address(BankContract).transfer(msg.value.mul(90).div(100));\n    }\n}\n\n/*\n* @dev Bears contract. To play game with Bears send ETH to this contract\n*/\ncontract Bears is CryptoTeam {\n    constructor(address payable _bankAddress, address payable _CBCTokenAddress) public {\n        BankContract = Bank(_bankAddress);\n        BankContract.setBearsAddress(address(this));\n        CBCTokenContract = CBCToken(_CBCTokenAddress);\n        CBCTokenContract.approve(_bankAddress, 9999999999999999999000000000000000000);\n    }\n}\n\n/*\n* @dev Bulls contract. To play game with Bulls send ETH to this contract\n*/\ncontract Bulls is CryptoTeam {\n    constructor(address payable _bankAddress, address payable _CBCTokenAddress) public {\n        BankContract = Bank(_bankAddress);\n        BankContract.setBullsAddress(address(this));\n        CBCTokenContract = CBCToken(_CBCTokenAddress);\n        CBCTokenContract.approve(_bankAddress, 9999999999999999999000000000000000000);\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require (msg.sender == owner);\n        _;\n    }\n\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n}\n\n\n\n/**\n * @title Authorizable\n * @dev Allows to authorize access to certain function calls\n *\n * ABI\n * [{\"constant\":true,\"inputs\":[{\"name\":\"authorizerIndex\",\"type\":\"uint256\"}],\"name\":\"getAuthorizer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"}]\n */\ncontract Authorizable {\n\n    address[] authorizers;\n    mapping(address => uint) authorizerIndex;\n\n    /**\n     * @dev Throws if called by any account tat is not authorized.\n     */\n    modifier onlyAuthorized {\n        require(isAuthorized(msg.sender));\n        _;\n    }\n\n    /**\n     * @dev Contructor that authorizes the msg.sender.\n     */\n    constructor() public {\n        authorizers.length = 2;\n        authorizers[1] = msg.sender;\n        authorizerIndex[msg.sender] = 1;\n    }\n\n    /**\n     * @dev Function to get a specific authorizer\n     * @param authorizerIndex index of the authorizer to be retrieved.\n     * @return The address of the authorizer.\n     */\n    function getAuthorizer(uint authorizerIndex) external view returns(address) {\n        return address(authorizers[authorizerIndex + 1]);\n    }\n\n    /**\n     * @dev Function to check if an address is authorized\n     * @param _addr the address to check if it is authorized.\n     * @return boolean flag if address is authorized.\n     */\n    function isAuthorized(address _addr) public view returns(bool) {\n        return authorizerIndex[_addr] > 0;\n    }\n\n    /**\n     * @dev Function to add a new authorizer\n     * @param _addr the address to add as a new authorizer.\n     */\n    function addAuthorized(address _addr) external onlyAuthorized {\n        authorizerIndex[_addr] = authorizers.length;\n        authorizers.length++;\n        authorizers[authorizers.length - 1] = _addr;\n    }\n\n}\n\n/**\n * @title ExchangeRate\n * @dev Allows updating and retrieveing of Conversion Rates for PAY tokens\n *\n * ABI\n * [{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"updateRates\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"rates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"RateUpdated\",\"type\":\"event\"}]\n */\ncontract ExchangeRate is Ownable {\n\n    event RateUpdated(uint timestamp, bytes32 symbol, uint rate);\n\n    mapping(bytes32 => uint) public rates;\n\n    /**\n     * @dev Allows the current owner to update a single rate.\n     * @param _symbol The symbol to be updated.\n     * @param _rate the rate for the symbol.\n     */\n    function updateRate(string memory _symbol, uint _rate) public onlyOwner {\n        rates[keccak256(abi.encodePacked(_symbol))] = _rate;\n        emit RateUpdated(now, keccak256(bytes(_symbol)), _rate);\n    }\n\n    /**\n     * @dev Allows the current owner to update multiple rates.\n     * @param data an array that alternates keccak256 hashes of the symbol and the corresponding rate .\n     */\n    function updateRates(uint[] memory data) public onlyOwner {\n        require (data.length % 2 <= 0);\n        uint i = 0;\n        while (i < data.length / 2) {\n            bytes32 symbol = bytes32(data[i * 2]);\n            uint rate = data[i * 2 + 1];\n            rates[symbol] = rate;\n            emit RateUpdated(now, symbol, rate);\n            i++;\n        }\n    }\n\n    /**\n     * @dev Allows the anyone to read the current rate.\n     * @param _symbol the symbol to be retrieved.\n     */\n    function getRate(string memory _symbol) public view returns(uint) {\n        return rates[keccak256(abi.encodePacked(_symbol))];\n    }\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20Basic {\n    uint public totalSupply;\n    function balanceOf(address who) public view returns (uint);\n    function transfer(address to, uint value) public;\n    event Transfer(address indexed from, address indexed to, uint value);\n}\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) view public returns (uint);\n    function transferFrom(address from, address to, uint value) public;\n    function approve(address spender, uint value) public;\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint;\n\n    mapping(address => uint) balances;\n\n    /**\n     * @dev Fix for the ERC20 short address attack.\n     */\n    modifier onlyPayloadSize(uint size) {\n        require (size + 4 <= msg.data.length);\n        _;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) view public returns (uint balance) {\n        return balances[_owner];\n    }\n\n}\n\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implemantation of the basic standart token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is BasicToken, ERC20 {\n\n    mapping (address => mapping (address => uint)) allowed;\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint the amout of tokens to be transfered\n     */\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\n        uint256 _allowance = allowed[_from][msg.sender];\n\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n        // if (_value > _allowance) throw;\n\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        emit Transfer(_from, _to, _value);\n    }\n\n    /**\n     * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint _value) public {\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\n\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n    }\n\n    /**\n     * @dev Function to check the amount of tokens than an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint specifing the amount of tokens still avaible for the spender.\n     */\n    function allowance(address _owner, address _spender) view public returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n\n}\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n    event Mint(address indexed to, uint value);\n    event MintFinished();\n    event Burn(address indexed burner, uint256 value);\n\n    bool public mintingFinished = false;\n    uint public totalSupply = 0;\n\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will recieve the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint _amount) onlyOwner canMint public returns (bool) {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        return true;\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     * @return True if the operation was successful.\n     */\n    function finishMinting() onlyOwner public returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(address _who, uint256 _value) onlyOwner public {\n        _burn(_who, _value);\n    }\n\n    function _burn(address _who, uint256 _value) internal {\n        require(_value <= balances[_who]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        balances[_who] = balances[_who].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(_who, _value);\n        emit Transfer(_who, address(0), _value);\n    }\n}\n\n\n/**\n * @title CBCToken\n * @dev The main CBC token contract\n *\n * ABI\n * [{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]\n */\ncontract CBCToken is MintableToken {\n\n    string public name = \"Crypto Boss Coin\";\n    string public symbol = \"CBC\";\n    uint public decimals = 18;\n\n    bool public tradingStarted = false;\n    /**\n     * @dev modifier that throws if trading has not started yet\n     */\n    modifier hasStartedTrading() {\n        require(tradingStarted);\n        _;\n    }\n\n\n    /**\n     * @dev Allows the owner to enable the trading. This can not be undone\n     */\n    function startTrading() onlyOwner public {\n        tradingStarted = true;\n    }\n\n    /**\n     * @dev Allows anyone to transfer the PAY tokens once trading has started\n     * @param _to the recipient address of the tokens.\n     * @param _value number of tokens to be transfered.\n     */\n    function transfer(address _to, uint _value) hasStartedTrading public {\n        super.transfer(_to, _value);\n    }\n\n    /**\n    * @dev Allows anyone to transfer the CBC tokens once trading has started\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint the amout of tokens to be transfered\n    */\n    function transferFrom(address _from, address _to, uint _value) hasStartedTrading public{\n        super.transferFrom(_from, _to, _value);\n    }\n\n}\n\n/**\n * @title MainSale\n * @dev The main CBC token sale contract\n *\n * ABI\n * [{\"constant\":false,\"inputs\":[{\"name\":\"_multisigVault\",\"type\":\"address\"}],\"name\":\"setMultisigVault\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"authorizerIndex\",\"type\":\"uint256\"}],\"name\":\"getAuthorizer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"altDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"authorizedCreateTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeRate\",\"type\":\"address\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"totalAltDeposits\",\"type\":\"uint256\"}],\"name\":\"setAltDeposit\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":!1,\"inputs\":[{\"name\":\"victim\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":!1,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hardcap\",\"type\":\"uint256\"}],\"name\":\"setHardCap\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ether_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pay_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"exchangerate\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pay_amount\",\"type\":\"uint256\"}],\"name\":\"AuthorizedCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MainSaleClosed\",\"type\":\"event\"}]\n */\ncontract MainSale is Ownable, Authorizable {\n    using SafeMath for uint;\n    event TokenSold(address recipient, uint ether_amount, uint pay_amount, uint exchangerate);\n    event AuthorizedCreate(address recipient, uint pay_amount);\n    event AuthorizedBurn(address receiver, uint value);\n    event AuthorizedStartTrading();\n    event MainSaleClosed();\n    CBCToken public token = new CBCToken();\n\n    address payable public multisigVault;\n\n    uint hardcap = 100000000000000 ether;\n    ExchangeRate public exchangeRate;\n\n    uint public altDeposits = 0;\n    uint public start = 1525996800;\n\n    /**\n     * @dev modifier to allow token creation only when the sale IS ON\n     */\n    modifier saleIsOn() {\n        require(now > start && now < start + 28 days);\n        _;\n    }\n\n    /**\n     * @dev modifier to allow token creation only when the hardcap has not been reached\n     */\n    modifier isUnderHardCap() {\n        require(multisigVault.balance + altDeposits <= hardcap);\n        _;\n    }\n\n    /**\n     * @dev Allows anyone to create tokens by depositing ether.\n     * @param recipient the recipient to receive tokens.\n     */\n    function createTokens(address recipient) public isUnderHardCap saleIsOn payable {\n        uint rate = exchangeRate.getRate(\"ETH\");\n        uint tokens = rate.mul(msg.value).div(1 ether);\n        token.mint(recipient, tokens);\n        require(multisigVault.send(msg.value));\n        emit TokenSold(recipient, msg.value, tokens, rate);\n    }\n\n    /**\n     * @dev Allows to set the toal alt deposit measured in ETH to make sure the hardcap includes other deposits\n     * @param totalAltDeposits total amount ETH equivalent\n     */\n    function setAltDeposit(uint totalAltDeposits) public onlyOwner {\n        altDeposits = totalAltDeposits;\n    }\n\n    /**\n     * @dev Allows authorized acces to create tokens. This is used for Bitcoin and ERC20 deposits\n     * @param recipient the recipient to receive tokens.\n     * @param tokens number of tokens to be created.\n     */\n    function authorizedCreateTokens(address recipient, uint tokens) public onlyAuthorized {\n        token.mint(recipient, tokens);\n        emit AuthorizedCreate(recipient, tokens);\n    }\n\n    function authorizedStartTrading() public onlyAuthorized {\n        token.startTrading();\n        emit AuthorizedStartTrading();\n    }\n\n    /**\n     * @dev Allows authorized acces to burn tokens.\n     * @param receiver the receiver to receive tokens.\n     * @param value number of tokens to be created.\n     */\n    function authorizedBurnTokens(address receiver, uint value) public onlyAuthorized {\n        token.burn(receiver, value);\n        emit AuthorizedBurn(receiver, value);\n    }\n\n    /**\n     * @dev Allows the owner to set the hardcap.\n     * @param _hardcap the new hardcap\n     */\n    function setHardCap(uint _hardcap) public onlyOwner {\n        hardcap = _hardcap;\n    }\n\n    /**\n     * @dev Allows the owner to set the starting time.\n     * @param _start the new _start\n     */\n    function setStart(uint _start) public onlyOwner {\n        start = _start;\n    }\n\n    /**\n     * @dev Allows the owner to set the multisig contract.\n     * @param _multisigVault the multisig contract address\n     */\n    function setMultisigVault(address payable _multisigVault) public onlyOwner {\n        if (_multisigVault != address(0)) {\n            multisigVault = _multisigVault;\n        }\n    }\n\n    /**\n     * @dev Allows the owner to set the exchangerate contract.\n     * @param _exchangeRate the exchangerate address\n     */\n    function setExchangeRate(address _exchangeRate) public onlyOwner {\n        exchangeRate = ExchangeRate(_exchangeRate);\n    }\n\n    /**\n     * @dev Allows the owner to finish the minting. This will create the\n     * restricted tokens and then close the minting.\n     * Then the ownership of the PAY token contract is transfered\n     * to this owner.\n     */\n    function finishMinting() public onlyOwner {\n        uint issuedTokenSupply = token.totalSupply();\n        uint restrictedTokens = issuedTokenSupply.mul(49).div(51);\n        token.mint(multisigVault, restrictedTokens);\n        token.finishMinting();\n        token.transferOwnership(owner);\n        emit MainSaleClosed();\n    }\n\n    /**\n     * @dev Allows the owner to transfer ERC20 tokens to the multi sig vault\n     * @param _token the contract address of the ERC20 contract\n     */\n    function retrieveTokens(address _token) public onlyOwner {\n        ERC20 token = ERC20(_token);\n        token.transfer(multisigVault, token.balanceOf(address(this)));\n    }\n\n    /**\n     * @dev Fallback function which receives ether and created the appropriate number of tokens for the\n     * msg.sender.\n     */\n    function() external payable {\n        createTokens(msg.sender);\n    }\n\n}",
  "bytecode": "60806040526010805460ff1916905534801561001a57600080fd5b50426203f480810160025562093a80016003556115b18061003c6000396000f3fe6080604052600436106101605760e060020a6000350463058c6ed181146106cd57806312d65fd9146106f457806312f4ced1146107275780631865c57d1461073c5780632450a991146107655780632acf42171461077a578063327fee98146107ad578063353fe20c146107c257806336d7ac39146107d75780634a78cdba146107ec5780635a2215de1461080157806364aa7dab146108165780636a3480a0146108495780636cae4a8f1461087c578063721ec693146108ad57806372f35f9e146108c257806389db3d20146108d75780638e5e66c8146108ec578063914dea931461091f578063a512472514610958578063a80a8cf91461096d578063a964eb0814610982578063bbe4fd50146109b5578063bef4876b146109ca578063c922d4d5146109df578063d3cd90ee146109f4578063d4830cd814610a27578063daf2917e14610a3c578063df15c37e14610a51578063dfbf53ae14610a66575b341580156101735750610171610a7b565b155b801561018157506000600f54115b156106cb573360009081526020819052604081205411806101af575033600090815260016020526040812054115b15156101ba57600080fd5b600f54600090819060011480156101de575033600090815260208190526040812054115b156101ef576101ec33610a96565b91505b600f54600214801561020e575033600090815260016020526040812054115b1561021f5761021c33610a96565b91505b6000821115610270573360008181526020818152604080832083905560019091528082208290555184156108fc0291859190818181858888f1935050505015801561026e573d6000803e3d6000fd5b505b600f54600114801561028f575033600090815260208190526040902054155b806102b45750600f5460021480156102b4575033600090815260016020526040902054155b15610653576102c233610b71565b6012546011546040805160e060020a6370a08231028152600160a060020a039283166004820152905193945060009391909216916370a08231916024808301926020929190829003018186803b15801561031b57600080fd5b505afa15801561032f573d6000803e3d6000fd5b505050506040513d602081101561034557600080fd5b50511115610445576012546011546040805160e060020a6370a08231028152600160a060020a0392831660048201819052915192909316926323b872dd92309185916370a0823191602480820192602092909190829003018186803b1580156103ad57600080fd5b505afa1580156103c1573d6000803e3d6000fd5b505050506040513d60208110156103d757600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03948516600482015292909316602483015260448201529051606480830192600092919082900301818387803b15801561042c57600080fd5b505af1158015610440573d6000803e3d6000fd5b505050505b6012546010546040805160e060020a6370a08231028152610100909204600160a060020a039081166004840152905160009391909116916370a08231916024808301926020929190829003018186803b1580156104a157600080fd5b505afa1580156104b5573d6000803e3d6000fd5b505050506040513d60208110156104cb57600080fd5b505111156105ce576012546010546040805160e060020a6370a08231028152610100909204600160a060020a039081166004840181905291519316926323b872dd92309185916370a08231916024808301926020929190829003018186803b15801561053657600080fd5b505afa15801561054a573d6000803e3d6000fd5b505050506040513d602081101561056057600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03948516600482015292909316602483015260448201529051606480830192600092919082900301818387803b1580156105b557600080fd5b505af11580156105c9573d6000803e3d6000fd5b505050505b601254604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018490529051600160a060020a039092169163a9059cbb9160448082019260009290919082900301818387803b15801561063a57600080fd5b505af115801561064e573d6000803e3d6000fd5b505050505b600c54600160a060020a03163314156106c857600c8054600d805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055600e54604051339180156108fc02916000818181858888f193505050501580156106c6573d6000803e3d6000fd5b505b50505b005b3480156106d957600080fd5b506106e2610ba7565b60408051918252519081900360200190f35b34801561070057600080fd5b506106cb6004803603602081101561071757600080fd5b5035600160a060020a0316610bad565b34801561073357600080fd5b506106e2610bf2565b34801561074857600080fd5b50610751610a7b565b604080519115158252519081900360200190f35b34801561077157600080fd5b506106e2610bf8565b34801561078657600080fd5b506106cb6004803603602081101561079d57600080fd5b5035600160a060020a0316610bfe565b3480156107b957600080fd5b506106e2610c4e565b3480156107ce57600080fd5b506106e2610c54565b3480156107e357600080fd5b506106e2610c5a565b3480156107f857600080fd5b506106e2610c60565b34801561080d57600080fd5b506106e2610c66565b34801561082257600080fd5b506106e26004803603602081101561083957600080fd5b5035600160a060020a0316610c6c565b34801561085557600080fd5b506106e26004803603602081101561086c57600080fd5b5035600160a060020a0316610c7e565b34801561088857600080fd5b50610891610c90565b60408051600160a060020a039092168252519081900360200190f35b3480156108b957600080fd5b506106e2610c9f565b3480156108ce57600080fd5b50610891610ca5565b3480156108e357600080fd5b506106e2610cb9565b3480156108f857600080fd5b506106e26004803603602081101561090f57600080fd5b5035600160a060020a0316610a96565b34801561092b57600080fd5b506106cb6004803603604081101561094257600080fd5b50600160a060020a038135169060200135610cbf565b34801561096457600080fd5b506106e261100a565b34801561097957600080fd5b50610891611010565b34801561098e57600080fd5b506106e2600480360360208110156109a557600080fd5b5035600160a060020a0316610b71565b3480156109c157600080fd5b506106e261101f565b3480156109d657600080fd5b50610751611023565b3480156109eb57600080fd5b506106cb61102c565b348015610a0057600080fd5b506106cb60048036036020811015610a1757600080fd5b5035600160a060020a03166113bc565b348015610a3357600080fd5b50610891611401565b348015610a4857600080fd5b50610891611410565b348015610a5d57600080fd5b506106cb61141f565b348015610a7257600080fd5b506106e2611500565b6000600254421115610a8f57506000610a93565b5060015b90565b60065460075460009182918291610ab3919063ffffffff61150616565b600160a060020a0385166000908152602081905260408120549192501015610b1657600754600160a060020a038516600090815260208190526040902054610b139190610b0790849063ffffffff61152116565b9063ffffffff61154c16565b91505b600160a060020a0384166000908152600160205260408120541115610b6a57600654600160a060020a038516600090815260016020526040902054610b679190610b0790849063ffffffff61152116565b91505b5092915050565b600080600090506000610ab36064610b076050610b9b60085460095461150690919063ffffffff16565b9063ffffffff61152116565b60055481565b601154600160a060020a031615610bc357600080fd5b6011805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60075481565b60085481565b6010546101009004600160a060020a031615610c1957600080fd5b60108054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b600b5481565b600a5481565b60045481565b600e5481565b60065481565b60006020819052908152604090205481565b60016020526000908152604090205481565b600c54600160a060020a031681565b60025481565b6010546101009004600160a060020a031681565b60035481565b6010546101009004600160a060020a0316331480610ce75750601154600160a060020a031633145b1515610cf257600080fd5b6010546101009004600160a060020a0316331415610e3b57600160a060020a03821660009081526001602052604090205415610d8f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f596f752061726520616c726561647920696e2062756c6c73207465616d000000604482015290519081900360640190fd5b600160a060020a0382166000908152602081905260409020541515610db8576004805460010190555b610de0610dd16064610b0784605a63ffffffff61152116565b6007549063ffffffff61150616565b600755610e21610dfc6064610b0784605a63ffffffff61152116565b600160a060020a0384166000908152602081905260409020549063ffffffff61150616565b600160a060020a0383166000908152602081905260409020555b601154600160a060020a0316331415610f7f57600160a060020a03821660009081526020819052604090205415610ed357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f596f752061726520616c726561647920696e206265617273207465616d000000604482015290519081900360640190fd5b600160a060020a0382166000908152600160205260409020541515610efc576005805460010190555b610f24610f156064610b0784605a63ffffffff61152116565b6006549063ffffffff61150616565b600655610f65610f406064610b0784605a63ffffffff61152116565b600160a060020a0384166000908152600160205260409020549063ffffffff61150616565b600160a060020a0383166000908152600160205260409020555b600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038416179055600354600254610fb8906078611506565b11610fd957600254610fd190607863ffffffff61150616565b600255610fe0565b6003546002555b610ffb6064610b07600a610b9b30318663ffffffff61150616565b600e5561100661102c565b5050565b60095481565b600d54600160a060020a031681565b4290565b60105460ff1681565b600f5415801561103f575061103f610a7b565b151561104a57600080fd5b6012546011546040805160e060020a6370a08231028152600160a060020a039283166004820152905191909216916370a08231916024808301926020929190829003018186803b15801561109d57600080fd5b505afa1580156110b1573d6000803e3d6000fd5b505050506040513d60208110156110c757600080fd5b50516008556012546010546040805160e060020a6370a08231028152610100909204600160a060020a03908116600484015290519216916370a0823191602480820192602092909190829003018186803b15801561112457600080fd5b505afa158015611138573d6000803e3d6000fd5b505050506040513d602081101561114e57600080fd5b505160095560075460065460009161117391606491610b07919063ffffffff61150616565b9050670de0b6b3a7640000600854101561118d5760006008555b670de0b6b3a764000060095410156111a55760006009555b600954600854116112385760006111d4662386f26fc10000610b0760085460095461157090919063ffffffff16565b9050611200816111f484610b07606460075461152190919063ffffffff16565b9063ffffffff61150616565b600b819055611f40101561121557611f40600b555b6107d0600b541015611228576107d0600b555b50600b5461271003600a556112b0565b600061125c662386f26fc10000610b0760095460085461157090919063ffffffff16565b905061127c816111f484610b07606460065461152190919063ffffffff16565b600a819055611f40101561129157611f40600a555b6107d0600a5410156112a4576107d0600a555b50600a5461271003600b555b6012546011546040805160e060020a6370a08231028152600160a060020a039283166004820152905191909216916370a08231916024808301926020929190829003018186803b15801561130357600080fd5b505afa158015611317573d6000803e3d6000fd5b505050506040513d602081101561132d57600080fd5b50516008556012546010546040805160e060020a6370a08231028152610100909204600160a060020a03908116600484015290519216916370a0823191602480820192602092909190829003018186803b15801561138a57600080fd5b505afa15801561139e573d6000803e3d6000fd5b505050506040513d60208110156113b457600080fd5b505160095550565b601254600160a060020a0316156113d257600080fd5b6012805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b601254600160a060020a031681565b601154600160a060020a031681565b600f541580156114345750611432610a7b565b155b151561143f57600080fd5b6006546007546008546040805130316020808301829052828401879052606083018690526080830185905260a083018590524460c084018190524260e080860182905286518087039091018152610100909501909552835193909101929092209095949392839291808015156114b3575060015b6127108106600181108015906114cb5750600b548111155b156114d6576001600f555b80600b541080156114e957506127108111155b156114f4576002600f555b50505050505050505050565b600f5481565b60008282018381101561151857600080fd5b90505b92915050565b60008215156115325750600061151b565b82820282848281151561154157fe5b041461151857600080fd5b600080821161155a57600080fd5b6000828481151561156757fe5b04949350505050565b60008282111561157f57600080fd5b5090039056fea165627a7a72305820dadb6fddc35f77ab3595618843934e09d14cbe2f1a1d18e4b56a6fdc57bd90090029"
}