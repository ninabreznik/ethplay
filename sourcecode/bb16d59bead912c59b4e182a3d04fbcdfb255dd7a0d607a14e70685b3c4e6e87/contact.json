{
  "address": "0x54186df214506ff5613196170d1bd576895193ab",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "BitcoinPeso: Old Token",
  "contractName": "BTCPToken",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-22\n*/\n\npragma solidity ^0.4.11;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract IERC20 {\n\n    function totalSupply() public constant returns (uint256);\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public;\n    function transferFrom(address from, address to, uint256 value) public;\n    function approve(address spender, uint256 value) public;\n    function allowance(address owner, address spender) public constant returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}\n\ncontract BTCPToken is IERC20 {\n\n    using SafeMath for uint256;\n\n    // Token properties\n    string public name = \"BitcoinPeso\";\n    string public symbol = \"BTCP\";\n    uint public decimals = 18;\n\n    uint public _totalSupply = 21000000e18;\n    uint public _leftSupply = 21000000e18;\n\n    // Balances for each account\n    mapping (address => uint256) balances;\n\n    // Owner of account approves the transfer of an amount to another account\n    mapping (address => mapping(address => uint256)) allowed;\n\n    uint256 public startTime;\n\n    // Owner of Token\n    address public owner;\n\n    // how many token units a buyer gets per wei\n    uint public PRICE = 1000;\n\n    // amount of raised money in wei\n\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    // modifier to allow only owner has full control on the function\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    // Constructor\n    // @notice BTCPToken Contract\n    // @return the transaction address\n    function BTCPToken() public payable {\n        startTime = now;\n        owner = msg.sender;\n\n        balances[owner] = _totalSupply; \n    }\n\n    // Payable method\n    // @notice Anyone can buy the tokens on tokensale by paying ether\n    function () public payable {\n        tokensale(msg.sender);\n    }\n\n    // @notice tokensale\n    // @param recipient The address of the recipient\n    // @return the transaction address and send the event as Transfer\n    function tokensale(address recipient) public payable {\n        require(recipient != 0x0);\n\n        uint256 weiAmount = msg.value;\n        uint tokens = weiAmount.mul(getPrice());\n\n        require(_leftSupply >= tokens);\n\n        balances[owner] = balances[owner].sub(tokens);\n        balances[recipient] = balances[recipient].add(tokens);\n\n        _leftSupply = _leftSupply.sub(tokens);\n\n        TokenPurchase(msg.sender, recipient, weiAmount, tokens);\n    }\n\n    // @return total tokens supplied\n    function totalSupply() public constant returns (uint256) {\n        return _totalSupply;\n    }\n\n    // What is the balance of a particular account?\n    // @param who The address of the particular account\n    // @return the balanace the particular account\n    function balanceOf(address who) public constant returns (uint256) {\n        return balances[who];\n    }\n\n    // Token distribution to founder, develoment team, partners, charity, and bounty\n    function sendBTCPToken(address to, uint256 value) public onlyOwner {\n        require (\n            to != 0x0 && value > 0 && _leftSupply >= value\n        );\n\n        balances[owner] = balances[owner].sub(value);\n        balances[to] = balances[to].add(value);\n        _leftSupply = _leftSupply.sub(value);\n        Transfer(owner, to, value);\n    }\n\n    function sendBTCPTokenToMultiAddr(address[] listAddresses, uint256[] amount) onlyOwner {\n        require(listAddresses.length == amount.length); \n         for (uint256 i = 0; i < listAddresses.length; i++) {\n                require(listAddresses[i] != 0x0); \n                balances[listAddresses[i]] = balances[listAddresses[i]].add(amount[i]);\n                balances[owner] = balances[owner].sub(amount[i]);\n                Transfer(owner, listAddresses[i], amount[i]);\n                _leftSupply = _leftSupply.sub(amount[i]);\n         }\n    }\n\n    function destroyBTCPToken(address to, uint256 value) public onlyOwner {\n        require (\n                to != 0x0 && value > 0 && _totalSupply >= value\n            );\n        balances[to] = balances[to].sub(value);\n    }\n\n    // @notice send `value` token to `to` from `msg.sender`\n    // @param to The address of the recipient\n    // @param value The amount of token to be transferred\n    // @return the transaction address and send the event as Transfer\n    function transfer(address to, uint256 value) public {\n        require (\n            balances[msg.sender] >= value && value > 0\n        );\n        balances[msg.sender] = balances[msg.sender].sub(value);\n        balances[to] = balances[to].add(value);\n        Transfer(msg.sender, to, value);\n    }\n\n    // @notice send `value` token to `to` from `from`\n    // @param from The address of the sender\n    // @param to The address of the recipient\n    // @param value The amount of token to be transferred\n    // @return the transaction address and send the event as Transfer\n    function transferFrom(address from, address to, uint256 value) public {\n        require (\n            allowed[from][msg.sender] >= value && balances[from] >= value && value > 0\n        );\n        balances[from] = balances[from].sub(value);\n        balances[to] = balances[to].add(value);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n        Transfer(from, to, value);\n    }\n\n    // Allow spender to withdraw from your account, multiple times, up to the value amount.\n    // If this function is called again it overwrites the current allowance with value.\n    // @param spender The address of the sender\n    // @param value The amount to be approved\n    // @return the transaction address and send the event as Approval\n    function approve(address spender, uint256 value) public {\n        require (\n            balances[msg.sender] >= value && value > 0\n        );\n        allowed[msg.sender][spender] = value;\n        Approval(msg.sender, spender, value);\n    }\n\n    // Check the allowed value for the spender to withdraw from owner\n    // @param owner The address of the owner\n    // @param spender The address of the spender\n    // @return the amount which spender is still allowed to withdraw from owner\n    function allowance(address _owner, address spender) public constant returns (uint256) {\n        return allowed[_owner][spender];\n    }\n\n    // Get current price of a Token\n    // @return the price or token value for a ether\n    function getPrice() public constant returns (uint result) {\n        return PRICE;\n    }\n\n    function getTokenDetail() public constant returns (string, string, uint256) {\n\treturn (name, symbol, _totalSupply);\n    }\n}",
  "bytecode": "6060604052604060405190810160405280600b81526020017f426974636f696e5065736f000000000000000000000000000000000000000000815250600090805190602001906200005292919062000183565b50604060405190810160405280600481526020017f425443500000000000000000000000000000000000000000000000000000000081525060019080519060200190620000a192919062000183565b5060126002556a115eec47f6cf7e350000006003556a115eec47f6cf7e350000006004556103e86009555b4260078190555033600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060035460056000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b62000232565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001c657805160ff1916838001178555620001f7565b82800160010185558215620001f7579182015b82811115620001f6578251825591602001919060010190620001d9565b5b5090506200020691906200020a565b5090565b6200022f91905b808211156200022b57600081600090555060010162000211565b5090565b90565b611c9380620002426000396000f30060606040523615610110576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610122578063095ea7b3146101bb57806314a9e993146101fa57806316aa85081461023957806318160ddd1461025f57806323b872dd14610285578063289de615146102e3578063313ce567146103fd5780633eaaf86b14610423578063489be7cb1461044957806370a082311461048857806378e97925146104d25780638d859f3e146104f85780638da5cb5b1461051e57806395d89b411461057057806398d5fdca14610609578063a9059cbb1461062f578063b113d9dc1461066e578063ba27057b1461069c578063dd62ed3e14610733575b6101205b61011d3361079c565b5b565b005b341561012a57fe5b6101326109f4565b6040518080602001828103825283818151815260200191508051906020019080838360008314610181575b8051825260208311156101815760208201915060208101905060208303925061015d565b505050905090810190601f1680156101ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101c357fe5b6101f8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a92565b005b341561020257fe5b610237600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bd8565b005b341561024157fe5b610249610e8c565b6040518082815260200191505060405180910390f35b341561026757fe5b61026f610e92565b6040518082815260200191505060405180910390f35b341561028d57fe5b6102e1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e9d565b005b34156102eb57fe5b6102f3611224565b60405180806020018060200184815260200183810383528681815181526020019150805190602001908083836000831461034c575b80518252602083111561034c57602082019150602081019050602083039250610328565b505050905090810190601f1680156103785780820380516001836020036101000a031916815260200191505b508381038252858181518152602001915080519060200190808383600083146103c0575b8051825260208311156103c05760208201915060208101905060208303925061039c565b505050905090810190601f1680156103ec5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b341561040557fe5b61040d611381565b6040518082815260200191505060405180910390f35b341561042b57fe5b610433611387565b6040518082815260200191505060405180910390f35b341561045157fe5b610486600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061138d565b005b341561049057fe5b6104bc600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506114c6565b6040518082815260200191505060405180910390f35b34156104da57fe5b6104e2611510565b6040518082815260200191505060405180910390f35b341561050057fe5b610508611516565b6040518082815260200191505060405180910390f35b341561052657fe5b61052e61151c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561057857fe5b610580611542565b60405180806020018281038252838181518152602001915080519060200190808383600083146105cf575b8051825260208311156105cf576020820191506020810190506020830392506105ab565b505050905090810190601f1680156105fb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561061157fe5b6106196115e0565b6040518082815260200191505060405180910390f35b341561063757fe5b61066c600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506115eb565b005b61069a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061079c565b005b34156106a457fe5b610731600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506117da565b005b341561073b57fe5b610786600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611b5c565b6040518082815260200191505060405180910390f35b6000600060008373ffffffffffffffffffffffffffffffffffffffff16141515156107c75760006000fd5b3491506107e46107d56115e0565b83611be490919063ffffffff16565b905080600454101515156107f85760006000fd5b61086c8160056000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c1990919063ffffffff16565b60056000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061092381600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c3390919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061097b81600454611c1990919063ffffffff16565b6004819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188484604051808381526020018281526020019250505060405180910390a35b505050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a8a5780601f10610a5f57610100808354040283529160200191610a8a565b820191906000526020600020905b815481529060010190602001808311610a6d57829003601f168201915b505050505081565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610ae15750600081115b1515610aed5760006000fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c355760006000fd5b60008273ffffffffffffffffffffffffffffffffffffffff1614158015610c5c5750600081115b8015610c6a57508060045410155b1515610c765760006000fd5b610cea8160056000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c1990919063ffffffff16565b60056000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610da181600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c3390919063ffffffff16565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610df981600454611c1990919063ffffffff16565b6004819055508173ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5b5050565b60045481565b600060035490505b90565b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610f68575080600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610f745750600081115b1515610f805760006000fd5b610fd281600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c1990919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061106781600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c3390919063ffffffff16565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061113981600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c1990919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b505050565b61122c611c53565b611234611c53565b600060006001600354828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112d25780601f106112a7576101008083540402835291602001916112d2565b820191906000526020600020905b8154815290600101906020018083116112b557829003601f168201915b50505050509250818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561136e5780601f106113435761010080835404028352916020019161136e565b820191906000526020600020905b81548152906001019060200180831161135157829003601f168201915b505050505091509250925092505b909192565b60025481565b60035481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113ea5760006000fd5b60008273ffffffffffffffffffffffffffffffffffffffff16141580156114115750600081115b801561141f57508060035410155b151561142b5760006000fd5b61147d81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c1990919063ffffffff16565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b5050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60075481565b60095481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115d85780601f106115ad576101008083540402835291602001916115d8565b820191906000526020600020905b8154815290600101906020018083116115bb57829003601f168201915b505050505081565b600060095490505b90565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561163a5750600081115b15156116465760006000fd5b61169881600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c1990919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061172d81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c3390919063ffffffff16565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118395760006000fd5b8151835114151561184a5760006000fd5b600090505b8251811015611b55576000838281518110151561186857fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16141515156118965760006000fd5b61191682828151811015156118a757fe5b906020019060200201516005600086858151811015156118c357fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c3390919063ffffffff16565b60056000858481518110151561192857fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506119fb828281518110151561198157fe5b9060200190602002015160056000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c1990919063ffffffff16565b60056000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508281815181101515611a6e57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8484815181101515611af657fe5b906020019060200201516040518082815260200191505060405180910390a3611b418282815181101515611b2657fe5b90602001906020020151600454611c1990919063ffffffff16565b6004819055505b808060010191505061184f565b5b5b505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b6000600082840290506000841480611c065750828482811515611c0357fe5b04145b1515611c0e57fe5b8091505b5092915050565b6000828211151515611c2757fe5b81830390505b92915050565b600060008284019050838110151515611c4857fe5b8091505b5092915050565b6020604051908101604052806000815250905600a165627a7a72305820b599555edb87870cb8903f8d834b2db8fbec8d5969237f65d384daed38e15b270029"
}