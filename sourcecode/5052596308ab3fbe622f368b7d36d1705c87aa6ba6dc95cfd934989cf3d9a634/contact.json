{
  "address": "0x5fe4b212422fa42448c84e8a996f8a46f17cef0d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ENSATOKEN",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-30\n*/\n\npragma solidity ^0.4.18;\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ENSATOKEN is ERC20,Ownable{\n\tusing SafeMath for uint256;\n\tstring public constant name=\"Energy Saving Chain \";\n\tstring public symbol=\"ENSA\";\n\tstring public constant version = \"1.0\";\n\tuint256 public constant decimals = 18;\n\tuint256 public totalSupply;\n\tuint256 public constant MAX_SUPPLY=2100000000*10**decimals;\n  mapping(address => uint256) balances;\n\tmapping (address => mapping (address => uint256)) allowed;\n\n\tevent GetETH(address indexed _from, uint256 _value);\n\n\tfunction ENSATOKEN() public {\n\t\ttotalSupply=MAX_SUPPLY;\n\t\tbalances[msg.sender] = MAX_SUPPLY;\n\t\tTransfer(0x0, msg.sender, MAX_SUPPLY);\n\t}\n\n\tfunction () payable external\n\t{\n\t\tGetETH(msg.sender,msg.value);\n\t}\n\n\tfunction etherProceeds() external\n\t\tonlyOwner\n\t{\n\t\tif(!msg.sender.send(this.balance)) revert();\n\t}\n\n  \tfunction transfer(address _to, uint256 _value) public  returns (bool)\n \t{\n\t\trequire(_to != address(0));\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tTransfer(msg.sender, _to, _value);\n\t\treturn true;\n  \t}\n\n  \tfunction balanceOf(address _owner) public constant returns (uint256 balance) \n  \t{\n\t\treturn balances[_owner];\n  \t}\n\n  \tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) \n  \t{\n\t\trequire(_to != address(0));\n\t\tuint256 _allowance = allowed[_from][msg.sender];\n\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\n\t\tTransfer(_from, _to, _value);\n\t\treturn true;\n  \t}\n\n  \tfunction approve(address _spender, uint256 _value) public returns (bool) \n  \t{\n\t\tallowed[msg.sender][_spender] = _value;\n\t\tApproval(msg.sender, _spender, _value);\n\t\treturn true;\n  \t}\n\n  \tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) \n  \t{\n\t\treturn allowed[_owner][_spender];\n  \t}\n}",
  "bytecode": "606060405260408051908101604052600481527f454e5341000000000000000000000000000000000000000000000000000000006020820152600290805161004b9291602001906100d1565b50341561005757600080fd5b60018054600160a060020a03191633600160a060020a03169081179091556b06c9144c1c690d4cb4000000600381905560008281526004602052604080822083905590917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef915190815260200160405180910390a361016c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011257805160ff191683800117855561013f565b8280016001018555821561013f579182015b8281111561013f578251825591602001919060010190610124565b5061014b92915061014f565b5090565b61016991905b8082111561014b5760008155600101610155565b90565b6108618061017b6000396000f3006060604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461010e578063095ea7b31461019857806318160ddd146101ce57806323b872dd146101f3578063313ce5671461021b57806332cb6b0c1461022e57806354fd4d501461024157806370a0823114610254578063801aba56146102735780638da5cb5b1461028857806395d89b41146102b7578063a9059cbb146102ca578063dd62ed3e146102ec578063f2fde38b14610311575b33600160a060020a03167f59cbf1251d8592510b5a3df66c42ab0664604d319dcd3202a097a04a1cfbda083460405190815260200160405180910390a2005b341561011957600080fd5b610121610330565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561015d578082015183820152602001610145565b50505050905090810190601f16801561018a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101a357600080fd5b6101ba600160a060020a0360043516602435610367565b604051901515815260200160405180910390f35b34156101d957600080fd5b6101e16103d3565b60405190815260200160405180910390f35b34156101fe57600080fd5b6101ba600160a060020a03600435811690602435166044356103d9565b341561022657600080fd5b6101e1610503565b341561023957600080fd5b6101e1610508565b341561024c57600080fd5b610121610518565b341561025f57600080fd5b6101e1600160a060020a036004351661054f565b341561027e57600080fd5b61028661056a565b005b341561029357600080fd5b61029b6105c4565b604051600160a060020a03909116815260200160405180910390f35b34156102c257600080fd5b6101216105d3565b34156102d557600080fd5b6101ba600160a060020a0360043516602435610671565b34156102f757600080fd5b6101e1600160a060020a0360043581169060243516610747565b341561031c57600080fd5b610286600160a060020a0360043516610772565b60408051908101604052601481527f456e6572677920536176696e6720436861696e20000000000000000000000000602082015281565b600160a060020a03338116600081815260056020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60035481565b600080600160a060020a03841615156103f157600080fd5b50600160a060020a03808516600081815260056020908152604080832033909516835293815283822054928252600490529190912054610437908463ffffffff61080d16565b600160a060020a03808716600090815260046020526040808220939093559086168152205461046c908463ffffffff61081f16565b600160a060020a038516600090815260046020526040902055610495818463ffffffff61080d16565b600160a060020a03808716600081815260056020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b601281565b6b06c9144c1c690d4cb400000081565b60408051908101604052600381527f312e300000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a031660009081526004602052604090205490565b60015433600160a060020a0390811691161461058557600080fd5b33600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f1935050505015156105c257600080fd5b565b600154600160a060020a031681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106695780601f1061063e57610100808354040283529160200191610669565b820191906000526020600020905b81548152906001019060200180831161064c57829003601f168201915b505050505081565b6000600160a060020a038316151561068857600080fd5b600160a060020a0333166000908152600460205260409020546106b1908363ffffffff61080d16565b600160a060020a0333811660009081526004602052604080822093909355908516815220546106e6908363ffffffff61081f16565b600160a060020a0380851660008181526004602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b60015433600160a060020a0390811691161461078d57600080fd5b600160a060020a03811615156107a257600080fd5b600154600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282111561081957fe5b50900390565b60008282018381101561082e57fe5b93925050505600a165627a7a723058208d8c40dd50cca482b048af06cbad8d0d09a316bb1c7c64a3a39e6e37963de7dc0029"
}