{
  "address": "0x7c33abe7c6d0cb7cdb1a9546780fafa696c9cb99",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ControllerContract",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-17\n*/\n\npragma solidity ^0.4.24;\n\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// ----------------------------------------------------------------------------\n// Ownable contract\n// ----------------------------------------------------------------------------\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n}\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  event OwnershipTransferPending(address indexed owner, address indexed pendingOwner);\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    emit OwnershipTransferPending(owner, pendingOwner);\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner public {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\n// ----------------------------------------------------------------------------\n// Pausable contract\n// ----------------------------------------------------------------------------\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Claimable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// ----------------------------------------------------------------------------\n// Administratable contract\n// ----------------------------------------------------------------------------\n/**\n * @title Administratable\n * @dev The Admin contract has the list of admin addresses.\n */\ncontract Administratable is Claimable {\n  struct MintStruct {\n    uint256 mintedTotal;\n    uint256 lastMintTimestamp;\n  }\n\n  struct BurnStruct {\n    uint256 burntTotal;\n    uint256 lastBurnTimestamp;\n  }\n\n  mapping(address => bool) public admins;\n  mapping(address => MintStruct) public mintLimiter;\n  mapping(address => BurnStruct) public burnLimiter;\n\n  event AdminAddressAdded(address indexed addr);\n  event AdminAddressRemoved(address indexed addr);\n\n\n  /**\n   * @dev Throws if called by any account that's not admin or owner.\n   */\n  modifier onlyAdmin() {\n    require(admins[msg.sender] || msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev add an address to the admin list\n   * @param addr address\n   * @return true if the address was added to the admin list, false if the address was already in the admin list\n   */\n  function addAddressToAdmin(address addr) onlyOwner public returns(bool success) {\n    if (!admins[addr]) {\n      admins[addr] = true;\n      mintLimiter[addr] = MintStruct(0, 0);\n      burnLimiter[addr] = BurnStruct(0, 0);\n      emit AdminAddressAdded(addr);\n      success = true;\n    }\n  }\n\n  /**\n   * @dev remove an address from the admin list\n   * @param addr address\n   * @return true if the address was removed from the admin list,\n   * false if the address wasn't in the admin list in the first place\n   */\n  function removeAddressFromAdmin(address addr) onlyOwner public returns(bool success) {\n    if (admins[addr]) {\n      admins[addr] = false;\n      delete mintLimiter[addr];\n      delete burnLimiter[addr];\n      emit AdminAddressRemoved(addr);\n      success = true;\n    }\n  }\n}\n/**\n * @title Callable\n * @dev Extension for the Claimable contract.\n * This allows the contract only be called by certain contract.\n */\ncontract Callable is Claimable {\n  mapping(address => bool) public callers;\n\n  event CallerAddressAdded(address indexed addr);\n  event CallerAddressRemoved(address indexed addr);\n\n\n  /**\n   * @dev Modifier throws if called by any account other than the callers or owner.\n   */\n  modifier onlyCaller() {\n    require(callers[msg.sender]);\n    _;\n  }\n\n  /**\n   * @dev add an address to the caller list\n   * @param addr address\n   * @return true if the address was added to the caller list, false if the address was already in the caller list\n   */\n  function addAddressToCaller(address addr) onlyOwner public returns(bool success) {\n    if (!callers[addr]) {\n      callers[addr] = true;\n      emit CallerAddressAdded(addr);\n      success = true;\n    }\n  }\n\n  /**\n   * @dev remove an address from the caller list\n   * @param addr address\n   * @return true if the address was removed from the caller list,\n   * false if the address wasn't in the caller list in the first place\n   */\n  function removeAddressFromCaller(address addr) onlyOwner public returns(bool success) {\n    if (callers[addr]) {\n      callers[addr] = false;\n      emit CallerAddressRemoved(addr);\n      success = true;\n    }\n  }\n}\n\n// ----------------------------------------------------------------------------\n// Blacklist\n// ----------------------------------------------------------------------------\n/**\n * @title Blacklist\n * @dev The Blacklist contract has a blacklist of addresses, and provides basic authorization control functions.\n */\ncontract Blacklist is Callable {\n  mapping(address => bool) public blacklist;\n\n  function addAddressToBlacklist(address addr) onlyCaller public returns (bool success) {\n    if (!blacklist[addr]) {\n      blacklist[addr] = true;\n      success = true;\n    }\n  }\n\n  function removeAddressFromBlacklist(address addr) onlyCaller public returns (bool success) {\n    if (blacklist[addr]) {\n      blacklist[addr] = false;\n      success = true;\n    }\n  }\n}\n\n// ----------------------------------------------------------------------------\n// Verified\n// ----------------------------------------------------------------------------\n/**\n * @title Verified\n * @dev The Verified contract has a list of verified addresses.\n */\ncontract Verified is Callable {\n  mapping(address => bool) public verifiedList;\n  bool public shouldVerify = true;\n\n  function verifyAddress(address addr) onlyCaller public returns (bool success) {\n    if (!verifiedList[addr]) {\n      verifiedList[addr] = true;\n      success = true;\n    }\n  }\n\n  function unverifyAddress(address addr) onlyCaller public returns (bool success) {\n    if (verifiedList[addr]) {\n      verifiedList[addr] = false;\n      success = true;\n    }\n  }\n\n  function setShouldVerify(bool value) onlyCaller public returns (bool success) {\n    shouldVerify = value;\n    return true;\n  }\n}\n\n// ----------------------------------------------------------------------------\n// Allowance\n// ----------------------------------------------------------------------------\n/**\n * @title Allowance\n * @dev Storage for the Allowance List.\n */\ncontract Allowance is Callable {\n  using SafeMath for uint256;\n\n  mapping (address => mapping (address => uint256)) public allowanceOf;\n\n  function addAllowance(address _holder, address _spender, uint256 _value) onlyCaller public {\n    allowanceOf[_holder][_spender] = allowanceOf[_holder][_spender].add(_value);\n  }\n\n  function subAllowance(address _holder, address _spender, uint256 _value) onlyCaller public {\n    uint256 oldValue = allowanceOf[_holder][_spender];\n    if (_value > oldValue) {\n      allowanceOf[_holder][_spender] = 0;\n    } else {\n      allowanceOf[_holder][_spender] = oldValue.sub(_value);\n    }\n  }\n\n  function setAllowance(address _holder, address _spender, uint256 _value) onlyCaller public {\n    allowanceOf[_holder][_spender] = _value;\n  }\n}\n\n// ----------------------------------------------------------------------------\n// Balance\n// ----------------------------------------------------------------------------\n/**\n * @title Balance\n * @dev Storage for the Balance List.\n */\ncontract Balance is Callable {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) public balanceOf;\n\n  uint256 public totalSupply;\n\n  function addBalance(address _addr, uint256 _value) onlyCaller public {\n    balanceOf[_addr] = balanceOf[_addr].add(_value);\n  }\n\n  function subBalance(address _addr, uint256 _value) onlyCaller public {\n    balanceOf[_addr] = balanceOf[_addr].sub(_value);\n  }\n\n  function setBalance(address _addr, uint256 _value) onlyCaller public {\n    balanceOf[_addr] = _value;\n  }\n\n  function addTotalSupply(uint256 _value) onlyCaller public {\n    totalSupply = totalSupply.add(_value);\n  }\n\n  function subTotalSupply(uint256 _value) onlyCaller public {\n    totalSupply = totalSupply.sub(_value);\n  }\n}\n\n// ----------------------------------------------------------------------------\n// UserContract\n// ----------------------------------------------------------------------------\n/**\n * @title UserContract\n * @dev A contract for the blacklist and verified list modifiers.\n */\ncontract UserContract {\n  Blacklist internal _blacklist;\n  Verified internal _verifiedList;\n\n  constructor(\n    Blacklist _blacklistContract, Verified _verifiedListContract\n  ) public {\n    _blacklist = _blacklistContract;\n    _verifiedList = _verifiedListContract;\n  }\n\n\n  /**\n   * @dev Throws if the given address is blacklisted.\n   */\n  modifier onlyNotBlacklistedAddr(address addr) {\n    require(!_blacklist.blacklist(addr));\n    _;\n  }\n\n  /**\n   * @dev Throws if one of the given addresses is blacklisted.\n   */\n  modifier onlyNotBlacklistedAddrs(address[] addrs) {\n    for (uint256 i = 0; i < addrs.length; i++) {\n      require(!_blacklist.blacklist(addrs[i]));\n    }\n    _;\n  }\n\n  /**\n   * @dev Throws if the given address is not verified.\n   */\n  modifier onlyVerifiedAddr(address addr) {\n    if (_verifiedList.shouldVerify()) {\n      require(_verifiedList.verifiedList(addr));\n    }\n    _;\n  }\n\n  /**\n   * @dev Throws if one of the given addresses is not verified.\n   */\n  modifier onlyVerifiedAddrs(address[] addrs) {\n    if (_verifiedList.shouldVerify()) {\n      for (uint256 i = 0; i < addrs.length; i++) {\n        require(_verifiedList.verifiedList(addrs[i]));\n      }\n    }\n    _;\n  }\n\n  function blacklist(address addr) public view returns (bool) {\n    return _blacklist.blacklist(addr);\n  }\n\n  function verifiedlist(address addr) public view returns (bool) {\n    return _verifiedList.verifiedList(addr);\n  }\n}\n\n/**\n * @title ControllerContract\n * @dev A contract for managing the blacklist and verified list and burning and minting of the tokens.\n */\ncontract ControllerContract is Pausable, Administratable, UserContract {\n  using SafeMath for uint256;\n  Balance internal _balances;\n\n  uint256 constant decimals = 18;\n  uint256 constant maxBLBatch = 100;\n  uint256 public dailyMintLimit = 10000 * 10 ** decimals;\n  uint256 public dailyBurnLimit = 10000 * 10 ** decimals;\n  uint256 constant dayInSeconds = 86400;\n\n  constructor(\n    Balance _balanceContract, Blacklist _blacklistContract, Verified _verifiedListContract\n  ) UserContract(_blacklistContract, _verifiedListContract) public {\n    _balances = _balanceContract;\n  }\n\n  // This notifies clients about the amount burnt\n  event Burn(address indexed from, uint256 value);\n  // This notifies clients about the amount mint\n  event Mint(address indexed to, uint256 value);\n  // This notifies clients about the amount of limit mint by some admin\n  event LimitMint(address indexed admin, address indexed to, uint256 value);\n  // This notifies clients about the amount of limit burn by some admin\n  event LimitBurn(address indexed admin, address indexed from, uint256 value);\n\n  event VerifiedAddressAdded(address indexed addr);\n  event VerifiedAddressRemoved(address indexed addr);\n\n  event BlacklistedAddressAdded(address indexed addr);\n  event BlacklistedAddressRemoved(address indexed addr);\n\n  // blacklist operations\n  function _addToBlacklist(address addr) internal returns (bool success) {\n    success = _blacklist.addAddressToBlacklist(addr);\n    if (success) {\n      emit BlacklistedAddressAdded(addr);\n    }\n  }\n\n  function _removeFromBlacklist(address addr) internal returns (bool success) {\n    success = _blacklist.removeAddressFromBlacklist(addr);\n    if (success) {\n      emit BlacklistedAddressRemoved(addr);\n    }\n  }\n\n  /**\n   * @dev add an address to the blacklist\n   * @param addr address\n   * @return true if the address was added to the blacklist, false if the address was already in the blacklist\n   */\n  function addAddressToBlacklist(address addr) onlyAdmin whenNotPaused public returns (bool) {\n    return _addToBlacklist(addr);\n  }\n\n  /**\n   * @dev add addresses to the blacklist\n   * @param addrs addresses\n   * @return true if at least one address was added to the blacklist,\n   * false if all addresses were already in the blacklist\n   */\n  function addAddressesToBlacklist(address[] addrs) onlyAdmin whenNotPaused public returns (bool success) {\n    uint256 cnt = uint256(addrs.length);\n    require(cnt <= maxBLBatch);\n    success = true;\n    for (uint256 i = 0; i < addrs.length; i++) {\n      if (!_addToBlacklist(addrs[i])) {\n        success = false;\n      }\n    }\n  }\n\n  /**\n   * @dev remove an address from the blacklist\n   * @param addr address\n   * @return true if the address was removed from the blacklist,\n   * false if the address wasn't in the blacklist in the first place\n   */\n  function removeAddressFromBlacklist(address addr) onlyAdmin whenNotPaused public returns (bool) {\n    return _removeFromBlacklist(addr);\n  }\n\n  /**\n   * @dev remove addresses from the blacklist\n   * @param addrs addresses\n   * @return true if at least one address was removed from the blacklist,\n   * false if all addresses weren't in the blacklist in the first place\n   */\n  function removeAddressesFromBlacklist(address[] addrs) onlyAdmin whenNotPaused public returns (bool success) {\n    success = true;\n    for (uint256 i = 0; i < addrs.length; i++) {\n      if (!_removeFromBlacklist(addrs[i])) {\n        success = false;\n      }\n    }\n  }\n\n  // verified list operations\n  function _verifyAddress(address addr) internal returns (bool success) {\n    success = _verifiedList.verifyAddress(addr);\n    if (success) {\n      emit VerifiedAddressAdded(addr);\n    }\n  }\n\n  function _unverifyAddress(address addr) internal returns (bool success) {\n    success = _verifiedList.unverifyAddress(addr);\n    if (success) {\n      emit VerifiedAddressRemoved(addr);\n    }\n  }\n\n  /**\n   * @dev add an address to the verifiedlist\n   * @param addr address\n   * @return true if the address was added to the verifiedlist, false if the address was already in the verifiedlist or if the address is in the blacklist\n   */\n  function verifyAddress(address addr) onlyAdmin onlyNotBlacklistedAddr(addr) whenNotPaused public returns (bool) {\n    return _verifyAddress(addr);\n  }\n\n  /**\n   * @dev add addresses to the verifiedlist\n   * @param addrs addresses\n   * @return true if at least one address was added to the verifiedlist,\n   * false if all addresses were already in the verifiedlist\n   */\n  function verifyAddresses(address[] addrs) onlyAdmin onlyNotBlacklistedAddrs(addrs) whenNotPaused public returns (bool success) {\n    success = true;\n    for (uint256 i = 0; i < addrs.length; i++) {\n      if (!_verifyAddress(addrs[i])) {\n        success = false;\n      }\n    }\n  }\n\n\n  /**\n   * @dev remove an address from the verifiedlist\n   * @param addr address\n   * @return true if the address was removed from the verifiedlist,\n   * false if the address wasn't in the verifiedlist in the first place\n   */\n  function unverifyAddress(address addr) onlyAdmin whenNotPaused public returns (bool) {\n    return _unverifyAddress(addr);\n  }\n\n\n  /**\n   * @dev remove addresses from the verifiedlist\n   * @param addrs addresses\n   * @return true if at least one address was removed from the verifiedlist,\n   * false if all addresses weren't in the verifiedlist in the first place\n   */\n  function unverifyAddresses(address[] addrs) onlyAdmin whenNotPaused public returns (bool success) {\n    success = true;\n    for (uint256 i = 0; i < addrs.length; i++) {\n      if (!_unverifyAddress(addrs[i])) {\n        success = false;\n      }\n    }\n  }\n\n  /**\n   * @dev set if to use the verified list\n   * @param value true if should verify address, false if should skip address verification\n   */\n   function shouldVerify(bool value) onlyOwner public returns (bool success) {\n     _verifiedList.setShouldVerify(value);\n     return true;\n   }\n\n  /**\n   * Destroy tokens from other account\n   *\n   * Remove `_amount` tokens from the system irreversibly on behalf of `_from`.\n   *\n   * @param _from the address of the sender\n   * @param _amount the amount of money to burn\n   */\n  function burnFrom(address _from, uint256 _amount) onlyOwner whenNotPaused\n  public returns (bool success) {\n    require(_balances.balanceOf(_from) >= _amount);    // Check if the targeted balance is enough\n    _balances.subBalance(_from, _amount);              // Subtract from the targeted balance\n    _balances.subTotalSupply(_amount);\n    emit Burn(_from, _amount);\n    return true;\n  }\n\n  /**\n   * Destroy tokens from other account\n   * If the burn total amount exceeds the daily threshold, this operation will fail\n   *\n   * Remove `_amount` tokens from the system irreversibly on behalf of `_from`.\n   *\n   * @param _from the address of the sender\n   * @param _amount the amount of money to burn\n   */\n  function limitBurnFrom(address _from, uint256 _amount) onlyAdmin whenNotPaused\n  public returns (bool success) {\n    require(_balances.balanceOf(_from) >= _amount && _amount <= dailyBurnLimit);\n    if (burnLimiter[msg.sender].lastBurnTimestamp.div(dayInSeconds) != now.div(dayInSeconds)) {\n      burnLimiter[msg.sender].burntTotal = 0;\n    }\n    require(burnLimiter[msg.sender].burntTotal.add(_amount) <= dailyBurnLimit);\n    _balances.subBalance(_from, _amount);              // Subtract from the targeted balance\n    _balances.subTotalSupply(_amount);\n    burnLimiter[msg.sender].lastBurnTimestamp = now;\n    burnLimiter[msg.sender].burntTotal = burnLimiter[msg.sender].burntTotal.add(_amount);\n    emit LimitBurn(msg.sender, _from, _amount);\n    emit Burn(_from, _amount);\n    return true;\n  }\n\n  /**\n    * Add `_amount` tokens to the pool and to the `_to` address' balance.\n    * If the mint total amount exceeds the daily threshold, this operation will fail\n    *\n    * @param _to the address that will receive the given amount of tokens\n    * @param _amount the amount of tokens it will receive\n    */\n  function limitMint(address _to, uint256 _amount)\n  onlyAdmin whenNotPaused onlyNotBlacklistedAddr(_to) onlyVerifiedAddr(_to)\n  public returns (bool success) {\n    require(_to != msg.sender);\n    require(_amount <= dailyMintLimit);\n    if (mintLimiter[msg.sender].lastMintTimestamp.div(dayInSeconds) != now.div(dayInSeconds)) {\n      mintLimiter[msg.sender].mintedTotal = 0;\n    }\n    require(mintLimiter[msg.sender].mintedTotal.add(_amount) <= dailyMintLimit);\n    _balances.addBalance(_to, _amount);\n    _balances.addTotalSupply(_amount);\n    mintLimiter[msg.sender].lastMintTimestamp = now;\n    mintLimiter[msg.sender].mintedTotal = mintLimiter[msg.sender].mintedTotal.add(_amount);\n    emit LimitMint(msg.sender, _to, _amount);\n    emit Mint(_to, _amount);\n    return true;\n  }\n\n  function setDailyMintLimit(uint256 _limit) onlyOwner public returns (bool) {\n    dailyMintLimit = _limit;\n    return true;\n  }\n\n  function setDailyBurnLimit(uint256 _limit) onlyOwner public returns (bool) {\n    dailyBurnLimit = _limit;\n    return true;\n  }\n\n  /**\n    * Add `_amount` tokens to the pool and to the `_to` address' balance\n    *\n    * @param _to the address that will receive the given amount of tokens\n    * @param _amount the amount of tokens it will receive\n    */\n  function mint(address _to, uint256 _amount)\n  onlyOwner whenNotPaused onlyNotBlacklistedAddr(_to) onlyVerifiedAddr(_to)\n  public returns (bool success) {\n    _balances.addBalance(_to, _amount);\n    _balances.addTotalSupply(_amount);\n    emit Mint(_to, _amount);\n    return true;\n  }\n}\n\n// ----------------------------------------------------------------------------\n// ContractInterface\n// ----------------------------------------------------------------------------\ncontract ContractInterface {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address tokenOwner) public view returns (uint256);\n  function allowance(address tokenOwner, address spender) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function batchTransfer(address[] to, uint256 value) public returns (bool);\n  function increaseApproval(address spender, uint256 value) public returns (bool);\n  function decreaseApproval(address spender, uint256 value) public returns (bool);\n  function burn(uint256 value) public returns (bool);\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed tokenOwner, address indexed spender, uint256 value);\n  // This notifies clients about the amount burnt\n  event Burn(address indexed from, uint256 value);\n}\n\n// ----------------------------------------------------------------------------\n// USDO contract\n// ----------------------------------------------------------------------------\ncontract USDO is ContractInterface, Pausable, UserContract {\n  using SafeMath for uint256;\n\n  // variables of the token\n  uint8 public constant decimals = 18;\n  uint256 constant maxBatch = 100;\n\n  string public name;\n  string public symbol;\n\n  Balance internal _balances;\n  Allowance internal _allowance;\n\n  constructor(string _tokenName, string _tokenSymbol,\n    Balance _balanceContract, Allowance _allowanceContract,\n    Blacklist _blacklistContract, Verified _verifiedListContract\n  ) UserContract(_blacklistContract, _verifiedListContract) public {\n    name = _tokenName;                                        // Set the name for display purposes\n    symbol = _tokenSymbol;                                    // Set the symbol for display purposes\n    _balances = _balanceContract;\n    _allowance = _allowanceContract;\n  }\n\n  function totalSupply() public view returns (uint256) {\n    return _balances.totalSupply();\n  }\n\n  function balanceOf(address _addr) public view returns (uint256) {\n    return _balances.balanceOf(_addr);\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return _allowance.allowanceOf(_owner, _spender);\n  }\n\n  /**\n   *  @dev Internal transfer, only can be called by this contract\n   */\n  function _transfer(address _from, address _to, uint256 _value) internal {\n    require(_value > 0);                                               // transfering value must be greater than 0\n    require(_to != 0x0);                                               // Prevent transfer to 0x0 address. Use burn() instead\n    require(_balances.balanceOf(_from) >= _value);                     // Check if the sender has enough\n    uint256 previousBalances = _balances.balanceOf(_from).add(_balances.balanceOf(_to)); // Save this for an assertion in the future\n    _balances.subBalance(_from, _value);                 // Subtract from the sender\n    _balances.addBalance(_to, _value);                     // Add the same to the recipient\n    emit Transfer(_from, _to, _value);\n    // Asserts are used to use static analysis to find bugs in your code. They should never fail\n    assert(_balances.balanceOf(_from) + _balances.balanceOf(_to) == previousBalances);\n  }\n\n  /**\n   * @dev Transfer tokens\n   * Send `_value` tokens to `_to` from your account\n   *\n   * @param _to The address of the recipient\n   * @param _value the amount to send\n   */\n  function transfer(address _to, uint256 _value)\n  whenNotPaused onlyNotBlacklistedAddr(msg.sender) onlyNotBlacklistedAddr(_to) onlyVerifiedAddr(msg.sender) onlyVerifiedAddr(_to)\n  public returns (bool) {\n    _transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n\n  /**\n   * @dev Transfer tokens to multiple accounts\n   * Send `_value` tokens to all addresses in `_to` from your account\n   *\n   * @param _to The addresses of the recipients\n   * @param _value the amount to send\n   */\n  function batchTransfer(address[] _to, uint256 _value)\n  whenNotPaused onlyNotBlacklistedAddr(msg.sender) onlyNotBlacklistedAddrs(_to) onlyVerifiedAddr(msg.sender) onlyVerifiedAddrs(_to)\n  public returns (bool) {\n    uint256 cnt = uint256(_to.length);\n    require(cnt > 0 && cnt <= maxBatch && _value > 0);\n    uint256 amount = _value.mul(cnt);\n    require(_balances.balanceOf(msg.sender) >= amount);\n\n    for (uint256 i = 0; i < cnt; i++) {\n      _transfer(msg.sender, _to[i], _value);\n    }\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from other address\n   * Send `_value` tokens to `_to` in behalf of `_from`\n   *\n   * @param _from The address of the sender\n   * @param _to The address of the recipient\n   * @param _value the amount to send\n   */\n  function transferFrom(address _from, address _to, uint256 _value)\n  whenNotPaused onlyNotBlacklistedAddr(_from) onlyNotBlacklistedAddr(_to) onlyVerifiedAddr(_from) onlyVerifiedAddr(_to)\n  public returns (bool) {\n    require(_allowance.allowanceOf(_from, msg.sender) >= _value);     // Check allowance\n    _allowance.subAllowance(_from, msg.sender, _value);\n    _transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   *\n   * Allows `_spender` to spend no more than `_value` tokens in your behalf\n   *\n   * @param _spender The address authorized to spend\n   * @param _value the max amount they can spend\n   */\n  function approve(address _spender, uint256 _value)\n  whenNotPaused onlyNotBlacklistedAddr(msg.sender) onlyNotBlacklistedAddr(_spender) onlyVerifiedAddr(msg.sender) onlyVerifiedAddr(_spender)\n  public returns (bool) {\n    _allowance.setAllowance(msg.sender, _spender, _value);\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint256 _addedValue)\n  whenNotPaused onlyNotBlacklistedAddr(msg.sender) onlyNotBlacklistedAddr(_spender) onlyVerifiedAddr(msg.sender) onlyVerifiedAddr(_spender)\n  public returns (bool) {\n    _allowance.addAllowance(msg.sender, _spender, _addedValue);\n    emit Approval(msg.sender, _spender, _allowance.allowanceOf(msg.sender, _spender));\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint256 _subtractedValue)\n  whenNotPaused onlyNotBlacklistedAddr(msg.sender) onlyNotBlacklistedAddr(_spender) onlyVerifiedAddr(msg.sender) onlyVerifiedAddr(_spender)\n  public returns (bool) {\n    _allowance.subAllowance(msg.sender, _spender, _subtractedValue);\n    emit Approval(msg.sender, _spender, _allowance.allowanceOf(msg.sender, _spender));\n    return true;\n  }\n\n  /**\n   * @dev Destroy tokens\n   * Remove `_value` tokens from the system irreversibly\n   *\n   * @param _value the amount of money to burn\n   */\n  function burn(uint256 _value) whenNotPaused onlyNotBlacklistedAddr(msg.sender) onlyVerifiedAddr(msg.sender)\n  public returns (bool success) {\n    require(_balances.balanceOf(msg.sender) >= _value);         // Check if the sender has enough\n    _balances.subBalance(msg.sender, _value);                   // Subtract from the sender\n    _balances.subTotalSupply(_value);                           // Updates totalSupply\n    emit Burn(msg.sender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Change name and symbol of the tokens\n   *\n   * @param _name the new name of the token\n   * @param _symbol the new symbol of the token\n   */\n  function changeName(string _name, string _symbol) onlyOwner whenNotPaused public {\n    name = _name;\n    symbol = _symbol;\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"limitMint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"unverifyAddresses\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"limitBurnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromBlacklist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"burnLimiter\",\"outputs\":[{\"name\":\"burntTotal\",\"type\":\"uint256\"},{\"name\":\"lastBurnTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAddressFromBlacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"verifyAddresses\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddressToAdmin\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyMintLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintLimiter\",\"outputs\":[{\"name\":\"mintedTotal\",\"type\":\"uint256\"},{\"name\":\"lastMintTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"verifiedlist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setDailyMintLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unverifyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setDailyBurnLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addAddressesToBlacklist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"shouldVerify\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyBurnLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAddressFromAdmin\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddressToBlacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"verifyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_balanceContract\",\"type\":\"address\"},{\"name\":\"_blacklistContract\",\"type\":\"address\"},{\"name\":\"_verifiedListContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LimitMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LimitBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"VerifiedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"VerifiedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"BlacklistedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"BlacklistedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AdminAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AdminAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526001805460a060020a60ff021916905569021e19e0c9bab2400000600881905560095534801561003357600080fd5b506040516060806122db83398101604090815281516020830151919092015160008054600160a060020a0319908116331790915560058054600160a060020a03948516908316179055600680549284169282169290921790915560078054929093169116179055612232806100a96000396000f30060806040526004361061018a5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663140de59b811461018f57806319a0e572146101c757806320bbb8e11461021c5780633225879414610240578063333449ef1461029557806335e82f3a146102cf57806336e520bc146102f05780633f4ba83a1461034557806340c10f191461035c578063429b62e5146103805780634e71e0c8146103a15780635c975abb146103b65780636226d4b2146103cb57806362680e4b146103ec57806379cc6790146104135780638456cb59146104375780638da5cb5b1461044c578063a23543241461047d578063aaea396c1461049e578063b2d52d27146104bf578063b5980f7d146104d7578063b92ae80c146104f8578063ca73419e14610510578063cb7a11d614610565578063d3303e411461057f578063e30c397814610594578063ef0a14f8146105a9578063f2c816ae146105ca578063f2fde38b146105eb578063f9f92be41461060c578063fcb2cafc1461062d575b600080fd5b34801561019b57600080fd5b506101b3600160a060020a036004351660243561064e565b604080519115158252519081900360200190f35b3480156101d357600080fd5b50604080516020600480358082013583810280860185019096528085526101b395369593946024949385019291829185019084908082843750949750610aba9650505050505050565b34801561022857600080fd5b506101b3600160a060020a0360043516602435610b50565b34801561024c57600080fd5b50604080516020600480358082013583810280860185019096528085526101b395369593946024949385019291829185019084908082843750949750610e8d9650505050505050565b3480156102a157600080fd5b506102b6600160a060020a0360043516610f1d565b6040805192835260208301919091528051918290030190f35b3480156102db57600080fd5b506101b3600160a060020a0360043516610f36565b3480156102fc57600080fd5b50604080516020600480358082013583810280860185019096528085526101b395369593946024949385019291829185019084908082843750949750610f919650505050505050565b34801561035157600080fd5b5061035a611109565b005b34801561036857600080fd5b506101b3600160a060020a0360043516602435611181565b34801561038c57600080fd5b506101b3600160a060020a03600435166114b8565b3480156103ad57600080fd5b5061035a6114cd565b3480156103c257600080fd5b506101b3611555565b3480156103d757600080fd5b506101b3600160a060020a0360043516611565565b3480156103f857600080fd5b5061040161163f565b60408051918252519081900360200190f35b34801561041f57600080fd5b506101b3600160a060020a0360043516602435611645565b34801561044357600080fd5b5061035a611862565b34801561045857600080fd5b506104616118df565b60408051600160a060020a039092168252519081900360200190f35b34801561048957600080fd5b506102b6600160a060020a03600435166118ee565b3480156104aa57600080fd5b506101b3600160a060020a0360043516611907565b3480156104cb57600080fd5b506101b36004356119a4565b3480156104e357600080fd5b506101b3600160a060020a03600435166119c5565b34801561050457600080fd5b506101b3600435611a18565b34801561051c57600080fd5b50604080516020600480358082013583810280860185019096528085526101b395369593946024949385019291829185019084908082843750949750611a399650505050505050565b34801561057157600080fd5b506101b36004351515611ae4565b34801561058b57600080fd5b50610401611b98565b3480156105a057600080fd5b50610461611b9e565b3480156105b557600080fd5b506101b3600160a060020a0360043516611bad565b3480156105d657600080fd5b506101b3600160a060020a0360043516611c59565b3480156105f757600080fd5b5061035a600160a060020a0360043516611cac565b34801561061857600080fd5b506101b3600160a060020a0360043516611d44565b34801561063957600080fd5b506101b3600160a060020a0360043516611d99565b3360009081526002602052604081205460ff16806106765750600054600160a060020a031633145b151561068157600080fd5b60015460a060020a900460ff161561069857600080fd5b6005546040805160e260020a633e7e4af9028152600160a060020a03808716600483015291518693929092169163f9f92be4916024808201926020929091908290030181600087803b1580156106ed57600080fd5b505af1158015610701573d6000803e3d6000fd5b505050506040513d602081101561071757600080fd5b50511561072357600080fd5b600654604080517f0a79726a00000000000000000000000000000000000000000000000000000000815290518692600160a060020a031691630a79726a9160048083019260209291908290030181600087803b15801561078257600080fd5b505af1158015610796573d6000803e3d6000fd5b505050506040513d60208110156107ac57600080fd5b50511561085257600654604080517f81601496000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151919092169163816014969160248083019260209291908290030181600087803b15801561081b57600080fd5b505af115801561082f573d6000803e3d6000fd5b505050506040513d602081101561084557600080fd5b5051151561085257600080fd5b600160a060020a03851633141561086857600080fd5b60085484111561087757600080fd5b61088a426201518063ffffffff611e7e16565b336000908152600360205260409020600101546108b0906201518063ffffffff611e7e16565b146108c657336000908152600360205260408120555b600854336000908152600360205260409020546108e9908663ffffffff611e9316565b11156108f457600080fd5b600754604080517f21e5383a000000000000000000000000000000000000000000000000000000008152600160a060020a03888116600483015260248201889052915191909216916321e5383a91604480830192600092919082900301818387803b15801561096257600080fd5b505af1158015610976573d6000803e3d6000fd5b5050600754604080517fe468688e000000000000000000000000000000000000000000000000000000008152600481018990529051600160a060020a03909216935063e468688e925060248082019260009290919082900301818387803b1580156109e057600080fd5b505af11580156109f4573d6000803e3d6000fd5b505033600090815260036020526040902042600182015554610a1f925090508563ffffffff611e9316565b336000818152600360209081526040918290209390935580518781529051600160a060020a038916937f8d5d21e107a513273abdf8a2a4318ed6e18f61d1e5dba832e0c8ec9dcc3474a8928290030190a3604080518581529051600160a060020a038716917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885919081900360200190a2506001949350505050565b33600090815260026020526040812054819060ff1680610ae45750600054600160a060020a031633145b1515610aef57600080fd5b60015460a060020a900460ff1615610b0657600080fd5b506001905060005b8251811015610b4a57610b378382815181101515610b2857fe5b90602001906020020151611ea6565b1515610b4257600091505b600101610b0e565b50919050565b3360009081526002602052604081205460ff1680610b785750600054600160a060020a031633145b1515610b8357600080fd5b60015460a060020a900460ff1615610b9a57600080fd5b600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301529151859392909216916370a08231916024808201926020929091908290030181600087803b158015610c0557600080fd5b505af1158015610c19573d6000803e3d6000fd5b505050506040513d6020811015610c2f57600080fd5b505110801590610c4157506009548211155b1515610c4c57600080fd5b610c5f426201518063ffffffff611e7e16565b33600090815260046020526040902060010154610c85906201518063ffffffff611e7e16565b14610c9b57336000908152600460205260408120555b60095433600090815260046020526040902054610cbe908463ffffffff611e9316565b1115610cc957600080fd5b600754604080517fcf8eeb7e000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152602482018690529151919092169163cf8eeb7e91604480830192600092919082900301818387803b158015610d3757600080fd5b505af1158015610d4b573d6000803e3d6000fd5b5050600754604080517f82838c76000000000000000000000000000000000000000000000000000000008152600481018790529051600160a060020a0390921693506382838c76925060248082019260009290919082900301818387803b158015610db557600080fd5b505af1158015610dc9573d6000803e3d6000fd5b505033600090815260046020526040902042600182015554610df4925090508363ffffffff611e9316565b336000818152600460209081526040918290209390935580518581529051600160a060020a038716937f382443314b3caec485ec9a0677e91ea53c90de1075461fddd277d65c5cbcad9f928290030190a3604080518381529051600160a060020a038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250600192915050565b33600090815260026020526040812054819060ff1680610eb75750600054600160a060020a031633145b1515610ec257600080fd5b60015460a060020a900460ff1615610ed957600080fd5b506001905060005b8251811015610b4a57610f0a8382815181101515610efb57fe5b90602001906020020151611f7e565b1515610f1557600091505b600101610ee1565b6004602052600090815260409020805460019091015482565b3360009081526002602052604081205460ff1680610f5e5750600054600160a060020a031633145b1515610f6957600080fd5b60015460a060020a900460ff1615610f8057600080fd5b610f8982611f7e565b90505b919050565b33600090815260026020526040812054819060ff1680610fbb5750600054600160a060020a031633145b1515610fc657600080fd5b8260005b81518110156110a2576005548251600160a060020a039091169063f9f92be490849084908110610ff657fe5b906020019060200201516040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561106457600080fd5b505af1158015611078573d6000803e3d6000fd5b505050506040513d602081101561108e57600080fd5b50511561109a57600080fd5b600101610fca565b60015460a060020a900460ff16156110b957600080fd5b60019350600092505b8451831015611101576110eb85848151811015156110dc57fe5b90602001906020020151612056565b15156110f657600093505b6001909201916110c2565b505050919050565b600054600160a060020a0316331461112057600080fd5b60015460a060020a900460ff16151561113857600080fd5b6001805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60008054600160a060020a0316331461119957600080fd5b60015460a060020a900460ff16156111b057600080fd5b6005546040805160e260020a633e7e4af9028152600160a060020a03808716600483015291518693929092169163f9f92be4916024808201926020929091908290030181600087803b15801561120557600080fd5b505af1158015611219573d6000803e3d6000fd5b505050506040513d602081101561122f57600080fd5b50511561123b57600080fd5b600654604080517f0a79726a00000000000000000000000000000000000000000000000000000000815290518692600160a060020a031691630a79726a9160048083019260209291908290030181600087803b15801561129a57600080fd5b505af11580156112ae573d6000803e3d6000fd5b505050506040513d60208110156112c457600080fd5b50511561136a57600654604080517f81601496000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151919092169163816014969160248083019260209291908290030181600087803b15801561133357600080fd5b505af1158015611347573d6000803e3d6000fd5b505050506040513d602081101561135d57600080fd5b5051151561136a57600080fd5b600754604080517f21e5383a000000000000000000000000000000000000000000000000000000008152600160a060020a03888116600483015260248201889052915191909216916321e5383a91604480830192600092919082900301818387803b1580156113d857600080fd5b505af11580156113ec573d6000803e3d6000fd5b5050600754604080517fe468688e000000000000000000000000000000000000000000000000000000008152600481018990529051600160a060020a03909216935063e468688e925060248082019260009290919082900301818387803b15801561145657600080fd5b505af115801561146a573d6000803e3d6000fd5b5050604080518781529051600160a060020a03891693507f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592509081900360200190a2506001949350505050565b60026020526000908152604090205460ff1681565b600154600160a060020a031633146114e457600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b60015460a060020a900460ff1681565b60008054600160a060020a0316331461157d57600080fd5b600160a060020a03821660009081526002602052604090205460ff161515610f8c57600160a060020a0382166000818152600260209081526040808320805460ff191660019081179091558151808301835284815280840185815286865260038552838620915182555190820155815180830183528481528084018581528686526004909452828520905181559251920191909155517f089aa9975328102f8cdff40d2e2b75ad3b940f83f42c2e13c43ed875ff8f046a9190a2506001919050565b60085481565b60008054600160a060020a0316331461165d57600080fd5b60015460a060020a900460ff161561167457600080fd5b600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301529151859392909216916370a08231916024808201926020929091908290030181600087803b1580156116df57600080fd5b505af11580156116f3573d6000803e3d6000fd5b505050506040513d602081101561170957600080fd5b5051101561171657600080fd5b600754604080517fcf8eeb7e000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152602482018690529151919092169163cf8eeb7e91604480830192600092919082900301818387803b15801561178457600080fd5b505af1158015611798573d6000803e3d6000fd5b5050600754604080517f82838c76000000000000000000000000000000000000000000000000000000008152600481018790529051600160a060020a0390921693506382838c76925060248082019260009290919082900301818387803b15801561180257600080fd5b505af1158015611816573d6000803e3d6000fd5b5050604080518581529051600160a060020a03871693507fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca592509081900360200190a250600192915050565b600054600160a060020a0316331461187957600080fd5b60015460a060020a900460ff161561189057600080fd5b6001805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600054600160a060020a031681565b6003602052600090815260409020805460019091015482565b600654604080517f81601496000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151600093929092169163816014969160248082019260209290919082900301818787803b15801561197257600080fd5b505af1158015611986573d6000803e3d6000fd5b505050506040513d602081101561199c57600080fd5b505192915050565b60008054600160a060020a031633146119bc57600080fd5b50600855600190565b3360009081526002602052604081205460ff16806119ed5750600054600160a060020a031633145b15156119f857600080fd5b60015460a060020a900460ff1615611a0f57600080fd5b610f8982611ea6565b60008054600160a060020a03163314611a3057600080fd5b50600955600190565b336000908152600260205260408120548190819060ff1680611a655750600054600160a060020a031633145b1515611a7057600080fd5b60015460a060020a900460ff1615611a8757600080fd5b835191506064821115611a9957600080fd5b506001915060005b8351811015611add57611aca8482815181101515611abb57fe5b9060200190602002015161212e565b1515611ad557600092505b600101611aa1565b5050919050565b60008054600160a060020a03163314611afc57600080fd5b600654604080517f0c54fb0600000000000000000000000000000000000000000000000000000000815284151560048201529051600160a060020a0390921691630c54fb06916024808201926020929091908290030181600087803b158015611b6457600080fd5b505af1158015611b78573d6000803e3d6000fd5b505050506040513d6020811015611b8e57600080fd5b5060019392505050565b60095481565b600154600160a060020a031681565b60008054600160a060020a03163314611bc557600080fd5b600160a060020a03821660009081526002602052604090205460ff1615610f8c57600160a060020a0382166000818152600260209081526040808320805460ff191690556003825280832083815560019081018490556004909252808320838155909101829055517fc41dab03d4639245f86ebd733046feb495209977c224698a4d1318fec207af5a9190a2506001919050565b3360009081526002602052604081205460ff1680611c815750600054600160a060020a031633145b1515611c8c57600080fd5b60015460a060020a900460ff1615611ca357600080fd5b610f898261212e565b600054600160a060020a03163314611cc357600080fd5b600160a060020a0381161515611cd857600080fd5b60015460008054604051600160a060020a0393841693909116917f8573d4aae9f7fb051c6b88d7440011a1c12376acda6603a45f45bad36a8db4ce91a36001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6005546040805160e260020a633e7e4af9028152600160a060020a0384811660048301529151600093929092169163f9f92be49160248082019260209290919082900301818787803b15801561197257600080fd5b3360009081526002602052604081205460ff1680611dc15750600054600160a060020a031633145b1515611dcc57600080fd5b6005546040805160e260020a633e7e4af9028152600160a060020a03808616600483015291518593929092169163f9f92be4916024808201926020929091908290030181600087803b158015611e2157600080fd5b505af1158015611e35573d6000803e3d6000fd5b505050506040513d6020811015611e4b57600080fd5b505115611e5757600080fd5b60015460a060020a900460ff1615611e6e57600080fd5b611e7783612056565b9392505050565b60008183811515611e8b57fe5b049392505050565b81810182811015611ea057fe5b92915050565b600654604080517fb5980f7d000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151600093929092169163b5980f7d9160248082019260209290919082900301818787803b158015611f1157600080fd5b505af1158015611f25573d6000803e3d6000fd5b505050506040513d6020811015611f3b57600080fd5b505190508015610f8c57604051600160a060020a038316907f9f6abe5373553e0f70823cbe69b7008c9eca4b603130a00a7c28ef901dc5a22890600090a2919050565b600554604080517f35e82f3a000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152915160009392909216916335e82f3a9160248082019260209290919082900301818787803b158015611fe957600080fd5b505af1158015611ffd573d6000803e3d6000fd5b505050506040513d602081101561201357600080fd5b505190508015610f8c57604051600160a060020a038316907fb9b02d6ef3069c468ac99865bad0d84ec0cf34671cb26053e5e47d415ae1756490600090a2919050565b600654604080517ffcb2cafc000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151600093929092169163fcb2cafc9160248082019260209290919082900301818787803b1580156120c157600080fd5b505af11580156120d5573d6000803e3d6000fd5b505050506040513d60208110156120eb57600080fd5b505190508015610f8c57604051600160a060020a038316907f0f387646363219b71a0484efbd9820cb6b4bc63023f8e64c57df77b3de02191590600090a2919050565b600554604080517ff2c816ae000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151600093929092169163f2c816ae9160248082019260209290919082900301818787803b15801561219957600080fd5b505af11580156121ad573d6000803e3d6000fd5b505050506040513d60208110156121c357600080fd5b505190508015610f8c57604051600160a060020a038316907fee71faa2d1e96ac74ee4023d6ffa8abfa43b7648f51e3dbd8ec561823e9df13290600090a29190505600a165627a7a723058200d82160c91d741452ef4cfb70b708de9429b331be7911869ac135a140b07c33e0029000000000000000000000000e5ca5033aa95a8cfb104c9260bce578842e6bd57000000000000000000000000fb739bc0c654646d254dd573149528c12406f93500000000000000000000000008a4032f9510cd84785b3befa9ebd5eee68ce873",
  "constructorArguments": "000000000000000000000000e5ca5033aa95a8cfb104c9260bce578842e6bd57000000000000000000000000fb739bc0c654646d254dd573149528c12406f93500000000000000000000000008a4032f9510cd84785b3befa9ebd5eee68ce873"
}