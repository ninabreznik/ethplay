{
  "address": "0x833c2f7c43deb577c9c1a42459e9a4da5296f7a2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenBatchTransfer",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "pragma solidity ^0.4.24;\n\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20Basic {\n  // events\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  // public functions\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address addr) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n}\n\ncontract ERC20 is ERC20Basic {\n  // events\n  event Approval(address indexed owner, address indexed agent, uint256 value);\n\n  // public functions\n  function allowance(address owner, address agent) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address agent, uint256 value) public returns (bool);\n\n}\n\nlibrary SafeERC20 {\n  \n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    require(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    ERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    require(token.approve(spender, value));\n  }\n}\n\ncontract Ownable {\n\n  // public variables\n  address public owner;\n\n  // internal variables\n\n  // events\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  // public functions\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n  // internal functions\n}\n\n\ncontract TokenBatchTransfer is Ownable {\n  using SafeERC20 for ERC20Basic;\n  using SafeMath for uint256;\n\n  // public variables\n  ERC20Basic public token;\n  // events\n  // public functions\n  constructor (ERC20Basic tokenAddr) public {\n    token = ERC20Basic(tokenAddr);\n  }\n\n  function changeToken(ERC20Basic tokenAddr) public onlyOwner {\n    token = ERC20Basic(tokenAddr);\n  }\n\n  function balanceOfToken() public view returns (uint256 amount) {\n    return token.balanceOf(address(this));\n  }\n\n  function safeTransfer(address funder, uint256 amount) public onlyOwner {\n    token.safeTransfer(funder, amount);\n  }\n\n  function batchTransfer(address[] funders, uint256[] amounts) public onlyOwner {\n    require(funders.length > 0 && funders.length == amounts.length);\n\n    uint256 total = token.balanceOf(this);\n    require(total > 0);\n\n    uint256 fundersTotal = 0;\n    for (uint i = 0; i < amounts.length; i++) {\n      fundersTotal = fundersTotal.add(amounts[i]);\n    }\n    require(total >= fundersTotal);\n\n    for (uint j = 0; j < funders.length; j++) {\n      token.safeTransfer(funders[j], amounts[j]);\n    }\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610b4283398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610a7e806100c46000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063423f6cef1461008857806366829b16146100d55780636b0f1c811461011857806388d695b2146101435780638da5cb5b146101ec578063f2fde38b14610243578063fc0c546a14610286575b600080fd5b34801561009457600080fd5b506100d3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506102dd565b005b3480156100e157600080fd5b50610116600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610389565b005b34801561012457600080fd5b5061012d610428565b6040518082815260200191505060405180910390f35b34801561014f57600080fd5b506101ea6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610527565b005b3480156101f857600080fd5b506102016107a6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561024f57600080fd5b50610284600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107cb565b005b34801561029257600080fd5b5061029b610920565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561033857600080fd5b6103858282600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166109469092919063ffffffff16565b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156103e457600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156104e757600080fd5b505af11580156104fb573d6000803e3d6000fd5b505050506040513d602081101561051157600080fd5b8101908080519060200190929190505050905090565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561058857600080fd5b6000865111801561059a575084518651145b15156105a557600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561066257600080fd5b505af1158015610676573d6000803e3d6000fd5b505050506040513d602081101561068c57600080fd5b810190808051906020019092919050505093506000841115156106ae57600080fd5b60009250600091505b84518210156106f9576106ea85838151811015156106d157fe5b9060200190602002015184610a3490919063ffffffff16565b925081806001019250506106b7565b82841015151561070857600080fd5b600090505b855181101561079e57610791868281518110151561072757fe5b90602001906020020151868381518110151561073f57fe5b90602001906020020151600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166109469092919063ffffffff16565b808060010191505061070d565b505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561082657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561086257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156109e957600080fd5b505af11580156109fd573d6000803e3d6000fd5b505050506040513d6020811015610a1357600080fd5b81019080805190602001909291905050501515610a2f57600080fd5b505050565b6000808284019050838110151515610a4857fe5b80915050929150505600a165627a7a72305820c4dec711f88dbb120092e1c0d978af09e904ff124647cf12d77040ee7c69f1410029000000000000000000000000d36e9f8f194a47b10af16c7656a68eba1dfe88e4",
  "constructorArguments": "000000000000000000000000d36e9f8f194a47b10af16c7656a68eba1dfe88e4"
}