{
  "address": "0xe07fbe398783f1e945320b18d6cac755c3f68b96",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TFT",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-03\n*/\n\npragma solidity ^0.4.23;\n\nlibrary SafeMathLib {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0);\n        uint256 c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract DateTimeLib {\n\n    struct _DateTime {\n        uint16 year;\n        uint8 month;\n        uint8 day;\n        uint8 hour;\n        uint8 minute;\n        uint8 second;\n        uint8 weekday;\n    }\n\n    uint constant DAY_IN_SECONDS = 86400;\n    uint constant YEAR_IN_SECONDS = 31536000;\n    uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n\n    uint constant HOUR_IN_SECONDS = 3600;\n    uint constant MINUTE_IN_SECONDS = 60;\n\n    uint16 constant ORIGIN_YEAR = 1970;\n\n    function isLeapYear(uint16 year) internal pure returns (bool) {\n        if (year % 4 != 0) {\n            return false;\n        }\n        if (year % 100 != 0) {\n            return true;\n        }\n        if (year % 400 != 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function leapYearsBefore(uint year) internal pure returns (uint) {\n        year -= 1;\n        return year / 4 - year / 100 + year / 400;\n    }\n\n    function getDaysInMonth(uint8 month, uint16 year) internal pure returns (uint8) {\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            return 31;\n        }\n        else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            return 30;\n        }\n        else if (isLeapYear(year)) {\n            return 29;\n        }\n        else {\n            return 28;\n        }\n    }\n\n    function parseTimestamp(uint timestamp) internal pure returns (_DateTime dt) {\n        uint secondsAccountedFor = 0;\n        uint buf;\n        uint8 i;\n\n        dt.year = getYear(timestamp);\n        buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n        secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n\n        uint secondsInMonth;\n        for (i = 1; i <= 12; i++) {\n            secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n            if (secondsInMonth + secondsAccountedFor > timestamp) {\n                dt.month = i;\n                break;\n            }\n            secondsAccountedFor += secondsInMonth;\n        }\n\n        for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n            if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n                dt.day = i;\n                break;\n            }\n            secondsAccountedFor += DAY_IN_SECONDS;\n        }\n        dt.hour = getHour(timestamp);\n        dt.minute = getMinute(timestamp);\n        dt.second = getSecond(timestamp);\n        dt.weekday = getWeekday(timestamp);\n    }\n\n    function getYear(uint timestamp) internal pure returns (uint16) {\n        uint secondsAccountedFor = 0;\n        uint16 year;\n        uint numLeapYears;\n\n        year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n        numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n        secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n\n        while (secondsAccountedFor > timestamp) {\n            if (isLeapYear(uint16(year - 1))) {\n                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n            }\n            else {\n                secondsAccountedFor -= YEAR_IN_SECONDS;\n            }\n            year -= 1;\n        }\n        return year;\n    }\n\n    function getMonth(uint timestamp) internal pure returns (uint8) {\n        return parseTimestamp(timestamp).month;\n    }\n\n    function getDay(uint timestamp) internal pure returns (uint8) {\n        return parseTimestamp(timestamp).day;\n    }\n\n    function getHour(uint timestamp) internal pure returns (uint8) {\n        return uint8((timestamp / 60 / 60) % 24);\n    }\n\n    function getMinute(uint timestamp) internal pure returns (uint8) {\n        return uint8((timestamp / 60) % 60);\n    }\n\n    function getSecond(uint timestamp) internal pure returns (uint8) {\n        return uint8(timestamp % 60);\n    }\n\n    function getWeekday(uint timestamp) internal pure returns (uint8) {\n        return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\n    }\n\n    function toTimestamp(uint16 year, uint8 month, uint8 day) internal pure returns (uint timestamp) {\n        return toTimestamp(year, month, day, 0, 0, 0);\n    }\n\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) internal pure returns (uint timestamp) {\n        return toTimestamp(year, month, day, hour, 0, 0);\n    }\n\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) internal pure returns (uint timestamp) {\n        return toTimestamp(year, month, day, hour, minute, 0);\n    }\n\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) internal pure returns (uint timestamp) {\n        uint16 i;\n        for (i = ORIGIN_YEAR; i < year; i++) {\n            if (isLeapYear(i)) {\n                timestamp += LEAP_YEAR_IN_SECONDS;\n            }\n            else {\n                timestamp += YEAR_IN_SECONDS;\n            }\n        }\n\n        uint8[12] memory monthDayCounts;\n        monthDayCounts[0] = 31;\n        if (isLeapYear(year)) {\n            monthDayCounts[1] = 29;\n        }\n        else {\n            monthDayCounts[1] = 28;\n        }\n        monthDayCounts[2] = 31;\n        monthDayCounts[3] = 30;\n        monthDayCounts[4] = 31;\n        monthDayCounts[5] = 30;\n        monthDayCounts[6] = 31;\n        monthDayCounts[7] = 31;\n        monthDayCounts[8] = 30;\n        monthDayCounts[9] = 31;\n        monthDayCounts[10] = 30;\n        monthDayCounts[11] = 31;\n\n        for (i = 1; i < month; i++) {\n            timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n        }\n\n        timestamp += DAY_IN_SECONDS * (day - 1);\n        timestamp += HOUR_IN_SECONDS * (hour);\n        timestamp += MINUTE_IN_SECONDS * (minute);\n        timestamp += second;\n\n        return timestamp;\n    }\n}\n\ninterface IERC20 {\n    \n    function totalSupply() external constant returns (uint256);\n    function balanceOf(address _owner) external constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n    function approve(address _spender, uint256 _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address _spender, uint256 _value);\n}\n\ncontract StandardToken is IERC20,DateTimeLib {\n\n    using SafeMathLib for uint256;\n\n    mapping(address => uint256) balances;\n\n    mapping(address => mapping(address => uint256)) allowed;\n    \n    string public constant symbol = \"TFT\";\n    \n    string public constant name = \"Global TokenFinance Token\";\n    \n    uint _totalSupply = 1000000000 * 10 ** 8;\n    \n    uint8 public constant decimals = 8;\n    \n    function totalSupply() external constant returns (uint256) {\n        return _totalSupply;\n    }\n    \n    function balanceOf(address _owner) external constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n    \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        return transferInternal(msg.sender, _to, _value);\n    }\n\n    function transferInternal(address _from, address _to, uint256 _value) internal returns (bool success) {\n        require(_value > 0 && balances[_from] >= _value);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value > 0 && allowed[_from][msg.sender] >= _value && balances[_from] >= _value);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n\ncontract LockableToken is StandardToken {\n    \n    address internal developerReservedAddress = 0x7a60BB4e0fb003407deA8D27FAaAf050518AeA36;\n    \n    uint[4] internal developerReservedUnlockTimes;\n    \n    uint256[4] internal developerReservedBalanceLimits;\n    \n    mapping(address => uint256) internal balanceLocks;\n\n    mapping(address => uint) internal timeLocks;\n    \n    function getLockInfo(address _address) public constant returns (uint timeLock, uint256 balanceLock) {\n        return (timeLocks[_address], balanceLocks[_address]);\n    }\n    \n    function getDeveloperReservedBalanceLimit() internal returns (uint256 balanceLimit) {\n        uint time = now;\n        for (uint index = 0; index < developerReservedUnlockTimes.length; index++) {\n            if (developerReservedUnlockTimes[index] == 0x0) {\n                continue;\n            }\n            if (time > developerReservedUnlockTimes[index]) {\n                developerReservedUnlockTimes[index] = 0x0;\n            } else {\n                return developerReservedBalanceLimits[index];\n            }\n        }\n        return 0;\n    }\n    \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        return transferInternal(msg.sender, _to, _value);\n    }\n\n    function transferInternal(address _from, address _to, uint256 _value) internal returns (bool success) {\n        require(_from != 0x0 && _to != 0x0 && _value > 0x0);\n        if (_from == developerReservedAddress) {\n            uint256 balanceLimit = getDeveloperReservedBalanceLimit();\n            require(balances[_from].sub(balanceLimit) >= _value);\n        }\n        var(timeLock, balanceLock) = getLockInfo(_from);\n        if (timeLock <= now && timeLock != 0x0) {\n            timeLock = 0x0;\n            timeLocks[_from] = 0x0;\n            balanceLocks[_from] = 0x0;\n            emit UnLock(_from, timeLock, balanceLock);\n            balanceLock = 0x0;\n        }\n        if (timeLock != 0x0 && balanceLock > 0x0) {\n            require(balances[_from].sub(balanceLock) >= _value);\n        }\n        return super.transferInternal(_from, _to, _value);\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_from != 0x0 && _to != 0x0 && _value > 0x0);\n        if (_from == developerReservedAddress) {\n            uint256 balanceLimit = getDeveloperReservedBalanceLimit();\n            require(balances[_from].sub(balanceLimit) >= _value);\n        }\n        var(timeLock, balanceLock) = getLockInfo(_from);\n        if (timeLock <= now && timeLock != 0x0) {\n            timeLock = 0x0;\n            timeLocks[_from] = 0x0;\n            balanceLocks[_from] = 0x0;\n            emit UnLock(_from, timeLock, balanceLock);\n            balanceLock = 0x0;\n        }\n        if (timeLock != 0x0 && balanceLock > 0x0) {\n            require(balances[_from].sub(balanceLock) >= _value);\n        }\n        return super.transferFrom(_from, _to, _value);\n    }\n    \n    event DeveloperReservedUnlockTimeChanged(uint index, uint unlockTime, uint newUnlockTime);\n    event DeveloperReservedLockInfo(address indexed publicOfferingAddress, uint index, uint unlockTime, uint256 balanceLimit);\n    event Lock(address indexed lockAddress, uint timeLock, uint256 balanceLock);\n    event UnLock(address indexed lockAddress, uint timeLock, uint256 balanceLock);\n}\n\ncontract TradeableToken is LockableToken {\n\n    address internal publicOfferingAddress = 0x1bd02c1f89CE9D4F38dE3b7C4920FD637F6134e9;\n\n    uint256 public exchangeRate = 35000;\n\n    function buy(address _beneficiary, uint256 _weiAmount) internal {\n        require(_beneficiary != 0x0);\n        require(publicOfferingAddress != 0x0);\n        require(exchangeRate > 0x0);\n        require(_weiAmount > 0x0);\n\n        uint256 exchangeToken = _weiAmount.mul(exchangeRate);\n        exchangeToken = exchangeToken.div(1 * 10 ** 10);\n\n        publicOfferingAddress.transfer(_weiAmount);\n        super.transferInternal(publicOfferingAddress, _beneficiary, exchangeToken);\n    }\n    \n    event ExchangeRateChanged(uint256 oldExchangeRate,uint256 newExchangeRate);\n}\n\ncontract OwnableToken is TradeableToken {\n    \n    address internal owner = 0x6f43fEBF08c28D4B4f690Be07b427D71e1015b58;\n    \n    mapping(address => uint) administrators;\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    modifier onlyAdministrator() {\n        require(msg.sender == owner || administrators[msg.sender] > 0x0);\n        _;\n    }\n    \n    function transferOwnership(address _newOwner) onlyOwner public returns (bool success) {\n        require(_newOwner != address(0));\n        owner = _newOwner;\n        emit OwnershipTransferred(owner, _newOwner);\n        return true;\n    }\n    \n    function addAdministrator(address _adminAddress) onlyOwner public returns (bool success) {\n        require(_adminAddress != address(0));\n        require(administrators[_adminAddress] <= 0x0);\n        administrators[_adminAddress] = 0x1;\n        emit AddAdministrator(_adminAddress);\n        return true;\n    }\n    \n    function removeAdministrator(address _adminAddress) onlyOwner public returns (bool success) {\n        require(_adminAddress != address(0));\n        require(administrators[_adminAddress] > 0x0);\n        administrators[_adminAddress] = 0x0;\n        emit RemoveAdministrator(_adminAddress);\n        return true;\n    }\n    \n    function isAdministrator(address _adminAddress) view public returns (bool success) {\n        require(_adminAddress != address(0));\n        return (administrators[_adminAddress] == 0x1 || _adminAddress == owner);\n    }\n    \n    function setExchangeRate(uint256 _exchangeRate) public onlyAdministrator returns (bool success) {\n        require(_exchangeRate > 0x0);\n        uint256 oldExchangeRate = exchangeRate;\n        exchangeRate = _exchangeRate;\n        emit ExchangeRateChanged(oldExchangeRate, exchangeRate);\n        return true;\n    }\n    \n    function changeUnlockTime(uint _index, uint _unlockTime) public onlyAdministrator returns (bool success) {\n        require(_index >= 0x0 && _index < developerReservedUnlockTimes.length && _unlockTime > 0x0);\n        if(_index > 0x0) {\n            uint beforeUnlockTime = developerReservedUnlockTimes[_index - 1];\n            require(beforeUnlockTime == 0x0 || beforeUnlockTime < _unlockTime);\n        }\n        if(_index < developerReservedUnlockTimes.length - 1) {\n            uint afterUnlockTime = developerReservedUnlockTimes[_index + 1];\n            require(afterUnlockTime == 0x0 || _unlockTime < afterUnlockTime);\n        }\n        uint oldUnlockTime = developerReservedUnlockTimes[_index];\n        developerReservedUnlockTimes[_index] = _unlockTime;\n        emit DeveloperReservedUnlockTimeChanged(_index,oldUnlockTime,_unlockTime);\n        return true;\n    }\n    \n    function getDeveloperReservedLockInfo(uint _index) public onlyAdministrator returns (uint, uint256) {\n        require(_index >= 0x0 && _index < developerReservedUnlockTimes.length && _index < developerReservedBalanceLimits.length);\n        emit DeveloperReservedLockInfo(developerReservedAddress,_index,developerReservedUnlockTimes[_index],developerReservedBalanceLimits[_index]);\n        return (developerReservedUnlockTimes[_index], developerReservedBalanceLimits[_index]);\n    }\n    \n    function lock(address _owner, uint _releaseTime, uint256 _value) public onlyAdministrator returns (uint releaseTime, uint256 limit) {\n        require(_owner != 0x0 && _value > 0x0 && _releaseTime >= now);\n        balanceLocks[_owner] = _value;\n        timeLocks[_owner] = _releaseTime;\n        emit Lock(_owner, _releaseTime, _value);\n        return (_releaseTime, _value);\n    }\n\n    function unlock(address _owner) public onlyAdministrator returns (bool) {\n        require(_owner != 0x0);\n        uint _releaseTime = timeLocks[_owner];\n        uint256 _value = balanceLocks[_owner];\n        balanceLocks[_owner] = 0x0;\n        timeLocks[_owner] = 0x0;\n        emit UnLock(_owner, _releaseTime, _value);\n        return true;\n    }\n\n    function transferAndLock(address _to, uint256 _value, uint _releaseTime) public onlyAdministrator returns (bool success) {\n        require(_to != 0x0);\n        require(_value > 0);\n        require(_releaseTime >= now);\n        require(_value <= balances[msg.sender]);\n\n        lock(_to, _releaseTime, _value);\n        super.transfer(_to, _value);\n        return true;\n    }\n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event AddAdministrator(address indexed adminAddress);\n    event RemoveAdministrator(address indexed adminAddress);\n}\n\ncontract TFT is OwnableToken {\n    \n    constructor() public {\n        balances[owner] = 500000000 * 10 ** 8;\n        balances[publicOfferingAddress] = 300000000 * 10 ** 8;\n\n        uint256 developerReservedBalance = 200000000 * 10 ** 8;\n        balances[developerReservedAddress] = developerReservedBalance;\n        developerReservedUnlockTimes =\n        [\n        DateTimeLib.toTimestamp(2019, 2, 1),\n        DateTimeLib.toTimestamp(2020, 2, 1),\n        DateTimeLib.toTimestamp(2021, 2, 1),\n        DateTimeLib.toTimestamp(2022, 2, 1)\n        ];\n        developerReservedBalanceLimits = \n        [\n            developerReservedBalance,\n            developerReservedBalance - (developerReservedBalance / 4) * 1,\n            developerReservedBalance - (developerReservedBalance / 4) * 2,\n            developerReservedBalance - (developerReservedBalance / 4) * 3\n        ];\n    }\n    \n    function() public payable {\n        buy(msg.sender, msg.value);\n    }\n}",
  "bytecode": "608060405267016345785d8a0000600255737a60bb4e0fb003407dea8d27faaaf050518aea36600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550731bd02c1f89ce9d4f38de3b7c4920fd637f6134e9600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506188b8600f55736f43febf08c28d4b4f690be07b427d71e1015b58601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200012257600080fd5b50600066b1a2bc2ec50000600080601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550666a94d74f430000600080600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555066470de4df820000905080600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506080604051908101604052806200029d6107e360026001620003a36401000000000262002863176401000000009004565b8152602001620002c76107e460026001620003a36401000000000262002863176401000000009004565b8152602001620002f16107e560026001620003a36401000000000262002863176401000000009004565b81526020016200031b6107e660026001620003a36401000000000262002863176401000000009004565b8152506004906004620003309291906200073a565b5060806040519081016040528082815260200160016004848115156200035257fe5b04028303815260200160026004848115156200036a57fe5b04028303815260200160036004848115156200038257fe5b0402830381525060089060046200039b9291906200073a565b5050620007cb565b6000620003c68484846000806000620003cf640100000000026401000000009004565b90509392505050565b600080620003dc6200077f565b6107b291505b8861ffff168261ffff1610156200043a576200040d82620006b0640100000000026401000000009004565b1562000422576301e28500830192506200042c565b6301e13380830192505b8180600101925050620003e2565b601f816000600c811015156200044c57fe5b602002019060ff16908160ff16815250506200047789620006b0640100000000026401000000009004565b15620004a657601d816001600c811015156200048f57fe5b602002019060ff16908160ff1681525050620004ca565b601c816001600c81101515620004b857fe5b602002019060ff16908160ff16815250505b601f816002600c81101515620004dc57fe5b602002019060ff16908160ff1681525050601e816003600c81101515620004ff57fe5b602002019060ff16908160ff1681525050601f816004600c811015156200052257fe5b602002019060ff16908160ff1681525050601e816005600c811015156200054557fe5b602002019060ff16908160ff1681525050601f816006600c811015156200056857fe5b602002019060ff16908160ff1681525050601f816007600c811015156200058b57fe5b602002019060ff16908160ff1681525050601e816008600c81101515620005ae57fe5b602002019060ff16908160ff1681525050601f816009600c81101515620005d157fe5b602002019060ff16908160ff1681525050601e81600a600c81101515620005f457fe5b602002019060ff16908160ff1681525050601f81600b600c811015156200061757fe5b602002019060ff16908160ff1681525050600191505b8760ff168261ffff1610156200067257806001830361ffff16600c811015156200065357fe5b602002015160ff1662015180028301925081806001019250506200062d565b6001870360ff166201518002830192508560ff16610e1002830192508460ff16603c02830192508360ff168301925082925050509695505050505050565b60008060048361ffff16811515620006c457fe5b0661ffff16141515620006db576000905062000735565b600060648361ffff16811515620006ee57fe5b0661ffff1614151562000705576001905062000735565b60006101908361ffff168115156200071957fe5b0661ffff1614151562000730576000905062000735565b600190505b919050565b82600481019282156200076c579160200282015b828111156200076b5782518255916020019190600101906200074e565b5b5090506200077b9190620007a3565b5090565b61018060405190810160405280600c90602082028038833980820191505090505090565b620007c891905b80821115620007c4576000816000905550600101620007aa565b5090565b90565b612bf680620007db6000396000f30060806040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610129578063095ea7b3146101b95780630a2eb3011461021e57806318160ddd1461027957806323b872dd146102a45780632f6c493c14610329578063313ce567146103845780633ba0b9a9146103b557806368fa8134146103e057806370a082311461043b5780637238ccdb1461049257806384d5d944146104f057806395d89b411461055f578063a9059cbb146105ef578063aad7104014610654578063c9991176146106a3578063db068e0e146106fe578063dd62ed3e14610743578063e2ab691d146107ba578063f2fde38b1461082c578063f6988b7914610887575b61012733346108cf565b005b34801561013557600080fd5b5061013e610a2b565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017e578082015181840152602081019050610163565b50505050905090810190601f1680156101ab5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101c557600080fd5b50610204600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a64565b604051808215151515815260200191505060405180910390f35b34801561022a57600080fd5b5061025f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b73565b604051808215151515815260200191505060405180910390f35b34801561028557600080fd5b5061028e610c52565b6040518082815260200191505060405180910390f35b3480156102b057600080fd5b5061030f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c5c565b604051808215151515815260200191505060405180910390f35b34801561033557600080fd5b5061036a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f10565b604051808215151515815260200191505060405180910390f35b34801561039057600080fd5b50610399611150565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103c157600080fd5b506103ca611155565b6040518082815260200191505060405180910390f35b3480156103ec57600080fd5b50610421600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061115b565b604051808215151515815260200191505060405180910390f35b34801561044757600080fd5b5061047c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112d4565b6040518082815260200191505060405180910390f35b34801561049e57600080fd5b506104d3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061131c565b604051808381526020018281526020019250505060405180910390f35b3480156104fc57600080fd5b50610545600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506113a8565b604051808215151515815260200191505060405180910390f35b34801561056b57600080fd5b50610574611504565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105b4578082015181840152602081019050610599565b50505050905090810190601f1680156105e15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105fb57600080fd5b5061063a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061153d565b604051808215151515815260200191505060405180910390f35b34801561066057600080fd5b506106896004803603810190808035906020019092919080359060200190929190505050611552565b604051808215151515815260200191505060405180910390f35b3480156106af57600080fd5b506106e4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611717565b604051808215151515815260200191505060405180910390f35b34801561070a57600080fd5b5061072960048036038101908080359060200190929190505050611891565b604051808215151515815260200191505060405180910390f35b34801561074f57600080fd5b506107a4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506119a0565b6040518082815260200191505060405180910390f35b3480156107c657600080fd5b5061080f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050611a27565b604051808381526020018281526020019250505060405180910390f35b34801561083857600080fd5b5061086d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bfa565b604051808215151515815260200191505060405180910390f35b34801561089357600080fd5b506108b260048036038101908080359060200190929190505050611d5a565b604051808381526020018281526020019250505060405180910390f35b6000808373ffffffffffffffffffffffffffffffffffffffff16141515156108f657600080fd5b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561093e57600080fd5b6000600f5411151561094f57600080fd5b60008211151561095e57600080fd5b610973600f5483611ef690919063ffffffff16565b905061098d6402540be40082611f2990919063ffffffff16565b9050600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156109f7573d6000803e3d6000fd5b50610a25600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168483611f6a565b50505050565b6040805190810160405280601981526020017f476c6f62616c20546f6b656e46696e616e636520546f6b656e0000000000000081525081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258484604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a26001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610bb057600080fd5b6001601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541480610c4b5750601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b9050919050565b6000600254905090565b60008060008060008773ffffffffffffffffffffffffffffffffffffffff1614158015610ca0575060008673ffffffffffffffffffffffffffffffffffffffff1614155b8015610cac5750600085115b1515610cb757600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415610d7757610d1561221e565b925084610d69846000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122b590919063ffffffff16565b10151515610d7657600080fd5b5b610d808761131c565b91509150428211158015610d95575060008214155b15610e8357600091506000600d60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600c60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508673ffffffffffffffffffffffffffffffffffffffff167fc56cef68903bdd36458fd80e70fac1fabcf0b8b37d32e6b9d02ccef26642570b8383604051808381526020018281526020019250505060405180910390a2600090505b60008214158015610e945750600081115b15610ef95784610eeb826000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122b590919063ffffffff16565b10151515610ef857600080fd5b5b610f048787876122ce565b93505050509392505050565b6000806000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610fb057506000601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b1515610fbb57600080fd5b60008473ffffffffffffffffffffffffffffffffffffffff1614151515610fe157600080fd5b600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff167fc56cef68903bdd36458fd80e70fac1fabcf0b8b37d32e6b9d02ccef26642570b8383604051808381526020018281526020019250505060405180910390a2600192505050919050565b600881565b600f5481565b6000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111b957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156111f557600080fd5b6000601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151561124357600080fd5b6000601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f5e40a439a19faa971f5d14cf300dcd7ee0d236808b9a988c9b4ca89cb833e96160405160405180910390a260019050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491509150915091565b6000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061144557506000601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b151561145057600080fd5b60008473ffffffffffffffffffffffffffffffffffffffff161415151561147657600080fd5b60008311151561148557600080fd5b42821015151561149457600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111515156114e157600080fd5b6114ec848385611a27565b50506114f8848461153d565b50600190509392505050565b6040805190810160405280600381526020017f544654000000000000000000000000000000000000000000000000000000000081525081565b600061154a338484611f6a565b905092915050565b600080600080601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806115f357506000601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b15156115fe57600080fd5b6000861015801561160f5750600486105b801561161b5750600085115b151561162657600080fd5b600086111561165f5760046001870360048110151561164157fe5b01549250600083148061165357508483105b151561165e57600080fd5b5b600160040386101561169b5760046001870160048110151561167d57fe5b01549150600082148061168f57508185105b151561169a57600080fd5b5b6004866004811015156116aa57fe5b01549050846004876004811015156116be57fe5b01819055507fbf790663d2af8830f8589af82ffcf2307f6f0d20b9a4f38b6e2219739e70fe7a86828760405180848152602001838152602001828152602001935050505060405180910390a16001935050505092915050565b6000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561177557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156117b157600080fd5b6000601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115151561180057600080fd5b6001601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f6e5eedde7d0d690d55dea362660be04ef1eb36252e48817545afb1ae6b245a4060405160405180910390a260019050919050565b600080601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061192f57506000601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b151561193a57600080fd5b60008311151561194957600080fd5b600f54905082600f819055507fb01b0304cdcaffa13e4b57ecbe280da183afb719becd1d56e9211cc3781ea42181600f54604051808381526020018281526020019250505060405180910390a16001915050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611ac557506000601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b1515611ad057600080fd5b60008573ffffffffffffffffffffffffffffffffffffffff1614158015611af75750600083115b8015611b035750428410155b1515611b0e57600080fd5b82600c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555083600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff167f49eaf4942f1237055eb4cfa5f31c9dfe50d5b4ade01e021f7de8be2fbbde557b8585604051808381526020018281526020019250505060405180910390a2838391509150935093915050565b6000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c5857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611c9457600080fd5b81601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff16601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360019050919050565b600080601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611df857506000601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b1515611e0357600080fd5b60008310158015611e145750600483105b8015611e205750600483105b1515611e2b57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f84a36c1f95c5b90497f063912621cdc88710ee4fffb678361d2caecc144130a184600486600481101515611e9557fe5b0154600887600481101515611ea657fe5b015460405180848152602001838152602001828152602001935050505060405180910390a2600483600481101515611eda57fe5b0154600884600481101515611eeb57fe5b015491509150915091565b60008082840290506000841480611f175750828482811515611f1457fe5b04145b1515611f1f57fe5b8091505092915050565b600080600083111515611f3857fe5b8284811515611f4357fe5b0490508284811515611f5157fe5b068184020184141515611f6057fe5b8091505092915050565b60008060008060008773ffffffffffffffffffffffffffffffffffffffff1614158015611fae575060008673ffffffffffffffffffffffffffffffffffffffff1614155b8015611fba5750600085115b1515611fc557600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614156120855761202361221e565b925084612077846000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122b590919063ffffffff16565b1015151561208457600080fd5b5b61208e8761131c565b915091504282111580156120a3575060008214155b1561219157600091506000600d60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600c60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508673ffffffffffffffffffffffffffffffffffffffff167fc56cef68903bdd36458fd80e70fac1fabcf0b8b37d32e6b9d02ccef26642570b8383604051808381526020018281526020019250505060405180910390a2600090505b600082141580156121a25750600081115b1561220757846121f9826000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122b590919063ffffffff16565b1015151561220657600080fd5b5b612212878787612655565b93505050509392505050565b6000806000429150600090505b60048110156122ab57600060048260048110151561224557fe5b015414156122525761229e565b60048160048110151561226157fe5b015482111561228557600060048260048110151561227b57fe5b018190555061229d565b60088160048110151561229457fe5b015492506122b0565b5b808060010191505061222b565b600092505b505090565b60008282111515156122c357fe5b818303905092915050565b6000808211801561235b575081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156123a55750816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b15156123b057600080fd5b612401826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122b590919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612494826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461284590919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061256582600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122b590919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600080821180156126a45750816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b15156126af57600080fd5b612700826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122b590919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612793826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461284590919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600080828401905083811015151561285957fe5b8091505092915050565b6000612875848484600080600061287e565b90509392505050565b600080612889612ba6565b6107b291505b8861ffff168261ffff1610156128d2576128a882612b25565b156128bb576301e28500830192506128c5565b6301e13380830192505b818060010192505061288f565b601f816000600c811015156128e357fe5b602002019060ff16908160ff16815250506128fd89612b25565b1561292957601d816001600c8110151561291357fe5b602002019060ff16908160ff168152505061294c565b601c816001600c8110151561293a57fe5b602002019060ff16908160ff16815250505b601f816002600c8110151561295d57fe5b602002019060ff16908160ff1681525050601e816003600c8110151561297f57fe5b602002019060ff16908160ff1681525050601f816004600c811015156129a157fe5b602002019060ff16908160ff1681525050601e816005600c811015156129c357fe5b602002019060ff16908160ff1681525050601f816006600c811015156129e557fe5b602002019060ff16908160ff1681525050601f816007600c81101515612a0757fe5b602002019060ff16908160ff1681525050601e816008600c81101515612a2957fe5b602002019060ff16908160ff1681525050601f816009600c81101515612a4b57fe5b602002019060ff16908160ff1681525050601e81600a600c81101515612a6d57fe5b602002019060ff16908160ff1681525050601f81600b600c81101515612a8f57fe5b602002019060ff16908160ff1681525050600191505b8760ff168261ffff161015612ae757806001830361ffff16600c81101515612ac957fe5b602002015160ff166201518002830192508180600101925050612aa5565b6001870360ff166201518002830192508560ff16610e1002830192508460ff16603c02830192508360ff168301925082925050509695505050505050565b60008060048361ffff16811515612b3857fe5b0661ffff16141515612b4d5760009050612ba1565b600060648361ffff16811515612b5f57fe5b0661ffff16141515612b745760019050612ba1565b60006101908361ffff16811515612b8757fe5b0661ffff16141515612b9c5760009050612ba1565b600190505b919050565b61018060405190810160405280600c906020820280388339808201915050905050905600a165627a7a72305820c55abbdde7fc67caac84b308d37a233649c6ec2e9692bcb960b1cbc8d37a633c0029"
}