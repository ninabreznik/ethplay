{
  "address": "0x44197a4c44d6a059297caf6be4f7e172bd56caaf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ELTCoin",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-09\n*/\n\npragma solidity ^0.4.15;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n  bool public isPreSaleReady = false;\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    uint256 _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    require(isPreSaleReady);\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue) returns (bool success) {\n    require(isPreSaleReady);\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success) {\n    require(isPreSaleReady);\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\ncontract ELTCoin is StandardToken, Ownable {\n\n  string public constant name = \"ELTCOIN\";\n  string public constant symbol = \"ELTCOIN\";\n  uint8 public constant decimals = 8;\n\n  uint256 public constant INITIAL_SUPPLY = 100000000 * (10 ** uint256(decimals));\n\n  event PreSaleReady();\n\n  function makePresaleReady() onlyOwner public {\n    require(!isPreSaleReady);\n\n    PreSaleReady();\n\n    isPreSaleReady = true;\n  }\n\n  /**\n   * @dev Constructor that gives msg.sender all of existing tokens.\n   */\n  function ELTCoin() {\n    totalSupply = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n  }\n}",
  "bytecode": "60606040526003805460ff19169055341561001957600080fd5b5b5b6003805461010060a860020a03191661010033600160a060020a0316021790555b662386f26fc100006000818155600160a060020a0333168152600160205260409020555b5b610b21806100706000396000f300606060405236156100e35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100e8578063095ea7b31461017357806318160ddd146101a95780631efad671146101ce57806323b872dd146101f55780632ff2e9dc14610231578063313ce56714610256578063661884631461027f57806370a08231146102b55780638da5cb5b146102e657806395d89b41146100e8578063a260d8da146103a0578063a9059cbb146103b5578063d73dd623146103eb578063dd62ed3e14610421578063f2fde38b14610458575b600080fd5b34156100f357600080fd5b6100fb610479565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101385780820151818401525b60200161011f565b50505050905090810190601f1680156101655780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017e57600080fd5b610195600160a060020a03600435166024356104b0565b604051901515815260200160405180910390f35b34156101b457600080fd5b6101bc61052e565b60405190815260200160405180910390f35b34156101d957600080fd5b610195610534565b604051901515815260200160405180910390f35b341561020057600080fd5b610195600160a060020a036004358116906024351660443561053d565b604051901515815260200160405180910390f35b341561023c57600080fd5b6101bc610669565b60405190815260200160405180910390f35b341561026157600080fd5b610269610674565b60405160ff909116815260200160405180910390f35b341561028a57600080fd5b610195600160a060020a0360043516602435610679565b604051901515815260200160405180910390f35b34156102c057600080fd5b6101bc600160a060020a036004351661078a565b60405190815260200160405180910390f35b34156102f157600080fd5b6102f96107a9565b604051600160a060020a03909116815260200160405180910390f35b34156100f357600080fd5b6100fb610479565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101385780820151818401525b60200161011f565b50505050905090810190601f1680156101655780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103ab57600080fd5b6103b36107f4565b005b34156103c057600080fd5b610195600160a060020a0360043516602435610861565b604051901515815260200160405180910390f35b34156103f657600080fd5b610195600160a060020a0360043516602435610938565b604051901515815260200160405180910390f35b341561042c57600080fd5b6101bc600160a060020a03600435811690602435166109ef565b60405190815260200160405180910390f35b341561046357600080fd5b6103b3600160a060020a0360043516610a1c565b005b60408051908101604052600781527f454c54434f494e00000000000000000000000000000000000000000000000000602082015281565b60035460009060ff1615156104c457600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b60035460ff1681565b600080600160a060020a038416151561055557600080fd5b50600160a060020a0380851660008181526002602090815260408083203390951683529381528382205492825260019052919091205461059b908463ffffffff610ac416565b600160a060020a0380871660009081526001602052604080822093909355908616815220546105d0908463ffffffff610adb16565b600160a060020a0385166000908152600160205260409020556105f9818463ffffffff610ac416565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b662386f26fc1000081565b600881565b600354600090819060ff16151561068f57600080fd5b50600160a060020a03338116600090815260026020908152604080832093871683529290522054808311156106eb57600160a060020a033381166000908152600260209081526040808320938816835292905290812055610722565b6106fb818463ffffffff610ac416565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b600160a060020a0381166000908152600160205260409020545b919050565b6003546101009004600160a060020a031681565b60408051908101604052600781527f454c54434f494e00000000000000000000000000000000000000000000000000602082015281565b60035433600160a060020a03908116610100909204161461081457600080fd5b60035460ff161561082457600080fd5b7f58cce5a3c225fddefd9261ff4cd9d5b3207743f23955d224c71efb17fa91691a60405160405180910390a16003805460ff191660011790555b5b565b6000600160a060020a038316151561087857600080fd5b600160a060020a0333166000908152600160205260409020546108a1908363ffffffff610ac416565b600160a060020a0333811660009081526001602052604080822093909355908516815220546108d6908363ffffffff610adb16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b60035460009060ff16151561094c57600080fd5b600160a060020a03338116600090815260026020908152604080832093871683529290522054610982908363ffffffff610adb16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a35060015b92915050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a039081166101009092041614610a3c57600080fd5b600160a060020a0381161515610a5157600080fd5b600354600160a060020a03808316916101009004167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805474ffffffffffffffffffffffffffffffffffffffff001916610100600160a060020a038416021790555b5b50565b600082821115610ad057fe5b508082035b92915050565b600082820183811015610aea57fe5b8091505b50929150505600a165627a7a72305820b164e92998d12641250687522c857f3182e9da2acdba036ca696adee9e5fa9160029"
}