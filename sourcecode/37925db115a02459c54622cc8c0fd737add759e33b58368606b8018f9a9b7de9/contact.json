{
  "address": "0xd5632Cbf4257Dbc683726aE44178274a143fA0F9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OreOreCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-02\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    if (_a == 0) {\n      return 0;\n    }\n    uint256 c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return c;\n  }\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    uint256 c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\ncontract Ownable {\n    address public owner;\n    address public newOwner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    constructor() public {\n        owner = msg.sender;\n        newOwner = address(0);\n    }\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    modifier onlyNewOwner() {\n        require(msg.sender != address(0));\n        require(msg.sender == newOwner);\n        _;\n    }\n    function transferOwnership(address _newOwner) public onlyOwner {\n\n        require(_newOwner != address(0));\nnewOwner = _newOwner;\n    }\n    function acceptOwnership() public onlyNewOwner returns(bool) {\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n  bool public paused = false;\n  modifier whenNotPaused() {\n    require(!paused);\n\n    _;\n }\n  modifier whenPaused() {\n    require(paused);\n    _;\n\n  }\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ninterface TokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; \n}\n\ncontract OreOreCoin is ERC20, Ownable, Pausable {\n    uint128 internal MONTH = 30 * 24 * 3600; // 1 month\n    using SafeMath for uint256;\n\n    struct LockupInfo {\n        uint256 releaseTime;\n        uint256 termOfRound;\n        uint256 unlockAmountPerRound;        \n        uint256 lockupBalance;\n    }\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 internal initialSupply;\n    uint256 internal totalSupply_;\n\n    mapping(address => uint256) internal balances;\n    mapping(address => bool) internal locks;\n    mapping(address => bool) public frozen;\n    mapping(address => mapping(address => uint256)) internal allowed;\n    mapping(address => LockupInfo) internal lockupInfo;\n\n    event Unlock(address indexed holder, uint256 value);\n    event Lock(address indexed holder, uint256 value);\n    event Burn(address indexed owner, uint256 value);\n    event Mint(uint256 value);\n    event Freeze(address indexed holder);\n    event Unfreeze(address indexed holder);\n\n    modifier notFrozen(address _holder) {\n        require(!frozen[_holder]);\n        _;\n    }\n    constructor() public {\n        name = \"OreOreCoin\";\n        symbol = \"OOC\";\n        decimals = 0;\n        initialSupply = 1000000;\n        totalSupply_ = 1000000;\n        balances[owner] = totalSupply_;\n        emit Transfer(address(0), owner, totalSupply_);\n\n    }\n    function () public payable {\n        revert();\n    }\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    function transfer(address _to, uint256 _value) public whenNotPaused notFrozen(msg.sender) returns (bool) {\n        if (locks[msg.sender]) {\n            autoUnlock(msg.sender);            \n        }\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    function balanceOf(address _holder) public view returns (uint256 balance) {\n        return balances[_holder] + lockupInfo[_holder].lockupBalance;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused notFrozen(_from)returns (bool) {\n        if (locks[_from]) {\n            autoUnlock(_from);            \n        }\n        require(_to != address(0));\n\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n\n    }\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        require(isContract(_spender));\n        TokenRecipient spender = TokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    function allowance(address _holder, address _spender) public view returns (uint256) {\n        return allowed[_holder][_spender];\n    }\n\n    function lock(address _holder, uint256 _amount, uint256 _releaseStart, uint256 _termOfRound, uint256 _releaseRate) public onlyOwner returns (bool) {\n        require(locks[_holder] == false);\n        require(balances[_holder] >= _amount);\n        balances[_holder] = balances[_holder].sub(_amount);\n        lockupInfo[_holder] = LockupInfo(_releaseStart, _termOfRound, _amount.div(100).mul(_releaseRate), _amount);\n\n        locks[_holder] = true;\n        emit Lock(_holder, _amount);\n        return true;\n\n    }\n\n    function unlock(address _holder) public onlyOwner returns (bool) {\n        require(locks[_holder] == true);\n        uint256 releaseAmount = lockupInfo[_holder].lockupBalance;\n\n\n\n        delete lockupInfo[_holder];\n        locks[_holder] = false;\n        emit Unlock(_holder, releaseAmount);\n        balances[_holder] = balances[_holder].add(releaseAmount);\n        return true;\n    }\n\n    function freezeAccount(address _holder) public onlyOwner returns (bool) {\n        require(!frozen[_holder]);\n        frozen[_holder] = true;\n        emit Freeze(_holder);\n        return true;\n    }\n\n    function unfreezeAccount(address _holder) public onlyOwner returns (bool) {\n        require(frozen[_holder]);\n        frozen[_holder] = false;\n        emit Unfreeze(_holder);\n        return true;\n    }\n\n\n\n    function getNowTime() public view returns(uint256) {\n      return now;\n    }\n\n\n\n    function showLockState(address _holder) public view returns (bool, uint256, uint256, uint256, uint256) {\n        return (locks[_holder], lockupInfo[_holder].lockupBalance, lockupInfo[_holder].releaseTime, lockupInfo[_holder].termOfRound, lockupInfo[_holder].unlockAmountPerRound);\n    }\n\n\n\n    function distribute(address _to, uint256 _value) public onlyOwner returns (bool) {\n\n        require(_to != address(0));\n\n        require(_value <= balances[owner]);\n        balances[owner] = balances[owner].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(owner, _to, _value);\n        return true;\n    }\n\n\n\n    function distributeWithLockup(address _to, uint256 _value, uint256 _releaseStart, uint256 _termOfRound, uint256 _releaseRate) public onlyOwner returns (bool) {\n        distribute(_to, _value);\n        lock(_to, _value, _releaseStart, _termOfRound, _releaseRate);\n        return true;\n    }\n\n\n    function claimToken(ERC20 token, address _to, uint256 _value) public onlyOwner returns (bool) {\n        token.transfer(_to, _value);\n        return true;\n    }\n\n\n    function burn(uint256 _value) public onlyOwner returns (bool success) {\n        require(_value <= balances[msg.sender]);\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(burner, _value);\n        return true;\n\n    }\n\n\n\n    function mint( uint256 _amount) onlyOwner public returns (bool) {\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[owner] = balances[owner].add(_amount);\n        emit Transfer(address(0), owner, _amount);\n        return true;\n    }\n    function isContract(address addr) internal view returns (bool) {\n        uint size;\n        assembly{size := extcodesize(addr)}\n        return size > 0;\n    }\n    function autoUnlock(address _holder) internal returns (bool) {\n        if (lockupInfo[_holder].releaseTime <= now) {\n            return releaseTimeLock(_holder);\n        }\n        return false;\n    }\n    function releaseTimeLock(address _holder) internal returns(bool) {\n\n        require(locks[_holder]);\n\n        uint256 releaseAmount = 0;\n       \n        for( ; lockupInfo[_holder].releaseTime <= now ; )\n        {\n            if (lockupInfo[_holder].lockupBalance <= lockupInfo[_holder].unlockAmountPerRound) {   \n                releaseAmount = releaseAmount.add(lockupInfo[_holder].lockupBalance);\n                delete lockupInfo[_holder];\n                locks[_holder] = false;\n                break;             \n\n            } else {\n                releaseAmount = releaseAmount.add(lockupInfo[_holder].unlockAmountPerRound);\n                lockupInfo[_holder].lockupBalance = lockupInfo[_holder].lockupBalance.sub(lockupInfo[_holder].unlockAmountPerRound);\n                lockupInfo[_holder].releaseTime = lockupInfo[_holder].releaseTime.add(lockupInfo[_holder].termOfRound);\n            }            \n        }\n        emit Unlock(_holder, releaseAmount);\n        balances[_holder] = balances[_holder].add(releaseAmount);\n        return true;\n    }\n}",
  "bytecode": "60806040526001805460a060020a60ff0219169055600280546001608060020a03191662278d001790553480156200003657600080fd5b5060008054600160a060020a0319908116331790915560018054909116905560408051808201909152600a8082527f4f72654f7265436f696e0000000000000000000000000000000000000000000060209092019182526200009b9160039162000158565b506040805180820190915260038082527f4f4f4300000000000000000000000000000000000000000000000000000000006020909201918252620000e29160049162000158565b506005805460ff19169055620f42406006819055600781905560008054600160a060020a0390811682526008602090815260408084208590558354815195865290519216937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3620001fd565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019b57805160ff1916838001178555620001cb565b82800160010185558215620001cb579182015b82811115620001cb578251825591602001919060010190620001ae565b50620001d9929150620001dd565b5090565b620001fa91905b80821115620001d95760008155600101620001e4565b90565b6118a3806200020d6000396000f3006080604052600436106101745763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610179578063095ea7b314610203578063125bfb661461023b57806318160ddd1461026557806323b872dd1461028c5780632f6c493c146102b6578063313ce567146102d75780633f4ba83a1461030257806342966c68146103195780635c975abb14610331578063625becbc1461034657806370a0823114610394578063788649ea146103b557806379ba5097146103d65780637c759d0d146103eb5780638456cb59146104185780638da5cb5b1461042d57806395d89b411461045e5780639b819d3814610473578063a0712d6814610488578063a9059cbb146104a0578063c572652b146104c4578063cae9ca51146104f1578063d05166501461055a578063d4ee1d901461057b578063dd62ed3e14610590578063f26c159f146105b7578063f2fde38b146105d8578063fb932108146105f9575b600080fd5b34801561018557600080fd5b5061018e61061d565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101c85781810151838201526020016101b0565b50505050905090810190601f1680156101f55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020f57600080fd5b50610227600160a060020a03600435166024356106ab565b604080519115158252519081900360200190f35b34801561024757600080fd5b50610227600160a060020a036004358116906024351660443561072c565b34801561027157600080fd5b5061027a6107f6565b60408051918252519081900360200190f35b34801561029857600080fd5b50610227600160a060020a03600435811690602435166044356107fc565b3480156102c257600080fd5b50610227600160a060020a03600435166109d2565b3480156102e357600080fd5b506102ec610ade565b6040805160ff9092168252519081900360200190f35b34801561030e57600080fd5b50610317610ae7565b005b34801561032557600080fd5b50610227600435610b5f565b34801561033d57600080fd5b50610227610c2d565b34801561035257600080fd5b50610367600160a060020a0360043516610c3d565b60408051951515865260208601949094528484019290925260608401526080830152519081900360a00190f35b3480156103a057600080fd5b5061027a600160a060020a0360043516610c7f565b3480156103c157600080fd5b50610227600160a060020a0360043516610cae565b3480156103e257600080fd5b50610227610d3b565b3480156103f757600080fd5b50610227600160a060020a0360043516602435604435606435608435610dcf565b34801561042457600080fd5b50610317610f49565b34801561043957600080fd5b50610442610fc6565b60408051600160a060020a039092168252519081900360200190f35b34801561046a57600080fd5b5061018e610fd5565b34801561047f57600080fd5b5061027a611030565b34801561049457600080fd5b50610227600435611034565b3480156104ac57600080fd5b50610227600160a060020a03600435166024356110d9565b3480156104d057600080fd5b50610227600160a060020a0360043516602435604435606435608435611205565b3480156104fd57600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610227948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506112429650505050505050565b34801561056657600080fd5b50610227600160a060020a036004351661136d565b34801561058757600080fd5b50610442611382565b34801561059c57600080fd5b5061027a600160a060020a0360043581169060243516611391565b3480156105c357600080fd5b50610227600160a060020a03600435166113bc565b3480156105e457600080fd5b50610317600160a060020a036004351661144b565b34801561060557600080fd5b50610227600160a060020a03600435166024356114a6565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106a35780601f10610678576101008083540402835291602001916106a3565b820191906000526020600020905b81548152906001019060200180831161068657829003601f168201915b505050505081565b60015460009060a060020a900460ff16156106c557600080fd5b336000818152600b60209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60008054600160a060020a0316331461074457600080fd5b83600160a060020a031663a9059cbb84846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156107c057600080fd5b505af11580156107d4573d6000803e3d6000fd5b505050506040513d60208110156107ea57600080fd5b50600195945050505050565b60075490565b60015460009060a060020a900460ff161561081657600080fd5b600160a060020a0384166000908152600a6020526040902054849060ff161561083e57600080fd5b600160a060020a03851660009081526009602052604090205460ff161561086a57610868856115a6565b505b600160a060020a038416151561087f57600080fd5b600160a060020a0385166000908152600860205260409020548311156108a457600080fd5b600160a060020a0385166000908152600b602090815260408083203384529091529020548311156108d457600080fd5b600160a060020a0385166000908152600860205260409020546108fd908463ffffffff6115dd16565b600160a060020a038087166000908152600860205260408082209390935590861681522054610932908463ffffffff6115ef16565b600160a060020a038086166000908152600860209081526040808320949094559188168152600b82528281203382529091522054610976908463ffffffff6115dd16565b600160a060020a038087166000818152600b602090815260408083203384528252918290209490945580518781529051928816939192600080516020611858833981519152929181900390910190a3600191505b509392505050565b600080548190600160a060020a031633146109ec57600080fd5b600160a060020a03831660009081526009602052604090205460ff161515600114610a1657600080fd5b50600160a060020a0382166000818152600c602090815260408083206003810180548583556001830186905560029092018590558490556009835292819020805460ff19169055805183815290519293927f6381d9813cabeb57471b5a7e05078e64845ccdb563146a6911d536f24ce960f1929181900390910190a2600160a060020a038316600090815260086020526040902054610abb908263ffffffff6115ef16565b600160a060020a0384166000908152600860205260409020556001915050919050565b60055460ff1681565b600054600160a060020a03163314610afe57600080fd5b60015460a060020a900460ff161515610b1657600080fd5b6001805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600080548190600160a060020a03163314610b7957600080fd5b33600090815260086020526040902054831115610b9557600080fd5b5033600081815260086020526040902054610bb6908463ffffffff6115dd16565b600160a060020a038216600090815260086020526040902055600754610be2908463ffffffff6115dd16565b600755604080518481529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250600192915050565b60015460a060020a900460ff1681565b600160a060020a0316600090815260096020908152604080832054600c90925290912060038101548154600183015460029093015460ff909416949193909291565b600160a060020a0381166000908152600c6020908152604080832060030154600890925290912054015b919050565b60008054600160a060020a03163314610cc657600080fd5b600160a060020a0382166000908152600a602052604090205460ff161515610ced57600080fd5b600160a060020a0382166000818152600a6020526040808220805460ff19169055517fca5069937e68fd197927055037f59d7c90bf75ac104e6e375539ef480c3ad6ee9190a2506001919050565b6000331515610d4957600080fd5b600154600160a060020a03163314610d6057600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36001546000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390921691909117905590565b60008054600160a060020a03163314610de757600080fd5b600160a060020a03861660009081526009602052604090205460ff1615610e0d57600080fd5b600160a060020a038616600090815260086020526040902054851115610e3257600080fd5b600160a060020a038616600090815260086020526040902054610e5b908663ffffffff6115dd16565b600160a060020a0387166000908152600860209081526040918290209290925580516080810182528681529182018590528101610eaf84610ea389606463ffffffff61160516565b9063ffffffff61161c16565b81526020908101879052600160a060020a0388166000818152600c8352604080822085518155858501516001808301919091558683015160028301556060909601516003909101556009845290819020805460ff19169094179093558251888152925190927f625fed9875dada8643f2418b838ae0bc78d9a148a18eee4ee1979ff0f3f5d42792908290030190a250600195945050505050565b600054600160a060020a03163314610f6057600080fd5b60015460a060020a900460ff1615610f7757600080fd5b6001805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600054600160a060020a031681565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106a35780601f10610678576101008083540402835291602001916106a3565b4290565b60008054600160a060020a0316331461104c57600080fd5b60075461105f908363ffffffff6115ef16565b60075560008054600160a060020a031681526008602052604090205461108b908363ffffffff6115ef16565b60008054600160a060020a03908116825260086020908152604080842094909455825484518781529451921693600080516020611858833981519152929081900390910190a3506001919050565b60015460009060a060020a900460ff16156110f357600080fd5b336000818152600a602052604090205460ff161561111057600080fd5b3360009081526009602052604090205460ff161561113357611131336115a6565b505b600160a060020a038416151561114857600080fd5b3360009081526008602052604090205483111561116457600080fd5b33600090815260086020526040902054611184908463ffffffff6115dd16565b3360009081526008602052604080822092909255600160a060020a038616815220546111b6908463ffffffff6115ef16565b600160a060020a0385166000818152600860209081526040918290209390935580518681529051919233926000805160206118588339815191529281900390910190a3600191505b5092915050565b60008054600160a060020a0316331461121d57600080fd5b61122786866114a6565b506112358686868686610dcf565b5060019695505050505050565b60008061124e85611647565b151561125957600080fd5b508361126581856106ab565b156109ca576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b838110156112fd5781810151838201526020016112e5565b50505050905090810190601f16801561132a5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561134c57600080fd5b505af1158015611360573d6000803e3d6000fd5b50505050600191506109ca565b600a6020526000908152604090205460ff1681565b600154600160a060020a031681565b600160a060020a039182166000908152600b6020908152604080832093909416825291909152205490565b60008054600160a060020a031633146113d457600080fd5b600160a060020a0382166000908152600a602052604090205460ff16156113fa57600080fd5b600160a060020a0382166000818152600a6020526040808220805460ff19166001179055517faf85b60d26151edd11443b704d424da6c43d0468f2235ebae3d1904dbc3230499190a2506001919050565b600054600160a060020a0316331461146257600080fd5b600160a060020a038116151561147757600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008054600160a060020a031633146114be57600080fd5b600160a060020a03831615156114d357600080fd5b60008054600160a060020a03168152600860205260409020548211156114f857600080fd5b60008054600160a060020a0316815260086020526040902054611521908363ffffffff6115dd16565b60008054600160a060020a0390811682526008602052604080832093909355851681522054611556908363ffffffff6115ef16565b600160a060020a038085166000818152600860209081526040808320959095559054845187815294519294931692600080516020611858833981519152929081900390910190a350600192915050565b600160a060020a0381166000908152600c602052604081205442106115d5576115ce8261164f565b9050610ca9565b506000919050565b6000828211156115e957fe5b50900390565b6000828201838110156115fe57fe5b9392505050565b600080828481151561161357fe5b04949350505050565b60008083151561162f57600091506111fe565b5082820282848281151561163f57fe5b04146115fe57fe5b6000903b1190565b600160a060020a038116600090815260096020526040812054819060ff16151561167857600080fd5b5060005b600160a060020a0383166000908152600c602052604090205442106117ef57600160a060020a0383166000908152600c6020526040902060028101546003909101541161173857600160a060020a0383166000908152600c60205260409020600301546116f090829063ffffffff6115ef16565b600160a060020a0384166000908152600c60209081526040808320838155600181018490556002810184905560030183905560099091529020805460ff1916905590506117ef565b600160a060020a0383166000908152600c602052604090206002015461176590829063ffffffff6115ef16565b600160a060020a0384166000908152600c60205260409020600281015460039091015491925061179b919063ffffffff6115dd16565b600160a060020a0384166000908152600c602052604090206003810191909155600181015490546117d19163ffffffff6115ef16565b600160a060020a0384166000908152600c602052604090205561167c565b604080518281529051600160a060020a038516917f6381d9813cabeb57471b5a7e05078e64845ccdb563146a6911d536f24ce960f1919081900360200190a2600160a060020a038316600090815260086020526040902054610abb908263ffffffff6115ef165600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820a5b6f9cc9314dc77b16a70c8a31b8101df7dac3e859c703c4fa9bdfbc4d505d40029"
}