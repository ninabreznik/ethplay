{
  "address": "0x34e71fda469b91e7ef57738cb06cb7c120621f25",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MCUXPromoToken",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-15\n*/\n\n/*\n * Safe Math Smart Contract.  Copyright © 2016–2017 by ABDK Consulting.\n * Author: Mikhail Vladimirov <[email protected]>\n */\npragma solidity ^0.4.20;\n\n/**\n * Provides methods to safely add, subtract and multiply uint256 numbers.\n */\ncontract SafeMath {\n  uint256 constant private MAX_UINT256 =\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n  /**\n   * Add two uint256 values, throw in case of overflow.\n   *\n   * @param x first value to add\n   * @param y second value to add\n   * @return x + y\n   */\n  function safeAdd (uint256 x, uint256 y)\n  pure internal\n  returns (uint256 z) {\n    assert (x <= MAX_UINT256 - y);\n    return x + y;\n  }\n\n  /**\n   * Subtract one uint256 value from another, throw in case of underflow.\n   *\n   * @param x value to subtract from\n   * @param y value to subtract\n   * @return x - y\n   */\n  function safeSub (uint256 x, uint256 y)\n  pure internal\n  returns (uint256 z) {\n    assert (x >= y);\n    return x - y;\n  }\n\n  /**\n   * Multiply two uint256 values, throw in case of overflow.\n   *\n   * @param x first value to multiply\n   * @param y second value to multiply\n   * @return x * y\n   */\n  function safeMul (uint256 x, uint256 y)\n  pure internal\n  returns (uint256 z) {\n    if (y == 0) return 0; // Prevent division by zero at the next line\n    assert (x <= MAX_UINT256 / y);\n    return x * y;\n  }\n}\n/*\n * EIP-20 Standard Token Smart Contract Interface.\n * Copyright © 2016–2018 by ABDK Consulting.\n * Author: Mikhail Vladimirov <[email protected]>\n */\n\n/**\n * ERC-20 standard token interface, as defined\n * <a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\">here</a>.\n */\ncontract Token {\n  /**\n   * Get total number of tokens in circulation.\n   *\n   * @return total number of tokens in circulation\n   */\n  function totalSupply () public view returns (uint256 supply);\n\n  /**\n   * Get number of tokens currently belonging to given owner.\n   *\n   * @param _owner address to get number of tokens currently belonging to the\n   *        owner of\n   * @return number of tokens currently belonging to the owner of given address\n   */\n  function balanceOf (address _owner) public view returns (uint256 balance);\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer (address _to, uint256 _value)\n  public returns (bool success);\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom (address _from, address _to, uint256 _value)\n  public returns (bool success);\n\n  /**\n   * Allow given spender to transfer given number of tokens from message sender.\n   *\n   * @param _spender address to allow the owner of to transfer tokens from\n   *        message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n  function approve (address _spender, uint256 _value)\n  public returns (bool success);\n\n  /**\n   * Tell how many tokens given spender is currently allowed to transfer from\n   * given owner.\n   *\n   * @param _owner address to get number of tokens allowed to be transferred\n   *        from the owner of\n   * @param _spender address to get number of tokens allowed to be transferred\n   *        by the owner of\n   * @return number of tokens given spender is currently allowed to transfer\n   *         from given owner\n   */\n  function allowance (address _owner, address _spender)\n  public view returns (uint256 remaining);\n\n  /**\n   * Logged when tokens were transferred from one owner to another.\n   *\n   * @param _from address of the owner, tokens were transferred from\n   * @param _to address of the owner, tokens were transferred to\n   * @param _value number of tokens transferred\n   */\n  event Transfer (address indexed _from, address indexed _to, uint256 _value);\n\n  /**\n   * Logged when owner approved his tokens to be transferred by some spender.\n   *\n   * @param _owner owner who approved his tokens to be transferred\n   * @param _spender spender who were allowed to transfer the tokens belonging\n   *        to the owner\n   * @param _value number of tokens belonging to the owner, approved to be\n   *        transferred by the spender\n   */\n  event Approval (\n    address indexed _owner, address indexed _spender, uint256 _value);\n}/*\n * Address Set Smart Contract Interface.\n * Copyright © 2017–2018 by ABDK Consulting.\n * Author: Mikhail Vladimirov <[email protected]>\n */\n\n/**\n * Address Set smart contract interface.\n */\ncontract AddressSet {\n  /**\n   * Check whether address set contains given address.\n   *\n   * @param _address address to check\n   * @return true if address set contains given address, false otherwise\n   */\n  function contains (address _address) public view returns (bool);\n}\n/*\n * Abstract Token Smart Contract.  Copyright © 2017 by ABDK Consulting.\n * Author: Mikhail Vladimirov <[email protected]>\n */\n\n/**\n * Abstract Token Smart Contract that could be used as a base contract for\n * ERC-20 token contracts.\n */\ncontract AbstractToken is Token, SafeMath {\n  /**\n   * Create new Abstract Token contract.\n   */\n  function AbstractToken () public {\n    // Do nothing\n  }\n\n  /**\n   * Get number of tokens currently belonging to given owner.\n   *\n   * @param _owner address to get number of tokens currently belonging to the\n   *        owner of\n   * @return number of tokens currently belonging to the owner of given address\n   */\n  function balanceOf (address _owner) public view returns (uint256 balance) {\n    return accounts [_owner];\n  }\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer (address _to, uint256 _value)\n  public returns (bool success) {\n    uint256 fromBalance = accounts [msg.sender];\n    if (fromBalance < _value) return false;\n    if (_value > 0 && msg.sender != _to) {\n      accounts [msg.sender] = safeSub (fromBalance, _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    Transfer (msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom (address _from, address _to, uint256 _value)\n  public returns (bool success) {\n    uint256 spenderAllowance = allowances [_from][msg.sender];\n    if (spenderAllowance < _value) return false;\n    uint256 fromBalance = accounts [_from];\n    if (fromBalance < _value) return false;\n\n    allowances [_from][msg.sender] =\n      safeSub (spenderAllowance, _value);\n\n    if (_value > 0 && _from != _to) {\n      accounts [_from] = safeSub (fromBalance, _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    Transfer (_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * Allow given spender to transfer given number of tokens from message sender.\n   *\n   * @param _spender address to allow the owner of to transfer tokens from\n   *        message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n  function approve (address _spender, uint256 _value)\n  public returns (bool success) {\n    allowances [msg.sender][_spender] = _value;\n    Approval (msg.sender, _spender, _value);\n\n    return true;\n  }\n\n  /**\n   * Tell how many tokens given spender is currently allowed to transfer from\n   * given owner.\n   *\n   * @param _owner address to get number of tokens allowed to be transferred\n   *        from the owner of\n   * @param _spender address to get number of tokens allowed to be transferred\n   *        by the owner of\n   * @return number of tokens given spender is currently allowed to transfer\n   *         from given owner\n   */\n  function allowance (address _owner, address _spender)\n  public view returns (uint256 remaining) {\n    return allowances [_owner][_spender];\n  }\n\n  /**\n   * Mapping from addresses of token holders to the numbers of tokens belonging\n   * to these token holders.\n   */\n  mapping (address => uint256) internal accounts;\n\n  /**\n   * Mapping from addresses of token holders to the mapping of addresses of\n   * spenders to the allowances set by these token holders to these spenders.\n   */\n  mapping (address => mapping (address => uint256)) internal allowances;\n}\n/*\n * Abstract Virtual Token Smart Contract.\n * Copyright © 2017–2018 by ABDK Consulting.\n * Author: Mikhail Vladimirov <[email protected]>\n */\n\n\n/**\n * Abstract Token Smart Contract that could be used as a base contract for\n * ERC-20 token contracts supporting virtual balance.\n */\ncontract AbstractVirtualToken is AbstractToken {\n  /**\n   * Maximum number of real (i.e. non-virtual) tokens in circulation (2^255-1).\n   */\n  uint256 constant MAXIMUM_TOKENS_COUNT =\n    0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n  /**\n   * Mask used to extract real balance of an account (2^255-1).\n   */\n  uint256 constant BALANCE_MASK =\n    0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n  /**\n   * Mask used to extract \"materialized\" flag of an account (2^255).\n   */\n  uint256 constant MATERIALIZED_FLAG_MASK =\n    0x8000000000000000000000000000000000000000000000000000000000000000;\n\n  /**\n   * Create new Abstract Virtual Token contract.\n   */\n  function AbstractVirtualToken () public AbstractToken () {\n    // Do nothing\n  }\n\n  /**\n   * Get total number of tokens in circulation.\n   *\n   * @return total number of tokens in circulation\n   */\n  function totalSupply () public view returns (uint256 supply) {\n    return tokensCount;\n  }\n\n  /**\n   * Get number of tokens currently belonging to given owner.\n   *\n   * @param _owner address to get number of tokens currently belonging to the\n   *        owner of\n   * @return number of tokens currently belonging to the owner of given address\n   */\n  function balanceOf (address _owner) public view returns (uint256 balance) {\n    return safeAdd (\n      accounts [_owner] & BALANCE_MASK, getVirtualBalance (_owner));\n  }\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer (address _to, uint256 _value)\n  public returns (bool success) {\n    if (_value > balanceOf (msg.sender)) return false;\n    else {\n      materializeBalanceIfNeeded (msg.sender, _value);\n      return AbstractToken.transfer (_to, _value);\n    }\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom (address _from, address _to, uint256 _value)\n  public returns (bool success) {\n    if (_value > allowance (_from, msg.sender)) return false;\n    if (_value > balanceOf (_from)) return false;\n    else {\n      materializeBalanceIfNeeded (_from, _value);\n      return AbstractToken.transferFrom (_from, _to, _value);\n    }\n  }\n\n  /**\n   * Get virtual balance of the owner of given address.\n   *\n   * @param _owner address to get virtual balance for the owner of\n   * @return virtual balance of the owner of given address\n   */\n  function virtualBalanceOf (address _owner)\n  internal view returns (uint256 _virtualBalance);\n\n  /**\n   * Calculate virtual balance of the owner of given address taking into account\n   * materialized flag and total number of real tokens already in circulation.\n   */\n  function getVirtualBalance (address _owner)\n  private view returns (uint256 _virtualBalance) {\n    if (accounts [_owner] & MATERIALIZED_FLAG_MASK != 0) return 0;\n    else {\n      _virtualBalance = virtualBalanceOf (_owner);\n      uint256 maxVirtualBalance = safeSub (MAXIMUM_TOKENS_COUNT, tokensCount);\n      if (_virtualBalance > maxVirtualBalance)\n        _virtualBalance = maxVirtualBalance;\n    }\n  }\n\n  /**\n   * Materialize virtual balance of the owner of given address if this will help\n   * to transfer given number of tokens from it.\n   *\n   * @param _owner address to materialize virtual balance of\n   * @param _value number of tokens to be transferred\n   */\n  function materializeBalanceIfNeeded (address _owner, uint256 _value) private {\n    uint256 storedBalance = accounts [_owner];\n    if (storedBalance & MATERIALIZED_FLAG_MASK == 0) {\n      // Virtual balance is not materialized yet\n      if (_value > storedBalance) {\n        // Real balance is not enough\n        uint256 virtualBalance = getVirtualBalance (_owner);\n        require (safeSub (_value, storedBalance) <= virtualBalance);\n        accounts [_owner] = MATERIALIZED_FLAG_MASK |\n          safeAdd (storedBalance, virtualBalance);\n        tokensCount = safeAdd (tokensCount, virtualBalance);\n      }\n    }\n  }\n\n  /**\n   * Number of real (i.e. non-virtual) tokens in circulation.\n   */\n  uint256 internal tokensCount;\n}\n/*\n * MediChain Promo Token Smart Contract.  Copyright © 2018 by ABDK Consulting.\n * Author: Mikhail Vladimirov <[email protected]>\n */\n\n/**\n * MediChain Promo Tokem Smart Contract.\n */\ncontract MCUXPromoToken is AbstractVirtualToken {\n  /**\n   * Number of virtual tokens to assign to the owners of addresses from given\n   * address set.\n   */\n  uint256 private constant VIRTUAL_COUNT = 10e8;\n\n  /**\n   * Create MediChainPromoToken smart contract with given address set.\n   *\n   * @param _addressSet address set to use\n   */\n  function MCUXPromoToken (AddressSet _addressSet)\n  public AbstractVirtualToken () {\n    owner = msg.sender;\n    addressSet = _addressSet;\n  }\n\n  /**\n   * Get name of this token.\n   *\n   * @return name of this token\n   */\n  function name () public pure returns (string) {\n    return \"MediChain Promo Token \";\n  }\n\n  /**\n   * Get symbol of this token.\n   *\n   * @return symbol of this token\n   */\n  function symbol () public pure returns (string) {\n    return \"MCUX\";\n  }\n\n  /**\n   * Get number of decimals for this token.\n   *\n   * @return number of decimals for this token\n   */\n  function decimals () public pure returns (uint8) {\n    return 8;\n  }\n\n  /**\n   * Notify owners about their virtual balances.\n   *\n   * @param _owners addresses of the owners to be notified\n   */\n  function massNotify (address [] _owners) public {\n    require (msg.sender == owner);\n    uint256 count = _owners.length;\n    for (uint256 i = 0; i < count; i++)\n      Transfer (address (0), _owners [i], VIRTUAL_COUNT);\n  }\n\n  /**\n   * Kill this smart contract.\n   */\n  function kill () public {\n    require (msg.sender == owner);\n    selfdestruct (owner);\n  }\n\n  /**\n   * Change owner of the smart contract.\n   *\n   * @param _owner address of a new owner of the smart contract\n   */\n  function changeOwner (address _owner) public {\n    require (msg.sender == owner);\n\n    owner = _owner;\n  }\n\n  /**\n   * Get virtual balance of the owner of given address.\n   *\n   * @param _owner address to get virtual balance for the owner of\n   * @return virtual balance of the owner of given address\n   */\n  function virtualBalanceOf (address _owner)\n  internal view returns (uint256 _virtualBalance) {\n    return addressSet.contains (_owner) ? VIRTUAL_COUNT : 0;\n  }\n\n  /**\n   * Address of the owner of this smart contract.\n   */\n  address internal owner;\n\n  /**\n   * Address set of addresses that are eligible for initial balance.\n   */\n  AddressSet internal addressSet;\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"}],\"name\":\"massNotify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addressSet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b604051602080610aca8339810160405280805160038054600160a060020a03338116600160a060020a031992831617909255600480549290931691161790555050610a6b8061005f6000396000f3006060604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100be578063095ea7b3146101485780630e6848cc1461017e57806318160ddd146101cf57806323b872dd146101f4578063313ce5671461021c57806341c0e1b51461024557806370a082311461025857806395d89b4114610277578063a6f9dae11461028a578063a9059cbb146102a9578063dd62ed3e146102cb575b600080fd5b34156100c957600080fd5b6100d16102f0565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561010d5780820151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015357600080fd5b61016a600160a060020a0360043516602435610331565b604051901515815260200160405180910390f35b341561018957600080fd5b6101cd600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965061039e95505050505050565b005b34156101da57600080fd5b6101e2610434565b60405190815260200160405180910390f35b34156101ff57600080fd5b61016a600160a060020a036004358116906024351660443561043a565b341561022757600080fd5b61022f61048c565b60405160ff909116815260200160405180910390f35b341561025057600080fd5b6101cd610491565b341561026357600080fd5b6101e2600160a060020a03600435166104ba565b341561028257600080fd5b6100d1610507565b341561029557600080fd5b6101cd600160a060020a0360043516610548565b34156102b457600080fd5b61016a600160a060020a0360043516602435610592565b34156102d657600080fd5b6101e2600160a060020a03600435811690602435166105c7565b6102f8610a2d565b60408051908101604052601681527f4d656469436861696e2050726f6d6f20546f6b656e20000000000000000000006020820152905090565b600160a060020a03338116600081815260016020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b600354600090819033600160a060020a039081169116146103be57600080fd5b82519150600090505b8181101561042f578281815181106103db57fe5b90602001906020020151600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef633b9aca0060405190815260200160405180910390a36001016103c7565b505050565b60025490565b600061044684336105c7565b82111561045557506000610485565b61045e846104ba565b82111561046d57506000610485565b61047784836105f2565b610482848484610686565b90505b9392505050565b600890565b60035433600160a060020a039081169116146104ac57600080fd5b600354600160a060020a0316ff5b600160a060020a038116600090815260208190526040812054610398907f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16610502846107ef565b610869565b61050f610a2d565b60408051908101604052600481527f4d435558000000000000000000000000000000000000000000000000000000006020820152905090565b60035433600160a060020a0390811691161461056357600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600061059d336104ba565b8211156105ac57506000610398565b6105b633836105f2565b6105c0838361087f565b9050610398565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600160a060020a0382166000908152602081905260408120549060ff60020a8216151561068057818311156106805761062a846107ef565b9050806106378484610976565b111561064257600080fd5b61064c8282610869565b600160a060020a038516600090815260208190526040902060ff60020a91909117905560025461067c9082610869565b6002555b50505050565b600160a060020a0380841660009081526001602090815260408083203390941683529290529081205481838210156106c157600092506107e6565b50600160a060020a038516600090815260208190526040902054838110156106ec57600092506107e6565b6106f68285610976565b600160a060020a0380881660009081526001602090815260408083203390941683529290529081209190915584118015610742575084600160a060020a031686600160a060020a031614155b1561079a576107518185610976565b600160a060020a0380881660009081526020819052604080822093909355908716815220546107809085610869565b600160a060020a0386166000908152602081905260409020555b84600160a060020a031686600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a3600192505b50509392505050565b600160a060020a038116600090815260208190526040812054819060ff60020a161561081e5760009150610863565b61082783610988565b91506108557f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600254610976565b905080821115610863578091505b50919050565b600060001982900383111561087a57fe5b500190565b600160a060020a033316600090815260208190526040812054828110156108a9576000915061096f565b6000831180156108cb575083600160a060020a031633600160a060020a031614155b15610923576108da8184610976565b600160a060020a0333811660009081526020819052604080822093909355908616815220546109099084610869565b600160a060020a0385166000908152602081905260409020555b83600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405190815260200160405180910390a3600191505b5092915050565b60008183101561098257fe5b50900390565b600454600090600160a060020a0316635dbe47e88383604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156109fc57600080fd5b6102c65a03f11515610a0d57600080fd5b50505060405180519050610a22576000610398565b50633b9aca00919050565b602060405190810160405260008152905600a165627a7a7230582080fe050d9173ba3ae423387b75b720340325997aa3ef0a4451e73f1dbe41a3ee0029000000000000000000000000384dc03e1e21a046009741f5c04ab645227ed785",
  "constructorArguments": "000000000000000000000000384dc03e1e21a046009741f5c04ab645227ed785"
}