{
  "address": "0x0ce6d5a093d4166237c7a9ff8e0553b0293214a1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DecenturionToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-13\n*/\n\npragma solidity ^0.4.21;\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/BonusStrategy.sol\n\ncontract BonusStrategy {\n    using SafeMath for uint;\n\n    uint public defaultAmount = 1*10**18;\n    uint public limit = 300*1000*10**18; // 300.000  DCNT\n    uint public currentAmount = 0;\n    uint[] public startTimes;\n    uint[] public endTimes;\n    uint[] public amounts;\n\n    constructor(\n        uint[] _startTimes,\n        uint[] _endTimes,\n        uint[] _amounts\n        ) public \n    {\n        require(_startTimes.length == _endTimes.length && _endTimes.length == _amounts.length);\n        startTimes = _startTimes;\n        endTimes = _endTimes;\n        amounts = _amounts;\n    }\n\n    function isStrategy() external pure returns (bool) {\n        return true;\n    }\n\n    function getCurrentBonus() public view returns (uint bonus) {\n        if (currentAmount >= limit) {\n            currentAmount = currentAmount.add(defaultAmount);\n            return defaultAmount;\n        }\n        for (uint8 i = 0; i < amounts.length; i++) {\n            if (now >= startTimes[i] && now <= endTimes[i]) {\n                bonus = amounts[i];\n                currentAmount = currentAmount.add(bonus);\n                return bonus;\n            }\n        }\n        currentAmount = currentAmount.add(defaultAmount);\n        return defaultAmount;\n    }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/InfoBurnableToken.sol\n\ncontract InfoBurnableToken is BurnableToken, StandardToken {\n    string message = \"No sufficient funds\";\n    address public manager;\n\n    event NoFunds(address _who, string _message);\n\n    modifier onlyManager() {\n        require(msg.sender == manager);\n        _;\n    }\n\n    constructor(address _manager) public {\n        require(address(_manager) != 0);\n        manager = _manager;\n    }\n\n    function burn(uint256 _value) public {\n        if (balances[msg.sender] < _value){\n            emit NoFunds(msg.sender, message);\n        }else {\n            _burn(msg.sender, _value);\n        }\n    }\n\n    function burnPassportToken(address _from, uint256 _value) onlyManager public returns (bool) {\n        if (_value <= balances[_from]){\n            _burn(_from, _value);\n            return true;\n        }\n        emit NoFunds(_from, message);\n        return false;\n    }\n\n    function transferManager(address _newManager) onlyManager public returns (bool) {\n        require(address(_newManager) != 0);\n        manager = _newManager;\n        return true;\n    }\n\n}\n\n// File: contracts/DecenturionToken.sol\n\ncontract DecenturionToken is InfoBurnableToken {\n    using SafeMath for uint;\n\n    string constant public name = \"Decenturion Token\";\n    string constant public symbol = \"DCNT\";\n    uint constant public decimals = 18;\n    uint constant public deployerAmount = 20 * (10 ** 6) * (10 ** decimals); // 20 000 000 DCNT\n    uint constant public managerAmount = 10 * (10 ** 6) * (10 ** decimals); // 10 000 000 DCNT\n\n    constructor(address _manager) InfoBurnableToken(_manager) public {\n        totalSupply_ = 30 * (10 ** 6) * (10 ** decimals); // 30 000 000 DCNT\n        balances[msg.sender] = deployerAmount;\n        balances[manager] = managerAmount;\n    }\n\n}",
  "bytecode": "60c0604052601360808190527f4e6f2073756666696369656e742066756e64730000000000000000000000000060a090815261003e91600391906100db565b5034801561004b57600080fd5b50604051602080610e4a833981016040525180600160a060020a038116151561007357600080fd5b60048054600160a060020a031916600160a060020a039283161781556a18d0bf423c03d8de0000006001553382166000908152602081905260408082206a108b2a2c2802909400000090559154909216825290206a084595161401484a000000905550610176565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011c57805160ff1916838001178555610149565b82800160010185558215610149579182015b8281111561014957825182559160200191906001019061012e565b50610155929150610159565b5090565b61017391905b80821115610155576000815560010161015f565b90565b610cc5806101856000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f57806317dbe4f1146101b757806318160ddd146101db57806323b872dd14610202578063313ce5671461022c5780633c0960051461024157806342966c6814610256578063481c6a751461027057806366188463146102a157806370a08231146102c557806395d89b41146102e6578063a48c98dd146102fb578063a9059cbb14610310578063ba0e930a14610334578063d73dd62314610355578063dd62ed3e14610379575b600080fd5b34801561010157600080fd5b5061010a6103a0565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014457818101518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018b57600080fd5b506101a3600160a060020a03600435166024356103d7565b604080519115158252519081900360200190f35b3480156101c357600080fd5b506101a3600160a060020a0360043516602435610442565b3480156101e757600080fd5b506101f0610558565b60408051918252519081900360200190f35b34801561020e57600080fd5b506101a3600160a060020a036004358116906024351660443561055e565b34801561023857600080fd5b506101f06106de565b34801561024d57600080fd5b506101f06106e3565b34801561026257600080fd5b5061026e6004356106f2565b005b34801561027c57600080fd5b506102856107e5565b60408051600160a060020a039092168252519081900360200190f35b3480156102ad57600080fd5b506101a3600160a060020a03600435166024356107f4565b3480156102d157600080fd5b506101f0600160a060020a03600435166108ed565b3480156102f257600080fd5b5061010a610908565b34801561030757600080fd5b506101f061093f565b34801561031c57600080fd5b506101a3600160a060020a036004351660243561094e565b34801561034057600080fd5b506101a3600160a060020a0360043516610a47565b34801561036157600080fd5b506101a3600160a060020a0360043516602435610aac565b34801561038557600080fd5b506101f0600160a060020a0360043581169060243516610b4e565b60408051808201909152601181527f446563656e747572696f6e20546f6b656e000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60045460009033600160a060020a0390811691161461046057600080fd5b600160a060020a0383166000908152602081905260409020548211610491576104898383610b79565b50600161043c565b60408051600160a060020a03851681526020810182815260038054600260001961010060018416150201909116049383018490527f656656652beb062ee3929a63a2a02a94022adf0d99a3d280508b372d2626fd8c9387939192906060830190849080156105405780601f1061051557610100808354040283529160200191610540565b820191906000526020600020905b81548152906001019060200180831161052357829003601f168201915b5050935050505060405180910390a150600092915050565b60015490565b6000600160a060020a038316151561057557600080fd5b600160a060020a03841660009081526020819052604090205482111561059a57600080fd5b600160a060020a03808516600090815260026020908152604080832033909416835292905220548211156105cd57600080fd5b600160a060020a0384166000908152602081905260409020546105f6908363ffffffff610c7a16565b600160a060020a03808616600090815260208190526040808220939093559085168152205461062b908363ffffffff610c8c16565b600160a060020a0380851660009081526020818152604080832094909455878316825260028152838220339093168252919091522054610671908363ffffffff610c7a16565b600160a060020a038086166000818152600260209081526040808320338616845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b601281565b6a084595161401484a00000081565b600160a060020a0333166000908152602081905260409020548111156107d8576040805133600160a060020a03811682526020820183815260038054600260018216156101000260001901909116049484018590527f656656652beb062ee3929a63a2a02a94022adf0d99a3d280508b372d2626fd8c94929390929091906060830190849080156107c45780601f10610799576101008083540402835291602001916107c4565b820191906000526020600020905b8154815290600101906020018083116107a757829003601f168201915b5050935050505060405180910390a16107e2565b6107e23382610b79565b50565b600454600160a060020a031681565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561085157600160a060020a033381166000908152600260209081526040808320938816835292905290812055610888565b610861818463ffffffff610c7a16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902054825190815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b60408051808201909152600481527f44434e5400000000000000000000000000000000000000000000000000000000602082015281565b6a108b2a2c2802909400000081565b6000600160a060020a038316151561096557600080fd5b600160a060020a03331660009081526020819052604090205482111561098a57600080fd5b600160a060020a0333166000908152602081905260409020546109b3908363ffffffff610c7a16565b600160a060020a0333811660009081526020819052604080822093909355908516815220546109e8908363ffffffff610c8c16565b600160a060020a03808516600081815260208181526040918290209490945580518681529051919333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350600192915050565b60045460009033600160a060020a03908116911614610a6557600080fd5b600160a060020a0382161515610a7a57600080fd5b5060048054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610ae4908363ffffffff610c8c16565b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600160a060020a038216600090815260208190526040902054811115610b9e57600080fd5b600160a060020a038216600090815260208190526040902054610bc7908263ffffffff610c7a16565b600160a060020a038316600090815260208190526040902055600154610bf3908263ffffffff610c7a16565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600082821115610c8657fe5b50900390565b8181018281101561043c57fe00a165627a7a72305820785539db1a8fb482021adebc8363e389f8b3fedabff0c2cdcc98184d32653de30029000000000000000000000000b12b490b6b33d2107cfa8f8eb106e6db641b187a",
  "constructorArguments": "000000000000000000000000b12b490b6b33d2107cfa8f8eb106e6db641b187a"
}