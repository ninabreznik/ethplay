{
  "address": "0x3d3ed0a4f0af930955806b34367e7c64a0e1c84a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ASStokenICO",
  "compilerVersion": "v0.4.14+commit.c2215d46",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-04\n*/\n\npragma solidity ^0.4.11;\n\n/**\n* @author Jefferson Davis\n* ASStoken_ICO.sol creates the client's token for crowdsale and allocates an equity portion to the owner\n*   Crowdsale contracts edited from original contract code at https://www.ethereum.org/crowdsale#crowdfund-your-idea\n*   Additional crowdsale contracts, functions, libraries from OpenZeppelin\n*       at https://github.com/OpenZeppelin/zeppelin-solidity/tree/master/contracts/token\n*   Token contract edited from original contract code at https://www.ethereum.org/token\n*   ERC20 interface and certain token functions adapted from https://github.com/ConsenSys/Tokens\n**/\n\ncontract ERC20 {\n\t//Sets events and functions for ERC20 token\n\tevent Approval(address indexed _owner, address indexed _spender, uint _value);\n\tevent Transfer(address indexed _from, address indexed _to, uint _value);\n\t\n    function allowance(address _owner, address _spender) constant returns (uint remaining);\n\tfunction approve(address _spender, uint _value) returns (bool success);\n    function balanceOf(address _owner) constant returns (uint balance);\n    function transfer(address _to, uint _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) returns (bool success);\n}\n\n\ncontract Owned {\n\t//Public variable\n    address public owner;\n\n\t//Sets contract creator as the owner\n    function Owned() {\n        owner = msg.sender;\n    }\n\t\n\t//Sets onlyOwner modifier for specified functions\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n\t//Allows for transfer of contract ownership\n    function transferOwnership(address newOwner) onlyOwner {\n        owner = newOwner;\n    }\n}\n\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }  \n\n    function div(uint256 a, uint256 b) internal returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n        return a < b ? a : b;\n    }\n  \n    function mul(uint256 a, uint256 b) internal returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n}\n\n\ncontract ASStoken is ERC20, Owned {\n    //Applies SafeMath library to uint256 operations \n    using SafeMath for uint256;\n\n\t//Public variables\n\tstring public name; \n\tstring public symbol; \n\tuint256 public decimals;  \n    uint256 public initialSupply; \n\tuint256 public totalSupply; \n\n    //Variables\n    uint256 multiplier; \n\t\n\t//Creates arrays for balances\n    mapping (address => uint256) balance;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    //Creates modifier to prevent short address attack\n    modifier onlyPayloadSize(uint size) {\n        if(msg.data.length < size + 4) revert();\n        _;\n    }\n\n\t//Constructor\n\tfunction ASStoken(string tokenName, string tokenSymbol, uint8 decimalUnits, uint256 decimalMultiplier, uint256 initialAmount) {\n\t\tname = tokenName; \n\t\tsymbol = tokenSymbol; \n\t\tdecimals = decimalUnits; \n        multiplier = decimalMultiplier; \n        initialSupply = initialAmount; \n\t\ttotalSupply = initialSupply;  \n\t}\n\t\n\t//Provides the remaining balance of approved tokens from function approve \n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n\t//Allows for a certain amount of tokens to be spent on behalf of the account owner\n    function approve(address _spender, uint256 _value) returns (bool success) { \n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n\t//Returns the account balance \n    function balanceOf(address _owner) constant returns (uint256 remainingBalance) {\n        return balance[_owner];\n    }\n\n    //Allows contract owner to mint new tokens, prevents numerical overflow\n\tfunction mintToken(address target, uint256 mintedAmount) onlyOwner returns (bool success) {\n\t\trequire(mintedAmount > 0); \n        uint256 addTokens = mintedAmount; \n\t\tbalance[target] += addTokens;\n\t\ttotalSupply += addTokens;\n\t\tTransfer(0, target, addTokens);\n\t\treturn true; \n\t}\n\n\t//Sends tokens from sender's account\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool success) {\n        if ((balance[msg.sender] >= _value) && (balance[_to] + _value > balance[_to])) {\n            balance[msg.sender] -= _value;\n            balance[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else { \n\t\t\treturn false; \n\t\t}\n    }\n\t\n\t//Transfers tokens from an approved account \n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) returns (bool success) {\n        if ((balance[_from] >= _value) && (allowed[_from][msg.sender] >= _value) && (balance[_to] + _value > balance[_to])) {\n            balance[_to] += _value;\n            balance[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else { \n\t\t\treturn false; \n\t\t}\n    }\n}\n\n\ncontract ASStokenICO is Owned, ASStoken {\n    //Applies SafeMath library to uint256 operations \n    using SafeMath for uint256;\n\n    //Public Variables\n    address public multiSigWallet;                  \n    uint256 public amountRaised; \n    uint256 public deadline; \n    uint256 public hardcap; \n    uint256 public price;                            \n\n    //Variables\n    bool crowdsaleClosed = true;                    \n    string tokenName = \"ASStoken\"; \n    string tokenSymbol = \"ASS\"; \n    uint256 initialTokens = 150000000000; \n    uint256 multiplier = 10000; \n    uint8 decimalUnits = 4;  \n\n    \n\n   \t//Initializes the token\n\tfunction ASStokenICO(address beneficiaryAccount) \n    \tASStoken(tokenName, tokenSymbol, decimalUnits, multiplier, initialTokens) {\n            balance[msg.sender] = initialTokens;     \n            Transfer(0, msg.sender, initialTokens);    \n            multiSigWallet = beneficiaryAccount;        \n            hardcap = 55000000;    \n            hardcap = hardcap.mul(multiplier); \n            setPrice(40000); \n    }\n\n    //Fallback function creates tokens and sends to investor when crowdsale is open\n    function () payable {\n        require(!crowdsaleClosed \n            && (now < deadline) \n            && (totalSupply.add(msg.value.mul(getPrice()).mul(multiplier).div(1 ether)) <= hardcap)); \n        address recipient = msg.sender; \n        amountRaised = amountRaised.add(msg.value.div(1 ether)); \n        uint256 tokens = msg.value.mul(getPrice()).mul(multiplier).div(1 ether);\n        totalSupply = totalSupply.add(tokens);\n        balance[recipient] = balance[recipient].add(tokens);\n        require(multiSigWallet.send(msg.value)); \n        Transfer(0, recipient, tokens);\n    }   \n\n    //Returns the current price of the token for the crowdsale\n    function getPrice() returns (uint256 result) {\n        return price;\n    }\n\n    //Sets the multisig wallet for a crowdsale\n    function setMultiSigWallet(address wallet) onlyOwner returns (bool success) {\n        multiSigWallet = wallet; \n        return true; \n    }\n\n    //Sets the token price \n    function setPrice(uint256 newPriceperEther) onlyOwner returns (uint256) {\n        require(newPriceperEther > 0); \n        price = newPriceperEther; \n        return price; \n    }\n\n    //Allows owner to start the crowdsale from the time of execution until a specified deadline\n    function startSale(uint256 lengthOfSale) onlyOwner returns (bool success) {\n        deadline = now + lengthOfSale * 1 days; \n        crowdsaleClosed = false; \n        return true; \n    }\n\n    //Allows owner to stop the crowdsale immediately\n    function stopSale() onlyOwner returns (bool success) {\n        deadline = now; \n        crowdsaleClosed = true;\n        return true; \n    }\n}",
  "bytecode": "60606040526001600e60006101000a81548160ff0219169083151502179055506040805190810160405280600881526020017f415353746f6b656e000000000000000000000000000000000000000000000000815250600f90805190602001906200006c929190620004f3565b506040805190810160405280600381526020017f415353000000000000000000000000000000000000000000000000000000000081525060109080519060200190620000ba929190620004f3565b506422ecb25c006011556127106012556004601360006101000a81548160ff021916908360ff1602179055503415620000f257600080fd5b60405160208062001d1f833981016040528080519060200190919050505b600f8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620001aa5780601f106200017e57610100808354040283529160200191620001aa565b820191906000526020600020905b8154815290600101906020018083116200018c57829003601f168201915b505050505060108054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620002495780601f106200021d5761010080835404028352916020019162000249565b820191906000526020600020905b8154815290600101906020018083116200022b57829003601f168201915b5050505050601360009054906101000a900460ff166012546011545b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b8460019080519060200190620002bf929190620004f3565b508360029080519060200190620002d8929190620004f3565b508260ff1660038190555081600681905550806004819055506004546005819055505b5050505050601154600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6011546040518082815260200191505060405180910390a380600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506303473bc0600c819055506200040b601254600c546200043b6401000000000262000a34179091906401000000009004565b600c8190555062000432619c406200047264010000000002620011ba176401000000009004565b505b50620005a2565b600080828402905060008414806200045e57508284828115156200045b57fe5b04145b15156200046757fe5b8091505b5092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515620004d057600080fd5b600082111515620004e057600080fd5b81600d81905550600d5490505b5b919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200053657805160ff191683800117855562000567565b8280016001018555821562000567579182015b828111156200056657825182559160200191906001019062000549565b5b5090506200057691906200057a565b5090565b6200059f91905b808211156200059b57600081600090555060010162000581565b5090565b90565b61176d80620005b26000396000f30060606040523615610131576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146103b0578063095ea7b31461043f5780630e3ab61d1461049957806318160ddd146104d457806323b872dd146104fd57806329dcb0cf14610576578063313ce5671461059f578063378dc3dc146105c85780634b8feb4f146105f157806370a082311461064657806379c65068146106935780637b3e5e7b146106ed5780638da5cb5b1461071657806391b7f5ed1461076b57806395d89b41146107a257806398d5fdca14610831578063a035b1fe1461085a578063a9059cbb14610883578063b071cbe6146108dd578063dd62ed3e14610906578063e36b0b3714610972578063f03b0c0b1461099f578063f2fde38b146109f0575b5b600080600e60009054906101000a900460ff161580156101535750600b5442105b80156101bc5750600c546101b96101a8670de0b6b3a764000061019a60125461018c61017d610a29565b34610a3490919063ffffffff16565b610a3490919063ffffffff16565b610a6890919063ffffffff16565b600554610a8490919063ffffffff16565b11155b15156101c757600080fd5b3391506101f96101e8670de0b6b3a764000034610a6890919063ffffffff16565b600a54610a8490919063ffffffff16565b600a81905550610247670de0b6b3a764000061023960125461022b61021c610a29565b34610a3490919063ffffffff16565b610a3490919063ffffffff16565b610a6890919063ffffffff16565b905061025e81600554610a8490919063ffffffff16565b6005819055506102b681600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a8490919063ffffffff16565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050151561035b57600080fd5b8173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5050005b34156103bb57600080fd5b6103c3610aa3565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104045780820151818401525b6020810190506103e8565b50505050905090810190601f1680156104315780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561044a57600080fd5b61047f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b41565b604051808215151515815260200191505060405180910390f35b34156104a457600080fd5b6104ba6004808035906020019091905050610c34565b604051808215151515815260200191505060405180910390f35b34156104df57600080fd5b6104e7610cc5565b6040518082815260200191505060405180910390f35b341561050857600080fd5b61055c600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ccb565b604051808215151515815260200191505060405180910390f35b341561058157600080fd5b610589610fe3565b6040518082815260200191505060405180910390f35b34156105aa57600080fd5b6105b2610fe9565b6040518082815260200191505060405180910390f35b34156105d357600080fd5b6105db610fef565b6040518082815260200191505060405180910390f35b34156105fc57600080fd5b610604610ff5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561065157600080fd5b61067d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061101b565b6040518082815260200191505060405180910390f35b341561069e57600080fd5b6106d3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611065565b604051808215151515815260200191505060405180910390f35b34156106f857600080fd5b61070061118f565b6040518082815260200191505060405180910390f35b341561072157600080fd5b610729611195565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561077657600080fd5b61078c60048080359060200190919050506111ba565b6040518082815260200191505060405180910390f35b34156107ad57600080fd5b6107b5611239565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107f65780820151818401525b6020810190506107da565b50505050905090810190601f1680156108235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561083c57600080fd5b610844610a29565b6040518082815260200191505060405180910390f35b341561086557600080fd5b61086d6112d7565b6040518082815260200191505060405180910390f35b341561088e57600080fd5b6108c3600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506112dd565b604051808215151515815260200191505060405180910390f35b34156108e857600080fd5b6108f06114e2565b6040518082815260200191505060405180910390f35b341561091157600080fd5b61095c600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506114e8565b6040518082815260200191505060405180910390f35b341561097d57600080fd5b610985611570565b604051808215151515815260200191505060405180910390f35b34156109aa57600080fd5b6109d6600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506115f8565b604051808215151515815260200191505060405180910390f35b34156109fb57600080fd5b610a27600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506116a1565b005b6000600d5490505b90565b60008082840290506000841480610a555750828482811515610a5257fe5b04145b1515610a5d57fe5b8091505b5092915050565b6000808284811515610a7657fe5b0490508091505b5092915050565b6000808284019050838110151515610a9857fe5b8091505b5092915050565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b395780601f10610b0e57610100808354040283529160200191610b39565b820191906000526020600020905b815481529060010190602001808311610b1c57829003601f168201915b505050505081565b600081600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c9157600080fd5b6201518082024201600b819055506000600e60006101000a81548160ff021916908315150217905550600190505b5b919050565b60055481565b600060606004810160003690501015610ce357600080fd5b82600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610dae575082600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610e395750600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15610fd05782600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555082600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150610fda565b60009150610fda565b5b5b509392505050565b600b5481565b60035481565b60045481565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110c357600080fd5b6000831115156110d257600080fd5b82905080600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806005600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600191505b5b5092915050565b600a5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561121757600080fd5b60008211151561122657600080fd5b81600d81905550600d5490505b5b919050565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112cf5780601f106112a4576101008083540402835291602001916112cf565b820191906000526020600020905b8154815290600101906020018083116112b257829003601f168201915b505050505081565b600d5481565b6000604060048101600036905010156112f557600080fd5b82600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156113c35750600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b156114d05782600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191506114da565b600091506114da565b5b5b5092915050565b600c5481565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115cd57600080fd5b42600b819055506001600e60006101000a81548160ff021916908315150217905550600190505b5b90565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561165557600080fd5b81600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190505b5b919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116fc57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b505600a165627a7a723058205cb184c68d7354366b8ea6f37f7666aa641d42c497b5e8e8e0090599b030c7c8002900000000000000000000000080678e8b2310aa5bcf84c5319223e21d91405ac4",
  "constructorArguments": "00000000000000000000000080678E8B2310Aa5bCF84c5319223e21d91405ac4"
}