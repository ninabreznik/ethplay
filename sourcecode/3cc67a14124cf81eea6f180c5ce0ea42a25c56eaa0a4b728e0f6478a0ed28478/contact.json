{
  "address": "0xec71870d02ba5c392ec8f64837e314b28afa4222",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BillionRewardsToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-22\n*/\n\npragma solidity ^0.4.16;\ncontract owned {\n    address public owner;\n    constructor() public {\n        owner = msg.sender;\n    }\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\ncontract BillionRewardsToken is owned {\n    string public constant name = \"BillionRewardsToken\";\n    string public constant symbol = \"BILREW\";\n    uint public constant decimals = 8;\n    uint constant ONETOKEN = 10 ** uint(decimals);\n    uint constant MILLION = 1000000; \n    uint public totalSupply;\n    uint public Devs_Supply;\n    uint public Bounty_Supply;\n    bool public Dev_TokenReleased = false;                     \n    uint public Token_ExchangeValue;                             \n    bool public Accept_Payment;\n    bool public Token_Unlocked;\n    uint public Eth_Collected;\n    uint public Sold_Token;\n    uint public Burnt_Token;\n    address public etherWallet = 0xacEF4B8808a78BF70dbC39B8A2274d8BbfF2dB28;\n    constructor() public {\n        Accept_Payment = true;\n        Token_Unlocked = true;\n        Token_ExchangeValue = 1999995 * ONETOKEN;\n        totalSupply = 550000 * MILLION * ONETOKEN;                        \n        Devs_Supply = 10000 * MILLION * ONETOKEN;                       \n        Bounty_Supply = 40000 * MILLION * ONETOKEN;               \n        totalSupply -= Devs_Supply + Bounty_Supply; \n        balanceOf[msg.sender] = totalSupply;                            \n    }\n    \n    mapping (address => uint256) public balanceOf;\n    mapping (address => uint256) public selfdrop_cap;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed from, uint256 value);\n    \n    modifier notLocked{\n        require(Token_Unlocked == true || msg.sender == owner);\n        _;\n    }\n    modifier buyingToken{\n        require(Accept_Payment == true);\n        require(msg.sender != owner);\n        require(selfdrop_cap[msg.sender] + msg.value <= .1 ether);\n        _;\n    }\n    function unlockDevSupply() onlyOwner public {\n        require(now > 1640995200);                              \n        require(Dev_TokenReleased == false);       \n        balanceOf[owner] += Devs_Supply;\n        totalSupply += Devs_Supply;          \n        emit Transfer(0, this, Devs_Supply);\n        emit Transfer(this, owner, Devs_Supply);\n        Devs_Supply = 0;                                         \n        Dev_TokenReleased = true; \n    }\n    function send_bounty_token(address target, uint256 reward) onlyOwner public {\n        require(Bounty_Supply >= reward);\n        balanceOf[target] += reward;\n        totalSupply += reward;\n        emit Transfer(0, this, reward);\n        emit Transfer(this, target, reward);\n        Bounty_Supply -= reward;\n    }\n    function mint(address target, uint256 token) onlyOwner public {\n        balanceOf[target] += token;\n        totalSupply += token;\n        emit Transfer(0, this, token);\n        emit Transfer(this, target, token);\n    }\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   \n        balanceOf[msg.sender] -= _value;            \n        totalSupply -= _value;\n        Burnt_Token += _value;\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n    function _transferBilrew(address _from, address _to, uint _value) internal {\n        require(_to != 0x0);\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n    function transfer(address _to, uint256 _value) notLocked public {\n        _transferBilrew(msg.sender, _to, _value);\n    }\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               \n        require (balanceOf[_from] >= _value); \n        require (balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n    }\n    function() payable buyingToken public {\n        require(msg.value > 0 ether);\n        require(msg.value <= .1 ether);\n        uint sendToken = (msg.value / .01 ether) * Token_ExchangeValue;\n        selfdrop_cap[msg.sender] += msg.value;\n        _transfer(owner, msg.sender, sendToken);\n        uint returnBonus = computeReturnBonus(msg.value);\n        if(returnBonus != 0)\n        {\n            msg.sender.transfer(returnBonus);\n        }\n        etherWallet.transfer(this.balance);\n        Eth_Collected += msg.value - returnBonus;\n        Sold_Token += sendToken;          \n    }\n    function computeReturnBonus(uint256 amount) internal constant returns (uint256) {\n        uint256 bonus = 0;\n        if(amount >= .01 ether && amount < .025 ether)\n        {\n            bonus = (amount * 10) / 100;\n        }\n        else if(amount >= .025 ether && amount < .05 ether)\n        {\n            bonus = (amount * 25) / 100;\n        }\n        else  if(amount >= .05 ether && amount < .1 ether)\n        {\n            bonus = (amount * 50) / 100;\n        }\n        else if (amount >= .1 ether)\n        {\n            bonus = (amount * 70) / 100;\n        }\n        return bonus;\n    }\n    function withdrawEther() onlyOwner public{\n        owner.transfer(this.balance);\n    }\n    \n    function setAcceptPayment(bool status) onlyOwner public {\n        Accept_Payment = status;\n    }\n    function setTokenTransfer(bool status) onlyOwner public {\n        Token_Unlocked = status;\n    }\n    \n}",
  "bytecode": "60806040526004805460ff19169055600a8054600160a060020a03191673acef4b8808a78bf70dbc39b8a2274d8bbff2db2817905534801561004057600080fd5b5060008054600160a060020a0319163390811782556006805461ff001960ff199091166001908117919091166101001790915565b5e603271b00600555670de0b6b3a7640000600255673782dace9d9000006003556802b5e3af16b188000090819055908252600b602052604090912055610d4a806100c06000396000f3006080604052600436106101535763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d5c42181146102a457806306fdde03146102d75780630cd74cd914610361578063147d57b01461039257806318160ddd146103b8578063313ce567146103cd57806340c10f19146103e257806342966c68146104065780634d7e2a6a1461043257806351ba24c71461044757806358dd6f231461045c5780635db6687b1461047657806370a082311461048b5780637362377b146104ac57806377f3e3d1146104c1578063895c4c39146104d65780638da5cb5b146104eb57806395d89b4114610500578063a9059cbb14610515578063ac5ec9ef14610539578063b3fcb85b14610553578063ea26b57514610568578063eef73ff91461057d578063f2fde38b14610592578063fae73549146105b3578063fbe7913f146105c8575b600654600090819060ff16151560011461016c57600080fd5b600054600160a060020a031633141561018457600080fd5b336000908152600c602052604090205467016345785d8a00003490910111156101ac57600080fd5b600034116101b957600080fd5b67016345785d8a00003411156101ce57600080fd5b600554336000818152600c602052604081208054349081019091559054662386f26fc10000909104909202935061020f91600160a060020a031690846105dd565b61021834610698565b9050801561024f57604051339082156108fc029083906000818181858888f1935050505015801561024d573d6000803e3d6000fd5b505b600a54604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015610289573d6000803e3d6000fd5b50600780543492909203919091019055600880549091019055005b3480156102b057600080fd5b506102c5600160a060020a0360043516610745565b60408051918252519081900360200190f35b3480156102e357600080fd5b506102ec610757565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561032657818101518382015260200161030e565b50505050905090810190601f1680156103535780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561036d57600080fd5b5061037661078e565b60408051600160a060020a039092168252519081900360200190f35b34801561039e57600080fd5b506103b6600160a060020a036004351660243561079d565b005b3480156103c457600080fd5b506102c5610847565b3480156103d957600080fd5b506102c561084d565b3480156103ee57600080fd5b506103b6600160a060020a0360043516602435610852565b34801561041257600080fd5b5061041e6004356108e4565b604080519115158252519081900360200190f35b34801561043e57600080fd5b5061041e610964565b34801561045357600080fd5b506102c5610972565b34801561046857600080fd5b506103b66004351515610978565b34801561048257600080fd5b5061041e6109a9565b34801561049757600080fd5b506102c5600160a060020a03600435166109b2565b3480156104b857600080fd5b506103b66109c4565b3480156104cd57600080fd5b506102c5610a19565b3480156104e257600080fd5b506103b6610a1f565b3480156104f757600080fd5b50610376610af2565b34801561050c57600080fd5b506102ec610b01565b34801561052157600080fd5b506103b6600160a060020a0360043516602435610b38565b34801561054557600080fd5b506103b66004351515610b78565b34801561055f57600080fd5b506102c5610ba2565b34801561057457600080fd5b506102c5610ba8565b34801561058957600080fd5b506102c5610bae565b34801561059e57600080fd5b506103b6600160a060020a0360043516610bb4565b3480156105bf57600080fd5b506102c5610bfa565b3480156105d457600080fd5b5061041e610c00565b600160a060020a03821615156105f257600080fd5b600160a060020a0383166000908152600b602052604090205481111561061757600080fd5b600160a060020a0382166000908152600b6020526040902054818101101561063e57600080fd5b600160a060020a038084166000818152600b602090815260408083208054879003905593861680835291849020805486019055835185815293519193600080516020610cff833981519152929081900390910190a3505050565b600080662386f26fc1000083108015906106b857506658d15e1762800083105b156106cc576064600a84025b04905061073f565b6658d15e1762800083101580156106e9575066b1a2bc2ec5000083105b156106f9576064601984026106c4565b66b1a2bc2ec500008310158015610717575067016345785d8a000083105b15610727576064603284026106c4565b67016345785d8a0000831061073f5750606460468302045b92915050565b600c6020526000908152604090205481565b60408051808201909152601381527f42696c6c696f6e52657761726473546f6b656e00000000000000000000000000602082015281565b600a54600160a060020a031681565b600054600160a060020a031633146107b457600080fd5b6003548111156107c357600080fd5b600160a060020a0382166000908152600b60209081526040808320805485019055600180548501905580518481529051309392600080516020610cff833981519152928290030190a3604080518281529051600160a060020a038416913091600080516020610cff8339815191529181900360200190a36003805491909103905550565b60015481565b600881565b600054600160a060020a0316331461086957600080fd5b600160a060020a0382166000908152600b60209081526040808320805485019055600180548501905580518481529051309392600080516020610cff833981519152928290030190a3604080518281529051600160a060020a038416913091600080516020610cff8339815191529181900360200190a35050565b336000908152600b602052604081205482111561090057600080fd5b336000818152600b6020908152604091829020805486900390556001805486900390556009805486019055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b600654610100900460ff1681565b60055481565b600054600160a060020a0316331461098f57600080fd5b600680549115156101000261ff0019909216919091179055565b60045460ff1681565b600b6020526000908152604090205481565b600054600160a060020a031633146109db57600080fd5b60008054604051600160a060020a0390911691303180156108fc02929091818181858888f19350505050158015610a16573d6000803e3d6000fd5b50565b60035481565b600054600160a060020a03163314610a3657600080fd5b6361cf99804211610a4657600080fd5b60045460ff1615610a5657600080fd5b6002805460008054600160a060020a03168152600b602090815260408083208054909401909355925460018054820190558251908152915130939192600080516020610cff83398151915292908290030190a36000546002546040805191825251600160a060020a03909216913091600080516020610cff833981519152919081900360200190a360006002556004805460ff19166001179055565b600054600160a060020a031681565b60408051808201909152600681527f42494c5245570000000000000000000000000000000000000000000000000000602082015281565b60065460ff61010090910416151560011480610b5e5750600054600160a060020a031633145b1515610b6957600080fd5b610b74338383610c09565b5050565b600054600160a060020a03163314610b8f57600080fd5b6006805460ff1916911515919091179055565b60085481565b60075481565b60025481565b600054600160a060020a03163314610bcb57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60095481565b60065460ff1681565b6000600160a060020a0383161515610c2057600080fd5b600160a060020a0384166000908152600b6020526040902054821115610c4557600080fd5b600160a060020a0383166000908152600b602052604090205482810111610c6b57600080fd5b50600160a060020a038083166000818152600b6020908152604080832080549589168085528285208054898103909155948690528154880190915581518781529151939095019492600080516020610cff833981519152929181900390910190a3600160a060020a038084166000908152600b6020526040808220549287168252902054018114610cf857fe5b505050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058202b79e616afdb222e4a250463ee5ce5940358fe5f5633e0c1aea370e1fb5ba5d30029"
}