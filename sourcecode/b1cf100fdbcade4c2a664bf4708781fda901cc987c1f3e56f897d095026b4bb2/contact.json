{
  "address": "0xcc394f10545aeef24483d2347b32a34a44f20e6f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VaultGuardianToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-15\n*/\n\npragma solidity 0.4.24;\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Claimable.sol\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() public onlyPendingOwner {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\n// File: contracts/VaultGuardianToken.sol\n\n/**\n * @title VaultGuardianToken token\n */\ncontract VaultGuardianToken is Claimable, StandardToken, BurnableToken {\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n    event Multisended();\n    event TransferPaused(bool status);\n\n    string public name = \"Vault Guardian Token\";\n    string public symbol = \"VGT\";\n    uint8 public decimals = 18;\n    uint256 public multiSendLimit = 220;\n    bool public pausedTransfers = false;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"not owner\");\n        _;\n    }\n\n    modifier isNotPaused() {\n        require(pausedTransfers == false, \"paused\");\n        _;\n    }\n\n    modifier validRecipient(address _recipient) {\n        require(_recipient != address(0) && _recipient != address(this), \"recipient is token address or empty\");\n        _;\n    }\n\n    modifier hasApproval(address _from, uint256 _value) {\n        require(_value <= allowed[_from][msg.sender], \"not enough approved\");\n        _;\n    }\n\n    modifier hasBalance(address _from, uint256 _value) {\n        require(_value <= balances[_from], \"not enough balance\");\n        _;\n    }\n\n    function() public {\n        revert(\"fallback is not supported\");\n    }\n\n    constructor() public {\n        // 1B tokens\n        totalSupply_ = 10 ** 18 * 1000000000;\n        balances[msg.sender] = totalSupply();\n    }\n\n    function claimTokens(address _token, address _to) public onlyOwner {\n        require(_to != address(0), \"to is 0\");\n        if (_token == address(0)) {\n            _to.transfer(address(this).balance);\n            return;\n        }\n\n        StandardToken token = StandardToken(_token);\n        uint256 balance = token.balanceOf(address(this));\n        require(token.transfer(_to, balance), \"transfer failed\");\n    }\n\n    function superTransfer(address _to, uint256 _value) \n        internal \n        isNotPaused\n        validRecipient(_to)\n        hasBalance(msg.sender, _value)\n        returns(bool)\n    {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function superTransferFrom(address _from, address _to, uint256 _value) \n        internal \n        isNotPaused\n        hasBalance(_from, _value)\n        hasApproval(_from, _value)\n        validRecipient(_to)\n        returns(bool)\n    {\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        public\n        returns (bool)\n    {\n        require(superTransferFrom(_from, _to, _value));\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool)\n    {\n        require(superTransfer(_to, _value));\n        return true;\n    }\n\n\n    function transferAndCall(address _to, uint _value, bytes _data) public returns (bool)\n    {\n        require(superTransfer(_to, _value));\n        emit Transfer(msg.sender, _to, _value, _data);\n\n        if (isContract(_to)) {\n            require(contractFallback(msg.sender, _to, _value, _data), \"contractFallback failed\");\n        }\n        return true;\n    }\n\n    function transferFromAndCall(address _from, address _to, uint256 _value, bytes _data) public returns (bool)\n    {\n        require(superTransferFrom(_from, _to, _value));\n        emit Transfer(msg.sender, _to, _value, _data);\n\n        if (isContract(_to)) {\n            require(contractFallback(_from, _to, _value, _data), \"contractFallback failed\");\n        }\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\n        require(super.approve(_spender, _amount));\n        return _spender.call(abi.encodeWithSignature(\"receiveApproval(address,uint256,bytes)\",  _spender, _amount, _extraData));\n    }\n\n    function setPausedTransfers(bool _state)\n        external \n        onlyOwner \n    {\n        require(pausedTransfers != _state);\n        pausedTransfers = _state;\n        emit TransferPaused(_state);\n    }\n\n    /// @notice Function to send multiple token transfers in one tx\n    function multisend(address[] _recipients, uint256[] _balances) external {\n        require(_recipients.length == _balances.length, \"not equal length\");\n        require(_recipients.length <= multiSendLimit, \"more than limit\");\n        uint256 i = 0;\n        for( i; i < _balances.length; i++ ) {\n            transfer(_recipients[i], _balances[i]);\n        }\n        emit Multisended();\n    }\n\n    function setMultisendLimit(uint256 _newLimit) external onlyOwner {\n        multiSendLimit = _newLimit;\n    }\n\n    function renounceOwnership() public onlyOwner {\n    }\n\n    function contractFallback(address _from, address _to, uint256 _value, bytes _data)\n        private\n        returns(bool)\n    {\n        return _to.call(abi.encodeWithSignature(\"onTokenTransfer(address,uint256,bytes)\",  _from, _value, _data));\n    }\n\n    function isContract(address _addr)\n        private\n        view\n        returns (bool)\n    {\n        uint length;\n        assembly { length := extcodesize(_addr) }\n        return length > 0;\n    }\n\n    function currentTime() private view returns (uint256) {\n        return block.timestamp;\n    }\n\n}",
  "bytecode": "60c0604052601460808190527f5661756c7420477561726469616e20546f6b656e00000000000000000000000060a090815262000040916005919062000106565b506040805180820190915260038082527f56475400000000000000000000000000000000000000000000000000000000006020909201918252620000879160069162000106565b506007805460ff1990811660121790915560dc600855600980549091169055348015620000b357600080fd5b5060008054600160a060020a031916331790556b033b2e3c9fd0803ce8000000600355620000e9640100000000620000ff810204565b33600090815260026020526040902055620001a8565b6003545b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200014957805160ff191683800117855562000179565b8280016001018555821562000179579182015b82811115620001795782518255916020019190600101906200015c565b50620001879291506200018b565b5090565b6200010391905b8082111562000187576000815560010162000192565b611c0d80620001b86000396000f3006080604052600436106101535763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302874a3881146101b057806306fdde03146101d7578063095ea7b31461026157806318160ddd14610299578063188c38fe146102ae57806323b872dd146102c3578063313ce567146102ed5780633b46321f146103185780634000aea01461033257806342966c681461039b5780634e71e0c8146103b35780635f53e077146103c857806366188463146103e257806369ffa08a1461040657806370a082311461042d578063715018a61461044e5780638da5cb5b1461046357806395d89b4114610494578063a9059cbb146104a9578063aad41a41146104cd578063c1d34b89146104f9578063cae9ca5114610568578063d73dd623146105d1578063dd62ed3e146105f5578063e30c39781461061c578063f2fde38b14610631575b34801561015f57600080fd5b506040805160e560020a62461bcd02815260206004820152601960248201527f66616c6c6261636b206973206e6f7420737570706f7274656400000000000000604482015290519081900360640190fd5b3480156101bc57600080fd5b506101c5610652565b60408051918252519081900360200190f35b3480156101e357600080fd5b506101ec610658565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561022657818101518382015260200161020e565b50505050905090810190601f1680156102535780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561026d57600080fd5b50610285600160a060020a03600435166024356106e6565b604080519115158252519081900360200190f35b3480156102a557600080fd5b506101c561074c565b3480156102ba57600080fd5b50610285610752565b3480156102cf57600080fd5b50610285600160a060020a036004358116906024351660443561075b565b3480156102f957600080fd5b5061030261077d565b6040805160ff9092168252519081900360200190f35b34801561032457600080fd5b50610330600435610786565b005b34801561033e57600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610285948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506107db9650505050505050565b3480156103a757600080fd5b50610330600435610917565b3480156103bf57600080fd5b50610330610924565b3480156103d457600080fd5b5061033060043515156109ac565b3480156103ee57600080fd5b50610285600160a060020a0360043516602435610a59565b34801561041257600080fd5b50610330600160a060020a0360043581169060243516610b48565b34801561043957600080fd5b506101c5600160a060020a0360043516610dce565b34801561045a57600080fd5b50610330610de9565b34801561046f57600080fd5b50610478610e3b565b60408051600160a060020a039092168252519081900360200190f35b3480156104a057600080fd5b506101ec610e4a565b3480156104b557600080fd5b50610285600160a060020a0360043516602435610ea5565b3480156104d957600080fd5b506103306024600480358281019290820135918135918201910135610ec5565b34801561050557600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261028594600160a060020a038135811695602480359092169560443595369560849401918190840183828082843750949750610ff69650505050505050565b34801561057457600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610285948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061113e9650505050505050565b3480156105dd57600080fd5b50610285600160a060020a03600435166024356112bd565b34801561060157600080fd5b506101c5600160a060020a0360043581169060243516611356565b34801561062857600080fd5b50610478611381565b34801561063d57600080fd5b50610330600160a060020a0360043516611390565b60085481565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106de5780601f106106b3576101008083540402835291602001916106de565b820191906000526020600020905b8154815290600101906020018083116106c157829003601f168201915b505050505081565b336000818152600460209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60035490565b60095460ff1681565b600061076884848461140f565b151561077357600080fd5b5060019392505050565b60075460ff1681565b600054600160a060020a031633146107d6576040805160e560020a62461bcd0281526020600482015260096024820152600080516020611bc2833981519152604482015290519081900360640190fd5b600855565b60006107e78484611710565b15156107f257600080fd5b83600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1685856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561086c578181015183820152602001610854565b50505050905090810190601f1680156108995780820380516001836020036101000a031916815260200191505b50935050505060405180910390a36108b084611928565b15610773576108c133858585611930565b1515610773576040805160e560020a62461bcd02815260206004820152601760248201527f636f6e747261637446616c6c6261636b206661696c6564000000000000000000604482015290519081900360640190fd5b6109213382611a9b565b50565b600154600160a060020a0316331461093b57600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031633146109fc576040805160e560020a62461bcd0281526020600482015260096024820152600080516020611bc2833981519152604482015290519081900360640190fd5b60095460ff1615158115151415610a1257600080fd5b6009805482151560ff19909116811790915560408051918252517f7b92c580e5b53e34f85950f4117143b86c4031ca9568a3cd30f4b3cd5bb95dc89181900360200190a150565b336000908152600460209081526040808320600160a060020a0386168452909152812054808310610aad57336000908152600460209081526040808320600160a060020a0388168452909152812055610ae2565b610abd818463ffffffff611b9c16565b336000908152600460209081526040808320600160a060020a03891684529091529020555b336000818152600460209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600080548190600160a060020a03163314610b9b576040805160e560020a62461bcd0281526020600482015260096024820152600080516020611bc2833981519152604482015290519081900360640190fd5b600160a060020a0383161515610bfb576040805160e560020a62461bcd02815260206004820152600760248201527f746f206973203000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a0384161515610c4757604051600160a060020a03841690303180156108fc02916000818181858888f19350505050158015610c41573d6000803e3d6000fd5b50610dc8565b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051859350600160a060020a038416916370a082319160248083019260209291908290030181600087803b158015610cab57600080fd5b505af1158015610cbf573d6000803e3d6000fd5b505050506040513d6020811015610cd557600080fd5b5051604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301526024820184905291519293509084169163a9059cbb916044808201926020929091908290030181600087803b158015610d4657600080fd5b505af1158015610d5a573d6000803e3d6000fd5b505050506040513d6020811015610d7057600080fd5b50511515610dc8576040805160e560020a62461bcd02815260206004820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b50505050565b600160a060020a031660009081526002602052604090205490565b600054600160a060020a03163314610e39576040805160e560020a62461bcd0281526020600482015260096024820152600080516020611bc2833981519152604482015290519081900360640190fd5b565b600054600160a060020a031681565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106de5780601f106106b3576101008083540402835291602001916106de565b6000610eb18383611710565b1515610ebc57600080fd5b50600192915050565b6000838214610f1e576040805160e560020a62461bcd02815260206004820152601060248201527f6e6f7420657175616c206c656e67746800000000000000000000000000000000604482015290519081900360640190fd5b600854841115610f78576040805160e560020a62461bcd02815260206004820152600f60248201527f6d6f7265207468616e206c696d69740000000000000000000000000000000000604482015290519081900360640190fd5b5060005b81811015610fc657610fbd858583818110610f9357fe5b90506020020135600160a060020a03168484848181101515610fb157fe5b90506020020135610ea5565b50600101610f7c565b6040517f71b83f263583f091eced91e5e213cffab8a169c55d186deb97cd934a52f52eda90600090a15050505050565b600061100385858561140f565b151561100e57600080fd5b83600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1685856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611088578181015183820152602001611070565b50505050905090810190601f1680156110b55780820380516001836020036101000a031916815260200191505b50935050505060405180910390a36110cc84611928565b15611133576110dd85858585611930565b1515611133576040805160e560020a62461bcd02815260206004820152601760248201527f636f6e747261637446616c6c6261636b206661696c6564000000000000000000604482015290519081900360640190fd5b506001949350505050565b600061114a84846106e6565b151561115557600080fd5b83600160a060020a03168484846040516024018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156111c05781810151838201526020016111a8565b50505050905090810190601f1680156111ed5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa2d57853000000000000000000000000000000000000000000000000000000001781529051825192975095508594509250905080838360005b8381101561127457818101518382015260200161125c565b50505050905090810190601f1680156112a15780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af19695505050505050565b336000908152600460209081526040808320600160a060020a03861684529091528120546112f1908363ffffffff611bae16565b336000818152600460209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b600154600160a060020a031681565b600054600160a060020a031633146113e0576040805160e560020a62461bcd0281526020600482015260096024820152600080516020611bc2833981519152604482015290519081900360640190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60095460009060ff161561146d576040805160e560020a62461bcd02815260206004820152600660248201527f7061757365640000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a038416600090815260026020526040902054849083908111156114e1576040805160e560020a62461bcd02815260206004820152601260248201527f6e6f7420656e6f7567682062616c616e63650000000000000000000000000000604482015290519081900360640190fd5b600160a060020a038616600090815260046020908152604080832033845290915290205486908590811115611560576040805160e560020a62461bcd02815260206004820152601360248201527f6e6f7420656e6f75676820617070726f76656400000000000000000000000000604482015290519081900360640190fd5b86600160a060020a038116158015906115825750600160a060020a0381163014155b15156115fe576040805160e560020a62461bcd02815260206004820152602360248201527f726563697069656e7420697320746f6b656e2061646472657373206f7220656d60448201527f7074790000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a038916600090815260026020526040902054611627908863ffffffff611b9c16565b600160a060020a03808b1660009081526002602052604080822093909355908a168152205461165c908863ffffffff611bae16565b600160a060020a03808a16600090815260026020908152604080832094909455918c1681526004825282812033825290915220546116a0908863ffffffff611b9c16565b600160a060020a03808b1660008181526004602090815260408083203384528252918290209490945580518b81529051928c169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600198975050505050505050565b60095460009060ff161561176e576040805160e560020a62461bcd02815260206004820152600660248201527f7061757365640000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b82600160a060020a038116158015906117905750600160a060020a0381163014155b151561180c576040805160e560020a62461bcd02815260206004820152602360248201527f726563697069656e7420697320746f6b656e2061646472657373206f7220656d60448201527f7074790000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000818152600260205260409020548490811115611875576040805160e560020a62461bcd02815260206004820152601260248201527f6e6f7420656e6f7567682062616c616e63650000000000000000000000000000604482015290519081900360640190fd5b33600090815260026020526040902054611895908663ffffffff611b9c16565b3360009081526002602052604080822092909255600160a060020a038816815220546118c7908663ffffffff611bae16565b600160a060020a0387166000818152600260209081526040918290209390935580518881529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600195945050505050565b6000903b1190565b600083600160a060020a03168584846040516024018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561199d578181015183820152602001611985565b50505050905090810190601f1680156119ca5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa4c0ed36000000000000000000000000000000000000000000000000000000001781529051825192975095508594509250905080838360005b83811015611a51578181015183820152602001611a39565b50505050905090810190601f168015611a7e5780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af1979650505050505050565b600160a060020a038216600090815260026020526040902054811115611ac057600080fd5b600160a060020a038216600090815260026020526040902054611ae9908263ffffffff611b9c16565b600160a060020a038316600090815260026020526040902055600354611b15908263ffffffff611b9c16565b600355604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600082821115611ba857fe5b50900390565b81810182811015611bbb57fe5b9291505056006e6f74206f776e65720000000000000000000000000000000000000000000000a165627a7a72305820a528b6a068b50e5451e191662f03c797fc1c9f2de1a65339e96ee124bfb884600029"
}