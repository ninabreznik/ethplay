{
  "address": "0xec3421dcd1b712cddd409a28c008b13ad5c3c216",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Betmatch Token",
  "contractName": "BetMatchToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-27\n*/\n\npragma solidity ^0.4.24;\n\n\n\n\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that revert on error\n*/\nlibrary SafeMath {\n\n\n\n\n\t/**\n\t* @dev Multiplies two numbers, reverts on overflow.\n\t*/\n\tfunction mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\t\tif (_a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\n\n\n\t\tuint256 c = _a * _b;\n\t\trequire(c / _a == _b);\n\n\n\n\n\t\treturn c;\n\t}\n\n\n\n\n\t/**\n\t* @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n\t*/\n\tfunction div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n\t\trequire(_b > 0); // Solidity only automatically asserts when dividing by 0\n\t\tuint256 c = _a / _b;\n\t\t// assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n\n\n\n\t\treturn c;\n\t}\n\n\n\n\n\t/**\n\t* @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n\t*/\n\tfunction sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n\t\trequire(_b <= _a);\n\t\tuint256 c = _a - _b;\n\n\n\n\n\t\treturn c;\n\t}\n\n\n\n\n\t/**\n\t* @dev Adds two numbers, reverts on overflow.\n\t*/\n\tfunction add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n\t\tuint256 c = _a + _b;\n\t\trequire(c >= _a);\n\n\n\n\n\t\treturn c;\n\t}\n}\n\n\n\n\n/**\n* @title Ownable\n* @dev The Ownable contract has an owner address, and provides basic authorization control\n* functions, this simplifies the implementation of \"user permissions\".\n*/\n\n\n\n\ncontract Ownable {\n\taddress internal _owner;\n\n\n\n\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n\n\n\t/*\n\t* @dev The Ownable constructor sets the original `owner` o the contract to the sender account\n\t*/\n\tconstructor() public {\n\t\t_owner = msg.sender;\n\t}\n\n\n\n\n\t/**\n\t* @dev Throws if called by any account other than the owner.\n\t*/\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == _owner);\n\t\t_;\n\t}\n\n\n\n\n\t/**\n\t* @dev Allows the current owner to transfer control of the contract to a newOwner.\n\t* @param newOwner The address to transfer ownership to.\n\t*/\n\tfunction transferOwnership(address newOwner) onlyOwner() public {\n\t\trequire(newOwner != _owner);\n\t\t_transferOwnership(newOwner);\n\t}\n\n\n\n\n\t/**\n\t* @dev Transfers control of the contract to a newOwner.\n\t* @param newOwner The address to transfer ownership to.\n\t*/\n\tfunction _transferOwnership(address newOwner) internal {\n\t\trequire(newOwner != address(0));\n\t\temit OwnershipTransferred(_owner, newOwner);\n\t\t_owner = newOwner;\n\t}\n\n\n\n\n\tfunction getOwner() public constant returns(address) {\n\t\treturn (_owner);\n\t}\n}\n\n\n\n\n/**\n* @title Pausable\n* @dev Base contract which allows children to implement an emergency stop mechanism.\n*/\ncontract Pausable is Ownable {\n\tevent Paused();\n\tevent Unpaused();\n\n\n\n\n\tbool public paused = false;\n\n\n\n\n\n\n\n\n\t/**\n\t* @dev Modifier to make a function callable only when the contract is not paused.\n\t*/\n\tmodifier whenNotPaused() {\n\t\t\trequire(!paused);\n\t\t_;\n\t}\n\n\n\n\n\t/**\n\t* @dev Modifier to make a function callable only when the contract is paused.\n\t*/\n\tmodifier whenPaused() {\n\t\trequire(paused);\n\t\t_;\n\t}\n\n\n\n\n\t/**\n\t* @dev called by the owner to pause, triggers stopped state\n\t*/\n\tfunction pause() public onlyOwner whenNotPaused {\n\t\tpaused = true;\n\t\temit Paused();\n\t}\n\n\n\n\n\t/**\n\t* @dev called by the owner to unpause, returns to normal state\n\t*/\n\tfunction unpause() public onlyOwner whenPaused {\n\t\tpaused = false;\n\t\temit Unpaused();\n\t}\n}\n\n\n\n\n/**\n* @title ERC20 interface\n* @dev see https://github.com/ethereum/EIPs/issues/20\n*/\ninterface IERC20 {\n\tfunction totalSupply()\n\t\texternal view returns (uint256);\n\n\n\n\n\tfunction balanceOf(address _who)\n\t\texternal view returns (uint256);\n\n\n\n\n\tfunction allowance(address _owner, address _spender)\n\t\texternal view returns (uint256);\n\n\n\n\n\tfunction transfer(address _to, uint256 _value)\n\t\texternal returns (bool);\n\n\n\n\n\tfunction approve(address _spender, uint256 _value)\n\t\texternal returns (bool);\n\n\n\n\n\tfunction transferFrom(address _from, address _to, uint256 _value)\n\t\texternal returns (bool);\n\n\n\n\n\tevent Transfer(\n\t\taddress indexed from,\n\t\taddress indexed to,\n\t\tuint256 value\n\t);\n\n\n\n\n\tevent Approval(\n\t\taddress indexed owner,\n\t\taddress indexed spender,\n\t\tuint256 value\n\t);\n}\n\n\n\n\n\n\n\n\n/**\n* @title Standard ERC20 token\n*\n* @dev Implementation of the basic standard token.\n* https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n* Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n*/\ncontract ERC20 is IERC20 {\n\tusing SafeMath for uint256;\n\n\n\n\n\tmapping (address => uint256) internal balances_;\n\n\n\n\n\tmapping (address => mapping (address => uint256)) internal allowed_;\n\n\n\n\n\tuint256 internal totalSupply_;\n\n\n\n\n\t/**\n\t* @dev Total number of tokens in existence\n\t*/\n\tfunction totalSupply() public view returns (uint256) {\n\t\treturn totalSupply_;\n\t}\n\n\n\n\n\t/**\n\t* @dev Gets the balance of the specified address.\n\t* @param _owner The address to query the the balance of.\n\t* @return An uint256 representing the amount owned by the passed address.\n\t*/\n\tfunction balanceOf(address _owner) public view returns (uint256) {\n\t\treturn balances_[_owner];\n\t}\n\n\n\n\n\t/**\n\t* @dev Function to check the amount of tokens that an owner allowed to a spender.\n\t* @param _owner address The address which owns the funds.\n\t* @param _spender address The address which will spend the funds.\n\t* @return A uint256 specifying the amount of tokens still available for the spender.\n\t*/\n\tfunction allowance(\n\t\taddress _owner,\n\t\taddress _spender\n\t )\n\t\tpublic\n\t\tview\n\t\treturns (uint256)\n\t{\n\t\treturn allowed_[_owner][_spender];\n\t}\n\n\n\n\n\t/**\n\t* @dev Transfer token for a specified address\n\t* @param _to The address to transfer to.\n\t* @param _value The amount to be transferred.\n\t*/\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n\t\trequire(_value <= balances_[msg.sender]);\n\t\trequire(_to != address(0));\n\n\n\n\n\t\tbalances_[msg.sender] = balances_[msg.sender].sub(_value);\n\t\tbalances_[_to] = balances_[_to].add(_value);\n\t\temit Transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\n\n\n\t/**\n\t* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n\t* Beware that changing an allowance with this method brings the risk that someone may use both the old\n\t* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n\t* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\t* @param _spender The address which will spend the funds.\n\t* @param _value The amount of tokens to be spent.\n\t*/\n\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n\t\tallowed_[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\n\n\n\t/**\n\t* @dev Transfer tokens from one address to another\n\t* @param _from address The address which you want to send tokens from\n\t* @param _to address The address which you want to transfer to\n\t* @param _value uint256 the amount of tokens to be transferred\n\t*/\n\tfunction transferFrom(\n\t\taddress _from,\n\t\taddress _to,\n\t\tuint256 _value\n\t)\n\t\tpublic\n\t\treturns (bool)\n\t{\n\t\trequire(_value <= balances_[_from]);\n\t\trequire(_value <= allowed_[_from][msg.sender]);\n\t\trequire(_to != address(0));\n\n\n\n\n\t\tbalances_[_from] = balances_[_from].sub(_value);\n\t\tbalances_[_to] = balances_[_to].add(_value);\n\t\tallowed_[_from][msg.sender] = allowed_[_from][msg.sender].sub(_value);\n\t\temit Transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\n\n\n\t/**\n\t* @dev Internal function that mints an amount of the token and assigns it to\n\t* an account. This encapsulates the modification of balances such that the\n\t* proper events are emitted.\n\t* @param _account The account that will receive the created tokens.\n\t* @param _amount The amount that will be created.\n\t*/\n\tfunction _mint(address _account, uint256 _amount) internal {\n\t\trequire(_account != 0);\n\t\ttotalSupply_ = totalSupply_.add(_amount);\n\t\tbalances_[_account] = balances_[_account].add(_amount);\n\t\temit Transfer(address(0), _account, _amount);\n\t}\n}\n\n\n\n\n\n\n\n\n/**\n* @title Pausable token\n* @dev ERC20 modified with pausable transfers.\n**/\ncontract ERC20Pausable is ERC20, Pausable {\n\n\n\n\n\tfunction transfer(\n\t\taddress _to,\n\t\tuint256 _value\n\t)\n\t\tpublic\n\t\twhenNotPaused\n\t\treturns (bool)\n\t{\n\t\treturn super.transfer(_to, _value);\n\t}\n\n\n\n\n\tfunction transferFrom(\n\t\taddress _from,\n\t\taddress _to,\n\t\tuint256 _value\n\t)\n\t\tpublic\n\t\twhenNotPaused\n\t\treturns (bool)\n\t{\n\t\treturn super.transferFrom(_from, _to, _value);\n\t}\n\n\n\n\n\tfunction approve(\n\t\taddress _spender,\n\t\tuint256 _value\n\t)\n\t\tpublic\n\t\twhenNotPaused\n\t\treturns (bool)\n\t{\n\t\treturn super.approve(_spender, _value);\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\ncontract BetMatchToken is ERC20Pausable {\n\tstring public constant name = \"XBM\";\n\tstring public constant symbol = \"XBM\";\n\tuint8 public constant decimals = 18;\n\n\n\n\n\tuint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\n\n\n\n\n\tconstructor () public {\n\t\ttotalSupply_ = INITIAL_SUPPLY;\n\t\tbalances_[msg.sender] = INITIAL_SUPPLY;\n\t\temit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n\t}\n}",
  "bytecode": "60806040526000600360146101000a81548160ff02191690831515021790555034801561002b57600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601260ff16600a0a633b9aca0002600281905550601260ff16600a0a633b9aca00026000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef601260ff16600a0a633b9aca00026040518082815260200191505060405180910390a36112488061013d6000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100e0578063095ea7b31461017057806318160ddd146101d557806323b872dd146102005780632ff2e9dc14610285578063313ce567146102b05780633f4ba83a146102e15780635c975abb146102f857806370a08231146103275780638456cb591461037e578063893d20e81461039557806395d89b41146103ec578063a9059cbb1461047c578063dd62ed3e146104e1578063f2fde38b14610558575b600080fd5b3480156100ec57600080fd5b506100f561059b565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013557808201518184015260208101905061011a565b50505050905090810190601f1680156101625780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017c57600080fd5b506101bb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105d4565b604051808215151515815260200191505060405180910390f35b3480156101e157600080fd5b506101ea610604565b6040518082815260200191505060405180910390f35b34801561020c57600080fd5b5061026b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061060e565b604051808215151515815260200191505060405180910390f35b34801561029157600080fd5b5061029a610640565b6040518082815260200191505060405180910390f35b3480156102bc57600080fd5b506102c5610651565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102ed57600080fd5b506102f6610656565b005b34801561030457600080fd5b5061030d610716565b604051808215151515815260200191505060405180910390f35b34801561033357600080fd5b50610368600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610729565b6040518082815260200191505060405180910390f35b34801561038a57600080fd5b50610393610771565b005b3480156103a157600080fd5b506103aa610832565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103f857600080fd5b5061040161085c565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610441578082015181840152602081019050610426565b50505050905090810190601f16801561046e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561048857600080fd5b506104c7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610895565b604051808215151515815260200191505060405180910390f35b3480156104ed57600080fd5b50610542600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108c5565b6040518082815260200191505060405180910390f35b34801561056457600080fd5b50610599600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061094c565b005b6040805190810160405280600381526020017f58424d000000000000000000000000000000000000000000000000000000000081525081565b6000600360149054906101000a900460ff161515156105f257600080fd5b6105fc8383610a11565b905092915050565b6000600254905090565b6000600360149054906101000a900460ff1615151561062c57600080fd5b610637848484610b03565b90509392505050565b601260ff16600a0a633b9aca000281565b601281565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106b257600080fd5b600360149054906101000a900460ff1615156106cd57600080fd5b6000600360146101000a81548160ff0219169083151502179055507fa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d1693360405160405180910390a1565b600360149054906101000a900460ff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107cd57600080fd5b600360149054906101000a900460ff161515156107e957600080fd5b6001600360146101000a81548160ff0219169083151502179055507f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75260405160405180910390a1565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6040805190810160405280600381526020017f58424d000000000000000000000000000000000000000000000000000000000081525081565b6000600360149054906101000a900460ff161515156108b357600080fd5b6108bd8383610ebe565b905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109a857600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610a0557600080fd5b610a0e816110de565b50565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610b5257600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610bdd57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610c1957600080fd5b610c6a826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111da90919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cfd826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111fb90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dce82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111da90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610f0d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610f4957600080fd5b610f9a826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111da90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061102d826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111fb90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561111a57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808383111515156111ec57600080fd5b82840390508091505092915050565b600080828401905083811015151561121257600080fd5b80915050929150505600a165627a7a7230582056cda195836f008caafe91d10b1bbf7425607e36de43475f9954df4a16f477b40029"
}