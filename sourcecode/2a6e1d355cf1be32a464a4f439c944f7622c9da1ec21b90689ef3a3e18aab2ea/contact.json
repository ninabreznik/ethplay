{
  "address": "0xe0202036a6ccc8a10e10ccd9a66f056791c9f31a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DesignerChain",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-27\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract DesignerChain is StandardToken {\n    using SafeMath for uint256;\n    string public name = \"Designer Chain\";\n    string public symbol = \"DC\";\n    uint public decimals = 6;\n\n    address public saleAddress = 0x99b3bf93150E05900CF433FD61e932fE025E6869;\n    uint256 public saleAmount = 3000000000 * (10 ** decimals); \n    address public socialAddress = 0x8897fd8334c4b43307a7D781792EbFC6434E8AB6;\n    uint256 public socialAmount = 2500000000 * (10 ** decimals); \n    address public operAddress = 0x980D864E9931d6Ee47214522f0a9CFFD100Fc8a0;\n    uint256 public operAmount = 1500000000 * (10 ** decimals); \n    address public fundAddress = 0x2FA7bE982cee1d8D44b0db1d0AE177C88E545b08;\n    uint256 public fundAmount = 1000000000 * (10 ** decimals); \n    address public teamAddress1 = 0x3240c16b67CB30f530DC2b0192e7647BE9d7E3fD;\n    uint256 public teamAmount1 = 711000000 * (10 ** decimals); \n    address public teamAddress2 = 0xB01031F10240D6c98954e187320918230369e5A8;\n    uint256 public teamAmount2 = 333000000 * (10 ** decimals); \n    address public teamAddress3 = 0xC601493e335BdC36b736D69f7CD0ef9586dD59a0;\n    uint256 public teamAmount3 = 300000000 * (10 ** decimals); \n    address public teamAddress4 = 0x62C1eC256B7bb10AA53FD4208454E1BFD533b7f0;\n    uint256 public teamAmount4 = 300000000 * (10 ** decimals); \n    address public teamAddress5 = 0xfE7678004882AD8b00ddBbBA677a16F7361E4c06;\n    uint256 public teamAmount5 = 50000000 * (10 ** decimals); \n    address public teamAddress6 = 0xB9c514062C41d290b6567fB64895A48472689eEB;\n    uint256 public teamAmount6 = 211000000 * (10 ** decimals);\n    address public teamAddress7 = 0x142758621031aDA83C16F877720Cddc0c4129D99;\n    uint256 public teamAmount7 = 89000000 * (10 ** decimals); \n    address public teamAddress8 = 0x2036aB5dEBdba6755041316DbF9a3c7852Ed8152;\n    uint256 public teamAmount8 = 1000000 * (10 ** decimals); \n    address public teamAddress9 = 0x756CB9C1024B783041aBB894c33eD997556575C3;\n    uint256 public teamAmount9 = 1000000 * (10 ** decimals); \n    address public teamAddress10 = 0xeB3611Ab4280D75f32129Cc79d05fc9C8352593F;\n    uint256 public teamAmount10 = 1000000 * (10 ** decimals); \n    address public teamAddress11 = 0xd24F5A7dB60DbbE9ca3b48Ed9f337B0C0aD5C589;\n    uint256 public teamAmount11 = 1000000 * (10 ** decimals); \n    address public teamAddress12 = 0x45f6c4Ee1a045DF316eDc446EE1a10A8820A7554;\n    uint256 public teamAmount12 = 1000000 * (10 ** decimals); \n    address public teamAddress13 = 0x47Cec1725C5732A37e8809a0ca9F00E04783AB0F;\n    uint256 public teamAmount13 = 1000000 * (10 ** decimals); \n\n    function DesignerChain() public {\n        balances[saleAddress] = saleAmount;\n        emit Transfer(address(0), saleAddress, saleAmount);\n\n        balances[socialAddress] = socialAmount;\n        emit Transfer(address(0), socialAddress, socialAmount);\n\n        balances[operAddress] = operAmount;\n        emit Transfer(address(0), operAddress, operAmount);\n\n        balances[fundAddress] = fundAmount;\n        emit Transfer(address(0), fundAddress, fundAmount);\n\n        balances[teamAddress1] = teamAmount1;\n        emit Transfer(address(0), teamAddress1, teamAmount1); \n\n        balances[teamAddress2] = teamAmount2;\n        emit Transfer(address(0), teamAddress2, teamAmount2); \n\n        balances[teamAddress3] = teamAmount3;\n        emit Transfer(address(0), teamAddress3, teamAmount3); \n\n        balances[teamAddress4] = teamAmount4;\n        emit Transfer(address(0), teamAddress4, teamAmount4); \n\n        balances[teamAddress5] = teamAmount5;\n        emit Transfer(address(0), teamAddress5, teamAmount5); \n\n        balances[teamAddress6] = teamAmount6;\n        emit Transfer(address(0), teamAddress6, teamAmount6); \n\n        balances[teamAddress7] = teamAmount7;\n        emit Transfer(address(0), teamAddress7, teamAmount7); \n\n        balances[teamAddress8] = teamAmount8;\n        emit Transfer(address(0), teamAddress8, teamAmount8); \n\n        balances[teamAddress9] = teamAmount9;\n        emit Transfer(address(0), teamAddress9, teamAmount9); \n\n        balances[teamAddress10] = teamAmount10;\n        emit Transfer(address(0), teamAddress10, teamAmount10); \n\n        balances[teamAddress11] = teamAmount11;\n        emit Transfer(address(0), teamAddress11, teamAmount11); \n\n        balances[teamAddress12] = teamAmount12;\n        emit Transfer(address(0), teamAddress12, teamAmount12); \n\n        balances[teamAddress13] = teamAmount13;\n        emit Transfer(address(0), teamAddress13, teamAmount13); \n\n        totalSupply = 10000000000 * (10 ** decimals);  //总共发行100亿\n    }\n}",
  "bytecode": "60606040526040805190810160405280600e81526020017f44657369676e657220436861696e00000000000000000000000000000000000081525060039080519060200190620000519291906200177a565b506040805190810160405280600281526020017f4443000000000000000000000000000000000000000000000000000000000000815250600490805190602001906200009f9291906200177a565b5060066005557399b3bf93150e05900cf433fd61e932fe025e6869600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600554600a0a63b2d05e0002600755738897fd8334c4b43307a7d781792ebfc6434e8ab6600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600554600a0a639502f9000260095573980d864e9931d6ee47214522f0a9cffd100fc8a0600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600554600a0a6359682f0002600b55732fa7be982cee1d8d44b0db1d0ae177c88e545b08600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600554600a0a633b9aca0002600d55733240c16b67cb30f530dc2b0192e7647be9d7e3fd600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600554600a0a632a60ffc002600f5573b01031f10240d6c98954e187320918230369e5a8601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600554600a0a6313d92d400260115573c601493e335bdc36b736d69f7cd0ef9586dd59a0601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600554600a0a6311e1a300026013557362c1ec256b7bb10aa53fd4208454e1bfd533b7f0601460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600554600a0a6311e1a3000260155573fe7678004882ad8b00ddbbba677a16f7361e4c06601660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600554600a0a6302faf0800260175573b9c514062c41d290b6567fb64895a48472689eeb601860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600554600a0a630c939ac00260195573142758621031ada83c16f877720cddc0c4129d99601a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600554600a0a63054e084002601b55732036ab5debdba6755041316dbf9a3c7852ed8152601c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600554600a0a620f424002601d5573756cb9c1024b783041abb894c33ed997556575c3601e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600554600a0a620f424002601f5573eb3611ab4280d75f32129cc79d05fc9c8352593f602060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600554600a0a620f42400260215573d24f5a7db60dbbe9ca3b48ed9f337b0c0ad5c589602260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600554600a0a620f4240026023557345f6c4ee1a045df316edc446ee1a10a8820a7554602460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600554600a0a620f4240026025557347cec1725c5732a37e8809a0ca9f00e04783ab0f602660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600554600a0a620f42400260275534156200074f57600080fd5b60075460016000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6007546040518082815260200191505060405180910390a360095460016000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6009546040518082815260200191505060405180910390a3600b5460016000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600b546040518082815260200191505060405180910390a3600d5460016000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600d546040518082815260200191505060405180910390a3600f5460016000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600f546040518082815260200191505060405180910390a360115460016000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6011546040518082815260200191505060405180910390a360135460016000601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6013546040518082815260200191505060405180910390a360155460016000601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6015546040518082815260200191505060405180910390a360175460016000601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6017546040518082815260200191505060405180910390a360195460016000601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6019546040518082815260200191505060405180910390a3601b5460016000601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef601b546040518082815260200191505060405180910390a3601d5460016000601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef601d546040518082815260200191505060405180910390a3601f5460016000601e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef601f546040518082815260200191505060405180910390a360215460016000602060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550602060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6021546040518082815260200191505060405180910390a360235460016000602260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550602260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6023546040518082815260200191505060405180910390a360255460016000602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6025546040518082815260200191505060405180910390a360275460016000602660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550602660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6027546040518082815260200191505060405180910390a3600554600a0a6402540be4000260008190555062001829565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620017bd57805160ff1916838001178555620017ee565b82800160010185558215620017ee579182015b82811115620017ed578251825591602001919060010190620017d0565b5b509050620017fd919062001801565b5090565b6200182691905b808211156200182257600081600090555060010162001808565b5090565b90565b611f5980620018396000396000f300606060405260043610610225576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461022a578063095ea7b3146102b85780630c0a3eee146103125780630e4233821461033b5780630e459cc71461039057806318160ddd146103b9578063225f412a146103e257806323b872dd1461040b578063313ce5671461048457806346b894ae146104ad578063486cddb3146105025780634f036f37146105575780635603b087146105ac57806360422ec8146105d5578063625f1226146105fe5780636618846314610653578063695977ca146106ad57806370a0823114610702578063861a588e1461074f578063880d7fa1146107a457806389f8424a146107f95780638a91cb08146108225780638aae995a1461084b5780638b7284b91461087457806390e7c5921461089d57806395d89b41146108c65780639882c453146109545780639a7b94201461097d578063a9059cbb146109d2578063aaf7e70414610a2c578063b4582d4614610a55578063b6bb354b14610a7e578063b79ae13414610ad3578063bda3de5d14610afc578063c38d70ea14610b51578063c442fcb014610b7a578063c916830114610bcf578063cce4396414610bf8578063d73dd62314610c4d578063dd62ed3e14610ca7578063e294a97f14610d13578063e82bef2914610d68578063f6b0e3ec14610dbd578063f80a7efd14610de6578063fffe088d14610e3b575b600080fd5b341561023557600080fd5b61023d610e90565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561027d578082015181840152602081019050610262565b50505050905090810190601f1680156102aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102c357600080fd5b6102f8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f2e565b604051808215151515815260200191505060405180910390f35b341561031d57600080fd5b610325611020565b6040518082815260200191505060405180910390f35b341561034657600080fd5b61034e611026565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561039b57600080fd5b6103a361104c565b6040518082815260200191505060405180910390f35b34156103c457600080fd5b6103cc611052565b6040518082815260200191505060405180910390f35b34156103ed57600080fd5b6103f5611058565b6040518082815260200191505060405180910390f35b341561041657600080fd5b61046a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061105e565b604051808215151515815260200191505060405180910390f35b341561048f57600080fd5b61049761141d565b6040518082815260200191505060405180910390f35b34156104b857600080fd5b6104c0611423565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561050d57600080fd5b610515611449565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561056257600080fd5b61056a61146f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105b757600080fd5b6105bf611495565b6040518082815260200191505060405180910390f35b34156105e057600080fd5b6105e861149b565b6040518082815260200191505060405180910390f35b341561060957600080fd5b6106116114a1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561065e57600080fd5b610693600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506114c7565b604051808215151515815260200191505060405180910390f35b34156106b857600080fd5b6106c0611758565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561070d57600080fd5b610739600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061177e565b6040518082815260200191505060405180910390f35b341561075a57600080fd5b6107626117c7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107af57600080fd5b6107b76117ed565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561080457600080fd5b61080c611813565b6040518082815260200191505060405180910390f35b341561082d57600080fd5b610835611819565b6040518082815260200191505060405180910390f35b341561085657600080fd5b61085e61181f565b6040518082815260200191505060405180910390f35b341561087f57600080fd5b610887611825565b6040518082815260200191505060405180910390f35b34156108a857600080fd5b6108b061182b565b6040518082815260200191505060405180910390f35b34156108d157600080fd5b6108d9611831565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109195780820151818401526020810190506108fe565b50505050905090810190601f1680156109465780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561095f57600080fd5b6109676118cf565b6040518082815260200191505060405180910390f35b341561098857600080fd5b6109906118d5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156109dd57600080fd5b610a12600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506118fb565b604051808215151515815260200191505060405180910390f35b3415610a3757600080fd5b610a3f611b1f565b6040518082815260200191505060405180910390f35b3415610a6057600080fd5b610a68611b25565b6040518082815260200191505060405180910390f35b3415610a8957600080fd5b610a91611b2b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610ade57600080fd5b610ae6611b51565b6040518082815260200191505060405180910390f35b3415610b0757600080fd5b610b0f611b57565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610b5c57600080fd5b610b64611b7d565b6040518082815260200191505060405180910390f35b3415610b8557600080fd5b610b8d611b83565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610bda57600080fd5b610be2611ba9565b6040518082815260200191505060405180910390f35b3415610c0357600080fd5b610c0b611baf565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610c5857600080fd5b610c8d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611bd5565b604051808215151515815260200191505060405180910390f35b3415610cb257600080fd5b610cfd600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611dd1565b6040518082815260200191505060405180910390f35b3415610d1e57600080fd5b610d26611e58565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610d7357600080fd5b610d7b611e7e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610dc857600080fd5b610dd0611ea4565b6040518082815260200191505060405180910390f35b3415610df157600080fd5b610df9611eaa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610e4657600080fd5b610e4e611ed0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f265780601f10610efb57610100808354040283529160200191610f26565b820191906000526020600020905b815481529060010190602001808311610f0957829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60095481565b601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60175481565b60005481565b60275481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561109b57600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156110e957600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561117457600080fd5b6111c682600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ef690919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061125b82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f0f90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061132d82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ef690919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60055481565b602660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60115481565b60195481565b601e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156115d8576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061166c565b6115eb8382611ef690919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601b5481565b60215481565b60075481565b60155481565b60235481565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118c75780601f1061189c576101008083540402835291602001916118c7565b820191906000526020600020905b8154815290600101906020018083116118aa57829003601f168201915b505050505081565b601f5481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561193857600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561198657600080fd5b6119d882600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ef690919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a6d82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f0f90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600d5481565b600b5481565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60135481565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601d5481565b601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60255481565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611c6682600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f0f90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b602060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f5481565b602260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000828211151515611f0457fe5b818303905092915050565b6000808284019050838110151515611f2357fe5b80915050929150505600a165627a7a7230582048a1936c66d0ebfe2efb10140a9c292ebf0444b2a15f18ef93ec2ac9e1bb90a30029"
}