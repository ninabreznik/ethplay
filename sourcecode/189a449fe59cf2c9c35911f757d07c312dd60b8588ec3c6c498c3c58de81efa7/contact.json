{
  "address": "0xb0fa64ed5b2a4f730fa79b9fe3ac4e2c0c2100a0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "IMDEXchange",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-02\n*/\n\npragma solidity ^0.4.25;\n\ncontract IMDEX {\n    bytes32 public standard;\n    bytes32 public name;\n    bytes32 public symbol;\n    uint256 public totalSupply;\n    uint8 public decimals;\n    bool public allowTransactions;\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    function transfer(address _to, uint256 _value)public returns (bool success);\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n}\n\ncontract SafeMath {\n\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n}\n\n\ncontract IMDEXchange is SafeMath {\n\n  address public owner;\n  mapping (address => uint256) public invalidOrder;\n  event SetOwner(address indexed previousOwner, address indexed newOwner);\n  modifier onlyOwner {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function IMDEXsetOwner(address newOwner)public onlyOwner {\n    emit SetOwner(owner, newOwner);\n    owner = newOwner;\n  }\n\n  function IMDEXinvalidateOrdersBefore(address user, uint256 nonce) public onlyAdmin {\n    require(nonce > invalidOrder[user]);\n    invalidOrder[user] = nonce;\n  }\n\n  mapping (address => mapping (address => uint256)) public tokens; //mapping of token addresses to mapping of account balances\n  mapping (address => bool) public admins;\n  mapping (address => uint256) public lastActiveTransaction;\n  address public feeAccount;\n  uint256 public inactivityReleasePeriod;\n  event Trade(address tokenBuy, uint256 amountBuy, address tokenSell, uint256 amountSell, address get, address give);\n  event Deposit(address token, address user, uint256 amount, uint256 balance);\n  event Withdraw(address token, address user, uint256 amount, uint256 balance);\n\n  function IMDEXsetInactivityReleasePeriod(uint256 expiry) public onlyAdmin returns (bool success) {\n    require(expiry < 1000000);\n    inactivityReleasePeriod = expiry;\n    return true;\n  }\n\n  constructor(address feeAccount_) public {\n    owner = msg.sender;\n    feeAccount = feeAccount_;\n    inactivityReleasePeriod = 100000;\n  }\n\n  function IMDEXsetAdmin(address admin, bool isAdmin) public onlyOwner {\n    admins[admin] = isAdmin;\n  }\n\n  modifier onlyAdmin {\n   require(msg.sender == owner && admins[msg.sender]);\n    _;\n  }\n\n  function() external {\n    revert();\n  }\n\n\n\n  function IMDEXdepositToken(address token, uint256 amount) public {\n    tokens[token][msg.sender] = safeAdd(tokens[token][msg.sender], amount);\n    lastActiveTransaction[msg.sender] = block.number;\n    require(IMDEX(token).transferFrom(msg.sender, this, amount));\n    emit Deposit(token, msg.sender, amount, tokens[token][msg.sender]);\n  }\n\n  function IMDEXdeposit() public payable {\n    tokens[address(0)][msg.sender] = safeAdd(tokens[address(0)][msg.sender], msg.value);\n    lastActiveTransaction[msg.sender] = block.number;\n    emit Deposit(address(0), msg.sender, msg.value, tokens[address(0)][msg.sender]);\n  }\n\nfunction IMDEXwithdrawToken(address token, uint256 amount) public returns (bool) {\n    require(safeSub(block.number, lastActiveTransaction[msg.sender]) > inactivityReleasePeriod);\n    require(tokens[token][msg.sender] > amount);\n    tokens[token][msg.sender] = safeSub(tokens[token][msg.sender], amount);\n    if (token == address(0)) {\n      msg.sender.transfer(amount);\n    } else {\n      require(IMDEX(token).transfer(msg.sender, amount));\n    }\n    emit Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);\n  }\n\n  function IMDEXadminWithdraw(address token, uint256 amount, address user, uint256 feeWithdrawal) public onlyAdmin returns (bool) {\n    if (feeWithdrawal > 50 finney) feeWithdrawal = 50 finney;\n    require(tokens[token][user] > amount);\n    tokens[token][user] = safeSub(tokens[token][user], amount);\n    tokens[token][feeAccount] = safeAdd(tokens[token][feeAccount], safeMul(feeWithdrawal, amount) / 1 ether);\n    amount = safeMul((1 ether - feeWithdrawal), amount) / 1 ether;\n    if (token == address(0)) {\n      user.transfer(amount);\n    } else {\n      require(IMDEX(token).transfer(user, amount));\n    }\n    lastActiveTransaction[user] = block.number;\n    emit Withdraw(token, user, amount, tokens[token][user]);\n  }\n\n  function balanceOf(address token, address user) public constant returns (uint256) {\n    return tokens[token][user];\n  }\n\n  function IMDEXtrade(uint256[8] X, address[4] Y) public onlyAdmin returns (bool) {\n    /* amount is in amountBuy terms */\n    /* X\n       [0] amountBuy\n       [1] amountSell\n       [2] expires\n       [3] nonce\n       [4] amount\n       [5] tradeNonce\n       [6] feeMake\n       [7] feeTake\n     Y\n       [0] tokenBuy\n       [1] tokenSell\n       [2] maker\n       [3] taker\n     */\n    require(invalidOrder[Y[2]] < X[3]);\n    if (X[6] > 100 finney) X[6] = 100 finney;\n    if (X[7] > 100 finney) X[7] = 100 finney;\n    require(tokens[Y[0]][Y[3]] > X[4]);\n    require(tokens[Y[1]][Y[2]] > (safeMul(X[1], X[4]) / X[0]));\n    tokens[Y[0]][Y[3]] = safeSub(tokens[Y[0]][Y[3]], X[4]);\n    tokens[Y[0]][Y[2]] = safeAdd(tokens[Y[0]][Y[2]], safeMul(X[4], ((1 ether) - X[6])) / (1 ether));\n    tokens[Y[0]][feeAccount] = safeAdd(tokens[Y[0]][feeAccount], safeMul(X[4], X[6]) / (1 ether));\n    tokens[Y[1]][Y[2]] = safeSub(tokens[Y[1]][Y[2]], safeMul(X[1], X[4]) / X[0]);\n    tokens[Y[1]][Y[3]] = safeAdd(tokens[Y[1]][Y[3]], safeMul(safeMul(((1 ether) - X[7]), X[1]), X[4]) / X[0] / (1 ether));\n    tokens[Y[1]][feeAccount] = safeAdd(tokens[Y[1]][feeAccount], safeMul(safeMul(X[7], X[1]), X[4]) / X[0] / (1 ether));\n    lastActiveTransaction[Y[2]] = block.number;\n    lastActiveTransaction[Y[3]] = block.number;\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051602080612cf383398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620186a060068190555050612c25806100ce6000396000f3006080604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a4bfa6d14610103578063254dcfe2146101685780632b03b8d4146101bf5780633c72e9bf146101c9578063429b62e514610258578063508493bc146102b357806365e17c9d1461032a57806383dbb27b146103815780638da5cb5b146103d8578063919887831461042f5780639f022f051461047c578063b92f1986146104cb578063ba87ebfa14610518578063c5bb8af41461055b578063ef2e7c48146105a0578063f31174ee1461063a578063f7888aec14610665575b3480156100fd57600080fd5b50600080fd5b34801561010f57600080fd5b5061014e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106dc565b604051808215151515815260200191505060405180910390f35b34801561017457600080fd5b506101a9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b5a565b6040518082815260200191505060405180910390f35b6101c7610b72565b005b3480156101d557600080fd5b5061023e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610de2565b604051808215151515815260200191505060405180910390f35b34801561026457600080fd5b50610299600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114a7565b604051808215151515815260200191505060405180910390f35b3480156102bf57600080fd5b50610314600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114c7565b6040518082815260200191505060405180910390f35b34801561033657600080fd5b5061033f6114ec565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561038d57600080fd5b506103c2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611512565b6040518082815260200191505060405180910390f35b3480156103e457600080fd5b506103ed61152a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043b57600080fd5b5061047a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061154f565b005b34801561048857600080fd5b506104c9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506118dd565b005b3480156104d757600080fd5b50610516600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611993565b005b34801561052457600080fd5b50610559600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ad8565b005b34801561056757600080fd5b5061058660048036038101908080359060200190929190505050611bf1565b604051808215151515815260200191505060405180910390f35b3480156105ac57600080fd5b506106206004803603810190808061010001906008806020026040519081016040528092919082600860200280828437820191505050505091929192908060800190600480602002604051908101604052809291908260046020028082843782019150505050509192919290505050611cc4565b604051808215151515815260200191505060405180910390f35b34801561064657600080fd5b5061064f612aff565b6040518082815260200191505060405180910390f35b34801561067157600080fd5b506106c6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b05565b6040518082815260200191505060405180910390f35b600060065461072a43600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b8c565b11151561073657600080fd5b81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115156107c057600080fd5b610846600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612b8c565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610947573373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610941573d6000803e3d6000fd5b50610a31565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156109ea57600080fd5b505af11580156109fe573d6000803e3d6000fd5b505050506040513d6020811015610a1457600080fd5b81019080805190602001909291905050501515610a3057600080fd5b5b7ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567833384600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a192915050565b60046020528060005260406000206000915090505481565b610bf8600260008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205434612ba5565b600260008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555043600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d760003334600260008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015610e895750600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515610e9457600080fd5b66b1a2bc2ec50000821115610eae5766b1a2bc2ec5000091505b83600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515610f3857600080fd5b610fbe600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485612b8c565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611102600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054670de0b6b3a76400006110f38588612bc1565b8115156110fc57fe5b04612ba5565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550670de0b6b3a76400006111c183670de0b6b3a76400000386612bc1565b8115156111ca57fe5b049350600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561124e578273ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f19350505050158015611248573d6000803e3d6000fd5b50611338565b8473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156112f157600080fd5b505af1158015611305573d6000803e3d6000fd5b505050506040513d602081101561131b57600080fd5b8101908080519060200190929190505050151561133757600080fd5b5b43600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567858486600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a1949350505050565b60036020528060005260406000206000915054906101000a900460ff1681565b6002602052816000526040600020602052806000526040600020600091509150505481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6115d5600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482612ba5565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555043600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561177057600080fd5b505af1158015611784573d6000803e3d6000fd5b505050506040513d602081101561179a57600080fd5b810190808051906020019092919050505015156117b657600080fd5b7fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7823383600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561193857600080fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015611a385750600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515611a4357600080fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111515611a9057600080fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b3357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fcbf985117192c8f614a58aaf97226bb80a754772f5f6edf06f87c675f2e6c66360405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015611c985750600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515611ca357600080fd5b620f424082101515611cb457600080fd5b8160068190555060019050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015611d6b5750600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515611d7657600080fd5b826003600881101515611d8557fe5b602002015160016000846002600481101515611d9d57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515611de957600080fd5b67016345785d8a0000836006600881101515611e0157fe5b60200201511115611e2e5767016345785d8a0000836006600881101515611e2457fe5b6020020181815250505b67016345785d8a0000836007600881101515611e4657fe5b60200201511115611e735767016345785d8a0000836007600881101515611e6957fe5b6020020181815250505b826004600881101515611e8257fe5b602002015160026000846000600481101515611e9a57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846003600481101515611eea57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515611f3657600080fd5b826000600881101515611f4557fe5b6020020151611f7a846001600881101515611f5c57fe5b6020020151856004600881101515611f7057fe5b6020020151612bc1565b811515611f8357fe5b0460026000846001600481101515611f9757fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846002600481101515611fe757fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151561203357600080fd5b6120f26002600084600060048110151561204957fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084600360048110151561209957fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548460046008811015156120e857fe5b6020020151612b8c565b6002600084600060048110151561210557fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084600360048110151561215557fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612290600260008460006004811015156121ae57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460026004811015156121fe57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054670de0b6b3a764000061228186600460088110151561225957fe5b602002015187600660088110151561226d57fe5b6020020151670de0b6b3a764000003612bc1565b81151561228a57fe5b04612ba5565b600260008460006004811015156122a357fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460026004811015156122f357fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506124336002600084600060048110151561234c57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054670de0b6b3a764000061242486600460088110151561240657fe5b602002015187600660088110151561241a57fe5b6020020151612bc1565b81151561242d57fe5b04612ba5565b6002600084600060048110151561244657fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506125e1600260008460016004811015156124fe57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084600260048110151561254e57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484600060088110151561259d57fe5b60200201516125d28660016008811015156125b457fe5b60200201518760046008811015156125c857fe5b6020020151612bc1565b8115156125db57fe5b04612b8c565b600260008460016004811015156125f457fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084600260048110151561264457fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506127b96002600084600160048110151561269d57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460036004811015156126ed57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054670de0b6b3a764000085600060088110151561274557fe5b60200201516127a061278788600760088110151561275f57fe5b6020020151670de0b6b3a76400000389600160088110151561277d57fe5b6020020151612bc1565b88600460088110151561279657fe5b6020020151612bc1565b8115156127a957fe5b048115156127b357fe5b04612ba5565b600260008460016004811015156127cc57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084600360048110151561281c57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506129966002600084600160048110151561287557fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054670de0b6b3a764000085600060088110151561292c57fe5b602002015161297d61296488600760088110151561294657fe5b602002015189600160088110151561295a57fe5b6020020151612bc1565b88600460088110151561297357fe5b6020020151612bc1565b81151561298657fe5b0481151561299057fe5b04612ba5565b600260008460016004811015156129a957fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055504360046000846002600481101515612a5f57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055504360046000846003600481101515612ab657fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555092915050565b60065481565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000828211151515612b9a57fe5b818303905092915050565b60008183019050828110151515612bb857fe5b80905092915050565b600080831415612bd45760009050612bf3565b8183029050818382811515612be557fe5b04141515612bef57fe5b8090505b929150505600a165627a7a723058209a015d31b4bbcd4deb8a7c1732c49a4430834fe1a4646c1df31be5f70839b6ba0029000000000000000000000000d8a773901ffcc3472a0f37187d6f3c7eb4848e2e",
  "constructorArguments": "000000000000000000000000d8a773901ffcc3472a0f37187d6f3c7eb4848e2e"
}