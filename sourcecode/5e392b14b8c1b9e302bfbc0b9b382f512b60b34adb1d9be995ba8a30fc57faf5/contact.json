{
  "address": "0x59f1b6d0f5105cf025a3de58858a9363f4fef084",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Auscoin",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-21\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Math\n * @dev Assorted math operations\n */\nlibrary Math {\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract Auscoin is StandardToken, Ownable {\n  // Publicly listed name\n  string public name = \"AUSCOIN COIN\";\n  // Symbol under which token will be trading\n  string public symbol = \"AUSC\";\n  // 1 ETH consists of 10^18 Wei, which is the smallest ETH unit\n  uint8 public decimals = 18;\n  // Defining the value of a million for easy calculations - order of declaration matters (hoisting)\n  uint256 million = 1000000 * (uint256(10) ** decimals);\n  // We are offering a total of 100 Million Auscoin Tokens to distribute\n  uint256 public totalSupply = 100 * million;\n  // This is established on contract deployment in relevance to the (at the time) ETH/USD exchange rate\n  uint256 public exchangeRate;\n  // Initialized to 0, this value tracks the total amount of ETH sent to the smart contract\n  uint256 public totalEthRaised = 0;\n  // The time at which the ICO allows for buy interactions, 12th Feb 6PM\n  uint256 public startTime;\n  // The time at which the ICO stops buy interactions, 12th Feb 6PM + 28 days, after this only transfers and withdrawals are allowed\n  uint256 public endTime;\n  // The AusGroup token allocation will not be available to AusGroup until this date\n  uint256 public ausGroupReleaseDate;\n  // Address where the ether raised is transfered to and address where the token balance is stored within the balances mapping\n  address public fundsWallet;\n  // Address where the bonus tokens are transferred to and held\n  address public bonusWallet;\n  // Address where AusGroup tokens are held\n  address public ausGroup;\n  // Whitelister - the entity with permission to add addresses to the whiteList mapping\n  address public whiteLister;\n\n  // Initial Allocation amounts\n  uint256 public ausGroupAllocation = 50 * million;\n  uint256 public bountyAllocation = 1 * million;\n  uint256 public preSeedAllocation = 3 * million;\n  uint256 public bonusAllocation = 6 * million;\n\n  // Whitelisted mapping - the addresses which have participated in the ICO and are allowed to transact after the ICO.\n  // ICO Participants need to be verify their identity before they can use AusCoin\n  mapping (address => bool) public whiteListed;\n\n  // ICO Participant\n  mapping (address => bool) isICOParticipant;\n\n  // Constants\n  uint256 numberOfMillisecsPerYear = 365 * 24 * 60 * 60 * 1000;\n  uint256 amountPerYearAvailableToAusGroup = 5 * million;\n\n  function Auscoin(\n    uint256 _startTime,\n    uint256 _endTime,\n    uint256 _ausGroupReleaseDate,\n    uint256 _exchangeRate,\n    address _bonusWallet,\n    address _ausGroup,\n    address _bounty,\n    address _preSeedFund,\n    address _whiteLister\n  )\n    public\n  {\n    fundsWallet = owner;\n    bonusWallet = _bonusWallet;\n    startTime = _startTime;\n    endTime = _endTime; // 4 weeks\n    ausGroupReleaseDate = _ausGroupReleaseDate;\n    exchangeRate = _exchangeRate;\n    ausGroup = _ausGroup;\n    whiteLister = _whiteLister;\n\n    // Assign total supply to funds wallet\n    // https://github.com/OpenZeppelin/zeppelin-solidity/issues/494\n    // A token contract which creates new tokens SHOULD trigger a Transfer event with the _from address set to 0x0 when tokens are created.\n    balances[fundsWallet] = totalSupply;\n    Transfer(0x0, fundsWallet, totalSupply);\n\n    // Allocate bonus tokens\n    // https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/BasicToken.sol\n    // The inherited transfer method from the StandardToken which inherits from BasicToken emits Transfer events and subtracts/adds respective\n    // amounts to respective accounts\n    super.transfer(bonusWallet, bonusAllocation);\n\n    // Transfer pre-allocated funds\n    super.transfer(_ausGroup, ausGroupAllocation);\n\n    // Allocate bounty funds\n    super.transfer(_bounty, bountyAllocation);\n\n    // Allocate pre-seed funds\n    super.transfer(_preSeedFund, preSeedAllocation);\n  }\n\n  // Time utility function\n  function currentTime() public view returns (uint256) {\n    return now * 1000;\n  }\n\n  // calculateBonusAmount, view tag attached as it does not manipulate state\n  function calculateBonusAmount(uint256 amount) view internal returns (uint256) {\n    uint256 totalAvailableDuringICO = totalSupply - (bonusAllocation + ausGroupAllocation + bountyAllocation + preSeedAllocation);\n    uint256 sold = totalAvailableDuringICO - balances[fundsWallet];\n\n    uint256 amountForThirtyBonusBracket = int256((10 * million) - sold) > 0 ? (10 * million) - sold : 0;\n    uint256 amountForTwentyBonusBracket = int256((20 * million) - sold) > 0 ? (20 * million) - sold : 0;\n    uint256 amountForTenBonusBracket = int256((30 * million) - sold) > 0 ? (30 * million) - sold : 0;\n\n    uint256 thirtyBonusBracket = Math.min256(Math.max256(0, amountForThirtyBonusBracket), Math.min256(amount, (10 * million)));\n    uint256 twentyBonusBracket = Math.min256(Math.max256(0, amountForTwentyBonusBracket), Math.min256(amount - thirtyBonusBracket, (10 * million)));\n    uint256 tenBonusBracket = Math.min256(Math.max256(0, amountForTenBonusBracket), Math.min256(amount - twentyBonusBracket - thirtyBonusBracket, (10 * million)));\n\n    uint256 totalBonus = thirtyBonusBracket.mul(30).div(100) + twentyBonusBracket.mul(20).div(100) + tenBonusBracket.mul(10).div(100);\n\n    return totalBonus;\n  }\n\n  // Payable functions. Fall out and low level buy\n  // isIcoOpen modifier ensures ETH payments can only be made if the ICO is 'open', after start and before end date (or if all tokens are sold)\n  // payable is needed on the fallback function in order to receive Ether\n  // Reference: http://solidity.readthedocs.io/en/develop/contracts.html\n  function() isIcoOpen payable public {\n    buyTokens();\n  }\n\n  function buyTokens() isIcoOpen payable public {\n    // Use the exchange rate set at deployment to calculate the amount of tokens the transferred ETH converts to\n    uint256 tokenAmount = msg.value.mul(exchangeRate);\n    // Calculate the bonus the sender will receive based on which Tier the current Smart Contract is sitting on\n    uint256 bonusAmount = calculateBonusAmount(tokenAmount);\n    // Ensure that the tokenAmount is greater than the total funds currently present\n    require(balances[fundsWallet] >= tokenAmount);\n    // Ensure that the bonusAmount is greater than the total bonus currently availbale in the bonusWallet\n    require(balances[bonusWallet] >= bonusAmount);\n\n    // Add to the state level ETH raised value\n    totalEthRaised = totalEthRaised.add(msg.value);\n\n    // Deduct the said amount from the relevant wallet addresses in the balance map\n    balances[bonusWallet] = balances[bonusWallet].sub(bonusAmount);\n    balances[fundsWallet] = balances[fundsWallet].sub(tokenAmount);\n    // Add the sold tokens to the sender's wallet address in the balance map for them to claim after ICO\n    balances[msg.sender] = balances[msg.sender].add(tokenAmount.add(bonusAmount));\n\n    // Add them to the isICOParticipant mapping\n    isICOParticipant[msg.sender] = true;\n\n    fundsWallet.transfer(msg.value);\n\n    // Since we did not use the transfer method, we manually emit the Transfer event\n    Transfer(fundsWallet, msg.sender, tokenAmount);\n    Transfer(bonusWallet, msg.sender, bonusAmount);\n  }\n\n  function addToWhiteList(address _purchaser) canAddToWhiteList public {\n    whiteListed[_purchaser] = true;\n  }\n\n  function setWhiteLister(address _newWhiteLister) onlyOwner public {\n    whiteLister = _newWhiteLister;\n  }\n\n  // Transfers\n  function transfer(address _to, uint _value) isIcoClosed public returns (bool success) {\n    require(msg.sender != ausGroup);\n    if (isICOParticipant[msg.sender]) {\n      require(whiteListed[msg.sender]);\n    }\n    return super.transfer(_to, _value);\n  }\n\n  function ausgroupTransfer(address _to, uint _value) timeRestrictedAccess isValidAusGroupTransfer(_value) public returns (bool success) {\n    require(msg.sender == ausGroup);\n    require(balances[ausGroup] >= _value);\n    return super.transfer(_to, _value);\n  }\n\n  // Override to enforce modifier that ensures that ICO is closed before the following function is invoked\n  function transferFrom(address _from, address _to, uint _value) isIcoClosed public returns (bool success) {\n    require(_from != ausGroup);\n    if (isICOParticipant[_from]) {\n      require(whiteListed[_from]);\n    }\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function burnUnsoldTokens() isIcoClosed onlyOwner public {\n    uint256 bonusLeft = balances[bonusWallet];\n    uint256 fundsLeft = balances[fundsWallet];\n    // Burn anything in our balances map\n    balances[bonusWallet] = 0;\n    balances[fundsWallet] = 0;\n    Transfer(bonusWallet, 0, bonusLeft);\n    Transfer(fundsWallet, 0, fundsLeft);\n  }\n\n  // Modifiers\n  modifier isIcoOpen() {\n    require(currentTime() >= startTime);\n    require(currentTime() < endTime);\n    _;\n  }\n\n  modifier isIcoClosed() {\n    require(currentTime() >= endTime);\n    _;\n  }\n\n  modifier timeRestrictedAccess() {\n    require(currentTime() >= ausGroupReleaseDate);\n    _;\n  }\n\n  modifier canAddToWhiteList() {\n    require(msg.sender == whiteLister);\n    _;\n  }\n\n  modifier isValidAusGroupTransfer(uint256 _value) {\n    uint256 yearsAfterRelease = ((currentTime() - ausGroupReleaseDate) / numberOfMillisecsPerYear) + 1;\n    uint256 cumulativeTotalAvailable = yearsAfterRelease * amountPerYearAvailableToAusGroup;\n    require(cumulativeTotalAvailable > 0);\n    uint256 amountAlreadyTransferred = ausGroupAllocation - balances[ausGroup];\n    uint256 amountAvailable = cumulativeTotalAvailable - amountAlreadyTransferred;\n    require(_value <= amountAvailable);\n    _;\n  }\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000016188d02d800000000000000000000000000000000000000000000000000000016219023d80000000000000000000000000000000000000000000000000000001782015c180000000000000000000000000000000000000000000000000000000000000047e000000000000000000000000f15a103b07467224d1e90cb3e39349646c18323800000000000000000000000080d10df9bab5faad5a4869e0067ce3d529b0a614000000000000000000000000f48a37499eef8c8a8f3456a715cf449461cca7100000000000000000000000008588473ded6b54f5b2428409d4b23dd922bfc75d00000000000000000000000023d3fe92dac510f940ae68faf700c809229c6c27"
}