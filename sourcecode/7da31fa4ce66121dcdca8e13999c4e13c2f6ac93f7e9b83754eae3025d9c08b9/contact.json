{
  "address": "0xc4ea9dee8638893fbe67701d171d4ecf19135254",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Conquest",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-19\n*/\n\npragma solidity ^0.4.25;\n\ncontract Conquest {\n    \n    /*=================================\n    =             EVENTS              =\n    =================================*/\n\tevent onHiveCreated (\n        address indexed player,\n\t\tuint256 number,\n\t\tuint256 time\n    );\n\t\n\tevent onDroneCreated (\n        address indexed player,\n\t\tuint256 number,\n\t\tuint256 time\n    );\n\t\n\tevent onEnemyDestroyed (\n\t\taddress indexed player,\n\t\tuint256 time\n\t);\n    \n    \n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n\tmodifier onlyAdministrator() {\n        address _customerAddress = msg.sender;\n        require(administrator_ == _customerAddress);\n        _;\n    }\n    \n    \n    /*=================================\n    =         CONFIGURABLES           =\n    ==================================*/\n    uint256 internal ACTIVATION_TIME = 1544988600;  // when hives can be created\n\tbool internal contractActivated_ = true;\n\tbool internal payedOut_ = false;\n    \n    uint256 internal hiveCost_ = 0.075 ether;\n    uint256 internal droneCost_ = 0.01 ether;\n\t\n\tuint256 internal hiveXCommanderFee_ = 50;\t// 50% from Hives to Commander\n\tuint256 internal droneXCommanderFee_ = 15;\t// 15% from Drones to Commander\n    uint256 internal droneXHiveFee_ = 415;\t\t// 41.5% from Drones to Commander (base 1000)\n\t\n    uint8 internal amountHives_ = 8;\n    uint8 internal dronesPerDay_ = 20;\t\t\t// default 20\n\tbool internal conquesting_ = true;\n\tbool internal conquested_ = false;\n    \n    \n    /*=================================\n    =             DATASET             =\n    =================================*/\n    address internal administrator_;\n    address internal fundTHCAddress_;\n\taddress internal fundP3DAddress_;\n    uint256 internal pot_;\n    mapping (address => Pilot) internal pilots_;\n    \n    address internal commander_;\n    address[] internal hives_;\n    address[] internal drones_;\n    \n    //uint256 internal DEATH_TIME;\n    uint256 internal dronePopulation_;\n    \n    \n    /*=================================\n    =         PUBLIC FUNCTIONS        =\n    =================================*/\n    constructor() \n        public \n    {\n        commander_ = address(this);\n        administrator_ = 0x28436C7453EbA01c6EcbC8a9cAa975f0ADE6Fff1;\n        fundTHCAddress_ = 0x9674D14AF3EE5dDcD59D3bdcA7435E11bA0ced18;\n\t\tfundP3DAddress_ = 0xC0c001140319C5f114F8467295b1F22F86929Ad0;\n    }\n\t\n\tfunction startNewRound() \n\t\tpublic \n\t{\n\t\t// Conquesting needs to be finished\n\t\trequire(!conquesting_);\n\t\t\n\t\t// payout everybody into their vaults\n\t\tif (!payedOut_) {\n\t\t\t_payout();\n\t\t}\n\t\t\n\t\t// reset all values\n\t\t_resetGame();\n\t}\n\t\n\t// VAULT\n\tfunction withdrawVault() \n\t\tpublic \n\t{\n\t\taddress _player = msg.sender;\n\t\tuint256 _balance = pilots_[_player].vault;\n\t\t\n\t\t// Player must have ether in vault\n\t\trequire(_balance > 0);\n\t\t\n\t\t// withdraw everything\n\t\tpilots_[_player].vault = 0;\n\t\t\n\t\t// payouts\n\t\t_player.transfer(_balance);\n\t}\n\t\n\tfunction createCarrierFromVault()\n\t\tpublic \n\t{\n\t\taddress _player = msg.sender;\n\t\tuint256 _vault = pilots_[_player].vault;\n\t\t\n\t\t// Player must have enough ether available in vault\n\t\trequire(_vault >= hiveCost_);\n\t\tpilots_[_player].vault = _vault - hiveCost_;\n\t\t\n\t\t_createHiveInternal(_player);\n\t}\n\t\n\tfunction createDroneFromVault()\n\t\tpublic \n\t{\n\t\taddress _player = msg.sender;\n\t\tuint256 _vault = pilots_[_player].vault;\n\t\t\n\t\t// Player must have enough ether available in vault\n\t\trequire(_vault >= droneCost_);\n\t\tpilots_[_player].vault = _vault - droneCost_;\n\t\t\n\t\t_createDroneInternal(_player);\n\t}    \n    \n\t// WALLET\n    function createCarrier() \n\t\tpublic \n\t\tpayable\n\t{\n        address _player = msg.sender;\n        \n\t\trequire(msg.value == hiveCost_);\t\t\t// requires exact amount of ether\n        \n        _createHiveInternal(_player);\n    }\t\n    \n    function createDrone()\n        public \n\t\tpayable\n    {\n\t\taddress _player = msg.sender;\n\t\t\n\t\trequire(msg.value == droneCost_);\t\t\t// requires exact amount of ether\n        \n        _createDroneInternal(_player);\n    }\n    \n    /* View Functions and Helpers */\n    function openAt()\n        public\n        view\n        returns(uint256)\n    {\n        return ACTIVATION_TIME;\n    }\n    \n    function getHives()\n\t    public\n\t    view\n\t    returns(address[])\n\t{\n\t    return hives_;\n\t}\n\t\n\tfunction getDrones()\n\t    public\n\t    view\n\t    returns(address[])\n\t{\n\t    return drones_;\n\t}\n\t\n\t/*function populationIncrease()\n\t\tpublic\n\t\tview\n\t\treturns(uint256)\n\t{\n\t\treturn drones_.length - dronePopulation_;\n\t}*/\n    \n    function commander()\n        public\n        view\n        returns(address)\n    {\n        return commander_;\n    }\n    \n    function conquesting() \n        public\n        view\n        returns(bool)\n    {\n        return conquesting_;\n    }\n\t\n\tfunction getCommanderPot()\n        public\n        view\n        returns(uint256)\n    {\n\t\t// total values\n        uint256 _hivesIncome = hives_.length * hiveCost_;\t\t// total hives pot addition\n        uint256 _dronesIncome = drones_.length * droneCost_;\t// total drones pot addition\n        uint256 _pot = pot_ + _hivesIncome + _dronesIncome; \t// old pot may feeds this round\n\t\tuint256 _fee = _pot / 10;       \t\t\t\t\t\t// 10%\n        _pot = _pot - _fee;\t\t\t\t\t\t\t\t\t\t// 90% residual\n\t\t\n\t\t_hivesIncome = (_hivesIncome * 9) / 10;\n        _dronesIncome = (_dronesIncome * 9) / 10;\n\t\t\n        // relative values\n        uint256 _toCommander = (_hivesIncome * hiveXCommanderFee_) / 100 +\t\t// 50% from Hives to Commander\n                               (_dronesIncome * droneXCommanderFee_) / 100;  \t// 15% from Drones to Commander\n\t\t\n\t\treturn _toCommander;\n\t}\n\t\n\tfunction getHivePot()\n        public\n        view\n        returns(uint256)\n    {\n\t\t// total values\n        uint256 _hivesIncome = hives_.length * hiveCost_;\t\t// total hives pot addition\n        uint256 _dronesIncome = drones_.length * droneCost_;\t// total drones pot addition\n        uint256 _pot = pot_ + _hivesIncome + _dronesIncome; \t// old pot may feeds this round\n\t\tuint256 _fee = _pot / 10;       \t\t\t\t\t\t// 10%\n        _pot = _pot - _fee;\t\t\t\t\t\t\t\t\t\t// 90% residual\n        \n\t\t_hivesIncome = (_hivesIncome * 9) / 10;\n        _dronesIncome = (_dronesIncome * 9) / 10;\n\t\t\n        // relative values\n        uint256 _toHives = (_dronesIncome * droneXHiveFee_) / 1000;    \t\t\t// 41,5% from Drones to Hives\n\t\t\n\t\treturn _toHives;\n    }\n\t\n\tfunction getDronePot()\n        public\n        view\n        returns(uint256)\n    {\n\t\t// total values\n        uint256 _hivesIncome = hives_.length * hiveCost_;\t\t// total hives pot addition\n        uint256 _dronesIncome = drones_.length * droneCost_;\t// total drones pot addition\n        uint256 _pot = pot_ + _hivesIncome + _dronesIncome; \t// old pot may feeds this round\n\t\tuint256 _fee = _pot / 10;       \t\t\t\t\t\t// 10%\n        _pot = _pot - _fee;\t\t\t\t\t\t\t\t\t\t// 90% residual\n        \n\t\t_hivesIncome = (_hivesIncome * 9) / 10;\n        _dronesIncome = (_dronesIncome * 9) / 10;\n\t\t\n        // relative values\n        uint256 _toCommander = (_hivesIncome * hiveXCommanderFee_) / 100 +\t\t// 50% from Hives to Commander\n                               (_dronesIncome * droneXCommanderFee_) / 100;  \t// 15% from Drones to Commander\n        uint256 _toHives = (_dronesIncome * droneXHiveFee_) / 1000;    \t\t\t// 41,5% from Drones to Hives\n\t\tuint256 _toDrones = _pot - _toHives - _toCommander; \t\t\t\t\t// residual goes to squad\n\t\t\n\t\treturn _toDrones;\n    }\n\t\n\tfunction vaultOf(address _player)\n\t\tpublic\n\t\tview\n\t\treturns(uint256)\n\t{\n\t\treturn pilots_[_player].vault;\n\t}\n\t\n\tfunction lastFlight(address _player)\n\t\tpublic\n\t\tview\n\t\treturns(uint256)\n\t{\n\t\treturn pilots_[_player].lastFlight;\n\t}\n\t\n\t/* Setter */\n    function setGameStatus(bool _active) \n        onlyAdministrator()\n        public\n    {\n        contractActivated_ = _active;\n    }\n    \n    \n    /*=================================\n    =        PRIVATE FUNCTIONS        =\n    =================================*/\n\tfunction _createDroneInternal(address _player)\n\t\tinternal \n\t{\n\t    require(hives_.length == amountHives_);    \t\t\t\t\t// all hives must be created\n\t\trequire(conquesting_);\t\t\t\t\t\t\t\t\t\t// Conquesting must be in progress\n\t\trequire(now > pilots_[_player].lastFlight + 60 seconds);\t// 1 drone per minute per address\n\t    \n\t    // check if certain amount of Drones have been built\n\t    // otherwise round ends\n\t    /*if (now > DEATH_TIME) {\n\t        if (populationIncrease() >= dronesPerDay_) {\n\t            dronePopulation_ = drones_.length;\t\t// remember last drone population\n\t            DEATH_TIME = DEATH_TIME + 24 hours;\t\t// set new death time limit\n\t\t\t\t\n\t\t\t\t// after increasing death time, \"now\" can still have exceeded it\n\t\t\t\tif (now > DEATH_TIME) {\n\t\t\t\t\tconquesting_ = false;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t        } else {\n\t            conquesting_ = false;\n\t            return;\n\t        }\n\t    }*/\n\t    \n\t\t// release new drone\n        drones_.push(_player);\n\t\tpilots_[_player].lastFlight = now;\n\t\t\n\t\temit onDroneCreated(_player, drones_.length, now);\n        \n\t\t// try to kill the Enemy\n\t\t_figthEnemy(_player);\n\t}\n\t\n\tfunction _createHiveInternal(address _player) \n\t\tinternal \n\t{\n\t    require(now >= ACTIVATION_TIME);                                // round starts automatically at this time\n\t    require(hives_.length < amountHives_);                          // limited hive amount\n        require(!ownsHive(_player), \"Player already owns a hive\");      // does not own a hive yet\n        \n\t\t// open hive\n        hives_.push(_player);\n        \n        // activate death time of 24 hours\n        /*if (hives_.length == amountHives_) {\n            DEATH_TIME = now + 24 hours;\n        }*/\n\t\t\n\t\temit onHiveCreated(_player, hives_.length, now);\n\t}\n    \n    function _figthEnemy(address _player)\n        internal\n    {\n        uint256 _drones = drones_.length;\n        \n        // is that Drone the killer?\n        uint256 _drone = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, _player, _drones))) % 289;\n        \n\t\t// Enemy has been killed\n\t\tif (_drone == 42) {\n\t\t\tconquesting_ = false;\n\t\t\tconquested_ = true;\n\t\t\t\n\t\t\temit onEnemyDestroyed(_player, now);\n\t\t}\n    }\n    \n    /**\n     * Payout Commander, Hives and Drone Squad\n     */\n    function _payout()\n        internal\n    {\n        // total values\n        uint256 _hivesIncome = amountHives_ * hiveCost_;\n        uint256 _dronesIncome = drones_.length * droneCost_;\n        uint256 _pot = pot_ + _hivesIncome + _dronesIncome; \t// old pot may feeds this round\n\t\tuint256 _fee = _pot / 10;       \t\t\t\t\t\t// 10%\n        _pot = _pot - _fee;\t\t\t\t\t\t\t\t\t\t// 90% residual\n\t\t_hivesIncome = (_hivesIncome * 9) / 10;\n        _dronesIncome = (_dronesIncome * 9) / 10;\n\t\t\n        // relative values\n        uint256 _toCommander = (_hivesIncome * hiveXCommanderFee_) / 100 +\t\t// 50% from Hives to Commander\n                               (_dronesIncome * droneXCommanderFee_) / 100;  \t// 15% from Drones to Commander\n        uint256 _toHives = (_dronesIncome * droneXHiveFee_) / 1000;    \t\t\t// 41,5% from Drones to Hives\n        uint256 _toHive = _toHives / 8;\t\t\t\t\t\t\t\t\t\t\t// 1/8 to each hive\n        uint256 _toDrones = _pot - _toHives - _toCommander; \t\t\t\t\t// residual goes to squad\n        \n        // only payout Hives and Drones if they have conquested\n        if (conquested_) {\n            // payout hives\n            for (uint8 i = 0; i < 8; i++) {\n                address _ownerHive = hives_[i];\n                pilots_[_ownerHive].vault = pilots_[_ownerHive].vault + _toHive;\n                _pot = _pot - _toHive;\n            }\n            \n            // payout drones\n            uint256 _squadSize;\n            if (drones_.length >= 4) { _squadSize = 4; }\t\t\t\t// 4 drones available\n    \t\telse                     { _squadSize = drones_.length; }\t// less than 4 drones available\n            \n            // iterate 1-4 drones\n            for (uint256 j = (drones_.length - _squadSize); j < drones_.length; j++) {\n                address _ownerDrone = drones_[j];\n                pilots_[_ownerDrone].vault = pilots_[_ownerDrone].vault + (_toDrones / _squadSize);\n                _pot = _pot - (_toDrones / _squadSize);\n            }\n        }\n        \n        // payout Commander if contract is not queen\n        if (commander_ != address(this)) {\n            pilots_[commander_].vault = pilots_[commander_].vault + _toCommander;\n            _pot = _pot - _toCommander;\n        }\n        \n        // payout Fee\n        fundTHCAddress_.transfer(_fee / 2);\t\t// 50% -> THC\n\t\tfundP3DAddress_.transfer(_fee / 2);\t\t// 50% -> P3D\n\t\t\n\t\t// excess goes to next rounds pot\n\t\tpot_ = _pot;\n\t\t\n\t\tpayedOut_ = true;\n    }\n\t\n\t/**\n\t * Prepare next round by resetting all values to default\n\t */\n\tfunction _resetGame() \n\t\tinternal \n\t{\n\t\t// start new round if contract is active\n\t\tif (contractActivated_) {\n\t\t\taddress _winner = drones_[drones_.length - 1];\n\t\t\t\n\t\t\tcommander_ = _winner;\n\t\t\thives_.length = 0;\n\t\t\tdrones_.length = 0;\n\t\t\tdronePopulation_ = 0;\n\t\t\t\n\t\t\tconquesting_ = true;\n\t\t\tconquested_ = false;\n\t\t\t\n\t\t\tpayedOut_ = false;\n\t\t\t\n\t\t\tACTIVATION_TIME = now + 5 minutes;\n\t\t}\n\t}\n    \n    /* Helper */\n    function ownsHive(address _player) \n        internal\n        view\n        returns(bool)\n    {\n        for (uint8 i = 0; i < hives_.length; i++) {\n            if (hives_[i] == _player) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n    \n    \n    /*=================================\n    =            DATA TYPES           =\n    =================================*/\n\tstruct Pilot {\n\t\tuint256 vault;\n\t\tuint256 lastFlight;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"vaultOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDrones\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commander\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conquesting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"lastFlight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHivePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createCarrier\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDronePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHives\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createCarrierFromVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startNewRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCommanderPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setGameStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createDroneFromVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createDrone\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"onHiveCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"onDroneCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"onEnemyDestroyed\",\"type\":\"event\"}]",
  "bytecode": "6080604052635c16a7b86000556001805460ff19908116821761ff001990811690925567010a741a46278000600255662386f26fc100006003556032600455600f60055561019f6006556007805462010000600891909316179092166114001762ff000019161763ff0000001916905534801561007b57600080fd5b50600c8054600160a060020a03199081163017909155600780547728436c7453eba01c6ecbc8a9caa975f0ade6fff1000000007fffffffffffffffff0000000000000000000000000000000000000000ffffffff909116179055600880548216739674d14af3ee5ddcd59d3bdca7435e11ba0ced181790556009805490911673c0c001140319c5f114f8467295b1f22f86929ad0179055610dde806101216000396000f3006080604052600436106100f05763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630709df4581146100f557806307d5ebf514610128578063372709361461018d578063546668bb146101be5780636114dc0f146101e757806384c4ee9e146102085780638f6121021461021d578063948cd9421461022757806396696da81461023c578063a0e23ebd14610251578063a36a055114610266578063bd85948c1461027b578063ca2fd58414610290578063cbe2e97e146102a5578063d0d0ed05146102bf578063d8fbff9f146102d4578063f9e68952146102e9575b600080fd5b34801561010157600080fd5b50610116600160a060020a03600435166102f1565b60408051918252519081900360200190f35b34801561013457600080fd5b5061013d61030c565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610179578181015183820152602001610161565b505050509050019250505060405180910390f35b34801561019957600080fd5b506101a261036f565b60408051600160a060020a039092168252519081900360200190f35b3480156101ca57600080fd5b506101d361037e565b604080519115158252519081900360200190f35b3480156101f357600080fd5b50610116600160a060020a036004351661038d565b34801561021457600080fd5b506101166103ab565b6102256103c9565b005b34801561023357600080fd5b506101166103e5565b34801561024857600080fd5b5061013d610461565b34801561025d57600080fd5b506101166104c1565b34801561027257600080fd5b506102256104c7565b34801561028757600080fd5b50610225610513565b34801561029c57600080fd5b5061011661054c565b3480156102b157600080fd5b5061022560043515156105a9565b3480156102cb57600080fd5b506102256105de565b3480156102e057600080fd5b50610225610643565b61022561068b565b600160a060020a03166000908152600b602052604090205490565b6060600e80548060200260200160405190810160405280929190818152602001828054801561036457602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610346575b505050505090505b90565b600c54600160a060020a031690565b60075462010000900460ff1690565b600160a060020a03166000908152600b602052604090206001015490565b600354600e546006546103e8600a9290930260090291909104020490565b600254339034146103d957600080fd5b6103e2816106a4565b50565b600254600d54600354600e54600a805460055460009695909502600981810284900496949095029485028390049491010190810490819003918590819081906064908702046064600454890281151561043a57fe5b040192506103e8600654870281151561044f57fe5b04909403919091039695505050505050565b6060600d80548060200260200160405190810160405280929190818152602001828054801561036457602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610346575050505050905090565b60005490565b336000818152600b60205260409020546002548110156104e657600080fd5b600254600160a060020a0383166000908152600b60205260409020908203905561050f826106a4565b5050565b60075462010000900460ff161561052957600080fd5b600154610100900460ff161515610542576105426107d5565b61054a610a43565b565b600254600d54600354600e54600a8054600554600096959095026009818102849004969490950294850283900494910101908104908190039185906064908502046064600454870281151561059d57fe5b04019695505050505050565b60075433906401000000009004600160a060020a031681146105ca57600080fd5b506001805460ff1916911515919091179055565b336000818152600b60205260408120549081116105fa57600080fd5b600160a060020a0382166000818152600b60205260408082208290555183156108fc0291849190818181858888f1935050505015801561063e573d6000803e3d6000fd5b505050565b336000818152600b602052604090205460035481101561066257600080fd5b600354600160a060020a0383166000908152600b60205260409020908203905561050f82610aeb565b6003543390341461069b57600080fd5b6103e281610aeb565b6000544210156106b357600080fd5b600754600d5460ff909116116106c857600080fd5b6106d181610bf5565b1561073d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f506c6179657220616c7265616479206f776e7320612068697665000000000000604482015290519081900360640190fd5b600d805460018101825560008290527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb501805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03841690811790915590546040805191825242602083015280517f1078ea89e7a4e06686bbe1d875c184e1f60bbeb8c0fc555be3b81631209d51929281900390910190a250565b600254600754600354600e54600a8054600554600960ff9096169096028581028390049693909402948502829004949301909201918204918290039190600090819081908190819081908190819081906064908d020460646004548f0281151561083b57fe5b040198506103e86006548d0281151561085057fe5b04975060088804965088888c03039550600760039054906101000a900460ff161561096e57600094505b60088560ff1610156108d457600d805460ff871690811061089757fe5b6000918252602080832090910154600160a060020a0316808352600b90915260409091208054890190559a8790039a60019590950194935061087a565b600e546004116108e757600492506108ed565b600e5492505b600e5483900391505b600e5482101561096e57600e80548390811061090e57fe5b600091825260209091200154600160a060020a03169050828681151561093057fe5b600160a060020a0383166000908152600b602052604090208054929091049091019055828681151561095e57fe5b04909a03996001909101906108f6565b600c54600160a060020a031630146109a657600c54600160a060020a03166000908152600b6020526040902080548a01905599889003995b600854604051600160a060020a039091169060028c0480156108fc02916000818181858888f193505050501580156109e2573d6000803e3d6000fd5b50600954604051600160a060020a039091169060028c0480156108fc02916000818181858888f19350505050158015610a1f573d6000803e3d6000fd5b505050600a9890985550506001805461ff0019166101001790555050505050505050565b60015460009060ff16156103e257600e80546000198101908110610a6357fe5b6000918252602082200154600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390921691821790559150610aa6600d82610d75565b506000610ab4600e82610d75565b506000600f8190556007805463ff0000001962ff00001990911662010000171690556001805461ff001916905561012c4201905550565b600754600d5460ff90911614610b0057600080fd5b60075462010000900460ff161515610b1757600080fd5b600160a060020a0381166000908152600b6020526040902060010154603c014211610b4157600080fd5b600e8054600180820183557fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0385169081179091556000818152600b60209081526040918290204294018490559354815190815293840192909252815190927f7670fa56b5f3a32210969b83b5ef933e24dddc2298ea9b78a371d6b775e2c47792908290030190a26103e281610c59565b6000805b600d5460ff82161015610c4e5782600160a060020a0316600d8260ff16815481101515610c2257fe5b600091825260209091200154600160a060020a03161415610c465760019150610c53565b600101610bf9565b600091505b50919050565b600e54604080514260208083019190915244828401526c01000000000000000000000000600160a060020a03861602606083015260748083018590528351808403909101815260949092019283905281516000936101219392909182918401908083835b60208310610cdc5780518252601f199092019160209182019101610cbd565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912092505050811515610d1257fe5b06905080602a141561063e576007805463ffff000019166301000000179055604080514281529051600160a060020a038516917fe53477ee8162d4ac52ca751b5fdaa3c2ba12467dabc8f626997222f97dee1e78919081900360200190a2505050565b81548183558181111561063e5760008381526020902061063e91810190830161036c91905b80821115610dae5760008155600101610d9a565b50905600a165627a7a72305820b4435285e1df881ee407a5b0870d3344b4decf233d89304b6071ee7b7aea72c80029"
}