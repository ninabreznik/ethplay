{
  "address": "0x530ceee3f32dbf1448cf697769d1d96616ac37ac",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RevolutionsAi",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-15\n*/\n\n//*******************************************************************************************************************//\n// RevolutionAI is redefined revolution for blockchain.                                                              //\n// https://twitter.com/revolutions_ai                                                                                //\n// https://www.facebook.com/ai.revolutions/                                                                          //\n// https://www.linkedin.com/company/revolutions-ai/                                                                  //\n//*******************************************************************************************************************//\n\npragma solidity ^0.5.0;\n/**\n * @title SafeMath\n * @dev   Unsigned math operations with safety checks that revert on error\n */\n \nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256){\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b,\"Calculation error\");\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256){\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0,\"Calculation error\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256){\n        require(b <= a,\"Calculation error\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256){\n        uint256 c = a + b;\n        require(c >= a,\"Calculation error\");\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256){\n        require(b != 0,\"Calculation error\");\n        return a % b;\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\n\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title RevolutionsAi\n * @dev   RevolitionAi contract following erc20 standard\n */\n\ncontract RevolutionsAi is IERC20\n{\n    using SafeMath for uint256;\n    string  public constant name               = \"RevolutionsAi\";\t\t\t                           // Token Name\n    string  public constant symbol             = \"REVI\";\t\t\t                                   // Token Symbol\n    uint256 public constant decimals           =  18;\n    uint256 public constant decimalsETH        =  10 ** 18;\n    uint256 public totalSupply_                =  1000000000 * decimalsETH;                            // Total supply of Token\n    uint256 public bountySupply                =  10000000 * decimalsETH;\t                            // 1 % of total supply\n    uint256 public teamSupply                  =  150000000 * decimalsETH;                             // 15 % of total supply\n    uint256 public HNI_Supply                  =  50000000 * decimalsETH;\t                            // 5 % of total supply\n    uint256 public marketingAndAdvisorSupply   =  100000000 * decimalsETH;                             // 10 % of total supply\n    address private bounty                     =  0x3959907Ca87bcF914E55114b317c3BBEc4e5678e;          // Bounty reserve address\n    address private team                       =  0x0b78E45Ef37769cA074a7A49d9B4d20f4d9c836F;          // Team reserve address\n    address private HNI                        =  0x5CA7c7d0a6ad3B3FE55c2a5cD62f388Aa806EF66;          // High Network Individual reserve address\n    address private marketingAndAdvisor        =  0xe22a63704f50226b9716A4d60d16c775D09fe21f;          // Team reserve address\n    address private owner;\n    bool public lockStatus;\n    \n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) public allowed;\n\n     constructor() public{\n        owner = msg.sender;\n        balances[bounty] = bountySupply;                                                // Total bounty supply\n        balances[team] = teamSupply;                                                    // Reserve for team\n        balances[HNI] = HNI_Supply;                                                     // Reserve for High Networth Individuals\n        balances[marketingAndAdvisor] = marketingAndAdvisorSupply;                      // Reserve for marketing advisor\n        balances[owner] = totalSupply_;                                                 // Owner tokens\n        emit Transfer(address(0), bounty, balances[bounty]);\n        emit Transfer(address(0), team, balances[team]);\n        emit Transfer(address(0), HNI, balances[HNI]);\n        emit Transfer(address(0), marketingAndAdvisor, balances[marketingAndAdvisor]);\n        emit Transfer(address(0), owner, balances[owner]);\n        totalSupply_ = totalSupply_.sub(bountySupply);\n        totalSupply_ = totalSupply_.sub(teamSupply);\n        totalSupply_ = totalSupply_.sub(HNI_Supply);\n        totalSupply_ = totalSupply_.sub(marketingAndAdvisorSupply);\n        totalSupply_ = balances[owner];\n        lockStatus = false;\n     }\n     \n     modifier onlyOwner(){\n        require(isOwner(),\"You are not the owner\");\n        _;\n      }\n     function isOwner() public view returns (bool) {\n        return msg.sender == owner;\n     }\n     function Owner() internal view returns (address){\n        return owner;\n     }\n     function burn(uint256 _value) public onlyOwner returns(bool){\n        require(owner != address(0), \"ERC20: burn from the zero address\");\n        totalSupply_ = totalSupply_.sub(_value);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        emit Transfer(msg.sender, address(0), _value);\n     }\n     function burnFrom(address _from, uint256 _value) public onlyOwner returns(bool){\n        totalSupply_ = totalSupply_.sub(_value);\n        balances[_from] = balances[_from].sub(_value);\n        emit Transfer(_from, address(0), _value);\n     }\n     function mint(uint256 _value) public onlyOwner returns(bool){\n        require(owner != address(0), \"ERC20: burn from the zero address\");\n        require(_value > 0,\"The amount should be greater than 0\");\n        balances[msg.sender] = balances[msg.sender].add(_value);\n        totalSupply_ = totalSupply_.add(_value);\n        emit Transfer(address(0), msg.sender, _value);\n        return true;\n     }\n     function lock(bool _status) public onlyOwner returns(bool){\n        lockStatus = _status;\n        return true;\n     }\n     function transferOwnership(address _newOwner) public onlyOwner returns(bool){\n        require(_newOwner != address(0),\"Not a correct address\");\n        owner = _newOwner;\n        return true;\n     }\n     function transfer(address _to, uint256 _value) external returns(bool){\n        require(!lockStatus, \"Transaction is not allowed\");\n        require(_to != address(0),\"Address is Incorrect\");\n        require(balances[msg.sender] >= _value,\"Token amount invalid\");\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n     }\n     function transferFrom(address _from, address _to, uint256 _value) external returns(bool){\n        require(!lockStatus, \"Transaction is not allowed\");\n        require(_from != address(0),\"Address is Incorrect\");\n        require(_to != address(0),\"Address is Incorrect\");\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0,\"Invalid Amount of Token\");\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n     }\n     function balanceOf(address _owner) external view returns(uint256){\n        return balances[_owner];\n     }\n     function totalSupply() external view returns(uint256){\n        return totalSupply_;\n     }\n     function approve(address _spender, uint256 _value) external returns(bool){\n        require(owner != address(0), \"Incorrect address\");\n        require(_spender != address(0),\"Incorrect Address\");\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n     }\n     function allowance(address _owner, address _spender) external view returns(uint256){\n        require(_owner != address(0) && _spender != address(0),\"Adddress is not correct\");\n        return allowed[_owner][_spender];\n     }\n     /**Get the current supply */\n     function getSupply() public view returns(\n     uint256 _totalsupply,\n     uint256 _bountySupply,\n     uint256 _teamSupply,\n     uint256 _HNI_Supply,\n     uint256 _marketingAndAdvisorSupply){\n          _totalsupply = totalSupply_;\n          _bountySupply = bountySupply;\n          _teamSupply = teamSupply;\n          _HNI_Supply = HNI_Supply;\n          _marketingAndAdvisorSupply = marketingAndAdvisorSupply;\n     }\n}",
  "bytecode": "60806040526b033b2e3c9fd0803ce80000006000556a084595161401484a0000006001556a7c13bc4b2c133c560000006002556a295be96e640669720000006003556a52b7d2dcc80cd2e400000060045560058054600160a060020a0319908116733959907ca87bcf914e55114b317c3bbec4e5678e17909155600680548216730b78e45ef37769ca074a7a49d9b4d20f4d9c836f179055600780548216735ca7c7d0a6ad3b3fe55c2a5cd62f388aa806ef661790556008805490911673e22a63704f50226b9716a4d60d16c775d09fe21f179055348015620000e157600080fd5b5060098054600160a060020a0319163317815560015460058054600160a060020a039081166000908152600a60209081526040808320959095556002546006548416835285832055600354600754841683528583205560045460085484168352858320558154955483168252848220959095559154168082528282205483519081529251909391926000805160206200163083398151915292908290030190a3600654600160a060020a03166000818152600a60209081526040808320548151908152905160008051602062001630833981519152929181900390910190a3600754600160a060020a03166000818152600a60209081526040808320548151908152905160008051602062001630833981519152929181900390910190a3600854600160a060020a03166000818152600a60209081526040808320548151908152905160008051602062001630833981519152929181900390910190a3600954600160a060020a03166000818152600a60209081526040808320548151908152905160008051602062001630833981519152929181900390910190a36001546000546200029c91640100000000620010fc6200033882021704565b6000819055600254620002be9190640100000000620010fc6200033882021704565b6000819055600354620002e09190640100000000620010fc6200033882021704565b6000819055600454620003029190640100000000620010fc6200033882021704565b600090815560098054600160a060020a0381168352600a602052604083205490925560a060020a60ff02199091169055620003b0565b600082821115620003aa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f43616c63756c6174696f6e206572726f72000000000000000000000000000000604482015290519081900360640190fd5b50900390565b61127080620003c06000396000f3fe608060405234801561001057600080fd5b5060043610610190576000357c0100000000000000000000000000000000000000000000000000000000900480634bd49614116100fb5780638f32d59b116100b4578063a9059cbb1161008e578063a9059cbb1461041c578063d12956c814610448578063dd62ed3e14610450578063f2fde38b1461047e57610190565b80638f32d59b146103ef57806395d89b41146103f7578063a0712d68146103ff57610190565b80634bd496141461032c5780635c658165146103345780636c9c2faf1461036257806370a082311461039557806379cc6790146103bb57806386852fd7146103e757610190565b80632cfac6ec1161014d5780632cfac6ec146102e7578063313ce567146102ef578063324536eb146102f75780633abcab25146102ff5780633e89340f1461030757806342966c681461030f57610190565b806306fdde0314610195578063095ea7b3146102125780630dd0a0421461025257806318160ddd1461027157806323b872dd1461028b57806327e235e3146102c1575b600080fd5b61019d6104a4565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101d75781810151838201526020016101bf565b50505050905090810190601f1680156102045780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61023e6004803603604081101561022857600080fd5b50600160a060020a0381351690602001356104db565b604080519115158252519081900360200190f35b61023e6004803603602081101561026857600080fd5b50351515610604565b610279610695565b60408051918252519081900360200190f35b61023e600480360360608110156102a157600080fd5b50600160a060020a0381358116916020810135909116906040013561069b565b610279600480360360208110156102d757600080fd5b5035600160a060020a0316610970565b610279610982565b610279610988565b61027961098d565b610279610993565b61023e61099f565b61023e6004803603602081101561032557600080fd5b50356109c0565b610279610acc565b6102796004803603604081101561034a57600080fd5b50600160a060020a0381358116916020013516610ad2565b61036a610aef565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b610279600480360360208110156103ab57600080fd5b5035600160a060020a0316610b09565b61023e600480360360408110156103d157600080fd5b50600160a060020a038135169060200135610b24565b610279610bf7565b61023e610bfd565b61019d610c0e565b61023e6004803603602081101561041557600080fd5b5035610c45565b61023e6004803603604081101561043257600080fd5b50600160a060020a038135169060200135610d97565b610279610f72565b6102796004803603604081101561046657600080fd5b50600160a060020a0381358116916020013516610f78565b61023e6004803603602081101561049457600080fd5b5035600160a060020a031661101c565b60408051808201909152600d81527f5265766f6c7574696f6e73416900000000000000000000000000000000000000602082015281565b600954600090600160a060020a03161515610540576040805160e560020a62461bcd02815260206004820152601160248201527f496e636f72726563742061646472657373000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a03831615156105a0576040805160e560020a62461bcd02815260206004820152601160248201527f496e636f72726563742041646472657373000000000000000000000000000000604482015290519081900360640190fd5b336000818152600b60209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a392915050565b600061060e610bfd565b1515610652576040805160e560020a62461bcd02815260206004820152601560248201526000805160206111c1833981519152604482015290519081900360640190fd5b5060098054821515740100000000000000000000000000000000000000000274ff0000000000000000000000000000000000000000199091161790556001919050565b60005490565b60095460009074010000000000000000000000000000000000000000900460ff1615610711576040805160e560020a62461bcd02815260206004820152601a60248201527f5472616e73616374696f6e206973206e6f7420616c6c6f776564000000000000604482015290519081900360640190fd5b600160a060020a0384161515610771576040805160e560020a62461bcd02815260206004820152601460248201527f4164647265737320697320496e636f7272656374000000000000000000000000604482015290519081900360640190fd5b600160a060020a03831615156107d1576040805160e560020a62461bcd02815260206004820152601460248201527f4164647265737320697320496e636f7272656374000000000000000000000000604482015290519081900360640190fd5b600160a060020a0384166000908152600a6020526040902054821180159061081c5750600160a060020a0384166000908152600b602090815260408083203384529091529020548211155b80156108285750600082115b151561087e576040805160e560020a62461bcd02815260206004820152601760248201527f496e76616c696420416d6f756e74206f6620546f6b656e000000000000000000604482015290519081900360640190fd5b600160a060020a0384166000908152600b602090815260408083203384529091529020546108b2908363ffffffff6110fc16565b600160a060020a0385166000908152600b60209081526040808320338452825280832093909355600a905220546108ef908363ffffffff6110fc16565b336000908152600a602052604080822092909255600160a060020a03851681522054610921908363ffffffff61115c16565b600160a060020a038085166000818152600a6020908152604091829020949094558051868152905191939288169260008051602061120483398151915292918290030190a35060019392505050565b600a6020526000908152604090205481565b60025481565b601281565b60005481565b670de0b6b3a764000081565b60095474010000000000000000000000000000000000000000900460ff1681565b60006109ca610bfd565b1515610a0e576040805160e560020a62461bcd02815260206004820152601560248201526000805160206111c1833981519152604482015290519081900360640190fd5b600954600160a060020a03161515610a5a5760405160e560020a62461bcd0281526004018080602001828103825260218152602001806112246021913960400191505060405180910390fd5b600054610a6d908363ffffffff6110fc16565b6000908155338152600a6020526040902054610a8f908363ffffffff6110fc16565b336000818152600a6020908152604080832094909455835186815293519193600080516020611204833981519152929081900390910190a3919050565b60045481565b600b60209081526000928352604080842090915290825290205481565b600054600154600254600354600454939492939192909190565b600160a060020a03166000908152600a602052604090205490565b6000610b2e610bfd565b1515610b72576040805160e560020a62461bcd02815260206004820152601560248201526000805160206111c1833981519152604482015290519081900360640190fd5b600054610b85908363ffffffff6110fc16565b6000908155600160a060020a0384168152600a6020526040902054610bb0908363ffffffff6110fc16565b600160a060020a0384166000818152600a6020908152604080832094909455835186815293519193600080516020611204833981519152929081900390910190a392915050565b60015481565b600954600160a060020a0316331490565b60408051808201909152600481527f5245564900000000000000000000000000000000000000000000000000000000602082015281565b6000610c4f610bfd565b1515610c93576040805160e560020a62461bcd02815260206004820152601560248201526000805160206111c1833981519152604482015290519081900360640190fd5b600954600160a060020a03161515610cdf5760405160e560020a62461bcd0281526004018080602001828103825260218152602001806112246021913960400191505060405180910390fd5b60008211610d215760405160e560020a62461bcd0281526004018080602001828103825260238152602001806111e16023913960400191505060405180910390fd5b336000908152600a6020526040902054610d41908363ffffffff61115c16565b336000908152600a602052604081209190915554610d65908363ffffffff61115c16565b6000908155604080518481529051339291600080516020611204833981519152919081900360200190a3506001919050565b60095460009074010000000000000000000000000000000000000000900460ff1615610e0d576040805160e560020a62461bcd02815260206004820152601a60248201527f5472616e73616374696f6e206973206e6f7420616c6c6f776564000000000000604482015290519081900360640190fd5b600160a060020a0383161515610e6d576040805160e560020a62461bcd02815260206004820152601460248201527f4164647265737320697320496e636f7272656374000000000000000000000000604482015290519081900360640190fd5b336000908152600a6020526040902054821115610ed4576040805160e560020a62461bcd02815260206004820152601460248201527f546f6b656e20616d6f756e7420696e76616c6964000000000000000000000000604482015290519081900360640190fd5b336000908152600a6020526040902054610ef4908363ffffffff6110fc16565b336000908152600a602052604080822092909255600160a060020a03851681522054610f26908363ffffffff61115c16565b600160a060020a0384166000818152600a60209081526040918290209390935580518581529051919233926000805160206112048339815191529281900390910190a350600192915050565b60035481565b6000600160a060020a03831615801590610f9a5750600160a060020a03821615155b1515610ff0576040805160e560020a62461bcd02815260206004820152601760248201527f4164646472657373206973206e6f7420636f7272656374000000000000000000604482015290519081900360640190fd5b50600160a060020a039182166000908152600b6020908152604080832093909416825291909152205490565b6000611026610bfd565b151561106a576040805160e560020a62461bcd02815260206004820152601560248201526000805160206111c1833981519152604482015290519081900360640190fd5b600160a060020a03821615156110ca576040805160e560020a62461bcd02815260206004820152601560248201527f4e6f74206120636f727265637420616464726573730000000000000000000000604482015290519081900360640190fd5b5060098054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b600082821115611156576040805160e560020a62461bcd02815260206004820152601160248201527f43616c63756c6174696f6e206572726f72000000000000000000000000000000604482015290519081900360640190fd5b50900390565b6000828201838110156111b9576040805160e560020a62461bcd02815260206004820152601160248201527f43616c63756c6174696f6e206572726f72000000000000000000000000000000604482015290519081900360640190fd5b939250505056fe596f7520617265206e6f7420746865206f776e6572000000000000000000000054686520616d6f756e742073686f756c642062652067726561746572207468616e2030ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef45524332303a206275726e2066726f6d20746865207a65726f2061646472657373a165627a7a723058209fa4dbb3721bdb7872eaf1cd75d29d174244f7ca3e518e39fadb394006e645b00029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
  "constructorArguments": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
}