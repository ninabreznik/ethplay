{
  "address": "0x65731ac534bc0d3fdf3f4bdd2b09cf05044920bc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MetadollarFund",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-07\n*/\n\npragma solidity ^0.4.25;\n\n/*\n* ==================================================*\n* METADOLLAR FUND ON ETH - (DOLF)                                           \n* ==================================================*\n* -> What?\n* Deployment of Proof of Weak Hands (P3D) contract on Ethereum Classic.\n* See ETH: 0xb3775fb83f7d12a36e0475abdd1fca35c091efbe for original.\n* -> What is different from original:\n* Ticker symbol: P3D -> DOLF\n* Name: PowH3D -> Metadollar Fund\n* Remove ability for administrator to change state (name, ticker symbol, masternode requirement)\n* Masternode requirment to  1000 tokens, to help stability.\n* Remove initialWhalePhase because no ambassadors or administrators. Pure autonomy.\n* Add contract creator as referral when there is not one. Earned fees go for website maintenance and marketing.\n* Buy and sell fee is increased to 50%. It allows investors to choose if focus on tokens or dividends\n* \n* -> Who worked on this project?\n* - Ozmode Group\n* -> Auditor: Callisto.network\n*/\ncontract MetadollarFund {\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n    // only people with tokens\n    modifier onlyBagholders() {\n        require(myTokens() > 0);\n        _;\n    }\n    \n    // only people with profits\n    modifier onlyStronghands() {\n        require(myDividends(true) > 0);\n        _;\n    }\n    \n    // There are no admins set in constructor. This always reverts.\n    modifier onlyAdministrator(){\n        address _customerAddress = msg.sender;\n        require(administrators[keccak256(_customerAddress)]);\n        _;\n    }\n    \n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy,\n        address indexed referredByHome\n    );\n    \n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned\n    );\n    \n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n    \n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n    \n    // ERC20\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n    \n    \n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n    string public name = \"Metadollar Fund\";\n    string public symbol = \"DOLF\";\n    uint8 constant public decimals = 18;\n    uint8 constant internal dividendFee_ = 50;\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n    uint256 constant internal magnitude = 2**64;\n    \n    // masternodes for all.\n    uint256 public stakingRequirement = 1000e18;\n    \n    // ambassador program\n    mapping(address => bool) internal ambassadors_;\n    uint256 constant internal ambassadorMaxPurchase_ = 1 ether;\n    uint256 constant internal ambassadorQuota_ = 20 ether;\n    \n    \n    \n   /*================================\n    =            DATASETS            =\n    ================================*/\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n    uint256 internal tokenSupply_ = 0;\n    uint256 internal profitPerShare_;\n    \n    // administrator list, always empty.\n    mapping(bytes32 => bool) public administrators;\n    \n    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n    bool public onlyAmbassadors = false;\n    \n\n\n    /*=======================================\n    =            PUBLIC FUNCTIONS            =\n    =======================================*/\n    /*\n    * -- APPLICATION ENTRY POINTS --  \n    */\n    function MetadollarFund()\n        public\n    {\n\n    }\n    \n     \n    /**\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n     */\n    function buy(address _referredBy, address _referredByHome)\n        public\n        payable\n        returns(uint256)\n    {\n        purchaseTokens(msg.value, _referredBy, _referredByHome);\n    }\n    \n    /**\n     * Fallback function to handle ethereum that was send straight to the contract\n     * Unfortunately we cannot use a referral address this way.\n     */\n    function()\n        payable\n        public\n    {\n        purchaseTokens(msg.value, 0x0, 0x0);\n    }\n    \n    /**\n     * Converts all of caller's dividends to tokens.\n     */\n    function reinvest()\n        onlyStronghands()\n        public\n    {\n        // fetch dividends\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n        \n        // pay out the dividends virtually\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        \n        // retrieve ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        \n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\n        uint256 _tokens = purchaseTokens(_dividends, 0x0, 0x0);\n        \n        // fire event\n        onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n    \n    /**\n     * Alias of sell() and withdraw().\n     */\n    function exit()\n        public\n    {\n        // get token count for caller & sell them all\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if(_tokens > 0) sell(_tokens);\n        \n        // lambo delivery service\n        withdraw();\n    }\n\n    /**\n     * Withdraws all of the callers earnings.\n     */\n    function withdraw()\n        onlyStronghands()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n        \n        // update dividend tracker\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        \n        // add ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        \n        // lambo delivery service\n        _customerAddress.transfer(_dividends);\n        \n        // fire event\n        onWithdraw(_customerAddress, _dividends);\n    }\n    \n    /**\n     * Liquifies tokens to ethereum.\n     */\n    function sell(uint256 _amountOfTokens)\n        onlyBagholders()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        // hackers BTFO\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        \n        // burn the sold tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n        \n        // update dividends tracker\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;       \n        \n        // dividing by zero is a bad idea\n        if (tokenSupply_ > 0) {\n            // update the amount of dividends per token\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n        \n        // fire event\n        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n    }\n    \n    \n    /**\n     * Transfer tokens from the caller to a new holder.\n     * Remember, there's a 10% fee here as well.\n     */\n    function transfer(address _toAddress, uint256 _amountOfTokens)\n        onlyBagholders()\n        public\n        returns(bool)\n    {\n        // setup\n        address _customerAddress = msg.sender;\n        \n        // make sure we have the requested tokens\n        // also disables transfers until ambassador phase is over\n        // ( we dont want whale premines )\n        require(!onlyAmbassadors && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        \n        // withdraw all outstanding dividends first\n        if(myDividends(true) > 0) withdraw();\n        \n        // liquify 10% of the tokens that are transfered\n        // these are dispersed to shareholders\n        uint256 _tokenFee = SafeMath.div(_amountOfTokens, dividendFee_);\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\n  \n        // burn the fee tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n\n        // exchange tokens\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n        \n        // update dividend trackers\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n        \n        // disperse dividends among holders\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        \n        // fire event\n        Transfer(_customerAddress, _toAddress, _taxedTokens);\n        \n        // ERC20\n        return true;\n       \n    }\n    \n    // These do nothing and are only left in for ABI comaptibility reasons.\n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n    /**\n     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\n     */\n    function disableInitialStage()\n        onlyAdministrator()\n        public\n    {\n        return;\n    }\n    \n    /**\n     * In case one of us dies, we need to replace ourselves.\n     */\n    function setAdministrator(bytes32 _identifier, bool _status)\n        onlyAdministrator()\n        public\n    {\n        return;\n    }\n    \n    /**\n     * Precautionary measures in case we need to adjust the masternode rate.\n     */\n    function setStakingRequirement(uint256 _amountOfTokens)\n        onlyAdministrator()\n        public\n    {\n        return;\n    }\n    \n    /**\n     * If we want to rebrand, we can.\n     */\n    function setName(string _name)\n        onlyAdministrator()\n        public\n    {\n        return;\n    }\n    \n    /**\n     * If we want to rebrand, we can.\n     */\n    function setSymbol(string _symbol)\n        onlyAdministrator()\n        public\n    {\n        return;\n    }\n\n    \n    /*----------  HELPERS AND CALCULATORS  ----------*/\n    /**\n     * Method to view the current Ethereum stored in the contract\n     * Example: totalEthereumBalance()\n     */\n    function totalEthereumBalance()\n        public\n        view\n        returns(uint)\n    {\n        return this.balance;\n    }\n    \n    /**\n     * Retrieve the total token supply.\n     */\n    function totalSupply()\n        public\n        view\n        returns(uint256)\n    {\n        return tokenSupply_;\n    }\n    \n    /**\n     * Retrieve the tokens owned by the caller.\n     */\n    function myTokens()\n        public\n        view\n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n    \n    /**\n     * Retrieve the dividends owned by the caller.\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     * But in the internal calculations, we want them separate. \n     */ \n    function myDividends(bool _includeReferralBonus) \n        public \n        view \n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n    \n    /**\n     * Retrieve the token balance of any single address.\n     */\n    function balanceOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n    \n    /**\n     * Retrieve the dividend balance of any single address.\n     */\n    function dividendsOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n    \n    /**\n     * Return the buy price of 1 individual token.\n     */\n    function sellPrice() \n        public \n        view \n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n            return _taxedEthereum;\n        }\n    }\n    \n    /**\n     * Return the sell price of 1 individual token.\n     */\n    function buyPrice() \n        public \n        view \n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n            return _taxedEthereum;\n        }\n    }\n    \n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n     */\n    function calculateTokensReceived(uint256 _ethereumToSpend) \n        public \n        view \n        returns(uint256)\n    {\n        uint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        \n        return _amountOfTokens;\n    }\n    \n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n     */\n    function calculateEthereumReceived(uint256 _tokensToSell) \n        public \n        view \n        returns(uint256)\n    {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _taxedEthereum;\n    }\n    \n    \n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy, address _referredByHome)\n        internal\n        returns(uint256)\n    {\n        // data setup\n        address _customerAddress = msg.sender;\n        uint256 _undividedDividends = SafeMath.div(_incomingEthereum, dividendFee_);\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n \n        // no point in continuing execution if OP is a poorfag russian hacker\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n        // (or hackers)\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n        \n        // is the user referred by a masternode?\n        if(\n            // is this a referred purchase?\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n            // no cheating!\n            _referredBy != _customerAddress &&\n            \n            // does the referrer have at least X whole tokens?\n            // i.e is the referrer a godly chad masternode\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ){\n            // wealth redistribution\n            \n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } else {\n            // no ref purchase\n            // add the referral bonus back to the global dividends cake\n            _referredByHome = 0xFE84188D7401D65130Fc5047B3815B3Ca9eee302;\n            referralBalance_[_referredByHome] = SafeMath.add(referralBalance_[_referredByHome], _referralBonus);\n        }\n        \n        // we can't give people infinite ethereum\n        if(tokenSupply_ > 0){\n            \n            // add tokens to the pool\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n \n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n            \n            // calculate the amount of tokens the customer receives over his purchase \n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n        \n        } else {\n            // add tokens to the pool\n            tokenSupply_ = _amountOfTokens;\n        }\n        \n        // update circulating supply & the ledger address for the customer\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        \n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n        //really i know you think you do but you don't\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n        \n        // fire event\n        onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, _referredByHome);\n        \n        return _amountOfTokens;\n    }\n\n    /**\n     * Calculate Token price based on an amount of incoming ethereum\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function ethereumToTokens_(uint256 _ethereum)\n        internal\n        view\n        returns(uint256)\n    {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived = \n         (\n            (\n                // underflow attempts BTFO\n                SafeMath.sub(\n                    (sqrt\n                        (\n                            (_tokenPriceInitial**2)\n                            +\n                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n                            +\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n                            +\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n                        )\n                    ), _tokenPriceInitial\n                )\n            )/(tokenPriceIncremental_)\n        )-(tokenSupply_)\n        ;\n  \n        return _tokensReceived;\n    }\n    \n    /**\n     * Calculate token sell value.\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n     function tokensToEthereum_(uint256 _tokens)\n        internal\n        view\n        returns(uint256)\n    {\n\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n        (\n            // underflow attempts BTFO\n            SafeMath.sub(\n                (\n                    (\n                        (\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n                        )-tokenPriceIncremental_\n                    )*(tokens_ - 1e18)\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n            )\n        /1e18);\n        return _etherReceived;\n    }\n    \n    \n    //This is where all your gas goes, sorry\n    //Not sorry, you probably only paid 1 gwei\n    function sqrt(uint x) internal pure returns (uint y) {\n        uint z = (x + 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "bytecode": "60c0604052600f60808190527f4d657461646f6c6c61722046756e64000000000000000000000000000000000060a0908152620000409160009190620000b8565b506040805180820190915260048082527f444f4c460000000000000000000000000000000000000000000000000000000060209092019182526200008791600191620000b8565b50683635c9adc5dea000006002556000600855600b805460ff19169055348015620000b157600080fd5b506200015d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000fb57805160ff19168380011785556200012b565b828001600101855582156200012b579182015b828111156200012b5782518255916020019190600101906200010e565b50620001399291506200013d565b5090565b6200015a91905b8082111562000139576000815560010162000144565b90565b6111b5806200016d6000396000f30060806040526004361061015d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b811461016c57806306fdde031461019f57806310d0ffdd1461022957806318160ddd14610241578063226093731461025657806327defa1f1461026e578063313ce56714610297578063392efb52146102c25780633ccfd60b146102da5780634b750334146102f157806356d399e814610306578063688abbf71461031b5780636b2f46321461033557806370a082311461034a5780638328b6101461036b5780638620410b1461038357806389135ae914610398578063949e8acd146103b557806395d89b41146103ca578063a8e04f34146103df578063a9059cbb146103f4578063ad7fadc514610418578063b84c824614610432578063c47f002714610432578063e4849b321461048b578063e9fad8ee146104a3578063fdb5a03e146104b8575b610169346000806104cd565b50005b34801561017857600080fd5b5061018d600160a060020a03600435166107a4565b60408051918252519081900360200190f35b3480156101ab57600080fd5b506101b46107df565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ee5781810151838201526020016101d6565b50505050905090810190601f16801561021b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023557600080fd5b5061018d60043561086d565b34801561024d57600080fd5b5061018d61089d565b34801561026257600080fd5b5061018d6004356108a3565b34801561027a57600080fd5b506102836108dc565b604080519115158252519081900360200190f35b3480156102a357600080fd5b506102ac6108e5565b6040805160ff9092168252519081900360200190f35b3480156102ce57600080fd5b506102836004356108ea565b3480156102e657600080fd5b506102ef6108ff565b005b3480156102fd57600080fd5b5061018d6109d2565b34801561031257600080fd5b5061018d610a26565b34801561032757600080fd5b5061018d6004351515610a2c565b34801561034157600080fd5b5061018d610a6f565b34801561035657600080fd5b5061018d600160a060020a0360043516610a74565b34801561037757600080fd5b506102ef600435610a8f565b34801561038f57600080fd5b5061018d610ad4565b3480156103a457600080fd5b506102ef6004356024351515610b1c565b3480156103c157600080fd5b5061018d610b62565b3480156103d657600080fd5b506101b4610b74565b3480156103eb57600080fd5b506102ef610bce565b34801561040057600080fd5b50610283600160a060020a0360043516602435610c12565b61018d600160a060020a0360043581169060243516610dcc565b34801561043e57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102ef943694929360249392840191908190840183828082843750949750610a8f9650505050505050565b34801561049757600080fd5b506102ef600435610de0565b3480156104af57600080fd5b506102ef610f31565b3480156104c457600080fd5b506102ef610f5a565b600033818080808080806104e28c6032611011565b96506104ef876003611011565b95506104fb8787611028565b94506105078c88611028565b93506105128461103a565b9250680100000000000000008502915060008311801561053c575060085461053a84826110d2565b115b151561054757600080fd5b600160a060020a038b1615801590610571575087600160a060020a03168b600160a060020a031614155b80156105975750600254600160a060020a038c1660009081526004602052604090205410155b156105dd57600160a060020a038b166000908152600560205260409020546105bf90876110d2565b600160a060020a038c16600090815260056020526040902055610645565b73fe84188d7401d65130fc5047b3815b3ca9eee302600081905260056020527f209d098e00c87a888954997c15d05a4c575eb181655b2ef98aeaa8317441e55b54909a5061062b90876110d2565b600160a060020a038b166000908152600560205260409020555b600060085411156106a95761065c600854846110d2565b600881905568010000000000000000860281151561067657fe5b6009805492909104909101905560085468010000000000000000860281151561069b57fe5b0483028203820391506106af565b60088390555b600160a060020a0388166000908152600460205260409020546106d290846110d2565b600460008a600160a060020a0316600160a060020a031681526020019081526020016000208190555081836009540203905080600660008a600160a060020a0316600160a060020a031681526020019081526020016000206000828254019250508190555089600160a060020a03168b600160a060020a031689600160a060020a03167fa9a01a5e012a25c4dd24d40d803a226ab62891acbe78d95ba55315e5a16614ac8f87604051808381526020018281526020019250505060405180910390a450909a9950505050505050505050565b600160a060020a0316600090815260066020908152604080832054600490925290912054600954680100000000000000009102919091030490565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108655780601f1061083a57610100808354040283529160200191610865565b820191906000526020600020905b81548152906001019060200180831161084857829003601f168201915b505050505081565b600080808061087d856032611011565b92506108898584611028565b91506108948261103a565b95945050505050565b60085490565b60008060008060085485111515156108ba57600080fd5b6108c3856110e8565b92506108d0836032611011565b91506108948383611028565b600b5460ff1681565b601281565b600a6020526000908152604090205460ff1681565b600080600061090e6001610a2c565b1161091857600080fd5b3391506109256000610a2c565b600160a060020a038316600081815260066020908152604080832080546801000000000000000087020190556005909152808220805490839055905193019350909183156108fc0291849190818181858888f1935050505015801561098e573d6000803e3d6000fd5b50604080518281529051600160a060020a038416917fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc919081900360200190a25050565b600080600080600854600014156109f0576414f46b04009350610a20565b610a01670de0b6b3a76400006110e8565b9250610a0e836032611011565b9150610a1a8383611028565b90508093505b50505090565b60025481565b60003382610a4257610a3d816107a4565b610a66565b600160a060020a038116600090815260056020526040902054610a64826107a4565b015b91505b50919050565b303190565b600160a060020a031660009081526004602052604090205490565b604080516c010000000000000000000000003390810282528251918290036014019091206000908152600a602052919091205460ff161515610ad057600080fd5b5050565b60008060008060085460001415610af25764199c82cc009350610a20565b610b03670de0b6b3a76400006110e8565b9250610b10836032611011565b9150610a1a83836110d2565b604080516c010000000000000000000000003390810282528251918290036014019091206000908152600a602052919091205460ff161515610b5d57600080fd5b505050565b600033610b6e81610a74565b91505090565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108655780601f1061083a57610100808354040283529160200191610865565b604080516c010000000000000000000000003390810282528251918290036014019091206000908152600a602052919091205460ff161515610c0f57600080fd5b50565b600080600080600080610c23610b62565b11610c2d57600080fd5b600b5433945060ff16158015610c5b5750600160a060020a0384166000908152600460205260409020548611155b1515610c6657600080fd5b6000610c726001610a2c565b1115610c8057610c806108ff565b610c8b866032611011565b9250610c978684611028565b9150610ca2836110e8565b9050610cb060085484611028565b600855600160a060020a038416600090815260046020526040902054610cd69087611028565b600160a060020a038086166000908152600460205260408082209390935590891681522054610d0590836110d2565b600160a060020a0388811660008181526004602090815260408083209590955560098054948a16835260069091528482208054948c02909403909355825491815292909220805492850290920190915554600854610d799190680100000000000000008402811515610d7357fe5b046110d2565b600955604080518381529051600160a060020a03808a1692908716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35060019695505050505050565b6000610dd93484846104cd565b5092915050565b6000806000806000806000610df3610b62565b11610dfd57600080fd5b33600081815260046020526040902054909650871115610e1c57600080fd5b869450610e28856110e8565b9350610e35846032611011565b9250610e418484611028565b9150610e4f60085486611028565b600855600160a060020a038616600090815260046020526040902054610e759086611028565b600160a060020a03871660009081526004602090815260408083209390935560095460069091529181208054928802680100000000000000008602019283900390556008549192501015610ee557610ee1600954600854680100000000000000008602811515610d7357fe5b6009555b60408051868152602081018490528151600160a060020a038916927fc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a31139928290030190a250505050505050565b3360008181526004602052604081205490811115610f5257610f5281610de0565b610ad06108ff565b600080600080610f6a6001610a2c565b11610f7457600080fd5b610f7e6000610a2c565b33600081815260066020908152604080832080546801000000000000000087020190556005909152812080549082905590920194509250610fc1908490806104cd565b905081600160a060020a03167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588483604051808381526020018281526020019250505060405180910390a2505050565b600080828481151561101f57fe5b04949350505050565b60008282111561103457fe5b50900390565b6008546000906c01431e0fae6d7217caa00000009082906402540be4006110bf6110b9730380d4bd8a8678c1bb542c80deb4800000000000880268056bc75e2d631000006002860a02017005e0a1fd2712875988becaad0000000000850201780197d4df19d605767337e9f14d3eec8920e40000000000000001611154565b85611028565b8115156110c857fe5b0403949350505050565b6000828201838110156110e157fe5b9392505050565b600854600090670de0b6b3a76400008381019181019083906111416414f46b04008285046402540be40002018702600283670de0b6b3a763ffff1982890a8b900301046402540be4000281151561113b57fe5b04611028565b81151561114a57fe5b0495945050505050565b80600260018201045b81811015610a6957809150600281828581151561117657fe5b040181151561118157fe5b04905061115d5600a165627a7a7230582079819aeeeb88d93f96d1b05a585be47b008eb5ed499d0ed9586840f555b3b6950029"
}