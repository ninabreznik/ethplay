{
  "address": "0xa098243bf19b7e5d75e0e4afaad61939606ccb21",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OpportyMonthHold",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-05\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title SimpleToken\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n * Note they can later distribute these tokens as they wish using `transfer` and other\n * `StandardToken` functions.\n */\ncontract OpportyToken is StandardToken {\n\n  string public constant name = \"OpportyToken\";\n  string public constant symbol = \"OPP\";\n  uint8 public constant decimals = 18;\n\n  uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\n\n  /**\n   * @dev Contructor that gives msg.sender all of existing tokens.\n   */\n  function OpportyToken() public {\n    totalSupply_ = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n    Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\ncontract OpportyMonthHold is Pausable {\n  using SafeMath for uint256;\n  OpportyToken public token;\n\n  uint public holdPeriod;\n  address public multisig;\n\n  // start and end timestamps where investments are allowed\n  uint public startDate;\n  uint public endDate;\n  uint public endSaleDate;\n\n  uint private price;\n\n  uint public minimalContribution;\n\n  // total ETH collected\n  uint public ethRaised;\n\n  enum SaleState { NEW, SALE, ENDED }\n  SaleState public state;\n\n  mapping (uint => address) private assetOwners;\n  mapping (address => uint) private assetOwnersIndex;\n  uint public assetOwnersIndexes;\n\n  struct Bonus {\n    uint minAmount;\n    uint maxAmount;\n    uint8 bonus;\n  }\n\n  Bonus[]  bonuses;\n\n  struct Holder {\n    bool isActive;\n    uint tokens;\n    uint holdPeriodTimestamp;\n    bool withdrawed;\n  }\n\n  mapping(address => Holder) public holderList;\n  mapping(uint => address) private holderIndexes;\n  uint private holderIndex;\n\n\n  event TokensTransfered(address contributor , uint amount);\n  event Hold(address sender, address contributor, uint amount, uint8 holdPeriod);\n  event ManualChangeStartDate(uint beforeDate, uint afterDate);\n  event ManualChangeEndDate(uint beforeDate, uint afterDate);\n  event ChangeMinAmount(uint oldMinAmount, uint minAmount);\n  event BonusChanged(uint minAmount, uint maxAmount, uint8 newBonus);\n  event HolderAdded(address addr, uint contribution, uint tokens, uint holdPeriodTimestamp);\n  event FundsTransferredToMultisig(address multisig, uint value);\n  event SaleNew();\n  event SaleStarted();\n  event SaleEnded();\n  event ManualPriceChange(uint beforePrice, uint afterPrice);\n  event HoldChanged(address holder, uint tokens, uint timest);\n  event TokenChanged(address newAddress);\n\n  modifier onlyAssetsOwners() {\n    require(assetOwnersIndex[msg.sender] > 0 || msg.sender == owner);\n    _;\n  }\n\n  function OpportyMonthHold(address walletAddress, uint start, uint end, uint endSale) public {\n    holdPeriod = 30 days;\n    state = SaleState.NEW;\n\n    startDate = start;\n    endDate   = end;\n    endSaleDate = endSale;\n    price = 0.0002 * 1 ether;\n    multisig = walletAddress;\n    minimalContribution = 0.3 * 1 ether;\n\n    bonuses.push(Bonus({minAmount: 0, maxAmount: 50, bonus: 25 }));\n    bonuses.push(Bonus({minAmount: 50, maxAmount: 100, bonus: 30 }));\n    bonuses.push(Bonus({minAmount: 100, maxAmount: 250, bonus: 35 }));\n    bonuses.push(Bonus({minAmount: 250, maxAmount: 500, bonus: 40 }));\n    bonuses.push(Bonus({minAmount: 500, maxAmount: 1000, bonus: 45 }));\n    bonuses.push(Bonus({minAmount: 1000, maxAmount: 5000, bonus: 55 }));\n    bonuses.push(Bonus({minAmount: 5000, maxAmount: 99999999, bonus: 70 }));\n  }\n\n  function changeBonus(uint minAmount, uint maxAmount, uint8 newBonus) public {\n    bool find = false;\n    for (uint i = 0; i < bonuses.length; ++i) {\n      if (bonuses[i].minAmount == minAmount && bonuses[i].maxAmount == maxAmount ) {\n        bonuses[i].bonus = newBonus;\n        find = true;\n        break;\n      }\n    }\n    if (!find) {\n      bonuses.push(Bonus({minAmount:minAmount, maxAmount: maxAmount, bonus:newBonus}));\n    }\n    BonusChanged(minAmount, maxAmount, newBonus);\n  }\n\n  function getBonus(uint am) public view returns(uint8) {\n    uint8 bon = 0;\n    am /= 10 ** 18;\n    \n    for (uint i = 0; i < bonuses.length; ++i) {\n        if (am >= bonuses[i].minAmount && am<bonuses[i].maxAmount) \n          bon = bonuses[i].bonus;\n    }\n\n    return bon;\n  }\n\n  function() public payable {\n    require(state == SaleState.SALE);\n    require(msg.value >= minimalContribution);\n    require(now >= startDate);\n\n    if (now > endDate) {\n      state = SaleState.ENDED;\n      msg.sender.transfer(msg.value);\n      SaleEnded();\n      return ;\n    }\n\n    uint tokenAmount = msg.value.div(price);\n    tokenAmount += tokenAmount.mul(getBonus(msg.value)).div(100);\n    tokenAmount *= 10 ** 18;\n\n    uint holdTimestamp = endSaleDate.add(holdPeriod);\n    addHolder(msg.sender, tokenAmount, holdTimestamp);\n    HolderAdded(msg.sender, msg.value, tokenAmount, holdTimestamp);\n    \n    forwardFunds();\n    \n  }\n\n  function addHolder(address holder, uint tokens, uint timest) internal {\n    if (holderList[holder].isActive == false) {\n        holderList[holder].isActive = true;\n        holderList[holder].tokens = tokens;\n        holderList[holder].holdPeriodTimestamp = timest;\n        holderIndexes[holderIndex] = holder;\n        holderIndex++;\n    } else {\n        holderList[holder].tokens += tokens;\n        holderList[holder].holdPeriodTimestamp = timest;\n    }\n  }\n\n  function changeHold(address holder, uint tokens, uint timest) onlyAssetsOwners public {\n      if (holderList[holder].isActive == true) {\n        holderList[holder].tokens = tokens;\n        holderList[holder].holdPeriodTimestamp = timest;\n        HoldChanged(holder, tokens, timest);\n      }\n  }\n\n  function forwardFunds() internal {\n    ethRaised += msg.value;\n    multisig.transfer(msg.value);\n    FundsTransferredToMultisig(multisig, msg.value);\n  }\n\n  function newPresale() public onlyOwner {\n    state = SaleState.NEW;\n    SaleNew();\n  }\n\n  function startPresale() public onlyOwner {\n    state = SaleState.SALE;\n    SaleStarted();\n  }\n\n  function endPresale() public onlyOwner {\n    state = SaleState.ENDED;\n    SaleEnded();\n  }\n\n  function addAssetsOwner(address _owner) public onlyOwner {\n    assetOwnersIndexes++;\n    assetOwners[assetOwnersIndexes] = _owner;\n    assetOwnersIndex[_owner] = assetOwnersIndexes;\n  }\n\n  function removeAssetsOwner(address _owner) public onlyOwner {\n    uint index = assetOwnersIndex[_owner];\n    delete assetOwnersIndex[_owner];\n    delete assetOwners[index];\n    assetOwnersIndexes--;\n  }\n\n  function getAssetsOwners(uint _index) onlyOwner public constant returns (address) {\n    return assetOwners[_index];\n  }\n\n  function getBalance() public constant returns (uint) {\n    return token.balanceOf(this);\n  }\n\n  function returnTokens(uint nTokens) public onlyOwner returns (bool) {\n    require(nTokens <= getBalance());\n    token.transfer(msg.sender, nTokens);\n    TokensTransfered(msg.sender, nTokens);\n    return true;\n  }\n\n  function unlockTokens() public returns (bool) {\n    require(holderList[msg.sender].isActive);\n    require(!holderList[msg.sender].withdrawed);\n    require(now >= holderList[msg.sender].holdPeriodTimestamp);\n\n    token.transfer(msg.sender, holderList[msg.sender].tokens); \n    holderList[msg.sender].withdrawed = true;\n    TokensTransfered(msg.sender, holderList[msg.sender].tokens);\n    return true;\n  }\n\n  function setStartDate(uint date) public onlyOwner {\n    uint oldStartDate = startDate;\n    startDate = date;\n    ManualChangeStartDate(oldStartDate, date);\n  }\n\n  function setEndSaleDate(uint date) public onlyOwner {\n    uint oldEndDate = endSaleDate;\n    endSaleDate = date;\n    ManualChangeEndDate(oldEndDate, date);\n  }\n\n  function setEndDate(uint date) public onlyOwner {\n    uint oldEndDate = endDate;\n    endDate = date;\n    ManualChangeEndDate(oldEndDate, date);\n  }\n  \n  function setPrice(uint newPrice) public onlyOwner {\n    uint oldPrice = price;\n    price = newPrice;\n    ManualPriceChange(oldPrice, newPrice);\n  }\n\n  function setMinimalContribution(uint minimumAmount) public onlyOwner {\n    uint oldMinAmount = minimalContribution;\n    minimalContribution = minimumAmount;\n    ChangeMinAmount(oldMinAmount, minimalContribution);\n  }\n\n  function batchChangeHoldPeriod(uint holdedPeriod) public onlyAssetsOwners {\n    for (uint i = 0; i < holderIndex; ++i) {\n        holderList[holderIndexes[i]].holdPeriodTimestamp = holdedPeriod;\n        HoldChanged(holderIndexes[i], holderList[holderIndexes[i]].tokens, holdedPeriod);\n    }\n  }\n\n  function setToken(address newToken) public onlyOwner {\n    token = OpportyToken(newToken);\n    TokenChanged(token);\n  }\n\n  function getTokenAmount() public view returns (uint) {\n    uint tokens = 0;\n    for (uint i = 0; i < holderIndex; ++i) {\n        if (!holderList[holderIndexes[i]].withdrawed) {\n          tokens += holderList[holderIndexes[i]].tokens;\n        }\n    }\n    return tokens;\n  }\n\n  function getEthRaised() constant external returns (uint) {\n    return ethRaised;\n  }\n\n}",
  "bytecode": "60606040526000805460a060020a60ff021916905534156200002057600080fd5b60405160808062001bdd8339810160405280805191906020018051919060200180519190602001805160008054600160a060020a03191633600160a060020a031617815562278d00600255600a80549294509092509060ff1916600183021790555060048390556005829055600681905565b5e620f4800060075560038054600160a060020a031916600160a060020a038616179055670429d069189e0000600855600e805460018101620000d68382620003ed565b9160005260206000209060030201600060606040519081016040908152600082526032602083015260199082015291905081518155602082015181600101556040820151600291909101805460ff191660ff9092169190911790555050600e805460018101620001478382620003ed565b91600052602060002090600302016000606060405190810160409081526032825260646020830152601e9082015291905081518155602082015181600101556040820151600291909101805460ff191660ff9092169190911790555050600e805460018101620001b88382620003ed565b91600052602060002090600302016000606060405190810160409081526064825260fa602083015260239082015291905081518155602082015181600101556040820151600291909101805460ff191660ff9092169190911790555050600e805460018101620002298382620003ed565b916000526020600020906003020160006060604051908101604090815260fa82526101f4602083015260289082015291905081518155602082015181600101556040820151600291909101805460ff191660ff9092169190911790555050600e8054600181016200029b8382620003ed565b91600052602060002090600302016000606060405190810160409081526101f482526103e86020830152602d9082015291905081518155602082015181600101556040820151600291909101805460ff191660ff9092169190911790555050600e8054600181016200030e8382620003ed565b91600052602060002090600302016000606060405190810160409081526103e88252611388602083015260379082015291905081518155602082015181600101556040820151600291909101805460ff191660ff9092169190911790555050600e805460018101620003818382620003ed565b916000526020600020906003020160006060604051908101604090815261138882526305f5e0ff602083015260469082015291905081518155602082015181600101556040820151600291909101805460ff191660ff9092169190911790555062000457945050505050565b8154818355818115116200041c576003028160030283600052602060002091820191016200041c919062000421565b505050565b6200045491905b8082111562000450576000808255600182015560028101805460ff1916905560030162000428565b5090565b90565b61177680620004676000396000f3006060604052600436106101b35763ffffffff60e060020a60003504166304c98b2b811461034857806305a955af1461035d5780630b97bc86146103aa57806312065fe0146103cf578063120dae83146103e2578063144fa6d7146103f85780632644f9f81461041757806329dacb60146104495780633784f0001461045c5780633ae1786f146104725780633f4ba83a1461049c5780634783c35b146104af5780634aa66b28146104c25780635499c84e146104ee57806355d4956f1461050d5780635c975abb1461052357806368b2cee01461053657806375f91ec81461055557806382d95df5146105685780638456cb591461057e5780638da5cb5b1461059157806391b7f5ed146105a45780639cb04d18146105ba578063a0c86718146105cd578063a43be57b146105e0578063c19d93fb146105f3578063c24a0f8b1461062a578063c4a4f2651461063d578063d7d8804314610650578063e624b02a14610663578063ea337cdb14610688578063f2fde38b1461069e578063f5967a2f146106bd578063f968f493146106d0578063fb4ce0a9146106e3578063fc0c546a14610702578063fddf0fc014610715575b6000806001600a5460ff1660028111156101c957fe5b146101d357600080fd5b6008543410156101e257600080fd5b6004544210156101f157600080fd5b60055442111561026d57600a8054600260ff19909116179055600160a060020a0333163480156108fc0290604051600060405180830381858888f19350505050151561023c57600080fd5b7f0bd8a3eb532e5fbcd3f5b00335f0fb42fdc11969e9af0fab7c9e71a36ae0d31a60405160405180910390a1610344565b60075461028190349063ffffffff61072816565b91506102b060646102a461029434610744565b859060ff1663ffffffff6107e016565b9063ffffffff61072816565b60025460065493909101670de0b6b3a764000002926102ce91610812565b90506102db338383610821565b7f6d03d3eccb406ffecd8a5952eb033d8b38bfb1760b5d42a2fb99c96669155ec3333484846040518085600160a060020a0316600160a060020a0316815260200184815260200183815260200182815260200194505050505060405180910390a16103446108dd565b5050005b341561035357600080fd5b61035b61096e565b005b341561036857600080fd5b61037c600160a060020a03600435166109c4565b6040519315158452602084019290925260408084019190915290151560608301526080909101905180910390f35b34156103b557600080fd5b6103bd6109f0565b60405190815260200160405180910390f35b34156103da57600080fd5b6103bd6109f6565b34156103ed57600080fd5b61035b600435610a71565b341561040357600080fd5b61035b600160a060020a0360043516610ad4565b341561042257600080fd5b61042d600435610b5e565b604051600160a060020a03909116815260200160405180910390f35b341561045457600080fd5b6103bd610b96565b341561046757600080fd5b61035b600435610b9c565b341561047d57600080fd5b610488600435610bff565b604051901515815260200160405180910390f35b34156104a757600080fd5b61035b610cf6565b34156104ba57600080fd5b61042d610d75565b34156104cd57600080fd5b6104d8600435610744565b60405160ff909116815260200160405180910390f35b34156104f957600080fd5b61035b60043560243560ff60443516610d84565b341561051857600080fd5b61035b600435610ef8565b341561052e57600080fd5b610488610f5b565b341561054157600080fd5b61035b600160a060020a0360043516610f6b565b341561056057600080fd5b6103bd610fd8565b341561057357600080fd5b61035b600435611054565b341561058957600080fd5b61035b6110b7565b341561059c57600080fd5b61042d61113b565b34156105af57600080fd5b61035b60043561114a565b34156105c557600080fd5b61035b6111ad565b34156105d857600080fd5b6103bd611200565b34156105eb57600080fd5b61035b611206565b34156105fe57600080fd5b61060661125c565b6040518082600281111561061657fe5b60ff16815260200191505060405180910390f35b341561063557600080fd5b6103bd611265565b341561064857600080fd5b6103bd61126b565b341561065b57600080fd5b6103bd611271565b341561066e57600080fd5b61035b600160a060020a0360043516602435604435611277565b341561069357600080fd5b61035b600435611362565b34156106a957600080fd5b61035b600160a060020a0360043516611451565b34156106c857600080fd5b6103bd6114ec565b34156106db57600080fd5b6104886114f2565b34156106ee57600080fd5b61035b600160a060020a0360043516611674565b341561070d57600080fd5b61042d6116e1565b341561072057600080fd5b6103bd6116f0565b600080828481151561073657fe5b0490508091505b5092915050565b670de0b6b3a76400009004600080805b600e5481101561073d57600e80548290811061076c57fe5b90600052602060002090600302016000015484101580156107ab5750600e80548290811061079657fe5b90600052602060002090600302016001015484105b156107d857600e8054829081106107be57fe5b600091825260209091206002600390920201015460ff1691505b600101610754565b6000808315156107f3576000915061073d565b5082820282848281151561080357fe5b041461080b57fe5b9392505050565b60008282018381101561080b57fe5b600160a060020a0383166000908152600f602052604090205460ff1615156108af57600160a060020a0383166000818152600f60209081526040808320805460ff191660019081178255818101889055600290910186905560118054855260109093529220805473ffffffffffffffffffffffffffffffffffffffff191690931790925581540190556108d8565b600160a060020a0383166000908152600f60205260409020600181018054840190556002018190555b505050565b6009805434908101909155600354600160a060020a03169080156108fc0290604051600060405180830381858888f19350505050151561091c57600080fd5b6003547fb83b45290a4f886987650377589d33a799229ba96e9dcafa11fef58e3410dd3990600160a060020a031634604051600160a060020a03909216825260208201526040908101905180910390a1565b60005433600160a060020a0390811691161461098957600080fd5b600a805460ff191660011790557f912ee23dde46ec889d6748212cce445d667f7041597691dc89e8549ad8bc0acb60405160405180910390a1565b600f60205260009081526040902080546001820154600283015460039093015460ff9283169391921684565b60045481565b600154600090600160a060020a03166370a0823130836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610a5157600080fd5b6102c65a03f11515610a6257600080fd5b50505060405180519150505b90565b6000805433600160a060020a03908116911614610a8d57600080fd5b5060088054908290557f03bec18825f96aef1c55a257dbf1034c11bedd28b9c80a074c42b60307014b5c818360405191825260208201526040908101905180910390a15050565b60005433600160a060020a03908116911614610aef57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290557f5d108ca248943e98e1886bbc2c38beda701271994a14354258a11692b81b73cf9116604051600160a060020a03909116815260200160405180910390a150565b6000805433600160a060020a03908116911614610b7a57600080fd5b506000908152600b6020526040902054600160a060020a031690565b60095490565b6000805433600160a060020a03908116911614610bb857600080fd5b5060058054908290557f1359015318dd1f94786883fdb90e4e98c3dbf6757afa0d874b690a768cbb1393818360405191825260208201526040908101905180910390a15050565b6000805433600160a060020a03908116911614610c1b57600080fd5b610c236109f6565b821115610c2f57600080fd5b600154600160a060020a031663a9059cbb338460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610c8e57600080fd5b6102c65a03f11515610c9f57600080fd5b50505060405180519050507fa267b5cf59cf96d97abf36d29c63cf7bdef867c208ca8575c47f2cafda39abc93383604051600160a060020a03909216825260208201526040908101905180910390a1506001919050565b60005433600160a060020a03908116911614610d1157600080fd5b60005460a060020a900460ff161515610d2957600080fd5b6000805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600354600160a060020a031681565b6000805b600e54811015610e2f5784600e82815481101515610da257fe5b906000526020600020906003020160000154148015610de0575083600e82815481101515610dcc57fe5b906000526020600020906003020160010154145b15610e275782600e82815481101515610df557fe5b906000526020600020906003020160020160006101000a81548160ff021916908360ff16021790555060019150610e2f565b600101610d88565b811515610ea757600e805460018101610e4883826116f6565b91600052602060002090600302016000606060405190810160409081528982526020820189905260ff88169082015291905081518155602082015181600101556040820151600291909101805460ff191660ff90921691909117905550505b7f57c1feca722369525ef419a2fb567af586e967e0bb6309822b13bc6df544206f858585604051928352602083019190915260ff166040808301919091526060909101905180910390a15050505050565b6000805433600160a060020a03908116911614610f1457600080fd5b5060068054908290557f1359015318dd1f94786883fdb90e4e98c3dbf6757afa0d874b690a768cbb1393818360405191825260208201526040908101905180910390a15050565b60005460a060020a900460ff1681565b6000805433600160a060020a03908116911614610f8757600080fd5b50600160a060020a03166000908152600c602090815260408083208054908490558352600b9091529020805473ffffffffffffffffffffffffffffffffffffffff19169055600d8054600019019055565b600080805b60115481101561104e57600081815260106020908152604080832054600160a060020a03168352600f90915290206003015460ff16151561104657600081815260106020908152604080832054600160a060020a03168352600f90915290206001015491909101905b600101610fdd565b50919050565b6000805433600160a060020a0390811691161461107057600080fd5b5060048054908290557f1b5631de18a6469fb059f58c03f3aeed572c1224a199d6e7a5bc3cfdfc353f53818360405191825260208201526040908101905180910390a15050565b60005433600160a060020a039081169116146110d257600080fd5b60005460a060020a900460ff16156110e957600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600054600160a060020a031681565b6000805433600160a060020a0390811691161461116657600080fd5b5060078054908290557f787f9cc3d9cc835418a1cd3003ddeea5dcf049cdafa462cfde4e41a1377250c4818360405191825260208201526040908101905180910390a15050565b60005433600160a060020a039081169116146111c857600080fd5b600a805460ff191690557f3459b1afdc87bd5e8dfafd6a227544087134a84af6b4d8977182ce2efbdd7b2160405160405180910390a1565b600d5481565b60005433600160a060020a0390811691161461122157600080fd5b600a805460ff191660021790557f0bd8a3eb532e5fbcd3f5b00335f0fb42fdc11969e9af0fab7c9e71a36ae0d31a60405160405180910390a1565b600a5460ff1681565b60055481565b60085481565b60065481565b600160a060020a0333166000908152600c602052604081205411806112aa575060005433600160a060020a039081169116145b15156112b557600080fd5b600160a060020a0383166000908152600f602052604090205460ff161515600114156108d857600160a060020a0383166000908152600f602052604090819020600181018490556002018290557f397895f305694a289642f695d102ebfa673e19db979c6ecd754f051e46955e3190849084908490518084600160a060020a0316600160a060020a03168152602001838152602001828152602001935050505060405180910390a1505050565b600160a060020a0333166000908152600c602052604081205481901180611397575060005433600160a060020a039081169116145b15156113a257600080fd5b5060005b60115481101561144d5760008181526010602090815260408083208054600160a060020a039081168552600f808552838620600201889055915416808552925291829020600101547f397895f305694a289642f695d102ebfa673e19db979c6ecd754f051e46955e31928590518084600160a060020a0316600160a060020a03168152602001838152602001828152602001935050505060405180910390a16001016113a6565b5050565b60005433600160a060020a0390811691161461146c57600080fd5b600160a060020a038116151561148157600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60025481565b600160a060020a0333166000908152600f602052604081205460ff16151561151957600080fd5b600160a060020a0333166000908152600f602052604090206003015460ff161561154257600080fd5b600160a060020a0333166000908152600f602052604090206002015442101561156a57600080fd5b6001805433600160a060020a038181166000908152600f602052604080822090950154919093169363a9059cbb9390516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156115e157600080fd5b6102c65a03f115156115f257600080fd5b50505060405180515050600160a060020a03339081166000908152600f60205260409081902060038101805460ff1916600190811790915501547fa267b5cf59cf96d97abf36d29c63cf7bdef867c208ca8575c47f2cafda39abc9929151600160a060020a03909216825260208201526040908101905180910390a150600190565b60005433600160a060020a0390811691161461168f57600080fd5b600d80546001018082556000908152600b602090815260408083208054600160a060020a0390961673ffffffffffffffffffffffffffffffffffffffff19909616861790559254938252600c90522055565b600154600160a060020a031681565b60095481565b8154818355818115116108d8576000838152602090206108d891610a6e9160039182028101918502015b80821115611746576000808255600182015560028101805460ff19169055600301611720565b50905600a165627a7a72305820c0697b67c5550766d2318003314d51b57385cff5c4cde57fbc99981f681d733c0029000000000000000000000000a56d47cfa8bdbafb42987ff2d9f5071a1b2583fe000000000000000000000000000000000000000000000000000000005a786360000000000000000000000000000000000000000000000000000000005aa4717f000000000000000000000000000000000000000000000000000000005ada7eff",
  "constructorArguments": "000000000000000000000000a56d47cfa8bdbafb42987ff2d9f5071a1b2583fe000000000000000000000000000000000000000000000000000000005a786360000000000000000000000000000000000000000000000000000000005aa4717f000000000000000000000000000000000000000000000000000000005ada7eff"
}