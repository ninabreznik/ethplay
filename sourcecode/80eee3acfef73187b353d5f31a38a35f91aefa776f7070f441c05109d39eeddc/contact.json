{
  "address": "0x56cc955c30581c202671e8b55db871abcd78bba0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PictosisGenesisExchanger",
  "compilerVersion": "v0.5.9+commit.e560f70d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\npragma solidity ^0.5.9;\n\n/**\n* @title Math\n* @dev Assorted math operations\n*/\nlibrary Math {\n/**\n* @dev Returns the largest of two numbers.\n*/\nfunction max(uint256 a, uint256 b) internal pure returns (uint256) {\nreturn a >= b ? a : b;\n}\n\n/**\n* @dev Returns the smallest of two numbers.\n*/\nfunction min(uint256 a, uint256 b) internal pure returns (uint256) {\nreturn a < b ? a : b;\n}\n\n/**\n* @dev Calculates the average of two numbers. Since these are integers,\n* averages of an even and odd number cannot be represented, and will be\n* rounded down.\n*/\nfunction average(uint256 a, uint256 b) internal pure returns (uint256) {\n// (a + b) / 2 can overflow, so we distribute\nreturn (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n}\n}\n\n\n/**\n* @title Roles\n* @dev Library for managing addresses assigned to a Role.\n*/\nlibrary Roles {\nstruct Role {\nmapping (address => bool) bearer;\n}\n\n/**\n* @dev give an account access to this role\n*/\nfunction add(Role storage role, address account) internal {\nrequire(account != address(0));\nrequire(!has(role, account));\n\nrole.bearer[account] = true;\n}\n\n/**\n* @dev remove an account's access to this role\n*/\nfunction remove(Role storage role, address account) internal {\nrequire(account != address(0));\nrequire(has(role, account));\n\nrole.bearer[account] = false;\n}\n\n/**\n* @dev check if an account has this role\n* @return bool\n*/\nfunction has(Role storage role, address account) internal view returns (bool) {\nrequire(account != address(0));\nreturn role.bearer[account];\n}\n}\n\n\n/**\n* @title SafeMath\n* @dev Unsigned math operations with safety checks that revert on error\n*/\nlibrary SafeMath {\n/**\n* @dev Multiplies two unsigned integers, reverts on overflow.\n*/\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n// benefit is lost if 'b' is also tested.\n// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\nif (a == 0) {\nreturn 0;\n}\n\nuint256 c = a * b;\nrequire(c / a == b);\n\nreturn c;\n}\n\n/**\n* @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n*/\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n// Solidity only automatically asserts when dividing by 0\nrequire(b > 0);\nuint256 c = a / b;\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\nreturn c;\n}\n\n/**\n* @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n*/\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\nrequire(b <= a);\nuint256 c = a - b;\n\nreturn c;\n}\n\n/**\n* @dev Adds two unsigned integers, reverts on overflow.\n*/\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\nuint256 c = a + b;\nrequire(c >= a);\n\nreturn c;\n}\n\n/**\n* @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n* reverts when dividing by zero.\n*/\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\nrequire(b != 0);\nreturn a % b;\n}\n}\n\n\n\n\ncontract MinterRole {\nusing Roles for Roles.Role;\n\nevent MinterAdded(address indexed account);\nevent MinterRemoved(address indexed account);\n\nRoles.Role private _minters;\n\nconstructor () internal {\n_addMinter(msg.sender);\n}\n\nmodifier onlyMinter() {\nrequire(isMinter(msg.sender));\n_;\n}\n\nfunction isMinter(address account) public view returns (bool) {\nreturn _minters.has(account);\n}\n\nfunction addMinter(address account) public onlyMinter {\n_addMinter(account);\n}\n\nfunction renounceMinter() public {\n_removeMinter(msg.sender);\n}\n\nfunction _addMinter(address account) internal {\n_minters.add(account);\nemit MinterAdded(account);\n}\n\nfunction _removeMinter(address account) internal {\n_minters.remove(account);\nemit MinterRemoved(account);\n}\n}\n\n\n/**\n* @title ERC20 interface\n* @dev see https://eips.ethereum.org/EIPS/eip-20\n*/\ninterface IERC20 {\nfunction transfer(address to, uint256 value) external returns (bool);\n\nfunction approve(address spender, uint256 value) external returns (bool);\n\nfunction transferFrom(address from, address to, uint256 value) external returns (bool);\n\nfunction totalSupply() external view returns (uint256);\n\nfunction balanceOf(address who) external view returns (uint256);\n\nfunction allowance(address owner, address spender) external view returns (uint256);\n\nevent Transfer(address indexed from, address indexed to, uint256 value);\n\nevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract ApproveAndCallFallBack {\nfunction receiveApproval(address from, uint256 _amount, address _token, bytes memory _data) public;\n}\n\n\n\n\n\n\n\n/**\n* @title Standard ERC20 token\n*\n* @dev Implementation of the basic standard token.\n* https://eips.ethereum.org/EIPS/eip-20\n* Originally based on code by FirstBlood:\n* https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n*\n* This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n* all accounts just by listening to said events. Note that this isn't required by the specification, and other\n* compliant implementations may not do it.\n*/\ncontract ERC20 is IERC20 {\nusing SafeMath for uint256;\n\nmapping (address => uint256) private _balances;\n\nmapping (address => mapping (address => uint256)) private _allowed;\n\nuint256 private _totalSupply;\n\n/**\n* @dev Total number of tokens in existence\n*/\nfunction totalSupply() public view returns (uint256) {\nreturn _totalSupply;\n}\n\n/**\n* @dev Gets the balance of the specified address.\n* @param owner The address to query the balance of.\n* @return A uint256 representing the amount owned by the passed address.\n*/\nfunction balanceOf(address owner) public view returns (uint256) {\nreturn _balances[owner];\n}\n\n/**\n* @dev Function to check the amount of tokens that an owner allowed to a spender.\n* @param owner address The address which owns the funds.\n* @param spender address The address which will spend the funds.\n* @return A uint256 specifying the amount of tokens still available for the spender.\n*/\nfunction allowance(address owner, address spender) public view returns (uint256) {\nreturn _allowed[owner][spender];\n}\n\n/**\n* @dev Transfer token to a specified address\n* @param to The address to transfer to.\n* @param value The amount to be transferred.\n*/\nfunction transfer(address to, uint256 value) public returns (bool) {\n_transfer(msg.sender, to, value);\nreturn true;\n}\n\n/**\n* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n* Beware that changing an allowance with this method brings the risk that someone may use both the old\n* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n* @param spender The address which will spend the funds.\n* @param value The amount of tokens to be spent.\n*/\nfunction approve(address spender, uint256 value) public returns (bool) {\n_approve(msg.sender, spender, value);\nreturn true;\n}\n\n/**\n* @dev Transfer tokens from one address to another.\n* Note that while this function emits an Approval event, this is not required as per the specification,\n* and other compliant implementations may not emit the event.\n* @param from address The address which you want to send tokens from\n* @param to address The address which you want to transfer to\n* @param value uint256 the amount of tokens to be transferred\n*/\nfunction transferFrom(address from, address to, uint256 value) public returns (bool) {\n_transfer(from, to, value);\n_approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\nreturn true;\n}\n\n/**\n* @dev Increase the amount of tokens that an owner allowed to a spender.\n* approve should be called when _allowed[msg.sender][spender] == 0. To increment\n* allowed value is better to use this function to avoid 2 calls (and wait until\n* the first transaction is mined)\n* From MonolithDAO Token.sol\n* Emits an Approval event.\n* @param spender The address which will spend the funds.\n* @param addedValue The amount of tokens to increase the allowance by.\n*/\nfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n_approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\nreturn true;\n}\n\n/**\n* @dev Decrease the amount of tokens that an owner allowed to a spender.\n* approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n* allowed value is better to use this function to avoid 2 calls (and wait until\n* the first transaction is mined)\n* From MonolithDAO Token.sol\n* Emits an Approval event.\n* @param spender The address which will spend the funds.\n* @param subtractedValue The amount of tokens to decrease the allowance by.\n*/\nfunction decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n_approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\nreturn true;\n}\n\n/**\n* @dev Transfer token for a specified addresses\n* @param from The address to transfer from.\n* @param to The address to transfer to.\n* @param value The amount to be transferred.\n*/\nfunction _transfer(address from, address to, uint256 value) internal {\nrequire(to != address(0));\n\n_balances[from] = _balances[from].sub(value);\n_balances[to] = _balances[to].add(value);\nemit Transfer(from, to, value);\n}\n\n/**\n* @dev Internal function that mints an amount of the token and assigns it to\n* an account. This encapsulates the modification of balances such that the\n* proper events are emitted.\n* @param account The account that will receive the created tokens.\n* @param value The amount that will be created.\n*/\nfunction _mint(address account, uint256 value) internal {\nrequire(account != address(0));\n\n_totalSupply = _totalSupply.add(value);\n_balances[account] = _balances[account].add(value);\nemit Transfer(address(0), account, value);\n}\n\n/**\n* @dev Internal function that burns an amount of the token of a given\n* account.\n* @param account The account whose tokens will be burnt.\n* @param value The amount that will be burnt.\n*/\nfunction _burn(address account, uint256 value) internal {\nrequire(account != address(0));\n\n_totalSupply = _totalSupply.sub(value);\n_balances[account] = _balances[account].sub(value);\nemit Transfer(account, address(0), value);\n}\n\n/**\n* @dev Approve an address to spend another addresses' tokens.\n* @param owner The address that owns the tokens.\n* @param spender The address that will spend the tokens.\n* @param value The number of tokens that can be spent.\n*/\nfunction _approve(address owner, address spender, uint256 value) internal {\nrequire(spender != address(0));\nrequire(owner != address(0));\n\n_allowed[owner][spender] = value;\nemit Approval(owner, spender, value);\n}\n\n/**\n* @dev Internal function that burns an amount of the token of a given\n* account, deducting from the sender's allowance for said account. Uses the\n* internal burn function.\n* Emits an Approval event (reflecting the reduced allowance).\n* @param account The account whose tokens will be burnt.\n* @param value The amount that will be burnt.\n*/\nfunction _burnFrom(address account, uint256 value) internal {\n_burn(account, value);\n_approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n}\n}\n\n\n\n/**\n* @title Ownable\n* @dev The Ownable contract has an owner address, and provides basic authorization control\n* functions, this simplifies the implementation of \"user permissions\".\n*/\ncontract Ownable {\naddress private _owner;\n\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n/**\n* @dev The Ownable constructor sets the original `owner` of the contract to the sender\n* account.\n*/\nconstructor () internal {\n_owner = msg.sender;\nemit OwnershipTransferred(address(0), _owner);\n}\n\n/**\n* @return the address of the owner.\n*/\nfunction owner() public view returns (address) {\nreturn _owner;\n}\n\n/**\n* @dev Throws if called by any account other than the owner.\n*/\nmodifier onlyOwner() {\nrequire(isOwner());\n_;\n}\n\n/**\n* @return true if `msg.sender` is the owner of the contract.\n*/\nfunction isOwner() public view returns (bool) {\nreturn msg.sender == _owner;\n}\n\n/**\n* @dev Allows the current owner to relinquish control of the contract.\n* It will not be possible to call the functions with the `onlyOwner`\n* modifier anymore.\n* @notice Renouncing ownership will leave the contract without an owner,\n* thereby removing any functionality that is only available to the owner.\n*/\nfunction renounceOwnership() public onlyOwner {\nemit OwnershipTransferred(_owner, address(0));\n_owner = address(0);\n}\n\n/**\n* @dev Allows the current owner to transfer control of the contract to a newOwner.\n* @param newOwner The address to transfer ownership to.\n*/\nfunction transferOwnership(address newOwner) public onlyOwner {\n_transferOwnership(newOwner);\n}\n\n/**\n* @dev Transfers control of the contract to a newOwner.\n* @param newOwner The address to transfer ownership to.\n*/\nfunction _transferOwnership(address newOwner) internal {\nrequire(newOwner != address(0));\nemit OwnershipTransferred(_owner, newOwner);\n_owner = newOwner;\n}\n}\n\n\n\n\n\n\n\n\n\n\n/**\n* @title ERC20Detailed token\n* @dev The decimals are only for visualization purposes.\n* All the operations are done using the smallest and indivisible token unit,\n* just as on Ethereum all the operations are done in wei.\n*/\ncontract ERC20Detailed is IERC20 {\nstring private _name;\nstring private _symbol;\nuint8 private _decimals;\n\nconstructor (string memory name, string memory symbol, uint8 decimals) public {\n_name = name;\n_symbol = symbol;\n_decimals = decimals;\n}\n\n/**\n* @return the name of the token.\n*/\nfunction name() public view returns (string memory) {\nreturn _name;\n}\n\n/**\n* @return the symbol of the token.\n*/\nfunction symbol() public view returns (string memory) {\nreturn _symbol;\n}\n\n/**\n* @return the number of decimals of the token.\n*/\nfunction decimals() public view returns (uint8) {\nreturn _decimals;\n}\n}\n\n\n\n\n\n\n/**\n* @title ERC20Mintable\n* @dev ERC20 minting logic\n*/\ncontract ERC20Mintable is ERC20, MinterRole {\n/**\n* @dev Function to mint tokens\n* @param to The address that will receive the minted tokens.\n* @param value The amount of tokens to mint.\n* @return A boolean that indicates if the operation was successful.\n*/\nfunction mint(address to, uint256 value) public onlyMinter returns (bool) {\n_mint(to, value);\nreturn true;\n}\n}\n\n\n\n\n\n/**\n* @title Capped token\n* @dev Mintable token with a token cap.\n*/\ncontract ERC20Capped is ERC20Mintable {\nuint256 private _cap;\n\nconstructor (uint256 cap) public {\nrequire(cap > 0);\n_cap = cap;\n}\n\n/**\n* @return the cap for the token minting.\n*/\nfunction cap() public view returns (uint256) {\nreturn _cap;\n}\n\nfunction _mint(address account, uint256 value) internal {\nrequire(totalSupply().add(value) <= _cap);\nsuper._mint(account, value);\n}\n}\n\n\ncontract PictosisGenesisToken is ERC20, ERC20Detailed, ERC20Mintable, ERC20Capped {\naddress public exchangeContract;\n\nconstructor()\nERC20Capped(125000000000000000000000000)\nERC20Mintable()\nERC20Detailed(\"Pictosis Genesis Token\", \"PICTO-G\", 18)\nERC20()\npublic\n{\n}\n\nfunction burnFrom(address from, uint256 value) public onlyMinter {\n_burnFrom(from, value);\n}\n\nfunction setExchangeContract(address _exchangeContract) public onlyMinter {\nexchangeContract = _exchangeContract;\n}\n\nfunction completeExchange(address from) public {\nrequire(msg.sender == exchangeContract && exchangeContract != address(0), \"Only the exchange contract can invoke this function\");\n_burnFrom(from, balanceOf(from));\n}\n\nfunction transfer(address to, uint256 value) public returns (bool) {\nrevert(\"Token can only be exchanged for PICTO tokens in the exchange contract\");\n}\n\nuint256 constant D160 = 0x0010000000000000000000000000000000000000000;\n\n// data is an array of uint256s. Each uint256 represents a transfer.\n// The 160 LSB is the destination of the address that wants to be sent\n// The 96 MSB is the amount of tokens that wants to be sent.\n// i.e. assume we want to mint 1200 tokens for address 0xABCDEFAABBCCDDEEFF1122334455667788990011\n// 1200 in hex: 0x0000410d586a20a4c00000. Concatenate this value and the address\n// [\"0x0000410d586a20a4c00000ABCDEFAABBCCDDEEFF1122334455667788990011\"]\nfunction multiMint(uint256[] memory data) public onlyMinter {\nfor (uint256 i = 0; i < data.length; i++) {\naddress addr = address(data[i] & (D160 - 1));\nuint256 amount = data[i] / D160;\n_mint(addr, amount);\n}\n}\n\n/// @notice This method can be used by the minter to extract mistakenly\n/// sent tokens to this contract.\n/// @param _token The address of the token contract that you want to recover\n/// set to 0x0000...0000 in case you want to extract ether.\nfunction claimTokens(address _token) public onlyMinter {\nif (_token == address(0)) {\nmsg.sender.transfer(address(this).balance);\nreturn;\n}\n\nERC20 token = ERC20(_token);\nuint256 balance = token.balanceOf(address(this));\ntoken.transfer(msg.sender, balance);\nemit ClaimedTokens(_token, msg.sender, balance);\n}\n\nevent ClaimedTokens(address indexed _token, address indexed _sender, uint256 _amount);\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n* @title Arrays\n* @dev Utility library of inline array functions\n*/\nlibrary Arrays {\n/**\n* @dev Upper bound search function which is kind of binary search algorithm. It searches sorted\n* array to find index of the element value. If element is found then returns its index otherwise\n* it returns index of first element which is greater than searched value. If searched element is\n* bigger than any array element function then returns first index after last element (i.e. all\n* values inside the array are smaller than the target). Complexity O(log n).\n* @param array The array sorted in ascending order.\n* @param element The element's value to be found.\n* @return The calculated index value. Returns 0 for empty array.\n*/\nfunction findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\nif (array.length == 0) {\nreturn 0;\n}\n\nuint256 low = 0;\nuint256 high = array.length;\n\nwhile (low < high) {\nuint256 mid = Math.average(low, high);\n\n// Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n// because Math.average rounds down (it does integer division with truncation).\nif (array[mid] > element) {\nhigh = mid;\n} else {\nlow = mid + 1;\n}\n}\n\n// At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\nif (low > 0 && array[low - 1] == element) {\nreturn low - 1;\n} else {\nreturn low;\n}\n}\n}\n\n\n\n\n\n/**\n* @title Counters\n* @author Matt Condon (@shrugs)\n* @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n* of elements in a mapping, issuing ERC721 ids, or counting request ids\n*\n* Include with `using Counters for Counters.Counter;`\n* Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\n* overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n* directly accessed.\n*/\nlibrary Counters {\nusing SafeMath for uint256;\n\nstruct Counter {\n// This variable should never be directly accessed by users of the library: interactions must be restricted to\n// the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n// this feature: see https://github.com/ethereum/solidity/issues/4637\nuint256 _value; // default: 0\n}\n\nfunction current(Counter storage counter) internal view returns (uint256) {\nreturn counter._value;\n}\n\nfunction increment(Counter storage counter) internal {\ncounter._value += 1;\n}\n\nfunction decrement(Counter storage counter) internal {\ncounter._value = counter._value.sub(1);\n}\n}\n\n\n\n/**\n* @title ERC20 token with snapshots.\n* @dev Inspired by Jordi Baylina's MiniMeToken to record historical balances:\n* https://github.com/Giveth/minime/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\n* When a snapshot is made, the balances and totalSupply at the time of the snapshot are recorded for later\n* access.\n*\n* To make a snapshot, call the `snapshot` function, which will emit the `Snapshot` event and return a snapshot id.\n* To get the total supply from a snapshot, call the function `totalSupplyAt` with the snapshot id.\n* To get the balance of an account from a snapshot, call the `balanceOfAt` function with the snapshot id and the\n* account address.\n* @author Validity Labs AG <[email protected]>\n*/\ncontract ERC20Snapshot is ERC20 {\nusing SafeMath for uint256;\nusing Arrays for uint256[];\nusing Counters for Counters.Counter;\n\n// Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\n// Snapshot struct, but that would impede usage of functions that work on an array.\nstruct Snapshots {\nuint256[] ids;\nuint256[] values;\n}\n\nmapping (address => Snapshots) private _accountBalanceSnapshots;\nSnapshots private _totalSupplySnaphots;\n\n// Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\nCounters.Counter private _currentSnapshotId;\n\nevent Snapshot(uint256 id);\n\n// Creates a new snapshot id. Balances are only stored in snapshots on demand: unless a snapshot was taken, a\n// balance change will not be recorded. This means the extra added cost of storing snapshotted balances is only paid\n// when required, but is also flexible enough that it allows for e.g. daily snapshots.\nfunction snapshot() public returns (uint256) {\n_currentSnapshotId.increment();\n\nuint256 currentId = _currentSnapshotId.current();\nemit Snapshot(currentId);\nreturn currentId;\n}\n\nfunction balanceOfAt(address account, uint256 snapshotId) public view returns (uint256) {\n(bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\n\nreturn snapshotted ? value : balanceOf(account);\n}\n\nfunction totalSupplyAt(uint256 snapshotId) public view returns(uint256) {\n(bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnaphots);\n\nreturn snapshotted ? value : totalSupply();\n}\n\n// _transfer, _mint and _burn are the only functions where the balances are modified, so it is there that the\n// snapshots are updated. Note that the update happens _before_ the balance change, with the pre-modified value.\n// The same is true for the total supply and _mint and _burn.\nfunction _transfer(address from, address to, uint256 value) internal {\n_updateAccountSnapshot(from);\n_updateAccountSnapshot(to);\n\nsuper._transfer(from, to, value);\n}\n\nfunction _mint(address account, uint256 value) internal {\n_updateAccountSnapshot(account);\n_updateTotalSupplySnapshot();\n\nsuper._mint(account, value);\n}\n\nfunction _burn(address account, uint256 value) internal {\n_updateAccountSnapshot(account);\n_updateTotalSupplySnapshot();\n\nsuper._burn(account, value);\n}\n\n// When a valid snapshot is queried, there are three possibilities:\n// a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\n// created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\n// to this id is the current one.\n// b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\n// requested id, and its value is the one to return.\n// c) More snapshots were created after the requested one, and the queried value was later modified. There will be\n// no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\n// larger than the requested one.\n//\n// In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\n// it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\n// exactly this.\nfunction _valueAt(uint256 snapshotId, Snapshots storage snapshots)\nprivate view returns (bool, uint256)\n{\nrequire(snapshotId > 0);\nrequire(snapshotId <= _currentSnapshotId.current());\n\nuint256 index = snapshots.ids.findUpperBound(snapshotId);\n\nif (index == snapshots.ids.length) {\nreturn (false, 0);\n} else {\nreturn (true, snapshots.values[index]);\n}\n}\n\nfunction _updateAccountSnapshot(address account) private {\n_updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\n}\n\nfunction _updateTotalSupplySnapshot() private {\n_updateSnapshot(_totalSupplySnaphots, totalSupply());\n}\n\nfunction _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\nuint256 currentId = _currentSnapshotId.current();\nif (_lastSnapshotId(snapshots.ids) < currentId) {\nsnapshots.ids.push(currentId);\nsnapshots.values.push(currentValue);\n}\n}\n\nfunction _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\nif (ids.length == 0) {\nreturn 0;\n} else {\nreturn ids[ids.length - 1];\n}\n}\n}\n\n\n\n\ncontract PictosisToken is ERC20, ERC20Detailed, ERC20Mintable, ERC20Capped, ERC20Snapshot, Ownable {\nuint transfersEnabledDate;\n\nmodifier onlyTransfersEnabled() {\nrequire(block.timestamp >= transfersEnabledDate, \"Transfers disabled\");\n_;\n}\n\nconstructor(uint _enableTransfersDate, uint _cap)\nERC20Capped(_cap)\nERC20Mintable()\nERC20Detailed(\"Pictosis Token\", \"PICTO\", 18)\nERC20()\nOwnable()\npublic\n{\ntransfersEnabledDate = _enableTransfersDate;\n}\n\nfunction areTransfersEnabled() public view returns(bool) {\nreturn block.timestamp >= transfersEnabledDate;\n}\n\nfunction transfer(\naddress to,\nuint256 value\n)\npublic\nonlyTransfersEnabled\nreturns (bool)\n{\nreturn super.transfer(to, value);\n}\n\nfunction transferFrom(\naddress from,\naddress to,\nuint256 value\n)\npublic\nonlyTransfersEnabled\nreturns (bool)\n{\nreturn super.transferFrom(from, to, value);\n}\n\n/// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n/// its behalf, and then a function is triggered in the contract that is\n/// being approved, `_spender`. This allows users to use their tokens to\n/// interact with contracts in one function call instead of two\n/// @param _spender The address of the contract able to transfer the tokens\n/// @param _amount The amount of tokens to be approved for transfer\n/// @return True if the function call was successful\nfunction approveAndCall(\naddress _spender,\nuint256 _amount,\nbytes memory _extraData\n)\npublic\nreturns (bool success)\n{\nrequire(approve(_spender, _amount), \"Couldn't approve spender\");\n\nApproveAndCallFallBack(_spender).receiveApproval(msg.sender, _amount, address(this), _extraData);\n\nreturn true;\n}\n}\n\ncontract PictosisGenesisExchanger is Ownable {\nusing SafeMath for uint256;\n\nmapping (address => uint256) public collected;\nuint256 public totalCollected;\n\nPictosisGenesisToken public genesis;\nPictosisToken public picto;\n\nconstructor(address _genesis, address _picto) public {\ngenesis = PictosisGenesisToken(_genesis);\npicto = PictosisToken(_picto);\n}\n\n/// @notice Can collect tokens;\nfunction canCollect() public view returns(bool) {\nreturn picto.areTransfersEnabled();\n}\n\n/// @notice This method should be called by the genesis holders to collect their picto token. Requires approval\nfunction collect() public {\nrequire(picto.areTransfersEnabled(), \"Cannot collect tokens yet\");\n\nuint balance = genesis.balanceOf(msg.sender);\nuint256 amountToSend = balance.sub(collected[msg.sender]);\n\nrequire(balance >= collected[msg.sender], \"Balance must be greater than collected amount\");\nrequire(amountToSend > 0, \"No tokens available or already exchanged\");\nrequire(picto.balanceOf(address(this)) >= amountToSend, \"Exchanger does not have funds available\");\n\ntotalCollected = totalCollected.add(amountToSend);\ncollected[msg.sender] = collected[msg.sender].add(amountToSend);\n\nrequire(picto.transfer(msg.sender, amountToSend), \"Transfer failure\");\n\nemit TokensCollected(msg.sender, amountToSend);\n}\n\n/// @notice This method can be used by the minter to extract mistakenly\n/// sent tokens to this contract.\n/// @param _token The address of the token contract that you want to recover\n/// set to 0x0000...0000 in case you want to extract ether.\nfunction claimTokens(address _token) public onlyOwner {\nif (_token == address(0)) {\nmsg.sender.transfer(address(this).balance);\nreturn;\n}\n\nERC20 token = ERC20(_token);\nuint256 balance = token.balanceOf(address(this));\n\nif(_token == address(picto)){\nif(balance > genesis.totalSupply()){\nbalance = balance.sub(genesis.totalSupply());\n}\nrequire(balance >= genesis.totalSupply(), \"Cannot withdraw PICTO until everyone exchanges the tokens\");\n}\n\ntoken.transfer(msg.sender, balance);\nemit ClaimedTokens(_token, msg.sender, balance);\n}\n\nevent ClaimedTokens(address indexed _token, address indexed _controller, uint256 _amount);\nevent TokensCollected(address indexed _holder, uint256 _amount);\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516115313803806115318339818101604052604081101561003357600080fd5b810190808051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a381600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506113948061019d6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063c9b0d97b11610071578063c9b0d97b146101c6578063df8de3e7146101e8578063dfaa52761461022c578063e29eb83614610276578063e522538114610294578063f2fde38b1461029e576100a9565b806338e43840146100ae578063715018a6146101065780638da5cb5b146101105780638f32d59b1461015a578063a7f0b3de1461017c575b600080fd5b6100f0600480360360208110156100c457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102e2565b6040518082815260200191505060405180910390f35b61010e6102fa565b005b6101186103ca565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101626103f3565b604051808215151515815260200191505060405180910390f35b61018461044a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101ce610470565b604051808215151515815260200191505060405180910390f35b61022a600480360360208110156101fe57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061051a565b005b610234610a66565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61027e610a8c565b6040518082815260200191505060405180910390f35b61029c610a92565b005b6102e0600480360360208110156102b457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611156565b005b60016020528060005260406000206000915090505481565b6103026103f3565b61030b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663379ef1956040518163ffffffff1660e01b815260040160206040518083038186803b1580156104da57600080fd5b505afa1580156104ee573d6000803e3d6000fd5b505050506040513d602081101561050457600080fd5b8101908080519060200190929190505050905090565b6105226103f3565b61052b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105c3573373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501580156105bd573d6000803e3d6000fd5b50610a63565b600081905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561064757600080fd5b505afa15801561065b573d6000803e3d6000fd5b505050506040513d602081101561067157600080fd5b81019080805190602001909291905050509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561093857600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561074257600080fd5b505afa158015610756573d6000803e3d6000fd5b505050506040513d602081101561076c57600080fd5b810190808051906020019092919050505081111561083c57610839600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107ef57600080fd5b505afa158015610803573d6000803e3d6000fd5b505050506040513d602081101561081957600080fd5b81019080805190602001909291905050508261117390919063ffffffff16565b90505b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a457600080fd5b505afa1580156108b8573d6000803e3d6000fd5b505050506040513d60208110156108ce57600080fd5b8101908080519060200190929190505050811015610937576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001806112d26039913960400191505060405180910390fd5b5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156109bf57600080fd5b505af11580156109d3573d6000803e3d6000fd5b505050506040513d60208110156109e957600080fd5b8101908080519060200190929190505050503373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c836040518082815260200191505060405180910390a350505b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663379ef1956040518163ffffffff1660e01b815260040160206040518083038186803b158015610afa57600080fd5b505afa158015610b0e573d6000803e3d6000fd5b505050506040513d6020811015610b2457600080fd5b8101908080519060200190929190505050610ba7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f43616e6e6f7420636f6c6c65637420746f6b656e73207965740000000000000081525060200191505060405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610c4857600080fd5b505afa158015610c5c573d6000803e3d6000fd5b505050506040513d6020811015610c7257600080fd5b810190808051906020019092919050505090506000610cd9600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361117390919063ffffffff16565b9050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821015610d73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d81526020018061130b602d913960400191505060405180910390fd5b60008111610dcc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806113386028913960400191505060405180910390fd5b80600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610e6c57600080fd5b505afa158015610e80573d6000803e3d6000fd5b505050506040513d6020811015610e9657600080fd5b81019080805190602001909291905050501015610efe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806112ab6027913960400191505060405180910390fd5b610f138160025461119390919063ffffffff16565b600281905550610f6b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461119390919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561105757600080fd5b505af115801561106b573d6000803e3d6000fd5b505050506040513d602081101561108157600080fd5b8101908080519060200190929190505050611104576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5472616e73666572206661696c7572650000000000000000000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f9381e53ffdc9733a6783a6f8665be3f89c231bb81a6771996ed553b4e75c0fe3826040518082815260200191505060405180910390a25050565b61115e6103f3565b61116757600080fd5b611170816111b2565b50565b60008282111561118257600080fd5b600082840390508091505092915050565b6000808284019050838110156111a857600080fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156111ec57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fe45786368616e67657220646f6573206e6f7420686176652066756e647320617661696c61626c6543616e6e6f7420776974686472617720504943544f20756e74696c2065766572796f6e652065786368616e6765732074686520746f6b656e7342616c616e6365206d7573742062652067726561746572207468616e20636f6c6c656374656420616d6f756e744e6f20746f6b656e7320617661696c61626c65206f7220616c72656164792065786368616e676564a265627a7a7230582053692e49723352a2a88cbcd1d334fdaa2a2c36b6c8eb07aa8ee5d4f29fa55a5264736f6c634300050900320000000000000000000000009555b1f05a3b6ffbfe7332d23ac0585491fbc03c00000000000000000000000074cf8b4e3737229b46a565a1d2bfc4be503a79bc",
  "constructorArguments": "0000000000000000000000009555b1f05a3b6ffbfe7332d23ac0585491fbc03c00000000000000000000000074cf8b4e3737229b46a565a1d2bfc4be503a79bc"
}