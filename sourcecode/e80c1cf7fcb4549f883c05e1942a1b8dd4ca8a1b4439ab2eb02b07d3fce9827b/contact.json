{
  "address": "0xc49c2f09bd0ce00cad3786339136a3fa2cb24044",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ResaleTokenBucket",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-18\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/// @title Role based access control mixin for Resale Platform\n/// @author Mai Abha <[email protected]>\n/// @dev Ignore DRY approach to achieve readability\ncontract RBACMixin {\n  /// @notice Constant string message to throw on lack of access\n  string constant FORBIDDEN = \"Doesn't have enough rights to access\";\n  /// @notice Public map of owners\n  mapping (address => bool) public owners;\n  /// @notice Public map of minters\n  mapping (address => bool) public minters;\n\n  /// @notice The event indicates the addition of a new owner\n  /// @param who is address of added owner\n  event AddOwner(address indexed who);\n  /// @notice The event indicates the deletion of an owner\n  /// @param who is address of deleted owner\n  event DeleteOwner(address indexed who);\n\n  /// @notice The event indicates the addition of a new minter\n  /// @param who is address of added minter\n  event AddMinter(address indexed who);\n  /// @notice The event indicates the deletion of a minter\n  /// @param who is address of deleted minter\n  event DeleteMinter(address indexed who);\n\n  constructor () public {\n    _setOwner(msg.sender, true);\n  }\n\n  /// @notice The functional modifier rejects the interaction of senders who are not owners\n  modifier onlyOwner() {\n    require(isOwner(msg.sender), FORBIDDEN);\n    _;\n  }\n\n  /// @notice Functional modifier for rejecting the interaction of senders that are not minters\n  modifier onlyMinter() {\n    require(isMinter(msg.sender), FORBIDDEN);\n    _;\n  }\n\n  /// @notice Look up for the owner role on providen address\n  /// @param _who is address to look up\n  /// @return A boolean of owner role\n  function isOwner(address _who) public view returns (bool) {\n    return owners[_who];\n  }\n\n  /// @notice Look up for the minter role on providen address\n  /// @param _who is address to look up\n  /// @return A boolean of minter role\n  function isMinter(address _who) public view returns (bool) {\n    return minters[_who];\n  }\n\n  /// @notice Adds the owner role to provided address\n  /// @dev Requires owner role to interact\n  /// @param _who is address to add role\n  /// @return A boolean that indicates if the operation was successful.\n  function addOwner(address _who) public onlyOwner returns (bool) {\n    _setOwner(_who, true);\n  }\n\n  /// @notice Deletes the owner role to provided address\n  /// @dev Requires owner role to interact\n  /// @param _who is address to delete role\n  /// @return A boolean that indicates if the operation was successful.\n  function deleteOwner(address _who) public onlyOwner returns (bool) {\n    _setOwner(_who, false);\n  }\n\n  /// @notice Adds the minter role to provided address\n  /// @dev Requires owner role to interact\n  /// @param _who is address to add role\n  /// @return A boolean that indicates if the operation was successful.\n  function addMinter(address _who) public onlyOwner returns (bool) {\n    _setMinter(_who, true);\n  }\n\n  /// @notice Deletes the minter role to provided address\n  /// @dev Requires owner role to interact\n  /// @param _who is address to delete role\n  /// @return A boolean that indicates if the operation was successful.\n  function deleteMinter(address _who) public onlyOwner returns (bool) {\n    _setMinter(_who, false);\n  }\n\n  /// @notice Changes the owner role to provided address\n  /// @param _who is address to change role\n  /// @param _flag is next role status after success\n  /// @return A boolean that indicates if the operation was successful.\n  function _setOwner(address _who, bool _flag) private returns (bool) {\n    require(owners[_who] != _flag);\n    owners[_who] = _flag;\n    if (_flag) {\n      emit AddOwner(_who);\n    } else {\n      emit DeleteOwner(_who);\n    }\n    return true;\n  }\n\n  /// @notice Changes the minter role to provided address\n  /// @param _who is address to change role\n  /// @param _flag is next role status after success\n  /// @return A boolean that indicates if the operation was successful.\n  function _setMinter(address _who, bool _flag) private returns (bool) {\n    require(minters[_who] != _flag);\n    minters[_who] = _flag;\n    if (_flag) {\n      emit AddMinter(_who);\n    } else {\n      emit DeleteMinter(_who);\n    }\n    return true;\n  }\n}\n\ninterface IMintableToken {\n  function mint(address _to, uint256 _amount) external returns (bool);\n}\n\n\n/// @title Very simplified implementation of Token Bucket Algorithm to secure token minting\n/// @author Mai Abha <[email protected]>\n/// @notice Works with tokens implemented Mintable interface\n/// @dev Transfer ownership/minting role to contract and execute mint over ResaleTokenBucket proxy to secure\ncontract ResaleTokenBucket is RBACMixin, IMintableToken {\n  using SafeMath for uint;\n\n  /// @notice Limit maximum amount of available for minting tokens when bucket is full\n  /// @dev Should be enough to mint tokens with proper speed but less enough to prevent overminting in case of losing pkey\n  uint256 public size;\n  /// @notice Bucket refill rate\n  /// @dev Tokens per second (based on block.timestamp). Amount without decimals (in smallest part of token)\n  uint256 public rate;\n  /// @notice Stored time of latest minting\n  /// @dev Each successful call of minting function will update field with call timestamp\n  uint256 public lastMintTime;\n  /// @notice Left tokens in bucket on time of latest minting\n  uint256 public leftOnLastMint;\n\n  /// @notice Reference of Mintable token\n  /// @dev Setup in contructor phase and never change in future\n  IMintableToken public token;\n\n  /// @notice Token Bucket leak event fires on each minting\n  /// @param to is address of target tokens holder\n  /// @param left is amount of tokens available in bucket after leak\n  event Leak(address indexed to, uint256 left);\n\n  /// @param _token is address of Mintable token\n  /// @param _size initial size of token bucket\n  /// @param _rate initial refill rate (tokens/sec)\n  constructor (address _token, uint256 _size, uint256 _rate) public {\n    token = IMintableToken(_token);\n    size = _size;\n    rate = _rate;\n    leftOnLastMint = _size;\n  }\n\n  /// @notice Change size of bucket\n  /// @dev Require owner role to call\n  /// @param _size is new size of bucket\n  /// @return A boolean that indicates if the operation was successful.\n  function setSize(uint256 _size) public onlyOwner returns (bool) {\n    size = _size;\n    return true;\n  }\n\n  /// @notice Change refill rate of bucket\n  /// @dev Require owner role to call\n  /// @param _rate is new refill rate of bucket\n  /// @return A boolean that indicates if the operation was successful.\n  function setRate(uint256 _rate) public onlyOwner returns (bool) {\n    rate = _rate;\n    return true;\n  }\n\n  /// @notice Change size and refill rate of bucket\n  /// @dev Require owner role to call\n  /// @param _size is new size of bucket\n  /// @param _rate is new refill rate of bucket\n  /// @return A boolean that indicates if the operation was successful.\n  function setSizeAndRate(uint256 _size, uint256 _rate) public onlyOwner returns (bool) {\n    return setSize(_size) && setRate(_rate);\n  }\n\n  /// @notice Function to mint tokens\n  /// @param _to The address that will receive the minted tokens.\n  /// @param _amount The amount of tokens to mint.\n  /// @return A boolean that indicates if the operation was successful.\n  function mint(address _to, uint256 _amount) public onlyMinter returns (bool) {\n    uint256 available = availableTokens();\n    require(_amount <= available);\n    leftOnLastMint = available.sub(_amount);\n    lastMintTime = now; // solium-disable-line security/no-block-members\n    require(token.mint(_to, _amount));\n    return true;\n  }\n\n  /// @notice Function to calculate and get available in bucket tokens\n  /// @return An amount of available tokens in bucket\n  function availableTokens() public view returns (uint) {\n     // solium-disable-next-line security/no-block-members\n    uint256 timeAfterMint = now.sub(lastMintTime);\n    uint256 refillAmount = rate.mul(timeAfterMint).add(leftOnLastMint);\n    return size < refillAmount ? size : refillAmount;\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051606080610dcb833981016040908152815160208301519190920151610043336001640100000000610078810204565b5060068054600160a060020a031916600160a060020a0394909416939093179092556002819055600391909155600555610148565b600160a060020a03821660009081526020819052604081205460ff16151582151514156100a457600080fd5b600160a060020a0383166000908152602081905260409020805460ff1916831580159190911790915561010a57604051600160a060020a038416907fac1e9ef41b54c676ccf449d83ae6f2624bcdce8f5b93a6b48ce95874c332693d90600090a261013f565b604051600160a060020a038416907fbaefbfc44c4c937d4905d8a50bef95643f586e33d78f3d1998a10b992b68bdcc90600090a25b50600192915050565b610c74806101576000396000f3006080604052600436106100fb5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663022914a78114610100578063170ab405146101355780632aff49d71461014d5780632c4e722e146101685780632f54bf6e1461018f57806334fcf437146101b057806336b40bb6146101c857806340c10f19146101dd57806369bb4dc2146102015780637065cb4814610216578063949d225d14610237578063983b2d561461024c5780639d4635201461026d578063aa271e1a14610282578063cd5c4c70146102a3578063d82f94a3146102c4578063f46eccc4146102e5578063fc0c546a14610306575b600080fd5b34801561010c57600080fd5b50610121600160a060020a0360043516610337565b604080519115158252519081900360200190f35b34801561014157600080fd5b5061012160043561034c565b34801561015957600080fd5b50610121600435602435610424565b34801561017457600080fd5b5061017d6104d9565b60408051918252519081900360200190f35b34801561019b57600080fd5b50610121600160a060020a03600435166104df565b3480156101bc57600080fd5b506101216004356104fd565b3480156101d457600080fd5b5061017d610599565b3480156101e957600080fd5b50610121600160a060020a036004351660243561059f565b34801561020d57600080fd5b5061017d610716565b34801561022257600080fd5b50610121600160a060020a0360043516610775565b34801561024357600080fd5b5061017d610819565b34801561025857600080fd5b50610121600160a060020a036004351661081f565b34801561027957600080fd5b5061017d6108bd565b34801561028e57600080fd5b50610121600160a060020a03600435166108c3565b3480156102af57600080fd5b50610121600160a060020a03600435166108e1565b3480156102d057600080fd5b50610121600160a060020a036004351661097f565b3480156102f157600080fd5b50610121600160a060020a0360043516610a1d565b34801561031257600080fd5b5061031b610a32565b60408051600160a060020a039092168252519081900360200190f35b60006020819052908152604090205460ff1681565b6000610357336104df565b60606040519081016040528060248152602001600080516020610c29833981519152815260200160e060020a63636573730281525090151561041a5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156103df5781810151838201526020016103c7565b50505050905090810190601f16801561040c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050600255600190565b600061042f336104df565b60606040519081016040528060248152602001600080516020610c29833981519152815260200160e060020a6363657373028152509015156104b65760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156103df5781810151838201526020016103c7565b506104c08361034c565b80156104d057506104d0826104fd565b90505b92915050565b60035481565b600160a060020a031660009081526020819052604090205460ff1690565b6000610508336104df565b60606040519081016040528060248152602001600080516020610c29833981519152815260200160e060020a63636573730281525090151561058f5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156103df5781810151838201526020016103c7565b5050600355600190565b60055481565b6000806105ab336108c3565b60606040519081016040528060248152602001600080516020610c29833981519152815260200160e060020a6363657373028152509015156106325760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156103df5781810151838201526020016103c7565b5061063b610716565b90508083111561064a57600080fd5b61065a818463ffffffff610a4116565b600555426004908155600654604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a038881169482019490945260248101879052905192909116916340c10f19916044808201926020929091908290030181600087803b1580156106d557600080fd5b505af11580156106e9573d6000803e3d6000fd5b505050506040513d60208110156106ff57600080fd5b5051151561070c57600080fd5b5060019392505050565b600080600061073060045442610a4190919063ffffffff16565b915061075960055461074d84600354610a5390919063ffffffff16565b9063ffffffff610a7c16565b9050806002541061076a578061076e565b6002545b9250505090565b6000610780336104df565b60606040519081016040528060248152602001600080516020610c29833981519152815260200160e060020a6363657373028152509015156108075760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156103df5781810151838201526020016103c7565b50610813826001610a89565b50919050565b60025481565b600061082a336104df565b60606040519081016040528060248152602001600080516020610c29833981519152815260200160e060020a6363657373028152509015156108b15760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156103df5781810151838201526020016103c7565b50610813826001610b59565b60045481565b600160a060020a031660009081526001602052604090205460ff1690565b60006108ec336104df565b60606040519081016040528060248152602001600080516020610c29833981519152815260200160e060020a6363657373028152509015156109735760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156103df5781810151838201526020016103c7565b50610813826000610a89565b600061098a336104df565b60606040519081016040528060248152602001600080516020610c29833981519152815260200160e060020a636365737302815250901515610a115760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156103df5781810151838201526020016103c7565b50610813826000610b59565b60016020526000908152604090205460ff1681565b600654600160a060020a031681565b600082821115610a4d57fe5b50900390565b6000821515610a64575060006104d3565b50818102818382811515610a7457fe5b04146104d357fe5b818101828110156104d357fe5b600160a060020a03821660009081526020819052604081205460ff1615158215151415610ab557600080fd5b600160a060020a0383166000908152602081905260409020805460ff19168315801591909117909155610b1b57604051600160a060020a038416907fac1e9ef41b54c676ccf449d83ae6f2624bcdce8f5b93a6b48ce95874c332693d90600090a2610b50565b604051600160a060020a038416907fbaefbfc44c4c937d4905d8a50bef95643f586e33d78f3d1998a10b992b68bdcc90600090a25b50600192915050565b600160a060020a03821660009081526001602052604081205460ff1615158215151415610b8557600080fd5b600160a060020a0383166000908152600160205260409020805460ff19168315801591909117909155610beb57604051600160a060020a038416907f16baa937b08d58713325f93ac58b8a9369a4359bbefb4957d6d9b402735722ab90600090a2610b50565b604051600160a060020a038416907f4a59e6ea1f075b8fb09f3b05c8b3e9c68b31683a887a4d692078957c58a12be390600090a2506001929150505600446f65736e2774206861766520656e6f7567682072696768747320746f206163a165627a7a723058205120cdd2243746fc7e744ef5fe4e2294c0e027bf5a35d1c3e4099285764680a00029000000000000000000000000b6b4f1f49f6f52d071487031f2c55a267d76063000000000000000000000000000000000000000000052b7d2dcc80cd2e400000000000000000000000000000000000000000000000052b7d2dcc80cd2e4000000",
  "constructorArguments": "000000000000000000000000b6b4f1f49f6f52d071487031f2c55a267d76063000000000000000000000000000000000000000000052b7d2dcc80cd2e400000000000000000000000000000000000000000000000052b7d2dcc80cd2e4000000"
}