{
  "address": "0xb547027a4ccd46ec98199fa88aaedf5aa981db26",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Fake_Phishing2581",
  "contractName": "ThreeDayProfits",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-20\n*/\n\npragma solidity ^0.4.24;\n\n/**\n*\n3DAYS\n*/\ncontract ThreeDayProfits{\n    \n    using SafeMath for uint256;\n\n    mapping(address => uint256) investments;\n    mapping(address => uint256) joined;\n    mapping(address => uint256) withdrawals;\n    mapping(address => uint256) referrer;\n\n    uint256 public minimum = 10000000000000000;\n    uint256 public step = 33;\n    address public ownerWallet;\n    address public owner;\n    address public bountyManager;\n    address promoter = 0x20007c6aa01e6a0e73d1baB69666438FF43B5ed8;\n\n    event Invest(address investor, uint256 amount);\n    event Withdraw(address investor, uint256 amount);\n    event Bounty(address hunter, uint256 amount);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n    /**\n     * @dev Ð¡onstructor Sets the original roles of the contract \n     */\n     \n    constructor(address _bountyManager) public {\n        owner = msg.sender;\n        ownerWallet = msg.sender;\n        bountyManager = _bountyManager;\n    }\n\n    /**\n     * @dev Modifiers\n     */\n     \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyBountyManager() {\n        require(msg.sender == bountyManager);\n        _;\n\t}\n\n    /**\n     * @dev Allows current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     * @param newOwnerWallet The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner, address newOwnerWallet) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        ownerWallet = newOwnerWallet;\n    }\n\n    /**\n     * @dev Investments\n     */\n    function () external payable {\n        require(msg.value >= minimum);\n        if (investments[msg.sender] > 0){\n            if (withdraw()){\n                withdrawals[msg.sender] = 0;\n            }\n        }\n        investments[msg.sender] = investments[msg.sender].add(msg.value);\n        joined[msg.sender] = block.timestamp;\n        ownerWallet.transfer(msg.value.div(100).mul(5));\n        promoter.transfer(msg.value.div(100).mul(5));\n        emit Invest(msg.sender, msg.value);\n    }\n\n    /**\n    * @dev Evaluate current balance\n    * @param _address Address of investor\n    */\n    function getBalance(address _address) view public returns (uint256) {\n        uint256 minutesCount = now.sub(joined[_address]).div(1 minutes);\n        uint256 percent = investments[_address].mul(step).div(100);\n        uint256 different = percent.mul(minutesCount).div(1440);\n        uint256 balance = different.sub(withdrawals[_address]);\n\n        return balance;\n    }\n\n    /**\n    * @dev Withdraw dividends from contract\n    */\n    function withdraw() public returns (bool){\n        require(joined[msg.sender] > 0);\n        uint256 balance = getBalance(msg.sender);\n        if (address(this).balance > balance){\n            if (balance > 0){\n                withdrawals[msg.sender] = withdrawals[msg.sender].add(balance);\n                msg.sender.transfer(balance);\n                emit Withdraw(msg.sender, balance);\n            }\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    /**\n    * @dev Bounty reward\n    */\n    function bounty() public {\n        uint256 refBalance = checkReferral(msg.sender);\n        if(refBalance >= minimum) {\n             if (address(this).balance > refBalance) {\n                referrer[msg.sender] = 0;\n                msg.sender.transfer(refBalance);\n                emit Bounty(msg.sender, refBalance);\n             }\n        }\n    }\n\n    /**\n    * @dev Gets balance of the sender address.\n    * @return An uint256 representing the amount owned by the msg.sender.\n    */\n    function checkBalance() public view returns (uint256) {\n        return getBalance(msg.sender);\n    }\n\n    /**\n    * @dev Gets withdrawals of the specified address.\n    * @param _investor The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function checkWithdrawals(address _investor) public view returns (uint256) {\n        return withdrawals[_investor];\n    }\n\n    /**\n    * @dev Gets investments of the specified address.\n    * @param _investor The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function checkInvestments(address _investor) public view returns (uint256) {\n        return investments[_investor];\n    }\n\n    /**\n    * @dev Gets referrer balance of the specified address.\n    * @param _hunter The address of the referrer\n    * @return An uint256 representing the referral earnings.\n    */\n    function checkReferral(address _hunter) public view returns (uint256) {\n        return referrer[_hunter];\n    }\n    \n    /**\n    * @dev Updates referrer balance \n    * @param _hunter The address of the referrer\n    * @param _amount An uint256 representing the referral earnings.\n    */\n    function updateReferral(address _hunter, uint256 _amount) onlyBountyManager public {\n        referrer[_hunter] = referrer[_hunter].add(_amount);\n    }\n    \n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "bytecode": "6080604052662386f26fc10000600455602160055560098054600160a060020a0319167320007c6aa01e6a0e73d1bab69666438ff43b5ed817905534801561004657600080fd5b5060405160208061090f83398101604052516007805433600160a060020a0319918216811790925560068054821690921790915560088054909116600160a060020a0390921691909117905561086e806100a16000396000f3006080604052600436106100cf5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630c19f80e81146102325780633ccfd60b1461026557806352d6804d1461028e5780636d435421146102a3578063835c1154146102cc5780638da5cb5b146102ed5780639335dcb71461031e578063943dfef1146103335780639d9fcc7214610348578063b36b9ffd14610369578063c71daccb1461037e578063d3cde1a514610393578063e25fe175146103b7578063f8b2cb4f146103cc575b6004543410156100de57600080fd5b336000908152602081905260408120541115610112576100fc6103ed565b1561011257336000908152600260205260408120555b33600090815260208190526040902054610132903463ffffffff6104d416565b33600090815260208181526040808320939093556001905220429055600654600160a060020a03166108fc61017f600561017334606463ffffffff6104ee16565b9063ffffffff61050516565b6040518115909202916000818181858888f193505050501580156101a7573d6000803e3d6000fd5b50600954600160a060020a03166108fc6101cd600561017334606463ffffffff6104ee16565b6040518115909202916000818181858888f193505050501580156101f5573d6000803e3d6000fd5b506040805133815234602082015281517fd90d253a9de34d2fdd5a75ae49ea17fcb43af32fc8ea08cc6d2341991dd3872e929181900390910190a1005b34801561023e57600080fd5b50610253600160a060020a0360043516610530565b60408051918252519081900360200190f35b34801561027157600080fd5b5061027a6103ed565b604080519115158252519081900360200190f35b34801561029a57600080fd5b5061025361054b565b3480156102af57600080fd5b506102ca600160a060020a0360043581169060243516610551565b005b3480156102d857600080fd5b50610253600160a060020a03600435166105f2565b3480156102f957600080fd5b5061030261060d565b60408051600160a060020a039092168252519081900360200190f35b34801561032a57600080fd5b5061030261061c565b34801561033f57600080fd5b506102ca61062b565b34801561035457600080fd5b50610253600160a060020a03600435166106c6565b34801561037557600080fd5b506103026106e1565b34801561038a57600080fd5b506102536106f0565b34801561039f57600080fd5b506102ca600160a060020a0360043516602435610700565b3480156103c357600080fd5b50610253610760565b3480156103d857600080fd5b50610253600160a060020a0360043516610766565b336000908152600160205260408120548190811061040a57600080fd5b61041333610766565b905030318110156104cb5760008111156104c25733600090815260026020526040902054610447908263ffffffff6104d416565b33600081815260026020526040808220939093559151909183156108fc02918491818181858888f19350505050158015610485573d6000803e3d6000fd5b50604080513381526020810183905281517f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364929181900390910190a15b600191506104d0565b600091505b5090565b6000828201838110156104e357fe5b8091505b5092915050565b60008082848115156104fc57fe5b04949350505050565b60008083151561051857600091506104e7565b5082820282848281151561052857fe5b04146104e357fe5b600160a060020a031660009081526003602052604090205490565b60045481565b600754600160a060020a0316331461056857600080fd5b600160a060020a038216151561057d57600080fd5b600754604051600160a060020a038085169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360078054600160a060020a0393841673ffffffffffffffffffffffffffffffffffffffff199182161790915560068054929093169116179055565b600160a060020a031660009081526020819052604090205490565b600754600160a060020a031681565b600654600160a060020a031681565b600061063633610530565b60045490915081106106c35730318110156106c357336000818152600360205260408082208290555183156108fc0291849190818181858888f19350505050158015610686573d6000803e3d6000fd5b50604080513381526020810183905281517f4cc4e2a1284006914465e82a99bce908c3ad5b5d4b08fbef40faf68169cee2a8929181900390910190a15b50565b600160a060020a031660009081526002602052604090205490565b600854600160a060020a031681565b60006106fb33610766565b905090565b600854600160a060020a0316331461071757600080fd5b600160a060020a038216600090815260036020526040902054610740908263ffffffff6104d416565b600160a060020a0390921660009081526003602052604090209190915550565b60055481565b600160a060020a03811660009081526001602052604081205481908190819081906107ab90603c9061079f90429063ffffffff61083016565b9063ffffffff6104ee16565b600554600160a060020a0388166000908152602081905260409020549195506107e19160649161079f919063ffffffff61050516565b92506107f96105a061079f858763ffffffff61050516565b600160a060020a03871660009081526002602052604090205490925061082690839063ffffffff61083016565b9695505050505050565b60008282111561083c57fe5b509003905600a165627a7a72305820e4f5440a5c2a6295f19fa369b88f30052b6308c0c9cdf828c86e35393cb3121b0029000000000000000000000000af9c025ce6322a23ac00301c714f4f42895c9818",
  "constructorArguments": "000000000000000000000000af9c025ce6322a23ac00301c714f4f42895c9818"
}