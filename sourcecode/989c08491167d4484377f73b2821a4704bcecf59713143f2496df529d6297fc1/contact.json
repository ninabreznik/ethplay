{
  "address": "0xc126924e4d8138479d1d68a699bf4c707638c161",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FuseaNetwork",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-21\n*/\n\npragma solidity 0.4.18;\n\ncontract FuseaNetwork {\n\n    string public symbol = \"FSA\";\n    string public name = \"Fusea Network\";\n    uint8 public constant decimals = 18;\n    uint256 _totalSupply = 0;\t\n\tuint256 _MaxDistribPublicSupply = 400000000;\n\tuint256 _BonusTokensPerETHSended = 500000;\n    uint256 _OwnerDistribSupply = 0;\n    uint256 _CurrentDistribPublicSupply = 0;   \n\taddress _DistribFundsReceiverAddress = 0;\n    address _remainingTokensReceiverAddress = 0;\n    address owner = 0;\t\t\n    uint256 _ML1 = 2;\n    uint256 _ML2 = 2;\n\tuint256 _ML3 = 2;\n\tuint256 _ML4 = 2;\n    uint256 _LimitML1 = 4e15;\n    uint256 _LimitML2 = 6e15;\n\tuint256 _LimitML3 = 8e15;\n\tuint256 _LimitML4 = 12e15;\t\n\n\t\n\t\n    bool setupDone = false;\n    bool IsDistribRunning = false;\n    bool DistribStarted = false;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Burn(address indexed _owner, uint256 _value);\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n    mapping(address => bool) public Claimed;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function FuseaNetwork() public {\n        owner = msg.sender;\n    }\n\n        function() public payable {\n        if (IsDistribRunning) {\n            uint256 _amount;\n            if (((_CurrentDistribPublicSupply + _amount) > _MaxDistribPublicSupply) && _MaxDistribPublicSupply > 0) revert();\n            if (!_DistribFundsReceiverAddress.send(msg.value)) revert();\n            \n            \n            \t   if (msg.value >= 12e15) {\n            _amount = msg.value * _BonusTokensPerETHSended * 2;\n            } else {\n\t\t               if (msg.value >= 8e15) {\n            _amount = msg.value * _BonusTokensPerETHSended * 2;\n            } else {\n                if (msg.value >= 6e15) {\n                    _amount = msg.value * _BonusTokensPerETHSended * 2;\n                } else {\n                    if (msg.value >= 4e15) {\n                        _amount = msg.value * _BonusTokensPerETHSended * 2;\n                    } else {\n\n                        _amount = msg.value * _BonusTokensPerETHSended;\n\n                    }\n                 }    \n              }\n           }\n\t\t\t \n\t\t\t _CurrentDistribPublicSupply += _amount;\n                balances[msg.sender] += _amount;\n                _totalSupply += _amount;\n                Transfer(this, msg.sender, _amount);\n        \n\n\n\n        } else {\n            revert();\n        }\n    }\n\n    function SetupFuseaNetwork(string tokenName, string tokenSymbol, uint256 BonusTokensPerETHSended, uint256 MaxDistribPublicSupply, uint256 OwnerDistribSupply, address remainingTokensReceiverAddress, address DistribFundsReceiverAddress) public {\n        if (msg.sender == owner && !setupDone) {\n            symbol = tokenSymbol;\n            name = tokenName;\n            _BonusTokensPerETHSended = BonusTokensPerETHSended;\n            _MaxDistribPublicSupply = MaxDistribPublicSupply * 1e18;\n            if (OwnerDistribSupply > 0) {\n                _OwnerDistribSupply = OwnerDistribSupply * 1e18;\n                _totalSupply = _OwnerDistribSupply;\n                balances[owner] = _totalSupply;\n                _CurrentDistribPublicSupply += _totalSupply;\n                Transfer(this, owner, _totalSupply);\n            }\n            _DistribFundsReceiverAddress = DistribFundsReceiverAddress;\n            if (_DistribFundsReceiverAddress == 0) _DistribFundsReceiverAddress = owner;\n            _remainingTokensReceiverAddress = remainingTokensReceiverAddress;\n\n            setupDone = true;\n        }\n    }\n\n    function SetupML(uint256 ML1inX, uint256 ML2inX, uint256 LimitML1inWei, uint256 LimitML2inWei) onlyOwner public {\n        _ML1 = ML1inX;\n        _ML2 = ML2inX;\n        _LimitML1 = LimitML1inWei;\n        _LimitML2 = LimitML2inWei;\n        \n    }\n\n    function SetBonus(uint256 BonusTokensPerETHSended) onlyOwner public {\n        _BonusTokensPerETHSended = BonusTokensPerETHSended;\n    }\n\n   \n    function StartFuseaNetworkDistribution() public returns(bool success) {\n        if (msg.sender == owner && !DistribStarted && setupDone) {\n            DistribStarted = true;\n            IsDistribRunning = true;\n        } else {\n            revert();\n        }\n        return true;\n    }\n\n    function StopFuseaNetworkDistribution() public returns(bool success) {\n        if (msg.sender == owner && IsDistribRunning) {\n            if (_remainingTokensReceiverAddress != 0 && _MaxDistribPublicSupply > 0) {\n                uint256 _remainingAmount = _MaxDistribPublicSupply - _CurrentDistribPublicSupply;\n                if (_remainingAmount > 0) {\n                    balances[_remainingTokensReceiverAddress] += _remainingAmount;\n                    _totalSupply += _remainingAmount;\n                    Transfer(this, _remainingTokensReceiverAddress, _remainingAmount);\n                }\n            }\n            DistribStarted = false;\n            IsDistribRunning = false;\n        } else {\n            revert();\n        }\n        return true;\n    }\n\n    function distribution(address[] addresses, uint256 _amount) onlyOwner public {\n\n        uint256 _remainingAmount = _MaxDistribPublicSupply - _CurrentDistribPublicSupply;\n        require(addresses.length <= 255);\n        require(_amount <= _remainingAmount);\n        _amount = _amount * 1e18;\n\n        for (uint i = 0; i < addresses.length; i++) {\n            require(_amount <= _remainingAmount);\n            _CurrentDistribPublicSupply += _amount;\n            balances[addresses[i]] += _amount;\n            _totalSupply += _amount;\n            Transfer(this, addresses[i], _amount);\n\n        }\n\n        if (_CurrentDistribPublicSupply >= _MaxDistribPublicSupply) {\n            DistribStarted = false;\n            IsDistribRunning = false;\n        }\n    }\n\n    function distributeAmounts(address[] addresses, uint256[] amounts) onlyOwner public {\n\n        uint256 _remainingAmount = _MaxDistribPublicSupply - _CurrentDistribPublicSupply;\n        uint256 _amount;\n\n        require(addresses.length <= 255);\n        require(addresses.length == amounts.length);\n\n        for (uint8 i = 0; i < addresses.length; i++) {\n            _amount = amounts[i] * 1e18;\n            require(_amount <= _remainingAmount);\n            _CurrentDistribPublicSupply += _amount;\n            balances[addresses[i]] += _amount;\n            _totalSupply += _amount;\n            Transfer(this, addresses[i], _amount);\n\n\n            if (_CurrentDistribPublicSupply >= _MaxDistribPublicSupply) {\n                DistribStarted = false;\n                IsDistribRunning = false;\n            }\n        }\n    }\n\n    function BurnFSATokens(uint256 amount) public returns(bool success) {\n        uint256 _amount = amount * 1e18;\n        if (balances[msg.sender] >= _amount) {\n            balances[msg.sender] -= _amount;\n            _totalSupply -= _amount;\n            Burn(msg.sender, _amount);\n            Transfer(msg.sender, 0, _amount);\n        } else {\n            revert();\n        }\n        return true;\n    }\n\n    function totalSupply() public constant returns(uint256 totalSupplyValue) {\n        return _totalSupply;\n    }\n\n    function MaxDistribPublicSupply_() public constant returns(uint256 MaxDistribPublicSupply) {\n        return _MaxDistribPublicSupply;\n    }\n\n    function OwnerDistribSupply_() public constant returns(uint256 OwnerDistribSupply) {\n        return _OwnerDistribSupply;\n    }\n\n    function CurrentDistribPublicSupply_() public constant returns(uint256 CurrentDistribPublicSupply) {\n        return _CurrentDistribPublicSupply;\n    }\n\n    function RemainingTokensReceiverAddress() public constant returns(address remainingTokensReceiverAddress) {\n        return _remainingTokensReceiverAddress;\n    }\n\n    function DistribFundsReceiverAddress() public constant returns(address DistribfundsReceiver) {\n        return _DistribFundsReceiverAddress;\n    }\n\n    function Owner() public constant returns(address ownerAddress) {\n        return owner;\n    }\n\n    function SetupDone() public constant returns(bool setupDoneFlag) {\n        return setupDone;\n    }\n\n    function IsDistribRunningFalg_() public constant returns(bool IsDistribRunningFalg) {\n        return IsDistribRunning;\n    }\n\n    function IsDistribStarted() public constant returns(bool IsDistribStartedFlag) {\n        return DistribStarted;\n    }\n\n    function balanceOf(address _owner) public constant returns(uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _amount) public returns(bool success) {\n        if (balances[msg.sender] >= _amount &&\n            _amount > 0 &&\n            balances[_to] + _amount > balances[_to]) {\n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) public returns(bool success) {\n        if (balances[_from] >= _amount &&\n            allowed[_from][msg.sender] >= _amount &&\n            _amount > 0 &&\n            balances[_to] + _amount > balances[_to]) {\n            balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function approve(address _spender, uint256 _amount) public returns(bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns(uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}",
  "bytecode": "606060405260408051908101604052600381527f4653410000000000000000000000000000000000000000000000000000000000602082015260009080516200004d92916020019062000154565b5060408051908101604052600d81527f4675736561204e6574776f726b00000000000000000000000000000000000000602082015260019080516200009792916020019062000154565b50600060028181556317d784006003556207a120600455600582905560069190915560078054600160a060020a03199081169091556008805482169055600980549091169055600a819055600b819055600c819055600d55660e35fa931a0000600e55661550f7dca70000600f55661c6bf526340000601055662aa1efb94e00006011556012805462ffffff1916905534156200013357600080fd5b60098054600160a060020a03191633600160a060020a0316179055620001f9565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019757805160ff1916838001178555620001c7565b82800160010185558215620001c7579182015b82811115620001c7578251825591602001919060010190620001aa565b50620001d5929150620001d9565b5090565b620001f691905b80821115620001d55760008155600101620001e0565b90565b61124780620002096000396000f30060606040526004361061015e5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146102a5578063095ea7b31461032f57806318160ddd146103655780631b4a93aa1461038a5780631d1cc62214610444578063238e9de71461045757806323b872dd1461046a578063313ce56714610492578063337748b8146104bb5780633faaef28146104ce5780634d9a81d4146104e457806370a08231146104f757806380ea82731461051657806395d89b411461052c578063a8c310d51461053f578063a9059cbb146105ce578063accbdfd0146105f0578063b449c24d14610603578063b4a99a4e14610622578063becf917f14610651578063c21bbe5614610664578063c52cb00314610677578063d21ceba01461068a578063d4d42c911461069d578063d8489a81146106bc578063dd62ed3e146106cf578063f3e4877c146106f4575b601254600090610100900460ff161561029d57600354816006540111801561018857506000600354115b1561019257600080fd5b600754600160a060020a03163480156108fc0290604051600060405180830381858888f1935050505015156101c657600080fd5b662aa1efb94e000034106101e35760045434026002029050610241565b661c6bf52634000034106102005760045434026002029050610241565b661550f7dca70000341061021d5760045434026002029050610241565b660e35fa931a0000341061023a5760045434026002029050610241565b5060045434025b6006805482019055600160a060020a0333811660008181526013602052604090819020805485019055600280548501905590913016906000805160206111fc8339815191529084905190815260200160405180910390a36102a2565b600080fd5b50005b34156102b057600080fd5b6102b8610745565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102f45780820151838201526020016102dc565b50505050905090810190601f1680156103215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561033a57600080fd5b610351600160a060020a03600435166024356107e3565b604051901515815260200160405180910390f35b341561037057600080fd5b610378610850565b60405190815260200160405180910390f35b341561039557600080fd5b61044260046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650508435946020810135945060408101359350600160a060020a03606082013581169350608090910135169050610857565b005b341561044f57600080fd5b6103786109cf565b341561046257600080fd5b6103516109d5565b341561047557600080fd5b610351600160a060020a0360043581169060243516604435610aa4565b341561049d57600080fd5b6104a5610bad565b60405160ff909116815260200160405180910390f35b34156104c657600080fd5b610351610bb2565b34156104d957600080fd5b610351600435610c11565b34156104ef57600080fd5b610351610cd0565b341561050257600080fd5b610378600160a060020a0360043516610cdf565b341561052157600080fd5b610442600435610cfa565b341561053757600080fd5b6102b8610d1a565b341561054a57600080fd5b610442600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843750949650610d8595505050505050565b34156105d957600080fd5b610351600160a060020a0360043516602435610ed1565b34156105fb57600080fd5b610351610f87565b341561060e57600080fd5b610351600160a060020a0360043516610f95565b341561062d57600080fd5b610635610faa565b604051600160a060020a03909116815260200160405180910390f35b341561065c57600080fd5b610635610fb9565b341561066f57600080fd5b610351610fc8565b341561068257600080fd5b610378610fd1565b341561069557600080fd5b610635610fd7565b34156106a857600080fd5b610442600435602435604435606435610fe6565b34156106c757600080fd5b610378611015565b34156106da57600080fd5b610378600160a060020a036004358116906024351661101b565b34156106ff57600080fd5b6104426004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650509335935061104692505050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107db5780601f106107b0576101008083540402835291602001916107db565b820191906000526020600020905b8154815290600101906020018083116107be57829003601f168201915b505050505081565b600160a060020a03338116600081815260146020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b6002545b90565b60095433600160a060020a039081169116148015610878575060125460ff16155b156109c657600086805161089092916020019061116d565b5060018780516108a492916020019061116d565b506004859055670de0b6b3a76400008402600355600083111561092b57670de0b6b3a764000083026005819055600281905560098054600160a060020a03908116600090815260136020526040908190208490556006805485019055915481169230909116916000805160206111fc83398151915291905190815260200160405180910390a35b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038381169190911791829055161515610990576009546007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039092169190911790555b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384161790556012805460ff191660011790555b50505050505050565b60065490565b600954600090819033600160a060020a0390811691161480156109ff5750601254610100900460ff165b1561029d57600854600160a060020a031615801590610a2057506000600354115b15610a8f5750600654600354036000811115610a8f5760088054600160a060020a03908116600090815260136020526040908190208054850190556002805485019055915481169130909116906000805160206111fc8339815191529084905190815260200160405180910390a35b6012805462ffff0019169055600191505b5090565b600160a060020a038316600090815260136020526040812054829010801590610af45750600160a060020a0380851660009081526014602090815260408083203390941683529290522054829010155b8015610b005750600082115b8015610b255750600160a060020a038316600090815260136020526040902054828101115b15610ba257600160a060020a0380851660008181526013602081815260408084208054899003905560148252808420338716855282528084208054899003905594881680845291905290839020805486019055916000805160206111fc8339815191529085905190815260200160405180910390a3506001610ba6565b5060005b9392505050565b601281565b60095460009033600160a060020a039081169116148015610bdc575060125462010000900460ff16155b8015610bea575060125460ff165b1561029d576012805461ff001962ff00001990911662010000171661010017905550600190565b600160a060020a033316600090815260136020526040812054670de0b6b3a764000083029081901061029d57600160a060020a03331660008181526013602052604090819020805484900390556002805484900390557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59083905190815260200160405180910390a2600033600160a060020a03166000805160206111fc8339815191528360405190815260200160405180910390a350600192915050565b60125462010000900460ff1690565b600160a060020a031660009081526013602052604090205490565b60095433600160a060020a03908116911614610d1557600080fd5b600455565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107db5780601f106107b0576101008083540402835291602001916107db565b6009546000908190819033600160a060020a03908116911614610da757600080fd5b60065460035403925060ff85511115610dbf57600080fd5b8351855114610dcd57600080fd5b5060005b84518160ff161015610eca57838160ff1681518110610dec57fe5b90602001906020020151670de0b6b3a764000002915082821115610e0f57600080fd5b600680548301905581601360008760ff851681518110610e2b57fe5b90602001906020020151600160a060020a0316815260208101919091526040016000208054909101905560028054830190558460ff821681518110610e6c57fe5b90602001906020020151600160a060020a031630600160a060020a03166000805160206111fc8339815191528460405190815260200160405180910390a360035460065410610ec2576012805462ffff00191690555b600101610dd1565b5050505050565b600160a060020a033316600090815260136020526040812054829010801590610efa5750600082115b8015610f1f5750600160a060020a038316600090815260136020526040902054828101115b15610f7f57600160a060020a033381166000818152601360205260408082208054879003905592861680825290839020805486019055916000805160206111fc8339815191529085905190815260200160405180910390a350600161084a565b50600061084a565b601254610100900460ff1690565b60156020526000908152604090205460ff1681565b600954600160a060020a031690565b600754600160a060020a031690565b60125460ff1690565b60055490565b600854600160a060020a031690565b60095433600160a060020a0390811691161461100157600080fd5b600a93909355600b91909155600e55600f55565b60035490565b600160a060020a03918216600090815260146020908152604080832093909416825291909152205490565b600954600090819033600160a060020a0390811691161461106657600080fd5b60065460035403915060ff8451111561107e57600080fd5b8183111561108b57600080fd5b50670de0b6b3a76400009091029060005b835181101561114f57818311156110b257600080fd5b600680548401905582601360008684815181106110cb57fe5b90602001906020020151600160a060020a03168152602081019190915260400160002080549091019055600280548401905583818151811061110957fe5b90602001906020020151600160a060020a031630600160a060020a03166000805160206111fc8339815191528560405190815260200160405180910390a360010161109c565b60035460065410611167576012805462ffff00191690555b50505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106111ae57805160ff19168380011785556111db565b828001600101855582156111db579182015b828111156111db5782518255916020019190600101906111c0565b50610aa0926108549250905b80821115610aa057600081556001016111e75600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058209c0a3c64b94f75bf699b2ca04e22a6c69e0f7d3158c1091938a82316123f6af70029"
}