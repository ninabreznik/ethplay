{
  "address": "0xfdb0065240753fef4880a9cc7876be59e09d78bb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoCow",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-31\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20Interface {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  \n}\n\ncontract ApproveAndCallFallBack {\n  function receiveApproval(address from, uint256 value, address token, bytes data) public;\n}\n\ncontract ERC20Token is Ownable, ERC20Interface {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n  mapping(address => mapping(address => uint256)) internal allowed;\n\n  function balanceOf(address _owner) public view returns (uint256){\n    return balances[_owner];\n  }\n  function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    return _transfer(msg.sender,_to,_value);\n  }\n\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(msg.sender != _from);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    return _transfer(_from, _to, _value);\n  }\n\n  event Burn(address indexed from, uint256 value);\n\n  function burnFrom(address _from, uint _value) public returns (bool) {\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    balances[_from] = balances[_from].sub(_value);\n    totalSupply = totalSupply.sub(_value);\n    emit Burn(_from, _value);\n    return true;\n  }\n  function approveAndCall(address _spender, uint _value, bytes data) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    ApproveAndCallFallBack(_spender).receiveApproval(msg.sender, _value, this, data);\n    return true;\n  }\n}\n\ncontract CryptoCow is ERC20Token{\n  using SafeMath for uint256;\n\n  uint256 constant _190EC6 = 1642182;\n  uint256 constant _C8763 = 821091;\n  constructor(uint256 initialSupply) public payable{\n    totalSupply = initialSupply;\n    balances[0xbeef] = initialSupply;\n    name = \"CryptoCow\";\n    symbol = \"COW\";\n    decimals = 18;\n  }\n  function () public payable{\n  }\n\n  event Award(address indexed awardee, uint256 amount);\n\n  function award(address _awardee, uint256 _amount) public onlyOwner {\n    balances[_awardee] = balances[_awardee].add(_amount);\n    balances[0xbeef] = balances[0xbeef].add(_amount.div(10));\n    totalSupply = totalSupply.add(_amount.mul(11).div(10));\n    emit Award(_awardee, _amount);\n  }\n\n  function selltoken(uint256 _amount) public {\n    uint256 tokenValue = calculateTokenSell(_amount);\n    _transfer(msg.sender, 0xbeef, _amount);\n    tokenValue = tokenValue.sub(tokenValue.div(40));\n    msg.sender.transfer(tokenValue);\n  }\n\n  function buyToken() public payable {\n    uint256 tokenBought = calculateTokenBuy(msg.value, address(this).balance.sub(msg.value));\n    tokenBought = tokenBought.sub(tokenBought.div(40));\n    _transfer(0xbeef, msg.sender, tokenBought);\n  }\n  //magic formula from EtherShrimpFarm\n  function calculateTrade(uint256 rt, uint256 rs, uint256 bs) public pure returns (uint256) {\n    //(_190EC6*bs)/(_C8763+((_190EC6*rs+_C8763*rt)/rt));\n    return _190EC6.mul(bs).div(_C8763.add(_190EC6.mul(rs).add(_C8763.mul(rt)).div(rt)));\n  }\n  function calculateTokenSell(uint256 amount) public view returns (uint256) {\n    return calculateTrade(amount, balances[0xbeef], address(this).balance);\n  }\n  function calculateTokenBuy(uint256 eth, uint256 contractBalance) public view returns (uint256) {\n    return calculateTrade(eth, contractBalance, balances[0xbeef]);\n  }\n  function calculateTokenBuySimple(uint256 eth) public view returns (uint256) {\n    return calculateTokenBuy(eth, address(this).balance);\n  }\n  function getBalance() public view returns (uint256) {\n    return address(this).balance;\n  }\n  function poolTokenBalance() public view returns (uint256) {\n    return balances[0xbeef];\n  }\n  function transferAnyERC20Token(address tokenAddress, uint _value) public onlyOwner returns (bool success) {\n    return ERC20Interface(tokenAddress).transfer(owner, _value);\n  }\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000000000000000000000000000046f7492df510d1745"
}