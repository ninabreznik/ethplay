{
  "address": "0x174177908042e205729a73a8b7da37e5ec824105",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Asset",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-09\n*/\n\npragma solidity ^0.4.11;\n/*\nToken Contract with batch assignments\n\nERC-20 Token Standar Compliant - ConsenSys\n\nContract developer: Fares A. Akel C.\n[emailÂ protected]\nMIT PGP KEY ID: 078E41CB\n*/\n\n/**\n * @title SafeMath by OpenZeppelin\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract admined { //This token contract is administered\n    address public admin; //Admin address is public\n\n    function admined() internal {\n        admin = msg.sender; //Set initial admin to contract creator\n        Admined(admin);\n    }\n\n    modifier onlyAdmin() { //A modifier to define admin-only functions\n        require(msg.sender == admin);\n        _;\n    }\n\n    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\n        admin = _newAdmin;\n        TransferAdminship(admin);\n    }\n\n\n    //All admin actions have a log for public review\n    event SetLock(uint timeInMins);\n    event TransferAdminship(address newAdminister);\n    event Admined(address administer);\n\n}\n\ncontract Token is admined {\n\n    uint256 public totalSupply;\n    mapping (address => uint256) balances; //Balances mapping\n    mapping (address => mapping (address => uint256)) allowed; //Allowance mapping\n\n    function balanceOf(address _owner) public constant returns (uint256 bal) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n        balances[_to] = SafeMath.add(balances[_to], _value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n        balances[_to] = SafeMath.add(balances[_to], _value);\n        balances[_from] = SafeMath.sub(balances[_from], _value);\n        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    //This is an especial Admin-only function to make massive tokens assignments\n    //It is optimized to waste the less gass possible\n    //It mint the tokens to distribute\n    function batch(address[] data,uint256 amount) onlyAdmin public { //It takes an array of addresses and an amount\n        uint256 length = data.length;\n        for (uint i=0; i<length; i++) { //It moves over the array\n            transfer(data[i],amount); //Add an amount to the target address\n        }\n    }\n\n    //Events to log transactions\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract Asset is admined, Token {\n\n    string public name;\n    uint8 public decimals = 18;\n    string public symbol;\n    string public version = '0.1';\n\n    function Asset(\n        string _tokenName,\n        string _tokenSymbol,\n        uint256 _initialAmount\n        ) public {\n        balances[msg.sender] = _initialAmount;\n        totalSupply = _initialAmount; //Total supply is the initial amount at Asset\n        name = _tokenName; //Name set on deployment\n        symbol = _tokenSymbol; //Simbol set on deployment\n        Transfer(0, this, _initialAmount);\n        Transfer(this, msg.sender, _initialAmount);\n    }\n\n    function() public {\n        revert();\n    }\n\n}",
  "bytecode": "60606040526012600560006101000a81548160ff021916908360ff1602179055506040805190810160405280600381526020017f302e310000000000000000000000000000000000000000000000000000000000815250600790805190602001906200006d929190620002ac565b5034156200007a57600080fd5b604051620014593803806200145983398101604052808051820191906020018051820191906020018051906020019091905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fa2b0867ddc9434a6620c27aae2ee7b19d3db53f3e7f059bdbecc3f2091e24f776000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a180600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806001819055508260049080519060200190620001d4929190620002ac565b508160069080519060200190620001ed929190620002ac565b503073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a33373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050506200035b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002ef57805160ff191683800117855562000320565b8280016001018555821562000320579182015b828111156200031f57825182559160200191906001019062000302565b5b5090506200032f919062000333565b5090565b6200035891905b80821115620003545760008160009055506001016200033a565b5090565b90565b6110ee806200036b6000396000f3006060604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d5578063095ea7b31461016357806318160ddd146101bd57806323b872dd146101e6578063313ce5671461025f57806354fd4d501461028e5780635be7cc161461031c57806370a082311461035557806393331892146103a257806395d89b4114610405578063a9059cbb14610493578063dd62ed3e146104ed578063f851a44014610559575b34156100d057600080fd5b600080fd5b34156100e057600080fd5b6100e86105ae565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561012857808201518184015260208101905061010d565b50505050905090810190601f1680156101555780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016e57600080fd5b6101a3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061064c565b604051808215151515815260200191505060405180910390f35b34156101c857600080fd5b6101d061073e565b6040518082815260200191505060405180910390f35b34156101f157600080fd5b610245600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610744565b604051808215151515815260200191505060405180910390f35b341561026a57600080fd5b610272610aaa565b604051808260ff1660ff16815260200191505060405180910390f35b341561029957600080fd5b6102a1610abd565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102e15780820151818401526020810190506102c6565b50505050905090810190601f16801561030e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561032757600080fd5b610353600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b5b565b005b341561036057600080fd5b61038c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c7d565b6040518082815260200191505060405180910390f35b34156103ad57600080fd5b610403600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019091905050610cc6565b005b341561041057600080fd5b610418610d6a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561045857808201518184015260208101905061043d565b50505050905090810190601f1680156104855780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561049e57600080fd5b6104d3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e08565b604051808215151515815260200191505060405180910390f35b34156104f857600080fd5b610543600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610fdf565b6040518082815260200191505060405180910390f35b341561056457600080fd5b61056c611066565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106445780601f1061061957610100808354040283529160200191610644565b820191906000526020600020905b81548152906001019060200180831161062757829003601f168201915b505050505081565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60015481565b600081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610811575081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b151561081c57600080fd5b610865600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361108b565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108f1600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836110a9565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109ba600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836110a9565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600560009054906101000a900460ff1681565b60078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b535780601f10610b2857610100808354040283529160200191610b53565b820191906000526020600020905b815481529060010190602001808311610b3657829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bb657600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4f2723059e5730f1d4ffa943789d401722067ca1121b828944c6965dbd303e086000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d2457600080fd5b83519150600090505b81811015610d6457610d568482815181101515610d4657fe5b9060200190602002015184610e08565b508080600101915050610d2d565b50505050565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e005780601f10610dd557610100808354040283529160200191610e00565b820191906000526020600020905b815481529060010190602001808311610de357829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610e5857600080fd5b610ea1600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836110a9565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f2d600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361108b565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080828401905083811015151561109f57fe5b8091505092915050565b60008282111515156110b757fe5b8183039050929150505600a165627a7a72305820edb10c0ac81bbb8d50e6bfc1b7f62dde2efb727e843d4249f6687f76c0aadf560029000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000638f8bf0d4a390e100000000000000000000000000000000000000000000000000000000000000000000d436174616c6f6e6961436173680000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044341544100000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000638f8bf0d4a390e100000000000000000000000000000000000000000000000000000000000000000000d436174616c6f6e6961436173680000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044341544100000000000000000000000000000000000000000000000000000000"
}