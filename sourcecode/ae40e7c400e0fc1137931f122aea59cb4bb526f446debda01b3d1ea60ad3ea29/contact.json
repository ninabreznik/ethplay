{
  "address": "0xf382ccbd3d203c10706059ffdcfe053308955792",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Investy Coin",
  "contractName": "InvestyToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-06\n*/\n\npragma solidity ^0.4.16;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        if (msg.sender != owner) {\n            revert();\n        }\n        _;\n    }\n\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n\n}\n\ncontract Investors {\n\n    address[] public investors;\n    mapping(address => uint) investorIndex;\n\n    /**\n     * @dev Contructor that authorizes the msg.sender.\n     */\n    function Investors() public {\n        investors.length = 2;\n        investors[1] = msg.sender;\n        investorIndex[msg.sender] = 1;\n    }\n\n    /**\n     * @dev Function to add a new investor\n     * @param _inv the address to add as a new investor.\n     */\n    function addInvestor(address _inv) public {\n        if (investorIndex[_inv] <= 0) {\n            investorIndex[_inv] = investors.length;\n            investors.length++;\n            investors[investors.length - 1] = _inv;\n        }\n\n    }\n}\n\n/**\n * Math operations with safety checks\n */\nlibrary SafeMath {\n    function mul(uint a, uint b) pure internal returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint a, uint b) pure internal returns (uint) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint a, uint b) pure internal returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint a, uint b) pure internal returns (uint) {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20Basic {\n    uint public totalSupply;\n    function balanceOf(address who) public view returns (uint);\n    function transfer(address to, uint value) public;\n    event Transfer(address indexed from, address indexed to, uint value);\n}\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint);\n    function transferFrom(address from, address to, uint value) public;\n    function approve(address spender, uint value)  public;\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint;\n\n    mapping(address => uint) balances;\n\n    /**\n     * @dev Fix for the ERC20 short address attack.\n     */\n    modifier onlyPayloadSize(uint size) {\n        if(msg.data.length < size + 4) {\n            revert();\n        }\n        _;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint balance) {\n        return balances[_owner];\n    }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implemantation of the basic standart token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is BasicToken, ERC20 {\n\n    mapping (address => mapping (address => uint)) allowed;\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint the amout of tokens to be transfered\n     */\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\n        var _allowance = allowed[_from][msg.sender];\n\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n        // if (_value > _allowance) throw;\n\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n    }\n\n    /**\n     * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint _value) public {\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n    }\n\n    /**\n     * @dev Function to check the amount of tokens than an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint specifing the amount of tokens still avaible for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n    event MintFinished();\n\n    bool public mintingFinished = false;\n    uint public totalSupply = 349308401e18;\n    uint public currentSupply = 0;\n\n    modifier canMint() {\n        if(mintingFinished) revert();\n        _;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will recieve the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint _amount) public onlyOwner canMint returns (bool) {\n        require(currentSupply.add(_amount) <= totalSupply);\n        currentSupply = currentSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(0x0, _to, _amount);\n        return true;\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     * @return True if the operation was successful.\n     */\n    function finishMinting() public onlyOwner returns (bool) {\n        mintingFinished = true;\n        MintFinished();\n        return true;\n    }\n}\n\n\n/**\n * @title InvestyToken\n * @dev The main PAY token contract\n * \n * ABI\n * [{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]\n */\ncontract InvestyToken is MintableToken {\n\n    string public name = \"Investy Coin\";\n    string public symbol = \"IVC\";\n    uint public decimals = 18;\n}\n\n\n/*\n * @title InvestyPresale\n * @dev Interface of presale contract\n */\ncontract InvestyPresale is Ownable, Investors {\n    InvestyToken public token;\n}\n\n/**\n * @title InvestyContract\n * @dev The main PAY token sale contract\n */\ncontract InvestyContract is Ownable {\n    using SafeMath for uint;\n\n    InvestyToken public token = new InvestyToken();\n\n    uint importIndex = 1; // the 0th address is a zero, iterating is started from 1\n\n    /**\n     * constructor\n     */\n    function InvestyContract() public{\n    }\n    \n    /*\n     * @dev Function to import balances from presale contract.\n     * @parm number of balances to import\n     * @return true\n     */ \n    function importBalances(uint n, address presaleContractAddress) public onlyOwner returns (bool) {\n       require(n > 0);\n\n       InvestyPresale presaleContract = InvestyPresale(presaleContractAddress);\n       InvestyToken presaleToken = presaleContract.token();\n\n       while (n > 0) {\n            address recipient = presaleContract.investors(importIndex);\n\n            uint recipientTokens = presaleToken.balanceOf(recipient);\n            token.mint(recipient, recipientTokens);\n            \n            n = n.sub(1);\n            importIndex = importIndex.add(1);\n       }\n        \n       return true;\n    }\n\n    /**\n     * @dev Ownership of the PAY token contract is transfered to this owner.\n     */\n    function transferToken() public onlyOwner {\n        token.transferOwnership(owner);\n    }\n}",
  "bytecode": "606060409081526003805460a060020a60ff02191690556b0120f0ee5c90a16d8924000060045560006005558051908101604052600c81527f496e766573747920436f696e0000000000000000000000000000000000000000602082015260069080516100709291602001906100de565b5060408051908101604052600381527f4956430000000000000000000000000000000000000000000000000000000000602082015260079080516100b89291602001906100de565b50601260085560038054600160a060020a03191633600160a060020a0316179055610179565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011f57805160ff191683800117855561014c565b8280016001018555821561014c579182015b8281111561014c578251825591602001919060010190610131565b5061015892915061015c565b5090565b61017691905b808211156101585760008155600101610162565b90565b610971806101886000396000f3006060604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146100df57806306fdde0314610106578063095ea7b31461019057806318160ddd146101b457806323b872dd146101d9578063313ce5671461020157806340c10f191461021457806370a0823114610236578063771282f6146102555780637d64bcb4146102685780638da5cb5b1461027b57806395d89b41146102aa578063a9059cbb146102bd578063dd62ed3e146102df578063f2fde38b14610304575b600080fd5b34156100ea57600080fd5b6100f2610323565b604051901515815260200160405180910390f35b341561011157600080fd5b610119610344565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561015557808201518382015260200161013d565b50505050905090810190601f1680156101825780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019b57600080fd5b6101b2600160a060020a03600435166024356103e2565b005b34156101bf57600080fd5b6101c7610483565b60405190815260200160405180910390f35b34156101e457600080fd5b6101b2600160a060020a0360043581169060243516604435610489565b341561020c57600080fd5b6101c76105aa565b341561021f57600080fd5b6100f2600160a060020a03600435166024356105b0565b341561024157600080fd5b6101c7600160a060020a03600435166106b1565b341561026057600080fd5b6101c76106cc565b341561027357600080fd5b6100f26106d2565b341561028657600080fd5b61028e610757565b604051600160a060020a03909116815260200160405180910390f35b34156102b557600080fd5b610119610766565b34156102c857600080fd5b6101b2600160a060020a03600435166024356107d1565b34156102ea57600080fd5b6101c7600160a060020a036004358116906024351661089c565b341561030f57600080fd5b6101b2600160a060020a03600435166108c7565b60035474010000000000000000000000000000000000000000900460ff1681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103da5780601f106103af576101008083540402835291602001916103da565b820191906000526020600020905b8154815290600101906020018083116103bd57829003601f168201915b505050505081565b80158015906104155750600160a060020a0333811660009081526002602090815260408083209386168352929052205415155b1561041f57600080fd5b600160a060020a03338116600081815260026020908152604080832094871680845294909152908190208490557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259084905190815260200160405180910390a35050565b60045481565b60006060606436101561049b57600080fd5b600160a060020a0380861660009081526002602090815260408083203385168452825280832054938816835260019091529020549092506104e2908463ffffffff61091d16565b600160a060020a038086166000908152600160205260408082209390935590871681522054610517908463ffffffff61093316565b600160a060020a038616600090815260016020526040902055610540828463ffffffff61093316565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a35050505050565b60085481565b60035460009033600160a060020a039081169116146105ce57600080fd5b60035474010000000000000000000000000000000000000000900460ff16156105f657600080fd5b60045460055461060c908463ffffffff61091d16565b111561061757600080fd5b60055461062a908363ffffffff61091d16565b600555600160a060020a038316600090815260016020526040902054610656908363ffffffff61091d16565b600160a060020a0384166000818152600160205260408082209390935590917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a031660009081526001602052604090205490565b60055481565b60035460009033600160a060020a039081169116146106f057600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600354600160a060020a031681565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103da5780601f106103af576101008083540402835291602001916103da565b604060443610156107e157600080fd5b600160a060020a03331660009081526001602052604090205461080a908363ffffffff61093316565b600160a060020a03338116600090815260016020526040808220939093559085168152205461083f908363ffffffff61091d16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a039081169116146108e257600080fd5b600160a060020a0381161561091a576003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b60008282018381101561092c57fe5b9392505050565b60008282111561093f57fe5b509003905600a165627a7a7230582013cfe1f0bf3a61f22d9671a2dda5e598e0280ab594318a62707def073cff38410029"
}