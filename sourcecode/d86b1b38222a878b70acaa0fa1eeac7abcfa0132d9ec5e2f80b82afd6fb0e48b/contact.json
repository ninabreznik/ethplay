{
  "address": "0x1f88f6b9cf5c81c877f0686cd08de238934e34dc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ASGPresale",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-13\n*/\n\npragma solidity ^0.4.21;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}\n\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) balances;\n    uint256 totalSupply_;\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n}\n\ncontract BurnableToken is BasicToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(burner, _value);\n        emit Transfer(burner, address(0), _value);\n    }\n}\n\ncontract StandardToken is ERC20, BurnableToken {\n\n    mapping (address => mapping (address => uint256)) allowed;\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifing the amount of tokens still avaible for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n}\n\ncontract ASGToken is StandardToken {\n\n    string constant public name = \"ASGARD\";\n    string constant public symbol = \"ASG\";\n    uint256 constant public decimals = 18;\n\n    address constant public marketingWallet = 0x341570A97E15DbA3D92dcc889Fff1bbd6709D20a;\n    uint256 public marketingPart = uint256(2100000000).mul(10 ** decimals); // 8.4% = 2 100 000 000 tokens\n\n    address constant public airdropWallet = 0xCB3D939804C97441C58D9AC6566A412768a7433B;\n    uint256 public airdropPart = uint256(1750000000).mul(10 ** decimals); // 7% = 1 750 000 000 tokens\n\n    address constant public bountyICOWallet = 0x5570EE8D93e730D8867A113ae45fB348BFc2e138;\n    uint256 public bountyICOPart = uint256(375000000).mul(10 ** decimals); // 1.5% = 375 000 000 tokens\n\n    address constant public bountyECOWallet = 0x89d90bA8135C77cDE1C3297076C5e1209806f048;\n    uint256 public bountyECOPart = uint256(375000000).mul(10 ** decimals); // 1.5% = 375 000 000 tokens\n\n    address constant public foundersWallet = 0xE03d060ac22fdC21fDF42eB72Eb4d8BA2444b1B0;\n    uint256 public foundersPart = uint256(2500000000).mul(10 ** decimals); // 10% = 2 500 000 000 tokens\n\n    address constant public cryptoExchangeWallet = 0x5E74DcA28cE21Bf066FC9eb7D10946316528d4d6;\n    uint256 public cryptoExchangePart = uint256(400000000).mul(10 ** decimals); // 1.6% = 400 000 000 tokens\n\n    address constant public ICOWallet = 0xCe2d50c646e83Ae17B7BFF3aE7611EDF0a75E03d;\n    uint256 public ICOPart = uint256(10000000000).mul(10 ** decimals); // 40% = 10 000 000 000 tokens\n\n    address constant public PreICOWallet = 0x83D921224c8B3E4c60E286B98Fd602CBa5d7B1AB;\n    uint256 public PreICOPart = uint256(7500000000).mul(10 ** decimals); // 30% = 7 500 000 000 tokens\n\n    uint256 public INITIAL_SUPPLY = uint256(25000000000).mul(10 ** decimals); // 100% = 25 000 000 000 tokens\n\n    constructor() public {\n        totalSupply_ = INITIAL_SUPPLY;\n\n        balances[marketingWallet] = marketingPart;\n        emit Transfer(this, marketingWallet, marketingPart); // 8.4%\n\n        balances[airdropWallet] = airdropPart;\n        emit Transfer(this, airdropWallet, airdropPart); // 7%\n\n        balances[bountyICOWallet] = bountyICOPart;\n        emit Transfer(this, bountyICOWallet, bountyICOPart); // 1.5%\n\n        balances[bountyECOWallet] = bountyECOPart;\n        emit Transfer(this, bountyECOWallet, bountyECOPart); // 1.5%\n\n        balances[foundersWallet] = foundersPart;\n        emit Transfer(this, foundersWallet, foundersPart); // 10%\n\n        balances[cryptoExchangeWallet] = cryptoExchangePart;\n        emit Transfer(this, cryptoExchangeWallet, cryptoExchangePart); // 1.6%\n\n        balances[ICOWallet] = ICOPart;\n        emit Transfer(this, ICOWallet, ICOPart); // 40%\n\n        balances[PreICOWallet] = PreICOPart;\n        emit Transfer(this, PreICOWallet, PreICOPart); // 30%\n    }\n\n}\n\ncontract ASGPresale is Pausable {\n    using SafeMath for uint256;\n\n    ASGToken public tokenReward;\n    uint256 constant public decimals = 1000000000000000000; // 10 ** 18\n\n    uint256 public minimalPriceUSD = 5350; // 53.50 USD\n    uint256 public ETHUSD = 390; // 1 ETH = 390 USD\n    uint256 public tokenPricePerUSD = 1666; // 1 ASG = 0.1666 USD\n    uint256 public bonus = 0;\n    uint256 public tokensRaised;\n\n    constructor(address _tokenReward) public {\n        tokenReward = ASGToken(_tokenReward);\n    }\n\n    function () public payable {\n        buy(msg.sender);\n    }\n\n    function buy(address buyer) whenNotPaused public payable {\n        require(buyer != address(0));\n        require(msg.value.mul(ETHUSD) >= minimalPriceUSD.mul(decimals).div(100));\n\n        uint256 tokens = msg.value.mul(ETHUSD).mul(bonus.add(100)).div(100).mul(10000).div(tokenPricePerUSD);\n        tokenReward.transfer(buyer, tokens);\n        tokensRaised = tokensRaised.add(tokens);\n    }\n\n    function tokenTransfer(address who, uint256 amount) onlyOwner public {\n        uint256 tokens = amount.mul(decimals);\n        tokenReward.transfer(who, tokens);\n        tokensRaised = tokensRaised.add(tokens);\n    }\n\n    function updateMinimal(uint256 _minimalPriceUSD) onlyOwner public {\n        minimalPriceUSD = _minimalPriceUSD;\n    }\n\n    function updatePriceETHUSD(uint256 _ETHUSD) onlyOwner public {\n        ETHUSD = _ETHUSD;\n    }\n\n    function updatePriceASGUSD(uint256 _tokenPricePerUSD) onlyOwner public {\n        tokenPricePerUSD = _tokenPricePerUSD;\n    }\n\n    function updateBonus(uint256 _bonus) onlyOwner public {\n        require(bonus <= 50);\n        bonus = _bonus;\n    }\n\n    function finishPresale() onlyOwner public {\n        owner.transfer(address(this).balance);\n        uint256 tokenBalance = tokenReward.balanceOf(address(this));\n        tokenReward.transfer(owner, tokenBalance);\n    }\n\n}",
  "bytecode": "608060405260008060146101000a81548160ff0219169083151502179055506114e6600255610186600355610682600455600060055534801561004157600080fd5b5060405160208061121683398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050611121806100f56000396000f300608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631e6c813814610112578063313ce5671461013f5780633f4ba83a1461016a5780634620adbb1461018157806358669d6d146101ac5780635c975abb146101d957806368cdafe6146102085780636e66f6e9146102555780636ea6b71b146102ac57806373db0844146102d757806375b4d78c146103025780638456cb591461032d5780638da5cb5b14610344578063974654c61461039b5780639f8dbb7b146103b2578063c64572b8146103df578063e97c8d581461040a578063f088d54714610437578063f2fde38b1461046d575b610110336104b0565b005b34801561011e57600080fd5b5061013d600480360381019080803590602001909291905050506106f4565b005b34801561014b57600080fd5b50610154610759565b6040518082815260200191505060405180910390f35b34801561017657600080fd5b5061017f610765565b005b34801561018d57600080fd5b50610196610823565b6040518082815260200191505060405180910390f35b3480156101b857600080fd5b506101d760048036038101908080359060200190929190505050610829565b005b3480156101e557600080fd5b506101ee61088e565b604051808215151515815260200191505060405180910390f35b34801561021457600080fd5b50610253600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108a1565b005b34801561026157600080fd5b5061026a610a3c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102b857600080fd5b506102c1610a62565b6040518082815260200191505060405180910390f35b3480156102e357600080fd5b506102ec610a68565b6040518082815260200191505060405180910390f35b34801561030e57600080fd5b50610317610a6e565b6040518082815260200191505060405180910390f35b34801561033957600080fd5b50610342610a74565b005b34801561035057600080fd5b50610359610b34565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103a757600080fd5b506103b0610b59565b005b3480156103be57600080fd5b506103dd60048036038101908080359060200190929190505050610e54565b005b3480156103eb57600080fd5b506103f4610ecb565b6040518082815260200191505060405180910390f35b34801561041657600080fd5b5061043560048036038101908080359060200190929190505050610ed1565b005b61046b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104b0565b005b34801561047957600080fd5b506104ae600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f36565b005b60008060149054906101000a900460ff161515156104cd57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561050957600080fd5b610539606461052b670de0b6b3a764000060025461108b90919063ffffffff16565b6110c390919063ffffffff16565b61054e6003543461108b90919063ffffffff16565b1015151561055b57600080fd5b6105d26004546105c46127106105b660646105a861058560646005546110d990919063ffffffff16565b61059a6003543461108b90919063ffffffff16565b61108b90919063ffffffff16565b6110c390919063ffffffff16565b61108b90919063ffffffff16565b6110c390919063ffffffff16565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561069957600080fd5b505af11580156106ad573d6000803e3d6000fd5b505050506040513d60208110156106c357600080fd5b8101908080519060200190929190505050506106ea816006546110d990919063ffffffff16565b6006819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561074f57600080fd5b8060038190555050565b670de0b6b3a764000081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107c057600080fd5b600060149054906101000a900460ff1615156107db57600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60045481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561088457600080fd5b8060028190555050565b600060149054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108fe57600080fd5b610919670de0b6b3a76400008361108b90919063ffffffff16565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156109e057600080fd5b505af11580156109f4573d6000803e3d6000fd5b505050506040513d6020811015610a0a57600080fd5b810190808051906020019092919050505050610a31816006546110d990919063ffffffff16565b600681905550505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b60035481565b60055481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610acf57600080fd5b600060149054906101000a900460ff16151515610aeb57600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bb657600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610c34573d6000803e3d6000fd5b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610cf257600080fd5b505af1158015610d06573d6000803e3d6000fd5b505050506040513d6020811015610d1c57600080fd5b81019080805190602001909291905050509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610e1557600080fd5b505af1158015610e29573d6000803e3d6000fd5b505050506040513d6020811015610e3f57600080fd5b81019080805190602001909291905050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610eaf57600080fd5b603260055411151515610ec157600080fd5b8060058190555050565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f2c57600080fd5b8060048190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f9157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610fcd57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008083141561109e57600090506110bd565b81830290508183828115156110af57fe5b041415156110b957fe5b8090505b92915050565b600081838115156110d057fe5b04905092915050565b600081830190508281101515156110ec57fe5b809050929150505600a165627a7a72305820f36bf1a200d7ffaba7be652048ee29897e7abd9a03ca090199ab22a8f3cb736800290000000000000000000000007a3d3c4f30c46f51b814bee23d970a7c9b757a32",
  "constructorArguments": "0000000000000000000000007a3d3c4f30c46f51b814bee23d970a7c9b757a32"
}