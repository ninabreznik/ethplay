{
  "address": "0x427f8892a1c6c44ec87e9b5f92c7df90452de19e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "token",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-05\n*/\n\npragma solidity ^0.4.18;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\n\n/**\n * @title 基础版的代币合约\n */\ncontract token {\n    /* 公共变量 */\n    string public name; //代币名称\n    string public symbol; //代币符号比如'$'\n    uint8 public decimals = 5;  //代币单位，展示的小数点后面多少个0,和以太币一样后面是是18个0\n    uint256 public totalSupply; //代币总量\n\n    /*记录所有余额的映射*/\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* 在区块链上创建一个事件，用以通知客户端*/\n    event Transfer(address indexed from, address indexed to, uint256 value);  //转帐通知事件\n    event Burn(address indexed from, uint256 value);  //减去用户余额事件\n\n    /* 初始化合约，并且把初始的所有代币都给这合约的创建者\n     * @param initialSupply 代币的总数\n     * @param tokenName 代币名称\n     * @param tokenSymbol 代币符号\n     */\n    constructor(uint256 initialSupply, string tokenName, string tokenSymbol) public {\n\n        //初始化总量\n        totalSupply = initialSupply * 10 ** uint256(decimals);    //以太币是10^18，后面18个0，所以默认decimals是18\n\n        //给指定帐户初始化代币总量，初始化用于奖励合约创建者\n        balanceOf[msg.sender] = totalSupply;\n\n        name = tokenName;\n        symbol = tokenSymbol;\n\n    }\n\n\n    /**\n     * 私有方法从一个帐户发送给另一个帐户代币\n     * @param  _from address 发送代币的地址\n     * @param  _to address 接受代币的地址\n     * @param  _value uint256 接受代币的数量\n     */\n    function _transfer(address _from, address _to, uint256 _value) internal {\n\n      //避免转帐的地址是0x0\n      require(_to != 0x0);\n\n      //检查发送者是否拥有足够余额\n      require(balanceOf[_from] >= _value);\n\n      //检查是否溢出\n      require(balanceOf[_to] + _value > balanceOf[_to]);\n\n      //保存数据用于后面的判断\n      uint previousBalances = balanceOf[_from] + balanceOf[_to];\n\n      //从发送者减掉发送额\n      balanceOf[_from] -= _value;\n\n      //给接收者加上相同的量\n      balanceOf[_to] += _value;\n\n      //通知任何监听该交易的客户端\n      emit Transfer(_from, _to, _value);\n\n      //判断买、卖双方的数据是否和转换前一致\n      assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\n    }\n\n    /**\n     * 从主帐户合约调用者发送给别人代币\n     * @param  _to address 接受代币的地址\n     * @param  _value uint256 接受代币的数量\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * 从某个指定的帐户中，向另一个帐户发送代币\n     *\n     * 调用过程，会检查设置的允许最大交易额\n     *\n     * @param  _from address 发送者地址\n     * @param  _to address 接受者地址\n     * @param  _value uint256 要转移的代币数量\n     * @return success        是否交易成功\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        //检查发送者是否拥有足够余额\n        require(_value <= allowance[_from][msg.sender]);   // Check allowance\n\n        allowance[_from][msg.sender] -= _value;\n\n        _transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    /**\n     * 设置帐户允许支付的最大金额\n     *\n     * 一般在智能合约的时候，避免支付过多，造成风险\n     *\n     * @param _spender 帐户地址\n     * @param _value 金额\n     */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * 设置帐户允许支付的最大金额\n     *\n     * 一般在智能合约的时候，避免支付过多，造成风险，加入时间参数，可以在 tokenRecipient 中做其他操作\n     *\n     * @param _spender 帐户地址\n     * @param _value 金额\n     * @param _extraData 操作的时间\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * 减少代币调用者的余额\n     *\n     * 操作以后是不可逆的\n     *\n     * @param _value 要删除的数量\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        //检查帐户余额是否大于要减去的值\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\n        //给指定帐户减去余额\n        balanceOf[msg.sender] -= _value;\n\n        //代币问题做相应扣除\n        totalSupply -= _value;\n\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * 删除帐户的余额（含其他帐户）\n     *\n     * 删除以后是不可逆的\n     *\n     * @param _from 要操作的帐户地址\n     * @param _value 要减去的数量\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n\n        //检查帐户余额是否大于要减去的值\n        require(balanceOf[_from] >= _value);\n\n        //检查 其他帐户 的余额是否够使用\n        require(_value <= allowance[_from][msg.sender]);\n\n        //减掉代币\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n\n        //更新总量\n        totalSupply -= _value;\n        emit Burn(_from, _value);\n        return true;\n    }\n\n}",
  "bytecode": "60806040526002805460ff1916600517905534801561001d57600080fd5b506040516109c63803806109c683398101604090815281516020808401518385015160025460ff16600a0a84026003819055336000908152600485529586205590850180519395909491019261007592850190610092565b508051610089906001906020840190610092565b5050505061012d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100d357805160ff1916838001178555610100565b82800160010185558215610100579182015b828111156101005782518255916020019190600101906100e5565b5061010c929150610110565b5090565b61012a91905b8082111561010c5760008155600101610116565b90565b61088a8061013c6000396000f3006080604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100be578063095ea7b31461014857806318160ddd1461018057806323b872dd146101a7578063313ce567146101d157806342966c68146101fc57806370a082311461021457806379cc67901461023557806395d89b4114610259578063a9059cbb1461026e578063cae9ca5114610294578063dd62ed3e146102fd575b600080fd5b3480156100ca57600080fd5b506100d3610324565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561010d5781810151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015457600080fd5b5061016c600160a060020a03600435166024356103b2565b604080519115158252519081900360200190f35b34801561018c57600080fd5b506101956103df565b60408051918252519081900360200190f35b3480156101b357600080fd5b5061016c600160a060020a03600435811690602435166044356103e5565b3480156101dd57600080fd5b506101e6610454565b6040805160ff9092168252519081900360200190f35b34801561020857600080fd5b5061016c60043561045d565b34801561022057600080fd5b50610195600160a060020a03600435166104d5565b34801561024157600080fd5b5061016c600160a060020a03600435166024356104e7565b34801561026557600080fd5b506100d36105b8565b34801561027a57600080fd5b50610292600160a060020a0360043516602435610612565b005b3480156102a057600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261016c948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506106219650505050505050565b34801561030957600080fd5b50610195600160a060020a036004358116906024351661073a565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103aa5780601f1061037f576101008083540402835291602001916103aa565b820191906000526020600020905b81548152906001019060200180831161038d57829003601f168201915b505050505081565b336000908152600560209081526040808320600160a060020a039590951683529390529190912055600190565b60035481565b600160a060020a038316600090815260056020908152604080832033845290915281205482111561041557600080fd5b600160a060020a038416600090815260056020908152604080832033845290915290208054839003905561044a848484610757565b5060019392505050565b60025460ff1681565b3360009081526004602052604081205482111561047957600080fd5b3360008181526004602090815260409182902080548690039055600380548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b60046020526000908152604090205481565b600160a060020a03821660009081526004602052604081205482111561050c57600080fd5b600160a060020a038316600090815260056020908152604080832033845290915290205482111561053c57600080fd5b600160a060020a0383166000818152600460209081526040808320805487900390556005825280832033845282529182902080548690039055600380548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a250600192915050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103aa5780601f1061037f576101008083540402835291602001916103aa565b61061d338383610757565b5050565b60008361062e81856103b2565b15610732576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b838110156106c65781810151838201526020016106ae565b50505050905090810190601f1680156106f35780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561071557600080fd5b505af1158015610729573d6000803e3d6000fd5b50505050600191505b509392505050565b600560209081526000928352604080842090915290825290205481565b6000600160a060020a038316151561076e57600080fd5b600160a060020a03841660009081526004602052604090205482111561079357600080fd5b600160a060020a038316600090815260046020526040902054828101116107b957600080fd5b50600160a060020a038083166000818152600460209081526040808320805495891680855282852080548981039091559486905281548801909155815187815291519390950194927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600160a060020a0380841660009081526004602052604080822054928716825290205401811461085857fe5b505050505600a165627a7a72305820e2f7ca69f399bcb420112c47184632789919a1b264a0d8e4dd890b9bf874095e0029000000000000000000000000000000000000000000000000000000000bebc200000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000009e585ace58583e5b881000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034759420000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000bebc200000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000009e585ace58583e5b881000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034759420000000000000000000000000000000000000000000000000000000000"
}