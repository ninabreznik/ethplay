{
  "address": "0x60ecb1536d7c49c07a05ed042e8662cb7fa3dd42",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VTRUSTToken",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-17\n*/\n\npragma solidity ^0.5.1;\n\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\ncontract Owned {\n    address public owner;\n    address public newOwner;\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        owner = newOwner;\n    }\n}\n\ncontract VTRUSTToken is IERC20, Owned {\n    using SafeMath for uint256;\n    \n    // Constructor - Sets the token Owner\n    constructor() public {\n        owner = 0xdA7F9Fd3ca8C292600647807a8298C3c0cb7c74F;\n        contractAddress = address(this);\n        _balances[owner] = 49500000000 * 10 ** decimals;\n        _balances[contractAddress] = 500000000 * 10 ** decimals;\n        emit Transfer(address(0), owner, 4950000000 * 10 ** decimals);\n        emit Transfer(address(0), contractAddress, 50000000 * 10 ** decimals);\n    }\n    \n    // Events\n    event Error(string err);\n    event Mint(uint mintAmount, address to);\n    event Burn(uint burnAmount, address from);\n    \n    // Token Setup\n    string public constant name = \"Vessel Investment Trust\";\n    string public constant symbol = \"VTRUST\";\n    uint256 public constant decimals = 5;\n    uint256 public supply = 50000000000 * 10 ** decimals;\n    \n    address private contractAddress;\n    uint256 public ICOPrice;\n    \n    // Balances for each account\n    mapping(address => uint256) _balances;\n \n    // Owner of account approves the transfer of an amount to another account\n    mapping(address => mapping (address => uint256)) public _allowed;\n \n    // Get the total supply of tokens\n    function totalSupply() public view returns (uint) {\n        return supply;\n    }\n \n    // Get the token balance for account `tokenOwner`\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return _balances[tokenOwner];\n    }\n \n    // Get the allowance of funds beteen a token holder and a spender\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return _allowed[tokenOwner][spender];\n    }\n \n    // Transfer the balance from owner's account to another account\n    function transfer(address to, uint value) public returns (bool success) {\n        require(_balances[msg.sender] >= value);\n        require(to != contractAddress);\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n    \n    // Sets how much a sender is allowed to use of an owners funds\n    function approve(address spender, uint value) public returns (bool success) {\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n    \n    // Transfer from function, pulls from allowance\n    function transferFrom(address from, address to, uint value) public returns (bool success) {\n        require(value <= balanceOf(from));\n        require(value <= allowance(from, to));\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        _allowed[from][to] = _allowed[from][to].sub(value);\n        emit Transfer(from, to, value);\n        return true;\n    }\n    \n    // Users Cannot acidentaly send ETH to the contract\n    function () external payable {\n        revert();\n    }\n    \n    // Owner Can mint new tokens\n    function mint(uint256 amount, address to) public onlyOwner {\n        _balances[to] = _balances[to].add(amount);\n        supply = supply.add(amount);\n        emit Mint(amount, to);\n    }\n    \n    // Owner can burn existing tokens\n    function burn(uint256 amount, address from) public onlyOwner {\n        require(_balances[from] >= amount);\n        _balances[from] = _balances[from].sub(amount);\n        supply = supply.sub(amount);\n        emit Burn(amount, from);\n    }\n    \n    // Change ICO Price\n    function setICOPrice(uint256 _newPrice) public onlyOwner {\n        ICOPrice = _newPrice;\n    }\n    \n    // See how many tokens are available to be purcahsed.\n    function getRemainingICOBalance() public view returns (uint256) {\n        return _balances[contractAddress];\n    }\n    \n    // Top up ICO balance\n    function topUpICO(uint256 _amount) public onlyOwner {\n        require(_balances[owner] >= _amount);\n        _balances[owner] = _balances[owner].sub(_amount);\n        _balances[contractAddress] = _balances[contractAddress].add(_amount);\n        emit Transfer(msg.sender, contractAddress, _amount);\n    }\n    \n    \n    // Buy tokens\n    function buyTokens() public payable {\n        require(ICOPrice > 0);\n        require(msg.value >= ICOPrice);\n        uint256 affordAmount = msg.value / ICOPrice;\n        require(_balances[contractAddress] >= affordAmount * 10 ** decimals);\n        _balances[contractAddress] = _balances[contractAddress].sub(affordAmount * 10 ** decimals);\n        _balances[msg.sender] = _balances[msg.sender].add(affordAmount * 10 ** decimals);\n        emit Transfer(contractAddress, msg.sender, affordAmount * 10 ** decimals);\n    }\n    \n    // Withdraw ETH\n    function withdrawContractBalance() public onlyOwner {\n        msg.sender.transfer(contractAddress.balance);\n    }\n    \n    // Cancel and withdraw ICO tokens\n    function withdrawContractTokens(uint256 _amount) public onlyOwner {\n        require(_balances[contractAddress] >= _amount);\n        _balances[contractAddress] = _balances[contractAddress].sub(_amount);\n        _balances[owner] = _balances[owner].add(_amount);\n        emit Transfer(contractAddress, owner, _amount);\n    }\n}",
  "bytecode": "",
  "constructorArguments": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
}