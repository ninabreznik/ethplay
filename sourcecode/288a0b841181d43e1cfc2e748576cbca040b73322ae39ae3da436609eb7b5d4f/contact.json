{
  "address": "0xd916defb658e02b1a1a35e8f120769cdaf38bf78",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LogicContract",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-11\n*/\n\npragma solidity 0.4.24;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract EternalStorageInterface {\n    function getShipById(uint256 _shipId) public view returns(uint256, string, uint256, uint256, uint256);\n    function buyItem(uint256 _itemId, address _newOwner, string _itemTitle, string _itemTypeTitle) public returns(uint256);\n    function getItemPriceById(string _itemType, uint256 _itemId) public view returns(uint256);\n    function getOwnerByItemTypeAndId(string _itemType, uint256 _itemId) public view returns(address);\n    function getItemTypeIdByTypeAndId(string _itemType, uint256 _itemId) public view returns(uint256);\n    function setNewPriceToItem(string _itemType, uint256 _itemTypeId, uint256 _newPrice) public;\n    function addReferrer(address _referrerWalletAddress, uint256 referrerPrize) public;\n    function widthdrawRefunds(address _referrerWalletAddress) public returns(uint256);\n    function checkRefundExistanceByOwner(address _ownerAddress) public view returns(uint256);\n}\n\ncontract ItemsStorageInterface {\n    function getShipsIds() public view returns(uint256[]);\n    function getRadarsIds() public view returns(uint256[]);\n    function getScannersIds() public view returns(uint256[]);\n    function getDroidsIds() public view returns(uint256[]);\n    function getFuelsIds() public view returns(uint256[]);\n    function getGeneratorsIds() public view returns(uint256[]);\n    function getEnginesIds() public view returns(uint256[]);\n    function getGunsIds() public view returns(uint256[]);\n    function getMicroModulesIds() public view returns(uint256[]);\n    function getArtefactsIds() public view returns(uint256[]);\n\n    function getUsersShipsIds() public view returns(uint256[]);\n    function getUsersRadarsIds() public view returns(uint256[]);\n    function getUsersScannersIds() public view returns(uint256[]);\n    function getUsersDroidsIds() public view returns(uint256[]);\n    function getUsersEnginesIds() public view returns(uint256[]);\n    function getUsersFuelsIds() public view returns(uint256[]);\n    function getUsersGeneratorsIds() public view returns(uint256[]);\n    function getUsersGunsIds() public view returns(uint256[]);\n    function getUsersMicroModulesIds() public view returns(uint256[]);\n    function getUsersArtefactsIds() public view returns(uint256[]);\n}\n\ncontract LogicContract is Ownable {\n\n    /* ------ EVENTS ------ */\n\n    event ShipWasBought(uint256 shipId);\n\n    EternalStorageInterface private eternalStorageContract;\n    ItemsStorageInterface private itemsStorageContract;\n\n    constructor() public {\n        eternalStorageContract = EternalStorageInterface(0xdb289A6c489Ea324564E64783eCCcb0d7fa9d00f);\n        itemsStorageContract = ItemsStorageInterface(0x27B95A9231a022923e9b52d71bEB662Fdd5d6cbc);\n    }\n\n    /* ------ MODIFIERS ------ */\n\n    modifier addressIsNotNull(address _newOwner) {\n\t\trequire(_newOwner != address(0));\n\t\t_;\n\t}\n\n    /* ------ FUNCTIONALITY FUNCTIONS ------ */\n\n    function destroyLogicContract() public onlyOwner {\n        selfdestruct(0xd135377eB20666725D518c967F23e168045Ee11F);\n    }\n\n    // Buying new ship\n\tfunction buyShip(uint256 _shipId, address _referrerWalletAddress) public payable addressIsNotNull(msg.sender)  {\n        uint256 referrerPrize = 0;\n\n        uint256 price = eternalStorageContract.getItemPriceById(\"ships\", _shipId);\n        require(msg.value == price);\n\n        if (_referrerWalletAddress != address(0) && _referrerWalletAddress != msg.sender && price > 0) {\n            referrerPrize = SafeMath.div(price, 10);\n            if (referrerPrize < price) {\n                eternalStorageContract.addReferrer(_referrerWalletAddress, referrerPrize);\n            }\n        }\n\n        _buyShip(_shipId, msg.sender);\n\t}\n\n    function _buyShip(uint256 _shipId, address _newOwner) private {\n        uint256 myShipId = eternalStorageContract.buyItem(_shipId, _newOwner, \"ship\", \"ship_types\");\n        emit ShipWasBought(myShipId);\n    }\n\n    function withdrawRefund(address _owner) public addressIsNotNull(_owner) {\n        uint256 curRefVal = eternalStorageContract.checkRefundExistanceByOwner(_owner);\n        if (curRefVal > 0 && address(this).balance > curRefVal && SafeMath.sub(address(this).balance, curRefVal) > 0) {\n            uint256 refund = eternalStorageContract.widthdrawRefunds(_owner);\n            _owner.transfer(refund);\n        }\n    }\n\n    function checkRefundExistanceByOwner(address _owner) public addressIsNotNull(_owner) view returns(uint256) {\n        return eternalStorageContract.checkRefundExistanceByOwner(_owner);\n    }\n\n    /* ------ READING METHODS FOR USERS ITEMS ------ */\n\n    function getOwnerByShipId(uint256 _shipId) public view returns(address) {\n        return eternalStorageContract.getOwnerByItemTypeAndId(\"ship\", _shipId);\n    }\n\n    function getShipType(uint256 _shipId) public view returns(uint256) {\n        return eternalStorageContract.getItemTypeIdByTypeAndId(\"ship_types\", _shipId);\n    }\n\n    /* ------ READING METHODS FOR ALL USERS ITEMS ------ */\n\n    // Ships\n    function getUsersShipsIds() public view returns(uint256[]) {\n        return itemsStorageContract.getUsersShipsIds();\n    }\n\n    /* ------ READING METHODS FOR ALL ITEMS ------ */\n\n    // Get item price\n    function getShipPriceById(uint256 _shipId) public view returns(uint256) {\n        return eternalStorageContract.getItemPriceById(\"ships\", _shipId);\n    }\n\n    // Ships\n    function getShipsIds() public view returns(uint256[]) {\n        return itemsStorageContract.getShipsIds();\n    }\n\n    function getShipById(uint256 _shipId) public view returns(\n        uint256,\n        string,\n        uint256,\n        uint256,\n        uint256\n    ) {\n        return eternalStorageContract.getShipById(_shipId);\n    }\n\n    /* ------ DEV FUNCTIONS ------ */\n\n    function getBalanceOfLogicContract() public onlyOwner view returns(uint256) {\n        return address(this).balance;\n    }\n\n    function getPayOut() public onlyOwner returns(uint256) {\n\t\t_getPayOut();\n\t}\n\n\tfunction _getPayOut() private returns(uint256){\n\t\tif (msg.sender != address(0)) {\n\t\t\tmsg.sender.transfer(address(this).balance);\n            return address(this).balance;\n\t\t}\n\t}\n\n    function setNewPriceToItem(string _itemType, uint256 _itemTypeId, uint256 _newPrice) public onlyOwner {\n        eternalStorageContract.setNewPriceToItem(_itemType, _itemTypeId, _newPrice);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073db289a6c489ea324564e64783ecccb0d7fa9d00f600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507327b95a9231a022923e9b52d71beb662fdd5d6cbc600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611be38061010a6000396000f3006080604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806309c5eb76146100eb5780630f670da61461011657806317c4c7bb1461012d578063223ff4cc1461016e578063294a6511146101da57806349f307a6146102315780635b28919c146102ae5780636d064962146102ef578063715018a61461035c5780638b3ac630146103735780638da5cb5b146103b3578063a00fd7c81461040a578063a16c86f714610435578063e955980314610478578063f2fde38b1461053a578063f72650421461057d575b600080fd5b3480156100f757600080fd5b506101006105e9565b6040518082815260200191505060405180910390f35b34801561012257600080fd5b5061012b610663565b005b34801561013957600080fd5b50610158600480360381019080803590602001909291905050506106eb565b6040518082815260200191505060405180910390f35b34801561017a57600080fd5b506101836107f9565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156101c65780820151818401526020810190506101ab565b505050509050019250505060405180910390f35b3480156101e657600080fd5b5061021b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610917565b6040518082815260200191505060405180910390f35b34801561023d57600080fd5b506102ac600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919080359060200190929190505050610a56565b005b3480156102ba57600080fd5b506102d960048036038101908080359060200190929190505050610bd4565b6040518082815260200191505060405180910390f35b3480156102fb57600080fd5b5061031a60048036038101908080359060200190929190505050610ce2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561036857600080fd5b50610371610df0565b005b6103b160048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ef2565b005b3480156103bf57600080fd5b506103c86111ca565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561041657600080fd5b5061041f6111ef565b6040518082815260200191505060405180910390f35b34801561044157600080fd5b50610476600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611258565b005b34801561048457600080fd5b506104a360048036038101908080359060200190929190505050611531565b6040518086815260200180602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b838110156104fb5780820151818401526020810190506104e0565b50505050905090810190601f1680156105285780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34801561054657600080fd5b5061057b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061169a565b005b34801561058957600080fd5b50610592611701565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156105d55780820151818401526020810190506105ba565b505050509050019250505060405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561064657600080fd5b3073ffffffffffffffffffffffffffffffffffffffff1631905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106be57600080fd5b73d135377eb20666725d518c967f23e168045ee11f73ffffffffffffffffffffffffffffffffffffffff16ff5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636974c632836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260058152602001807f736869707300000000000000000000000000000000000000000000000000000081525060200192505050602060405180830381600087803b1580156107b757600080fd5b505af11580156107cb573d6000803e3d6000fd5b505050506040513d60208110156107e157600080fd5b81019080805190602001909291905050509050919050565b6060600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663223ff4cc6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561088157600080fd5b505af1158015610895573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156108bf57600080fd5b8101908080516401000000008111156108d757600080fd5b828101905060208101848111156108ed57600080fd5b815185602082028301116401000000008211171561090a57600080fd5b5050929190505050905090565b600081600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561095657600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663294a6511846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610a1357600080fd5b505af1158015610a27573d6000803e3d6000fd5b505050506040513d6020811015610a3d57600080fd5b8101908080519060200190929190505050915050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ab157600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166349f307a68484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610b69578082015181840152602081019050610b4e565b50505050905090810190601f168015610b965780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610bb757600080fd5b505af1158015610bcb573d6000803e3d6000fd5b50505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663edbeee22836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600a8152602001807f736869705f74797065730000000000000000000000000000000000000000000081525060200192505050602060405180830381600087803b158015610ca057600080fd5b505af1158015610cb4573d6000803e3d6000fd5b505050506040513d6020811015610cca57600080fd5b81019080805190602001909291905050509050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166371752d06836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260048152602001807f736869700000000000000000000000000000000000000000000000000000000081525060200192505050602060405180830381600087803b158015610dae57600080fd5b505af1158015610dc2573d6000803e3d6000fd5b505050506040513d6020811015610dd857600080fd5b81019080805190602001909291905050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e4b57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008033600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610f3257600080fd5b60009250600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636974c632866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260058152602001807f736869707300000000000000000000000000000000000000000000000000000081525060200192505050602060405180830381600087803b15801561100057600080fd5b505af1158015611014573d6000803e3d6000fd5b505050506040513d602081101561102a57600080fd5b81019080805190602001909291905050509150813414151561104b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141580156110b457503373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b80156110c05750600082115b156111b9576110d082600a61181f565b9250818310156111b857600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166376775c1085856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561119f57600080fd5b505af11580156111b3573d6000803e3d6000fd5b505050505b5b6111c3853361183a565b5050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561124c57600080fd5b6112546119ec565b5090565b60008082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561129857600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663294a6511856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561135557600080fd5b505af1158015611369573d6000803e3d6000fd5b505050506040513d602081101561137f57600080fd5b810190808051906020019092919050505092506000831180156113b85750823073ffffffffffffffffffffffffffffffffffffffff1631115b80156113e4575060006113e23073ffffffffffffffffffffffffffffffffffffffff163185611aa4565b115b1561152b57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e185a890856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156114a657600080fd5b505af11580156114ba573d6000803e3d6000fd5b505050506040513d60208110156114d057600080fd5b810190808051906020019092919050505091508373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611529573d6000803e3d6000fd5b505b50505050565b600060606000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e9559803876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1580156115cb57600080fd5b505af11580156115df573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060a081101561160957600080fd5b8101908080519060200190929190805164010000000081111561162b57600080fd5b8281019050602081018481111561164157600080fd5b815185600182028301116401000000008211171561165e57600080fd5b50509291906020018051906020019092919080519060200190929190805190602001909291905050509450945094509450945091939590929450565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116f557600080fd5b6116fe81611abd565b50565b6060600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f72650426040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561178957600080fd5b505af115801561179d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156117c757600080fd5b8101908080516401000000008111156117df57600080fd5b828101905060208101848111156117f557600080fd5b815185602082028301116401000000008211171561181257600080fd5b5050929190505050905090565b600080828481151561182d57fe5b0490508091505092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302f0c93784846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001838103835260048152602001807f73686970000000000000000000000000000000000000000000000000000000008152506020018381038252600a8152602001807f736869705f747970657300000000000000000000000000000000000000000000815250602001945050505050602060405180830381600087803b15801561197357600080fd5b505af1158015611987573d6000803e3d6000fd5b505050506040513d602081101561199d57600080fd5b810190808051906020019092919050505090507fce669d287b2e58663dbc6728697553d1ab604074a134211d67937992dccf7846816040518082815260200191505060405180910390a1505050565b60008073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611aa0573373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015611a80573d6000803e3d6000fd5b503073ffffffffffffffffffffffffffffffffffffffff16319050611aa1565b5b90565b6000828211151515611ab257fe5b818303905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611af957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820de0abb6beb32149552f628cb6a6890a946e2cc1361479400d6ad344102d991900029"
}