{
  "address": "0xcd46cbb42c0a20d973a495afab91be5103290c08",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KassaNetwork",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-19\n*/\n\npragma solidity ^0.4.25;\n\n\ncontract Ownable \n{\n    address public owner;\n    address public newOwner;\n    \n    constructor() public \n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() \n    {\n        require(msg.sender == owner, \"Can used only by owner\");\n        _;\n    }\n\n    function changeOwner(address _owner) onlyOwner public \n    {\n        require(_owner != 0, \"Please provide new owner address\");\n        newOwner = _owner;\n    }\n    \n    function confirmOwner() public \n    {\n        require(newOwner == msg.sender, \"Please call from new owner\");\n        owner = newOwner;\n        delete newOwner;\n    }\n}\n\nlibrary SafeMath \n{\n\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) \n    {\n        if (_a == 0) { return 0; }\n\n        c = _a * _b;\n        assert(c / _a == _b);\n        return c;\n    }\n\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) \n    {\n        return _a / _b;\n    }\n\n\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) \n    {\n        assert(_b <= _a);\n        return _a - _b;\n    }\n\n\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) \n    {\n        c = _a + _b;\n        assert(c >= _a);\n        return c;\n    }\n}\n\n\ncontract KassaNetwork is Ownable \n{\n    using SafeMath for uint;\n\n    string  public constant name    = 'Kassa 200/100';\n    uint public startTimestamp = now;\n\n    uint public constant procKoef = 10000;\n    uint public constant perDay = 100;\n    uint public constant ownerFee = 400;\n    uint[4] public bonusReferrer = [600, 200, 100, 50];\n\n    uint public constant procReturn = 9000;\n\n\n    uint public constant maxDepositDays = 200;\n\n\n    uint public constant minimalDeposit = 0.5 ether;\n    uint public constant maximalDeposit = 25 ether;\n\n    uint public constant minimalDepositForBonusReferrer = 0.015 ether;\n\n    uint public countInvestors = 0;\n    uint public totalInvest = 0;\n    uint public totalPenalty = 0;\n    uint public totalSelfInvest = 0;\n    uint public totalPaid = 0;\n\n    event LogInvestment(address _addr, uint _value, bytes _refData);\n    event LogTransfer(address _addr, uint _amount, uint _contactBalance);\n    event LogSelfInvestment(uint _value);\n\n    event LogPreparePayment(address _addr, uint _totalInteres, uint _paidInteres, uint _amount);\n    event LogSkipPreparePayment(address _addr, uint _totalInteres, uint _paidInteres);\n\n    event LogPreparePaymentReferrer(address _addr, uint _totalReferrals, uint _paidReferrals, uint _amount);\n    event LogSkipPreparePaymentReferrer(address _addr, uint _totalReferrals, uint _paidReferrals);\n\n    event LogMinimalDepositPayment(address _addr, uint _money, uint _totalPenalty);\n    event LogPenaltyPayment(address _addr, uint currentSenderDeposit, uint referrerAdressLength, address _referrer, uint currentReferrerDeposit, uint _money, uint _sendBackAmount, uint _totalPenalty);\n    event LogExceededRestDepositPerDay(address _addr, address _referrer, uint _money, uint _nDay, uint _restDepositPerDay, uint _badDeposit, uint _sendBackAmount, uint _totalPenalty, uint _willDeposit);\n\n    event LogUsedRestDepositPerDay(address _addr, address _referrer, uint _money, uint _nDay, uint _restDepositPerDay, uint _realDeposit, uint _usedDepositPerDay);\n    event LogCalcBonusReferrer(address _referrer, uint _money, uint _index, uint _bonusReferrer, uint _amountReferrer, address _nextReferrer);\n\n\n    struct User\n    {\n        uint balance;\n        uint paidInteres;\n        uint timestamp;\n        uint countReferrals;\n        uint earnOnReferrals;\n        uint paidReferrals;\n        address referrer;\n    }\n\n    mapping (address => User) private user;\n\n    mapping (uint => uint) private usedDeposit;\n\n    function getInteres(address addr) private view returns(uint interes) \n    {\n        uint diffDays = getNDay(user[addr].timestamp);\n\n        if( diffDays > maxDepositDays ) diffDays = maxDepositDays;\n\n        interes = user[addr].balance.mul(perDay).mul(diffDays).div(procKoef);\n    }\n\n    function getUser(address addr) public view returns(uint balance, uint timestamp, uint paidInteres, uint totalInteres, uint countReferrals, uint earnOnReferrals, uint paidReferrals, address referrer) \n    {\n        address a = addr;\n        return (\n            user[a].balance,\n            user[a].timestamp,\n            user[a].paidInteres,\n            getInteres(a),\n            user[a].countReferrals,\n            user[a].earnOnReferrals,\n            user[a].paidReferrals,\n            user[a].referrer\n        );\n    }\n\n    function getCurrentDay() public view returns(uint nday) \n    {\n        nday = getNDay(startTimestamp);\n    }\n\n    function getNDay(uint date) public view returns(uint nday) \n    {\n        uint diffTime = date > 0 ? now.sub(date) : 0;\n\n        nday = diffTime.div(24 hours);\n    }\n\n    function getCurrentDayDepositLimit() public view returns(uint limit) \n    {\n        uint nDay = getCurrentDay();\n\n        limit = getDayDepositLimit(nDay);\n    }\n\n    function getDayDepositLimit(uint nDay) public pure returns(uint limit) \n    {                         \n        if(nDay <= 30) return 25.5 ether;\n        if(nDay <= 60) return 51 ether;\n        if(nDay <= 150) return 151 ether;\n        if(nDay <= 270) return 201 ether;\n\n        return 301 ether;\n    }\n\n    function getCurrentDayRestDepositLimit() public view returns(uint restLimit) \n    {\n        uint nDay = getCurrentDay();\n\n        restLimit = getDayRestDepositLimit(nDay);\n    }\n\n    function getDayRestDepositLimit(uint nDay) public view returns(uint restLimit) \n    {\n        restLimit = getCurrentDayDepositLimit().sub(usedDeposit[nDay]);\n    }\n\n    function() external payable \n    {\n        emit LogInvestment(msg.sender, msg.value, msg.data);\n        processPayment(msg.value, msg.data);\n    }\n\n    function processPayment(uint moneyValue, bytes refData) private\n    {\n        if (msg.sender == owner) \n        { \n            totalSelfInvest = totalSelfInvest.add(moneyValue);\n            emit LogSelfInvestment(moneyValue);\n            return; \n        }\n\n        if (moneyValue == 0) \n        { \n            preparePayment();\n            return; \n        }\n\n        if (moneyValue < minimalDeposit) \n        { \n            totalPenalty = totalPenalty.add(moneyValue);\n            emit LogMinimalDepositPayment(msg.sender, moneyValue, totalPenalty);\n            return; \n        }\n\n        address referrer = bytesToAddress(refData);\n\n        if (user[msg.sender].balance > 0 || \n            refData.length != 20 || \n            moneyValue > maximalDeposit ||\n            referrer != owner &&\n              (\n                 user[referrer].balance <= 0 || \n                 referrer == msg.sender) \n              )\n        { \n            uint amount = moneyValue.mul(procReturn).div(procKoef);\n\n            totalPenalty = totalPenalty.add(moneyValue.sub(amount));\n\n            emit LogPenaltyPayment(msg.sender, user[msg.sender].balance, refData.length, referrer, user[referrer].balance, moneyValue, amount, totalPenalty);\n\n            msg.sender.transfer(amount);\n\n            return; \n        }\n\n\n\n        uint nDay = getCurrentDay();\n\n        uint restDepositPerDay = getDayRestDepositLimit(nDay);\n\n        uint addDeposit = moneyValue;\n\n\n        if (moneyValue > restDepositPerDay)\n        {\n            uint returnDeposit = moneyValue.sub(restDepositPerDay);\n\n            uint returnAmount = returnDeposit.mul(procReturn).div(procKoef);\n\n            addDeposit = addDeposit.sub(returnDeposit);\n\n            totalPenalty = totalPenalty.add(returnDeposit.sub(returnAmount));\n\n            emit LogExceededRestDepositPerDay(msg.sender, referrer, moneyValue, nDay, restDepositPerDay, returnDeposit, returnAmount, totalPenalty, addDeposit);\n\n            msg.sender.transfer(returnAmount);\n        }\n\n        usedDeposit[nDay] = usedDeposit[nDay].add(addDeposit);\n\n        emit LogUsedRestDepositPerDay(msg.sender, referrer, moneyValue, nDay, restDepositPerDay, addDeposit, usedDeposit[nDay]);\n\n\n        registerInvestor(referrer);\n        sendOwnerFee(addDeposit);\n        calcBonusReferrers(referrer, addDeposit);\n        updateInvestBalance(addDeposit);\n    }\n\n\n    function registerInvestor(address referrer) private \n    {\n        user[msg.sender].timestamp = now;\n        countInvestors++;\n\n        user[msg.sender].referrer = referrer;\n        user[referrer].countReferrals++;\n    }\n\n    function sendOwnerFee(uint addDeposit) private \n    {\n        transfer(owner, addDeposit.mul(ownerFee).div(procKoef));\n    }\n\n    function calcBonusReferrers(address referrer, uint addDeposit) private \n    {\n        for (uint i = 0; i < bonusReferrer.length && referrer != 0; i++)\n        {\n            uint amountReferrer = addDeposit.mul(bonusReferrer[i]).div(procKoef);\n\n            address nextReferrer = user[referrer].referrer;\n\n            emit LogCalcBonusReferrer(referrer, addDeposit, i, bonusReferrer[i], amountReferrer, nextReferrer);\n\n            preparePaymentReferrer(referrer, amountReferrer);\n\n            referrer = nextReferrer;\n        }\n    }\n\n\n    function preparePaymentReferrer(address referrer, uint amountReferrer) private \n    {\n        user[referrer].earnOnReferrals = user[referrer].earnOnReferrals.add(amountReferrer);\n\n        uint totalReferrals = user[referrer].earnOnReferrals;\n        uint paidReferrals = user[referrer].paidReferrals;\n\n\n        if (totalReferrals >= paidReferrals.add(minimalDepositForBonusReferrer)) \n        {\n            uint amount = totalReferrals.sub(paidReferrals);\n\n            user[referrer].paidReferrals = user[referrer].paidReferrals.add(amount);\n\n            emit LogPreparePaymentReferrer(referrer, totalReferrals, paidReferrals, amount);\n\n            transfer(referrer, amount);\n        }\n        else\n        {\n            emit LogSkipPreparePaymentReferrer(referrer, totalReferrals, paidReferrals);\n        }\n\n    }\n\n\n    function preparePayment() public \n    {\n        uint totalInteres = getInteres(msg.sender);\n        uint paidInteres = user[msg.sender].paidInteres;\n        if (totalInteres > paidInteres) \n        {\n            uint amount = totalInteres.sub(paidInteres);\n\n            emit LogPreparePayment(msg.sender, totalInteres, paidInteres, amount);\n\n            user[msg.sender].paidInteres = user[msg.sender].paidInteres.add(amount);\n            transfer(msg.sender, amount);\n        }\n        else\n        {\n            emit LogSkipPreparePayment(msg.sender, totalInteres, paidInteres);\n        }\n    }\n\n    function updateInvestBalance(uint addDeposit) private \n    {\n        user[msg.sender].balance = user[msg.sender].balance.add(addDeposit);\n        totalInvest = totalInvest.add(addDeposit);\n    }\n\n    function transfer(address receiver, uint amount) private \n    {\n        if (amount > 0) \n        {\n            if (receiver != owner) { totalPaid = totalPaid.add(amount); }\n\n            uint balance = address(this).balance;\n\n            emit LogTransfer(receiver, amount, balance);\n\n            require(amount < balance, \"Not enough balance. Please retry later.\");\n\n            receiver.transfer(amount);\n        }\n    }\n\n    function bytesToAddress(bytes source) private pure returns(address addr) \n    {\n        assembly { addr := mload(add(source,0x14)) }\n        return addr;\n    }\n\n    function getTotals() public view returns(uint _maxDepositDays, \n                                             uint _perDay, \n                                             uint _startTimestamp, \n\n                                             uint _minimalDeposit, \n                                             uint _maximalDeposit, \n                                             uint[4] _bonusReferrer, \n                                             uint _minimalDepositForBonusReferrer, \n                                             uint _ownerFee, \n\n                                             uint _countInvestors, \n                                             uint _totalInvest, \n                                             uint _totalPenalty, \n//                                             uint _totalSelfInvest, \n                                             uint _totalPaid, \n\n                                             uint _currentDayDepositLimit, \n                                             uint _currentDayRestDepositLimit)\n    {\n        return (\n                 maxDepositDays,\n                 perDay,\n                 startTimestamp,\n\n                 minimalDeposit,\n                 maximalDeposit,\n                 bonusReferrer,\n                 minimalDepositForBonusReferrer,\n                 ownerFee,\n\n                 countInvestors,\n                 totalInvest,\n                 totalPenalty,\n//                 totalSelfInvest,\n                 totalPaid,\n\n                 getCurrentDayDepositLimit(),\n                 getCurrentDayRestDepositLimit()\n               );\n    }\n\n}",
  "bytecode": "42600255610100604052610258608090815260c860a052606460c052603260e0526200003090600390600462000062565b506000600781905560088190556009819055600a819055600b8190558054600160a060020a03191633179055620000cb565b826004810192821562000099579160200282015b8281111562000099578251829061ffff1690559160200191906001019062000076565b50620000a7929150620000ab565b5090565b620000c891905b80821115620000a75760008155600101620000b2565b90565b61169e80620000db6000396000f3006080604052600436106101735763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662a9f0d4811461022357806306fdde031461024d578063174b9fa4146102d75780631d28571f146102ec5780631dec55b3146103015780632319bb2a1461031957806330df4b3c1461032e5780633636080b146103435780633e6968b6146103585780634733ec901461036d578063616b40e3146103825780636f77926b146103975780636fe4d97a14610402578063760bb6d11461041757806384e10a901461042c5780638c85ec66146104d75780638da5cb5b146104ec5780638f25159c1461051d5780638fa0237814610535578063959cf2ac1461054a578063a6f9dae11461055f578063bd9b6d8614610580578063c791fbb714610595578063d4ee1d90146105aa578063d5b2a01a146105bf578063e6af61c8146105d4578063e6fd48bc146105e9578063e7b0f666146105fe578063fe16ed1314610613575b7f99e2484dc464ddf092d71c20d980a682dbf05009ca71f79590e2d3f5675efe5f33346000366040518085600160a060020a0316600160a060020a03168152602001848152602001806020018281038252848482818152602001925080828437604051920182900397509095505050505050a1610221346000368080601f0160208091040260200160405190810160405280939291908181526020018383808284375061062b945050505050565b005b34801561022f57600080fd5b5061023b600435610a91565b60408051918252519081900360200190f35b34801561025957600080fd5b50610262610abe565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561029c578181015183820152602001610284565b50505050905090810190601f1680156102c95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102e357600080fd5b5061023b610af5565b3480156102f857600080fd5b5061023b610b11565b34801561030d57600080fd5b5061023b600435610b1e565b34801561032557600080fd5b5061023b610b32565b34801561033a57600080fd5b5061023b610b37565b34801561034f57600080fd5b5061023b610b3d565b34801561036457600080fd5b5061023b610b43565b34801561037957600080fd5b50610221610b55565b34801561038e57600080fd5b5061023b610c6c565b3480156103a357600080fd5b506103b8600160a060020a0360043516610c72565b604080519889526020890197909752878701959095526060870193909352608086019190915260a085015260c0840152600160a060020a031660e083015251908190036101000190f35b34801561040e57600080fd5b5061023b610d84565b34801561042357600080fd5b5061023b610d90565b34801561043857600080fd5b50610441610d96565b604051808f81526020018e81526020018d81526020018c81526020018b81526020018a600460200280838360005b8381101561048757818101518382015260200161046f565b505050509050018981526020018881526020018781526020018681526020018581526020018481526020018381526020018281526020019e50505050505050505050505050505060405180910390f35b3480156104e357600080fd5b5061023b610e50565b3480156104f857600080fd5b50610501610e66565b60408051600160a060020a039092168252519081900360200190f35b34801561052957600080fd5b5061023b600435610e75565b34801561054157600080fd5b5061023b610ee9565b34801561055657600080fd5b5061023b610eef565b34801561056b57600080fd5b50610221600160a060020a0360043516610ef4565b34801561058c57600080fd5b50610221610fe5565b3480156105a157600080fd5b5061023b61107b565b3480156105b657600080fd5b50610501611086565b3480156105cb57600080fd5b5061023b611095565b3480156105e057600080fd5b5061023b61109b565b3480156105f557600080fd5b5061023b6110a1565b34801561060a57600080fd5b5061023b6110a7565b34801561061f57600080fd5b5061023b6004356110ad565b60008054819081908190819081908190600160a060020a031633141561069957600a5461065e908a63ffffffff6110eb16565b600a55604080518a815290517f3585958531221565c883e7a8ba901a55ac36449b6bfe60a9dbe534db7c21f0f59181900360200190a1610a86565b8815156106ad576106a8610b55565b610a86565b6706f05b59d3b2000089101561071a576009546106d0908a63ffffffff6110eb16565b600981905560408051338152602081018c905280820192909252517f3654ed221c1eb7340b328ed3408f7cc02d706326934eec02698a25eda9ffcb5c9181900360600190a1610a86565b610723886110f8565b336000908152600c6020526040812054919850108061074457508751601414155b80610757575068015af1d78b58c4000089115b806107a45750600054600160a060020a038881169116148015906107a45750600160a060020a0387166000908152600c60205260408120541115806107a45750600160a060020a03871633145b156108b0576107cd6127106107c18b61232863ffffffff6110ff16565b9063ffffffff61112816565b95506107f16107e28a8863ffffffff61113d16565b6009549063ffffffff6110eb16565b6009819055336000818152600c60209081526040808320548d51600160a060020a038e168086529483902054835196875293860191909152848201526060840192909252608083015260a082018c905260c0820189905260e082019290925290517f5e8cddbb251d1b21cc4db87b9d1157cc97d91a4439b41aa4d01567dc8060a6ed918190036101000190a1604051339087156108fc029088906000818181858888f193505050501580156108aa573d6000803e3d6000fd5b50610a86565b6108b8610b43565b94506108c385610a91565b9350889250838911156109c9576108e0898563ffffffff61113d16565b91506108fa6127106107c18461232863ffffffff6110ff16565b905061090c838363ffffffff61113d16565b92506109216107e2838363ffffffff61113d16565b600981905560408051338152600160a060020a038a1660208201528082018c9052606081018890526080810187905260a0810185905260c0810184905260e08101929092526101008201859052517f17eaccf7da42210592a965bb9e884cd2664e53ad0faaff1e8d8439052f17b0a9918190036101200190a1604051339082156108fc029083906000818181858888f193505050501580156109c7573d6000803e3d6000fd5b505b6000858152600d60205260409020546109e8908463ffffffff6110eb16565b6000868152600d60209081526040918290208390558151338152600160a060020a038b16918101919091528082018c9052606081018890526080810187905260a0810186905260c0810192909252517f761add23ed054f41556a04f26f05e19442fefa49e127dde0e9bb6a385976d2909181900360e00190a1610a6a8761114f565b610a73836111b1565b610a7d87846111e1565b610a86836112dc565b505050505050505050565b6000818152600d6020526040812054610ab890610aac610af5565b9063ffffffff61113d16565b92915050565b60408051808201909152600d81527f4b61737361203230302f31303000000000000000000000000000000000000000602082015281565b600080610b00610b43565b9050610b0b81610e75565b91505090565b68015af1d78b58c4000081565b60038160048110610b2b57fe5b0154905081565b60c881565b61232881565b60075481565b6000610b506002546110ad565b905090565b6000806000610b6333611325565b336000908152600c6020526040902060010154909350915081831115610c2657610b93838363ffffffff61113d16565b60408051338152602081018690528082018590526060810183905290519192507f57c51513ed5ecca02e35c0a9c73f9031060fffb0ee67e5ba2ae3a7876bcc4660919081900360800190a1336000908152600c6020526040902060010154610c01908263ffffffff6110eb16565b336000818152600c6020526040902060010191909155610c21908261139f565b610c67565b604080513381526020810185905280820184905290517f269d6e9105178515061a0776774390056c694e459c03ba0bcf1fe366e44ca1239181900360600190a15b505050565b60085481565b600160a060020a0381166000908152600c602052604081208054600282015460019092015483928392839283928392839283928b9291610cb184611325565b600c600086600160a060020a0316600160a060020a0316815260200190815260200160002060030154600c600087600160a060020a0316600160a060020a0316815260200190815260200160002060040154600c600088600160a060020a0316600160a060020a0316815260200190815260200160002060050154600c600089600160a060020a0316600160a060020a0316815260200190815260200160002060060160009054906101000a9004600160a060020a03169850985098509850985098509850985050919395975091939597565b6706f05b59d3b2000081565b61271081565b6000806000806000610da6611653565b60008060008060008060008060c860646002546706f05b59d3b2000068015af1d78b58c40000600366354a6ba7a18000610190600754600854600954600b54610ded610af5565b610df5610e50565b604080516080810191829052908a9060049082845b815481526020019060010190808311610e0a57505050505098509d509d509d509d509d509d509d509d509d509d509d509d509d509d50909192939495969798999a9b9c9d565b600080610e5b610b43565b9050610b0b81610a91565b600054600160a060020a031681565b6000601e8211610e8f5750680161e232e52c760000610ee4565b603c8211610ea757506802c3c465ca58ec0000610ee4565b60968211610ebf575068082f8bc3f7bbfc0000610ee4565b61010e8211610ed85750680ae56f730e6d840000610ee4565b5068105136d13bd09400005b919050565b600a5481565b606481565b600054600160a060020a03163314610f56576040805160e560020a62461bcd02815260206004820152601660248201527f43616e2075736564206f6e6c79206279206f776e657200000000000000000000604482015290519081900360640190fd5b600160a060020a0381161515610fb6576040805160e560020a62461bcd02815260206004820181905260248201527f506c656173652070726f76696465206e6577206f776e65722061646472657373604482015290519081900360640190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600154600160a060020a03163314611047576040805160e560020a62461bcd02815260206004820152601a60248201527f506c656173652063616c6c2066726f6d206e6577206f776e6572000000000000604482015290519081900360640190fd5b600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b66354a6ba7a1800081565b600154600160a060020a031681565b61019081565b60095481565b60025481565b600b5481565b600080600083116110bf5760006110cf565b6110cf428463ffffffff61113d16565b90506110e4816201518063ffffffff61112816565b9392505050565b81810182811015610ab857fe5b6014015190565b600082151561111057506000610ab8565b5081810281838281151561112057fe5b0414610ab857fe5b6000818381151561113557fe5b049392505050565b60008282111561114957fe5b50900390565b336000908152600c60205260408082204260028201556007805460019081019091556006909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03959095169485179055928252902060030180549091019055565b6000546111de90600160a060020a03166111d96127106107c18561019063ffffffff6110ff16565b61139f565b50565b600080805b6004831080156111fe5750600160a060020a03851615155b156112d5576112286127106107c16003866004811061121957fe5b0154879063ffffffff6110ff16565b600160a060020a038087166000908152600c60205260409020600601549193501690507f7e12d55f7c1ae1ac0321507b7d010aab01dc2ede8a458d9c22e24116c608c19b8585856003816004811061127c57fe5b015460408051600160a060020a03958616815260208101949094528381019290925260608301526080820186905291841660a082015290519081900360c00190a16112c785836114da565b9350600190910190836111e6565b5050505050565b336000908152600c60205260409020546112fc908263ffffffff6110eb16565b336000908152600c602052604090205560085461131f908263ffffffff6110eb16565b60085550565b600160a060020a0381166000908152600c6020526040812060020154819061134c906110ad565b905060c881111561135b575060c85b600160a060020a0383166000908152600c60205260409020546110e490612710906107c190849061139390606463ffffffff6110ff16565b9063ffffffff6110ff16565b600080821115610c6757600054600160a060020a038481169116146113d557600b546113d1908363ffffffff6110eb16565b600b555b5060408051600160a060020a038416815260208101839052303181830181905291517f18b0800c80490f5a2cdb8878912fa0744819cf79cb6bda0573399ceee459b66a9181900360600190a180821061149e576040805160e560020a62461bcd02815260206004820152602760248201527f4e6f7420656e6f7567682062616c616e63652e20506c6561736520726574727960448201527f206c617465722e00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b604051600160a060020a0384169083156108fc029084906000818181858888f193505050501580156114d4573d6000803e3d6000fd5b50505050565b600160a060020a0382166000908152600c60205260408120600401548190819061150a908563ffffffff6110eb16565b600160a060020a0386166000908152600c60205260409020600481018290556005015490935091506115498266354a6ba7a1800063ffffffff6110eb16565b83106116035761155f838363ffffffff61113d16565b600160a060020a0386166000908152600c602052604090206005015490915061158e908263ffffffff6110eb16565b600160a060020a0386166000818152600c60209081526040918290206005019390935580519182529181018590528082018490526060810183905290517e260dbd6ad9a7bc95a107bbd98c073edf3b09c4bec03b39f37d0dc88b8d34759181900360800190a16115fe858261139f565b6112d5565b60408051600160a060020a03871681526020810185905280820184905290517f7d11a9324c66449899d527db8661c450d2049209ed0afc56d94d759f31da6e739181900360600190a15050505050565b60806040519081016040528060049060208202803883395091929150505600a165627a7a72305820f0985ed1e6aaae30d1f35f8caa5a53c890209b8f0626a65bed56b48955dc36030029"
}