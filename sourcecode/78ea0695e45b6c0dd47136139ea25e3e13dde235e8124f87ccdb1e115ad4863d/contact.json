{
  "address": "0xac22471d1C7cE9B6A4900d4D9b6E677a84C9f199",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Depositor",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-17\n*/\n\npragma solidity ^0.4.13;\n\ncontract FranklinStorage {\n\n    // NOTE: This is test code! All contracts will be thoughrouhly rewritten for production.\n\n    address public testCreator;\n\n    constructor() public {\n        testCreator = msg.sender;\n    }\n\n    function killThisTestContract() public {\n        require(msg.sender == testCreator, \"only creator can clean up test contracts\");\n        selfdestruct(testCreator);\n    }\n    \n\n    // For tree depth 24\n    bytes32 constant EMPTY_TREE_ROOT = 0x003f7e15e4de3453fe13e11fb4b007f1fce6a5b0f0353b3b8208910143aaa2f7;\n\n    uint256 public constant DEADLINE = 3600;\n\n    event BlockCommitted(uint32 indexed blockNumber);\n    event BlockVerified(uint32 indexed blockNumber);\n\n    enum Circuit {\n        DEPOSIT,\n        TRANSFER,\n        EXIT\n    }\n\n    enum AccountState {\n        NOT_REGISTERED,\n        REGISTERED,\n        PENDING_EXIT,\n        UNCONFIRMED_EXIT\n    }\n\n    struct Block {\n        uint8 circuit;\n        uint64  deadline;\n        uint128 totalFees;\n        bytes32 newRoot;\n        bytes32 publicDataCommitment;\n        address prover;\n    }\n\n    // Key is block number\n    mapping (uint32 => Block) public blocks;\n    // Only some addresses can send proofs\n    mapping (address => bool) public operators;\n    // Fee collection accounting\n    mapping (address => uint256) public balances;\n\n    struct Account {\n        uint8 state;\n        uint32 exitBatchNumber;\n        address owner;\n        uint256 publicKey;\n        uint32 exitListHead;\n        uint32 exitListTail;\n    }\n\n    // one Ethereum address should have one account\n    mapping (address => uint24) public ethereumAddressToAccountID;\n\n    // Plasma account => general information\n    mapping (uint24 => Account) public accounts;\n\n    // Public information for users\n    bool public stopped;\n    uint32 public lastCommittedBlockNumber;\n    uint32 public lastVerifiedBlockNumber;\n    bytes32 public lastVerifiedRoot;\n    uint64 public constant MAX_DELAY = 1 days;\n    uint256 public constant DENOMINATOR = 1000000000000;\n\n    // deposits\n\n    uint256 public constant DEPOSIT_BATCH_SIZE = 1;\n    uint256 public totalDepositRequests; // enumerates total number of deposit, starting from 0\n    uint256 public lastCommittedDepositBatch;\n    uint256 public lastVerifiedDepositBatch;\n    uint128 public currentDepositBatchFee; // deposit request fee scaled units\n\n    uint24 public constant SPECIAL_ACCOUNT_DEPOSITS = 1;\n\n    uint24 public nextAccountToRegister;\n\n    // some ideas for optimization of the deposit request information storage:\n    // store in a mapping: 20k gas to add, 5k to update a record + 5k to update the global counter per batch\n    // store in an array: 20k + 5k gas to add, 5k to update + up to DEPOSIT_BATCH_SIZE * SLOAD\n\n    // batch number => (plasma address => deposit information)\n    mapping (uint256 => mapping (uint24 => DepositRequest)) public depositRequests;\n    mapping (uint256 => DepositBatch) public depositBatches;\n\n    struct DepositRequest {\n        uint128 amount;\n    }\n\n    enum DepositBatchState {\n        CREATED,\n        COMMITTED,\n        VERIFIED\n    }\n\n    struct DepositBatch {\n        uint8 state;\n        uint24 numRequests;\n        uint32 blockNumber;\n        uint64 timestamp;\n        uint128 batchFee;\n    }\n\n    event LogDepositRequest(uint256 indexed batchNumber, uint24 indexed accountID, uint256 indexed publicKey, uint128 amount);\n    event LogCancelDepositRequest(uint256 indexed batchNumber, uint24 indexed accountID);\n\n    // Exits \n\n    uint256 constant EXIT_BATCH_SIZE = 1;\n    uint256 public totalExitRequests; \n    uint256 public lastCommittedExitBatch;\n    uint256 public lastVerifiedExitBatch;\n    uint128 public currentExitBatchFee; \n\n    uint24 public constant SPECIAL_ACCOUNT_EXITS = 0;\n\n    // batches for complete exits\n    mapping (uint256 => ExitBatch) public exitBatches;\n\n    enum ExitBatchState {\n        CREATED,\n        COMMITTED,\n        VERIFIED\n    }\n\n    struct ExitBatch {\n        uint8 state;\n        uint32 blockNumber;\n        uint64 timestamp;\n        uint128 batchFee;\n    }\n\n    event LogExitRequest(uint256 indexed batchNumber, uint24 indexed accountID);\n    event LogCancelExitRequest(uint256 indexed batchNumber, uint24 indexed accountID);\n\n    event LogExit(address indexed ethereumAddress, uint32 indexed blockNumber);\n    event LogCompleteExit(address indexed ethereumAddress, uint32 indexed blockNumber, uint24 accountID);\n\n    struct ExitLeaf {\n        uint32 nextID;\n        uint128 amount;\n    }\n\n    mapping (address => mapping (uint32 => ExitLeaf)) public exitLeafs;\n\n    // mapping ethereum address => block number => balance\n    // mapping (address => mapping (uint32 => uint128)) public exitAmounts;\n    // Delegates chain\n    address public depositor;\n    address public transactor;\n    address public exitor;\n}\n\nlibrary TwistedEdwards {\n    // EdwardsPoint public generator;\n\n    struct EdwardsPoint {\n        uint256 x;\n        uint256 y;\n    }\n\n    // constructor (\n    //     uint256[2] memory _generator\n    // ) public {\n    //     require(_generator[0] < getPrimeFieldSize(), \"Generator X is not in the field\");\n    //     require(_generator[1] < getPrimeFieldSize(), \"Generator Y is not in the field\");\n    //     // TODO: Check generator order\n    //     generator = EdwardsPoint (_generator[0], _generator[1]);\n    // }\n\n    function getA()\n    internal\n    pure \n    returns (uint256) {\n        return 21888242871839275222246405745257275088548364400416034343698204186575808495616;\n    }\n\n    function getD()\n    internal\n    pure \n    returns (uint256) {\n        return 12181644023421730124874158521699555681764249180949974110617291017600649128846;\n    }\n\n    function getCofactor()\n    internal\n    pure \n    returns (uint256) {\n        return 8;\n    }\n\n    function getMainGroupOrder()\n    internal\n    pure \n    returns (uint256) {\n        return 2736030358979909402780800718157159386076813972158567259200215660948447373041;\n    }\n\n    function getPrimeFieldSize()\n    internal\n    pure \n    returns (uint256) {\n        return 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    }\n\n    function fieldNegate(uint256 _x)\n    internal\n    pure\n    returns (uint256) {\n        return getPrimeFieldSize() - _x;\n    }\n\n    function negate(EdwardsPoint memory P)\n    internal\n    pure\n    returns (EdwardsPoint memory S)\n    {\n        S = EdwardsPoint(fieldNegate(P.x), P.y);\n    }\n\n    function fieldInv(uint256 x) \n    internal \n    pure returns (uint256) {\n        uint256 p = getPrimeFieldSize();\n        uint256 a = x;\n        if (a == 0)\n            return 0;\n        if (a > p)\n            a = a % p;\n        int256 t1;\n        int256 t2 = 1;\n        uint256 r1 = p;\n        uint256 r2 = a;\n        uint256 q;\n        while (r2 != 0) {\n            q = r1 / r2;\n            (t1, t2, r1, r2) = (t2, t1 - int256(q) * t2, r2, r1 - q * r2);\n        }\n        if (t1 < 0)\n            return (p - uint256(-t1));\n        return uint256(t1);\n    }\n\n    // Infinity point is encoded as (0, 1)\n    function isInfinity(EdwardsPoint memory P)\n    internal\n    pure\n    returns (bool)\n    {  \n        return P.x == 0 && P.y == 1;\n    }\n\n    // group addition law\n    // x3 = (x1*y2+y1*x2)/(1+d*x1*x2*y1*y2)\n    // y3 = (y1*y2-a*x1*x2)/(1-d*x1*x2*y1*y2)\n\n    // IMPORTANT! Take no assumption about a == -1 for now\n    function add(EdwardsPoint memory P, EdwardsPoint memory Q)\n    internal\n    pure\n    returns (EdwardsPoint memory S)\n    {\n        uint256 p = getPrimeFieldSize();\n        uint256 a = getA();\n        uint256 d = getD();\n\n        // precompute and save x1*y2. x2*y1\n        uint256 x1y2 = mulmod(P.x, Q.y, p);\n        uint256 x2y1 = mulmod(Q.x, P.y, p);\n        // calculate x1*x2 and y1*y2 for shortness\n        uint256 x1x2 = mulmod(P.x, Q.x, p);\n        uint256 y1y2 = mulmod(P.y, Q.y, p);\n\n        uint256 x3_t = addmod(x1y2, x2y1, p);\n        uint256 x3_b = fieldInv(addmod(1, mulmod( mulmod(d, x1y2, p), x2y1, p), p) );\n\n        // manual negations here\n        uint256 y3_t = addmod(y1y2, p - mulmod(a, x1x2, p), p);\n        uint256 y3_b = fieldInv(addmod(1, p - mulmod( mulmod(d, x1y2, p), x2y1, p), p) );\n        \n        S = EdwardsPoint(mulmod(x3_t, x3_b, p), mulmod(y3_t, y3_b, p));\n    }\n\n    // group doubling law\n    // x3 = (x1*y1+y1*x1)/(1+d*x1*x1*y1*y1)\n    // y3 = (y1*y1-a*x1*x1)/(1-d*x1*x1*y1*y1)\n\n    // IMPORTANT! Take no assumption about a == -1 for now\n    function double(EdwardsPoint memory P)\n    internal\n    pure\n    returns (EdwardsPoint memory S)\n    {\n        uint256 p = getPrimeFieldSize();\n        uint256 a = getA();\n        uint256 d = getD();\n\n        // precompute and save x1*y2. x2*y1\n        uint256 xx = mulmod(P.x, P.x, p);\n        uint256 yy = mulmod(P.y, P.y, p);\n        uint256 xy = mulmod(P.x, P.y, p);\n\n        uint256 x3_t = addmod(xy, xy, p);\n        uint256 x3_b = fieldInv(addmod(1, mulmod( mulmod(d, xy, p), xy, p), p) );\n\n        // manual negations here\n        uint256 y3_t = addmod(yy, p - mulmod(a, xx, p), p);\n        uint256 y3_b = fieldInv(addmod(1, p - mulmod( mulmod(d, xx, p), yy, p), p) );\n        \n        S = EdwardsPoint(mulmod(x3_t, x3_b, p), mulmod(y3_t, y3_b, p));\n    }\n\n    \n    function multiplyByScalar(\n        uint256 d, \n        EdwardsPoint memory P\n    ) \n    internal \n    pure\n    returns (EdwardsPoint memory S)\n    {\n        \n        S = EdwardsPoint(0,1);\n        if (d == 0) {\n            return S;\n        }\n\n        EdwardsPoint memory base = EdwardsPoint(P.x, P.y);\n\n        // double and add\n        uint256 remaining = d;\n        while (remaining != 0) {\n            if ((remaining & 1) != 0) {\n                S = add(S, base);\n            }\n            remaining = remaining >> 1;\n            base = double(base);\n        }\n\n    }\n\n    // Check that a * x^2 + y^2 = 1 + d * x^2 * y^2\n    function isOnCurve(\n        EdwardsPoint memory P\n    )\n    internal\n    pure\n    returns (bool)\n    {\n        uint256 p = getPrimeFieldSize();\n        uint256 a = getA();\n        uint256 d = getD();\n\n        uint256 xx = mulmod(P.x, P.x, p);\n        uint256 yy = mulmod(P.y, P.y, p);\n\n        uint256 lhs = addmod(mulmod(a, xx,p), yy, p);\n        uint256 rhs = addmod(1, mulmod(d, mulmod(xx, yy, p), p), p);\n\n        return lhs == rhs;\n    }\n\n    function isInCorrectGroup(\n        EdwardsPoint memory P\n    ) \n    internal \n    pure\n    returns (bool)\n    {\n        uint256 order = getMainGroupOrder();\n        return isInfinity(multiplyByScalar(order, P));\n    }\n\n    function isCorrectGroup(\n        uint256[2] memory point\n    )\n    internal\n    pure\n    returns (bool)\n    {\n        EdwardsPoint memory P = EdwardsPoint(point[0], point[1]);\n        return isInCorrectGroup(P);\n    }\n\n    function multiply(\n        uint256 d,\n        uint256[2] memory point\n    )\n    internal\n    pure\n    returns (uint256[2] memory result)\n    {\n        EdwardsPoint memory P = EdwardsPoint(point[0], point[1]);\n        EdwardsPoint memory S = multiplyByScalar(d, P);\n        result[0] = S.x;\n        result[1] = S.y;\n    }\n\n    function checkOnCurve(\n        uint256[2] memory point\n    )\n    internal\n    pure\n    returns (bool) {\n        EdwardsPoint memory P = EdwardsPoint(point[0], point[1]);\n        return isOnCurve(P);\n    }\n\n    // // Multiplication dP. P affine, wNAF: w=5\n    // // Params: d, Px, Py\n    // // Output: Jacobian Q\n    // function _wnafMul(\n    //     uint256 d, \n    //     EdwardsPoint memory P\n    // ) \n    // internal \n    // pure \n    // returns (EdwardsPoint memory S)\n    // {\n    //     uint p = getPrimeFieldSize();\n    //     if (d == 0) {\n    //         return pointOfInfinity;\n    //     }\n    //     uint dwPtr; // points to array of NAF coefficients.\n    //     uint i;\n\n    //     // wNAF\n    //     assembly\n    //     {\n    //         let dm := 0\n    //         dwPtr := mload(0x40)\n    //         mstore(0x40, add(dwPtr, 512)) // Should lower this.\n    //     loop:\n    //         jumpi(loop_end, iszero(d))\n    //         jumpi(even, iszero(and(d, 1)))\n    //         dm := mod(d, 32)\n    //         mstore8(add(dwPtr, i), dm) // Don't store as signed - convert when reading.\n    //         d := add(sub(d, dm), mul(gt(dm, 16), 32))\n    //     even:\n    //         d := div(d, 2)\n    //         i := add(i, 1)\n    //         jump(loop)\n    //     loop_end:\n    //     }\n\n    //     // Pre calculation\n    //     uint[3][8] memory PREC; // P, 3P, 5P, 7P, 9P, 11P, 13P, 15P\n    //     PREC[0] = [P[0], P[1], 1];\n    //     uint[3] memory X = _double(PREC[0]);\n    //     PREC[1] = _addMixed(X, P);\n    //     PREC[2] = _add(X, PREC[1]);\n    //     PREC[3] = _add(X, PREC[2]);\n    //     PREC[4] = _add(X, PREC[3]);\n    //     PREC[5] = _add(X, PREC[4]);\n    //     PREC[6] = _add(X, PREC[5]);\n    //     PREC[7] = _add(X, PREC[6]);\n\n    //     // Mult loop\n    //     while(i > 0) {\n    //         uint dj;\n    //         uint pIdx;\n    //         i--;\n    //         assembly {\n    //             dj := byte(0, mload(add(dwPtr, i)))\n    //         }\n    //         Q = _double(Q);\n    //         if (dj > 16) {\n    //             pIdx = (31 - dj) / 2; // These are the \"negative ones\", so invert y.\n    //             Q = _add(Q, [PREC[pIdx][0], p - PREC[pIdx][1], PREC[pIdx][2] ]);\n    //         }\n    //         else if (dj > 0) {\n    //             pIdx = (dj - 1) / 2;\n    //             Q = _add(Q, [PREC[pIdx][0], PREC[pIdx][1], PREC[pIdx][2] ]);\n    //         }\n    //         if (Q[0] == pointOfInfinity[0] && Q[1] == pointOfInfinity[1] && Q[2] == pointOfInfinity[2]) {\n    //             return Q;\n    //         }\n    //     }\n    //     return Q;\n    // }\n\n\n\n\n\n\n\n}\n\ncontract Verifier {\n\n    function NegateY( uint256 Y )\n        internal pure returns (uint256)\n    {\n        uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n        return q - (Y % q);\n    }\n\n    function Verify ( uint256[14] in_vk, uint256[] vk_gammaABC, uint256[8] in_proof, uint256[] proof_inputs )\n        internal \n        view \n        returns (bool)\n    {\n        require( ((vk_gammaABC.length / 2) - 1) == proof_inputs.length, \"Invalid number of public inputs\" );\n\n        // Compute the linear combination vk_x\n        uint256[3] memory mul_input;\n        uint256[4] memory add_input;\n        bool success;\n        uint m = 2;\n\n        // First two fields are used as the sum\n        add_input[0] = vk_gammaABC[0];\n        add_input[1] = vk_gammaABC[1];\n\n        // Performs a sum of gammaABC[0] + sum[ gammaABC[i+1]^proof_inputs[i] ]\n        for (uint i = 0; i < proof_inputs.length; i++) {\n            mul_input[0] = vk_gammaABC[m++];\n            mul_input[1] = vk_gammaABC[m++];\n            mul_input[2] = proof_inputs[i];\n\n            assembly {\n                // ECMUL, output to last 2 elements of `add_input`\n                success := staticcall(sub(gas, 2000), 7, mul_input, 0x60, add(add_input, 0x40), 0x40)\n            }\n            require( success, \"Failed to call ECMUL precompile\" );\n\n            assembly {\n                // ECADD\n                success := staticcall(sub(gas, 2000), 6, add_input, 0x80, add_input, 0x40)\n            }\n            require( success, \"Failed to call ECADD precompile\" );\n        }\n\n        uint[24] memory input = [\n            // (proof.A, proof.B)\n            in_proof[0], in_proof[1],                           // proof.A   (G1)\n            in_proof[2], in_proof[3], in_proof[4], in_proof[5], // proof.B   (G2)\n\n            // (-vk.alpha, vk.beta)\n            in_vk[0], NegateY(in_vk[1]),                        // -vk.alpha (G1)\n            in_vk[2], in_vk[3], in_vk[4], in_vk[5],             // vk.beta   (G2)\n\n            // (-vk_x, vk.gamma)\n            add_input[0], NegateY(add_input[1]),                // -vk_x     (G1)\n            in_vk[6], in_vk[7], in_vk[8], in_vk[9],             // vk.gamma  (G2)\n\n            // (-proof.C, vk.delta)\n            in_proof[6], NegateY(in_proof[7]),                  // -proof.C  (G1)\n            in_vk[10], in_vk[11], in_vk[12], in_vk[13]          // vk.delta  (G2)\n        ];\n\n        uint[1] memory out;\n        assembly {\n            success := staticcall(sub(gas, 2000), 8, input, 768, out, 0x20)\n        }\n        require(success, \"Failed to call pairing precompile\");\n        return out[0] == 1;\n    }\n}\n\ncontract DepositVerificationKey {\n\n    function getVkDepositCircuit() internal pure returns (uint256[14] memory vk, uint256[] memory gammaABC) {\n\n        \n        vk[0] = 0x02834523b73cb0630d49fc3e2054522563fb6471012d3f1e6fe31cb946240774;\n        vk[1] = 0x0ba99f12ab5e9c80db6c85f62fb7a0df5d0dcb1088eb4b48d36156d816489128;\n        vk[2] = 0x0f19b305cee59f6dc3c054880068b4a13768e5b901d0479271c20f8b79243965;\n        vk[3] = 0x11e32a8c382c7fb28b177d02e354607f7c33abc7f5636e71cd0fb4cd77eb1d74;\n        vk[4] = 0x2bee5b6bb3fda73e29152d399f1bd211961f048eeb0d5a7d752ad9ffb649dff1;\n        vk[5] = 0x15ec0d94cdfe1fdcc23a58995e2af0b788fffae99691676fa943d608226b8682;\n        vk[6] = 0x03f6ee67c8871c54c6f20e77376eb305e5b4964f1019bce1ad9ce22b2bec622c;\n        vk[7] = 0x21b45fc68e2059b1eab7eee045ab7be7ed45a2d3f6e3515ac1ec28f7b490b1dd;\n        vk[8] = 0x0c9b53ea69e19134e41340bb6c0d1795661381291bf630c24396f8e866528002;\n        vk[9] = 0x2e24ea773c3f54e3e7fc82249e7de02be3932e8b156800d9e4d19a5047f85cbb;\n        vk[10] = 0x215e8c48ee50bad165d2420f9220145fa4cc98d7dcb52cc2a6e9010fd6214411;\n        vk[11] = 0x1917a1144eb6f1c16ebf2673f2eb0fe275ae8bf518ae36553354580cd191293f;\n        vk[12] = 0x1d636227f8db452d07a36077ffb1f0723947ae4cae746721445d3d249438ee57;\n        vk[13] = 0x13c4be40874508b0fa8b895657084e1a8e1bb7002d7a8cc05f0973763cb20755;\n\n        gammaABC = new uint256[](8);\n        gammaABC[0] = 0x017474e8efdf8775559844f978a7d23602c51508c42055cba41da71d8c184662;\n        gammaABC[1] = 0x0479fb6bc0d7c11f5a734f450f6a47ec94bd59014f8398b248f59dc058b76b64;\n        gammaABC[2] = 0x06cef07cba4570717e5a1389b1425ed2f9d3de870c651254f557b82187eda82c;\n        gammaABC[3] = 0x1ba4b300e354352533d910452a340d16d2205ab18698cc5158bbb89a4d6340e9;\n        gammaABC[4] = 0x16901a82f58d7d091cb47c0b8daa365e9c8dea97ff33d461044ce0c8f03cae71;\n        gammaABC[5] = 0x0902ea2f0d929f53465faab02d6e6c475868b5004b6ccdf29ec17fdcf1f4bf50;\n        gammaABC[6] = 0x113c4aa77bfc12e18d3d0f64e840c2f912406ee9e61e476aaa67f8c743baa7c2;\n        gammaABC[7] = 0x176aa258bd76a01a4f744c71483afbc1ec4cd0529a6842b8a14c7feb75821e90;\n\n\n    }\n\n}\n\ncontract ExitVerificationKey {\n\n    function getVkExitCircuit() internal pure returns (uint256[14] memory vk, uint256[] memory gammaABC) {\n\n        \n        vk[0] = 0x2655d0f184451488c9c86edaa0f36a7d4f7a2fc3825e7d030af5660d3681ace6;\n        vk[1] = 0x30062c29546c272a712d301884a3deef21716e671c5da66cac7f5d263714a2a6;\n        vk[2] = 0x1e6c69a1d12135996fa27fb9f435d1876b34629e574671ba77826b8733d93b65;\n        vk[3] = 0x0bb271e151e34c9bfe2abaaf66c5888ccfa6c2272a29ab8f5f572d1177fbdf1e;\n        vk[4] = 0x05ff0ddaeb5d75296cac71fd305db5a3395759a926cb6c8701f84d35710f78ee;\n        vk[5] = 0x20272b96093e40001583fead3bd6e8c6453f346bdf92d5779bed7ab884d0aa2e;\n        vk[6] = 0x0950cc975d157dd4e80dc8d162caa4e506186f7adbe9cf69867a18e56b7a167b;\n        vk[7] = 0x0a58c1bf8b3a41a9d53c66509de333ac6e110de78d270f6f4c7a32acac5d65bf;\n        vk[8] = 0x152ff1340ad2dcf6eb3b2373263f3e3d48c58e4f3c8035d994d690efb89105cd;\n        vk[9] = 0x1a7a1d4994c386d270238d45dcf938bfae17753560be434e4c98950d9a150d9c;\n        vk[10] = 0x0ea995b343d372ae0f5cad6a29ea289172d127085b8ebb9a8a46d8c359728dcb;\n        vk[11] = 0x256fd00e2102e55b0e0882a8fc9297d9e2eb66b1f368dea21c3b4fea52ff1b77;\n        vk[12] = 0x024e59df7dad7374d09caa273089b9d27057c131db4d645cbe2b780ed8dca72b;\n        vk[13] = 0x1aea3eea3d14b2240eabd4c12fa0cc60a3431e6f55132cf7809eb80b5c696c7d;\n\n        gammaABC = new uint256[](8);\n        gammaABC[0] = 0x02e10a3d18c9ddc8a7faf5e20d6cd56ae82426e802596b8e424c8d24a2d8cc91;\n        gammaABC[1] = 0x0fcf4f982b4c051fe7d7e25d73c174f709e1a116a39573f5ebcce86a694086ac;\n        gammaABC[2] = 0x0647167a8df2f9de6e1dbd6e6e52e8bcf6b64d7fb9a6405f3efca93f250cac14;\n        gammaABC[3] = 0x2045113ec018db92050dba997d86b3b440c420d55819887fee065a17ef897897;\n        gammaABC[4] = 0x253baaed4e84773d8b85c1ac4d0b64d15d5652b318c3a72daf96a6d26a6d1481;\n        gammaABC[5] = 0x170034f174be16fd996aeb4ac97653a3f0e344ed8b5dbe947d952208a938edba;\n        gammaABC[6] = 0x23967a7baa217743b308217c7db86912a130a668bce7c9ac030d5ed42472347c;\n        gammaABC[7] = 0x2bfd3180a31b3fef9328b1225755ea2e7ca8d1e832cb4729930e15b5f842300d;\n\n\n    }\n\n}\n\ncontract TransferVerificationKey {\n\n    function getVkTransferCircuit() internal pure returns (uint256[14] memory vk, uint256[] memory gammaABC) {\n\n        \n        vk[0] = 0x10c2409dca4fa02e16250e08e4cbf8eae90c8fba1e91115f065f88f73d0ec0ba;\n        vk[1] = 0x0aa6ecb84f58760a6a01d0f31bb8776582c893f66562b623d9082e50b9147015;\n        vk[2] = 0x10296458aa3bcd5ad37ae95f63f55e90b8830fe1449dc21aee05ebdf7e29ef14;\n        vk[3] = 0x0f51783ae1ca492c229a5d04bc2de03ff6ff9a4f877a2bc80bb60eb1f70cc84b;\n        vk[4] = 0x0f874f1341d40fe04cebe4668c968c74d2d09aa07e4685889c90f6d4ec4345de;\n        vk[5] = 0x1652c73a52779311ca7ffdcd9749e40592780259a9c9e738b63199dad11d7f17;\n        vk[6] = 0x086d1b9a535ffcebe71f045e022967f0c113114c04a1bf944a395c14cce50f49;\n        vk[7] = 0x2b2166f750b92453a4bc000425e93c3c412d911961dcd9050c61368f07673262;\n        vk[8] = 0x12ba168ac5544a1b8c1bd3c47b6d9a1391db76a608e4556b639e0032e2deffbe;\n        vk[9] = 0x2b32a828faf0bb870f693cc8031c166b0063d854c435ea1b516e67ba5a6d8907;\n        vk[10] = 0x100f54919b2e2f9ddaacfae446be3614441bb0e451380ec96658979748613433;\n        vk[11] = 0x066bcceed5d7a04466af77a2af1e9ca005a12f19bc4d7cc8e231354885b82607;\n        vk[12] = 0x28782e5b286bda594b1ad6320c62df3dbfcf4db5043430d19204f46a34fd4119;\n        vk[13] = 0x11b16528236d3aba305c2f3b051b0d88902465da7969d8b6719fbf9dd35dcf2a;\n\n        gammaABC = new uint256[](8);\n        gammaABC[0] = 0x0f33cb3065f68e121317d06f1424955c5a7e2ec8edebc909aac08a3f17069886;\n        gammaABC[1] = 0x037f77f317232115d1e59c5d751cdfc7cb71860def1eac9c26601ca608818d82;\n        gammaABC[2] = 0x160621974534ddb69577555fb5add3b219fc3d7940d6af98fd0b4d1323e98a02;\n        gammaABC[3] = 0x0f99ebad244805d05f610d8a9e2fb9395fe4159ed19ff545c1663395faf2e54e;\n        gammaABC[4] = 0x252887d8a49ac0d88d097657230f297137e590d836a958c33f6e86737a7b6d5d;\n        gammaABC[5] = 0x303d4a352e156b053325cd397e875076f30a41b8b5cb919c284f76021c95d506;\n        gammaABC[6] = 0x12373b5d89c0ded59c6cff32b0ff93b98a46b0fabc01be54748fbe072c34721e;\n        gammaABC[7] = 0x00c29f8e6d126eff674bede612ba90717ef37c8fa3431309d2bb81dac30871e5;\n\n\n    }\n\n}\n\ncontract VerificationKeys is TransferVerificationKey, DepositVerificationKey, ExitVerificationKey {\n}\n\ncontract FranklinCommon is VerificationKeys, FranklinStorage, Verifier {\n\n    modifier active_only() {\n        require(!stopped, \"contract should not be globally stopped\");\n        _;\n    }\n\n    modifier operator_only() {\n        require(operators[msg.sender] == true, \"sender should be one of the operators\");\n        _;\n    }\n\n    // unit normalization functions\n    function scaleIntoPlasmaUnitsFromWei(uint256 value)\n    public\n    pure\n    returns (uint128) {\n        uint256 den = DENOMINATOR;\n        require(value % den == 0, \"amount has higher precision than possible\");\n        uint256 scaled = value / den;\n        require(scaled < uint256(1) << 128, \"deposit amount is too high\");\n        return uint128(scaled);\n    }\n\n    function scaleFromPlasmaUnitsIntoWei(uint128 value)\n    public\n    pure\n    returns (uint256) {\n        return uint256(value) * DENOMINATOR;\n    }\n\n    function verifyProof(Circuit circuitType, uint256[8] memory proof, bytes32 oldRoot, bytes32 newRoot, bytes32 finalHash)\n        internal view returns (bool valid)\n    {\n        uint256 mask = (~uint256(0)) >> 3;\n        uint256[14] memory vk;\n        uint256[] memory gammaABC;\n        if (circuitType == Circuit.DEPOSIT) {\n            (vk, gammaABC) = getVkDepositCircuit();\n        } else if (circuitType == Circuit.TRANSFER) {\n            (vk, gammaABC) = getVkTransferCircuit();\n        } else if (circuitType == Circuit.EXIT) {\n            (vk, gammaABC) = getVkExitCircuit();\n        } else {\n            return false;\n        }\n        uint256[] memory inputs = new uint256[](3);\n        inputs[0] = uint256(oldRoot);\n        inputs[1] = uint256(newRoot);\n        inputs[2] = uint256(finalHash) & mask;\n        return Verify(vk, gammaABC, proof, inputs);\n    }\n\n}\n\ncontract Depositor is FranklinCommon {\n    \n    function deposit(uint256[2] memory publicKey, uint128 maxFee) \n    public \n    payable \n    active_only()\n    {\n        // only registed an account or do the lookup\n        uint24 accountID = ethereumAddressToAccountID[msg.sender];\n        if (accountID == 0) {\n            // register new account\n            uint256 packedKey = packAndValidatePublicKey(publicKey);\n            ethereumAddressToAccountID[msg.sender] = nextAccountToRegister;\n            Account memory freshAccount = Account(\n                uint8(AccountState.REGISTERED),\n                uint32(0),\n                msg.sender,\n                packedKey,\n                uint32(0),\n                uint32(0)\n            );\n            accountID = nextAccountToRegister;\n            accounts[accountID] = freshAccount;\n            // bump accounts counter\n            nextAccountToRegister += 1;\n        }\n        depositInto(accountID, maxFee);\n    }\n\n    function depositInto(uint24 accountID, uint128 maxFee) \n    public \n    payable \n    active_only()\n    {\n        // this comparison is to avoid frontrunning between user\n        // and the operator\n        require(maxFee >= currentDepositBatchFee, \"deposit fee is less than required\");\n        uint128 scaledValue = scaleIntoPlasmaUnitsFromWei(msg.value);\n        require(scaledValue >= currentDepositBatchFee, \"deposit amount should cover the fee\");\n        require(accountID < nextAccountToRegister, \"for now only allow to deposit into non-empty accounts\");\n        // read account info\n        Account memory accountInformation = accounts[accountID];\n        require(accountInformation.state == uint8(AccountState.REGISTERED), \"can only deposit into registered account\");\n\n        // work with a deposit\n        uint256 currentBatch = totalDepositRequests / DEPOSIT_BATCH_SIZE;\n        // write aux info about the batch\n        DepositBatch storage batch = depositBatches[currentBatch];\n        // amount of time for an operator to process a batch is counted\n        // from the first deposit in the batch\n        if (batch.timestamp == 0) {\n            batch.state = uint8(DepositBatchState.CREATED);\n            batch.numRequests = uint24(0);\n            batch.timestamp = uint64(block.timestamp);\n            batch.batchFee = currentDepositBatchFee;\n        }\n        scaledValue -= currentDepositBatchFee;\n        // get request in this batch for this account\n        DepositRequest storage request = depositRequests[currentBatch][accountID];\n        \n        if (request.amount == 0) {\n            // this is a new request in this batch\n            batch.numRequests++;\n            totalDepositRequests++;\n        }\n        request.amount += scaledValue;\n        \n        emit LogDepositRequest(currentBatch, accountID, accountInformation.publicKey, request.amount);\n    }\n\n    // allow users to cancel a deposit if the work on the next proof is not yet started\n    function cancelDeposit()\n    public\n    {\n        uint24 accountID = ethereumAddressToAccountID[msg.sender];\n        require(accountID != 0, \"trying to cancel a deposit for non-existing account\");\n        uint256 currentBatch = totalDepositRequests/DEPOSIT_BATCH_SIZE;\n        uint256 requestsInThisBatch = totalDepositRequests % DEPOSIT_BATCH_SIZE;\n        DepositBatch storage batch = depositBatches[currentBatch];\n        // this check is most likely excessive, \n        require(batch.state == uint8(DepositBatchState.CREATED), \"canceling is only allowed for batches that are not yet committed\");\n    \n        DepositRequest storage request = depositRequests[currentBatch][accountID];\n        uint128 depositAmount = request.amount;\n        require(depositAmount > 0, \"trying to cancel an empty deposit\");\n\n        // add a batch fee that was previously subtracted\n        depositAmount += batch.batchFee;\n        // log and clear the storage\n        emit LogCancelDepositRequest(currentBatch, accountID);\n        // if the first request in a batch is canceled - clear it to stop the countdown\n        if (requestsInThisBatch == 0) { \n            delete depositBatches[currentBatch];\n        }\n        delete depositRequests[currentBatch][accountID];\n        totalDepositRequests--;\n        batch.numRequests--;\n\n        msg.sender.transfer(scaleFromPlasmaUnitsIntoWei(depositAmount));\n    }\n\n    function startNextDepositBatch()\n    public\n    active_only()\n    operator_only()\n    {\n        uint256 currentBatch = totalDepositRequests/DEPOSIT_BATCH_SIZE;\n        uint256 inTheCurrentBatch = totalDepositRequests % DEPOSIT_BATCH_SIZE;\n        if (inTheCurrentBatch != 0) {\n            totalDepositRequests = (currentBatch + 1) * DEPOSIT_BATCH_SIZE;\n        } else {\n            revert(\"it's not necessary to bump the batch number\");\n        }\n \n    }\n\n    function changeDepositBatchFee(uint128 newBatchFee)\n    public\n    active_only()\n    operator_only()\n    {\n        if (currentDepositBatchFee != newBatchFee) {\n            currentDepositBatchFee = newBatchFee;\n        } else {\n            revert(\"fee adjustment makes no sense\");\n        } \n    }\n\n    // pure function to calculate commitment formats\n    function createPublicDataCommitmentForDeposit(uint32 blockNumber, bytes memory txDataPacked)\n    public \n    pure\n    returns (bytes32 h) {\n\n        bytes32 initialHash = sha256(abi.encodePacked(uint256(blockNumber)));\n        bytes32 finalHash = sha256(abi.encodePacked(initialHash, txDataPacked));\n        \n        return finalHash;\n    }\n\n    // on commitment to some block we just commit to SOME public data, that will be parsed \n    // ONLY when proof is presented\n    \n    function commitDepositBlock(\n        uint256 batchNumber,\n        uint24[DEPOSIT_BATCH_SIZE] memory accoundIDs,\n        uint32 blockNumber, \n        bytes32 newRoot\n    ) \n    public\n    active_only()\n    operator_only()\n    {\n        require(blockNumber == lastCommittedBlockNumber + 1, \"may only commit next block\");\n        require(batchNumber == lastCommittedDepositBatch, \"trying to commit batch out of order\");\n        \n        DepositBatch storage batch = depositBatches[batchNumber];\n        batch.state = uint8(DepositBatchState.COMMITTED);\n        batch.blockNumber = blockNumber;\n        batch.timestamp = uint64(block.timestamp);\n\n        // pack the public data using information that it's already on-chain\n        bytes memory txDataPacked = processDepositBlockData(batchNumber, accoundIDs);\n        \n        // create now commitments and write to storage\n        bytes32 publicDataCommitment = createPublicDataCommitmentForDeposit(blockNumber, txDataPacked);\n\n        blocks[blockNumber] = Block(\n            uint8(Circuit.DEPOSIT), \n            uint64(block.timestamp + MAX_DELAY), \n            0, \n            newRoot, \n            publicDataCommitment, \n            msg.sender\n        );\n        emit BlockCommitted(blockNumber);\n        lastCommittedBlockNumber++;\n        lastCommittedDepositBatch++;\n    }\n\n    function verifyDepositBlock(\n        uint256 batchNumber, \n        uint24[DEPOSIT_BATCH_SIZE] memory accoundIDs, \n        uint32 blockNumber, \n        uint256[8] memory proof\n    ) \n    public \n    active_only()\n    operator_only()\n    {\n        require(lastVerifiedBlockNumber < lastCommittedBlockNumber, \"no committed block to verify\");\n        require(blockNumber == lastVerifiedBlockNumber + 1, \"may only verify next block\");\n        require(batchNumber == lastVerifiedDepositBatch, \"must verify batches in order\");\n\n        Block storage committed = blocks[blockNumber];\n        require(committed.circuit == uint8(Circuit.DEPOSIT), \"trying to prove the invalid circuit for this block number\");\n\n        DepositBatch storage batch = depositBatches[batchNumber];\n        require(batch.blockNumber == blockNumber, \"block number in referencing invalid batch number\");\n        batch.state = uint8(DepositBatchState.VERIFIED);\n        batch.timestamp = uint64(block.timestamp);\n\n        // do actual verification\n        bool verification_success = verifyProof(\n            Circuit.DEPOSIT,\n            proof, \n            lastVerifiedRoot, \n            committed.newRoot, \n            committed.publicDataCommitment\n        );\n        require(verification_success, \"invalid proof\");\n\n        emit BlockVerified(blockNumber);\n        lastVerifiedBlockNumber++;\n        lastVerifiedDepositBatch++;\n        lastVerifiedRoot = committed.newRoot;\n\n        uint128 totalFees = clearDepositBatch(batchNumber, accoundIDs);\n        committed.totalFees = totalFees;\n        balances[committed.prover] += totalFees;\n        // process the block information\n    }\n\n    // transaction data is trivial: 3 bytes of in-plasma address, 16 bytes of amount and 32 bytes of public key\n    function processDepositBlockData(uint256 batchNumber, uint24[DEPOSIT_BATCH_SIZE] memory accountIDs) \n    internal \n    view\n    returns (bytes memory txData)\n    {\n        txData = new bytes(DEPOSIT_BATCH_SIZE * 51);\n        uint256 chunk;\n        uint128 requestAmount;\n        uint256 publicKey;\n        uint256 pointer = 32;\n        uint24 specialAccountID = SPECIAL_ACCOUNT_DEPOSITS;\n        uint256 numRequestsInBatch = uint256(depositBatches[batchNumber].numRequests);\n        uint24 id;\n        for (uint256 i = 0; i < numRequestsInBatch; i++) { \n            // this is a cheap way to ensure that all requests are unique, without O(n) MSTORE\n            // it also automatically guarantees that all requests requests from the batch have been executed\n            require(i == 0 || accountIDs[i] > accountIDs[i-1], \"accountID are not properly ordered\");\n            id = accountIDs[i];\n            require(id != specialAccountID, \"batch should contain non-padding accounts first\");\n            requestAmount = depositRequests[batchNumber][id].amount;\n            publicKey = accounts[id].publicKey;\n            // put address and amount into the top bits of the chunk\n            // address || amount || 0000...0000\n            chunk = ((uint256(id) << 128) + uint256(requestAmount)) << 104;\n            // and store it into place\n            assembly {\n                mstore(add(txData, pointer), chunk)\n            }\n            pointer += 19;\n            assembly {\n                mstore(add(txData, pointer), publicKey)\n            }\n            pointer += 32;\n        }\n        chunk = uint256(specialAccountID) << 232;\n        publicKey = accounts[specialAccountID].publicKey;\n\n        for (i = numRequestsInBatch; i < DEPOSIT_BATCH_SIZE; i++) { \n            id = accountIDs[i];\n            require(id == specialAccountID, \"padding should be done with special account number\");\n            assembly {\n                mstore(add(txData, pointer), chunk)\n            }\n            pointer += 19;\n            assembly {\n                mstore(add(txData, pointer), publicKey)\n            }\n            pointer += 32;\n        }\n\n        return txData;\n    }\n\n    // transaction data is trivial: 3 bytes of in-plasma address and 16 bytes of amount\n    function clearDepositBatch(uint256 batchNumber, uint24[DEPOSIT_BATCH_SIZE] memory accountIDs) \n    internal \n    returns (uint128 totalFees)\n    {\n        uint128 batchFee = depositBatches[batchNumber].batchFee;\n        for (uint256 i = 0; i < DEPOSIT_BATCH_SIZE; i++) { \n            if (accountIDs[i] == 0) {\n                // this was just a padding\n                continue;\n            }\n            require(i == 0 || accountIDs[i] > accountIDs[i-1], \"accountID are not properly ordered\");\n            DepositRequest storage request = depositRequests[batchNumber][accountIDs[i]];\n            require(request.amount != 0, \"trying to process an empty request and collect fees\");\n            delete depositRequests[batchNumber][accountIDs[i]];\n            totalFees += batchFee;\n        }\n        return totalFees;\n    }\n\n    function packAndValidatePublicKey(uint256[2] memory publicKey)\n    public\n    pure\n    returns(uint256 packed) {\n        require(TwistedEdwards.checkOnCurve(publicKey), \"public key must be on the curve\");\n        // group check + packing\n        packed = publicKey[1] + ((publicKey[0] & 1) << 255);\n        return packed;\n    }\n\n    // function () external payable {\n    //     address callee = transactor;\n    //     assembly {\n    //         let memoryPointer := mload(0x40)\n    //         calldatacopy(memoryPointer, 0, calldatasize)\n    //         let newFreeMemoryPointer := add(memoryPointer, calldatasize)\n    //         mstore(0x40, newFreeMemoryPointer)\n    //         let retVal := delegatecall(sub(gas, 2000), callee, memoryPointer, calldatasize, newFreeMemoryPointer, 0x40)\n    //         let retDataSize := returndatasize\n    //         returndatacopy(newFreeMemoryPointer, 0, retDataSize)\n    //         switch retVal case 0 { revert(0,0) } default { return(newFreeMemoryPointer, retDataSize) }\n    //     }\n    // }\n}",
  "bytecode": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550615e0c806100536000396000f30060806040526004361061021a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806309b7f4971461021f57806313e7c9d81461025257806318a63d9c146102ad5780631d15b341146102c45780631e8072a21461031b578063254e88e2146103505780632713ad691461037b57806327e235e3146103d257806329a081ac146104295780632ad67a96146104545780632c87c6c9146104f2578063351eb751146105575780633d561602146105825780634125ff901461059957806346c7e4bc146105d85780634c5ff682146105ef5780635300e4101461061a578063533de30a1461068e57806357d2ae24146107085780635cd0783e146107575780635df1b4331461083b578063609293b71461087c57806363d078aa1461091157806375f12b211461093c5780637dc38ab91461096b578063838e204914610a2a5780638512153f14610a6157806385611d2614610ac25780638ecb72d114610b23578063918f867414610b7a57806395b5d61714610ba55780639d9c941914610c41578063a082c86e14610ce1578063a15ff0c314610d0c578063a315c91b14610d5b578063c47ba19d14610dae578063c7c4ff4614610e14578063cd7543c014610e6b578063ed03f56314610ea0578063f47932ad14610ecb578063f4c163a414610f00578063f648a6c714610f37578063fb0cd20f14610f76578063fb1d501014611027575b600080fd5b34801561022b57600080fd5b50610234611052565b60405180826000191660001916815260200191505060405180910390f35b34801561025e57600080fd5b50610293600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611058565b604051808215151515815260200191505060405180910390f35b3480156102b957600080fd5b506102c2611078565b005b3480156102d057600080fd5b506102d96112e9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561032757600080fd5b5061033061130e565b604051808262ffffff1662ffffff16815260200191505060405180910390f35b34801561035c57600080fd5b50610365611313565b6040518082815260200191505060405180910390f35b34801561038757600080fd5b50610390611319565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103de57600080fd5b50610413600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061133f565b6040518082815260200191505060405180910390f35b34801561043557600080fd5b5061043e611357565b6040518082815260200191505060405180910390f35b34801561046057600080fd5b506104a5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803563ffffffff16906020019092919050505061135d565b604051808363ffffffff1663ffffffff168152602001826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b3480156104fe57600080fd5b5061051d600480360381019080803590602001909291905050506113ba565b60405180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561056357600080fd5b5061056c611507565b6040518082815260200191505060405180910390f35b34801561058e57600080fd5b5061059761150c565b005b3480156105a557600080fd5b506105ae6119f4565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b3480156105e457600080fd5b506105ed6119fb565b005b3480156105fb57600080fd5b50610604611b1f565b6040518082815260200191505060405180910390f35b34801561062657600080fd5b5061065460048036038101908080359060200190929190803562ffffff169060200190929190505050611b25565b60405180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561069a57600080fd5b50610706600480360381019080803590602001909291908060200190600180602002604051908101604052809291908260016020028082843782019150505050509192919290803563ffffffff1690602001909291908035600019169060200190929190505050611b6c565b005b34801561071457600080fd5b5061071d61210e565b60405180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561076357600080fd5b50610788600480360381019080803563ffffffff169060200190929190505050612130565b604051808760ff1660ff1681526020018667ffffffffffffffff1667ffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001846000191660001916815260200183600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001965050505050505060405180910390f35b61087a600480360381019080803562ffffff16906020019092919080356fffffffffffffffffffffffffffffffff1690602001909291905050506121c9565b005b34801561088857600080fd5b506108f3600480360381019080803563ffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506129bb565b60405180826000191660001916815260200191505060405180910390f35b34801561091d57600080fd5b50610926612bb4565b6040518082815260200191505060405180910390f35b34801561094857600080fd5b50610951612bba565b604051808215151515815260200191505060405180910390f35b34801561097757600080fd5b5061099b600480360381019080803562ffffff169060200190929190505050612bcd565b604051808760ff1660ff1681526020018663ffffffff1663ffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018363ffffffff1663ffffffff1681526020018263ffffffff1663ffffffff168152602001965050505050505060405180910390f35b348015610a3657600080fd5b50610a3f612c66565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b348015610a6d57600080fd5b50610aa2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c7c565b604051808262ffffff1662ffffff16815260200191505060405180910390f35b610b21600480360381019080806040019060028060200260405190810160405280929190826002602002808284378201915050505050919291929080356fffffffffffffffffffffffffffffffff169060200190929190505050612c9e565b005b348015610b2f57600080fd5b50610b38612ff7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b8657600080fd5b50610b8f61301d565b6040518082815260200191505060405180910390f35b348015610bb157600080fd5b50610c3f600480360381019080803590602001909291908060200190600180602002604051908101604052809291908260016020028082843782019150505050509192919290803563ffffffff169060200190929190806101000190600880602002604051908101604052809291908260086020028082843782019150505050509192919290505050613026565b005b348015610c4d57600080fd5b50610c6c60048036038101908080359060200190929190505050613775565b604051808560ff1660ff1681526020018463ffffffff1663ffffffff1681526020018367ffffffffffffffff1667ffffffffffffffff168152602001826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200194505050505060405180910390f35b348015610ced57600080fd5b50610cf66137f2565b6040518082815260200191505060405180910390f35b348015610d1857600080fd5b50610d216137f8565b60405180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610d6757600080fd5b50610d9860048036038101908080356fffffffffffffffffffffffffffffffff16906020019092919050505061381a565b6040518082815260200191505060405180910390f35b348015610dba57600080fd5b50610dfe600480360381019080806040019060028060200260405190810160405280929190826002602002808284378201915050505050919291929050505061383d565b6040518082815260200191505060405180910390f35b348015610e2057600080fd5b50610e296138f9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610e7757600080fd5b50610e8061391f565b604051808262ffffff1662ffffff16815260200191505060405180910390f35b348015610eac57600080fd5b50610eb5613924565b6040518082815260200191505060405180910390f35b348015610ed757600080fd5b50610ee061392a565b604051808262ffffff1662ffffff16815260200191505060405180910390f35b348015610f0c57600080fd5b50610f1561393f565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b348015610f4357600080fd5b50610f7460048036038101908080356fffffffffffffffffffffffffffffffff169060200190929190505050613955565b005b348015610f8257600080fd5b50610fa160048036038101908080359060200190929190505050613be8565b604051808660ff1660ff1681526020018562ffffff1662ffffff1681526020018463ffffffff1663ffffffff1681526020018367ffffffffffffffff1667ffffffffffffffff168152602001826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019550505050505060405180910390f35b34801561103357600080fd5b5061103c613c7a565b6040518082815260200191505060405180910390f35b60075481565b60026020528060005260406000206000915054906101000a900460ff1681565b600080600660009054906101000a900460ff16151515611126576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f636f6e74726163742073686f756c64206e6f7420626520676c6f62616c6c792081526020017f73746f707065640000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60011515600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611214576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f73656e6465722073686f756c64206265206f6e65206f6620746865206f70657281526020017f61746f727300000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600160085481151561122257fe5b049150600160085481151561123357fe5b069050600081141515611251576001808301026008819055506112e5565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001807f69742773206e6f74206e656365737361727920746f2062756d7020746865206281526020017f61746368206e756d62657200000000000000000000000000000000000000000081525060400191505060405180910390fd5b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081565b60085481565b601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090505481565b600e5481565b6013602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900463ffffffff16908060000160049054906101000a90046fffffffffffffffffffffffffffffffff16905082565b600080600064e8d4a510009150600082858115156113d457fe5b06141515611470576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f616d6f756e74206861732068696768657220707265636973696f6e207468616e81526020017f20706f737369626c65000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b818481151561147b57fe5b049050608060019060020a02811015156114fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f6465706f73697420616d6f756e7420697320746f6f206869676800000000000081525060200191505060405180910390fd5b8092505050919050565b600181565b600080600080600080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900462ffffff16955060008662ffffff161415151561160a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001807f747279696e6720746f2063616e63656c2061206465706f73697420666f72206e81526020017f6f6e2d6578697374696e67206163636f756e740000000000000000000000000081525060400191505060405180910390fd5b600160085481151561161857fe5b049450600160085481151561162957fe5b069350600d600086815260200190815260200160002092506000600281111561164e57fe5b60ff168360000160009054906101000a900460ff1660ff16141515611701576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260408152602001807f63616e63656c696e67206973206f6e6c7920616c6c6f77656420666f7220626181526020017f7463686573207468617420617265206e6f742079657420636f6d6d697474656481525060400191505060405180910390fd5b600c600086815260200190815260200160002060008762ffffff1662ffffff16815260200190815260200160002091508160000160009054906101000a90046fffffffffffffffffffffffffffffffff1690506000816fffffffffffffffffffffffffffffffff16111515611804576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f747279696e6720746f2063616e63656c20616e20656d707479206465706f736981526020017f740000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8260000160109054906101000a90046fffffffffffffffffffffffffffffffff16810190508562ffffff16857fd99f8eb80f2e84189fe41fb9bed3506f73da9be70a0df39e2b4a997e92dbd61a60405160405180910390a360008414156118fb57600d6000868152602001908152602001600020600080820160006101000a81549060ff02191690556000820160016101000a81549062ffffff02191690556000820160046101000a81549063ffffffff02191690556000820160086101000a81549067ffffffffffffffff02191690556000820160106101000a8154906fffffffffffffffffffffffffffffffff021916905550505b600c600086815260200190815260200160002060008762ffffff1662ffffff168152602001908152602001600020600080820160006101000a8154906fffffffffffffffffffffffffffffffff021916905550506008600081548092919060019003919050555082600001600181819054906101000a900462ffffff16809291906001900391906101000a81548162ffffff021916908362ffffff160217905550503373ffffffffffffffffffffffffffffffffffffffff166108fc6119c08361381a565b9081150290604051600060405180830381858888f193505050501580156119eb573d6000803e3d6000fd5b50505050505050565b6201518081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ae5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f6f6e6c792063726561746f722063616e20636c65616e2075702074657374206381526020017f6f6e74726163747300000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b600f5481565b600c602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16905081565b600060606000600660009054906101000a900460ff16151515611c1d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f636f6e74726163742073686f756c64206e6f7420626520676c6f62616c6c792081526020017f73746f707065640000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60011515600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611d0b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f73656e6465722073686f756c64206265206f6e65206f6620746865206f70657281526020017f61746f727300000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6001600660019054906101000a900463ffffffff160163ffffffff168563ffffffff16141515611da3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f6d6179206f6e6c7920636f6d6d6974206e65787420626c6f636b00000000000081525060200191505060405180910390fd5b60095487141515611e42576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f747279696e6720746f20636f6d6d6974206261746368206f7574206f66206f7281526020017f646572000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600d6000888152602001908152602001600020925060016002811115611e6457fe5b8360000160006101000a81548160ff021916908360ff160217905550848360000160046101000a81548163ffffffff021916908363ffffffff160217905550428360000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550611ed88787613c80565b9150611ee485836129bb565b905060c06040519081016040528060006002811115611eff57fe5b60ff1681526020016201518067ffffffffffffffff16420167ffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200185600019168152602001826000191681526020013373ffffffffffffffffffffffffffffffffffffffff16815250600160008763ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160096101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550606082015181600101906000191690556080820151816002019060001916905560a08201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508463ffffffff167fdf39762be389bd636a9efb2e4f3b26ac7d22eda4f0840f389209987a09e50fc960405160405180910390a26006600181819054906101000a900463ffffffff168092919060010191906101000a81548163ffffffff021916908363ffffffff1602179055505060096000815480929190600101919050555050505050505050565b601160009054906101000a90046fffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900467ffffffffffffffff16908060000160099054906101000a90046fffffffffffffffffffffffffffffffff16908060010154908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905086565b60006121d3615cb3565b6000806000600660009054906101000a900460ff16151515612283576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f636f6e74726163742073686f756c64206e6f7420626520676c6f62616c6c792081526020017f73746f707065640000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600b60009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff1610151515612363576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f6465706f73697420666565206973206c657373207468616e207265717569726581526020017f640000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61236c346113ba565b9450600b60009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16856fffffffffffffffffffffffffffffffff161015151561244e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f6465706f73697420616d6f756e742073686f756c6420636f766572207468652081526020017f666565000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600b60109054906101000a900462ffffff1662ffffff168762ffffff16101515612506576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001807f666f72206e6f77206f6e6c7920616c6c6f7720746f206465706f73697420696e81526020017f746f206e6f6e2d656d707479206163636f756e7473000000000000000000000081525060400191505060405180910390fd5b600560008862ffffff1662ffffff16815260200190815260200160002060c060405190810160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016002820160049054906101000a900463ffffffff1663ffffffff1663ffffffff168152505093506001600381111561262d57fe5b60ff16846000015160ff161415156126d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f63616e206f6e6c79206465706f73697420696e746f207265676973746572656481526020017f206163636f756e7400000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60016008548115156126e157fe5b049250600d6000848152602001908152602001600020915060008260000160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1614156127f4576000600281111561273157fe5b8260000160006101000a81548160ff021916908360ff16021790555060008260000160016101000a81548162ffffff021916908362ffffff160217905550428260000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600b60009054906101000a90046fffffffffffffffffffffffffffffffff168260000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b600b60009054906101000a90046fffffffffffffffffffffffffffffffff1685039450600c600084815260200190815260200160002060008862ffffff1662ffffff168152602001908152602001600020905060008160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1614156128cf5781600001600181819054906101000a900462ffffff168092919060010191906101000a81548162ffffff021916908362ffffff160217905550506008600081548092919060010191905055505b848160000160008282829054906101000a90046fffffffffffffffffffffffffffffffff160192506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555083606001518762ffffff16847f77576c82d939ce0a49902463e0dd51c0257e560ff4f55a51a702af4ed76912668460000160009054906101000a90046fffffffffffffffffffffffffffffffff1660405180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200191505060405180910390a450505050505050565b600080600060028563ffffffff16604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083101515612a1d57805182526020820191506020810190506020830392506129f8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506020604051808303816000865af1158015612a61573d6000803e3d6000fd5b5050506040513d6020811015612a7657600080fd5b810190808051906020019092919050505091506002828560405160200180836000191660001916815260200182805190602001908083835b602083101515612ad35780518252602082019150602081019050602083039250612aae565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b602083101515612b3d5780518252602082019150602081019050602083039250612b18565b6001836020036101000a0380198251168184511680821785525050505050509050019150506020604051808303816000865af1158015612b81573d6000803e3d6000fd5b5050506040513d6020811015612b9657600080fd5b81019080805190602001909291905050509050809250505092915050565b600a5481565b600660009054906101000a900460ff1681565b60056020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900463ffffffff16908060000160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900463ffffffff16908060020160049054906101000a900463ffffffff16905086565b600660019054906101000a900463ffffffff1681565b60046020528060005260406000206000915054906101000a900462ffffff1681565b600080612ca9615cb3565b600660009054906101000a900460ff16151515612d54576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f636f6e74726163742073686f756c64206e6f7420626520676c6f62616c6c792081526020017f73746f707065640000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900462ffffff16925060008362ffffff161415612fe657612dbc8561383d565b9150600b60109054906101000a900462ffffff16600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548162ffffff021916908362ffffff16021790555060c06040519081016040528060016003811115612e4457fe5b60ff168152602001600063ffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001838152602001600063ffffffff168152602001600063ffffffff168152509050600b60109054906101000a900462ffffff16925080600560008562ffffff1662ffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160056101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816001015560808201518160020160006101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160020160046101000a81548163ffffffff021916908363ffffffff1602179055509050506001600b60108282829054906101000a900462ffffff160192506101000a81548162ffffff021916908362ffffff1602179055505b612ff083856121c9565b5050505050565b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b64e8d4a5100081565b600080600080600660009054906101000a900460ff161515156130d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f636f6e74726163742073686f756c64206e6f7420626520676c6f62616c6c792081526020017f73746f707065640000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60011515600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156131c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f73656e6465722073686f756c64206265206f6e65206f6620746865206f70657281526020017f61746f727300000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600660019054906101000a900463ffffffff1663ffffffff16600660059054906101000a900463ffffffff1663ffffffff1610151561326c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f6e6f20636f6d6d697474656420626c6f636b20746f207665726966790000000081525060200191505060405180910390fd5b6001600660059054906101000a900463ffffffff160163ffffffff168663ffffffff16141515613304576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f6d6179206f6e6c7920766572696679206e65787420626c6f636b00000000000081525060200191505060405180910390fd5b600a548814151561337d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f6d75737420766572696679206261746368657320696e206f726465720000000081525060200191505060405180910390fd5b600160008763ffffffff1663ffffffff1681526020019081526020016000209350600060028111156133ab57fe5b60ff168460000160009054906101000a900460ff1660ff1614151561345e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001807f747279696e6720746f2070726f76652074686520696e76616c6964206369726381526020017f75697420666f72207468697320626c6f636b206e756d6265720000000000000081525060400191505060405180910390fd5b600d600089815260200190815260200160002092508563ffffffff168360000160049054906101000a900463ffffffff1663ffffffff16141515613530576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f626c6f636b206e756d62657220696e207265666572656e63696e6720696e766181526020017f6c6964206261746368206e756d6265720000000000000000000000000000000081525060400191505060405180910390fd5b60028081111561353c57fe5b8360000160006101000a81548160ff021916908360ff160217905550428360000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555061359b6000866007548760010154886002015461408f565b9150811515613612576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f696e76616c69642070726f6f660000000000000000000000000000000000000081525060200191505060405180910390fd5b8563ffffffff167fca558d7524956f89ce1ec833efe8a265ed2b1e92b20ff4fe2fb87fb1a042e52460405160405180910390a26006600581819054906101000a900463ffffffff168092919060010191906101000a81548163ffffffff021916908363ffffffff16021790555050600a600081548092919060010191905055508360010154600781600019169055506136ab8888614207565b9050808460000160096101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550806fffffffffffffffffffffffffffffffff16600360008660030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505050505050505050565b60126020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900463ffffffff16908060000160059054906101000a900467ffffffffffffffff169080600001600d9054906101000a90046fffffffffffffffffffffffffffffffff16905084565b610e1081565b600b60009054906101000a90046fffffffffffffffffffffffffffffffff1681565b600064e8d4a51000826fffffffffffffffffffffffffffffffff16029050919050565b6000613848826144e6565b15156138bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f7075626c6963206b6579206d757374206265206f6e207468652063757276650081525060200191505060405180910390fd5b60ff60018360006002811015156138cf57fe5b6020020151169060020a028260016002811015156138e957fe5b6020020151019050809050919050565b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600181565b60105481565b600b60109054906101000a900462ffffff1681565b600660059054906101000a900463ffffffff1681565b600660009054906101000a900460ff16151515613a00576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f636f6e74726163742073686f756c64206e6f7420626520676c6f62616c6c792081526020017f73746f707065640000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60011515600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515613aee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f73656e6465722073686f756c64206265206f6e65206f6620746865206f70657281526020017f61746f727300000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b806fffffffffffffffffffffffffffffffff16600b60009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16141515613b775780600b60006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550613be5565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6665652061646a7573746d656e74206d616b6573206e6f2073656e736500000081525060200191505060405180910390fd5b50565b600d6020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900462ffffff16908060000160049054906101000a900463ffffffff16908060000160089054906101000a900467ffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16905085565b60095481565b606060008060008060008060008060336001026040519080825280601f01601f191660200182016040528015613cc55781602001602082028038833980820191505090505b5098506020945060019350600d60008c815260200190815260200160002060000160019054906101000a900462ffffff1662ffffff169250600090505b82811015613f60576000811480613d4957508960018203600181101515613d2557fe5b602002015162ffffff168a82600181101515613d3d57fe5b602002015162ffffff16115b1515613de3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f6163636f756e74494420617265206e6f742070726f7065726c79206f7264657281526020017f656400000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8981600181101515613df157fe5b602002015191508362ffffff168262ffffff1614151515613ea0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f62617463682073686f756c6420636f6e7461696e206e6f6e2d70616464696e6781526020017f206163636f756e7473206669727374000000000000000000000000000000000081525060400191505060405180910390fd5b600c60008c815260200190815260200160002060008362ffffff1662ffffff16815260200190815260200160002060000160009054906101000a90046fffffffffffffffffffffffffffffffff169650600560008362ffffff1662ffffff1681526020019081526020016000206001015495506068876fffffffffffffffffffffffffffffffff1660808462ffffff169060020a02019060020a02975087858a015260138501945085858a01526020850194508080600101915050613d02565b60e88462ffffff169060020a029750600560008562ffffff1662ffffff1681526020019081526020016000206001015495508290505b600181101561407e578981600181101515613fad57fe5b602002015191508362ffffff168262ffffff1614151561405b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001807f70616464696e672073686f756c6420626520646f6e652077697468207370656381526020017f69616c206163636f756e74206e756d626572000000000000000000000000000081525060400191505060405180910390fd5b87858a015260138501945085858a01526020850194508080600101915050613f96565b889850505050505050505092915050565b60008061409a615d15565b60608060036000199060020a90049350600060028111156140b757fe5b8a60028111156140c357fe5b14156140de576140d161453e565b8093508194505050614150565b600160028111156140eb57fe5b8a60028111156140f757fe5b141561411257614105614a8d565b809350819450505061414f565b60028081111561411e57fe5b8a600281111561412a57fe5b141561414557614138614fdb565b809350819450505061414e565b600094506141fa565b5b5b60036040519080825280602002602001820160405280156141805781602001602082028038833980820191505090505b509050876001900481600081518110151561419757fe5b906020019060200201818152505086600190048160018151811015156141b957fe5b9060200190602002018181525050838660019004168160028151811015156141dd57fe5b90602001906020020181815250506141f783838b8461552a565b94505b5050505095945050505050565b600080600080600d600087815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff169250600091505b60018210156144da576000858360018110151561426057fe5b602002015162ffffff161415614275576144cd565b60008214806142b45750846001830360018110151561429057fe5b602002015162ffffff1685836001811015156142a857fe5b602002015162ffffff16115b151561434e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f6163636f756e74494420617265206e6f742070726f7065726c79206f7264657281526020017f656400000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600c60008781526020019081526020016000206000868460018110151561437157fe5b602002015162ffffff1662ffffff168152602001908152602001600020905060008160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1614151515614461576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001807f747279696e6720746f2070726f6365737320616e20656d70747920726571756581526020017f737420616e6420636f6c6c65637420666565730000000000000000000000000081525060400191505060405180910390fd5b600c60008781526020019081526020016000206000868460018110151561448457fe5b602002015162ffffff1662ffffff168152602001908152602001600020600080820160006101000a8154906fffffffffffffffffffffffffffffffff0219169055505082840193505b8180600101925050614247565b83935050505092915050565b60006144f0615d39565b604080519081016040528084600060028110151561450a57fe5b6020020151815260200184600160028110151561452357fe5b6020020151815250905061453681615b53565b915050919050565b614546615d15565b60607f02834523b73cb0630d49fc3e2054522563fb6471012d3f1e6fe31cb946240774826000600e8110151561457857fe5b6020020181815250507f0ba99f12ab5e9c80db6c85f62fb7a0df5d0dcb1088eb4b48d36156d816489128826001600e811015156145b157fe5b6020020181815250507f0f19b305cee59f6dc3c054880068b4a13768e5b901d0479271c20f8b79243965826002600e811015156145ea57fe5b6020020181815250507f11e32a8c382c7fb28b177d02e354607f7c33abc7f5636e71cd0fb4cd77eb1d74826003600e8110151561462357fe5b6020020181815250507f2bee5b6bb3fda73e29152d399f1bd211961f048eeb0d5a7d752ad9ffb649dff1826004600e8110151561465c57fe5b6020020181815250507f15ec0d94cdfe1fdcc23a58995e2af0b788fffae99691676fa943d608226b8682826005600e8110151561469557fe5b6020020181815250507f03f6ee67c8871c54c6f20e77376eb305e5b4964f1019bce1ad9ce22b2bec622c826006600e811015156146ce57fe5b6020020181815250507f21b45fc68e2059b1eab7eee045ab7be7ed45a2d3f6e3515ac1ec28f7b490b1dd826007600e8110151561470757fe5b6020020181815250507f0c9b53ea69e19134e41340bb6c0d1795661381291bf630c24396f8e866528002826008600e8110151561474057fe5b6020020181815250507f2e24ea773c3f54e3e7fc82249e7de02be3932e8b156800d9e4d19a5047f85cbb826009600e8110151561477957fe5b6020020181815250507f215e8c48ee50bad165d2420f9220145fa4cc98d7dcb52cc2a6e9010fd621441182600a600e811015156147b257fe5b6020020181815250507f1917a1144eb6f1c16ebf2673f2eb0fe275ae8bf518ae36553354580cd191293f82600b600e811015156147eb57fe5b6020020181815250507f1d636227f8db452d07a36077ffb1f0723947ae4cae746721445d3d249438ee5782600c600e8110151561482457fe5b6020020181815250507f13c4be40874508b0fa8b895657084e1a8e1bb7002d7a8cc05f0973763cb2075582600d600e8110151561485d57fe5b60200201818152505060086040519080825280602002602001820160405280156148965781602001602082028038833980820191505090505b5090507f017474e8efdf8775559844f978a7d23602c51508c42055cba41da71d8c1846628160008151811015156148c957fe5b90602001906020020181815250507f0479fb6bc0d7c11f5a734f450f6a47ec94bd59014f8398b248f59dc058b76b6481600181518110151561490757fe5b90602001906020020181815250507f06cef07cba4570717e5a1389b1425ed2f9d3de870c651254f557b82187eda82c81600281518110151561494557fe5b90602001906020020181815250507f1ba4b300e354352533d910452a340d16d2205ab18698cc5158bbb89a4d6340e981600381518110151561498357fe5b90602001906020020181815250507f16901a82f58d7d091cb47c0b8daa365e9c8dea97ff33d461044ce0c8f03cae718160048151811015156149c157fe5b90602001906020020181815250507f0902ea2f0d929f53465faab02d6e6c475868b5004b6ccdf29ec17fdcf1f4bf508160058151811015156149ff57fe5b90602001906020020181815250507f113c4aa77bfc12e18d3d0f64e840c2f912406ee9e61e476aaa67f8c743baa7c2816006815181101515614a3d57fe5b90602001906020020181815250507f176aa258bd76a01a4f744c71483afbc1ec4cd0529a6842b8a14c7feb75821e90816007815181101515614a7b57fe5b90602001906020020181815250509091565b614a95615d15565b60607f10c2409dca4fa02e16250e08e4cbf8eae90c8fba1e91115f065f88f73d0ec0ba826000600e81101515614ac757fe5b6020020181815250507f0aa6ecb84f58760a6a01d0f31bb8776582c893f66562b623d9082e50b9147015826001600e81101515614b0057fe5b6020020181815250507f10296458aa3bcd5ad37ae95f63f55e90b8830fe1449dc21aee05ebdf7e29ef14826002600e81101515614b3957fe5b6020020181815250507f0f51783ae1ca492c229a5d04bc2de03ff6ff9a4f877a2bc80bb60eb1f70cc84b826003600e81101515614b7257fe5b6020020181815250507f0f874f1341d40fe04cebe4668c968c74d2d09aa07e4685889c90f6d4ec4345de826004600e81101515614bab57fe5b6020020181815250507f1652c73a52779311ca7ffdcd9749e40592780259a9c9e738b63199dad11d7f17826005600e81101515614be457fe5b6020020181815250507f086d1b9a535ffcebe71f045e022967f0c113114c04a1bf944a395c14cce50f49826006600e81101515614c1d57fe5b6020020181815250507f2b2166f750b92453a4bc000425e93c3c412d911961dcd9050c61368f07673262826007600e81101515614c5657fe5b6020020181815250507f12ba168ac5544a1b8c1bd3c47b6d9a1391db76a608e4556b639e0032e2deffbe826008600e81101515614c8f57fe5b6020020181815250507f2b32a828faf0bb870f693cc8031c166b0063d854c435ea1b516e67ba5a6d8907826009600e81101515614cc857fe5b6020020181815250507f100f54919b2e2f9ddaacfae446be3614441bb0e451380ec9665897974861343382600a600e81101515614d0157fe5b6020020181815250507f066bcceed5d7a04466af77a2af1e9ca005a12f19bc4d7cc8e231354885b8260782600b600e81101515614d3a57fe5b6020020181815250507f28782e5b286bda594b1ad6320c62df3dbfcf4db5043430d19204f46a34fd411982600c600e81101515614d7357fe5b6020020181815250507f11b16528236d3aba305c2f3b051b0d88902465da7969d8b6719fbf9dd35dcf2a82600d600e81101515614dac57fe5b6020020181815250506008604051908082528060200260200182016040528015614de55781602001602082028038833980820191505090505b5090507f0f33cb3065f68e121317d06f1424955c5a7e2ec8edebc909aac08a3f17069886816000815181101515614e1857fe5b90602001906020020181815250507f037f77f317232115d1e59c5d751cdfc7cb71860def1eac9c26601ca608818d82816001815181101515614e5657fe5b90602001906020020181815250507f160621974534ddb69577555fb5add3b219fc3d7940d6af98fd0b4d1323e98a02816002815181101515614e9457fe5b90602001906020020181815250507f0f99ebad244805d05f610d8a9e2fb9395fe4159ed19ff545c1663395faf2e54e816003815181101515614ed257fe5b90602001906020020181815250507f252887d8a49ac0d88d097657230f297137e590d836a958c33f6e86737a7b6d5d816004815181101515614f1057fe5b90602001906020020181815250507f303d4a352e156b053325cd397e875076f30a41b8b5cb919c284f76021c95d506816005815181101515614f4e57fe5b90602001906020020181815250507f12373b5d89c0ded59c6cff32b0ff93b98a46b0fabc01be54748fbe072c34721e816006815181101515614f8c57fe5b90602001906020020181815250507ec29f8e6d126eff674bede612ba90717ef37c8fa3431309d2bb81dac30871e5816007815181101515614fc957fe5b90602001906020020181815250509091565b614fe3615d15565b60607f2655d0f184451488c9c86edaa0f36a7d4f7a2fc3825e7d030af5660d3681ace6826000600e8110151561501557fe5b6020020181815250507f30062c29546c272a712d301884a3deef21716e671c5da66cac7f5d263714a2a6826001600e8110151561504e57fe5b6020020181815250507f1e6c69a1d12135996fa27fb9f435d1876b34629e574671ba77826b8733d93b65826002600e8110151561508757fe5b6020020181815250507f0bb271e151e34c9bfe2abaaf66c5888ccfa6c2272a29ab8f5f572d1177fbdf1e826003600e811015156150c057fe5b6020020181815250507f05ff0ddaeb5d75296cac71fd305db5a3395759a926cb6c8701f84d35710f78ee826004600e811015156150f957fe5b6020020181815250507f20272b96093e40001583fead3bd6e8c6453f346bdf92d5779bed7ab884d0aa2e826005600e8110151561513257fe5b6020020181815250507f0950cc975d157dd4e80dc8d162caa4e506186f7adbe9cf69867a18e56b7a167b826006600e8110151561516b57fe5b6020020181815250507f0a58c1bf8b3a41a9d53c66509de333ac6e110de78d270f6f4c7a32acac5d65bf826007600e811015156151a457fe5b6020020181815250507f152ff1340ad2dcf6eb3b2373263f3e3d48c58e4f3c8035d994d690efb89105cd826008600e811015156151dd57fe5b6020020181815250507f1a7a1d4994c386d270238d45dcf938bfae17753560be434e4c98950d9a150d9c826009600e8110151561521657fe5b6020020181815250507f0ea995b343d372ae0f5cad6a29ea289172d127085b8ebb9a8a46d8c359728dcb82600a600e8110151561524f57fe5b6020020181815250507f256fd00e2102e55b0e0882a8fc9297d9e2eb66b1f368dea21c3b4fea52ff1b7782600b600e8110151561528857fe5b6020020181815250507f024e59df7dad7374d09caa273089b9d27057c131db4d645cbe2b780ed8dca72b82600c600e811015156152c157fe5b6020020181815250507f1aea3eea3d14b2240eabd4c12fa0cc60a3431e6f55132cf7809eb80b5c696c7d82600d600e811015156152fa57fe5b60200201818152505060086040519080825280602002602001820160405280156153335781602001602082028038833980820191505090505b5090507f02e10a3d18c9ddc8a7faf5e20d6cd56ae82426e802596b8e424c8d24a2d8cc9181600081518110151561536657fe5b90602001906020020181815250507f0fcf4f982b4c051fe7d7e25d73c174f709e1a116a39573f5ebcce86a694086ac8160018151811015156153a457fe5b90602001906020020181815250507f0647167a8df2f9de6e1dbd6e6e52e8bcf6b64d7fb9a6405f3efca93f250cac148160028151811015156153e257fe5b90602001906020020181815250507f2045113ec018db92050dba997d86b3b440c420d55819887fee065a17ef89789781600381518110151561542057fe5b90602001906020020181815250507f253baaed4e84773d8b85c1ac4d0b64d15d5652b318c3a72daf96a6d26a6d148181600481518110151561545e57fe5b90602001906020020181815250507f170034f174be16fd996aeb4ac97653a3f0e344ed8b5dbe947d952208a938edba81600581518110151561549c57fe5b90602001906020020181815250507f23967a7baa217743b308217c7db86912a130a668bce7c9ac030d5ed42472347c8160068151811015156154da57fe5b90602001906020020181815250507f2bfd3180a31b3fef9328b1225755ea2e7ca8d1e832cb4729930e15b5f842300d81600781518110151561551857fe5b90602001906020020181815250509091565b6000615534615d53565b61553c615d76565b6000806000615549615d99565b615551615dbd565b8851600160028d5181151561556257fe5b04031415156155d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f496e76616c6964206e756d626572206f66207075626c696320696e707574730081525060200191505060405180910390fd5b600293508a60008151811015156155ec57fe5b9060200190602002015186600060048110151561560557fe5b6020020181815250508a600181518110151561561d57fe5b9060200190602002015186600160048110151561563657fe5b602002018181525050600092505b8851831015615802578a8480600101955081518110151561566157fe5b9060200190602002015187600060038110151561567a57fe5b6020020181815250508a8480600101955081518110151561569757fe5b906020019060200201518760016003811015156156b057fe5b60200201818152505088838151811015156156c757fe5b906020019060200201518760026003811015156156e057fe5b602002018181525050604080870160608960076107d05a03fa9450841515615770576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4661696c656420746f2063616c6c2045434d554c20707265636f6d70696c650081525060200191505060405180910390fd5b60408660808860066107d05a03fa94508415156157f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4661696c656420746f2063616c6c20454341444420707265636f6d70696c650081525060200191505060405180910390fd5b8280600101935050615644565b610300604051908101604052808b600060088110151561581e57fe5b602002015181526020018b600160088110151561583757fe5b602002015181526020018b600260088110151561585057fe5b602002015181526020018b600360088110151561586957fe5b602002015181526020018b600460088110151561588257fe5b602002015181526020018b600560088110151561589b57fe5b602002015181526020018d6000600e811015156158b457fe5b602002015181526020016158da8e6001600e811015156158d057fe5b6020020151615bff565b81526020018d6002600e811015156158ee57fe5b602002015181526020018d6003600e8110151561590757fe5b602002015181526020018d6004600e8110151561592057fe5b602002015181526020018d6005600e8110151561593957fe5b6020020151815260200187600060048110151561595257fe5b6020020151815260200161597888600160048110151561596e57fe5b6020020151615bff565b81526020018d6006600e8110151561598c57fe5b602002015181526020018d6007600e811015156159a557fe5b602002015181526020018d6008600e811015156159be57fe5b602002015181526020018d6009600e811015156159d757fe5b602002015181526020018b60066008811015156159f057fe5b60200201518152602001615a168c6007600881101515615a0c57fe5b6020020151615bff565b81526020018d600a600e81101515615a2a57fe5b602002015181526020018d600b600e81101515615a4357fe5b602002015181526020018d600c600e81101515615a5c57fe5b602002015181526020018d600d600e81101515615a7557fe5b602002015181525091506020816103008460086107d05a03fa9450841515615b2b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f4661696c656420746f2063616c6c2070616972696e6720707265636f6d70696c81526020017f650000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6001816000600181101515615b3c57fe5b602002015114975050505050505050949350505050565b600080600080600080600080615b67615c3b565b9650615b71615c63565b9550615b7b615c8b565b945086801515615b8757fe5b89600001518a6000015109935086801515615b9e57fe5b89602001518a6020015109925086801515615bb557fe5b8388801515615bc057fe5b86890908915086801515615bd057fe5b87801515615bda57fe5b88801515615be457fe5b85870987096001089050808214975050505050505050919050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790508083811515615c3057fe5b068103915050919050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905090565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000000905090565b60007f1aee90f15f2189693df072d799fd11fc039b2959ebb7c867d075ca8cf4d7eb8e905090565b60c060405190810160405280600060ff168152602001600063ffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600063ffffffff168152602001600063ffffffff1681525090565b6101c060405190810160405280600e90602082028038833980820191505090505090565b604080519081016040528060008152602001600081525090565b606060405190810160405280600390602082028038833980820191505090505090565b608060405190810160405280600490602082028038833980820191505090505090565b61030060405190810160405280601890602082028038833980820191505090505090565b6020604051908101604052806001906020820280388339808201915050905050905600a165627a7a7230582069aa3ce53739437afb2723bf9a83cb35f4c641efc8a0794d599ade18f99da4820029"
}