{
  "address": "0x1c96f2547ef02abbcf6b5af99c9d9b186c9ca98e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PGOMonthlyPresaleVault",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-19\n*/\n\n//File: node_modules\\openzeppelin-solidity\\contracts\\math\\SafeMath.sol\npragma solidity ^0.4.23;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\npragma solidity ^0.4.23;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\npragma solidity ^0.4.23;\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\SafeERC20.sol\npragma solidity ^0.4.23;\n\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    require(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    ERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    require(token.approve(spender, value));\n  }\n}\n\n//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\npragma solidity ^0.4.23;\n\n\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\npragma solidity ^0.4.23;\n\n\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n//File: node_modules\\openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\npragma solidity ^0.4.23;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\MintableToken.sol\npragma solidity ^0.4.23;\n\n\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    hasMintPermission\n    canMint\n    public\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n//File: node_modules\\openzeppelin-solidity\\contracts\\lifecycle\\Pausable.sol\npragma solidity ^0.4.23;\n\n\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\PausableToken.sol\npragma solidity ^0.4.23;\n\n\n\n\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\BurnableToken.sol\npragma solidity ^0.4.23;\n\n\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n//File: node_modules\\openzeppelin-solidity\\contracts\\ownership\\CanReclaimToken.sol\npragma solidity ^0.4.23;\n\n\n\n\n\n\n/**\n * @title Contracts that should be able to recover tokens\n * @author SylTi\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n * This will prevent any accidental loss of tokens.\n */\ncontract CanReclaimToken is Ownable {\n  using SafeERC20 for ERC20Basic;\n\n  /**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param token ERC20Basic The address of the token contract\n   */\n  function reclaimToken(ERC20Basic token) external onlyOwner {\n    uint256 balance = token.balanceOf(this);\n    token.safeTransfer(owner, balance);\n  }\n\n}\n\n//File: contracts\\ico\\GotToken.sol\n/**\n * @title ParkinGO token\n *\n * @version 1.0\n * @author ParkinGO\n */\npragma solidity ^0.4.24;\n\n\n\n\n\n\n\ncontract GotToken is CanReclaimToken, MintableToken, PausableToken, BurnableToken {\n    string public constant name = \"GOToken\";\n    string public constant symbol = \"GOT\";\n    uint8 public constant decimals = 18;\n\n    /**\n     * @dev Constructor of GotToken that instantiates a new Mintable Pausable Token\n     */\n    constructor() public {\n        // token should not be transferable until after all tokens have been issued\n        paused = true;\n    }\n}\n\n\n//File: contracts\\ico\\PGOMonthlyInternalVault.sol\n/**\n * @title PGOMonthlyVault\n * @dev A token holder contract that allows the release of tokens after a vesting period.\n *\n * @version 1.0\n * @author ParkinGO\n */\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n\ncontract PGOMonthlyInternalVault {\n    using SafeMath for uint256;\n    using SafeERC20 for GotToken;\n\n    struct Investment {\n        address beneficiary;\n        uint256 totalBalance;\n        uint256 released;\n    }\n\n    /*** CONSTANTS ***/\n    uint256 public constant VESTING_DIV_RATE = 21;                  // division rate of monthly vesting\n    uint256 public constant VESTING_INTERVAL = 30 days;             // vesting interval\n    uint256 public constant VESTING_CLIFF = 90 days;                // duration until cliff is reached\n    uint256 public constant VESTING_DURATION = 720 days;            // vesting duration\n\n    GotToken public token;\n    uint256 public start;\n    uint256 public end;\n    uint256 public cliff;\n\n    //Investment[] public investments;\n\n    // key: investor address; value: index in investments array.\n    //mapping(address => uint256) public investorLUT;\n\n    mapping(address => Investment) public investments;\n\n    /**\n     * @dev Function to be fired by the initPGOMonthlyInternalVault function from the GotCrowdSale contract to set the\n     * InternalVault's state after deployment.\n     * @param beneficiaries Array of the internal investors addresses to whom vested tokens are transferred.\n     * @param balances Array of token amount per beneficiary.\n     * @param startTime Start time at which the first released will be executed, and from which the cliff for second\n     * release is calculated.\n     * @param _token The address of the GOT Token.\n     */\n    function init(address[] beneficiaries, uint256[] balances, uint256 startTime, address _token) public {\n        // makes sure this function is only called once\n        require(token == address(0));\n        require(beneficiaries.length == balances.length);\n\n        start = startTime;\n        cliff = start.add(VESTING_CLIFF);\n        end = start.add(VESTING_DURATION);\n\n        token = GotToken(_token);\n\n        for (uint256 i = 0; i < beneficiaries.length; i = i.add(1)) {\n            investments[beneficiaries[i]] = Investment(beneficiaries[i], balances[i], 0);\n        }\n    }\n\n    /**\n     * @dev Allows a sender to transfer vested tokens to the beneficiary's address.\n     * @param beneficiary The address that will receive the vested tokens.\n     */\n    function release(address beneficiary) public {\n        uint256 unreleased = releasableAmount(beneficiary);\n        require(unreleased > 0);\n\n        investments[beneficiary].released = investments[beneficiary].released.add(unreleased);\n        token.safeTransfer(beneficiary, unreleased);\n    }\n\n    /**\n     * @dev Transfers vested tokens to the sender's address.\n     */\n    function release() public {\n        release(msg.sender);\n    }\n\n    /**\n     * @dev Allows to check an investment.\n     * @param beneficiary The address of the beneficiary of the investment to check.\n     */\n    function getInvestment(address beneficiary) public view returns(address, uint256, uint256) {\n        return (\n            investments[beneficiary].beneficiary,\n            investments[beneficiary].totalBalance,\n            investments[beneficiary].released\n        );\n    }\n\n    /**\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\n     * @param beneficiary The address that will receive the vested tokens.\n     */\n    function releasableAmount(address beneficiary) public view returns (uint256) {\n        return vestedAmount(beneficiary).sub(investments[beneficiary].released);\n    }\n\n    /**\n     * @dev Calculates the amount that has already vested.\n     * @param beneficiary The address that will receive the vested tokens.\n     */\n    function vestedAmount(address beneficiary) public view returns (uint256) {\n        uint256 vested = 0;\n        if (block.timestamp >= cliff && block.timestamp < end) {\n            // after cliff -> 1/21 of totalBalance every month, must skip first 3 months\n            uint256 totalBalance = investments[beneficiary].totalBalance;\n            uint256 monthlyBalance = totalBalance.div(VESTING_DIV_RATE);\n            uint256 time = block.timestamp.sub(cliff);\n            uint256 elapsedOffsets = time.div(VESTING_INTERVAL);\n            uint256 vestedToSum = elapsedOffsets.mul(monthlyBalance);\n            vested = vested.add(vestedToSum);\n        }\n        if (block.timestamp >= end) {\n            // after end -> all vested\n            vested = investments[beneficiary].totalBalance;\n        }\n        return vested;\n    }\n}\n\n\n//File: contracts\\ico\\PGOMonthlyPresaleVault.sol\n/**\n * @title PGOMonthlyVault\n * @dev A token holder contract that allows the release of tokens after a vesting period.\n *\n * @version 1.0\n * @author ParkinGO\n */\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n\n\ncontract PGOMonthlyPresaleVault is PGOMonthlyInternalVault {\n    /**\n     * @dev OVERRIDE vestedAmount from PGOMonthlyInternalVault\n     * Calculates the amount that has already vested, release 1/3 of token immediately.\n     * @param beneficiary The address that will receive the vested tokens.\n     */\n    function vestedAmount(address beneficiary) public view returns (uint256) {\n        uint256 vested = 0;\n\n        if (block.timestamp >= start) {\n            // after start -> 1/3 released (fixed)\n            vested = investments[beneficiary].totalBalance.div(3);\n        }\n        if (block.timestamp >= cliff && block.timestamp < end) {\n            // after cliff -> 1/27 of totalBalance every month, must skip first 9 month \n            uint256 unlockedStartBalance = investments[beneficiary].totalBalance.div(3);\n            uint256 totalBalance = investments[beneficiary].totalBalance;\n            uint256 lockedBalance = totalBalance.sub(unlockedStartBalance);\n            uint256 monthlyBalance = lockedBalance.div(VESTING_DIV_RATE);\n            uint256 daysToSkip = 90 days;\n            uint256 time = block.timestamp.sub(start).sub(daysToSkip);\n            uint256 elapsedOffsets = time.div(VESTING_INTERVAL);\n            vested = vested.add(elapsedOffsets.mul(monthlyBalance));\n        }\n        if (block.timestamp >= end) {\n            // after end -> all vested\n            vested = investments[beneficiary].totalBalance;\n        }\n        return vested;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506108a4806100206000396000f3006080604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313d033c081146100df578063146b58df146101065780631726cbc81461014f5780631916558714610170578063384711cc146101935780634cfc4d30146101b457806363f3dbe5146101c957806386d1a69f146101de57806396b98862146101f3578063a5ca2afa14610214578063b37a336d14610229578063be9a65551461023e578063c5a0ca8f14610253578063efbe1c1c146102f2578063fc0c546a14610307575b600080fd5b3480156100eb57600080fd5b506100f4610338565b60408051918252519081900360200190f35b34801561011257600080fd5b50610127600160a060020a036004351661033e565b60408051600160a060020a039094168452602084019290925282820152519081900360600190f35b34801561015b57600080fd5b506100f4600160a060020a036004351661036c565b34801561017c57600080fd5b50610191600160a060020a03600435166103a7565b005b34801561019f57600080fd5b506100f4600160a060020a0360043516610425565b3480156101c057600080fd5b506100f461058b565b3480156101d557600080fd5b506100f4610593565b3480156101ea57600080fd5b5061019161059a565b3480156101ff57600080fd5b50610127600160a060020a03600435166105a5565b34801561022057600080fd5b506100f46105d0565b34801561023557600080fd5b506100f46105d7565b34801561024a57600080fd5b506100f46105dc565b34801561025f57600080fd5b506040805160206004803580820135838102808601850190965280855261019195369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497505084359550505050602090910135600160a060020a031690506105e2565b3480156102fe57600080fd5b506100f461074e565b34801561031357600080fd5b5061031c610754565b60408051600160a060020a039092168252519081900360200190f35b60035481565b600160a060020a03808216600090815260046020526040902080546001820154600290920154921693909250565b600160a060020a0381166000908152600460205260408120600201546103a19061039584610425565b9063ffffffff61076316565b92915050565b60006103b28261036c565b9050600081116103c157600080fd5b600160a060020a0382166000908152600460205260409020600201546103ed908263ffffffff61077516565b600160a060020a0380841660009081526004602052604081206002019290925590546104219116838363ffffffff61078216565b5050565b60008060008060008060008060008097506001544210151561047157600160a060020a038a1660009081526004602052604090206001015461046e90600363ffffffff61083a16565b97505b6003544210158015610484575060025442105b1561055557600160a060020a038a166000908152600460205260409020600101546104b690600363ffffffff61083a16565b600160a060020a038b1660009081526004602052604090206001015490975095506104e7868863ffffffff61076316565b94506104fa85601563ffffffff61083a16565b93506276a700925061051b836103956001544261076390919063ffffffff16565b91506105308262278d0063ffffffff61083a16565b9050610552610545828663ffffffff61084f16565b899063ffffffff61077516565b97505b600254421061057d57600160a060020a038a1660009081526004602052604090206001015497505b509598975050505050505050565b6303b5380081565b6276a70081565b6105a3336103a7565b565b600460205260009081526040902080546001820154600290920154600160a060020a03909116919083565b62278d0081565b601581565b60015481565b60008054600160a060020a0316156105f957600080fd5b835185511461060757600080fd5b600183905561061f836276a70063ffffffff61077516565b600355600154610639906303b5380063ffffffff61077516565b600255506000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161781555b845181101561074757606060405190810160405280868381518110151561068957fe5b90602001906020020151600160a060020a0316815260200185838151811015156106af57fe5b90602001906020020151815260200160008152506004600087848151811015156106d557fe5b602090810291909101810151600160a060020a0390811683528282019390935260409182016000208451815473ffffffffffffffffffffffffffffffffffffffff19169416939093178355830151600180840191909155920151600290910155610740908290610775565b9050610666565b5050505050565b60025481565b600054600160a060020a031681565b60008282111561076f57fe5b50900390565b818101828110156103a157fe5b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156107fe57600080fd5b505af1158015610812573d6000803e3d6000fd5b505050506040513d602081101561082857600080fd5b5051151561083557600080fd5b505050565b6000818381151561084757fe5b049392505050565b6000821515610860575060006103a1565b5081810281838281151561087057fe5b04146103a157fe00a165627a7a7230582007688e18ec599dc04fc4a8ae5f7848006ee4e71bcfffffaa4b40dbf1e295d7420029"
}