{
  "address": "0x9a4059c1cf329a017e0ee1337c503137fd9463b2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LCDToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-04\n*/\n\npragma solidity ^0.4.20;\n\n\npragma solidity ^0.4.15;\n\n/**\n * @title Safe math operations that throw error on overflow.\n *\n * Credit: Taking ideas from FirstBlood token\n */\nlibrary SafeMath {\n\n    /** \n     * @dev Safely add two numbers.\n     *\n     * @param x First operant.\n     * @param y Second operant.\n     * @return The result of x+y.\n     */\n    function add(uint256 x, uint256 y)\n    internal constant\n    returns(uint256) {\n        uint256 z = x + y;\n        assert((z >= x) && (z >= y));\n        return z;\n    }\n\n    /** \n     * @dev Safely substract two numbers.\n     *\n     * @param x First operant.\n     * @param y Second operant.\n     * @return The result of x-y.\n     */\n    function sub(uint256 x, uint256 y)\n    internal constant\n    returns(uint256) {\n        assert(x >= y);\n        uint256 z = x - y;\n        return z;\n    }\n\n    /** \n     * @dev Safely multiply two numbers.\n     *\n     * @param x First operant.\n     * @param y Second operant.\n     * @return The result of x*y.\n     */\n    function mul(uint256 x, uint256 y)\n    internal constant\n    returns(uint256) {\n        uint256 z = x * y;\n        assert((x == 0) || (z/x == y));\n        return z;\n    }\n\n    /**\n    * @dev Parse a floating point number from String to uint, e.g. \"250.56\" to \"25056\"\n     */\n    function parse(string s) \n    internal constant \n    returns (uint256) \n    {\n    bytes memory b = bytes(s);\n    uint result = 0;\n    for (uint i = 0; i < b.length; i++) {\n        if (b[i] >= 48 && b[i] <= 57) {\n            result = result * 10 + (uint(b[i]) - 48); \n        }\n    }\n    return result; \n}\n}\n\n\n/**\n * @title The abstract ERC-20 Token Standard definition.\n *\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n */\ncontract Token {\n    /// @dev Returns the total token supply.\n    uint256 public totalSupply;\n\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n    /// @dev MUST trigger when tokens are transferred, including zero value transfers.\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    /// @dev MUST trigger on any successful call to approve(address _spender, uint256 _value).\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n/**\n * @title Default implementation of the ERC-20 Token Standard.\n */\ncontract StandardToken is Token {\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    modifier onlyPayloadSize(uint numwords) {\n        assert(msg.data.length == numwords * 32 + 4);\n        _;\n    }\n\n    /**\n     * @dev Transfers _value amount of tokens to address _to, and MUST fire the Transfer event. \n     * @dev The function SHOULD throw if the _from account balance does not have enough tokens to spend.\n     *\n     * @dev A token contract which creates new tokens SHOULD trigger a Transfer event with the _from address set to 0x0 when tokens are created.\n     *\n     * Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n     *\n     * @param _to The receiver of the tokens.\n     * @param _value The amount of tokens to send.\n     * @return True on success, false otherwise.\n     */\n    function transfer(address _to, uint256 _value)\n    public\n    returns (bool success) {\n        if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n            balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n            balances[_to] = SafeMath.add(balances[_to], _value);\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event.\n     *\n     * @dev The transferFrom method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf. \n     * @dev This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in \n     * @dev sub-currencies. The function SHOULD throw unless the _from account has deliberately authorized the sender of \n     * @dev the message via some mechanism.\n     *\n     * Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n     *\n     * @param _from The sender of the tokens.\n     * @param _to The receiver of the tokens.\n     * @param _value The amount of tokens to send.\n     * @return True on success, false otherwise.\n     */\n    function transferFrom(address _from, address _to, uint256 _value)\n    public\n    returns (bool success) {\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n            balances[_to] = SafeMath.add(balances[_to], _value);\n            balances[_from] = SafeMath.sub(balances[_from], _value);\n            allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n            Transfer(_from, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns the account balance of another account with address _owner.\n     *\n     * @param _owner The address of the account to check.\n     * @return The account balance.\n     */\n    function balanceOf(address _owner)\n    public constant\n    returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /**\n     * @dev Allows _spender to withdraw from your account multiple times, up to the _value amount. \n     * @dev If this function is called again it overwrites the current allowance with _value.\n     *\n     * @dev NOTE: To prevent attack vectors like the one described in [1] and discussed in [2], clients \n     * @dev SHOULD make sure to create user interfaces in such a way that they set the allowance first \n     * @dev to 0 before setting it to another value for the same spender. THOUGH The contract itself \n     * @dev shouldn't enforce it, to allow backwards compatilibilty with contracts deployed before.\n     * @dev [1] https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/\n     * @dev [2] https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     * @return True on success, false otherwise.\n     */\n    function approve(address _spender, uint256 _value)\n    public\n    onlyPayloadSize(2)\n    returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Returns the amount which _spender is still allowed to withdraw from _owner.\n     *\n     * @param _owner The address of the sender.\n     * @param _spender The address of the receiver.\n     * @return The allowed withdrawal amount.\n     */\n    function allowance(address _owner, address _spender)\n    public constant\n    onlyPayloadSize(2)\n    returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n\n\n/**\n * @title The LCDToken Token contract.\n *\n * Credit: Taking ideas from BAT token and NET token\n */\n /*is StandardToken */\ncontract LCDToken is StandardToken {\n\n    // Token metadata\n    string public constant name = \"Lucyd\";\n    string public constant symbol = \"LCD\";\n    uint256 public constant decimals = 18;\n\n    uint256 public constant TOKEN_COMPANY_OWNED = 10 * (10**6) * 10**decimals; // 10 million LCDs\n    uint256 public constant TOKEN_MINTING = 30 * (10**6) * 10**decimals;       // 30 million LCDs\n    uint256 public constant TOKEN_BUSINESS = 10 * (10**6) * 10**decimals;       // 10 million LCDs\n\n    // wallet that is allowed to distribute tokens on behalf of the app store\n    address public APP_STORE;\n\n    // Administrator for multi-sig mechanism\n    address public admin1;\n    address public admin2;\n\n    // Accounts that are allowed to deliver tokens\n    address public tokenVendor1;\n    address public tokenVendor2;\n\n    // Keep track of holders and icoBuyers\n    mapping (address => bool) public isHolder; // track if a user is a known token holder to the smart contract - important for payouts later\n    address[] public holders;                  // array of all known holders - important for payouts later\n\n    // store the hashes of admins' msg.data\n    mapping (address => bytes32) private multiSigHashes;\n\n    // to track if management already got their tokens\n    bool public managementTokensDelivered;\n\n    // current amount of disbursed tokens\n    uint256 public tokensSold;\n\n    // Events used for logging\n    event LogLCDTokensDelivered(address indexed _to, uint256 _value);\n    event LogManagementTokensDelivered(address indexed distributor, uint256 _value);\n    event Auth(string indexed authString, address indexed user);\n\n    modifier onlyOwner() {\n        // check if transaction sender is admin.\n        require (msg.sender == admin1 || msg.sender == admin2);\n        // if yes, store his msg.data. \n        multiSigHashes[msg.sender] = keccak256(msg.data);\n        // check if his stored msg.data hash equals to the one of the other admin\n        if ((multiSigHashes[admin1]) == (multiSigHashes[admin2])) {\n            // if yes, both admins agreed - continue.\n            _;\n\n            // Reset hashes after successful execution\n            multiSigHashes[admin1] = 0x0;\n            multiSigHashes[admin2] = 0x0;\n        } else {\n            // if not (yet), return.\n            return;\n        }\n    }\n\n    modifier onlyVendor() {\n        require((msg.sender == tokenVendor1) || (msg.sender == tokenVendor2));\n        _;\n    }\n\n    /**\n     * @dev Create a new LCDToken contract.\n     *\n     *  _admin1 The first admin account that owns this contract.\n     *  _admin2 The second admin account that owns this contract.\n     *  _tokenVendor1 The first token vendor\n     *  _tokenVendor2 The second token vendor\n     */\n    function LCDToken(\n        address _admin1,\n        address _admin2,\n        address _tokenVendor1,\n        address _tokenVendor2,\n        address _appStore,\n        address _business_development)\n    public\n    {\n        // admin1 and admin2 address must be set and must be different\n        require (_admin1 != 0x0);\n        require (_admin2 != 0x0);\n        require (_admin1 != _admin2);\n\n        // tokenVendor1 and tokenVendor2 must be set and must be different\n        require (_tokenVendor1 != 0x0);\n        require (_tokenVendor2 != 0x0);\n        require (_tokenVendor1 != _tokenVendor2);\n\n        // tokenVendors must be different from admins\n        require (_tokenVendor1 != _admin1);\n        require (_tokenVendor1 != _admin2);\n        require (_tokenVendor2 != _admin1);\n        require (_tokenVendor2 != _admin2);\n        require (_appStore != 0x0);\n\n        admin1 = _admin1;\n        admin2 = _admin2;\n        tokenVendor1 = _tokenVendor1;\n        tokenVendor2 = _tokenVendor2;\n\n        // Init app store balance\n        APP_STORE = _appStore;\n        balances[_appStore] = TOKEN_MINTING;\n        trackHolder(_appStore);\n\n        // Init business development balance to admin1 \n        balances[_admin1] = TOKEN_BUSINESS;\n        trackHolder(_business_development);\n\n        totalSupply = SafeMath.add(TOKEN_MINTING, TOKEN_BUSINESS);\n    }\n\n    // Allows to figure out the amount of known token holders\n    function getHolderCount()\n    public\n    constant\n    returns (uint256 _holderCount)\n    {\n        return holders.length;\n    }\n\n    // Allows for easier retrieval of holder by array index\n    function getHolder(uint256 _index)\n    public\n    constant\n    returns (address _holder)\n    {\n        return holders[_index];\n    }\n\n    function trackHolder(address _to)\n    private\n    returns (bool success)\n    {\n        // Check if the recipient is a known token holder\n        if (isHolder[_to] == false) {\n            // if not, add him to the holders array and mark him as a known holder\n            holders.push(_to);\n            isHolder[_to] = true;\n        }\n        return true;\n    }\n\n    /// @dev Transfer LCD tokens\n    function deliverTokens(address _buyer, uint256 _amount) // amount input will  be in cents\n    external\n    onlyVendor\n    returns(bool success)\n    {\n        // check if the function is called before May 1, 2018\n        require(block.timestamp <= 1525125600);\n\n        // Calculate the number of tokens from the given amount in cents\n        uint256 tokens = SafeMath.mul(_amount, 10**decimals / 100);\n\n        // update state\n        uint256 oldBalance = balances[_buyer];\n        balances[_buyer] = SafeMath.add(oldBalance, tokens);\n        tokensSold = SafeMath.add(tokensSold, tokens);\n        totalSupply = SafeMath.add(totalSupply, tokens);\n        trackHolder(_buyer);\n\n        // Log the transfer of these tokens\n        Transfer(msg.sender, _buyer, tokens);\n        LogLCDTokensDelivered(_buyer, tokens);\n        return true;\n    }\n\n    // @dev Transfer tokens to management wallet\n    function deliverManagementTokens(address _managementWallet)\n    external\n    onlyOwner\n    returns (bool success)\n    {\n        // check if management tokens are already unlocked, if the function is called after March 31., 2019\n        require(block.timestamp >= 1553990400);\n\n        // Deliver management tokens only once\n        require(managementTokensDelivered == false);\n\n        // update state\n        balances[_managementWallet] = TOKEN_COMPANY_OWNED;\n        totalSupply = SafeMath.add(totalSupply, TOKEN_COMPANY_OWNED);\n        managementTokensDelivered = true;\n        trackHolder(_managementWallet);\n\n        // Log the transfer of these tokens\n        Transfer(address(this), _managementWallet, TOKEN_COMPANY_OWNED);\n        LogManagementTokensDelivered(_managementWallet, TOKEN_COMPANY_OWNED);\n        return true;\n    }\n\n    // Using this for creating a reference between ETH wallets and accounts in the Lucyd backend\n    function auth(string _authString)\n    external\n    {\n        Auth(_authString, msg.sender);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"admin2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deliverTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenVendor2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHolderCount\",\"outputs\":[{\"name\":\"_holderCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_MINTING\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managementTokensDelivered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_BUSINESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APP_STORE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_authString\",\"type\":\"string\"}],\"name\":\"auth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getHolder\",\"outputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenVendor1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_managementWallet\",\"type\":\"address\"}],\"name\":\"deliverManagementTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_COMPANY_OWNED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin1\",\"type\":\"address\"},{\"name\":\"_admin2\",\"type\":\"address\"},{\"name\":\"_tokenVendor1\",\"type\":\"address\"},{\"name\":\"_tokenVendor2\",\"type\":\"address\"},{\"name\":\"_appStore\",\"type\":\"address\"},{\"name\":\"_business_development\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogLCDTokensDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"distributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogManagementTokensDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authString\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Auth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "606060405234156200001057600080fd5b60405160c0806200114f833981016040528080519190602001805191906020018051919060200180519190602001805191906020018051915050600160a060020a03861615156200006057600080fd5b600160a060020a03851615156200007657600080fd5b600160a060020a0386811690861614156200009057600080fd5b600160a060020a0384161515620000a657600080fd5b600160a060020a0383161515620000bc57600080fd5b600160a060020a038481169084161415620000d657600080fd5b600160a060020a038481169087161415620000f057600080fd5b600160a060020a0384811690861614156200010a57600080fd5b600160a060020a0383811690871614156200012457600080fd5b600160a060020a0383811690861614156200013e57600080fd5b600160a060020a03821615156200015457600080fd5b60048054600160a060020a03808916600160a060020a03199283161790925560058054888416908316179055600680548784169083161790556007805486841690831617905560038054928516929091168217905560009081526001602052604090206a18d0bf423c03d8de0000009055620001de8264010000000062000ccd6200025f82021704565b50600160a060020a03861660009081526001602052604090206a084595161401484a00000090556200021e8164010000000062000ccd6200025f82021704565b506200024f6a18d0bf423c03d8de0000006a084595161401484a00000064010000000062000c7b620002df82021704565b6000555062000355945050505050565b600160a060020a03811660009081526008602052604081205460ff161515620002d757600980546001810162000296838262000305565b5060009182526020808320919091018054600160a060020a031916600160a060020a03861690811790915582526008905260409020805460ff191660011790555b506001919050565b6000828201838110801590620002f55750828110155b1515620002fe57fe5b9392505050565b8154818355818115116200032c576000838152602090206200032c91810190830162000331565b505050565b6200035291905b808211156200034e576000815560010162000338565b5090565b90565b610dea80620003656000396000f3006060604052600436106101535763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306a8f8a2811461015857806306fdde0314610187578063095ea7b314610211578063115976c41461024757806318160ddd1461025a57806323b872dd1461027f5780632a11ced0146102a7578063313ce567146102bd5780634dd49e08146102d0578063518ab2a8146102f25780636a931aa81461030557806370a08231146103185780637136982b14610337578063947e8a261461034a57806395d89b411461035d578063a254e66214610370578063a9059cbb14610383578063c24dec82146103a5578063cae5c8c3146103b8578063d4d7b19a146103cb578063dd62ed3e146103ea578063e4db2ceb1461040f578063e8a96b461461042f578063ed9a6a6514610445578063f449958d14610458578063f554e934146103a5575b600080fd5b341561016357600080fd5b61016b610477565b604051600160a060020a03909116815260200160405180910390f35b341561019257600080fd5b61019a610486565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101d65780820151838201526020016101be565b50505050905090810190601f1680156102035780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561021c57600080fd5b610233600160a060020a03600435166024356104bd565b604051901515815260200160405180910390f35b341561025257600080fd5b61016b610535565b341561026557600080fd5b61026d610544565b60405190815260200160405180910390f35b341561028a57600080fd5b610233600160a060020a036004358116906024351660443561054a565b34156102b257600080fd5b61016b6004356106c3565b34156102c857600080fd5b61026d6106eb565b34156102db57600080fd5b610233600160a060020a03600435166024356106f0565b34156102fd57600080fd5b61026d610837565b341561031057600080fd5b61016b61083d565b341561032357600080fd5b61026d600160a060020a036004351661084c565b341561034257600080fd5b61026d61086b565b341561035557600080fd5b61026d610872565b341561036857600080fd5b61019a610881565b341561037b57600080fd5b6102336108b8565b341561038e57600080fd5b610233600160a060020a03600435166024356108c1565b34156103b057600080fd5b61026d6109be565b34156103c357600080fd5b61016b6109cd565b34156103d657600080fd5b610233600160a060020a03600435166109dc565b34156103f557600080fd5b61026d600160a060020a03600435811690602435166109f1565b341561041a57600080fd5b61042d6004803560248101910135610a2c565b005b341561043a57600080fd5b61016b600435610a83565b341561045057600080fd5b61016b610aaf565b341561046357600080fd5b610233600160a060020a0360043516610abe565b600554600160a060020a031681565b60408051908101604052600581527f4c75637964000000000000000000000000000000000000000000000000000000602082015281565b60006002366044146104cb57fe5b600160a060020a03338116600081815260026020908152604080832094891680845294909152908190208690557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a35060019392505050565b600454600160a060020a031681565b60005481565b600160a060020a03831660009081526001602052604081205482901080159061059a5750600160a060020a0380851660009081526002602090815260408083203390941683529290522054829010155b80156105a65750600082115b80156105cb5750600160a060020a038316600090815260016020526040902054828101115b156106b857600160a060020a0383166000908152600160205260409020546105f39083610c7b565b600160a060020a0380851660009081526001602052604080822093909355908616815220546106229083610c98565b600160a060020a038086166000908152600160209081526040808320949094556002815283822033909316825291909152205461065f9083610c98565b600160a060020a0380861660008181526002602090815260408083203386168452909152908190209390935590851691600080516020610d9f8339815191529085905190815260200160405180910390a35060016106bc565b5060005b9392505050565b60098054829081106106d157fe5b600091825260209091200154600160a060020a0316905081565b601281565b6006546000908190819033600160a060020a0390811691161480610722575060075433600160a060020a039081169116145b151561072d57600080fd5b635ae791e042111561073e57600080fd5b61074f84662386f26fc10000610cac565b600160a060020a03861660009081526001602052604090205490925090506107778183610c7b565b600160a060020a038616600090815260016020526040902055600c5461079d9083610c7b565b600c556000546107ad9083610c7b565b6000556107b985610ccd565b5084600160a060020a031633600160a060020a0316600080516020610d9f8339815191528460405190815260200160405180910390a384600160a060020a03167f31eecca33fc1aa5ebec1668580dd986ef0327cbc6d6dfc907094fcfa6aa645208360405190815260200160405180910390a2506001949350505050565b600c5481565b600754600160a060020a031681565b600160a060020a0381166000908152600160205260409020545b919050565b6009545b90565b6a18d0bf423c03d8de00000081565b60408051908101604052600381527f4c43440000000000000000000000000000000000000000000000000000000000602082015281565b600b5460ff1681565b600160a060020a0333166000908152600160205260408120548290108015906108ea5750600082115b801561090f5750600160a060020a038316600090815260016020526040902054828101115b156109b457600160a060020a0333166000908152600160205260409020546109379083610c98565b600160a060020a0333811660009081526001602052604080822093909355908516815220546109669083610c7b565b600160a060020a038085166000818152600160205260409081902093909355913390911690600080516020610d9f8339815191529085905190815260200160405180910390a35060016109b8565b5060005b92915050565b6a084595161401484a00000081565b600354600160a060020a031681565b60086020526000908152604090205460ff1681565b60006002366044146109ff57fe5b5050600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b33600160a060020a031682826040518083838082843782019150509250505060405180910390207fb94cd48ddcc263dcc1673bfefdc6d9c98ab4b12499b3e0e51b893ee031f93ea260405160405180910390a35050565b6000600982815481101515610a9457fe5b600091825260209091200154600160a060020a031692915050565b600654600160a060020a031681565b60045460009033600160a060020a0390811691161480610aec575060055433600160a060020a039081169116145b1515610af757600080fd5b60003660405180838380828437820191505092505050604051908190039020600160a060020a033381166000908152600a6020526040808220939093556005548216815282812054600454909216815291909120541415610c7657635ca00300421015610b6357600080fd5b600b5460ff1615610b7357600080fd5b600160a060020a03821660009081526001602052604081206a084595161401484a000000908190559054610ba691610c7b565b600055600b805460ff19166001179055610bbf82610ccd565b50600160a060020a03808316903016600080516020610d9f8339815191526a084595161401484a00000060405190815260200160405180910390a3600160a060020a0382167f313e131a1a3da9fafe882341e70d5f9826c338d281e0f420630daf21c5f3add16a084595161401484a00000060405190815260200160405180910390a2506001600454600160a060020a039081166000908152600a6020526040808220829055600554909216815290812055610866565b610866565b6000828201838110801590610c905750828110155b15156106bc57fe5b60008082841015610ca557fe5b5050900390565b6000828202831580610c905750828482811515610cc557fe5b04146106bc57fe5b600160a060020a03811660009081526008602052604081205460ff161515610d4f576009805460018101610d018382610d57565b506000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03861690811790915582526008905260409020805460ff191660011790555b506001919050565b815481835581811511610d7b57600083815260209020610d7b918101908301610d80565b505050565b61086f91905b80821115610d9a5760008155600101610d86565b50905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820ff9f32443c49325be7a72116614a61080b95ebb8435259549d65d76d548508910029000000000000000000000000490153246ef146281625cadd47a410592f548780000000000000000000000000c347a6af34481b0fb08dd8f8e73572a2a95aab0b0000000000000000000000004a20a727c87647eeae9cf98ce56b87de2541e7cd00000000000000000000000041fa9627d27185cacb9e39e31e7b570dd69f87ea000000000000000000000000ba0b0d4929b1d7b64686d4f933d9f20b3227ac8a000000000000000000000000490153246ef146281625cadd47a410592f548780",
  "constructorArguments": "000000000000000000000000490153246ef146281625cadd47a410592f548780000000000000000000000000c347a6af34481b0fb08dd8f8e73572a2a95aab0b0000000000000000000000004a20a727c87647eeae9cf98ce56b87de2541e7cd00000000000000000000000041fa9627d27185cacb9e39e31e7b570dd69f87ea000000000000000000000000ba0b0d4929b1d7b64686d4f933d9f20b3227ac8a000000000000000000000000490153246ef146281625cadd47a410592f548780"
}