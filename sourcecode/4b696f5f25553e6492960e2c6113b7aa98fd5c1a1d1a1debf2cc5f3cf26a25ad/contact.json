{
  "address": "0x856912680349a406f72e26aa994100b8ad409f87",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Ether Sport Token",
  "contractName": "EtherSport",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-12\n*/\n\npragma solidity ^0.4.15;\n\ncontract Token {\n\n    /* Total amount of tokens */\n    uint256 public totalSupply;\n\n    /*\n     * Events\n     */\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n\n    /*\n     * Public functions\n     */\n\n    /// @notice send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address to, uint value) public returns (bool);\n\n    /// @notice send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address from, address to, uint value) public returns (bool);\n\n    /// @notice `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of tokens to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address spender, uint value) public returns (bool);\n\n    /// @param owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address owner) public constant returns (uint);\n\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender) public constant returns (uint);\n}\n\ncontract StandardToken is Token {\n    /*\n     *  Storage\n    */\n    mapping (address => uint) balances;\n    mapping (address => mapping (address => uint)) allowances;\n\n    /*\n     *  Public functions\n    */\n\n    function transfer(address to, uint value) public returns (bool) {\n        // Do not allow transfer to 0x0 or the token contract itself\n        require((to != 0x0) && (to != address(this)));\n        if (balances[msg.sender] < value)\n        revert();  // Balance too low\n        balances[msg.sender] -= value;\n        balances[to] += value;\n        Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) public returns (bool) {\n        // Do not allow transfer to 0x0 or the token contract itself\n        require((to != 0x0) && (to != address(this)));\n        if (balances[from] < value || allowances[from][msg.sender] < value)\n        revert(); // Balance or allowance too low\n        balances[to] += value;\n        balances[from] -= value;\n        allowances[from][msg.sender] -= value;\n        Transfer(from, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint value) public returns (bool) {\n        allowances[msg.sender][spender] = value;\n        Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public constant returns (uint) {\n        return allowances[owner][spender];\n    }\n\n    function balanceOf(address owner) public constant returns (uint) {\n        return balances[owner];\n    }\n}\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract EtherSport is StandardToken {\n    using SafeMath for uint256;\n\n    /*\n     *  Metadata\n     */\n    string public constant name = \"Ether Sport\";\n    string public constant symbol = \"ESC\";\n    uint8 public constant decimals = 18;\n    uint256 public constant tokenUnit = 10 ** uint256(decimals);\n\n    /*\n     *  Contract owner (Ethersport)\n     */\n    address public owner;\n\n    /*\n     *  Hardware wallets\n     */\n    address public ethFundAddress;  // Address for ETH owned by Ethersport\n    address public escFundAddress;  // Address for ESC allocated to Ethersport\n\n    /*\n        *  List of token purchases per address\n        *  Same as balances[], except used for individual cap calculations,\n        *  because users can transfer tokens out during sale and reset token count in balances.\n        */\n    mapping (address => uint256) public purchases;\n    mapping (uint => address) public allocationsIndex;\n    mapping (address => uint256) public allocations;\n    uint public allocationsLength;\n    mapping (string => mapping (string => uint256)) cd; //crowdsaleData;\n\n    /*\n    *  Crowdsale parameters\n    */\n    bool public isFinalized;\n    bool public isStopped;\n    uint256 public startBlock;  // Block number when sale period begins\n    uint256 public endBlock;  // Block number when sale period ends\n    uint256 public assignedSupply;  // Total ESC tokens currently assigned\n    uint256 public constant minimumPayment = 5 * (10**14); // 0.0005 ETH\n    uint256 public constant escFund = 40 * (10**6) * tokenUnit;  // 40M ESC reserved for development and user growth fund\n\n    /*\n    *  Events\n    */\n    event ClaimESC(address indexed _to, uint256 _value);\n\n    modifier onlyBy(address _account){\n        require(msg.sender == _account);\n        _;\n    }\n\n    function changeOwner(address _newOwner) onlyBy(owner) external {\n        owner = _newOwner;\n    }\n\n    modifier respectTimeFrame() {\n        require(block.number >= startBlock);\n        require(block.number < endBlock);\n        _;\n    }\n\n    modifier salePeriodCompleted() {\n        require(block.number >= endBlock || assignedSupply.add(escFund).add(minimumPayment) > totalSupply);\n        _;\n    }\n\n    modifier isValidState() {\n        require(!isFinalized && !isStopped);\n        _;\n    }\n\n    function allocate(address _escAddress, uint token) internal {\n        allocationsIndex[allocationsLength] = _escAddress;\n        allocations[_escAddress] = token;\n        allocationsLength = allocationsLength + 1;\n    }\n    /*\n     *  Constructor\n     */\n    function EtherSport(\n    address _ethFundAddress,\n    uint256 _startBlock,\n    uint256 _preIcoHeight,\n    uint256 _stage1Height,\n    uint256 _stage2Height,\n    uint256 _stage3Height,\n    uint256 _stage4Height,\n    uint256 _endBlockHeight\n    )\n    public\n    {\n        require(_ethFundAddress != 0x0);\n        require(_startBlock > block.number);\n\n        owner = msg.sender; // Creator of contract is owner\n        isFinalized = false; // Controls pre-sale state through crowdsale state\n        isStopped   = false; // Circuit breaker (only to be used by contract owner in case of emergency)\n        ethFundAddress = _ethFundAddress;\n        totalSupply    = 100 * (10**6) * tokenUnit;  // 100M total ESC tokens\n        assignedSupply = 0;  // Set starting assigned supply to 0\n        //  Stages  |Duration| Start date           | End date             | Amount of       | Price per    | Amount of tokens | Minimum     |\n        //          |        |                      |                      | tokens for sale | token in ETH | per 1 ETH        | payment ETH |\n        //  --------|--------|----------------------|----------------------|-----------------|--------------|------------------|-------------|\n        //  Pre ICO | 1 week | 13.11.2017 12:00 UTC | 19.11.2017 12:00 UTC | 10,000,000      | 0.00050      | 2000.00          | 0.0005      |\n        //  1 stage | 1 hour | 21.11.2017 12:00 UTC | 21.11.2017 13:00 UTC | 10,000,000      | 0.00100      | 1000.00          | 0.0005      |\n        //  2 stage | 1 day  | 22.11.2017 13:00 UTC | 29.11.2017 13:00 UTC | 15,000,000      | 0.00130      | 769.23           | 0.0005      |\n        //  3 stage | 1 week | 22.11.2017 13:00 UTC | 29.11.2017 13:00 UTC | 15,000,000      | 0.00170      | 588.24           | 0.0005      |\n        //  4 stage | 3 weeks| 29.11.2017 13:00 UTC | 20.12.2017 13:00 UTC | 20,000,000      | 0.00200      | 500.00           | 0.0005      |\n        //  --------|--------|----------------------|----------------------|-----------------|--------------|------------------|-------------|\n        //                                                                 | 70,000,000      |\n        cd['preIco']['startBlock'] = _startBlock;                 cd['preIco']['endBlock'] = _startBlock + _preIcoHeight;     cd['preIco']['cap'] = 10 * 10**6 * 10**18; cd['preIco']['exRate'] = 200000;\n        cd['stage1']['startBlock'] = _startBlock + _stage1Height; cd['stage1']['endBlock'] = _startBlock + _stage2Height - 1; cd['stage1']['cap'] = 10 * 10**6 * 10**18; cd['stage1']['exRate'] = 100000;\n        cd['stage2']['startBlock'] = _startBlock + _stage2Height; cd['stage2']['endBlock'] = _startBlock + _stage3Height - 1; cd['stage2']['cap'] = 15 * 10**6 * 10**18; cd['stage2']['exRate'] = 76923;\n        cd['stage3']['startBlock'] = _startBlock + _stage3Height; cd['stage3']['endBlock'] = _startBlock + _stage4Height - 1; cd['stage3']['cap'] = 15 * 10**6 * 10**18; cd['stage3']['exRate'] = 58824;\n        cd['stage4']['startBlock'] = _startBlock + _stage4Height; cd['stage4']['endBlock'] = _startBlock + _endBlockHeight;   cd['stage4']['cap'] = 20 * 10**6 * 10**18; cd['stage4']['exRate'] = 50000;\n        startBlock = _startBlock;\n        endBlock   = _startBlock +_endBlockHeight;\n\n        escFundAddress = 0xfA29D004fD4139B04bda5fa2633bd7324d6f6c76;\n        allocationsLength = 0;\n        //• 13% (13’000’000 ESC) will remain at EtherSport for supporting the game process;\n        allocate(escFundAddress, 0); // will remain at EtherSport for supporting the game process (remaining unassigned supply);\n        allocate(0x610a20536e7b7A361D6c919529DBc1E037E1BEcB, 5 * 10**6 * 10**18); // will remain at EtherSport for supporting the game process;\n        allocate(0x198bd6be0D747111BEBd5bD053a594FD63F3e87d, 4 * 10**6 * 10**18); // will remain at EtherSport for supporting the game process;\n        allocate(0x02401E5B98202a579F0067781d66FBd4F2700Cb6, 4 * 10**6 * 10**18); // will remain at EtherSport for supporting the game process;\n        //• 5% (5’000’000 ESC) will be allocated for the bounty campaign;\n        allocate(0x778ACEcf52520266675b09b8F5272098D8679f43, 3 * 10**6 * 10**18); // will be allocated for the bounty campaign;\n        allocate(0xdE96fdaFf4f865A1E27085426956748c5D4b8e24, 2 * 10**6 * 10**18); // will be allocated for the bounty campaign;\n        //• 5% (5’000’000 ESC) will be paid to the project founders and the team;\n        allocate(0x4E10125fc934FCADB7a30b97F9b4b642d4804e3d, 2 * 10**6 * 10**18); // will be paid to the project founders and the team;\n        allocate(0xF391B5b62Fd43401751c65aF5D1D02D850Ab6b7c, 2 * 10**6 * 10**18); // will be paid to the project founders and the team;\n        allocate(0x08474BcC5F8BB9EEe6cAc7CBA9b6fb1d20eF5AA4, 1 * 10**6 * 10**18); // will be paid to the project founders and the team;\n        //• 5% (5’000’000 ESC) will be paid to the Angel investors;\n        allocate(0x9F5818196E45ceC2d57DFc0fc0e3D7388e5de48d, 2 * 10**6 * 10**18); // will be paid to the Angel investors.\n        allocate(0x9e43667D1e3Fb460f1f2432D0FF3203364a3d284, 2 * 10**6 * 10**18); // will be paid to the Angel investors.\n        allocate(0x809040D6226FE73f245a0a16Dd685b5641540B74,  500 * 10**3 * 10**18); // will be paid to the Angel investors.\n        allocate(0xaE2542d16cc3D6d487fe87Fc0C03ad0D41e46AFf,  500 * 10**3 * 10**18); // will be paid to the Angel investors.\n        //• 1% (1’000’000 ESC) will be left in the system for building the first jackpot;\n        allocate(0xbC82DE22610c51ACe45d3BCf03b9b3cd179731b2, 1 * 10**6 * 10**18); // will be left in the system for building the first jackpot;\n        //• 1% (1’000’000 ESC) will be distributed among advisors;\n        allocate(0x302Cd6D41866ec03edF421a0CD4f4cbDFB0B67b0,  800 * 10**3 * 10**18); // will be distributed among advisors;\n        allocate(0xe190CCb2f92A0dCAc30bb4a4a92863879e5ff751,   50 * 10**3 * 10**18); // will be distributed among advisors;\n        allocate(0xfC7cf20f29f5690dF508Dd0FB99bFCB4a7d23073,  100 * 10**3 * 10**18); // will be distributed among advisors;\n        allocate(0x1DC97D37eCbf7D255BF4d461075936df2BdFd742,   50 * 10**3 * 10**18); // will be distributed among advisors;\n    }\n\n    /// @notice Stop sale in case of emergency (i.e. circuit breaker)\n    /// @dev Only allowed to be called by the owner\n    function stopSale() onlyBy(owner) external {\n        isStopped = true;\n    }\n\n    /// @notice Restart sale in case of an emergency stop\n    /// @dev Only allowed to be called by the owner\n    function restartSale() onlyBy(owner) external {\n        isStopped = false;\n    }\n\n    /// @dev Fallback function can be used to buy tokens\n    function () payable public {\n        claimTokens();\n    }\n\n    /// @notice Calculate rate based on block number\n    function calculateTokenExchangeRate() internal returns (uint256) {\n        if (cd['preIco']['startBlock'] <= block.number && block.number <= cd['preIco']['endBlock']) { return cd['preIco']['exRate']; }\n        if (cd['stage1']['startBlock'] <= block.number && block.number <= cd['stage1']['endBlock']) { return cd['stage1']['exRate']; }\n        if (cd['stage2']['startBlock'] <= block.number && block.number <= cd['stage2']['endBlock']) { return cd['stage2']['exRate']; }\n        if (cd['stage3']['startBlock'] <= block.number && block.number <= cd['stage3']['endBlock']) { return cd['stage3']['exRate']; }\n        if (cd['stage4']['startBlock'] <= block.number && block.number <= cd['stage4']['endBlock']) { return cd['stage4']['exRate']; }\n        // in case between Pre-ICO and ICO\n        return 0;\n    }\n\n    function maximumTokensToBuy() constant internal returns (uint256) {\n        uint256 maximum = 0;\n        if (cd['preIco']['startBlock'] <= block.number) { maximum = maximum.add(cd['preIco']['cap']); }\n        if (cd['stage1']['startBlock'] <= block.number) { maximum = maximum.add(cd['stage1']['cap']); }\n        if (cd['stage2']['startBlock'] <= block.number) { maximum = maximum.add(cd['stage2']['cap']); }\n        if (cd['stage3']['startBlock'] <= block.number) { maximum = maximum.add(cd['stage3']['cap']); }\n        if (cd['stage4']['startBlock'] <= block.number) { maximum = maximum.add(cd['stage4']['cap']); }\n        return maximum.sub(assignedSupply);\n    }\n\n    /// @notice Create `msg.value` ETH worth of ESC\n    /// @dev Only allowed to be called within the timeframe of the sale period\n    function claimTokens() respectTimeFrame isValidState payable public {\n        require(msg.value >= minimumPayment);\n\n        uint256 tokenExchangeRate = calculateTokenExchangeRate();\n        // tokenExchangeRate == 0 mean that now not valid time to take part in crowdsale event\n        require(tokenExchangeRate > 0);\n\n        uint256 tokens = msg.value.mul(tokenExchangeRate).div(100);\n\n        // Check that we can sell this amount of tokens in the moment\n        require(tokens <= maximumTokensToBuy());\n\n        // Check that we're not over totals\n        uint256 checkedSupply = assignedSupply.add(tokens);\n\n        // Return money if we're over total token supply\n        require(checkedSupply.add(escFund) <= totalSupply);\n\n        balances[msg.sender] = balances[msg.sender].add(tokens);\n        purchases[msg.sender] = purchases[msg.sender].add(tokens);\n\n        assignedSupply = checkedSupply;\n        ClaimESC(msg.sender, tokens);  // Logs token creation for UI purposes\n        // As per ERC20 spec, a token contract which creates new tokens SHOULD trigger a Transfer event with the _from address\n        // set to 0x0 when tokens are created (https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md)\n        Transfer(0x0, msg.sender, tokens);\n    }\n\n    /// @notice Sends the ETH to ETH fund wallet and finalizes the token sale\n    function finalize() salePeriodCompleted isValidState onlyBy(owner) external {\n        // Upon successful completion of sale, send tokens to ESC fund\n        balances[escFundAddress] = balances[escFundAddress].add(escFund);\n        assignedSupply = assignedSupply.add(escFund);\n        ClaimESC(escFundAddress, escFund);   // Log tokens claimed by Ethersport ESC fund\n        Transfer(0x0, escFundAddress, escFund);\n\n\n        for(uint i=0;i<allocationsLength;i++)\n        {\n            balances[allocationsIndex[i]] = balances[allocationsIndex[i]].add(allocations[allocationsIndex[i]]);\n            ClaimESC(allocationsIndex[i], allocations[allocationsIndex[i]]);  // Log tokens claimed by Ethersport ESC fund\n            Transfer(0x0, allocationsIndex[i], allocations[allocationsIndex[i]]);\n        }\n\n        // In the case where not all 70M ESC allocated to crowdfund participants\n        // is sold, send the remaining unassigned supply to ESC fund address,\n        // which will then be used to fund the user growth pool.\n        if (assignedSupply < totalSupply) {\n            uint256 unassignedSupply = totalSupply.sub(assignedSupply);\n            balances[escFundAddress] = balances[escFundAddress].add(unassignedSupply);\n            assignedSupply = assignedSupply.add(unassignedSupply);\n\n            ClaimESC(escFundAddress, unassignedSupply);  // Log tokens claimed by Ethersport ESC fund\n            Transfer(0x0, escFundAddress, unassignedSupply);\n        }\n\n        ethFundAddress.transfer(this.balance);\n\n        isFinalized = true; // Finalize sale\n    }\n}",
  "bytecode": "606060405234156200001057600080fd5b60405161010080620029ec83398101604052808051919060200180519190602001805191906020018051919060200180519190602001805191906020018051919060200180519150505b600160a060020a03881615156200007057600080fd5b4387116200007d57600080fd5b60038054600160a060020a03338116600160a060020a031992831617909255600b805461ffff1916905560048054928b16929091169190911790556a52b7d2dcc80cd2e40000006000908155600e5586600a6040517f70726549636f00000000000000000000000000000000000000000000000000008152600681019190915260260160405180910390206040517f7374617274426c6f636b000000000000000000000000000000000000000000008152600a810191909152602a0160405190819003902055868601600a6040517f70726549636f00000000000000000000000000000000000000000000000000008152600681019190915260260160405180910390206040517f656e64426c6f636b00000000000000000000000000000000000000000000000081526008810191909152602801604051908190039020556a084595161401484a000000600a6040517f70726549636f00000000000000000000000000000000000000000000000000008152600681019190915260260160405180910390206040517f6361700000000000000000000000000000000000000000000000000000000000815260038101919091526023016040519081900390205562030d40600a6040517f70726549636f00000000000000000000000000000000000000000000000000008152600681019190915260260160405180910390206040517f65785261746500000000000000000000000000000000000000000000000000008152600681019190915260260160405190819003902055868501600a6040517f73746167653100000000000000000000000000000000000000000000000000008152600681019190915260260160405180910390206040517f7374617274426c6f636b000000000000000000000000000000000000000000008152600a810191909152602a016040519081900390205560001987850101600a6040517f73746167653100000000000000000000000000000000000000000000000000008152600681019190915260260160405180910390206040517f656e64426c6f636b00000000000000000000000000000000000000000000000081526008810191909152602801604051908190039020556a084595161401484a000000600a6040517f73746167653100000000000000000000000000000000000000000000000000008152600681019190915260260160405180910390206040517f63617000000000000000000000000000000000000000000000000000000000008152600381019190915260230160405190819003902055620186a0600a6040517f73746167653100000000000000000000000000000000000000000000000000008152600681019190915260260160405180910390206040517f65785261746500000000000000000000000000000000000000000000000000008152600681019190915260260160405190819003902055868401600a6040517f73746167653200000000000000000000000000000000000000000000000000008152600681019190915260260160405180910390206040517f7374617274426c6f636b000000000000000000000000000000000000000000008152600a810191909152602a016040519081900390205560001987840101600a6040517f73746167653200000000000000000000000000000000000000000000000000008152600681019190915260260160405180910390206040517f656e64426c6f636b00000000000000000000000000000000000000000000000081526008810191909152602801604051908190039020556a0c685fa11e01ec6f000000600a6040517f73746167653200000000000000000000000000000000000000000000000000008152600681019190915260260160405180910390206040517f6361700000000000000000000000000000000000000000000000000000000000815260038101919091526023016040519081900390205562012c7b600a6040517f73746167653200000000000000000000000000000000000000000000000000008152600681019190915260260160405180910390206040517f65785261746500000000000000000000000000000000000000000000000000008152600681019190915260260160405190819003902055868301600a6040517f73746167653300000000000000000000000000000000000000000000000000008152600681019190915260260160405180910390206040517f7374617274426c6f636b000000000000000000000000000000000000000000008152600a810191909152602a016040519081900390205560001987830101600a6040517f73746167653300000000000000000000000000000000000000000000000000008152600681019190915260260160405180910390206040517f656e64426c6f636b00000000000000000000000000000000000000000000000081526008810191909152602801604051908190039020556a0c685fa11e01ec6f000000600a6040517f73746167653300000000000000000000000000000000000000000000000000008152600681019190915260260160405180910390206040517f6361700000000000000000000000000000000000000000000000000000000000815260038101919091526023016040519081900390205561e5c8600a6040517f73746167653300000000000000000000000000000000000000000000000000008152600681019190915260260160405180910390206040517f65785261746500000000000000000000000000000000000000000000000000008152600681019190915260260160405190819003902055868201600a6040517f73746167653400000000000000000000000000000000000000000000000000008152600681019190915260260160405180910390206040517f7374617274426c6f636b000000000000000000000000000000000000000000008152600a810191909152602a0160405190819003902055868101600a6040517f73746167653400000000000000000000000000000000000000000000000000008152600681019190915260260160405180910390206040517f656e64426c6f636b00000000000000000000000000000000000000000000000081526008810191909152602801604051908190039020556a108b2a2c28029094000000600a6040517f73746167653400000000000000000000000000000000000000000000000000008152600681019190915260260160405180910390206040517f6361700000000000000000000000000000000000000000000000000000000000815260038101919091526023016040519081900390205561c350600a6040517f73746167653400000000000000000000000000000000000000000000000000008152600681019190915260260160405180910390206040517f65785261746500000000000000000000000000000000000000000000000000008152600681019190915260260160405190819003902055600c879055808701600d5560058054600160a060020a03191673fa29d004fd4139b04bda5fa2633bd7324d6f6c7617908190556000600981905562000ad791600160a060020a031690640100000000620019ea62000ea782021704565b62000b1073610a20536e7b7a361d6c919529dbc1e037e1becb6a0422ca8b0a00a425000000640100000000620019ea62000ea782021704565b62000b4973198bd6be0d747111bebd5bd053a594fd63f3e87d6a034f086f3b33b684000000640100000000620019ea62000ea782021704565b62000b827302401e5b98202a579f0067781d66fbd4f2700cb66a034f086f3b33b684000000640100000000620019ea62000ea782021704565b62000bbb73778acecf52520266675b09b8f5272098d8679f436a027b46536c66c8e3000000640100000000620019ea62000ea782021704565b62000bf473de96fdaff4f865a1e27085426956748c5d4b8e246a01a784379d99db42000000640100000000620019ea62000ea782021704565b62000c2d734e10125fc934fcadb7a30b97f9b4b642d4804e3d6a01a784379d99db42000000640100000000620019ea62000ea782021704565b62000c6673f391b5b62fd43401751c65af5d1d02d850ab6b7c6a01a784379d99db42000000640100000000620019ea62000ea782021704565b62000c9e7308474bcc5f8bb9eee6cac7cba9b6fb1d20ef5aa469d3c21bcecceda1000000640100000000620019ea62000ea782021704565b62000cd7739f5818196e45cec2d57dfc0fc0e3d7388e5de48d6a01a784379d99db42000000640100000000620019ea62000ea782021704565b62000d10739e43667d1e3fb460f1f2432d0ff3203364a3d2846a01a784379d99db42000000640100000000620019ea62000ea782021704565b62000d4873809040d6226fe73f245a0a16dd685b5641540b746969e10de76676d0800000640100000000620019ea62000ea782021704565b62000d8073ae2542d16cc3d6d487fe87fc0c03ad0d41e46aff6969e10de76676d0800000640100000000620019ea62000ea782021704565b62000db873bc82de22610c51ace45d3bcf03b9b3cd179731b269d3c21bcecceda1000000640100000000620019ea62000ea782021704565b62000df073302cd6d41866ec03edf421a0cd4f4cbdfb0b67b069a968163f0a57b4000000640100000000620019ea62000ea782021704565b62000e2873e190ccb2f92a0dcac30bb4a4a92863879e5ff751690a968163f0a57b400000640100000000620019ea62000ea782021704565b62000e6073fc7cf20f29f5690df508dd0fb99bfcb4a7d2307369152d02c7e14af6800000640100000000620019ea62000ea782021704565b62000e98731dc97d37ecbf7d255bf4d461075936df2bdfd742690a968163f0a57b400000640100000000620019ea62000ea782021704565b5b505050505050505062000ef0565b6009805460009081526007602090815260408083208054600160a060020a031916600160a060020a038816908117909155835260089091529020829055805460010190555b5050565b611aec8062000f006000396000f300606060405236156101725763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461017e578063083c632314610209578063095ea7b31461022e57806318160ddd1461026457806323b872dd1461028957806324497829146102c5578063313ce567146102f45780633ea14a4f1461031d5780633f683b6a1461034257806340222b641461036957806348c54b9d1461017257806348cd4cb1146103a55780634bb278f3146103ca57806352a9039c146103df57806370a08231146104105780637471128514610441578063842a77d3146104565780638d4e4083146104875780638da5cb5b146104ae57806394ef987e146104dd57806395d89b4114610502578063a6f9dae11461058d578063a9059cbb146105ae578063b1efeece146105e4578063dd62ed3e14610609578063e36b0b3714610640578063e93c980d14610655578063f060ccb51461067a578063fdeb49b0146106a9575b5b61017b6106ce565b5b005b341561018957600080fd5b610191610891565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101ce5780820151818401525b6020016101b5565b50505050905090810190601f1680156101fb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561021457600080fd5b61021c6108c8565b60405190815260200160405180910390f35b341561023957600080fd5b610250600160a060020a03600435166024356108ce565b604051901515815260200160405180910390f35b341561026f57600080fd5b61021c61093b565b60405190815260200160405180910390f35b341561029457600080fd5b610250600160a060020a0360043581169060243516604435610941565b604051901515815260200160405180910390f35b34156102d057600080fd5b6102d8610a4c565b604051600160a060020a03909116815260200160405180910390f35b34156102ff57600080fd5b610307610a5b565b60405160ff909116815260200160405180910390f35b341561032857600080fd5b61021c610a60565b60405190815260200160405180910390f35b341561034d57600080fd5b610250610a6f565b604051901515815260200160405180910390f35b341561037457600080fd5b6102d8600435610a7d565b604051600160a060020a03909116815260200160405180910390f35b61017b6106ce565b005b34156103b057600080fd5b61021c610a98565b60405190815260200160405180910390f35b34156103d557600080fd5b61017b610a9e565b005b34156103ea57600080fd5b61021c600160a060020a0360043516610e3f565b60405190815260200160405180910390f35b341561041b57600080fd5b61021c600160a060020a0360043516610e51565b60405190815260200160405180910390f35b341561044c57600080fd5b61017b610e70565b005b341561046157600080fd5b61021c600160a060020a0360043516610e9c565b60405190815260200160405180910390f35b341561049257600080fd5b610250610eae565b604051901515815260200160405180910390f35b34156104b957600080fd5b6102d8610eb7565b604051600160a060020a03909116815260200160405180910390f35b34156104e857600080fd5b61021c610ec6565b60405190815260200160405180910390f35b341561050d57600080fd5b610191610ed1565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101ce5780820151818401525b6020016101b5565b50505050905090810190601f1680156101fb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561059857600080fd5b61017b600160a060020a0360043516610f08565b005b34156105b957600080fd5b610250600160a060020a0360043516602435610f52565b604051901515815260200160405180910390f35b34156105ef57600080fd5b61021c61100c565b60405190815260200160405180910390f35b341561061457600080fd5b61021c600160a060020a0360043581169060243516611012565b60405190815260200160405180910390f35b341561064b57600080fd5b61017b61103f565b005b341561066057600080fd5b61021c61106f565b60405190815260200160405180910390f35b341561068557600080fd5b6102d861107b565b604051600160a060020a03909116815260200160405180910390f35b34156106b457600080fd5b61021c61108a565b60405190815260200160405180910390f35b6000806000600c5443101515156106e457600080fd5b600d5443106106f257600080fd5b600b5460ff1615801561070d5750600b54610100900460ff16155b151561071857600080fd5b6601c6bf5263400034101561072c57600080fd5b610734611090565b92506000831161074357600080fd5b6107646064610758348663ffffffff6115b216565b9063ffffffff6115e116565b915061076e611617565b82111561077a57600080fd5b600e5461078d908363ffffffff6119b916565b6000549091506107ae826a211654585005212800000063ffffffff6119b916565b11156107b957600080fd5b600160a060020a0333166000908152600160205260409020546107e2908363ffffffff6119b916565b600160a060020a033316600090815260016020908152604080832093909355600690522054610817908363ffffffff6119b916565b600160a060020a0333166000818152600660205260409081902092909255600e83905590600080516020611a618339815191529084905190815260200160405180910390a233600160a060020a03166000600080516020611aa18339815191528460405190815260200160405180910390a35b5b5b505050565b60408051908101604052600b81527f45746865722053706f7274000000000000000000000000000000000000000000602082015281565b600d5481565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b6000600160a060020a0383161580159061096d575030600160a060020a031683600160a060020a031614155b151561097857600080fd5b600160a060020a038416600090815260016020526040902054829010806109c55750600160a060020a03808516600090815260026020908152604080832033909416835292905220548290105b156109cf57600080fd5b600160a060020a0380841660008181526001602090815260408083208054880190558885168084528184208054899003905560028352818420339096168452949091529081902080548690039055909190600080516020611aa18339815191529085905190815260200160405180910390a35060015b9392505050565b600454600160a060020a031681565b601281565b6a211654585005212800000081565b600b54610100900460ff1681565b600760205260009081526040902054600160a060020a031681565b600c5481565b600080600d5443101580610ae95750600054600e54610ae7906601c6bf5263400090610adb906a211654585005212800000063ffffffff6119b916565b9063ffffffff6119b916565b115b1515610af457600080fd5b600b5460ff16158015610b0f5750600b54610100900460ff16155b1515610b1a57600080fd5b600354600160a060020a039081169033168114610b3657600080fd5b600554600160a060020a0316600090815260016020526040902054610b6c906a211654585005212800000063ffffffff6119b916565b600554600160a060020a0316600090815260016020526040902055600e54610ba5906a211654585005212800000063ffffffff6119b916565b600e55600554600160a060020a0316600080516020611a618339815191526a211654585005212800000060405190815260200160405180910390a2600554600160a060020a03166000600080516020611aa18339815191526a211654585005212800000060405190815260200160405180910390a3600092505b600954831015610d1357600083815260076020908152604080832054600160a060020a031683526008825280832054600190925290912054610c60916119b9565b60008481526007602090815260408083208054600160a060020a039081168552600184528285209590955554909316808352600890915290829020549091600080516020611a6183398151915291905190815260200160405180910390a2600083815260076020908152604080832054600160a060020a0316808452600890925280832054919291600080516020611aa1833981519152915190815260200160405180910390a35b600190920191610c1f565b600054600e541015610df057600e54600054610d349163ffffffff6119d316565b600554600160a060020a0316600090815260016020526040902054909250610d62908363ffffffff6119b916565b600554600160a060020a0316600090815260016020526040902055600e54610d90908363ffffffff6119b916565b600e55600554600160a060020a0316600080516020611a618339815191528360405190815260200160405180910390a2600554600160a060020a03166000600080516020611aa18339815191528460405190815260200160405180910390a35b600454600160a060020a039081169030163180156108fc0290604051600060405180830381858888f193505050501515610e2957600080fd5b600b805460ff191660011790555b5b505b5b5050565b60086020526000908152604090205481565b600160a060020a0381166000908152600160205260409020545b919050565b600354600160a060020a039081169033168114610e8c57600080fd5b600b805461ff00191690555b5b50565b60066020526000908152604090205481565b600b5460ff1681565b600354600160a060020a031681565b6601c6bf5263400081565b60408051908101604052600381527f4553430000000000000000000000000000000000000000000000000000000000602082015281565b600354600160a060020a039081169033168114610f2457600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384161790555b5b5050565b6000600160a060020a03831615801590610f7e575030600160a060020a031683600160a060020a031614155b1515610f8957600080fd5b600160a060020a03331660009081526001602052604090205482901015610faf57600080fd5b600160a060020a03338116600081815260016020526040808220805487900390559286168082529083902080548601905591600080516020611aa18339815191529085905190815260200160405180910390a35060015b92915050565b600e5481565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b600354600160a060020a03908116903316811461105b57600080fd5b600b805461ff0019166101001790555b5b50565b670de0b6b3a764000081565b600554600160a060020a031681565b60095481565b600043600a60405160d060020a6570726549636f02815260068101919091526026016040518091039020604051600080516020611a418339815191528152600a810191909152602a016040518091039020541115801561113e5750600a60405160d060020a6570726549636f02815260068101919091526026016040518091039020604051600080516020611a81833981519152815260088101919091526028016040518091039020544311155b1561119757600a60405160d060020a6570726549636f0281526006810191909152602601604051809103902060405160d060020a65657852617465028152600681019190915260260160405180910390205490506115af565b43600a60405160d060020a6573746167653102815260068101919091526026016040518091039020604051600080516020611a418339815191528152600a810191909152602a01604051809103902054111580156112435750600a60405160d060020a6573746167653102815260068101919091526026016040518091039020604051600080516020611a81833981519152815260088101919091526028016040518091039020544311155b1561129c57600a60405160d060020a657374616765310281526006810191909152602601604051809103902060405160d060020a65657852617465028152600681019190915260260160405180910390205490506115af565b43600a60405160d160020a6539ba30b3b29902815260068101919091526026016040518091039020604051600080516020611a418339815191528152600a810191909152602a01604051809103902054111580156113485750600a60405160d160020a6539ba30b3b29902815260068101919091526026016040518091039020604051600080516020611a81833981519152815260088101919091526028016040518091039020544311155b156113a157600a60405160d160020a6539ba30b3b2990281526006810191909152602601604051809103902060405160d060020a65657852617465028152600681019190915260260160405180910390205490506115af565b43600a60405160d060020a6573746167653302815260068101919091526026016040518091039020604051600080516020611a418339815191528152600a810191909152602a016040518091039020541115801561144d5750600a60405160d060020a6573746167653302815260068101919091526026016040518091039020604051600080516020611a81833981519152815260088101919091526028016040518091039020544311155b156114a657600a60405160d060020a657374616765330281526006810191909152602601604051809103902060405160d060020a65657852617465028152600681019190915260260160405180910390205490506115af565b43600a60405160d260020a651cdd1859d94d02815260068101919091526026016040518091039020604051600080516020611a418339815191528152600a810191909152602a01604051809103902054111580156115525750600a60405160d260020a651cdd1859d94d02815260068101919091526026016040518091039020604051600080516020611a81833981519152815260088101919091526028016040518091039020544311155b156115ab57600a60405160d260020a651cdd1859d94d0281526006810191909152602601604051809103902060405160d060020a65657852617465028152600681019190915260260160405180910390205490506115af565b5060005b90565b60008282028315806115ce57508284828115156115cb57fe5b04145b15156115d657fe5b8091505b5092915050565b60008082848115156115ef57fe5b04905082848115156115fd57fe5b0681840201841415156115d657fe5b8091505b5092915050565b60008043600a60405160d060020a6570726549636f02815260068101919091526026016040518091039020604051600080516020611a418339815191528152600a810191909152602a0160405190819003902054116116ce576116cb600a60405160d060020a6570726549636f0281526006810191909152602601604051809103902060405160ec60020a62063617028152600381019190915260230160405190819003902054829063ffffffff6119b916565b90505b43600a60405160d060020a6573746167653102815260068101919091526026016040518091039020604051600080516020611a418339815191528152600a810191909152602a0160405190819003902054116117825761177f600a60405160d060020a657374616765310281526006810191909152602601604051809103902060405160ec60020a62063617028152600381019190915260230160405190819003902054829063ffffffff6119b916565b90505b43600a60405160d160020a6539ba30b3b29902815260068101919091526026016040518091039020604051600080516020611a418339815191528152600a810191909152602a01604051908190039020541161183657611833600a60405160d160020a6539ba30b3b2990281526006810191909152602601604051809103902060405160ec60020a62063617028152600381019190915260230160405190819003902054829063ffffffff6119b916565b90505b43600a60405160d060020a6573746167653302815260068101919091526026016040518091039020604051600080516020611a418339815191528152600a810191909152602a0160405190819003902054116118ea576118e7600a60405160d060020a657374616765330281526006810191909152602601604051809103902060405160ec60020a62063617028152600381019190915260230160405190819003902054829063ffffffff6119b916565b90505b43600a60405160d260020a651cdd1859d94d02815260068101919091526026016040518091039020604051600080516020611a418339815191528152600a810191909152602a01604051908190039020541161199e5761199b600a60405160d260020a651cdd1859d94d0281526006810191909152602601604051809103902060405160ec60020a62063617028152600381019190915260230160405190819003902054829063ffffffff6119b916565b90505b600e546119b290829063ffffffff6119d316565b91505b5090565b6000828201838110156115d657fe5b8091505b5092915050565b6000828211156119df57fe5b508082035b92915050565b600980546000908152600760209081526040808320805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038816908117909155835260089091529020829055805460010190555b505056007374617274426c6f636b0000000000000000000000000000000000000000000070232f007d4156ca8091bb8cf28378bf767db1843b8013369a0334805d07d91a656e64426c6f636b000000000000000000000000000000000000000000000000ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820e6b7539816c3fcee2379cd7994e658050446aca8b308e3b7e9484c5e66375a22002900000000000000000000000052eac68beafb8ffbde44c14e71be31a9f4161d440000000000000000000000000000000000000000000000000000000000455a11000000000000000000000000000000000000000000000000000000000000af00000000000000000000000000000000000000000000000000000000000000e0db000000000000000000000000000000000000000000000000000000000000e20b000000000000000000000000000000000000000000000000000000000000fb0b000000000000000000000000000000000000000000000000000000000001a99a000000000000000000000000000000000000000000000000000000000003b54a",
  "constructorArguments": "00000000000000000000000052eac68beafb8ffbde44c14e71be31a9f4161d440000000000000000000000000000000000000000000000000000000000455a11000000000000000000000000000000000000000000000000000000000000af00000000000000000000000000000000000000000000000000000000000000e0db000000000000000000000000000000000000000000000000000000000000e20b000000000000000000000000000000000000000000000000000000000000fb0b000000000000000000000000000000000000000000000000000000000001a99a000000000000000000000000000000000000000000000000000000000003b54a"
}