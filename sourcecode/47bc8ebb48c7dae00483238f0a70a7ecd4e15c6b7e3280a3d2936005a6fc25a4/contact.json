{
  "address": "0x157b97866e62f1e5a37e83a3842f3f7085514043",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Bubble",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-18\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * Welcome to new era of smart-contracts. First smart-contract which really earns money! First blochchain fund with real cryptoactivity. \n * Добро пожаловать в новую эру смарт-контрактов. Представляем Вашему вниманию ПЕРВЫЙ смарт-контракт, который реально ЗАРАБАТЫВАЕТ. ПЕРВЫЙ смарт-контракт с реальной криптодеятельностью!\n * \n * От 1,5 до 3% ежедневно. Вклады от 0.1 ETH до бесконечности. Процентная ставка считается в зависимости от размера вклада. Чем меньше вклад, тем больше ставка.\n * Возврат тела депозита в первые 5 дней работы при условии холда.\n * Динамичная процентая ставка, зависящая от дней холда (0.01% каждый день) и общей кассы контракта (за каждые 100 ETH 0.1% в день).\n * 70% депозита возвращается на контракт, 5% уходит в кассу для ежедневного розыгрыша джекпота, а на 25% инвестиций покупаются токены с высокоэффективными мастернодами, ROI от 300% ежемесячно.\n * Заработанные деньги с мастернод возвращаются на кошелек, откуда идут обратно на смарт-контракт. Обратные вклады с этого кошелька не считаются инвесторскими, т.е. на них не идут проценты обратно на кошелек для мастернод.\n * Реальный заработок - бесконечная касса. Вступайте первыми, последними или между - вы всё равно будете в профите.\n * Максимальный заработок - 200%, после контракт выкидывает Вас с возможностью перезайти снова\n * \n * Где процент на маркетинг? Админы кушают хлеб с водой? \n * Нет. Админский и маркетинговый процент - это излишки заработка мастернод. Ваши деньги работают как на Вас, так и на нас. Но напрямую проценты с вкладчиков администрация не берет.\n * \n * Website: https://dbubble.org\n * Telegram news: t.me/DoubleYourBubble\n * Telegram chat: https://t.me/joinchat/BGZn8Uo2ApSEKvuTH40l8g\n *\n * RECOMMENDED GAS LIMIT: 200000\n * RECOMMENDED GAS PRICE: https://ethgasstation.info/\n */\n\ncontract Bubble {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) public uInvested;\n    mapping (address => uint256) public uWithdrawn;\n    mapping (address => uint256) public uOperationTime;\n    mapping (address => uint256) public uWithdrawTime;\n\n    uint256 constant public MIN_INVEST = 100 finney;\n    uint256 constant public LIGHT_PERCENT = 300;\n    uint256 constant public MIDDLE_PERCENT = 200;\n    uint256 constant public HIGH_PERCENT = 150;\n    \n    uint256 constant public MIDDLE_RATE = 10000 finney;\n    uint256 constant public HIGH_RATE = 50000 finney;\n    \n    uint256 constant public NODE_PERCENT = 2500;\n    uint256 constant public REF_PERCENT = 500;\n    uint256 constant public MAX_MUL = 2;\n    uint256 constant public FINE_PERCENT = 9000;\n    uint256 constant public PERCENTS = 10000;\n    \n    uint256 constant public TIME_STEP = 1 days;\n    uint256 constant public BUBBLE_STEP = 100 ether;\n    uint256 constant public BUBBLE_BONUS = 10;\n\n    uint256 public bubbleInvested = 0;\n    uint256 public bubbleWithdrawn = 0;\n    uint256 public bubbleBalance = 0;\n    \n\n    address public nodeAddress = 0x162487Db1Af651cd0d4457CD9c1DB1801EC98182;\n    address public lotteryAddress = 0x3bFd5e3a0FC6733Cc847D544aa354771576797C9;\n\n    event addedInvest(address indexed user, uint256 amount);\n    event payedDividends(address indexed user, uint256 dividend);\n    event payedFees(address indexed user, uint256 amount);\n    event payedReferrals(address indexed user, address indexed referrer, uint256 amount, uint256 refAmount);\n\n    function Invest() private {\n\n        if (uInvested[msg.sender] == 0) {\n            uOperationTime[msg.sender] = now;\n            uWithdrawTime[msg.sender] = now;\n        } else {\n            Dividends();\n        }\n\n        uInvested[msg.sender] += msg.value;\n        emit addedInvest(msg.sender, msg.value);\n        bubbleInvested = bubbleInvested.add(msg.value);\n\n        uint256 nodeFee = msg.value.mul(NODE_PERCENT).div(PERCENTS);\n        uint256 refFee = msg.value.mul(REF_PERCENT).div(PERCENTS);\n        \n        nodeAddress.transfer(nodeFee);\n        emit payedFees(msg.sender, nodeFee);\n        \n        address refAddress = bytesToAddress(msg.data);\n        if (refAddress > 0x0 && refAddress != msg.sender && (uInvested[refAddress]>0)) {\n            refAddress.transfer(refFee);\n            emit payedReferrals(msg.sender, refAddress, msg.value, refFee);\n        }\n        else\n        {\n            lotteryAddress.transfer(refFee);\n            emit payedReferrals(msg.sender, lotteryAddress, msg.value, refFee);\n        }\n    }\n   \n   function getUserAmount(address userAddress) public view returns (uint256) {\n        \n        uint256 currentPercent;\n        \n        if ((uInvested[userAddress]>=MIN_INVEST) && (uInvested[userAddress]<MIDDLE_RATE))\n        {\n            currentPercent = LIGHT_PERCENT;\n        }\n        \n        if ((uInvested[userAddress]>=MIDDLE_RATE) && (uInvested[userAddress]<HIGH_RATE))\n        {\n            currentPercent = MIDDLE_PERCENT;\n        }\n        \n        if (uInvested[userAddress]>=HIGH_RATE)\n        {\n            currentPercent = HIGH_PERCENT;\n        }\n        \n        uint256 tBalance = address(this).balance;\n        \n        uint256 userBonus = now.sub(uWithdrawTime[userAddress]).div(TIME_STEP); \n        \n        uint256 toBbonus = tBalance.div(BUBBLE_STEP);\n        uint256 bubbleBonus = toBbonus.mul(BUBBLE_BONUS);\n        \n        currentPercent+=userBonus;\n        currentPercent+=bubbleBonus;\n        \n        uint256 userPercents = uInvested[userAddress].mul(currentPercent).div(PERCENTS);\n        \n        uint256 timeInterval = now.sub(uWithdrawTime[userAddress]);\n        uint256 userAmount = userPercents.mul(timeInterval).div(TIME_STEP);\n        \n        return userAmount;\n    }\n\n    function Dividends() private {\n        require(uInvested[msg.sender] != 0);\n\n        uint256 thisBalance = address(this).balance;\n        uint256 userAmount = getUserAmount(msg.sender);\n        \n        uint256 transAmount;\n        uint256 dropUser = 0;\n        \n        if (uWithdrawn[msg.sender] != 0)\n        {\n            userAmount = userAmount.mul(FINE_PERCENT).div(PERCENTS);\n        }\n        \n        if ((uWithdrawn[msg.sender].add(userAmount))>=(uInvested[msg.sender].mul(MAX_MUL)))\n        {\n            userAmount = (uInvested[msg.sender].mul(MAX_MUL)).sub(uWithdrawn[msg.sender]);\n            dropUser=1;\n        }\n        \n        if (thisBalance >= userAmount) {\n            transAmount = userAmount;\n        }\n        else\n        {\n            transAmount = thisBalance;\n            if ((dropUser == 1) && ((uWithdrawn[msg.sender].add(transAmount))<(uInvested[msg.sender].mul(MAX_MUL))))\n            {\n                dropUser = 0;\n            }\n        }\n        \n        msg.sender.transfer(transAmount);\n        uWithdrawn[msg.sender] += transAmount;\n        emit payedDividends(msg.sender, transAmount);\n        bubbleWithdrawn = bubbleWithdrawn.add(transAmount);\n        uWithdrawTime[msg.sender] = now;\n        \n        if (dropUser==1)\n        {\n            uInvested[msg.sender]=0;\n            uWithdrawn[msg.sender]=0;\n        }\n    }\n    \n    function returnDeposit() private {\n        require (uInvested[msg.sender] > 0);\n        require (uWithdrawn[msg.sender] == 0);\n        uint256 returnTime = now;\n        require (((returnTime.sub(uOperationTime[msg.sender])).div(1 days)) < 5);\n        \n        uint256 returnPercent = (PERCENTS.sub(NODE_PERCENT)).sub(REF_PERCENT);\n        uint256 returnAmount = uInvested[msg.sender].mul(returnPercent).div(PERCENTS);\n        uint256 thisBalance = address(this).balance;\n        \n        if (thisBalance < returnAmount) {\n            returnAmount=thisBalance;\n        }\n        \n        msg.sender.transfer(returnAmount);\n        \n        uInvested[msg.sender] = 0;\n        uWithdrawTime[msg.sender] = now;\n    }\n\naddress public owner;\n\n    function() external payable {\n        \n\n        if (msg.sender != nodeAddress)\n        {\n            if (msg.value == 0.00000112 ether)\n            {\n                returnDeposit();\n            }\n            else \n            { \n                if (msg.value >= MIN_INVEST) {\n                    Invest();\n                } else {\n                    Dividends();\n                    uWithdrawTime[msg.sender] = now;\n                }\n            }\n        }\n        \n        bubbleBalance = address(this).balance;\n    }\n\n    function renounceOwnership() external {\n        require(msg.sender == owner);\n        owner = 0x0;\n    }\n    \n    function bytesToAddress(bytes data) private pure returns (address addr) {\n        assembly {\n            addr := mload(add(data, 20))\n        }\n    }\n}\n\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that revert on error\n*/\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n}\n\n/**\n*End of code. Have fun and Double Your Bubble!\n*/",
  "bytecode": "608060405260006004556000600555600060065573162487db1af651cd0d4457cd9c1db1801ec98182600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550733bfd5e3a0fc6733cc847d544aa354771576797c9600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156100c957600080fd5b50611b07806100d96000396000f300608060405260043610610154576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631b85aa4914610253578063230a2d4c1461027e5780632505245e146102a95780632aa8481f146102d4578063327a943a1461032b57806332bc298c146103825780633760b2e2146103ad5780633beedf6d146103d85780633e4fed701461042f5780634929c68c1461045a578063579542b214610485578063616bd5bf146104b05780636b1034b7146104db578063715018a61461050657806379b7a54a1461051d578063889f372f146105745780638da5cb5b1461059f578063940c0c13146105f6578063a0b18f3514610621578063c6e527cf1461064c578063c99de22f14610677578063cb50f502146106a2578063f4490be6146106cd578063faf12a4314610724578063fbaf39ad1461074f578063fefb8526146107a6575b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561023357650104c533c0003414156101c6576101c16107fd565b610232565b67016345785d8a0000341015156101e4576101df610aa5565b610231565b6101ec610fde565b42600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b5b3073ffffffffffffffffffffffffffffffffffffffff1631600681905550005b34801561025f57600080fd5b506102686114cf565b6040518082815260200191505060405180910390f35b34801561028a57600080fd5b506102936114db565b6040518082815260200191505060405180910390f35b3480156102b557600080fd5b506102be6114e0565b6040518082815260200191505060405180910390f35b3480156102e057600080fd5b506102e96114e6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561033757600080fd5b5061036c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061150c565b6040518082815260200191505060405180910390f35b34801561038e57600080fd5b50610397611871565b6040518082815260200191505060405180910390f35b3480156103b957600080fd5b506103c2611878565b6040518082815260200191505060405180910390f35b3480156103e457600080fd5b506103ed61187e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043b57600080fd5b506104446118a4565b6040518082815260200191505060405180910390f35b34801561046657600080fd5b5061046f6118aa565b6040518082815260200191505060405180910390f35b34801561049157600080fd5b5061049a6118af565b6040518082815260200191505060405180910390f35b3480156104bc57600080fd5b506104c56118b5565b6040518082815260200191505060405180910390f35b3480156104e757600080fd5b506104f06118c1565b6040518082815260200191505060405180910390f35b34801561051257600080fd5b5061051b6118c6565b005b34801561052957600080fd5b5061055e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611966565b6040518082815260200191505060405180910390f35b34801561058057600080fd5b5061058961197e565b6040518082815260200191505060405180910390f35b3480156105ab57600080fd5b506105b4611983565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561060257600080fd5b5061060b6119a9565b6040518082815260200191505060405180910390f35b34801561062d57600080fd5b506106366119af565b6040518082815260200191505060405180910390f35b34801561065857600080fd5b506106616119b5565b6040518082815260200191505060405180910390f35b34801561068357600080fd5b5061068c6119c2565b6040518082815260200191505060405180910390f35b3480156106ae57600080fd5b506106b76119cf565b6040518082815260200191505060405180910390f35b3480156106d957600080fd5b5061070e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506119d5565b6040518082815260200191505060405180910390f35b34801561073057600080fd5b506107396119ed565b6040518082815260200191505060405180910390f35b34801561075b57600080fd5b50610790600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506119f3565b6040518082815260200191505060405180910390f35b3480156107b257600080fd5b506107e7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a0b565b6040518082815260200191505060405180910390f35b60008060008060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151561085057600080fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561089e57600080fd5b429350600561090a620151806108fc600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205488611a2390919063ffffffff16565b611a4490919063ffffffff16565b10151561091657600080fd5b6109416101f46109336109c4612710611a2390919063ffffffff16565b611a2390919063ffffffff16565b92506109a861271061099a856000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a6e90919063ffffffff16565b611a4490919063ffffffff16565b91503073ffffffffffffffffffffffffffffffffffffffff16319050818110156109d0578091505b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610a16573d6000803e3d6000fd5b5060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505050565b6000806000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415610b7d5742600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b86565b610b85610fde565b5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167f18d128872819a06c41a47a902aca9f797716eefcb1aae575a7031e70bee82290346040518082815260200191505060405180910390a2610c3534600454611aac90919063ffffffff16565b600481905550610c64612710610c566109c434611a6e90919063ffffffff16565b611a4490919063ffffffff16565b9250610c8f612710610c816101f434611a6e90919063ffffffff16565b611a4490919063ffffffff16565b9150600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015610cf9573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167fae6d502089f864c80daae16504b575409ac5b792103171a5a68c540e715a9489846040518082815260200191505060405180910390a2610d846000368080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050611acd565b905060008173ffffffffffffffffffffffffffffffffffffffff16118015610dd857503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015610e22575060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b15610ee0578073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610e6d573d6000803e3d6000fd5b508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9f6c998bf7b1f0d6182814952cb5d1fe5e4ab80a65bb237a25bd02aee22ecffb3485604051808381526020018281526020019250505060405180910390a3610fd9565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610f48573d6000803e3d6000fd5b50600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9f6c998bf7b1f0d6182814952cb5d1fe5e4ab80a65bb237a25bd02aee22ecffb3485604051808381526020018281526020019250505060405180910390a35b505050565b60008060008060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415151561103257600080fd5b3073ffffffffffffffffffffffffffffffffffffffff163193506110553361150c565b9250600090506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415156110d0576110cd6127106110bf61232886611a6e90919063ffffffff16565b611a4490919063ffffffff16565b92505b61112260026000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a6e90919063ffffffff16565b61117484600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611aac90919063ffffffff16565b1015156112255761121e600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461121060026000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a6e90919063ffffffff16565b611a2390919063ffffffff16565b9250600190505b8284101515611236578291506112f5565b8391506001811480156112ea575061129660026000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a6e90919063ffffffff16565b6112e883600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611aac90919063ffffffff16565b105b156112f457600090505b5b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561133b573d6000803e3d6000fd5b5081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167f116e9ff01bad107fea5bd4d7dc180273936d893db9d2a90bea9784a519899d6b836040518082815260200191505060405180910390a26113ec82600554611aac90919063ffffffff16565b60058190555042600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060018114156114c95760008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b50505050565b67016345785d8a000081565b600281565b60045481565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080600080600080600067016345785d8a00006000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156115b55750678ac7230489e800006000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b156115c05761012c97505b678ac7230489e800006000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561165c57506802b5e3af16b18800006000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b156116665760c897505b6802b5e3af16b18800006000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015156116bb57609697505b3073ffffffffffffffffffffffffffffffffffffffff1631965061173c6201518061172e600360008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442611a2390919063ffffffff16565b611a4490919063ffffffff16565b955061175a68056bc75e2d6310000088611a4490919063ffffffff16565b9450611770600a86611a6e90919063ffffffff16565b9350858801975083880197506117e16127106117d38a6000808f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a6e90919063ffffffff16565b611a4490919063ffffffff16565b9250611835600360008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442611a2390919063ffffffff16565b915061185f620151806118518486611a6e90919063ffffffff16565b611a4490919063ffffffff16565b90508098505050505050505050919050565b6201518081565b61012c81565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109c481565b609681565b61232881565b678ac7230489e8000081565b600a81565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561192257600080fd5b6000600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60016020528060005260406000206000915090505481565b60c881565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61271081565b60065481565b68056bc75e2d6310000081565b6802b5e3af16b188000081565b60055481565b60036020528060005260406000206000915090505481565b6101f481565b60026020528060005260406000206000915090505481565b60006020528060005260406000206000915090505481565b600080838311151515611a3557600080fd5b82840390508091505092915050565b600080600083111515611a5657600080fd5b8284811515611a6157fe5b0490508091505092915050565b6000806000841415611a835760009150611aa5565b8284029050828482811515611a9457fe5b04141515611aa157600080fd5b8091505b5092915050565b6000808284019050838110151515611ac357600080fd5b8091505092915050565b6000601482015190509190505600a165627a7a723058207d6e06afe0a3c0663b6ad6a4168bd8c560db135c260b24146ca336ed85e3eaec0029"
}