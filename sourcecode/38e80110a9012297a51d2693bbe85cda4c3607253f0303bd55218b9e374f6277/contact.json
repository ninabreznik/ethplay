{
  "address": "0x5dd10a41c67a9192b98374419219a18e8e827a30",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Logos",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\npragma solidity >=0.5.4 <0.6.0;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n\t/**\n\t * @dev Multiplies two numbers, throws on overflow.\n\t */\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tc = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Integer division of two numbers, truncating the quotient.\n\t */\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\t// uint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn a / b;\n\t}\n\n\t/**\n\t * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n\t */\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\t/**\n\t * @dev Adds two numbers, throws on overflow.\n\t */\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\tc = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\n\ninterface INameTAOPosition {\n\tfunction senderIsAdvocate(address _sender, address _id) external view returns (bool);\n\tfunction senderIsListener(address _sender, address _id) external view returns (bool);\n\tfunction senderIsSpeaker(address _sender, address _id) external view returns (bool);\n\tfunction senderIsPosition(address _sender, address _id) external view returns (bool);\n\tfunction getAdvocate(address _id) external view returns (address);\n\tfunction nameIsAdvocate(address _nameId, address _id) external view returns (bool);\n\tfunction nameIsPosition(address _nameId, address _id) external view returns (bool);\n\tfunction initialize(address _id, address _advocateId, address _listenerId, address _speakerId) external returns (bool);\n\tfunction determinePosition(address _sender, address _id) external view returns (uint256);\n}\n\n\ninterface INameAccountRecovery {\n\tfunction isCompromised(address _id) external view returns (bool);\n}\n\n\ninterface INameFactory {\n\tfunction nonces(address _nameId) external view returns (uint256);\n\tfunction incrementNonce(address _nameId) external returns (uint256);\n\tfunction ethAddressToNameId(address _ethAddress) external view returns (address);\n\tfunction setNameNewAddress(address _id, address _newAddress) external returns (bool);\n\tfunction nameIdToEthAddress(address _nameId) external view returns (address);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontract TokenERC20 {\n\t// Public variables of the token\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals = 18;\n\t// 18 decimals is the strongly suggested default, avoid changing it\n\tuint256 public totalSupply;\n\n\t// This creates an array with all balances\n\tmapping (address => uint256) public balanceOf;\n\tmapping (address => mapping (address => uint256)) public allowance;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\t// This notifies clients about the amount burnt\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * Constructor function\n\t *\n\t * Initializes contract with initial supply tokens to the creator of the contract\n\t */\n\tconstructor (uint256 initialSupply, string memory tokenName, string memory tokenSymbol) public {\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n\t\tname = tokenName;                                   // Set the name for display purposes\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\n\t}\n\n\t/**\n\t * Internal transfer, only can be called by this contract\n\t */\n\tfunction _transfer(address _from, address _to, uint _value) internal {\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(_to != address(0));\n\t\t// Check if the sender has enough\n\t\trequire(balanceOf[_from] >= _value);\n\t\t// Check for overflows\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\n\t\t// Save this for an assertion in the future\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t\t// Subtract from the sender\n\t\tbalanceOf[_from] -= _value;\n\t\t// Add the same to the recipient\n\t\tbalanceOf[_to] += _value;\n\t\temit Transfer(_from, _to, _value);\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\t}\n\n\t/**\n\t * Transfer tokens\n\t *\n\t * Send `_value` tokens to `_to` from your account\n\t *\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n\t\t_transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Transfer tokens from other address\n\t *\n\t * Send `_value` tokens to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\n\t\tallowance[_from][msg.sender] -= _value;\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t */\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\tallowance[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address and notify\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t * @param _extraData some extra information to send to the approved contract\n\t */\n\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n\t\ttokenRecipient spender = tokenRecipient(_spender);\n\t\tif (approve(_spender, _value)) {\n\t\t\tspender.receiveApproval(msg.sender, _value, address(this), _extraData);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Destroy tokens\n\t *\n\t * Remove `_value` tokens from the system irreversibly\n\t *\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burn(uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\n\t\ttotalSupply -= _value;                      // Updates totalSupply\n\t\temit Burn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Destroy tokens from other account\n\t *\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n\t\ttotalSupply -= _value;                              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n}\n\n\n/**\n * @title TAO\n */\ncontract TAO {\n\tusing SafeMath for uint256;\n\n\taddress public vaultAddress;\n\tstring public name;\t\t\t\t// the name for this TAO\n\taddress public originId;\t\t// the ID of the Name that created this TAO. If Name, it's the eth address\n\n\t// TAO's data\n\tstring public datHash;\n\tstring public database;\n\tstring public keyValue;\n\tbytes32 public contentId;\n\n\t/**\n\t * 0 = TAO\n\t * 1 = Name\n\t */\n\tuint8 public typeId;\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _vaultAddress\n\t) public {\n\t\tname = _name;\n\t\toriginId = _originId;\n\t\tdatHash = _datHash;\n\t\tdatabase = _database;\n\t\tkeyValue = _keyValue;\n\t\tcontentId = _contentId;\n\n\t\t// Creating TAO\n\t\ttypeId = 0;\n\n\t\tvaultAddress = _vaultAddress;\n\t}\n\n\t/**\n\t * @dev Checks if calling address is Vault contract\n\t */\n\tmodifier onlyVault {\n\t\trequire (msg.sender == vaultAddress);\n\t\t_;\n\t}\n\n\t/**\n\t * Will receive any ETH sent\n\t */\n\tfunction () external payable {\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ETH from this TAO to `_recipient`\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\t_recipient.transfer(_amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ERC20 Token from this TAO to `_recipient`\n\t * @param _erc20TokenAddress The address of ERC20 Token\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferERC20(address _erc20TokenAddress, address _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\tTokenERC20 _erc20 = TokenERC20(_erc20TokenAddress);\n\t\t_erc20.transfer(_recipient, _amount);\n\t\treturn true;\n\t}\n}\n\n\n\n\n/**\n * @title Name\n */\ncontract Name is TAO {\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name, address _originId, string memory _datHash, string memory _database, string memory _keyValue, bytes32 _contentId, address _vaultAddress)\n\t\tTAO (_name, _originId, _datHash, _database, _keyValue, _contentId, _vaultAddress) public {\n\t\t// Creating Name\n\t\ttypeId = 1;\n\t}\n}\n\n\n\n\n/**\n * @title AOLibrary\n */\nlibrary AOLibrary {\n\tusing SafeMath for uint256;\n\n\tuint256 constant private _MULTIPLIER_DIVISOR = 10 ** 6; // 1000000 = 1\n\tuint256 constant private _PERCENTAGE_DIVISOR = 10 ** 6; // 100% = 1000000\n\n\t/**\n\t * @dev Check whether or not the given TAO ID is a TAO\n\t * @param _taoId The ID of the TAO\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isTAO(address _taoId) public view returns (bool) {\n\t\treturn (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);\n\t}\n\n\t/**\n\t * @dev Check whether or not the given Name ID is a Name\n\t * @param _nameId The ID of the Name\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isName(address _nameId) public view returns (bool) {\n\t\treturn (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);\n\t}\n\n\t/**\n\t * @dev Check if `_tokenAddress` is a valid ERC20 Token address\n\t * @param _tokenAddress The ERC20 Token address to check\n\t */\n\tfunction isValidERC20TokenAddress(address _tokenAddress) public view returns (bool) {\n\t\tif (_tokenAddress == address(0)) {\n\t\t\treturn false;\n\t\t}\n\t\tTokenERC20 _erc20 = TokenERC20(_tokenAddress);\n\t\treturn (_erc20.totalSupply() >= 0 && bytes(_erc20.name()).length > 0 && bytes(_erc20.symbol()).length > 0);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t * @param _sender The address to check\n\t * @param _theAO The AO address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t * @return true if yes, false otherwise\n\t */\n\tfunction isTheAO(address _sender, address _theAO, address _nameTAOPositionAddress) public view returns (bool) {\n\t\treturn (_sender == _theAO ||\n\t\t\t(\n\t\t\t\t(isTAO(_theAO) || isName(_theAO)) &&\n\t\t\t\t_nameTAOPositionAddress != address(0) &&\n\t\t\t\tINameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate percentage.\n\t *\t\tPercentage stored throughout AO contracts covers 4 decimals,\n\t *\t\tso 1% is 10000, 1.25% is 12500, etc\n\t */\n\tfunction PERCENTAGE_DIVISOR() public pure returns (uint256) {\n\t\treturn _PERCENTAGE_DIVISOR;\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate multiplier.\n\t *\t\tMultiplier stored throughout AO contracts covers 6 decimals,\n\t *\t\tso 1 is 1000000, 0.023 is 23000, etc\n\t */\n\tfunction MULTIPLIER_DIVISOR() public pure returns (uint256) {\n\t\treturn _MULTIPLIER_DIVISOR;\n\t}\n\n\t/**\n\t * @dev deploy a TAO\n\t * @param _name The name of the TAO\n\t * @param _originId The Name ID the creates the TAO\n\t * @param _datHash The datHash of this TAO\n\t * @param _database The database for this TAO\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this TAO\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployTAO(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (TAO _tao) {\n\t\t_tao = new TAO(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev deploy a Name\n\t * @param _name The name of the Name\n\t * @param _originId The eth address the creates the Name\n\t * @param _datHash The datHash of this Name\n\t * @param _database The database for this Name\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this Name\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployName(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (Name _myName) {\n\t\t_myName = new Name(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev Calculate the new weighted multiplier when adding `_additionalPrimordialAmount` at `_additionalWeightedMultiplier` to the current `_currentPrimordialBalance` at `_currentWeightedMultiplier`\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _currentPrimordialBalance Account's current primordial ion balance\n\t * @param _additionalWeightedMultiplier The weighted multiplier to be added\n\t * @param _additionalPrimordialAmount The primordial ion amount to be added\n\t * @return the new primordial weighted multiplier\n\t */\n\tfunction calculateWeightedMultiplier(uint256 _currentWeightedMultiplier, uint256 _currentPrimordialBalance, uint256 _additionalWeightedMultiplier, uint256 _additionalPrimordialAmount) public pure returns (uint256) {\n\t\tif (_currentWeightedMultiplier > 0) {\n\t\t\tuint256 _totalWeightedIons = (_currentWeightedMultiplier.mul(_currentPrimordialBalance)).add(_additionalWeightedMultiplier.mul(_additionalPrimordialAmount));\n\t\t\tuint256 _totalIons = _currentPrimordialBalance.add(_additionalPrimordialAmount);\n\t\t\treturn _totalWeightedIons.div(_totalIons);\n\t\t} else {\n\t\t\treturn _additionalWeightedMultiplier;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the primordial ion multiplier on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Multiplier = S\n\t *\t\tEnding Multiplier = E\n\t *\t\tTo Purchase = P\n\t *\t\tMultiplier for next Lot of Amount = (1 - ((M + P/2) / T)) x (S-E)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion mintable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting multiplier in (10 ** 6)\n\t * @param _endingMultiplier The ending multiplier in (10 ** 6)\n\t * @return The multiplier in (10 ** 6)\n\t */\n\tfunction calculatePrimordialMultiplier(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * Multiplier = (1 - (temp / T)) x (S-E)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply multiplier with _MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR to account for 6 decimals\n\t\t\t * so, Multiplier = (_MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR) * (1 - (temp / T)) * (S-E)\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR * (1 - (temp / T))) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Take out the division by _MULTIPLIER_DIVISOR for now and include in later calculation\n\t\t\t * Multiplier = (_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)\n\t\t\t */\n\t\t\tuint256 multiplier = (_MULTIPLIER_DIVISOR.sub(_MULTIPLIER_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier));\n\t\t\t/**\n\t\t\t * Since _startingMultiplier and _endingMultiplier are in 6 decimals\n\t\t\t * Need to divide multiplier by _MULTIPLIER_DIVISOR\n\t\t\t */\n\t\t\treturn multiplier.div(_MULTIPLIER_DIVISOR);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus percentage of network ion on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Network Bonus Multiplier = Bs\n\t *\t\tEnding Network Bonus Multiplier = Be\n\t *\t\tTo Purchase = P\n\t *\t\tAO Bonus % = B% = (1 - ((M + P/2) / T)) x (Bs-Be)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusPercentage(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * B% = (1 - (temp / T)) x (Bs-Be)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply B% with _PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR to account for 6 decimals\n\t\t\t * so, B% = (_PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR) * (1 - (temp / T)) * (Bs-Be)\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR * (1 - (temp / T))) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * Take out the division by _PERCENTAGE_DIVISOR for now and include in later calculation\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)\n\t\t\t * But since Bs and Be are in 6 decimals, need to divide by _PERCENTAGE_DIVISOR\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be) / _PERCENTAGE_DIVISOR\n\t\t\t */\n\t\t\tuint256 bonusPercentage = (_PERCENTAGE_DIVISOR.sub(_PERCENTAGE_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier)).div(_PERCENTAGE_DIVISOR);\n\t\t\treturn bonusPercentage;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus amount of network ion on a given lot\n\t *\t\tAO Bonus Amount = B% x P\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusAmount(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tuint256 bonusPercentage = calculateNetworkBonusPercentage(_purchaseAmount, _totalPrimordialMintable, _totalPrimordialMinted, _startingMultiplier, _endingMultiplier);\n\t\t/**\n\t\t * Since bonusPercentage is in _PERCENTAGE_DIVISOR format, need to divide it with _PERCENTAGE DIVISOR\n\t\t * when calculating the network ion bonus amount\n\t\t */\n\t\tuint256 networkBonus = bonusPercentage.mul(_purchaseAmount).div(_PERCENTAGE_DIVISOR);\n\t\treturn networkBonus;\n\t}\n\n\t/**\n\t * @dev Calculate the maximum amount of Primordial an account can burn\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_maximumMultiplier = S\n\t *\t\t_amountToBurn = B\n\t *\t\tB = ((S x P) - (P x M)) / S\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _maximumMultiplier The maximum multiplier of this account\n\t * @return The maximum burn amount\n\t */\n\tfunction calculateMaximumBurnAmount(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _maximumMultiplier) public pure returns (uint256) {\n\t\treturn (_maximumMultiplier.mul(_primordialBalance).sub(_primordialBalance.mul(_currentWeightedMultiplier))).div(_maximumMultiplier);\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after burning primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToBurn = B\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P - B)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToBurn The amount of primordial ion to burn\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterBurn(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToBurn) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.sub(_amountToBurn));\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after converting network ion to primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToConvert = C\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P + C)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToConvert The amount of network ion to convert\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterConversion(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToConvert) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.add(_amountToConvert));\n\t}\n\n\t/**\n\t * @dev count num of digits\n\t * @param number uint256 of the nuumber to be checked\n\t * @return uint8 num of digits\n\t */\n\tfunction numDigits(uint256 number) public pure returns (uint8) {\n\t\tuint8 digits = 0;\n\t\twhile(number != 0) {\n\t\t\tnumber = number.div(10);\n\t\t\tdigits++;\n\t\t}\n\t\treturn digits;\n\t}\n}\n\n\n\ncontract TheAO {\n\taddress public theAO;\n\taddress public nameTAOPositionAddress;\n\n\t// Check whether an address is whitelisted and granted access to transact\n\t// on behalf of others\n\tmapping (address => bool) public whitelist;\n\n\tconstructor() public {\n\t\ttheAO = msg.sender;\n\t}\n\n\t/**\n\t * @dev Checks if msg.sender is in whitelist.\n\t */\n\tmodifier inWhitelist() {\n\t\trequire (whitelist[msg.sender] == true);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n}\n\n\n/**\n * @title TAOCurrency\n */\ncontract TAOCurrency is TheAO {\n\tusing SafeMath for uint256;\n\n\t// Public variables of the contract\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals;\n\n\t// To differentiate denomination of TAO Currency\n\tuint256 public powerOfTen;\n\n\tuint256 public totalSupply;\n\n\t// This creates an array with all balances\n\t// address is the address of nameId, not the eth public address\n\tmapping (address => uint256) public balanceOf;\n\n\t// This generates a public event on the blockchain that will notify clients\n\t// address is the address of TAO/Name Id, not eth public address\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This notifies clients about the amount burnt\n\t// address is the address of TAO/Name Id, not eth public address\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * Constructor function\n\t *\n\t * Initializes contract with initial supply TAOCurrency to the creator of the contract\n\t */\n\tconstructor (string memory _name, string memory _symbol, address _nameTAOPositionAddress) public {\n\t\tname = _name;\t\t// Set the name for display purposes\n\t\tsymbol = _symbol;\t// Set the symbol for display purposes\n\n\t\tpowerOfTen = 0;\n\t\tdecimals = 0;\n\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t */\n\tmodifier onlyTheAO {\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if `_id` is a Name or a TAO\n\t */\n\tmodifier isNameOrTAO(address _id) {\n\t\trequire (AOLibrary.isName(_id) || AOLibrary.isTAO(_id));\n\t\t_;\n\t}\n\n\t/***** The AO ONLY METHODS *****/\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n\n\t/**\n\t * @dev The AO set the NameTAOPosition Address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\n\t\trequire (_nameTAOPositionAddress != address(0));\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * @dev transfer TAOCurrency from other address\n\t *\n\t * Send `_value` TAOCurrency to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public inWhitelist isNameOrTAO(_from) isNameOrTAO(_to) returns (bool) {\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Create `mintedAmount` TAOCurrency and send it to `target`\n\t * @param target Address to receive TAOCurrency\n\t * @param mintedAmount The amount of TAOCurrency it will receive\n\t * @return true on success\n\t */\n\tfunction mint(address target, uint256 mintedAmount) public inWhitelist isNameOrTAO(target) returns (bool) {\n\t\t_mint(target, mintedAmount);\n\t\treturn true;\n\t}\n\n\t/**\n\t *\n\t * @dev Whitelisted address remove `_value` TAOCurrency from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction whitelistBurnFrom(address _from, uint256 _value) public inWhitelist isNameOrTAO(_from) returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance\n\t\ttotalSupply = totalSupply.sub(_value);              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n\n\t/***** INTERNAL METHODS *****/\n\t/**\n\t * @dev Send `_value` TAOCurrency from `_from` to `_to`\n\t * @param _from The address of sender\n\t * @param _to The address of the recipient\n\t * @param _value The amount to send\n\t */\n\tfunction _transfer(address _from, address _to, uint256 _value) internal {\n\t\trequire (_to != address(0));\t\t\t\t\t\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire (balanceOf[_from] >= _value);\t\t\t\t\t// Check if the sender has enough\n\t\trequire (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\n\t\tuint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);        // Subtract from the sender\n\t\tbalanceOf[_to] = balanceOf[_to].add(_value);            // Add the same to the recipient\n\t\temit Transfer(_from, _to, _value);\n\t\tassert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n\t}\n\n\t/**\n\t * @dev Create `mintedAmount` TAOCurrency and send it to `target`\n\t * @param target Address to receive TAOCurrency\n\t * @param mintedAmount The amount of TAOCurrency it will receive\n\t */\n\tfunction _mint(address target, uint256 mintedAmount) internal {\n\t\tbalanceOf[target] = balanceOf[target].add(mintedAmount);\n\t\ttotalSupply = totalSupply.add(mintedAmount);\n\t\temit Transfer(address(0), address(this), mintedAmount);\n\t\temit Transfer(address(this), target, mintedAmount);\n\t}\n}\n\n\n\n\n\ncontract Logos is TAOCurrency {\n\taddress public nameFactoryAddress;\n\taddress public nameAccountRecoveryAddress;\n\n\tINameFactory internal _nameFactory;\n\tINameTAOPosition internal _nameTAOPosition;\n\tINameAccountRecovery internal _nameAccountRecovery;\n\n\t// Mapping of a Name ID to the amount of Logos positioned by others to itself\n\t// address is the address of nameId, not the eth public address\n\tmapping (address => uint256) public positionFromOthers;\n\n\t// Mapping of Name ID to other Name ID and the amount of Logos positioned by itself\n\tmapping (address => mapping(address => uint256)) public positionOnOthers;\n\n\t// Mapping of a Name ID to the total amount of Logos positioned by itself on others\n\tmapping (address => uint256) public totalPositionOnOthers;\n\n\t// Mapping of Name ID to it's advocated TAO ID and the amount of Logos earned\n\tmapping (address => mapping(address => uint256)) public advocatedTAOLogos;\n\n\t// Mapping of a Name ID to the total amount of Logos earned from advocated TAO\n\tmapping (address => uint256) public totalAdvocatedTAOLogos;\n\n\t// Event broadcasted to public when `from` address position `value` Logos to `to`\n\tevent PositionFrom(address indexed from, address indexed to, uint256 value);\n\n\t// Event broadcasted to public when `from` address unposition `value` Logos from `to`\n\tevent UnpositionFrom(address indexed from, address indexed to, uint256 value);\n\n\t// Event broadcasted to public when `nameId` receives `amount` of Logos from advocating `taoId`\n\tevent AddAdvocatedTAOLogos(address indexed nameId, address indexed taoId, uint256 amount);\n\n\t// Event broadcasted to public when Logos from advocating `taoId` is transferred from `fromNameId` to `toNameId`\n\tevent TransferAdvocatedTAOLogos(address indexed fromNameId, address indexed toNameId, address indexed taoId, uint256 amount);\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor(string memory _name, string memory _symbol, address _nameFactoryAddress, address _nameTAOPositionAddress)\n\t\tTAOCurrency(_name, _symbol, _nameTAOPositionAddress) public {\n\t\tsetNameFactoryAddress(_nameFactoryAddress);\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev Check if `_taoId` is a TAO\n\t */\n\tmodifier isTAO(address _taoId) {\n\t\trequire (AOLibrary.isTAO(_taoId));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if `_nameId` is a Name\n\t */\n\tmodifier isName(address _nameId) {\n\t\trequire (AOLibrary.isName(_nameId));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if msg.sender is the current advocate of _id\n\t */\n\tmodifier onlyAdvocate(address _id) {\n\t\trequire (_nameTAOPosition.senderIsAdvocate(msg.sender, _id));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Only allowed if Name is not compromised\n\t */\n\tmodifier nameNotCompromised(address _id) {\n\t\trequire (!_nameAccountRecovery.isCompromised(_id));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Only allowed if sender's Name is not compromised\n\t */\n\tmodifier senderNameNotCompromised() {\n\t\trequire (!_nameAccountRecovery.isCompromised(_nameFactory.ethAddressToNameId(msg.sender)));\n\t\t_;\n\t}\n\n\t/***** THE AO ONLY METHODS *****/\n\t/**\n\t * @dev The AO sets NameFactory address\n\t * @param _nameFactoryAddress The address of NameFactory\n\t */\n\tfunction setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {\n\t\trequire (_nameFactoryAddress != address(0));\n\t\tnameFactoryAddress = _nameFactoryAddress;\n\t\t_nameFactory = INameFactory(_nameFactoryAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the NameTAOPosition Address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\n\t\trequire (_nameTAOPositionAddress != address(0));\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\n\t\t_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the NameAccountRecovery Address\n\t * @param _nameAccountRecoveryAddress The address of NameAccountRecovery\n\t */\n\tfunction setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {\n\t\trequire (_nameAccountRecoveryAddress != address(0));\n\t\tnameAccountRecoveryAddress = _nameAccountRecoveryAddress;\n\t\t_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * @dev Get the total sum of Logos for an address\n\t * @param _target The address to check\n\t * @return The total sum of Logos (own + positioned + advocated TAOs)\n\t */\n\tfunction sumBalanceOf(address _target) public isName(_target) view returns (uint256) {\n\t\treturn balanceOf[_target].add(positionFromOthers[_target]).add(totalAdvocatedTAOLogos[_target]);\n\t}\n\n\t/**\n\t * @dev Return the amount of Logos that are available to be positioned on other\n\t * @param _sender The sender address to check\n\t * @return The amount of Logos that are available to be positioned on other\n\t */\n\tfunction availableToPositionAmount(address _sender) public isName(_sender) view returns (uint256) {\n\t\treturn balanceOf[_sender].sub(totalPositionOnOthers[_sender]);\n\t}\n\n\t/**\n\t * @dev `_from` Name position `_value` Logos onto `_to` Name\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to position\n\t * @return true on success\n\t */\n\tfunction positionFrom(address _from, address _to, uint256 _value) public isName(_from) isName(_to) nameNotCompromised(_from) nameNotCompromised(_to) onlyAdvocate(_from) senderNameNotCompromised returns (bool) {\n\t\trequire (_from != _to);\t// Can't position Logos to itself\n\t\trequire (availableToPositionAmount(_from) >= _value); // should have enough balance to position\n\t\trequire (positionFromOthers[_to].add(_value) >= positionFromOthers[_to]); // check for overflows\n\n\t\tpositionOnOthers[_from][_to] = positionOnOthers[_from][_to].add(_value);\n\t\ttotalPositionOnOthers[_from] = totalPositionOnOthers[_from].add(_value);\n\t\tpositionFromOthers[_to] = positionFromOthers[_to].add(_value);\n\n\t\temit PositionFrom(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev `_from` Name unposition `_value` Logos from `_to` Name\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to unposition\n\t * @return true on success\n\t */\n\tfunction unpositionFrom(address _from, address _to, uint256 _value) public isName(_from) isName(_to) nameNotCompromised(_from) nameNotCompromised(_to) onlyAdvocate(_from) senderNameNotCompromised returns (bool) {\n\t\trequire (_from != _to);\t// Can't unposition Logos to itself\n\t\trequire (positionOnOthers[_from][_to] >= _value);\n\n\t\tpositionOnOthers[_from][_to] = positionOnOthers[_from][_to].sub(_value);\n\t\ttotalPositionOnOthers[_from] = totalPositionOnOthers[_from].sub(_value);\n\t\tpositionFromOthers[_to] = positionFromOthers[_to].sub(_value);\n\n\t\temit UnpositionFrom(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Add `_amount` logos earned from advocating a TAO `_taoId` to its Advocate\n\t * @param _taoId The ID of the advocated TAO\n\t * @param _amount the amount to reward\n\t * @return true on success\n\t */\n\tfunction addAdvocatedTAOLogos(address _taoId, uint256 _amount) public inWhitelist isTAO(_taoId) returns (bool) {\n\t\trequire (_amount > 0);\n\t\taddress _nameId = _nameTAOPosition.getAdvocate(_taoId);\n\n\t\tadvocatedTAOLogos[_nameId][_taoId] = advocatedTAOLogos[_nameId][_taoId].add(_amount);\n\t\ttotalAdvocatedTAOLogos[_nameId] = totalAdvocatedTAOLogos[_nameId].add(_amount);\n\n\t\temit AddAdvocatedTAOLogos(_nameId, _taoId, _amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Transfer logos earned from advocating a TAO `_taoId` from `_fromNameId` to the Advocate of `_taoId`\n\t * @param _fromNameId The ID of the Name that sends the Logos\n\t * @param _taoId The ID of the advocated TAO\n\t * @return true on success\n\t */\n\tfunction transferAdvocatedTAOLogos(address _fromNameId, address _taoId) public inWhitelist isName(_fromNameId) isTAO(_taoId) returns (bool) {\n\t\taddress _toNameId = _nameTAOPosition.getAdvocate(_taoId);\n\t\trequire (_fromNameId != _toNameId);\n\t\trequire (totalAdvocatedTAOLogos[_fromNameId] >= advocatedTAOLogos[_fromNameId][_taoId]);\n\n\t\tuint256 _amount = advocatedTAOLogos[_fromNameId][_taoId];\n\t\tadvocatedTAOLogos[_fromNameId][_taoId] = 0;\n\t\ttotalAdvocatedTAOLogos[_fromNameId] = totalAdvocatedTAOLogos[_fromNameId].sub(_amount);\n\t\tadvocatedTAOLogos[_toNameId][_taoId] = advocatedTAOLogos[_toNameId][_taoId].add(_amount);\n\t\ttotalAdvocatedTAOLogos[_toNameId] = totalAdvocatedTAOLogos[_toNameId].add(_amount);\n\n\t\temit TransferAdvocatedTAOLogos(_fromNameId, _toNameId, _taoId, _amount);\n\t\treturn true;\n\t}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powerOfTen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameAccountRecoveryAddress\",\"type\":\"address\"}],\"name\":\"setNameAccountRecoveryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameTAOPositionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"name\":\"setNameTAOPositionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAdvocatedTAOLogos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalPositionOnOthers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"positionFromOthers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"positionOnOthers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"}],\"name\":\"setNameFactoryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"advocatedTAOLogos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromNameId\",\"type\":\"address\"},{\"name\":\"_taoId\",\"type\":\"address\"}],\"name\":\"transferAdvocatedTAOLogos\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taoId\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addAdvocatedTAOLogos\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"sumBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"availableToPositionAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameAccountRecoveryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theAO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"whitelistBurnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unpositionFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameFactoryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"positionFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_theAO\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"},{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PositionFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UnpositionFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"nameId\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"taoId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddAdvocatedTAOLogos\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromNameId\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toNameId\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"taoId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferAdvocatedTAOLogos\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b5060405162002c8d38038062002c8d833981018060405260808110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b820160208101848111156200006457600080fd5b81516401000000008111828201871017156200007f57600080fd5b505092919060200180516401000000008111156200009c57600080fd5b82016020810184811115620000b057600080fd5b8151640100000000811182820187101715620000cb57600080fd5b505060208083015160409093015160008054600160a060020a0319163317905586519295509293508591859184916200010b91600391908601906200038a565b508151620001219060049060208501906200038a565b5060006006556005805460ff19169055620001458164010000000062000180810204565b505050620001628262000285640100000000026401000000009004565b620001768164010000000062000180810204565b505050506200042f565b600054600154604080517ff66afcac000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156200020957600080fd5b505af41580156200021e573d6000803e3d6000fd5b505050506040513d60208110156200023557600080fd5b505115156200024357600080fd5b600160a060020a03811615156200025957600080fd5b60018054600160a060020a03909216600160a060020a03199283168117909155600c8054909216179055565b600054600154604080517ff66afcac000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156200030e57600080fd5b505af415801562000323573d6000803e3d6000fd5b505050506040513d60208110156200033a57600080fd5b505115156200034857600080fd5b600160a060020a03811615156200035e57600080fd5b60098054600160a060020a03909216600160a060020a03199283168117909155600b8054909216179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003cd57805160ff1916838001178555620003fd565b82800160010185558215620003fd579182015b82811115620003fd578251825591602001919060010190620003e0565b506200040b9291506200040f565b5090565b6200042c91905b808211156200040b576000815560010162000416565b90565b61284e806200043f6000396000f3fe608060405234801561001057600080fd5b50600436106101de5760003560e060020a900480638c924361116101085780639b6503d3116100a6578063b7f6e74d11610075578063b7f6e74d146105e0578063bc40620614610616578063d5e45a831461061e578063f2fde38b14610654576101de565b80639b6503d31461057e578063a4e5fad2146105a4578063a9b6b38e146105ac578063b1e19d45146105b4576101de565b806395d89b41116100e257806395d89b41146104fe57806397fe5ea314610506578063985e4cd0146105325780639b19251a14610558576101de565b80638c9243611461047c578063918b7aa1146104a25780639579b1a8146104d0576101de565b80634ef033f01161018057806370a082311161014f57806370a08231146103dc57806372f19b8f146104025780637787f39c1461042857806381c3af291461044e576101de565b80634ef033f01461033e57806353d6fd59146103625780635cfaf2ef146103905780636387b19a146103b6576101de565b80631dfde2bd116101bc5780631dfde2bd1461028257806323b872dd146102aa578063313ce567146102f457806340c10f1914610312576101de565b806306fdde03146101e35780630aa245461461026057806318160ddd1461027a575b600080fd5b6101eb61067a565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561022557818101518382015260200161020d565b50505050905090810190601f1680156102525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610268610708565b60408051918252519081900360200190f35b61026861070e565b6102a86004803603602081101561029857600080fd5b5035600160a060020a0316610714565b005b6102e0600480360360608110156102c057600080fd5b50600160a060020a0381358116916020810135909116906040013561080e565b604080519115158252519081900360200190f35b6102fc610a9e565b6040805160ff9092168252519081900360200190f35b6102e06004803603604081101561032857600080fd5b50600160a060020a038135169060200135610aa7565b610346610c08565b60408051600160a060020a039092168252519081900360200190f35b6102a86004803603604081101561037857600080fd5b50600160a060020a0381351690602001351515610c17565b6102a8600480360360208110156103a657600080fd5b5035600160a060020a0316610d00565b610268600480360360208110156103cc57600080fd5b5035600160a060020a0316610df7565b610268600480360360208110156103f257600080fd5b5035600160a060020a0316610e09565b6102686004803603602081101561041857600080fd5b5035600160a060020a0316610e1b565b6102686004803603602081101561043e57600080fd5b5035600160a060020a0316610e2d565b6102686004803603604081101561046457600080fd5b50600160a060020a0381358116916020013516610e3f565b6102a86004803603602081101561049257600080fd5b5035600160a060020a0316610e5c565b610268600480360360408110156104b857600080fd5b50600160a060020a0381358116916020013516610f53565b6102e0600480360360408110156104e657600080fd5b50600160a060020a0381358116916020013516610f70565b6101eb6112f5565b6102e06004803603604081101561051c57600080fd5b50600160a060020a038135169060200135611350565b6102686004803603602081101561054857600080fd5b5035600160a060020a0316611593565b6102e06004803603602081101561056e57600080fd5b5035600160a060020a0316611685565b6102686004803603602081101561059457600080fd5b5035600160a060020a031661169a565b61034661176c565b61034661177b565b6102e0600480360360408110156105ca57600080fd5b50600160a060020a03813516906020013561178a565b6102e0600480360360608110156105f657600080fd5b50600160a060020a0381358116916020810135909116906040013561199d565b610346611f0b565b6102e06004803603606081101561063457600080fd5b50600160a060020a03813581169160208101359091169060400135611f1a565b6102a86004803603602081101561066a57600080fd5b5035600160a060020a031661249f565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107005780601f106106d557610100808354040283529160200191610700565b820191906000526020600020905b8154815290600101906020018083116106e357829003601f168201915b505050505081565b60065481565b60075481565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b15801561078657600080fd5b505af415801561079a573d6000803e3d6000fd5b505050506040513d60208110156107b057600080fd5b505115156107bd57600080fd5b600160a060020a03811615156107d257600080fd5b600a805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a039384161791829055600d8054929093169116179055565b3360009081526002602052604081205460ff16151560011461082f57600080fd5b83731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b15801561089457600080fd5b505af41580156108a8573d6000803e3d6000fd5b505050506040513d60208110156108be57600080fd5b50518061095057506040805160e260020a630bf29505028152600160a060020a03831660048201529051731150d53299abb7de27464d01b626728f5c84022991632fca5414916024808301926020929190829003018186803b15801561092357600080fd5b505af4158015610937573d6000803e3d6000fd5b505050506040513d602081101561094d57600080fd5b50515b151561095b57600080fd5b83731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156109c057600080fd5b505af41580156109d4573d6000803e3d6000fd5b505050506040513d60208110156109ea57600080fd5b505180610a7c57506040805160e260020a630bf29505028152600160a060020a03831660048201529051731150d53299abb7de27464d01b626728f5c84022991632fca5414916024808301926020929190829003018186803b158015610a4f57600080fd5b505af4158015610a63573d6000803e3d6000fd5b505050506040513d6020811015610a7957600080fd5b50515b1515610a8757600080fd5b610a9286868661258c565b50600195945050505050565b60055460ff1681565b3360009081526002602052604081205460ff161515600114610ac857600080fd5b82731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015610b2d57600080fd5b505af4158015610b41573d6000803e3d6000fd5b505050506040513d6020811015610b5757600080fd5b505180610be957506040805160e260020a630bf29505028152600160a060020a03831660048201529051731150d53299abb7de27464d01b626728f5c84022991632fca5414916024808301926020929190829003018186803b158015610bbc57600080fd5b505af4158015610bd0573d6000803e3d6000fd5b505050506040513d6020811015610be657600080fd5b50515b1515610bf457600080fd5b610bfe8484612729565b5060019392505050565b600154600160a060020a031681565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015610c8957600080fd5b505af4158015610c9d573d6000803e3d6000fd5b505050506040513d6020811015610cb357600080fd5b50511515610cc057600080fd5b600160a060020a0382161515610cd557600080fd5b600160a060020a03919091166000908152600260205260409020805460ff1916911515919091179055565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015610d7257600080fd5b505af4158015610d86573d6000803e3d6000fd5b505050506040513d6020811015610d9c57600080fd5b50511515610da957600080fd5b600160a060020a0381161515610dbe57600080fd5b60018054600160a060020a0390921673ffffffffffffffffffffffffffffffffffffffff199283168117909155600c8054909216179055565b60126020526000908152604090205481565b60086020526000908152604090205481565b60106020526000908152604090205481565b600e6020526000908152604090205481565b600f60209081526000928352604080842090915290825290205481565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015610ece57600080fd5b505af4158015610ee2573d6000803e3d6000fd5b505050506040513d6020811015610ef857600080fd5b50511515610f0557600080fd5b600160a060020a0381161515610f1a57600080fd5b60098054600160a060020a0390921673ffffffffffffffffffffffffffffffffffffffff199283168117909155600b8054909216179055565b601160209081526000928352604080842090915290825290205481565b3360009081526002602052604081205460ff161515600114610f9157600080fd5b82731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015610ff657600080fd5b505af415801561100a573d6000803e3d6000fd5b505050506040513d602081101561102057600080fd5b5051151561102d57600080fd5b82731150d53299abb7de27464d01b626728f5c840229632fca5414826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b15801561109257600080fd5b505af41580156110a6573d6000803e3d6000fd5b505050506040513d60208110156110bc57600080fd5b505115156110c957600080fd5b600c54604080517ffd6f4137000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301529151600093929092169163fd6f413791602480820192602092909190829003018186803b15801561113357600080fd5b505afa158015611147573d6000803e3d6000fd5b505050506040513d602081101561115d57600080fd5b50519050600160a060020a03868116908216141561117a57600080fd5b600160a060020a038087166000818152601160209081526040808320948a1683529381528382205492825260129052919091205410156111b957600080fd5b600160a060020a038087166000818152601160209081526040808320948a168352938152838220805490839055928252601290529190912054611202908263ffffffff6127fd16565b600160a060020a03808916600090815260126020908152604080832094909455858316825260118152838220928a168252919091522054611249908263ffffffff61280f16565b600160a060020a038084166000818152601160209081526040808320948c16835293815283822094909455908152601290925290205461128f908263ffffffff61280f16565b600160a060020a0380841660008181526012602090815260409182902094909455805185815290518a84169492938c16927f8b4613e05fc7236bc627dca2e0fadecd777022c54627f6a5212ccc5ac02e7158928290030190a45060019695505050505050565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107005780601f106106d557610100808354040283529160200191610700565b3360009081526002602052604081205460ff16151560011461137157600080fd5b82731150d53299abb7de27464d01b626728f5c840229632fca5414826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156113d657600080fd5b505af41580156113ea573d6000803e3d6000fd5b505050506040513d602081101561140057600080fd5b5051151561140d57600080fd5b6000831161141a57600080fd5b600c54604080517ffd6f4137000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301529151600093929092169163fd6f413791602480820192602092909190829003018186803b15801561148457600080fd5b505afa158015611498573d6000803e3d6000fd5b505050506040513d60208110156114ae57600080fd5b5051600160a060020a038082166000908152601160209081526040808320938a16835292905220549091506114e9908563ffffffff61280f16565b600160a060020a038083166000818152601160209081526040808320948b16835293815283822094909455908152601290925290205461152f908563ffffffff61280f16565b600160a060020a0380831660008181526012602090815260409182902094909455805188815290519289169391927ffbb909cfb1cebddaa90dc958d2d9d96a684866cda33bfd311711fd76f88def0a929181900390910190a3506001949350505050565b600081731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156115fa57600080fd5b505af415801561160e573d6000803e3d6000fd5b505050506040513d602081101561162457600080fd5b5051151561163157600080fd5b600160a060020a038316600090815260126020908152604080832054600e835281842054600890935292205461167e9291611672919063ffffffff61280f16565b9063ffffffff61280f16565b9392505050565b60026020526000908152604090205460ff1681565b600081731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b15801561170157600080fd5b505af4158015611715573d6000803e3d6000fd5b505050506040513d602081101561172b57600080fd5b5051151561173857600080fd5b600160a060020a03831660009081526010602090815260408083205460089092529091205461167e9163ffffffff6127fd16565b600a54600160a060020a031681565b600054600160a060020a031681565b3360009081526002602052604081205460ff1615156001146117ab57600080fd5b82731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b15801561181057600080fd5b505af4158015611824573d6000803e3d6000fd5b505050506040513d602081101561183a57600080fd5b5051806118cc57506040805160e260020a630bf29505028152600160a060020a03831660048201529051731150d53299abb7de27464d01b626728f5c84022991632fca5414916024808301926020929190829003018186803b15801561189f57600080fd5b505af41580156118b3573d6000803e3d6000fd5b505050506040513d60208110156118c957600080fd5b50515b15156118d757600080fd5b600160a060020a0384166000908152600860205260409020548311156118fc57600080fd5b600160a060020a038416600090815260086020526040902054611925908463ffffffff6127fd16565b600160a060020a038516600090815260086020526040902055600754611951908463ffffffff6127fd16565b600755604080518481529051600160a060020a038616917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25060019392505050565b600083731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015611a0457600080fd5b505af4158015611a18573d6000803e3d6000fd5b505050506040513d6020811015611a2e57600080fd5b50511515611a3b57600080fd5b83731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015611aa057600080fd5b505af4158015611ab4573d6000803e3d6000fd5b505050506040513d6020811015611aca57600080fd5b50511515611ad757600080fd5b600d546040805160e060020a633ebc2ab3028152600160a060020a03808a166004830152915189939290921691633ebc2ab391602480820192602092909190829003018186803b158015611b2a57600080fd5b505afa158015611b3e573d6000803e3d6000fd5b505050506040513d6020811015611b5457600080fd5b505115611b6057600080fd5b600d546040805160e060020a633ebc2ab3028152600160a060020a03808a166004830152915189939290921691633ebc2ab391602480820192602092909190829003018186803b158015611bb357600080fd5b505afa158015611bc7573d6000803e3d6000fd5b505050506040513d6020811015611bdd57600080fd5b505115611be957600080fd5b600c54604080517f71ce52ed000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03808c16602483015291518b9392909216916371ce52ed91604480820192602092909190829003018186803b158015611c5857600080fd5b505afa158015611c6c573d6000803e3d6000fd5b505050506040513d6020811015611c8257600080fd5b50511515611c8f57600080fd5b600d54600b54604080517f029b7d530000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0393841693633ebc2ab393169163029b7d53916024808301926020929190829003018186803b158015611cfd57600080fd5b505afa158015611d11573d6000803e3d6000fd5b505050506040513d6020811015611d2757600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a039092166004830152516024808301926020929190829003018186803b158015611d6c57600080fd5b505afa158015611d80573d6000803e3d6000fd5b505050506040513d6020811015611d9657600080fd5b505115611da257600080fd5b600160a060020a038981169089161415611dbb57600080fd5b600160a060020a03808a166000908152600f60209081526040808320938c1683529290522054871115611ded57600080fd5b600160a060020a03808a166000908152600f60209081526040808320938c1683529290522054611e23908863ffffffff6127fd16565b600160a060020a03808b166000818152600f60209081526040808320948e168352938152838220949094559081526010909252902054611e69908863ffffffff6127fd16565b600160a060020a03808b16600090815260106020908152604080832094909455918b168152600e9091522054611ea5908863ffffffff6127fd16565b600160a060020a03808a166000818152600e60209081526040918290209490945580518b815290519193928d16927f4062ffbe4dc631454bf05254af9c69f7be3ad81eea47c870de77ad1d5f60192b92918290030190a350600198975050505050505050565b600954600160a060020a031681565b600083731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015611f8157600080fd5b505af4158015611f95573d6000803e3d6000fd5b505050506040513d6020811015611fab57600080fd5b50511515611fb857600080fd5b83731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b15801561201d57600080fd5b505af4158015612031573d6000803e3d6000fd5b505050506040513d602081101561204757600080fd5b5051151561205457600080fd5b600d546040805160e060020a633ebc2ab3028152600160a060020a03808a166004830152915189939290921691633ebc2ab391602480820192602092909190829003018186803b1580156120a757600080fd5b505afa1580156120bb573d6000803e3d6000fd5b505050506040513d60208110156120d157600080fd5b5051156120dd57600080fd5b600d546040805160e060020a633ebc2ab3028152600160a060020a03808a166004830152915189939290921691633ebc2ab391602480820192602092909190829003018186803b15801561213057600080fd5b505afa158015612144573d6000803e3d6000fd5b505050506040513d602081101561215a57600080fd5b50511561216657600080fd5b600c54604080517f71ce52ed000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03808c16602483015291518b9392909216916371ce52ed91604480820192602092909190829003018186803b1580156121d557600080fd5b505afa1580156121e9573d6000803e3d6000fd5b505050506040513d60208110156121ff57600080fd5b5051151561220c57600080fd5b600d54600b54604080517f029b7d530000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0393841693633ebc2ab393169163029b7d53916024808301926020929190829003018186803b15801561227a57600080fd5b505afa15801561228e573d6000803e3d6000fd5b505050506040513d60208110156122a457600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a039092166004830152516024808301926020929190829003018186803b1580156122e957600080fd5b505afa1580156122fd573d6000803e3d6000fd5b505050506040513d602081101561231357600080fd5b50511561231f57600080fd5b600160a060020a03898116908916141561233857600080fd5b866123428a61169a565b101561234d57600080fd5b600160a060020a0388166000908152600e6020526040902054612376818963ffffffff61280f16565b101561238157600080fd5b600160a060020a03808a166000908152600f60209081526040808320938c16835292905220546123b7908863ffffffff61280f16565b600160a060020a03808b166000818152600f60209081526040808320948e1683529381528382209490945590815260109092529020546123fd908863ffffffff61280f16565b600160a060020a03808b16600090815260106020908152604080832094909455918b168152600e9091522054612439908863ffffffff61280f16565b600160a060020a03808a166000818152600e60209081526040918290209490945580518b815290519193928d16927faa8842001e980c78016b1aeb01672b78a6e676667f9f43b8d3c78ac8b7233b6392918290030190a350600198975050505050505050565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b15801561251157600080fd5b505af4158015612525573d6000803e3d6000fd5b505050506040513d602081101561253b57600080fd5b5051151561254857600080fd5b600160a060020a038116151561255d57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03821615156125a157600080fd5b600160a060020a0383166000908152600860205260409020548111156125c657600080fd5b600160a060020a0382166000908152600860205260409020546125ef818363ffffffff61280f16565b10156125fa57600080fd5b600160a060020a03808316600090815260086020526040808220549286168252812054909161262f919063ffffffff61280f16565b600160a060020a03851660009081526008602052604090205490915061265b908363ffffffff6127fd16565b600160a060020a038086166000908152600860205260408082209390935590851681522054612690908363ffffffff61280f16565b600160a060020a0380851660008181526008602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3600160a060020a03808416600090815260086020526040808220549287168252902054829161271c919063ffffffff61280f16565b1461272357fe5b50505050565b600160a060020a038216600090815260086020526040902054612752908263ffffffff61280f16565b600160a060020a03831660009081526008602052604090205560075461277e908263ffffffff61280f16565b60075560408051828152905130916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3604080518281529051600160a060020a0384169130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60008282111561280957fe5b50900390565b8181018281101561281c57fe5b9291505056fea165627a7a72305820c0a84b2a21311d1d9553a6732793ebc478aad0091aba805471d15250d8ba861a0029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000010fbf61e4cce57d72eed8b5d9728134ce374bd820000000000000000000000001f7f65b220a0f2d48b28390380f57468e7a382fe00000000000000000000000000000000000000000000000000000000000000054c6f676f7300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054c4f474f53000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000010fbf61e4cce57d72eed8b5d9728134ce374bd820000000000000000000000001f7f65b220a0f2d48b28390380f57468e7a382fe00000000000000000000000000000000000000000000000000000000000000054c6f676f7300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054c4f474f53000000000000000000000000000000000000000000000000000000",
  "libraries": [
    {
      "name": "AOLibrary",
      "address": "0x1150d53299Abb7DE27464D01B626728f5c840229"
    }
  ]
}