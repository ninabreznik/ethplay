{
  "address": "0x401ce0d7b7ddbb6507165b0adab7dd33fef5d16d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MultiSign",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-21\n*/\n\npragma solidity 0.5.4;\n\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    require(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0);\n    uint256 c = a / b;\n    return c;\n  }\n  \n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n    return c;\n  }\n\n \n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20 {\n  function transfer(address to, uint256 value) public returns (bool);\n}\n\ncontract MultiSign {\n    using SafeMath for uint;\n    \n    address public Exchange = address(0x9E832A9CEaDf1E97D6d8da6922b87b59d25eEee0);\n    address public Foundation = address(0x5a403e651EC2cD3b6B385dC639f1A90ea01017f7);\n    uint256 public ProposalID = 0;\n    mapping(uint => Proposal) public Proposals;\n\n    struct Proposal {\n        uint256 id;\n        address to;\n        bool close; // false open, true close\n        address tokenContractAddress; // ERC20 token contract address\n        uint256 amount;\n        uint256 approvalByExchange; // default 0  approva 1 refuse 2\n        uint256 approvalByFoundation;\n    }\n    \n    \n    constructor() public {\n    }\n    \n    function lookProposal(uint256 id) public view returns (uint256 _id, address _to, bool _close, address _tokenContractAddress, uint256 _amount, uint256 _approvalByExchange, uint256 _approvalByFoundation) {\n        Proposal memory p = Proposals[id];\n        return (p.id, p.to, p.close, p.tokenContractAddress, p.amount, p.approvalByExchange, p.approvalByFoundation);\n    }\n    \n    // only  Foundation or Exchange can proposal\n    function proposal (address _to, address _tokenContractAddress, uint256 _amount) public returns (uint256 id) {\n        require(msg.sender == Foundation || msg.sender == Exchange);\n        ProposalID = ProposalID.add(1);\n        Proposals[ProposalID] = Proposal(ProposalID, _to, false, _tokenContractAddress, _amount, 0, 0);\n        return id;\n    }\n    \n    // only  Foundation or Exchange can approval\n    function approval (uint256 id) public returns (bool) {\n        require(msg.sender == Foundation || msg.sender == Exchange);\n        Proposal storage p = Proposals[id];\n        require(p.close == false);\n        if (msg.sender == Foundation && p.approvalByFoundation == 0) {\n            p.approvalByFoundation = 1;\n            Proposals[ProposalID] = p;\n        }\n        if (msg.sender == Exchange && p.approvalByExchange == 0) {\n            p.approvalByExchange = 1;\n            Proposals[ProposalID] = p;\n        }\n        \n        if (p.approvalByExchange == 1 && p.approvalByFoundation == 1) {\n            p.close = true;\n            Proposals[ProposalID] = p;\n            ERC20(p.tokenContractAddress).transfer(p.to, p.amount.mul(1e18));\n        }\n        return true;\n    }\n    \n    // only  Foundation or Exchange can refuse\n    function refuse (uint256 id) public returns (bool) {\n        require(msg.sender == Foundation || msg.sender == Exchange);\n        Proposal storage p = Proposals[id];\n        require(p.close == false);\n        if (msg.sender == Foundation && p.approvalByFoundation == 0) {\n            p.close = true;\n            p.approvalByFoundation = 2;\n            Proposals[ProposalID] = p;\n            return true;\n        }\n        if (msg.sender == Exchange && p.approvalByExchange == 0) {\n            p.close = true;\n            p.approvalByExchange = 2;\n            Proposals[ProposalID] = p;\n            return true;\n        }\n    }\n    \n    \n    function() payable external {\n        revert();\n    }\n}",
  "bytecode": "6080604052739e832a9ceadf1e97d6d8da6922b87b59d25eeee06000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550735a403e651ec2cd3b6b385dc639f1a90ea01017f7600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006002553480156100be57600080fd5b5061155f806100ce6000396000f3fe608060405260043610610098576000357c01000000000000000000000000000000000000000000000000000000009004806379fd15231161006b57806379fd152314610247578063a60a07b2146102d6578063bc9147a414610329578063d1dbe7d81461038057610098565b80630a77b0781461009d5780631f6e7c0f146100f4578063247b66201461011f5780633052ea08146101f4575b600080fd5b3480156100a957600080fd5b506100b2610455565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561010057600080fd5b5061010961047a565b6040518082815260200191505060405180910390f35b34801561012b57600080fd5b506101586004803603602081101561014257600080fd5b8101908080359060200190929190505050610480565b604051808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001861515151581526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200197505050505050505060405180910390f35b34801561020057600080fd5b5061022d6004803603602081101561021757600080fd5b81019080803590602001909291905050506105e0565b604051808215151515815260200191505060405180910390f35b34801561025357600080fd5b506102c06004803603606081101561026a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cef565b6040518082815260200191505060405180910390f35b3480156102e257600080fd5b5061030f600480360360208110156102f957600080fd5b8101908080359060200190929190505050610f1f565b604051808215151515815260200191505060405180910390f35b34801561033557600080fd5b5061033e6113bb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561038c57600080fd5b506103b9600480360360208110156103a357600080fd5b81019080803590602001909291905050506113e1565b604051808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001861515151581526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200197505050505050505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60008060008060008060006104936114c7565b600360008a815260200190815260200160002060e06040519081016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff161515151581526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820154815250509050806000015181602001518260400151836060015184608001518560a001518660c00151975097509750975097509750975050919395979092949650565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061068a57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561069557600080fd5b6000600360008481526020019081526020016000209050600015158160010160149054906101000a900460ff1615151415156106d057600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015610731575060008160050154145b1561087d576001816005018190555080600360006002548152602001908152602001600020600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820160149054906101000a900460ff168160010160146101000a81548160ff0219169083151502179055506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506003820154816003015560048201548160040155600582015481600501559050505b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156108dd575060008160040154145b15610a29576001816004018190555080600360006002548152602001908152602001600020600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820160149054906101000a900460ff168160010160146101000a81548160ff0219169083151502179055506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506003820154816003015560048201548160040155600582015481600501559050505b60018160040154148015610a41575060018160050154145b15610ce55760018160010160146101000a81548160ff02191690831515021790555080600360006002548152602001908152602001600020600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820160149054906101000a900460ff168160010160146101000a81548160ff0219169083151502179055506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506003820154816003015560048201548160040155600582015481600501559050508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610c23670de0b6b3a7640000856003015461147090919063ffffffff16565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610ca857600080fd5b505af1158015610cbc573d6000803e3d6000fd5b505050506040513d6020811015610cd257600080fd5b8101908080519060200190929190505050505b6001915050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610d9957506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610da457600080fd5b610dba60016002546114a690919063ffffffff16565b60028190555060e06040519081016040528060025481526020018573ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020016000815260200160008152506003600060025481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff02191690831515021790555060608201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816003015560a0820151816004015560c082015181600501559050508090509392505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610fc957506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610fd457600080fd5b6000600360008481526020019081526020016000209050600015158160010160149054906101000a900460ff16151514151561100f57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015611070575060008160050154145b156111e25760018160010160146101000a81548160ff0219169083151502179055506002816005018190555080600360006002548152602001908152602001600020600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820160149054906101000a900460ff168160010160146101000a81548160ff0219169083151502179055506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060038201548160030155600482015481600401556005820154816005015590505060019150506113b6565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015611242575060008160040154145b156113b45760018160010160146101000a81548160ff0219169083151502179055506002816004018190555080600360006002548152602001908152602001600020600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820160149054906101000a900460ff168160010160146101000a81548160ff0219169083151502179055506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060038201548160030155600482015481600401556005820154816005015590505060019150506113b6565b505b919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050154905087565b60008082840290506000841480611491575082848281151561148e57fe5b04145b151561149c57600080fd5b8091505092915050565b60008082840190508381101515156114bd57600080fd5b8091505092915050565b60e06040519081016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152509056fea165627a7a723058204fa398bcd591c86f806a0f2297f1f75b85ebacb2c5bc6bb63a9b61233c245dd30029"
}