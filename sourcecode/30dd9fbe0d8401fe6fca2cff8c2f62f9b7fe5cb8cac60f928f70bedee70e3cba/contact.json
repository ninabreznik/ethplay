{
  "address": "0x0129bd83cfad576a443cfebefe5b350c9ef4dcbf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Allocation",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-17\n*/\n\npragma solidity 0.4.24;\n\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\nlibrary Percent {\n  using SafeMath for uint256;\n  /**\n   * @dev Add percent to numerator variable with precision\n   */\n  function perc\n  (\n    uint256 initialValue,\n    uint256 percent\n  ) \n    internal \n    pure \n    returns(uint256 result) \n  { \n    return initialValue.div(100).mul(percent);\n  }\n}\n\n/**\n * @title Roles\n * @author Francisco Giordano (@frangio)\n * @dev Library for managing addresses assigned to a Role.\n * See RBAC.sol for example usage.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = true;\n  }\n\n  /**\n   * @dev remove an address' access to this role\n   */\n  function remove(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage role, address addr)\n    view\n    internal\n  {\n    require(has(role, addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage role, address addr)\n    view\n    internal\n    returns (bool)\n  {\n    return role.bearer[addr];\n  }\n}\n\n/**\n * @title RBAC (Role-Based Access Control)\n * @author Matt Condon (@Shrugs)\n * @dev Stores and provides setters and getters for roles and addresses.\n * Supports unlimited numbers of roles and addresses.\n * See //contracts/mocks/RBACMock.sol for an example of usage.\n * This RBAC method uses strings to key roles. It may be beneficial\n * for you to write your own implementation of this interface using Enums or similar.\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\n * to avoid typos.\n */\ncontract RBAC {\n  using Roles for Roles.Role;\n\n  mapping (string => Roles.Role) private roles;\n\n  event RoleAdded(address indexed operator, string role);\n  event RoleRemoved(address indexed operator, string role);\n\n  /**\n   * @dev reverts if addr does not have role\n   * @param _operator address\n   * @param _role the name of the role\n   * // reverts\n   */\n  function checkRole(address _operator, string _role)\n    view\n    public\n  {\n    roles[_role].check(_operator);\n  }\n\n  /**\n   * @dev determine if addr has role\n   * @param _operator address\n   * @param _role the name of the role\n   * @return bool\n   */\n  function hasRole(address _operator, string _role)\n    view\n    public\n    returns (bool)\n  {\n    return roles[_role].has(_operator);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_operator, _role);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function removeRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].remove(_operator);\n    emit RoleRemoved(_operator, _role);\n  }\n\n  /**\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n   * @param _role the name of the role\n   * // reverts\n   */\n  modifier onlyRole(string _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n\n}\n\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        require(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n        require(token.approve(spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        require(token.approve(spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        require(token.approve(spender, newAllowance));\n    }\n}\n\n\n/**\n * @title TokenVesting\n * @dev A token holder contract that can release its token balance gradually like a\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n * owner.\n */\ncontract TokenVesting is Ownable {\n  using SafeMath for uint256;\n\n  // Token release event, emits once owner releasing his tokens \n  event Released(uint256 amount);\n\n  // Token revoke event\n  event Revoked();\n\n  // beneficiary of tokens after they are released\n  address public beneficiary;\n\n  // start\n  uint256 public start;\n\n  /**\n   * Variables for setup vesting and release periods\n   */\n  uint256 public duration = 23667695;\n  uint256 public firstStage = 7889229;\n  uint256 public secondStage = 15778458;\n  \n\n  bool public revocable;\n\n  mapping (address => uint256) public released;\n  mapping (address => bool) public revoked;\n\n  /**\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n   * of the balance will have vested.\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n   * @param _start the time (as Unix time) at which point vesting starts \n   * @param _revocable whether the vesting is revocable or not\n   */\n  constructor(\n    address _beneficiary,\n    uint256 _start,\n    bool _revocable\n  )\n    public\n  {\n    require(_beneficiary != address(0));\n    beneficiary = _beneficiary;\n    revocable = _revocable;\n    start = _start;\n  }\n\n  /**\n   * @notice Transfers vested tokens to beneficiary.\n   * @param token ERC20 token which is being vested\n   */\n  function release(ERC20 token) public {\n    uint256 unreleased = releasableAmount(token);\n\n    require(unreleased > 0);\n\n    released[token] = released[token].add(unreleased);\n\n    token.transfer(beneficiary, unreleased);\n\n    emit Released(unreleased);\n  }\n\n  /**\n   * @notice Allows the owner to revoke the vesting. Tokens already vested\n   * remain in the contract, the rest are returned to the owner.\n   * @param token ERC20 token which is being vested\n   */\n  function revoke(ERC20 token) public onlyOwner {\n    require(revocable);\n    require(!revoked[token]);\n\n    uint256 balance = token.balanceOf(this);\n\n    uint256 unreleased = releasableAmount(token);\n    uint256 refund = balance.sub(unreleased);\n\n    revoked[token] = true;\n\n    token.transfer(owner, refund);\n\n    emit Revoked();\n  }\n\n  /**\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\n   * @param token ERC20 token which is being vested\n   */\n  function releasableAmount(ERC20 token) public view returns (uint256) {\n    return vestedAmount(token).sub(released[token]);\n  }\n\n  /**\n   * @dev Calculates the amount that has already vested.\n   * @param token ERC20 token which is being vested\n   */\n  function vestedAmount(ERC20 token) public view returns (uint256) {\n    uint256 currentBalance = token.balanceOf(this);\n    uint256 totalBalance = currentBalance.add(released[token]);\n\n    if (block.timestamp >= start.add(duration) || revoked[token]) {\n      return totalBalance;\n    } \n\n    if(block.timestamp >= start.add(firstStage) && block.timestamp <= start.add(secondStage)){\n      return totalBalance.div(3);\n    }\n\n    if(block.timestamp >= start.add(secondStage) && block.timestamp <= start.add(duration)){\n      return totalBalance.div(3).mul(2);\n    }\n\n    return 0;\n  }\n}\n\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n * This simplifies the implementation of \"user permissions\".\n */\ncontract Whitelist is Ownable, RBAC {\n  string public constant ROLE_WHITELISTED = \"whitelist\";\n\n  /**\n   * @dev Throws if operator is not whitelisted.\n   * @param _operator address\n   */\n  modifier onlyIfWhitelisted(address _operator) {\n    checkRole(_operator, ROLE_WHITELISTED);\n    _;\n  }\n\n  /**\n   * @dev add an address to the whitelist\n   * @param _operator address\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address _operator)\n    onlyOwner\n    public\n  {\n    addRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function whitelist(address _operator)\n    public\n    view\n    returns (bool)\n  {\n    return hasRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev add addresses to the whitelist\n   * @param _operators addresses\n   * @return true if at least one address was added to the whitelist,\n   * false if all addresses were already in the whitelist\n   */\n  function addAddressesToWhitelist(address[] _operators)\n    onlyOwner\n    public\n  {\n    for (uint256 i = 0; i < _operators.length; i++) {\n      addAddressToWhitelist(_operators[i]);\n    }\n  }\n\n  /**\n   * @dev remove an address from the whitelist\n   * @param _operator address\n   * @return true if the address was removed from the whitelist,\n   * false if the address wasn't in the whitelist in the first place\n   */\n  function removeAddressFromWhitelist(address _operator)\n    onlyOwner\n    public\n  {\n    removeRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev remove addresses from the whitelist\n   * @param _operators addresses\n   * @return true if at least one address was removed from the whitelist,\n   * false if all addresses weren't in the whitelist in the first place\n   */\n  function removeAddressesFromWhitelist(address[] _operators)\n    onlyOwner\n    public\n  {\n    for (uint256 i = 0; i < _operators.length; i++) {\n      removeAddressFromWhitelist(_operators[i]);\n    }\n  }\n\n}\n\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n\ncontract TokenDestructible is Ownable {\n\n  constructor() public payable { }\n\n  /**\n   * @notice Terminate contract and refund to owner\n   * @notice The called token contracts could try to re-enter this contract. Only\n   supply token contracts you trust.\n   */\n  function destroy() onlyOwner public {\n    selfdestruct(owner);\n  }\n}\n\n\ncontract Token is PausableToken, TokenDestructible {\n  /**\n   * Variables that define basic token features\n   */ \n  uint256 public decimals;\n  string public name;\n  string public symbol;\n  uint256 releasedAmount = 0;\n\n  constructor(uint256 _totalSupply, uint256 _decimals, string _name, string _symbol) public {\n    require(_totalSupply > 0);\n    require(_decimals > 0);\n\n    totalSupply_ = _totalSupply;\n    decimals = _decimals;\n    name = _name;\n    symbol = _symbol;\n\n    balances[msg.sender] = _totalSupply;\n\n    // transfer all supply to the owner\n    emit Transfer(address(0), msg.sender, _totalSupply);\n  }\n}\n\n/**\n * @title Allocation\n * Allocation is a base contract for managing a token sale,\n * allowing investors to purchase tokens with ether.\n */\ncontract Allocation is Whitelist {\n  using SafeMath for uint256;\n  using Percent for uint256;\n\n  /**\n   * Event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(\n    address indexed purchaser,\n    address indexed beneficiary,\n    uint256 value,\n    uint256 amount\n  );\n\n  event Finalized();\n\n  /**\n   * Event for creation of token vesting contract\n   * @param beneficiary who will receive tokens \n   * @param start time of vesting start\n   * @param revocable specifies if vesting contract has abitility to revoke\n   */\n  event TimeVestingCreation\n  (\n    address beneficiary,\n    uint256 start,\n    uint256 duration,\n    bool revocable\n  );\n\n  struct PartInfo {\n    uint256 percent;\n    bool lockup;\n    uint256 amount;\n  }\n\n  mapping (address => bool) public owners;\n  mapping (address => uint256) public contributors;            \n  mapping (address => TokenVesting) public vesting;\n  mapping (uint256 => PartInfo) public pieChart;\n  mapping (address => bool) public isInvestor;\n  \n  address[] public investors;\n\n  /**\n   * Variables for bonus program\n   * ============================\n   * Variables values are test!!!\n   */\n  uint256 private SMALLEST_SUM; // 971911700000000000\n  uint256 private SMALLER_SUM;  // 291573500000000000000\n  uint256 private MEDIUM_SUM;   // 485955800000000000000\n  uint256 private BIGGER_SUM;   // 971911700000000000000\n  uint256 private BIGGEST_SUM;  // 1943823500000000000000\n\n  // Vesting period\n  uint256 public duration = 23667695;\n\n  // Flag of Finalized sale event\n  bool public isFinalized = false;\n\n  // Wei raides accumulator\n  uint256 public weiRaised = 0;\n\n  //\n  Token public token;\n  //\n  address public wallet;\n  uint256 public rate;  \n  uint256 public softCap;\n  uint256 public hardCap;\n\n  /**\n   * @param _rate Number of token units a buyer gets per wei\n   * @param _wallet Address where collected funds will be forwarded to\n   * @param _token Address of the token being sold\n   * @param _softCap Soft cap\n   * @param _hardCap Hard cap\n   * @param _smallestSum Sum after which investor receives 5% of bonus tokens to vesting contract\n   * @param _smallerSum Sum after which investor receives 10% of bonus tokens to vesting contract\n   * @param _mediumSum Sum after which investor receives 15% of bonus tokens to vesting contract\n   * @param _biggerSum Sum after which investor receives 20% of bonus tokens to vesting contract\n   * @param _biggestSum Sum after which investor receives 30% of bonus tokens to vesting contract\n   */\n  constructor(\n    uint256 _rate, \n    address _wallet, \n    Token _token,\n    uint256 _softCap,\n    uint256 _hardCap,\n    uint256 _smallestSum,\n    uint256 _smallerSum,\n    uint256 _mediumSum,\n    uint256 _biggerSum,\n    uint256 _biggestSum\n  ) \n    public \n  {\n    require(_rate > 0);\n    require(_wallet != address(0));\n    require(_token != address(0));\n    require(_hardCap > 0);\n    require(_softCap > 0);\n    require(_hardCap > _softCap);\n\n    rate = _rate;\n    wallet = _wallet;\n    token = _token;\n    hardCap = _hardCap;\n    softCap = _softCap;\n\n    SMALLEST_SUM = _smallestSum;\n    SMALLER_SUM = _smallerSum;\n    MEDIUM_SUM = _mediumSum;\n    BIGGER_SUM = _biggerSum;\n    BIGGEST_SUM = _biggestSum;\n\n    owners[msg.sender] = true;\n\n    /**\n    * Pie chart \n    *\n    * early cotributors => 1\n    * management team => 2\n    * advisors => 3\n    * partners => 4\n    * community => 5\n    * company => 6\n    * liquidity => 7\n    * sale => 8\n    */\n    pieChart[1] = PartInfo(10, true, token.totalSupply().mul(10).div(100));\n    pieChart[2] = PartInfo(15, true, token.totalSupply().mul(15).div(100));\n    pieChart[3] = PartInfo(5, true, token.totalSupply().mul(5).div(100));\n    pieChart[4] = PartInfo(5, false, token.totalSupply().mul(5).div(100));\n    pieChart[5] = PartInfo(8, false, token.totalSupply().mul(8).div(100));\n    pieChart[6] = PartInfo(17, false, token.totalSupply().mul(17).div(100));\n    pieChart[7] = PartInfo(10, false, token.totalSupply().mul(10).div(100));\n    pieChart[8] = PartInfo(30, false, token.totalSupply().mul(30).div(100));\n  }\n\n  // -----------------------------------------\n  // Allocation external interface\n  // -----------------------------------------\n  /**\n   * Function for buying tokens\n   */\n  function() \n    external \n    payable \n  {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   *  Check if value respects sale minimal contribution sum\n   */\n  modifier respectContribution() {\n    require(\n      msg.value >= SMALLEST_SUM,\n      \"Minimum contribution is $50,000\"\n    );\n    _;\n  }\n\n\n  /**\n   * Check if sale is still open\n   */\n  modifier onlyWhileOpen {\n    require(!isFinalized, \"Sale is closed\");\n    _;\n  }\n\n  /**\n   * Check if sender is owner\n   */\n  modifier onlyOwner {\n    require(isOwner(msg.sender) == true, \"User is not in Owners\");\n    _;\n  }\n\n\n  /**\n   * Add new owner\n   * @param _owner Address of owner which should be added\n   */\n  function addOwner(address _owner) public onlyOwner {\n    require(owners[_owner] == false);\n    owners[_owner] = true;\n  }\n\n  /**\n   * Delete an onwer\n   * @param _owner Address of owner which should be deleted\n   */\n  function deleteOwner(address _owner) public onlyOwner {\n    require(owners[_owner] == true);\n    owners[_owner] = false;\n  }\n\n  /**\n   * Check if sender is owner\n   * @param _address Address of owner which should be checked\n   */\n  function isOwner(address _address) public view returns(bool res) {\n    return owners[_address];\n  }\n  \n  /**\n   * Allocate tokens to provided investors\n   */\n  function allocateTokens(address[] _investors) public onlyOwner {\n    require(_investors.length <= 50);\n    \n    for (uint i = 0; i < _investors.length; i++) {\n      allocateTokensInternal(_investors[i]);\n    }\n  }\n\n  /**\n   * Allocate tokens to a single investor\n   * @param _contributor Address of the investor\n   */\n  function allocateTokensForContributor(address _contributor) public onlyOwner {\n    allocateTokensInternal(_contributor);\n  }\n\n  /*\n   * Allocates tokens to single investor\n   * @param _contributor Investor address\n   */\n  function allocateTokensInternal(address _contributor) internal {\n    uint256 weiAmount = contributors[_contributor];\n\n    if (weiAmount > 0) {\n      uint256 tokens = _getTokenAmount(weiAmount);\n      uint256 bonusTokens = _getBonusTokens(weiAmount);\n\n      pieChart[8].amount = pieChart[8].amount.sub(tokens);\n      pieChart[1].amount = pieChart[1].amount.sub(bonusTokens);\n\n      contributors[_contributor] = 0;\n\n      token.transfer(_contributor, tokens);\n      createTimeBasedVesting(_contributor, bonusTokens);\n    }\n  }\n  \n  /**\n   * Send funds from any part of pieChart\n   * @param _to Investors address\n   * @param _type Part of pieChart\n   * @param _amount Amount of tokens\n   */\n  function sendFunds(address _to, uint256 _type, uint256 _amount) public onlyOwner {\n    require(\n      pieChart[_type].amount >= _amount &&\n      _type >= 1 &&\n      _type <= 8\n    );\n\n    if (pieChart[_type].lockup == true) {\n      createTimeBasedVesting(_to, _amount);\n    } else {\n      token.transfer(_to, _amount);\n    }\n    \n    pieChart[_type].amount -= _amount;\n  }\n\n  /**\n   * Investment receiver\n   * @param _beneficiary Address performing the token purchase\n   */\n  function buyTokens(address _beneficiary) public payable {\n    uint256 weiAmount = msg.value;\n\n    _preValidatePurchase(_beneficiary, weiAmount);\n\n    // calculate token amount to be created without bonuses\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    // update \n    contributors[_beneficiary] += weiAmount;\n\n    if(!isInvestor[_beneficiary]){\n      investors.push(_beneficiary);\n      isInvestor[_beneficiary] = true;\n    }\n    \n    _forwardFunds();\n\n    emit TokenPurchase(\n      msg.sender,\n      _beneficiary,\n      weiAmount,\n      tokens\n    );\n  }\n\n\n  // -----------------------------------------\n  // Internal interface (extensible)\n  // -----------------------------------------\n  /**\n   * Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _preValidatePurchase\n  (\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    onlyIfWhitelisted(_beneficiary)\n    respectContribution\n    onlyWhileOpen\n    view\n    internal\n  {\n    require(weiRaised.add(_weiAmount) <= hardCap);\n    require(_beneficiary != address(0));\n  }\n\n  /**\n   * Create vesting contract\n   * @param _beneficiary address of person who will get all tokens as vesting ends\n   * @param _tokens amount of vested tokens\n   */\n  function createTimeBasedVesting\n  (\n    address _beneficiary,\n    uint256 _tokens\n  )\n    internal\n  {\n    uint256 _start = block.timestamp;\n\n    TokenVesting tokenVesting;\n\n    if (vesting[_beneficiary] == address(0)) {\n      tokenVesting = new TokenVesting(_beneficiary, _start, false);\n      vesting[_beneficiary] = tokenVesting;\n    } else {\n      tokenVesting = vesting[_beneficiary];\n    }\n\n    token.transfer(address(tokenVesting), _tokens);\n\n    emit TimeVestingCreation(_beneficiary, _start, duration, false);\n  }\n\n\n  /**\n   *  checks if sale is closed\n   */\n  function hasClosed() public view returns (bool) {\n    return isFinalized;\n  }\n\n  /** \n   * Release tokens from vesting contract\n   */\n  function releaseVestedTokens() public {\n    address beneficiary = msg.sender;\n    require(vesting[beneficiary] != address(0));\n\n    TokenVesting tokenVesting = vesting[beneficiary];\n    tokenVesting.release(token);\n  }\n\n  /**\n   * Override to extend the way in which ether is converted to tokens.\n   * @param _weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n  function _getBonusTokens\n  (\n    uint256 _weiAmount\n  )\n    internal\n    view\n    returns (uint256 purchasedAmount)\n  {\n    purchasedAmount = _weiAmount;\n\n    if (_weiAmount >= SMALLEST_SUM && _weiAmount < SMALLER_SUM) {\n      purchasedAmount = _weiAmount.perc(5);\n    }\n\n    if (_weiAmount >= SMALLER_SUM && _weiAmount < MEDIUM_SUM) {\n      purchasedAmount = _weiAmount.perc(10);\n    }\n\n    if (_weiAmount >= MEDIUM_SUM && _weiAmount < BIGGER_SUM) {\n      purchasedAmount = _weiAmount.perc(15);\n    }\n\n    if (_weiAmount >= BIGGER_SUM && _weiAmount < BIGGEST_SUM) {\n      purchasedAmount = _weiAmount.perc(20);\n    }\n\n    if (_weiAmount >= BIGGEST_SUM) {\n      purchasedAmount = _weiAmount.perc(30);\n    }\n\n    return purchasedAmount.mul(rate);\n  }\n\n  function _getTokenAmount\n  (\n    uint256 _weiAmount\n  )\n    internal\n    view\n    returns (uint256 purchasedAmount)\n  {\n    return _weiAmount.mul(rate);\n  }\n\n  /**\n   * Determines how ETH is stored/forwarded on purchases.\n   */\n  function _forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n\n\n  /**\n   * Must be called after sale ends, to do some extra finalization\n   * work. Calls the contract's finalization function.\n   */\n  function finalize() public onlyOwner {\n    require(!hasClosed());\n    finalization();\n    isFinalized = true;\n    emit Finalized();\n  } \n\n\n  /**\n   * Can be overridden to add finalization logic. The overriding function\n   * should call super.finalization() to ensure the chain of finalization is\n   * executed entirely.\n   */\n  function finalization() pure internal {}\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_WHITELISTED\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_type\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pieChart\",\"outputs\":[{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"lockup\",\"type\":\"bool\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investors\",\"type\":\"address[]\"}],\"name\":\"allocateTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseVestedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"deleteOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"allocateTokensForContributor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vesting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_softCap\",\"type\":\"uint256\"},{\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"name\":\"_smallestSum\",\"type\":\"uint256\"},{\"name\":\"_smallerSum\",\"type\":\"uint256\"},{\"name\":\"_mediumSum\",\"type\":\"uint256\"},{\"name\":\"_biggerSum\",\"type\":\"uint256\"},{\"name\":\"_biggestSum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"revocable\",\"type\":\"bool\"}],\"name\":\"TimeVestingCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405263016923ef600d556000600e60006101000a81548160ff0219169083151502179055506000600f553480156200003957600080fd5b50604051610140806200500d83398101806040528101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008a1115156200010857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16141515156200014557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141515156200018257600080fd5b6000861115156200019257600080fd5b600087111515620001a257600080fd5b8686111515620001b157600080fd5b8960128190555088601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560148190555086601381905550846008819055508360098190555082600a8190555081600b8190555080600c819055506001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550606060405190810160405280600a8152602001600115158152602001620003e96064620003cc600a601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200037257600080fd5b505af115801562000387573d6000803e3d6000fd5b505050506040513d60208110156200039e57600080fd5b810190808051906020019092919050505062000e736401000000000262002caa179091906401000000009004565b62000eaf6401000000000262002f04179091906401000000009004565b81525060056000600181526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160020155905050606060405190810160405280600f81526020016001151581526020016200055d606462000540600f601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620004e657600080fd5b505af1158015620004fb573d6000803e3d6000fd5b505050506040513d60208110156200051257600080fd5b810190808051906020019092919050505062000e736401000000000262002caa179091906401000000009004565b62000eaf6401000000000262002f04179091906401000000009004565b81525060056000600281526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083151502179055506040820151816002015590505060606040519081016040528060058152602001600115158152602001620006d16064620006b46005601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200065a57600080fd5b505af11580156200066f573d6000803e3d6000fd5b505050506040513d60208110156200068657600080fd5b810190808051906020019092919050505062000e736401000000000262002caa179091906401000000009004565b62000eaf6401000000000262002f04179091906401000000009004565b81525060056000600381526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083151502179055506040820151816002015590505060606040519081016040528060058152602001600015158152602001620008456064620008286005601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620007ce57600080fd5b505af1158015620007e3573d6000803e3d6000fd5b505050506040513d6020811015620007fa57600080fd5b810190808051906020019092919050505062000e736401000000000262002caa179091906401000000009004565b62000eaf6401000000000262002f04179091906401000000009004565b81525060056000600481526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083151502179055506040820151816002015590505060606040519081016040528060088152602001600015158152602001620009b960646200099c6008601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200094257600080fd5b505af115801562000957573d6000803e3d6000fd5b505050506040513d60208110156200096e57600080fd5b810190808051906020019092919050505062000e736401000000000262002caa179091906401000000009004565b62000eaf6401000000000262002f04179091906401000000009004565b81525060056000600581526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff021916908315150217905550604082015181600201559050506060604051908101604052806011815260200160001515815260200162000b2d606462000b106011601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801562000ab657600080fd5b505af115801562000acb573d6000803e3d6000fd5b505050506040513d602081101562000ae257600080fd5b810190808051906020019092919050505062000e736401000000000262002caa179091906401000000009004565b62000eaf6401000000000262002f04179091906401000000009004565b81525060056000600681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160020155905050606060405190810160405280600a815260200160001515815260200162000ca1606462000c84600a601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801562000c2a57600080fd5b505af115801562000c3f573d6000803e3d6000fd5b505050506040513d602081101562000c5657600080fd5b810190808051906020019092919050505062000e736401000000000262002caa179091906401000000009004565b62000eaf6401000000000262002f04179091906401000000009004565b81525060056000600781526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160020155905050606060405190810160405280601e815260200160001515815260200162000e15606462000df8601e601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801562000d9e57600080fd5b505af115801562000db3573d6000803e3d6000fd5b505050506040513d602081101562000dca57600080fd5b810190808051906020019092919050505062000e736401000000000262002caa179091906401000000009004565b62000eaf6401000000000262002f04179091906401000000009004565b81525060056000600881526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff021916908315150217905550604082015181600201559050505050505050505050505062000ec6565b60008083141562000e88576000905062000ea9565b818302905081838281151562000e9a57fe5b0414151562000ea557fe5b8090505b92915050565b6000818381151562000ebd57fe5b04905092915050565b6141378062000ed66000396000f300608060405260043610620001db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063022914a714620001e85780630988ca8c14620002465780630fb5a6b414620002d25780631515bc2b146200030057806318b919e914620003325780631f6d494214620003c8578063217fe6c6146200042257806324953eaa14620004c6578063286dd3f5146200052f5780632ae8a2d214620005755780632c4e722e14620005cf5780632f54bf6e14620005fd578063379e5d8b146200065b5780633feb5f2b14620006b15780634042b66f1462000721578063484c8675146200074f5780634bb278f314620007b8578063521eb27314620007d257806354dd1da4146200082c5780637065cb481462000846578063715018a6146200088c5780637b9417c814620008a65780638d4e408314620008ec5780638da5cb5b146200091e578063906a26e014620009785780639b19251a14620009a6578063cd5c4c701462000a04578063cee2a9cf1462000a4a578063dd44a15c1462000aa8578063e2ec6ec31462000aee578063e388c4231462000b57578063ec8ac4d81462000bdd578063f2fde38b1462000c15578063fb86a4041462000c5b578063fc0c546a1462000c89575b620001e63362000ce3565b005b348015620001f557600080fd5b506200022c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000efb565b604051808215151515815260200191505060405180910390f35b3480156200025357600080fd5b50620002d0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505062000f1b565b005b348015620002df57600080fd5b50620002ea62000fa0565b6040518082815260200191505060405180910390f35b3480156200030d57600080fd5b506200031862000fa6565b604051808215151515815260200191505060405180910390f35b3480156200033f57600080fd5b506200034a62000fbd565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156200038c5780820151818401526020810190506200036f565b50505050905090810190601f168015620003ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015620003d557600080fd5b506200040c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000ff6565b6040518082815260200191505060405180910390f35b3480156200042f57600080fd5b50620004ac600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506200100e565b604051808215151515815260200191505060405180910390f35b348015620004d357600080fd5b506200052d6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929050505062001099565b005b3480156200053c57600080fd5b5062000573600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062001166565b005b3480156200058257600080fd5b50620005cd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505062001231565b005b348015620005dc57600080fd5b50620005e76200146b565b6040518082815260200191505060405180910390f35b3480156200060a57600080fd5b5062000641600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062001471565b604051808215151515815260200191505060405180910390f35b3480156200066857600080fd5b506200068960048036038101908080359060200190929190505050620014c7565b6040518084815260200183151515158152602001828152602001935050505060405180910390f35b348015620006be57600080fd5b50620006df60048036038101908080359060200190929190505050620014fe565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200072e57600080fd5b50620007396200153d565b6040518082815260200191505060405180910390f35b3480156200075c57600080fd5b50620007b66004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929050505062001543565b005b348015620007c557600080fd5b50620007d062001622565b005b348015620007df57600080fd5b50620007ea62001713565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200083957600080fd5b506200084462001739565b005b3480156200085357600080fd5b506200088a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062001918565b005b3480156200089957600080fd5b50620008a462001a5a565b005b348015620008b357600080fd5b50620008ea600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062001b88565b005b348015620008f957600080fd5b506200090462001c53565b604051808215151515815260200191505060405180910390f35b3480156200092b57600080fd5b506200093662001c66565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200098557600080fd5b506200099062001c8b565b6040518082815260200191505060405180910390f35b348015620009b357600080fd5b50620009ea600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062001c91565b604051808215151515815260200191505060405180910390f35b34801562000a1157600080fd5b5062000a48600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062001cdb565b005b34801562000a5757600080fd5b5062000a8e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062001e1d565b604051808215151515815260200191505060405180910390f35b34801562000ab557600080fd5b5062000aec600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062001e3d565b005b34801562000afb57600080fd5b5062000b556004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929050505062001ed2565b005b34801562000b6457600080fd5b5062000b9b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062001f9f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b62000c13600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000ce3565b005b34801562000c2257600080fd5b5062000c59600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062001fd2565b005b34801562000c6857600080fd5b5062000c7362002067565b6040518082815260200191505060405180910390f35b34801562000c9657600080fd5b5062000ca16200206d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008034915062000cf5838362002093565b62000d008262002240565b905062000d1982600f546200226090919063ffffffff16565b600f8190555081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151562000e7f5760078390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b62000e896200227d565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188484604051808381526020018281526020019250505060405180910390a3505050565b60026020528060005260406000206000915054906101000a900460ff1681565b62000f9c826001836040518082805190602001908083835b60208310151562000f5a578051825260208201915060208101905060208303925062000f33565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020620022e990919063ffffffff16565b5050565b600d5481565b6000600e60009054906101000a900460ff16905090565b6040805190810160405280600981526020017f77686974656c697374000000000000000000000000000000000000000000000081525081565b60036020528060005260406000206000915090505481565b600062001091836001846040518082805190602001908083835b6020831015156200104f578051825260208201915060208101905060208303925062001028565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206200230590919063ffffffff16565b905092915050565b600060011515620010aa3362001471565b151514151562001122576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f55736572206973206e6f7420696e204f776e657273000000000000000000000081525060200191505060405180910390fd5b600090505b815181101562001162576200115482828151811015156200114457fe5b9060200190602002015162001166565b808060010191505062001127565b5050565b60011515620011753362001471565b1515141515620011ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f55736572206973206e6f7420696e204f776e657273000000000000000000000081525060200191505060405180910390fd5b6200122e816040805190810160405280600981526020017f77686974656c69737400000000000000000000000000000000000000000000008152506200235e565b50565b60011515620012403362001471565b1515141515620012b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f55736572206973206e6f7420696e204f776e657273000000000000000000000081525060200191505060405180910390fd5b80600560008481526020019081526020016000206002015410158015620012e0575060018210155b8015620012ee575060088211155b1515620012fa57600080fd5b600115156005600084815260200190815260200160002060010160009054906101000a900460ff16151514156200133d5762001337838262002499565b62001442565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156200140357600080fd5b505af115801562001418573d6000803e3d6000fd5b505050506040513d60208110156200142f57600080fd5b8101908080519060200190929190505050505b806005600084815260200190815260200160002060020160008282540392505081905550505050565b60125481565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60056020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060020154905083565b6007818154811015156200150e57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f5481565b600060011515620015543362001471565b1515141515620015cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f55736572206973206e6f7420696e204f776e657273000000000000000000000081525060200191505060405180910390fd5b6032825111151515620015de57600080fd5b600090505b81518110156200161e576200161082828151811015156200160057fe5b906020019060200201516200281d565b8080600101915050620015e3565b5050565b60011515620016313362001471565b1515141515620016a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f55736572206973206e6f7420696e204f776e657273000000000000000000000081525060200191505060405180910390fd5b620016b362000fa6565b151515620016c057600080fd5b620016ca62002a72565b6001600e60006101000a81548160ff0219169083151502179055507f6823b073d48d6e3a7d385eeb601452d680e74bb46afe3255a7d778f3a9b1768160405160405180910390a1565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080339150600073ffffffffffffffffffffffffffffffffffffffff16600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515620017db57600080fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166319165587601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015620018fb57600080fd5b505af115801562001910573d6000803e3d6000fd5b505050505050565b60011515620019273362001471565b15151415156200199f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f55736572206973206e6f7420696e204f776e657273000000000000000000000081525060200191505060405180910390fd5b60001515600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515620019ff57600080fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6001151562001a693362001471565b151514151562001ae1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f55736572206973206e6f7420696e204f776e657273000000000000000000000081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6001151562001b973362001471565b151514151562001c0f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f55736572206973206e6f7420696e204f776e657273000000000000000000000081525060200191505060405180910390fd5b62001c50816040805190810160405280600981526020017f77686974656c697374000000000000000000000000000000000000000000000081525062002a74565b50565b600e60009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60135481565b600062001cd4826040805190810160405280600981526020017f77686974656c69737400000000000000000000000000000000000000000000008152506200100e565b9050919050565b6001151562001cea3362001471565b151514151562001d62576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f55736572206973206e6f7420696e204f776e657273000000000000000000000081525060200191505060405180910390fd5b60011515600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151562001dc257600080fd5b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60066020528060005260406000206000915054906101000a900460ff1681565b6001151562001e4c3362001471565b151514151562001ec4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f55736572206973206e6f7420696e204f776e657273000000000000000000000081525060200191505060405180910390fd5b62001ecf816200281d565b50565b60006001151562001ee33362001471565b151514151562001f5b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f55736572206973206e6f7420696e204f776e657273000000000000000000000081525060200191505060405180910390fd5b600090505b815181101562001f9b5762001f8d828281518110151562001f7d57fe5b9060200190602002015162001b88565b808060010191505062001f60565b5050565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001151562001fe13362001471565b151514151562002059576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f55736572206973206e6f7420696e204f776e657273000000000000000000000081525060200191505060405180910390fd5b620020648162002baf565b50565b60145481565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b81620020d5816040805190810160405280600981526020017f77686974656c697374000000000000000000000000000000000000000000000081525062000f1b565b600854341015151562002150576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4d696e696d756d20636f6e747269627574696f6e206973202435302c3030300081525060200191505060405180910390fd5b600e60009054906101000a900460ff16151515620021d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f53616c6520697320636c6f73656400000000000000000000000000000000000081525060200191505060405180910390fd5b601454620021f083600f546200226090919063ffffffff16565b11151515620021fe57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156200223b57600080fd5b505050565b6000620022596012548362002caa90919063ffffffff16565b9050919050565b600081830190508281101515156200227457fe5b80905092915050565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015620022e6573d6000803e3d6000fd5b50565b620022f5828262002305565b15156200230157600080fd5b5050565b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b620023df826001836040518082805190602001908083835b6020831015156200239d578051825260208201915060208101905060208303925062002376565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902062002ce690919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167fd211483f91fc6eff862467f8de606587a30c8fc9981056f051b897a418df803a826040518080602001828103825283818151815260200191508051906020019080838360005b838110156200245a5780820151818401526020810190506200243d565b50505050905090810190601f168015620024885780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b600080429150600073ffffffffffffffffffffffffffffffffffffffff16600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156200262e57838260006200254262002f1b565b808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001821515151581526020019350505050604051809103906000f080158015620025a7573d6000803e3d6000fd5b50905080600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062002691565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156200275757600080fd5b505af11580156200276c573d6000803e3d6000fd5b505050506040513d60208110156200278357600080fd5b8101908080519060200190929190505050507fa8324279e783df74e90c66d58b38fc3802cbb0c2be0f753f287b81c53bc3dfbd8483600d546000604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018215151515815260200194505050505060405180910390a150505050565b6000806000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250600083111562002a6c57620028798362002240565b9150620028868362002d44565b9050620028b48260056000600881526020019081526020016000206002015462002e5890919063ffffffff16565b600560006008815260200190815260200160002060020181905550620028fb8160056000600181526020019081526020016000206002015462002e5890919063ffffffff16565b6005600060018152602001908152602001600020600201819055506000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801562002a2157600080fd5b505af115801562002a36573d6000803e3d6000fd5b505050506040513d602081101562002a4d57600080fd5b81019080805190602001909291905050505062002a6b848262002499565b5b50505050565b565b62002af5826001836040518082805190602001908083835b60208310151562002ab3578051825260208201915060208101905060208303925062002a8c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902062002e7290919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b700489826040518080602001828103825283818151815260200191508051906020019080838360005b8381101562002b7057808201518184015260208101905062002b53565b50505050905090810190601f16801562002b9e5780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151562002bec57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008083141562002cbf576000905062002ce0565b818302905081838281151562002cd157fe5b0414151562002cdc57fe5b8090505b92915050565b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000819050600854821015801562002d5d575060095482105b1562002d7c5762002d7960058362002ed090919063ffffffff16565b90505b600954821015801562002d905750600a5482105b1562002daf5762002dac600a8362002ed090919063ffffffff16565b90505b600a54821015801562002dc35750600b5482105b1562002de25762002ddf600f8362002ed090919063ffffffff16565b90505b600b54821015801562002df65750600c5482105b1562002e155762002e1260148362002ed090919063ffffffff16565b90505b600c548210151562002e3a5762002e37601e8362002ed090919063ffffffff16565b90505b62002e516012548262002caa90919063ffffffff16565b9050919050565b600082821115151562002e6757fe5b818303905092915050565b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600062002efc8262002eed60648662002f0490919063ffffffff16565b62002caa90919063ffffffff16565b905092915050565b6000818381151562002f1257fe5b04905092915050565b6040516111df8062002f2d833901905600608060405263016923ef6003556278614d60045562f0c29a60055534801561002657600080fd5b506040516060806111df833981018060405281019080805190602001909291908051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156100d957600080fd5b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548160ff021916908315150217905550816002819055505050506110928061014d6000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630fb5a6b4146100e05780631726cbc81461010b5780631916558714610162578063384711cc146101a557806338af3eed146101fc578063715018a61461025357806373dd90731461026a57806374a8f10314610295578063872a7810146102d85780638da5cb5b146103075780639852595c1461035e578063be9a6555146103b5578063ec3f3636146103e0578063f2fde38b1461040b578063fa01dc061461044e575b600080fd5b3480156100ec57600080fd5b506100f56104a9565b6040518082815260200191505060405180910390f35b34801561011757600080fd5b5061014c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104af565b6040518082815260200191505060405180910390f35b34801561016e57600080fd5b506101a3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610512565b005b3480156101b157600080fd5b506101e6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106ff565b6040518082815260200191505060405180910390f35b34801561020857600080fd5b50610211610982565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561025f57600080fd5b506102686109a8565b005b34801561027657600080fd5b5061027f610aaa565b6040518082815260200191505060405180910390f35b3480156102a157600080fd5b506102d6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ab0565b005b3480156102e457600080fd5b506102ed610e06565b604051808215151515815260200191505060405180910390f35b34801561031357600080fd5b5061031c610e19565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561036a57600080fd5b5061039f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e3e565b6040518082815260200191505060405180910390f35b3480156103c157600080fd5b506103ca610e56565b6040518082815260200191505060405180910390f35b3480156103ec57600080fd5b506103f5610e5c565b6040518082815260200191505060405180910390f35b34801561041757600080fd5b5061044c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e62565b005b34801561045a57600080fd5b5061048f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ec9565b604051808215151515815260200191505060405180910390f35b60035481565b600061050b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104fd846106ff565b610ee990919063ffffffff16565b9050919050565b600061051d826104af565b905060008111151561052e57600080fd5b61058081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f0290919063ffffffff16565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561068857600080fd5b505af115801561069c573d6000803e3d6000fd5b505050506040513d60208110156106b257600080fd5b8101908080519060200190929190505050507ffb81f9b30d73d830c3544b34d827c08142579ee75710b490bab0b3995468c565816040518082815260200191505060405180910390a15050565b60008060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561079f57600080fd5b505af11580156107b3573d6000803e3d6000fd5b505050506040513d60208110156107c957600080fd5b8101908080519060200190929190505050915061082e600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610f0290919063ffffffff16565b9050610847600354600254610f0290919063ffffffff16565b4210158061089e5750600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b156108ab5780925061097b565b6108c2600454600254610f0290919063ffffffff16565b42101580156108e757506108e3600554600254610f0290919063ffffffff16565b4211155b1561090757610900600382610f1e90919063ffffffff16565b925061097b565b61091e600554600254610f0290919063ffffffff16565b4210158015610943575061093f600354600254610f0290919063ffffffff16565b4211155b156109765761096f6002610961600384610f1e90919063ffffffff16565b610f3490919063ffffffff16565b925061097b565b600092505b5050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a0357600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60055481565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b1057600080fd5b600660009054906101000a900460ff161515610b2b57600080fd5b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610b8457600080fd5b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610c1f57600080fd5b505af1158015610c33573d6000803e3d6000fd5b505050506040513d6020811015610c4957600080fd5b81019080805190602001909291905050509250610c65846104af565b9150610c7a8284610ee990919063ffffffff16565b90506001600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610d9857600080fd5b505af1158015610dac573d6000803e3d6000fd5b505050506040513d6020811015610dc257600080fd5b8101908080519060200190929190505050507f44825a4b2df8acb19ce4e1afba9aa850c8b65cdb7942e2078f27d0b0960efee660405160405180910390a150505050565b600660009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60076020528060005260406000206000915090505481565b60025481565b60045481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ebd57600080fd5b610ec681610f6c565b50565b60086020528060005260406000206000915054906101000a900460ff1681565b6000828211151515610ef757fe5b818303905092915050565b60008183019050828110151515610f1557fe5b80905092915050565b60008183811515610f2b57fe5b04905092915050565b600080831415610f475760009050610f66565b8183029050818382811515610f5857fe5b04141515610f6257fe5b8090505b92915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610fa857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820bdc72f0c2c60a2846f83af148bcaf983b4050e59e89a2192975f44f8eec2bb0d0029a165627a7a72305820981725f16bcccd4e8536799803613a667d65538466d11435448377982e760498002900000000000000000000000000000000000000000000000000000000000000ca0000000000000000000000001e01693d8c00dd068ff6b30b6363c2094db93df1000000000000000000000000f28463c616bd7b14287b0a4a950d35324f2d7280000000000000000000000000000000000000000000000c7a9a09177a89880000000000000000000000000000000000000000000000007cca045aeac95f50000000000000000000000000000000000000000000000000001fee045b582114000000000000000000000000000000000000000000000000005fd7edc8bc0aa0000000000000000000000000000000000000000000000000009fb3f67f6c4cc8000000000000000000000000000000000000000000000000013f75cdb58c40f4000000000000000000000000000000000000000000000000027eeb9b6b1881e80000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000ca0000000000000000000000001e01693d8c00dd068ff6b30b6363c2094db93df1000000000000000000000000f28463c616bd7b14287b0a4a950d35324f2d7280000000000000000000000000000000000000000000000c7a9a09177a89880000000000000000000000000000000000000000000000007cca045aeac95f50000000000000000000000000000000000000000000000000001fee045b582114000000000000000000000000000000000000000000000000005fd7edc8bc0aa0000000000000000000000000000000000000000000000000009fb3f67f6c4cc8000000000000000000000000000000000000000000000000013f75cdb58c40f4000000000000000000000000000000000000000000000000027eeb9b6b1881e80000"
}