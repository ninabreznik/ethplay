{
  "address": "0x774d3a7b9a5fb33d5525252a275bf440e742b179",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ROC2",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-30\n*/\n\npragma solidity ^0.4.23;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20 {\n  function totalSupply()public view returns (uint256 total_Supply);\n  function balanceOf(address _owner)public view returns (uint256 balance);\n  function allowance(address _owner, address _spender)public view returns (uint256 remaining);\n  function transferFrom(address _from, address _to, uint256 _amount)public returns (bool ok);\n  function approve(address _spender, uint256 _amount)public returns (bool ok);\n  function transfer(address _to, uint256 _amount)public returns (bool ok);\n  event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\n}\n\ncontract ROC2 is ERC20\n{\n    using SafeMath for uint256;\n    string public constant symbol = \"ROC2\";\n    string public constant name = \"Rasputin Party Mansion\";\n    uint8 public constant decimals = 10;\n    uint256 public _totalSupply = 27000000 * 10 ** 10;     // 27 milion supply           \n    // Balances for each account\n    mapping(address => uint256) balances;  \n    mapping (address => mapping (address => uint)) allowed;\n    // Owner of this contract\n    address public owner;\n    \n    uint public perTokenPrice = 0;\n    uint256 public owner_balance = 12000000 * 10 **10;\n    uint256 public one_ether_usd_price = 0;\n    uint256 public bonus_percentage = 0;\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n    \n    bool public ICO_state = false;\n    \n    modifier onlyOwner() {\n      if (msg.sender != owner) {\n            revert();\n        }\n        _;\n        }\n    \n    constructor () public\n    {\n        owner = msg.sender;\n        balances[owner] = owner_balance; // 12 million with owner\n        balances[this] = 15000000 * 10**10; // 15 million with contract address\n        perTokenPrice = 275;\n        bonus_percentage= 30;\n        \n        emit Transfer(0x00, owner, owner_balance);\n        emit Transfer(0x00, this, balances[this]);\n    }\n    \n    function () public payable \n    {\n        require(ICO_state && msg.value > 0);\n        distributeToken(msg.value,msg.sender);\n    }\n    \n     function distributeToken(uint val, address user_address ) private {\n         \n        require(one_ether_usd_price > 0);\n        uint256 tokens = ((one_ether_usd_price * val) )  / (perTokenPrice * 10**14); \n        require(balances[address(this)] >= tokens);\n         \n        if(bonus_percentage >0)\n        {\n            tokens = tokens.add(bonus_percentage.mul(tokens)/100); \n        }\n        \n            balances[address(this)] = balances[address(this)].sub(tokens);\n            balances[user_address] = balances[user_address].add(tokens);\n            emit Transfer(address(this), user_address, tokens);\n    }\n    \n    \n     // total supply of the tokens\n    function totalSupply() public view returns (uint256 total_Supply) {\n         total_Supply = _totalSupply;\n     }\n  \n     //  balance of a particular account\n     function balanceOf(address _owner)public view returns (uint256 balance) {\n         return balances[_owner];\n     }\n  \n     // Transfer the balance from owner's account to another account\n     function transfer(address _to, uint256 _amount)public returns (bool success) {\n         require( _to != 0x0);\n         require(balances[msg.sender] >= _amount \n             && _amount >= 0\n             && balances[_to] + _amount >= balances[_to]);\n             balances[msg.sender] = balances[msg.sender].sub(_amount);\n             balances[_to] = balances[_to].add(_amount);\n             emit Transfer(msg.sender, _to, _amount);\n             return true;\n     }\n  \n     // Send _value amount of tokens from address _from to address _to\n     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n     // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n     // fees in sub-currencies; the command should fail unless the _from account has\n     // deliberately authorized the sender of the message via some mechanism; we propose\n     // these standardized APIs for approval:\n     function transferFrom(\n         address _from,\n         address _to,\n         uint256 _amount\n     )public returns (bool success) {\n        require(_to != 0x0); \n         require(balances[_from] >= _amount\n             && allowed[_from][msg.sender] >= _amount\n             && _amount >= 0\n             && balances[_to] + _amount >= balances[_to]);\n             balances[_from] = balances[_from].sub(_amount);\n             allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n             balances[_to] = balances[_to].add(_amount);\n             emit Transfer(_from, _to, _amount);\n             return true;\n             }\n \n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n     // If this function is called again it overwrites the current allowance with _value.\n     function approve(address _spender, uint256 _amount)public returns (bool success) {\n         allowed[msg.sender][_spender] = _amount;\n         emit Approval(msg.sender, _spender, _amount);\n         return true;\n     }\n  \n     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\n         return allowed[_owner][_spender];\n   }\n   \n   \t//In case the ownership needs to be transferred\n\tfunction transferOwnership(address newOwner)public onlyOwner\n\t{\n\t    require( newOwner != 0x0);\n\t    balances[newOwner] = balances[newOwner].add(balances[owner]);\n\t    balances[owner] = 0;\n\t    address oldOwner = owner;\n\t    owner = newOwner;\n\t    \n\t    emit Transfer(oldOwner, owner, balances[newOwner]);\n\t}\n\t\n\t //Burning tokens should be called after ICo ends\n    function burntokens(uint256 burn_amount) external onlyOwner {\n        require(burn_amount >0 && burn_amount <= balances[address(this)]);\n         _totalSupply = (_totalSupply).sub(burn_amount);\n         balances[address(this)] = (balances[address(this)].sub(burn_amount));\n          emit Transfer(address(this), 0x00, burn_amount);\n     }\n\t\n\t// drain ether called by only owner\n\tfunction drain() public onlyOwner {\n        owner.transfer(address(this).balance);\n    }\n    \n    function setbonusprcentage(uint256 percent) public onlyOwner{ // percent to be 30,20,10\n        \n        bonus_percentage = percent;\n    }\n    \n    //price should be in cents\n    function setTokenPrice(uint _price) public onlyOwner{\n        \n        perTokenPrice = _price;\n    }\n    \n    // need to be called before the ICO to set ether price in USD upto 8 decimals. \n    function setEtherPrice(uint etherPrice) public onlyOwner\n    {\n        one_ether_usd_price = etherPrice;\n    }\n    \n    function startICO() public onlyOwner{\n        \n        ICO_state = true;\n    }\n    \n    function StopICO() public onlyOwner{\n        ICO_state = false;\n    }\n    \n    // used to send tokens to other contract and notify\n    \n        function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n}",
  "bytecode": "60806040526703bf3b91c95b0000600090815560048190556701aa535d3d0c000060055560068190556007556008805460ff1916905534801561004157600080fd5b5060038054600160a060020a031916331780825560058054600160a060020a03928316600090815260016020908152604080832093909355308252828220670214e8348c4f00009055610113600455601e60075594549254825190815291519290931693600080516020610f6783398151915292918290030190a33060008181526001602090815260408083205481519081529051600080516020610f67833981519152929181900390910190a3610e69806100fe6000396000f3006080604052600436106101485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610171578063095ea7b3146101fb5780631273621f1461023357806318160ddd1461024b57806323b872dd14610272578063271879911461029c578063313ce567146102b45780633dbedbd4146102df5780633eaaf86b146102f45780636a61e5fc1461030957806370a082311461032157806372ff1773146103425780637fa8c158146103575780638da5cb5b1461036c5780638f2e695c1461039d57806394b0780f146103b257806395d89b41146103ca5780639890220b146103df5780639b18d79a146103f4578063a581a27a14610409578063a9059cbb1461041e578063ba391bb214610442578063cae9ca5114610457578063dd62ed3e146104c0578063f2fde38b146104e7575b60085460ff16801561015a5750600034115b151561016557600080fd5b61016f3433610508565b005b34801561017d57600080fd5b5061018661062e565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101c05781810151838201526020016101a8565b50505050905090810190601f1680156101ed5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020757600080fd5b5061021f600160a060020a0360043516602435610665565b604080519115158252519081900360200190f35b34801561023f57600080fd5b5061016f6004356106cb565b34801561025757600080fd5b506102606106e7565b60408051918252519081900360200190f35b34801561027e57600080fd5b5061021f600160a060020a03600435811690602435166044356106ed565b3480156102a857600080fd5b5061016f600435610886565b3480156102c057600080fd5b506102c96108a2565b6040805160ff9092168252519081900360200190f35b3480156102eb57600080fd5b5061016f6108a7565b34801561030057600080fd5b506102606108ca565b34801561031557600080fd5b5061016f6004356108d0565b34801561032d57600080fd5b50610260600160a060020a03600435166108ec565b34801561034e57600080fd5b50610260610907565b34801561036357600080fd5b5061016f61090d565b34801561037857600080fd5b50610381610933565b60408051600160a060020a039092168252519081900360200190f35b3480156103a957600080fd5b5061021f610942565b3480156103be57600080fd5b5061016f60043561094b565b3480156103d657600080fd5b506101866109fc565b3480156103eb57600080fd5b5061016f610a33565b34801561040057600080fd5b50610260610a87565b34801561041557600080fd5b50610260610a8d565b34801561042a57600080fd5b5061021f600160a060020a0360043516602435610a93565b34801561044e57600080fd5b50610260610b99565b34801561046357600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261021f948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610b9f9650505050505050565b3480156104cc57600080fd5b50610260600160a060020a0360043581169060243516610cb8565b3480156104f357600080fd5b5061016f600160a060020a0360043516610ce3565b60008060065411151561051a57600080fd5b600454655af3107a400002836006540281151561053357fe5b30600090815260016020526040902054919004915081111561055457600080fd5b6000600754111561059457610591606461057983600754610dc690919063ffffffff16565b81151561058257fe5b8391900463ffffffff610dfc16565b90505b306000908152600160205260409020546105b4908263ffffffff610e0b16565b3060009081526001602052604080822092909255600160a060020a038416815220546105e6908263ffffffff610dfc16565b600160a060020a038316600081815260016020908152604091829020939093558051848152905191923092600080516020610e1e8339815191529281900390910190a3505050565b60408051808201909152601681527f526173707574696e205061727479204d616e73696f6e00000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600354600160a060020a031633146106e257600080fd5b600755565b60005490565b6000600160a060020a038316151561070457600080fd5b600160a060020a038416600090815260016020526040902054821180159061074f5750600160a060020a03841660009081526002602090815260408083203384529091529020548211155b801561075c575060008210155b80156107825750600160a060020a03831660009081526001602052604090205482810110155b151561078d57600080fd5b600160a060020a0384166000908152600160205260409020546107b6908363ffffffff610e0b16565b600160a060020a03851660009081526001602090815260408083209390935560028152828220338352905220546107f3908363ffffffff610e0b16565b600160a060020a038086166000908152600260209081526040808320338452825280832094909455918616815260019091522054610837908363ffffffff610dfc16565b600160a060020a038085166000818152600160209081526040918290209490945580518681529051919392881692600080516020610e1e83398151915292918290030190a35060019392505050565b600354600160a060020a0316331461089d57600080fd5b600655565b600a81565b600354600160a060020a031633146108be57600080fd5b6008805460ff19169055565b60005481565b600354600160a060020a031633146108e757600080fd5b600455565b600160a060020a031660009081526001602052604090205490565b60075481565b600354600160a060020a0316331461092457600080fd5b6008805460ff19166001179055565b600354600160a060020a031681565b60085460ff1681565b600354600160a060020a0316331461096257600080fd5b6000811180156109815750306000908152600160205260409020548111155b151561098c57600080fd5b60005461099f908263ffffffff610e0b16565b6000908155308152600160205260409020546109c1908263ffffffff610e0b16565b30600081815260016020908152604080832094909455835185815293519193600080516020610e1e833981519152929081900390910190a350565b60408051808201909152600481527f524f433200000000000000000000000000000000000000000000000000000000602082015281565b600354600160a060020a03163314610a4a57600080fd5b600354604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015610a84573d6000803e3d6000fd5b50565b60065481565b60055481565b6000600160a060020a0383161515610aaa57600080fd5b336000908152600160205260409020548211801590610aca575060008210155b8015610af05750600160a060020a03831660009081526001602052604090205482810110155b1515610afb57600080fd5b33600090815260016020526040902054610b1b908363ffffffff610e0b16565b3360009081526001602052604080822092909255600160a060020a03851681522054610b4d908363ffffffff610dfc16565b600160a060020a038416600081815260016020908152604091829020939093558051858152905191923392600080516020610e1e8339815191529281900390910190a350600192915050565b60045481565b600083610bac8185610665565b15610cb0576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b83811015610c44578181015183820152602001610c2c565b50505050905090810190601f168015610c715780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610c9357600080fd5b505af1158015610ca7573d6000803e3d6000fd5b50505050600191505b509392505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600090600160a060020a03163314610cfd57600080fd5b600160a060020a0382161515610d1257600080fd5b600354600160a060020a03908116600090815260016020526040808220549285168252902054610d479163ffffffff610dfc16565b600160a060020a0380841660008181526001602090815260408083209586556003805486168452818420849055805473ffffffffffffffffffffffffffffffffffffffff1981168617918290559490935294548551908152945192841695509216928492600080516020610e1e83398151915292918290030190a35050565b600080831515610dd95760009150610df5565b50828202828482811515610de957fe5b0414610df157fe5b8091505b5092915050565b600082820183811015610df157fe5b600082821115610e1757fe5b509003905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820ebd1448e269a566d90c8f1df78c0818c3265ee52a9908539a762e19709fb9d720029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
  "constructorArguments": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
}