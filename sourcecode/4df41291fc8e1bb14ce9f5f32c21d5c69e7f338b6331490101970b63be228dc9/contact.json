{
  "address": "0xe25deffe1e7464bad53b3885c6c0220ce90e57db",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "FastInvest",
  "contractName": "FastInvestToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-04\n*/\n\n/**\n *  The Fast Invest token contract\n *  Compatible with the ERC20 standard (see https://github.com/ethereum/EIPs/issues/20).\n *\n *  Based on OpenZeppelin framework.\n *  https://openzeppelin.org\n *\n *  Author: Paulius Tumosa\n **/\n\npragma solidity ^0.4.18;\n\n/**\n * Safe Math library from OpenZeppelin framework\n * https://openzeppelin.org\n *\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract FastInvestToken {\n    using SafeMath for uint256;\n\n    address public owner;\n\n    // Information about the token\n    string public constant standard = \"ERC20\";\n    string public constant name = \"Fast Invest Token\";\n    string public constant symbol = \"FIT\";\n    uint8  public constant decimals = 18;\n\n    // Total supply of tokens\n    uint256 public totalSupply = 777000000000000000000000000;\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping (address => uint256)) internal allowed;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function FastInvestToken() public {\n        owner = msg.sender;\n        balances[owner] = totalSupply;\n    }\n\n    /**\n     * @dev Transfer token for a specified address\n     *\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     *\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     *\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    *\n    * It checks that spender's allowance is set to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    *\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     *\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n}",
  "bytecode": "60606040526b0282b82666abfd3da9000000600155341561001f57600080fd5b60008054600160a060020a03338116600160a060020a031990921691909117808355600154911682526002602052604090912055610720806100626000396000f3006060604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100b3578063095ea7b31461013d57806318160ddd1461017357806323b872dd14610198578063313ce567146101c05780635a3b7e42146101e957806370a08231146101fc5780638da5cb5b1461021b57806395d89b411461024a578063a9059cbb1461025d578063dd62ed3e1461027f575b600080fd5b34156100be57600080fd5b6100c66102a4565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101025780820151838201526020016100ea565b50505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014857600080fd5b61015f600160a060020a03600435166024356102db565b604051901515815260200160405180910390f35b341561017e57600080fd5b610186610381565b60405190815260200160405180910390f35b34156101a357600080fd5b61015f600160a060020a0360043581169060243516604435610387565b34156101cb57600080fd5b6101d3610509565b60405160ff909116815260200160405180910390f35b34156101f457600080fd5b6100c661050e565b341561020757600080fd5b610186600160a060020a0360043516610545565b341561022657600080fd5b61022e610560565b604051600160a060020a03909116815260200160405180910390f35b341561025557600080fd5b6100c661056f565b341561026857600080fd5b61015f600160a060020a03600435166024356105a6565b341561028a57600080fd5b610186600160a060020a03600435811690602435166106a1565b60408051908101604052601181527f4661737420496e7665737420546f6b656e000000000000000000000000000000602082015281565b600081158061030d5750600160a060020a03338116600090815260036020908152604080832093871683529290522054155b151561031857600080fd5b600160a060020a03338116600081815260036020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60015481565b6000600160a060020a038316151561039e57600080fd5b600160a060020a0384166000908152600260205260409020548211156103c357600080fd5b600160a060020a03808516600090815260036020908152604080832033909416835292905220548211156103f657600080fd5b600160a060020a03841660009081526002602052604090205461041f908363ffffffff6106cc16565b600160a060020a038086166000908152600260205260408082209390935590851681522054610454908363ffffffff6106de16565b600160a060020a0380851660009081526002602090815260408083209490945587831682526003815283822033909316825291909152205461049c908363ffffffff6106cc16565b600160a060020a03808616600081815260036020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b601281565b60408051908101604052600581527f4552433230000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a031660009081526002602052604090205490565b600054600160a060020a031681565b60408051908101604052600381527f4649540000000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a03831615156105bd57600080fd5b600160a060020a0333166000908152600260205260409020548211156105e257600080fd5b600160a060020a03331660009081526002602052604090205461060b908363ffffffff6106cc16565b600160a060020a033381166000908152600260205260408082209390935590851681522054610640908363ffffffff6106de16565b600160a060020a0380851660008181526002602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b6000828211156106d857fe5b50900390565b6000828201838110156106ed57fe5b93925050505600a165627a7a7230582080c91fe713b08202437584d1b466238a53b5f88fb7fcd69aede8e3bafa8b78c10029"
}