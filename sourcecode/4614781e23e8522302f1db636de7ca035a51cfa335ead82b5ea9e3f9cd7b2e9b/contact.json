{
  "address": "0x6ccb56947ea1d6efdc81acfbacd8263ddfa9b202",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "RoyalKingdomCoin",
  "contractName": "RKCToken",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-07-11\n*/\n\n// Royal Kingdom Coin Token\n// www.royalkingdomcoin.com\n//\n// RKC token is a virtual token, governed by ERC20-compatible Ethereum Smart Contract and secured by Ethereum Blockchain\n// The official website is https://www.royalkingdomcoin.com/\n//\n// The uints are all in wei and atto tokens (*10^-18)\n\n// The contract code itself, as usual, is at the end, after all the connected libraries\n\npragma solidity ^0.4.11;\n\n/**\n * Math operations with safety checks\n */\nlibrary SafeMath {\n  function mul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint a, uint b) internal returns (uint) {\n    assert(b > 0);\n    uint c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function sub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\n\n\n/*\n * ERC20Basic\n * Simpler version of ERC20 interface\n * see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20Basic {\n  uint public totalSupply;\n  function balanceOf(address who) constant returns (uint);\n  function transfer(address to, uint value);\n  event Transfer(address indexed from, address indexed to, uint value);\n}\n\n\n\n\n/*\n * Basic token\n * Basic version of StandardToken, with no allowances\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint;\n\n  mapping(address => uint) balances;\n\n  /*\n   * Fix for the ERC20 short address attack  \n   */\n  modifier onlyPayloadSize(uint size) {\n     if(msg.data.length < size + 4) {\n       throw;\n     }\n     _;\n  }\n\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n  }\n\n  function balanceOf(address _owner) constant returns (uint balance) {\n    return balances[_owner];\n  }\n  \n}\n\n\n\n\n/*\n * ERC20 interface\n * see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint);\n  function transferFrom(address from, address to, uint value);\n  function approve(address spender, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\n\n\n/**\n * Standard ERC20 token\n *\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is BasicToken, ERC20 {\n\n  mapping (address => mapping (address => uint)) allowed;\n\n  function transferFrom(address _from, address _to, uint _value) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // if (_value > _allowance) throw;\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint _value) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n  }\n\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\ncontract Ownable {\n  address public owner;\n\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    if (msg.sender != owner) {\n      throw;\n    }\n    _;\n  }\n\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n\ncontract RKCToken is StandardToken, Ownable {\n    using SafeMath for uint;\n\n    //--------------   Info for ERC20 explorers  -----------------//\n    string public name = \"Royal Kingdom Coin\";\n    string public symbol = \"RKC\";\n    uint public decimals = 18;\n\n    //---------------------   Constants   ------------------------//\n    bool public constant TEST_MODE = false;\n    uint public constant atto = 1000000000000000000;\n    uint public constant INITIAL_SUPPLY = 15000000 * atto; // 15 mln RKC. Impossible to mint more than this\n    address public teamWallet = 0xb79F963f200f85D0e3dD60C82ABB8F80b5869CB9;\n    // Made up ICO address (designating the token pool reserved for ICO, no one has access to it)\n    address public ico_address = 0x1c01C01C01C01c01C01c01c01c01C01c01c01c01;\n    uint public constant ICO_START_TIME = 1499810400;\n\n    //----------------------  Variables  -------------------------//\n    uint public current_supply = 0; // Holding the number of all the coins in existence\n    uint public ico_starting_supply = 0; // How many atto tokens *were* available for sale at the beginning of the ICO\n    uint public current_price_atto_tokens_per_wei = 0; // Holding current price (determined by the algorithm in buy())\n\n    //-------------   Flags describing ICO stages   --------------//\n    bool public preSoldSharesDistributed = false; // Prevents accidental re-distribution of shares\n    bool public isICOOpened = false;\n    bool public isICOClosed = false;\n    // 3 stages:\n    // Contract has just been deployed and initialized. isICOOpened == false, isICOClosed == false\n    // ICO has started, now anybody can buy(). isICOOpened == true, isICOClosed == false\n    // ICO has finished, now the team can receive the ether. isICOOpened == false, isICOClosed == true\n\n    //---------------------   Premiums   -------------------------//\n    uint[] public premiumPacks;\n    mapping(address => uint) premiumPacksPaid;\n\n    //----------------------   Events  ---------------------------//\n    event ICOOpened();\n    event ICOClosed();\n    event PriceChanged(uint old_price, uint new_price);\n    event SupplyChanged(uint supply, uint old_supply);\n    event RKCAcquired(address account, uint amount_in_wei, uint amount_in_rkc);\n\n    // ***************************************************************************\n\n    // Constructor\n    function RKCToken() {\n        // Some percentage of the tokens is already reserved by early employees and investors\n        // Here we're initializing their balances\n        distributePreSoldShares();\n\n        // Starting price\n        current_price_atto_tokens_per_wei = calculateCurrentPrice(1);\n\n        // Some other initializations\n        premiumPacks.length = 0;\n    }\n\n    // Sending ether directly to the contract invokes buy() and assigns tokens to the sender\n    function () payable {\n        buy();\n    }\n\n    // ***************************************************************************\n\n    // Buy token by sending ether here\n    //\n    // Price is being determined by the algorithm in recalculatePrice()\n    // You can also send the ether directly to the contract address\n    function buy() payable {\n        if (msg.value == 0) throw; // no tokens for you\n\n        // Only works in the ICO stage, after that the token is going to be traded on the exchanges\n        if (!isICOOpened) throw;\n        if (isICOClosed) throw;\n\n        // Deciding how many tokens can be bought with the ether received\n        uint tokens = getAttoTokensAmountPerWeiInternal(msg.value);\n\n        // Don't allow to buy more than 1% per transaction (secures from huge investors swalling the whole thing in 1 second)\n        uint allowedInOneTransaction = current_supply / 100;\n        if (tokens > allowedInOneTransaction) throw;\n\n        // Just in case\n        if (tokens > balances[ico_address]) throw;\n\n        // Transfer from the ICO pool\n        balances[ico_address] = balances[ico_address].sub(tokens); // if not enough, will throw\n        balances[msg.sender] = balances[msg.sender].add(tokens);\n\n        // Kick the price changing algo\n        uint old_price = current_price_atto_tokens_per_wei;\n        current_price_atto_tokens_per_wei = calculateCurrentPrice(getAttoTokensBoughtInICO());\n        if (current_price_atto_tokens_per_wei == 0) current_price_atto_tokens_per_wei = 1; // in case it is too small that it gets rounded to zero\n        if (current_price_atto_tokens_per_wei > old_price) current_price_atto_tokens_per_wei = old_price; // in case some weird overflow happens\n\n        // Broadcasting price change event\n        if (old_price != current_price_atto_tokens_per_wei) PriceChanged(old_price, current_price_atto_tokens_per_wei);\n\n        // Broadcasting the buying event\n        RKCAcquired(msg.sender, msg.value, tokens);\n    }\n\n    // Formula for the dynamic price change algorithm\n    function calculateCurrentPrice(uint attoTokensBought) constant returns (uint result) {\n        // see http://www.wolframalpha.com/input/?i=f(x)+%3D+395500000+%2F+(x+%2B+150000)+-+136\n        return (395500000 / ((attoTokensBought / atto) + 150000)).sub(136); // mixing safe and usual math here because the division will throw on inconsistency\n    }\n\n    // ***************************************************************************\n\n    // Functions for the contract owner\n\n    function openICO() onlyOwner {\n        if (isICOOpened) throw;\n        if (isICOClosed) throw;\n        isICOOpened = true;\n\n        ICOOpened();\n    }\n    function closeICO() onlyOwner {\n        if (isICOClosed) throw;\n        if (!isICOOpened) throw;\n\n        isICOOpened = false;\n        isICOClosed = true;\n\n        // Redistribute ICO Tokens that were not bought as the first premiums\n        premiumPacks.length = 1;\n        premiumPacks[0] = balances[ico_address];\n        balances[ico_address] = 0;\n\n        ICOClosed();\n    }\n    function pullEtherFromContract() onlyOwner {\n        // Only when ICO is closed\n        if (!isICOClosed) throw;\n\n        if (!teamWallet.send(this.balance)) {\n            throw;\n        }\n    }\n\n    // ***************************************************************************\n\n    // Some percentage of the tokens is already reserved by early employees and investors\n    // Here we're initializing their balances\n    function distributePreSoldShares() onlyOwner {\n        // Making it impossible to call this function twice\n        if (preSoldSharesDistributed) throw;\n        preSoldSharesDistributed = true;\n\n        // Values are in atto tokens\n        balances[0x7A3c869603E28b0242c129440c9dD97F8A5bEe80] = 7508811 * atto;\n        balances[0x24a541dEAe0Fc87C990A208DE28a293fb2A982d9] = 4025712 * atto;\n        balances[0xEcF843458e76052E6363fFb78C7535Cd87AA3AB2] = 300275 * atto;\n        balances[0x947963ED2da750a0712AE0BF96E08C798813F277] = 150000 * atto;\n        balances[0x82Bc8452Ab76fBA446e16b57C080F5258F557734] = 150000 * atto;\n        balances[0x0959Ed48d55e580BB58df6E5ee01BAa787d80848] = 90000 * atto;\n        balances[0x530A8016fB5B3d7A0F92910b4814e383835Bd51E] = 75000 * atto;\n        balances[0xC3e934D3ADE0Ab9F61F824a9a824462c790e47B0] = 202 * atto;\n        current_supply = (7508811 + 4025712 + 300275 + 150000 + 150000 + 90000 + 75000 + 202) * atto;\n\n        // Sending the rest to ICO pool\n        balances[ico_address] = INITIAL_SUPPLY.sub(current_supply);\n\n        // Initializing the supply variables\n        ico_starting_supply = balances[ico_address];\n        current_supply = INITIAL_SUPPLY;\n        SupplyChanged(0, current_supply);\n    }\n\n    // ***************************************************************************\n\n    // Some useful getters (although you can just query the public variables)\n\n    function getCurrentPriceAttoTokensPerWei() constant returns (uint result) {\n        return current_price_atto_tokens_per_wei;\n    }\n    function getAttoTokensAmountPerWeiInternal(uint value) payable returns (uint result) {\n        return value * current_price_atto_tokens_per_wei;\n    }\n    function getAttoTokensAmountPerWei(uint value) constant returns (uint result) {\n        return value * current_price_atto_tokens_per_wei;\n    }\n    function getSupply() constant returns (uint result) {\n        return current_supply;\n    }\n    function getAttoTokensLeftForICO() constant returns (uint result) {\n        return balances[ico_address];\n    }\n    function getAttoTokensBoughtInICO() constant returns (uint result) {\n        return ico_starting_supply - getAttoTokensLeftForICO();\n    }\n    function getBalance(address addr) constant returns (uint balance) {\n        return balances[addr];\n    }\n    function getPremiumPack(uint index) constant returns (uint premium) {\n        return premiumPacks[index];\n    }\n    function getPremiumCount() constant returns (uint length) {\n        return premiumPacks.length;\n    }\n    function getBalancePremiumsPaid(address account) constant returns (uint result) {\n        return premiumPacksPaid[account];\n    }\n\n    // ***************************************************************************\n\n    // Premiums\n\n    function sendPremiumPack(uint amount) onlyOwner allowedPayments(msg.sender, amount) {\n        premiumPacks.length += 1;\n        premiumPacks[premiumPacks.length-1] = amount;\n        balances[msg.sender] = balances[msg.sender].sub(amount); // will throw and revert the whole thing if doesn't have this amount\n    }\n\n    function updatePremiums(address account) private {\n        if (premiumPacks.length > premiumPacksPaid[account]) {\n            uint startPackIndex = premiumPacksPaid[account];\n            uint finishPackIndex = premiumPacks.length - 1;\n            for(uint i = startPackIndex; i <= finishPackIndex; i++) {\n                if (current_supply != 0) { // just in case\n                    uint owing = balances[account] * premiumPacks[i] / current_supply;\n                    balances[account] = balances[account].add(owing);\n                }\n            }\n            premiumPacksPaid[account] = premiumPacks.length;\n        }\n    }\n\n    // ***************************************************************************\n\n    // Overriding payment functions to take control over the logic\n\n    modifier allowedPayments(address payer, uint value) {\n        // Don't allow to transfer coins until the ICO ends\n        if (isICOOpened) throw;\n        if (!isICOClosed) throw;\n\n        // Limit the quick dump possibility\n        uint diff = 0;\n        uint allowed = 0;\n        if (balances[payer] > current_supply / 100) { // for balances > 1% of total supply\n            if (block.timestamp > ICO_START_TIME) {\n                diff = block.timestamp - ICO_START_TIME;\n            } else {\n                diff = ICO_START_TIME - block.timestamp;\n            }\n\n            allowed = (current_supply / 20) * (diff / (60 * 60 * 24 * 30)); // 5% unlocked every month\n\n            if (value > allowed) throw;\n        }\n\n        _;\n    }\n\n    function transferFrom(address _from, address _to, uint _value) allowedPayments(_from, _value) {\n        updatePremiums(_from);\n        updatePremiums(_to);\n        super.transferFrom(_from, _to, _value);\n    }\n    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) allowedPayments(msg.sender, _value) {\n        updatePremiums(msg.sender);\n        updatePremiums(_to);\n        super.transfer(_to, _value);\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_START_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"atto\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICOOpened\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_price_atto_tokens_per_wei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPremiumCount\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSoldSharesDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSupply\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getAttoTokensAmountPerWeiInternal\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendPremiumPack\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalancePremiumsPaid\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPremiumPack\",\"outputs\":[{\"name\":\"premium\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEST_MODE\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"attoTokensBought\",\"type\":\"uint256\"}],\"name\":\"calculateCurrentPrice\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pullEtherFromContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getAttoTokensAmountPerWei\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPriceAttoTokensPerWei\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICOClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAttoTokensBoughtInICO\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAttoTokensLeftForICO\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico_starting_supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"premiumPacks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributePreSoldShares\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ICOOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ICOClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"new_price\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"supply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"old_supply\",\"type\":\"uint256\"}],\"name\":\"SupplyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount_in_wei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount_in_rkc\",\"type\":\"uint256\"}],\"name\":\"RKCAcquired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": ""
}