{
  "address": "0x9a3f91237408ecb94e21e4c293010347f80a136f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MKCToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-14\n*/\n\npragma solidity ^0.4.18;\n\n// File: contracts/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n}\n\n// File: contracts/MKCStop.sol\n\ncontract MKCStop is Ownable {\n\n    bool public stopped;\n\n    modifier stoppable {\n        assert (!stopped);\n        _;\n    }\n    function stop() public onlyOwner {\n        stopped = true;\n    }\n    function start() public onlyOwner {\n        stopped = false;\n    }\n\n}\n\n// File: contracts/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n// File: contracts/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/MKCToken.sol\n\ncontract MKCToken is MKCStop, StandardToken{\n    string public name = \"MKC Token\";\n    uint8 public decimals = 18;\n    string public symbol = \"MKC\";\n    string public version = \"v0.1\";\n     /// initial amount of MKC Token\n    uint256 public initialAmount = (10 ** 9) * (10 ** 18);\n   \n\n    event Destroy(address from, uint value);\n\n    function MKCToken() public {\n        balances[msg.sender] = initialAmount;   // Give the creator all initial balances is defined in StandardToken.sol\n        totalSupply_ = initialAmount;              // Update total supply, totalSupply is defined in Tocken.sol\n    }\n\n    function transfer(address dst, uint wad) public stoppable  returns (bool) {\n        return super.transfer(dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad) public stoppable  returns (bool) {\n        return super.transferFrom(src, dst, wad);\n    }\n    \n    function approve(address guy, uint wad) public stoppable  returns (bool) {\n        return super.approve(guy, wad);\n    }\n\n    function destroy(uint256 _amount) external onlyOwner stoppable  returns (bool success){\n        require(balances[msg.sender] >= _amount);\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        totalSupply_ = totalSupply_.sub(_amount);\n        emit Destroy(msg.sender, _amount);\n        return true;\n    }\n\n     function setName(string name_) public onlyOwner{\n        name = name_;\n    }\n\n}",
  "bytecode": "60c0604052600960808190527f4d4b4320546f6b656e000000000000000000000000000000000000000000000060a090815261003e9160049190610122565b506005805460ff191660121790556040805180820190915260038082527f4d4b430000000000000000000000000000000000000000000000000000000000602090920191825261009091600691610122565b506040805180820190915260048082527f76302e310000000000000000000000000000000000000000000000000000000060209092019182526100d591600791610122565b506b033b2e3c9fd0803ce80000006008553480156100f257600080fd5b5060008054600160a060020a031916339081178255600854908252600160205260409091208190556002556101bd565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061016357805160ff1916838001178555610190565b82800160010185558215610190579182015b82811115610190578251825591602001919060010190610175565b5061019c9291506101a0565b5090565b6101ba91905b8082111561019c57600081556001016101a6565b90565b610cee806101cc6000396000f3006080604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461010b57806307da68f514610195578063095ea7b3146101ac57806318160ddd146101e457806323b872dd1461020b578063313ce5671461023557806354fd4d5014610260578063661884631461027557806370a082311461029957806375f12b21146102ba5780638da5cb5b146102cf57806395d89b41146103005780639d11877014610315578063a9059cbb1461032d578063be9a655514610351578063c47f002714610366578063d73dd623146103bf578063dd62ed3e146103e3578063fc1ed4371461040a575b600080fd5b34801561011757600080fd5b5061012061041f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015a578181015183820152602001610142565b50505050905090810190601f1680156101875780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a157600080fd5b506101aa6104ad565b005b3480156101b857600080fd5b506101d0600160a060020a03600435166024356104ea565b604080519115158252519081900360200190f35b3480156101f057600080fd5b506101f9610510565b60408051918252519081900360200190f35b34801561021757600080fd5b506101d0600160a060020a0360043581169060243516604435610517565b34801561024157600080fd5b5061024a61053f565b6040805160ff9092168252519081900360200190f35b34801561026c57600080fd5b50610120610548565b34801561028157600080fd5b506101d0600160a060020a03600435166024356105a3565b3480156102a557600080fd5b506101f9600160a060020a0360043516610693565b3480156102c657600080fd5b506101d06106ae565b3480156102db57600080fd5b506102e46106be565b60408051600160a060020a039092168252519081900360200190f35b34801561030c57600080fd5b506101206106cd565b34801561032157600080fd5b506101d0600435610728565b34801561033957600080fd5b506101d0600160a060020a03600435166024356107f9565b34801561035d57600080fd5b506101aa610818565b34801561037257600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101aa94369492936024939284019190819084018382808284375094975061084f9650505050505050565b3480156103cb57600080fd5b506101d0600160a060020a036004351660243561087d565b3480156103ef57600080fd5b506101f9600160a060020a0360043581169060243516610916565b34801561041657600080fd5b506101f9610941565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104a55780601f1061047a576101008083540402835291602001916104a5565b820191906000526020600020905b81548152906001019060200180831161048857829003601f168201915b505050505081565b600054600160a060020a031633146104c457600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a179055565b6000805460a060020a900460ff16156104ff57fe5b6105098383610947565b9392505050565b6002545b90565b6000805460a060020a900460ff161561052c57fe5b6105378484846109ad565b949350505050565b60055460ff1681565b6007805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104a55780601f1061047a576101008083540402835291602001916104a5565b336000908152600360209081526040808320600160a060020a0386168452909152812054808311156105f857336000908152600360209081526040808320600160a060020a038816845290915281205561062d565b610608818463ffffffff610b2616565b336000908152600360209081526040808320600160a060020a03891684529091529020555b336000818152600360209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526001602052604090205490565b60005460a060020a900460ff1681565b600054600160a060020a031681565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104a55780601f1061047a576101008083540402835291602001916104a5565b60008054600160a060020a0316331461074057600080fd5b60005460a060020a900460ff161561075457fe5b3360009081526001602052604090205482111561077057600080fd5b33600090815260016020526040902054610790908363ffffffff610b2616565b336000908152600160205260409020556002546107b3908363ffffffff610b2616565b600255604080513381526020810184905281517f81325e2a6c442af9d36e4ee9697f38d5f4bf0837ade0f6c411c6a40af7c057ee929181900390910190a1506001919050565b6000805460a060020a900460ff161561080e57fe5b6105098383610b38565b600054600160a060020a0316331461082f57600080fd5b6000805474ff000000000000000000000000000000000000000019169055565b600054600160a060020a0316331461086657600080fd5b8051610879906004906020840190610c2a565b5050565b336000908152600360209081526040808320600160a060020a03861684529091528120546108b1908363ffffffff610c1b16565b336000818152600360209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60085481565b336000818152600360209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6000600160a060020a03831615156109c457600080fd5b600160a060020a0384166000908152600160205260409020548211156109e957600080fd5b600160a060020a0384166000908152600360209081526040808320338452909152902054821115610a1957600080fd5b600160a060020a038416600090815260016020526040902054610a42908363ffffffff610b2616565b600160a060020a038086166000908152600160205260408082209390935590851681522054610a77908363ffffffff610c1b16565b600160a060020a038085166000908152600160209081526040808320949094559187168152600382528281203382529091522054610abb908363ffffffff610b2616565b600160a060020a03808616600081815260036020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600082821115610b3257fe5b50900390565b6000600160a060020a0383161515610b4f57600080fd5b33600090815260016020526040902054821115610b6b57600080fd5b33600090815260016020526040902054610b8b908363ffffffff610b2616565b3360009081526001602052604080822092909255600160a060020a03851681522054610bbd908363ffffffff610c1b16565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b60008282018381101561050957fe5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610c6b57805160ff1916838001178555610c98565b82800160010185558215610c98579182015b82811115610c98578251825591602001919060010190610c7d565b50610ca4929150610ca8565b5090565b61051491905b80821115610ca45760008155600101610cae5600a165627a7a72305820627838289cda6081f178e4fbe2eba41a0cc214cfc3fc221be9e3fd9b5c747e210029"
}