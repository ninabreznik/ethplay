{
  "address": "0xac709fcb44a43c35f0da4e3163b117a17f3770f5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Arcade City Token",
  "contractName": "ARCToken",
  "compilerVersion": "v0.4.3-nightly.2016.10.24+commit.84b43b91",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2016-10-31\n*/\n\n/**\n * Overflow aware uint math functions.\n *\n * Inspired by https://github.com/MakerDAO/maker-otc/blob/master/contracts/simple_market.sol\n */\npragma solidity ^0.4.2;\n\ncontract SafeMath {\n  //internals\n\n  function safeMul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeSub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) throw;\n  }\n}\n\n/**\n * ERC 20 token\n *\n * https://github.com/ethereum/EIPs/issues/20\n */\ncontract Token {\n\n    /// @return total amount of tokens\n    function totalSupply() constant returns (uint256 supply) {}\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) returns (bool success) {}\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) returns (bool success) {}\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\n\n/**\n * ERC 20 token\n *\n * https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is Token {\n\n    /**\n     * Reviewed:\n     * - Interger overflow = OK, checked\n     */\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        //Default assumes totalSupply can't be over max (2^256 - 1).\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n        //Replace the if with this one instead.\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n        //if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n    mapping(address => uint256) balances;\n\n    mapping (address => mapping (address => uint256)) allowed;\n\n    uint256 public totalSupply;\n\n}\n\n\n/**\n * Arcade City crowdsale crowdsale contract.\n *\n * Security criteria evaluated against http://ethereum.stackexchange.com/questions/8551/methodological-security-review-of-a-smart-contract\n *\n *\n */\ncontract ARCToken is StandardToken, SafeMath {\n\n    string public name = \"Arcade Token\";\n    string public symbol = \"ARC\";\n    uint public decimals = 18;\n    uint public startBlock; //crowdsale start block (set in constructor)\n    uint public endBlock; //crowdsale end block (set in constructor)\n\n    // Initial multisig address (set in constructor)\n    // All deposited ETH will be instantly forwarded to this address.\n    // Address is a multisig wallet.\n    address public multisig = 0x0;\n\n    address public founder = 0x0;\n    address public developer = 0x0;\n    address public rewards = 0x0;\n    bool public rewardAddressesSet = false;\n\n    address public owner = 0x0;\n    bool public marketactive = false;\n\n    uint public etherCap = 672000 * 10**18; //max amount raised during crowdsale (8.5M USD worth of ether will be measured with a moving average market price at beginning of the crowdsale)\n    uint public rewardsAllocation = 2; //2% tokens allocated post-crowdsale for swarm rewards\n    uint public developerAllocation = 6 ; //6% of token supply allocated post-crowdsale for the developer fund\n    uint public founderAllocation = 8; //8% of token supply allocated post-crowdsale for the founder allocation\n    bool public allocated = false; //this will change to true when the rewards are allocated\n    uint public presaleTokenSupply = 0; //this will keep track of the token supply created during the crowdsale\n    uint public presaleEtherRaised = 0; //this will keep track of the Ether raised during the crowdsale\n    bool public halted = false; //the founder address can set this to true to halt the crowdsale due to emergency\n    event Buy(address indexed sender, uint eth, uint fbt);\n\n    function ARCToken(address multisigInput, uint startBlockInput, uint endBlockInput) {\n        owner = msg.sender;\n        multisig = multisigInput;\n\n        startBlock = startBlockInput;\n        endBlock = endBlockInput;\n    }\n\n    function setRewardAddresses(address founderInput, address developerInput, address rewardsInput){\n        if (msg.sender != owner) throw;\n        if (rewardAddressesSet) throw;\n        founder = founderInput;\n        developer = developerInput;\n        rewards = rewardsInput;\n        rewardAddressesSet = true;\n    }\n\n    function price() constant returns(uint) {\n        return testPrice(block.number);        \n    }\n\n    // price() exposed for unit tests\n    function testPrice(uint blockNumber) constant returns(uint) {\n        if (blockNumber>=startBlock && blockNumber<startBlock+250) return 125; //power hour\n        if (blockNumber<startBlock || blockNumber>endBlock) return 75; //default price\n        return 75 + 4*(endBlock - blockNumber)/(endBlock - startBlock + 1)*34/4; //crowdsale price\n    }\n\n    /**\n     * Main token buy function.\n     *\n     * Security review\n     *\n     * - Integer math: ok - using SafeMath\n     *\n     * - halt flag added - ok\n     *\n     * Applicable tests:\n     *\n     * - Test halting, buying, and failing\n     * - Test buying on behalf of a recipient\n     * - Test buy\n     * - Test unhalting, buying, and succeeding\n     * - Test buying after the sale ends\n     *\n     */\n    function buyRecipient(address recipient) {\n        if (block.number<startBlock || block.number>endBlock || safeAdd(presaleEtherRaised,msg.value)>etherCap || halted) throw;\n        uint tokens = safeMul(msg.value, price());\n        balances[recipient] = safeAdd(balances[recipient], tokens);\n        totalSupply = safeAdd(totalSupply, tokens);\n        presaleEtherRaised = safeAdd(presaleEtherRaised, msg.value);\n\n        if (!multisig.send(msg.value)) throw; //immediately send Ether to multisig address\n\n        // if etherCap is reached - activate the market\n        if (presaleEtherRaised == etherCap && !marketactive){\n            marketactive = true;\n        }\n\n        Buy(recipient, msg.value, tokens);\n\n    }\n\n    /**\n     * Set up founder address token balance.\n     *\n     * allocateBountyAndEcosystemTokens() must be calld first.\n     *\n     * Security review\n     *\n     * - Integer math: ok - only called once with fixed parameters\n     *\n     * Applicable tests:\n     *\n     * - Test bounty and ecosystem allocation\n     * - Test bounty and ecosystem allocation twice\n     *\n     */\n    function allocateTokens() {\n        // make sure founder/developer/rewards addresses are configured\n        if(founder == 0x0 || developer == 0x0 || rewards == 0x0) throw;\n        // owner/founder/developer/rewards addresses can call this function\n        if (msg.sender != owner && msg.sender != founder && msg.sender != developer && msg.sender != rewards ) throw;\n        // it should only continue if endBlock has passed OR presaleEtherRaised has reached the cap\n        if (block.number <= endBlock && presaleEtherRaised < etherCap) throw;\n        if (allocated) throw;\n        presaleTokenSupply = totalSupply;\n        // total token allocations add up to 16% of total coins, so formula is reward=allocation_in_percent/84 .\n        balances[founder] = safeAdd(balances[founder], presaleTokenSupply * founderAllocation / 84 );\n        totalSupply = safeAdd(totalSupply, presaleTokenSupply * founderAllocation / 84);\n        \n        balances[developer] = safeAdd(balances[developer], presaleTokenSupply * developerAllocation / 84);\n        totalSupply = safeAdd(totalSupply, presaleTokenSupply * developerAllocation / 84);\n        \n        balances[rewards] = safeAdd(balances[rewards], presaleTokenSupply * rewardsAllocation / 84);\n        totalSupply = safeAdd(totalSupply, presaleTokenSupply * rewardsAllocation / 84);\n\n        allocated = true;\n\n    }\n\n    /**\n     * Emergency Stop crowdsale.\n     *\n     *  Applicable tests:\n     *\n     * - Test unhalting, buying, and succeeding\n     */\n    function halt() {\n        if (msg.sender!=founder && msg.sender != developer) throw;\n        halted = true;\n    }\n\n    function unhalt() {\n        if (msg.sender!=founder && msg.sender != developer) throw;\n        halted = false;\n    }\n\n    /**\n     * ERC 20 Standard Token interface transfer function\n     *\n     * Prevent transfers until token sale is over.\n     *\n     * Applicable tests:\n     *\n     * - Test transfer after restricted period\n     * - Test transfer after market activated\n     */\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        if (block.number <= endBlock && marketactive == false) throw;\n        return super.transfer(_to, _value);\n    }\n    /**\n     * ERC 20 Standard Token interface transfer function\n     *\n     * Prevent transfers until token sale is over.\n     */\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (block.number <= endBlock && marketactive == false) throw;\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n     * Direct deposits buys tokens\n     */\n    function() payable {\n        buyRecipient(msg.sender);\n    }\n\n}",
  "bytecode": "60a0604052600c6060527f41726361646520546f6b656e00000000000000000000000000000000000000006080526003805460008290527f41726361646520546f6b656e000000000000000000000000000000000000001882556100b5907fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b602060026001841615610100026000190190931692909204601f01919091048101905b8082111561014b57600081556001016100a1565b505060408051808201909152600381527f41524300000000000000000000000000000000000000000000000000000000006020918201908152600480546000829052915160ff191660061781559161014f91601f6002600019610100600185161502019092169190910401047f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b908101906100a1565b5090565b50506012600581905560088054600160a060020a031990811682556009805482169055600a80549091169055600b8054600160a860020a0319908116909155600c80549091169055698e4d3168276864000000600d556002600e556006600f556010556011805460ff19908116909155600091829055601391909155601480549091169055604051606080610fc283398101604052808051906020019091908051906020019091908051906020019091905050600c8054600160a060020a03199081163317909155600880549091168417905560068290556007819055505050610d858061023d6000396000f36060604052361561017f5760e060020a60003504630389492281146101b157806306fdde03146101fe578063083c632314610263578063095ea7b31461027157806311a4c710146102ea57806318160ddd146102fa57806323b872dd146103085780632af7ceff14610346578063313ce5671461035657806344b49958146103645780634783c35b1461037257806348cd4cb1146103895780634c0c0ac2146103975780634d853ee5146103a55780635ed7ca5b146103bc57806362feff3a146103fc57806370a082311461040a5780637228b9db146104345780637d124a0214610442578063824338bd1461046e5780638da5cb5b1461047c57806395d89b41146104935780639ec5a894146104f8578063a035b1fe1461050f578063a9059cbb1461051c578063b304b2e114610557578063b9b8af0b14610568578063c4fc3a3b14610579578063ca2cd9d314610587578063ca4b208b146105a0578063cb3e64fd146105b7578063dd62ed3e146105f7578063f01dbd0314610630575b61064961064b335b60065460009043108061019b575060075443115b806107345750600d54601354610732903461076d565b3461000257610649600954600160a060020a0316600014806101de5750600a54600160a060020a03166000145b806101f45750600b54600160a060020a03166000145b156108ac57610002565b346100025761064d60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152929190830182828015610ab95780601f10610a8e57610100808354040283529160200191610ab9565b34610002576106bb60075481565b34610002576106cd600435602435600160a060020a03338116600081815260016020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b3461000257610649600435610187565b34610002576106bb60025481565b34610002576106cd600435602435604435600754600090431180159061033c5750600c5460a060020a900460ff1615156000145b15610acb57610002565b34610002576106bb6004356106f0565b34610002576106bb60055481565b34610002576106bb60135481565b3461000257610716600854600160a060020a031681565b34610002576106bb60065481565b34610002576106bb600e5481565b3461000257610716600954600160a060020a031681565b346100025761064960095433600160a060020a039081169116148015906103f25750600a5433600160a060020a03908116911614155b15610c1f57610002565b34610002576106bb600f5481565b34610002576106bb600435600160a060020a0381166000908152602081905260409020545b919050565b34610002576106bb600d5481565b3461000257610649600435602435604435600c5433600160a060020a03908116911614610c2e57610002565b34610002576106bb60105481565b3461000257610716600c54600160a060020a031681565b346100025761064d60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152929190830182828015610ab95780601f10610a8e57610100808354040283529160200191610ab9565b3461000257610716600b54600160a060020a031681565b34610002576106bb6106e9565b34610002576106cd600435602435600754600090431180159061054d5750600c5460a060020a900460ff1615156000145b15610ca657610002565b34610002576106cd60115460ff1681565b34610002576106cd60145460ff1681565b34610002576106bb60125481565b34610002576106cd600c5460ff60a060020a9091041681565b3461000257610716600a54600160a060020a031681565b346100025761064960095433600160a060020a039081169116148015906105ed5750600a5433600160a060020a03908116911614155b15610d6657610002565b34610002576106bb600435602435600160a060020a038083166000908152600160209081526040808320938516835292905220546102e4565b34610002576106cd600b5460ff60a060020a9091041681565b005b565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156106ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60408051918252519081900360200190f35b604080519115158252519081900360200190f35b61074b346107915b6000610ca1435b6006546000908210801590610709575060065460fa0182105b15610bd25750607d61042f565b60408051600160a060020a039092168252519081900360200190f35b115b80610741575060145460ff165b156106e157610002565b600160a060020a0383166000908152602081905260409020549091506107b290825b6000828201610ac48482108015906107855750838210155b801515610d8257610002565b6000828202610ac48483148061078557508385838115610002570414610785565b600160a060020a0383166000908152602081905260409020556002546107d8908261076d565b6002556013546107e8903461076d565b601355600854604051600160a060020a03909116903480156108fc02916000818181858888f19350505050151561081e57610002565b600d5460135414801561083b5750600c5460a060020a900460ff16155b1561086557600c805474ff0000000000000000000000000000000000000000191660a060020a1790555b60408051348152602081018390528151600160a060020a038516927f1cbc5ab135991bd2b6a4b034a04aa2aa086dac1371cb9b16b8b5e2ed6b036bed928290030190a25050565b600c5433600160a060020a039081169116148015906108da575060095433600160a060020a03908116911614155b80156108f55750600a5433600160a060020a03908116911614155b80156109105750600b5433600160a060020a03908116911614155b1561091a57610002565b600754431180159061092f5750600d54601354105b1561093957610002565b60115460ff161561094957610002565b6002546012819055600954600160a060020a031660009081526020819052604090205460105461097d92605491020461076d565b600954600160a060020a03166000908152602081905260409020556002546010546012546109b09291605491020461076d565b600255600a54600160a060020a0316600090815260208190526040902054600f546012546109e39291605491020461076d565b600a54600160a060020a0316600090815260208190526040902055600254600f54601254610a169291605491020461076d565b600255600b54600160a060020a0316600090815260208190526040902054600e54601254610a499291605491020461076d565b600b54600160a060020a0316600090815260208190526040902055600254600e54601254610a7c9291605491020461076d565b6002556011805460ff19166001179055565b820191906000526020600020905b815481529060010190602001808311610a9c57829003601f168201915b505050505081565b90505b9392505050565b610ac1848484600160a060020a038316600090815260208190526040812054829010801590610b215750600160a060020a0380851660009081526001602090815260408083203390941683529290522054829010155b8015610b465750600160a060020a038316600090815260208190526040902054828101115b15610d7257600160a060020a0380841660008181526020818152604080832080548801905588851680845281842080548990039055600183528184203390961684529482529182902080548790039055815186815291519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3506001610ac4565b600654821080610be3575060075482115b15610bf05750604b61042f565b60065460075460049181036001019084900382028115610002570460220281156100025704604b01905061042f565b6014805460ff19166001179055565b600b5460a060020a900460ff1615610c4557610002565b6009805473ffffffffffffffffffffffffffffffffffffffff199081168517909155600a8054821684179055600b805474ff000000000000000000000000000000000000000019921683179190911660a060020a179055505050565b905090565b610d5f8383600160a060020a033316600090815260208190526040812054829010801590610ced5750600160a060020a038316600090815260208190526040902054828101115b15610d7a57600160a060020a0333811660008181526020818152604080832080548890039055938716808352918490208054870190558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060016102e4565b90506102e4565b6014805460ff19169055565b506000610ac4565b5060006102e4565b5056",
  "constructorArguments": "0000000000000000000000008d9d0bd75319a3780d3cab012759efbae334291b000000000000000000000000000000000000000000000000000000000026e0d30000000000000000000000000000000000000000000000000000000000297187"
}