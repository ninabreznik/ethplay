{
  "address": "0xce59d29b09aae565feeef8e52f47c3cd5368c663",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "BullionCoin",
  "contractName": "Bullioncoin",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-09\n*/\n\npragma solidity ^0.4.9;\n library SafeMath { \n function mul(uint256 a, uint256 b) internal constant returns (uint256) { uint256 c = a * b; assert(a == 0 || c / a == b); return c; } \n function div(uint256 a, uint256 b) internal constant returns (uint256) { uint256 c = a / b; return c; } \n function sub(uint256 a, uint256 b) internal constant returns (uint256) { assert(b <= a); return a - b; } \n function add(uint256 a, uint256 b) internal constant returns (uint256) { uint256 c = a + b; assert(c >= a); return c; } \n} \n contract Bullioncoin { \n   using SafeMath \n   for uint256; mapping (address =>       mapping (address => uint256)) allowed; mapping(address => uint256) balances; uint256 public totalSupply; \nuint256 public decimals; \naddress public owner;\n string public symbol; \n event Transfer(address indexed from, address indexed to, uint256 value); \n event Approval(address indexed _owner, address indexed spender, uint256 value); \n function Bullioncoin (){ \n       totalSupply = 100000000000000000000000000;                       \n        symbol = 'BLX'; \n       owner =0xcef47255b0a73f23f3bc54050a52fcabf2cc323d; \n         balances[owner] = totalSupply; \n         decimals = 18; \n} \n function balanceOf(address _owner) constant returns (uint256 balance) { return balances[_owner]; } \n function allowance(address _owner, address _spender) constant returns (uint256 remaining) { return allowed[_owner][_spender]; } \n function transfer(address _to, uint256 _value) returns (bool) { balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); \n Transfer(msg.sender, _to, _value); return true; } \n function transferFrom(address _from, address _to, uint256 _value) returns (bool) { var _allowance = allowed[_from][msg.sender]; balances[_to] = balances[_to].add(_value); balances[_from] = balances[_from].sub(_value); allowed[_from][msg.sender] = _allowance.sub(_value); \n Transfer(_from, _to, _value); return true; } \n function approve(address _spender, uint256 _value) returns (bool) { require((_value == 0) || (allowed[msg.sender][_spender] == 0)); allowed[msg.sender][_spender] = _value; Approval(msg.sender, _spender, _value); return true; } \n function (){ revert(); } \n }",
  "bytecode": "6060604052341561000f57600080fd5b5b6a52b7d2dcc80cd2e400000060025560408051908101604052600381527f424c580000000000000000000000000000000000000000000000000000000000602082015260059080516100669291602001906100b8565b5060048054600160a060020a03191673cef47255b0a73f23f3bc54050a52fcabf2cc323d1790819055600254600160a060020a039190911660009081526001602052604090205560126003555b610158565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100f957805160ff1916838001178555610126565b82800160010185558215610126579182015b8281111561012657825182559160200191906001019061010b565b5b50610133929150610137565b5090565b61015591905b80821115610133576000815560010161013d565b5090565b90565b610691806101676000396000f300606060405236156100965763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663095ea7b381146100a957806318160ddd146100df57806323b872dd14610104578063313ce5671461014057806370a08231146101655780638da5cb5b1461019657806395d89b41146101c5578063a9059cbb14610250578063dd62ed3e14610286575b34156100a157600080fd5b5b600080fd5b005b34156100b457600080fd5b6100cb600160a060020a03600435166024356102bd565b604051901515815260200160405180910390f35b34156100ea57600080fd5b6100f2610360565b60405190815260200160405180910390f35b341561010f57600080fd5b6100cb600160a060020a0360043581169060243516604435610366565b604051901515815260200160405180910390f35b341561014b57600080fd5b6100f2610477565b60405190815260200160405180910390f35b341561017057600080fd5b6100f2600160a060020a036004351661047d565b60405190815260200160405180910390f35b34156101a157600080fd5b6101a961049c565b604051600160a060020a03909116815260200160405180910390f35b34156101d057600080fd5b6101d86104ab565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102155780820151818401525b6020016101fc565b50505050905090810190601f1680156102425780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561025b57600080fd5b6100cb600160a060020a0360043516602435610549565b604051901515815260200160405180910390f35b341561029157600080fd5b6100f2600160a060020a0360043581169060243516610609565b60405190815260200160405180910390f35b60008115806102ed5750600160a060020a0333811660009081526020818152604080832093871683529290522054155b15156102f857600080fd5b600160a060020a0333811660008181526020818152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60025481565b600160a060020a038084166000908152602081815260408083203385168452825280832054938616835260019091528120549091906103ab908463ffffffff61063416565b600160a060020a0380861660009081526001602052604080822093909355908716815220546103e0908463ffffffff61064e16565b600160a060020a038616600090815260016020526040902055610409818463ffffffff61064e16565b600160a060020a0380871660008181526020818152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b60035481565b600160a060020a0381166000908152600160205260409020545b919050565b600454600160a060020a031681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105415780601f1061051657610100808354040283529160200191610541565b820191906000526020600020905b81548152906001019060200180831161052457829003601f168201915b505050505081565b600160a060020a033316600090815260016020526040812054610572908363ffffffff61064e16565b600160a060020a0333811660009081526001602052604080822093909355908516815220546105a7908363ffffffff61063416565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600160a060020a03808316600090815260208181526040808320938516835292905220545b92915050565b60008282018381101561064357fe5b8091505b5092915050565b60008282111561065a57fe5b508082035b929150505600a165627a7a7230582054e25c87593533c607f8163c5f176a41a80450d434eebd879f7c36082d67547b0029"
}