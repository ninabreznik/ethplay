{
  "address": "0x1e95efa7e57dbdcfbc6f4aac26d2be0bca3a7bc3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ALIVE",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-28\n*/\n\npragma solidity ^0.4.24;\n\n\n// Interface for burning tokens\ncontract Burnable {\n  // @dev Destroys tokens for an account\n  // @param account Account whose tokens are destroyed\n  // @param value Amount of tokens to destroy\n  function _burnTokens(address account, uint value) internal;\n  event Burned(address account, uint value);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  event Error(string _t);\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract HoldAssistant is Ownable {\n\n\tstruct stholdPeriod {\n        uint256 startsAtTime;\n        uint256 endsAtTime;\n\t\tuint256 balance;\n    }\n    mapping (address => stholdPeriod) private holdPeriod;\n\n\tevent Log_AdminHold(address _holder, uint _balance, bool _status);\n\tfunction adminHold(address _holder, uint _balance, bool _status) public returns (bool) {\n\t\temit Log_AdminHold(_holder, _balance, _status);\n\t\treturn true;\n\t}\n\n\tevent Log_Hold(address _holder, uint _balance, bool _status);\n\tfunction hold(address _holder, uint _balance, bool _status) public returns (bool) {\n\t\temit Log_Hold(_holder, _balance, _status);\n\t\treturn true;\n\t}\n\n}\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\ncontract StandardToken is Burnable, Pausable {\n    using SafeMath for uint;\n\n    uint private total_supply;\n    uint public decimals;\n\n    // This creates an array with all balances\n    mapping (address => uint) private balances;\n    mapping (address => mapping (address => uint)) private allowed;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n\n    //Constructor\n    constructor(uint supply, uint token_decimals, address token_retriever) public {\n        decimals                    = token_decimals;\n        total_supply                = supply * uint(10) ** decimals ; // 10 ** 9,  1000 millions\n        balances[token_retriever]   = total_supply;                   // Give to the creator all initial tokens\n    }\n\n    function totalSupply() public view returns (uint) {\n        return total_supply;\n    }\n\n    //Public interface for balances\n    function balanceOf(address account) public view returns (uint balance) {\n        return balances[account];\n    }\n\n    //Public interface for allowances\n    function allowance(address account, address spender) public view returns (uint remaining) {\n        return allowed[account][spender];\n    }\n\n    //Internal transfer, only can be called by this contract\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != 0x0);                        //Burn is an specific op\n        require(balances[_from] >= _value);        //Enough ?\n        require(balances[_to].add(_value) >= balances[_to]);\n\n        // Save this for an assertion in the future\n        uint previousBalances = balances[_from].add(balances[_to]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to]  = balances[_to].add(_value);\n\n        emit Transfer(_from, _to, _value);\n\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balances[_from].add(balances[_to]) == previousBalances);\n    }\n\n    function transfer(address _to, uint _value) public whenNotPaused returns (bool success){\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused returns (bool success) {\n        require(_value <= allowed[_from][msg.sender]);     // Check allowance\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub( _value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function _approve(address _holder, address _spender, uint _value) internal {\n        require(_value <= total_supply);\n        require(_value >= 0);\n        allowed[_holder][_spender] = _value;\n        emit Approval(_holder, _spender,_value);\n    }\n    function approve(address _spender, uint _value) public returns (bool success) {\n        _approve(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function safeApprove(address _spender, uint _currentValue, uint _value)  public returns (bool success) {\n        require(allowed[msg.sender][_spender] == _currentValue);\n        _approve(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens\n     */\n    function _burnTokens(address from, uint _value) internal {\n        require(balances[from] >= _value);                    // Check if the sender has enough\n        balances[from] = balances[from].sub(_value);    // Subtract from the sender\n        total_supply = total_supply.sub(_value);                    // Updates totalSupply\n        emit  Burned(from, _value);\n    }\n\n    function burn(uint _value) public whenNotPaused returns (bool success) {\n        _burnTokens(msg.sender,_value);\n        return true;\n    }\n}\n\n//Define interface for releasing the token transfer after a successful crowdsale.\ncontract HoldableToken is StandardToken {\n\n\t//Specific block to support holdwallet\n    mapping (address => bool) private holdFlag;\n\n    //Another contract can do a finer track of the hold\n    address public holdAssistantAddr = address(0);\n\n\tfunction holded(address _account) public view returns(bool) {\n\t\treturn holdFlag[_account];\n\t}\n\n    function adminHold(bool _status) public onlyOwner returns (bool) {\n        holdFlag[msg.sender] = _status;\n\n        //Just in case that fine tracker exists\n        if (address(0) != holdAssistantAddr) {\n            HoldAssistant(holdAssistantAddr).adminHold(msg.sender, balanceOf(msg.sender), _status);\n        }\n        emit Log_AdminHold(msg.sender, block.number, balanceOf(msg.sender), _status);\n\t\treturn true;\n    }\n    function hold(bool _status) public returns (bool) {\n        holdFlag[msg.sender] = _status;\n\n        //Just in case that fine tracker exists\n        if (address(0) != holdAssistantAddr) {\n            require(HoldAssistant(holdAssistantAddr).hold(msg.sender, balanceOf(msg.sender), _status));\n        }\n        emit Log_Hold(msg.sender, block.number, balanceOf(msg.sender), _status);\n\t\treturn true;\n    }\n    event Log_Hold(address indexed _account, uint _holdBlock, uint _balance, bool _holded);\n    event Log_AdminHold(address indexed _account, uint _holdBlock, uint _balance, bool _holded);\n\n    function setHoldAssistant(address _newHoldAssistant) public onlyOwner returns(bool) {\n        holdAssistantAddr = _newHoldAssistant;\n        emit Log_SetHoldAssistant(holdAssistantAddr);\n\t\treturn true;\n    }\n    event Log_SetHoldAssistant(address);\n\n    modifier notHolded(address _account) {\n        require(! holdFlag[_account]);\n        _;\n    }\n\n\n  \t//We restrict transfers by overriding it\n  \tfunction transfer(address to, uint value) public notHolded(msg.sender) returns (bool success) {\n  \t\treturn super.transfer(to, value);\n  \t}\n\n  \t//We restrict transferFrom by overriding it\n  \t//\"from\" must be an agent before released\n  \tfunction transferFrom(address from, address to, uint value) public notHolded(from) returns (bool success) {\n   \t \treturn super.transferFrom(from, to, value);\n  \t}\n\n  \t//We restrict burn by overriding it\n  \tfunction burn(uint value) public notHolded(msg.sender) returns (bool success) {\n    \treturn super.burn(value);\n  \t}\n\n}\n\n/**\n * Math operations with safety checks\n */\nlibrary SafeMath {\n  function mul(uint a, uint b) internal pure returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint a, uint b) internal pure returns (uint) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint a, uint b) internal pure returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal pure returns (uint) {\n    uint c = a + b;\n    assert(c >= a && c>=b);\n    return c;\n  }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\n\n//Define interface for Manage + release a resource normal operation after an external trigger\ncontract Releasable is Ownable {\n\n  address public releaseAgent;\n  bool public released = false;\n  mapping (address => bool) public Agents;\n\n  event ReleaseAgent(address previous, address newAgent);\n\n  //Set the contract that can call release and make the resource operative\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n    releaseAgent = addr;\n    emit ReleaseAgent(releaseAgent, addr);\n  }\n\n  // Owner can allow a particular address (e.g. a crowdsale contract) to be Agent to manage the resource\n  function setAgent(address addr) onlyOwner inReleaseState(false) public returns(bool){\n    Agents[addr] = true;\n    emit Agent(addr,true);\n    return true;\n  }\n\n  // Owner forbids a particular address (e.g. a crowdsale contract) to be Agent to manage the resource\n  function resetAgent(address addr) onlyOwner inReleaseState(false) public returns(bool){\n    Agents[addr] = false;\n    emit Agent(addr,false);\n    return true;\n  }\n    event Agent(address addr, bool status);\n\n  function amIAgent() public view returns (bool) {\n    return Agents[msg.sender];\n  }\n\n  function isAgent(address addr) public view /*onlyOwner */ returns(bool) {\n    return Agents[addr];\n  }\n\n  //From now the resource is free\n  function releaseOperation() public onlyReleaseAgent {\n        released = true;\n\t\temit Released();\n  }\n  event Released();\n\n  // Limit resource operative until the release\n  modifier canOperate(address sender) {\n    require(released || Agents[sender]);\n    _;\n  }\n\n  //The function can be called only before or after the tokens have been released\n  modifier inReleaseState(bool releaseState) {\n    require(releaseState == released);\n    _;\n  }\n\n  //The function can be called only by a whitelisted release agent.\n  modifier onlyReleaseAgent() {\n    require(msg.sender == releaseAgent);\n    _;\n  }\n}\n\n//Define interface for releasing the token transfer after a successful crowdsale.\ncontract ReleasableToken is Releasable, HoldableToken {\n\n  //We restrict transfer by overriding it\n  function transfer(address to, uint value) public canOperate(msg.sender) returns (bool success) {\n   return super.transfer(to, value);\n  }\n\n  //We restrict transferFrom by overriding it\n  //\"from\" must be an agent before released\n  function transferFrom(address from, address to, uint value) public canOperate(from) returns (bool success) {\n    return super.transferFrom(from, to, value);\n  }\n\n  //We restrict burn by overriding it\n  function burn(uint value) public canOperate(msg.sender) returns (bool success) {\n    return super.burn(value);\n  }\n}\n\n\ncontract ALIVE is ReleasableToken {\n\n    string public name = \"ALIVE\";\n    string public symbol = \"AL \";\n\n    //    Constructor\n    constructor (uint supply, uint token_decimals, address token_retriever) StandardToken(supply, token_decimals, token_retriever) public { }\n    \n}",
  "bytecode": "6001805460a060020a60ff02191690556003805460ff1916905560098054600160a060020a031916905560c0604052600560808190527f414c49564500000000000000000000000000000000000000000000000000000060a09081526200006a91600a91906200011e565b506040805180820190915260038082527f414c2000000000000000000000000000000000000000000000000000000000006020909201918252620000b191600b916200011e565b50348015620000bf57600080fd5b506040516060806200155d83398101604090815281516020808401519383015160008054600160a060020a031916331781556005869055600a9590950a9092026004819055600160a060020a03909216845260069052912055620001c3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200016157805160ff191683800117855562000191565b8280016001018555821562000191579182015b828111156200019157825182559160200191906001019062000174565b506200019f929150620001a3565b5090565b620001c091905b808211156200019f5760008155600101620001aa565b90565b61138a80620001d36000396000f3006080604052600436106101665763ffffffff60e060020a60003504166304b70576811461016b57806306fdde03146101a0578063095ea7b31461022a57806309dd4eea1461024e5780630e4507b11461026f57806318160ddd146102895780631ffbb064146102b057806323b872dd146102d157806329ff4f53146102fb578063313ce5671461031e578063332ea8141461033357806337c38464146103485780633f4ba83a1461036957806342966c681461037e5780635c975abb1461039657806362a1440e146103ab5780636e84f870146103c557806370a08231146103e6578063835d7b83146104075780638456cb59146104385780638da5cb5b1461044d57806395d89b41146104625780639613252114610477578063a9059cbb1461048c578063bcf685ed146104b0578063d1f276d3146104d1578063dd62ed3e146104e6578063f2fde38b1461050d578063f65036621461052e578063f8c28ce014610555575b600080fd5b34801561017757600080fd5b5061018c600160a060020a036004351661056a565b604080519115158252519081900360200190f35b3480156101ac57600080fd5b506101b5610600565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ef5781810151838201526020016101d7565b50505050905090810190601f16801561021c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023657600080fd5b5061018c600160a060020a036004351660243561068e565b34801561025a57600080fd5b5061018c600160a060020a03600435166106a4565b34801561027b57600080fd5b5061018c60043515156106c2565b34801561029557600080fd5b5061029e6107f7565b60408051918252519081900360200190f35b3480156102bc57600080fd5b5061018c600160a060020a03600435166107fd565b3480156102dd57600080fd5b5061018c600160a060020a036004358116906024351660443561081b565b34801561030757600080fd5b5061031c600160a060020a036004351661086f565b005b34801561032a57600080fd5b5061029e61090f565b34801561033f57600080fd5b5061018c610915565b34801561035457600080fd5b5061018c600160a060020a036004351661092b565b34801561037557600080fd5b5061031c6109af565b34801561038a57600080fd5b5061018c600435610a0c565b3480156103a257600080fd5b5061018c610a5c565b3480156103b757600080fd5b5061018c6004351515610a65565b3480156103d157600080fd5b5061018c600160a060020a0360043516610b64565b3480156103f257600080fd5b5061029e600160a060020a0360043516610b79565b34801561041357600080fd5b5061041c610b94565b60408051600160a060020a039092168252519081900360200190f35b34801561044457600080fd5b5061031c610ba3565b34801561045957600080fd5b5061041c610c02565b34801561046e57600080fd5b506101b5610c11565b34801561048357600080fd5b5061018c610c6c565b34801561049857600080fd5b5061018c600160a060020a0360043516602435610c7c565b3480156104bc57600080fd5b5061018c600160a060020a0360043516610cce565b3480156104dd57600080fd5b5061041c610d68565b3480156104f257600080fd5b5061029e600160a060020a0360043581169060243516610d77565b34801561051957600080fd5b5061031c600160a060020a0360043516610da2565b34801561053a57600080fd5b5061018c600160a060020a0360043516602435604435610e36565b34801561056157600080fd5b5061031c610e7a565b60008054600160a060020a0316331461058257600080fd5b60015460009060a060020a900460ff161561059c57600080fd5b600160a060020a0383166000818152600260209081526040808320805460ff1916905580519384529083019190915280517f60a2b243929ca8f273c1c385eb93853e82475c964b37e1e11d8f1caf6c58fbd09281900390910190a150600192915050565b600a805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106865780601f1061065b57610100808354040283529160200191610686565b820191906000526020600020905b81548152906001019060200180831161066957829003601f168201915b505050505081565b600061069b338484610ee0565b50600192915050565b600160a060020a031660009081526008602052604090205460ff1690565b60008054600160a060020a031633146106da57600080fd5b336000908152600860205260409020805460ff1916831515179055600954600160a060020a0316156107a357600954600160a060020a031663246f69d93361072181610b79565b6040805160e060020a63ffffffff8616028152600160a060020a039093166004840152602483019190915285151560448301525160648083019260209291908290030181600087803b15801561077657600080fd5b505af115801561078a573d6000803e3d6000fd5b505050506040513d60208110156107a057600080fd5b50505b337fd8a38886fe481f735bd04fc752f4ed2c4aee85112f51d1a6e245cbd2b58aacf5436107cf83610b79565b60408051928352602083019190915285151582820152519081900360600190a2506001919050565b60045490565b600160a060020a031660009081526002602052604090205460ff1690565b600154600090849060a060020a900460ff16806108505750600160a060020a03811660009081526002602052604090205460ff165b151561085b57600080fd5b610866858585610f5f565b95945050505050565b600054600160a060020a0316331461088657600080fd5b60015460009060a060020a900460ff16156108a057600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038481169182179283905560408051939091168352602083019190915280517f8f4e36c2211d104513c15114881a05f141610cdcd97bcb4c6339e4812166b3679281900390910190a15050565b60055481565b3360009081526002602052604090205460ff1690565b60008054600160a060020a0316331461094357600080fd5b6009805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03848116919091179182905560408051929091168252517f3275b708f5fcf628f44a4e8fdb30518a3659e56fca6bdc7f1befaaf95ac08b82916020908290030190a1506001919050565b600054600160a060020a031633146109c657600080fd5b60035460ff1615156109d757600080fd5b6003805460ff191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600154600090339060a060020a900460ff1680610a415750600160a060020a03811660009081526002602052604090205460ff165b1515610a4c57600080fd5b610a5583610f92565b9392505050565b60035460ff1681565b336000908152600860205260408120805460ff1916831515179055600954600160a060020a031615610b3857600954600160a060020a031663f6583e4633610aac81610b79565b6040805160e060020a63ffffffff8616028152600160a060020a039093166004840152602483019190915285151560448301525160648083019260209291908290030181600087803b158015610b0157600080fd5b505af1158015610b15573d6000803e3d6000fd5b505050506040513d6020811015610b2b57600080fd5b50511515610b3857600080fd5b337f37431e7ef8f983ecfed1095f40b484643b7691e508e5b8602d9a34ad4ff33d0e436107cf83610b79565b60026020526000908152604090205460ff1681565b600160a060020a031660009081526006602052604090205490565b600954600160a060020a031681565b600054600160a060020a03163314610bba57600080fd5b60035460ff1615610bca57600080fd5b6003805460ff191660011790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600054600160a060020a031681565b600b805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106865780601f1061065b57610100808354040283529160200191610686565b60015460a060020a900460ff1681565b600154600090339060a060020a900460ff1680610cb15750600160a060020a03811660009081526002602052604090205460ff165b1515610cbc57600080fd5b610cc68484610fbb565b949350505050565b60008054600160a060020a03163314610ce657600080fd5b60015460009060a060020a900460ff1615610d0057600080fd5b600160a060020a038316600081815260026020908152604091829020805460ff1916600190811790915582519384529083015280517f60a2b243929ca8f273c1c385eb93853e82475c964b37e1e11d8f1caf6c58fbd09281900390910190a150600192915050565b600154600160a060020a031681565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b600054600160a060020a03163314610db957600080fd5b600160a060020a0381161515610dce57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b336000908152600760209081526040808320600160a060020a03871684529091528120548314610e6557600080fd5b610e70338584610ee0565b5060019392505050565b600154600160a060020a03163314610e9157600080fd5b6001805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f20d29efe076941f73e5574acb023c424d63cd6d3d12eb5ac3108a5eaf177daed90600090a1565b600454811115610eef57600080fd5b6000811015610efd57600080fd5b600160a060020a03808416600081815260076020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600160a060020a038316600090815260086020526040812054849060ff1615610f8757600080fd5b610866858585610fe5565b3360008181526008602052604081205490919060ff1615610fb257600080fd5b610a558361108b565b3360008181526008602052604081205490919060ff1615610fdb57600080fd5b610cc684846110b0565b60035460009060ff1615610ff857600080fd5b600160a060020a038416600090815260076020908152604080832033845290915290205482111561102857600080fd5b600160a060020a038416600090815260076020908152604080832033845290915290205461105c908363ffffffff6110ce16565b600160a060020a0385166000908152600760209081526040808320338452909152902055610e708484846110e0565b60035460009060ff161561109e57600080fd5b6110a8338361127c565b506001919050565b60035460009060ff16156110c357600080fd5b61069b3384846110e0565b6000828211156110da57fe5b50900390565b6000600160a060020a03831615156110f757600080fd5b600160a060020a03841660009081526006602052604090205482111561111c57600080fd5b600160a060020a038316600090815260066020526040902054611145818463ffffffff61134116565b101561115057600080fd5b600160a060020a038084166000908152600660205260408082205492871682529020546111829163ffffffff61134116565b600160a060020a0385166000908152600660205260409020549091506111ae908363ffffffff6110ce16565b600160a060020a0380861660009081526006602052604080822093909355908516815220546111e3908363ffffffff61134116565b600160a060020a0380851660008181526006602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3600160a060020a03808416600090815260066020526040808220549287168252902054829161126f919063ffffffff61134116565b1461127657fe5b50505050565b600160a060020a0382166000908152600660205260409020548111156112a157600080fd5b600160a060020a0382166000908152600660205260409020546112ca908263ffffffff6110ce16565b600160a060020a0383166000908152600660205260409020556004546112f6908263ffffffff6110ce16565b60045560408051600160a060020a03841681526020810183905281517f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df7929181900390910190a15050565b60008282018381108015906113565750828110155b1515610a5557fe00a165627a7a72305820f94e5a06946e99e5158895c39468047433704c98527ca06b7c5b7e78d86fa7270029000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000a6cca6f189cd00e7092ddcb8d95937d9d2f59801",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000a6cca6f189cd00e7092ddcb8d95937d9d2f59801"
}