{
  "address": "0xbca4bd443716376b6284c682608b6bee03040b01",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KyberFundReserve",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-01\n*/\n\npragma solidity 0.4.18;\n\ninterface ConversionRatesInterface {\n\n    function recordImbalance(\n        ERC20 token,\n        int buyAmount,\n        uint rateUpdateBlock,\n        uint currentBlock\n    )\n        public;\n\n    function getRate(ERC20 token, uint currentBlockNumber, bool buy, uint qty) public view returns(uint);\n}\n\ninterface ERC20 {\n    function totalSupply() public view returns (uint supply);\n    function balanceOf(address _owner) public view returns (uint balance);\n    function transfer(address _to, uint _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n    function approve(address _spender, uint _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\n    function decimals() public view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ninterface KyberReserveInterface {\n\n    function trade(\n        ERC20 srcToken,\n        uint srcAmount,\n        ERC20 destToken,\n        address destAddress,\n        uint conversionRate,\n        bool validate\n    )\n        public\n        payable\n        returns(bool);\n\n    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) public view returns(uint);\n}\n\ncontract PermissionGroups {\n\n    address public admin;\n    address public pendingAdmin;\n    mapping(address=>bool) internal operators;\n    mapping(address=>bool) internal alerters;\n    address[] internal operatorsGroup;\n    address[] internal alertersGroup;\n    uint constant internal MAX_GROUP_SIZE = 50;\n\n    function PermissionGroups() public {\n        admin = msg.sender;\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin);\n        _;\n    }\n\n    modifier onlyOperator() {\n        require(operators[msg.sender]);\n        _;\n    }\n\n    modifier onlyAlerter() {\n        require(alerters[msg.sender]);\n        _;\n    }\n\n    function getOperators () external view returns(address[]) {\n        return operatorsGroup;\n    }\n\n    function getAlerters () external view returns(address[]) {\n        return alertersGroup;\n    }\n\n    event TransferAdminPending(address pendingAdmin);\n\n    /**\n     * @dev Allows the current admin to set the pendingAdmin address.\n     * @param newAdmin The address to transfer ownership to.\n     */\n    function transferAdmin(address newAdmin) public onlyAdmin {\n        require(newAdmin != address(0));\n        TransferAdminPending(pendingAdmin);\n        pendingAdmin = newAdmin;\n    }\n\n    /**\n     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\n     * @param newAdmin The address to transfer ownership to.\n     */\n    function transferAdminQuickly(address newAdmin) public onlyAdmin {\n        require(newAdmin != address(0));\n        TransferAdminPending(newAdmin);\n        AdminClaimed(newAdmin, admin);\n        admin = newAdmin;\n    }\n\n    event AdminClaimed( address newAdmin, address previousAdmin);\n\n    /**\n     * @dev Allows the pendingAdmin address to finalize the change admin process.\n     */\n    function claimAdmin() public {\n        require(pendingAdmin == msg.sender);\n        AdminClaimed(pendingAdmin, admin);\n        admin = pendingAdmin;\n        pendingAdmin = address(0);\n    }\n\n    event AlerterAdded (address newAlerter, bool isAdd);\n\n    function addAlerter(address newAlerter) public onlyAdmin {\n        require(!alerters[newAlerter]); // prevent duplicates.\n        require(alertersGroup.length < MAX_GROUP_SIZE);\n\n        AlerterAdded(newAlerter, true);\n        alerters[newAlerter] = true;\n        alertersGroup.push(newAlerter);\n    }\n\n    function removeAlerter (address alerter) public onlyAdmin {\n        require(alerters[alerter]);\n        alerters[alerter] = false;\n\n        for (uint i = 0; i < alertersGroup.length; ++i) {\n            if (alertersGroup[i] == alerter) {\n                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\n                alertersGroup.length--;\n                AlerterAdded(alerter, false);\n                break;\n            }\n        }\n    }\n\n    event OperatorAdded(address newOperator, bool isAdd);\n\n    function addOperator(address newOperator) public onlyAdmin {\n        require(!operators[newOperator]); // prevent duplicates.\n        require(operatorsGroup.length < MAX_GROUP_SIZE);\n\n        OperatorAdded(newOperator, true);\n        operators[newOperator] = true;\n        operatorsGroup.push(newOperator);\n    }\n\n    function removeOperator (address operator) public onlyAdmin {\n        require(operators[operator]);\n        operators[operator] = false;\n\n        for (uint i = 0; i < operatorsGroup.length; ++i) {\n            if (operatorsGroup[i] == operator) {\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\n                operatorsGroup.length -= 1;\n                OperatorAdded(operator, false);\n                break;\n            }\n        }\n    }\n}\n\ninterface SanityRatesInterface {\n    function getSanityRate(ERC20 src, ERC20 dest) public view returns(uint);\n}\n\ncontract Utils {\n\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n    uint  constant internal PRECISION = (10**18);\n    uint  constant internal MAX_QTY   = (10**28); // 10B tokens\n    uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\n    uint  constant internal MAX_DECIMALS = 18;\n    uint  constant internal ETH_DECIMALS = 18;\n    mapping(address=>uint) internal decimals;\n\n    function setDecimals(ERC20 token) internal {\n        if (token == ETH_TOKEN_ADDRESS) decimals[token] = ETH_DECIMALS;\n        else decimals[token] = token.decimals();\n    }\n\n    function getDecimals(ERC20 token) internal view returns(uint) {\n        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\n        uint tokenDecimals = decimals[token];\n        // technically, there might be token with decimals 0\n        // moreover, very possible that old tokens have decimals 0\n        // these tokens will just have higher gas fees.\n        if(tokenDecimals == 0) return token.decimals();\n\n        return tokenDecimals;\n    }\n\n    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n        require(srcQty <= MAX_QTY);\n        require(rate <= MAX_RATE);\n\n        if (dstDecimals >= srcDecimals) {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\n        } else {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\n        }\n    }\n\n    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n        require(dstQty <= MAX_QTY);\n        require(rate <= MAX_RATE);\n        \n        //source quantity is rounded up. to avoid dest quantity being too low.\n        uint numerator;\n        uint denominator;\n        if (srcDecimals >= dstDecimals) {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\n            denominator = rate;\n        } else {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            numerator = (PRECISION * dstQty);\n            denominator = (rate * (10**(dstDecimals - srcDecimals)));\n        }\n        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\n    }\n}\n\ncontract Withdrawable is PermissionGroups {\n\n    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\n\n    /**\n     * @dev Withdraw all ERC20 compatible tokens\n     * @param token ERC20 The address of the token contract\n     */\n    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\n        require(token.transfer(sendTo, amount));\n        TokenWithdraw(token, amount, sendTo);\n    }\n\n    event EtherWithdraw(uint amount, address sendTo);\n\n    /**\n     * @dev Withdraw Ethers\n     */\n    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\n        sendTo.transfer(amount);\n        EtherWithdraw(amount, sendTo);\n    }\n}\n\ninterface FundWalletInterface {\n    function() public payable;\n    function pullToken(ERC20 token, uint amount) external returns (bool);\n    function pullEther(uint amount) external returns (bool);\n    function checkBalance(ERC20 token) public view returns (uint);\n}\n\n/// @title Kyber Fund Reserve contract\ncontract KyberFundReserve is KyberReserveInterface, Withdrawable, Utils {\n\n    address public kyberNetwork;\n    bool public tradeEnabled;\n    ConversionRatesInterface public conversionRatesContract;\n    SanityRatesInterface public sanityRatesContract;\n    FundWalletInterface public fundWalletContract;\n    mapping(bytes32=>bool) public approvedWithdrawAddresses; // sha3(token,address)=>bool\n\n    function KyberFundReserve(address _kyberNetwork, ConversionRatesInterface _ratesContract, FundWalletInterface _fundWallet, address _admin) public {\n        require(_admin != address(0));\n        require(_ratesContract != address(0));\n        require(_kyberNetwork != address(0));\n        require(_fundWallet != address(0));\n        kyberNetwork = _kyberNetwork;\n        conversionRatesContract = _ratesContract;\n        fundWalletContract = _fundWallet;\n        admin = _admin;\n        tradeEnabled = true;\n    }\n\n    event DepositToken(ERC20 token, uint amount);\n\n    function() public payable {\n        DepositToken(ETH_TOKEN_ADDRESS, msg.value);\n    }\n\n    event TradeExecute(\n        address indexed origin,\n        address src,\n        uint srcAmount,\n        address destToken,\n        uint destAmount,\n        address destAddress\n    );\n\n    function trade(\n        ERC20 srcToken,\n        uint srcAmount,\n        ERC20 destToken,\n        address destAddress,\n        uint conversionRate,\n        bool validate\n    )\n        public\n        payable\n        returns(bool)\n    {\n        require(tradeEnabled);\n        require(msg.sender == kyberNetwork);\n\n        require(doTrade(srcToken, srcAmount, destToken, destAddress, conversionRate, validate));\n\n        return true;\n    }\n\n    event TradeEnabled(bool enable);\n\n    function enableTrade() public onlyAdmin returns(bool) {\n        tradeEnabled = true;\n        TradeEnabled(true);\n\n        return true;\n    }\n\n    function disableTrade() public onlyAlerter returns(bool) {\n        tradeEnabled = false;\n        TradeEnabled(false);\n\n        return true;\n    }\n\n    event WithdrawAddressApproved(ERC20 token, address addr, bool approve);\n\n    function approveWithdrawAddress(ERC20 token, address addr, bool approve) public onlyAdmin {\n        approvedWithdrawAddresses[keccak256(token, addr)] = approve;\n        WithdrawAddressApproved(token, addr, approve);\n\n        setDecimals(token);\n    }\n\n    function setFundWallet(FundWalletInterface _fundWallet) public onlyAdmin {\n        require(_fundWallet != address(0x0));\n        fundWalletContract = _fundWallet;\n    }\n\n    event WithdrawFunds(ERC20 token, uint amount, address destination);\n\n    function withdraw(ERC20 token, uint amount, address destination) public onlyOperator returns(bool) {\n        require(approvedWithdrawAddresses[keccak256(token, destination)]);\n\n        if (token == ETH_TOKEN_ADDRESS) {\n            require(ethPuller(amount));\n            destination.transfer(amount);\n        } else {\n            require(tokenPuller(token, amount));\n            require(token.transfer(destination, amount));\n        }\n\n        WithdrawFunds(token, amount, destination);\n\n        return true;\n    }\n\n    event SetContractAddresses(address network, address rate, address sanity);\n\n    function setContracts(\n        address _kyberNetwork,\n        ConversionRatesInterface _conversionRates,\n        SanityRatesInterface _sanityRates\n    )\n        public\n        onlyAdmin\n    {\n        require(_kyberNetwork != address(0));\n        require(_conversionRates != address(0));\n\n        kyberNetwork = _kyberNetwork;\n        conversionRatesContract = _conversionRates;\n        sanityRatesContract = _sanityRates;\n\n        SetContractAddresses(kyberNetwork, conversionRatesContract, sanityRatesContract);\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    /// status functions ///////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////////////////////\n    function getBalance(ERC20 token) public view returns(uint) {\n        return fetchBalance(token);\n    }\n\n    function fetchBalance(ERC20 token) public view returns(uint) {\n        return fundWalletContract.checkBalance(token);\n    }\n\n    function getDestQty(ERC20 src, ERC20 dest, uint srcQty, uint rate) public view returns(uint) {\n        uint dstDecimals = getDecimals(dest);\n        uint srcDecimals = getDecimals(src);\n\n        return calcDstQty(srcQty, srcDecimals, dstDecimals, rate);\n    }\n\n    function getSrcQty(ERC20 src, ERC20 dest, uint dstQty, uint rate) public view returns(uint) {\n        uint dstDecimals = getDecimals(dest);\n        uint srcDecimals = getDecimals(src);\n\n        return calcSrcQty(dstQty, srcDecimals, dstDecimals, rate);\n    }\n\n    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) public view returns(uint) {\n        ERC20 token;\n        bool  isBuy;\n\n        if (!tradeEnabled) return 0;\n\n        if (ETH_TOKEN_ADDRESS == src) {\n            isBuy = true;\n            token = dest;\n        } else if (ETH_TOKEN_ADDRESS == dest) {\n            isBuy = false;\n            token = src;\n        } else {\n            return 0; // pair is not listed\n        }\n\n        uint rate = conversionRatesContract.getRate(token, blockNumber, isBuy, srcQty);\n        uint destQty = getDestQty(src, dest, srcQty, rate);\n\n        if (getBalance(dest) < destQty) return 0;\n\n        if (sanityRatesContract != address(0)) {\n            uint sanityRate = sanityRatesContract.getSanityRate(src, dest);\n            if (rate > sanityRate) return 0;\n        }\n\n        return rate;\n    }\n\n    /// @dev do a trade\n    /// @param srcToken Src token\n    /// @param srcAmount Amount of src token\n    /// @param destToken Destination token\n    /// @param destAddress Destination address to send tokens to\n    /// @param validate If true, additional validations are applicable\n    /// @return true iff trade is successful\n    function doTrade(\n        ERC20 srcToken,\n        uint srcAmount,\n        ERC20 destToken,\n        address destAddress,\n        uint conversionRate,\n        bool validate\n    )\n        internal\n        returns(bool)\n    {\n        // can skip validation if done at kyber network level\n        if (validate) {\n            require(conversionRate > 0);\n            if (srcToken == ETH_TOKEN_ADDRESS)\n                require(msg.value == srcAmount);\n            else\n                require(msg.value == 0);\n        }\n\n        uint destAmount = getDestQty(srcToken, destToken, srcAmount, conversionRate);\n        // sanity check\n        require(destAmount > 0);\n\n        // add to imbalance\n        ERC20 token;\n        int tradeAmount;\n        if (srcToken == ETH_TOKEN_ADDRESS) {\n            tradeAmount = int(destAmount);\n            token = destToken;\n        } else {\n            tradeAmount = -1 * int(srcAmount);\n            token = srcToken;\n        }\n\n        conversionRatesContract.recordImbalance(\n            token,\n            tradeAmount,\n            0,\n            block.number\n        );\n\n\n        // collect src tokens (if eth forward to fund Wallet)\n        if (srcToken == ETH_TOKEN_ADDRESS) {\n            //require push eth function\n            require(ethPusher(srcAmount));\n        } else {\n            require(srcToken.transferFrom(msg.sender, fundWalletContract, srcAmount));\n        }\n\n        // send dest tokens\n        if (destToken == ETH_TOKEN_ADDRESS) {\n          //require pull eth function then send eth to dest address;\n          require(ethPuller(destAmount));\n          destAddress.transfer(destAmount);\n        } else {\n          //require pull token function then send token to dest address;\n          require(tokenPuller(destToken, destAmount));\n          require(destToken.transfer(destAddress, destAmount));\n        }\n\n        TradeExecute(msg.sender, srcToken, srcAmount, destToken, destAmount, destAddress);\n\n        return true;\n    }\n\n    //push eth function\n    function ethPusher(uint srcAmount) internal returns(bool) {\n        fundWalletContract.transfer(srcAmount);\n        return true;\n    }\n\n    //pull eth functions\n    function ethPuller(uint destAmount) internal returns(bool) {\n        require(fundWalletContract.pullEther(destAmount));\n        return true;\n    }\n\n    //pull token function\n    function tokenPuller(ERC20 token, uint destAmount) internal returns(bool) {\n        require(fundWalletContract.pullToken(token, destAmount));\n        return true;\n    }\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000009ae49c0d7f8f9ef4b864e004fe86ac8294e20950000000000000000000000000bc983fe80812db0651a6d48e90c4e6043f638541000000000000000000000000b3e6d5746cb67df9fe88fe486d97a159560ec7fb0000000000000000000000004bd5fd09286e87dd365377e5681f12ccbb8a99b3"
}