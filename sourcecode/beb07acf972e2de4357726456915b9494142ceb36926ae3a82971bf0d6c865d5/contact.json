{
  "address": "0xc213539cb2fda6940507f50f40060f5cbbe38e00",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BETA",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-01\n*/\n\npragma solidity 0.4.25;\n\n/**     ONUP TOKEN AFFILIATE PROJECT THE SECOND EDITION\n        CREATED 2018-11-01 BY DAO DRIVER ETHEREUM\n        ALL PROJECT DETAILS AT https://onup.online         **/\n    \nlibrary SafeMath{\n    function mul(uint256 a, uint256 b)internal pure returns(uint256){if(a==0){return 0;}uint256 c=a*b;assert(c/a==b);return c;}\n    function div(uint256 a, uint256 b)internal pure returns(uint256){uint256 c=a/b;return c;}\n    function sub(uint256 a, uint256 b)internal pure returns(uint256){assert(b<=a);return a-b;}\n    function add(uint256 a, uint256 b)internal pure returns(uint256){uint256 c=a+b;assert(c>=a);return c;}\n}\n    \ncontract ERC20{\n    uint256 internal Bank=0;string public constant name=\"OnUp TOKEN\";string public constant symbol=\"OnUp\";\n    uint8  public constant decimals=6;uint256 public price=700000000;uint256 public totalSupply;\n    event Approval(address indexed owner,address indexed spender,uint value);\n    event Transfer(address indexed from,address indexed to,uint value);\n    mapping(address=>mapping(address=>uint256))public allowance;mapping(address=>uint256)public balanceOf;\n    function balanceOf(address who)public constant returns(uint){return balanceOf[who];}\n    function approve(address _spender,uint _value)public{allowance[msg.sender][_spender]=_value; emit Approval(msg.sender,_spender,_value);}\n    function allowance(address _owner,address _spender) public constant returns (uint remaining){return allowance[_owner][_spender];}\n}\n    \ncontract BETA is ERC20{\n    using SafeMath for uint256;\n    modifier onlyPayloadSize(uint size){require(msg.data.length >= size + 4); _;}\n    address  ref1=0x0000000000000000000000000000000000000000;\n    address  ref2=0x0000000000000000000000000000000000000000;\n    address  ref3=0x0000000000000000000000000000000000000000;\n    address  ref4=0x0000000000000000000000000000000000000000;\n    address  ref5=0x0000000000000000000000000000000000000000;\n    address public owner;\n    address internal constant insdr=0xaB85Cb1087ce716E11dC37c69EaaBc09d674575d;// FEEDER \n    address internal constant advrt=0x28fF20D2d413A346F123198385CCf16E15295351;// ADVERTISE\n    address internal constant spcnv=0x516e0deBB3dB8C2c087786CcF7653fa0991784b3;// AIRDROPS\n    mapping (address=>address) public referrerOf;\n    mapping (address=>uint256) public prevOf;\n    mapping (address=>uint256) public summOf;\n    \n    constructor()payable public{owner=msg.sender;prevOf[advrt]=6;prevOf[owner]=6;}\n    \n    function()payable public{\n        require(isContract(msg.sender)==false);\n        require(msg.value>=10000000000000000);\n        require(msg.value<=30000000000000000000);\n        if(msg.sender!=insdr){\n            ref1=0x0000000000000000000000000000000000000000; \n            ref2=0x0000000000000000000000000000000000000000;\n            ref3=0x0000000000000000000000000000000000000000;\n            ref4=0x0000000000000000000000000000000000000000;\n            ref5=0x0000000000000000000000000000000000000000;\n            if(msg.sender!= advrt && msg.sender!=owner){CheckPrivilege();}else{mintTokens();}\n        }else{Bank+=(msg.value.div(100)).mul(90);price=Bank.div(totalSupply);}\n    }\n    \n    function CheckPrivilege()internal{\n        if(msg.value>=25000000000000000000 && prevOf[msg.sender]<6){prevOf[msg.sender]=6;}\n        if(msg.value>=20000000000000000000 && prevOf[msg.sender]<5){prevOf[msg.sender]=5;}\n        if(msg.value>=15000000000000000000 && prevOf[msg.sender]<4){prevOf[msg.sender]=4;}\n        if(msg.value>=10000000000000000000 && prevOf[msg.sender]<3){prevOf[msg.sender]=3;}\n        if(msg.value>= 5000000000000000000 && prevOf[msg.sender]<2){prevOf[msg.sender]=2;} \n        if(msg.value>=  100000000000000000 && prevOf[msg.sender]<1){prevOf[msg.sender]=1;}\n        if(summOf[msg.sender]>=250000000000000000000 && prevOf[msg.sender]<6){prevOf[msg.sender]=6;}\n\t\tif(summOf[msg.sender]>=200000000000000000000 && prevOf[msg.sender]<5){prevOf[msg.sender]=5;}\n\t\tif(summOf[msg.sender]>=150000000000000000000 && prevOf[msg.sender]<4){prevOf[msg.sender]=4;}\n\t\tif(summOf[msg.sender]>=100000000000000000000 && prevOf[msg.sender]<3){prevOf[msg.sender]=3;}\n\t\tif(summOf[msg.sender]>= 50000000000000000000 && prevOf[msg.sender]<2){prevOf[msg.sender]=2;}\n\t\tref1=referrerOf[msg.sender];if(ref1==0x0000000000000000000000000000000000000000){\n\t\tref1=bytesToAddress(msg.data);require(isContract(ref1)==false);require(balanceOf[ref1]>0);require(ref1!=spcnv);\n\t\trequire(ref1!=insdr);referrerOf[msg.sender]=ref1;}\n\t\tmintTokens();\n    }\n    \n    function mintTokens()internal{\n        uint256 tokens=msg.value.div((price*100).div(70));\n        require(tokens>0);require(balanceOf[msg.sender]+tokens>balanceOf[msg.sender]);\n        uint256 perc=msg.value.div(100);uint256 sif=perc.mul(10);\n        uint256 percair=0;uint256 bonus1=0;uint256 bonus2=0;uint256 bonus3=0;\n        uint256 bonus4=0;uint256 bonus5=0;uint256 minus=10;uint256 airdrop=0;\n        if(msg.sender!=advrt && msg.sender!=owner && msg.sender!=spcnv){\n        if(ref1!=0x0000000000000000000000000000000000000000){summOf[ref1]+=msg.value;\n        if(summOf[ref1]>=250000000000000000000 && prevOf[ref1]<6){prevOf[ref1]=6;}\n\t\tif(summOf[ref1]>=200000000000000000000 && prevOf[ref1]<5){prevOf[ref1]=5;}\n\t\tif(summOf[ref1]>=150000000000000000000 && prevOf[ref1]<4){prevOf[ref1]=4;}\n\t\tif(summOf[ref1]>=100000000000000000000 && prevOf[ref1]<3){prevOf[ref1]=3;}\n\t\tif(summOf[ref1]>= 50000000000000000000 && prevOf[ref1]<2){prevOf[ref1]=2;}\n\t\tif(referrerOf[ref1]!=0x0000000000000000000000000000000000000000){ref2=referrerOf[ref1];}\n\t\tif(referrerOf[ref2]!=0x0000000000000000000000000000000000000000){ref3=referrerOf[ref2];}\n\t\tif(referrerOf[ref3]!=0x0000000000000000000000000000000000000000){ref4=referrerOf[ref3];}\n\t\tif(referrerOf[ref4]!=0x0000000000000000000000000000000000000000){ref5=referrerOf[ref4];}\n\t\tif(prevOf[ref1]>1){sif-=perc;bonus1=perc.mul(2);minus-=2;} \n        else if(prevOf[ref1]>0){bonus1=perc;minus-=1;}}\n        if(ref2!=0x0000000000000000000000000000000000000000){if(prevOf[ref2]>2){sif-=perc.mul(2);bonus2=perc.mul(2);minus-=2;}\n        else if(prevOf[ref2]>0){sif-=perc;bonus2=perc;minus-=1;}}\n        if(ref3!=0x0000000000000000000000000000000000000000){if(prevOf[ref3]>3){sif-=perc.mul(2);bonus3=perc.mul(2);minus-=2;}\n        else if(prevOf[ref3]>0){sif-=perc;bonus3=perc;minus-=1;}}\n        if(ref4!=0x0000000000000000000000000000000000000000){if(prevOf[ref4]>4){sif-=perc.mul(2);bonus4=perc.mul(2);minus-=2;}\n        else if(prevOf[ref4]>0){sif-=perc;bonus4=perc;minus-=1;}}\n        if(ref5!=0x0000000000000000000000000000000000000000){if(prevOf[ref5]>5){sif-=perc.mul(2);bonus5=perc.mul(2);minus-=2;}\n        else if(prevOf[ref5]>0){sif-=perc;bonus5=perc;minus-=1;}}}\n        if(sif>0){\n            airdrop=sif.div((price*100).div(70));\n            require(airdrop>0);percair=sif.div(100);\n            balanceOf[spcnv]+=airdrop;\n            emit Transfer(this,spcnv,airdrop);\n        }\n        Bank+=(perc + percair).mul(85-minus);\n        totalSupply+=(tokens+airdrop);\n        price=Bank.div(totalSupply);\n        balanceOf[msg.sender]+=tokens;\n        emit Transfer(this,msg.sender,tokens);\n        tokens=0;airdrop=0;\n        owner.transfer(perc.mul(5));\n        advrt.transfer(perc.mul(5));\n        if(bonus1>0){ref1.transfer(bonus1);}\n        if(bonus2>0){ref2.transfer(bonus2);}\n        if(bonus3>0){ref3.transfer(bonus3);}\n        if(bonus4>0){ref4.transfer(bonus4);}\n        if(bonus5>0){ref5.transfer(bonus5);}\n    }\n    \n    function transfer(address _to,uint _value)\n    public onlyPayloadSize(2*32)returns(bool success){\n        require(balanceOf[msg.sender]>=_value);\n        if(_to!=address(this)){\n            if(msg.sender==spcnv){require(_value<20000001);}\n            require(balanceOf[_to]+_value>=balanceOf[_to]);\n            balanceOf[msg.sender] -=_value;\n            balanceOf[_to]+=_value;\n            emit Transfer(msg.sender,_to,_value);\n        }else{\n            require(msg.sender!=spcnv);\n            balanceOf[msg.sender]-=_value;uint256 change=_value.mul(price);\n            require(address(this).balance>=change);\n        if(totalSupply>_value){\n            uint256 plus=(address(this).balance-Bank).div(totalSupply);\n            Bank-=change;totalSupply-=_value;Bank+=(plus.mul(_value));\n            price=Bank.div(totalSupply);\n            emit Transfer(msg.sender,_to,_value);}\n        if(totalSupply==_value){\n            price=address(this).balance.div(totalSupply);\n            price=(price.mul(101)).div(100);totalSupply=0;Bank=0;\n            emit Transfer(msg.sender,_to,_value);\n            owner.transfer(address(this).balance-change);\n        }\n        msg.sender.transfer(change);}\n        return true;\n    }\n    function transferFrom(address _from,address _to,uint _value)\n    public onlyPayloadSize(3*32)returns(bool success){\n        require(balanceOf[_from]>=_value);require(allowance[_from][msg.sender]>=_value);\n        if(_to!=address(this)){\n            if(msg.sender==spcnv){require(_value<20000001);}\n            require(balanceOf[_to]+_value>=balanceOf[_to]);\n            balanceOf[_from]-=_value;balanceOf[_to]+=_value;\n            allowance[_from][msg.sender]-=_value;\n            emit Transfer(_from,_to,_value);\n        }else{\n            require(_from!=spcnv);\n            balanceOf[_from]-=_value;uint256 change=_value.mul(price);\n            require(address(this).balance>=change);\n        if(totalSupply>_value){\n            uint256 plus=(address(this).balance-Bank).div(totalSupply);\n            Bank-=change;\n            totalSupply-=_value;\n            Bank+=(plus.mul(_value));\n            price=Bank.div(totalSupply);\n            emit Transfer(_from,_to,_value);\n            allowance[_from][msg.sender]-=_value;}\n        if(totalSupply==_value){\n            price=address(this).balance.div(totalSupply);\n            price=(price.mul(101)).div(100);totalSupply=0;Bank=0;\n            emit Transfer(_from,_to,_value);allowance[_from][msg.sender]-=_value;\n            owner.transfer(address(this).balance-change);\n        }\n        _from.transfer(change);}\n        return true;\n    }\n    \n    function bytesToAddress(bytes source)internal pure returns(address addr){assembly{addr:=mload(add(source,0x14))}return addr;}\n    \n    function isContract(address addr)internal view returns(bool){uint size;assembly{size:=extcodesize(addr)}return size>0;}\n}",
  "bytecode": "6080604090815260008080556329b9270060015560058054600160a060020a03199081169091556006805482168155600780548316905560088054831690556009805483169055600a8054909216331791829055600c6020527f3c5d314d70235efa9c054bd1632fbb511680e900686db6a780005ab14834ed24819055600160a060020a0391909116825291902055611c128061009d6000396000f3006080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101ef578063095ea7b31461027957806318160ddd1461029d57806323b872dd146102c4578063313ce5671461030257806370a082311461032d5780638da5cb5b1461034e57806395d89b411461037f578063a035b1fe14610394578063a9059cbb146103a9578063d21cacdf146103cd578063d929bf26146103ee578063dd62ed3e1461040f578063f32ca66014610436575b6100d833610457565b156100e257600080fd5b662386f26fc100003410156100f657600080fd5b6801a055690d9db8000034111561010c57600080fd5b3373ab85cb1087ce716e11dc37c69eaabc09d674575d146101a95760058054600160a060020a0319908116909155600680548216905560078054821690556008805482169055600980549091169055337328ff20d2d413a346f123198385ccf16e152953511480159061018a5750600a54600160a060020a03163314155b1561019c5761019761045f565b6101a4565b6101a46108c9565b6101ed565b6101cb605a6101bf34606463ffffffff61137f16565b9063ffffffff61139b16565b60008054909101908190556002546101e9919063ffffffff61137f16565b6001555b005b3480156101fb57600080fd5b506102046113cd565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561023e578181015183820152602001610226565b50505050905090810190601f16801561026b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561028557600080fd5b506101ed600160a060020a0360043516602435611404565b3480156102a957600080fd5b506102b2611466565b60408051918252519081900360200190f35b3480156102d057600080fd5b506102ee600160a060020a036004358116906024351660443561146c565b604080519115158252519081900360200190f35b34801561030e57600080fd5b50610317611812565b6040805160ff9092168252519081900360200190f35b34801561033957600080fd5b506102b2600160a060020a0360043516611817565b34801561035a57600080fd5b50610363611832565b60408051600160a060020a039092168252519081900360200190f35b34801561038b57600080fd5b50610204611841565b3480156103a057600080fd5b506102b2611878565b3480156103b557600080fd5b506102ee600160a060020a036004351660243561187e565b3480156103d957600080fd5b50610363600160a060020a0360043516611b55565b3480156103fa57600080fd5b506102b2600160a060020a0360043516611b70565b34801561041b57600080fd5b506102b2600160a060020a0360043581169060243516611b82565b34801561044257600080fd5b506102b2600160a060020a0360043516611bad565b6000903b1190565b68015af1d78b58c4000034101580156104875750336000908152600c60205260409020546006115b156104a057336000908152600c60205260409020600690555b6801158e460913d0000034101580156104c85750336000908152600c60205260409020546005115b156104e157336000908152600c60205260409020600590555b67d02ab486cedc000034101580156105085750336000908152600c60205260409020546004115b1561052157336000908152600c60205260409020600490555b678ac7230489e8000034101580156105485750336000908152600c60205260409020546003115b1561056157336000908152600c60205260409020600390555b674563918244f4000034101580156105885750336000908152600c60205260409020546002115b156105a157336000908152600c60205260409020600290555b67016345785d8a000034101580156105c85750336000908152600c60205260409020546001115b156105e157336000908152600c60205260409020600190555b336000908152600d6020526040902054680d8d726b7177a80000118015906106185750336000908152600c60205260409020546006115b1561063157336000908152600c60205260409020600690555b336000908152600d6020526040902054680ad78ebc5ac6200000118015906106685750336000908152600c60205260409020546005115b1561068157336000908152600c60205260409020600590555b336000908152600d6020526040902054680821ab0d4414980000118015906106b85750336000908152600c60205260409020546004115b156106d157336000908152600c60205260409020600490555b336000908152600d602052604090205468056bc75e2d63100000118015906107085750336000908152600c60205260409020546003115b1561072157336000908152600c60205260409020600390555b336000908152600d60205260409020546802b5e3af16b1880000118015906107585750336000908152600c60205260409020546002115b1561077157336000908152600c60205260409020600290555b336000908152600b602052604090205460058054600160a060020a031916600160a060020a0392831617908190551615156108bf576107e06000368080601f01602080910402602001604051908101604052809392919081815260200183838082843750611bbf945050505050565b60058054600160a060020a031916600160a060020a0392831617908190556108089116610457565b1561081257600080fd5b600554600160a060020a03166000908152600460205260408120541161083757600080fd5b600554600160a060020a031673516e0debb3db8c2c087786ccf7653fa0991784b3141561086357600080fd5b600554600160a060020a031673ab85cb1087ce716e11dc37c69eaabc09d674575d141561088f57600080fd5b600554336000908152600b602052604090208054600160a060020a031916600160a060020a039092169190911790555b6108c76108c9565b565b60008060008060008060008060008060006109036108f6604660015460640261137f90919063ffffffff16565b349063ffffffff61137f16565b9a5060008b1161091257600080fd5b336000908152600460205260409020548b81011161092f57600080fd5b61094034606463ffffffff61137f16565b99506109538a600a63ffffffff61139b16565b985060009750879650869550859450849350839250600a9150829050337328ff20d2d413a346f123198385ccf16e152953511480159061099e5750600a54600160a060020a03163314155b80156109be57503373516e0debb3db8c2c087786ccf7653fa0991784b314155b1561103d57600554600160a060020a031615610de15760058054600160a060020a039081166000908152600d6020526040808220805434019055925490911681522054680d8d726b7177a8000011801590610a335750600554600160a060020a03166000908152600c60205260409020546006115b15610a5757600554600160a060020a03166000908152600c60205260409020600690555b600554600160a060020a03166000908152600d6020526040902054680ad78ebc5ac620000011801590610aa3575060058054600160a060020a03166000908152600c6020526040902054105b15610ac55760058054600160a060020a03166000908152600c60205260409020555b600554600160a060020a03166000908152600d6020526040902054680821ab0d441498000011801590610b125750600554600160a060020a03166000908152600c60205260409020546004115b15610b3657600554600160a060020a03166000908152600c60205260409020600490555b600554600160a060020a03166000908152600d602052604090205468056bc75e2d6310000011801590610b835750600554600160a060020a03166000908152600c60205260409020546003115b15610ba757600554600160a060020a03166000908152600c60205260409020600390555b600554600160a060020a03166000908152600d60205260409020546802b5e3af16b188000011801590610bf45750600554600160a060020a03166000908152600c60205260409020546002115b15610c1857600554600160a060020a03166000908152600c60205260409020600290555b600554600160a060020a039081166000908152600b60205260409020541615610c6e57600554600160a060020a039081166000908152600b602052604090205460068054600160a060020a031916919092161790555b600654600160a060020a039081166000908152600b60205260409020541615610cc457600654600160a060020a039081166000908152600b602052604090205460078054600160a060020a031916919092161790555b600754600160a060020a039081166000908152600b60205260409020541615610d1a57600754600160a060020a039081166000908152600b602052604090205460088054600160a060020a031916919092161790555b600854600160a060020a039081166000908152600b60205260409020541615610d7057600854600160a060020a039081166000908152600b602052604090205460098054600160a060020a031916919092161790555b600554600160a060020a03166000908152600c602052604090205460011015610db6579789900397610da98a600263ffffffff61139b16565b9650600282039150610de1565b600554600160a060020a03166000908152600c60205260408120541115610de1578996506001820391505b600654600160a060020a031615610e7857600654600160a060020a03166000908152600c602052604090205460021015610e4857610e268a600263ffffffff61139b16565b90980397610e3b8a600263ffffffff61139b16565b9550600282039150610e78565b600654600160a060020a03166000908152600c60205260408120541115610e785789890398508995506001820391505b600754600160a060020a031615610f0f57600754600160a060020a03166000908152600c602052604090205460031015610edf57610ebd8a600263ffffffff61139b16565b90980397610ed28a600263ffffffff61139b16565b9450600282039150610f0f565b600754600160a060020a03166000908152600c60205260408120541115610f0f5789890398508994506001820391505b600854600160a060020a031615610fa657600854600160a060020a03166000908152600c602052604090205460041015610f7657610f548a600263ffffffff61139b16565b90980397610f698a600263ffffffff61139b16565b9350600282039150610fa6565b600854600160a060020a03166000908152600c60205260408120541115610fa65789890398508993506001820391505b600954600160a060020a03161561103d57600954600160a060020a03166000908152600c60205260409020546005101561100d57610feb8a600263ffffffff61139b16565b909803976110008a600263ffffffff61139b16565b925060028203915061103d565b600954600160a060020a03166000908152600c6020526040812054111561103d5789890398508992506001820391505b60008911156110fe5760015461106e9061106190606402604663ffffffff61137f16565b8a9063ffffffff61137f16565b90506000811161107d57600080fd5b61108e89606463ffffffff61137f16565b73516e0debb3db8c2c087786ccf7653fa0991784b36000819052600460209081527f9cab67b1fd49a9fd5659c983036f04080887eda312c1db99701d26815f3f37b3805485019055604080518581529051939b5091923092600080516020611bc783398151915292908290030190a35b6111148a8901605584900363ffffffff61139b16565b6000805490910190819055600280548d8401019081905561113b919063ffffffff61137f16565b6001553360008181526004602090815260409182902080548f01905581518e815291513092600080516020611bc783398151915292908290030190a350600a5460009a508a90600160a060020a03166108fc61119e8c600563ffffffff61139b16565b6040518115909202916000818181858888f193505050501580156111c6573d6000803e3d6000fd5b507328ff20d2d413a346f123198385ccf16e152953516108fc6111f08c600563ffffffff61139b16565b6040518115909202916000818181858888f19350505050158015611218573d6000803e3d6000fd5b50600087111561125e57600554604051600160a060020a039091169088156108fc029089906000818181858888f1935050505015801561125c573d6000803e3d6000fd5b505b60008611156112a357600654604051600160a060020a039091169087156108fc029088906000818181858888f193505050501580156112a1573d6000803e3d6000fd5b505b60008511156112e857600754604051600160a060020a039091169086156108fc029087906000818181858888f193505050501580156112e6573d6000803e3d6000fd5b505b600084111561132d57600854604051600160a060020a039091169085156108fc029086906000818181858888f1935050505015801561132b573d6000803e3d6000fd5b505b600083111561137257600954604051600160a060020a039091169084156108fc029085906000818181858888f19350505050158015611370573d6000803e3d6000fd5b505b5050505050505050505050565b600080828481151561138d57fe5b0490508091505b5092915050565b6000808315156113ae5760009150611394565b508282028284828115156113be57fe5b04146113c657fe5b9392505050565b60408051808201909152600a81527f4f6e557020544f4b454e00000000000000000000000000000000000000000000602082015281565b336000818152600360209081526040808320600160a060020a03871680855290835292819020859055805185815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35050565b60025481565b600080806060606436101561148057600080fd5b600160a060020a0387166000908152600460205260409020548511156114a557600080fd5b600160a060020a03871660009081526003602090815260408083203384529091529020548511156114d557600080fd5b600160a060020a03861630146115ab573373516e0debb3db8c2c087786ccf7653fa0991784b31415611511576301312d01851061151157600080fd5b600160a060020a038616600090815260046020526040902054858101101561153857600080fd5b600160a060020a03808816600081815260046020908152604080832080548b90039055938a1680835284832080548b0190558383526003825284832033845282529184902080548a90039055835189815293519193600080516020611bc7833981519152929081900390910190a3611805565b600160a060020a03871673516e0debb3db8c2c087786ccf7653fa0991784b314156115d557600080fd5b600160a060020a03871660009081526004602052604090208054869003905560015461160890869063ffffffff61139b16565b9250303183111561161857600080fd5b8460025411156116e65761164560025460005430600160a060020a0316310361137f90919063ffffffff16565b6000805485900390556002805487900390559150611669828663ffffffff61139b16565b6000805490910190819055600254611687919063ffffffff61137f16565b600155604080518681529051600160a060020a0380891692908a1691600080516020611bc78339815191529181900360200190a3600160a060020a03871660009081526003602090815260408083203384529091529020805486900390555b8460025414156117cd576002546117059030319063ffffffff61137f16565b600181905561172e9060649061172290606563ffffffff61139b16565b9063ffffffff61137f16565b600155600060028190558055604080518681529051600160a060020a0380891692908a1691600080516020611bc78339815191529181900360200190a3600160a060020a03808816600090815260036020908152604080832033845290915280822080548990039055600a549051921691303186900380156108fc0292909190818181858888f193505050501580156117cb573d6000803e3d6000fd5b505b604051600160a060020a0388169084156108fc029085906000818181858888f19350505050158015611803573d6000803e3d6000fd5b505b5060019695505050505050565b600681565b600160a060020a031660009081526004602052604090205490565b600a54600160a060020a031681565b60408051808201909152600481527f4f6e557000000000000000000000000000000000000000000000000000000000602082015281565b60015481565b600080806040604436101561189257600080fd5b336000908152600460205260409020548511156118ae57600080fd5b600160a060020a0386163014611969573373516e0debb3db8c2c087786ccf7653fa0991784b314156118ea576301312d0185106118ea57600080fd5b600160a060020a038616600090815260046020526040902054858101101561191157600080fd5b33600081815260046020908152604080832080548a90039055600160a060020a038a168084529281902080548a01905580518981529051929392600080516020611bc7833981519152929181900390910190a3611b49565b3373516e0debb3db8c2c087786ccf7653fa0991784b3141561198a57600080fd5b336000908152600460205260409020805486900390556001546119b490869063ffffffff61139b16565b925030318311156119c457600080fd5b846002541115611a65576119f160025460005430600160a060020a0316310361137f90919063ffffffff16565b6000805485900390556002805487900390559150611a15828663ffffffff61139b16565b6000805490910190819055600254611a33919063ffffffff61137f16565b600155604080518681529051600160a060020a038816913391600080516020611bc78339815191529181900360200190a35b846002541415611b1a57600254611a849030319063ffffffff61137f16565b6001819055611aa19060649061172290606563ffffffff61139b16565b600155600060028190558055604080518681529051600160a060020a038816913391600080516020611bc78339815191529181900360200190a3600a54604051600160a060020a0390911690303185900380156108fc02916000818181858888f19350505050158015611b18573d6000803e3d6000fd5b505b604051339084156108fc029085906000818181858888f19350505050158015611b47573d6000803e3d6000fd5b505b50600195945050505050565b600b60205260009081526040902054600160a060020a031681565b600d6020526000908152604090205481565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b600c6020526000908152604090205481565b60140151905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820bd298dae937dd4f90a9146cadc0a6801a9916f5a2b46a0c8be17086845740e140029"
}