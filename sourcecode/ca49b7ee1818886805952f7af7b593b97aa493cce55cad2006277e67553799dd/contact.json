{
  "address": "0x705ee96c1c160842c92c1aecfcffccc9c412e3d9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "ClearPollToken",
  "contractName": "POLLToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-13\n*/\n\npragma solidity ^0.4.15;\n\ncontract ERC20Interface {\n    // Get the total token supply\n    function totalSupply() constant returns (uint256 tS);\n \n    // Get the account balance of another account with address _owner\n    function balanceOf(address _owner) constant returns (uint256 balance);\n \n    // Send _value amount of tokens to address _to\n    function transfer(address _to, uint256 _value) returns (bool success);\n \n    // Send _value amount of tokens from address _from to address _to\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n \n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    // this function is required for some DEX functionality\n    function approve(address _spender, uint256 _value) returns (bool success);\n \n    // Returns the amount which _spender is still allowed to withdraw from _owner\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n\n    // Used only once for burning excess tokens after ICO.\n    function burnExcess(uint256 _value) returns (bool success);\n\n    // Used for burning 100 tokens for every completed poll up to maximum of 10% of totalSupply.\n    function burnPoll(uint256 _value) returns (bool success);\n \n    // Triggered when tokens are transferred.\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n \n    // Triggered whenever approve(address _spender, uint256 _value) is called.\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    // Triggered whenever tokens are destroyed\n    event Burn(address indexed from, uint256 value);\n}\n \ncontract POLLToken is ERC20Interface {\n\n    string public constant symbol = \"POLL\";\n    string public constant name = \"ClearPoll Token\";\n    uint8 public constant decimals = 18;\n    uint256 _totalSupply = 10000000 * 10 ** uint256(decimals);\n    \n    address public owner;\n    \n    bool public excessTokensBurnt = false;\n\n    uint256 public pollCompleted = 0;\n    \n    uint256 public pollBurnInc = 100 * 10 ** uint256(decimals);\n\n    uint256 public pollBurnQty = 0;\n\n    bool public pollBurnCompleted = false;\n\n    uint256 public pollBurnQtyMax;\n\n    mapping(address => uint256) balances;\n \n    mapping(address => mapping (address => uint256)) allowed;\n\n    // Handle ether mistakenly sent to contract\n    function () payable {\n      if (msg.value > 0) {\n          if (!owner.send(msg.value)) revert();\n      }\n    }\n\n    function POLLToken() {\n        owner = msg.sender;\n        balances[owner] = _totalSupply;\n    }\n\n    // Get the total token supply\n    function totalSupply() constant returns (uint256 tS) {\n        tS = _totalSupply;\n    }\n \n    // What is the balance of a particular account?\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n \n    // Transfer the balance from owner's account to another account\n    function transfer(address _to, uint256 _amount) returns (bool success) {\n        if (balances[msg.sender] >= _amount \n            && _amount > 0\n            && balances[_to] + _amount > balances[_to]) {\n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n \n    // Send _value amount of tokens from address _from to address _to\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n    // fees in sub-currencies; the command should fail unless the _from account has\n    // deliberately authorized the sender of the message via some mechanism; we propose\n    // these standardized APIs for approval:\n    function transferFrom(\n        address _from, address _to, uint256 _amount) returns (bool success) {\n        if (balances[_from] >= _amount\n            && allowed[_from][msg.sender] >= _amount\n            && _amount > 0\n            && balances[_to] + _amount > balances[_to]) {\n            balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n \n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    function approve(address _spender, uint256 _amount) returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n \n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    // Used only once for burning excess tokens after ICO.\n    function burnExcess(uint256 _value) public returns (bool success) {\n        require(balanceOf(msg.sender) >= _value && msg.sender == owner && !excessTokensBurnt);\n        balances[msg.sender] -= _value;\n        _totalSupply -= _value;\n        Burn(msg.sender, _value);\n        pollBurnQtyMax = totalSupply() / 10;\n        excessTokensBurnt = true;\n        return true;\n    }   \n\n    // Used for burning 100 tokens for every completed poll up to maximum of 10% of totalSupply.\n    function burnPoll(uint256 _value) public returns (bool success) {    \t\n        require(msg.sender == owner && excessTokensBurnt && _value > pollCompleted && !pollBurnCompleted);\n        uint256 burnQty;\n        if ((_value * pollBurnInc) <= pollBurnQtyMax) {\n            burnQty = (_value-pollCompleted) * pollBurnInc;\n            balances[msg.sender] -= burnQty;\n            _totalSupply -= burnQty;\n            Burn(msg.sender, burnQty);\n            pollBurnQty += burnQty;\n            pollCompleted = _value;\n            if (pollBurnQty == pollBurnQtyMax) pollBurnCompleted = true;\n            return true;\n        } else if (pollBurnQty < pollBurnQtyMax) {\n\t\t\tburnQty = pollBurnQtyMax - pollBurnQty;\n            balances[msg.sender] -= burnQty;\n            _totalSupply -= burnQty;\n            Burn(msg.sender, burnQty);\n            pollBurnQty += burnQty;\n            pollCompleted = _value;\n            pollBurnCompleted = true;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"tS\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pollCompleted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pollBurnCompleted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pollBurnQtyMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnPoll\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"excessTokensBurnt\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pollBurnQty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pollBurnInc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnExcess\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]",
  "bytecode": "60606040526a084595161401484a00000060009081556001805460a060020a60ff0219169055600281905568056bc75e2d631000006003556004556005805460ff19169055341561004f57600080fd5b5b60018054600160a060020a03191633600160a060020a03908116919091179182905560008054929091168152600760205260409020555b5b610b23806100976000396000f300606060405236156100f95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461013b578063095ea7b3146101c657806318160ddd146101fc57806323b872dd14610221578063313ce5671461025d57806369a683f1146102865780636eeb553f146102ab57806370a08231146102d2578063820c1dd0146103035780638da5cb5b1461032857806392fb7ef81461035757806395d89b4114610381578063a197ec5d1461040c578063a9059cbb14610433578063c81ede6714610469578063dd62ed3e1461048e578063e3bfdcfe146104c5578063e8055e9c146104ea575b5b600034111561013757600154600160a060020a03163480156108fc0290604051600060405180830381858888f19350505050151561013757600080fd5b5b5b005b341561014657600080fd5b61014e610514565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561018b5780820151818401525b602001610172565b50505050905090810190601f1680156101b85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101d157600080fd5b6101e8600160a060020a036004351660243561054b565b604051901515815260200160405180910390f35b341561020757600080fd5b61020f6105b8565b60405190815260200160405180910390f35b341561022c57600080fd5b6101e8600160a060020a03600435811690602435166044356105bf565b604051901515815260200160405180910390f35b341561026857600080fd5b6102706106db565b60405160ff909116815260200160405180910390f35b341561029157600080fd5b61020f6106e0565b60405190815260200160405180910390f35b34156102b657600080fd5b6101e86106e6565b604051901515815260200160405180910390f35b34156102dd57600080fd5b61020f600160a060020a03600435166106ef565b60405190815260200160405180910390f35b341561030e57600080fd5b61020f61070e565b60405190815260200160405180910390f35b341561033357600080fd5b61033b610714565b604051600160a060020a03909116815260200160405180910390f35b341561036257600080fd5b6101e8600435610723565b604051901515815260200160405180910390f35b341561038c57600080fd5b61014e6108c2565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561018b5780820151818401525b602001610172565b50505050905090810190601f1680156101b85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561041757600080fd5b6101e86108f9565b604051901515815260200160405180910390f35b341561043e57600080fd5b6101e8600160a060020a0360043516602435610909565b604051901515815260200160405180910390f35b341561047457600080fd5b61020f6109d8565b60405190815260200160405180910390f35b341561049957600080fd5b61020f600160a060020a03600435811690602435166109de565b60405190815260200160405180910390f35b34156104d057600080fd5b61020f610a0b565b60405190815260200160405180910390f35b34156104f557600080fd5b6101e8600435610a11565b604051901515815260200160405180910390f35b60408051908101604052600f81527f436c656172506f6c6c20546f6b656e0000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260086020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b6000545b90565b600160a060020a03831660009081526007602052604081205482901080159061060f5750600160a060020a0380851660009081526008602090815260408083203390941683529290522054829010155b801561061b5750600082115b80156106405750600160a060020a038316600090815260076020526040902054828101115b156106cf57600160a060020a0380851660008181526007602081815260408084208054899003905560088252808420338716855282528084208054899003905594881680845291905290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060016106d3565b5060005b5b9392505050565b601281565b60025481565b60055460ff1681565b600160a060020a0381166000908152600760205260409020545b919050565b60065481565b600154600160a060020a031681565b600154600090819033600160a060020a03908116911614801561074f575060015460a060020a900460ff165b801561075c575060025483115b801561076b575060055460ff16155b151561077657600080fd5b60065460035484021161081d5750600354600254600160a060020a0333166000818152600760205260408082208054948803909502938490039094558054839003905590917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59083905190815260200160405180910390a26004805482019081905560028490556006541415610814576005805460ff191660011790555b600191506108ba565b60065460045410156108b55750600454600654600160a060020a0333166000818152600760205260408082208054959094039485900390935580548490039055907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59083905190815260200160405180910390a2600480548201905560028390556005805460ff1916600190811790915591506108ba565b600091505b5b5b50919050565b60408051908101604052600481527f504f4c4c00000000000000000000000000000000000000000000000000000000602082015281565b60015460a060020a900460ff1681565b600160a060020a0333166000908152600760205260408120548290108015906109325750600082115b80156109575750600160a060020a038316600090815260076020526040902054828101115b156109c957600160a060020a033381166000818152600760205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060016105b2565b5060006105b2565b5b92915050565b60045481565b600160a060020a038083166000908152600860209081526040808320938516835292905220545b92915050565b60035481565b600081610a1d336106ef565b10158015610a39575060015433600160a060020a039081169116145b8015610a4f575060015460a060020a900460ff16155b1515610a5a57600080fd5b600160a060020a0333166000818152600760205260408082208054869003905581548590039091557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a2600a610abf6105b8565b811515610ac857fe5b04600655506001805474ff0000000000000000000000000000000000000000191660a060020a1781555b9190505600a165627a7a7230582070b297cd3db26680595e63aab5ded327c150a1b372778c5877228c32fff01e560029"
}