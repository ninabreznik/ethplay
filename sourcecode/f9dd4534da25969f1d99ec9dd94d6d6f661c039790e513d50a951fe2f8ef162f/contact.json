{
  "address": "0x75bff18af1e5eb4420913d9aa52aee78178e6aa7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Airdrop",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-02\n*/\n\npragma solidity ^0.4.24;\n\n// File: solidity-shared-lib/contracts/ERC20Interface.sol\n\n/**\n* Copyright 2017–2018, LaborX PTY\n* Licensed under the AGPL Version 3 license.\n*/\n\npragma solidity ^0.4.23;\n\n\n/// @title Defines an interface for EIP20 token smart contract\ncontract ERC20Interface {\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed from, address indexed spender, uint256 value);\n\n    string public symbol;\n\n    function decimals() public view returns (uint8);\n    function totalSupply() public view returns (uint256 supply);\n\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n}\n\n// File: solidity-shared-lib/contracts/Owned.sol\n\n/**\n* Copyright 2017–2018, LaborX PTY\n* Licensed under the AGPL Version 3 license.\n*/\n\npragma solidity ^0.4.23;\n\n\n\n/// @title Owned contract with safe ownership pass.\n///\n/// Note: all the non constant functions return false instead of throwing in case if state change\n/// didn't happen yet.\ncontract Owned {\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    address public contractOwner;\n    address public pendingContractOwner;\n\n    modifier onlyContractOwner {\n        if (msg.sender == contractOwner) {\n            _;\n        }\n    }\n\n    constructor()\n    public\n    {\n        contractOwner = msg.sender;\n    }\n\n    /// @notice Prepares ownership pass.\n    /// Can only be called by current owner.\n    /// @param _to address of the next owner.\n    /// @return success.\n    function changeContractOwnership(address _to)\n    public\n    onlyContractOwner\n    returns (bool)\n    {\n        if (_to == 0x0) {\n            return false;\n        }\n        pendingContractOwner = _to;\n        return true;\n    }\n\n    /// @notice Finalize ownership pass.\n    /// Can only be called by pending owner.\n    /// @return success.\n    function claimContractOwnership()\n    public\n    returns (bool)\n    {\n        if (msg.sender != pendingContractOwner) {\n            return false;\n        }\n\n        emit OwnershipTransferred(contractOwner, pendingContractOwner);\n        contractOwner = pendingContractOwner;\n        delete pendingContractOwner;\n        return true;\n    }\n\n    /// @notice Allows the current owner to transfer control of the contract to a newOwner.\n    /// @param newOwner The address to transfer ownership to.\n    function transferOwnership(address newOwner)\n    public\n    onlyContractOwner\n    returns (bool)\n    {\n        if (newOwner == 0x0) {\n            return false;\n        }\n\n        emit OwnershipTransferred(contractOwner, newOwner);\n        contractOwner = newOwner;\n        delete pendingContractOwner;\n        return true;\n    }\n\n    /// @notice Withdraw given tokens from contract to owner.\n    /// This method is only allowed for contact owner.\n    function withdrawTokens(address[] tokens)\n    public\n    onlyContractOwner\n    {\n        address _contractOwner = contractOwner;\n        for (uint i = 0; i < tokens.length; i++) {\n            ERC20Interface token = ERC20Interface(tokens[i]);\n            uint balance = token.balanceOf(this);\n            if (balance > 0) {\n                token.transfer(_contractOwner, balance);\n            }\n        }\n    }\n\n    /// @notice Withdraw ether from contract to owner.\n    /// This method is only allowed for contact owner.\n    function withdrawEther()\n    public\n    onlyContractOwner\n    {\n        uint balance = address(this).balance;\n        if (balance > 0)  {\n            contractOwner.transfer(balance);\n        }\n    }\n\n    /// @notice Transfers ether to another address.\n    /// Allowed only for contract owners.\n    /// @param _to recepient address\n    /// @param _value wei to transfer; must be less or equal to total balance on the contract\n    function transferEther(address _to, uint256 _value) \n    public \n    onlyContractOwner \n    {\n        require(_to != 0x0, \"INVALID_ETHER_RECEPIENT_ADDRESS\");\n        if (_value > address(this).balance) {\n            revert(\"INVALID_VALUE_TO_TRANSFER_ETHER\");\n        }\n        \n        _to.transfer(_value);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/SignerRole.sol\n\ncontract SignerRole {\n  using Roles for Roles.Role;\n\n  event SignerAdded(address indexed account);\n  event SignerRemoved(address indexed account);\n\n  Roles.Role private signers;\n\n  constructor() public {\n    _addSigner(msg.sender);\n  }\n\n  modifier onlySigner() {\n    require(isSigner(msg.sender));\n    _;\n  }\n\n  function isSigner(address account) public view returns (bool) {\n    return signers.has(account);\n  }\n\n  function addSigner(address account) public onlySigner {\n    _addSigner(account);\n  }\n\n  function renounceSigner() public {\n    _removeSigner(msg.sender);\n  }\n\n  function _addSigner(address account) internal {\n    signers.add(account);\n    emit SignerAdded(account);\n  }\n\n  function _removeSigner(address account) internal {\n    signers.remove(account);\n    emit SignerRemoved(account);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n\ncontract PauserRole {\n  using Roles for Roles.Role;\n\n  event PauserAdded(address indexed account);\n  event PauserRemoved(address indexed account);\n\n  Roles.Role private pausers;\n\n  constructor() public {\n    _addPauser(msg.sender);\n  }\n\n  modifier onlyPauser() {\n    require(isPauser(msg.sender));\n    _;\n  }\n\n  function isPauser(address account) public view returns (bool) {\n    return pausers.has(account);\n  }\n\n  function addPauser(address account) public onlyPauser {\n    _addPauser(account);\n  }\n\n  function renouncePauser() public {\n    _removePauser(msg.sender);\n  }\n\n  function _addPauser(address account) internal {\n    pausers.add(account);\n    emit PauserAdded(account);\n  }\n\n  function _removePauser(address account) internal {\n    pausers.remove(account);\n    emit PauserRemoved(account);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n  event Paused();\n  event Unpaused();\n\n  bool private _paused = false;\n\n\n  /**\n   * @return true if the contract is paused, false otherwise.\n   */\n  function paused() public view returns(bool) {\n    return _paused;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!_paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(_paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyPauser whenNotPaused {\n    _paused = true;\n    emit Paused();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyPauser whenPaused {\n    _paused = false;\n    emit Unpaused();\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: @laborx/airdrop/contracts/ERC223ReceivingContract.sol\n\n/**\n * @title Contract that will work with ERC223 tokens.\n */\n\ninterface ERC223ReceivingContract {\n/**\n * @dev Standard ERC223 function that will handle incoming token transfers.\n *\n * @param _from  Token sender address.\n * @param _value Amount of tokens.\n * @param _data  Transaction metadata.\n */\n    function tokenFallback(address _from, uint _value, bytes _data) external;\n}\n\n// File: @laborx/airdrop/contracts/Airdrop.sol\n\n/// @title Airdrop contract based on Merkle tree and merkle proof of addresses and amount of tokens to withdraw.\n///     Contract requires that merkle tree was built on leafs keccak256(position, recepient address, amount)\n///     Supports ERC223 token standard that allows to receive/not receive tokens that allowed (supported) by smart\n///     contracts, so no dummy or mistyped token transfers.\ncontract Airdrop is Owned, SignerRole, Pausable, ERC223ReceivingContract {\n\n    uint constant OK = 1;\n\n    /// @dev Log when airdrop\n    event LogAirdropClaimed(address indexed initiator, bytes32 operationId, uint amount);\n    /// @dev Log when merkle root will be updated\n    event LogMerkleRootUpdated(bytes32 to, address by);\n\n    /// @dev Version of the contract. Allows to distinguish between releases.\n    bytes32 public version = \"0.2.0\";\n    /// @dev Token to airdrop to.\n    IERC20 public token;\n    /// @dev Merkle root of the airdrop\n    bytes32 public merkleRoot;\n    /// @dev (operation id => completed)\n    mapping(bytes32 => bool) public completedAirdrops;\n\n    /// @notice Creates airdrop contract. Fails if token `_token` is 0x0.\n    /// @param _token token address to airdrop; supports ERC223 token contracts\n    constructor(address _token)\n    public\n    {\n        require(_token != 0x0, \"AIRDROP_INVALID_TOKEN_ADDRESS\");\n        token = IERC20(_token);\n    }\n\n    /// @notice Updates merkle root after changes in airdrop records.\n    ///     Emits 'LogMerkleRootUpdated' event.\n    ///     Only signer allowed to call.\n    /// @param _updatedMerkleRoot new merkle root hash calculated on updated airdrop records.\n    ///     Could be set empty if you need to stop withraws.\n    function setMerkleRoot(bytes32 _updatedMerkleRoot)\n    external\n    onlySigner\n    returns (uint)\n    {\n        merkleRoot = _updatedMerkleRoot;\n\n        emit LogMerkleRootUpdated(_updatedMerkleRoot, msg.sender);\n        return OK;\n    }\n\n    /// @notice Claim tokens held by airdrop contract based on proof provided\n    ///     by sender `msg.sender` based on position `_position` in airdrop list.\n    ///     Emits 'LogAirdropClaimed' event when withdraw claim is successful.\n    /// @param _proof merkle proof list of hashes\n    /// @param _operationId unique withrawal operation ID\n    /// @param _position position of airdrop record that is included in proof calculations\n    /// @param _amount amount of tokens to withdraw\n    /// @return result code of an operation. OK (1) if all went good.\n    function claimTokensByMerkleProof(\n        bytes32[] _proof,\n        bytes32 _operationId,\n        uint _position,\n        uint _amount\n    )\n    external\n    whenNotPaused\n    returns (uint)\n    {\n        bytes32 leaf = _calculateMerkleLeaf(_operationId, _position, msg.sender, _amount);\n\n        require(completedAirdrops[_operationId] == false, \"AIRDROP_ALREADY_CLAIMED\");\n        require(checkMerkleProof(merkleRoot, _proof, _position, leaf), \"AIRDROP_INVALID_PROOF\");\n        require(token.transfer(msg.sender, _amount), \"AIRDROP_TRANSFER_FAILURE\");\n\n        // Mark operation as completed\n        completedAirdrops[_operationId] = true;\n\n        emit LogAirdropClaimed(msg.sender, _operationId, _amount);\n        return OK;\n    }\n\n    /// @notice Checks merkle proof based on the latest merkle root set up.\n    /// @param _merkleRoot merkle root hash to compare result with\n    /// @param _proof merkle proof list of hashes\n    /// @param _position position of airdrop record that is included in proof calculations\n    /// @param _leaf leaf hash that should be tested for containment in merkle tree\n    /// @return true if leaf `_leaf` is included in merkle tree, false otherwise\n    function checkMerkleProof(\n        bytes32 _merkleRoot,\n        bytes32[] _proof,\n        uint _position,\n        bytes32 _leaf\n    )\n    public\n    pure\n    returns (bool)\n    {\n        bytes32 _computedHash = _leaf;\n        uint _checkedPosition = _position;\n\n        for (uint i = 0; i < _proof.length; i += 1) {\n            bytes32 _proofElement = _proof[i];\n\n            if (_checkedPosition % 2 == 0) {\n                _computedHash = keccak256(abi.encodePacked(_computedHash, _proofElement));\n            } else {\n                _computedHash = keccak256(abi.encodePacked(_proofElement, _computedHash));\n            }\n\n            _checkedPosition /= 2;\n        }\n\n        return _computedHash == _merkleRoot;\n    }\n\n    /*\n        ERC223 token\n\n        https://github.com/ethereum/EIPs/issues/223\n    */\n\n    /// @notice Guards smart contract from accepting non-allowed tokens (if they support ERC223 interface)\n    function tokenFallback(address /*_from*/, uint /*_value*/, bytes /*_data*/)\n    external\n    whenNotPaused\n    {\n        require(msg.sender == address(token), \"AIRDROP_TOKEN_NOT_SUPPORTED\");\n    }\n\n    /* PRIVATE */\n\n    /// @notice Gets merkle leaf based on index `_index`, destination address `_address` and\n    ///     amount of tokens to transfer `_amount`\n    function _calculateMerkleLeaf(bytes32 _operationId, uint _index, address _address, uint _amount)\n    private\n    pure\n    returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(_operationId, _index, _address, _amount));\n    }\n}\n\n// File: contracts/Import.sol\n\n/**\n* Copyright 2017–2018, LaborX PTY\n* Licensed under the AGPL Version 3 license.\n*/\n\npragma solidity ^0.4.24;",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingContractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_updatedMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"completedAirdrops\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"name\":\"_position\",\"type\":\"uint256\"},{\"name\":\"_leaf\",\"type\":\"bytes32\"}],\"name\":\"checkMerkleProof\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"name\":\"_operationId\",\"type\":\"bytes32\"},{\"name\":\"_position\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimTokensByMerkleProof\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operationId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogAirdropClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"LogMerkleRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526004805460ff191690557f302e322e300000000000000000000000000000000000000000000000000000006005553480156200003f57600080fd5b506040516020806200142e833981016040525160008054600160a060020a031916339081179091556200007b906401000000006200012d810204565b6200008f336401000000006200017f810204565b600160a060020a03811615156200010757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f41495244524f505f494e56414c49445f544f4b454e5f41444452455353000000604482015290519081900360640190fd5b60068054600160a060020a031916600160a060020a03929092169190911790556200020c565b62000148600282640100000000620011ac620001d182021704565b604051600160a060020a038216907f47d1c22a25bb3a5d4e481b9b1e6944c2eade3181a0a20b495ed61d35b5323f2490600090a250565b6200019a600382640100000000620011ac620001d182021704565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600160a060020a0381161515620001e757600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b611212806200021c6000396000f3006080604052600436106101485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305b1137b811461014d5780632eb4a7ab146101735780633f4ba83a1461019a5780634592cd1d146101af57806346fbf68e146101d857806354fd4d50146101f9578063557f4bc91461020e5780635aa77d3c1461022f5780635c975abb146102605780635ecb16cd146102755780636ef8d66d146102ca5780637362377b146102df5780637cb64759146102f45780637df73e271461030c57806382dc1ec41461032d5780638456cb591461034e5780639c5b435314610363578063a1b26fca1461037b578063c0ee0b8a146103de578063ce606ee01461040f578063d28c9a4314610424578063e5c8b03d1461044e578063eb12d61e14610463578063f2fde38b14610484578063fc0c546a146104a5575b600080fd5b34801561015957600080fd5b50610171600160a060020a03600435166024356104ba565b005b34801561017f57600080fd5b506101886105c2565b60408051918252519081900360200190f35b3480156101a657600080fd5b506101716105c8565b3480156101bb57600080fd5b506101c4610622565b604080519115158252519081900360200190f35b3480156101e457600080fd5b506101c4600160a060020a03600435166106b3565b34801561020557600080fd5b506101886106ce565b34801561021a57600080fd5b506101c4600160a060020a03600435166106d4565b34801561023b57600080fd5b50610244610730565b60408051600160a060020a039092168252519081900360200190f35b34801561026c57600080fd5b506101c461073f565b34801561028157600080fd5b5060408051602060048035808201358381028086018501909652808552610171953695939460249493850192918291850190849080828437509497506107489650505050505050565b3480156102d657600080fd5b506101716108e7565b3480156102eb57600080fd5b506101716108f2565b34801561030057600080fd5b5061018860043561094e565b34801561031857600080fd5b506101c4600160a060020a03600435166109ab565b34801561033957600080fd5b50610171600160a060020a03600435166109be565b34801561035a57600080fd5b506101716109db565b34801561036f57600080fd5b506101c4600435610a37565b34801561038757600080fd5b506040805160206004602480358281013584810280870186019097528086526101c496843596369660449591949091019291829185019084908082843750949750508435955050506020909201359150610a4c9050565b3480156103ea57600080fd5b5061017160048035600160a060020a0316906024803591604435918201910135610ba6565b34801561041b57600080fd5b50610244610c1e565b34801561043057600080fd5b50610188602460048035828101929101359035604435606435610c2d565b34801561045a57600080fd5b50610171610e9b565b34801561046f57600080fd5b50610171600160a060020a0360043516610ea4565b34801561049057600080fd5b506101c4600160a060020a0360043516610ec1565b3480156104b157600080fd5b50610244610f60565b600054600160a060020a03163314156105be57600160a060020a038216151561052d576040805160e560020a62461bcd02815260206004820152601f60248201527f494e56414c49445f45544845525f524543455049454e545f4144445245535300604482015290519081900360640190fd5b3031811115610586576040805160e560020a62461bcd02815260206004820152601f60248201527f494e56414c49445f56414c55455f544f5f5452414e534645525f455448455200604482015290519081900360640190fd5b604051600160a060020a0383169082156108fc029083906000818181858888f193505050501580156105bc573d6000803e3d6000fd5b505b5050565b60075481565b6105d1336106b3565b15156105dc57600080fd5b60045460ff1615156105ed57600080fd5b6004805460ff191690556040517fa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d1693390600090a1565b600154600090600160a060020a0316331461063f575060006106b0565b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a038416179091551681555b90565b60006106c660038363ffffffff610f6f16565b90505b919050565b60055481565b60008054600160a060020a03163314156106c957600160a060020a0382161515610700575060006106c9565b5060018054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff19909116178155919050565b600154600160a060020a031681565b60045460ff1690565b60008054819081908190600160a060020a03163314156108e05760008054600160a060020a0316945092505b84518310156108e057848381518110151561078b57fe5b6020908102909101810151604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051919450600160a060020a038516926370a08231926024808401938290030181600087803b1580156107f557600080fd5b505af1158015610809573d6000803e3d6000fd5b505050506040513d602081101561081f57600080fd5b5051905060008111156108d55781600160a060020a031663a9059cbb85836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156108a857600080fd5b505af11580156108bc573d6000803e3d6000fd5b505050506040513d60208110156108d257600080fd5b50505b600190920191610774565b5050505050565b6108f033610fa6565b565b60008054600160a060020a031633141561094b57503031600081111561094b5760008054604051600160a060020a039091169183156108fc02918491818181858888f193505050501580156105be573d6000803e3d6000fd5b50565b6000610959336109ab565b151561096457600080fd5b60078290556040805183815233602082015281517f8d51ede7a820f732751248d96cf93a0014b63e339199bdfa9606a0fd2f097264929181900390910190a1506001919050565b60006106c660028363ffffffff610f6f16565b6109c7336106b3565b15156109d257600080fd5b61094b81610fee565b6109e4336106b3565b15156109ef57600080fd5b60045460ff16156109ff57600080fd5b6004805460ff191660011790556040517f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75290600090a1565b60086020526000908152604090205460ff1681565b6000818382805b8751821015610b97578782815181101515610a6a57fe5b602090810290910101519050600283061515610b0557604080516020808201879052818301849052825180830384018152606090920192839052815191929182918401908083835b60208310610ad15780518252601f199092019160209182019101610ab2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209350610b86565b604080516020808201849052818301879052825180830384018152606090920192839052815191929182918401908083835b60208310610b565780518252601f199092019160209182019101610b37565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902093505b600283049250600182019150610a53565b50505094909414949350505050565b60045460ff1615610bb657600080fd5b600654600160a060020a03163314610c18576040805160e560020a62461bcd02815260206004820152601b60248201527f41495244524f505f544f4b454e5f4e4f545f535550504f525445440000000000604482015290519081900360640190fd5b50505050565b600054600160a060020a031681565b600454600090819060ff1615610c4257600080fd5b610c4e85853386611036565b60008681526008602052604090205490915060ff1615610cb8576040805160e560020a62461bcd02815260206004820152601760248201527f41495244524f505f414c52454144595f434c41494d4544000000000000000000604482015290519081900360640190fd5b610cf56007548888808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050508684610a4c565b1515610d4b576040805160e560020a62461bcd02815260206004820152601560248201527f41495244524f505f494e56414c49445f50524f4f460000000000000000000000604482015290519081900360640190fd5b600654604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018690529051600160a060020a039092169163a9059cbb916044808201926020929091908290030181600087803b158015610db857600080fd5b505af1158015610dcc573d6000803e3d6000fd5b505050506040513d6020811015610de257600080fd5b50511515610e3a576040805160e560020a62461bcd02815260206004820152601860248201527f41495244524f505f5452414e534645525f4641494c5552450000000000000000604482015290519081900360640190fd5b600085815260086020908152604091829020805460ff191660011790558151878152908101859052815133927f4384c6c40efec89e765e489f4828e8304ece51e3c8fddfbec1f8f26b9c60ffdf928290030190a25060019695505050505050565b6108f0336110e5565b610ead336109ab565b1515610eb857600080fd5b61094b8161112d565b60008054600160a060020a03163314156106c957600160a060020a0382161515610eed575060006106c9565b60008054604051600160a060020a03808616939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35060008054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff1991821617909155600180549091168155919050565b600654600160a060020a031681565b6000600160a060020a0382161515610f8657600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b610fb760038263ffffffff61117516565b604051600160a060020a038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b610fff60038263ffffffff6111ac16565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b6040805160208082018790528183018690526c01000000000000000000000000600160a060020a0386160260608301526074808301859052835180840390910181526094909201928390528151600093918291908401908083835b602083106110b05780518252601f199092019160209182019101611091565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912098975050505050505050565b6110f660028263ffffffff61117516565b604051600160a060020a038216907f3525e22824a8a7df2c9a6029941c824cf95b6447f1e13d5128fd3826d35afe8b90600090a250565b61113e60028263ffffffff6111ac16565b604051600160a060020a038216907f47d1c22a25bb3a5d4e481b9b1e6944c2eade3181a0a20b495ed61d35b5323f2490600090a250565b600160a060020a038116151561118a57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a03811615156111c157600080fd5b600160a060020a0316600090815260209190915260409020805460ff191660011790555600a165627a7a7230582005490f0de5b9880af027913ba4859be9478bd6001c4a48dac026bf56312b7746002900000000000000000000000042f9d07c5d4f4c7c5827b9199ed79600bb9f1517",
  "constructorArguments": "00000000000000000000000042f9d07c5d4f4c7c5827b9199ed79600bb9f1517"
}