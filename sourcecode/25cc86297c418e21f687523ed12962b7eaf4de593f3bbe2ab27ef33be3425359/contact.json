{
  "address": "0x5dd0815a4cf119ad91ba045bbbf879f3f7de3c68",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SKYFToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-03\n*/\n\npragma solidity 0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title SKYFChain Tokens\n * @dev SKYFChain Token, ERC20 implementation, contract based on Zeppelin contracts:\n * Ownable, BasicToken, StandardToken, ERC20Basic, Burnable\n*/\ncontract SKYFToken is Ownable {\n    using SafeMath for uint256;\n    \n    enum State {Active, Finalized}\n    State public state = State.Active;\n\n\n    /**\n     * @dev ERC20 descriptor variables\n     */\n    string public constant name = \"SKYFchain\";\n    string public constant symbol = \"SKYFT\";\n    uint8 public decimals = 18;\n\n    uint256 public constant startTime = 1534334400;\n    uint256 public constant airdropTime = startTime + 365 days;\n    uint256 public constant shortAirdropTime = startTime + 182 days;\n    \n    \n    uint256 public totalSupply_ = 1200 * 10 ** 24;\n\n    uint256 public constant crowdsaleSupply = 528 * 10 ** 24;\n    uint256 public constant networkDevelopmentSupply = 180 * 10 ** 24;\n    uint256 public constant communityDevelopmentSupply = 120 * 10 ** 24;\n    uint256 public constant reserveSupply = 114 * 10 ** 24; \n    uint256 public constant bountySupply = 18 * 10 ** 24;\n    uint256 public constant teamSupply = 240 * 10 ** 24;\n    \n\n    address public crowdsaleWallet;\n    address public networkDevelopmentWallet;\n    address public communityDevelopmentWallet;\n    address public reserveWallet;\n    address public bountyWallet;\n    address public teamWallet;\n\n    address public siteAccount;\n\n    mapping (address => mapping (address => uint256)) allowed;\n    mapping (address => uint256) balances;\n    mapping (address => uint256) airdrop;\n    mapping (address => uint256) shortenedAirdrop;\n\n        \n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Burn(address indexed burner, uint256 value);\n    event Airdrop(address indexed beneficiary, uint256 amount);\n\n    /**\n     * @dev Contract constructor\n     */\n    constructor(address _crowdsaleWallet\n                , address _networkDevelopmentWallet\n                , address _communityDevelopmentWallet\n                , address _reserveWallet\n                , address _bountyWallet\n                , address _teamWallet\n                , address _siteAccount) public {\n        require(_crowdsaleWallet != address(0));\n        require(_networkDevelopmentWallet != address(0));\n        require(_communityDevelopmentWallet != address(0));\n        require(_reserveWallet != address(0));\n        require(_bountyWallet != address(0));\n        require(_teamWallet != address(0));\n\n        require(_siteAccount != address(0));\n\n        crowdsaleWallet = _crowdsaleWallet;\n        networkDevelopmentWallet = _networkDevelopmentWallet;\n        communityDevelopmentWallet = _communityDevelopmentWallet;\n        reserveWallet = _reserveWallet;\n        bountyWallet = _bountyWallet;\n        teamWallet = _teamWallet;\n\n        siteAccount = _siteAccount;\n\n        // Issue 528 millions crowdsale tokens\n        _issueTokens(crowdsaleWallet, crowdsaleSupply);\n\n        // Issue 180 millions network development tokens\n        _issueTokens(networkDevelopmentWallet, networkDevelopmentSupply);\n\n        // Issue 120 millions community development tokens\n        _issueTokens(communityDevelopmentWallet, communityDevelopmentSupply);\n\n        // Issue 114 millions reserve tokens\n        _issueTokens(reserveWallet, reserveSupply);\n\n        // Issue 18 millions bounty tokens\n        _issueTokens(bountyWallet, bountySupply);\n\n        // Issue 240 millions team tokens\n        _issueTokens(teamWallet, teamSupply);\n\n        allowed[crowdsaleWallet][siteAccount] = crowdsaleSupply;\n        emit Approval(crowdsaleWallet, siteAccount, crowdsaleSupply);\n        allowed[crowdsaleWallet][owner] = crowdsaleSupply;\n        emit Approval(crowdsaleWallet, owner, crowdsaleSupply);\n    }\n\n    function _issueTokens(address _to, uint256 _amount) internal {\n        require(balances[_to] == 0);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(address(0), _to, _amount);\n    }\n\n    function _airdropUnlocked(address _who) internal view returns (bool) {\n        return now > airdropTime\n        || (now > shortAirdropTime && airdrop[_who] == 0) \n        || !isAirdrop(_who);\n    }\n\n    modifier erc20Allowed() {\n        require(state == State.Finalized || msg.sender == owner|| msg.sender == siteAccount || msg.sender == crowdsaleWallet);\n        require (_airdropUnlocked(msg.sender));\n        _;\n    }\n\n    modifier onlyOwnerOrSiteAccount() {\n        require(msg.sender == owner || msg.sender == siteAccount);\n        _;\n    }\n    \n    function setSiteAccountAddress(address _address) public onlyOwner {\n        require(_address != address(0));\n\n        uint256 allowance = allowed[crowdsaleWallet][siteAccount];\n        allowed[crowdsaleWallet][siteAccount] = 0;\n        emit Approval(crowdsaleWallet, siteAccount, 0);\n        allowed[crowdsaleWallet][_address] = allowed[crowdsaleWallet][_address].add(allowance);\n        emit Approval(crowdsaleWallet, _address, allowed[crowdsaleWallet][_address]);\n        siteAccount = _address;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n\n    /**\n     * @dev total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public erc20Allowed returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        require(_airdropUnlocked(_to));\n\n        \n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public erc20Allowed returns (bool) {\n        return _transferFrom(msg.sender, _from, _to, _value);\n    }\n\n    function _transferFrom(address _who, address _from, address _to, uint256 _value) internal returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_airdropUnlocked(_to) || _from == crowdsaleWallet);\n\n        uint256 _allowance = allowed[_from][_who];\n\n        require(_value <= _allowance);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][_who] = _allowance.sub(_value);\n\n        _recalculateAirdrop(_to);\n\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public erc20Allowed returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n    */\n    function increaseApproval(address _spender, uint256 _addedValue) public erc20Allowed returns (bool) {\n        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n    */\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public erc20Allowed returns (bool) {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n    */\n    function burn(uint256 _value) public erc20Allowed {\n        _burn(msg.sender, _value);\n    }\n\n    function _burn(address _who, uint256 _value) internal {\n        require(_value <= balances[_who]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        balances[_who] = balances[_who].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(_who, _value);\n        emit Transfer(_who, address(0), _value);\n    }\n\n    function finalize() public onlyOwner {\n        require(state == State.Active);\n        require(now > startTime);\n        state = State.Finalized;\n\n        uint256 crowdsaleBalance = balanceOf(crowdsaleWallet);\n\n        uint256 burnAmount = networkDevelopmentSupply.mul(crowdsaleBalance).div(crowdsaleSupply);\n        _burn(networkDevelopmentWallet, burnAmount);\n\n        burnAmount = communityDevelopmentSupply.mul(crowdsaleBalance).div(crowdsaleSupply);\n        _burn(communityDevelopmentWallet, burnAmount);\n\n        burnAmount = reserveSupply.mul(crowdsaleBalance).div(crowdsaleSupply);\n        _burn(reserveWallet, burnAmount);\n\n        burnAmount = bountySupply.mul(crowdsaleBalance).div(crowdsaleSupply);\n        _burn(bountyWallet, burnAmount);\n\n        burnAmount = teamSupply.mul(crowdsaleBalance).div(crowdsaleSupply);\n        _burn(teamWallet, burnAmount);\n\n        _burn(crowdsaleWallet, crowdsaleBalance);\n    }\n    \n    function addAirdrop(address _beneficiary, uint256 _amount) public onlyOwnerOrSiteAccount {\n        require(_beneficiary != crowdsaleWallet);\n        require(_beneficiary != networkDevelopmentWallet);\n        require(_beneficiary != communityDevelopmentWallet);\n        require(_beneficiary != bountyWallet);\n        require(_beneficiary != siteAccount);\n        \n\n        //Don't allow to block already bought tokens with airdrop.\n        require(balances[_beneficiary] == 0 || isAirdrop(_beneficiary));\n\n        if (shortenedAirdrop[_beneficiary] != 0) {\n            shortenedAirdrop[_beneficiary] = shortenedAirdrop[_beneficiary].add(_amount);\n        }\n        else {\n            airdrop[_beneficiary] = airdrop[_beneficiary].add(_amount);\n        }\n        \n        _transferFrom(msg.sender, crowdsaleWallet, _beneficiary, _amount);\n        emit Airdrop(_beneficiary, _amount);\n    }\n\n    function isAirdrop(address _who) public view returns (bool result) {\n        return airdrop[_who] > 0 || shortenedAirdrop[_who] > 0;\n    }\n\n    function _recalculateAirdrop(address _who) internal {\n        if(state == State.Active && isAirdrop(_who)) {\n            uint256 initialAmount = airdrop[_who];\n            if (initialAmount > 0) {\n                uint256 rate = balances[_who].div(initialAmount);\n                if (rate >= 4) {\n                    delete airdrop[_who];\n                } else if (rate >= 2) {\n                    delete airdrop[_who];\n                    shortenedAirdrop[_who] = initialAmount;\n                }\n            } else {\n                initialAmount = shortenedAirdrop[_who];\n                if (initialAmount > 0) {\n                    rate = balances[_who].div(initialAmount);\n                    if (rate >= 4) {\n                        delete shortenedAirdrop[_who];\n                    }\n                }\n            }\n        }\n    }\n   \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"reserveSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"networkDevelopmentSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityDevelopmentSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"networkDevelopmentWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shortAirdropTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSiteAccountAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isAirdrop\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityDevelopmentWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"siteAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_crowdsaleWallet\",\"type\":\"address\"},{\"name\":\"_networkDevelopmentWallet\",\"type\":\"address\"},{\"name\":\"_communityDevelopmentWallet\",\"type\":\"address\"},{\"name\":\"_reserveWallet\",\"type\":\"address\"},{\"name\":\"_bountyWallet\",\"type\":\"address\"},{\"name\":\"_teamWallet\",\"type\":\"address\"},{\"name\":\"_siteAccount\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526000805460a060020a61ffff02191675120000000000000000000000000000000000000000001790556b03e09de2596099e2b00000006001553480156200004a57600080fd5b5060405160e08062001d6383398101604090815281516020830151918301516060840151608085015160a086015160c09096015160008054600160a060020a031916331790559395929391929091600160a060020a0387161515620000ae57600080fd5b600160a060020a0386161515620000c457600080fd5b600160a060020a0385161515620000da57600080fd5b600160a060020a0384161515620000f057600080fd5b600160a060020a03831615156200010657600080fd5b600160a060020a03821615156200011c57600080fd5b600160a060020a03811615156200013257600080fd5b60028054600160a060020a0319908116600160a060020a038a811691909117928390556003805483168a83161790556004805483168983161790556005805483168883161790556006805483168783161790556007805483168683161790556008805490921684821617909155620001c191166b01b4c0595a86aa1c100000006401000000006200037c810204565b600354620001ed90600160a060020a03166a94e47b8d681715340000006401000000006200037c810204565b6004546200021990600160a060020a03166a6342fd08f00f63780000006401000000006200037c810204565b6005546200024590600160a060020a03166a5e4c70621741d1b20000006401000000006200037c810204565b6006546200027190600160a060020a03166a0ee3a5f48a68b5520000006401000000006200037c810204565b6007546200029d90600160a060020a03166ac685fa11e01ec6f00000006401000000006200037c810204565b60028054600160a060020a0390811660009081526009602090815260408083206008805486168552908352928190206b01b4c0595a86aa1c100000009081905592549454815193845290519484169493169260008051602062001d438339815191529281900390910190a360028054600160a060020a03908116600090815260096020908152604080832083548516845282528083206b01b4c0595a86aa1c100000009081905592549454815193845290519484169493169260008051602062001d438339815191529281900390910190a3505050505050506200043f565b600160a060020a0382166000908152600a602052604090205415620003a057600080fd5b600160a060020a0382166000908152600a6020526040902054620003d390826401000000006200173a6200042b82021704565b600160a060020a0383166000818152600a602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b818101828110156200043957fe5b92915050565b6118f4806200044f6000396000f3006080604052600436106101c15763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166303d41eb681146101c657806306fdde03146101ed5780630726611714610277578063095ea7b31461028c5780630b87572b146102c457806318160ddd146102d957806323b872dd146102ee5780632cfac6ec14610318578063313ce5671461032d578063324536eb14610358578063389ab31c1461036d5780633b9689631461039e57806342966c68146103b35780634bb278f3146103cd5780634c2111cf146103e257806356ff83c814610403578063599270441461041857806363665f2e1461042d578063661884631461045157806370a082311461047557806374acb5d61461049657806374acf0b1146104b757806378e97925146104cc57806386852fd7146104e15780638da5cb5b146104f657806395d89b411461050b578063a9059cbb14610520578063c19d93fb14610544578063c403f90f1461057d578063cdcb3cdb14610592578063d58c4b85146105a7578063d72b11bd146105bc578063d73dd623146105d1578063dd62ed3e146105f5578063e57605201461061c578063f2fde38b14610631575b600080fd5b3480156101d257600080fd5b506101db610652565b60408051918252519081900360200190f35b3480156101f957600080fd5b50610202610661565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561023c578181015183820152602001610224565b50505050905090810190601f1680156102695780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561028357600080fd5b506101db610698565b34801561029857600080fd5b506102b0600160a060020a03600435166024356106a7565b604080519115158252519081900360200190f35b3480156102d057600080fd5b506101db610778565b3480156102e557600080fd5b506101db610787565b3480156102fa57600080fd5b506102b0600160a060020a036004358116906024351660443561078d565b34801561032457600080fd5b506101db61081c565b34801561033957600080fd5b5061034261082b565b6040805160ff9092168252519081900360200190f35b34801561036457600080fd5b506101db61084d565b34801561037957600080fd5b50610382610853565b60408051600160a060020a039092168252519081900360200190f35b3480156103aa57600080fd5b506101db610862565b3480156103bf57600080fd5b506103cb60043561086a565b005b3480156103d957600080fd5b506103cb6108f0565b3480156103ee57600080fd5b506103cb600160a060020a0360043516610af2565b34801561040f57600080fd5b50610382610c51565b34801561042457600080fd5b50610382610c60565b34801561043957600080fd5b506103cb600160a060020a0360043516602435610c6f565b34801561045d57600080fd5b506102b0600160a060020a0360043516602435610e5d565b34801561048157600080fd5b506101db600160a060020a0360043516610fb8565b3480156104a257600080fd5b506102b0600160a060020a0360043516610fd3565b3480156104c357600080fd5b50610382611011565b3480156104d857600080fd5b506101db611020565b3480156104ed57600080fd5b506101db611028565b34801561050257600080fd5b50610382611037565b34801561051757600080fd5b50610202611046565b34801561052c57600080fd5b506102b0600160a060020a036004351660243561107d565b34801561055057600080fd5b506105596111ed565b6040518082600181111561056957fe5b60ff16815260200191505060405180910390f35b34801561058957600080fd5b506101db6111fd565b34801561059e57600080fd5b506101db611205565b3480156105b357600080fd5b50610382611215565b3480156105c857600080fd5b50610382611224565b3480156105dd57600080fd5b506102b0600160a060020a0360043516602435611233565b34801561060157600080fd5b506101db600160a060020a0360043581169060243516611335565b34801561062857600080fd5b50610382611360565b34801561063d57600080fd5b506103cb600160a060020a036004351661136f565b6a5e4c70621741d1b200000081565b60408051808201909152600981527f534b5946636861696e0000000000000000000000000000000000000000000000602082015281565b6a94e47b8d6817153400000081565b6000600160005460a060020a900460ff1660018111156106c357fe5b14806106d95750600054600160a060020a031633145b806106ee5750600854600160a060020a031633145b806107035750600254600160a060020a031633145b151561070e57600080fd5b61071733611403565b151561072257600080fd5b336000818152600960209081526040808320600160a060020a03881680855290835292819020869055805186815290519293926000805160206118a9833981519152929181900390910190a35060015b92915050565b6a6342fd08f00f637800000081565b60015490565b6000600160005460a060020a900460ff1660018111156107a957fe5b14806107bf5750600054600160a060020a031633145b806107d45750600854600160a060020a031633145b806107e95750600254600160a060020a031633145b15156107f457600080fd5b6107fd33611403565b151561080857600080fd5b61081433858585611451565b949350505050565b6ac685fa11e01ec6f000000081565b6000547501000000000000000000000000000000000000000000900460ff1681565b60015481565b600354600160a060020a031681565b635c6406c081565b600160005460a060020a900460ff16600181111561088457fe5b148061089a5750600054600160a060020a031633145b806108af5750600854600160a060020a031633145b806108c45750600254600160a060020a031633145b15156108cf57600080fd5b6108d833611403565b15156108e357600080fd5b6108ed33826115fb565b50565b600080548190600160a060020a0316331461090a57600080fd5b6000805460a060020a900460ff16600181111561092357fe5b1461092d57600080fd5b635b7415c0421161093d57600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a17905560025461097690600160a060020a0316610fb8565b91506109af6b01b4c0595a86aa1c100000006109a36a94e47b8d681715340000008563ffffffff6116fc16565b9063ffffffff61172516565b6003549091506109c890600160a060020a0316826115fb565b6109f36b01b4c0595a86aa1c100000006109a36a6342fd08f00f63780000008563ffffffff6116fc16565b600454909150610a0c90600160a060020a0316826115fb565b610a376b01b4c0595a86aa1c100000006109a36a5e4c70621741d1b20000008563ffffffff6116fc16565b600554909150610a5090600160a060020a0316826115fb565b610a7b6b01b4c0595a86aa1c100000006109a36a0ee3a5f48a68b5520000008563ffffffff6116fc16565b600654909150610a9490600160a060020a0316826115fb565b610abf6b01b4c0595a86aa1c100000006109a36ac685fa11e01ec6f00000008563ffffffff6116fc16565b600754909150610ad890600160a060020a0316826115fb565b600254610aee90600160a060020a0316836115fb565b5050565b60008054600160a060020a03163314610b0a57600080fd5b600160a060020a0382161515610b1f57600080fd5b5060028054600160a060020a03908116600090815260096020908152604080832060088054861685529083528184208054908590559054955482519485529151909585169491909116926000805160206118a983398151915292908290030190a3600254600160a060020a03908116600090815260096020908152604080832093861683529290522054610bb9908263ffffffff61173a16565b60028054600160a060020a039081166000908152600960208181526040808420898616808652908352818520979097559454909316808352908352838220858352835290839020548351908152925190926000805160206118a983398151915292908290030190a3506008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600160a060020a031681565b600754600160a060020a031681565b600054600160a060020a0316331480610c925750600854600160a060020a031633145b1515610c9d57600080fd5b600254600160a060020a0383811691161415610cb857600080fd5b600354600160a060020a0383811691161415610cd357600080fd5b600454600160a060020a0383811691161415610cee57600080fd5b600654600160a060020a0383811691161415610d0957600080fd5b600854600160a060020a0383811691161415610d2457600080fd5b600160a060020a0382166000908152600a60205260409020541580610d4d5750610d4d82610fd3565b1515610d5857600080fd5b600160a060020a0382166000908152600c602052604090205415610dbd57600160a060020a0382166000908152600c6020526040902054610d9f908263ffffffff61173a16565b600160a060020a0383166000908152600c6020526040902055610e00565b600160a060020a0382166000908152600b6020526040902054610de6908263ffffffff61173a16565b600160a060020a0383166000908152600b60205260409020555b600254610e19903390600160a060020a03168484611451565b50604080518281529051600160a060020a038416917f8c32c568416fcf97be35ce5b27844cfddcd63a67a1a602c3595ba5dac38f303a919081900360200190a25050565b600080600160005460a060020a900460ff166001811115610e7a57fe5b1480610e905750600054600160a060020a031633145b80610ea55750600854600160a060020a031633145b80610eba5750600254600160a060020a031633145b1515610ec557600080fd5b610ece33611403565b1515610ed957600080fd5b50336000908152600960209081526040808320600160a060020a038716845290915290205480831115610f2f57336000908152600960209081526040808320600160a060020a0388168452909152812055610f64565b610f3f818463ffffffff61174716565b336000908152600960209081526040808320600160a060020a03891684529091529020555b336000818152600960209081526040808320600160a060020a0389168085529083529281902054815190815290519293926000805160206118a9833981519152929181900390910190a35060019392505050565b600160a060020a03166000908152600a602052604090205490565b600160a060020a0381166000908152600b6020526040812054811080610772575050600160a060020a03166000908152600c60205260408120541190565b600454600160a060020a031681565b635b7415c081565b6a0ee3a5f48a68b55200000081565b600054600160a060020a031681565b60408051808201909152600581527f534b594654000000000000000000000000000000000000000000000000000000602082015281565b6000600160005460a060020a900460ff16600181111561109957fe5b14806110af5750600054600160a060020a031633145b806110c45750600854600160a060020a031633145b806110d95750600254600160a060020a031633145b15156110e457600080fd5b6110ed33611403565b15156110f857600080fd5b600160a060020a038316151561110d57600080fd5b336000908152600a602052604090205482111561112957600080fd5b61113283611403565b151561113d57600080fd5b336000908152600a602052604090205461115d908363ffffffff61174716565b336000908152600a602052604080822092909255600160a060020a0385168152205461118f908363ffffffff61173a16565b600160a060020a0384166000818152600a60209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b60005460a060020a900460ff1681565b635d55494081565b6b01b4c0595a86aa1c1000000081565b600854600160a060020a031681565b600554600160a060020a031681565b6000600160005460a060020a900460ff16600181111561124f57fe5b14806112655750600054600160a060020a031633145b8061127a5750600854600160a060020a031633145b8061128f5750600254600160a060020a031633145b151561129a57600080fd5b6112a333611403565b15156112ae57600080fd5b336000908152600960209081526040808320600160a060020a03871684529091529020546112e2908363ffffffff61173a16565b336000818152600960209081526040808320600160a060020a0389168085529083529281902085905580519485525191936000805160206118a9833981519152929081900390910190a350600192915050565b600160a060020a03918216600090815260096020908152604080832093909416825291909152205490565b600654600160a060020a031681565b600054600160a060020a0316331461138657600080fd5b600160a060020a038116151561139b57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000635d55494042118061143b5750635c6406c04211801561143b5750600160a060020a0382166000908152600b6020526040902054155b80610772575061144a82610fd3565b1592915050565b600080600160a060020a038416151561146957600080fd5b600160a060020a0385166000908152600a602052604090205483111561148e57600080fd5b61149784611403565b806114af5750600254600160a060020a038681169116145b15156114ba57600080fd5b50600160a060020a03808516600090815260096020908152604080832093891683529290522054808311156114ee57600080fd5b600160a060020a0385166000908152600a6020526040902054611517908463ffffffff61174716565b600160a060020a038087166000908152600a6020526040808220939093559086168152205461154c908463ffffffff61173a16565b600160a060020a0385166000908152600a6020526040902055611575818463ffffffff61174716565b600160a060020a038087166000908152600960209081526040808320938b16835292905220556115a484611759565b83600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a350600195945050505050565b600160a060020a0382166000908152600a602052604090205481111561162057600080fd5b600160a060020a0382166000908152600a6020526040902054611649908263ffffffff61174716565b600160a060020a0383166000908152600a6020526040902055600154611675908263ffffffff61174716565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600082151561170d57506000610772565b5081810281838281151561171d57fe5b041461077257fe5b6000818381151561173257fe5b049392505050565b8181018281101561077257fe5b60008282111561175357fe5b50900390565b6000808060005460a060020a900460ff16600181111561177557fe5b148015611786575061178683610fd3565b156118a357600160a060020a0383166000908152600b6020526040812054925082111561183457600160a060020a0383166000908152600a60205260409020546117d6908363ffffffff61172516565b9050600481106117fe57600160a060020a0383166000908152600b602052604081205561182f565b6002811061182f57600160a060020a0383166000908152600b60209081526040808320839055600c90915290208290555b6118a3565b600160a060020a0383166000908152600c602052604081205492508211156118a357600160a060020a0383166000908152600a602052604090205461187f908363ffffffff61172516565b9050600481106118a357600160a060020a0383166000908152600c60205260408120555b50505056008c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a165627a7a72305820aba4fccf134a19c1b986b116186415ec4946963de5ba9fdb6225959805341c8500298c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92500000000000000000000000079cee3a98afc7f46436e71b452751b8b936b712900000000000000000000000073981535a4c589fdef072d18aabd66bbe0a97be90000000000000000000000003b48862b5fa558e9397f60618eef5b97c94988b6000000000000000000000000398786bc57a6103914d9a7a7e189c7a7f3867f4b000000000000000000000000b7af6257759a3d2bfca9c1c1404b3c48ad346ef20000000000000000000000000f98b76664ecf1a3488e3c4d97017940f28e1da7000000000000000000000000930c1123ed32cdbc1cc231eab60c90c0e42bc929",
  "constructorArguments": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92500000000000000000000000079cee3a98afc7f46436e71b452751b8b936b712900000000000000000000000073981535a4c589fdef072d18aabd66bbe0a97be90000000000000000000000003b48862b5fa558e9397f60618eef5b97c94988b6000000000000000000000000398786bc57a6103914d9a7a7e189c7a7f3867f4b000000000000000000000000b7af6257759a3d2bfca9c1c1404b3c48ad346ef20000000000000000000000000f98b76664ecf1a3488e3c4d97017940f28e1da7000000000000000000000000930c1123ed32cdbc1cc231eab60c90c0e42bc929"
}