{
  "address": "0x2b96efc474b9fb935951ca65f10d0cecdc480d57",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SplitCoinFactory",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-27\n*/\n\npragma solidity ^0.4.18;\n\nlibrary CSCLib {\n\n\tuint constant MILLION = 1000000;\n\tuint constant GASLIMIT = 65000;\n\n\n\tstruct Split {\n\t\taddress to;\n\t\tuint ppm;\n\t}\n\n\tstruct CSCStorage {\n\t\tmapping(address => uint) lastUserClaim;\n\t\tuint[] deposits;\n\t\tbool isClaimable;\n\n\t\taddress developer;\n\t\tuint dev_fee;\n\t\tuint refer_fee;\n\t\tSplit[] splits;\n\t\tmapping(address => uint) userSplit;\n\t}\n\n\tevent SplitTransfer(address to, uint amount, uint balance);\n\n\t/*\n\tself: a storage pointer\n\n\tmembers: an array of addresses\n\n\tppms: an array of integers that should sum to 1 million.\n\t\tRepresents how much ether a user should get\n\n\trefer: the address of a referral contract that referred this user.\n\t\tReferral contract should be a claimable contract\n\n\t*/\n\tfunction init(CSCStorage storage self,  address[] members, uint[] ppms, address refer) internal {\n\t\tuint shift_amt = self.dev_fee / members.length;\n\t\tuint remainder = self.dev_fee % members.length * members.length / 10;\n\t\tuint dev_total = self.dev_fee + remainder;\n\t\tself.deposits.push(0);\n\t\tif(refer != 0x0){\n\t\t\taddSplit(self, Split({to: self.developer, ppm: dev_total - self.refer_fee}));\n\t\t\taddSplit(self, Split({to: refer, ppm: self.refer_fee}));\n\t\t} else {\n\t\t\taddSplit(self, Split({to: self.developer, ppm: dev_total}));\n\t\t}\n\n\t\tuint sum = 0;\n\t\tfor(uint index = 0; index < members.length; index++) {\n\t\t\tsum += ppms[index];\n\t\t\taddSplit(self, Split({to: members[index], ppm: ppms[index] - shift_amt}));\n\t\t}\n\t\trequire(sum >= MILLION - 1 && sum < MILLION + 1 );\n\t}\n\n\tfunction addSplit(CSCStorage storage self, Split newSplit) internal {\n\t\trequire(newSplit.ppm > 0);\n\t\tuint index = self.userSplit[newSplit.to];\n\t\tif(index > 0) {\n\t\t\tnewSplit.ppm += self.splits[index].ppm;\n\t\t\tself.splits[index] = newSplit;\n\t\t} else {\n\t\t\tself.userSplit[newSplit.to] = self.splits.length;\n\t\t\tself.lastUserClaim[newSplit.to] = self.deposits.length;\n\t\t\tself.splits.push(newSplit);\n\t\t}\n\t}\n\n\tfunction payAll(CSCStorage storage self) internal {\n\t\tfor(uint index = 0; index < self.splits.length; index++) {\n\t\t\tuint value = (msg.value) * self.splits[index].ppm / MILLION;\n\t\t\tif(value > 0 ) {\n\t\t\t\trequire(self.splits[index].to.call.gas(GASLIMIT).value(value)());\n\t\t\t\tSplitTransfer(self.splits[index].to, value, this.balance);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction getSplit(CSCStorage storage self, uint index) internal view returns (Split) {\n\t\treturn self.splits[index];\n\t}\n\n\tfunction getSplitCount(CSCStorage storage self) internal view returns (uint count) {\n\t\treturn self.splits.length;\n\t}\n\n\tfunction claimFor(CSCStorage storage self, address user) internal {\n\t\trequire(self.isClaimable);\n\t\tuint sum = getClaimableBalanceFor(self, user);\n\t\tuint splitIndex = self.userSplit[user];\n\t\tself.lastUserClaim[user] = self.deposits.length;\n\t\tif(sum > 0) {\n\t\t\trequire(self.splits[splitIndex].to.call.gas(GASLIMIT).value(sum)());\n\t\t\tSplitTransfer(self.splits[splitIndex].to, sum, this.balance);\n\t\t}\n\t}\n\n\tfunction claim(CSCStorage storage self)  internal {\n\t\treturn claimFor(self, msg.sender);\n\t}\n\n\tfunction getClaimableBalanceFor(CSCStorage storage self, address user) internal view returns (uint balance) {\n\t\tuint splitIndex = self.userSplit[user];\n\t\tuint lastClaimIndex = self.lastUserClaim[user];\n\t\tuint unclaimed = 0;\n\t\tif(self.splits[splitIndex].to == user) {\n\t\t\tfor(uint depositIndex = lastClaimIndex; depositIndex < self.deposits.length; depositIndex++) {\n\t\t\t\tuint value = self.deposits[depositIndex] * self.splits[splitIndex].ppm / MILLION;\n\t\t\t\tunclaimed += value;\n\t\t\t}\n\t\t}\n\t\treturn unclaimed;\n\t}\n\n\tfunction getClaimableBalance(CSCStorage storage self)  internal view returns (uint balance) {\n\t\treturn getClaimableBalanceFor(self, msg.sender);\n\t}\n\n\tfunction transfer(CSCStorage storage self, address to, uint ppm) internal {\n\t\trequire(getClaimableBalanceFor(self, msg.sender) == 0.0);\n\t\trequire(getClaimableBalanceFor(self, to) == 0.0);\n\t\trequire(ppm > 0);\n\t\t// neither user can have a pending balance to use transfer\n\t\tuint splitIndex = self.userSplit[msg.sender];\n\t\tif(splitIndex > 0 && self.splits[splitIndex].to == msg.sender && self.splits[splitIndex].ppm >= ppm) {\n\t\t\tself.splits[splitIndex].ppm -= ppm;\n\t\t\taddSplit(self, Split({to: to, ppm: ppm}));\n\t\t}\n\t}\n\n\tfunction pay(CSCStorage storage self) internal {\n\t\tif(self.isClaimable) {\n\t\t\tself.deposits.push(msg.value);\n\t\t} else {\n\t\t\tpayAll(self);\n\t\t}\n\t}\n}\ncontract ClaimableSplitCoin {\n\n\tusing CSCLib for CSCLib.CSCStorage;\n\n\tCSCLib.CSCStorage csclib;\n\n\tfunction ClaimableSplitCoin(address[] members, uint[] ppms, address refer, bool claimable) public {\n\t\tcsclib.isClaimable = claimable;\n\t\tcsclib.dev_fee = 2500;\n\t\tcsclib.developer = 0xaB48Dd4b814EBcb4e358923bd719Cd5cd356eA16;\n\t\tcsclib.refer_fee = 250;\n\t\tcsclib.init(members, ppms, refer);\n\t}\n\n\tfunction () public payable {\n\t\tcsclib.pay();\n\t}\n\n\tfunction developer() public view returns(address) {\n\t\treturn csclib.developer;\n\t}\n\n\tfunction getSplitCount() public view returns (uint count) {\n\t\treturn csclib.getSplitCount();\n\t}\n\n\tfunction splits(uint index) public view returns (address to, uint ppm) {\n\t\treturn (csclib.splits[index].to, csclib.splits[index].ppm);\n\t}\n\n\tfunction isClaimable() public view returns (bool) {\n\t\treturn csclib.isClaimable;\n\t}\n\n\tevent SplitTransfer(address to, uint amount, uint balance);\n\n\tfunction claimFor(address user) public {\n\t\tcsclib.claimFor(user);\n\t}\n\n\tfunction claim() public {\n\t\tcsclib.claimFor(msg.sender);\n\t}\n\n\tfunction getClaimableBalanceFor(address user) public view returns (uint balance) {\n\t\treturn csclib.getClaimableBalanceFor(user);\n\t}\n\n\tfunction getClaimableBalance() public view returns (uint balance) {\n\t\treturn csclib.getClaimableBalanceFor(msg.sender);\n\t}\n\n\tfunction transfer(address to, uint ppm) public {\n\t\tcsclib.transfer(to, ppm);\n\t}\n}\ncontract SplitCoinFactory {\n  mapping(address => address[]) public contracts;\n  mapping(address => uint) public referralContracts;\n  mapping(address => address) public referredBy;\n  mapping(address => address[]) public referrals;\n  address[] public deployed;\n  event Deployed (\n    address _deployed\n  );\n\n\n  function make(address[] users, uint[] ppms, address refer, bool claimable) public returns (address) {\n    address referContract = referredBy[msg.sender];\n    if(refer != 0x0 && referContract == 0x0 && contracts[refer].length > 0 ) {\n      uint referContractIndex = referralContracts[refer] - 1;\n      if(referContractIndex >= 0 && refer != msg.sender) {\n        referContract = contracts[refer][referContractIndex];\n        referredBy[msg.sender] = referContract;\n        referrals[refer].push(msg.sender);\n      }\n    }\n    address sc = new ClaimableSplitCoin(users, ppms, referContract, claimable);\n    contracts[msg.sender].push(sc);\n    deployed.push(sc);\n    Deployed(sc);\n    return sc;\n  }\n\n  function generateReferralAddress(address refer) public returns (address) {\n    uint[] memory ppms = new uint[](1);\n    address[] memory users = new address[](1);\n    ppms[0] = 1000000;\n    users[0] = msg.sender;\n\n    address referralContract = make(users, ppms, refer, true);\n    if(referralContract != 0x0) {\n      uint index = contracts[msg.sender].length;\n      referralContracts[msg.sender] = index;\n    }\n    return referralContract;\n  }\n}",
  "bytecode": "6060604052341561000f57600080fd5b6117e98061001e6000396000f3006060604052600436106200008a5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166304f74b5981146200008f57806315b40ec0146200014f578063352bbdff14620001685780634d6aa2e5146200019c578063a90f8e9a14620001be578063e697b5d814620001e0578063ed23f8c31462000205575b600080fd5b34156200009b57600080fd5b6200013360046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965050600160a060020a038535169460200135151593506200022a92505050565b604051600160a060020a03909116815260200160405180910390f35b34156200015b57600080fd5b6200013360043562000553565b34156200017457600080fd5b6200018a600160a060020a03600435166200057c565b60405190815260200160405180910390f35b3415620001a857600080fd5b62000133600160a060020a03600435166200058e565b3415620001ca57600080fd5b62000133600160a060020a036004351662000680565b3415620001ec57600080fd5b62000133600160a060020a03600435166024356200069b565b34156200021157600080fd5b62000133600160a060020a0360043516602435620006d3565b600160a060020a0333811660009081526002602052604081205490919081169082908190861615801590620002665750600160a060020a038316155b8015620002895750600160a060020a038616600090815260208190526040812054115b156200039657600160a060020a0386166000908152600160205260408120546000190192508210801590620002d0575033600160a060020a031686600160a060020a031614155b156200039657600160a060020a0386166000908152602081905260409020805483908110620002fb57fe5b600091825260208083209091015433600160a060020a039081168452600283526040808520805473ffffffffffffffffffffffffffffffffffffffff19169383169384179055908a1684526003909252912080549194509060018101620003638382620006ef565b506000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff191633600160a060020a03161790555b87878487620003a46200071b565b600160a060020a03831660408201528115156060820152608080825281906020820190820187818151815260200191508051906020019060200280838360005b83811015620003fe578082015183820152602001620003e4565b50505050905001838103825286818151815260200191508051906020019060200280838360005b838110156200043f57808201518382015260200162000425565b505050509050019650505050505050604051809103906000f08015156200046557600080fd5b600160a060020a033316600090815260208190526040902080549192509060018101620004938382620006ef565b506000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790556004805460018101620004d98382620006ef565b506000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790557ff40fcec21964ffb566044d083b4073f29f7f7929110ea19e1b3ebe375d89055e81604051600160a060020a03909116815260200160405180910390a1979650505050505050565b60048054829081106200056257fe5b600091825260209091200154600160a060020a0316905081565b60016020526000908152604090205481565b60006200059a6200072c565b620005a46200072c565b6000806001604051805910620005b75750595b908082528060200260200182016040525093506001604051805910620005da5750595b90808252806020026020018201604052509250620f424084600081518110620005ff57fe5b6020908102909101015233836000815181106200061857fe5b600160a060020a039092166020928302909101909101526200063e83858860016200022a565b9150600160a060020a03821615620006775750600160a060020a0333166000908152602081815260408083205460019092529091208190555b50949350505050565b600260205260009081526040902054600160a060020a031681565b600360205281600052604060002081815481101515620006b757fe5b600091825260209091200154600160a060020a03169150829050565b600060205281600052604060002081815481101515620006b757fe5b8154818355818115116200071657600083815260209020620007169181019083016200073e565b505050565b60405161105b806200076383390190565b60206040519081016040526000815290565b6200075f91905b808211156200075b576000815560010162000745565b5090565b905600606060405234156200001057600080fd5b6040516200105b3803806200105b8339810160405280805182019190602001805182019190602001805191906020018051600280546109c460035560ff19168215151761010060a860020a03191674ab48dd4b814ebcb4e358923bd719cd5cd356ea160017905560fa60045591506200009d90506000858585640100000000620000a78102620009a41704565b50505050620004c4565b600080600080600087518960030154811515620000c057fe5b049450600a885189518b60030154811515620000d857fe5b0602811515620000e457fe5b0493508389600301540192508860010180548060010182816200010891906200041c565b506000918252602082200155600160a060020a03861615620001a75762000168896040805190810160405260028c01546101009004600160a060020a0316815260048c015486036020820152640100000000620002ac81026200077c1704565b620001a18960408051908101604052600160a060020a038916815260048c015460208201526401000000006200077c620002ac82021704565b620001e6565b620001e6896040805190810160405260028c01546101009004600160a060020a0316815260208101869052640100000000620002ac81026200077c1704565b5060009050805b87518110156200027f578681815181106200020457fe5b9060200190602002015182019150620002768960408051908101604052808b85815181106200022f57fe5b90602001906020020151600160a060020a03168152602001888b86815181106200025557fe5b906020019060200201510390526401000000006200077c620002ac82021704565b600101620001ed565b620f423f8210801590620002955750620f424182105b1515620002a157600080fd5b505050505050505050565b600080826020015111620002bf57600080fd5b6006830160008351600160a060020a0316600160a060020a0316815260200190815260200160002054905060008111156200037657600583018054829081106200030557fe5b9060005260206000209060020201600101548260200181815101905250600583018054839190839081106200033657fe5b906000526020600020906002020160008201518154600160a060020a031916600160a060020a039190911617815560208201516001909101555062000417565b60058301546006840160008451600160a060020a03168152602081019190915260400160009081209190915560018401549084908451600160a060020a0316815260208101919091526040016000205560058301805460018101620003dc838262000443565b6000928352602090922084916002020181518154600160a060020a031916600160a060020a0391909116178155602082015181600101555050505b505050565b81548183558181151162000417576000838152602090206200041791810190830162000472565b815481835581811511620004175760020281600202836000526020600020918201910162000417919062000496565b6200049391905b808211156200048f576000815560010162000479565b5090565b90565b6200049391905b808211156200048f578054600160a060020a0319168155600060018201556002016200049d565b610b8780620004d46000396000f3006060604052600436106100985763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663187d395481146100a45780634e71d92d146100d557806374478bb3146100e8578063884c30061461010f578063a9059cbb14610147578063ca4b208b14610169578063cc490e6414610198578063ddeae033146101ab578063e0bd3015146101ca575b6100a260006101dd565b005b34156100af57600080fd5b6100c3600160a060020a0360043516610220565b60405190815260200160405180910390f35b34156100e057600080fd5b6100a2610238565b34156100f357600080fd5b6100fb61024b565b604051901515815260200160405180910390f35b341561011a57600080fd5b610125600435610255565b604051600160a060020a03909216825260208201526040908101905180910390f35b341561015257600080fd5b6100a2600160a060020a03600435166024356102ae565b341561017457600080fd5b61017c6102c4565b604051600160a060020a03909116815260200160405180910390f35b34156101a357600080fd5b6100c36102d8565b34156101b657600080fd5b6100a2600160a060020a03600435166102e9565b34156101d557600080fd5b6100c36102fa565b600281015460ff16156102145780600101805480600101828161020091906108fe565b50600091825260209091203491015561021d565b61021d8161030c565b50565b6000610232818363ffffffff61044216565b92915050565b61024960003363ffffffff61052016565b565b60025460ff165b90565b6005805460009182918490811061026857fe5b600091825260209091206002909102015460058054600160a060020a03909216918590811061029357fe5b90600052602060002090600202016001015491509150915091565b6102c06000838363ffffffff61065b16565b5050565b6002546101009004600160a060020a031690565b60006102e46000610775565b905090565b61021d60008263ffffffff61052016565b60006102e4813363ffffffff61044216565b6000805b600583015482101561043d57620f4240836005018381548110151561033157fe5b906000526020600020906002020160010154340281151561034e57fe5b0490506000811115610432576005830180548390811061036a57fe5b6000918252602090912060029091020154600160a060020a031661fde882604051600060405180830381858888f1935050505015156103a857600080fd5b7f591ead3692e297aa9d89d78358116f5c9aa5d4d58a59f7a978d730ba89a61e4083600501838154811015156103da57fe5b6000918252602090912060029091020154600160a060020a039081169083903016316040518084600160a060020a0316600160a060020a03168152602001838152602001828152602001935050505060405180910390a15b600190910190610310565b505050565b600160a060020a038116600081815260068401602090815260408083205491869052822054600586018054939492939192859283928392918790811061048457fe5b6000918252602090912060029091020154600160a060020a03161415610514578391505b600188015482101561051457620f424088600501868154811015156104c957fe5b90600052602060002090600202016001015489600101848154811015156104ec57fe5b9060005260206000209001540281151561050257fe5b049283019260019092019190506104a8565b50909695505050505050565b6002820154600090819060ff16151561053857600080fd5b6105428484610442565b600160a060020a038416600090815260068601602090815260408083205460018901549289905290832091909155919350909150821115610655576005840180548290811061058d57fe5b6000918252602090912060029091020154600160a060020a031661fde883604051600060405180830381858888f1935050505015156105cb57600080fd5b7f591ead3692e297aa9d89d78358116f5c9aa5d4d58a59f7a978d730ba89a61e4084600501828154811015156105fd57fe5b6000918252602090912060029091020154600160a060020a039081169084903016316040518084600160a060020a0316600160a060020a03168152602001838152602001828152602001935050505060405180910390a15b50505050565b60006106678433610442565b1561067157600080fd5b61067b8484610442565b1561068557600080fd5b6000821161069257600080fd5b50600160a060020a033316600090815260068401602052604081205490811180156106ef575033600160a060020a031684600501828154811015156106d357fe5b6000918252602090912060029091020154600160a060020a0316145b801561071d575081846005018281548110151561070857fe5b90600052602060002090600202016001015410155b156106555781846005018281548110151561073457fe5b6000918252602090912060016002909202010180549190910390556106558460408051908101604052600160a060020a03861681526020810185905261077c565b6005015490565b60008082602001511161078e57600080fd5b6006830160008351600160a060020a0316600160a060020a03168152602001908152602001600020549050600081111561084e57600583018054829081106107d257fe5b90600052602060002090600202016001015482602001818151019052506005830180548391908390811061080257fe5b90600052602060002090600202016000820151815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039190911617815560208201516001909101555061043d565b60058301546006840160008451600160a060020a03168152602081019190915260400160009081209190915560018401549084908451600160a060020a03168152602081019190915260400160002055600583018054600181016108b28382610922565b600092835260209092208491600202018151815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039190911617815560208201518160010155505050505050565b81548183558181151161043d5760008381526020902061043d91810190830161094e565b81548183558181151161043d5760020281600202836000526020600020918201910161043d919061096c565b61025291905b808211156109685760008155600101610954565b5090565b61025291905b8082111561096857805473ffffffffffffffffffffffffffffffffffffffff1916815560006001820155600201610972565b6000806000806000875189600301548115156109bc57fe5b049450600a885189518b600301548115156109d357fe5b06028115156109de57fe5b049350838960030154019250886001018054806001018281610a0091906108fe565b506000918252602082200155600160a060020a03861615610a7d57610a4f896040805190810160405260028c01546101009004600160a060020a0316815260048c01548603602082015261077c565b610a788960408051908101604052600160a060020a038916815260048c0154602082015261077c565b610aac565b610aac896040805190810160405260028c01546101009004600160a060020a031681526020810186905261077c565b5060009050805b8751811015610b3057868181518110610ac857fe5b9060200190602002015182019150610b288960408051908101604052808b8581518110610af157fe5b90602001906020020151600160a060020a03168152602001888b8681518110610b1657fe5b9060200190602002015103905261077c565b600101610ab3565b620f423f8210801590610b455750620f424182105b1515610b5057600080fd5b5050505050505050505600a165627a7a7230582030b9da3399f820f605517b0437b681dbaa43f928f1bba8b650a09a9fa6ef64940029a165627a7a72305820dbe3255f754a4a5b98f91a9cd01b512edc376405e4a39a9ee2d25018e68f431a0029"
}