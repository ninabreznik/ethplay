{
  "address": "0x7a01c3757b161e83996915227290271645dd6e87",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoLoadEngineerOldData",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-15\n*/\n\npragma solidity ^0.4.25;\n\n/*\n* CryptoMiningWar - Blockchain-based strategy game\n* Author: InspiGames\n* Website: https://cryptominingwar.github.io/\n*/\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\ncontract CryptoEngineerOldInterface {\n    address public gameSponsor;\n    uint256 public gameSponsorPrice;\n    \n    function getBoosterData(uint256 /*idx*/) public view returns (address /*_owner*/,uint256 /*_boostRate*/, uint256 /*_basePrice*/) {}\n    function calculateCurrentVirus(address /*_addr*/) external view returns(uint256 /*_currentVirus*/) {}\n    function getPlayerData(address /*_addr*/) external view returns(uint256 /*_engineerRoundNumber*/, uint256 /*_virusNumber*/, uint256 /*_virusDefence*/, uint256 /*_research*/, uint256 /*_researchPerDay*/, uint256 /*_lastUpdateTime*/, uint256[8] /*_engineersCount*/, uint256 /*_nextTimeAtk*/, uint256 /*_endTimeUnequalledDef*/) {}\n}\ninterface CryptoArenaOldInterface {\n    function getData(address _addr) \n    external\n    view\n    returns(\n        uint256 /*_virusDef*/,\n        uint256 /*_nextTimeAtk*/,\n        uint256 /*_endTimeUnequalledDef*/,\n        bool    /*_canAtk*/,\n        // engineer\n        uint256 /*_currentVirus*/, \n        // mingin war\n        uint256 /*_currentCrystals*/\n    );\n}\n\ncontract CryptoEngineerNewInterface {\n    mapping(uint256 => EngineerData) public engineers;\n     struct EngineerData {\n            uint256 basePrice;\n            uint256 baseETH;\n            uint256 baseResearch;\n            uint256 limit;\n     }\n\n    function setBoostData(uint256 /*idx*/, address /*owner*/, uint256 /*boostRate*/, uint256 /*basePrice*/ ) external pure {}\n    function setPlayerEngineersCount( address /*_addr*/, uint256 /*idx*/, uint256 /*_value*/ ) external pure {}\n    function setGameSponsorInfo( address /*_addr*/, uint256 /*_value*/ ) external pure {}\n    function setPlayerResearch( address /*_addr*/, uint256 /*_value*/ ) external pure {}\n    function setPlayerVirusNumber( address /*_addr*/, uint256 /*_value*/ ) external pure {}\n    function setPlayerLastUpdateTime( address /*_addr*/) external pure {}\n}\ninterface CryptoArenaNewInterface {\n    function setPlayerVirusDef(address /*_addr*/, uint256 /*_value*/) external pure; \n}\ncontract CryptoLoadEngineerOldData {\n    // engineer info\n\taddress public administrator;\n    bool public loaded;\n\n    mapping(address => bool) public playersLoadOldData;\n   \n    CryptoEngineerNewInterface public EngineerNew;\n    CryptoEngineerOldInterface public EngineerOld;    \n    CryptoArenaNewInterface    public ArenaNew;\n    CryptoArenaOldInterface    public ArenaOld;\n\n    modifier isAdministrator()\n    {\n        require(msg.sender == administrator);\n        _;\n    }\n\n    //--------------------------------------------------------------------------\n    // INIT CONTRACT \n    //--------------------------------------------------------------------------\n    constructor() public {\n        administrator = msg.sender;\n        // set interface main contract\n       EngineerNew = CryptoEngineerNewInterface(0xd7afbf5141a7f1d6b0473175f7a6b0a7954ed3d2);\n       EngineerOld = CryptoEngineerOldInterface(0x69fd0e5d0a93bf8bac02c154d343a8e3709adabf);\n       ArenaNew    = CryptoArenaNewInterface(0x77c9acc811e4cf4b51dc3a3e05dc5d62fa887767);\n       ArenaOld    = CryptoArenaOldInterface(0xce6c5ef2ed8f6171331830c018900171dcbd65ac);\n\n    }\n\n    function () public payable\n    {\n    }\n    /**\n        * @dev MainContract used this function to verify game's contract\n        */\n        function isContractMiniGame() public pure returns(bool _isContractMiniGame)\n        {\n        \t_isContractMiniGame = true;\n        }\n    //@dev use this function in case of bug\n    function upgrade(address addr) public isAdministrator\n    {\n        selfdestruct(addr);\n    }\n    function loadEngineerOldData() public isAdministrator \n    {\n        require(loaded == false);\n        loaded = true;\n        address gameSponsor      = EngineerOld.gameSponsor();\n        uint256 gameSponsorPrice = EngineerOld.gameSponsorPrice();\n        EngineerNew.setGameSponsorInfo(gameSponsor, gameSponsorPrice);\n        for(uint256 idx = 0; idx < 5; idx++) {\n            mergeBoostData(idx);\n        }\n    }\n    function mergeBoostData(uint256 idx) private\n    {\n        address owner;\n        uint256 boostRate;\n        uint256 basePrice;\n        (owner, boostRate, basePrice) = EngineerOld.getBoosterData(idx);\n\n        if (owner != 0x0) EngineerNew.setBoostData(idx, owner, boostRate, basePrice);\n    }\n    function loadOldData() public \n    {\n        require(tx.origin == msg.sender);\n        require(playersLoadOldData[msg.sender] == false);\n\n        playersLoadOldData[msg.sender] = true;\n\n        uint256[8] memory engineersCount; \n        uint256 virusDef;\n        uint256 researchPerDay;\n        \n        uint256 virusNumber = EngineerOld.calculateCurrentVirus(msg.sender);\n        // /function getPlayerData(address /*_addr*/) external view returns(uint256 /*_engineerRoundNumber*/, uint256 /*_virusNumber*/, uint256 /*_virusDefence*/, uint256 /*_research*/, uint256 /*_researchPerDay*/, uint256 /*_lastUpdateTime*/, uint256[8] /*_engineersCount*/, uint256 /*_nextTimeAtk*/, uint256 /*_endTimeUnequalledDef*/) \n        (, , , , researchPerDay, , engineersCount, , ) = EngineerOld.getPlayerData(msg.sender);\n\n        (virusDef, , , , , ) = ArenaOld.getData(msg.sender);\n\n        virusNumber = SafeMath.sub(virusNumber, SafeMath.mul(researchPerDay, 432000));\n        uint256 research = 0;\n        uint256 baseResearch = 0;\n\n        for (uint256 idx = 0; idx < 8; idx++) {\n            if (engineersCount[idx] > 0) {\n                (, , baseResearch, ) = EngineerNew.engineers(idx);\n                EngineerNew.setPlayerEngineersCount(msg.sender, idx, engineersCount[idx]);\n                research = SafeMath.add(research, SafeMath.mul(engineersCount[idx], baseResearch));\n            }    \n        }\n        EngineerNew.setPlayerLastUpdateTime(msg.sender);\n        if (research > 0)    EngineerNew.setPlayerResearch(msg.sender, research);\n        \n        if (virusNumber > 0) EngineerNew.setPlayerVirusNumber(msg.sender, virusNumber);\n\n        if (virusDef > 0)    ArenaNew.setPlayerVirusDef(msg.sender, virusDef);\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playersLoadOldData\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"loadEngineerOldData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loaded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractMiniGame\",\"outputs\":[{\"name\":\"_isContractMiniGame\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ArenaNew\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EngineerOld\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ArenaOld\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"loadOldData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EngineerNew\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
  "bytecode": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073d7afbf5141a7f1d6b0473175f7a6b0a7954ed3d2600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507369fd0e5d0a93bf8bac02c154d343a8e3709adabf600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507377c9acc811e4cf4b51dc3a3e05dc5d62fa887767600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073ce6c5ef2ed8f6171331830c018900171dcbd65ac600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506115a4806101b46000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302f996f1146100b15780630797adb01461010c5780630900f01014610123578063196e045d146101665780633281d5761461019557806336b98b54146101c45780636c849ed21461021b5780637ff054a41461027257806384d0aad8146102c95780639df7eba5146102e0578063f53d0a8e14610337575b005b3480156100bd57600080fd5b506100f2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061038e565b604051808215151515815260200191505060405180910390f35b34801561011857600080fd5b506101216103ae565b005b34801561012f57600080fd5b50610164600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106d7565b005b34801561017257600080fd5b5061017b61074b565b604051808215151515815260200191505060405180910390f35b3480156101a157600080fd5b506101aa61075e565b604051808215151515815260200191505060405180910390f35b3480156101d057600080fd5b506101d9610767565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561022757600080fd5b5061023061078d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561027e57600080fd5b506102876107b3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102d557600080fd5b506102de6107d9565b005b3480156102ec57600080fd5b506102f5611292565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561034357600080fd5b5061034c6112b8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60016020528060005260406000206000915054906101000a900460ff1681565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561040e57600080fd5b60001515600060149054906101000a900460ff16151514151561043057600080fd5b6001600060146101000a81548160ff021916908315150217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b3140ac36040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156104d157600080fd5b505af11580156104e5573d6000803e3d6000fd5b505050506040513d60208110156104fb57600080fd5b81019080805190602001909291905050509250600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663742609ce6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561059457600080fd5b505af11580156105a8573d6000803e3d6000fd5b505050506040513d60208110156105be57600080fd5b81019080805190602001909291905050509150600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bcd3ff8984846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561069657600080fd5b505af11580156106aa573d6000803e3d6000fd5b50505050600090505b60058110156106d2576106c5816112dd565b80806001019150506106b3565b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561073257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16ff5b600060149054906101000a900460ff1681565b60006001905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6107e1611554565b6000806000806000803373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614151561082457600080fd5b60001515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561088357600080fd5b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663207a6c33336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561099757600080fd5b505af11580156109ab573d6000803e3d6000fd5b505050506040513d60208110156109c157600080fd5b81019080805190602001909291905050509350600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aa531d9336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505061020060405180830381600087803b158015610a9257600080fd5b505af1158015610aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610200811015610acc57600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190919082610100018051906020019092919080519060200190929190505050909192939495969750909192939495965090919293949550909192939450909192509050508098508196505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338266b22336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060c060405180830381600087803b158015610c1457600080fd5b505af1158015610c28573d6000803e3d6000fd5b505050506040513d60c0811015610c3e57600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505090919293509091925090915090505080965050610caa84610ca587620697806114e2565b61151d565b93506000925060009150600090505b6008811015610eff5760008782600881101515610cd257fe5b60200201511115610ef257600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633dc20fff826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050608060405180830381600087803b158015610d6e57600080fd5b505af1158015610d82573d6000803e3d6000fd5b505050506040513d6080811015610d9857600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190505050909192509091505080925050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166332e94e8133838a85600881101515610e2157fe5b60200201516040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050600060405180830381600087803b158015610eb257600080fd5b505af1158015610ec6573d6000803e3d6000fd5b50505050610eef83610eea8984600881101515610edf57fe5b6020020151856114e2565b611536565b92505b8080600101915050610cb9565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631e872f55336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015610fbc57600080fd5b505af1158015610fd0573d6000803e3d6000fd5b5050505060008311156110bb57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb005d4f33856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156110a257600080fd5b505af11580156110b6573d6000803e3d6000fd5b505050505b60008411156111a257600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663859ccc7233866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561118957600080fd5b505af115801561119d573d6000803e3d6000fd5b505050505b600086111561128957600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637df841cd33886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561127057600080fd5b505af1158015611284573d6000803e3d6000fd5b505050505b50505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339901be8856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050606060405180830381600087803b15801561137357600080fd5b505af1158015611387573d6000803e3d6000fd5b505050506040513d606081101561139d57600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505080935081945082955050505060008373ffffffffffffffffffffffffffffffffffffffff161415156114dc57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633928bc8b858585856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001945050505050600060405180830381600087803b1580156114c357600080fd5b505af11580156114d7573d6000803e3d6000fd5b505050505b50505050565b60008060008414156114f75760009150611516565b828402905082848281151561150857fe5b0414151561151257fe5b8091505b5092915050565b600082821115151561152b57fe5b818303905092915050565b600080828401905083811015151561154a57fe5b8091505092915050565b610100604051908101604052806008906020820280388339808201915050905050905600a165627a7a723058201dfc7391df77a007a4d0f977f7a018609d9058ade5e55ea535efaf83d5e74e350029"
}