{
  "address": "0x9e16aa51586227fb3ff07ff6056a127b6c8b328c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "IPTGlobal",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-21\n*/\n\npragma solidity 0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n     * @dev Adds two numbers, throws on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}   \n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n/** \n * @title Based on the 'final' ERC20 token standard as specified at:\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md \n */\ncontract ERC20Interface {\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    function name() public view returns (string);\n    function symbol() public view returns (string);\n    function decimals() public view returns (uint8);\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address _owner) public view returns (uint256);\n    function allowance(address _owner, address _spender) public view returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n    function approve(address _spender, uint256 _value) public returns (bool);\n}\n\n/**\n * @title TestToken\n * @dev The TestToken contract provides the token functionality of the IPT Global token\n * and allows the admin to distribute frozen tokens which requires defrosting to become transferable.\n */\ncontract IPTGlobal is ERC20Interface, Ownable {\n    using SafeMath for uint256;\n    \n    //Name of the token.\n    string  internal constant NAME = \"IPT Global\";\n    \n    //Symbol of the token.\n    string  internal constant SYMBOL = \"IPT\";     \n    \n    //Granularity of the token.\n    uint8   internal constant DECIMALS = 8;        \n    \n    //Factor for numerical calculations.\n    uint256 internal constant DECIMALFACTOR = 10 ** uint(DECIMALS); \n    \n    //Total supply of IPT Global tokens.\n    uint256 internal constant TOTAL_SUPPLY = 300000000 * uint256(DECIMALFACTOR);  \n    \n    //Base unlocking value used to calculate fractional percentage of 0.2 %\n    uint8   internal constant unlockingValue = 2;\n    \n    //Base unlocking numerator used to calculate fractional percentage of 0.2 %\n    uint8   internal constant unlockingNumerator = 10;\n    \n    //Allows admin to call a getter which tracks latest/daily unlocked tokens\n    uint256 private unlockedTokensDaily;\n    //Allows admin to call a getter which tracks total unlocked tokens\n    uint256 private unlockedTokensTotal;\n    \n    address[] uniqueLockedTokenReceivers; \n    \n    //Stores uniqueness of all locked token recipients.\n    mapping(address => bool)    internal uniqueLockedTokenReceiver;\n    \n    //Stores all locked IPT Global token holders.\n    mapping(address => bool)    internal isHoldingLockedTokens;\n    \n    //Stores excluded recipients who will not be effected by token unlocking.\n    mapping(address => bool)    internal excludedFromTokenUnlock;\n    \n    //Stores and tracks locked IPT Global token balances.\n    mapping(address => uint256) internal lockedTokenBalance;\n    \n    //Stores the balance of IPT Global holders (complies with ERC-Standard).\n    mapping(address => uint256) internal balances; \n    \n    //Stores any allowances given to other IPT Global holders.\n    mapping(address => mapping(address => uint256)) internal allowed; \n    \n    \n    event HoldingLockedTokens(\n        address recipient, \n        uint256 lockedTokenBalance,\n        bool    isHoldingLockedTokens);\n    \n    event LockedTokensTransferred(\n        address recipient, \n        uint256 lockedTokens,\n        uint256 lockedTokenBalance);\n        \n    event TokensUnlocked(\n        address recipient,\n        uint256 unlockedTokens,\n        uint256 lockedTokenBalance);\n        \n    event LockedTokenBalanceChanged(\n        address recipient, \n        uint256 unlockedTokens,\n        uint256 lockedTokenBalance);\n        \n    event ExcludedFromTokenUnlocks(\n        address recipient,\n        bool    excludedFromTokenUnlocks);\n    \n    event CompleteTokenBalanceUnlocked(\n        address recipient,\n        uint256 lockedTokenBalance,\n        bool    isHoldingLockedTokens,\n        bool    completeTokenBalanceUnlocked);\n    \n    \n    /**\n     * @dev constructor sets initialises and configurates the smart contract.\n     * More specifically, it grants the smart contract owner the total supply\n     * of IPT Global tokens.\n     */\n    constructor() public {\n        balances[msg.sender] = TOTAL_SUPPLY;\n    }\n\n    /**\n     * @dev allows owner to transfer tokens which are locked by default.\n     * @param _recipient is the addresses which will receive locked tokens.\n     * @param _lockedTokens is the amount of locked tokens to distribute.\n     * and therefore requires unlocking to be transferable.\n     */\n    function lockedTokenTransfer(address[] _recipient, uint256[] _lockedTokens) external onlyOwner {\n       \n        for (uint256 i = 0; i < _recipient.length; i++) {\n            if (!uniqueLockedTokenReceiver[_recipient[i]]) {\n                uniqueLockedTokenReceiver[_recipient[i]] = true;\n                uniqueLockedTokenReceivers.push(_recipient[i]);\n                }\n                \n            isHoldingLockedTokens[_recipient[i]] = true;\n            \n            lockedTokenBalance[_recipient[i]] = lockedTokenBalance[_recipient[i]].add(_lockedTokens[i]);\n            \n            transfer(_recipient[i], _lockedTokens[i]);\n            \n            emit HoldingLockedTokens(_recipient[i], _lockedTokens[i], isHoldingLockedTokens[_recipient[i]]);\n            emit LockedTokensTransferred(_recipient[i], _lockedTokens[i], lockedTokenBalance[_recipient[i]]);\n        }\n    }\n\n    /**\n     * @dev allows owner to change the locked balance of a recipient manually.\n     * @param _owner is the address of the locked token balance to unlock.\n     * @param _unlockedTokens is the amount of locked tokens to unlock.\n     */\n    function changeLockedBalanceManually(address _owner, uint256 _unlockedTokens) external onlyOwner {\n        require(_owner != address(0));\n        require(_unlockedTokens <= lockedTokenBalance[_owner]);\n        require(isHoldingLockedTokens[_owner]);\n        require(!excludedFromTokenUnlock[_owner]);\n        \n        lockedTokenBalance[_owner] = lockedTokenBalance[_owner].sub(_unlockedTokens);\n        emit LockedTokenBalanceChanged(_owner, _unlockedTokens, lockedTokenBalance[_owner]);\n        \n        unlockedTokensDaily  = unlockedTokensDaily.add(_unlockedTokens);\n        unlockedTokensTotal  = unlockedTokensTotal.add(_unlockedTokens);\n        \n        if (lockedTokenBalance[_owner] == 0) {\n           isHoldingLockedTokens[_owner] = false;\n           emit CompleteTokenBalanceUnlocked(_owner, lockedTokenBalance[_owner], isHoldingLockedTokens[_owner], true);\n        }\n    }\n\n    /**\n     * @dev allows owner to unlock 0.2% of locked token balances, be careful with implementation of \n     * loops over large arrays, could result in block limit issues.\n     * should be called once a day as per specifications.\n     */\n    function unlockTokens() external onlyOwner {\n\n        for (uint256 i = 0; i < uniqueLockedTokenReceivers.length; i++) {\n            if (isHoldingLockedTokens[uniqueLockedTokenReceivers[i]] && \n                !excludedFromTokenUnlock[uniqueLockedTokenReceivers[i]]) {\n                \n                uint256 unlockedTokens = (lockedTokenBalance[uniqueLockedTokenReceivers[i]].mul(unlockingValue).div(unlockingNumerator)).div(100);\n                lockedTokenBalance[uniqueLockedTokenReceivers[i]] = lockedTokenBalance[uniqueLockedTokenReceivers[i]].sub(unlockedTokens);\n                uint256 unlockedTokensToday = unlockedTokensToday.add(unlockedTokens);\n                \n                emit TokensUnlocked(uniqueLockedTokenReceivers[i], unlockedTokens, lockedTokenBalance[uniqueLockedTokenReceivers[i]]);\n            }\n            if (lockedTokenBalance[uniqueLockedTokenReceivers[i]] == 0) {\n                isHoldingLockedTokens[uniqueLockedTokenReceivers[i]] = false;\n                \n                emit CompleteTokenBalanceUnlocked(uniqueLockedTokenReceivers[i], lockedTokenBalance[uniqueLockedTokenReceivers[i]], isHoldingLockedTokens[uniqueLockedTokenReceivers[i]], true);\n            }  \n        }    \n        unlockedTokensDaily  = unlockedTokensToday;\n        unlockedTokensTotal  = unlockedTokensTotal.add(unlockedTokensDaily);\n    }\n    \n    /**\n     * @dev allows owner to exclude certain recipients from having their locked token balance unlocked.\n     * @param _excludedRecipients is the addresses to add token unlock exclusion for.\n     * @return a boolean representing whether the function was executed succesfully.\n     */\n    function addExclusionFromTokenUnlocks(address[] _excludedRecipients) external onlyOwner returns (bool) {\n        for (uint256 i = 0; i < _excludedRecipients.length; i++) {\n            excludedFromTokenUnlock[_excludedRecipients[i]] = true;\n            emit ExcludedFromTokenUnlocks(_excludedRecipients[i], excludedFromTokenUnlock[_excludedRecipients[i]]);\n        }\n        return true;\n    }\n    \n    /**\n     * @dev allows owner to remove any exclusion from certain recipients, allowing their locked token balance to be unlockable again.\n     * @param _excludedRecipients is the addresses to remove unlock token exclusion from.\n     * @return a boolean representing whether the function was executed succesfully.\n     */\n    function removeExclusionFromTokenUnlocks(address[] _excludedRecipients) external onlyOwner returns (bool) {\n        for (uint256 i = 0; i < _excludedRecipients.length; i++) {\n            excludedFromTokenUnlock[_excludedRecipients[i]] = false;\n            emit ExcludedFromTokenUnlocks(_excludedRecipients[i], excludedFromTokenUnlock[_excludedRecipients[i]]);\n        }\n        return true;\n    }\n    \n    /**\n     * @dev allows anyone to check the unlocked and locked token balance of a recipient. \n     * @param _owner is the address of the locked token balance to check.\n     * @return a uint256 representing the locked and unlocked token balances.\n     */\n    function checkTokenBalanceState(address _owner) external view returns(uint256 unlockedBalance, uint256 lockedBalance) {\n    return (balanceOf(_owner).sub(lockedTokenBalance[_owner]), lockedTokenBalance[_owner]);\n    }\n    \n    /**\n     * @dev allows anyone to check the a list of all locked token recipients. \n     * @return an address array representing the list of recipients.\n     */\n    function checkUniqueLockedTokenReceivers() external view returns (address[]) {\n        return uniqueLockedTokenReceivers;\n    }\n    \n     /**\n     * @dev allows checking of the daily and total amount of unlocked tokens. \n     * @return an uint representing the daily and total unlocked value.\n     */\n    function checkUnlockedTokensData() external view returns (uint256 unlockedDaily, uint256 unlockedTotal) {\n        return (unlockedTokensDaily, unlockedTokensTotal);\n    }\n\n    /**\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     * @return a boolean representing whether the function was executed succesfully.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        \n        if (isHoldingLockedTokens[msg.sender]) {\n            require(_value <= balances[msg.sender].sub(lockedTokenBalance[msg.sender]));\n        }\n        \n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n         \n    }\n    \n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     * @return a boolean representing whether the function was executed succesfully.\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        \n        if (isHoldingLockedTokens[_from]) {\n            require(_value <= balances[_from].sub(lockedTokenBalance[_from]));\n            require(_value <= allowed[_from][msg.sender]);\n        }\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     * @return a boolean representing whether the function was executed succesfully.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    /**\n     * @dev balanceOf function gets the balance of the specified address.\n     * @param _owner The address to query the balance of.\n     * @return An uint256 representing the token balance of the passed address.\n     */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n        \n    /**\n     * @dev allowance function checks the amount of tokens allowed by an owner for a spender to spend.\n     * @param _owner address is the address which owns the spendable funds.\n     * @param _spender address is the address which will spend the owned funds.\n     * @return A uint256 specifying the amount of tokens which are still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n    \n    /**\n     * @dev totalSupply function returns the total supply of tokens.\n     */\n    function totalSupply() public view returns (uint256) {\n        return TOTAL_SUPPLY;\n    }\n    \n    /** \n     * @dev decimals function returns the decimal units of the token. \n     */\n    function decimals() public view returns (uint8) {\n        return DECIMALS;\n    }\n            \n    /** \n     * @dev symbol function returns the symbol ticker of the token. \n     */\n    function symbol() public view returns (string) {\n        return SYMBOL;\n    }\n    \n    /** \n     * @dev name function returns the name of the token. \n     */\n    function name() public view returns (string) {\n        return NAME;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a0319163390811782558152600860205260409020666a94d74f430000905561162d806100496000396000f3006080604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461010b578063095ea7b31461019557806318160ddd146101cd57806323b872dd146101f4578063313ce5671461021e5780635936812b1461024957806370a082311461026f5780638da5cb5b14610290578063944ea02d146102c157806395d89b41146102fb578063a9059cbb14610310578063ab736b5d14610334578063adc8f94114610399578063b7c8a90a146103b9578063dd62ed3e146103d9578063e3aef2bd14610400578063eb97539014610415578063f2fde38b14610441578063f968f49314610462575b600080fd5b34801561011757600080fd5b50610120610477565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015a578181015183820152602001610142565b50505050905090810190601f1680156101875780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a157600080fd5b506101b9600160a060020a03600435166024356104ae565b604080519115158252519081900360200190f35b3480156101d957600080fd5b506101e2610514565b60408051918252519081900360200190f35b34801561020057600080fd5b506101b9600160a060020a036004358116906024351660443561051f565b34801561022a57600080fd5b50610233610729565b6040805160ff9092168252519081900360200190f35b34801561025557600080fd5b5061026d600160a060020a036004351660243561072e565b005b34801561027b57600080fd5b506101e2600160a060020a0360043516610914565b34801561029c57600080fd5b506102a561092f565b60408051600160a060020a039092168252519081900360200190f35b3480156102cd57600080fd5b506102e2600160a060020a036004351661093e565b6040805192835260208301919091528051918290030190f35b34801561030757600080fd5b50610120610994565b34801561031c57600080fd5b506101b9600160a060020a03600435166024356109cb565b34801561034057600080fd5b50610349610afd565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561038557818101518382015260200161036d565b505050509050019250505060405180910390f35b3480156103a557600080fd5b506101b96004803560248101910135610b5f565b3480156103c557600080fd5b506101b96004803560248101910135610c6f565b3480156103e557600080fd5b506101e2600160a060020a0360043581169060243516610d72565b34801561040c57600080fd5b506102e2610d9d565b34801561042157600080fd5b5061026d6024600480358281019290820135918135918201910135610da7565b34801561044d57600080fd5b5061026d600160a060020a036004351661111d565b34801561046e57600080fd5b5061026d6111b1565b60408051808201909152600a81527f49505420476c6f62616c00000000000000000000000000000000000000000000602082015290565b336000818152600960209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b666a94d74f43000090565b6000600160a060020a038316151561053657600080fd5b600160a060020a03841660009081526008602052604090205482111561055b57600080fd5b600160a060020a038416600090815260096020908152604080832033845290915290205482111561058b57600080fd5b600160a060020a03841660009081526005602052604090205460ff161561061c57600160a060020a0384166000908152600760209081526040808320546008909252909120546105e09163ffffffff61159916565b8211156105ec57600080fd5b600160a060020a038416600090815260096020908152604080832033845290915290205482111561061c57600080fd5b600160a060020a038416600090815260086020526040902054610645908363ffffffff61159916565b600160a060020a03808616600090815260086020526040808220939093559085168152205461067a908363ffffffff6115ab16565b600160a060020a0380851660009081526008602090815260408083209490945591871681526009825282812033825290915220546106be908363ffffffff61159916565b600160a060020a03808616600081815260096020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600890565b600054600160a060020a0316331461074557600080fd5b600160a060020a038216151561075a57600080fd5b600160a060020a03821660009081526007602052604090205481111561077f57600080fd5b600160a060020a03821660009081526005602052604090205460ff1615156107a657600080fd5b600160a060020a03821660009081526006602052604090205460ff16156107cc57600080fd5b600160a060020a0382166000908152600760205260409020546107f5908263ffffffff61159916565b600160a060020a038316600081815260076020908152604091829020849055815192835282018490528181019290925290517f309abe31ac8b2d6d978cd88ee1c78555fa6a070f5c1cb9180a9e8f889c579c4c9181900360600190a1600154610864908263ffffffff6115ab16565b60015560025461087a908263ffffffff6115ab16565b600255600160a060020a038216600090815260076020526040902054151561091057600160a060020a0382166000818152600560208181526040808420805460ff1916905560078252808420549282528051948552908401919091528281019190915260016060830152517f2584f4843516e0363d7d4ba84713ad4242dc650b2f9be22d26abc8a9b4e9a9679181900360800190a15b5050565b600160a060020a031660009081526008602052604090205490565b600054600160a060020a031681565b600160a060020a03811660009081526007602052604081205481906109729061096685610914565b9063ffffffff61159916565b600160a060020a03939093166000908152600760205260409020549293915050565b60408051808201909152600381527f4950540000000000000000000000000000000000000000000000000000000000602082015290565b6000600160a060020a03831615156109e257600080fd5b336000908152600860205260409020548211156109fe57600080fd5b3360009081526005602052604090205460ff1615610a4d5733600090815260076020908152604080832054600890925290912054610a419163ffffffff61159916565b821115610a4d57600080fd5b33600090815260086020526040902054610a6d908363ffffffff61159916565b3360009081526008602052604080822092909255600160a060020a03851681522054610a9f908363ffffffff6115ab16565b600160a060020a0384166000818152600860209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b60606003805480602002602001604051908101604052809291908181526020018280548015610b5557602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610b37575b5050505050905090565b600080548190600160a060020a03163314610b7957600080fd5b5060005b82811015610c6357600160066000868685818110610b9757fe5b60209081029290920135600160a060020a0316835250810191909152604001600020805460ff19169115159190911790557f0bc5f5e2ab8b52c981cad5fb58b88bd2913760eab34209278ef1eccb8414b9fa848483818110610bf557fe5b90506020020135600160a060020a0316600660008787868181101515610c1757fe5b600160a060020a0360209182029390930135831684528381019490945250604091820160002054825194909116845260ff161515918301919091528051918290030190a1600101610b7d565b600191505b5092915050565b600080548190600160a060020a03163314610c8957600080fd5b5060005b82811015610c63576000600681868685818110610ca657fe5b60209081029290920135600160a060020a0316835250810191909152604001600020805460ff19169115159190911790557f0bc5f5e2ab8b52c981cad5fb58b88bd2913760eab34209278ef1eccb8414b9fa848483818110610d0457fe5b90506020020135600160a060020a0316600660008787868181101515610d2657fe5b600160a060020a0360209182029390930135831684528381019490945250604091820160002054825194909116845260ff161515918301919091528051918290030190a1600101610c8d565b600160a060020a03918216600090815260096020908152604080832093909416825291909152205490565b6001546002549091565b60008054600160a060020a03163314610dbf57600080fd5b5060005b838110156111165760046000868684818110610ddb57fe5b60209081029290920135600160a060020a03168352508101919091526040016000205460ff161515610ea257600160046000878785818110610e1957fe5b60209081029290920135600160a060020a0316835250810191909152604001600020805460ff19169115159190911790556003858583818110610e5857fe5b8354600181018555600094855260209485902001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0395909202939093013593909316929092179055505b600160056000878785818110610eb457fe5b60209081029290920135600160a060020a0316835250810191909152604001600020805460ff1916911515919091179055610f4c838383818110610ef457fe5b90506020020135600760008888868181101515610f0d57fe5b90506020020135600160a060020a0316600160a060020a0316600160a060020a03168152602001908152602001600020546115ab90919063ffffffff16565b60076000878785818110610f5c57fe5b60209081029290920135600160a060020a031683525081019190915260400160002055610fb8858583818110610f8e57fe5b90506020020135600160a060020a03168484848181101515610fac57fe5b905060200201356109cb565b507f5be597deb67df4ac5566478f8924533ab08992d543981bae5db886074469f856858583818110610fe657fe5b90506020020135600160a060020a0316848484818110151561100457fe5b9050602002013560056000898987818110151561101d57fe5b600160a060020a036020918202939093013583168452838101949094525060409182016000205482519590911685529184019290925260ff16151582820152519081900360600190a17fd8ca7cfece21f0ba7889230e28648cfb749b9b2d25ba502cddcc24677b91b72285858381811061109357fe5b90506020020135600160a060020a031684848481811015156110b157fe5b905060200201356007600089898781811015156110ca57fe5b600160a060020a036020918202939093013583168452838101949094525060409182016000205482519590911685529184019290925282820152519081900360600190a1600101610dc3565b5050505050565b600054600160a060020a0316331461113457600080fd5b600160a060020a038116151561114957600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000805481908190600160a060020a031633146111cd57600080fd5b600092505b60035483101561157957600560006003858154811015156111ef57fe5b6000918252602080832090910154600160a060020a0316835282019290925260400190205460ff16801561125b57506006600060038581548110151561123157fe5b6000918252602080832090910154600160a060020a0316835282019290925260400190205460ff16155b156113fc576112c560646112b9600a60ff166112b9600260ff166007600060038b81548110151561128857fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020549063ffffffff6115c116565b9063ffffffff6115ec16565b915061130f82600760006003878154811015156112de57fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020549063ffffffff61159916565b6007600060038681548110151561132257fe5b6000918252602080832090910154600160a060020a03168352820192909252604001902055611357818363ffffffff6115ab16565b90507f89882ad382a3742d4db24e4dabc5000c5852aed762904db28442e4e1630a1d0760038481548110151561138957fe5b600091825260208220015460038054600160a060020a0390921692869260079290899081106113b457fe5b6000918252602080832090910154600160a060020a03908116845283820194909452604092830190912054825195909316855284019290925282820152519081900360600190a15b6007600060038581548110151561140f57fe5b6000918252602080832090910154600160a060020a03168352820192909252604001902054151561156e5760006005600060038681548110151561144f57fe5b600091825260208083209190910154600160a060020a031683528201929092526040019020805460ff1916911515919091179055600380547f2584f4843516e0363d7d4ba84713ad4242dc650b2f9be22d26abc8a9b4e9a9679190859081106114b457fe5b600091825260208220015460038054600160a060020a0390921692600792909190889081106114df57fe5b6000918252602080832090910154600160a060020a031683528201929092526040018120546003805491926005929091908990811061151a57fe5b6000918252602080832090910154600160a060020a03908116845283820194909452604092830190912054825195909316855284019290925260ff1615158282015260016060830152519081900360800190a15b6001909201916111d2565b6001819055600254611591908263ffffffff6115ab16565b600255505050565b6000828211156115a557fe5b50900390565b6000828201838110156115ba57fe5b9392505050565b6000808315156115d45760009150610c68565b508282028284828115156115e457fe5b04146115ba57fe5b600081838115156115f957fe5b0493925050505600a165627a7a723058202163b4c081f729bbdb5abcbf299d24c125e2ca81b4374dbc69fead95659a2ae30029"
}