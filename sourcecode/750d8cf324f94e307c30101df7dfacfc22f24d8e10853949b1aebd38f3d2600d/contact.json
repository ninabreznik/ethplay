{
  "address": "0xb6fC7bB6b848ba8382A703172Fe00EBAf0DBd425",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AOSettingUpdate",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\npragma solidity >=0.5.4 <0.6.0;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n\t/**\n\t * @dev Multiplies two numbers, throws on overflow.\n\t */\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tc = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Integer division of two numbers, truncating the quotient.\n\t */\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\t// uint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn a / b;\n\t}\n\n\t/**\n\t * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n\t */\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\t/**\n\t * @dev Adds two numbers, throws on overflow.\n\t */\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\tc = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\n\ninterface INameTAOPosition {\n\tfunction senderIsAdvocate(address _sender, address _id) external view returns (bool);\n\tfunction senderIsListener(address _sender, address _id) external view returns (bool);\n\tfunction senderIsSpeaker(address _sender, address _id) external view returns (bool);\n\tfunction senderIsPosition(address _sender, address _id) external view returns (bool);\n\tfunction getAdvocate(address _id) external view returns (address);\n\tfunction nameIsAdvocate(address _nameId, address _id) external view returns (bool);\n\tfunction nameIsPosition(address _nameId, address _id) external view returns (bool);\n\tfunction initialize(address _id, address _advocateId, address _listenerId, address _speakerId) external returns (bool);\n\tfunction determinePosition(address _sender, address _id) external view returns (uint256);\n}\n\n\ninterface INameAccountRecovery {\n\tfunction isCompromised(address _id) external view returns (bool);\n}\n\n\ninterface IAOSettingValue {\n\tfunction setPendingValue(uint256 _settingId, address _addressValue, bool _boolValue, bytes32 _bytesValue, string calldata _stringValue, uint256 _uintValue) external returns (bool);\n\n\tfunction movePendingToSetting(uint256 _settingId) external returns (bool);\n\n\tfunction settingValue(uint256 _settingId) external view returns (address, bool, bytes32, string memory, uint256);\n}\n\n\ninterface IAOSettingAttribute {\n\tfunction add(uint256 _settingId, address _creatorNameId, string calldata _settingName, address _creatorTAOId, address _associatedTAOId, string calldata _extraData) external returns (bytes32, bytes32);\n\n\tfunction getSettingData(uint256 _settingId) external view returns (uint256, address, address, address, string memory, bool, bool, bool, string memory);\n\n\tfunction approveAdd(uint256 _settingId, address _associatedTAOAdvocate, bool _approved) external returns (bool);\n\n\tfunction finalizeAdd(uint256 _settingId, address _creatorTAOAdvocate) external returns (bool);\n\n\tfunction update(uint256 _settingId, address _associatedTAOAdvocate, address _proposalTAOId, string calldata _extraData) external returns (bool);\n\n\tfunction getSettingState(uint256 _settingId) external view returns (uint256, bool, address, address, address, string memory);\n\n\tfunction approveUpdate(uint256 _settingId, address _proposalTAOAdvocate, bool _approved) external returns (bool);\n\n\tfunction finalizeUpdate(uint256 _settingId, address _associatedTAOAdvocate) external returns (bool);\n\n\tfunction addDeprecation(uint256 _settingId, address _creatorNameId, address _creatorTAOId, address _associatedTAOId, uint256 _newSettingId, address _newSettingContractAddress) external returns (bytes32, bytes32);\n\n\tfunction getSettingDeprecation(uint256 _settingId) external view returns (uint256, address, address, address, bool, bool, bool, bool, uint256, uint256, address, address);\n\n\tfunction approveDeprecation(uint256 _settingId, address _associatedTAOAdvocate, bool _approved) external returns (bool);\n\n\tfunction finalizeDeprecation(uint256 _settingId, address _creatorTAOAdvocate) external returns (bool);\n\n\tfunction settingExist(uint256 _settingId) external view returns (bool);\n\n\tfunction getLatestSettingId(uint256 _settingId) external view returns (uint256);\n}\n\n\ninterface INameFactory {\n\tfunction nonces(address _nameId) external view returns (uint256);\n\tfunction incrementNonce(address _nameId) external returns (uint256);\n\tfunction ethAddressToNameId(address _ethAddress) external view returns (address);\n\tfunction setNameNewAddress(address _id, address _newAddress) external returns (bool);\n\tfunction nameIdToEthAddress(address _nameId) external view returns (address);\n}\n\n\ninterface IAOSetting {\n\tfunction getSettingValuesByTAOName(address _taoId, string calldata _settingName) external view returns (uint256, bool, address, bytes32, string memory);\n\tfunction getSettingTypes() external view returns (uint8, uint8, uint8, uint8, uint8);\n\n\tfunction settingTypeLookup(uint256 _settingId) external view returns (uint8);\n}\n\n\n\n\n\n\n\n\n\n\n\n\ncontract TokenERC20 {\n\t// Public variables of the token\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals = 18;\n\t// 18 decimals is the strongly suggested default, avoid changing it\n\tuint256 public totalSupply;\n\n\t// This creates an array with all balances\n\tmapping (address => uint256) public balanceOf;\n\tmapping (address => mapping (address => uint256)) public allowance;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\t// This notifies clients about the amount burnt\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * Constructor function\n\t *\n\t * Initializes contract with initial supply tokens to the creator of the contract\n\t */\n\tconstructor (uint256 initialSupply, string memory tokenName, string memory tokenSymbol) public {\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n\t\tname = tokenName;                                   // Set the name for display purposes\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\n\t}\n\n\t/**\n\t * Internal transfer, only can be called by this contract\n\t */\n\tfunction _transfer(address _from, address _to, uint _value) internal {\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(_to != address(0));\n\t\t// Check if the sender has enough\n\t\trequire(balanceOf[_from] >= _value);\n\t\t// Check for overflows\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\n\t\t// Save this for an assertion in the future\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t\t// Subtract from the sender\n\t\tbalanceOf[_from] -= _value;\n\t\t// Add the same to the recipient\n\t\tbalanceOf[_to] += _value;\n\t\temit Transfer(_from, _to, _value);\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\t}\n\n\t/**\n\t * Transfer tokens\n\t *\n\t * Send `_value` tokens to `_to` from your account\n\t *\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n\t\t_transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Transfer tokens from other address\n\t *\n\t * Send `_value` tokens to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\n\t\tallowance[_from][msg.sender] -= _value;\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t */\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\tallowance[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address and notify\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t * @param _extraData some extra information to send to the approved contract\n\t */\n\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n\t\ttokenRecipient spender = tokenRecipient(_spender);\n\t\tif (approve(_spender, _value)) {\n\t\t\tspender.receiveApproval(msg.sender, _value, address(this), _extraData);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Destroy tokens\n\t *\n\t * Remove `_value` tokens from the system irreversibly\n\t *\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burn(uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\n\t\ttotalSupply -= _value;                      // Updates totalSupply\n\t\temit Burn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Destroy tokens from other account\n\t *\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n\t\ttotalSupply -= _value;                              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n}\n\n\n/**\n * @title TAO\n */\ncontract TAO {\n\tusing SafeMath for uint256;\n\n\taddress public vaultAddress;\n\tstring public name;\t\t\t\t// the name for this TAO\n\taddress public originId;\t\t// the ID of the Name that created this TAO. If Name, it's the eth address\n\n\t// TAO's data\n\tstring public datHash;\n\tstring public database;\n\tstring public keyValue;\n\tbytes32 public contentId;\n\n\t/**\n\t * 0 = TAO\n\t * 1 = Name\n\t */\n\tuint8 public typeId;\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _vaultAddress\n\t) public {\n\t\tname = _name;\n\t\toriginId = _originId;\n\t\tdatHash = _datHash;\n\t\tdatabase = _database;\n\t\tkeyValue = _keyValue;\n\t\tcontentId = _contentId;\n\n\t\t// Creating TAO\n\t\ttypeId = 0;\n\n\t\tvaultAddress = _vaultAddress;\n\t}\n\n\t/**\n\t * @dev Checks if calling address is Vault contract\n\t */\n\tmodifier onlyVault {\n\t\trequire (msg.sender == vaultAddress);\n\t\t_;\n\t}\n\n\t/**\n\t * Will receive any ETH sent\n\t */\n\tfunction () external payable {\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ETH from this TAO to `_recipient`\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\t_recipient.transfer(_amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ERC20 Token from this TAO to `_recipient`\n\t * @param _erc20TokenAddress The address of ERC20 Token\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferERC20(address _erc20TokenAddress, address _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\tTokenERC20 _erc20 = TokenERC20(_erc20TokenAddress);\n\t\t_erc20.transfer(_recipient, _amount);\n\t\treturn true;\n\t}\n}\n\n\n\n\n/**\n * @title Name\n */\ncontract Name is TAO {\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name, address _originId, string memory _datHash, string memory _database, string memory _keyValue, bytes32 _contentId, address _vaultAddress)\n\t\tTAO (_name, _originId, _datHash, _database, _keyValue, _contentId, _vaultAddress) public {\n\t\t// Creating Name\n\t\ttypeId = 1;\n\t}\n}\n\n\n\n\n/**\n * @title AOLibrary\n */\nlibrary AOLibrary {\n\tusing SafeMath for uint256;\n\n\tuint256 constant private _MULTIPLIER_DIVISOR = 10 ** 6; // 1000000 = 1\n\tuint256 constant private _PERCENTAGE_DIVISOR = 10 ** 6; // 100% = 1000000\n\n\t/**\n\t * @dev Check whether or not the given TAO ID is a TAO\n\t * @param _taoId The ID of the TAO\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isTAO(address _taoId) public view returns (bool) {\n\t\treturn (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);\n\t}\n\n\t/**\n\t * @dev Check whether or not the given Name ID is a Name\n\t * @param _nameId The ID of the Name\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isName(address _nameId) public view returns (bool) {\n\t\treturn (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);\n\t}\n\n\t/**\n\t * @dev Check if `_tokenAddress` is a valid ERC20 Token address\n\t * @param _tokenAddress The ERC20 Token address to check\n\t */\n\tfunction isValidERC20TokenAddress(address _tokenAddress) public view returns (bool) {\n\t\tif (_tokenAddress == address(0)) {\n\t\t\treturn false;\n\t\t}\n\t\tTokenERC20 _erc20 = TokenERC20(_tokenAddress);\n\t\treturn (_erc20.totalSupply() >= 0 && bytes(_erc20.name()).length > 0 && bytes(_erc20.symbol()).length > 0);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t * @param _sender The address to check\n\t * @param _theAO The AO address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t * @return true if yes, false otherwise\n\t */\n\tfunction isTheAO(address _sender, address _theAO, address _nameTAOPositionAddress) public view returns (bool) {\n\t\treturn (_sender == _theAO ||\n\t\t\t(\n\t\t\t\t(isTAO(_theAO) || isName(_theAO)) &&\n\t\t\t\t_nameTAOPositionAddress != address(0) &&\n\t\t\t\tINameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate percentage.\n\t *\t\tPercentage stored throughout AO contracts covers 4 decimals,\n\t *\t\tso 1% is 10000, 1.25% is 12500, etc\n\t */\n\tfunction PERCENTAGE_DIVISOR() public pure returns (uint256) {\n\t\treturn _PERCENTAGE_DIVISOR;\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate multiplier.\n\t *\t\tMultiplier stored throughout AO contracts covers 6 decimals,\n\t *\t\tso 1 is 1000000, 0.023 is 23000, etc\n\t */\n\tfunction MULTIPLIER_DIVISOR() public pure returns (uint256) {\n\t\treturn _MULTIPLIER_DIVISOR;\n\t}\n\n\t/**\n\t * @dev deploy a TAO\n\t * @param _name The name of the TAO\n\t * @param _originId The Name ID the creates the TAO\n\t * @param _datHash The datHash of this TAO\n\t * @param _database The database for this TAO\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this TAO\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployTAO(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (TAO _tao) {\n\t\t_tao = new TAO(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev deploy a Name\n\t * @param _name The name of the Name\n\t * @param _originId The eth address the creates the Name\n\t * @param _datHash The datHash of this Name\n\t * @param _database The database for this Name\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this Name\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployName(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (Name _myName) {\n\t\t_myName = new Name(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev Calculate the new weighted multiplier when adding `_additionalPrimordialAmount` at `_additionalWeightedMultiplier` to the current `_currentPrimordialBalance` at `_currentWeightedMultiplier`\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _currentPrimordialBalance Account's current primordial ion balance\n\t * @param _additionalWeightedMultiplier The weighted multiplier to be added\n\t * @param _additionalPrimordialAmount The primordial ion amount to be added\n\t * @return the new primordial weighted multiplier\n\t */\n\tfunction calculateWeightedMultiplier(uint256 _currentWeightedMultiplier, uint256 _currentPrimordialBalance, uint256 _additionalWeightedMultiplier, uint256 _additionalPrimordialAmount) public pure returns (uint256) {\n\t\tif (_currentWeightedMultiplier > 0) {\n\t\t\tuint256 _totalWeightedIons = (_currentWeightedMultiplier.mul(_currentPrimordialBalance)).add(_additionalWeightedMultiplier.mul(_additionalPrimordialAmount));\n\t\t\tuint256 _totalIons = _currentPrimordialBalance.add(_additionalPrimordialAmount);\n\t\t\treturn _totalWeightedIons.div(_totalIons);\n\t\t} else {\n\t\t\treturn _additionalWeightedMultiplier;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the primordial ion multiplier on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Multiplier = S\n\t *\t\tEnding Multiplier = E\n\t *\t\tTo Purchase = P\n\t *\t\tMultiplier for next Lot of Amount = (1 - ((M + P/2) / T)) x (S-E)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion mintable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting multiplier in (10 ** 6)\n\t * @param _endingMultiplier The ending multiplier in (10 ** 6)\n\t * @return The multiplier in (10 ** 6)\n\t */\n\tfunction calculatePrimordialMultiplier(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * Multiplier = (1 - (temp / T)) x (S-E)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply multiplier with _MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR to account for 6 decimals\n\t\t\t * so, Multiplier = (_MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR) * (1 - (temp / T)) * (S-E)\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR * (1 - (temp / T))) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Take out the division by _MULTIPLIER_DIVISOR for now and include in later calculation\n\t\t\t * Multiplier = (_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)\n\t\t\t */\n\t\t\tuint256 multiplier = (_MULTIPLIER_DIVISOR.sub(_MULTIPLIER_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier));\n\t\t\t/**\n\t\t\t * Since _startingMultiplier and _endingMultiplier are in 6 decimals\n\t\t\t * Need to divide multiplier by _MULTIPLIER_DIVISOR\n\t\t\t */\n\t\t\treturn multiplier.div(_MULTIPLIER_DIVISOR);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus percentage of network ion on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Network Bonus Multiplier = Bs\n\t *\t\tEnding Network Bonus Multiplier = Be\n\t *\t\tTo Purchase = P\n\t *\t\tAO Bonus % = B% = (1 - ((M + P/2) / T)) x (Bs-Be)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusPercentage(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * B% = (1 - (temp / T)) x (Bs-Be)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply B% with _PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR to account for 6 decimals\n\t\t\t * so, B% = (_PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR) * (1 - (temp / T)) * (Bs-Be)\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR * (1 - (temp / T))) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * Take out the division by _PERCENTAGE_DIVISOR for now and include in later calculation\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)\n\t\t\t * But since Bs and Be are in 6 decimals, need to divide by _PERCENTAGE_DIVISOR\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be) / _PERCENTAGE_DIVISOR\n\t\t\t */\n\t\t\tuint256 bonusPercentage = (_PERCENTAGE_DIVISOR.sub(_PERCENTAGE_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier)).div(_PERCENTAGE_DIVISOR);\n\t\t\treturn bonusPercentage;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus amount of network ion on a given lot\n\t *\t\tAO Bonus Amount = B% x P\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusAmount(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tuint256 bonusPercentage = calculateNetworkBonusPercentage(_purchaseAmount, _totalPrimordialMintable, _totalPrimordialMinted, _startingMultiplier, _endingMultiplier);\n\t\t/**\n\t\t * Since bonusPercentage is in _PERCENTAGE_DIVISOR format, need to divide it with _PERCENTAGE DIVISOR\n\t\t * when calculating the network ion bonus amount\n\t\t */\n\t\tuint256 networkBonus = bonusPercentage.mul(_purchaseAmount).div(_PERCENTAGE_DIVISOR);\n\t\treturn networkBonus;\n\t}\n\n\t/**\n\t * @dev Calculate the maximum amount of Primordial an account can burn\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_maximumMultiplier = S\n\t *\t\t_amountToBurn = B\n\t *\t\tB = ((S x P) - (P x M)) / S\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _maximumMultiplier The maximum multiplier of this account\n\t * @return The maximum burn amount\n\t */\n\tfunction calculateMaximumBurnAmount(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _maximumMultiplier) public pure returns (uint256) {\n\t\treturn (_maximumMultiplier.mul(_primordialBalance).sub(_primordialBalance.mul(_currentWeightedMultiplier))).div(_maximumMultiplier);\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after burning primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToBurn = B\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P - B)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToBurn The amount of primordial ion to burn\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterBurn(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToBurn) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.sub(_amountToBurn));\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after converting network ion to primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToConvert = C\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P + C)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToConvert The amount of network ion to convert\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterConversion(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToConvert) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.add(_amountToConvert));\n\t}\n\n\t/**\n\t * @dev count num of digits\n\t * @param number uint256 of the nuumber to be checked\n\t * @return uint8 num of digits\n\t */\n\tfunction numDigits(uint256 number) public pure returns (uint8) {\n\t\tuint8 digits = 0;\n\t\twhile(number != 0) {\n\t\t\tnumber = number.div(10);\n\t\t\tdigits++;\n\t\t}\n\t\treturn digits;\n\t}\n}\n\n\n\ncontract TheAO {\n\taddress public theAO;\n\taddress public nameTAOPositionAddress;\n\n\t// Check whether an address is whitelisted and granted access to transact\n\t// on behalf of others\n\tmapping (address => bool) public whitelist;\n\n\tconstructor() public {\n\t\ttheAO = msg.sender;\n\t}\n\n\t/**\n\t * @dev Checks if msg.sender is in whitelist.\n\t */\n\tmodifier inWhitelist() {\n\t\trequire (whitelist[msg.sender] == true);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n}\n\n\n\n\n\n\n\n\n/**\n * @title AOSettingUpdate\n *\n * This contract purpose is to update existing Setting Value\n */\ncontract AOSettingUpdate is TheAO {\n\taddress public nameFactoryAddress;\n\taddress public nameAccountRecoveryAddress;\n\taddress public aoSettingAttributeAddress;\n\taddress public aoSettingValueAddress;\n\taddress public aoSettingAddress;\n\n\tINameFactory internal _nameFactory;\n\tINameTAOPosition internal _nameTAOPosition;\n\tINameAccountRecovery internal _nameAccountRecovery;\n\tIAOSettingAttribute internal _aoSettingAttribute;\n\tIAOSettingValue internal _aoSettingValue;\n\tIAOSetting internal _aoSetting;\n\n\tstruct UpdateSignature {\n\t\tuint8 signatureV;\n\t\tbytes32 signatureR;\n\t\tbytes32 signatureS;\n\t}\n\n\t// Mapping from settingId to UpdateSignature\n\tmapping (uint256 => UpdateSignature) public updateSignatures;\n\n\t// Mapping from updateHashKey to it's settingId\n\tmapping (bytes32 => uint256) public updateHashLookup;\n\n\t// Event to be broadcasted to public when a proposed update for a setting is created\n\tevent SettingUpdate(uint256 indexed settingId, address indexed updateAdvocateNameId, address proposalTAOId);\n\n\t// Event to be broadcasted to public when setting update is approved/rejected by the advocate of proposalTAOId\n\tevent ApproveSettingUpdate(uint256 indexed settingId, address proposalTAOId, address proposalTAOAdvocate, bool approved);\n\n\t// Event to be broadcasted to public when setting update is finalized by the advocate of associatedTAOId\n\tevent FinalizeSettingUpdate(uint256 indexed settingId, address associatedTAOId, address associatedTAOAdvocate);\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor(address _nameFactoryAddress,\n\t\taddress _nameTAOPositionAddress,\n\t\taddress _nameAccountRecoveryAddress,\n\t\taddress _aoSettingAttributeAddress,\n\t\taddress _aoSettingValueAddress,\n\t\taddress _aoSettingAddress\n\t\t) public {\n\t\tsetNameFactoryAddress(_nameFactoryAddress);\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\n\t\tsetNameAccountRecoveryAddress(_nameAccountRecoveryAddress);\n\t\tsetAOSettingAttributeAddress(_aoSettingAttributeAddress);\n\t\tsetAOSettingValueAddress(_aoSettingValueAddress);\n\t\tsetAOSettingAddress(_aoSettingAddress);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t */\n\tmodifier onlyTheAO {\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check is msg.sender address is a Name\n\t */\n\t modifier senderIsName() {\n\t\trequire (_nameFactory.ethAddressToNameId(msg.sender) != address(0));\n\t\t_;\n\t }\n\n\t/**\n\t * @dev Only allowed if sender's Name is not compromised\n\t */\n\tmodifier senderNameNotCompromised() {\n\t\trequire (!_nameAccountRecovery.isCompromised(_nameFactory.ethAddressToNameId(msg.sender)));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if sender can update setting\n\t */\n\tmodifier canUpdate(address _proposalTAOId) {\n\t\trequire (\n\t\t\tAOLibrary.isTAO(_proposalTAOId) &&\n\t\t\t_nameFactory.ethAddressToNameId(msg.sender) != address(0) &&\n\t\t\t!_nameAccountRecovery.isCompromised(_nameFactory.ethAddressToNameId(msg.sender))\n\t\t);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check whether or not setting is of type address\n\t */\n\tmodifier isAddressSetting(uint256 _settingId) {\n\t\t(uint8 ADDRESS_SETTING_TYPE,,,,) = _aoSetting.getSettingTypes();\n\t\t// Make sure the setting type is address\n\t\trequire (_aoSetting.settingTypeLookup(_settingId) == ADDRESS_SETTING_TYPE);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check whether or not setting is of type bool\n\t */\n\tmodifier isBoolSetting(uint256 _settingId) {\n\t\t(, uint8 BOOL_SETTING_TYPE,,,) = _aoSetting.getSettingTypes();\n\t\t// Make sure the setting type is bool\n\t\trequire (_aoSetting.settingTypeLookup(_settingId) == BOOL_SETTING_TYPE);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check whether or not setting is of type bytes32\n\t */\n\tmodifier isBytesSetting(uint256 _settingId) {\n\t\t(,, uint8 BYTES_SETTING_TYPE,,) = _aoSetting.getSettingTypes();\n\t\t// Make sure the setting type is bytes32\n\t\trequire (_aoSetting.settingTypeLookup(_settingId) == BYTES_SETTING_TYPE);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check whether or not setting is of type string\n\t */\n\tmodifier isStringSetting(uint256 _settingId) {\n\t\t(,,, uint8 STRING_SETTING_TYPE,) = _aoSetting.getSettingTypes();\n\t\t// Make sure the setting type is string\n\t\trequire (_aoSetting.settingTypeLookup(_settingId) == STRING_SETTING_TYPE);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check whether or not setting is of type uint256\n\t */\n\tmodifier isUintSetting(uint256 _settingId) {\n\t\t(,,,, uint8 UINT_SETTING_TYPE) = _aoSetting.getSettingTypes();\n\t\t// Make sure the setting type is uint256\n\t\trequire (_aoSetting.settingTypeLookup(_settingId) == UINT_SETTING_TYPE);\n\t\t_;\n\t}\n\n\t/***** The AO ONLY METHODS *****/\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n\n\t/**\n\t * @dev The AO sets NameFactory address\n\t * @param _nameFactoryAddress The address of NameFactory\n\t */\n\tfunction setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {\n\t\trequire (_nameFactoryAddress != address(0));\n\t\tnameFactoryAddress = _nameFactoryAddress;\n\t\t_nameFactory = INameFactory(_nameFactoryAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets NameTAOPosition address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\n\t\trequire (_nameTAOPositionAddress != address(0));\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\n\t\t_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the NameAccountRecovery Address\n\t * @param _nameAccountRecoveryAddress The address of NameAccountRecovery\n\t */\n\tfunction setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {\n\t\trequire (_nameAccountRecoveryAddress != address(0));\n\t\tnameAccountRecoveryAddress = _nameAccountRecoveryAddress;\n\t\t_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets AOSettingAttribute address\n\t * @param _aoSettingAttributeAddress The address of AOSettingAttribute\n\t */\n\tfunction setAOSettingAttributeAddress(address _aoSettingAttributeAddress) public onlyTheAO {\n\t\trequire (_aoSettingAttributeAddress != address(0));\n\t\taoSettingAttributeAddress = _aoSettingAttributeAddress;\n\t\t_aoSettingAttribute = IAOSettingAttribute(_aoSettingAttributeAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets AOSettingValue address\n\t * @param _aoSettingValueAddress The address of AOSettingValue\n\t */\n\tfunction setAOSettingValueAddress(address _aoSettingValueAddress) public onlyTheAO {\n\t\trequire (_aoSettingValueAddress != address(0));\n\t\taoSettingValueAddress = _aoSettingValueAddress;\n\t\t_aoSettingValue = IAOSettingValue(_aoSettingValueAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets AOSetting address\n\t * @param _aoSettingAddress The address of AOSetting\n\t */\n\tfunction setAOSettingAddress(address _aoSettingAddress) public onlyTheAO {\n\t\trequire (_aoSettingAddress != address(0));\n\t\taoSettingAddress = _aoSettingAddress;\n\t\t_aoSetting = IAOSetting(_aoSettingAddress);\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * @dev Advocate of Setting's _associatedTAOId submits an address setting update after an update has been proposed\n\t * @param _settingId The ID of the setting to be updated\n\t * @param _newValue The new address value for this setting\n\t * @param _proposalTAOId The child of the associatedTAOId with the update Logos\n\t * @param _signatureV The V part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _signatureR The R part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _signatureS The S part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _extraData Catch-all string value to be stored if exist\n\t */\n\tfunction updateAddressSetting(\n\t\tuint256 _settingId,\n\t\taddress _newValue,\n\t\taddress _proposalTAOId,\n\t\tuint8 _signatureV,\n\t\tbytes32 _signatureR,\n\t\tbytes32 _signatureS,\n\t\tstring memory _extraData)\n\t\tpublic\n\t\tcanUpdate(_proposalTAOId)\n\t\tisAddressSetting(_settingId) {\n\n\t\t// Verify and store update address signature\n\t\trequire (_verifyAndStoreUpdateAddressSignature(_settingId, _newValue, _proposalTAOId, _signatureV, _signatureR, _signatureS));\n\n\t\t// Store the setting state data\n\t\trequire (_aoSettingAttribute.update(_settingId, _nameFactory.ethAddressToNameId(msg.sender), _proposalTAOId, _extraData));\n\n\t\t// Store the value as pending value\n\t\t_aoSettingValue.setPendingValue(_settingId, _newValue, false, '', '', 0);\n\n\t\t// Store the update hash key lookup\n\t\t_storeUpdateAddressHashLookup(_settingId, _newValue, _proposalTAOId, _extraData);\n\n\t\temit SettingUpdate(_settingId, _nameFactory.ethAddressToNameId(msg.sender), _proposalTAOId);\n\t}\n\n\t/**\n\t * @dev Advocate of Setting's _associatedTAOId submits a bool setting update after an update has been proposed\n\t * @param _settingId The ID of the setting to be updated\n\t * @param _newValue The new bool value for this setting\n\t * @param _proposalTAOId The child of the associatedTAOId with the update Logos\n\t * @param _signatureV The V part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _signatureR The R part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _signatureS The S part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _extraData Catch-all string value to be stored if exist\n\t */\n\tfunction updateBoolSetting(\n\t\tuint256 _settingId,\n\t\tbool _newValue,\n\t\taddress _proposalTAOId,\n\t\tuint8 _signatureV,\n\t\tbytes32 _signatureR,\n\t\tbytes32 _signatureS,\n\t\tstring memory _extraData)\n\t\tpublic\n\t\tcanUpdate(_proposalTAOId)\n\t\tisBoolSetting(_settingId) {\n\n\t\t// Verify and store update bool signature\n\t\trequire (_verifyAndStoreUpdateBoolSignature(_settingId, _newValue, _proposalTAOId, _signatureV, _signatureR, _signatureS));\n\n\t\t// Store the setting state data\n\t\trequire (_aoSettingAttribute.update(_settingId, _nameFactory.ethAddressToNameId(msg.sender), _proposalTAOId, _extraData));\n\n\t\t// Store the value as pending value\n\t\t_aoSettingValue.setPendingValue(_settingId, address(0), _newValue, '', '', 0);\n\n\t\t// Store the update hash key lookup\n\t\t_storeUpdateBoolHashLookup(_settingId, _newValue, _proposalTAOId, _extraData);\n\n\t\temit SettingUpdate(_settingId, _nameFactory.ethAddressToNameId(msg.sender), _proposalTAOId);\n\t}\n\n\t/**\n\t * @dev Advocate of Setting's _associatedTAOId submits a bytes32 setting update after an update has been proposed\n\t * @param _settingId The ID of the setting to be updated\n\t * @param _newValue The new bytes32 value for this setting\n\t * @param _proposalTAOId The child of the associatedTAOId with the update Logos\n\t * @param _signatureV The V part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _signatureR The R part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _signatureS The S part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _extraData Catch-all string value to be stored if exist\n\t */\n\tfunction updateBytesSetting(\n\t\tuint256 _settingId,\n\t\tbytes32 _newValue,\n\t\taddress _proposalTAOId,\n\t\tuint8 _signatureV,\n\t\tbytes32 _signatureR,\n\t\tbytes32 _signatureS,\n\t\tstring memory _extraData)\n\t\tpublic\n\t\tcanUpdate(_proposalTAOId)\n\t\tisBytesSetting(_settingId) {\n\n\t\t// Verify and store update bytes32 signature\n\t\trequire (_verifyAndStoreUpdateBytesSignature(_settingId, _newValue, _proposalTAOId, _signatureV, _signatureR, _signatureS));\n\n\t\t// Store the setting state data\n\t\trequire (_aoSettingAttribute.update(_settingId, _nameFactory.ethAddressToNameId(msg.sender), _proposalTAOId, _extraData));\n\n\t\t// Store the value as pending value\n\t\t_aoSettingValue.setPendingValue(_settingId, address(0), false, _newValue, '', 0);\n\n\t\t// Store the update hash key lookup\n\t\t_storeUpdateBytesHashLookup(_settingId, _newValue, _proposalTAOId, _extraData);\n\n\t\temit SettingUpdate(_settingId, _nameFactory.ethAddressToNameId(msg.sender), _proposalTAOId);\n\t}\n\n\t/**\n\t * @dev Advocate of Setting's _associatedTAOId submits a string setting update after an update has been proposed\n\t * @param _settingId The ID of the setting to be updated\n\t * @param _newValue The new string value for this setting\n\t * @param _proposalTAOId The child of the associatedTAOId with the update Logos\n\t * @param _signatureV The V part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _signatureR The R part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _signatureS The S part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _extraData Catch-all string value to be stored if exist\n\t */\n\tfunction updateStringSetting(\n\t\tuint256 _settingId,\n\t\tstring memory _newValue,\n\t\taddress _proposalTAOId,\n\t\tuint8 _signatureV,\n\t\tbytes32 _signatureR,\n\t\tbytes32 _signatureS,\n\t\tstring memory _extraData)\n\t\tpublic\n\t\tcanUpdate(_proposalTAOId)\n\t\tisStringSetting(_settingId) {\n\n\t\t// Verify and store update string signature\n\t\trequire (_verifyAndStoreUpdateStringSignature(_settingId, _newValue, _proposalTAOId, _signatureV, _signatureR, _signatureS));\n\n\t\t// Store the setting state data\n\t\trequire (_aoSettingAttribute.update(_settingId, _nameFactory.ethAddressToNameId(msg.sender), _proposalTAOId, _extraData));\n\n\t\t// Store the value as pending value\n\t\t_aoSettingValue.setPendingValue(_settingId, address(0), false, '', _newValue, 0);\n\n\t\t// Store the update hash key lookup\n\t\t_storeUpdateStringHashLookup(_settingId, _newValue, _proposalTAOId, _extraData);\n\n\t\temit SettingUpdate(_settingId, _nameFactory.ethAddressToNameId(msg.sender), _proposalTAOId);\n\t}\n\n\t/**\n\t * @dev Advocate of Setting's _associatedTAOId submits a uint256 setting update after an update has been proposed\n\t * @param _settingId The ID of the setting to be updated\n\t * @param _newValue The new uint256 value for this setting\n\t * @param _proposalTAOId The child of the associatedTAOId with the update Logos\n\t * @param _signatureV The V part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _signatureR The R part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _signatureS The S part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _extraData Catch-all string value to be stored if exist\n\t */\n\tfunction updateUintSetting(\n\t\tuint256 _settingId,\n\t\tuint256 _newValue,\n\t\taddress _proposalTAOId,\n\t\tuint8 _signatureV,\n\t\tbytes32 _signatureR,\n\t\tbytes32 _signatureS,\n\t\tstring memory _extraData)\n\t\tpublic\n\t\tcanUpdate(_proposalTAOId)\n\t\tisUintSetting(_settingId) {\n\n\t\t// Verify and store update uint256 signature\n\t\trequire (_verifyAndStoreUpdateUintSignature(_settingId, _newValue, _proposalTAOId, _signatureV, _signatureR, _signatureS));\n\n\t\t// Store the setting state data\n\t\trequire (_aoSettingAttribute.update(_settingId, _nameFactory.ethAddressToNameId(msg.sender), _proposalTAOId, _extraData));\n\n\t\t// Store the value as pending value\n\t\t_aoSettingValue.setPendingValue(_settingId, address(0), false, '', '', _newValue);\n\n\t\t// Store the update hash key lookup\n\t\t_storeUpdateUintHashLookup(_settingId, _newValue, _proposalTAOId, _extraData);\n\n\t\temit SettingUpdate(_settingId, _nameFactory.ethAddressToNameId(msg.sender), _proposalTAOId);\n\t}\n\n\t/**\n\t * @dev Advocate of Setting's proposalTAOId approves the setting update\n\t * @param _settingId The ID of the setting to be approved\n\t * @param _approved Whether to approve or reject\n\t */\n\tfunction approveSettingUpdate(uint256 _settingId, bool _approved) public senderIsName senderNameNotCompromised {\n\t\t// Make sure setting exist\n\t\trequire (_aoSetting.settingTypeLookup(_settingId) > 0);\n\n\t\taddress _proposalTAOAdvocate = _nameFactory.ethAddressToNameId(msg.sender);\n\t\t(,,, address _proposalTAOId,,) = _aoSettingAttribute.getSettingState(_settingId);\n\n\t\trequire (_aoSettingAttribute.approveUpdate(_settingId, _proposalTAOAdvocate, _approved));\n\n\t\temit ApproveSettingUpdate(_settingId, _proposalTAOId, _proposalTAOAdvocate, _approved);\n\t}\n\n\t/**\n\t * @dev Advocate of Setting's _associatedTAOId finalizes the setting update once the setting is approved\n\t * @param _settingId The ID of the setting to be finalized\n\t */\n\tfunction finalizeSettingUpdate(uint256 _settingId) public senderIsName senderNameNotCompromised {\n\t\t// Make sure setting exist\n\t\trequire (_aoSetting.settingTypeLookup(_settingId) > 0);\n\n\t\taddress _associatedTAOAdvocate = _nameFactory.ethAddressToNameId(msg.sender);\n\t\trequire (_aoSettingAttribute.finalizeUpdate(_settingId, _associatedTAOAdvocate));\n\n\t\t(,,, address _associatedTAOId,,,,,) = _aoSettingAttribute.getSettingData(_settingId);\n\n\t\trequire (_aoSettingValue.movePendingToSetting(_settingId));\n\n\t\temit FinalizeSettingUpdate(_settingId, _associatedTAOId, _associatedTAOAdvocate);\n\t}\n\n\t/***** Internal Method *****/\n\t/**\n\t * @dev Verify the signature for the address update and store the signature info\n\t * @param _settingId The ID of the setting to be updated\n\t * @param _newValue The new address value for this setting\n\t * @param _proposalTAOId The child of the associatedTAOId with the update Logos\n\t * @param _v The V part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _r The R part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _s The S part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @return true if valid, false otherwise\n\t */\n\tfunction _verifyAndStoreUpdateAddressSignature(\n\t\tuint256 _settingId,\n\t\taddress _newValue,\n\t\taddress _proposalTAOId,\n\t\tuint8 _v,\n\t\tbytes32 _r,\n\t\tbytes32 _s\n\t\t) internal returns (bool) {\n\t\tbytes32 _hash = keccak256(abi.encodePacked(address(this), _settingId, _proposalTAOId, _newValue, _nameFactory.ethAddressToNameId(msg.sender)));\n\t\tif (ecrecover(_hash, _v, _r, _s) != msg.sender) {\n\t\t\treturn false;\n\t\t}\n\t\t_storeUpdateSignature(_settingId, _v, _r, _s);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Verify the signature for the bool update and store the signature info\n\t * @param _settingId The ID of the setting to be updated\n\t * @param _newValue The new bool value for this setting\n\t * @param _proposalTAOId The child of the associatedTAOId with the update Logos\n\t * @param _v The V part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _r The R part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _s The S part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @return true if valid, false otherwise\n\t */\n\tfunction _verifyAndStoreUpdateBoolSignature(\n\t\tuint256 _settingId,\n\t\tbool _newValue,\n\t\taddress _proposalTAOId,\n\t\tuint8 _v,\n\t\tbytes32 _r,\n\t\tbytes32 _s\n\t\t) internal returns (bool) {\n\t\tbytes32 _hash = keccak256(abi.encodePacked(address(this), _settingId, _proposalTAOId, _newValue, _nameFactory.ethAddressToNameId(msg.sender)));\n\t\tif (ecrecover(_hash, _v, _r, _s) != msg.sender) {\n\t\t\treturn false;\n\t\t}\n\t\t_storeUpdateSignature(_settingId, _v, _r, _s);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Verify the signature for the bytes32 update and store the signature info\n\t * @param _settingId The ID of the setting to be updated\n\t * @param _newValue The new bytes32 value for this setting\n\t * @param _proposalTAOId The child of the associatedTAOId with the update Logos\n\t * @param _v The V part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _r The R part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _s The S part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @return true if valid, false otherwise\n\t */\n\tfunction _verifyAndStoreUpdateBytesSignature(\n\t\tuint256 _settingId,\n\t\tbytes32 _newValue,\n\t\taddress _proposalTAOId,\n\t\tuint8 _v,\n\t\tbytes32 _r,\n\t\tbytes32 _s\n\t\t) internal returns (bool) {\n\t\tbytes32 _hash = keccak256(abi.encodePacked(address(this), _settingId, _proposalTAOId, _newValue, _nameFactory.ethAddressToNameId(msg.sender)));\n\t\tif (ecrecover(_hash, _v, _r, _s) != msg.sender) {\n\t\t\treturn false;\n\t\t}\n\t\t_storeUpdateSignature(_settingId, _v, _r, _s);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Verify the signature for the string update and store the signature info\n\t * @param _settingId The ID of the setting to be updated\n\t * @param _newValue The new string value for this setting\n\t * @param _proposalTAOId The child of the associatedTAOId with the update Logos\n\t * @param _v The V part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _r The R part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _s The S part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @return true if valid, false otherwise\n\t */\n\tfunction _verifyAndStoreUpdateStringSignature(\n\t\tuint256 _settingId,\n\t\tstring memory _newValue,\n\t\taddress _proposalTAOId,\n\t\tuint8 _v,\n\t\tbytes32 _r,\n\t\tbytes32 _s\n\t\t) internal returns (bool) {\n\t\tbytes32 _hash = keccak256(abi.encodePacked(address(this), _settingId, _proposalTAOId, _newValue, _nameFactory.ethAddressToNameId(msg.sender)));\n\t\tif (ecrecover(_hash, _v, _r, _s) != msg.sender) {\n\t\t\treturn false;\n\t\t}\n\t\t_storeUpdateSignature(_settingId, _v, _r, _s);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Verify the signature for the uint256 update and store the signature info\n\t * @param _settingId The ID of the setting to be updated\n\t * @param _newValue The new uint256 value for this setting\n\t * @param _proposalTAOId The child of the associatedTAOId with the update Logos\n\t * @param _v The V part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _r The R part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _s The S part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @return true if valid, false otherwise\n\t */\n\tfunction _verifyAndStoreUpdateUintSignature(\n\t\tuint256 _settingId,\n\t\tuint256 _newValue,\n\t\taddress _proposalTAOId,\n\t\tuint8 _v,\n\t\tbytes32 _r,\n\t\tbytes32 _s\n\t\t) public returns (bool) {\n\t\tbytes32 _hash = keccak256(abi.encodePacked(address(this), _settingId, _proposalTAOId, _newValue, _nameFactory.ethAddressToNameId(msg.sender)));\n\t\tif (ecrecover(_hash, _v, _r, _s) != msg.sender) {\n\t\t\treturn false;\n\t\t}\n\t\t_storeUpdateSignature(_settingId, _v, _r, _s);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Store the update hash lookup for this address setting\n\t * @param _settingId The ID of the setting to be updated\n\t * @param _newValue The new address value for this setting\n\t * @param _proposalTAOId The child of the associatedTAOId with the update Logos\n\t * @param _extraData Catch-all string value to be stored if exist\n\t */\n\tfunction _storeUpdateAddressHashLookup(\n\t\tuint256 _settingId,\n\t\taddress _newValue,\n\t\taddress _proposalTAOId,\n\t\tstring memory _extraData)\n\t\tinternal {\n\t\t// Store the update hash key lookup\n\t\t(address _addressValue,,,,) = _aoSettingValue.settingValue(_settingId);\n\t\tupdateHashLookup[keccak256(abi.encodePacked(address(this), _proposalTAOId, _addressValue, _newValue, _extraData, _settingId))] = _settingId;\n\t}\n\n\t/**\n\t * @dev Store the update hash lookup for this bool setting\n\t * @param _settingId The ID of the setting to be updated\n\t * @param _newValue The new bool value for this setting\n\t * @param _proposalTAOId The child of the associatedTAOId with the update Logos\n\t * @param _extraData Catch-all string value to be stored if exist\n\t */\n\tfunction _storeUpdateBoolHashLookup(\n\t\tuint256 _settingId,\n\t\tbool _newValue,\n\t\taddress _proposalTAOId,\n\t\tstring memory _extraData)\n\t\tinternal {\n\t\t// Store the update hash key lookup\n\t\t(, bool _boolValue,,,) = _aoSettingValue.settingValue(_settingId);\n\t\tupdateHashLookup[keccak256(abi.encodePacked(address(this), _proposalTAOId, _boolValue, _newValue, _extraData, _settingId))] = _settingId;\n\t}\n\n\t/**\n\t * @dev Store the update hash lookup for this bytes32 setting\n\t * @param _settingId The ID of the setting to be updated\n\t * @param _newValue The new bytes32 value for this setting\n\t * @param _proposalTAOId The child of the associatedTAOId with the update Logos\n\t * @param _extraData Catch-all string value to be stored if exist\n\t */\n\tfunction _storeUpdateBytesHashLookup(\n\t\tuint256 _settingId,\n\t\tbytes32 _newValue,\n\t\taddress _proposalTAOId,\n\t\tstring memory _extraData)\n\t\tinternal {\n\t\t// Store the update hash key lookup\n\t\t(,, bytes32 _bytesValue,,) = _aoSettingValue.settingValue(_settingId);\n\t\tupdateHashLookup[keccak256(abi.encodePacked(address(this), _proposalTAOId, _bytesValue, _newValue, _extraData, _settingId))] = _settingId;\n\t}\n\n\t/**\n\t * @dev Store the update hash lookup for this string setting\n\t * @param _settingId The ID of the setting to be updated\n\t * @param _newValue The new string value for this setting\n\t * @param _proposalTAOId The child of the associatedTAOId with the update Logos\n\t * @param _extraData Catch-all string value to be stored if exist\n\t */\n\tfunction _storeUpdateStringHashLookup(\n\t\tuint256 _settingId,\n\t\tstring memory _newValue,\n\t\taddress _proposalTAOId,\n\t\tstring memory _extraData)\n\t\tinternal {\n\t\t// Store the update hash key lookup\n\t\t(,,, string memory _stringValue,) = _aoSettingValue.settingValue(_settingId);\n\t\tupdateHashLookup[keccak256(abi.encodePacked(address(this), _proposalTAOId, _stringValue, _newValue, _extraData, _settingId))] = _settingId;\n\t}\n\n\t/**\n\t * @dev Store the update hash lookup for this uint256 setting\n\t * @param _settingId The ID of the setting to be updated\n\t * @param _newValue The new address value for this setting\n\t * @param _proposalTAOId The child of the associatedTAOId with the update Logos\n\t * @param _extraData Catch-all string value to be stored if exist\n\t */\n\tfunction _storeUpdateUintHashLookup(\n\t\tuint256 _settingId,\n\t\tuint256 _newValue,\n\t\taddress _proposalTAOId,\n\t\tstring memory _extraData)\n\t\tinternal {\n\t\t// Store the update hash key lookup\n\t\t(,,,, uint256 _uintValue) = _aoSettingValue.settingValue(_settingId);\n\t\tupdateHashLookup[keccak256(abi.encodePacked(address(this), _proposalTAOId, _uintValue, _newValue, _extraData, _settingId))] = _settingId;\n\t}\n\n\t/**\n\t * @dev Actual storing the UpdateSignature info\n\t * @param _settingId The ID of the setting to be updated\n\t * @param _v The V part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _r The R part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t * @param _s The S part of the signature of proposalTAOId, newValue and associatedTAOId's Advocate\n\t */\n\tfunction _storeUpdateSignature(uint256 _settingId, uint8 _v, bytes32 _r, bytes32 _s) internal {\n\t\tUpdateSignature storage _updateSignature = updateSignatures[_settingId];\n\t\t_updateSignature.signatureV = _v;\n\t\t_updateSignature.signatureR = _r;\n\t\t_updateSignature.signatureS = _s;\n\t}\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_aoSettingAddress\",\"type\":\"address\"}],\"name\":\"setAOSettingAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"bool\"},{\"name\":\"_proposalTAOId\",\"type\":\"address\"},{\"name\":\"_signatureV\",\"type\":\"uint8\"},{\"name\":\"_signatureR\",\"type\":\"bytes32\"},{\"name\":\"_signatureS\",\"type\":\"bytes32\"},{\"name\":\"_extraData\",\"type\":\"string\"}],\"name\":\"updateBoolSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"bytes32\"},{\"name\":\"_proposalTAOId\",\"type\":\"address\"},{\"name\":\"_signatureV\",\"type\":\"uint8\"},{\"name\":\"_signatureR\",\"type\":\"bytes32\"},{\"name\":\"_signatureS\",\"type\":\"bytes32\"},{\"name\":\"_extraData\",\"type\":\"string\"}],\"name\":\"updateBytesSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"updateHashLookup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"updateSignatures\",\"outputs\":[{\"name\":\"signatureV\",\"type\":\"uint8\"},{\"name\":\"signatureR\",\"type\":\"bytes32\"},{\"name\":\"signatureS\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoSettingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameAccountRecoveryAddress\",\"type\":\"address\"}],\"name\":\"setNameAccountRecoveryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"approveSettingUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoSettingValueAddress\",\"type\":\"address\"}],\"name\":\"setAOSettingValueAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameTAOPositionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"name\":\"setNameTAOPositionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoSettingAttributeAddress\",\"type\":\"address\"}],\"name\":\"setAOSettingAttributeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"}],\"name\":\"setNameFactoryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"},{\"name\":\"_proposalTAOId\",\"type\":\"address\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"_verifyAndStoreUpdateUintSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"}],\"name\":\"finalizeSettingUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"string\"},{\"name\":\"_proposalTAOId\",\"type\":\"address\"},{\"name\":\"_signatureV\",\"type\":\"uint8\"},{\"name\":\"_signatureR\",\"type\":\"bytes32\"},{\"name\":\"_signatureS\",\"type\":\"bytes32\"},{\"name\":\"_extraData\",\"type\":\"string\"}],\"name\":\"updateStringSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"},{\"name\":\"_proposalTAOId\",\"type\":\"address\"},{\"name\":\"_signatureV\",\"type\":\"uint8\"},{\"name\":\"_signatureR\",\"type\":\"bytes32\"},{\"name\":\"_signatureS\",\"type\":\"bytes32\"},{\"name\":\"_extraData\",\"type\":\"string\"}],\"name\":\"updateUintSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameAccountRecoveryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theAO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameFactoryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoSettingAttributeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoSettingValueAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"address\"},{\"name\":\"_proposalTAOId\",\"type\":\"address\"},{\"name\":\"_signatureV\",\"type\":\"uint8\"},{\"name\":\"_signatureR\",\"type\":\"bytes32\"},{\"name\":\"_signatureS\",\"type\":\"bytes32\"},{\"name\":\"_extraData\",\"type\":\"string\"}],\"name\":\"updateAddressSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_theAO\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"},{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"},{\"name\":\"_nameAccountRecoveryAddress\",\"type\":\"address\"},{\"name\":\"_aoSettingAttributeAddress\",\"type\":\"address\"},{\"name\":\"_aoSettingValueAddress\",\"type\":\"address\"},{\"name\":\"_aoSettingAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"settingId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"updateAdvocateNameId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proposalTAOId\",\"type\":\"address\"}],\"name\":\"SettingUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"settingId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proposalTAOId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proposalTAOAdvocate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApproveSettingUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"settingId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"associatedTAOId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"associatedTAOAdvocate\",\"type\":\"address\"}],\"name\":\"FinalizeSettingUpdate\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000010fbf61e4cce57d72eed8b5d9728134ce374bd820000000000000000000000001f7f65b220a0f2d48b28390380f57468e7a382fe000000000000000000000000a829ff6e63c2a2e043b70a614faf074d8dbe9a8d0000000000000000000000009e083eb1c302e2fbf7cb50536608902c0b38743e000000000000000000000000c51f8ed65b9870549abf87815948fd6a1a74fc5f000000000000000000000000bd314084ac5872598fdff2f31567084fc9c44270",
  "libraries": [
    {
      "name": "AOLibrary",
      "address": "0x1150d53299Abb7DE27464D01B626728f5c840229"
    }
  ]
}