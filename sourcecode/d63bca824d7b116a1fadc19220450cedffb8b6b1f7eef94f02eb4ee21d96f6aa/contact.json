{
  "address": "0x02c16d7ac580bc10e004fc74527d6b2e52f5151a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NodeRegistry",
  "compilerVersion": "v0.5.3+commit.10d17f24",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-11\n*/\n\npragma solidity ^0.5.3;\n\n// File: contracts/utility/Ownable.sol\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/utility/Approvable.sol\n\ncontract Approvable is Ownable {\n    mapping(address => bool) private _approvedAddress;\n\n\n    modifier onlyApproved() {\n        require(isApproved());\n        _;\n    }\n\n    function isApproved() public view returns(bool) {\n        return _approvedAddress[msg.sender] || isOwner();\n    }\n\n    function approveAddress(address _address) public onlyOwner {\n        _approvedAddress[_address] = true;\n    }\n\n    function revokeApproval(address _address) public onlyOwner {\n        _approvedAddress[_address] = false;\n    }\n}\n\n// File: contracts/utility/StoringCreationMeta.sol\n\ncontract StoringCreationMeta {\n    uint public creationBlock;\n    uint public creationTime;\n\n    constructor() internal {\n        creationBlock = block.number;\n        creationTime = block.timestamp;\n    }\n}\n\n// File: contracts/NodeRegistry.sol\n\ncontract NodeRegistry is StoringCreationMeta, Approvable {\n    mapping(address => string) public nodeIp;\n    mapping(address => string) public nodeWs;\n\n    mapping(address => uint) public nodeCountLimit;\n\n    struct NodeList {\n        address[] items;\n        mapping(address => uint) position;\n    }\n    mapping(address => NodeList) userNodes;\n    NodeList availableNodes;\n\n    modifier onlyRegisteredNode() {\n        require(\n            availableNodes.position[msg.sender] > 0,\n            \"Node not registered.\"\n        );\n        _;\n    }\n\n    function registerNodes(address[] memory _nodeAddresses) public {\n        NodeList storage _nodes = userNodes[msg.sender];\n\n        require(\n            nodeCountLimit[msg.sender] >=\n            _nodes.items.length + _nodeAddresses.length,\n            \"Over the limit.\"\n        );\n\n        for(uint i = 0; i < _nodeAddresses.length; i++) {\n            // If it doesn't exist already\n            if(_nodes.position[_nodeAddresses[i]] == 0) {\n                registerNode(_nodeAddresses[i]);\n            }\n        }\n    }\n\n    function deregisterNodes(address[] memory _nodeAddresses) public {\n        for(uint i = 0; i < _nodeAddresses.length; i++) {\n            deregisterNode(_nodeAddresses[i]);\n        }\n    }\n\n    function deregisterNode(address _nodeAddress) private {\n        NodeList storage _nodes = userNodes[msg.sender];\n\n        if(_nodes.position[_nodeAddress] == 0) {\n            revert(\"Node not registered.\");\n        }\n\n        removeFromList(_nodes, _nodeAddress);\n        removeFromList(availableNodes, _nodeAddress);\n\n        delete nodeIp[_nodeAddress];\n        delete nodeWs[_nodeAddress];\n    }\n\n    function removeFromList(NodeList storage _nodes, address _item) private {\n        uint nIndex = _nodes.position[_item] - 1;\n        uint lastIndex = _nodes.items.length - 1;\n        address lastItem = _nodes.items[lastIndex];\n\n        _nodes.items[nIndex] = lastItem;\n        _nodes.position[lastItem] = nIndex + 1;\n        _nodes.position[_item] = 0;\n\n        _nodes.items.pop();\n    }\n\n    function registerNode(address _nodeAddress) private {\n        NodeList storage _nodes = userNodes[msg.sender];\n\n        if(availableNodes.position[_nodeAddress] != 0) {\n            revert(\"Node already registered by another user.\");\n        }\n\n        // Save to user nodes\n        _nodes.items.push(_nodeAddress);\n        _nodes.position[_nodeAddress] = _nodes.items.length;\n\n        // Save to global nodes\n        availableNodes.items.push(_nodeAddress);\n        availableNodes.position[_nodeAddress] = availableNodes.items.length;\n    }\n\n    function getAvailableNodes() public view returns(address[] memory) {\n        return availableNodes.items;\n    }\n\n    function getUserNodes(address _user) public view returns(address[] memory) {\n        return userNodes[_user].items;\n    }\n\n    function setNodeLimits(address[] memory _users, uint[] memory _limits) public onlyApproved {\n        require(_users.length == _limits.length, \"Length mismatch.\");\n\n        for(uint i = 0; i < _users.length; ++i) {\n            _setNodeLimit(_users[i], _limits[i]);\n        }\n    }\n\n    function _setNodeLimit(address _user, uint _limit) private {\n        nodeCountLimit[_user] = _limit;\n\n        _pruneUserNodes(_user, _limit);\n    }\n\n    function _pruneUserNodes(address _user, uint _limit) private view {\n        if (_limit >= nodeCountLimit[_user]) {\n            return;\n        }\n    }\n\n    function registerNodeIp(string memory _ip) public onlyRegisteredNode {\n        nodeIp[msg.sender] = _ip;\n    }\n\n    function registerNodeWs(string memory _ws) public onlyRegisteredNode {\n        nodeWs[msg.sender] = _ws;\n    }\n\n    function registerNodeIpAndWs(string memory _ip, string memory _ws) public onlyRegisteredNode {\n        nodeIp[msg.sender] = _ip;\n        nodeWs[msg.sender] = _ws;\n    }\n\n    function getNodeIpAndWs(address _node) public view returns(string memory, string memory) {\n        return (nodeIp[_node], nodeWs[_node]);\n    }\n}",
  "bytecode": "608060408190524360009081554260015560028054600160a060020a031916331790819055600160a060020a0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36115bf806100626000396000f3fe608060405234801561001057600080fd5b5060043610610149576000357c0100000000000000000000000000000000000000000000000000000000900480636bbd3fa5116100ca578063d38019091161008e578063d380190914610866578063d8270dce14610901578063f2fde38b14610909578063f363f5501461092f578063fabf657a1461095557610149565b80636bbd3fa5146105c75780636cbb34ee1461066a57806386357942146107975780638da5cb5b1461083a5780638f32d59b1461085e57610149565b8063389204071161011157806338920407146103c9578063436a014a146104cd578063484685b0146104d557806351c6e21a146104fb57806365df48311461052157610149565b8063062c0e761461014e57806317634514146102775780632130fe231461029157806328f371aa1461030757806337f1992014610323575b600080fd5b6102756004803603604081101561016457600080fd5b81019060208101813564010000000081111561017f57600080fd5b82018360208201111561019157600080fd5b803590602001918460208302840111640100000000831117156101b357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561020357600080fd5b82018360208201111561021557600080fd5b8035906020019184602083028401116401000000008311171561023757600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061097b945050505050565b005b61027f610a38565b60408051918252519081900360200190f35b6102b7600480360360208110156102a757600080fd5b5035600160a060020a0316610a3e565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102f35781810151838201526020016102db565b505050509050019250505060405180910390f35b61030f610ab4565b604080519115158252519081900360200190f35b6102756004803603602081101561033957600080fd5b81019060208101813564010000000081111561035457600080fd5b82018360208201111561036657600080fd5b8035906020019184600183028401116401000000008311171561038857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610adb945050505050565b6103ef600480360360208110156103df57600080fd5b5035600160a060020a0316610b52565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610430578181015183820152602001610418565b50505050905090810190601f16801561045d5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610490578181015183820152602001610478565b50505050905090810190601f1680156104bd5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6102b7610c9a565b610275600480360360208110156104eb57600080fd5b5035600160a060020a0316610cff565b61027f6004803603602081101561051157600080fd5b5035600160a060020a0316610d33565b6102756004803603602081101561053757600080fd5b81019060208101813564010000000081111561055257600080fd5b82018360208201111561056457600080fd5b8035906020019184600183028401116401000000008311171561058657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610d45945050505050565b610275600480360360208110156105dd57600080fd5b8101906020810181356401000000008111156105f857600080fd5b82018360208201111561060a57600080fd5b8035906020019184602083028401116401000000008311171561062c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610db8945050505050565b6102756004803603604081101561068057600080fd5b81019060208101813564010000000081111561069b57600080fd5b8201836020820111156106ad57600080fd5b803590602001918460018302840111640100000000831117156106cf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561072257600080fd5b82018360208201111561073457600080fd5b8035906020019184600183028401116401000000008311171561075657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610eab945050505050565b610275600480360360208110156107ad57600080fd5b8101906020810181356401000000008111156107c857600080fd5b8201836020820111156107da57600080fd5b803590602001918460208302840111640100000000831117156107fc57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610f3f945050505050565b610842610f73565b60408051600160a060020a039092168252519081900360200190f35b61030f610f82565b61088c6004803603602081101561087c57600080fd5b5035600160a060020a0316610f93565b6040805160208082528351818301528351919283929083019185019080838360005b838110156108c65781810151838201526020016108ae565b50505050905090810190601f1680156108f35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61027f61102e565b6102756004803603602081101561091f57600080fd5b5035600160a060020a0316611034565b61088c6004803603602081101561094557600080fd5b5035600160a060020a0316611053565b6102756004803603602081101561096b57600080fd5b5035600160a060020a03166110bb565b610983610ab4565b151561098e57600080fd5b80518251146109e7576040805160e560020a62461bcd02815260206004820152601060248201527f4c656e677468206d69736d617463682e00000000000000000000000000000000604482015290519081900360640190fd5b60005b8251811015610a3357610a2b8382815181101515610a0457fe5b906020019060200201518383815181101515610a1c57fe5b906020019060200201516110f2565b6001016109ea565b505050565b60005481565b600160a060020a038116600090815260076020908152604091829020805483518184028101840190945280845260609392830182828015610aa857602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610a8a575b50505050509050919050565b3360009081526003602052604081205460ff1680610ad55750610ad5610f82565b90505b90565b3360009081526009602052604081205411610b2e576040805160e560020a62461bcd028152602060048201526014602482015260008051602061154c833981519152604482015290519081900360640190fd5b3360009081526005602090815260409091208251610b4e92840190611473565b5050565b600160a060020a038116600090815260046020908152604080832060058352928190208354825160026001831615610100026000190190921691909104601f8101859004850282018501909352828152606094859490938491830182828015610bfc5780601f10610bd157610100808354040283529160200191610bfc565b820191906000526020600020905b815481529060010190602001808311610bdf57829003601f168201915b5050845460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295975086945092508401905082828015610c8a5780601f10610c5f57610100808354040283529160200191610c8a565b820191906000526020600020905b815481529060010190602001808311610c6d57829003601f168201915b5050505050905091509150915091565b60606008600001805480602002602001604051908101604052809291908181526020018280548015610cf557602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610cd7575b5050505050905090565b610d07610f82565b1515610d1257600080fd5b600160a060020a03166000908152600360205260409020805460ff19169055565b60066020526000908152604090205481565b3360009081526009602052604081205411610d98576040805160e560020a62461bcd028152602060048201526014602482015260008051602061154c833981519152604482015290519081900360640190fd5b3360009081526004602090815260409091208251610b4e92840190611473565b336000908152600760209081526040808320845181546006909452919093205491011115610e30576040805160e560020a62461bcd02815260206004820152600f60248201527f4f76657220746865206c696d69742e0000000000000000000000000000000000604482015290519081900360640190fd5b60005b8251811015610a33578160010160008483815181101515610e5057fe5b90602001906020020151600160a060020a0316600160a060020a031681526020019081526020016000205460001415610ea357610ea38382815181101515610e9457fe5b90602001906020020151611117565b600101610e33565b3360009081526009602052604081205411610efe576040805160e560020a62461bcd028152602060048201526014602482015260008051602061154c833981519152604482015290519081900360640190fd5b3360009081526004602090815260409091208351610f1e92850190611473565b503360009081526005602090815260409091208251610a3392840190611473565b60005b8151811015610b4e57610f6b8282815181101515610f5c57fe5b90602001906020020151611216565b600101610f42565b600254600160a060020a031690565b600254600160a060020a0316331490565b60056020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156110265780601f10610ffb57610100808354040283529160200191611026565b820191906000526020600020905b81548152906001019060200180831161100957829003601f168201915b505050505081565b60015481565b61103c610f82565b151561104757600080fd5b611050816112da565b50565b60046020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156110265780601f10610ffb57610100808354040283529160200191611026565b6110c3610f82565b15156110ce57600080fd5b600160a060020a03166000908152600360205260409020805460ff19166001179055565b600160a060020a0382166000908152600660205260409020819055610b4e8282611358565b336000908152600760209081526040808320600160a060020a03851684526009909252909120541561117d5760405160e560020a62461bcd02815260040180806020018281038252602881526020018061156c6028913960400191505060405180910390fd5b805460018181018355600083815260208082209093018054600160a060020a0390961673ffffffffffffffffffffffffffffffffffffffff199687168117909155845481835294830184526040808320959095556008805493840181557ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee390930180549096168117909555905493815260099091522055565b336000908152600760209081526040808320600160a060020a038516845260018101909252909120541515611283576040805160e560020a62461bcd028152602060048201526014602482015260008051602061154c833981519152604482015290519081900360640190fd5b61128d818361137c565b61129860088361137c565b600160a060020a03821660009081526004602052604081206112b9916114f1565b600160a060020a0382166000908152600560205260408120610b4e916114f1565b600160a060020a03811615156112ef57600080fd5b600254604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0382166000908152600660205260409020548110610b4e57610b4e565b600160a060020a038116600090815260018301602052604081205483546000199182019291810191908590839081106113b157fe5b6000918252602090912001548554600160a060020a03909116915081908690859081106113da57fe5b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039485161790558383168252600188810190915260408083209187019091559186168152908120558454859080151561143d57fe5b6000828152602090208101600019908101805473ffffffffffffffffffffffffffffffffffffffff191690550190555050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114b457805160ff19168380011785556114e1565b828001600101855582156114e1579182015b828111156114e15782518255916020019190600101906114c6565b506114ed929150611531565b5090565b50805460018160011615610100020316600290046000825580601f106115175750611050565b601f01602090049060005260206000209081019061105091905b610ad891905b808211156114ed576000815560010161153756fe4e6f6465206e6f7420726567697374657265642e0000000000000000000000004e6f646520616c7265616479207265676973746572656420627920616e6f7468657220757365722ea165627a7a72305820b8a65109c131f6ceec1c4dedaa71c3543bc505a834b06e0996903af7635ffbd30029"
}