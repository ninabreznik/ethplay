{
  "address": "0x1199e1c21c89bf9653dc2996fed7168a6b587655",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SnailTree",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-29\n*/\n\npragma solidity ^0.4.24;\n\n/* SNAILTREE\n\n// SnailTree is a mock HYIP, coupled with a jackpot.\n\n// To start, players spend ETH to plant a root.\n// They get a \"tree size\" proportional to their investment.\n// They also get Pecans the moment they invest.\n// Pecan number starts proportional to ETH, and then multiplied.\n// This buy multiplier is global.\n// The longer nobody plants a root, the bigger multiplier.\n\n// Each player gets to claim ETH equivalent to their treeSize.\n// This claim starts equivalent to 4% of their initial, daily.\n// This claim also gets them Pecans.\n// The amount of Pecans given raises with time.\n// This claim multiplier builds up the longer the player doesn't claim.\n\n// Instead of claiming ETH, players can grow their tree.\n// Growing the tree reinvests the ETH they would have claimed.\n// Their treeSize raises proportionally.\n// If their lastClaim was at least one hour ago, they receive a boost.\n// Boosts are straight multipliers to Pecan rewards.\n\n// A player can give Pecans to Wonkers the Squirrel,\n// And receive ETH in return, from the wonkPot.\n// Once Wonkers receives enough Pecans, the round is over.\n// Whoever gave him Pecans last wins the roundPot (20% of the jackPot).\n\n// A new round starts immediately.\n// Players from the previous round see their treeSize decrease by 20%.\n// Their growth boost also resets to 1.\n// This occurs automatically on their next action.\n\n*/\n\ncontract SnailTree {\n    using SafeMath for uint;\n    \n    /* Event */\n    \n    event PlantedRoot(address indexed player, uint eth, uint pecan, uint treesize);\n    event GavePecan(address indexed player, uint eth, uint pecan);\n    event ClaimedShare(address indexed player, uint eth, uint pecan);\n    event GrewTree(address indexed player, uint eth, uint pecan, uint boost);\n    event WonRound (address indexed player, uint indexed round, uint eth);\n    event WithdrewBalance (address indexed player, uint eth);\n    event PaidThrone (address indexed player, uint eth);\n    event BoostedPot (address indexed player, uint eth);\n\n    /* Constants */\n    \n    uint256 constant SECONDS_IN_HOUR    = 3600;\n    uint256 constant SECONDS_IN_DAY     = 86400;\n    uint256 constant PECAN_WIN_FACTOR   = 0.0000000001 ether; //add 1B pecans per 0.1 ETH in pot\n    uint256 constant TREE_SIZE_COST     = 0.0000005 ether; //= 1 treeSize\n    uint256 constant REWARD_SIZE_ETH    = 0.00000002 ether; //4% per day per treeSize\n    address constant SNAILTHRONE        = 0x261d650a521103428C6827a11fc0CBCe96D74DBc;\n\n    /* Variables */\n    \n\t//Current round\n    uint256 public gameRound            = 0;\n\t\n\t//Fund for %claims\n\tuint256 public treePot              = 0;\n\t\n\t//Direct rewards\n\tuint256 public wonkPot              = 0;\n\t\n\t//Round winner reward\n\tuint256 public jackPot              = 0;\n\t\n\t//Divs for SnailThrone holders\n\tuint256 public thronePot            = 0;\n\t\n\t//Pecans required to win this round\n\tuint256 public pecanToWin           = 0;\n\t\n\t//Pecans given this round\n\tuint256 public pecanGiven           = 0;\n\t\n\t//Last ETH investment\n\tuint256 public lastRootPlant        = 0;\n\t\n    /* Mappings */\n    \n    mapping (address => uint256) playerRound;\n    mapping (address => uint256) playerBalance;\n    mapping (address => uint256) treeSize;\n    mapping (address => uint256) pecan;\n    mapping (address => uint256) lastClaim;\n    mapping (address => uint256) boost;\n\n    /* Functions */\n    \n    // Constructor\n    // Sets round to 1 and lastRootPlant to now\n    \n    constructor() public {\n        gameRound = 1;\n        pecanToWin = 1;\n        lastRootPlant = now;\n    }\n    \n    //-- PRIVATE --\n    \n    // CheckRound\n    // Ensures player is on correct round\n    // If not, reduce his treeSize by 20% per round missed\n    // Increase his round until he's on the correct one\n    \n    function CheckRound() private {       \n        while(playerRound[msg.sender] != gameRound){\n            treeSize[msg.sender] = treeSize[msg.sender].mul(4).div(5);\n            playerRound[msg.sender] = playerRound[msg.sender].add(1);\n            boost[msg.sender] = 1;\n        }\n    }\n    \n    // WinRound\n    // Called when a player gives enough Pecans to Wonkers\n    // Gives his earnings to winner\n    \n    function WinRound(address _msgSender) private {\n        \n        //Increment round\n        uint256 _round = gameRound;\n        gameRound = gameRound.add(1);\n        \n        //Compute reward and adjust pot\n        uint256 _reward = jackPot.div(5);\n        jackPot = jackPot.sub(_reward);\n        \n        //Reset pecan given to 0\n        pecanGiven = 0;\n        \n        //Set new pecan requirement\n        pecanToWin = ComputePecanToWin();\n    \n        //Send reward\n        playerBalance[_msgSender] = playerBalance[_msgSender].add(_reward);\n        \n        emit WonRound(_msgSender, _round, _reward);\n    }\n    \n    // PotSplit\n\t// Allocates the ETH of every transaction\n\t// 40% treePot, 30% wonkPot, 20% jackPot, 10% thronePot\n    \n    function PotSplit(uint256 _msgValue) private {\n        \n        treePot = treePot.add(_msgValue.mul(4).div(10));\n        wonkPot = wonkPot.add(_msgValue.mul(3).div(10));\n        jackPot = jackPot.add(_msgValue.div(5));\n        thronePot = thronePot.add(_msgValue.div(10));\n    }\n    \n    //-- GAME ACTIONS --\n    \n    // PlantRoot\n    // Gives player treeSize and pecan\n    // Sets lastRootPlant and lastClaim to now\n    \n    function PlantRoot() public payable {\n        require(tx.origin == msg.sender, \"no contracts allowed\");\n        require(msg.value >= 0.001 ether, \"at least 1 finney to plant a root\");\n\n        //Check if player is in correct round\n        CheckRound();\n\n        //Split ETH to pot\n        PotSplit(msg.value);\n        \n        //Set new pecan requirement\n        pecanToWin = ComputePecanToWin();\n        \n        //Get pecans to give\n        uint256 _newPecan = ComputePlantPecan(msg.value);\n        \n        //Set claims to now\n        lastRootPlant = now;\n        lastClaim[msg.sender] = now;\n        \n        //Get treeSize to give\n        uint256 _treePlant = msg.value.div(TREE_SIZE_COST);\n        \n        //Add player treeSize\n        treeSize[msg.sender] = treeSize[msg.sender].add(_treePlant);\n        \n        //Add player pecans\n        pecan[msg.sender] = pecan[msg.sender].add(_newPecan);\n        \n        emit PlantedRoot(msg.sender, msg.value, _newPecan, treeSize[msg.sender]);\n    }\n    \n    // GivePecan\n    // Exchanges player Pecans for ETH\n\t// Wins the round if enough Pecans are given\n    \n    function GivePecan(uint256 _pecanGift) public {\n        require(pecan[msg.sender] >= _pecanGift, \"not enough pecans\");\n        \n        //Check if player is in correct round\n        CheckRound();\n        \n        //Get reward\n        uint256 _ethReward = ComputeWonkTrade(_pecanGift);\n        \n        //Lower player pecan\n        pecan[msg.sender] = pecan[msg.sender].sub(_pecanGift);\n        \n        //Adjust pecan given\n        pecanGiven = pecanGiven.add(_pecanGift);\n        \n        //Lower wonkPot\n        wonkPot = wonkPot.sub(_ethReward);\n        \n        //Give reward\n        playerBalance[msg.sender] = playerBalance[msg.sender].add(_ethReward);\n        \n        //Check if player Wins\n        if(pecanGiven >= pecanToWin){\n            WinRound(msg.sender);\n        } else {\n\t\t\temit GavePecan(msg.sender, _ethReward, _pecanGift);\n\t\t}\n    }\n    \n    // ClaimShare\n    // Gives player his share of ETH, and Pecans\n    // Sets his lastClaim to now\n    \n    function ClaimShare() public {\n        require(treeSize[msg.sender] > 0, \"plant a root first\");\n\t\t\n        //Check if player is in correct round\n        CheckRound();\n        \n        //Get ETH reward\n        uint256 _ethReward = ComputeEtherShare(msg.sender);\n        \n        //Get Pecan reward\n        uint256 _pecanReward = ComputePecanShare(msg.sender);\n        \n        //Set lastClaim\n        lastClaim[msg.sender] = now;\n        \n        //Lower treePot\n        treePot = treePot.sub(_ethReward);\n        \n        //Give rewards\n        pecan[msg.sender] = pecan[msg.sender].add(_pecanReward);\n        playerBalance[msg.sender] = playerBalance[msg.sender].add(_ethReward);\n        \n        emit ClaimedShare(msg.sender, _ethReward, _pecanReward);\n    }\n    \n    // GrowTree\n    // Uses player share to grow his treeSize\n    // Gives share pecans multiplied by boost\n    // Increases boost if last claim was at least one hour ago\n    \n    function GrowTree() public {\n        require(treeSize[msg.sender] > 0, \"plant a root first\");\n\n        //Check if player is in correct round\n        CheckRound();\n        \n        //Get ETH used\n        uint256 _ethUsed = ComputeEtherShare(msg.sender);\n        \n        //Get Pecan reward\n        uint256 _pecanReward = ComputePecanShare(msg.sender);\n        \n        //Check if player gets a boost increase\n        uint256 _timeSpent = now.sub(lastClaim[msg.sender]);\n        \n        //Set lastClaim\n        lastClaim[msg.sender] = now;\n        \n        //Get treeSize to give\n        uint256 _treeGrowth = _ethUsed.div(TREE_SIZE_COST);\n        \n        //Add player treeSize\n        treeSize[msg.sender] = treeSize[msg.sender].add(_treeGrowth);\n        \n        //Give boost if eligible (maximum +10 at once)\n        if(_timeSpent >= SECONDS_IN_HOUR){\n            uint256 _boostPlus = _timeSpent.div(SECONDS_IN_HOUR);\n            if(_boostPlus > 10){\n                _boostPlus = 10;\n            }\n            boost[msg.sender] = boost[msg.sender].add(_boostPlus);\n        }\n        \n        //Give Pecan reward\n        pecan[msg.sender] = pecan[msg.sender].add(_pecanReward);\n        \n        emit GrewTree(msg.sender, _ethUsed, _pecanReward, boost[msg.sender]);\n    }\n    \n    //-- MISC ACTIONS --\n    \n    // WithdrawBalance\n    // Withdraws the ETH balance of a player to his wallet\n    \n    function WithdrawBalance() public {\n        require(playerBalance[msg.sender] > 0, \"no ETH in player balance\");\n        \n        uint _amount = playerBalance[msg.sender];\n        playerBalance[msg.sender] = 0;\n        msg.sender.transfer(_amount);\n        \n        emit WithdrewBalance(msg.sender, _amount);\n    }\n    \n    // PayThrone\n    // Sends thronePot to SnailThrone\n    \n    function PayThrone() public {\n        uint256 _payThrone = thronePot;\n        thronePot = 0;\n        if (!SNAILTHRONE.call.value(_payThrone)()){\n            revert();\n        }\n        \n        emit PaidThrone(msg.sender, _payThrone);\n    }\n    \n    // fallback function\n    // Feeds the jackPot\n    \n    function() public payable {\n        jackPot = jackPot.add(msg.value);\n        \n        emit BoostedPot(msg.sender, msg.value);\n    }\n    \n    //-- CALCULATIONS --\n    \n    // ComputeEtherShare\n    // Returns ETH reward for a claim\n    // Reward = 0.00000002 ETH per treeSize per day\n    \n    function ComputeEtherShare(address adr) public view returns(uint256) {\n        \n        //Get time since last claim\n        uint256 _timeLapsed = now.sub(lastClaim[adr]);\n        \n        //Compute reward\n        uint256 _reward = _timeLapsed.mul(REWARD_SIZE_ETH).mul(treeSize[adr]).div(SECONDS_IN_DAY);\n        \n        //Check reward isn't above remaining treePot\n        if(_reward >= treePot){\n            _reward = treePot;\n        }\n        return _reward;\n    }\n    \n    // ComputeShareBoostFactor\n    // Returns current personal Pecan multiplier\n    // Starts at 4, adds 1 per hour\n    \n    function ComputeShareBoostFactor(address adr) public view returns(uint256) {\n        \n        //Get time since last claim\n        uint256 _timeLapsed = now.sub(lastClaim[adr]);\n        \n        //Compute boostFactor (starts at 4, +1 per hour)\n        uint256 _boostFactor = (_timeLapsed.div(SECONDS_IN_HOUR)).add(4);\n        return _boostFactor;\n    }\n    \n    // ComputePecanShare\n    // Returns Pecan reward for a claim\n    // Reward = 1 Pecan per treeSize per day, multiplied by personal boost\n    \n    function ComputePecanShare(address adr) public view returns(uint256) {\n        \n        //Get time since last claim\n        uint256 _timeLapsed = now.sub(lastClaim[adr]);\n        \n        //Get boostFactor\n        uint256 _shareBoostFactor = ComputeShareBoostFactor(adr);\n        \n        //Compute reward\n        uint256 _reward = _timeLapsed.mul(treeSize[adr]).mul(_shareBoostFactor).mul(boost[msg.sender]).div(SECONDS_IN_DAY);\n        return _reward;\n    }\n    \n    // ComputePecanToWin\n    // Returns amount of Pecans that must be given to win the round\n    // Pecans to win = 1B + (1B per 0.2 ETH in jackpot) \n    \n    function ComputePecanToWin() public view returns(uint256) {\n        uint256 _pecanToWin = jackPot.div(PECAN_WIN_FACTOR);\n        return _pecanToWin;\n    }\n    \n    // ComputeWonkTrade\n    // Returns ETH reward for a given amount of Pecans\n    // % of wonkPot rewarded = (Pecans gifted / Pecans to win) / 2, maximum 50% \n    \n    function ComputeWonkTrade(uint256 _pecanGift) public view returns(uint256) {\n        \n        //Make sure gift isn't above requirement to win\n        if(_pecanGift > pecanToWin) {\n            _pecanGift = pecanToWin;\n        }\n        uint256 _reward = _pecanGift.mul(wonkPot).div(pecanToWin).div(2);\n        return _reward;\n    }\n    \n    // ComputePlantBoostFactor\n    // Returns global boost multiplier\n    // +1% per second\n    \n    function ComputePlantBoostFactor() public view returns(uint256) {\n        \n        //Get time since last global plant\n        uint256 _timeLapsed = now.sub(lastRootPlant);\n        \n        //Compute boostFactor (starts at 100, +1 per second)\n        uint256 _boostFactor = (_timeLapsed.mul(1)).add(100);\n        return _boostFactor;\n    }\n    \n    // ComputePlantPecan\n    // Returns Pecan reward for a given buy\n    // 1 Pecan per the cost of 1 Tree Size, multiplied by global boost\n    \n    function ComputePlantPecan(uint256 _msgValue) public view returns(uint256) {\n\n        //Get boostFactor\n        uint256 _treeBoostFactor = ComputePlantBoostFactor();\n        \n        //Compute reward \n        uint256 _reward = _msgValue.mul(_treeBoostFactor).div(TREE_SIZE_COST).div(100);\n        return _reward;\n    }\n\n    //-- GETTERS --\n    \n    function GetTree(address adr) public view returns(uint256) {\n        return treeSize[adr];\n    }\n    \n    function GetPecan(address adr) public view returns(uint256) {\n        return pecan[adr];\n    }\n\t\n\tfunction GetMyBoost() public view returns(uint256) {\n        return boost[msg.sender];\n    }\n\t\n\tfunction GetMyBalance() public view returns(uint256) {\n\t    return playerBalance[msg.sender];\n\t}\n\t\n\tfunction GetMyRound() public view returns(uint256) {\n\t    return playerRound[msg.sender];\n\t}\n\t\n\tfunction GetMyLastClaim() public view returns(uint256) {\n\t    return lastClaim[msg.sender];\n\t}\n}\n\n/* SafeMath library */\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"GetMyBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PlantRoot\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"GetPecan\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pecanGift\",\"type\":\"uint256\"}],\"name\":\"GivePecan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pecanToWin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"ComputeEtherShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PayThrone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"GrowTree\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ComputePecanToWin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"ComputePecanShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pecanGift\",\"type\":\"uint256\"}],\"name\":\"ComputeWonkTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyLastClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyBoost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wonkPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ComputePlantBoostFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thronePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"GetTree\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_msgValue\",\"type\":\"uint256\"}],\"name\":\"ComputePlantPecan\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pecanGiven\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"ComputeShareBoostFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRootPlant\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ClaimShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pecan\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"treesize\",\"type\":\"uint256\"}],\"name\":\"PlantedRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pecan\",\"type\":\"uint256\"}],\"name\":\"GavePecan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pecan\",\"type\":\"uint256\"}],\"name\":\"ClaimedShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pecan\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"boost\",\"type\":\"uint256\"}],\"name\":\"GrewTree\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"WonRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"WithdrewBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"PaidThrone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"BoostedPot\",\"type\":\"event\"}]",
  "bytecode": ""
}