{
  "address": "0x88d60255f917e3eb94eae199d827dad837fac4cb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GasToken1",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-08\n*/\n\npragma solidity ^0.4.10;\n\ncontract GasToken1 {\n    //////////////////////////////////////////////////////////////////////////\n    // Generic ERC20\n    //////////////////////////////////////////////////////////////////////////\n\n    // owner -> amount\n    mapping(address => uint256) s_balances;\n    // owner -> spender -> max amount\n    mapping(address => mapping(address => uint256)) s_allowances;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    // Spec: Get the account balance of another account with address `owner`\n    function balanceOf(address owner) public constant returns (uint256 balance) {\n        return s_balances[owner];\n    }\n\n    function internalTransfer(address from, address to, uint256 value) internal returns (bool success) {\n        if (value <= s_balances[from]) {\n            s_balances[from] -= value;\n            s_balances[to] += value;\n            Transfer(from, to, value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // Spec: Send `value` amount of tokens to address `to`\n    function transfer(address to, uint256 value) public returns (bool success) {\n        address from = msg.sender;\n        return internalTransfer(from, to, value);\n    }\n\n    // Spec: Send `value` amount of tokens from address `from` to address `to`\n    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\n        address spender = msg.sender;\n        if(value <= s_allowances[from][spender] && internalTransfer(from, to, value)) {\n            s_allowances[from][spender] -= value;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // Spec: Allow `spender` to withdraw from your account, multiple times, up\n    // to the `value` amount. If this function is called again it overwrites the\n    // current allowance with `value`.\n    function approve(address spender, uint256 value) public returns (bool success) {\n        address owner = msg.sender;\n        if (value != 0 && s_allowances[owner][spender] != 0) {\n            return false;\n        }\n        s_allowances[owner][spender] = value;\n        Approval(owner, spender, value);\n        return true;\n    }\n\n    // Spec: Returns the `amount` which `spender` is still allowed to withdraw\n    // from `owner`.\n    // What if the allowance is higher than the balance of the `owner`?\n    // Callers should be careful to use min(allowance, balanceOf) to make sure\n    // that the allowance is actually present in the account!\n    function allowance(address owner, address spender) public constant returns (uint256 remaining) {\n        return s_allowances[owner][spender];\n    }\n\n    //////////////////////////////////////////////////////////////////////////\n    // GasToken specifics\n    //////////////////////////////////////////////////////////////////////////\n\n    uint8 constant public decimals = 2;\n    string constant public name = \"Gastoken.io\";\n    string constant public symbol = \"GST1\";\n\n    // We start our storage at this location. The EVM word at this location\n    // contains the number of stored words. The stored words follow at\n    // locations (STORAGE_LOCATION_ARRAY+1), (STORAGE_LOCATION_ARRAY+2), ...\n    uint256 constant STORAGE_LOCATION_ARRAY = 0xDEADBEEF;\n\n\n    // totalSupply is the number of words we have in storage\n    function totalSupply() public constant returns (uint256 supply) {\n        uint256 storage_location_array = STORAGE_LOCATION_ARRAY;\n        assembly {\n            supply := sload(storage_location_array)\n        }\n    }\n\n    // Mints `value` new sub-tokens (e.g. cents, pennies, ...) by filling up\n    // `value` words of EVM storage. The minted tokens are owned by the\n    // caller of this function.\n    function mint(uint256 value) public {\n        uint256 storage_location_array = STORAGE_LOCATION_ARRAY;  // can't use constants inside assembly\n\n        if (value == 0) {\n            return;\n        }\n\n        // Read supply\n        uint256 supply;\n        assembly {\n            supply := sload(storage_location_array)\n        }\n\n        // Set memory locations in interval [l, r]\n        uint256 l = storage_location_array + supply + 1;\n        uint256 r = storage_location_array + supply + value;\n        assert(r >= l);\n\n        for (uint256 i = l; i <= r; i++) {\n            assembly {\n                sstore(i, 1)\n            }\n        }\n\n        // Write updated supply & balance\n        assembly {\n            sstore(storage_location_array, add(supply, value))\n        }\n        s_balances[msg.sender] += value;\n    }\n\n    function freeStorage(uint256 value) internal {\n        uint256 storage_location_array = STORAGE_LOCATION_ARRAY;  // can't use constants inside assembly\n\n        // Read supply\n        uint256 supply;\n        assembly {\n            supply := sload(storage_location_array)\n        }\n\n        // Clear memory locations in interval [l, r]\n        uint256 l = storage_location_array + supply - value + 1;\n        uint256 r = storage_location_array + supply;\n        for (uint256 i = l; i <= r; i++) {\n            assembly {\n                sstore(i, 0)\n            }\n        }\n\n        // Write updated supply\n        assembly {\n            sstore(storage_location_array, sub(supply, value))\n        }\n    }\n\n    // Frees `value` sub-tokens (e.g. cents, pennies, ...) belonging to the\n    // caller of this function by clearing value words of EVM storage, which\n    // will trigger a partial gas refund.\n    function free(uint256 value) public returns (bool success) {\n        uint256 from_balance = s_balances[msg.sender];\n        if (value > from_balance) {\n            return false;\n        }\n\n        freeStorage(value);\n\n        s_balances[msg.sender] = from_balance - value;\n\n        return true;\n    }\n\n    // Frees up to `value` sub-tokens. Returns how many tokens were freed.\n    // Otherwise, identical to free.\n    function freeUpTo(uint256 value) public returns (uint256 freed) {\n        uint256 from_balance = s_balances[msg.sender];\n        if (value > from_balance) {\n            value = from_balance;\n        }\n\n        freeStorage(value);\n\n        s_balances[msg.sender] = from_balance - value;\n\n        return value;\n    }\n\n    // Frees `value` sub-tokens owned by address `from`. Requires that `msg.sender`\n    // has been approved by `from`.\n    function freeFrom(address from, uint256 value) public returns (bool success) {\n        address spender = msg.sender;\n        uint256 from_balance = s_balances[from];\n        if (value > from_balance) {\n            return false;\n        }\n\n        mapping(address => uint256) from_allowances = s_allowances[from];\n        uint256 spender_allowance = from_allowances[spender];\n        if (value > spender_allowance) {\n            return false;\n        }\n\n        freeStorage(value);\n\n        s_balances[from] = from_balance - value;\n        from_allowances[spender] = spender_allowance - value;\n\n        return true;\n    }\n\n    // Frees up to `value` sub-tokens owned by address `from`. Returns how many tokens were freed.\n    // Otherwise, identical to `freeFrom`.\n    function freeFromUpTo(address from, uint256 value) public returns (uint256 freed) {\n        address spender = msg.sender;\n        uint256 from_balance = s_balances[from];\n        if (value > from_balance) {\n            value = from_balance;\n        }\n\n        mapping(address => uint256) from_allowances = s_allowances[from];\n        uint256 spender_allowance = from_allowances[spender];\n        if (value > spender_allowance) {\n            value = spender_allowance;\n        }\n\n        freeStorage(value);\n\n        s_balances[from] = from_balance - value;\n        from_allowances[spender] = spender_allowance - value;\n\n        return value;\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b6110ad8061001e6000396000f3006060604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d5578063079d229f14610163578063095ea7b3146101b957806318160ddd1461021357806323b872dd1461023c578063313ce567146102b55780635f2e2b45146102e45780636366b9361461033e57806370a082311461037557806395d89b41146103c2578063a0712d6814610450578063a9059cbb14610473578063d8ccd0f3146104cd578063dd62ed3e14610508575b600080fd5b34156100e057600080fd5b6100e8610574565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561012857808201518184015260208101905061010d565b50505050905090810190601f1680156101555780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016e57600080fd5b6101a3600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506105ad565b6040518082815260200191505060405180910390f35b34156101c457600080fd5b6101f9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610733565b604051808215151515815260200191505060405180910390f35b341561021e57600080fd5b6102266108c7565b6040518082815260200191505060405180910390f35b341561024757600080fd5b61029b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108d9565b604051808215151515815260200191505060405180910390f35b34156102c057600080fd5b6102c8610a17565b604051808260ff1660ff16815260200191505060405180910390f35b34156102ef57600080fd5b610324600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a1c565b604051808215151515815260200191505060405180910390f35b341561034957600080fd5b61035f6004808035906020019091905050610bae565b6040518082815260200191505060405180910390f35b341561038057600080fd5b6103ac600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c55565b6040518082815260200191505060405180910390f35b34156103cd57600080fd5b6103d5610c9d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104155780820151818401526020810190506103fa565b50505050905090810190601f1680156104425780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561045b57600080fd5b6104716004808035906020019091905050610cd6565b005b341561047e57600080fd5b6104b3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d8a565b604051808215151515815260200191505060405180910390f35b34156104d857600080fd5b6104ee6004808035906020019091905050610da4565b604051808215151515815260200191505060405180910390f35b341561051357600080fd5b61055e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e52565b6040518082815260200191505060405180910390f35b6040805190810160405280600b81526020017f476173746f6b656e2e696f00000000000000000000000000000000000000000081525081565b60008060008060003393506000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054925082861115610605578295505b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115610693578095505b61069c86610ed9565b8583036000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581038260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508594505050505092915050565b600080339050600083141580156107c757506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156107d557600091506108c0565b82600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505b5092915050565b60008063deadbeef9050805491505090565b600080339050600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111580156109725750610971858585610f26565b5b15610a0a5782600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555060019150610a0f565b600091505b509392505050565b600281565b60008060008060003393506000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054925082861115610a795760009450610ba4565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115610b0c5760009450610ba4565b610b1586610ed9565b8583036000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581038260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600194505b5050505092915050565b6000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610bfe578092505b610c0783610ed9565b8281036000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082915050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040805190810160405280600481526020017f475354310000000000000000000000000000000000000000000000000000000081525081565b600080600080600063deadbeef94506000861415610cf357610d82565b84549350600184860101925085848601019150828210151515610d1257fe5b8290505b8181111515610d3057600181558080600101915050610d16565b8584018555856000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b505050505050565b600080339050610d9b818585610f26565b91505092915050565b6000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610df95760009150610e4c565b610e0283610ed9565b8281036000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600191505b50919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080600080600063deadbeef9450845493506001868587010301925083850191508290505b8181111515610f1957600081558080600101915050610eff565b8584038555505050505050565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151561107557816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905061107a565b600090505b93925050505600a165627a7a72305820814e4e76e31471bb35c564b5fa7168f3094feb8b51738e7895e9b727701d27650029"
}