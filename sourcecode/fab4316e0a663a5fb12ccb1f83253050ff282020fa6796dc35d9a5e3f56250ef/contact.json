{
  "address": "0x332B8C9734b4097dE50f302F7D9F273FFdB45B84",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GenesisProtocol",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-27\n*/\n\n// File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Elliptic curve signature operations\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\n * See https://github.com/ethereum/solidity/issues/864\n */\n\nlibrary ECDSA {\n    /**\n     * @dev Recover signer address from a message by using their signature\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n     * @param signature bytes signature, the signature is generated using web3.eth.sign()\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // Check the signature length\n        if (signature.length != 65) {\n            return (address(0));\n        }\n\n        // Divide the signature in r, s and v variables\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        if (v < 27) {\n            v += 27;\n        }\n\n        // If the version is correct return the signer address\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n            return ecrecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * toEthSignedMessageHash\n     * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\n     * and hash the result\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n\n// File: contracts/votingMachines/IntVoteInterface.sol\n\npragma solidity ^0.5.4;\n\ninterface IntVoteInterface {\n    //When implementing this interface please do not only override function and modifier,\n    //but also to keep the modifiers on the overridden functions.\n    modifier onlyProposalOwner(bytes32 _proposalId) {revert(); _;}\n    modifier votable(bytes32 _proposalId) {revert(); _;}\n\n    event NewProposal(\n        bytes32 indexed _proposalId,\n        address indexed _organization,\n        uint256 _numOfChoices,\n        address _proposer,\n        bytes32 _paramsHash\n    );\n\n    event ExecuteProposal(bytes32 indexed _proposalId,\n        address indexed _organization,\n        uint256 _decision,\n        uint256 _totalReputation\n    );\n\n    event VoteProposal(\n        bytes32 indexed _proposalId,\n        address indexed _organization,\n        address indexed _voter,\n        uint256 _vote,\n        uint256 _reputation\n    );\n\n    event CancelProposal(bytes32 indexed _proposalId, address indexed _organization );\n    event CancelVoting(bytes32 indexed _proposalId, address indexed _organization, address indexed _voter);\n\n    /**\n     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\n     * generated by calculating keccak256 of a incremented counter.\n     * @param _numOfChoices number of voting choices\n     * @param _proposalParameters defines the parameters of the voting machine used for this proposal\n     * @param _proposer address\n     * @param _organization address - if this address is zero the msg.sender will be used as the organization address.\n     * @return proposal's id.\n     */\n    function propose(\n        uint256 _numOfChoices,\n        bytes32 _proposalParameters,\n        address _proposer,\n        address _organization\n        ) external returns(bytes32);\n\n    function vote(\n        bytes32 _proposalId,\n        uint256 _vote,\n        uint256 _rep,\n        address _voter\n    )\n    external\n    returns(bool);\n\n    function cancelVote(bytes32 _proposalId) external;\n\n    function getNumberOfChoices(bytes32 _proposalId) external view returns(uint256);\n\n    function isVotable(bytes32 _proposalId) external view returns(bool);\n\n    /**\n     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\n     * @param _proposalId the ID of the proposal\n     * @param _choice the index in the\n     * @return voted reputation for the given choice\n     */\n    function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256);\n\n    /**\n     * @dev isAbstainAllow returns if the voting machine allow abstain (0)\n     * @return bool true or false\n     */\n    function isAbstainAllow() external pure returns(bool);\n\n    /**\n     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\n     * @return min - minimum number of choices\n               max - maximum number of choices\n     */\n    function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max);\n}\n\n// File: contracts/libs/RealMath.sol\n\npragma solidity ^0.5.4;\n\n/**\n * RealMath: fixed-point math library, based on fractional and integer parts.\n * Using uint256 as real216x40, which isn't in Solidity yet.\n * Internally uses the wider uint256 for some math.\n *\n * Note that for addition, subtraction, and mod (%), you should just use the\n * built-in Solidity operators. Functions for these operations are not provided.\n *\n */\n\n\nlibrary RealMath {\n\n    /**\n     * How many total bits are there?\n     */\n    uint256 constant private REAL_BITS = 256;\n\n    /**\n     * How many fractional bits are there?\n     */\n    uint256 constant private REAL_FBITS = 40;\n\n    /**\n     * What's the first non-fractional bit\n     */\n    uint256 constant private REAL_ONE = uint256(1) << REAL_FBITS;\n\n    /**\n     * Raise a real number to any positive integer power\n     */\n    function pow(uint256 realBase, uint256 exponent) internal pure returns (uint256) {\n\n        uint256 tempRealBase = realBase;\n        uint256 tempExponent = exponent;\n\n        // Start with the 0th power\n        uint256 realResult = REAL_ONE;\n        while (tempExponent != 0) {\n            // While there are still bits set\n            if ((tempExponent & 0x1) == 0x1) {\n                // If the low bit is set, multiply in the (many-times-squared) base\n                realResult = mul(realResult, tempRealBase);\n            }\n                // Shift off the low bit\n            tempExponent = tempExponent >> 1;\n            if (tempExponent != 0) {\n                // Do the squaring\n                tempRealBase = mul(tempRealBase, tempRealBase);\n            }\n        }\n\n        // Return the final result.\n        return realResult;\n    }\n\n    /**\n     * Create a real from a rational fraction.\n     */\n    function fraction(uint216 numerator, uint216 denominator) internal pure returns (uint256) {\n        return div(uint256(numerator) * REAL_ONE, uint256(denominator) * REAL_ONE);\n    }\n\n    /**\n     * Multiply one real by another. Truncates overflows.\n     */\n    function mul(uint256 realA, uint256 realB) private pure returns (uint256) {\n        // When multiplying fixed point in x.y and z.w formats we get (x+z).(y+w) format.\n        // So we just have to clip off the extra REAL_FBITS fractional bits.\n        uint256 res = realA * realB;\n        require(res/realA == realB, \"RealMath mul overflow\");\n        return (res >> REAL_FBITS);\n    }\n\n    /**\n     * Divide one real by another real. Truncates overflows.\n     */\n    function div(uint256 realNumerator, uint256 realDenominator) private pure returns (uint256) {\n        // We use the reverse of the multiplication trick: convert numerator from\n        // x.y to (x+z).(y+w) fixed point, then divide by denom in z.w fixed point.\n        return uint256((uint256(realNumerator) * REAL_ONE) / uint256(realDenominator));\n    }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/votingMachines/VotingMachineCallbacksInterface.sol\n\npragma solidity ^0.5.4;\n\n\ninterface VotingMachineCallbacksInterface {\n    function mintReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId) external returns(bool);\n    function burnReputation(uint256 _amount, address _owner, bytes32 _proposalId) external returns(bool);\n\n    function stakingTokenTransfer(IERC20 _stakingToken, address _beneficiary, uint256 _amount, bytes32 _proposalId)\n    external\n    returns(bool);\n\n    function getTotalReputationSupply(bytes32 _proposalId) external view returns(uint256);\n    function reputationOf(address _owner, bytes32 _proposalId) external view returns(uint256);\n    function balanceOfStakingToken(IERC20 _stakingToken, bytes32 _proposalId) external view returns(uint256);\n}\n\n// File: contracts/votingMachines/ProposalExecuteInterface.sol\n\npragma solidity ^0.5.4;\n\ninterface ProposalExecuteInterface {\n    function executeProposal(bytes32 _proposalId, int _decision) external returns(bool);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/math/Math.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Math\n * @dev Assorted math operations\n */\nlibrary Math {\n    /**\n    * @dev Returns the largest of two numbers.\n    */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n    * @dev Returns the smallest of two numbers.\n    */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n    * @dev Calculates the average of two numbers. Since these are integers,\n    * averages of an even and odd number cannot be represented, and will be\n    * rounded down.\n    */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/utils/Address.sol\n\npragma solidity ^0.5.0;\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n// File: contracts/votingMachines/GenesisProtocolLogic.sol\n\npragma solidity ^0.5.4;\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @title GenesisProtocol implementation -an organization's voting machine scheme.\n */\ncontract GenesisProtocolLogic is IntVoteInterface {\n    using SafeMath for uint256;\n    using Math for uint256;\n    using RealMath for uint216;\n    using RealMath for uint256;\n    using Address for address;\n\n    enum ProposalState { None, ExpiredInQueue, Executed, Queued, PreBoosted, Boosted, QuietEndingPeriod}\n    enum ExecutionState { None, QueueBarCrossed, QueueTimeOut, PreBoostedBarCrossed, BoostedTimeOut, BoostedBarCrossed}\n\n    //Organization's parameters\n    struct Parameters {\n        uint256 queuedVoteRequiredPercentage; // the absolute vote percentages bar.\n        uint256 queuedVotePeriodLimit; //the time limit for a proposal to be in an absolute voting mode.\n        uint256 boostedVotePeriodLimit; //the time limit for a proposal to be in boost mode.\n        uint256 preBoostedVotePeriodLimit; //the time limit for a proposal\n                                          //to be in an preparation state (stable) before boosted.\n        uint256 thresholdConst; //constant  for threshold calculation .\n                                //threshold =thresholdConst ** (numberOfBoostedProposals)\n        uint256 limitExponentValue;// an upper limit for numberOfBoostedProposals\n                                   //in the threshold calculation to prevent overflow\n        uint256 quietEndingPeriod; //quite ending period\n        uint256 proposingRepReward;//proposer reputation reward.\n        uint256 votersReputationLossRatio;//Unsuccessful pre booster\n                                          //voters lose votersReputationLossRatio% of their reputation.\n        uint256 minimumDaoBounty;\n        uint256 daoBountyConst;//The DAO downstake for each proposal is calculate according to the formula\n                               //(daoBountyConst * averageBoostDownstakes)/100 .\n        uint256 activationTime;//the point in time after which proposals can be created.\n        //if this address is set so only this address is allowed to vote of behalf of someone else.\n        address voteOnBehalf;\n    }\n\n    struct Voter {\n        uint256 vote; // YES(1) ,NO(2)\n        uint256 reputation; // amount of voter's reputation\n        bool preBoosted;\n    }\n\n    struct Staker {\n        uint256 vote; // YES(1) ,NO(2)\n        uint256 amount; // amount of staker's stake\n        uint256 amount4Bounty;// amount of staker's stake used for bounty reward calculation.\n    }\n\n    struct Proposal {\n        bytes32 organizationId; // the organization unique identifier the proposal is target to.\n        address callbacks;    // should fulfill voting callbacks interface.\n        ProposalState state;\n        uint256 winningVote; //the winning vote.\n        address proposer;\n        //the proposal boosted period limit . it is updated for the case of quiteWindow mode.\n        uint256 currentBoostedVotePeriodLimit;\n        bytes32 paramsHash;\n        uint256 daoBountyRemain; //use for checking sum zero bounty claims.it is set at the proposing time.\n        uint256 daoBounty;\n        uint256 totalStakes;// Total number of tokens staked which can be redeemable by stakers.\n        uint256 confidenceThreshold;\n        uint256 secondsFromTimeOutTillExecuteBoosted;\n        uint[3] times; //times[0] - submittedTime\n                       //times[1] - boostedPhaseTime\n                       //times[2] -preBoostedPhaseTime;\n        bool daoRedeemItsWinnings;\n        //      vote      reputation\n        mapping(uint256   =>  uint256    ) votes;\n        //      vote      reputation\n        mapping(uint256   =>  uint256    ) preBoostedVotes;\n        //      address     voter\n        mapping(address =>  Voter    ) voters;\n        //      vote        stakes\n        mapping(uint256   =>  uint256    ) stakes;\n        //      address  staker\n        mapping(address  => Staker   ) stakers;\n    }\n\n    event Stake(bytes32 indexed _proposalId,\n        address indexed _organization,\n        address indexed _staker,\n        uint256 _vote,\n        uint256 _amount\n    );\n\n    event Redeem(bytes32 indexed _proposalId,\n        address indexed _organization,\n        address indexed _beneficiary,\n        uint256 _amount\n    );\n\n    event RedeemDaoBounty(bytes32 indexed _proposalId,\n        address indexed _organization,\n        address indexed _beneficiary,\n        uint256 _amount\n    );\n\n    event RedeemReputation(bytes32 indexed _proposalId,\n        address indexed _organization,\n        address indexed _beneficiary,\n        uint256 _amount\n    );\n\n    event StateChange(bytes32 indexed _proposalId, ProposalState _proposalState);\n    event GPExecuteProposal(bytes32 indexed _proposalId, ExecutionState _executionState);\n    event ExpirationCallBounty(bytes32 indexed _proposalId, address indexed _beneficiary, uint256 _amount);\n    event ConfidenceLevelChange(bytes32 indexed _proposalId, uint256 _confidenceThreshold);\n\n    mapping(bytes32=>Parameters) public parameters;  // A mapping from hashes to parameters\n    mapping(bytes32=>Proposal) public proposals; // Mapping from the ID of the proposal to the proposal itself.\n    mapping(bytes32=>uint) public orgBoostedProposalsCnt;\n           //organizationId => organization\n    mapping(bytes32        => address     ) public organizations;\n          //organizationId => averageBoostDownstakes\n    mapping(bytes32           => uint256              ) public averagesDownstakesOfBoosted;\n    uint256 constant public NUM_OF_CHOICES = 2;\n    uint256 constant public NO = 2;\n    uint256 constant public YES = 1;\n    uint256 public proposalsCnt; // Total number of proposals\n    IERC20 public stakingToken;\n    address constant private GEN_TOKEN_ADDRESS = 0x543Ff227F64Aa17eA132Bf9886cAb5DB55DCAddf;\n    uint256 constant private MAX_BOOSTED_PROPOSALS = 4096;\n\n    /**\n     * @dev Constructor\n     */\n    constructor(IERC20 _stakingToken) public {\n      //The GEN token (staking token) address is hard coded in the contract by GEN_TOKEN_ADDRESS .\n      //This will work for a network which already hosted the GEN token on this address (e.g mainnet).\n      //If such contract address does not exist in the network (e.g ganache)\n      //the contract will use the _stakingToken param as the\n      //staking token address.\n        if (address(GEN_TOKEN_ADDRESS).isContract()) {\n            stakingToken = IERC20(GEN_TOKEN_ADDRESS);\n        } else {\n            stakingToken = _stakingToken;\n        }\n    }\n\n  /**\n   * @dev Check that the proposal is votable\n   * a proposal is votable if it is in one of the following states:\n   *  PreBoosted,Boosted,QuietEndingPeriod or Queued\n   */\n    modifier votable(bytes32 _proposalId) {\n        require(_isVotable(_proposalId));\n        _;\n    }\n\n    /**\n     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\n     * generated by calculating keccak256 of a incremented counter.\n     * @param _paramsHash parameters hash\n     * @param _proposer address\n     * @param _organization address\n     */\n    function propose(uint256, bytes32 _paramsHash, address _proposer, address _organization)\n        external\n        returns(bytes32)\n    {\n      // solhint-disable-next-line not-rely-on-time\n        require(now > parameters[_paramsHash].activationTime, \"not active yet\");\n        //Check parameters existence.\n        require(parameters[_paramsHash].queuedVoteRequiredPercentage >= 50);\n        // Generate a unique ID:\n        bytes32 proposalId = keccak256(abi.encodePacked(this, proposalsCnt));\n        proposalsCnt = proposalsCnt.add(1);\n         // Open proposal:\n        Proposal memory proposal;\n        proposal.callbacks = msg.sender;\n        proposal.organizationId = keccak256(abi.encodePacked(msg.sender, _organization));\n\n        proposal.state = ProposalState.Queued;\n        // solhint-disable-next-line not-rely-on-time\n        proposal.times[0] = now;//submitted time\n        proposal.currentBoostedVotePeriodLimit = parameters[_paramsHash].boostedVotePeriodLimit;\n        proposal.proposer = _proposer;\n        proposal.winningVote = NO;\n        proposal.paramsHash = _paramsHash;\n        if (organizations[proposal.organizationId] == address(0)) {\n            if (_organization == address(0)) {\n                organizations[proposal.organizationId] = msg.sender;\n            } else {\n                organizations[proposal.organizationId] = _organization;\n            }\n        }\n        //calc dao bounty\n        uint256 daoBounty =\n        parameters[_paramsHash].daoBountyConst.mul(averagesDownstakesOfBoosted[proposal.organizationId]).div(100);\n        proposal.daoBountyRemain = daoBounty.max(parameters[_paramsHash].minimumDaoBounty);\n        proposals[proposalId] = proposal;\n        proposals[proposalId].stakes[NO] = proposal.daoBountyRemain;//dao downstake on the proposal\n\n        emit NewProposal(proposalId, organizations[proposal.organizationId], NUM_OF_CHOICES, _proposer, _paramsHash);\n        return proposalId;\n    }\n\n    /**\n      * @dev executeBoosted try to execute a boosted or QuietEndingPeriod proposal if it is expired\n      * it rewards the msg.sender with P % of the proposal's upstakes upon a successful call to this function.\n      * P = t/150, where t is the number of seconds passed since the the proposal's timeout.\n      * P is capped by 10%.\n      * @param _proposalId the id of the proposal\n      * @return uint256 expirationCallBounty the bounty amount for the expiration call\n     */\n    function executeBoosted(bytes32 _proposalId) external returns(uint256 expirationCallBounty) {\n        Proposal storage proposal = proposals[_proposalId];\n        require(proposal.state == ProposalState.Boosted || proposal.state == ProposalState.QuietEndingPeriod,\n        \"proposal state in not Boosted nor QuietEndingPeriod\");\n        require(_execute(_proposalId), \"proposal need to expire\");\n\n        proposal.secondsFromTimeOutTillExecuteBoosted =\n        // solhint-disable-next-line not-rely-on-time\n        now.sub(proposal.currentBoostedVotePeriodLimit.add(proposal.times[1]));\n\n        expirationCallBounty = calcExecuteCallBounty(_proposalId);\n        proposal.totalStakes = proposal.totalStakes.sub(expirationCallBounty);\n        require(stakingToken.transfer(msg.sender, expirationCallBounty), \"transfer to msg.sender failed\");\n        emit ExpirationCallBounty(_proposalId, msg.sender, expirationCallBounty);\n    }\n\n    /**\n     * @dev hash the parameters, save them if necessary, and return the hash value\n     * @param _params a parameters array\n     *    _params[0] - _queuedVoteRequiredPercentage,\n     *    _params[1] - _queuedVotePeriodLimit, //the time limit for a proposal to be in an absolute voting mode.\n     *    _params[2] - _boostedVotePeriodLimit, //the time limit for a proposal to be in an relative voting mode.\n     *    _params[3] - _preBoostedVotePeriodLimit, //the time limit for a proposal to be in an preparation\n     *                  state (stable) before boosted.\n     *    _params[4] -_thresholdConst\n     *    _params[5] -_quietEndingPeriod\n     *    _params[6] -_proposingRepReward\n     *    _params[7] -_votersReputationLossRatio\n     *    _params[8] -_minimumDaoBounty\n     *    _params[9] -_daoBountyConst\n     *    _params[10] -_activationTime\n     * @param _voteOnBehalf - authorized to vote on behalf of others.\n    */\n    function setParameters(\n        uint[11] calldata _params, //use array here due to stack too deep issue.\n        address _voteOnBehalf\n    )\n    external\n    returns(bytes32)\n    {\n        require(_params[0] <= 100 && _params[0] >= 50, \"50 <= queuedVoteRequiredPercentage <= 100\");\n        require(_params[4] <= 16000 && _params[4] > 1000, \"1000 < thresholdConst <= 16000\");\n        require(_params[7] <= 100, \"votersReputationLossRatio <= 100\");\n        require(_params[2] >= _params[5], \"boostedVotePeriodLimit >= quietEndingPeriod\");\n        require(_params[8] > 0, \"minimumDaoBounty should be > 0\");\n        require(_params[9] > 0, \"daoBountyConst should be > 0\");\n\n        bytes32 paramsHash = getParametersHash(_params, _voteOnBehalf);\n        //set a limit for power for a given alpha to prevent overflow\n        uint256 limitExponent = 172;//for alpha less or equal 2\n        uint256 j = 2;\n        for (uint256 i = 2000; i < 16000; i = i*2) {\n            if ((_params[4] > i) && (_params[4] <= i*2)) {\n                limitExponent = limitExponent/j;\n                break;\n            }\n            j++;\n        }\n\n        parameters[paramsHash] = Parameters({\n            queuedVoteRequiredPercentage: _params[0],\n            queuedVotePeriodLimit: _params[1],\n            boostedVotePeriodLimit: _params[2],\n            preBoostedVotePeriodLimit: _params[3],\n            thresholdConst:uint216(_params[4]).fraction(uint216(1000)),\n            limitExponentValue:limitExponent,\n            quietEndingPeriod: _params[5],\n            proposingRepReward: _params[6],\n            votersReputationLossRatio:_params[7],\n            minimumDaoBounty:_params[8],\n            daoBountyConst:_params[9],\n            activationTime:_params[10],\n            voteOnBehalf:_voteOnBehalf\n        });\n        return paramsHash;\n    }\n\n    /**\n     * @dev redeem a reward for a successful stake, vote or proposing.\n     * The function use a beneficiary address as a parameter (and not msg.sender) to enable\n     * users to redeem on behalf of someone else.\n     * @param _proposalId the ID of the proposal\n     * @param _beneficiary - the beneficiary address\n     * @return rewards -\n     *           [0] stakerTokenReward\n     *           [1] voterReputationReward\n     *           [2] proposerReputationReward\n     */\n     // solhint-disable-next-line function-max-lines,code-complexity\n    function redeem(bytes32 _proposalId, address _beneficiary) public returns (uint[3] memory rewards) {\n        Proposal storage proposal = proposals[_proposalId];\n        require((proposal.state == ProposalState.Executed)||(proposal.state == ProposalState.ExpiredInQueue),\n        \"Proposal should be Executed or ExpiredInQueue\");\n        Parameters memory params = parameters[proposal.paramsHash];\n        //as staker\n        Staker storage staker = proposal.stakers[_beneficiary];\n        uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];\n        uint256 totalStakesLeftAfterCallBounty =\n        proposal.stakes[NO].add(proposal.stakes[YES]).sub(calcExecuteCallBounty(_proposalId));\n        if (staker.amount > 0) {\n\n            if (proposal.state == ProposalState.ExpiredInQueue) {\n                //Stakes of a proposal that expires in Queue are sent back to stakers\n                rewards[0] = staker.amount;\n            } else if (staker.vote == proposal.winningVote) {\n                if (staker.vote == YES) {\n                    if (proposal.daoBounty < totalStakesLeftAfterCallBounty) {\n                        uint256 _totalStakes = totalStakesLeftAfterCallBounty.sub(proposal.daoBounty);\n                        rewards[0] = (staker.amount.mul(_totalStakes))/totalWinningStakes;\n                    }\n                } else {\n                    rewards[0] = (staker.amount.mul(totalStakesLeftAfterCallBounty))/totalWinningStakes;\n                }\n            }\n            staker.amount = 0;\n        }\n            //dao redeem its winnings\n        if (proposal.daoRedeemItsWinnings == false &&\n            _beneficiary == organizations[proposal.organizationId] &&\n            proposal.state != ProposalState.ExpiredInQueue &&\n            proposal.winningVote == NO) {\n            rewards[0] =\n            rewards[0]\n            .add((proposal.daoBounty.mul(totalStakesLeftAfterCallBounty))/totalWinningStakes)\n            .sub(proposal.daoBounty);\n            proposal.daoRedeemItsWinnings = true;\n        }\n\n        //as voter\n        Voter storage voter = proposal.voters[_beneficiary];\n        if ((voter.reputation != 0) && (voter.preBoosted)) {\n            if (proposal.state == ProposalState.ExpiredInQueue) {\n              //give back reputation for the voter\n                rewards[1] = ((voter.reputation.mul(params.votersReputationLossRatio))/100);\n            } else if (proposal.winningVote == voter.vote) {\n                uint256 lostReputation;\n                if (proposal.winningVote == YES) {\n                    lostReputation = proposal.preBoostedVotes[NO];\n                } else {\n                    lostReputation = proposal.preBoostedVotes[YES];\n                }\n                lostReputation = (lostReputation.mul(params.votersReputationLossRatio))/100;\n                rewards[1] = ((voter.reputation.mul(params.votersReputationLossRatio))/100)\n                .add((voter.reputation.mul(lostReputation))/proposal.preBoostedVotes[proposal.winningVote]);\n            }\n            voter.reputation = 0;\n        }\n        //as proposer\n        if ((proposal.proposer == _beneficiary)&&(proposal.winningVote == YES)&&(proposal.proposer != address(0))) {\n            rewards[2] = params.proposingRepReward;\n            proposal.proposer = address(0);\n        }\n        if (rewards[0] != 0) {\n            proposal.totalStakes = proposal.totalStakes.sub(rewards[0]);\n            require(stakingToken.transfer(_beneficiary, rewards[0]), \"transfer to beneficiary failed\");\n            emit Redeem(_proposalId, organizations[proposal.organizationId], _beneficiary, rewards[0]);\n        }\n        if (rewards[1].add(rewards[2]) != 0) {\n            VotingMachineCallbacksInterface(proposal.callbacks)\n            .mintReputation(rewards[1].add(rewards[2]), _beneficiary, _proposalId);\n            emit RedeemReputation(\n            _proposalId,\n            organizations[proposal.organizationId],\n            _beneficiary,\n            rewards[1].add(rewards[2])\n            );\n        }\n    }\n\n    /**\n     * @dev redeemDaoBounty a reward for a successful stake.\n     * The function use a beneficiary address as a parameter (and not msg.sender) to enable\n     * users to redeem on behalf of someone else.\n     * @param _proposalId the ID of the proposal\n     * @param _beneficiary - the beneficiary address\n     * @return redeemedAmount - redeem token amount\n     * @return potentialAmount - potential redeem token amount(if there is enough tokens bounty at the organization )\n     */\n    function redeemDaoBounty(bytes32 _proposalId, address _beneficiary)\n    public\n    returns(uint256 redeemedAmount, uint256 potentialAmount) {\n        Proposal storage proposal = proposals[_proposalId];\n        require(proposal.state == ProposalState.Executed);\n        uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];\n        Staker storage staker = proposal.stakers[_beneficiary];\n        if (\n            (staker.amount4Bounty > 0)&&\n            (staker.vote == proposal.winningVote)&&\n            (proposal.winningVote == YES)&&\n            (totalWinningStakes != 0)) {\n            //as staker\n                potentialAmount = (staker.amount4Bounty * proposal.daoBounty)/totalWinningStakes;\n            }\n        if ((potentialAmount != 0)&&\n            (VotingMachineCallbacksInterface(proposal.callbacks)\n            .balanceOfStakingToken(stakingToken, _proposalId) >= potentialAmount)) {\n            staker.amount4Bounty = 0;\n            proposal.daoBountyRemain = proposal.daoBountyRemain.sub(potentialAmount);\n            require(\n            VotingMachineCallbacksInterface(proposal.callbacks)\n            .stakingTokenTransfer(stakingToken, _beneficiary, potentialAmount, _proposalId));\n            redeemedAmount = potentialAmount;\n            emit RedeemDaoBounty(_proposalId, organizations[proposal.organizationId], _beneficiary, redeemedAmount);\n        }\n    }\n\n    /**\n      * @dev calcExecuteCallBounty calculate the execute boosted call bounty\n      * @param _proposalId the ID of the proposal\n      * @return uint256 executeCallBounty\n    */\n    function calcExecuteCallBounty(bytes32 _proposalId) public view returns(uint256) {\n        uint maxRewardSeconds = 1500;\n        uint rewardSeconds =\n        uint256(maxRewardSeconds).min(proposals[_proposalId].secondsFromTimeOutTillExecuteBoosted);\n        return rewardSeconds.mul(proposals[_proposalId].stakes[YES]).div(maxRewardSeconds*10);\n    }\n\n    /**\n     * @dev shouldBoost check if a proposal should be shifted to boosted phase.\n     * @param _proposalId the ID of the proposal\n     * @return bool true or false.\n     */\n    function shouldBoost(bytes32 _proposalId) public view returns(bool) {\n        Proposal memory proposal = proposals[_proposalId];\n        return (_score(_proposalId) > threshold(proposal.paramsHash, proposal.organizationId));\n    }\n\n    /**\n     * @dev threshold return the organization's score threshold which required by\n     * a proposal to shift to boosted state.\n     * This threshold is dynamically set and it depend on the number of boosted proposal.\n     * @param _organizationId the organization identifier\n     * @param _paramsHash the organization parameters hash\n     * @return uint256 organization's score threshold as real number.\n     */\n    function threshold(bytes32 _paramsHash, bytes32 _organizationId) public view returns(uint256) {\n        uint256 power = orgBoostedProposalsCnt[_organizationId];\n        Parameters storage params = parameters[_paramsHash];\n\n        if (power > params.limitExponentValue) {\n            power = params.limitExponentValue;\n        }\n\n        return params.thresholdConst.pow(power);\n    }\n\n  /**\n   * @dev hashParameters returns a hash of the given parameters\n   */\n    function getParametersHash(\n        uint[11] memory _params,//use array here due to stack too deep issue.\n        address _voteOnBehalf\n    )\n        public\n        pure\n        returns(bytes32)\n        {\n        //double call to keccak256 to avoid deep stack issue when call with too many params.\n        return keccak256(\n            abi.encodePacked(\n            keccak256(\n            abi.encodePacked(\n                _params[0],\n                _params[1],\n                _params[2],\n                _params[3],\n                _params[4],\n                _params[5],\n                _params[6],\n                _params[7],\n                _params[8],\n                _params[9],\n                _params[10])\n            ),\n            _voteOnBehalf\n        ));\n    }\n\n    /**\n      * @dev execute check if the proposal has been decided, and if so, execute the proposal\n      * @param _proposalId the id of the proposal\n      * @return bool true - the proposal has been executed\n      *              false - otherwise.\n     */\n     // solhint-disable-next-line function-max-lines,code-complexity\n    function _execute(bytes32 _proposalId) internal votable(_proposalId) returns(bool) {\n        Proposal storage proposal = proposals[_proposalId];\n        Parameters memory params = parameters[proposal.paramsHash];\n        Proposal memory tmpProposal = proposal;\n        uint256 totalReputation =\n        VotingMachineCallbacksInterface(proposal.callbacks).getTotalReputationSupply(_proposalId);\n        //first divide by 100 to prevent overflow\n        uint256 executionBar = (totalReputation/100) * params.queuedVoteRequiredPercentage;\n        ExecutionState executionState = ExecutionState.None;\n        uint256 averageDownstakesOfBoosted;\n        uint256 confidenceThreshold;\n\n        if (proposal.votes[proposal.winningVote] > executionBar) {\n         // someone crossed the absolute vote execution bar.\n            if (proposal.state == ProposalState.Queued) {\n                executionState = ExecutionState.QueueBarCrossed;\n            } else if (proposal.state == ProposalState.PreBoosted) {\n                executionState = ExecutionState.PreBoostedBarCrossed;\n            } else {\n                executionState = ExecutionState.BoostedBarCrossed;\n            }\n            proposal.state = ProposalState.Executed;\n        } else {\n            if (proposal.state == ProposalState.Queued) {\n                // solhint-disable-next-line not-rely-on-time\n                if ((now - proposal.times[0]) >= params.queuedVotePeriodLimit) {\n                    proposal.state = ProposalState.ExpiredInQueue;\n                    proposal.winningVote = NO;\n                    executionState = ExecutionState.QueueTimeOut;\n                } else {\n                    confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);\n                    if (_score(_proposalId) > confidenceThreshold) {\n                        //change proposal mode to PreBoosted mode.\n                        proposal.state = ProposalState.PreBoosted;\n                        // solhint-disable-next-line not-rely-on-time\n                        proposal.times[2] = now;\n                        proposal.confidenceThreshold = confidenceThreshold;\n                    }\n                }\n            }\n\n            if (proposal.state == ProposalState.PreBoosted) {\n                confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);\n              // solhint-disable-next-line not-rely-on-time\n                if ((now - proposal.times[2]) >= params.preBoostedVotePeriodLimit) {\n                    if (_score(_proposalId) > confidenceThreshold) {\n                        if (orgBoostedProposalsCnt[proposal.organizationId] < MAX_BOOSTED_PROPOSALS) {\n                         //change proposal mode to Boosted mode.\n                            proposal.state = ProposalState.Boosted;\n                         // solhint-disable-next-line not-rely-on-time\n                            proposal.times[1] = now;\n                            orgBoostedProposalsCnt[proposal.organizationId]++;\n                         //add a value to average -> average = average + ((value - average) / nbValues)\n                            averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];\n                          // solium-disable-next-line indentation\n                            averagesDownstakesOfBoosted[proposal.organizationId] =\n                                uint256(int256(averageDownstakesOfBoosted) +\n                                ((int256(proposal.stakes[NO])-int256(averageDownstakesOfBoosted))/\n                                int256(orgBoostedProposalsCnt[proposal.organizationId])));\n                        }\n                    } else {\n                        proposal.state = ProposalState.Queued;\n                    }\n                } else { //check the Confidence level is stable\n                    uint256 proposalScore = _score(_proposalId);\n                    if (proposalScore <= proposal.confidenceThreshold.min(confidenceThreshold)) {\n                        proposal.state = ProposalState.Queued;\n                    } else if (proposal.confidenceThreshold > proposalScore) {\n                        proposal.confidenceThreshold = confidenceThreshold;\n                        emit ConfidenceLevelChange(_proposalId, confidenceThreshold);\n                    }\n                }\n            }\n        }\n\n        if ((proposal.state == ProposalState.Boosted) ||\n            (proposal.state == ProposalState.QuietEndingPeriod)) {\n            // solhint-disable-next-line not-rely-on-time\n            if ((now - proposal.times[1]) >= proposal.currentBoostedVotePeriodLimit) {\n                proposal.state = ProposalState.Executed;\n                executionState = ExecutionState.BoostedTimeOut;\n            }\n        }\n\n        if (executionState != ExecutionState.None) {\n            if ((executionState == ExecutionState.BoostedTimeOut) ||\n                (executionState == ExecutionState.BoostedBarCrossed)) {\n                orgBoostedProposalsCnt[tmpProposal.organizationId] =\n                orgBoostedProposalsCnt[tmpProposal.organizationId].sub(1);\n                //remove a value from average = ((average * nbValues) - value) / (nbValues - 1);\n                uint256 boostedProposals = orgBoostedProposalsCnt[tmpProposal.organizationId];\n                if (boostedProposals == 0) {\n                    averagesDownstakesOfBoosted[proposal.organizationId] = 0;\n                } else {\n                    averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];\n                    averagesDownstakesOfBoosted[proposal.organizationId] =\n                    (averageDownstakesOfBoosted.mul(boostedProposals+1).sub(proposal.stakes[NO]))/boostedProposals;\n                }\n            }\n            emit ExecuteProposal(\n            _proposalId,\n            organizations[proposal.organizationId],\n            proposal.winningVote,\n            totalReputation\n            );\n            emit GPExecuteProposal(_proposalId, executionState);\n            ProposalExecuteInterface(proposal.callbacks).executeProposal(_proposalId, int(proposal.winningVote));\n            proposal.daoBounty = proposal.daoBountyRemain;\n        }\n        if (tmpProposal.state != proposal.state) {\n            emit StateChange(_proposalId, proposal.state);\n        }\n        return (executionState != ExecutionState.None);\n    }\n\n    /**\n     * @dev staking function\n     * @param _proposalId id of the proposal\n     * @param _vote  NO(2) or YES(1).\n     * @param _amount the betting amount\n     * @return bool true - the proposal has been executed\n     *              false - otherwise.\n     */\n    function _stake(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _staker) internal returns(bool) {\n        // 0 is not a valid vote.\n        require(_vote <= NUM_OF_CHOICES && _vote > 0, \"wrong vote value\");\n        require(_amount > 0, \"staking amount should be >0\");\n\n        if (_execute(_proposalId)) {\n            return true;\n        }\n        Proposal storage proposal = proposals[_proposalId];\n\n        if ((proposal.state != ProposalState.PreBoosted) &&\n            (proposal.state != ProposalState.Queued)) {\n            return false;\n        }\n\n        // enable to increase stake only on the previous stake vote\n        Staker storage staker = proposal.stakers[_staker];\n        if ((staker.amount > 0) && (staker.vote != _vote)) {\n            return false;\n        }\n\n        uint256 amount = _amount;\n        require(stakingToken.transferFrom(_staker, address(this), amount), \"fail transfer from staker\");\n        proposal.totalStakes = proposal.totalStakes.add(amount); //update totalRedeemableStakes\n        staker.amount = staker.amount.add(amount);\n        //This is to prevent average downstakes calculation overflow\n        //Note that any how GEN cap is 100000000 ether.\n        require(staker.amount <= 0x100000000000000000000000000000000, \"staking amount is too high\");\n        require(proposal.totalStakes <= uint256(0x100000000000000000000000000000000).sub(proposal.daoBountyRemain),\n                \"total stakes is too high\");\n\n        if (_vote == YES) {\n            staker.amount4Bounty = staker.amount4Bounty.add(amount);\n        }\n        staker.vote = _vote;\n\n        proposal.stakes[_vote] = amount.add(proposal.stakes[_vote]);\n        emit Stake(_proposalId, organizations[proposal.organizationId], _staker, _vote, _amount);\n        return _execute(_proposalId);\n    }\n\n    /**\n     * @dev Vote for a proposal, if the voter already voted, cancel the last vote and set a new one instead\n     * @param _proposalId id of the proposal\n     * @param _voter used in case the vote is cast for someone else\n     * @param _vote a value between 0 to and the proposal's number of choices.\n     * @param _rep how many reputation the voter would like to stake for this vote.\n     *         if  _rep==0 so the voter full reputation will be use.\n     * @return true in case of proposal execution otherwise false\n     * throws if proposal is not open or if it has been executed\n     * NB: executes the proposal if a decision has been reached\n     */\n     // solhint-disable-next-line function-max-lines,code-complexity\n    function internalVote(bytes32 _proposalId, address _voter, uint256 _vote, uint256 _rep) internal returns(bool) {\n        require(_vote <= NUM_OF_CHOICES && _vote > 0, \"0 < _vote <= 2\");\n        if (_execute(_proposalId)) {\n            return true;\n        }\n\n        Parameters memory params = parameters[proposals[_proposalId].paramsHash];\n        Proposal storage proposal = proposals[_proposalId];\n\n        // Check voter has enough reputation:\n        uint256 reputation = VotingMachineCallbacksInterface(proposal.callbacks).reputationOf(_voter, _proposalId);\n        require(reputation > 0, \"_voter must have reputation\");\n        require(reputation >= _rep, \"reputation >= _rep\");\n        uint256 rep = _rep;\n        if (rep == 0) {\n            rep = reputation;\n        }\n        // If this voter has already voted, return false.\n        if (proposal.voters[_voter].reputation != 0) {\n            return false;\n        }\n        // The voting itself:\n        proposal.votes[_vote] = rep.add(proposal.votes[_vote]);\n        //check if the current winningVote changed or there is a tie.\n        //for the case there is a tie the current winningVote set to NO.\n        if ((proposal.votes[_vote] > proposal.votes[proposal.winningVote]) ||\n            ((proposal.votes[NO] == proposal.votes[proposal.winningVote]) &&\n            proposal.winningVote == YES)) {\n            if (proposal.state == ProposalState.Boosted &&\n            // solhint-disable-next-line not-rely-on-time\n                ((now - proposal.times[1]) >= (params.boostedVotePeriodLimit - params.quietEndingPeriod))||\n                proposal.state == ProposalState.QuietEndingPeriod) {\n                //quietEndingPeriod\n                if (proposal.state != ProposalState.QuietEndingPeriod) {\n                    proposal.currentBoostedVotePeriodLimit = params.quietEndingPeriod;\n                    proposal.state = ProposalState.QuietEndingPeriod;\n                    emit StateChange(_proposalId, proposal.state);\n                }\n                // solhint-disable-next-line not-rely-on-time\n                proposal.times[1] = now;\n            }\n            proposal.winningVote = _vote;\n        }\n        proposal.voters[_voter] = Voter({\n            reputation: rep,\n            vote: _vote,\n            preBoosted:((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued))\n        });\n        if ((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued)) {\n            proposal.preBoostedVotes[_vote] = rep.add(proposal.preBoostedVotes[_vote]);\n            uint256 reputationDeposit = (params.votersReputationLossRatio.mul(rep))/100;\n            VotingMachineCallbacksInterface(proposal.callbacks).burnReputation(reputationDeposit, _voter, _proposalId);\n        }\n        emit VoteProposal(_proposalId, organizations[proposal.organizationId], _voter, _vote, rep);\n        return _execute(_proposalId);\n    }\n\n    /**\n     * @dev _score return the proposal score (Confidence level)\n     * For dual choice proposal S = (S+)/(S-)\n     * @param _proposalId the ID of the proposal\n     * @return uint256 proposal score as real number.\n     */\n    function _score(bytes32 _proposalId) internal view returns(uint256) {\n        Proposal storage proposal = proposals[_proposalId];\n        //proposal.stakes[NO] cannot be zero as the dao downstake > 0 for each proposal.\n        return uint216(proposal.stakes[YES]).fraction(uint216(proposal.stakes[NO]));\n    }\n\n    /**\n      * @dev _isVotable check if the proposal is votable\n      * @param _proposalId the ID of the proposal\n      * @return bool true or false\n    */\n    function _isVotable(bytes32 _proposalId) internal view returns(bool) {\n        ProposalState pState = proposals[_proposalId].state;\n        return ((pState == ProposalState.PreBoosted)||\n                (pState == ProposalState.Boosted)||\n                (pState == ProposalState.QuietEndingPeriod)||\n                (pState == ProposalState.Queued)\n        );\n    }\n}\n\n// File: contracts/votingMachines/GenesisProtocol.sol\n\npragma solidity ^0.5.4;\n\n\n\n\n/**\n * @title GenesisProtocol implementation -an organization's voting machine scheme.\n */\ncontract GenesisProtocol is IntVoteInterface, GenesisProtocolLogic {\n    using ECDSA for bytes32;\n\n    // Digest describing the data the user signs according EIP 712.\n    // Needs to match what is passed to Metamask.\n    bytes32 public constant DELEGATION_HASH_EIP712 =\n    keccak256(abi.encodePacked(\n    \"address GenesisProtocolAddress\",\n    \"bytes32 ProposalId\",\n    \"uint256 Vote\",\n    \"uint256 AmountToStake\",\n    \"uint256 Nonce\"\n    ));\n\n    mapping(address=>uint256) public stakesNonce; //stakes Nonce\n\n    /**\n     * @dev Constructor\n     */\n    constructor(IERC20 _stakingToken)\n    public\n    // solhint-disable-next-line no-empty-blocks\n    GenesisProtocolLogic(_stakingToken) {\n    }\n\n    /**\n     * @dev staking function\n     * @param _proposalId id of the proposal\n     * @param _vote  NO(2) or YES(1).\n     * @param _amount the betting amount\n     * @return bool true - the proposal has been executed\n     *              false - otherwise.\n     */\n    function stake(bytes32 _proposalId, uint256 _vote, uint256 _amount) external returns(bool) {\n        return _stake(_proposalId, _vote, _amount, msg.sender);\n    }\n\n    /**\n     * @dev stakeWithSignature function\n     * @param _proposalId id of the proposal\n     * @param _vote  NO(2) or YES(1).\n     * @param _amount the betting amount\n     * @param _nonce nonce value ,it is part of the signature to ensure that\n              a signature can be received only once.\n     * @param _signatureType signature type\n              1 - for web3.eth.sign\n              2 - for eth_signTypedData according to EIP #712.\n     * @param _signature  - signed data by the staker\n     * @return bool true - the proposal has been executed\n     *              false - otherwise.\n     */\n    function stakeWithSignature(\n        bytes32 _proposalId,\n        uint256 _vote,\n        uint256 _amount,\n        uint256 _nonce,\n        uint256 _signatureType,\n        bytes calldata _signature\n        )\n        external\n        returns(bool)\n        {\n        // Recreate the digest the user signed\n        bytes32 delegationDigest;\n        if (_signatureType == 2) {\n            delegationDigest = keccak256(\n                abi.encodePacked(\n                    DELEGATION_HASH_EIP712, keccak256(\n                        abi.encodePacked(\n                        address(this),\n                        _proposalId,\n                        _vote,\n                        _amount,\n                        _nonce)\n                    )\n                )\n            );\n        } else {\n            delegationDigest = keccak256(\n                        abi.encodePacked(\n                        address(this),\n                        _proposalId,\n                        _vote,\n                        _amount,\n                        _nonce)\n                    ).toEthSignedMessageHash();\n        }\n        address staker = delegationDigest.recover(_signature);\n        //a garbage staker address due to wrong signature will revert due to lack of approval and funds.\n        require(staker != address(0), \"staker address cannot be 0\");\n        require(stakesNonce[staker] == _nonce);\n        stakesNonce[staker] = stakesNonce[staker].add(1);\n        return _stake(_proposalId, _vote, _amount, staker);\n    }\n\n    /**\n     * @dev voting function\n     * @param _proposalId id of the proposal\n     * @param _vote NO(2) or YES(1).\n     * @param _amount the reputation amount to vote with . if _amount == 0 it will use all voter reputation.\n     * @param _voter voter address\n     * @return bool true - the proposal has been executed\n     *              false - otherwise.\n     */\n    function vote(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _voter)\n    external\n    votable(_proposalId)\n    returns(bool) {\n        Proposal storage proposal = proposals[_proposalId];\n        Parameters memory params = parameters[proposal.paramsHash];\n        address voter;\n        if (params.voteOnBehalf != address(0)) {\n            require(msg.sender == params.voteOnBehalf);\n            voter = _voter;\n        } else {\n            voter = msg.sender;\n        }\n        return internalVote(_proposalId, voter, _vote, _amount);\n    }\n\n  /**\n   * @dev Cancel the vote of the msg.sender.\n   * cancel vote is not allow in genesisProtocol so this function doing nothing.\n   * This function is here in order to comply to the IntVoteInterface .\n   */\n    function cancelVote(bytes32 _proposalId) external votable(_proposalId) {\n       //this is not allowed\n        return;\n    }\n\n    /**\n      * @dev execute check if the proposal has been decided, and if so, execute the proposal\n      * @param _proposalId the id of the proposal\n      * @return bool true - the proposal has been executed\n      *              false - otherwise.\n     */\n    function execute(bytes32 _proposalId) external votable(_proposalId) returns(bool) {\n        return _execute(_proposalId);\n    }\n\n  /**\n    * @dev getNumberOfChoices returns the number of choices possible in this proposal\n    * @return uint256 that contains number of choices\n    */\n    function getNumberOfChoices(bytes32) external view returns(uint256) {\n        return NUM_OF_CHOICES;\n    }\n\n    /**\n      * @dev getProposalTimes returns proposals times variables.\n      * @param _proposalId id of the proposal\n      * @return proposals times array\n      */\n    function getProposalTimes(bytes32 _proposalId) external view returns(uint[3] memory times) {\n        return proposals[_proposalId].times;\n    }\n\n    /**\n     * @dev voteInfo returns the vote and the amount of reputation of the user committed to this proposal\n     * @param _proposalId the ID of the proposal\n     * @param _voter the address of the voter\n     * @return uint256 vote - the voters vote\n     *        uint256 reputation - amount of reputation committed by _voter to _proposalId\n     */\n    function voteInfo(bytes32 _proposalId, address _voter) external view returns(uint, uint) {\n        Voter memory voter = proposals[_proposalId].voters[_voter];\n        return (voter.vote, voter.reputation);\n    }\n\n    /**\n    * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\n    * @param _proposalId the ID of the proposal\n    * @param _choice the index in the\n    * @return voted reputation for the given choice\n    */\n    function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256) {\n        return proposals[_proposalId].votes[_choice];\n    }\n\n    /**\n    * @dev isVotable check if the proposal is votable\n    * @param _proposalId the ID of the proposal\n    * @return bool true or false\n    */\n    function isVotable(bytes32 _proposalId) external view returns(bool) {\n        return _isVotable(_proposalId);\n    }\n\n    /**\n    * @dev proposalStatus return the total votes and stakes for a given proposal\n    * @param _proposalId the ID of the proposal\n    * @return uint256 preBoostedVotes YES\n    * @return uint256 preBoostedVotes NO\n    * @return uint256 total stakes YES\n    * @return uint256 total stakes NO\n    */\n    function proposalStatus(bytes32 _proposalId) external view returns(uint256, uint256, uint256, uint256) {\n        return (\n                proposals[_proposalId].preBoostedVotes[YES],\n                proposals[_proposalId].preBoostedVotes[NO],\n                proposals[_proposalId].stakes[YES],\n                proposals[_proposalId].stakes[NO]\n        );\n    }\n\n  /**\n    * @dev getProposalOrganization return the organizationId for a given proposal\n    * @param _proposalId the ID of the proposal\n    * @return bytes32 organization identifier\n    */\n    function getProposalOrganization(bytes32 _proposalId) external view returns(bytes32) {\n        return (proposals[_proposalId].organizationId);\n    }\n\n    /**\n      * @dev getStaker return the vote and stake amount for a given proposal and staker\n      * @param _proposalId the ID of the proposal\n      * @param _staker staker address\n      * @return uint256 vote\n      * @return uint256 amount\n    */\n    function getStaker(bytes32 _proposalId, address _staker) external view returns(uint256, uint256) {\n        return (proposals[_proposalId].stakers[_staker].vote, proposals[_proposalId].stakers[_staker].amount);\n    }\n\n    /**\n      * @dev voteStake return the amount stakes for a given proposal and vote\n      * @param _proposalId the ID of the proposal\n      * @param _vote vote number\n      * @return uint256 stake amount\n    */\n    function voteStake(bytes32 _proposalId, uint256 _vote) external view returns(uint256) {\n        return proposals[_proposalId].stakes[_vote];\n    }\n\n  /**\n    * @dev voteStake return the winningVote for a given proposal\n    * @param _proposalId the ID of the proposal\n    * @return uint256 winningVote\n    */\n    function winningVote(bytes32 _proposalId) external view returns(uint256) {\n        return proposals[_proposalId].winningVote;\n    }\n\n    /**\n      * @dev voteStake return the state for a given proposal\n      * @param _proposalId the ID of the proposal\n      * @return ProposalState proposal state\n    */\n    function state(bytes32 _proposalId) external view returns(ProposalState) {\n        return proposals[_proposalId].state;\n    }\n\n   /**\n    * @dev isAbstainAllow returns if the voting machine allow abstain (0)\n    * @return bool true or false\n    */\n    function isAbstainAllow() external pure returns(bool) {\n        return false;\n    }\n\n    /**\n     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\n     * @return min - minimum number of choices\n               max - maximum number of choices\n     */\n    function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max) {\n        return (YES, NO);\n    }\n\n    /**\n     * @dev score return the proposal score\n     * @param _proposalId the ID of the proposal\n     * @return uint256 proposal score.\n     */\n    function score(bytes32 _proposalId) public view returns(uint256) {\n        return  _score(_proposalId);\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000543ff227f64aa17ea132bf9886cab5db55dcaddf"
}