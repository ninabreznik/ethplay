{
  "address": "0xee5dfb5ddd54ea2fb93b796a8a1b83c3fe38e0e6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Nerves Token",
  "contractName": "Nerves",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-23\n*/\n\npragma solidity ^0.4.23;\n\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title MultiOwnable\n */\ncontract MultiOwnable {\n  address public root;\n  mapping (address => address) public owners; // owner => parent of owner\n  \n  /**\n  * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n  * account.\n  */\n  constructor() public {\n    root = msg.sender;\n    owners[root] = root;\n  }\n  \n  /**\n  * @dev Throws if called by any account other than the owner.\n  */\n  modifier onlyOwner() {\n    require(owners[msg.sender] != 0);\n    _;\n  }\n  \n  /**\n  * @dev Adding new owners\n  */\n  function newOwner(address _owner) onlyOwner external returns (bool) {\n    require(_owner != 0);\n    owners[_owner] = msg.sender;\n    return true;\n  }\n  \n  /**\n    * @dev Deleting owners\n    */\n  function deleteOwner(address _owner) onlyOwner external returns (bool) {\n    require(owners[_owner] == msg.sender || (owners[_owner] != 0 && msg.sender == root));\n    owners[_owner] = 0;\n    return true;\n  }\n}\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract Blacklisted is MultiOwnable {\n\n  mapping(address => bool) public blacklist;\n\n  /**\n  * @dev Throws if called by any account other than the owner.\n  */\n  modifier notBlacklisted() {\n    require(blacklist[msg.sender] == false);\n    _;\n  }\n\n  /**\n   * @dev Adds single address to blacklist.\n   * @param _villain Address to be added to the blacklist\n   */\n  function addToBlacklist(address _villain) external onlyOwner {\n    blacklist[_villain] = true;\n  }\n\n  /**\n   * @dev Adds list of addresses to blacklist. Not overloaded due to limitations with truffle testing.\n   * @param _villains Addresses to be added to the blacklist\n   */\n  function addManyToBlacklist(address[] _villains) external onlyOwner {\n    for (uint256 i = 0; i < _villains.length; i++) {\n      blacklist[_villains[i]] = true;\n    }\n  }\n\n  /**\n   * @dev Removes single address from blacklist.\n   * @param _villain Address to be removed to the blacklist\n   */\n  function removeFromBlacklist(address _villain) external onlyOwner {\n    blacklist[_villain] = false;\n  }\n}\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, MultiOwnable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n\ncontract Nerves is MintableToken, BurnableToken, Blacklisted {\n\n  string public constant name = \"Nerves\"; // solium-disable-line uppercase\n  string public constant symbol = \"NER\"; // solium-disable-line uppercase\n  uint8 public constant decimals = 18; // solium-disable-line uppercase, // 18 decimals is the strongly suggested default, avoid changing it\n\n  uint256 public constant INITIAL_SUPPLY = 5000 * 1000 * 1000 * (10 ** uint256(decimals)); \n\n  bool public isUnlocked = false;\n  \n  /**\n   * @dev Constructor that gives msg.sender all of existing tokens.\n   */\n  constructor(address _wallet) public {\n    totalSupply_ = INITIAL_SUPPLY;\n    balances[_wallet] = INITIAL_SUPPLY;\n    emit Transfer(address(0), _wallet, INITIAL_SUPPLY);\n  }\n\n  modifier onlyTransferable() {\n    require(isUnlocked || owners[msg.sender] != 0);\n    _;\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public onlyTransferable notBlacklisted returns (bool) {\n      return super.transferFrom(_from, _to, _value);\n  }\n\n  function transfer(address _to, uint256 _value) public onlyTransferable notBlacklisted returns (bool) {\n      return super.transfer(_to, _value);\n  }\n  \n  function unlockTransfer() public onlyOwner {\n      isUnlocked = true;\n  }\n  \n  function lockTransfer() public onlyOwner {\n      isUnlocked = false;\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_villains\",\"type\":\"address[]\"}],\"name\":\"addManyToBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_villain\",\"type\":\"address\"}],\"name\":\"addToBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_villain\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isUnlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"deleteOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526005805460ff1990811690915560078054909116905534801561002657600080fd5b5060405160208061119b833981016040818152915160038054600160a060020a0319908116331791829055600160a060020a0391821660008181526004602090815287822080549094169092179092556b1027e72f1f12813088000000600181905592841680835282825286832084905592855294519294919390927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3506110be806100dd6000396000f30060806040526004361061015e5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663022914a7811461016357806305d2035b146101a057806306fdde03146101c9578063095ea7b31461025357806318160ddd146102775780631a9aea0a1461029e57806323b872dd146102b55780632815f50f146102df5780632ff2e9dc146102ff578063313ce5671461031457806340c10f191461033f57806342966c681461036357806344337ea11461037b578063537df3b61461039c57806366188463146103bd57806370a08231146103e15780637d64bcb4146104025780638380edb714610417578063859524541461042c57806395d89b411461044d578063a9059cbb14610462578063bf6d9abd14610486578063cd5c4c701461049b578063d73dd623146104bc578063dd62ed3e146104e0578063ebf0c71714610507578063f9f92be41461051c575b600080fd5b34801561016f57600080fd5b50610184600160a060020a036004351661053d565b60408051600160a060020a039092168252519081900360200190f35b3480156101ac57600080fd5b506101b5610558565b604080519115158252519081900360200190f35b3480156101d557600080fd5b506101de610561565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610218578181015183820152602001610200565b50505050905090810190601f1680156102455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561025f57600080fd5b506101b5600160a060020a0360043516602435610598565b34801561028357600080fd5b5061028c6105fe565b60408051918252519081900360200190f35b3480156102aa57600080fd5b506102b3610604565b005b3480156102c157600080fd5b506101b5600160a060020a0360043581169060243516604435610634565b3480156102eb57600080fd5b506102b3600480356024810191013561069a565b34801561030b57600080fd5b5061028c61071a565b34801561032057600080fd5b5061032961072a565b6040805160ff9092168252519081900360200190f35b34801561034b57600080fd5b506101b5600160a060020a036004351660243561072f565b34801561036f57600080fd5b506102b360043561082a565b34801561038757600080fd5b506102b3600160a060020a0360043516610837565b3480156103a857600080fd5b506102b3600160a060020a036004351661087f565b3480156103c957600080fd5b506101b5600160a060020a03600435166024356108c4565b3480156103ed57600080fd5b5061028c600160a060020a03600435166109b4565b34801561040e57600080fd5b506101b56109cf565b34801561042357600080fd5b506101b5610a3f565b34801561043857600080fd5b506101b5600160a060020a0360043516610a48565b34801561045957600080fd5b506101de610abb565b34801561046e57600080fd5b506101b5600160a060020a0360043516602435610af2565b34801561049257600080fd5b506102b3610b56565b3480156104a757600080fd5b506101b5600160a060020a0360043516610b89565b3480156104c857600080fd5b506101b5600160a060020a0360043516602435610c46565b3480156104ec57600080fd5b5061028c600160a060020a0360043581169060243516610cdf565b34801561051357600080fd5b50610184610d0a565b34801561052857600080fd5b506101b5600160a060020a0360043516610d19565b600460205260009081526040902054600160a060020a031681565b60055460ff1681565b60408051808201909152600681527f4e65727665730000000000000000000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b33600090815260046020526040902054600160a060020a0316151561062857600080fd5b6007805460ff19169055565b60075460009060ff168061065f575033600090815260046020526040902054600160a060020a031615155b151561066a57600080fd5b3360009081526006602052604090205460ff161561068757600080fd5b610692848484610d2e565b949350505050565b33600090815260046020526040812054600160a060020a031615156106be57600080fd5b5060005b81811015610715576001600660008585858181106106dc57fe5b60209081029290920135600160a060020a0316835250810191909152604001600020805460ff19169115159190911790556001016106c2565b505050565b6b1027e72f1f1281308800000081565b601281565b33600090815260046020526040812054600160a060020a0316151561075357600080fd5b60055460ff161561076357600080fd5b600154610776908363ffffffff610e9316565b600155600160a060020a0383166000908152602081905260409020546107a2908363ffffffff610e9316565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000916000805160206110738339815191529181900360200190a350600192915050565b6108343382610ea2565b50565b33600090815260046020526040902054600160a060020a0316151561085b57600080fd5b600160a060020a03166000908152600660205260409020805460ff19166001179055565b33600090815260046020526040902054600160a060020a031615156108a357600080fd5b600160a060020a03166000908152600660205260409020805460ff19169055565b336000908152600260209081526040808320600160a060020a03861684529091528120548083111561091957336000908152600260209081526040808320600160a060020a038816845290915281205561094e565b610929818463ffffffff610f9116565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b33600090815260046020526040812054600160a060020a031615156109f357600080fd5b60055460ff1615610a0357600080fd5b6005805460ff191660011790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b60075460ff1681565b33600090815260046020526040812054600160a060020a03161515610a6c57600080fd5b600160a060020a0382161515610a8157600080fd5b50600160a060020a03166000908152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff191633179055600190565b60408051808201909152600381527f4e45520000000000000000000000000000000000000000000000000000000000602082015281565b60075460009060ff1680610b1d575033600090815260046020526040902054600160a060020a031615155b1515610b2857600080fd5b3360009081526006602052604090205460ff1615610b4557600080fd5b610b4f8383610fa3565b9392505050565b33600090815260046020526040902054600160a060020a03161515610b7a57600080fd5b6007805460ff19166001179055565b33600090815260046020526040812054600160a060020a03161515610bad57600080fd5b600160a060020a0382811660009081526004602052604090205416331480610c035750600160a060020a038083166000908152600460205260409020541615801590610c035750600354600160a060020a031633145b1515610c0e57600080fd5b50600160a060020a03166000908152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19169055600190565b336000908152600260209081526040808320600160a060020a0386168452909152812054610c7a908363ffffffff610e9316565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a031681565b60066020526000908152604090205460ff1681565b6000600160a060020a0383161515610d4557600080fd5b600160a060020a038416600090815260208190526040902054821115610d6a57600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115610d9a57600080fd5b600160a060020a038416600090815260208190526040902054610dc3908363ffffffff610f9116565b600160a060020a038086166000908152602081905260408082209390935590851681522054610df8908363ffffffff610e9316565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610e3a908363ffffffff610f9116565b600160a060020a0380861660008181526002602090815260408083203384528252918290209490945580518681529051928716939192600080516020611073833981519152929181900390910190a35060019392505050565b600082820183811015610b4f57fe5b600160a060020a038216600090815260208190526040902054811115610ec757600080fd5b600160a060020a038216600090815260208190526040902054610ef0908263ffffffff610f9116565b600160a060020a038316600090815260208190526040902055600154610f1c908263ffffffff610f9116565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516916000805160206110738339815191529181900360200190a35050565b600082821115610f9d57fe5b50900390565b6000600160a060020a0383161515610fba57600080fd5b33600090815260208190526040902054821115610fd657600080fd5b33600090815260208190526040902054610ff6908363ffffffff610f9116565b3360009081526020819052604080822092909255600160a060020a03851681522054611028908363ffffffff610e9316565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233926000805160206110738339815191529281900390910190a3506001929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820a24d5adc7c56624d9eecacc35534fddcfbb07032b2d2af6b848336e0d7dc997500290000000000000000000000005c47fb36e6c900890fade2b6c8916fb5a5998e66",
  "constructorArguments": "0000000000000000000000005c47fb36e6c900890fade2b6c8916fb5a5998e66"
}