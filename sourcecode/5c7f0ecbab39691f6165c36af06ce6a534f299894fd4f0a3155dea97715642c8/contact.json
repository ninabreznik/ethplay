{
  "address": "0x27d99a6d64e8fd38a47fb87df2d80867d6c1592c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MagicKeys",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-19\n*/\n\npragma solidity ^0.4.23;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: contracts\\utils\\SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\ncontract AtomicSwappableToken is StandardToken {\n  struct HashLockContract {\n    address sender;\n    address receiver;\n    uint amount;\n    bytes32 hashlock;\n    uint timelock;\n    bytes32 secret;\n    States state;\n  }\n\n  enum States {\n    INVALID,\n    OPEN,\n    CLOSED,\n    REFUNDED\n  }\n\n  mapping (bytes32 => HashLockContract) private contracts;\n\n  modifier futureTimelock(uint _time) {\n    // only requirement is the timelock time is after the last blocktime (now).\n    // probably want something a bit further in the future then this.\n    // but this is still a useful sanity check:\n    require(_time > now);\n    _;\n}\n\n  modifier contractExists(bytes32 _contractId) {\n    require(_contractExists(_contractId));\n    _;\n  }\n\n  modifier hashlockMatches(bytes32 _contractId, bytes32 _secret) {\n    require(contracts[_contractId].hashlock == keccak256(_secret));\n    _;\n  }\n\n  modifier closable(bytes32 _contractId) {\n    require(contracts[_contractId].state == States.OPEN);\n    require(contracts[_contractId].timelock > now);\n    _;\n  }\n\n  modifier refundable(bytes32 _contractId) {\n    require(contracts[_contractId].state == States.OPEN);\n    require(contracts[_contractId].timelock <= now);\n    _;\n  }\n\n  event NewHashLockContract (\n    bytes32 indexed contractId,\n    address indexed sender,\n    address indexed receiver,\n    uint amount,\n    bytes32 hashlock,\n    uint timelock\n  );\n\n  event SwapClosed(bytes32 indexed contractId);\n  event SwapRefunded(bytes32 indexed contractId);\n\n\n  function open (\n    address _receiver,\n    bytes32 _hashlock,\n    uint _timelock,\n    uint _amount\n  ) public\n    futureTimelock(_timelock)\n    returns (bytes32 contractId)\n  {\n    contractId = keccak256 (\n      msg.sender,\n      _receiver,\n      _amount,\n      _hashlock,\n      _timelock\n    );\n\n    // the new contract must not exist\n    require(!_contractExists(contractId));\n\n    // transfer token to this contract\n    require(transfer(address(this), _amount));\n\n    contracts[contractId] = HashLockContract(\n      msg.sender,\n      _receiver,\n      _amount,\n      _hashlock,\n      _timelock,\n      0x0,\n      States.OPEN\n    );\n\n    emit NewHashLockContract(contractId, msg.sender, _receiver, _amount, _hashlock, _timelock);\n  }\n\n  function close(bytes32 _contractId, bytes32 _secret)\n    public\n    contractExists(_contractId)\n    hashlockMatches(_contractId, _secret)\n    closable(_contractId)\n    returns (bool)\n  {\n    HashLockContract storage c = contracts[_contractId];\n    c.secret = _secret;\n    c.state = States.CLOSED;\n    require(this.transfer(c.receiver, c.amount));\n    emit SwapClosed(_contractId);\n    return true;\n  }\n\n  function refund(bytes32 _contractId)\n    public\n    contractExists(_contractId)\n    refundable(_contractId)\n    returns (bool)\n  {\n    HashLockContract storage c = contracts[_contractId];\n    c.state = States.REFUNDED;\n    require(this.transfer(c.sender, c.amount));\n    emit SwapRefunded(_contractId);\n    return true;\n  }\n\n  function _contractExists(bytes32 _contractId) internal view returns (bool exists) {\n    exists = (contracts[_contractId].sender != address(0));\n  }\n\n  function checkContract(bytes32 _contractId)\n    public\n    view\n    contractExists(_contractId)\n    returns (\n      address sender,\n      address receiver,\n      uint amount,\n      bytes32 hashlock,\n      uint timelock,\n      bytes32 secret\n    )\n  {\n    HashLockContract memory c = contracts[_contractId];\n    return (\n      c.sender,\n      c.receiver,\n      c.amount,\n      c.hashlock,\n      c.timelock,\n      c.secret\n    );\n  }\n\n}\n\n\ncontract TokenReceiver {\n  function receiveApproval(address from, uint amount, address tokenAddress, bytes data) public;\n}\n\n\n\ncontract MagicKeys is AtomicSwappableToken, Ownable {\n\n  string public name;                //The shoes name: e.g. MB\n  string public symbol;              //The shoes symbol: e.g. MB\n  uint8 public decimals;             //Number of decimals of the smallest unit\n\n  constructor (\n    string _name,\n    string _symbol\n  ) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = 18;  // set as default\n  }\n\n\n  function _mint(address _to, uint _amount) internal returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Transfer(address(0), _to, _amount);\n  }\n\n  function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\n    _mint(_to, _amount);\n    return true;\n  }\n\n  function approveAndCall(address _spender, uint _amount, bytes _data) public {\n    if(approve(_spender, _amount)) {\n      TokenReceiver(_spender).receiveApproval(msg.sender, _amount, address(this), _data);\n    }\n  }\n\n}",
  "bytecode": "60806040523480156200001157600080fd5b506040516200271b3803806200271b833981018060405281019080805182019291906020018051820192919050505033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816005908051906020019062000099929190620000d7565b508060069080519060200190620000b2929190620000d7565b506012600760006101000a81548160ff021916908360ff160217905550505062000186565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200011a57805160ff19168380011785556200014b565b828001600101855582156200014b579182015b828111156200014a5782518255916020019190600101906200012d565b5b5090506200015a91906200015e565b5090565b6200018391905b808211156200017f57600081600090555060010162000165565b5090565b90565b61258580620001966000396000f300608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461010c578063095ea7b31461019c5780630c5ce5931461020157806318160ddd1461028257806323b872dd146102ad578063313ce5671461033257806340c10f191461036357806348a54fc5146103c8578063661884631461049857806370a08231146104fd5780637249fbb6146105545780638da5cb5b1461059d57806395d89b41146105f4578063a9059cbb14610684578063cae9ca51146106e9578063d73dd6231461077c578063dd62ed3e146107e1578063f10ca95a14610858578063f2fde38b146108af575b600080fd5b34801561011857600080fd5b506101216108f2565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610161578082015181840152602081019050610146565b50505050905090810190601f16801561018e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a857600080fd5b506101e7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610990565b604051808215151515815260200191505060405180910390f35b34801561020d57600080fd5b50610264600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080356000191690602001909291908035906020019092919080359060200190929190505050610a82565b60405180826000191660001916815260200191505060405180910390f35b34801561028e57600080fd5b50610297610d7f565b6040518082815260200191505060405180910390f35b3480156102b957600080fd5b50610318600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d89565b604051808215151515815260200191505060405180910390f35b34801561033e57600080fd5b50610347611143565b604051808260ff1660ff16815260200191505060405180910390f35b34801561036f57600080fd5b506103ae600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611156565b604051808215151515815260200191505060405180910390f35b3480156103d457600080fd5b506103f760048036038101908080356000191690602001909291905050506111c9565b604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184600019166000191681526020018381526020018260001916600019168152602001965050505050505060405180910390f35b3480156104a457600080fd5b506104e3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061135e565b604051808215151515815260200191505060405180910390f35b34801561050957600080fd5b5061053e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115ef565b6040518082815260200191505060405180910390f35b34801561056057600080fd5b506105836004803603810190808035600019169060200190929190505050611637565b604051808215151515815260200191505060405180910390f35b3480156105a957600080fd5b506105b261185e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561060057600080fd5b50610609611884565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561064957808201518184015260208101905061062e565b50505050905090810190601f1680156106765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561069057600080fd5b506106cf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611922565b604051808215151515815260200191505060405180910390f35b3480156106f557600080fd5b5061077a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611b41565b005b34801561078857600080fd5b506107c7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611cb2565b604051808215151515815260200191505060405180910390f35b3480156107ed57600080fd5b50610842600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611eae565b6040518082815260200191505060405180910390f35b34801561086457600080fd5b5061089560048036038101908080356000191690602001909291908035600019169060200190929190505050611f35565b604051808215151515815260200191505060405180910390f35b3480156108bb57600080fd5b506108f0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506121be565b005b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109885780601f1061095d57610100808354040283529160200191610988565b820191906000526020600020905b81548152906001019060200180831161096b57829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000824281111515610a9357600080fd5b3386848787604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140184815260200183600019166000191681526020018281526020019550505050505060405180910390209150610b5282612316565b151515610b5e57600080fd5b610b683084611922565b1515610b7357600080fd5b60e0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff16815260200184815260200186600019168152602001858152602001600060010260001916815260200160016003811115610be857fe5b81525060036000846000191660001916815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301906000191690556080820151816004015560a0820151816005019060001916905560c08201518160060160006101000a81548160ff02191690836003811115610cec57fe5b02179055509050508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1683600019167fea9239fe5c7c1fbed43673a80326ed86705f543e7b6a0f1b50cb420ab29eb236868989604051808481526020018360001916600019168152602001828152602001935050505060405180910390a450949350505050565b6000600154905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610dc657600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610e1357600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610e9e57600080fd5b610eef826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461238d90919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f82826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123a690919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061105382600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461238d90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600760009054906101000a900460ff1681565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111b457600080fd5b6111be83836123c2565b506001905092915050565b6000806000806000806111da6124de565b876111e481612316565b15156111ef57600080fd5b600360008a6000191660001916815260200190815260200160002060e060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015460001916600019168152602001600482015481526020016005820154600019166000191681526020016006820160009054906101000a900460ff16600381111561131857fe5b600381111561132357fe5b815250509150816000015182602001518360400151846060015185608001518660a00151975097509750975097509750505091939550919395565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083111561146f576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611503565b611482838261238d90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000808261164481612316565b151561164f57600080fd5b836001600381111561165d57fe5b60036000836000191660001916815260200190815260200160002060060160009054906101000a900460ff16600381111561169457fe5b1415156116a057600080fd5b4260036000836000191660001916815260200190815260200160002060040154111515156116cd57600080fd5b600360008660001916600019168152602001908152602001600020925060038360060160006101000a81548160ff0219169083600381111561170b57fe5b02179055503073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685600201546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156117db57600080fd5b505af11580156117ef573d6000803e3d6000fd5b505050506040513d602081101561180557600080fd5b8101908080519060200190929190505050151561182157600080fd5b84600019167fc506b8643b74e7a2fbb400c79e929dd5dfffb301fb07afb3b0e8e7c47925cf5a60405160405180910390a260019350505050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60068054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561191a5780601f106118ef5761010080835404028352916020019161191a565b820191906000526020600020905b8154815290600101906020018083116118fd57829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561195f57600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156119ac57600080fd5b6119fd826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461238d90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a90826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123a690919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b611b4b8383610990565b15611cad578273ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338430856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611c45578082015181840152602081019050611c2a565b50505050905090810190601f168015611c725780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015611c9457600080fd5b505af1158015611ca8573d6000803e3d6000fd5b505050505b505050565b6000611d4382600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123a690919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008083611f4281612316565b1515611f4d57600080fd5b8484806040518082600019166000191681526020019150506040518091039020600019166003600084600019166000191681526020019081526020016000206003015460001916141515611fa057600080fd5b8660016003811115611fae57fe5b60036000836000191660001916815260200190815260200160002060060160009054906101000a900460ff166003811115611fe557fe5b141515611ff157600080fd5b426003600083600019166000191681526020019081526020016000206004015411151561201d57600080fd5b60036000896000191660001916815260200190815260200160002094508685600501816000191690555060028560060160006101000a81548160ff0219169083600381111561206857fe5b02179055503073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687600201546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561213857600080fd5b505af115801561214c573d6000803e3d6000fd5b505050506040513d602081101561216257600080fd5b8101908080519060200190929190505050151561217e57600080fd5b87600019167f11ba23df44ea6c9c9cacf1cf15424233bf5d9b305d453bb3515e0680c597af5660405160405180910390a260019550505050505092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561221a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561225657600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008073ffffffffffffffffffffffffffffffffffffffff1660036000846000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600082821115151561239b57fe5b818303905092915050565b600081830190508281101515156123b957fe5b80905092915050565b60006123d9826001546123a690919063ffffffff16565b600181905550612430826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123a690919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a392915050565b60e060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000801916815260200160008152602001600080191681526020016000600381111561255357fe5b815250905600a165627a7a7230582007e677d64b76811453168dd77de83fb1337f53d60a7eb61b5768dcbc720037eb0029000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000006444542524953000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064445425249530000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000006444542524953000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064445425249530000000000000000000000000000000000000000000000000000"
}