{
  "address": "0xdc3f9f3301194139e9398967547ca3b6322a34cd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Coke",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-23\n*/\n\npragma solidity ^0.5.7;\npragma experimental ABIEncoderV2;\n\ncontract IRequireUtils {\n    function requireCode(uint256 code) external pure;\n\n    //function interpret(uint256 code) public pure returns (string memory);\n}\n\n\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses.\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\ncontract Coke is ERC20 {\n    using SafeMath for uint256;\n\n    IRequireUtils internal rUtils;\n\n    //1 Coke = 10^18 Tin\n    string public name = \"CB\";\n    string public symbol = \"CB\";\n    uint256 public decimals = 18; //1:1\n\n    address public cokeAdmin;// admin has rights to mint and burn and etc.\n    mapping(address => bool) public gameMachineRecords;// game machine has permission to mint coke\n\n    uint256 public step;\n    uint256 public remain;\n    uint256 public currentDifficulty;//starts from 0\n    uint256 public currentStageEnd;\n\n    address internal team;\n    uint256 public teamRemain;\n    uint256 public unlockAllBlockNumber;\n    //uint256 unlockRate;\n    uint256 internal unlockNumerator;\n    uint256 internal unlockDenominator;\n\n    event Reward(address indexed account, uint256 amount, uint256 rawAmount);\n    event UnlockToTeam(address indexed account, uint256 amount, uint256 rawReward);\n    event PermitGameMachine(address indexed gameMachineAddress, bool approved);\n\n\n    constructor (IRequireUtils _rUtils, address _cokeAdmin, address _team, uint256 _unlockAllBlockNumber, address _bounty) public {\n        rUtils = _rUtils;\n        cokeAdmin = _cokeAdmin;\n\n        require(_cokeAdmin != address(0));\n        require(_team != address(0));\n        require(_bounty != address(0));\n\n        unlockAllBlockNumber = _unlockAllBlockNumber;\n        uint256 cap = 8000000000000000000000000000;\n        team = _team;\n        teamRemain = 1600000000000000000000000000;\n\n        _mint(address(this), 1600000000000000000000000000);\n        _mint(_bounty, 800000000000000000000000000);\n\n        step = cap.mul(5).div(100);\n        remain = cap.sub(teamRemain).sub(800000000000000000000000000);\n\n        _mint(address(this), remain);\n\n        //unlockRate = remain / _toTeam;\n        unlockNumerator = 7;\n        unlockDenominator = 2;\n        if (remain.sub(step) > 0) {\n            currentStageEnd = remain.sub(step);\n        } else {\n            currentStageEnd = 0;\n        }\n        currentDifficulty = 0;\n    }\n\n    //this reward is for mining COKE by playing game using ETH\n    function betReward(address _account, uint256 _amount) public mintPermission returns (uint256 minted){\n        if (remain == 0) {\n            return 0;\n        }\n\n        uint256 input = _amount;\n        uint256 totalMint = 0;\n        while (input > 0) {\n\n            uint256 factor = 2 ** currentDifficulty;\n            uint256 discount = input.div(factor);\n            //we ceil it here\n            if (input.mod(factor) != 0) {\n                discount = discount.add(1);\n            }\n\n            if (discount > remain.sub(currentStageEnd)) {\n                uint256 toMint = remain.sub(currentStageEnd);\n                totalMint = totalMint.add(toMint);\n                input = input.sub(toMint.mul(factor));\n                //remain = remain.sub(toMint);\n                remain = currentStageEnd;\n            } else {\n                totalMint = totalMint.add(discount);\n                input = 0;\n                remain = remain.sub(discount);\n            }\n\n            //update to next stage\n            if (remain <= currentStageEnd) {\n                if (currentStageEnd != 0) {\n                    currentDifficulty = currentDifficulty.add(1);\n                    if (remain.sub(step) > 0) {\n                        currentStageEnd = remain.sub(step);\n                    } else {\n                        currentStageEnd = 0;\n                    }\n                } else {\n                    //all cokes are minted, we can't do any more further\n                    //set input to 0 to escape\n                    input = 0;\n                }\n            }\n        }\n        //_mint(_account, totalMint);\n        _transfer(address(this), _account, totalMint);\n        emit Reward(_account, totalMint, _amount);\n\n        //uint256 mintToTeam = totalMint / unlockRate;\n        uint256 mintToTeam = totalMint.mul(unlockDenominator).div(unlockNumerator);\n        if (teamRemain >= mintToTeam) {\n            teamRemain = teamRemain.sub(mintToTeam);\n            //_mint(team, mintToTeam);\n            _transfer(address(this), team, mintToTeam);\n            emit UnlockToTeam(team, mintToTeam, totalMint);\n        } else {\n            mintToTeam = teamRemain;\n            teamRemain = 0;\n            _transfer(address(this), team, mintToTeam);\n            emit UnlockToTeam(team, mintToTeam, totalMint);\n        }\n\n        return totalMint;\n    }\n\n    function activateGameMachine(address _input) public onlyCokeAdmin {\n        gameMachineRecords[_input] = true;\n        emit PermitGameMachine(_input, true);\n    }\n\n    function deactivateGameMachine(address _input) public onlyCokeAdmin {\n        gameMachineRecords[_input] = false;\n        emit PermitGameMachine(_input, false);\n    }\n\n    function unlockAllTeamCoke() public onlyCokeAdmin {\n        if (block.number > unlockAllBlockNumber) {\n            _transfer(address(this), team, teamRemain);\n            teamRemain = 0;\n            emit UnlockToTeam(team, teamRemain, 0);\n        }\n    }\n\n    modifier onlyCokeAdmin(){\n        rUtils.requireCode(msg.sender == cokeAdmin ? 0 : 503);\n        _;\n    }\n\n    /*modifier burnPermission(){\n        rUtils.requireCode(msg.sender == address(lottery) ? 0 : 504);\n        _;\n    }*/\n\n    modifier mintPermission(){\n        rUtils.requireCode(gameMachineRecords[msg.sender] == true ? 0 : 505);\n        _;\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000e116d2186f093e1bb3fb83864260d3b8ee26e7c400000000000000000000000078caac9bfa4f3a2866898016bf1fc4a2fb77ff42000000000000000000000000d090ea30bb4b9cd4df7c658ad74442dcf14078730000000000000000000000000000000000000000000000000000000000b478210000000000000000000000002a0a9592120c9c7b95f9b7531db36804890acf66"
}