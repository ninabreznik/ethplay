{
  "address": "0x23d33c46f64ef9afec6a19e7ad758e99c87ae129",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RequestERC20",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-22\n*/\n\npragma solidity ^0.4.23;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n * @dev SafeMath adapted for uint96\n */\nlibrary SafeMathUint96 {\n  function mul(uint96 a, uint96 b) internal pure returns (uint96) {\n    uint96 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint96 a, uint96 b) internal pure returns (uint96) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint96 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint96 a, uint96 b) internal pure returns (uint96) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint96 a, uint96 b) internal pure returns (uint96) {\n    uint96 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n * @dev SafeMath adapted for uint8\n */\nlibrary SafeMathUint8 {\n  function mul(uint8 a, uint8 b) internal pure returns (uint8) {\n    uint8 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint8 a, uint8 b) internal pure returns (uint8) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint8 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint8 a, uint8 b) internal pure returns (uint8) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint8 a, uint8 b) internal pure returns (uint8) {\n    uint8 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title SafeMathInt\n * @dev Math operations with safety checks that throw on error\n * @dev SafeMath adapted for int256\n */\nlibrary SafeMathInt {\n  function mul(int256 a, int256 b) internal pure returns (int256) {\n    // Prevent overflow when multiplying INT256_MIN with -1\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\n    assert(!(a == - 2**255 && b == -1) && !(b == - 2**255 && a == -1));\n\n    int256 c = a * b;\n    assert((b == 0) || (c / b == a));\n    return c;\n  }\n\n  function div(int256 a, int256 b) internal pure returns (int256) {\n    // Prevent overflow when dividing INT256_MIN by -1\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\n    assert(!(a == - 2**255 && b == -1));\n\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    int256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(int256 a, int256 b) internal pure returns (int256) {\n    assert((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\n\n    return a - b;\n  }\n\n  function add(int256 a, int256 b) internal pure returns (int256) {\n    int256 c = a + b;\n    assert((b >= 0 && c >= a) || (b < 0 && c < a));\n    return c;\n  }\n\n  function toUint256Safe(int256 a) internal pure returns (uint256) {\n    assert(a>=0);\n    return uint256(a);\n  }\n}\n\n// From https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\n    int256 b = int256(a);\n    assert(b >= 0);\n    return b;\n  }\n}\n\n\n/**\n * @title Bytes util library.\n * @notice Collection of utility functions to manipulate bytes for Request.\n */\nlibrary Bytes {\n    /**\n     * @notice Extracts an address in a bytes.\n     * @param data bytes from where the address will be extract\n     * @param offset position of the first byte of the address\n     * @return address\n     */\n    function extractAddress(bytes data, uint offset)\n        internal\n        pure\n        returns (address m) \n    {\n        require(offset >= 0 && offset + 20 <= data.length, \"offset value should be in the correct range\");\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            m := and(\n                mload(add(data, add(20, offset))), \n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            )\n        }\n    }\n\n    /**\n     * @notice Extract a bytes32 from a bytes.\n     * @param data bytes from where the bytes32 will be extract\n     * @param offset position of the first byte of the bytes32\n     * @return address\n     */\n    function extractBytes32(bytes data, uint offset)\n        internal\n        pure\n        returns (bytes32 bs)\n    {\n        require(offset >= 0 && offset + 32 <= data.length, \"offset value should be in the correct range\");\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            bs := mload(add(data, add(32, offset)))\n        }\n    }\n\n    /**\n     * @notice Modifies 20 bytes in a bytes.\n     * @param data bytes to modify\n     * @param offset position of the first byte to modify\n     * @param b bytes20 to insert\n     * @return address\n     */\n    function updateBytes20inBytes(bytes data, uint offset, bytes20 b)\n        internal\n        pure\n    {\n        require(offset >= 0 && offset + 20 <= data.length, \"offset value should be in the correct range\");\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            let m := mload(add(data, add(20, offset)))\n            m := and(m, 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000)\n            m := or(m, div(b, 0x1000000000000000000000000))\n            mstore(add(data, add(20, offset)), m)\n        }\n    }\n\n    /**\n     * @notice Extracts a string from a bytes. Extracts a sub-part from the bytes and convert it to string.\n     * @param data bytes from where the string will be extracted\n     * @param size string size to extract\n     * @param _offset position of the first byte of the string in bytes\n     * @return string\n     */ \n    function extractString(bytes data, uint8 size, uint _offset) \n        internal \n        pure \n        returns (string) \n    {\n        bytes memory bytesString = new bytes(size);\n        for (uint j = 0; j < size; j++) {\n            bytesString[j] = data[_offset+j];\n        }\n        return string(bytesString);\n    }\n}\n\n/**\n * @title Request Signature util library.\n * @notice Collection of utility functions to handle Request signatures.\n */\nlibrary Signature {\n    using SafeMath for uint256;\n    using SafeMathInt for int256;\n    using SafeMathUint8 for uint8;\n\n    /**\n     * @notice Checks the validity of a signed request & the expiration date.\n     * @param requestData bytes containing all the data packed :\n            address(creator)\n            address(payer)\n            uint8(number_of_payees)\n            [\n                address(main_payee_address)\n                int256(main_payee_expected_amount)\n                address(second_payee_address)\n                int256(second_payee_expected_amount)\n                ...\n            ]\n            uint8(data_string_size)\n            size(data)\n     * @param payeesPaymentAddress array of payees payment addresses (the index 0 will be the payee the others are subPayees)\n     * @param expirationDate timestamp after that the signed request cannot be broadcasted\n     * @param signature ECDSA signature containing v, r and s as bytes\n     *\n     * @return Validity of order signature.\n     */\t\n    function checkRequestSignature(\n        bytes \t\trequestData,\n        address[] \tpayeesPaymentAddress,\n        uint256 \texpirationDate,\n        bytes \t\tsignature)\n        internal\n        view\n        returns (bool)\n    {\n        bytes32 hash = getRequestHash(requestData, payeesPaymentAddress, expirationDate);\n\n        // extract \"v, r, s\" from the signature\n        uint8 v = uint8(signature[64]);\n        v = v < 27 ? v.add(27) : v;\n        bytes32 r = Bytes.extractBytes32(signature, 0);\n        bytes32 s = Bytes.extractBytes32(signature, 32);\n\n        // check signature of the hash with the creator address\n        return isValidSignature(\n            Bytes.extractAddress(requestData, 0),\n            hash,\n            v,\n            r,\n            s\n        );\n    }\n\n    /**\n     * @notice Checks the validity of a Bitcoin signed request & the expiration date.\n     * @param requestData bytes containing all the data packed :\n            address(creator)\n            address(payer)\n            uint8(number_of_payees)\n            [\n                address(main_payee_address)\n                int256(main_payee_expected_amount)\n                address(second_payee_address)\n                int256(second_payee_expected_amount)\n                ...\n            ]\n            uint8(data_string_size)\n            size(data)\n     * @param payeesPaymentAddress array of payees payment addresses (the index 0 will be the payee the others are subPayees)\n     * @param expirationDate timestamp after that the signed request cannot be broadcasted\n     * @param signature ECDSA signature containing v, r and s as bytes\n     *\n     * @return Validity of order signature.\n     */\t\n    function checkBtcRequestSignature(\n        bytes \t\trequestData,\n        bytes \t    payeesPaymentAddress,\n        uint256 \texpirationDate,\n        bytes \t\tsignature)\n        internal\n        view\n        returns (bool)\n    {\n        bytes32 hash = getBtcRequestHash(requestData, payeesPaymentAddress, expirationDate);\n\n        // extract \"v, r, s\" from the signature\n        uint8 v = uint8(signature[64]);\n        v = v < 27 ? v.add(27) : v;\n        bytes32 r = Bytes.extractBytes32(signature, 0);\n        bytes32 s = Bytes.extractBytes32(signature, 32);\n\n        // check signature of the hash with the creator address\n        return isValidSignature(\n            Bytes.extractAddress(requestData, 0),\n            hash,\n            v,\n            r,\n            s\n        );\n    }\n    \n    /**\n     * @notice Calculates the Keccak-256 hash of a BTC request with specified parameters.\n     *\n     * @param requestData bytes containing all the data packed\n     * @param payeesPaymentAddress array of payees payment addresses\n     * @param expirationDate timestamp after what the signed request cannot be broadcasted\n     *\n     * @return Keccak-256 hash of (this, requestData, payeesPaymentAddress, expirationDate)\n     */\n    function getBtcRequestHash(\n        bytes \t\trequestData,\n        bytes \tpayeesPaymentAddress,\n        uint256 \texpirationDate)\n        private\n        view\n        returns(bytes32)\n    {\n        return keccak256(\n            abi.encodePacked(\n                this,\n                requestData,\n                payeesPaymentAddress,\n                expirationDate\n            )\n        );\n    }\n\n    /**\n     * @dev Calculates the Keccak-256 hash of a (not BTC) request with specified parameters.\n     *\n     * @param requestData bytes containing all the data packed\n     * @param payeesPaymentAddress array of payees payment addresses\n     * @param expirationDate timestamp after what the signed request cannot be broadcasted\n     *\n     * @return Keccak-256 hash of (this, requestData, payeesPaymentAddress, expirationDate)\n     */\n    function getRequestHash(\n        bytes \t\trequestData,\n        address[] \tpayeesPaymentAddress,\n        uint256 \texpirationDate)\n        private\n        view\n        returns(bytes32)\n    {\n        return keccak256(\n            abi.encodePacked(\n                this,\n                requestData,\n                payeesPaymentAddress,\n                expirationDate\n            )\n        );\n    }\n    \n    /**\n     * @notice Verifies that a hash signature is valid. 0x style.\n     * @param signer address of signer.\n     * @param hash Signed Keccak-256 hash.\n     * @param v ECDSA signature parameter v.\n     * @param r ECDSA signature parameters r.\n     * @param s ECDSA signature parameters s.\n     * @return Validity of order signature.\n     */\n    function isValidSignature(\n        address signer,\n        bytes32 hash,\n        uint8 \tv,\n        bytes32 r,\n        bytes32 s)\n        private\n        pure\n        returns (bool)\n    {\n        return signer == ecrecover(\n            keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)),\n            v,\n            r,\n            s\n        );\n    }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n/**\n * @title FeeCollector\n *\n * @notice FeeCollector is a contract managing the fees for currency contracts\n */\ncontract FeeCollector is Ownable {\n    using SafeMath for uint256;\n\n    uint256 public rateFeesNumerator;\n    uint256 public rateFeesDenominator;\n    uint256 public maxFees;\n\n    // address of the contract that will burn req token\n    address public requestBurnerContract;\n\n    event UpdateRateFees(uint256 rateFeesNumerator, uint256 rateFeesDenominator);\n    event UpdateMaxFees(uint256 maxFees);\n\n    /**\n     * @param _requestBurnerContract Address of the contract where to send the ether.\n     * This burner contract will have a function that can be called by anyone and will exchange ether to req via Kyber and burn the REQ\n     */  \n    constructor(address _requestBurnerContract) \n        public\n    {\n        requestBurnerContract = _requestBurnerContract;\n    }\n\n    /**\n     * @notice Sets the fees rate.\n     * @dev if the _rateFeesDenominator is 0, it will be treated as 1. (in other words, the computation of the fees will not use it)\n     * @param _rateFeesNumerator \t\tnumerator rate\n     * @param _rateFeesDenominator \t\tdenominator rate\n     */  \n    function setRateFees(uint256 _rateFeesNumerator, uint256 _rateFeesDenominator)\n        external\n        onlyOwner\n    {\n        rateFeesNumerator = _rateFeesNumerator;\n        rateFeesDenominator = _rateFeesDenominator;\n        emit UpdateRateFees(rateFeesNumerator, rateFeesDenominator);\n    }\n\n    /**\n     * @notice Sets the maximum fees in wei.\n     * @param _newMaxFees new max\n     */  \n    function setMaxCollectable(uint256 _newMaxFees) \n        external\n        onlyOwner\n    {\n        maxFees = _newMaxFees;\n        emit UpdateMaxFees(maxFees);\n    }\n\n    /**\n     * @notice Set the request burner address.\n     * @param _requestBurnerContract address of the contract that will burn req token (probably through Kyber)\n     */  \n    function setRequestBurnerContract(address _requestBurnerContract) \n        external\n        onlyOwner\n    {\n        requestBurnerContract = _requestBurnerContract;\n    }\n\n    /**\n     * @notice Computes the fees.\n     * @param _expectedAmount amount expected for the request\n     * @return the expected amount of fees in wei\n     */  \n    function collectEstimation(int256 _expectedAmount)\n        public\n        view\n        returns(uint256)\n    {\n        if (_expectedAmount<0) {\n            return 0;\n        }\n\n        uint256 computedCollect = uint256(_expectedAmount).mul(rateFeesNumerator);\n\n        if (rateFeesDenominator != 0) {\n            computedCollect = computedCollect.div(rateFeesDenominator);\n        }\n\n        return computedCollect < maxFees ? computedCollect : maxFees;\n    }\n\n    /**\n     * @notice Sends fees to the request burning address.\n     * @param _amount amount to send to the burning address\n     */  \n    function collectForREQBurning(uint256 _amount)\n        internal\n    {\n        // .transfer throws on failure\n        requestBurnerContract.transfer(_amount);\n    }\n}\n\n\n\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        Unpause();\n    }\n}\n\n\n\n/**\n * @title Administrable\n * @notice Base contract for the administration of Core. Handles whitelisting of currency contracts\n */\ncontract Administrable is Pausable {\n\n    // mapping of address of trusted contract\n    mapping(address => uint8) public trustedCurrencyContracts;\n\n    // Events of the system\n    event NewTrustedContract(address newContract);\n    event RemoveTrustedContract(address oldContract);\n\n    /**\n     * @notice Adds a trusted currencyContract.\n     *\n     * @param _newContractAddress The address of the currencyContract\n     */\n    function adminAddTrustedCurrencyContract(address _newContractAddress)\n        external\n        onlyOwner\n    {\n        trustedCurrencyContracts[_newContractAddress] = 1; //Using int instead of boolean in case we need several states in the future.\n        emit NewTrustedContract(_newContractAddress);\n    }\n\n    /**\n     * @notice Removes a trusted currencyContract.\n     *\n     * @param _oldTrustedContractAddress The address of the currencyContract\n     */\n    function adminRemoveTrustedCurrencyContract(address _oldTrustedContractAddress)\n        external\n        onlyOwner\n    {\n        require(trustedCurrencyContracts[_oldTrustedContractAddress] != 0, \"_oldTrustedContractAddress should not be 0\");\n        trustedCurrencyContracts[_oldTrustedContractAddress] = 0;\n        emit RemoveTrustedContract(_oldTrustedContractAddress);\n    }\n\n    /**\n     * @notice Gets the status of a trusted currencyContract .\n     * @dev Not used today, useful if we have several states in the future.\n     *\n     * @param _contractAddress The address of the currencyContract\n     * @return The status of the currencyContract. If trusted 1, otherwise 0\n     */\n    function getStatusContract(address _contractAddress)\n        external\n        view\n        returns(uint8) \n    {\n        return trustedCurrencyContracts[_contractAddress];\n    }\n\n    /**\n     * @notice Checks if a currencyContract is trusted.\n     *\n     * @param _contractAddress The address of the currencyContract\n     * @return bool true if contract is trusted\n     */\n    function isTrustedContract(address _contractAddress)\n        public\n        view\n        returns(bool)\n    {\n        return trustedCurrencyContracts[_contractAddress] == 1;\n    }\n}\n\n\n/**\n * @title RequestCore\n *\n * @notice The Core is the main contract which stores all the requests.\n *\n * @dev The Core philosophy is to be as much flexible as possible to adapt in the future to any new system\n * @dev All the important conditions and an important part of the business logic takes place in the currency contracts.\n * @dev Requests can only be created in the currency contracts\n * @dev Currency contracts have to be allowed by the Core and respect the business logic.\n * @dev Request Network will develop one currency contracts per currency and anyone can creates its own currency contracts.\n */\ncontract RequestCore is Administrable {\n    using SafeMath for uint256;\n    using SafeMathUint96 for uint96;\n    using SafeMathInt for int256;\n    using SafeMathUint8 for uint8;\n\n    enum State { Created, Accepted, Canceled }\n\n    struct Request {\n        // ID address of the payer\n        address payer;\n\n        // Address of the contract managing the request\n        address currencyContract;\n\n        // State of the request\n        State state;\n\n        // Main payee\n        Payee payee;\n    }\n\n    // Structure for the payees. A sub payee is an additional entity which will be paid during the processing of the invoice.\n    // ex: can be used for routing taxes or fees at the moment of the payment.\n    struct Payee {\n        // ID address of the payee\n        address addr;\n\n        // amount expected for the payee. \n        // Not uint for evolution (may need negative amounts one day), and simpler operations\n        int256 expectedAmount;\n\n        // balance of the payee\n        int256 balance;\n    }\n\n    // Count of request in the mapping. A maximum of 2^96 requests can be created per Core contract.\n    // Integer, incremented for each request of a Core contract, starting from 0\n    // RequestId (256bits) = contract address (160bits) + numRequest\n    uint96 public numRequests; \n    \n    // Mapping of all the Requests. The key is the request ID.\n    // not anymore public to avoid \"UnimplementedFeatureError: Only in-memory reference type can be stored.\"\n    // https://github.com/ethereum/solidity/issues/3577\n    mapping(bytes32 => Request) requests;\n\n    // Mapping of subPayees of the requests. The key is the request ID.\n    // This array is outside the Request structure to optimize the gas cost when there is only 1 payee.\n    mapping(bytes32 => Payee[256]) public subPayees;\n\n    /*\n     *  Events \n     */\n    event Created(bytes32 indexed requestId, address indexed payee, address indexed payer, address creator, string data);\n    event Accepted(bytes32 indexed requestId);\n    event Canceled(bytes32 indexed requestId);\n\n    // Event for Payee & subPayees\n    // Separated from the Created Event to allow a 4th indexed parameter (subpayees)\n    event NewSubPayee(bytes32 indexed requestId, address indexed payee); \n    event UpdateExpectedAmount(bytes32 indexed requestId, uint8 payeeIndex, int256 deltaAmount);\n    event UpdateBalance(bytes32 indexed requestId, uint8 payeeIndex, int256 deltaAmount);\n\n    /**\n     * @notice Function used by currency contracts to create a request in the Core.\n     *\n     * @dev _payees and _expectedAmounts must have the same size.\n     *\n     * @param _creator Request creator. The creator is the one who initiated the request (create or sign) and not necessarily the one who broadcasted it\n     * @param _payees array of payees address (the index 0 will be the payee the others are subPayees). Size must be smaller than 256.\n     * @param _expectedAmounts array of Expected amount to be received by each payees. Must be in same order than the payees. Size must be smaller than 256.\n     * @param _payer Entity expected to pay\n     * @param _data data of the request\n     * @return Returns the id of the request\n     */\n    function createRequest(\n        address     _creator,\n        address[]   _payees,\n        int256[]    _expectedAmounts,\n        address     _payer,\n        string      _data)\n        external\n        whenNotPaused \n        returns (bytes32 requestId) \n    {\n        // creator must not be null\n        require(_creator != 0, \"creator should not be 0\"); // not as modifier to lighten the stack\n        // call must come from a trusted contract\n        require(isTrustedContract(msg.sender), \"caller should be a trusted contract\"); // not as modifier to lighten the stack\n\n        // Generate the requestId\n        requestId = generateRequestId();\n\n        address mainPayee;\n        int256 mainExpectedAmount;\n        // extract the main payee if filled\n        if (_payees.length!=0) {\n            mainPayee = _payees[0];\n            mainExpectedAmount = _expectedAmounts[0];\n        }\n\n        // Store the new request\n        requests[requestId] = Request(\n            _payer,\n            msg.sender,\n            State.Created,\n            Payee(\n                mainPayee,\n                mainExpectedAmount,\n                0\n            )\n        );\n\n        // Declare the new request\n        emit Created(\n            requestId,\n            mainPayee,\n            _payer,\n            _creator,\n            _data\n        );\n        \n        // Store and declare the sub payees (needed in internal function to avoid \"stack too deep\")\n        initSubPayees(requestId, _payees, _expectedAmounts);\n\n        return requestId;\n    }\n\n    /**\n     * @notice Function used by currency contracts to create a request in the Core from bytes.\n     * @dev Used to avoid receiving a stack too deep error when called from a currency contract with too many parameters.\n     * @dev Note that to optimize the stack size and the gas cost we do not extract the params and store them in the stack. As a result there is some code redundancy\n     * @param _data bytes containing all the data packed :\n            address(creator)\n            address(payer)\n            uint8(number_of_payees)\n            [\n                address(main_payee_address)\n                int256(main_payee_expected_amount)\n                address(second_payee_address)\n                int256(second_payee_expected_amount)\n                ...\n            ]\n            uint8(data_string_size)\n            size(data)\n     * @return Returns the id of the request \n     */ \n    function createRequestFromBytes(bytes _data) \n        external\n        whenNotPaused \n        returns (bytes32 requestId) \n    {\n        // call must come from a trusted contract\n        require(isTrustedContract(msg.sender), \"caller should be a trusted contract\"); // not as modifier to lighten the stack\n\n        // extract address creator & payer\n        address creator = extractAddress(_data, 0);\n\n        address payer = extractAddress(_data, 20);\n\n        // creator must not be null\n        require(creator!=0, \"creator should not be 0\");\n        \n        // extract the number of payees\n        uint8 payeesCount = uint8(_data[40]);\n\n        // get the position of the dataSize in the byte (= number_of_payees * (address_payee_size + int256_payee_size) + address_creator_size + address_payer_size + payees_count_size\n        //                                              (= number_of_payees * (20+32) + 20 + 20 + 1 )\n        uint256 offsetDataSize = uint256(payeesCount).mul(52).add(41);\n\n        // extract the data size and then the data itself\n        uint8 dataSize = uint8(_data[offsetDataSize]);\n        string memory dataStr = extractString(_data, dataSize, offsetDataSize.add(1));\n\n        address mainPayee;\n        int256 mainExpectedAmount;\n        // extract the main payee if possible\n        if (payeesCount!=0) {\n            mainPayee = extractAddress(_data, 41);\n            mainExpectedAmount = int256(extractBytes32(_data, 61));\n        }\n\n        // Generate the requestId\n        requestId = generateRequestId();\n\n        // Store the new request\n        requests[requestId] = Request(\n            payer,\n            msg.sender,\n            State.Created,\n            Payee(\n                mainPayee,\n                mainExpectedAmount,\n                0\n            )\n        );\n\n        // Declare the new request\n        emit Created(\n            requestId,\n            mainPayee,\n            payer,\n            creator,\n            dataStr\n        );\n\n        // Store and declare the sub payees\n        for (uint8 i = 1; i < payeesCount; i = i.add(1)) {\n            address subPayeeAddress = extractAddress(_data, uint256(i).mul(52).add(41));\n\n            // payees address cannot be 0x0\n            require(subPayeeAddress != 0, \"subpayee should not be 0\");\n\n            subPayees[requestId][i-1] = Payee(subPayeeAddress, int256(extractBytes32(_data, uint256(i).mul(52).add(61))), 0);\n            emit NewSubPayee(requestId, subPayeeAddress);\n        }\n\n        return requestId;\n    }\n\n    /**\n     * @notice Function used by currency contracts to accept a request in the Core.\n     * @dev callable only by the currency contract of the request\n     * @param _requestId Request id\n     */ \n    function accept(bytes32 _requestId) \n        external\n    {\n        Request storage r = requests[_requestId];\n        require(r.currencyContract == msg.sender, \"caller should be the currency contract of the request\"); \n        r.state = State.Accepted;\n        emit Accepted(_requestId);\n    }\n\n    /**\n     * @notice Function used by currency contracts to cancel a request in the Core. Several reasons can lead to cancel a request, see request life cycle for more info.\n     * @dev callable only by the currency contract of the request.\n     * @param _requestId Request id\n     */ \n    function cancel(bytes32 _requestId)\n        external\n    {\n        Request storage r = requests[_requestId];\n        require(r.currencyContract == msg.sender, \"caller should be the currency contract of the request\"); \n        r.state = State.Canceled;\n        emit Canceled(_requestId);\n    }   \n\n    /**\n     * @notice Function used to update the balance.\n     * @dev callable only by the currency contract of the request.\n     * @param _requestId Request id\n     * @param _payeeIndex index of the payee (0 = main payee)\n     * @param _deltaAmount modifier amount\n     */ \n    function updateBalance(bytes32 _requestId, uint8 _payeeIndex, int256 _deltaAmount)\n        external\n    {   \n        Request storage r = requests[_requestId];\n        require(r.currencyContract == msg.sender, \"caller should be the currency contract of the request\"); \n\n        if ( _payeeIndex == 0 ) {\n            // modify the main payee\n            r.payee.balance = r.payee.balance.add(_deltaAmount);\n        } else {\n            // modify the sub payee\n            Payee storage sp = subPayees[_requestId][_payeeIndex-1];\n            sp.balance = sp.balance.add(_deltaAmount);\n        }\n        emit UpdateBalance(_requestId, _payeeIndex, _deltaAmount);\n    }\n\n    /**\n     * @notice Function update the expectedAmount adding additional or subtract.\n     * @dev callable only by the currency contract of the request.\n     * @param _requestId Request id\n     * @param _payeeIndex index of the payee (0 = main payee)\n     * @param _deltaAmount modifier amount\n     */ \n    function updateExpectedAmount(bytes32 _requestId, uint8 _payeeIndex, int256 _deltaAmount)\n        external\n    {   \n        Request storage r = requests[_requestId];\n        require(r.currencyContract == msg.sender, \"caller should be the currency contract of the request\");  \n\n        if ( _payeeIndex == 0 ) {\n            // modify the main payee\n            r.payee.expectedAmount = r.payee.expectedAmount.add(_deltaAmount);    \n        } else {\n            // modify the sub payee\n            Payee storage sp = subPayees[_requestId][_payeeIndex-1];\n            sp.expectedAmount = sp.expectedAmount.add(_deltaAmount);\n        }\n        emit UpdateExpectedAmount(_requestId, _payeeIndex, _deltaAmount);\n    }\n\n    /**\n     * @notice Gets a request.\n     * @param _requestId Request id\n     * @return request as a tuple : (address payer, address currencyContract, State state, address payeeAddr, int256 payeeExpectedAmount, int256 payeeBalance)\n     */ \n    function getRequest(bytes32 _requestId) \n        external\n        view\n        returns(address payer, address currencyContract, State state, address payeeAddr, int256 payeeExpectedAmount, int256 payeeBalance)\n    {\n        Request storage r = requests[_requestId];\n        return (\n            r.payer,\n            r.currencyContract,\n            r.state,\n            r.payee.addr,\n            r.payee.expectedAmount,\n            r.payee.balance\n        );\n    }\n\n    /**\n     * @notice Gets address of a payee.\n     * @param _requestId Request id\n     * @param _payeeIndex payee index (0 = main payee)\n     * @return payee address\n     */ \n    function getPayeeAddress(bytes32 _requestId, uint8 _payeeIndex)\n        public\n        view\n        returns(address)\n    {\n        if (_payeeIndex == 0) {\n            return requests[_requestId].payee.addr;\n        } else {\n            return subPayees[_requestId][_payeeIndex-1].addr;\n        }\n    }\n\n    /**\n     * @notice Gets payer of a request.\n     * @param _requestId Request id\n     * @return payer address\n     */ \n    function getPayer(bytes32 _requestId)\n        public\n        view\n        returns(address)\n    {\n        return requests[_requestId].payer;\n    }\n\n    /**\n     * @notice Gets amount expected of a payee.\n     * @param _requestId Request id\n     * @param _payeeIndex payee index (0 = main payee)\n     * @return amount expected\n     */     \n    function getPayeeExpectedAmount(bytes32 _requestId, uint8 _payeeIndex)\n        public\n        view\n        returns(int256)\n    {\n        if (_payeeIndex == 0) {\n            return requests[_requestId].payee.expectedAmount;\n        } else {\n            return subPayees[_requestId][_payeeIndex-1].expectedAmount;\n        }\n    }\n\n    /**\n     * @notice Gets number of subPayees for a request.\n     * @param _requestId Request id\n     * @return number of subPayees\n     */     \n    function getSubPayeesCount(bytes32 _requestId)\n        public\n        view\n        returns(uint8)\n    {\n        // solium-disable-next-line no-empty-blocks\n        for (uint8 i = 0; subPayees[_requestId][i].addr != address(0); i = i.add(1)) {}\n        return i;\n    }\n\n    /**\n     * @notice Gets currencyContract of a request.\n     * @param _requestId Request id\n     * @return currencyContract address\n     */\n    function getCurrencyContract(bytes32 _requestId)\n        public\n        view\n        returns(address)\n    {\n        return requests[_requestId].currencyContract;\n    }\n\n    /**\n     * @notice Gets balance of a payee.\n     * @param _requestId Request id\n     * @param _payeeIndex payee index (0 = main payee)\n     * @return balance\n     */     \n    function getPayeeBalance(bytes32 _requestId, uint8 _payeeIndex)\n        public\n        view\n        returns(int256)\n    {\n        if (_payeeIndex == 0) {\n            return requests[_requestId].payee.balance;    \n        } else {\n            return subPayees[_requestId][_payeeIndex-1].balance;\n        }\n    }\n\n    /**\n     * @notice Gets balance total of a request.\n     * @param _requestId Request id\n     * @return balance\n     */     \n    function getBalance(bytes32 _requestId)\n        public\n        view\n        returns(int256)\n    {\n        int256 balance = requests[_requestId].payee.balance;\n\n        for (uint8 i = 0; subPayees[_requestId][i].addr != address(0); i = i.add(1)) {\n            balance = balance.add(subPayees[_requestId][i].balance);\n        }\n\n        return balance;\n    }\n\n    /**\n     * @notice Checks if all the payees balances are null.\n     * @param _requestId Request id\n     * @return true if all the payees balances are equals to 0\n     */     \n    function areAllBalanceNull(bytes32 _requestId)\n        public\n        view\n        returns(bool isNull)\n    {\n        isNull = requests[_requestId].payee.balance == 0;\n\n        for (uint8 i = 0; isNull && subPayees[_requestId][i].addr != address(0); i = i.add(1)) {\n            isNull = subPayees[_requestId][i].balance == 0;\n        }\n\n        return isNull;\n    }\n\n    /**\n     * @notice Gets total expectedAmount of a request.\n     * @param _requestId Request id\n     * @return balance\n     */     \n    function getExpectedAmount(bytes32 _requestId)\n        public\n        view\n        returns(int256)\n    {\n        int256 expectedAmount = requests[_requestId].payee.expectedAmount;\n\n        for (uint8 i = 0; subPayees[_requestId][i].addr != address(0); i = i.add(1)) {\n            expectedAmount = expectedAmount.add(subPayees[_requestId][i].expectedAmount);\n        }\n\n        return expectedAmount;\n    }\n\n    /**\n     * @notice Gets state of a request.\n     * @param _requestId Request id\n     * @return state\n     */ \n    function getState(bytes32 _requestId)\n        public\n        view\n        returns(State)\n    {\n        return requests[_requestId].state;\n    }\n\n    /**\n     * @notice Gets address of a payee.\n     * @param _requestId Request id\n     * @return payee index (0 = main payee) or -1 if not address not found\n     */\n    function getPayeeIndex(bytes32 _requestId, address _address)\n        public\n        view\n        returns(int16)\n    {\n        // return 0 if main payee\n        if (requests[_requestId].payee.addr == _address) {\n            return 0;\n        }\n\n        for (uint8 i = 0; subPayees[_requestId][i].addr != address(0); i = i.add(1)) {\n            if (subPayees[_requestId][i].addr == _address) {\n                // if found return subPayee index + 1 (0 is main payee)\n                return i+1;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * @notice Extracts a bytes32 from a bytes.\n     * @param _data bytes from where the bytes32 will be extract\n     * @param offset position of the first byte of the bytes32\n     * @return address\n     */\n    function extractBytes32(bytes _data, uint offset)\n        public\n        pure\n        returns (bytes32 bs)\n    {\n        require(offset >= 0 && offset + 32 <= _data.length, \"offset value should be in the correct range\");\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            bs := mload(add(_data, add(32, offset)))\n        }\n    }\n\n    /**\n     * @notice Transfers to owner any tokens send by mistake on this contracts.\n     * @param token The address of the token to transfer.\n     * @param amount The amount to be transfered.\n     */\n    function emergencyERC20Drain(ERC20 token, uint amount )\n        public\n        onlyOwner \n    {\n        token.transfer(owner, amount);\n    }\n\n    /**\n     * @notice Extracts an address from a bytes at a given position.\n     * @param _data bytes from where the address will be extract\n     * @param offset position of the first byte of the address\n     * @return address\n     */\n    function extractAddress(bytes _data, uint offset)\n        internal\n        pure\n        returns (address m)\n    {\n        require(offset >= 0 && offset + 20 <= _data.length, \"offset value should be in the correct range\");\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            m := and( mload(add(_data, add(20, offset))), \n                      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n    }\n    \n    /**\n     * @dev Internal: Init payees for a request (needed to avoid 'stack too deep' in createRequest()).\n     * @param _requestId Request id\n     * @param _payees array of payees address\n     * @param _expectedAmounts array of payees initial expected amounts\n     */ \n    function initSubPayees(bytes32 _requestId, address[] _payees, int256[] _expectedAmounts)\n        internal\n    {\n        require(_payees.length == _expectedAmounts.length, \"payee length should equal expected amount length\");\n     \n        for (uint8 i = 1; i < _payees.length; i = i.add(1)) {\n            // payees address cannot be 0x0\n            require(_payees[i] != 0, \"payee should not be 0\");\n            subPayees[_requestId][i-1] = Payee(_payees[i], _expectedAmounts[i], 0);\n            emit NewSubPayee(_requestId, _payees[i]);\n        }\n    }\n\n    /**\n     * @notice Extracts a string from a bytes. Extracts a sub-part from tha bytes and convert it to string.\n     * @param data bytes from where the string will be extracted\n     * @param size string size to extract\n     * @param _offset position of the first byte of the string in bytes\n     * @return string\n     */ \n    function extractString(bytes data, uint8 size, uint _offset) \n        internal \n        pure \n        returns (string) \n    {\n        bytes memory bytesString = new bytes(size);\n        for (uint j = 0; j < size; j++) {\n            bytesString[j] = data[_offset+j];\n        }\n        return string(bytesString);\n    }\n\n    /**\n     * @notice Generates a new unique requestId.\n     * @return a bytes32 requestId \n     */ \n    function generateRequestId()\n        internal\n        returns (bytes32)\n    {\n        // Update numRequest\n        numRequests = numRequests.add(1);\n        // requestId = ADDRESS_CONTRACT_CORE + numRequests (0xADRRESSCONTRACT00000NUMREQUEST)\n        return bytes32((uint256(this) << 96).add(numRequests));\n    }\n}\n\n\n/**\n * @title CurrencyContract\n *\n * @notice CurrencyContract is the base for currency contracts. To add a currency to the Request Protocol, create a new currencyContract that inherits from it.\n * @dev If currency contract is whitelisted by core & unpaused: All actions possible\n * @dev If currency contract is not Whitelisted by core & unpaused: Creation impossible, other actions possible\n * @dev If currency contract is paused: Nothing possible\n *\n * Functions that can be implemented by the currency contracts:\n *  - createRequestAsPayeeAction\n *  - createRequestAsPayerAction\n *  - broadcastSignedRequestAsPayer\n *  - paymentActionPayable\n *  - paymentAction\n *  - accept\n *  - cancel\n *  - refundAction\n *  - subtractAction\n *  - additionalAction\n */\ncontract CurrencyContract is Pausable, FeeCollector {\n    using SafeMath for uint256;\n    using SafeMathInt for int256;\n    using SafeMathUint8 for uint8;\n\n    RequestCore public requestCore;\n\n    /**\n     * @param _requestCoreAddress Request Core address\n     */\n    constructor(address _requestCoreAddress, address _addressBurner) \n        FeeCollector(_addressBurner)\n        public\n    {\n        requestCore = RequestCore(_requestCoreAddress);\n    }\n\n    /**\n     * @notice Function to accept a request.\n     *\n     * @notice msg.sender must be _payer, The request must be in the state CREATED (not CANCELED, not ACCEPTED).\n     *\n     * @param _requestId id of the request\n     */\n    function acceptAction(bytes32 _requestId)\n        public\n        whenNotPaused\n        onlyRequestPayer(_requestId)\n    {\n        // only a created request can be accepted\n        require(requestCore.getState(_requestId) == RequestCore.State.Created, \"request should be created\");\n\n        // declare the acceptation in the core\n        requestCore.accept(_requestId);\n    }\n\n    /**\n     * @notice Function to cancel a request.\n     *\n     * @dev msg.sender must be the _payer or the _payee.\n     * @dev only request with balance equals to zero can be cancel.\n     *\n     * @param _requestId id of the request\n     */\n    function cancelAction(bytes32 _requestId)\n        public\n        whenNotPaused\n    {\n        // payer can cancel if request is just created\n        // payee can cancel when request is not canceled yet\n        require(\n            // solium-disable-next-line indentation\n            (requestCore.getPayer(_requestId) == msg.sender && requestCore.getState(_requestId) == RequestCore.State.Created) ||\n            (requestCore.getPayeeAddress(_requestId,0) == msg.sender && requestCore.getState(_requestId) != RequestCore.State.Canceled),\n            \"payer should cancel a newly created request, or payee should cancel a not cancel request\"\n        );\n\n        // impossible to cancel a Request with any payees balance != 0\n        require(requestCore.areAllBalanceNull(_requestId), \"all balanaces should be = 0 to cancel\");\n\n        // declare the cancellation in the core\n        requestCore.cancel(_requestId);\n    }\n\n    /**\n     * @notice Function to declare additionals.\n     *\n     * @dev msg.sender must be _payer.\n     * @dev the request must be accepted or created.\n     *\n     * @param _requestId id of the request\n     * @param _additionalAmounts amounts of additional to declare (index 0 is for main payee)\n     */\n    function additionalAction(bytes32 _requestId, uint256[] _additionalAmounts)\n        public\n        whenNotPaused\n        onlyRequestPayer(_requestId)\n    {\n\n        // impossible to make additional if request is canceled\n        require(requestCore.getState(_requestId) != RequestCore.State.Canceled, \"request should not be canceled\");\n\n        // impossible to declare more additionals than the number of payees\n        require(\n            _additionalAmounts.length <= requestCore.getSubPayeesCount(_requestId).add(1),\n            \"number of amounts should be <= number of payees\"\n        );\n\n        for (uint8 i = 0; i < _additionalAmounts.length; i = i.add(1)) {\n            // no need to declare a zero as additional \n            if (_additionalAmounts[i] != 0) {\n                // Store and declare the additional in the core\n                requestCore.updateExpectedAmount(_requestId, i, _additionalAmounts[i].toInt256Safe());\n            }\n        }\n    }\n\n    /**\n     * @notice Function to declare subtracts.\n     *\n     * @dev msg.sender must be _payee.\n     * @dev the request must be accepted or created.\n     *\n     * @param _requestId id of the request\n     * @param _subtractAmounts amounts of subtract to declare (index 0 is for main payee)\n     */\n    function subtractAction(bytes32 _requestId, uint256[] _subtractAmounts)\n        public\n        whenNotPaused\n        onlyRequestPayee(_requestId)\n    {\n        // impossible to make subtracts if request is canceled\n        require(requestCore.getState(_requestId) != RequestCore.State.Canceled, \"request should not be canceled\");\n\n        // impossible to declare more subtracts than the number of payees\n        require(\n            _subtractAmounts.length <= requestCore.getSubPayeesCount(_requestId).add(1),\n            \"number of amounts should be <= number of payees\"\n        );\n\n        for (uint8 i = 0; i < _subtractAmounts.length; i = i.add(1)) {\n            // no need to declare a zero as subtracts \n            if (_subtractAmounts[i] != 0) {\n                // subtract must be equal or lower than amount expected\n                require(\n                    requestCore.getPayeeExpectedAmount(_requestId,i) >= _subtractAmounts[i].toInt256Safe(),\n                    \"subtract should equal or be lower than amount expected\"\n                );\n\n                // Store and declare the subtract in the core\n                requestCore.updateExpectedAmount(_requestId, i, -_subtractAmounts[i].toInt256Safe());\n            }\n        }\n    }\n\n    /**\n     * @notice Base function for request creation.\n     *\n     * @dev msg.sender will be the creator.\n     *\n     * @param _payer Entity expected to pay\n     * @param _payeesIdAddress array of payees address (the index 0 will be the payee - must be msg.sender - the others are subPayees)\n     * @param _expectedAmounts array of Expected amount to be received by each payees\n     * @param _data Hash linking to additional data on the Request stored on IPFS\n     *\n     * @return Returns the id of the request and the collected fees\n     */\n    function createCoreRequestInternal(\n        address \t_payer,\n        address[] \t_payeesIdAddress,\n        int256[] \t_expectedAmounts,\n        string \t\t_data)\n        internal\n        whenNotPaused\n        returns(bytes32 requestId, uint256 collectedFees)\n    {\n        int256 totalExpectedAmounts = 0;\n        for (uint8 i = 0; i < _expectedAmounts.length; i = i.add(1)) {\n            // all expected amounts must be positive\n            require(_expectedAmounts[i] >= 0, \"expected amounts should be positive\");\n\n            // compute the total expected amount of the request\n            totalExpectedAmounts = totalExpectedAmounts.add(_expectedAmounts[i]);\n        }\n\n        // store request in the core\n        requestId = requestCore.createRequest(\n            msg.sender,\n            _payeesIdAddress,\n            _expectedAmounts,\n            _payer,\n            _data\n        );\n\n        // compute and send fees\n        collectedFees = collectEstimation(totalExpectedAmounts);\n        collectForREQBurning(collectedFees);\n    }\n\n    /**\n     * @notice Modifier to check if msg.sender is the main payee.\n     * @dev Revert if msg.sender is not the main payee.\n     * @param _requestId id of the request\n     */\t\n    modifier onlyRequestPayee(bytes32 _requestId)\n    {\n        require(requestCore.getPayeeAddress(_requestId, 0) == msg.sender, \"only the payee should do this action\");\n        _;\n    }\n\n    /**\n     * @notice Modifier to check if msg.sender is payer.\n     * @dev Revert if msg.sender is not payer.\n     * @param _requestId id of the request\n     */\t\n    modifier onlyRequestPayer(bytes32 _requestId)\n    {\n        require(requestCore.getPayer(_requestId) == msg.sender, \"only the payer should do this action\");\n        _;\n    }\n}\n\n\n/**\n * @title RequestERC20\n * @notice Currency contract managing the requests in ERC20 tokens.\n * @dev Requests can be created by the Payee with createRequestAsPayeeAction(), by the payer with createRequestAsPayerAction() or by the payer from a request signed offchain by the payee with broadcastSignedRequestAsPayer\n */\ncontract RequestERC20 is CurrencyContract {\n    using SafeMath for uint256;\n    using SafeMathInt for int256;\n    using SafeMathUint8 for uint8;\n\n    // payment addresses by requestId (optional). We separate the Identity of the payee/payer (in the core) and the wallet address in the currency contract\n    mapping(bytes32 => address[256]) public payeesPaymentAddress;\n    mapping(bytes32 => address) public payerRefundAddress;\n\n    // token address\n    ERC20 public erc20Token;\n\n    /**\n     * @param _requestCoreAddress Request Core address\n     * @param _requestBurnerAddress Request Burner contract address\n     * @param _erc20Token ERC20 token contract handled by this currency contract\n     */\n    constructor (address _requestCoreAddress, address _requestBurnerAddress, ERC20 _erc20Token) \n        CurrencyContract(_requestCoreAddress, _requestBurnerAddress)\n        public\n    {\n        erc20Token = _erc20Token;\n    }\n\n    /**\n     * @notice Function to create a request as payee.\n     *\n     * @dev msg.sender must be the main payee.\n     * @dev if _payeesPaymentAddress.length > _payeesIdAddress.length, the extra addresses will be stored but never used.\n     *\n     * @param _payeesIdAddress array of payees address (the index 0 will be the payee - must be msg.sender - the others are subPayees)\n     * @param _payeesPaymentAddress array of payees address for payment (optional)\n     * @param _expectedAmounts array of Expected amount to be received by each payees\n     * @param _payer Entity expected to pay\n     * @param _payerRefundAddress Address of refund for the payer (optional)\n     * @param _data Hash linking to additional data on the Request stored on IPFS\n     *\n     * @return Returns the id of the request\n     */\n    function createRequestAsPayeeAction(\n        address[] \t_payeesIdAddress,\n        address[] \t_payeesPaymentAddress,\n        int256[] \t_expectedAmounts,\n        address \t_payer,\n        address \t_payerRefundAddress,\n        string \t\t_data)\n        external\n        payable\n        whenNotPaused\n        returns(bytes32 requestId)\n    {\n        require(\n            msg.sender == _payeesIdAddress[0] && msg.sender != _payer && _payer != 0,\n            \"caller should be the payee\"\n        );\n\n        uint256 collectedFees;\n        (requestId, collectedFees) = createCoreRequestInternal(\n            _payer,\n            _payeesIdAddress,\n            _expectedAmounts,\n            _data\n        );\n        \n        // Additional check on the fees: they should be equal to the about of ETH sent\n        require(collectedFees == msg.value, \"fees should be the correct amout\");\n\n        // set payment addresses for payees\n        for (uint8 j = 0; j < _payeesPaymentAddress.length; j = j.add(1)) {\n            payeesPaymentAddress[requestId][j] = _payeesPaymentAddress[j];\n        }\n        // set payment address for payer\n        if (_payerRefundAddress != 0) {\n            payerRefundAddress[requestId] = _payerRefundAddress;\n        }\n\n        return requestId;\n    }\n\n    /**\n     * @notice Function to broadcast and accept an offchain signed request (the broadcaster can also pays and makes additionals).\n     *\n     * @dev msg.sender will be the _payer.\n     * @dev only the _payer can make additionals.\n     * @dev if _payeesPaymentAddress.length > _requestData.payeesIdAddress.length, the extra addresses will be stored but never used.\n     *\n     * @param _requestData nasty bytes containing : creator, payer, payees|expectedAmounts, data\n     * @param _payeesPaymentAddress array of payees address for payment (optional) \n     * @param _payeeAmounts array of amount repartition for the payment\n     * @param _additionals array to increase the ExpectedAmount for payees\n     * @param _expirationDate timestamp after that the signed request cannot be broadcasted\n     * @param _signature ECDSA signature in bytes\n     *\n     * @return Returns the id of the request\n     */\n    function broadcastSignedRequestAsPayerAction(\n        bytes \t\t_requestData, // gather data to avoid \"stack too deep\"\n        address[] \t_payeesPaymentAddress,\n        uint256[] \t_payeeAmounts,\n        uint256[] \t_additionals,\n        uint256 \t_expirationDate,\n        bytes \t\t_signature)\n        external\n        payable\n        whenNotPaused\n        returns(bytes32 requestId)\n    {\n        // check expiration date\n        // solium-disable-next-line security/no-block-members\n        require(_expirationDate >= block.timestamp, \"expiration should be after current time\");\n\n        // check the signature\n        require(\n            Signature.checkRequestSignature(\n                _requestData,\n                _payeesPaymentAddress,\n                _expirationDate,\n                _signature\n            ),\n            \"signature should be correct\"\n        );\n\n        return createAcceptAndPayFromBytes(\n            _requestData,\n            _payeesPaymentAddress,\n            _payeeAmounts,\n            _additionals\n        );\n    }\n\n    /**\n     * @notice Function to pay a request in ERC20 token.\n     *\n     * @dev msg.sender must have a balance of the token higher or equal to the sum of _payeeAmounts.\n     * @dev msg.sender must have approved an amount of the token higher or equal to the sum of _payeeAmounts to the current contract.\n     * @dev the request will be automatically accepted if msg.sender==payer. \n     *\n     * @param _requestId id of the request\n     * @param _payeeAmounts Amount to pay to payees (sum must be equal to msg.value) in wei\n     * @param _additionalAmounts amount of additionals per payee in wei to declare\n     */\n    function paymentAction(\n        bytes32 _requestId,\n        uint256[] _payeeAmounts,\n        uint256[] _additionalAmounts)\n        external\n        whenNotPaused\n    {\n        // automatically accept request if request is created and msg.sender is payer\n        if (requestCore.getState(_requestId)==RequestCore.State.Created && msg.sender == requestCore.getPayer(_requestId)) {\n            acceptAction(_requestId);\n        }\n\n        if (_additionalAmounts.length != 0) {\n            additionalAction(_requestId, _additionalAmounts);\n        }\n\n        paymentInternal(_requestId, _payeeAmounts);\n    }\n\n    /**\n     * @notice Function to pay back in ERC20 token a request to the payees.\n     *\n     * @dev msg.sender must have a balance of the token higher or equal to _amountToRefund.\n     * @dev msg.sender must have approved an amount of the token higher or equal to _amountToRefund to the current contract.\n     * @dev msg.sender must be one of the payees or one of the payees payment address.\n     * @dev the request must be created or accepted.\n     *\n     * @param _requestId id of the request\n     */\n    function refundAction(bytes32 _requestId, uint256 _amountToRefund)\n        external\n        whenNotPaused\n    {\n        refundInternal(_requestId, msg.sender, _amountToRefund);\n    }\n\n    /**\n     * @notice Function to create a request as payer. The request is payed if _payeeAmounts > 0.\n     *\n     * @dev msg.sender will be the payer.\n     * @dev If a contract is given as a payee make sure it is payable. Otherwise, the request will not be payable.\n     * @dev Is public instead of external to avoid \"Stack too deep\" exception.\n     *\n     * @param _payeesIdAddress array of payees address (the index 0 will be the payee the others are subPayees)\n     * @param _expectedAmounts array of Expected amount to be received by each payees\n     * @param _payerRefundAddress Address of refund for the payer (optional)\n     * @param _payeeAmounts array of amount repartition for the payment\n     * @param _additionals array to increase the ExpectedAmount for payees\n     * @param _data Hash linking to additional data on the Request stored on IPFS\n     *\n     * @return Returns the id of the request\n     */\n    function createRequestAsPayerAction(\n        address[] \t_payeesIdAddress,\n        int256[] \t_expectedAmounts,\n        address \t_payerRefundAddress,\n        uint256[] \t_payeeAmounts,\n        uint256[] \t_additionals,\n        string \t\t_data)\n        public\n        payable\n        whenNotPaused\n        returns(bytes32 requestId)\n    {\n        require(msg.sender != _payeesIdAddress[0] && _payeesIdAddress[0] != 0, \"caller should not be the main payee\");\n\n        uint256 collectedFees;\n        (requestId, collectedFees) = createCoreRequestInternal(\n            msg.sender,\n            _payeesIdAddress,\n            _expectedAmounts,\n            _data\n        );\n\n        // Additional check on the fees: they should be equal to the about of ETH sent\n        require(collectedFees == msg.value, \"fees should be the correct amout\");\n\n        // set payment address for payer\n        if (_payerRefundAddress != 0) {\n            payerRefundAddress[requestId] = _payerRefundAddress;\n        }\n        \n        // compute the total expected amount of the request\n        // this computation is also made in createCoreRequestInternal but we do it again here to have better decoupling\n        int256 totalExpectedAmounts = 0;\n        for (uint8 i = 0; i < _expectedAmounts.length; i = i.add(1)) {\n            totalExpectedAmounts = totalExpectedAmounts.add(_expectedAmounts[i]);\n        }\n\n        // accept and pay the request with the value remaining after the fee collect\n        acceptAndPay(\n            requestId,\n            _payeeAmounts,\n            _additionals,\n            totalExpectedAmounts\n        );\n\n        return requestId;\n    }\n\n    /**\n     * @dev Internal function to create, accept, add additionals and pay a request as Payer.\n     *\n     * @dev msg.sender must be _payer.\n     *\n     * @param _requestData nasty bytes containing : creator, payer, payees|expectedAmounts, data\n     * @param _payeesPaymentAddress array of payees address for payment (optional)\n     * @param _payeeAmounts array of amount repartition for the payment\n     * @param _additionals Will increase the ExpectedAmount of the request right after its creation by adding additionals\n     *\n     * @return Returns the id of the request\n     */\n    function createAcceptAndPayFromBytes(\n        bytes \t\t_requestData,\n        address[] \t_payeesPaymentAddress,\n        uint256[] \t_payeeAmounts,\n        uint256[] \t_additionals)\n        internal\n        returns(bytes32 requestId)\n    {\n        // extract main payee\n        address mainPayee = Bytes.extractAddress(_requestData, 41);\n        require(msg.sender != mainPayee && mainPayee != 0, \"caller should not be the main payee\");\n\n        // creator must be the main payee\n        require(Bytes.extractAddress(_requestData, 0) == mainPayee, \"creator should be the main payee\");\n\n        // extract the number of payees\n        uint8 payeesCount = uint8(_requestData[40]);\n        int256 totalExpectedAmounts = 0;\n        for (uint8 i = 0; i < payeesCount; i++) {\n            // extract the expectedAmount for the payee[i]\n            int256 expectedAmountTemp = int256(Bytes.extractBytes32(_requestData, uint256(i).mul(52).add(61)));\n            \n            // compute the total expected amount of the request\n            totalExpectedAmounts = totalExpectedAmounts.add(expectedAmountTemp);\n            \n            // all expected amount must be positive\n            require(expectedAmountTemp > 0, \"expected amount should be > 0\");\n        }\n\n        // compute and send fees\n        uint256 fees = collectEstimation(totalExpectedAmounts);\n        require(fees == msg.value, \"fees should be the correct amout\");\n        collectForREQBurning(fees);\n\n        // insert the msg.sender as the payer in the bytes\n        Bytes.updateBytes20inBytes(_requestData, 20, bytes20(msg.sender));\n        // store request in the core\n        requestId = requestCore.createRequestFromBytes(_requestData);\n        \n        // set payment addresses for payees\n        for (uint8 j = 0; j < _payeesPaymentAddress.length; j = j.add(1)) {\n            payeesPaymentAddress[requestId][j] = _payeesPaymentAddress[j];\n        }\n\n        // accept and pay the request with the value remaining after the fee collect\n        acceptAndPay(\n            requestId,\n            _payeeAmounts,\n            _additionals,\n            totalExpectedAmounts\n        );\n\n        return requestId;\n    }\n\n    /**\n     * @dev Internal function to manage payment declaration.\n     *\n     * @param _requestId id of the request\n     * @param _payeeAmounts Amount to pay to payees (sum must be equals to msg.value)\n     */\n    function paymentInternal(\n        bytes32 \t_requestId,\n        uint256[] \t_payeeAmounts)\n        internal\n    {\n        require(requestCore.getState(_requestId) != RequestCore.State.Canceled, \"request should not be canceled\");\n\n        // we cannot have more amounts declared than actual payees\n        require(\n            _payeeAmounts.length <= requestCore.getSubPayeesCount(_requestId).add(1),\n            \"number of amounts should be <= number of payees\"\n        );\n\n        for (uint8 i = 0; i < _payeeAmounts.length; i = i.add(1)) {\n            if (_payeeAmounts[i] != 0) {\n                // Store and declare the payment to the core\n                requestCore.updateBalance(_requestId, i, _payeeAmounts[i].toInt256Safe());\n\n                // pay the payment address if given, the id address otherwise\n                address addressToPay;\n                if (payeesPaymentAddress[_requestId][i] == 0) {\n                    addressToPay = requestCore.getPayeeAddress(_requestId, i);\n                } else {\n                    addressToPay = payeesPaymentAddress[_requestId][i];\n                }\n\n                // payment done, the token need to be sent\n                fundOrderInternal(msg.sender, addressToPay, _payeeAmounts[i]);\n            }\n        }\n    }\n\n    /**\n     * @dev Internal function to accept, add additionals and pay a request as Payer\n     *\n     * @param _requestId id of the request\n     * @param _payeeAmounts Amount to pay to payees (sum must be equals to _amountPaid)\n     * @param _additionals Will increase the ExpectedAmounts of payees\n     * @param _payeeAmountsSum total of amount token send for this transaction\n     *\n     */\t\n    function acceptAndPay(\n        bytes32 _requestId,\n        uint256[] _payeeAmounts,\n        uint256[] _additionals,\n        int256 _payeeAmountsSum)\n        internal\n    {\n        acceptAction(_requestId);\n        \n        additionalAction(_requestId, _additionals);\n\n        if (_payeeAmountsSum > 0) {\n            paymentInternal(_requestId, _payeeAmounts);\n        }\n    }\n\n    /**\n     * @dev Internal function to manage refund declaration\n     *\n     * @param _requestId id of the request\n     * @param _address address from where the refund has been done\n     * @param _amount amount of the refund in ERC20 token to declare\n     */\n    function refundInternal(\n        bytes32 _requestId,\n        address _address,\n        uint256 _amount)\n        internal\n    {\n        require(requestCore.getState(_requestId) != RequestCore.State.Canceled, \"request should not be canceled\");\n\n        // Check if the _address is a payeesId\n        int16 payeeIndex = requestCore.getPayeeIndex(_requestId, _address);\n\n        // get the number of payees\n        uint8 payeesCount = requestCore.getSubPayeesCount(_requestId).add(1);\n\n        if (payeeIndex < 0) {\n            // if not ID addresses maybe in the payee payments addresses\n            for (uint8 i = 0; i < payeesCount && payeeIndex == -1; i = i.add(1)) {\n                if (payeesPaymentAddress[_requestId][i] == _address) {\n                    // get the payeeIndex\n                    payeeIndex = int16(i);\n                }\n            }\n        }\n        // the address must be found somewhere\n        require(payeeIndex >= 0, \"fromAddress should be a payee\"); \n\n        // useless (subPayee size <256): require(payeeIndex < 265);\n        requestCore.updateBalance(_requestId, uint8(payeeIndex), -_amount.toInt256Safe());\n\n        // refund to the payment address if given, the id address otherwise\n        address addressToPay = payerRefundAddress[_requestId];\n        if (addressToPay == 0) {\n            addressToPay = requestCore.getPayer(_requestId);\n        }\n\n        // refund declared, the money is ready to be sent to the payer\n        fundOrderInternal(_address, addressToPay, _amount);\n    }\n\n    /**\n     * @dev Internal function to manage fund mouvement.\n     *\n     * @param _from address where the token will get from\n     * @param _recipient address where the token has to be sent to\n     * @param _amount amount in ERC20 token to send\n     */\n    function fundOrderInternal(\n        address _from,\n        address _recipient,\n        uint256 _amount)\n        internal\n    {\t\n        require(erc20Token.transferFrom(_from, _recipient, _amount), \"erc20 transfer should succeed\");\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000db600fda54568a35b78565b5257125bebc51eb27000000000000000000000000fcb4393e7faef06fab01c00d67c1895545aff3b80000000000000000000000009f8f72aa9304c8b593d555f12ef6589cc3a579a2"
}