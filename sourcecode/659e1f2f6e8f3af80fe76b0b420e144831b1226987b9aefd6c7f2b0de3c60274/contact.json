{
  "address": "0xf3db7560e820834658b590c96234c333cd3d5e5e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CoinPokerToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-01\n*/\n\n/*\n *  The CoinPoker Token contract complies with the ERC20 standard (see https://github.com/ethereum/EIPs/issues/20).\n *  All tokens not being sold during the crowdsale but the reserved token\n *  for tournaments future financing are burned.\n *  Author: Justas Kregzde\n */\n \npragma solidity ^0.4.19;\n\nlibrary SafeMath {\n    function mul(uint a, uint b) internal returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint a, uint b) internal returns (uint) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint a, uint b) internal returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint a, uint b) internal returns (uint) {\n        uint c = a + b;\n        assert(c>=a && c>=b);\n        return c;\n    }\n}\n\ncontract CoinPokerToken {\n    using SafeMath for uint;\n    // Public variables of the token\n    string constant public standard = \"ERC20\";\n    string constant public name = \"Poker Chips\";\n    string constant public symbol = \"CHP\";\n    uint8 constant public decimals = 18;\n    uint _totalSupply = 500000000e18; // Total supply of 500 Million CoinPoker Tokens\n    uint constant public tokensPreICO = 100000000e18; // 20% for pre-ICO\n    uint constant public tokensICO = 275000000e18; // 55% for ICO\n    uint constant public teamReserve = 50000000e18; // 10% for team/advisors/exchanges\n    uint constant public tournamentsReserve = 75000000e18; // 15% for tournaments, released by percentage of total tokens sale\n    uint public startTime = 1516960800; // Time after ICO, when tokens may be transferred. Friday, 26 January 2018 10:00:00 GMT\n    address public ownerAddr;\n    address public preIcoAddr; // pre-ICO token holder\n    address public tournamentsAddr; // tokens for tournaments\n    address public cashierAddr; // CoinPoker main cashier/game wallet\n    bool burned;\n\n    // Array with all balances\n    mapping (address => uint) balances;\n    mapping (address => mapping (address => uint)) allowed;\n\n    // Public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed _owner, address indexed spender, uint value);\n    event Burned(uint amount);\n\n    // What is the balance of a particular account?\n    function balanceOf(address _owner) constant returns (uint balance) {\n        return balances[_owner];\n    }\n\n    // Returns the amount which _spender is still allowed to withdraw from _owner\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    // Get the total token supply\n    function totalSupply() constant returns (uint) {\n        return _totalSupply;\n    }\n\n    //  Initializes contract with initial supply tokens to the creator of the contract\n    function CoinPokerToken(address _ownerAddr, address _preIcoAddr, address _tournamentsAddr, address _cashierAddr) {\n        ownerAddr = _ownerAddr;\n        preIcoAddr = _preIcoAddr;\n        tournamentsAddr = _tournamentsAddr;\n        cashierAddr = _cashierAddr;\n        balances[ownerAddr] = _totalSupply; // Give the owner all initial tokens\n    }\n\n    //  Send some of your tokens to a given address\n    function transfer(address _to, uint _value) returns(bool) {\n        if (now < startTime)  // Check if the crowdsale is already over\n            require(_to == cashierAddr); // allow only to transfer CHP (make a deposit) to game/cashier wallet\n        balances[msg.sender] = balances[msg.sender].sub(_value); // Subtract from the sender\n        balances[_to] = balances[_to].add(_value); // Add the same to the recipient\n        Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\n        return true;\n    }\n\n    //  A contract or person attempts to get the tokens of somebody else.\n    //  This is only allowed if the token holder approved.\n    function transferFrom(address _from, address _to, uint _value) returns(bool) {\n        if (now < startTime)  // Check if the crowdsale is already over\n            require(_from == ownerAddr || _to == cashierAddr);\n        var _allowed = allowed[_from][msg.sender];\n        balances[_from] = balances[_from].sub(_value); // Subtract from the sender\n        balances[_to] = balances[_to].add(_value); // Add the same to the recipient\n        allowed[_from][msg.sender] = _allowed.sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\t\n    //   Approve the passed address to spend the specified amount of tokens\n    //   on behalf of msg.sender.\n    function approve(address _spender, uint _value) returns (bool) {\n        //https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function percent(uint numerator, uint denominator, uint precision) public constant returns(uint quotient) {\n        uint _numerator = numerator.mul(10 ** (precision.add(1)));\n        uint _quotient =  _numerator.div(denominator).add(5).div(10);\n        return (_quotient);\n    }\n\n    //  Called when ICO is closed. Burns the remaining tokens except the tokens reserved:\n    //  - for tournaments (released by percentage of total token sale, max 75'000'000)\n    //  - for pre-ICO (100'000'000)\n    //  - for team/advisors/exchanges (50'000'000).\n    //  Anybody may burn the tokens after ICO ended, but only once (in case the owner holds more tokens in the future).\n    //  this ensures that the owner will not posses a majority of the tokens.\n    function burn() {\n        // If tokens have not been burned already and the crowdsale ended\n        if (!burned && now > startTime) {\n            // Calculate tournament release amount (tournament_reserve * proportion_how_many_sold)\n            uint total_sold = _totalSupply.sub(balances[ownerAddr]);\n            total_sold = total_sold.add(tokensPreICO);\n            uint total_ico_amount = tokensPreICO.add(tokensICO);\n            uint percentage = percent(total_sold, total_ico_amount, 8);\n            uint tournamentsAmount = tournamentsReserve.mul(percentage).div(100000000);\n\n            // Calculate what's left\n            uint totalReserve = teamReserve.add(tokensPreICO);\n            totalReserve = totalReserve.add(tournamentsAmount);\n            uint difference = balances[ownerAddr].sub(totalReserve);\n\n            // Distribute tokens\n            balances[preIcoAddr] = balances[preIcoAddr].add(tokensPreICO);\n            balances[tournamentsAddr] = balances[tournamentsAddr].add(tournamentsAmount);\n            balances[ownerAddr] = teamReserve;\n\n            // Burn what's left\n            _totalSupply = _totalSupply.sub(difference);\n            burned = true;\n            Burned(difference);\n        }\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"},{\"name\":\"precision\",\"type\":\"uint256\"}],\"name\":\"percent\",\"outputs\":[{\"name\":\"quotient\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tournamentsReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cashierAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tournamentsAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ownerAddr\",\"type\":\"address\"},{\"name\":\"_preIcoAddr\",\"type\":\"address\"},{\"name\":\"_tournamentsAddr\",\"type\":\"address\"},{\"name\":\"_cashierAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"}]",
  "bytecode": "60606040526b019d971e4fe8401e74000000600055635a6afc20600155341561002757600080fd5b6040516080806118818339810160405280805190602001909190805190602001909190805190602001909190805190602001909190505083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005460066000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050506116a4806101dd6000396000f30060606040526004361061011c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680622c1a9e1461012157806306fdde031461016a578063095ea7b3146101f857806318160ddd1461025257806323b872dd1461027b578063293100c1146102f4578063313ce5671461031d5780634287f14a1461034c57806344df8e70146103755780634d9997561461038a57806351fafd95146103b35780635a3b7e421461040857806370a0823114610496578063721ed9ec146104e357806378e979251461050c5780637fa34e921461053557806395d89b411461058a5780639c675eaa14610618578063a9059cbb1461066d578063dd62ed3e146106c7578063e80b128f14610733575b600080fd5b341561012c57600080fd5b6101546004808035906020019091908035906020019091908035906020019091905050610788565b6040518082815260200191505060405180910390f35b341561017557600080fd5b61017d6107ff565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101bd5780820151818401526020810190506101a2565b50505050905090810190601f1680156101ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561020357600080fd5b610238600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610838565b604051808215151515815260200191505060405180910390f35b341561025d57600080fd5b6102656109bf565b6040518082815260200191505060405180910390f35b341561028657600080fd5b6102da600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109c8565b604051808215151515815260200191505060405180910390f35b34156102ff57600080fd5b610307610d37565b6040518082815260200191505060405180910390f35b341561032857600080fd5b610330610d46565b604051808260ff1660ff16815260200191505060405180910390f35b341561035757600080fd5b61035f610d4b565b6040518082815260200191505060405180910390f35b341561038057600080fd5b610388610d5a565b005b341561039557600080fd5b61039d6111e7565b6040518082815260200191505060405180910390f35b34156103be57600080fd5b6103c66111f6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561041357600080fd5b61041b61121c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561045b578082015181840152602081019050610440565b50505050905090810190601f1680156104885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104a157600080fd5b6104cd600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611255565b6040518082815260200191505060405180910390f35b34156104ee57600080fd5b6104f661129e565b6040518082815260200191505060405180910390f35b341561051757600080fd5b61051f6112ad565b6040518082815260200191505060405180910390f35b341561054057600080fd5b6105486112b3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561059557600080fd5b61059d6112d9565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105dd5780820151818401526020810190506105c2565b50505050905090810190601f16801561060a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561062357600080fd5b61062b611312565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561067857600080fd5b6106ad600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611338565b604051808215151515815260200191505060405180910390f35b34156106d257600080fd5b61071d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061153a565b6040518082815260200191505060405180910390f35b341561073e57600080fd5b6107466115c1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008060006107b66107a46001866115e790919063ffffffff16565b600a0a8761161190919063ffffffff16565b91506107f1600a6107e360056107d5898761164490919063ffffffff16565b6115e790919063ffffffff16565b61164490919063ffffffff16565b905080925050509392505050565b6040805190810160405280600b81526020017f506f6b657220436869707300000000000000000000000000000000000000000081525081565b6000808214806108c457506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156108cf57600080fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008054905090565b600080600154421015610a8a57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610a7e5750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b1515610a8957600080fd5b5b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610b5b83600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461165f90919063ffffffff16565b600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bf083600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115e790919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c46838261165f90919063ffffffff16565b600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b6a3e09de2596099e2b00000081565b601281565b6a295be96e6406697200000081565b600080600080600080600560149054906101000a900460ff16158015610d81575060015442115b156111df57610dfc60066000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460005461165f90919063ffffffff16565b9550610e1c6a52b7d2dcc80cd2e4000000876115e790919063ffffffff16565b9550610e476ae37983df262343f30000006a52b7d2dcc80cd2e40000006115e790919063ffffffff16565b9450610e5586866008610788565b9350610e8b6305f5e100610e7d866a3e09de2596099e2b00000061161190919063ffffffff16565b61164490919063ffffffff16565b9250610eb66a52b7d2dcc80cd2e40000006a295be96e640669720000006115e790919063ffffffff16565b9150610ecb83836115e790919063ffffffff16565b9150610f418260066000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461165f90919063ffffffff16565b9050610fc26a52b7d2dcc80cd2e400000060066000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115e790919063ffffffff16565b60066000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061109b8360066000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115e790919063ffffffff16565b60066000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506a295be96e6406697200000060066000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111868160005461165f90919063ffffffff16565b6000819055506001600560146101000a81548160ff0219169083151502179055507fd83c63197e8e676d80ab0122beba9a9d20f3828839e9a1d6fe81d242e9cd7e6e816040518082815260200191505060405180910390a15b505050505050565b6a52b7d2dcc80cd2e400000081565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600581526020017f455243323000000000000000000000000000000000000000000000000000000081525081565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6ae37983df262343f300000081565b60015481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f434850000000000000000000000000000000000000000000000000000000000081525081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001544210156113a157600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415156113a057600080fd5b5b6113f382600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461165f90919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061148882600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115e790919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008082840190508381101580156115ff5750828110155b151561160757fe5b8091505092915050565b60008082840290506000841480611632575082848281151561162f57fe5b04145b151561163a57fe5b8091505092915050565b600080828481151561165257fe5b0490508091505092915050565b600082821115151561166d57fe5b8183039050929150505600a165627a7a72305820450ec7eb734bda5d8e868bfe788a8c1b2d5cd17ca70ed185dac7a6e3055aa8610029000000000000000000000000ef906cdb3d12d7e3a5d1f8c570d5d3a3e315489c000000000000000000000000c2cce044b0cafd51fb4a6408f9577159b8b18c8700000000000000000000000011faae77555e9bf3c1b0882b9076d12a56017dff00000000000000000000000084af694c42093690f0081e45dccd99965a75f442",
  "constructorArguments": "000000000000000000000000ef906cdb3d12d7e3a5d1f8c570d5d3a3e315489c000000000000000000000000c2cce044b0cafd51fb4a6408f9577159b8b18c8700000000000000000000000011faae77555e9bf3c1b0882b9076d12a56017dff00000000000000000000000084af694c42093690f0081e45dccd99965a75f442"
}