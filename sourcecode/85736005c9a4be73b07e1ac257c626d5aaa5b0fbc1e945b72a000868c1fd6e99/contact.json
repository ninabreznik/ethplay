{
  "address": "0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SampleContest",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-09\n*/\n\n// File: contracts/lib/ownership/Ownable.sol\n\npragma solidity ^0.4.24;\n\ncontract Ownable {\n    address public owner;\n    event OwnershipTransferred(address indexed previousOwner,address indexed newOwner);\n\n    /// @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n    constructor() public { owner = msg.sender; }\n\n    /// @dev Throws if called by any contract other than latest designated caller\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /// @dev Allows the current owner to transfer control of the contract to a newOwner.\n    /// @param newOwner The address to transfer ownership to.\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n// File: contracts/lib/token/FactoryTokenInterface.sol\n\npragma solidity ^0.4.24;\n\n\ncontract FactoryTokenInterface is Ownable {\n    function balanceOf(address _owner) public view returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n    function approve(address _spender, uint256 _value) public returns (bool);\n    function allowance(address _owner, address _spender) public view returns (uint256);\n    function mint(address _to, uint256 _amount) public returns (bool);\n    function burnFrom(address _from, uint256 _value) public;\n}\n\n// File: contracts/lib/token/TokenFactoryInterface.sol\n\npragma solidity ^0.4.24;\n\n\ncontract TokenFactoryInterface {\n    function create(string _name, string _symbol) public returns (FactoryTokenInterface);\n}\n\n// File: contracts/lib/ownership/ZapCoordinatorInterface.sol\n\npragma solidity ^0.4.24;\n\n\ncontract ZapCoordinatorInterface is Ownable {\n    function addImmutableContract(string contractName, address newAddress) external;\n    function updateContract(string contractName, address newAddress) external;\n    function getContractName(uint index) public view returns (string);\n    function getContract(string contractName) public view returns (address);\n    function updateAllDependencies() external;\n}\n\n// File: contracts/platform/bondage/BondageInterface.sol\n\npragma solidity ^0.4.24;\n\ncontract BondageInterface {\n    function bond(address, bytes32, uint256) external returns(uint256);\n    function unbond(address, bytes32, uint256) external returns (uint256);\n    function delegateBond(address, address, bytes32, uint256) external returns(uint256);\n    function escrowDots(address, address, bytes32, uint256) external returns (bool);\n    function releaseDots(address, address, bytes32, uint256) external returns (bool);\n    function returnDots(address, address, bytes32, uint256) external returns (bool success);\n    function calcZapForDots(address, bytes32, uint256) external view returns (uint256);\n    function currentCostOfDot(address, bytes32, uint256) public view returns (uint256);\n    function getDotsIssued(address, bytes32) public view returns (uint256);\n    function getBoundDots(address, address, bytes32) public view returns (uint256);\n    function getZapBound(address, bytes32) public view returns (uint256);\n    function dotLimit( address, bytes32) public view returns (uint256);\n}\n\n// File: contracts/platform/bondage/currentCost/CurrentCostInterface.sol\n\npragma solidity ^0.4.24;\n\ncontract CurrentCostInterface {\n    function _currentCostOfDot(address, bytes32, uint256) public view returns (uint256);\n    function _dotLimit(address, bytes32) public view returns (uint256);\n    function _costOfNDots(address, bytes32, uint256, uint256) public view returns (uint256);\n}\n\n// File: contracts/platform/registry/RegistryInterface.sol\n\npragma solidity ^0.4.24;\n\ncontract RegistryInterface {\n    function initiateProvider(uint256, bytes32) public returns (bool);\n    function initiateProviderCurve(bytes32, int256[], address) public returns (bool);\n    function setEndpointParams(bytes32, bytes32[]) public;\n    function getEndpointParams(address, bytes32) public view returns (bytes32[]);\n    function getProviderPublicKey(address) public view returns (uint256);\n    function getProviderTitle(address) public view returns (bytes32);\n    function setProviderParameter(bytes32, bytes) public;\n    function setProviderTitle(bytes32) public;\n    function clearEndpoint(bytes32) public;\n    function getProviderParameter(address, bytes32) public view returns (bytes);\n    function getAllProviderParams(address) public view returns (bytes32[]);\n    function getProviderCurveLength(address, bytes32) public view returns (uint256);\n    function getProviderCurve(address, bytes32) public view returns (int[]);\n    function isProviderInitiated(address) public view returns (bool);\n    function getAllOracles() external view returns (address[]);\n    function getProviderEndpoints(address) public view returns (bytes32[]);\n    function getEndpointBroker(address, bytes32) public view returns (address);\n}\n\n// File: contracts/lib/platform/SampleContest.sol\n\n/*\nContest where users can bond to contestant curves which mint tokens( unbondabe*), \nwinner decided by oracle\ncontract unbonds from loser curves\nholders of winning token allowed to take share of reserve token(zap) which was unbonded from loser curves\n\nStarting Contest:\n    \n    deploys with contest uninitialized: status = Uninitialized\n    \n    anyone can initialize new token:backed curve \n    \n    owner initializes contest with oracle: status = Initialized\n\nEnding Contest:\n    \n    owner calls close: status = ReadyToSettle\n    \n    oracle calls judge to set winning curve: status = Judged\n    \n    anyone calls settle, contest unbonds from losing curves: status = Settled\n    \n    holders of winnning token call redeem to retrieve their share of reserve token \n    based on their holding of winning token\n    \n    *holders of winning token can optionally unbond \n*/\n\ncontract SampleContest is Ownable {\n\n    CurrentCostInterface currentCost;\n    FactoryTokenInterface public reserveToken;\n    ZapCoordinatorInterface public coord;\n    TokenFactoryInterface public tokenFactory;\n    BondageInterface bondage;\n\n    enum ContestStatus { \n        Uninitialized,    //  \n        Initialized,      // ready for buys\n        ReadyToSettle,    // ready for judgement \n        Judged,           // winner determined \n        Settled,           // value of winning tokens determined \n        Canceled          // oracle did not respond in time\n    }\n\n    address public oracle;    // address of oracle who will choose the winner\n    uint256 public ttl;    // time allowed before, close and judge. if time expired, allow unbond from all curves \n    uint256 public expired = 2**256 -1;    // time allowed before, close and judge. if time expired, allow unbond from all curves \n    bytes32 public winner;    // curve identifier of the winner \n    uint256 public winValue;  // final value of the winning token\n    ContestStatus public status; //state of contest\n\n    mapping(bytes32 => address) public curves; // map of endpoint specifier to token-backed dotaddress\n    bytes32[] public curves_list; // array of endpoint specifiers\n\n    mapping(address => uint8) public redeemed; // map of address redemption state\n    address[] public redeemed_list;\n    \n    event DotTokenCreated(address tokenAddress);\n    event Bonded(bytes32 indexed endpoint, uint256 indexed numDots, address indexed sender); \n    event Unbonded(bytes32 indexed endpoint, uint256 indexed numDots, address indexed sender);\n\n    event Initialized(address indexed oracle);\n    event Closed();\n    event Judged(bytes32 winner);\n    event Settled(uint256 winValue, uint256 winTokens); \n    event Reset();\n\n    constructor(\n        address coordinator, \n        address factory,\n        uint256 providerPubKey,\n        bytes32 providerTitle \n    ){\n        coord = ZapCoordinatorInterface(coordinator); \n        reserveToken = FactoryTokenInterface(coord.getContract(\"ZAP_TOKEN\"));\n        //always allow bondage to transfer from wallet\n        reserveToken.approve(coord.getContract(\"BONDAGE\"), ~uint256(0));\n        tokenFactory = TokenFactoryInterface(factory);\n\n        RegistryInterface registry = RegistryInterface(coord.getContract(\"REGISTRY\")); \n        registry.initiateProvider(providerPubKey, providerTitle);\n        status = ContestStatus.Uninitialized;\n    }\n\n// contest lifecycle\n \n    function initializeContest(\n        address oracleAddress,\n        uint256 _ttl\n    ) onlyOwner public {\n        require( status == ContestStatus.Uninitialized, \"Contest already initialized\");\n        oracle = oracleAddress;\n        ttl = _ttl;\n        status = ContestStatus.Initialized;\n        emit Initialized(oracle);\n    }\n\n    function close() onlyOwner {\n        status = ContestStatus.ReadyToSettle; \n        expired = block.number + ttl; \n        emit Closed();\n    }\n\n    function judge(bytes32 endpoint) {\n        require( status == ContestStatus.ReadyToSettle, \"not closed\" );\n        require( msg.sender == oracle, \"not oracle\");\n        winner = endpoint;\n        status = ContestStatus.Judged;\n        emit Judged(winner);\n    }\n\n    function settle() {\n        require( status == ContestStatus.Judged, \"winner not determined\");\n\n        bondage = BondageInterface(coord.getContract(\"BONDAGE\"));\n        uint256 dots;\n        for( uint256 i = 0; i < curves_list.length; i++) {\n\n            if(curves_list[i] != winner) {\n                dots =  bondage.getDotsIssued(address(this), curves_list[i]);  \n                if( dots > 0) {\n                    bondage.unbond(address(this), curves_list[i], dots);                 \n                }  \n            }\n        } \n\n        // how many winning dots    \n        uint256 numWin =  bondage.getDotsIssued(address(this), winner);  \n        // redeemable value of each dot token\n        winValue = reserveToken.balanceOf(address(this)) / numWin;\n        status = ContestStatus.Settled;\n        emit Settled(winValue, numWin);\n    }\n\n\n    //TODO ensure all has been redeemed or enough time has elasped \n    function reset() public {\n        require(msg.sender == oracle);\n        require(status == ContestStatus.Settled || status == ContestStatus.Canceled, \"contest not settled\");\n        if( status == ContestStatus.Canceled ) {\n            require(reserveToken.balanceOf(address(this)) == 0, \"funds remain\");\n        }\n\n        delete redeemed_list;\n        delete curves_list;\n        status = ContestStatus.Initialized; \n        emit Reset();\n    }\n\n/// TokenDotFactory methods\n\n    function initializeCurve(\n        bytes32 endpoint, \n        bytes32 symbol, \n        int256[] curve\n    ) public returns(address) {\n        \n        require(curves[endpoint] == 0, \"Curve endpoint already exists or used in the past. Please choose new\");\n        \n        RegistryInterface registry = RegistryInterface(coord.getContract(\"REGISTRY\")); \n        require(registry.isProviderInitiated(address(this)), \"Provider not intiialized\");\n\n        registry.initiateProviderCurve(endpoint, curve, address(this));\n        curves[endpoint] = newToken(bytes32ToString(endpoint), bytes32ToString(symbol));\n        curves_list.push(endpoint);        \n        registry.setProviderParameter(endpoint, toBytes(curves[endpoint]));\n        \n        DotTokenCreated(curves[endpoint]);\n        return curves[endpoint];\n    }\n\n    //whether this contract holds tokens or coming from msg.sender,etc\n    function bond(bytes32 endpoint, uint numDots) public  {\n\n        require( status == ContestStatus.Initialized, \" contest not live\"); \n\n        bondage = BondageInterface(coord.getContract(\"BONDAGE\"));\n        uint256 issued = bondage.getDotsIssued(address(this), endpoint);\n\n        CurrentCostInterface cost = CurrentCostInterface(coord.getContract(\"CURRENT_COST\"));\n        uint256 numReserve = cost._costOfNDots(address(this), endpoint, issued + 1, numDots - 1);\n\n        require(\n            reserveToken.transferFrom(msg.sender, address(this), numReserve),\n            \"insufficient accepted token numDots approved for transfer\"\n        );\n\n        reserveToken.approve(address(bondage), numReserve);\n        bondage.bond(address(this), endpoint, numDots);\n        FactoryTokenInterface(curves[endpoint]).mint(msg.sender, numDots);\n        emit Bonded(endpoint, numDots, msg.sender);\n    }\n\n    //whether this contract holds tokens or coming from msg.sender,etc\n    function unbond(bytes32 endpoint, uint numDots) public {\n\n        require( status == ContestStatus.ReadyToSettle || status == ContestStatus.Settled, \"not ready\");\n\n        bondage = BondageInterface(coord.getContract(\"BONDAGE\"));\n        uint issued = bondage.getDotsIssued(address(this), endpoint);\n\n        //unbond dots\n        bondage.unbond(address(this), winner, numDots);\n\n        currentCost = CurrentCostInterface(coord.getContract(\"CURRENT_COST\"));\n        //get reserve value to send \n        uint reserveCost = currentCost._costOfNDots(address(this), endpoint, issued + 1 - numDots, numDots - 1);\n\n        FactoryTokenInterface curveToken = FactoryTokenInterface(curves[endpoint]);\n\n        if( status == ContestStatus.ReadyToSettle || status == ContestStatus.Canceled) {\n            \n            status = ContestStatus.Canceled;\n            //oracle has taken too long to judge winner so unbonds will be allowed for all\n            require(block.number > expired, \"oracle query not expired.\");\n            require( status == ContestStatus.ReadyToSettle, \"contest not ready to settle\");\n\n            //unbond dots\n            bondage.unbond(address(this), endpoint, numDots);\n\n            //burn dot backed token\n            curveToken.burnFrom(msg.sender, numDots);\n\n            require(reserveToken.transfer(msg.sender, reserveCost), \"transfer failed\");\n            Unbonded(endpoint, numDots, msg.sender);\n        }\n\n        else {\n\n            require( status == ContestStatus.Settled, \" contest not settled\"); \n            require(redeemed[msg.sender] == 0, \"already redeeemed\");\n            require(winner==endpoint, \"only winners can unbond for rewards\"); \n\n            //reward user's winning tokens unbond value + share of losing curves reserve token proportional to winning token holdings\n            uint reward = ( winValue * FactoryTokenInterface(getTokenAddress(winner)).balanceOf(msg.sender) ) + reserveCost;\n            \n            //burn user's unbonded tokens\n            curveToken.burnFrom(msg.sender, numDots);\n\n            reserveToken.transfer(msg.sender, reward);\n            redeemed[msg.sender] = 1;\n\n            emit Unbonded(winner, numDots, msg.sender);\n        }\n    }\n\n    function newToken(\n        string name,\n        string symbol\n    ) \n        public\n        returns (address tokenAddress) \n    {\n        FactoryTokenInterface token = tokenFactory.create(name, symbol);\n        tokenAddress = address(token);\n        return tokenAddress;\n    }\n\n    function getTokenAddress(bytes32 endpoint) public view returns(address) {\n        RegistryInterface registry = RegistryInterface(coord.getContract(\"REGISTRY\")); \n        return bytesToAddr(registry.getProviderParameter(address(this), endpoint));\n    }\n\n    // https://ethereum.stackexchange.com/questions/884/how-to-convert-an-address-to-bytes-in-solidity\n    function toBytes(address x) public pure returns (bytes b) {\n        b = new bytes(20);\n        for (uint i = 0; i < 20; i++)\n            b[i] = byte(uint8(uint(x) / (2**(8*(19 - i)))));\n    }\n\n    //https://ethereum.stackexchange.com/questions/2519/how-to-convert-a-bytes32-to-string\n    function bytes32ToString(bytes32 x) public pure returns (string) {\n        bytes memory bytesString = new bytes(32);\n        bytesString = abi.encodePacked(x);\n        return string(bytesString);\n    }\n\n    //https://ethereum.stackexchange.com/questions/15350/how-to-convert-an-bytes-to-address-in-solidity\n    function bytesToAddr (bytes b) public pure returns (address) {\n        uint result = 0;\n        for (uint i = b.length-1; i+1 > 0; i--) {\n            uint c = uint(b[i]);\n            uint to_inc = c * ( 16 ** ((b.length - i-1) * 2));\n            result += to_inc;\n        }\n        return address(result);\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000b007eca49763f31edff95623ed6c23c8c1924a16000000000000000000000000ccbaa725083285f6ef129f79863fab7d4826371f000000036b5252a719be12e4aa87faf67a410ce894d0f79a997fc21ee379ff3d5072696365436f6e746573740000000000000000000000000000000000000000"
}