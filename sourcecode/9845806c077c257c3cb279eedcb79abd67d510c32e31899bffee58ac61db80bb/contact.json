{
  "address": "0xeb547ed1d8a3ff1461abaa7f0022fed4836e00a4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Coinvest Token",
  "contractName": "CoinvestToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-04\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMathLib{\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  \n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n  address public coinvest;\n  mapping (address => bool) public admins;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n    coinvest = msg.sender;\n    admins[owner] = true;\n    admins[coinvest] = true;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  modifier onlyCoinvest() {\n      require(msg.sender == coinvest);\n      _;\n  }\n\n  modifier onlyAdmin() {\n      require(admins[msg.sender]);\n      _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n  \n  /**\n   * @dev Changes the Coinvest wallet that will receive funds from investment contract.\n   * @param _newCoinvest The address of the new wallet.\n  **/\n  function transferCoinvest(address _newCoinvest) \n    external\n    onlyCoinvest\n  {\n    require(_newCoinvest != address(0));\n    coinvest = _newCoinvest;\n  }\n\n  /**\n   * @dev Used to add admins who are allowed to add funds to the investment contract.\n   * @param _user The address of the admin to add or remove.\n   * @param _status True to add the user, False to remove the user.\n  **/\n  function alterAdmin(address _user, bool _status)\n    external\n    onlyCoinvest\n  {\n    require(_user != address(0));\n    require(_user != coinvest);\n    admins[_user] = _status;\n  }\n\n}\n\n/**\n * @dev Abstract contract for approveAndCall.\n**/\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\n/**\n * @title Coinvest COIN Token\n * @dev ERC20 contract utilizing ERC865-ish structure (3esmit's implementation with alterations).\n * @dev to allow users to pay Ethereum fees in tokens.\n**/\ncontract CoinvestToken is Ownable {\n    using SafeMathLib for uint256;\n    \n    string public constant symbol = \"COIN\";\n    string public constant name = \"Coinvest COIN V3 Token\";\n    \n    uint8 public constant decimals = 18;\n    uint256 private _totalSupply = 107142857 * (10 ** 18);\n    \n    // Function sigs to be used within contract for signature recovery.\n    bytes4 internal constant transferSig = 0xa9059cbb;\n    bytes4 internal constant approveSig = 0x095ea7b3;\n    bytes4 internal constant increaseApprovalSig = 0xd73dd623;\n    bytes4 internal constant decreaseApprovalSig = 0x66188463;\n    bytes4 internal constant approveAndCallSig = 0xcae9ca51;\n    bytes4 internal constant revokeHashSig = 0x70de43f1;\n\n    // Balances for each account\n    mapping(address => uint256) balances;\n\n    // Owner of account approves the transfer of an amount to another account\n    mapping(address => mapping (address => uint256)) allowed;\n    \n    // Keeps track of the last nonce sent from user. Used for delegated functions.\n    mapping(address => uint256) nonces;\n    \n    // Mapping of past used hashes: true if already used.\n    mapping(address => mapping (bytes32 => bool)) invalidHashes;\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed from, address indexed spender, uint tokens);\n    event HashRedeemed(bytes32 indexed txHash, address indexed from);\n\n    /**\n     * @dev Set owner and beginning balance.\n    **/\n    constructor()\n      public\n    {\n        balances[msg.sender] = _totalSupply;\n    }\n\n    /**\n     * @dev approveAndCall reception used primarily to pay gas with other tokens.\n    **/\n    function receiveApproval(address _from, uint256 _amount, address _token, bytes _data) \n      public\n    {\n        require(address(this).delegatecall(_data));\n        _from; _amount; _token;\n    }\n\n/** ******************************** ERC20 ********************************* **/\n\n    /**\n     * @dev Transfers coins from one address to another.\n     * @param _to The recipient of the transfer amount.\n     * @param _amount The amount of tokens to transfer.\n    **/\n    function transfer(address _to, uint256 _amount) \n      public\n    returns (bool success)\n    {\n        require(_transfer(msg.sender, _to, _amount));\n        return true;\n    }\n    \n    /**\n     * @dev An allowed address can transfer tokens from another's address.\n     * @param _from The owner of the tokens to be transferred.\n     * @param _to The address to which the tokens will be transferred.\n     * @param _amount The amount of tokens to be transferred.\n    **/\n    function transferFrom(address _from, address _to, uint _amount)\n      public\n    returns (bool success)\n    {\n        require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount);\n\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        require(_transfer(_from, _to, _amount));\n        return true;\n    }\n    \n    /**\n     * @dev Approves a wallet to transfer tokens on one's behalf.\n     * @param _spender The wallet approved to spend tokens.\n     * @param _amount The amount of tokens approved to spend.\n    **/\n    function approve(address _spender, uint256 _amount) \n      public\n    returns (bool success)\n    {\n        require(_approve(msg.sender, _spender, _amount));\n        return true;\n    }\n    \n    /**\n     * @dev Increases the allowed amount for spender from msg.sender.\n     * @param _spender The address to increase allowed amount for.\n     * @param _amount The amount of tokens to increase allowed amount by.\n    **/\n    function increaseApproval(address _spender, uint256 _amount) \n      public\n    returns (bool success)\n    {\n        require(_increaseApproval(msg.sender, _spender, _amount));\n        return true;\n    }\n    \n    /**\n     * @dev Decreases the allowed amount for spender from msg.sender.\n     * @param _spender The address to decrease allowed amount for.\n     * @param _amount The amount of tokens to decrease allowed amount by.\n    **/\n    function decreaseApproval(address _spender, uint256 _amount) \n      public\n    returns (bool success)\n    {\n        require(_decreaseApproval(msg.sender, _spender, _amount));\n        return true;\n    }\n    \n    /**\n     * @dev Used to approve an address and call a function on it in the same transaction.\n     * @dev _spender The address to be approved to spend COIN.\n     * @dev _amount The amount of COIN to be approved to spend.\n     * @dev _data The data to send to the called contract.\n    **/\n    function approveAndCall(address _spender, uint256 _amount, bytes _data) \n      public\n    returns (bool success) \n    {\n        require(_approve(msg.sender, _spender, _amount));\n        ApproveAndCallFallBack(_spender).receiveApproval(msg.sender, _amount, address(this), _data);\n        return true;\n    }\n\n/** ****************************** Internal ******************************** **/\n    \n    /**\n     * @dev Internal transfer for all functions that transfer.\n     * @param _from The address that is transferring coins.\n     * @param _to The receiving address of the coins.\n     * @param _amount The amount of coins being transferred.\n    **/\n    function _transfer(address _from, address _to, uint256 _amount)\n      internal\n    returns (bool success)\n    {\n        require (_to != address(0), \"Invalid transfer recipient address.\");\n        require(balances[_from] >= _amount, \"Sender does not have enough balance.\");\n        \n        balances[_from] = balances[_from].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        \n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n    \n    /**\n     * @dev Internal approve for all functions that require an approve.\n     * @param _owner The owner who is allowing spender to use their balance.\n     * @param _spender The wallet approved to spend tokens.\n     * @param _amount The amount of tokens approved to spend.\n    **/\n    function _approve(address _owner, address _spender, uint256 _amount) \n      internal\n    returns (bool success)\n    {\n        allowed[_owner][_spender] = _amount;\n        emit Approval(_owner, _spender, _amount);\n        return true;\n    }\n    \n    /**\n     * @dev Increases the allowed by \"_amount\" for \"_spender\" from \"owner\"\n     * @param _owner The address that tokens may be transferred from.\n     * @param _spender The address that may transfer these tokens.\n     * @param _amount The amount of tokens to transfer.\n    **/\n    function _increaseApproval(address _owner, address _spender, uint256 _amount)\n      internal\n    returns (bool success)\n    {\n        allowed[_owner][_spender] = allowed[_owner][_spender].add(_amount);\n        emit Approval(_owner, _spender, allowed[_owner][_spender]);\n        return true;\n    }\n    \n    /**\n     * @dev Decreases the allowed by \"_amount\" for \"_spender\" from \"_owner\"\n     * @param _owner The owner of the tokens to decrease allowed for.\n     * @param _spender The spender whose allowed will decrease.\n     * @param _amount The amount of tokens to decrease allowed by.\n    **/\n    function _decreaseApproval(address _owner, address _spender, uint256 _amount)\n      internal\n    returns (bool success)\n    {\n        if (allowed[_owner][_spender] <= _amount) allowed[_owner][_spender] = 0;\n        else allowed[_owner][_spender] = allowed[_owner][_spender].sub(_amount);\n        \n        emit Approval(_owner, _spender, allowed[_owner][_spender]);\n        return true;\n    }\n    \n/** ************************ Delegated Functions *************************** **/\n\n    /**\n     * @dev Called by delegate with a signed hash of the transaction data to allow a user\n     * @dev to transfer tokens without paying gas in Ether (they pay in COIN instead).\n     * @param _signature Signed hash of data for this transfer.\n     * @param _to The address to transfer COIN to.\n     * @param _value The amount of COIN to transfer.\n     * @param _gasPrice Price (IN COIN) that will be paid per unit of gas by user to \"delegate\".\n     * @param _nonce Nonce of the user's new transaction.\n    **/\n    function transferPreSigned(\n        bytes _signature,\n        address _to, \n        uint256 _value,\n        uint256 _gasPrice, \n        uint256 _nonce) \n      public\n    returns (bool) \n    {\n        // Log starting gas left of transaction for later gas price calculations.\n        uint256 gas = gasleft();\n        \n        // Recover signer address from signature; ensure address is valid.\n        address from = recoverPreSigned(_signature, transferSig, _to, _value, \"\", _gasPrice, _nonce);\n        require(from != address(0), \"Invalid signature provided.\");\n        \n        // Require the hash has not been used, declare it used, increment nonce.\n        bytes32 txHash = getPreSignedHash(transferSig, _to, _value, \"\", _gasPrice, _nonce);\n        require(!invalidHashes[from][txHash], \"Transaction has already been executed.\");\n        invalidHashes[from][txHash] = true;\n        nonces[from]++;\n        \n        // Internal transfer.\n        require(_transfer(from, _to, _value));\n\n        // If the delegate is charging, pay them for gas in COIN.\n        if (_gasPrice > 0) {\n            // 35000 because of base fee of 21000 and ~14000 for the fee transfer.\n            gas = 35000 + gas.sub(gasleft());\n            require(_transfer(from, tx.origin, _gasPrice.mul(gas)), \"Gas cost could not be paid.\");\n        }\n        \n        emit HashRedeemed(txHash, from);\n        return true;\n    }\n    \n    /**\n     * @dev Called by a delegate with signed hash to approve a transaction for user.\n     * @dev All variables equivalent to transfer except _to:\n     * @param _to The address that will be approved to transfer COIN from user's wallet.\n    **/\n    function approvePreSigned(\n        bytes _signature,\n        address _to, \n        uint256 _value,\n        uint256 _gasPrice, \n        uint256 _nonce) \n      public\n    returns (bool) \n    {\n        uint256 gas = gasleft();\n        address from = recoverPreSigned(_signature, approveSig, _to, _value, \"\", _gasPrice, _nonce);\n        require(from != address(0), \"Invalid signature provided.\");\n\n        bytes32 txHash = getPreSignedHash(approveSig, _to, _value, \"\", _gasPrice, _nonce);\n        require(!invalidHashes[from][txHash], \"Transaction has already been executed.\");\n        invalidHashes[from][txHash] = true;\n        nonces[from]++;\n        \n        require(_approve(from, _to, _value));\n\n        if (_gasPrice > 0) {\n            gas = 35000 + gas.sub(gasleft());\n            require(_transfer(from, tx.origin, _gasPrice.mul(gas)), \"Gas cost could not be paid.\");\n        }\n\n        emit HashRedeemed(txHash, from);\n        return true;\n    }\n    \n    /**\n     * @dev Used to increase the amount allowed for \"_to\" to spend from \"from\"\n     * @dev A bare approve allows potentially nasty race conditions when using a delegate.\n    **/\n    function increaseApprovalPreSigned(\n        bytes _signature,\n        address _to, \n        uint256 _value,\n        uint256 _gasPrice, \n        uint256 _nonce)\n      public\n    returns (bool) \n    {\n        uint256 gas = gasleft();\n        address from = recoverPreSigned(_signature, increaseApprovalSig, _to, _value, \"\", _gasPrice, _nonce);\n        require(from != address(0), \"Invalid signature provided.\");\n\n        bytes32 txHash = getPreSignedHash(increaseApprovalSig, _to, _value, \"\", _gasPrice, _nonce);\n        require(!invalidHashes[from][txHash], \"Transaction has already been executed.\");\n        invalidHashes[from][txHash] = true;\n        nonces[from]++;\n        \n        require(_increaseApproval(from, _to, _value));\n\n        if (_gasPrice > 0) {\n            gas = 35000 + gas.sub(gasleft());\n            require(_transfer(from, tx.origin, _gasPrice.mul(gas)), \"Gas cost could not be paid.\");\n        }\n        \n        emit HashRedeemed(txHash, from);\n        return true;\n    }\n    \n    /**\n     * @dev Added for the same reason as increaseApproval. Decreases to 0 if \"_value\" is greater than allowed.\n    **/\n    function decreaseApprovalPreSigned(\n        bytes _signature,\n        address _to, \n        uint256 _value, \n        uint256 _gasPrice, \n        uint256 _nonce) \n      public\n    returns (bool) \n    {\n        uint256 gas = gasleft();\n        address from = recoverPreSigned(_signature, decreaseApprovalSig, _to, _value, \"\", _gasPrice, _nonce);\n        require(from != address(0), \"Invalid signature provided.\");\n\n        bytes32 txHash = getPreSignedHash(decreaseApprovalSig, _to, _value, \"\", _gasPrice, _nonce);\n        require(!invalidHashes[from][txHash], \"Transaction has already been executed.\");\n        invalidHashes[from][txHash] = true;\n        nonces[from]++;\n        \n        require(_decreaseApproval(from, _to, _value));\n\n        if (_gasPrice > 0) {\n            gas = 35000 + gas.sub(gasleft());\n            require(_transfer(from, tx.origin, _gasPrice.mul(gas)), \"Gas cost could not be paid.\");\n        }\n\n        emit HashRedeemed(txHash, from);\n        return true;\n    }\n    \n    /**\n     * @dev approveAndCallPreSigned allows a user to approve a contract and call a function on it\n     * @dev in the same transaction. As with the other presigneds, a delegate calls this with signed data from user.\n     * @dev This function is the big reason we're using gas price and calculating gas use.\n     * @dev Using this with the investment contract can result in varying gas costs.\n     * @param _extraData The data to send to the contract.\n    **/\n    function approveAndCallPreSigned(\n        bytes _signature,\n        address _to, \n        uint256 _value,\n        bytes _extraData,\n        uint256 _gasPrice,\n        uint256 _nonce) \n      public\n    returns (bool) \n    {\n        uint256 gas = gasleft();\n        address from = recoverPreSigned(_signature, approveAndCallSig, _to, _value, _extraData, _gasPrice, _nonce);\n        require(from != address(0), \"Invalid signature provided.\");\n\n        bytes32 txHash = getPreSignedHash(approveAndCallSig, _to, _value, _extraData, _gasPrice, _nonce);\n        require(!invalidHashes[from][txHash], \"Transaction has already been executed.\");\n        invalidHashes[from][txHash] = true;\n        nonces[from]++;\n        \n        if (_value > 0) require(_approve(from, _to, _value));\n        ApproveAndCallFallBack(_to).receiveApproval(from, _value, address(this), _extraData);\n\n        if (_gasPrice > 0) {\n            gas = 35000 + gas.sub(gasleft());\n            require(_transfer(from, tx.origin, _gasPrice.mul(gas)), \"Gas cost could not be paid.\");\n        }\n        \n        emit HashRedeemed(txHash, from);\n        return true;\n    }\n\n/** *************************** Revoke PreSigned ************************** **/\n    \n    /**\n     * @dev Revoke hash without going through a delegate.\n     * @param _hashToRevoke The hash that you no longer want to be used.\n    **/\n    function revokeHash(bytes32 _hashToRevoke)\n      public\n    returns (bool)\n    {\n        invalidHashes[msg.sender][_hashToRevoke] = true;\n        nonces[msg.sender]++;\n        return true;\n    }\n    \n    /**\n     * @dev Revoke hash through a delegate.\n     * @param _signature The signature allowing this revocation.\n     * @param _hashToRevoke The hash that you would like revoked.\n     * @param _gasPrice The amount of token wei to be paid for each uint of gas.\n    **/\n    function revokeHashPreSigned(\n        bytes _signature,\n        bytes32 _hashToRevoke,\n        uint256 _gasPrice)\n      public\n    returns (bool)\n    {\n        uint256 gas = gasleft();\n        address from = recoverRevokeHash(_signature, _hashToRevoke, _gasPrice);\n        require(from != address(0), \"Invalid signature provided.\");\n        \n        bytes32 txHash = getRevokeHash(_hashToRevoke, _gasPrice);\n        require(!invalidHashes[from][txHash], \"Transaction has already been executed.\");\n        invalidHashes[from][txHash] = true;\n        nonces[from]++;\n        \n        invalidHashes[from][_hashToRevoke] = true;\n        \n        if (_gasPrice > 0) {\n            gas = 35000 + gas.sub(gasleft());\n            require(_transfer(from, tx.origin, _gasPrice.mul(gas)), \"Gas cost could not be paid.\");\n        }\n        \n        emit HashRedeemed(txHash, from);\n        return true;\n    }\n    \n    /**\n     * @dev Get hash for a revocation.\n     * @param _hashToRevoke The signature to be revoked.\n     * @param _gasPrice The amount to be paid to delegate for sending this tx.\n    **/\n    function getRevokeHash(bytes32 _hashToRevoke, uint256 _gasPrice)\n      public\n      view\n    returns (bytes32 txHash)\n    {\n        return keccak256(abi.encodePacked(address(this), revokeHashSig, _hashToRevoke, _gasPrice));\n    }\n\n    /**\n     * @dev Recover the address from a revocation hash.\n     * @param _hashToRevoke The hash to be revoked.\n     * @param _signature The signature allowing this revocation.\n     * @param _gasPrice The amount of token wei to be paid for each unit of gas.\n    **/\n    function recoverRevokeHash(bytes _signature, bytes32 _hashToRevoke, uint256 _gasPrice)\n      public\n      view\n    returns (address from)\n    {\n        return ecrecoverFromSig(getSignHash(getRevokeHash(_hashToRevoke, _gasPrice)), _signature);\n    }\n    \n/** ************************** PreSigned Constants ************************ **/\n\n    /**\n     * @dev Used in frontend and contract to get hashed data of any given pre-signed transaction.\n     * @param _to The address to transfer COIN to.\n     * @param _value The amount of COIN to be transferred.\n     * @param _extraData Extra data of tx if needed. Transfers and approves will leave this null.\n     * @param _function Function signature of the pre-signed function being used.\n     * @param _gasPrice The agreed-upon amount of COIN to be paid per unit of gas.\n     * @param _nonce The user's nonce of the new transaction.\n    **/\n    function getPreSignedHash(\n        bytes4 _function,\n        address _to, \n        uint256 _value,\n        bytes _extraData,\n        uint256 _gasPrice,\n        uint256 _nonce)\n      public\n      view\n    returns (bytes32 txHash) \n    {\n        return keccak256(abi.encodePacked(address(this), _function, _to, _value, _extraData, _gasPrice, _nonce));\n    }\n    \n    /**\n     * @dev Recover an address from a signed pre-signed hash.\n     * @param _sig The signed hash.\n     * @param _function The function signature for function being called.\n     * @param _to The address to transfer/approve/transferFrom/etc. tokens to.\n     * @param _value The amont of tokens to transfer/approve/etc.\n     * @param _extraData The extra data included in the transaction, if any.\n     * @param _gasPrice The amount of token wei to be paid to the delegate for each unit of gas.\n     * @param _nonce The user's nonce for this transaction.\n    **/\n    function recoverPreSigned(\n        bytes _sig,\n        bytes4 _function,\n        address _to,\n        uint256 _value,\n        bytes _extraData,\n        uint256 _gasPrice,\n        uint256 _nonce) \n      public\n      view\n    returns (address recovered)\n    {\n        return ecrecoverFromSig(getSignHash(getPreSignedHash(_function, _to, _value, _extraData, _gasPrice, _nonce)), _sig);\n    }\n    \n    /**\n     * @dev Add signature prefix to hash for recovery à la ERC191.\n     * @param _hash The hashed transaction to add signature prefix to.\n    **/\n    function getSignHash(bytes32 _hash)\n      public\n      pure\n    returns (bytes32 signHash)\n    {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash));\n    }\n\n    /**\n     * @dev Helps to reduce stack depth problems for delegations. Thank you to Bokky for this!\n     * @param hash The hash of signed data for the transaction.\n     * @param sig Contains r, s, and v for recovery of address from the hash.\n    **/\n    function ecrecoverFromSig(bytes32 hash, bytes sig) \n      public \n      pure \n    returns (address recoveredAddress) \n    {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        if (sig.length != 65) return address(0);\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            // Here we are loading the last 32 bytes. We exploit the fact that 'mload' will pad with zeroes if we overread.\n            // There is no 'mload8' to do this, but that would be nicer.\n            v := byte(0, mload(add(sig, 96)))\n        }\n        // Albeit non-transactional signatures are not specified by the YP, one would expect it to match the YP range of [27, 28]\n        // geth uses [0, 1] and some clients have followed. This might change, see https://github.com/ethereum/go-ethereum/issues/2053\n        if (v < 27) v += 27;\n        if (v != 27 && v != 28) return address(0);\n        return ecrecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Frontend queries to find the next nonce of the user so they can find the new nonce to send.\n     * @param _owner Address that will be sending the COIN.\n    **/\n    function getNonce(address _owner)\n      external\n      view\n    returns (uint256 nonce)\n    {\n        return nonces[_owner];\n    }\n\n/** ****************************** Constants ******************************* **/\n    \n    /**\n     * @dev Return total supply of token.\n    **/\n    function totalSupply() \n      external\n      view \n     returns (uint256)\n    {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Return balance of a certain address.\n     * @param _owner The address whose balance we want to check.\n    **/\n    function balanceOf(address _owner)\n      external\n      view \n    returns (uint256) \n    {\n        return balances[_owner];\n    }\n    \n    /**\n     * @dev Allowed amount for a user to spend of another's tokens.\n     * @param _owner The owner of the tokens approved to spend.\n     * @param _spender The address of the user allowed to spend the tokens.\n    **/\n    function allowance(address _owner, address _spender) \n      external\n      view \n    returns (uint256) \n    {\n        return allowed[_owner][_spender];\n    }\n    \n/** ****************************** onlyOwner ******************************* **/\n    \n    /**\n     * @dev Allow the owner to take ERC20 tokens off of this contract if they are accidentally sent.\n    **/\n    function tokenEscape(address _tokenContract)\n      external\n      onlyOwner\n    {\n        CoinvestToken lostToken = CoinvestToken(_tokenContract);\n        \n        uint256 stuckTokens = lostToken.balanceOf(address(this));\n        lostToken.transfer(owner, stuckTokens);\n    }\n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinvest\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sig\",\"type\":\"bytes\"},{\"name\":\"_function\",\"type\":\"bytes4\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"recoverPreSigned\",\"outputs\":[{\"name\":\"recovered\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"alterAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"transferPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"tokenEscape\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_hashToRevoke\",\"type\":\"bytes32\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"recoverRevokeHash\",\"outputs\":[{\"name\":\"from\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"approvePreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hashToRevoke\",\"type\":\"bytes32\"}],\"name\":\"revokeHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"decreaseApprovalPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_hashToRevoke\",\"type\":\"bytes32\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"revokeHashPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hashToRevoke\",\"type\":\"bytes32\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"getRevokeHash\",\"outputs\":[{\"name\":\"txHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_function\",\"type\":\"bytes4\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getPreSignedHash\",\"outputs\":[{\"name\":\"txHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"increaseApprovalPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getSignHash\",\"outputs\":[{\"name\":\"signHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"approveAndCallPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"ecrecoverFromSig\",\"outputs\":[{\"name\":\"recoveredAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCoinvest\",\"type\":\"address\"}],\"name\":\"transferCoinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"HashRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": ""
}