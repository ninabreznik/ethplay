{
  "address": "0xe87c957a697cda8d7610b17a93a529f0db6ca7fd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Oratium",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-02\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n}\n\ncontract ERC20 {\n    uint256 public totalSupply;\n\n    bool public transfersEnabled;\n\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract ERC223Basic {\n    uint256 public totalSupply;\n\n    bool public transfersEnabled;\n\n    function balanceOf(address who) public view returns (uint256);\n\n    function transfer(address to, uint256 value) public returns (bool);\n\n    function transfer(address to, uint256 value, bytes data) public;\n\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n\n}\n\ncontract ERC223ReceivingContract {\n    /**\n     * @dev Standard ERC223 function that will handle incoming token transfers.\n     *\n     * @param _from  Token sender address.\n     * @param _value Amount of tokens.\n     * @param _data  Transaction metadata.\n     */\n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\ncontract ERC223Token is ERC20, ERC223Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances; // List of user balances.\n\n    /**\n    * @dev protection against short address attack\n    */\n    modifier onlyPayloadSize(uint numwords) {\n        assert(msg.data.length == numwords * 32 + 4);\n        _;\n    }\n\n    /**\n     * @dev Transfer the specified amount of tokens to the specified address.\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\n     *      The token transfer fails if the recipient is a contract\n     *      but does not implement the `tokenFallback` function\n     *      or the fallback function to receive funds.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     * @param _data  Transaction metadata.\n     */\n    function transfer(address _to, uint _value, bytes _data) public onlyPayloadSize(3) {\n        // Standard function transfer similar to ERC20 transfer with no _data .\n        // Added due to backwards compatibility reasons .\n        uint codeLength;\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        require(transfersEnabled);\n\n        assembly {\n        // Retrieve the size of the code on target address, this needs assembly .\n            codeLength := extcodesize(_to)\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        if(codeLength>0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, _data);\n        }\n        emit Transfer(msg.sender, _to, _value, _data);\n    }\n\n    /**\n     * @dev Transfer the specified amount of tokens to the specified address.\n     *      This function works the same with the previous one\n     *      but doesn't contain `_data` param.\n     *      Added due to backwards compatibility reasons.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     */\n    function transfer(address _to, uint _value) public onlyPayloadSize(2) returns(bool) {\n        uint codeLength;\n        bytes memory empty;\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        require(transfersEnabled);\n\n        assembly {\n        // Retrieve the size of the code on target address, this needs assembly .\n            codeLength := extcodesize(_to)\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        if(codeLength>0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, empty);\n        }\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n\n    /**\n     * @dev Returns balance of the `_owner`.\n     *\n     * @param _owner   The address whose balance will be returned.\n     * @return balance Balance of the `_owner`.\n     */\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n\ncontract StandardToken is ERC223Token {\n\n    mapping(address => mapping(address => uint256)) internal allowed;\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        require(transfersEnabled);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public onlyPayloadSize(2) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\ncontract Oratium is StandardToken {\n\n    string public constant name = \"Oratium\";\n    string public constant symbol = \"ORT\";\n    uint8 public constant decimals = 18;\n    uint256 public constant INITIAL_SUPPLY = 950000000000000000000000000;\n    address public owner;\n    mapping (address => bool) public contractUsers;\n    bool public mintingFinished;\n    uint256 public tokenAllocated = 0;\n    // list of valid claim` \n    mapping (address => uint) public countClaimsToken;\n\n    uint256 public priceToken = 950000;\n    uint256 public priceClaim = 0.0005 ether;\n    uint256 public numberClaimToken = 500 * (10**uint256(decimals));\n    uint256 public startTimeDay = 1;\n    uint256 public endTimeDay = 86400;\n\n    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\n    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n    event TokenLimitReached(uint256 tokenRaised, uint256 purchasedToken);\n    event MinWeiLimitReached(address indexed sender, uint256 weiAmount);\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    constructor(address _owner) public {\n        totalSupply = INITIAL_SUPPLY;\n        owner = _owner;\n        //owner = msg.sender; // for test's\n        balances[owner] = INITIAL_SUPPLY;\n        transfersEnabled = true;\n        mintingFinished = false;\n    }\n\n    // fallback function can be used to buy tokens\n    function() payable public {\n        buyTokens(msg.sender);\n    }\n\n    function buyTokens(address _investor) public payable returns (uint256){\n        require(_investor != address(0));\n        uint256 weiAmount = msg.value;\n        uint256 tokens = validPurchaseTokens(weiAmount);\n        if (tokens == 0) {revert();}\n        tokenAllocated = tokenAllocated.add(tokens);\n        mint(_investor, tokens, owner);\n\n        emit TokenPurchase(_investor, weiAmount, tokens);\n        owner.transfer(weiAmount);\n        return tokens;\n    }\n\n    function validPurchaseTokens(uint256 _weiAmount) public returns (uint256) {\n        uint256 addTokens = _weiAmount.mul(priceToken);\n        if (_weiAmount < 0.05 ether) {\n            emit MinWeiLimitReached(msg.sender, _weiAmount);\n            return 0;\n        }\n        if (tokenAllocated.add(addTokens) > balances[owner]) {\n            emit TokenLimitReached(tokenAllocated, addTokens);\n            return 0;\n        }\n        return addTokens;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     * @return True if the operation was successful.\n     */\n    function finishMinting() onlyOwner canMint public returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n\n    function changeOwner(address _newOwner) onlyOwner public returns (bool){\n        require(_newOwner != address(0));\n        emit OwnerChanged(owner, _newOwner);\n        owner = _newOwner;\n        return true;\n    }\n\n    function enableTransfers(bool _transfersEnabled) onlyOwner public {\n        transfersEnabled = _transfersEnabled;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount, address _owner) canMint internal returns (bool) {\n        require(_to != address(0));\n        require(_amount <= balances[owner]);\n        require(!mintingFinished);\n        balances[_to] = balances[_to].add(_amount);\n        balances[_owner] = balances[_owner].sub(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(_owner, _to, _amount);\n        return true;\n    }\n\n    function claim() canMint public payable returns (bool) {\n        uint256 currentTime = now;\n        //currentTime = 1540037100; //for test's\n        require(validPurchaseTime(currentTime));\n        require(msg.value >= priceClaim);\n        address beneficiar = msg.sender;\n        require(beneficiar != address(0));\n        require(!mintingFinished);\n\n        uint256 amount = calcAmount(beneficiar);\n        require(amount <= balances[owner]);\n\n        balances[beneficiar] = balances[beneficiar].add(amount);\n        balances[owner] = balances[owner].sub(amount);\n        tokenAllocated = tokenAllocated.add(amount);\n        owner.transfer(msg.value);\n        emit Mint(beneficiar, amount);\n        emit Transfer(owner, beneficiar, amount);\n        return true;\n    }\n\n    //function calcAmount(address _beneficiar) canMint public returns (uint256 amount) { //for test's\n    function calcAmount(address _beneficiar) canMint internal returns (uint256 amount) {\n        if (countClaimsToken[_beneficiar] == 0) {\n            countClaimsToken[_beneficiar] = 1;\n        }\n        if (countClaimsToken[_beneficiar] >= 1000) {\n            return 0;\n        }\n        uint step = countClaimsToken[_beneficiar];\n        amount = numberClaimToken.mul(105 - 5*step).div(100);\n        countClaimsToken[_beneficiar] = countClaimsToken[_beneficiar].add(1);\n    }\n\n    function validPurchaseTime(uint256 _currentTime) canMint public view returns (bool) {\n        uint256 dayTime = _currentTime % 1 days;\n        if (startTimeDay <= dayTime && dayTime <=  endTimeDay) {\n            return true;\n        }\n        return false;\n    }\n\n    function changeTime(uint256 _newStartTimeDay, uint256 _newEndTimeDay) public {\n        require(0 < _newStartTimeDay && 0 < _newEndTimeDay);\n        startTimeDay = _newStartTimeDay;\n        endTimeDay = _newEndTimeDay;\n    }\n\n    /**\n     * Peterson's Law Protection\n     * Claim tokens\n     */\n    function claimTokensToOwner(address _token) public onlyOwner {\n        if (_token == 0x0) {\n            owner.transfer(address(this).balance);\n            return;\n        }\n        Oratium token = Oratium(_token);\n        uint256 balance = token.balanceOf(this);\n        token.transfer(owner, balance);\n        emit Transfer(_token, owner, balance);\n    }\n\n    function setPriceClaim(uint256 _newPriceClaim) external onlyOwner {\n        require(_newPriceClaim > 0);\n        priceClaim = _newPriceClaim;\n    }\n\n    function setNumberClaimToken(uint256 _newNumClaimToken) external onlyOwner {\n        require(_newNumClaimToken > 0);\n        numberClaimToken = _newNumClaimToken;\n    }\n\n}",
  "bytecode": "60806040526000600955620e7ef0600b556601c6bf52634000600c55601260ff16600a0a6101f402600d556001600e5562015180600f5534801561004257600080fd5b50604051602080613420833981018060405281019080805190602001909291905050506b0311d253316c79d37600000060028190555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506b0311d253316c79d37600000060046000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600360006101000a81548160ff0219169083151502179055506000600860006101000a81548160ff021916908315150217905550506132af806101716000396000f3006080604052600436106101b7576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b146101c357806306fdde03146101f2578063095ea7b31461028257806318160ddd146102e757806323b872dd146103125780632ff2e9dc146103975780632ff6fe76146103c25780632ffd68d3146103ed578063313ce56714610444578063347518c7146104755780634e71d92d146104ba57806354057aa6146104dc5780635931228b1461050957806364379150146105345780636618846314610561578063672781ed146105c6578063707188c1146105f157806370a082311461062857806378f7aeee1461067f5780637d64bcb4146106aa5780638da5cb5b146106d957806395d89b411461073057806396d8b050146107c0578063a6f9dae114610803578063a9059cbb1461085e578063ad001266146108c3578063be45fd621461091e578063bef97c87146109b1578063d73dd623146109e0578063d914471214610a45578063dd62ed3e14610a70578063ec8ac4d814610ae7578063ed93ca2614610b31578063f41e60c514610b5c578063fc38ce1914610b8b575b6101c033610bcc565b50005b3480156101cf57600080fd5b506101d8610d3a565b604051808215151515815260200191505060405180910390f35b3480156101fe57600080fd5b50610207610d4d565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561024757808201518184015260208101905061022c565b50505050905090810190601f1680156102745780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561028e57600080fd5b506102cd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d86565b604051808215151515815260200191505060405180910390f35b3480156102f357600080fd5b506102fc610e78565b6040518082815260200191505060405180910390f35b34801561031e57600080fd5b5061037d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e7e565b604051808215151515815260200191505060405180910390f35b3480156103a357600080fd5b506103ac611271565b6040518082815260200191505060405180910390f35b3480156103ce57600080fd5b506103d7611281565b6040518082815260200191505060405180910390f35b3480156103f957600080fd5b5061042e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611287565b6040518082815260200191505060405180910390f35b34801561045057600080fd5b5061045961129f565b604051808260ff1660ff16815260200191505060405180910390f35b34801561048157600080fd5b506104a0600480360381019080803590602001909291905050506112a4565b604051808215151515815260200191505060405180910390f35b6104c2611301565b604051808215151515815260200191505060405180910390f35b3480156104e857600080fd5b50610507600480360381019080803590602001909291905050506116f2565b005b34801561051557600080fd5b5061051e611767565b6040518082815260200191505060405180910390f35b34801561054057600080fd5b5061055f6004803603810190808035906020019092919050505061176d565b005b34801561056d57600080fd5b506105ac600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506117e2565b604051808215151515815260200191505060405180910390f35b3480156105d257600080fd5b506105db611a73565b6040518082815260200191505060405180910390f35b3480156105fd57600080fd5b506106266004803603810190808035906020019092919080359060200190929190505050611a79565b005b34801561063457600080fd5b50610669600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611aa6565b6040518082815260200191505060405180910390f35b34801561068b57600080fd5b50610694611aef565b6040518082815260200191505060405180910390f35b3480156106b657600080fd5b506106bf611af5565b604051808215151515815260200191505060405180910390f35b3480156106e557600080fd5b506106ee611bbd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561073c57600080fd5b50610745611be3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561078557808201518184015260208101905061076a565b50505050905090810190601f1680156107b25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156107cc57600080fd5b50610801600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c1c565b005b34801561080f57600080fd5b50610844600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f88565b604051808215151515815260200191505060405180910390f35b34801561086a57600080fd5b506108a9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506120e8565b604051808215151515815260200191505060405180910390f35b3480156108cf57600080fd5b50610904600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612481565b604051808215151515815260200191505060405180910390f35b34801561092a57600080fd5b506109af600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506124a1565b005b3480156109bd57600080fd5b506109c661289d565b604051808215151515815260200191505060405180910390f35b3480156109ec57600080fd5b50610a2b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506128b0565b604051808215151515815260200191505060405180910390f35b348015610a5157600080fd5b50610a5a612aac565b6040518082815260200191505060405180910390f35b348015610a7c57600080fd5b50610ad1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612ab2565b6040518082815260200191505060405180910390f35b610b1b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bcc565b6040518082815260200191505060405180910390f35b348015610b3d57600080fd5b50610b46612b51565b6040518082815260200191505060405180910390f35b348015610b6857600080fd5b50610b89600480360381019080803515159060200190929190505050612b57565b005b348015610b9757600080fd5b50610bb660048036038101908080359060200190929190505050612bd0565b6040518082815260200191505060405180910390f35b60008060008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515610c0c57600080fd5b349150610c1882612bd0565b90506000811415610c2857600080fd5b610c3d81600954612d2190919063ffffffff16565b600981905550610c708482600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612d3f565b508373ffffffffffffffffffffffffffffffffffffffff167fcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f8383604051808381526020018281526020019250505060405180910390a2600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610d2f573d6000803e3d6000fd5b508092505050919050565b600860009054906101000a900460ff1681565b6040805190810160405280600781526020017f4f72617469756d0000000000000000000000000000000000000000000000000081525081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60025481565b60006003600460208202016000369050141515610e9757fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515610ed357600080fd5b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515610f2157600080fd5b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515610fac57600080fd5b600360009054906101000a900460ff161515610fc757600080fd5b61101983600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461300d90919063ffffffff16565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110ae83600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d2190919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061118083600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461300d90919063ffffffff16565b600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b6b0311d253316c79d37600000081565b600b5481565b600a6020528060005260406000206000915090505481565b601281565b600080600860009054906101000a900460ff161515156112c357600080fd5b62015180838115156112d157fe5b06905080600e54111580156112e85750600f548111155b156112f657600191506112fb565b600091505b50919050565b600080600080600860009054906101000a900460ff1615151561132357600080fd5b42925061132f836112a4565b151561133a57600080fd5b600c54341015151561134b57600080fd5b339150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561138a57600080fd5b600860009054906101000a900460ff161515156113a657600080fd5b6113af82613026565b905060046000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561142157600080fd5b61147381600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d2190919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061152a8160046000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461300d90919063ffffffff16565b60046000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115a481600954612d2190919063ffffffff16565b600981905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015611612573d6000803e3d6000fd5b508173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040518082815260200191505060405180910390a28173ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a36001935050505090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561174e57600080fd5b60008111151561175d57600080fd5b80600c8190555050565b600f5481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117c957600080fd5b6000811115156117d857600080fd5b80600d8190555050565b600080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156118f3576000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611987565b611906838261300d90919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600c5481565b816000108015611a895750806000105b1515611a9457600080fd5b81600e8190555080600f819055505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60095481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b5357600080fd5b600860009054906101000a900460ff16151515611b6f57600080fd5b6001600860006101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f4f5254000000000000000000000000000000000000000000000000000000000081525081565b600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c7b57600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff161415611d1f57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015611d19573d6000803e3d6000fd5b50611f83565b8291508173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611dbd57600080fd5b505af1158015611dd1573d6000803e3d6000fd5b505050506040513d6020811015611de757600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611ebf57600080fd5b505af1158015611ed3573d6000803e3d6000fd5b505050506040513d6020811015611ee957600080fd5b810190808051906020019092919050505050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611fe657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561202257600080fd5b8173ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60405160405180910390a381600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b60008060606000600260046020820201600036905014151561210657fe5b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415151561214257600080fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054861115151561219057600080fd5b600360009054906101000a900460ff1615156121ab57600080fd5b863b935061220186600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461300d90919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061229686600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d2190919063ffffffff16565b600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600084111561240e578691508173ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3388866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156123a757808201518184015260208101905061238c565b50505050905090810190601f1680156123d45780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156123f557600080fd5b505af1158015612409573d6000803e3d6000fd5b505050505b8673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef886040518082815260200191505060405180910390a3600194505050505092915050565b60076020528060005260406000206000915054906101000a900460ff1681565b60008060036004602082020160003690501415156124bb57fe5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141515156124f757600080fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054851115151561254557600080fd5b600360009054906101000a900460ff16151561256057600080fd5b853b92506125b685600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461300d90919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061264b85600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d2190919063ffffffff16565b600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008311156127c3578591508173ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3387876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561275c578082015181840152602081019050612741565b50505050905090810190601f1680156127895780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156127aa57600080fd5b505af11580156127be573d6000803e3d6000fd5b505050505b8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1687876040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561285a57808201518184015260208101905061283f565b50505050905090810190601f1680156128875780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3505050505050565b600360009054906101000a900460ff1681565b600061294182600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d2190919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600d5481565b60006002600460208202016000369050141515612acb57fe5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b600e5481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612bb357600080fd5b80600360006101000a81548160ff02191690831515021790555050565b600080612be8600b548461323590919063ffffffff16565b905066b1a2bc2ec50000831015612c50573373ffffffffffffffffffffffffffffffffffffffff167f0f36f9ac72964373d449d48877bd9443e49c93c404464e4082e3de730bd3971b846040518082815260200191505060405180910390a260009150612d1b565b60046000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612cc782600954612d2190919063ffffffff16565b1115612d17577f77fcbebee5e7fc6abb70669438e18dae65fc2057b32b694851724c2726a35b6260095482604051808381526020018281526020019250505060405180910390a160009150612d1b565b8091505b50919050565b6000808284019050838110151515612d3557fe5b8091505092915050565b6000600860009054906101000a900460ff16151515612d5d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515612d9957600080fd5b60046000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515612e0957600080fd5b600860009054906101000a900460ff16151515612e2557600080fd5b612e7783600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d2190919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612f0c83600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461300d90919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885846040518082815260200191505060405180910390a28373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600190509392505050565b600082821115151561301b57fe5b818303905092915050565b600080600860009054906101000a900460ff1615151561304557600080fd5b6000600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156130d3576001600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6103e8600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515613126576000915061322f565b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050613196606461318883600502606903600d5461323590919063ffffffff16565b61326890919063ffffffff16565b91506131eb6001600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d2190919063ffffffff16565b600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b50919050565b60008082840290506000841480613256575082848281151561325357fe5b04145b151561325e57fe5b8091505092915050565b600080828481151561327657fe5b04905080915050929150505600a165627a7a72305820133ad09a35494c46390a01929ee18955cb0795e4e17dba465dbb1cd238b6c33b0029000000000000000000000000222c1890a53f6dee06aa976449f50c7bca619784",
  "constructorArguments": "000000000000000000000000222c1890a53f6dee06aa976449f50c7bca619784"
}