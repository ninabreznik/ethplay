{
  "address": "0x5d4cbcd30515d78370f35c5e45427dd576922225",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RigIdle",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-15\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        require(c >= a);\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        require(b <= a);\n        c = a - b;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n}\n\nlibrary GeometricSequence\n{\n    using SafeMath for uint256;\n    function sumOfNGeom(uint256 basePrice, uint256 owned, uint256 count) internal pure returns (uint256 price)\n    {\n        require(count > 0);\n        \n        uint256 multiplier = 5;\n        \n        uint256 basePower = owned / multiplier;\n        uint256 endPower = (owned + count) / multiplier;\n        \n        price = (basePrice * (2**basePower) * multiplier).mul((2**((endPower-basePower)+1))-1);\n        \n        price = price.sub((basePrice * 2**basePower) * (owned % multiplier));\n        price = price.sub((basePrice * 2**endPower) * (multiplier - ((owned + count) % multiplier)));\n    }\n}\n\ncontract ERC20 {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n//-----------------------------------------------------------------------\ncontract RigIdle is ERC20 {\n    using GeometricSequence for uint;\n    using SafeMath for uint;\n\n    struct MinerData \n    {\n        // rigs and their upgrades\n        mapping(uint256=>uint256)  rigCount;\n        mapping(int256=>uint256)   rigPctBonus;\n        mapping(int256=>uint256)   rigFlatBonus;\n        \n        uint256 money;\n        uint256 lastUpdateTime;\n        uint256 unclaimedPot;\n        uint256 lastPotClaimIndex;\n        uint256 prestigeLevel; \n        uint256 prestigeBonusPct;\n    }\n  \n    struct BoostData\n    {\n        int256  rigIndex;\n        uint256 flatBonus;\n        uint256 percentBonus;\n        \n        uint256 priceInWEI;\n        uint256 priceIncreasePct;\n        uint256 totalCount;\n        uint256 currentIndex;\n        address[] boostHolders;\n    }\n    \n    struct RigData\n    {\n        uint256 basePrice;\n        uint256 baseOutput;\n        uint256 unlockMultiplier;\n    }\n    \n    struct PrestigeData\n    {\n        uint256 price;\n        uint256 productionBonusPct;\n    }\n    \n    mapping(uint256=>RigData) private rigData;\n    uint256 private numberOfRigs;\n\n    // honey pot variables\n    uint256 private honeyPotAmount;\n    uint256 private devFund;\n    uint256 private nextPotDistributionTime;\n    mapping(address => mapping(uint256 => uint256)) private minerICOPerCycle;\n    uint256[] private honeyPotPerCycle;\n    uint256[] private globalICOPerCycle;\n    uint256 private cycleCount;\n    \n    //booster info\n    uint256 private numberOfBoosts;\n    mapping(uint256=>BoostData) private boostData;\n\n    //prestige info\n    uint256 private maxPrestige;\n    mapping(uint256=>PrestigeData) prestigeData;\n    \n    // miner info\n    mapping(address => MinerData) private miners;\n    mapping(uint256 => address)   private indexes;\n    uint256 private topindex;\n    \n    address private owner;\n    \n    // ERC20 functionality\n    mapping(address => mapping(address => uint256)) private allowed;\n    string public constant name  = \"RigWarsIdle\";\n    string public constant symbol = \"RIG\";\n    uint8 public constant decimals = 8;\n    uint256 private estimatedSupply;\n    \n    // referral\n    mapping(address=>address) referrals;\n    \n    // Data Store Management\n    mapping(uint256=>uint256) private prestigeFinalizeTime;\n    mapping(uint256=>uint256) private rigFinalizeTime;\n    mapping(uint256=>uint256) private boostFinalizeTime;\n    \n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    function RigIdle() public {\n        owner = msg.sender;\n        \n        //                   price,           prod.     unlockMultiplier\n        rigData[0] = RigData(32,              1,        1);\n        rigData[1] = RigData(256,             4,        1); \n        rigData[2] = RigData(25600,           64,       2); \n        rigData[3] = RigData(512000,          512,      1); \n        rigData[4] = RigData(10240000,        8192,     4); \n        rigData[5] = RigData(3000000000,      50000,    8); \n        rigData[6] = RigData(75000000000,     250000,   10); \n        rigData[7] = RigData(2500000000000,   1500000,  1);\n\n        numberOfRigs = 8;\n        \n        topindex = 0;\n        honeyPotAmount = 0;\n        devFund = 0;\n        nextPotDistributionTime = block.timestamp;\n        \n        miners[msg.sender].lastUpdateTime = block.timestamp;\n        miners[msg.sender].rigCount[0] = 1;\n      \n        indexes[topindex] = msg.sender;\n        ++topindex;\n        \n        boostData[0] = BoostData(-1, 0, 100, 0.1 ether, 5, 5, 0, new address[](5));\n        boostData[0].boostHolders[0] = 0xe57A18783640c9fA3c5e8E4d4b4443E2024A7ff9;\n        boostData[0].boostHolders[1] = 0xf0333B94F895eb5aAb3822Da376F9CbcfcE8A19C;\n        boostData[0].boostHolders[2] = 0x85abE8E3bed0d4891ba201Af1e212FE50bb65a26;\n        boostData[0].boostHolders[3] = 0x11e52c75998fe2E7928B191bfc5B25937Ca16741;\n        boostData[0].boostHolders[4] = 0x522273122b20212FE255875a4737b6F50cc72006;\n        \n        numberOfBoosts = 1;\n        \n        prestigeData[0] = PrestigeData(25000, 100);       // before lvl 3\n        prestigeData[1] = PrestigeData(25000000, 200);    // befroe lvl 5 ~30min with 30k prod\n        prestigeData[2] = PrestigeData(20000000000, 400); // befroe lvl 7 ~6h with 25-30 lvl6 rig\n        \n        maxPrestige = 3;\n        \n        honeyPotPerCycle.push(0);\n        globalICOPerCycle.push(1);\n        cycleCount = 0;\n        \n        estimatedSupply = 1000000000000000000000000000;\n    }\n    \n    //--------------------------------------------------------------------------\n    // Data access functions\n    //--------------------------------------------------------------------------\n    function GetTotalMinerCount() public constant returns (uint256 count)\n    {\n        count = topindex;\n    }\n    \n    function GetMinerAt(uint256 idx) public constant returns (address minerAddr)\n    {\n        require(idx < topindex);\n        minerAddr = indexes[idx];\n    }\n    \n    function GetProductionPerSecond(address minerAddr) public constant returns (uint256 personalProduction)\n    {\n        MinerData storage m = miners[minerAddr];\n        \n        personalProduction = 0;\n        uint256 productionSpeedFlat = m.rigFlatBonus[-1];\n        \n        for(uint8 j = 0; j < numberOfRigs; ++j)\n        {\n            if(m.rigCount[j] > 0)\n                personalProduction += (rigData[j].baseOutput + productionSpeedFlat + m.rigFlatBonus[j]) * m.rigCount[j] * (100 + m.rigPctBonus[j]);\n            else\n                break;\n        }\n        \n        personalProduction = (personalProduction * ((100 + m.prestigeBonusPct) * (100 + m.rigPctBonus[-1]))) / 1000000;\n    }\n    \n    function GetMinerData(address minerAddr) public constant returns \n        (uint256 money, uint256 lastupdate, uint256 prodPerSec, \n         uint256 unclaimedPot, uint256 globalFlat, uint256 globalPct, uint256 prestigeLevel)\n    {\n        money = miners[minerAddr].money;\n        lastupdate = miners[minerAddr].lastUpdateTime;\n        prodPerSec = GetProductionPerSecond(minerAddr);\n     \n        unclaimedPot = miners[minerAddr].unclaimedPot;\n        \n        globalFlat = miners[minerAddr].rigFlatBonus[-1];\n        globalPct  = miners[minerAddr].rigPctBonus[-1];\n        \n        prestigeLevel = miners[minerAddr].prestigeLevel;\n    }\n    \n    function GetMinerRigsCount(address minerAddr, uint256 startIdx) public constant returns (uint256[10] rigs, uint256[10] totalProduction)\n    {\n        uint256 i = startIdx;\n        MinerData storage m = miners[minerAddr];\n        \n        for(i = startIdx; i < (startIdx+10) && i < numberOfRigs; ++i)\n        {\n            rigs[i]      = miners[minerAddr].rigCount[i];\n            totalProduction[i] = (rigData[i].baseOutput + m.rigFlatBonus[-1] + m.rigFlatBonus[int256(i)]) * ((100 + m.rigPctBonus[int256(i)]) *\n              (100 + m.prestigeBonusPct) * (100 + m.rigPctBonus[-1])) / 1000000;\n        }\n    }\n    \n    function GetTotalRigCount() public constant returns (uint256)\n    {\n        return numberOfRigs;\n    }\n    \n    function GetRigData(uint256 idx) public constant returns (uint256 _basePrice, uint256 _baseOutput, uint256 _unlockMultiplier, uint256 _lockTime)\n    {\n        require(idx < numberOfRigs);\n        \n        _basePrice  = rigData[idx].basePrice;\n        _baseOutput = rigData[idx].baseOutput;\n        _unlockMultiplier  = rigData[idx].unlockMultiplier;\n        _lockTime = rigFinalizeTime[idx];\n    }\n    \n    function CalculatePriceofRigs(uint256 idx, uint256 owned, uint256 count) public constant returns (uint256)\n    {\n        if(idx >= numberOfRigs)\n            return 0;\n            \n        if(owned == 0)\n            return (rigData[idx].basePrice * rigData[idx].unlockMultiplier);\n            \n        return GeometricSequence.sumOfNGeom(rigData[idx].basePrice, owned, count); \n    }\n    \n    function GetMaxPrestigeLevel() public constant returns (uint256)\n    {\n        return maxPrestige;\n    }\n    \n    function GetPrestigeInfo(uint256 idx) public constant returns (uint256 price, uint256 bonusPct, uint256 _lockTime)\n    {\n        require(idx < maxPrestige);\n        \n        price = prestigeData[idx].price;\n        bonusPct = prestigeData[idx].productionBonusPct;\n        _lockTime = prestigeFinalizeTime[idx];\n    }\n  \n    function GetPotInfo() public constant returns (uint256 _honeyPotAmount, uint256 _devFunds, uint256 _nextDistributionTime)\n    {\n        _honeyPotAmount = honeyPotAmount;\n        _devFunds = devFund;\n        _nextDistributionTime = nextPotDistributionTime;\n    }\n    \n    function GetGlobalProduction() public constant returns (uint256 globalMoney, uint256 globalHashRate)\n    {\n        globalMoney = 0;\n        globalHashRate = 0;\n        uint i = 0;\n        for(i = 0; i < topindex; ++i)\n        {\n            MinerData storage m = miners[indexes[i]];\n            globalMoney += m.money;\n            globalHashRate += GetProductionPerSecond(indexes[i]);\n        }\n    }\n    \n    function GetBoosterCount() public constant returns (uint256)\n    {\n        return numberOfBoosts;\n    }\n  \n    function GetBoosterData(uint256 idx) public constant returns (int256 rigIdx, uint256 flatBonus, uint256 ptcBonus, \n        uint256 currentPrice, uint256 increasePct, uint256 maxNumber, uint256 _lockTime)\n    {\n        require(idx < numberOfBoosts);\n        \n        rigIdx       = boostData[idx].rigIndex;\n        flatBonus    = boostData[idx].flatBonus;\n        ptcBonus     = boostData[idx].percentBonus;\n        currentPrice = boostData[idx].priceInWEI;\n        increasePct  = boostData[idx].priceIncreasePct;\n        maxNumber    = boostData[idx].totalCount;\n        _lockTime    = boostFinalizeTime[idx];\n    }\n    \n    function HasBooster(address addr, uint256 startIdx) public constant returns (uint8[10] hasBoost)\n    { \n        require(startIdx < numberOfBoosts);\n        \n        uint j = 0;\n        \n        for( ;j < 10 && (j + startIdx) < numberOfBoosts; ++j)\n        {\n            BoostData storage b = boostData[j + startIdx];\n            hasBoost[j] = 0;\n            for(uint i = 0; i < b.totalCount; ++i)\n            {\n               if(b.boostHolders[i] == addr)\n                    hasBoost[j] = 1;\n            }\n        }\n        for( ;j < 10; ++j)\n        {\n            hasBoost[j] = 0;\n        }\n    }\n    \n    function GetCurrentICOCycle() public constant returns (uint256)\n    {\n        return cycleCount;\n    }\n    \n    function GetICOData(uint256 idx) public constant returns (uint256 ICOFund, uint256 ICOPot)\n    {\n        require(idx <= cycleCount);\n        ICOFund = globalICOPerCycle[idx];\n        if(idx < cycleCount)\n        {\n            ICOPot = honeyPotPerCycle[idx];\n        } else\n        {\n            ICOPot =  honeyPotAmount / 5; // actual day estimate\n        }\n    }\n    \n    function GetMinerICOData(address miner, uint256 idx) public constant returns (uint256 ICOFund, uint256 ICOShare, uint256 lastClaimIndex)\n    {\n        require(idx <= cycleCount);\n        ICOFund = minerICOPerCycle[miner][idx];\n        if(idx < cycleCount)\n        {\n            ICOShare = (honeyPotPerCycle[idx] * minerICOPerCycle[miner][idx]) / globalICOPerCycle[idx];\n        } else \n        {\n            ICOShare = (honeyPotAmount / 5) * minerICOPerCycle[miner][idx] / globalICOPerCycle[idx];\n        }\n        lastClaimIndex = miners[miner].lastPotClaimIndex;\n    }\n    \n    function GetMinerUnclaimedICOShare(address miner) public constant returns (uint256 unclaimedPot)\n    {\n        MinerData storage m = miners[miner];\n        \n        require(m.lastUpdateTime != 0);\n        require(m.lastPotClaimIndex <= cycleCount);\n        \n        uint256 i = m.lastPotClaimIndex;\n        uint256 limit = cycleCount;\n        \n        if((limit - i) > 30) // more than 30 iterations(days) afk\n            limit = i + 30;\n        \n        unclaimedPot = 0;\n        for(; i < cycleCount; ++i)\n        {\n            if(minerICOPerCycle[msg.sender][i] > 0)\n                unclaimedPot += (honeyPotPerCycle[i] * minerICOPerCycle[msg.sender][i]) / globalICOPerCycle[i];\n        }\n    }\n    \n    // -------------------------------------------------------------------------\n    // RigWars game handler functions\n    // -------------------------------------------------------------------------\n    function StartNewMiner(address referral) external\n    {\n        require(miners[msg.sender].lastUpdateTime == 0);\n        require(referral != msg.sender);\n        \n        miners[msg.sender].lastUpdateTime = block.timestamp;\n        miners[msg.sender].lastPotClaimIndex = cycleCount;\n        \n        miners[msg.sender].rigCount[0] = 1;\n        \n        indexes[topindex] = msg.sender;\n        ++topindex;\n        \n        if(referral != owner && referral != 0 && miners[referral].lastUpdateTime != 0)\n        {\n            referrals[msg.sender] = referral;\n            miners[msg.sender].rigCount[0] += 9;\n        }\n    }\n    \n    function UpgradeRig(uint8 rigIdx, uint256 count) external\n    {\n        require(rigIdx < numberOfRigs);\n        require(count > 0);\n        require(count <= 512);\n        require(rigFinalizeTime[rigIdx] < block.timestamp);\n        require(miners[msg.sender].lastUpdateTime != 0);\n        \n        MinerData storage m = miners[msg.sender];\n        \n        require(m.rigCount[rigIdx] > 0);\n        require(512 >= (m.rigCount[rigIdx] + count));\n        \n        UpdateMoney(msg.sender);\n     \n        // the base of geometrical sequence\n        uint256 price = GeometricSequence.sumOfNGeom(rigData[rigIdx].basePrice, m.rigCount[rigIdx], count); \n       \n        require(m.money >= price);\n        \n        m.rigCount[rigIdx] = m.rigCount[rigIdx] + count;\n        \n        m.money -= price;\n    }\n    \n    function UnlockRig(uint8 rigIdx) external\n    {\n        require(rigIdx < numberOfRigs);\n        require(rigIdx > 0);\n        require(rigFinalizeTime[rigIdx] < block.timestamp);\n        require(miners[msg.sender].lastUpdateTime != 0);\n        \n        MinerData storage m = miners[msg.sender];\n        \n        require(m.rigCount[rigIdx] == 0);\n        require(m.rigCount[rigIdx-1] > 0);\n        \n        UpdateMoney(msg.sender);\n        \n        uint256 price = rigData[rigIdx].basePrice * rigData[rigIdx].unlockMultiplier;\n        \n        require(m.money >= price);\n        \n        m.rigCount[rigIdx] = 1;\n        m.money -= price;\n    }\n    \n    function PrestigeUp() external\n    {\n        require(miners[msg.sender].lastUpdateTime != 0);\n        require(prestigeFinalizeTime[m.prestigeLevel] < block.timestamp);\n        \n        MinerData storage m = miners[msg.sender];\n        \n        require(m.prestigeLevel < maxPrestige);\n        \n        UpdateMoney(msg.sender);\n        \n        require(m.money >= prestigeData[m.prestigeLevel].price);\n        \n        if(referrals[msg.sender] != 0)\n        {\n            miners[referrals[msg.sender]].money += prestigeData[m.prestigeLevel].price / 2;\n        }\n        \n        for(uint256 i = 0; i < numberOfRigs; ++i)\n        {\n            if(m.rigCount[i] > 1)\n                m.rigCount[i] = m.rigCount[i] / 2; \n        }\n        \n        m.money = 0;\n        m.prestigeBonusPct += prestigeData[m.prestigeLevel].productionBonusPct;\n        m.prestigeLevel += 1;\n    }\n \n    function UpdateMoney(address addr) private\n    {\n        require(block.timestamp > miners[addr].lastUpdateTime);\n        \n        if(miners[addr].lastUpdateTime != 0)\n        {\n            MinerData storage m = miners[addr];\n            uint256 diff = block.timestamp - m.lastUpdateTime;\n            uint256 revenue = GetProductionPerSecond(addr);\n       \n            m.lastUpdateTime = block.timestamp;\n            if(revenue > 0)\n            {\n                revenue *= diff;\n                \n                m.money += revenue;\n            }\n        }\n    }\n    \n    //--------------------------------------------------------------------------\n    // BOOSTER handlers\n    //--------------------------------------------------------------------------\n    function BuyBooster(uint256 idx) external payable \n    {\n        require(miners[msg.sender].lastUpdateTime != 0);\n        require(idx < numberOfBoosts);\n        require(boostFinalizeTime[idx] < block.timestamp);\n        \n        BoostData storage b = boostData[idx];\n        \n        require(msg.value >= b.priceInWEI);\n        \n        for(uint i = 0; i < b.totalCount; ++i)\n            if(b.boostHolders[i] == msg.sender)\n                revert();\n                \n        address beneficiary = b.boostHolders[b.currentIndex];\n        \n        MinerData storage m = miners[beneficiary];\n        MinerData storage m2 = miners[msg.sender];\n        \n        // distribute the ETH\n        m.unclaimedPot += (msg.value * 9) / 10;\n        honeyPotAmount += msg.value / 20;\n        devFund += msg.value / 20;\n        \n        // increase price by X%\n        b.priceInWEI += (b.priceInWEI * b.priceIncreasePct) / 100;\n        \n        UpdateMoney(msg.sender);\n        UpdateMoney(beneficiary);\n        \n        // transfer ownership    \n        b.boostHolders[b.currentIndex] = msg.sender;\n        \n        // handle booster bonuses\n        if(m.rigFlatBonus[b.rigIndex] >= b.flatBonus){\n            m.rigFlatBonus[b.rigIndex] -= b.flatBonus;\n        } else {\n            m.rigFlatBonus[b.rigIndex] = 0;\n        }\n        \n        if(m.rigPctBonus[b.rigIndex] >= b.percentBonus) {\n            m.rigPctBonus[b.rigIndex] -= b.percentBonus;\n        } else {\n            m.rigPctBonus[b.rigIndex] = 0;\n        }\n        \n        m2.rigFlatBonus[b.rigIndex] += b.flatBonus;\n        m2.rigPctBonus[b.rigIndex] += b.percentBonus;\n        \n        // increase booster index\n        b.currentIndex += 1;\n        if(b.currentIndex >= b.totalCount)\n            b.currentIndex = 0;\n    }\n    \n    //--------------------------------------------------------------------------\n    // ICO/Pot share functions\n    //--------------------------------------------------------------------------\n    function ReleaseICO() external\n    {\n        require(miners[msg.sender].lastUpdateTime != 0);\n        require(nextPotDistributionTime <= block.timestamp);\n        require(honeyPotAmount > 0);\n        require(globalICOPerCycle[cycleCount] > 0);\n\n        nextPotDistributionTime = block.timestamp + 86400;\n\n        honeyPotPerCycle[cycleCount] = honeyPotAmount / 4; // 25% of the pot\n        \n        honeyPotAmount -= honeyPotAmount / 4;\n\n        honeyPotPerCycle.push(0);\n        globalICOPerCycle.push(0);\n        cycleCount = cycleCount + 1;\n    }\n    \n    function FundICO(uint amount) external\n    {\n        require(miners[msg.sender].lastUpdateTime != 0);\n        require(amount > 0);\n        \n        MinerData storage m = miners[msg.sender];\n        \n        UpdateMoney(msg.sender);\n        \n        require(m.money >= amount);\n        \n        m.money = (m.money).sub(amount);\n        \n        globalICOPerCycle[cycleCount] = globalICOPerCycle[cycleCount].add(uint(amount));\n        minerICOPerCycle[msg.sender][cycleCount] = minerICOPerCycle[msg.sender][cycleCount].add(uint(amount));\n    }\n    \n    function WithdrawICOEarnings() external\n    {\n        MinerData storage m = miners[msg.sender];\n        \n        require(miners[msg.sender].lastUpdateTime != 0);\n        require(miners[msg.sender].lastPotClaimIndex < cycleCount);\n        \n        uint256 i = m.lastPotClaimIndex;\n        uint256 limit = cycleCount;\n        \n        if((limit - i) > 30) // more than 30 iterations(days) afk\n            limit = i + 30;\n        \n        m.lastPotClaimIndex = limit;\n        for(; i < cycleCount; ++i)\n        {\n            if(minerICOPerCycle[msg.sender][i] > 0)\n                m.unclaimedPot += (honeyPotPerCycle[i] * minerICOPerCycle[msg.sender][i]) / globalICOPerCycle[i];\n        }\n    }\n    \n    //--------------------------------------------------------------------------\n    // Data Storage Management\n    //--------------------------------------------------------------------------\n     function AddNewBooster(uint256 idx, int256 _rigType, uint256 _flatBonus, uint256 _pctBonus, \n      uint256 _ETHPrice, uint256 _priceIncreasePct, uint256 _totalCount) external\n    {\n        require(msg.sender == owner);\n        require(idx <= numberOfBoosts);\n        \n        if(idx < numberOfBoosts)\n            require(boostFinalizeTime[idx] > block.timestamp); \n            \n        boostFinalizeTime[idx] = block.timestamp + 7200;\n        \n        boostData[idx].rigIndex = _rigType;\n        boostData[idx].flatBonus = _flatBonus;\n        boostData[idx].percentBonus = _pctBonus;\n        \n        boostData[idx].priceInWEI = _ETHPrice;\n        boostData[idx].priceIncreasePct = _priceIncreasePct;\n        boostData[idx].totalCount = _totalCount;\n        boostData[idx].currentIndex = 0;\n        \n        boostData[idx].boostHolders = new address[](_totalCount);\n        \n        for(uint256 i = 0; i < _totalCount; ++i)\n            boostData[idx].boostHolders[i] = owner;\n        \n        if(idx == numberOfBoosts)    \n            numberOfBoosts += 1;\n    }\n    \n    function AddorModifyRig(uint256 idx, uint256 _basePrice, uint256 _baseOutput, uint256 _unlockMultiplier) external\n    {\n        require(msg.sender == owner);\n        require(idx <= numberOfRigs);\n        \n        if(idx < numberOfRigs)\n            require(rigFinalizeTime[idx] > block.timestamp); \n            \n        rigFinalizeTime[idx] = block.timestamp + 7200;\n        \n        rigData[idx].basePrice     = _basePrice;\n        rigData[idx].baseOutput    = _baseOutput;\n        rigData[idx].unlockMultiplier = _unlockMultiplier;\n        \n        if(idx == numberOfRigs)\n            numberOfRigs += 1;\n    }\n    \n    function AddNewPrestige(uint256 idx, uint256 _price, uint256 _bonusPct) public\n    {\n        require(msg.sender == owner);\n        require(idx <= maxPrestige);\n        \n        if(idx < maxPrestige)\n            require(prestigeFinalizeTime[idx] > block.timestamp); \n            \n        prestigeFinalizeTime[idx] = block.timestamp + 7200;\n        \n        prestigeData[idx].price = _price;\n        prestigeData[idx].productionBonusPct = _bonusPct;\n        \n        if(idx == maxPrestige)\n            maxPrestige += 1;\n    }\n    \n    //--------------------------------------------------------------------------\n    // ETH handler functions\n    //--------------------------------------------------------------------------\n    function WithdrawPotShare() public\n    {\n        MinerData storage m = miners[msg.sender];\n        \n        require(m.unclaimedPot > 0);\n        require(m.lastUpdateTime != 0);\n        \n        uint256 amntToSend = m.unclaimedPot;\n        m.unclaimedPot = 0;\n        \n        if(msg.sender.send(amntToSend))\n        {\n            m.unclaimedPot = 0;\n        }\n    }\n    \n    function WithdrawDevFunds() public\n    {\n        require(msg.sender == owner);\n\n        if(owner.send(devFund))\n        {\n            devFund = 0;\n        }\n    }\n    \n    // fallback payment to pot\n    function() public payable {\n         devFund += msg.value;\n    }\n    \n    //--------------------------------------------------------------------------\n    // ERC20 support\n    //--------------------------------------------------------------------------\n    function totalSupply() public constant returns(uint256) {\n        return estimatedSupply;\n    }\n    \n    function balanceOf(address miner) public constant returns(uint256) {\n        return miners[miner].money;\n    }\n    \n     function transfer(address recipient, uint256 amount) public returns (bool) {\n        require(amount <= miners[msg.sender].money);\n        \n        miners[msg.sender].money = (miners[msg.sender].money).sub(amount);\n        miners[recipient].money  = (miners[recipient].money).add(amount);\n        \n        emit Transfer(msg.sender, recipient, amount);\n        return true;\n    }\n    \n    function transferFrom(address miner, address recipient, uint256 amount) public returns (bool) {\n        require(amount <= allowed[miner][msg.sender] && amount <= balanceOf(miner));\n        \n        miners[miner].money        = (miners[miner].money).sub(amount);\n        miners[recipient].money    = (miners[recipient].money).add(amount);\n        allowed[miner][msg.sender] = (allowed[miner][msg.sender]).sub(amount);\n        \n        emit Transfer(miner, recipient, amount);\n        return true;\n    }\n    \n    function approve(address approvee, uint256 amount) public returns (bool){\n        require(amount <= miners[msg.sender].money);\n        \n        allowed[msg.sender][approvee] = amount;\n        emit Approval(msg.sender, approvee, amount);\n        return true;\n    }\n    \n    function allowance(address miner, address approvee) public constant returns(uint256){\n        return allowed[miner][approvee];\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"},{\"name\":\"owned\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"CalculatePriceofRigs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"minerAddr\",\"type\":\"address\"}],\"name\":\"GetProductionPerSecond\",\"outputs\":[{\"name\":\"personalProduction\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"approvee\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"startIdx\",\"type\":\"uint256\"}],\"name\":\"HasBooster\",\"outputs\":[{\"name\":\"hasBoost\",\"type\":\"uint8[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"GetRigData\",\"outputs\":[{\"name\":\"_basePrice\",\"type\":\"uint256\"},{\"name\":\"_baseOutput\",\"type\":\"uint256\"},{\"name\":\"_unlockMultiplier\",\"type\":\"uint256\"},{\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"StartNewMiner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"miner\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawPotShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetTotalRigCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"miner\",\"type\":\"address\"}],\"name\":\"GetMinerUnclaimedICOShare\",\"outputs\":[{\"name\":\"unclaimedPot\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMaxPrestigeLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"BuyBooster\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rigIdx\",\"type\":\"uint8\"}],\"name\":\"UnlockRig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetGlobalProduction\",\"outputs\":[{\"name\":\"globalMoney\",\"type\":\"uint256\"},{\"name\":\"globalHashRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_bonusPct\",\"type\":\"uint256\"}],\"name\":\"AddNewPrestige\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"},{\"name\":\"_basePrice\",\"type\":\"uint256\"},{\"name\":\"_baseOutput\",\"type\":\"uint256\"},{\"name\":\"_unlockMultiplier\",\"type\":\"uint256\"}],\"name\":\"AddorModifyRig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetPotInfo\",\"outputs\":[{\"name\":\"_honeyPotAmount\",\"type\":\"uint256\"},{\"name\":\"_devFunds\",\"type\":\"uint256\"},{\"name\":\"_nextDistributionTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rigIdx\",\"type\":\"uint8\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"UpgradeRig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"miner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetBoosterCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawDevFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"minerAddr\",\"type\":\"address\"},{\"name\":\"startIdx\",\"type\":\"uint256\"}],\"name\":\"GetMinerRigsCount\",\"outputs\":[{\"name\":\"rigs\",\"type\":\"uint256[10]\"},{\"name\":\"totalProduction\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetTotalMinerCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetCurrentICOCycle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"miner\",\"type\":\"address\"},{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"GetMinerICOData\",\"outputs\":[{\"name\":\"ICOFund\",\"type\":\"uint256\"},{\"name\":\"ICOShare\",\"type\":\"uint256\"},{\"name\":\"lastClaimIndex\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"GetPrestigeInfo\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"bonusPct\",\"type\":\"uint256\"},{\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"GetICOData\",\"outputs\":[{\"name\":\"ICOFund\",\"type\":\"uint256\"},{\"name\":\"ICOPot\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"minerAddr\",\"type\":\"address\"}],\"name\":\"GetMinerData\",\"outputs\":[{\"name\":\"money\",\"type\":\"uint256\"},{\"name\":\"lastupdate\",\"type\":\"uint256\"},{\"name\":\"prodPerSec\",\"type\":\"uint256\"},{\"name\":\"unclaimedPot\",\"type\":\"uint256\"},{\"name\":\"globalFlat\",\"type\":\"uint256\"},{\"name\":\"globalPct\",\"type\":\"uint256\"},{\"name\":\"prestigeLevel\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"GetMinerAt\",\"outputs\":[{\"name\":\"minerAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawICOEarnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"miner\",\"type\":\"address\"},{\"name\":\"approvee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ReleaseICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"GetBoosterData\",\"outputs\":[{\"name\":\"rigIdx\",\"type\":\"int256\"},{\"name\":\"flatBonus\",\"type\":\"uint256\"},{\"name\":\"ptcBonus\",\"type\":\"uint256\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"name\":\"increasePct\",\"type\":\"uint256\"},{\"name\":\"maxNumber\",\"type\":\"uint256\"},{\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PrestigeUp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"},{\"name\":\"_rigType\",\"type\":\"int256\"},{\"name\":\"_flatBonus\",\"type\":\"uint256\"},{\"name\":\"_pctBonus\",\"type\":\"uint256\"},{\"name\":\"_ETHPrice\",\"type\":\"uint256\"},{\"name\":\"_priceIncreasePct\",\"type\":\"uint256\"},{\"name\":\"_totalCount\",\"type\":\"uint256\"}],\"name\":\"AddNewBooster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "13da86008ba1c6922daee3e07db95305ef49ebced9f5467a0b8613fcc6b343ea"
}