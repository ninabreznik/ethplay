{
  "address": "0x1ca27f9f05953525f1cfaeada8673153c78ccdf3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Rainmaker",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-17\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title Helps contracts guard agains reentrancy attacks.\n * @author Remco Bloemen <[email protected]π.com>\n * @notice If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /**\n   * @dev We use a single lock for the whole contract.\n   */\n  bool private reentrancyLock = false;\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * @notice If you mark a function `nonReentrant`, you should also\n   * mark it `external`. Calling one nonReentrant function from\n   * another is not supported. Instead, you can implement a\n   * `private` function doing the actual work, and a `external`\n   * wrapper marked as `nonReentrant`.\n   */\n  modifier nonReentrant() {\n    require(!reentrancyLock);\n    reentrancyLock = true;\n    _;\n    reentrancyLock = false;\n  }\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint supply);\n    function balanceOf(address _owner) external view returns (uint balance);\n    function transfer(address _to, uint _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n    function approve(address _spender, uint _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\n    function decimals() external view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ncontract Rainmaker is Ownable, ReentrancyGuard {\n    function letItRain(address[] _to, uint[] _value) nonReentrant onlyOwner public payable returns (bool _success) {\n        for (uint8 i = 0; i < _to.length; i++){\n            uint amount = _value[i] * 1 finney;\n            _to[i].transfer(amount);\n        }\n        return true;\n    }\n    \n    //If accidentally tokens are transferred to this\n    //contract. They can be withdrawn by the following interface.\n    function withdrawERC20Token(ERC20 anyToken) public onlyOwner nonReentrant returns(bool){\n        if( anyToken != address(0x0) ) {\n            assert(anyToken.transfer(owner, anyToken.balanceOf(this)));\n        }\n        return true;\n    }\n\n    //ETH cannot get locked in this contract. If it does, this can be used to withdraw\n    //the locked ether.\n    function withdrawEther() public onlyOwner nonReentrant returns(bool){\n        if(address(this).balance > 0){\n            owner.transfer(address(this).balance);\n        }        \n        return true;\n    }\n}",
  "bytecode": "608060405260008054600160a860020a03191633179055610637806100256000396000f3006080604052600436106100775763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633bdebbe1811461007c578063715018a6146100b15780637362377b146100c85780638da5cb5b146100dd578063d8267fef1461010e578063f2fde38b1461018f575b600080fd5b34801561008857600080fd5b5061009d600160a060020a03600435166101b0565b604080519115158252519081900360200190f35b3480156100bd57600080fd5b506100c6610355565b005b3480156100d457600080fd5b5061009d6103c1565b3480156100e957600080fd5b506100f2610461565b60408051600160a060020a039092168252519081900360200190f35b6040805160206004803580820135838102808601850190965280855261009d95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506104709650505050505050565b34801561019b57600080fd5b506100c6600160a060020a036004351661056b565b60008054600160a060020a031633146101c857600080fd5b60005460a060020a900460ff16156101df57600080fd5b6000805460a060020a60ff02191660a060020a179055600160a060020a0382161561033e5760008054604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038087169463a9059cbb949091169285926370a0823192602480840193602093929083900390910190829087803b15801561027857600080fd5b505af115801561028c573d6000803e3d6000fd5b505050506040513d60208110156102a257600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561030a57600080fd5b505af115801561031e573d6000803e3d6000fd5b505050506040513d602081101561033457600080fd5b5051151561033e57fe5b50506000805460a060020a60ff0219169055600190565b600054600160a060020a0316331461036c57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60008054600160a060020a031633146103d957600080fd5b60005460a060020a900460ff16156103f057600080fd5b6000805460a060020a60ff02191660a060020a1781553031111561044b5760008054604051600160a060020a0390911691303180156108fc02929091818181858888f19350505050158015610449573d6000803e3d6000fd5b505b5060016000805460a060020a60ff021916905590565b600054600160a060020a031681565b600080548190819060a060020a900460ff161561048c57600080fd5b6000805460a060020a60ff02191660a060020a179081905533600160a060020a03909116146104ba57600080fd5b600091505b84518260ff16101561055057838260ff168151811015156104dc57fe5b9060200190602002015166038d7ea4c68000029050848260ff1681518110151561050257fe5b90602001906020020151600160a060020a03166108fc829081150290604051600060405180830381858888f19350505050158015610544573d6000803e3d6000fd5b506001909101906104bf565b50506000805460a060020a60ff021916905550600192915050565b600054600160a060020a0316331461058257600080fd5b61058b8161058e565b50565b600160a060020a03811615156105a357600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058200c1ceb52482ad2631995ef41fefbac59e683d5e731587160712d6b6e14f29c960029"
}