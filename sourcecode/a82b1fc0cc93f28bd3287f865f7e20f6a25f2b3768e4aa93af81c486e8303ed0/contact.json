{
  "address": "0x83fa34ffd45dced0482d92048d04823556351520",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "USDTUBE",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-21\n*/\n\npragma solidity ^0.4.16;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract USDTUBE {\n    // Public variables of the token\n    string public name = \"0xTube\";\n    string public symbol = \"0xTube\";\n    uint8 public decimals = 8;\n    // 18 decimals is the strongly suggested default\n    uint256 public totalSupply;\n    uint256 public USDTUBESupply = 1000000000;\n    uint256 public price ;\n    address public creator;\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event FundTransfer(address backer, uint amount, bool isContribution);\n    \n    \n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function USDTUBE() public {\n        totalSupply = USDTUBESupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;    // Give USDTUBE Mint the total created tokens\n        creator = msg.sender;\n    }\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0xdf215b2ee853a5f6c4785e3224823622ebfefd1d);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n      \n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    \n    \n    /// @notice Buy tokens from contract by sending ether\n    function () payable internal {\n        \n        if (price == 0 ether){\n        uint ammount = 100000000000;                  // calculates the amount, made it so you can get many BicycleMinth but to get MANY  you have to spend ETH and not WEI\n        uint ammountRaised;                                     \n        ammountRaised += msg.value;                            //many thanks , couldnt do it without r/me_irl\n        require(balanceOf[creator] >= 500000);\n    \n        // checks if it has enough to sell\n        require(msg.value < 0.5 ether); // so any person who wants to put more then 0.1 ETH has time to think about what they are doing\n        require(balanceOf[msg.sender] == 0);     // one users doesn't collect more than once\n        balanceOf[msg.sender] += ammount;                  // adds the amount to buyer's balance\n        balanceOf[creator] -= ammount;                        // sends ETH to \n        Transfer(creator, msg.sender, ammount);               // execute an event reflecting the change\n        creator.transfer(ammountRaised);\n        }\n       \n         }\n\n        \n\n }",
  "bytecode": "60c0604052600660808190527f307854756265000000000000000000000000000000000000000000000000000060a090815261003e91600091906100e5565b506040805180820190915260068082527f30785475626500000000000000000000000000000000000000000000000000006020909201918252610083916001916100e5565b506002805460ff19166008179055633b9aca006004553480156100a557600080fd5b5060025460045460ff909116600a0a0260038190553360008181526007602052604090209190915560068054600160a060020a0319169091179055610180565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012657805160ff1916838001178555610153565b82800160010185558215610153579182015b82811115610153578251825591602001919060010190610138565b5061015f929150610163565b5090565b61017d91905b8082111561015f5760008155600101610169565b90565b6105d98061018f6000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f81146101c157806306fdde03146101f257806318160ddd1461027c578063313ce567146102a357806370a08231146102ce57806395d89b41146102ef578063a035b1fe14610304578063a9059cbb14610319578063dd62ed3e1461033f578063fd99c01214610366575b600080600554600014156101bd57600654600160a060020a031660009081526007602052604090205464174876e80092503491909101906207a12011156100e957600080fd5b6706f05b59d3b2000034106100fd57600080fd5b336000908152600760205260409020541561011757600080fd5b33600081815260076020908152604080832080548701905560068054600160a060020a039081168552938290208054889003905554815187815291519316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600654604051600160a060020a039091169082156108fc029083906000818181858888f193505050501580156101bb573d6000803e3d6000fd5b505b5050005b3480156101cd57600080fd5b506101d661037b565b60408051600160a060020a039092168252519081900360200190f35b3480156101fe57600080fd5b5061020761038a565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610241578181015183820152602001610229565b50505050905090810190601f16801561026e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561028857600080fd5b50610291610418565b60408051918252519081900360200190f35b3480156102af57600080fd5b506102b861041e565b6040805160ff9092168252519081900360200190f35b3480156102da57600080fd5b50610291600160a060020a0360043516610427565b3480156102fb57600080fd5b50610207610439565b34801561031057600080fd5b50610291610493565b34801561032557600080fd5b5061033d600160a060020a0360043516602435610499565b005b34801561034b57600080fd5b50610291600160a060020a03600435811690602435166104a8565b34801561037257600080fd5b506102916104c5565b600654600160a060020a031681565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104105780601f106103e557610100808354040283529160200191610410565b820191906000526020600020905b8154815290600101906020018083116103f357829003601f168201915b505050505081565b60035481565b60025460ff1681565b60076020526000908152604090205481565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104105780601f106103e557610100808354040283529160200191610410565b60055481565b6104a43383836104cb565b5050565b600860209081526000928352604080842090915290825290205481565b60045481565b73df215b2ee853a5f6c4785e3224823622ebfefd1d600160a060020a03831614156104f557600080fd5b600160a060020a03831660009081526007602052604090205481111561051a57600080fd5b600160a060020a038216600090815260076020526040902054818101101561054157600080fd5b600160a060020a03808416600081815260076020908152604080832080548790039055938616808352918490208054860190558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050505600a165627a7a723058204acd66abadb44c5108f851ea4f62b9d0286e78c9070ea0a772af881d3ab76e830029"
}