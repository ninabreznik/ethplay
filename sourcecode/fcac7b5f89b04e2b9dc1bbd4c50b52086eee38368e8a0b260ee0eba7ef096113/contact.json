{
  "address": "0x989eb9629225b8c06997ef0577cc08535fd789f9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "P3DRaffle",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-11\n*/\n\npragma solidity ^0.4.24;\n// Game by spielley\n// If you want a cut of the 1% dev share on P3D divs\n// buy shares at => 0xfaAe60F2CE6491886C9f7C9356bd92F688cA66a1\n// P3D masternode rewards for the UI builder\n// Raffle3D v 1.04\n// spielley is not liable for any known or unknown bugs contained by contract\n// This is not a TEAM JUST product!\n\n// Concept:\n// buy a raffle ticket\n// => lifetime possible to win a round payout and a chance to win the jackpot\n// \n// Have fun, these games are purely intended for fun.\n// \n// Warning! do not simpply send eth to the contract, this will result in the\n// eth being stuck at contract => restriction using P3D in this version\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = 0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\ninterface SPASMInterface  {\n    function() payable external;\n    function disburse() external  payable;\n}\ninterface HourglassInterface  {\n    function() payable external;\n    function buy(address _playerAddress) payable external returns(uint256);\n    function sell(uint256 _amountOfTokens) external;\n    function reinvest() external;\n    function withdraw() external;\n    function exit() external;\n    function dividendsOf(address _playerAddress) external view returns(uint256);\n    function balanceOf(address _playerAddress) external view returns(uint256);\n    function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);\n    function stakingRequirement() external view returns(uint256);\n}\ncontract P3DRaffle is  Owned {\n    using SafeMath for uint;\n    HourglassInterface constant P3Dcontract_ = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe); \n   function harvestabledivs()\n        view\n        public\n        returns(uint256)\n    {\n        return ( P3Dcontract_.dividendsOf(address(this)))  ;\n    }\n    function raffleinfo(uint256 rafflenumber)\n        view\n        public\n        returns(uint256 drawblock,    uint256 ticketssold,\n    uint256 result,\n    uint256 resultjackpot,\n    bool validation,\n    bool wasabletovalidate,\n    address rafflevanity )\n    {\n        return (Raffles[rafflenumber].drawblock,    Raffles[rafflenumber].ticketssold,\n    Raffles[rafflenumber].result,\n    Raffles[rafflenumber].resultjackpot,\n    Raffles[rafflenumber].validation,\n    Raffles[rafflenumber].wasabletovalidate,\n    Raffles[rafflenumber].rafflevanity\n            )  ;\n    }\n    function FetchVanity(address player) view public returns(string)\n    {\n        return Vanity[player];\n    }\n    function devfeesoutstanding() view public returns(uint256)\n    {\n        return devfee;\n    }\n    function nextlotnumber() view public returns(uint256)\n    {\n        return (nextlotnr);\n    }\n    function nextrafflenumber() view public returns(uint256)\n    {\n        return (nextrafflenr);\n    }\n    function pots() pure public returns(uint256 rafflepot, uint256 jackpot)\n    {\n        return (rafflepot, jackpot);\n    }\n    struct Raffle {\n    uint256 drawblock;\n    uint256 ticketssold;\n    uint256 result;\n    uint256 resultjackpot;\n    bool validation;\n    bool wasabletovalidate;\n    address rafflevanity;\n}\n\n    uint256 public nextlotnr;\n    uint256 public nextrafflenr;\n    mapping(uint256 => address) public ticketsales;\n    mapping(uint256 => Raffle) public Raffles;\n    mapping(address => string) public Vanity;\n    uint256 public rafflepot;//90%\n    uint256 public jackpot; //9%\n    uint256 public devfee;//1%\n    SPASMInterface constant SPASM_ = SPASMInterface(0xfaAe60F2CE6491886C9f7C9356bd92F688cA66a1);\n    \n    constructor() public{\n    Raffles[0].validation = true;\n    nextrafflenr++;    \n}\n    \n    function buytickets(uint256 amount ,address masternode) public payable{\n    require(msg.value >= 10 finney * amount);\n    require(amount > 0);\n    uint256 counter;\n    address sender  = msg.sender;\n    for(uint i=0; i< amount; i++)\n        {\n            counter = i + nextlotnr;\n            ticketsales[counter] = sender;\n        }\n    nextlotnr += i;\n    P3Dcontract_.buy.value(msg.value)(masternode);\n}\nfunction fetchdivstopot () public{\n    uint256 divs = harvestabledivs();\n    uint256 base = divs.div(100);\n    \n    rafflepot = rafflepot.add(base.mul(90));// allocation to raffle\n    jackpot = jackpot.add(base.mul(9)); // allocation to jackpot\n    devfee = devfee.add(base);//dev fee\n   \n    P3Dcontract_.withdraw();\n    \n}\nfunction devfeetodev () public {\n    \n    SPASM_.disburse.value(devfee)();\n    devfee = 0;\n}\nfunction changevanity(string van) public payable{\n    require(msg.value >= 100  finney);\n    Vanity[msg.sender] = van;\n    rafflepot = rafflepot.add(msg.value);\n}\nfunction startraffle () public{\n    require(Raffles[nextrafflenr - 1].validation == true);\n    require(rafflepot >= 103 finney);\n    Raffles[nextrafflenr].drawblock = block.number;\n    \n    Raffles[nextrafflenr].ticketssold = nextlotnr;\n    nextrafflenr++;\n}\nfunction validateraffle () public{\n    uint256 rafnr = nextrafflenr - 1;\n    bool val = Raffles[rafnr].validation;\n    uint256 drawblock = Raffles[rafnr].drawblock;\n    require(val != true);\n    require(drawblock < block.number);\n    \n    //check if blockhash can be determined\n        if(block.number - 256 > drawblock) {\n            // can not be determined\n            Raffles[rafnr].validation = true;\n            Raffles[rafnr].wasabletovalidate = false;\n        }\n        if(block.number - 256 <= drawblock) {\n            // can be determined\n            uint256 winningticket = uint256(blockhash(drawblock)) % Raffles[rafnr].ticketssold;\n            uint256 jackpotdraw = uint256(blockhash(drawblock)) % 1000;\n            address winner = ticketsales[winningticket];\n            Raffles[rafnr].validation = true;\n            Raffles[rafnr].wasabletovalidate = true;\n            Raffles[rafnr].result = winningticket;\n            Raffles[rafnr].resultjackpot = jackpotdraw;\n            Raffles[rafnr].rafflevanity = winner;\n            if(jackpotdraw == 777){\n                winner.transfer(jackpot);\n                jackpot = 0;\n            }\n            winner.transfer(100 finney);\n            msg.sender.transfer(3 finney);\n            rafflepot = rafflepot.sub(103 finney);\n        }\n    \n}\nfunction () external payable{}// needed for P3D divs receiving\nfunction dusttorafflepot () public onlyOwner {\n    if(address(this).balance.sub(rafflepot).sub(jackpot).sub(devfee) > 0)\n    {\n        rafflepot = address(this).balance.sub(jackpot).sub(devfee);\n    }\n}\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a031916730b0efad4ae088a88ffdc50bce5fb63c6936b9220178155805260056020527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746c0805460ff19166001908117909155600380549091019055610f76806100856000396000f30060806040526004361061013a5763ffffffff60e060020a6000350416631d5ccd9b811461013c5780632e200b5314610199578063314094c2146101cd5780633233c791146101f457806333d34bad14610209578063390c34341461021e5780634143125f1461023357806349f7ad4c1461024857806361df8298146102605780636b31ee01146102ac5780636eff96f2146102c1578063735dcc8b146102d657806379ba5097146102eb57806381d6c866146103005780638350dfaf146103155780638da5cb5b1461032a578063921002651461033f57806395e16e97146103d5578063a654cfab146103ea578063b4e88da714610418578063c39cf53d1461042f578063d4ee1d9014610444578063ee85ec8814610459578063efea835a1461047a578063f2fde38b1461048f578063f8dea17f146104b0575b005b34801561014857600080fd5b506101546004356104c5565b60408051978852602088019690965286860194909452606086019290925215156080850152151560a0840152600160a060020a031660c0830152519081900360e00190f35b3480156101a557600080fd5b506101b1600435610512565b60408051600160a060020a039092168252519081900360200190f35b3480156101d957600080fd5b506101e261052d565b60408051918252519081900360200190f35b34801561020057600080fd5b506101e2610533565b34801561021557600080fd5b506101e261053a565b34801561022a57600080fd5b506101e2610540565b34801561023f57600080fd5b5061013a610546565b34801561025457600080fd5b506101546004356105bf565b6040805160206004803580820135601f810184900484028501840190955284845261013a94369492936024939284019190819084018382808284375094975061060e9650505050505050565b3480156102b857600080fd5b506101e261065d565b3480156102cd57600080fd5b506101e2610663565b3480156102e257600080fd5b5061013a610669565b3480156102f757600080fd5b5061013a6106dd565b34801561030c57600080fd5b506101e2610765565b34801561032157600080fd5b5061013a610803565b34801561033657600080fd5b506101b16108f6565b34801561034b57600080fd5b50610360600160a060020a0360043516610905565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561039a578181015183820152602001610382565b50505050905090810190601f1680156103c75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103e157600080fd5b5061013a6109a0565b3480156103f657600080fd5b506103ff610b92565b6040805192835260208301919091528051918290030190f35b61013a600435600160a060020a0360243516610b99565b34801561043b57600080fd5b506101e2610cc5565b34801561045057600080fd5b506101b1610ccb565b34801561046557600080fd5b50610360600160a060020a0360043516610cda565b34801561048657600080fd5b506101e2610d85565b34801561049b57600080fd5b5061013a600160a060020a0360043516610d8b565b3480156104bc57600080fd5b5061013a610dd1565b600560205260009081526040902080546001820154600283015460038401546004909401549293919290919060ff80821691610100810490911690620100009004600160a060020a031687565b600460205260009081526040902054600160a060020a031681565b60095481565b6002545b90565b60025481565b60035481565b600054600160a060020a0316331461055d57600080fd5b600061059660095461058a60085461058a60075430600160a060020a031631610e4190919063ffffffff16565b9063ffffffff610e4116565b11156105bd576009546008546105b9919061058a9030319063ffffffff610e4116565b6007555b565b60009081526005602052604090208054600182015460028301546003840154600490940154929491939092909160ff8083169261010081049091169162010000909104600160a060020a031690565b67016345785d8a000034101561062357600080fd5b336000908152600660209081526040909120825161064392840190610eb2565b50600754610657903463ffffffff610e5616565b60075550565b60085481565b60075481565b73faae60f2ce6491886c9f7c9356bd92f688ca66a1600160a060020a031663abc6fd0b6009546040518263ffffffff1660e060020a0281526004016000604051808303818588803b1580156106bd57600080fd5b505af11580156106d1573d6000803e3d6000fd5b50506000600955505050565b600154600160a060020a031633146106f457600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b604080517e65318b000000000000000000000000000000000000000000000000000000008152306004820152905160009173b3775fb83f7d12a36e0475abdd1fca35c091efbe916265318b9160248082019260209290919082900301818787803b1580156107d257600080fd5b505af11580156107e6573d6000803e3d6000fd5b505050506040513d60208110156107fc57600080fd5b5051905090565b60008061080e610765565b915061082182606463ffffffff610e6c16565b905061084661083782605a63ffffffff610e8d16565b6007549063ffffffff610e5616565b60075561086c61085d82600963ffffffff610e8d16565b6008549063ffffffff610e5616565b600855600954610882908263ffffffff610e5616565b60098190555073b3775fb83f7d12a36e0475abdd1fca35c091efbe600160a060020a0316633ccfd60b6040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156108da57600080fd5b505af11580156108ee573d6000803e3d6000fd5b505050505050565b600054600160a060020a031681565b60066020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156109985780601f1061096d57610100808354040283529160200191610998565b820191906000526020600020905b81548152906001019060200180831161097b57829003601f168201915b505050505081565b6003546000190160008181526005602052604081206004810154905460ff909116918080841515600114156109d457600080fd5b4384106109e057600080fd5b8361010043031115610a10576000868152600560205260409020600401805461ff001960ff199091166001171690555b60ff19430184106108ee576000868152600560205260409020600101548440811515610a3857fe5b066000818152600460208181526040808420548b855260059092529092209081018054600283018590556103e8894006600390930183905561010060ff1990911660011761ff0019161775ffffffffffffffffffffffffffffffffffffffff00001916600160a060020a039093166201000081029390931790559194509092509050610309821415610b0257600854604051600160a060020a0383169180156108fc02916000818181858888f19350505050158015610afb573d6000803e3d6000fd5b5060006008555b604051600160a060020a0382169060009067016345785d8a00009082818181858883f19350505050158015610b3b573d6000803e3d6000fd5b506040513390600090660aa87bee5380009082818181858883f19350505050158015610b6b573d6000803e3d6000fd5b50600754610b879067016dedf44bdd800063ffffffff610e4116565b600755505050505050565b6000809091565b60008080662386f26fc100008502341015610bb357600080fd5b60008511610bc057600080fd5b5033905060005b84811015610c125760025481016000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0385161790559250600101610bc7565b6002805482019055604080517ff088d547000000000000000000000000000000000000000000000000000000008152600160a060020a0386166004820152905173b3775fb83f7d12a36e0475abdd1fca35c091efbe9163f088d54791349160248082019260209290919082900301818588803b158015610c9157600080fd5b505af1158015610ca5573d6000803e3d6000fd5b50505050506040513d6020811015610cbc57600080fd5b50505050505050565b60035490565b600154600160a060020a031681565b600160a060020a03811660009081526006602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610d795780601f10610d4e57610100808354040283529160200191610d79565b820191906000526020600020905b815481529060010190602001808311610d5c57829003601f168201915b50505050509050919050565b60095490565b600054600160a060020a03163314610da257600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6003546000190160009081526005602052604090206004015460ff161515600114610dfb57600080fd5b60075467016dedf44bdd80001115610e1257600080fd5b600380546000908152600560205260408082204390556002548354835291206001908101919091558154019055565b600082821115610e5057600080fd5b50900390565b81810182811015610e6657600080fd5b92915050565b6000808211610e7a57600080fd5b8183811515610e8557fe5b049392505050565b818102821580610ea75750818382811515610ea457fe5b04145b1515610e6657600080fd5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ef357805160ff1916838001178555610f20565b82800160010185558215610f20579182015b82811115610f20578251825591602001919060010190610f05565b50610f2c929150610f30565b5090565b61053791905b80821115610f2c5760008155600101610f365600a165627a7a72305820cc1b8acfccbdfb9f9bcef8ed8275c7a63ad201385165b10c6993c4408da314960029"
}