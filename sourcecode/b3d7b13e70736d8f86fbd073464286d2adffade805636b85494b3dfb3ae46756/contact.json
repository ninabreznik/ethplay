{
  "address": "0x4209f9bbb4e4dd48dbd84701fcaaab1d492b5a05",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DataEquip",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-26\n*/\n\n/* ==================================================================== */\n/* Copyright (c) 2018 The ether.online Project.  All rights reserved.\n/* \n/* https://ether.online  The first RPG game of blockchain \n/*  \n/* authors [email protected]   \n/*         [email protected]            \n/* ==================================================================== */\n\npragma solidity ^0.4.20;\n\n/// @title ERC-165 Standard Interface Detection\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\ninterface ERC165 {\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\ncontract ERC721 is ERC165 {\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n    function balanceOf(address _owner) external view returns (uint256);\n    function ownerOf(uint256 _tokenId) external view returns (address);\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external;\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n    function approve(address _approved, uint256 _tokenId) external;\n    function setApprovalForAll(address _operator, bool _approved) external;\n    function getApproved(uint256 _tokenId) external view returns (address);\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard\ninterface ERC721TokenReceiver {\n\tfunction onERC721Received(address _from, uint256 _tokenId, bytes data) external returns(bytes4);\n}\n\ncontract AccessAdmin {\n    bool public isPaused = false;\n    address public addrAdmin;  \n\n    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\n\n    function AccessAdmin() public {\n        addrAdmin = msg.sender;\n    }  \n\n\n    modifier onlyAdmin() {\n        require(msg.sender == addrAdmin);\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(!isPaused);\n        _;\n    }\n\n    modifier whenPaused {\n        require(isPaused);\n        _;\n    }\n\n    function setAdmin(address _newAdmin) external onlyAdmin {\n        require(_newAdmin != address(0));\n        AdminTransferred(addrAdmin, _newAdmin);\n        addrAdmin = _newAdmin;\n    }\n\n    function doPause() external onlyAdmin whenNotPaused {\n        isPaused = true;\n    }\n\n    function doUnpause() external onlyAdmin whenPaused {\n        isPaused = false;\n    }\n}\n\ncontract AccessService is AccessAdmin {\n    address public addrService;\n    address public addrFinance;\n\n    modifier onlyService() {\n        require(msg.sender == addrService);\n        _;\n    }\n\n    modifier onlyFinance() {\n        require(msg.sender == addrFinance);\n        _;\n    }\n\n    function setService(address _newService) external {\n        require(msg.sender == addrService || msg.sender == addrAdmin);\n        require(_newService != address(0));\n        addrService = _newService;\n    }\n\n    function setFinance(address _newFinance) external {\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n        require(_newFinance != address(0));\n        addrFinance = _newFinance;\n    }\n\n    function withdraw(address _target, uint256 _amount) \n        external \n    {\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n        require(_amount > 0);\n        address receiver = _target == address(0) ? addrFinance : _target;\n        uint256 balance = this.balance;\n        if (_amount < balance) {\n            receiver.transfer(_amount);\n        } else {\n            receiver.transfer(this.balance);\n        }      \n    }\n}\n\ninterface IDataMining {\n    function getRecommender(address _target) external view returns(address);\n    function subFreeMineral(address _target) external returns(bool);\n}\n\ninterface IDataEquip {\n    function isEquiped(address _target, uint256 _tokenId) external view returns(bool);\n    function isEquipedAny2(address _target, uint256 _tokenId1, uint256 _tokenId2) external view returns(bool);\n    function isEquipedAny3(address _target, uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3) external view returns(bool);\n}\n\ncontract Random {\n    uint256 _seed;\n\n    function _rand() internal returns (uint256) {\n        _seed = uint256(keccak256(_seed, block.blockhash(block.number - 1), block.coinbase, block.difficulty));\n        return _seed;\n    }\n\n    function _randBySeed(uint256 _outSeed) internal view returns (uint256) {\n        return uint256(keccak256(_outSeed, block.blockhash(block.number - 1), block.coinbase, block.difficulty));\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract WarToken is ERC721, AccessAdmin {\n    /// @dev The equipment info\n    struct Fashion {\n        uint16 protoId;     // 0  Equipment ID\n        uint16 quality;     // 1  Rarity: 1 Coarse/2 Good/3 Rare/4 Epic/5 Legendary\n        uint16 pos;         // 2  Slots: 1 Weapon/2 Hat/3 Cloth/4 Pant/5 Shoes/9 Pets\n        uint16 health;      // 3  Health\n        uint16 atkMin;      // 4  Min attack\n        uint16 atkMax;      // 5  Max attack\n        uint16 defence;     // 6  Defennse\n        uint16 crit;        // 7  Critical rate\n        uint16 isPercent;   // 8  Attr value type\n        uint16 attrExt1;    // 9  future stat 1\n        uint16 attrExt2;    // 10 future stat 2\n        uint16 attrExt3;    // 11 future stat 3\n    }\n\n    /// @dev All equipments tokenArray (not exceeding 2^32-1)\n    Fashion[] public fashionArray;\n\n    /// @dev Amount of tokens destroyed\n    uint256 destroyFashionCount;\n\n    /// @dev Equipment token ID vs owner address\n    mapping (uint256 => address) fashionIdToOwner;\n\n    /// @dev Equipments owner by the owner (array)\n    mapping (address => uint256[]) ownerToFashionArray;\n\n    /// @dev Equipment token ID search in owner array\n    mapping (uint256 => uint256) fashionIdToOwnerIndex;\n\n    /// @dev The authorized address for each WAR\n    mapping (uint256 => address) fashionIdToApprovals;\n\n    /// @dev The authorized operators for each address\n    mapping (address => mapping (address => bool)) operatorToApprovals;\n\n    /// @dev Trust contract\n    mapping (address => bool) actionContracts;\n\n    function setActionContract(address _actionAddr, bool _useful) external onlyAdmin {\n        actionContracts[_actionAddr] = _useful;\n    }\n\n    function getActionContract(address _actionAddr) external view onlyAdmin returns(bool) {\n        return actionContracts[_actionAddr];\n    }\n\n    /// @dev This emits when the approved address for an WAR is changed or reaffirmed.\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /// @dev This emits when the equipment ownership changed \n    event Transfer(address indexed from, address indexed to, uint256 tokenId);\n\n    /// @dev This emits when the equipment created\n    event CreateFashion(address indexed owner, uint256 tokenId, uint16 protoId, uint16 quality, uint16 pos, uint16 createType);\n\n    /// @dev This emits when the equipment's attributes changed\n    event ChangeFashion(address indexed owner, uint256 tokenId, uint16 changeType);\n\n    /// @dev This emits when the equipment destroyed\n    event DeleteFashion(address indexed owner, uint256 tokenId, uint16 deleteType);\n    \n    function WarToken() public {\n        addrAdmin = msg.sender;\n        fashionArray.length += 1;\n    }\n\n    // modifier\n    /// @dev Check if token ID is valid\n    modifier isValidToken(uint256 _tokenId) {\n        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\n        require(fashionIdToOwner[_tokenId] != address(0)); \n        _;\n    }\n\n    modifier canTransfer(uint256 _tokenId) {\n        address owner = fashionIdToOwner[_tokenId];\n        require(msg.sender == owner || msg.sender == fashionIdToApprovals[_tokenId] || operatorToApprovals[owner][msg.sender]);\n        _;\n    }\n\n    // ERC721\n    function supportsInterface(bytes4 _interfaceId) external view returns(bool) {\n        // ERC165 || ERC721 || ERC165^ERC721\n        return (_interfaceId == 0x01ffc9a7 || _interfaceId == 0x80ac58cd || _interfaceId == 0x8153916a) && (_interfaceId != 0xffffffff);\n    }\n        \n    function name() public pure returns(string) {\n        return \"WAR Token\";\n    }\n\n    function symbol() public pure returns(string) {\n        return \"WAR\";\n    }\n\n    /// @dev Search for token quantity address\n    /// @param _owner Address that needs to be searched\n    /// @return Returns token quantity\n    function balanceOf(address _owner) external view returns(uint256) {\n        require(_owner != address(0));\n        return ownerToFashionArray[_owner].length;\n    }\n\n    /// @dev Find the owner of an WAR\n    /// @param _tokenId The tokenId of WAR\n    /// @return Give The address of the owner of this WAR\n    function ownerOf(uint256 _tokenId) external view /*isValidToken(_tokenId)*/ returns (address owner) {\n        return fashionIdToOwner[_tokenId];\n    }\n\n    /// @dev Transfers the ownership of an WAR from one address to another address\n    /// @param _from The current owner of the WAR\n    /// @param _to The new owner\n    /// @param _tokenId The WAR to transfer\n    /// @param data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \n        external\n        whenNotPaused\n    {\n        _safeTransferFrom(_from, _to, _tokenId, data);\n    }\n\n    /// @dev Transfers the ownership of an WAR from one address to another address\n    /// @param _from The current owner of the WAR\n    /// @param _to The new owner\n    /// @param _tokenId The WAR to transfer\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) \n        external\n        whenNotPaused\n    {\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\n    }\n\n    /// @dev Transfer ownership of an WAR, '_to' must be a vaild address, or the WAR will lost\n    /// @param _from The current owner of the WAR\n    /// @param _to The new owner\n    /// @param _tokenId The WAR to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId)\n        external\n        whenNotPaused\n        isValidToken(_tokenId)\n        canTransfer(_tokenId)\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner == _from);\n        \n        _transfer(_from, _to, _tokenId);\n    }\n\n    /// @dev Set or reaffirm the approved address for an WAR\n    /// @param _approved The new approved WAR controller\n    /// @param _tokenId The WAR to approve\n    function approve(address _approved, uint256 _tokenId)\n        external\n        whenNotPaused\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(msg.sender == owner || operatorToApprovals[owner][msg.sender]);\n\n        fashionIdToApprovals[_tokenId] = _approved;\n        Approval(owner, _approved, _tokenId);\n    }\n\n    /// @dev Enable or disable approval for a third party (\"operator\") to manage all your asset.\n    /// @param _operator Address to add to the set of authorized operators.\n    /// @param _approved True if the operators is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved) \n        external \n        whenNotPaused\n    {\n        operatorToApprovals[msg.sender][_operator] = _approved;\n        ApprovalForAll(msg.sender, _operator, _approved);\n    }\n\n    /// @dev Get the approved address for a single WAR\n    /// @param _tokenId The WAR to find the approved address for\n    /// @return The approved address for this WAR, or the zero address if there is none\n    function getApproved(uint256 _tokenId) external view isValidToken(_tokenId) returns (address) {\n        return fashionIdToApprovals[_tokenId];\n    }\n\n    /// @dev Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the WARs\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\n        return operatorToApprovals[_owner][_operator];\n    }\n\n    /// @dev Count WARs tracked by this contract\n    /// @return A count of valid WARs tracked by this contract, where each one of\n    ///  them has an assigned and queryable owner not equal to the zero address\n    function totalSupply() external view returns (uint256) {\n        return fashionArray.length - destroyFashionCount - 1;\n    }\n\n    /// @dev Do the real transfer with out any condition checking\n    /// @param _from The old owner of this WAR(If created: 0x0)\n    /// @param _to The new owner of this WAR \n    /// @param _tokenId The tokenId of the WAR\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        if (_from != address(0)) {\n            uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\n            uint256[] storage fsArray = ownerToFashionArray[_from];\n            require(fsArray[indexFrom] == _tokenId);\n\n            // If the WAR is not the element of array, change it to with the last\n            if (indexFrom != fsArray.length - 1) {\n                uint256 lastTokenId = fsArray[fsArray.length - 1];\n                fsArray[indexFrom] = lastTokenId; \n                fashionIdToOwnerIndex[lastTokenId] = indexFrom;\n            }\n            fsArray.length -= 1; \n            \n            if (fashionIdToApprovals[_tokenId] != address(0)) {\n                delete fashionIdToApprovals[_tokenId];\n            }      \n        }\n\n        // Give the WAR to '_to'\n        fashionIdToOwner[_tokenId] = _to;\n        ownerToFashionArray[_to].push(_tokenId);\n        fashionIdToOwnerIndex[_tokenId] = ownerToFashionArray[_to].length - 1;\n        \n        Transfer(_from != address(0) ? _from : this, _to, _tokenId);\n    }\n\n    /// @dev Actually perform the safeTransferFrom\n    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \n        internal\n        isValidToken(_tokenId) \n        canTransfer(_tokenId)\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner == _from);\n        \n        _transfer(_from, _to, _tokenId);\n\n        // Do the callback after everything is done to avoid reentrancy attack\n        uint256 codeSize;\n        assembly { codeSize := extcodesize(_to) }\n        if (codeSize == 0) {\n            return;\n        }\n        bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(_from, _tokenId, data);\n        // bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\")) = 0xf0b9e5ba;\n        require(retval == 0xf0b9e5ba);\n    }\n\n    //----------------------------------------------------------------------------------------------------------\n\n    /// @dev Equipment creation\n    /// @param _owner Owner of the equipment created\n    /// @param _attrs Attributes of the equipment created\n    /// @return Token ID of the equipment created\n    function createFashion(address _owner, uint16[9] _attrs, uint16 _createType) \n        external \n        whenNotPaused\n        returns(uint256)\n    {\n        require(actionContracts[msg.sender]);\n        require(_owner != address(0));\n\n        uint256 newFashionId = fashionArray.length;\n        require(newFashionId < 4294967296);\n\n        fashionArray.length += 1;\n        Fashion storage fs = fashionArray[newFashionId];\n        fs.protoId = _attrs[0];\n        fs.quality = _attrs[1];\n        fs.pos = _attrs[2];\n        if (_attrs[3] != 0) {\n            fs.health = _attrs[3];\n        }\n        \n        if (_attrs[4] != 0) {\n            fs.atkMin = _attrs[4];\n            fs.atkMax = _attrs[5];\n        }\n       \n        if (_attrs[6] != 0) {\n            fs.defence = _attrs[6];\n        }\n        \n        if (_attrs[7] != 0) {\n            fs.crit = _attrs[7];\n        }\n\n        if (_attrs[8] != 0) {\n            fs.isPercent = _attrs[8];\n        }\n        \n        _transfer(0, _owner, newFashionId);\n        CreateFashion(_owner, newFashionId, _attrs[0], _attrs[1], _attrs[2], _createType);\n        return newFashionId;\n    }\n\n    /// @dev One specific attribute of the equipment modified\n    function _changeAttrByIndex(Fashion storage _fs, uint16 _index, uint16 _val) internal {\n        if (_index == 3) {\n            _fs.health = _val;\n        } else if(_index == 4) {\n            _fs.atkMin = _val;\n        } else if(_index == 5) {\n            _fs.atkMax = _val;\n        } else if(_index == 6) {\n            _fs.defence = _val;\n        } else if(_index == 7) {\n            _fs.crit = _val;\n        } else if(_index == 9) {\n            _fs.attrExt1 = _val;\n        } else if(_index == 10) {\n            _fs.attrExt2 = _val;\n        } else if(_index == 11) {\n            _fs.attrExt3 = _val;\n        }\n    }\n\n    /// @dev Equiment attributes modified (max 4 stats modified)\n    /// @param _tokenId Equipment Token ID\n    /// @param _idxArray Stats order that must be modified\n    /// @param _params Stat value that must be modified\n    /// @param _changeType Modification type such as enhance, socket, etc.\n    function changeFashionAttr(uint256 _tokenId, uint16[4] _idxArray, uint16[4] _params, uint16 _changeType) \n        external \n        whenNotPaused\n        isValidToken(_tokenId) \n    {\n        require(actionContracts[msg.sender]);\n\n        Fashion storage fs = fashionArray[_tokenId];\n        if (_idxArray[0] > 0) {\n            _changeAttrByIndex(fs, _idxArray[0], _params[0]);\n        }\n\n        if (_idxArray[1] > 0) {\n            _changeAttrByIndex(fs, _idxArray[1], _params[1]);\n        }\n\n        if (_idxArray[2] > 0) {\n            _changeAttrByIndex(fs, _idxArray[2], _params[2]);\n        }\n\n        if (_idxArray[3] > 0) {\n            _changeAttrByIndex(fs, _idxArray[3], _params[3]);\n        }\n\n        ChangeFashion(fashionIdToOwner[_tokenId], _tokenId, _changeType);\n    }\n\n    /// @dev Equipment destruction\n    /// @param _tokenId Equipment Token ID\n    /// @param _deleteType Destruction type, such as craft\n    function destroyFashion(uint256 _tokenId, uint16 _deleteType)\n        external \n        whenNotPaused\n        isValidToken(_tokenId) \n    {\n        require(actionContracts[msg.sender]);\n\n        address _from = fashionIdToOwner[_tokenId];\n        uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\n        uint256[] storage fsArray = ownerToFashionArray[_from]; \n        require(fsArray[indexFrom] == _tokenId);\n\n        if (indexFrom != fsArray.length - 1) {\n            uint256 lastTokenId = fsArray[fsArray.length - 1];\n            fsArray[indexFrom] = lastTokenId; \n            fashionIdToOwnerIndex[lastTokenId] = indexFrom;\n        }\n        fsArray.length -= 1; \n\n        fashionIdToOwner[_tokenId] = address(0);\n        delete fashionIdToOwnerIndex[_tokenId];\n        destroyFashionCount += 1;\n\n        Transfer(_from, 0, _tokenId);\n\n        DeleteFashion(_from, _tokenId, _deleteType);\n    }\n\n    /// @dev Safe transfer by trust contracts\n    function safeTransferByContract(uint256 _tokenId, address _to) \n        external\n        whenNotPaused\n    {\n        require(actionContracts[msg.sender]);\n\n        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner != _to);\n\n        _transfer(owner, _to, _tokenId);\n    }\n\n    //----------------------------------------------------------------------------------------------------------\n\n    /// @dev Get fashion attrs by tokenId\n    function getFashion(uint256 _tokenId) external view isValidToken(_tokenId) returns (uint16[12] datas) {\n        Fashion storage fs = fashionArray[_tokenId];\n        datas[0] = fs.protoId;\n        datas[1] = fs.quality;\n        datas[2] = fs.pos;\n        datas[3] = fs.health;\n        datas[4] = fs.atkMin;\n        datas[5] = fs.atkMax;\n        datas[6] = fs.defence;\n        datas[7] = fs.crit;\n        datas[8] = fs.isPercent;\n        datas[9] = fs.attrExt1;\n        datas[10] = fs.attrExt2;\n        datas[11] = fs.attrExt3;\n    }\n\n    /// @dev Get tokenIds and flags by owner\n    function getOwnFashions(address _owner) external view returns(uint256[] tokens, uint32[] flags) {\n        require(_owner != address(0));\n        uint256[] storage fsArray = ownerToFashionArray[_owner];\n        uint256 length = fsArray.length;\n        tokens = new uint256[](length);\n        flags = new uint32[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            tokens[i] = fsArray[i];\n            Fashion storage fs = fashionArray[fsArray[i]];\n            flags[i] = uint32(uint32(fs.protoId) * 100 + uint32(fs.quality) * 10 + fs.pos);\n        }\n    }\n\n    /// @dev WAR token info returned based on Token ID transfered (64 at most)\n    function getFashionsAttrs(uint256[] _tokens) external view returns(uint16[] attrs) {\n        uint256 length = _tokens.length;\n        require(length <= 64);\n        attrs = new uint16[](length * 11);\n        uint256 tokenId;\n        uint256 index;\n        for (uint256 i = 0; i < length; ++i) {\n            tokenId = _tokens[i];\n            if (fashionIdToOwner[tokenId] != address(0)) {\n                index = i * 11;\n                Fashion storage fs = fashionArray[tokenId];\n                attrs[index] = fs.health;\n                attrs[index + 1] = fs.atkMin;\n                attrs[index + 2] = fs.atkMax;\n                attrs[index + 3] = fs.defence;\n                attrs[index + 4] = fs.crit;\n                attrs[index + 5] = fs.isPercent;\n                attrs[index + 6] = fs.attrExt1;\n                attrs[index + 7] = fs.attrExt2;\n                attrs[index + 8] = fs.attrExt3;\n            }   \n        }\n    }\n}\n\ncontract DataEquip is AccessService, IDataEquip {\n    event EquipChanged(address indexed _target);\n\n    /// @dev WarToken(NFT) contract address\n    WarToken public tokenContract;\n    mapping (address => uint256) public slotWeapon;\n    mapping (address => uint256) public slotHat;\n    mapping (address => uint256) public slotCloth;\n    mapping (address => uint256) public slotPant;\n    mapping (address => uint256) public slotShoes;\n    mapping (address => uint256) public slotPet;\n\n    function DataEquip(address _nftAddr) public {\n        addrAdmin = msg.sender;\n        addrService = msg.sender;\n        addrFinance = msg.sender;\n\n        tokenContract = WarToken(_nftAddr);\n    }\n\n    function _equipUpOne(address _owner, uint256 _tokenId) private {\n        require(tokenContract.ownerOf(_tokenId) == _owner);\n        uint16[12] memory attrs = tokenContract.getFashion(_tokenId);\n        uint16 pos = attrs[2];\n        if (pos == 1) {\n            if (slotWeapon[_owner] != _tokenId) {\n                slotWeapon[_owner] = _tokenId;\n            }\n        } else if (pos == 2) {\n            if (slotHat[_owner] != _tokenId) {\n                slotHat[_owner] = _tokenId;\n            }\n        } else if (pos == 3) {\n            if (slotCloth[_owner] != _tokenId) {\n                slotCloth[_owner] = _tokenId;\n            }\n        } else if (pos == 4) {\n            if (slotPant[_owner] != _tokenId) {\n                slotPant[_owner] = _tokenId;\n            }\n        } else if (pos == 5) {\n            if (slotShoes[_owner] != _tokenId) {\n                slotShoes[_owner] = _tokenId;\n            }\n        } else if (pos == 9) {\n            if (slotPet[_owner] != _tokenId) {\n                slotPet[_owner] = _tokenId;\n            }\n        }\n    }\n\n    function _equipDownOne(address _owner, uint16 _index) private {\n        if (_index == 0) {\n            if (slotWeapon[_owner] != 0) {\n                slotWeapon[_owner] = 0;\n            }\n        } else if (_index == 1) {\n            if (slotHat[_owner] != 0) {\n                slotHat[_owner] = 0;\n            }\n        } else if (_index == 2) {\n            if (slotCloth[_owner] != 0) {\n                slotCloth[_owner] = 0;\n            }\n        } else if (_index == 3) {\n            if (slotPant[_owner] != 0) {\n                slotPant[_owner] = 0;\n            }\n        } else if (_index == 4) {\n            if (slotShoes[_owner] != 0) {\n                slotShoes[_owner] = 0;\n            }\n        } else if (_index == 5) {\n            if (slotPet[_owner] != 0) {\n                slotPet[_owner] = 0;\n            }\n        }\n    }\n\n    function equipUp(uint256[6] _tokens) \n        external \n        whenNotPaused\n    {\n        for (uint16 i = 0; i < 6; ++i) {\n            if (_tokens[i] > 0) {\n                _equipUpOne(msg.sender, _tokens[i]);\n            } else {\n                _equipDownOne(msg.sender, i);      // tokenId 0 will be equip down\n            }  \n        }\n        EquipChanged(msg.sender);\n    }\n\n    function equipDown(uint256 _tokenId) \n        external\n        whenNotPaused \n    {\n        \n    }    \n\n    function isEquiped(address _target, uint256 _tokenId) external view returns(bool) {\n        require(_target != address(0));\n        require(_tokenId > 0);\n\n        if (slotWeapon[_target] == _tokenId) {\n            return true;\n        }\n\n        if (slotHat[_target] == _tokenId) {\n            return true;\n        }\n\n        if (slotCloth[_target] == _tokenId) {\n            return true;\n        }\n\n        if (slotPant[_target] == _tokenId) {\n            return true;\n        }\n\n        if (slotShoes[_target] == _tokenId) {\n            return true;\n        }\n\n        if (slotPet[_target] == _tokenId) {\n            return true;\n        }\n        return false;\n    }\n\n    function isEquipedAny2(address _target, uint256 _tokenId1, uint256 _tokenId2) external view returns(bool) {\n        require(_target != address(0));\n        require(_tokenId1 > 0);\n        require(_tokenId2 > 0);\n        \n        uint256 equipTokenId = slotWeapon[_target];\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\n            return true;\n        }\n\n        equipTokenId = slotHat[_target];\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\n            return true;\n        }\n\n        equipTokenId = slotCloth[_target];\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\n            return true;\n        }\n\n        equipTokenId = slotPant[_target];\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\n            return true;\n        }\n\n        equipTokenId = slotShoes[_target];\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\n            return true;\n        }\n\n        equipTokenId = slotPet[_target];\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\n            return true;\n        }\n        return false;\n    }\n\n    function isEquipedAny3(address _target, uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3) external view returns(bool) {\n        require(_target != address(0));\n        require(_tokenId1 > 0);\n        require(_tokenId2 > 0);\n        require(_tokenId3 > 0);\n        \n        uint256 equipTokenId = slotWeapon[_target];\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\n            return true;\n        }\n\n        equipTokenId = slotHat[_target];\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\n            return true;\n        }\n\n        equipTokenId = slotCloth[_target];\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\n            return true;\n        }\n\n        equipTokenId = slotPant[_target];\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\n            return true;\n        }\n\n        equipTokenId = slotShoes[_target];\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\n            return true;\n        }\n\n        equipTokenId = slotPet[_target];\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\n            return true;\n        }\n        return false;\n    }\n\n    function getEquipTokens(address _target) external view returns(uint256[6] tokens) {\n        tokens[0] = slotWeapon[_target];\n        tokens[1] = slotHat[_target];\n        tokens[2] = slotCloth[_target];\n        tokens[3] = slotPant[_target];\n        tokens[4] = slotShoes[_target];\n        tokens[5] = slotPet[_target];\n    }\n}",
  "bytecode": "60606040526000805460ff19169055341561001957600080fd5b6040516020806113068339810160405280805160008054600160a060020a03338116610100810261010060a860020a0319938416811790931690921790925560018054600160a060020a0319908116831790915560028054821690921790915560038054929093169116179055505061126f806100976000396000f3006060604052600436106101195763ffffffff60e060020a6000350416630eacecd2811461011e57806310bb8f261461017557806326d91c79146101a657806330efb8d3146101c55780633481c488146101da5780633e4c707d146101f957806348e063001461021857806355a373d61461025157806367d0661d14610280578063704b6c021461029357806382cb9df9146102b25780639b8d3064146102c5578063a1be79a0146102e4578063b187bd26146102f9578063bb2871a31461030c578063bf8bdac11461032b578063bfae2f0e1461034a578063cdd977e01461035d578063e26fdc1214610370578063f3fef3a314610386578063f470ef34146103a8578063f761720a146103c7578063f9c71f79146103e9575b600080fd5b341561012957600080fd5b61013d600160a060020a0360043516610411565b604051808260c080838360005b8381101561016257808201518382015260200161014a565b5050505090500191505060405180910390f35b341561018057600080fd5b610194600160a060020a0360043516610488565b60405190815260200160405180910390f35b34156101b157600080fd5b610194600160a060020a036004351661049a565b34156101d057600080fd5b6101d86104ac565b005b34156101e557600080fd5b610194600160a060020a03600435166104e9565b341561020457600080fd5b610194600160a060020a03600435166104fb565b341561022357600080fd5b61023d600160a060020a036004351660243560443561050d565b604051901515815260200160405180910390f35b341561025c57600080fd5b61026461068a565b604051600160a060020a03909116815260200160405180910390f35b341561028b57600080fd5b6101d8610699565b341561029e57600080fd5b6101d8600160a060020a03600435166106d8565b34156102bd57600080fd5b610264610783565b34156102d057600080fd5b6101d8600160a060020a0360043516610792565b34156102ef57600080fd5b6101d86004610811565b341561030457600080fd5b61023d6108bf565b341561031757600080fd5b610194600160a060020a03600435166108c8565b341561033657600080fd5b6101d8600160a060020a03600435166108da565b341561035557600080fd5b610264610959565b341561036857600080fd5b61026461096d565b341561037b57600080fd5b6101d860043561097c565b341561039157600080fd5b6101d8600160a060020a036004351660243561098f565b34156103b357600080fd5b610194600160a060020a0360043516610a8d565b34156103d257600080fd5b61023d600160a060020a0360043516602435610a9f565b34156103f457600080fd5b61023d600160a060020a0360043516602435604435606435610bbd565b6104196111f3565b600160a060020a03919091166000818152600460209081526040808320548552838352600582528083205485830152838352600682528083205485820152838352600782528083205460608601528383526008825280832054608086015292825260099052205460a082015290565b60076020526000908152604090205481565b60066020526000908152604090205481565b60005433600160a060020a0390811661010090920416146104cc57600080fd5b60005460ff1615156104dd57600080fd5b6000805460ff19169055565b60096020526000908152604090205481565b60056020526000908152604090205481565b600080600160a060020a038516151561052557600080fd5b6000841161053257600080fd5b6000831161053f57600080fd5b50600160a060020a0384166000908152600460205260409020548381148061056657508281145b156105745760019150610682565b50600160a060020a0384166000908152600560205260409020548381148061059b57508281145b156105a95760019150610682565b50600160a060020a038416600090815260066020526040902054838114806105d057508281145b156105de5760019150610682565b50600160a060020a0384166000908152600760205260409020548381148061060557508281145b156106135760019150610682565b50600160a060020a0384166000908152600860205260409020548381148061063a57508281145b156106485760019150610682565b50600160a060020a0384166000908152600960205260409020548381148061066f57508281145b1561067d5760019150610682565b600091505b509392505050565b600354600160a060020a031681565b60005433600160a060020a0390811661010090920416146106b957600080fd5b60005460ff16156106c957600080fd5b6000805460ff19166001179055565b60005433600160a060020a0390811661010090920416146106f857600080fd5b600160a060020a038116151561070d57600080fd5b600054600160a060020a03808316916101009004167ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec660405160405180910390a360008054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b600254600160a060020a031681565b60025433600160a060020a03908116911614806107c2575060005433600160a060020a0390811661010090920416145b15156107cd57600080fd5b600160a060020a03811615156107e257600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000805460ff161561082257600080fd5b5060005b60068161ffff1610156108855760008261ffff83166006811061084557fe5b602002013511156108735761086e338361ffff84166006811061086457fe5b6020020135610d84565b61087d565b61087d338261103e565b600101610826565b33600160a060020a03167f9ba7335512a89fbb3a04231ee2a99bd9dccbea974d4a36b26868ba8b49db429c60405160405180910390a25050565b60005460ff1681565b60046020526000908152604090205481565b60015433600160a060020a039081169116148061090a575060005433600160a060020a0390811661010090920416145b151561091557600080fd5b600160a060020a038116151561092a57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000546101009004600160a060020a031681565b600154600160a060020a031681565b60005460ff161561098c57600080fd5b50565b600254600090819033600160a060020a03908116911614806109c4575060005433600160a060020a0390811661010090920416145b15156109cf57600080fd5b600083116109dc57600080fd5b600160a060020a038416156109f157836109fe565b600254600160a060020a03165b915050600160a060020a0330163180831015610a4a57600160a060020a03821683156108fc0284604051600060405180830381858888f193505050501515610a4557600080fd5b610a87565b81600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f193505050501515610a8757600080fd5b50505050565b60086020526000908152604090205481565b6000600160a060020a0383161515610ab657600080fd5b60008211610ac357600080fd5b600160a060020a038316600090815260046020526040902054821415610aeb57506001610bb7565b600160a060020a038316600090815260056020526040902054821415610b1357506001610bb7565b600160a060020a038316600090815260066020526040902054821415610b3b57506001610bb7565b600160a060020a038316600090815260076020526040902054821415610b6357506001610bb7565b600160a060020a038316600090815260086020526040902054821415610b8b57506001610bb7565b600160a060020a038316600090815260096020526040902054821415610bb357506001610bb7565b5060005b92915050565b600080600160a060020a0386161515610bd557600080fd5b60008511610be257600080fd5b60008411610bef57600080fd5b60008311610bfc57600080fd5b50600160a060020a03851660009081526004602052604090205484811480610c2357508381145b80610c2d57508281145b15610c3b5760019150610d7b565b50600160a060020a03851660009081526005602052604090205484811480610c6257508381145b80610c6c57508281145b15610c7a5760019150610d7b565b50600160a060020a03851660009081526006602052604090205484811480610ca157508381145b80610cab57508281145b15610cb95760019150610d7b565b50600160a060020a03851660009081526007602052604090205484811480610ce057508381145b80610cea57508281145b15610cf85760019150610d7b565b50600160a060020a03851660009081526008602052604090205484811480610d1f57508381145b80610d2957508281145b15610d375760019150610d7b565b50600160a060020a03851660009081526009602052604090205484811480610d5e57508381145b80610d6857508281145b15610d765760019150610d7b565b600091505b50949350505050565b610d8c61121a565b600354600090600160a060020a038086169116636352211e8560405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515610ddb57600080fd5b5af11515610de857600080fd5b50505060405180519050600160a060020a0316141515610e0757600080fd5b600354600160a060020a031663425189e08460405160e060020a63ffffffff8416028152600481019190915260240161018060405180830381600087803b1515610e5057600080fd5b5af11515610e5d57600080fd5b50505060405161018081016040529150816002602002015190508061ffff1660011415610ec357600160a060020a0384166000908152600460205260409020548314610a4557600160a060020a0384166000908152600460205260409020839055610a87565b8061ffff1660021415610f0f57600160a060020a0384166000908152600560205260409020548314610a4557600160a060020a0384166000908152600560205260409020839055610a87565b8061ffff1660031415610f5b57600160a060020a0384166000908152600660205260409020548314610a4557600160a060020a0384166000908152600660205260409020839055610a87565b8061ffff1660041415610fa757600160a060020a0384166000908152600760205260409020548314610a4557600160a060020a0384166000908152600760205260409020839055610a87565b8061ffff1660051415610ff357600160a060020a0384166000908152600860205260409020548314610a4557600160a060020a0384166000908152600860205260409020839055610a87565b8061ffff1660091415610a8757600160a060020a0384166000908152600960205260409020548314610a87575050600160a060020a0391909116600090815260096020526040902055565b61ffff8116151561108657600160a060020a0382166000908152600460205260409020541561108157600160a060020a0382166000908152600460205260408120555b6111ef565b8061ffff16600114156110cf57600160a060020a0382166000908152600560205260409020541561108157600160a060020a0382166000908152600560205260408120556111ef565b8061ffff166002141561111857600160a060020a0382166000908152600660205260409020541561108157600160a060020a0382166000908152600660205260408120556111ef565b8061ffff166003141561116157600160a060020a0382166000908152600760205260409020541561108157600160a060020a0382166000908152600760205260408120556111ef565b8061ffff16600414156111aa57600160a060020a0382166000908152600860205260409020541561108157600160a060020a0382166000908152600860205260408120556111ef565b8061ffff16600514156111ef57600160a060020a038216600090815260096020526040902054156111ef57600160a060020a0382166000908152600960205260408120555b5050565b60c06040519081016040526006815b60008152602001906001900390816112025790505090565b610180604051908101604052600c815b60008152600019909101906020018161122a57905050905600a165627a7a7230582095da2c5823caf4b306182f57353248ad8c5f7748437de84f9c1f573cae7ccf550029000000000000000000000000da9c03dfd4d137f926c3cf6953cb951832eb08b2",
  "constructorArguments": "000000000000000000000000da9c03dfd4d137f926c3cf6953cb951832eb08b2"
}