{
  "address": "0xd42433a8a0a1ceb73c8ff4e432463e2ee109039d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DRPCrowdsale",
  "compilerVersion": "v0.4.8+commit.60cc1668",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-06-01\n*/\n\ncontract Token { \n    function issue(address _recipient, uint256 _value) returns (bool success) {} \n    function balanceOf(address _owner) constant returns (uint256 balance) {}\n    function unlock() returns (bool success) {}\n    function startIncentiveDistribution() returns (bool success) {}\n    function transferOwnership(address _newOwner) {}\n    function owner() returns (address _owner) {}\n}\n\ncontract DRPCrowdsale {\n\n    // Crowdsale details\n    address public beneficiary; // Company address multisig (49% funding)\n    address public confirmedBy; // Address that confirmed beneficiary\n    uint256 public minAmount = 4137 ether; // ≈ 724.000 euro\n    uint256 public maxAmount = 54285 ether; // ≈ 9.5 mln euro\n    uint256 public minAcceptedAmount = 40 finney; // 1/25 ether\n\n    /**\n     * 51% of the raised amount remains in the crowdsale contract \n     * to be released to DCORP on launch with aproval of tokenholders.\n     *\n     * See whitepaper for more information\n     */\n    uint256 public percentageOfRaisedAmountThatRemainsInContract = 51; // 0.51 * 10^2\n\n    // Eth to DRP rate\n    uint256 public rateAngelDay = 650;\n    uint256 public rateFirstWeek = 550;\n    uint256 public rateSecondWeek = 475;\n    uint256 public rateThirdWeek = 425;\n    uint256 public rateLastWeek = 400;\n\n    uint256 public rateAngelDayEnd = 1 days;\n    uint256 public rateFirstWeekEnd = 8 days;\n    uint256 public rateSecondWeekEnd = 15 days;\n    uint256 public rateThirdWeekEnd = 22 days;\n    uint256 public rateLastWeekEnd = 29 days;\n\n    enum Stages {\n        InProgress,\n        Ended,\n        Withdrawn,\n        Proposed,\n        Accepted\n    }\n\n    Stages public stage = Stages.InProgress;\n\n    // Crowdsale state\n    uint256 public start;\n    uint256 public end;\n    uint256 public raised;\n\n    // DRP token\n    Token public drpToken;\n\n    // Invested balances\n    mapping (address => uint256) balances;\n\n    struct Proposal {\n        address dcorpAddress;\n        uint256 deadline;\n        uint256 approvedWeight;\n        uint256 disapprovedWeight;\n        mapping (address => uint256) voted;\n    }\n\n    // Ownership transfer proposal\n    Proposal public transferProposal;\n\n    // Time to vote\n    uint256 public transferProposalEnd = 7 days;\n\n    // Time between proposals\n    uint256 public transferProposalCooldown = 1 days;\n\n\n    /**\n     * Throw if at stage other than current stage\n     * \n     * @param _stage expected stage to test for\n     */\n    modifier atStage(Stages _stage) {\n        if (stage != _stage) {\n            throw;\n        }\n        _;\n    }\n    \n\n    /**\n     * Throw if at stage other than current stage\n     * \n     * @param _stage1 expected stage to test for\n     * @param _stage2 expected stage to test for\n     */\n    modifier atStages(Stages _stage1, Stages _stage2) {\n        if (stage != _stage1 && stage != _stage2) {\n            throw;\n        }\n        _;\n    }\n\n\n    /**\n     * Throw if sender is not beneficiary\n     */\n    modifier onlyBeneficiary() {\n        if (beneficiary != msg.sender) {\n            throw;\n        }\n        _;\n    }\n\n\n    /**\n     * Throw if sender has a DCP balance of zero\n     */\n    modifier onlyShareholders() {\n        if (drpToken.balanceOf(msg.sender) == 0) {\n            throw;\n        }\n        _;\n    }\n\n\n    /**\n     * Throw if the current transfer proposal's deadline\n     * is in the past\n     */\n    modifier beforeDeadline() {\n        if (now > transferProposal.deadline) {\n            throw;\n        }\n        _;\n    }\n\n\n    /**\n     * Throw if the current transfer proposal's deadline \n     * is in the future\n     */\n    modifier afterDeadline() {\n        if (now < transferProposal.deadline) {\n            throw;\n        }\n        _;\n    }\n\n\n    /** \n     * Get balance of `_investor` \n     * \n     * @param _investor The address from which the balance will be retrieved\n     * @return The balance\n     */\n    function balanceOf(address _investor) constant returns (uint256 balance) {\n        return balances[_investor];\n    }\n\n\n    /**\n     * Most params are hardcoded for clarity\n     *\n     * @param _tokenAddress The address of the DRP token contact\n     */\n    function DRPCrowdsale(address _tokenAddress, address _beneficiary, uint256 _start) {\n        drpToken = Token(_tokenAddress);\n        beneficiary = _beneficiary;\n        start = _start;\n        end = start + 29 days;\n    }\n\n\n    /**\n     * For testing purposes\n     *\n     * @return The beneficiary address\n     */\n    function confirmBeneficiary() onlyBeneficiary {\n        confirmedBy = msg.sender;\n    }\n\n\n    /**\n     * Convert `_wei` to an amount in DRP using \n     * the current rate\n     *\n     * @param _wei amount of wei to convert\n     * @return The amount in DRP\n     */\n    function toDRP(uint256 _wei) returns (uint256 amount) {\n        uint256 rate = 0;\n        if (stage != Stages.Ended && now >= start && now <= end) {\n\n            // Check for angelday\n            if (now <= start + rateAngelDayEnd) {\n                rate = rateAngelDay;\n            }\n\n            // Check first week\n            else if (now <= start + rateFirstWeekEnd) {\n                rate = rateFirstWeek;\n            }\n\n            // Check second week\n            else if (now <= start + rateSecondWeekEnd) {\n                rate = rateSecondWeek;\n            }\n\n            // Check third week\n            else if (now <= start + rateThirdWeekEnd) {\n                rate = rateThirdWeek;\n            }\n\n            // Check last week\n            else if (now <= start + rateLastWeekEnd) {\n                rate = rateLastWeek;\n            }\n        }\n\n        return _wei * rate * 10**2 / 1 ether; // 10**2 for 2 decimals\n    }\n\n\n    /**\n     * Function to end the crowdsale by setting \n     * the stage to Ended\n     */\n    function endCrowdsale() atStage(Stages.InProgress) {\n\n        // Crowdsale not ended yet\n        if (now < end) {\n            throw;\n        }\n\n        stage = Stages.Ended;\n    }\n\n\n    /**\n     * Transfer appropriate percentage of raised amount \n     * to the company address\n     */\n    function withdraw() onlyBeneficiary atStage(Stages.Ended) {\n\n        // Confirm that minAmount is raised\n        if (raised < minAmount) {\n            throw;\n        }\n\n        uint256 amountToSend = raised * (100 - percentageOfRaisedAmountThatRemainsInContract) / 10**2;\n        if (!beneficiary.send(amountToSend)) {\n            throw;\n        }\n\n        stage = Stages.Withdrawn;\n    }\n\n\n    /**\n     * Refund in the case of an unsuccessful crowdsale. The \n     * crowdsale is considered unsuccessful if minAmount was \n     * not raised before end\n     */\n    function refund() atStage(Stages.Ended) {\n\n        // Only allow refunds if minAmount is not raised\n        if (raised >= minAmount) {\n            throw;\n        }\n\n        uint256 receivedAmount = balances[msg.sender];\n        balances[msg.sender] = 0;\n\n        if (receivedAmount > 0 && !msg.sender.send(receivedAmount)) {\n            balances[msg.sender] = receivedAmount;\n        }\n    }\n\n\n    /**\n     * Propose the transfer of the token contract ownership\n     * to `_dcorpAddress` \n     *\n     * @param _dcorpAddress the address of the proposed token owner \n     */\n    function proposeTransfer(address _dcorpAddress) onlyBeneficiary atStages(Stages.Withdrawn, Stages.Proposed) {\n        \n        // Check for a pending proposal\n        if (stage == Stages.Proposed && now < transferProposal.deadline + transferProposalCooldown) {\n            throw;\n        }\n\n        transferProposal = Proposal({\n            dcorpAddress: _dcorpAddress,\n            deadline: now + transferProposalEnd,\n            approvedWeight: 0,\n            disapprovedWeight: 0\n        });\n\n        stage = Stages.Proposed;\n    }\n\n\n    /**\n     * Allows DRP holders to vote on the poposed transfer of \n     * ownership. Weight is calculated directly, this is no problem \n     * because tokens cannot be transferred yet\n     *\n     * @param _approve indicates if the sender supports the proposal\n     */\n    function vote(bool _approve) onlyShareholders beforeDeadline atStage(Stages.Proposed) {\n\n        // One vote per proposal\n        if (transferProposal.voted[msg.sender] >= transferProposal.deadline - transferProposalEnd) {\n            throw;\n        }\n\n        transferProposal.voted[msg.sender] = now;\n        uint256 weight = drpToken.balanceOf(msg.sender);\n\n        if (_approve) {\n            transferProposal.approvedWeight += weight;\n        } else {\n            transferProposal.disapprovedWeight += weight;\n        }\n    }\n\n\n    /**\n     * Calculates the votes and if the majority weigt approved \n     * the proposal the transfer of ownership is executed.\n     \n     * The Crowdsale contact transferres the ownership of the \n     * token contract to DCorp and starts the insentive \n     * distribution recorded in the token contract.\n     */\n    function executeTransfer() afterDeadline atStage(Stages.Proposed) {\n\n        // Check approved\n        if (transferProposal.approvedWeight <= transferProposal.disapprovedWeight) {\n            throw;\n        }\n\n        if (!drpToken.unlock()) {\n            throw;\n        }\n        \n        if (!drpToken.startIncentiveDistribution()) {\n            throw;\n        }\n\n        drpToken.transferOwnership(transferProposal.dcorpAddress);\n        if (drpToken.owner() != transferProposal.dcorpAddress) {\n            throw;\n        }\n\n        if (!transferProposal.dcorpAddress.send(this.balance)) {\n            throw;\n        }\n\n        stage = Stages.Accepted;\n    }\n\n    \n    /**\n     * Receives Eth and issue DRP tokens to the sender\n     */\n    function () payable atStage(Stages.InProgress) {\n\n        // Crowdsale not started yet\n        if (now < start) {\n            throw;\n        }\n\n        // Crowdsale expired\n        if (now > end) {\n            throw;\n        }\n\n        // Enforce min amount\n        if (msg.value < minAcceptedAmount) {\n            throw;\n        }\n \n        uint256 received = msg.value;\n        uint256 valueInDRP = toDRP(msg.value);\n        if (!drpToken.issue(msg.sender, valueInDRP)) {\n            throw;\n        }\n\n        balances[msg.sender] += received;\n        raised += received;\n\n        // Check maxAmount raised\n        if (raised >= maxAmount) {\n            stage = Stages.Ended;\n        }\n    }\n}",
  "bytecode": "606060405268e044687d3c0f040000600255690b7ecbb60dbe50140000600355668e1bc9bf040000600455603360055561028a6006556102266007556101db6008556101a9600955610190600a5562015180600b819055620a8c00600c556213c680600d55621d0100600e5562263b80600f556010805460ff1916905562093a80601b55601c55346100005760405160608061101a8339810160409081528151602083015191909201515b60148054600160a060020a03808616600160a060020a0319928316179092556000805492851692909116919091179055601181905562263b8081016012555b5050505b610f1e806100fc6000396000f300606060405236156101855763ffffffff60e060020a60003504166306b5b21e81146102b65780631722a8b0146102d15780632095f2d4146102f05780632a1be747146102ff57806338af3eed1461031e5780633ccfd60b146103475780633f3a78d51461035657806346287ddb146103755780634b9f5c981461039457806351c5d54d146103a857806351ded741146103c7578063590e1ae3146103e65780635f0f1f85146103f55780635f48f3931461041457806362d6b7fb146104335780636b2accac1461045257806370a0823114610474578063835d2d2e1461049f578063939528b1146104ae5780639b2cb5d8146104cd5780639c472c70146104ec5780639c5e90231461050b578063b23940401461051a578063b3007dc614610539578063b65a135014610558578063bd2302fc14610577578063be9a6555146105b4578063c040e6b8146105d3578063c61f3a2c14610601578063cbf2ad231461062a578063efbe1c1c14610653578063f0ea4bfc14610672578063f1d841f114610691575b6102b45b600080808060105460ff166004811161000057146101a657610000565b6011544210156101b557610000565b6012544211156101c457610000565b6004543410156101d357610000565b3492506101df346106b0565b601454604080516000602091820181905282517f867904b4000000000000000000000000000000000000000000000000000000008152600160a060020a033381166004830152602482018790529351959750929093169363867904b4936044808501948390030190829087803b156100005760325a03f115610000575050604051511515905061026e57610000565b600160a060020a03331660009081526015602052604090208054840190556013805484019081905560035490106102ad576010805460ff191660011790555b5b5b505050565b005b34610000576102b4600160a060020a036004351661076e565b005b34610000576102de610868565b60408051918252519081900360200190f35b34610000576102b461086e565b005b34610000576102de6108aa565b60408051918252519081900360200190f35b346100005761032b6108b0565b60408051600160a060020a039092168252519081900360200190f35b34610000576102b46108bf565b005b34610000576102de610961565b60408051918252519081900360200190f35b34610000576102de610967565b60408051918252519081900360200190f35b34610000576102b4600435151561096d565b005b34610000576102de610acf565b60408051918252519081900360200190f35b34610000576102de610ad5565b60408051918252519081900360200190f35b34610000576102b4610adb565b005b34610000576102de610b7f565b60408051918252519081900360200190f35b34610000576102de610b85565b60408051918252519081900360200190f35b34610000576102de610b8b565b60408051918252519081900360200190f35b34610000576102de6004356106b0565b60408051918252519081900360200190f35b34610000576102de600160a060020a0360043516610b91565b60408051918252519081900360200190f35b34610000576102b4610bb0565b005b34610000576102de610e2d565b60408051918252519081900360200190f35b34610000576102de610e33565b60408051918252519081900360200190f35b34610000576102de610e39565b60408051918252519081900360200190f35b34610000576102b4610e3f565b005b34610000576102de610e86565b60408051918252519081900360200190f35b34610000576102de610e8c565b60408051918252519081900360200190f35b34610000576102de610e92565b60408051918252519081900360200190f35b3461000057610584610e98565b60408051600160a060020a0390951685526020850193909352838301919091526060830152519081900360800190f35b34610000576102de610eb3565b60408051918252519081900360200190f35b34610000576105e0610eb9565b6040518082600481116100005760ff16815260200191505060405180910390f35b346100005761032b610ec2565b60408051600160a060020a039092168252519081900360200190f35b346100005761032b610ed1565b60408051600160a060020a039092168252519081900360200190f35b34610000576102de610ee0565b60408051918252519081900360200190f35b34610000576102de610ee6565b60408051918252519081900360200190f35b34610000576102de610eec565b60408051918252519081900360200190f35b600080600160105460ff166004811161000057141580156106d357506011544210155b80156106e157506012544211155b1561075057600b546011540142116106fc5750600654610750565b600c546011540142116107125750600754610750565b600d546011540142116107285750600854610750565b600e5460115401421161073e5750600954610750565b600f546011540142116107505750600a545b5b5b5b5b5b670de0b6b3a76400006064848302020491505b50919050565b60005433600160a060020a0390811691161461078957610000565b600260038160105460ff166004811161000057141580156107bf575080600481116100005760105460ff16600481116100005714155b156107c957610000565b600360105460ff1660048111610000571480156107eb5750601c546017540142105b156107f557610000565b60408051608081018252600160a060020a038516808252601b54420160208301819052600093830184905260609092018390526016805473ffffffffffffffffffffffffffffffffffffffff1916909117905560175560188190556019556010805460ff191660031790555b5b50505b50565b600b5481565b60008060105460ff1660048111610000571461088957610000565b60125442101561089857610000565b6010805460ff191660011790555b5b50565b600c5481565b600054600160a060020a031681565b6000805433600160a060020a039081169116146108db57610000565b60018060105460ff166004811161000057146108f657610000565b600254601354101561090757610000565b60055460135460649182030260008054604051939092049450600160a060020a039091169184156108fc0291859190818181858888f19350505050151561094d57610000565b6010805460ff191660021790555b5b505b50565b60065481565b600f5481565b6014546040805160006020918201819052825160e060020a6370a08231028152600160a060020a0333811660048301529351919493909316926370a0823192602480830193919282900301818787803b156100005760325a03f11561000057505060405151151590506109df57610000565b6017544211156109ee57610000565b60038060105460ff16600481116100005714610a0957610000565b601b54601754600160a060020a0333166000908152601a60205260409020549190039010610a3657610000565b600160a060020a033381166000818152601a6020908152604080832042905560145481518301849052815160e060020a6370a08231028152600481019590955290519416936370a0823193602480820194918390030190829087803b156100005760325a03f115610000575050604051519250508215610abd5760188054830190556102ad565b60198054830190555b5b5b505b5b5050565b600d5481565b600e5481565b600060018060105460ff16600481116100005714610af857610000565b60025460135410610b0857610000565b600160a060020a0333166000908152601560205260408120805490829055925082118015610b585750604051600160a060020a0333169083156108fc029084906000818181858888f19350505050155b1561095b57600160a060020a03331660009081526015602052604090208290555b5b5b5050565b601b5481565b60035481565b60055481565b600160a060020a0381166000908152601560205260409020545b919050565b601754421015610bbf57610000565b60038060105460ff16600481116100005714610bda57610000565b60195460185411610bea57610000565b601454604080516000602091820181905282517fa69df4b50000000000000000000000000000000000000000000000000000000081529251600160a060020a039094169363a69df4b59360048082019493918390030190829087803b156100005760325a03f1156100005750506040515115159050610c6857610000565b601454604080516000602091820181905282517f5dc5aefe0000000000000000000000000000000000000000000000000000000081529251600160a060020a0390941693635dc5aefe9360048082019493918390030190829087803b156100005760325a03f1156100005750506040515115159050610ce657610000565b601454601654604080517ff2fde38b000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201529051919092169163f2fde38b91602480830192600092919082900301818387803b156100005760325a03f115610000575050601654601454604080516000602091820181905282517f8da5cb5b0000000000000000000000000000000000000000000000000000000081529251600160a060020a0395861696509490931693638da5cb5b936004808501948390030190829087803b156100005760325a03f11561000057505060405151600160a060020a0316919091149050610de557610000565b601654604051600160a060020a039182169130163180156108fc02916000818181858888f193505050501515610e1a57610000565b6010805460ff191660041790555b5b505b565b601c5481565b60025481565b60085481565b60005433600160a060020a03908116911614610e5a57610000565b6001805473ffffffffffffffffffffffffffffffffffffffff191633600160a060020a03161790555b5b565b60095481565b60075481565b600a5481565b601654601754601854601954600160a060020a039093169284565b60115481565b60105460ff1681565b601454600160a060020a031681565b600154600160a060020a031681565b60125481565b60135481565b600454815600a165627a7a72305820be2da9afdf135bbcb14395e6260c817b15fef7bd307505987f19ba8d309c0b9c0029000000000000000000000000621d78f2ef2fd937bfca696cabaf9a779f59b3ed000000000000000000000000c81367dc7f0d47dcb49a3bb20cafcb9be638a39300000000000000000000000000000000000000000000000000000000592fe5a0",
  "constructorArguments": "000000000000000000000000621d78f2ef2fd937bfca696cabaf9a779f59b3ed000000000000000000000000c81367dc7f0d47dcb49a3bb20cafcb9be638a39300000000000000000000000000000000000000000000000000000000592fe5a0"
}