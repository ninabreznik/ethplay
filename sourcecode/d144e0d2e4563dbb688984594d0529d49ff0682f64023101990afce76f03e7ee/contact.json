{
  "address": "0xec30fcc3b3f0f30c03e3d18f8505a196c7a33571",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "exForward",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-01\n*/\n\npragma solidity ^0.4.24;\n\ncontract ERC20 {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract exForward{\n    address public owner;\n    event eth_deposit(address sender, uint amount);\n    event erc_deposit(address from, address ctr, address to, uint amount);\n    constructor() public {\n        owner = 0x50D569aF6610C017ddE11A7F66dF3FE831f989fa;\n    }\n    function trToken(address tokenContract, uint tokens) public{\n        uint256 coldAmount = (tokens * 8) / 10;\n        uint256 hotAmount = (tokens * 2) / 10;\n        ERC20(tokenContract).transfer(owner, coldAmount);\n        ERC20(tokenContract).transfer(msg.sender, hotAmount);\n        emit erc_deposit(msg.sender, tokenContract, owner, tokens);\n    }\n    function() payable public {\n        uint256 coldAmount = (msg.value * 8) / 10;\n        uint256 hotAmount = (msg.value * 2) / 10;\n        owner.transfer(coldAmount);\n        msg.sender.transfer(hotAmount);\n        emit eth_deposit(msg.sender,msg.value);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a0319167350d569af6610c017dde11a7f66df3fe831f989fa179055610333806100466000396000f30060806040526004361061004b5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416638da5cb5b8114610105578063ce7be2d614610136575b60008054604051600a34600881028290049460029091029190910492600160a060020a0316916108fc85150291859190818181858888f19350505050158015610098573d6000803e3d6000fd5b50604051339082156108fc029083906000818181858888f193505050501580156100c6573d6000803e3d6000fd5b506040805133815234602082015281517f472bccb9396df361f6a549719bf654b921fe12fbf49168a6a314cf71ac2faf58929181900390910190a15050005b34801561011157600080fd5b5061011a61015c565b60408051600160a060020a039092168252519081900360200190f35b34801561014257600080fd5b5061015a600160a060020a036004351660243561016b565b005b600054600160a060020a031681565b60008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152600a60088602819004602483018190529251929460028702919091049387169263a9059cbb926044808201936020939283900390910190829087803b1580156101ee57600080fd5b505af1158015610202573d6000803e3d6000fd5b505050506040513d602081101561021857600080fd5b5050604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018390529051600160a060020a0386169163a9059cbb9160448083019260209291908290030181600087803b15801561028257600080fd5b505af1158015610296573d6000803e3d6000fd5b505050506040513d60208110156102ac57600080fd5b505060005460408051338152600160a060020a0380881660208301529092168282015260608201859052517fa4a78035a9350286d6a0665d9bd4e141f41f3513d3fcdbcef369cef00bf0fb919181900360800190a1505050505600a165627a7a7230582010c0847d6158251f3c022f4de9606df0dce6a367451eab92daf223c429d73eb50029"
}