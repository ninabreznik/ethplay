{
  "address": "0xd64129ac9ec6307b9625869e817b6c45eaee80a9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FFCToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-06\n*/\n\npragma solidity ^0.4.11;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value)public  returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value)public  returns (bool);\n  function approve(address spender, uint256 value)public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev modifier to allow actions only when the contract IS paused\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev modifier to allow actions only when the contract IS NOT paused\n   */\n  modifier whenPaused {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused returns (bool) {\n    paused = true;\n    emit Pause();\n    return true;\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause()public onlyOwner whenPaused returns (bool) {\n    paused = false;\n    emit Unpause();\n    return true;\n  }\n}\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value)public returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value)public returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n/**\n * @title FFC Token\n * @dev FFC is PausableToken\n */\ncontract FFCToken is StandardToken, Pausable {\n\n  string public constant name = \"FFC\";\n  string public constant symbol = \"FFC\";\n  uint256 public constant decimals = 18;\n  \n  // lock\n  struct LockToken{\n      uint256 amount;\n      uint32  time;\n  }\n  struct LockTokenSet{\n      LockToken[] lockList;\n  }\n  mapping ( address => LockTokenSet ) addressTimeLock;\n  mapping ( address => bool ) lockAdminList;\n  event TransferWithLockEvt(address indexed from, address indexed to, uint256 value,uint32 lockTime );\n  /**\n    * @dev Creates a new MPKToken instance\n    */\n  constructor() public {\n    totalSupply = 10 * (10 ** 8) * (10 ** 18);\n    balances[msg.sender] = totalSupply;\n  }\n  \n  function transfer(address _to, uint256 _value)public whenNotPaused returns (bool) {\n    assert ( balances[msg.sender].sub( getLockAmount( msg.sender ) ) >= _value );\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value)public whenNotPaused returns (bool) {\n    assert ( balances[_from].sub( getLockAmount( msg.sender ) ) >= _value );\n    return super.transferFrom(_from, _to, _value);\n  }\n  function getLockAmount( address myaddress ) public view returns ( uint256 lockSum ) {\n        uint256 lockAmount = 0;\n        for( uint32 i = 0; i < addressTimeLock[myaddress].lockList.length; i ++ ){\n            if( addressTimeLock[myaddress].lockList[i].time > now ){\n                lockAmount += addressTimeLock[myaddress].lockList[i].amount;\n            }\n        }\n        return lockAmount;\n  }\n  \n  function getLockListLen( address myaddress ) public view returns ( uint256 lockAmount  ){\n      return addressTimeLock[myaddress].lockList.length;\n  }\n  \n  function getLockByIdx( address myaddress,uint32 idx ) public view returns ( uint256 lockAmount, uint32 lockTime ){\n      if( idx >= addressTimeLock[myaddress].lockList.length ){\n        return (0,0);          \n      }\n      lockAmount = addressTimeLock[myaddress].lockList[idx].amount;\n      lockTime = addressTimeLock[myaddress].lockList[idx].time;\n      return ( lockAmount,lockTime );\n  }\n  \n  function transferWithLock( address _to, uint256 _value,uint32 _lockTime )public whenNotPaused {\n      assert( lockAdminList[msg.sender] == true  );\n      assert( _lockTime > now  );\n      transfer( _to, _value );\n      bool needNewLock = true;\n      for( uint32 i = 0 ; i< addressTimeLock[_to].lockList.length; i ++ ){\n          if( addressTimeLock[_to].lockList[i].time < now ){\n              addressTimeLock[_to].lockList[i].time = _lockTime;\n              addressTimeLock[_to].lockList[i].amount = _value;\n              emit TransferWithLockEvt( msg.sender,_to,_value,_lockTime );\n              needNewLock = false;\n              break;\n          }\n      }\n      if( needNewLock == true ){\n          // add a lock\n          addressTimeLock[_to].lockList.length ++ ;\n          addressTimeLock[_to].lockList[(addressTimeLock[_to].lockList.length-1)].time = _lockTime;\n          addressTimeLock[_to].lockList[(addressTimeLock[_to].lockList.length-1)].amount = _value;\n          emit TransferWithLockEvt( msg.sender,_to,_value,_lockTime);\n      }\n  }\n  function setLockAdmin(address _to,bool canUse)public onlyOwner{\n      assert( lockAdminList[_to] != canUse );\n      lockAdminList[_to] = canUse;\n  }\n  function canUseLock()  public view returns (bool){\n      return lockAdminList[msg.sender];\n  }\n\n}",
  "bytecode": "60806040526003805460a060020a60ff021916905534801561002057600080fd5b5060038054600160a060020a031916339081179091556b033b2e3c9fd0803ce800000060008181559182526001602052604090912055610f3e806100656000396000f3006080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610116578063095ea7b3146101a057806318160ddd146101d85780631f49caac146101ff57806323b872dd14610214578063313ce5671461023e578063399d6465146102535780633f4ba83a1461027457806347ec81381461028957806356f2f140146102b85780635c975abb146102d95780636e53909a146102ee57806370a08231146103145780638456cb59146103355780638da5cb5b1461034a57806395d89b4114610116578063a9059cbb1461037b578063bb6e85db1461039f578063dd62ed3e146103e7578063f2fde38b1461040e575b600080fd5b34801561012257600080fd5b5061012b61042f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016557818101518382015260200161014d565b50505050905090810190601f1680156101925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ac57600080fd5b506101c4600160a060020a0360043516602435610466565b604080519115158252519081900360200190f35b3480156101e457600080fd5b506101ed610508565b60408051918252519081900360200190f35b34801561020b57600080fd5b506101c461050e565b34801561022057600080fd5b506101c4600160a060020a0360043581169060243516604435610525565b34801561024a57600080fd5b506101ed61058c565b34801561025f57600080fd5b506101ed600160a060020a0360043516610591565b34801561028057600080fd5b506101c4610659565b34801561029557600080fd5b506102b6600160a060020a036004351660243563ffffffff604435166106d8565b005b3480156102c457600080fd5b506101ed600160a060020a03600435166109b5565b3480156102e557600080fd5b506101c46109d0565b3480156102fa57600080fd5b506102b6600160a060020a036004351660243515156109e0565b34801561032057600080fd5b506101ed600160a060020a0360043516610a4b565b34801561034157600080fd5b506101c4610a66565b34801561035657600080fd5b5061035f610aea565b60408051600160a060020a039092168252519081900360200190f35b34801561038757600080fd5b506101c4600160a060020a0360043516602435610af9565b3480156103ab57600080fd5b506103c9600160a060020a036004351663ffffffff60243516610b55565b6040805192835263ffffffff90911660208301528051918290030190f35b3480156103f357600080fd5b506101ed600160a060020a0360043581169060243516610c14565b34801561041a57600080fd5b506102b6600160a060020a0360043516610c3f565b60408051808201909152600381527f4646430000000000000000000000000000000000000000000000000000000000602082015281565b60008115806104965750336000908152600260209081526040808320600160a060020a0387168452909152902054155b15156104a157600080fd5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60005481565b3360009081526005602052604090205460ff165b90565b60035460009060a060020a900460ff161561053f57600080fd5b8161057161054c33610591565b600160a060020a0387166000908152600160205260409020549063ffffffff610cd416565b101561057957fe5b610584848484610ce6565b949350505050565b601281565b600080805b600160a060020a03841660009081526004602052604090205463ffffffff8216101561065257600160a060020a0384166000908152600460205260409020805442919063ffffffff84169081106105e957fe5b600091825260209091206001600290920201015463ffffffff16111561064a57600160a060020a0384166000908152600460205260409020805463ffffffff831690811061063357fe5b906000526020600020906002020160000154820191505b600101610596565b5092915050565b600354600090600160a060020a0316331461067357600080fd5b60035460a060020a900460ff16151561068b57600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a150600190565b600354600090819060a060020a900460ff16156106f457600080fd5b3360009081526005602052604090205460ff16151560011461071257fe5b4263ffffffff84161161072157fe5b61072b8585610af9565b5060019150600090505b600160a060020a03851660009081526004602052604090205463ffffffff8216101561089557600160a060020a0385166000908152600460205260409020805442919063ffffffff841690811061078857fe5b600091825260209091206001600290920201015463ffffffff16101561088d57600160a060020a0385166000908152600460205260409020805484919063ffffffff84169081106107d557fe5b60009182526020808320600292909202909101600101805463ffffffff191663ffffffff948516179055600160a060020a0388168252600490526040902080548692841690811061082257fe5b6000918252602091829020600290910201919091556040805186815263ffffffff8616928101929092528051600160a060020a0388169233927fcca13628a39fb6f93b19dcd48c288605d535eb491cacb43ab1a509aec720785a92918290030190a360009150610895565b600101610735565b600182151514156109ae57600160a060020a03851660009081526004602052604090208054906108c89060018301610eb4565b50600160a060020a0385166000908152600460205260409020805484919060001981019081106108f457fe5b60009182526020808320600292909202909101600101805463ffffffff191663ffffffff9490941693909317909255600160a060020a03871681526004909152604090208054859190600019810190811061094b57fe5b6000918252602091829020600290910201919091556040805186815263ffffffff8616928101929092528051600160a060020a0388169233927fcca13628a39fb6f93b19dcd48c288605d535eb491cacb43ab1a509aec720785a92918290030190a35b5050505050565b600160a060020a031660009081526004602052604090205490565b60035460a060020a900460ff1681565b600354600160a060020a031633146109f757600080fd5b600160a060020a03821660009081526005602052604090205460ff1615158115151415610a2057fe5b600160a060020a03919091166000908152600560205260409020805460ff1916911515919091179055565b600160a060020a031660009081526001602052604090205490565b600354600090600160a060020a03163314610a8057600080fd5b60035460a060020a900460ff1615610a9757600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a150600190565b600354600160a060020a031681565b60035460009060a060020a900460ff1615610b1357600080fd5b81610b3c610b2033610591565b336000908152600160205260409020549063ffffffff610cd416565b1015610b4457fe5b610b4e8383610df5565b9392505050565b600160a060020a038216600090815260046020526040812054819063ffffffff841610610b8757506000905080610c0d565b600160a060020a0384166000908152600460205260409020805463ffffffff8516908110610bb157fe5b60009182526020808320600290920290910154600160a060020a03871683526004909152604090912080549193509063ffffffff8516908110610bf057fe5b600091825260209091206001600290920201015463ffffffff1690505b9250929050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a03163314610c5657600080fd5b600160a060020a0381161515610c6b57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610ce057fe5b50900390565b600160a060020a03808416600090815260026020908152604080832033845282528083205493861683526001909152812054909190610d2b908463ffffffff610ea516565b600160a060020a038086166000908152600160205260408082209390935590871681522054610d60908463ffffffff610cd416565b600160a060020a038616600090815260016020526040902055610d89818463ffffffff610cd416565b600160a060020a03808716600081815260026020908152604080832033845282529182902094909455805187815290519288169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3506001949350505050565b33600090815260016020526040812054610e15908363ffffffff610cd416565b3360009081526001602052604080822092909255600160a060020a03851681522054610e47908363ffffffff610ea516565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600082820183811015610b4e57fe5b815481835581811115610ee057600202816002028360005260206000209182019101610ee09190610ee5565b505050565b61052291905b80821115610f0e576000815560018101805463ffffffff19169055600201610eeb565b50905600a165627a7a72305820a1ac9638fa0d4e7a4bfd03277ed42ae42f8bf4294b234bd978884c0bd0c04ec30029"
}