{
  "address": "0xa41f4d2797f98abafb13d98345318dc33cc1fbfc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PreSale",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-21\n*/\n\npragma solidity ^0.4.23;\n\n/**\n *      Preparing contracts \n * \n **/\n\n// Ownable contract with CFO\ncontract Ownable {\n    address public owner;\n    address public cfoAddress;\n\n    constructor() public{\n        owner = msg.sender;\n        cfoAddress = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    modifier onlyCFO() {\n        require(msg.sender == cfoAddress);\n        _;\n    }\n\n    function transferOwnership(address newOwner) external onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n    \n    function setCFO(address newCFO) external onlyOwner {\n        require(newCFO != address(0));\n\n        cfoAddress = newCFO;\n    }\n}\n\n// Pausable contract which allows children to implement an emergency stop mechanism.\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    // Modifier to make a function callable only when the contract is not paused.\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    // Modifier to make a function callable only when the contract is paused.\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n\n    // called by the owner to pause, triggers stopped state\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    // called by the owner to unpause, returns to normal state\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}\n\n// Gen mixer\ncontract MixGenInterface {\n    function isMixGen() public pure returns (bool);\n    function openEgg(uint64 userNumber, uint16 eggQuality) public returns (uint256 genes, uint16 quality);\n    function uniquePet(uint64 newPetId) public returns (uint256 genes, uint16 quality);\n}\n\ncontract RewardContract {\n     function get(address receiver, uint256 ethValue) external;\n}\n\n// Configuration of external contracts\ncontract ExternalContracts is Ownable {\n    MixGenInterface public geneScience;\n    RewardContract public reward;\n    \n    address public storeAddress;\n    \n    function setMixGenAddress(address _address) external onlyOwner {\n        MixGenInterface candidateContract = MixGenInterface(_address);\n        require(candidateContract.isMixGen());\n        \n        geneScience = candidateContract;\n    }\n    \n    function setStoreAddress(address _address) external onlyOwner {\n        storeAddress = _address;\n    }\n        \n    function setRewardAddress(address _address) external onlyOwner {\n        reward = RewardContract(_address);\n    }\n}\n\n// Population settings and base functions\ncontract PopulationControl is Pausable {\n    \n    // start breed timeout is 12 hours\n    uint32 public breedTimeout = 12 hours;\n    uint32 maxTimeout = 178 days;\n    \n    function setBreedTimeout(uint32 timeout) external onlyOwner {\n        require(timeout <= maxTimeout);\n        \n        breedTimeout = timeout;\n    }\n}\n\n/**\n *      Presale main contracts \n * \n **/\n\n// Pet base contract\ncontract PetBase is PopulationControl{\n    \n    // events\n    event Birth(address owner, uint64 petId, uint16 quality, uint256 genes);\n    event Death(uint64 petId);\n    \n    event Transfer(address from, address to, uint256 tokenId);\n    \n    // data storage\n    struct Pet {\n        uint256 genes;\n        uint64 birthTime;\n        uint16 quality;\n    }\n    \n    mapping (uint64 => Pet) pets;\n    mapping (uint64 => address) petIndexToOwner;\n    mapping (address => uint256) public ownershipTokenCount;\n    mapping (uint64 => uint64) breedTimeouts;\n \n    uint64 tokensCount;\n    uint64 lastTokenId;\n\n    // pet creation\n    function createPet(\n        uint256 _genes,\n        uint16 _quality,\n        address _owner\n    )\n        internal\n        returns (uint64)\n    {\n        Pet memory _pet = Pet({\n            genes: _genes,\n            birthTime: uint64(now),\n            quality: _quality\n        });\n               \n        lastTokenId++;\n        tokensCount++;\n\t\t\n        uint64 newPetId = lastTokenId;\n                \n        pets[newPetId] = _pet;\n        \n        _transfer(0, _owner, newPetId);\n        \n        breedTimeouts[newPetId] = uint64( now + (breedTimeout / 2) );\n        emit Birth(_owner, newPetId, _quality, _genes);\n\n        return newPetId;\n    }\n    \n    // transfer pet function\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        uint64 _tokenId64bit = uint64(_tokenId);\n        \n        ownershipTokenCount[_to]++;\n        petIndexToOwner[_tokenId64bit] = _to;\n        if (_from != address(0)) {\n            ownershipTokenCount[_from]--;\n        }\n        \n         emit Transfer(_from, _to, _tokenId);\n    }\n    \n\t// calculation of recommended price\n    function recommendedPrice(uint16 quality) public pure returns(uint256 price) {\n        \n        require(quality <= uint16(0xF000));\n        require(quality >= uint16(0x1000));\n        \n        uint256 startPrice = 1000;\n        \n        price = startPrice;\n        \n        uint256 revertQuality = uint16(0xF000) - quality;\n        uint256 oneLevel = uint16(0x2000);\n        uint256 oneQuart = oneLevel/4;\n        \n        uint256 fullLevels = revertQuality/oneLevel;\n        uint256 fullQuarts =  (revertQuality % oneLevel) / oneQuart ;\n        \n        uint256 surplus = revertQuality - (fullLevels*oneLevel) - (fullQuarts*oneQuart);\n        \n        \n        // coefficeint is 4.4 per level\n        price = price * 44**fullLevels;\n        price = price / 10**fullLevels;\n        \n        // quart coefficient is sqrt(sqrt(4.4))\n        if(fullQuarts != 0)\n        {\n            price = price * 14483154**fullQuarts;\n            price = price / 10**(7 * fullQuarts);\n        }\n\n        // for surplus we using next quart coefficient\n        if(surplus != 0)\n        {\n            uint256 nextQuartPrice = (price * 14483154) / 10**7;\n            uint256 surPlusCoefficient = surplus * 10**6  /oneQuart;\n            uint256 surPlusPrice = ((nextQuartPrice - price) * surPlusCoefficient) / 10**6;\n            \n            price+= surPlusPrice;\n        }\n        \n        price*= 50 szabo;\n    }\n    \n\t// grade calculation based on parrot quality\n    function getGradeByQuailty(uint16 quality) public pure returns (uint8 grade) {\n        \n        require(quality <= uint16(0xF000));\n        require(quality >= uint16(0x1000));\n        \n        if(quality == uint16(0xF000))\n            return 7;\n        \n        quality+= uint16(0x1000);\n        \n        return uint8 ( quality / uint16(0x2000) );\n    }\n}\n\n// Ownership\ncontract PetOwnership is PetBase {\n\n    // function for the opportunity to gift parrots before the start of the game\n    function transfer(\n        address _to,\n        uint256 _tokenId\n    )\n        external\n        whenNotPaused\n    {\n        require(_to != address(0));\n        require(_to != address(this));\n        require(_owns(msg.sender, uint64(_tokenId)));\n\n        _transfer(msg.sender, _to, _tokenId);\n    }\n \n\t// checks if a given address is the current owner of a particular pet\n    function _owns(address _claimant, uint64 _tokenId) internal view returns (bool) {\n        return petIndexToOwner[_tokenId] == _claimant;\n    }\n    \n\t// returns the address currently assigned ownership of a given pet\n    function ownerOf(uint256 _tokenId) external view returns (address owner) {\n        uint64 _tokenId64bit = uint64(_tokenId);\n        owner = petIndexToOwner[_tokenId64bit];\n        \n        require(owner != address(0));\n    }   \n}\n\n// Settings for eggs minted by administration\ncontract EggMinting is PetOwnership{\n    \n    uint8 public uniquePetsCount = 100;\n    \n    uint16 public globalPresaleLimit = 1500;\n\n    mapping (uint16 => uint16) public eggLimits;\n    mapping (uint16 => uint16) public purchesedEggs;\n    \n    constructor() public {\n        eggLimits[55375] = 200;\n        eggLimits[47780] = 400;\n        eggLimits[38820] = 100;\n        eggLimits[31201] = 50;\n    }\n    \n    function totalSupply() public view returns (uint) {\n        return tokensCount;\n    }\n    \n    function setEggLimit(uint16 quality, uint16 limit) external onlyOwner {\n        eggLimits[quality] = limit;\n    }\n\n    function eggAvailable(uint16 quality) constant public returns(bool) {\n        // first 100 eggs - only cheap\n        if( quality < 47000 && tokensCount < ( 100 + uniquePetsCount ) )\n           return false;\n        \n        return (eggLimits[quality] > purchesedEggs[quality]);\n    }\n}\n\n// Buying eggs from the company\ncontract EggPurchase is EggMinting, ExternalContracts {\n    \n    uint16[4] discountThresholds =    [20, 100, 250, 500];\n    uint8[4]  discountPercents   =    [75, 50,  30,  20 ];\n    \n\t// purchasing egg\n    function purchaseEgg(uint64 userNumber, uint16 quality) external payable whenNotPaused {\n\n        require(tokensCount >= uniquePetsCount);\n\t\t\n        // checking egg availablity\n        require(eggAvailable(quality));\n        \n        // checking total count of presale eggs\n        require(tokensCount <= globalPresaleLimit);\n\n        // calculating price\n        uint256 eggPrice = ( recommendedPrice(quality) * (100 - getCurrentDiscountPercent()) ) / 100;\n\n        // checking payment amount\n        require(msg.value >= eggPrice);\n        \n        // increment egg counter\n        purchesedEggs[quality]++;\n        \n        // initialize variables for store child genes and quility\n        uint256 childGenes;\n        uint16 childQuality;\n\n        // get genes and quality of new pet by opening egg through external interface\n        (childGenes, childQuality) = geneScience.openEgg(userNumber, quality);\n         \n        // creating new pet\n        createPet(\n            childGenes,      // genes string\n            childQuality,    // child quality by open egg\n            msg.sender       // owner\n        );\n        \n        reward.get(msg.sender, recommendedPrice(quality));\n    }\n    \n    function getCurrentDiscountPercent() constant public returns (uint8 discount) {\n        \n        for(uint8 i = 0; i <= 3; i++)\n        {\n            if(tokensCount < (discountThresholds[i] + uniquePetsCount ))\n                return discountPercents[i];\n        }\n        \n        return 10;\n    }\n}\n\n// Launch it\ncontract PreSale is EggPurchase {\n    \n    constructor() public {\n        paused = true;\n    }\n        \n    function generateUniquePets(uint8 count) external onlyOwner whenNotPaused {\n        \n        require(storeAddress != address(0));\n        require(address(geneScience) != address(0));\n        require(tokensCount < uniquePetsCount);\n        \n        uint256 childGenes;\n        uint16 childQuality;\n        uint64 newPetId;\n\n        for(uint8 i = 0; i< count; i++)\n        {\n            if(tokensCount >= uniquePetsCount)\n                continue;\n            \n            newPetId = tokensCount+1;\n\n            (childGenes, childQuality) = geneScience.uniquePet(newPetId);\n            createPet(childGenes, childQuality, storeAddress);\n        }\n    }\n    \n    function getPet(uint256 _id) external view returns (\n        uint64 birthTime,\n        uint256 genes,\n        uint64 breedTimeout,\n        uint16 quality,\n        address owner\n    ) {\n        uint64 _tokenId64bit = uint64(_id);\n        \n        Pet storage pet = pets[_tokenId64bit];\n        \n        birthTime = pet.birthTime;\n        genes = pet.genes;\n        breedTimeout = uint64(breedTimeouts[_tokenId64bit]);\n        quality = pet.quality;\n        owner = petIndexToOwner[_tokenId64bit];\n    }\n    \n    function unpause() public onlyOwner whenPaused {\n        require(address(geneScience) != address(0));\n\t\trequire(address(reward) != address(0));\n\n        super.unpause();\n    }\n    \n    function withdrawBalance(uint256 summ) external onlyCFO {\n        cfoAddress.transfer(summ);\n    }\n}",
  "bytecode": ""
}