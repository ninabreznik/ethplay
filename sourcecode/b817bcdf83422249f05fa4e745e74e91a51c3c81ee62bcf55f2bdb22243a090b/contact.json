{
  "address": "0xe9b9480767774ccb29f3502629bfab1ed74bee36",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BSCore",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-24\n*/\n\npragma solidity ^0.4.19;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n   @title ERC827 interface, an extension of ERC20 token standard\n\n   Interface of a ERC827 token, following the ERC20 standard with extra\n   methods to transfer value and data and execute calls in transfers and\n   approvals.\n */\ncontract ERC827 is ERC20 {\n\n  function approve( address _spender, uint256 _value, bytes _data ) public returns (bool);\n  function transfer( address _to, uint256 _value, bytes _data ) public returns (bool);\n  function transferFrom( address _from, address _to, uint256 _value, bytes _data ) public returns (bool);\n\n}\n\ncontract AccessControl {\n    address public ceoAddress;\n    address public cfoAddress;\n    address public cooAddress;\n\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n    bool public paused = false;\n\n    /// @dev Access modifier for CEO-only functionality\n    modifier onlyCEO() {\n        require(msg.sender == ceoAddress);\n        _;\n    }\n\n    /// @dev Access modifier for CFO-only functionality\n    modifier onlyCFO() {\n        require(msg.sender == cfoAddress);\n        _;\n    }\n\n    /// @dev Access modifier for COO-only functionality\n    modifier onlyCOO() {\n        require(msg.sender == cooAddress);\n        _;\n    }\n\n    modifier onlyCLevel() {\n        require(\n            msg.sender == cooAddress || \n            msg.sender == ceoAddress || \n            msg.sender == cfoAddress\n        );\n        _;\n    }\n\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n    /// @param _newCEO The address of the new CEO\n    function setCEO(address _newCEO) external onlyCEO {\n        require(_newCEO != address(0));\n\n        ceoAddress = _newCEO;\n    }\n\n    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\n    /// @param _newCFO The address of the new CFO\n    function setCFO(address _newCFO) external onlyCEO {\n        require(_newCFO != address(0));\n\n        cfoAddress = _newCFO;\n    }\n\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\n    /// @param _newCOO The address of the new COO\n    function setCOO(address _newCOO) external onlyCEO {\n        require(_newCOO != address(0));\n\n        cooAddress = _newCOO;\n    }\n\n    /*** Pausable functionality adapted from OpenZeppelin ***/\n\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /// @dev Modifier to allow actions only when the contract IS paused\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\n    ///  a bug or exploit is detected and we need to limit damage.\n    function pause() external onlyCLevel whenNotPaused {\n        paused = true;\n    }\n\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\n    ///  one reason we may pause the contract is when CFO or COO accounts are\n    ///  compromised.\n    /// @notice This is public rather than external so it can be called by\n    ///  derived contracts.\n    function unpause() public onlyCEO whenPaused {\n        paused = false;\n    }\n}\n\n/// @title \ncontract TournamentInterface {\n    /// @dev simply a boolean to indicate this is the contract we expect to be\n    function isTournament() public pure returns (bool);\n    function isPlayerIdle(address _owner, uint256 _playerId) public view returns (bool);\n}\n\n/// @title Base contract for BS. Holds all common structs, events and base variables.\ncontract BSBase is AccessControl {\n    /*** EVENTS ***/\n\n    /// @dev The Birth event is fired whenever a new player comes into existence. \n    event Birth(address owner, uint32 playerId, uint16 typeId, uint8 attack, uint8 defense, uint8 stamina, uint8 xp, uint8 isKeeper, uint16 skillId);\n\n    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a player\n    ///  ownership is assigned, including births.\n    event Transfer(address from, address to, uint256 tokenId);\n\n    struct Player {\n        uint16 typeId;\n        uint8 attack;\n        uint8 defense;\n        uint8 stamina;\n        uint8 xp;\n        uint8 isKeeper;\n        uint16 skillId;\n        uint8 isSkillOn;\n    }\n\n    Player[] players;\n    uint256 constant commonPlayerCount = 10;\n    uint256 constant totalPlayerSupplyLimit = 80000000;\n    mapping (uint256 => address) public playerIndexToOwner;\n    mapping (address => uint256) ownershipTokenCount;\n    mapping (uint256 => address) public playerIndexToApproved;\n    /// SaleClockAuction public saleAuction;\n    ERC827 public joyTokenContract;\n    TournamentInterface public tournamentContract;\n\n    /// @dev Assigns ownership of a specific Player to an address.\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        // since the number of players is capped to 2^32\n        // there is no way to overflow this\n        ownershipTokenCount[_to]++;\n        // transfer ownership\n        playerIndexToOwner[_tokenId] = _to;\n        // When creating new player _from is 0x0, but we can't account that address.\n        if (_from != address(0)) {\n            ownershipTokenCount[_from]--;\n            // clear any previously approved ownership exchange\n            delete playerIndexToApproved[_tokenId];\n        }\n        // Emit the transfer event.\n        Transfer(_from, _to, _tokenId);\n    }\n\n    function _createPlayer(\n        address _owner,\n        uint256 _typeId,\n        uint256 _attack,\n        uint256 _defense,\n        uint256 _stamina,\n        uint256 _xp,\n        uint256 _isKeeper,\n        uint256 _skillId\n    )\n        internal\n        returns (uint256)\n    {\n        Player memory _player = Player({\n            typeId: uint16(_typeId), \n            attack: uint8(_attack), \n            defense: uint8(_defense), \n            stamina: uint8(_stamina),\n            xp: uint8(_xp),\n            isKeeper: uint8(_isKeeper),\n            skillId: uint16(_skillId),\n            isSkillOn: 0\n        });\n        uint256 newPlayerId = players.push(_player) - 1;\n\n        require(newPlayerId <= totalPlayerSupplyLimit);\n\n        // emit the birth event\n        Birth(\n            _owner,\n            uint32(newPlayerId),\n            _player.typeId,\n            _player.attack,\n            _player.defense,\n            _player.stamina,\n            _player.xp,\n            _player.isKeeper,\n            _player.skillId\n        );\n\n        // This will assign ownership, and also emit the Transfer event as\n        // per ERC721 draft\n        _transfer(0, _owner, newPlayerId);\n\n        return newPlayerId;\n    }\n}\n\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n/// @author Dieter Shirley <[emailÂ protected]> (https://github.com/dete)\ncontract ERC721 {\n    // Required methods\n    function totalSupply() public view returns (uint256 total);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\n    function approve(address _to, uint256 _tokenId) public;\n    function transfer(address _to, uint256 _tokenId) public;\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n\n    // Events\n    event Transfer(address from, address to, uint256 tokenId);\n    event Approval(address owner, address approved, uint256 tokenId);\n\n    // Optional\n    // function name() public view returns (string name);\n    // function symbol() public view returns (string symbol);\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\n\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n    function supportsInterface(bytes4 _interfaceID) public view returns (bool);\n}\n\n/// @title The facet of the BS core contract that manages ownership, ERC-721 (draft) compliant.\ncontract BSOwnership is BSBase, ERC721 {\n\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n    string public constant name = \"BitSoccer Player\";\n    string public constant symbol = \"BSP\";\n\n    bytes4 constant InterfaceSignature_ERC165 =\n        bytes4(keccak256(\"supportsInterface(bytes4)\"));\n\n    bytes4 constant InterfaceSignature_ERC721 =\n        bytes4(keccak256(\"name()\")) ^\n        bytes4(keccak256(\"symbol()\")) ^\n        bytes4(keccak256(\"totalSupply()\")) ^\n        bytes4(keccak256(\"balanceOf(address)\")) ^\n        bytes4(keccak256(\"ownerOf(uint256)\")) ^\n        bytes4(keccak256(\"approve(address,uint256)\")) ^\n        bytes4(keccak256(\"transfer(address,uint256)\")) ^\n        bytes4(keccak256(\"transferFrom(address,address,uint256)\")) ^\n        bytes4(keccak256(\"tokensOfOwner(address)\"));\n\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n    ///  Returns true for any standardized interfaces implemented by this contract. We implement\n    ///  ERC-165 (obviously!) and ERC-721.\n    function supportsInterface(bytes4 _interfaceID) public view returns (bool)\n    {\n        // DEBUG ONLY\n        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9f40b779));\n\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n    }\n\n    // Internal utility functions: These functions all assume that their input arguments\n    // are valid. We leave it to public methods to sanitize their inputs and follow\n    // the required logic.\n\n    /// @dev Checks if a given address is the current owner of a particular Player.\n    /// @param _claimant the address we are validating against.\n    /// @param _tokenId player id, only valid when > 0\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return playerIndexToOwner[_tokenId] == _claimant;\n    }\n\n    function _isIdle(address _owner, uint256 _tokenId) internal view returns (bool) {\n        return (tournamentContract == address(0) || tournamentContract.isPlayerIdle(_owner, _tokenId));\n    }\n\n    /// @dev Checks if a given address currently has transferApproval for a particular Player.\n    /// @param _claimant the address we are confirming player is approved for.\n    /// @param _tokenId player id, only valid when > 0\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return playerIndexToApproved[_tokenId] == _claimant;\n    }\n\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\n    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\n    ///  _approve() and transferFrom() are used together for putting players on auction, and\n    ///  there is no value in spamming the log with Approval events in that case.\n    function _approve(uint256 _tokenId, address _approved) internal {\n        playerIndexToApproved[_tokenId] = _approved;\n    }\n\n    /// @notice Returns the number of players owned by a specific address.\n    /// @param _owner The owner address to check.\n    /// @dev Required for ERC-721 compliance\n    function balanceOf(address _owner) public view returns (uint256 count) {\n        return ownershipTokenCount[_owner];\n    }\n\n    /// @notice Transfers a Player to another address. If transferring to a smart\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\n    ///  BSPlayers specifically) or your Player may be lost forever. Seriously.\n    /// @param _to The address of the recipient, can be a user or contract.\n    /// @param _tokenId The ID of the player to transfer.\n    /// @dev Required for ERC-721 compliance.\n    function transfer(\n        address _to,\n        uint256 _tokenId\n    )\n        public\n        whenNotPaused\n    {\n        // Safety check to prevent against an unexpected 0x0 default.\n        require(_to != address(0));\n        // Disallow transfers to this contract to prevent accidental misuse.\n        require(_to != address(this));\n\n        // Disallow transfers to the auction contracts to prevent accidental\n        // misuse. Auction contracts should only take ownership of players\n        // through the allow + transferFrom flow.\n        // require(_to != address(saleAuction));\n\n        // You can only send your own player.\n        require(_owns(msg.sender, _tokenId));\n        require(_isIdle(msg.sender, _tokenId));\n\n        // Reassign ownership, clear pending approvals, emit Transfer event.\n        _transfer(msg.sender, _to, _tokenId);\n    }\n\n    /// @notice Grant another address the right to transfer a specific Player via\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\n    ///  clear all approvals.\n    /// @param _tokenId The ID of the Player that can be transferred if this call succeeds.\n    /// @dev Required for ERC-721 compliance.\n    function approve(\n        address _to,\n        uint256 _tokenId\n    )\n        public\n        whenNotPaused\n    {\n        // Only an owner can grant transfer approval.\n        require(_owns(msg.sender, _tokenId));\n        require(_isIdle(msg.sender, _tokenId));\n\n        // Register the approval (replacing any previous approval).\n        _approve(_tokenId, _to);\n\n        // Emit approval event.\n        Approval(msg.sender, _to, _tokenId);\n    }\n\n    /// @notice Transfer a Player owned by another address, for which the calling address\n    ///  has previously been granted transfer approval by the owner.\n    /// @param _from The address that owns the Player to be transfered.\n    /// @param _to The address that should take ownership of the Player. Can be any address,\n    ///  including the caller.\n    /// @param _tokenId The ID of the player to be transferred.\n    /// @dev Required for ERC-721 compliance.\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    )\n        public\n        whenNotPaused\n    {\n        // Safety check to prevent against an unexpected 0x0 default.\n        require(_to != address(0));\n        // Disallow transfers to this contract to prevent accidental misuse.\n        require(_to != address(this));\n        // Check for approval and valid ownership\n        require(_approvedFor(msg.sender, _tokenId));\n        require(_owns(_from, _tokenId));\n        require(_isIdle(_from, _tokenId));\n\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\n        _transfer(_from, _to, _tokenId);\n    }\n\n    /// @notice Returns the total number of Players currently in existence.\n    /// @dev Required for ERC-721 compliance.\n    function totalSupply() public view returns (uint) {\n        return players.length;\n    }\n\n    /// @notice Returns the address currently assigned ownership of a given Player.\n    /// @dev Required for ERC-721 compliance.\n    function ownerOf(uint256 _tokenId)\n        public\n        view\n        returns (address owner)\n    {\n        owner = playerIndexToOwner[_tokenId];\n\n        require(owner != address(0));\n    }\n\n    /// @notice Returns a list of all Player IDs assigned to an address.\n    /// @param _owner The owner whose Players we are interested in.\n    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\n    ///  expensive (it walks the entire Player array looking for players belonging to owner),\n    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n    ///  not contract-to-contract calls.\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n        uint256 tokenCount = balanceOf(_owner);\n\n        uint256[] memory result = new uint256[](tokenCount+commonPlayerCount);\n        uint256 resultIndex = 0;\n\n        uint256 playerId;\n        for (playerId = 1; playerId <= commonPlayerCount; playerId++) {\n            result[resultIndex] = playerId;\n            resultIndex++;\n        }\n\n        if (tokenCount == 0) {\n            return result;\n        } else {\n            uint256 totalPlayers = totalSupply();\n\n            for (; playerId < totalPlayers; playerId++) {\n                if (playerIndexToOwner[playerId] == _owner) {\n                    result[resultIndex] = playerId;\n                    resultIndex++;\n                }\n            }\n\n            return result;\n        }\n    }\n}\n\n/// @title \ninterface RandomPlayerInterface {\n    /// @dev simply a boolean to indicate this is the contract we expect to be\n    function isRandomPlayer() public pure returns (bool);\n\n    /// @return a random player\n    function gen() public returns (uint256 typeId, uint256 attack, uint256 defense, uint256 stamina, uint256 xp, uint256 isKeeper, uint256 skillId);\n}\n\ncontract BSMinting is BSOwnership {\n        /// @dev The address of the sibling contract that is used to generate player\n    ///  genetic combination algorithm.\n    using SafeMath for uint256;\n    RandomPlayerInterface public randomPlayer;\n\n    uint256 constant public exchangePlayerTokenCount = 100 * (10**18);\n\n    uint256 constant promoCreationPlayerLimit = 50000;\n\n    uint256 public promoCreationPlayerCount;\n\n    uint256 public promoEndTime;\n    mapping (address => uint256) public userToken2PlayerCount;\n\n    event ExchangePlayer(address indexed user, uint256 count);\n\n    function BSMinting() public {\n        promoEndTime = now + 2 weeks;\n    }\n\n    function setPromoEndTime(uint256 _endTime) external onlyCOO {\n        promoEndTime = _endTime;\n    }\n\n    /// @dev Update the address of the generator contract, can only be called by the CEO.\n    /// @param _address An address of a contract instance to be used from this point forward.\n    function setRandomPlayerAddress(address _address) external onlyCEO {\n        RandomPlayerInterface candidateContract = RandomPlayerInterface(_address);\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n        require(candidateContract.isRandomPlayer());\n\n        // Set the new contract address\n        randomPlayer = candidateContract;\n    }\n\n    function createPromoPlayer(address _owner, uint256 _typeId, uint256 _attack, uint256 _defense,\n            uint256 _stamina, uint256 _xp, uint256 _isKeeper, uint256 _skillId) external onlyCOO {\n        address sender = _owner;\n        if (sender == address(0)) {\n             sender = cooAddress;\n        }\n\n        require(promoCreationPlayerCount < promoCreationPlayerLimit);\n        promoCreationPlayerCount++;\n        _createPlayer(sender, _typeId, _attack, _defense, _stamina, _xp, _isKeeper, _skillId);\n    }\n\n    function token2Player(address _sender, uint256 _count) public whenNotPaused returns (bool) {\n        require(msg.sender == address(joyTokenContract) || msg.sender == _sender);\n        require(_count > 0);\n        uint256 totalTokenCount = _count.mul(exchangePlayerTokenCount);\n        require(joyTokenContract.transferFrom(_sender, cfoAddress, totalTokenCount));\n\n        uint256 typeId;\n        uint256 attack;\n        uint256 defense;\n        uint256 stamina;\n        uint256 xp;\n        uint256 isKeeper;\n        uint256 skillId;\n        for (uint256 i = 0; i < _count; i++) {\n            (typeId, attack, defense, stamina, xp, isKeeper, skillId) = randomPlayer.gen();\n            _createPlayer(_sender, typeId, attack, defense, stamina, xp, isKeeper, skillId);\n        }\n\n        if (now < promoEndTime) {\n            _onPromo(_sender, _count);\n        }\n        ExchangePlayer(_sender, _count);\n        return true;\n    }\n\n    function _onPromo(address _sender, uint256 _count) internal {\n        uint256 userCount = userToken2PlayerCount[_sender];\n        uint256 userCountNow = userCount.add(_count);\n        userToken2PlayerCount[_sender] = userCountNow;\n        if (userCount == 0) {\n            _createPlayer(_sender, 14, 88, 35, 58, 1, 0, 56);\n        }\n        if (userCount < 5 && userCountNow >= 5) {\n            _createPlayer(_sender, 13, 42, 80, 81, 1, 0, 70);\n        }\n    }\n\n    function createCommonPlayer() external onlyCOO returns (uint256)\n    {\n        require(players.length == 0);\n        players.length++;\n\n        uint16 commonTypeId = 1;\n        address commonAdress = address(0);\n\n        _createPlayer(commonAdress, commonTypeId++, 40, 12, 25, 1, 0, 0);\n        _createPlayer(commonAdress, commonTypeId++, 16, 32, 39, 3, 0, 0);\n        _createPlayer(commonAdress, commonTypeId++, 30, 35, 13, 3, 0, 0);\n        _createPlayer(commonAdress, commonTypeId++, 22, 30, 24, 5, 0, 0);\n        _createPlayer(commonAdress, commonTypeId++, 25, 14, 43, 3, 0, 0);\n        _createPlayer(commonAdress, commonTypeId++, 15, 40, 22, 5, 0, 0);\n        _createPlayer(commonAdress, commonTypeId++, 17, 39, 25, 3, 0, 0);\n        _createPlayer(commonAdress, commonTypeId++, 41, 22, 13, 3, 0, 0);\n        _createPlayer(commonAdress, commonTypeId++, 30, 31, 28, 1, 0, 0);\n        _createPlayer(commonAdress, commonTypeId++, 13, 45, 11, 3, 1, 0);\n\n        require(commonPlayerCount+1 == players.length);\n        return commonPlayerCount;\n    }\n}\n\n/// @title \ncontract SaleClockAuctionInterface {\n    /// @dev simply a boolean to indicate this is the contract we expect to be\n    function isSaleClockAuction() public pure returns (bool);\n    function createAuction(uint256 _tokenId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration, address _seller) external;\n}\n\n/// @title Handles creating auctions for sale and siring of players.\n///  This wrapper of ReverseAuction exists only so that users can create\n///  auctions with only one transaction.\ncontract BSAuction is BSMinting {\n\n    /// @dev The address of the ClockAuction contract that handles sales of players. \n    SaleClockAuctionInterface public saleAuction;\n\n    /// @dev Sets the reference to the sale auction.\n    /// @param _address - Address of sale contract.\n    function setSaleAuctionAddress(address _address) public onlyCEO {\n        SaleClockAuctionInterface candidateContract = SaleClockAuctionInterface(_address);\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n        require(candidateContract.isSaleClockAuction());\n\n        // Set the new contract address\n        saleAuction = candidateContract;\n    }\n\n    /// @dev Put a player up for auction.\n    ///  Does some ownership trickery to create auctions in one tx.\n    function createSaleAuction(\n        uint256 _playerId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )\n        public\n        whenNotPaused\n    {\n        // Auction contract checks input sizes\n        // If player is already on any auction, this will throw\n        // because it will be owned by the auction contract.\n        require(_owns(msg.sender, _playerId));\n        _approve(_playerId, saleAuction);\n        // Sale auction throws if inputs are invalid and clears\n        // transfer and sire approval after escrowing the player.\n        saleAuction.createAuction(\n            _playerId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }\n}\n\ncontract GlobalDefines {\n    uint8 constant TYPE_SKILL_ATTRI_ATTACK = 0;\n    uint8 constant TYPE_SKILL_ATTRI_DEFENSE = 1;\n    uint8 constant TYPE_SKILL_ATTRI_STAMINA = 2;\n    uint8 constant TYPE_SKILL_ATTRI_GOALKEEPER = 3;\n}\n\n/// @title Interface for PlayerInterface\ncontract PlayerInterface {\n    function checkOwner(address _owner, uint32[11] _ids) public view returns (bool);\n    function queryPlayerType(uint32[11] _ids) public view returns (uint32[11] playerTypes);\n    function queryPlayer(uint32 _id) public view returns (uint16[8]);\n    function queryPlayerUnAwakeSkillIds(uint32[11] _playerIds) public view returns (uint16[11] playerUnAwakeSkillIds);\n    function tournamentResult(uint32[3][11][32] _playerAwakeSkills) public;\n}\n\ncontract BSCore is GlobalDefines, BSAuction, PlayerInterface {\n\n    // This is the main BS contract.\n\n    /// @notice Creates the main BS smart contract instance.\n    function BSCore() public {\n        // Starts paused.\n        paused = true;\n\n        // the creator of the contract is the initial CEO\n        ceoAddress = msg.sender;\n\n        // the creator of the contract is also the initial COO\n        cooAddress = msg.sender;\n    }\n\n    /// @dev Sets the reference to the JOY token contract.\n    /// @param _address - Address of JOY token contract.\n    function setJOYTokenAddress(address _address) external onlyCOO {\n        // Set the new contract address\n        joyTokenContract = ERC827(_address);\n    }\n\n    /// @dev Sets the reference to the Tournament token contract.\n    /// @param _address - Address of Tournament token contract.\n    function setTournamentAddress(address _address) external onlyCOO {\n        TournamentInterface candidateContract = TournamentInterface(_address);\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n        require(candidateContract.isTournament());\n\n        // Set the new contract address\n        tournamentContract = candidateContract;\n    }\n\n    function() external {\n        revert();\n    }\n\n    function withdrawJOYTokens() external onlyCFO {\n        uint256 value = joyTokenContract.balanceOf(address(this));\n        joyTokenContract.transfer(cfoAddress, value);\n    }\n\n    /// @notice Returns all the relevant information about a specific player.\n    /// @param _id The ID of the player of interest.\n    function getPlayer(uint256 _id)\n        external\n        view\n        returns (\n        uint256 typeId,\n        uint256 attack,\n        uint256 defense,\n        uint256 stamina,\n        uint256 xp,\n        uint256 isKeeper,\n        uint256 skillId,\n        uint256 isSkillOn\n    ) {\n        Player storage player = players[_id];\n\n        typeId = uint256(player.typeId);\n        attack = uint256(player.attack);\n        defense = uint256(player.defense);\n        stamina = uint256(player.stamina);\n        xp = uint256(player.xp);\n        isKeeper = uint256(player.isKeeper);\n        skillId = uint256(player.skillId);\n        isSkillOn = uint256(player.isSkillOn);\n    }\n\n    function checkOwner(address _owner, uint32[11] _ids) public view returns (bool) {\n        for (uint256 i = 0; i < _ids.length; i++) {\n            uint256 _id = _ids[i];\n            if ((_id <= 0 || _id > commonPlayerCount) && !_owns(_owner, _id)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function queryPlayerType(uint32[11] _ids) public view returns (uint32[11] playerTypes) {\n        for (uint256 i = 0; i < _ids.length; i++) {\n            uint256 _id = _ids[i];\n            Player storage player = players[_id];\n            playerTypes[i] = player.typeId;\n        }\n    }\n\n    function queryPlayer(uint32 _id)\n        public\n        view\n        returns (\n        uint16[8]\n    ) {\n        Player storage player = players[_id];\n        return [player.typeId, player.attack, player.defense, player.stamina, player.xp, player.isKeeper, player.skillId, player.isSkillOn];\n    }\n\n    function queryPlayerUnAwakeSkillIds(uint32[11] _playerIds)\n        public\n        view\n        returns (\n        uint16[11] playerUnAwakeSkillIds\n    ) {\n        for (uint256 i = 0; i < _playerIds.length; i++) {\n            Player storage player = players[_playerIds[i]];\n            if (player.skillId > 0 && player.isSkillOn == 0)\n            {\n                playerUnAwakeSkillIds[i] = player.skillId;\n            }\n        }\n    }\n\n    function tournamentResult(uint32[3][11][32] _playerAwakeSkills) public {\n        require(msg.sender == address(tournamentContract));\n\n        for (uint8 i = 0; i < 32; i++) {\n            for (uint8 j = 0; j < 11; j++) {\n                uint32 _id = _playerAwakeSkills[i][j][0];\n                Player storage player = players[_id];\n                if (player.skillId > 0 && player.isSkillOn == 0) {\n                    uint32 skillType = _playerAwakeSkills[i][j][1];\n                    uint8 skillAddAttri = uint8(_playerAwakeSkills[i][j][2]);\n\n                    if (skillType == TYPE_SKILL_ATTRI_ATTACK) {\n                        player.attack += skillAddAttri;\n                        player.isSkillOn = 1;\n                    }\n\n                    if (skillType == TYPE_SKILL_ATTRI_DEFENSE) {\n                        player.defense += skillAddAttri;\n                        player.isSkillOn = 1;\n                    }\n\n                    if (skillType == TYPE_SKILL_ATTRI_STAMINA) {\n                        player.stamina += skillAddAttri;\n                        player.isSkillOn = 1;\n                    }\n\n                    if (skillType == TYPE_SKILL_ATTRI_GOALKEEPER && player.isKeeper == 0) {\n                        player.isKeeper = 1;\n                        player.isSkillOn = 1;\n                    }\n                }\n            }\n        }\n    }\n}",
  "bytecode": "60606040526002805460a060020a60ff0219169055341561001f57600080fd5b621275004201600b556002805460008054600160a060020a033316600160a060020a0319918216811790925560a060020a60ff021990921674010000000000000000000000000000000000000000179190911617905561261e806100846000396000f30060606040526004361061020b5763ffffffff60e060020a60003504166301ffc9a7811461021b5780630519ce791461026757806306fdde0314610296578063095ea7b3146103205780630a0f81681461034457806312055758146103575780631262eb73146103a057806318160ddd146103f55780631e6ac3c01461041a57806323b872dd1461043957806327d7874c146104615780632ba73c1514610480578063307b17071461049f57806332985244146104be5780633b2dbb7f146104d15780633d7d3f5a146104f35780633f4ba83a14610512578063404a9272146105255780634e0a33791461053857806358b8dc61146105575780635c975abb1461056a5780636352211e1461057d5780636fbde40d1461059357806370a08231146105b257806376f4d8ad146105d15780638456cb59146105e45780638462151c146105f757806386773cae14610669578063895c666a1461067f5780638d0d27ba1461069257806395d89b41146106e9578063a9059cbb146106fc578063b047fb501461071e578063b26f72a414610731578063bca915c714610744578063d6427c2414610778578063e55ae4e81461078b578063e6b1303d146107e8578063e6cbe35114610807578063e773ffd51461081a578063e94e80fa14610856578063e99150f01461086c578063f2d05f2b1461088b578063fbeb89dd146108a1578063fd070667146108b4575b341561021657600080fd5b600080fd5b341561022657600080fd5b6102537fffffffff000000000000000000000000000000000000000000000000000000006004351661095c565b604051901515815260200160405180910390f35b341561027257600080fd5b61027a610bb1565b604051600160a060020a03909116815260200160405180910390f35b34156102a157600080fd5b6102a9610bc0565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102e55780820151838201526020016102cd565b50505050905090810190601f1680156103125780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561032b57600080fd5b610342600160a060020a0360043516602435610bf7565b005b341561034f57600080fd5b61027a610c96565b341561036257600080fd5b61025360048035600160a060020a0316906101846024600b610160604051908101604052919082826101608082843750939550610ca5945050505050565b34156103ab57600080fd5b6103bc63ffffffff60043516610d15565b604051808261010080838360005b838110156103e25780820151838201526020016103ca565b5050505090500191505060405180910390f35b341561040057600080fd5b610408610dd4565b60405190815260200160405180910390f35b341561042557600080fd5b610408600160a060020a0360043516610ddb565b341561044457600080fd5b610342600160a060020a0360043581169060243516604435610ded565b341561046c57600080fd5b610342600160a060020a0360043516610e89565b341561048b57600080fd5b610342600160a060020a0360043516610edb565b34156104aa57600080fd5b610342600160a060020a0360043516610f2d565b34156104c957600080fd5b61027a610f6a565b34156104dc57600080fd5b610253600160a060020a0360043516602435610f79565b34156104fe57600080fd5b6103426004356024356044356064356111c2565b341561051d57600080fd5b61034261128e565b341561053057600080fd5b6104086112e1565b341561054357600080fd5b610342600160a060020a03600435166112e7565b341561056257600080fd5b610408611339565b341561057557600080fd5b61025361133f565b341561058857600080fd5b61027a60043561134f565b341561059e57600080fd5b610342600160a060020a0360043516611373565b34156105bd57600080fd5b610408600160a060020a0360043516611420565b34156105dc57600080fd5b61040861143b565b34156105ef57600080fd5b610342611448565b341561060257600080fd5b610616600160a060020a03600435166114d4565b60405160208082528190810183818151815260200191508051906020019060200280838360005b8381101561065557808201518382015260200161063d565b505050509050019250505060405180910390f35b341561067457600080fd5b6103426004356115cd565b341561068a57600080fd5b6104086115ed565b341561069d57600080fd5b6106ce600461016481600b610160604051908101604052919082826101608082843750939550611785945050505050565b604051808261016080838360008151838201526020016103ca565b34156106f457600080fd5b6102a9611806565b341561070757600080fd5b610342600160a060020a036004351660243561183d565b341561072957600080fd5b61027a6118c3565b341561073c57600080fd5b6103426118d2565b341561074f57600080fd5b610342600160a060020a036004351660243560443560643560843560a43560c43560e4356119ea565b341561078357600080fd5b61027a611a5e565b341561079657600080fd5b6107a1600435611a6d565b604051808981526020018881526020018781526020018681526020018581526020018481526020018381526020018281526020019850505050505050505060405180910390f35b34156107f357600080fd5b610342600160a060020a0360043516611b02565b341561081257600080fd5b61027a611bb1565b341561082557600080fd5b6106ce600461016481600b610160604051908101604052919082826101608082843750939550611bc0945050505050565b341561086157600080fd5b61027a600435611c77565b341561087757600080fd5b610342600160a060020a0360043516611c92565b341561089657600080fd5b61027a600435611d3f565b34156108ac57600080fd5b61027a611d5a565b34156108bf57600080fd5b610342600461840481602061040060405190810160405291906000835b8282101561094f5761042082028401600b61016060405190810160405291906000835b8282101561093c578382606002016003806020026040519081016040529190828260608082843750505091835250506001909101906020016108ff565b50505050815260200190600101906108dc565b5050505091905050611d69565b60006040517f737570706f727473496e7465726661636528627974657334290000000000000081526019016040518091039020600160e060020a03191682600160e060020a0319161480610ba957506040517f746f6b656e734f664f776e657228616464726573732900000000000000000000815260160160405180910390206040517f7472616e7366657246726f6d28616464726573732c616464726573732c75696e81527f7432353629000000000000000000000000000000000000000000000000000000602082015260250160405180910390206040517f7472616e7366657228616464726573732c75696e743235362900000000000000815260190160405180910390206040517f617070726f766528616464726573732c75696e74323536290000000000000000815260180160405180910390206040517f6f776e65724f662875696e743235362900000000000000000000000000000000815260100160405180910390206040517f62616c616e63654f662861646472657373290000000000000000000000000000815260120160405180910390206040517f746f74616c537570706c792829000000000000000000000000000000000000008152600d0160405180910390206040517f73796d626f6c2829000000000000000000000000000000000000000000000000815260080160405180910390206040517f6e616d6528290000000000000000000000000000000000000000000000000000815260060160405180910390201818181818181818600160e060020a03191682600160e060020a031916145b90505b919050565b600154600160a060020a031681565b60408051908101604052601081527f426974536f6363657220506c6179657200000000000000000000000000000000602082015281565b60025460a060020a900460ff1615610c0e57600080fd5b610c183382611fdd565b1515610c2357600080fd5b610c2d3382611ffd565b1515610c3857600080fd5b610c428183612095565b7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925338383604051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a15050565b600054600160a060020a031681565b600080805b600b821015610d08578382600b8110610cbf57fe5b602002015163ffffffff169050600081111580610cdc5750600a81115b8015610cef5750610ced8582611fdd565b155b15610cfd5760009250610d0d565b600190910190610caa565b600192505b505092915050565b610d1d612509565b600060038363ffffffff16815481101515610d3457fe5b906000526020600020900190506101006040519081016040908152825461ffff808216845260ff62010000830481166020860152630100000083048116938501939093526401000000008204831660608501526501000000000082048316608085015266010000000000008204831660a085015267010000000000000082041660c0840152690100000000000000000090041660e0820152915050919050565b6003545b90565b600c6020526000908152604090205481565b60025460a060020a900460ff1615610e0457600080fd5b600160a060020a0382161515610e1957600080fd5b30600160a060020a031682600160a060020a031614151515610e3a57600080fd5b610e4433826120c3565b1515610e4f57600080fd5b610e598382611fdd565b1515610e6457600080fd5b610e6e8382611ffd565b1515610e7957600080fd5b610e848383836120e3565b505050565b60005433600160a060020a03908116911614610ea457600080fd5b600160a060020a0381161515610eb957600080fd5b60008054600160a060020a031916600160a060020a0392909216919091179055565b60005433600160a060020a03908116911614610ef657600080fd5b600160a060020a0381161515610f0b57600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b60025433600160a060020a03908116911614610f4857600080fd5b60078054600160a060020a031916600160a060020a0392909216919091179055565b600754600160a060020a031681565b600080600080600080600080600080600260149054906101000a900460ff16151515610fa457600080fd5b60075433600160a060020a0390811691161480610fd257508b600160a060020a031633600160a060020a0316145b1515610fdd57600080fd5b60008b11610fea57600080fd5b6110038b68056bc75e2d6310000063ffffffff6121b916565b600754600154919a50600160a060020a03908116916323b872dd918f91168c60006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561107a57600080fd5b6102c65a03f1151561108b57600080fd5b5050506040518051905015156110a057600080fd5b5060005b8a81101561115f57600954600160a060020a031663b42dfa0d600060405160e001526040518163ffffffff1660e060020a02815260040160e060405180830381600087803b15156110f457600080fd5b6102c65a03f1151561110557600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051906020018051969e50949c50929a509098509650945090925061115690508c898989898989896121ef565b506001016110a4565b600b54421015611173576111738c8c61245e565b8b600160a060020a03167f282ea32a7fb82d1eb16634f719bfb07eaec4ce522eb92e2398fee763e9a1f53e8c60405190815260200160405180910390a25060019b9a5050505050505050505050565b60025460a060020a900460ff16156111d957600080fd5b6111e33385611fdd565b15156111ee57600080fd5b600d54611205908590600160a060020a0316612095565b600d54600160a060020a03166327ebe40a858585853360405160e060020a63ffffffff88160281526004810195909552602485019390935260448401919091526064830152600160a060020a0316608482015260a401600060405180830381600087803b151561127457600080fd5b6102c65a03f1151561128557600080fd5b50505050505050565b60005433600160a060020a039081169116146112a957600080fd5b60025460a060020a900460ff1615156112c157600080fd5b6002805474ff000000000000000000000000000000000000000019169055565b600b5481565b60005433600160a060020a0390811691161461130257600080fd5b600160a060020a038116151561131757600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b600a5481565b60025460a060020a900460ff1681565b600081815260046020526040902054600160a060020a0316801515610bac57600080fd5b6000805433600160a060020a0390811691161461138f57600080fd5b5080600160a060020a0381166385b861886000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156113d757600080fd5b6102c65a03f115156113e857600080fd5b5050506040518051905015156113fd57600080fd5b600d8054600160a060020a031916600160a060020a039290921691909117905550565b600160a060020a031660009081526005602052604090205490565b68056bc75e2d6310000081565b60025433600160a060020a0390811691161480611473575060005433600160a060020a039081169116145b8061148c575060015433600160a060020a039081169116145b151561149757600080fd5b60025460a060020a900460ff16156114ae57600080fd5b6002805474ff0000000000000000000000000000000000000000191660a060020a179055565b6114dc612532565b60006114e6612532565b60008060006114f487611420565b9450600a85016040518059106115075750595b9080825280602002602001820160405250935060009250600191505b600a8211611552578184848151811061153857fe5b602090810290910101526001928301929190910190611523565b841515611561578395506115c3565b611569610dd4565b90505b808210156115bf57600082815260046020526040902054600160a060020a03888116911614156115b457818484815181106115a357fe5b602090810290910101526001909201915b60019091019061156c565b8395505b5050505050919050565b60025433600160a060020a039081169116146115e857600080fd5b600b55565b6002546000908190819033600160a060020a0390811691161461160f57600080fd5b6003541561161c57600080fd5b600380549061162e9060018301612544565b50600291506000905061164b8160016028600c60198385806121ef565b5061166b818380600101945061ffff1660106020602760036000806121ef565b5061168b818380600101945061ffff16601e6023600d60036000806121ef565b506116ab818380600101945061ffff166016601e601860056000806121ef565b506116cb818380600101945061ffff166019600e602b60036000806121ef565b506116eb818380600101945061ffff16600f6028601660056000806121ef565b5061170b818380600101945061ffff1660116027601960036000806121ef565b5061172b818380600101945061ffff1660296016600d60036000806121ef565b5061174b818380600101945061ffff16601e601f601c60016000806121ef565b5061176c818380600101945061ffff16600d602d600b6003600160006121ef565b50600354600b1461177c57600080fd5b600a9250505090565b61178d612568565b600080805b600b8310156117fe578483600b81106117a757fe5b602002015163ffffffff1691506003828154811015156117c357fe5b6000918252602090912001805490915061ffff168484600b81106117e357fe5b63ffffffff9092166020929092020152600190920191611792565b505050919050565b60408051908101604052600381527f4253500000000000000000000000000000000000000000000000000000000000602082015281565b60025460a060020a900460ff161561185457600080fd5b600160a060020a038216151561186957600080fd5b30600160a060020a031682600160a060020a03161415151561188a57600080fd5b6118943382611fdd565b151561189f57600080fd5b6118a93382611ffd565b15156118b457600080fd5b6118bf3383836120e3565b5050565b600254600160a060020a031681565b60015460009033600160a060020a039081169116146118f057600080fd5b600754600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561194957600080fd5b6102c65a03f1151561195a57600080fd5b5050506040518051600754600154919350600160a060020a03908116925063a9059cbb91168360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156119cc57600080fd5b6102c65a03f115156119dd57600080fd5b5050506040518051505050565b60025460009033600160a060020a03908116911614611a0857600080fd5b5087600160a060020a0381161515611a285750600254600160a060020a03165b600a5461c3509010611a3957600080fd5b600a80546001019055611a5281898989898989896121ef565b50505050505050505050565b600954600160a060020a031681565b600080600080600080600080600060038a815481101515611a8a57fe5b60009182526020909120015461ffff8082169c60ff62010000840481169d506301000000840481169c50640100000000840481169b5065010000000000840481169a50660100000000000084048116995067010000000000000084049092169750690100000000000000000090920416945092505050565b60025460009033600160a060020a03908116911614611b2057600080fd5b5080600160a060020a0381166364dde40f6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611b6857600080fd5b6102c65a03f11515611b7957600080fd5b505050604051805190501515611b8e57600080fd5b60088054600160a060020a031916600160a060020a039290921691909117905550565b600d54600160a060020a031681565b611bc8612568565b6000805b600b821015611c705760038483600b8110611be357fe5b602002015163ffffffff16815481101515611bfa57fe5b600091825260208220018054909250670100000000000000900461ffff16118015611c34575080546901000000000000000000900460ff16155b15611c65578054670100000000000000900461ffff168383600b8110611c5657fe5b61ffff90921660209290920201525b600190910190611bcc565b5050919050565b600660205260009081526040902054600160a060020a031681565b6000805433600160a060020a03908116911614611cae57600080fd5b5080600160a060020a0381166398cb12dc6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611cf657600080fd5b6102c65a03f11515611d0757600080fd5b505050604051805190501515611d1c57600080fd5b60098054600160a060020a031916600160a060020a039290921691909117905550565b600460205260009081526040902054600160a060020a031681565b600854600160a060020a031681565b6008546000908190819081908190819033600160a060020a03908116911614611d9157600080fd5b600095505b60208660ff16101561128557600094505b600b8560ff161015611fd2578660ff871660208110611dc257fe5b602002015160ff8616600b8110611dd557fe5b602002015151935060038463ffffffff16815481101515611df257fe5b600091825260208220018054909450670100000000000000900461ffff16118015611e2c575082546901000000000000000000900460ff16155b15611fc7578660ff871660208110611e4057fe5b602002015160ff8616600b8110611e5357fe5b60200201516020015191508660ff871660208110611e6d57fe5b602002015160ff8616600b8110611e8057fe5b602002015160400151905063ffffffff82161515611ed357825469ff0000000000000000001960ff62010000808404821685019091160262ff000019909216919091171669010000000000000000001783555b63ffffffff821660011415611f1f57825469ff0000000000000000001960ff6301000000808404821685019091160263ff00000019909216919091171669010000000000000000001783555b63ffffffff821660021415611f6d57825469ff0000000000000000001960ff640100000000808404821685019091160264ff0000000019909216919091171669010000000000000000001783555b63ffffffff82166003148015611f8f575082546601000000000000900460ff16155b15611fc757825469ff0000000000000000001966ff000000000000199091166601000000000000171669010000000000000000001783555b600190940193611da7565b600190950194611d96565b600090815260046020526040902054600160a060020a0391821691161490565b600854600090600160a060020a0316158061208e5750600854600160a060020a031663f2b841c0848460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561207257600080fd5b6102c65a03f1151561208357600080fd5b505050604051805190505b9392505050565b6000918252600660205260409091208054600160a060020a031916600160a060020a03909216919091179055565b600090815260066020526040902054600160a060020a0391821691161490565b600160a060020a03808316600081815260056020908152604080832080546001019055858352600490915290208054600160a060020a031916909117905583161561216457600160a060020a03831660009081526005602090815260408083208054600019019055838352600690915290208054600160a060020a03191690555b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef838383604051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a1505050565b6000808315156121cc57600091506121e8565b508282028284828115156121dc57fe5b04146121e457fe5b8091505b5092915050565b60006121f9612583565b6000610100604051908101604052808b61ffff1681526020018a60ff1681526020018960ff1681526020018860ff1681526020018760ff1681526020018660ff1681526020018561ffff168152602001600060ff1681525091506001600380548060010182816122699190612544565b600092835260209092208591018151815461ffff191661ffff919091161781556020820151815460ff91909116620100000262ff0000199091161781556040820151815460ff9190911663010000000263ff000000199091161781556060820151815460ff919091166401000000000264ff00000000199091161781556080820151815460ff91909116650100000000000265ff00000000001990911617815560a0820151815460ff9190911666010000000000000266ff0000000000001990911617815560c0820151815461ffff919091166701000000000000000268ffff000000000000001990911617815560e0820151815460ff9190911669010000000000000000000269ff00000000000000000019909116179055500390506304c4b40081111561239757600080fd5b7f387530ccf2ad27743c018850e10887d9b368a9a798950e19e84d09b1d955b5c18b82845185602001518660400151876060015188608001518960a001518a60c00151604051600160a060020a03909916895263ffffffff909716602089015261ffff9586166040808a019190915260ff95861660608a0152938516608089015291841660a0880152831660c087015290911660e08501529116610100830152610120909101905180910390a161245060008c836120e3565b9a9950505050505050505050565b600160a060020a0382166000908152600c602052604081205490612488828463ffffffff6124fa16565b600160a060020a0385166000908152600c6020526040902081905590508115156124c5576124c384600e60586023603a6001600060386121ef565b505b6005821080156124d6575060058110155b156124f4576124f284600d602a605060516001600060466121ef565b505b50505050565b6000828201838110156121e457fe5b6101006040519081016040526008815b6000815260001990910190602001816125195790505090565b60206040519081016040526000815290565b815481835581811511610e8457600083815260209020610e849181019083016125c7565b61016060405190810160405260008152600a60208201612519565b6101006040519081016040908152600080835260208301819052908201819052606082018190526080820181905260a0820181905260c0820181905260e082015290565b610dd891905b808211156125ee57805469ffffffffffffffffffff191681556001016125cd565b50905600a165627a7a723058205e0d434e130b1552ddcd8c334df444accf955d02cf33391cd261c4b7d45556270029"
}