{
  "address": "0x19ea630bcbc1a511a16e65b6ecd447c92e1c087c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Carats Token",
  "contractName": "CaratToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-06\n*/\n\npragma solidity ^0.4.21;\n\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = true;\n  }\n\n  /**\n   * @dev remove an address' access to this role\n   */\n  function remove(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage role, address addr)\n    view\n    internal\n  {\n    require(has(role, addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage role, address addr)\n    view\n    internal\n    returns (bool)\n  {\n    return role.bearer[addr];\n  }\n}\n\n\n\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n\n\n\ncontract AccessControl {\n    using Roles for Roles.Role;\n\n    mapping (string => Roles.Role) private roles;\n\n    event RoleAdded(address addr, string roleName);\n    event RoleRemoved(address addr, string roleName);\n\n    /**\n     * @dev reverts if addr does not have role\n     * @param addr address\n     * @param roleName the name of the role\n     * // reverts\n     */\n    function checkRole(address addr, string roleName)\n    view\n    public\n    {\n        roles[roleName].check(addr);\n    }\n\n    /**\n     * @dev determine if addr has role\n     * @param addr address\n     * @param roleName the name of the role\n     * @return bool\n     */\n    function hasRole(address addr, string roleName)\n    view\n    public\n    returns (bool)\n    {\n        return roles[roleName].has(addr);\n    }\n\n    /**\n     * @dev add a role to an address\n     * @param addr address\n     * @param roleName the name of the role\n     */\n    function addRole(address addr, string roleName)\n    internal\n    {\n        roles[roleName].add(addr);\n        emit RoleAdded(addr, roleName);\n    }\n\n    /**\n     * @dev remove a role from an address\n     * @param addr address\n     * @param roleName the name of the role\n     */\n    function removeRole(address addr, string roleName)\n    internal\n    {\n        roles[roleName].remove(addr);\n        emit RoleRemoved(addr, roleName);\n    }\n\n    /**\n     * @dev modifier to scope access to a single role (uses msg.sender as addr)\n     * @param roleName the name of the role\n     * // reverts\n     */\n    modifier onlyRole(string roleName)\n    {\n        checkRole(msg.sender, roleName);\n        _;\n    }\n\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n\n\n\n\n\n\ncontract AccessControlManager is AccessControl {\n\n    string public constant SUPER_ADMIN = \"superAdmin\";\n    string public constant LIMITED_ADMIN = \"limitedAdmin\";\n\n    /**\n     * @dev modifier to scope access to admins\n     * // reverts\n     */\n    modifier onlyAdmin()\n    {\n        checkRole(msg.sender, SUPER_ADMIN);\n        _;\n    }\n\n    /**\n     * @dev modifier to check adding/removing roles\n     *\n     */\n    modifier canUpdateRole(string role){\n        if ((keccak256(abi.encodePacked(role)) != keccak256(abi.encodePacked(SUPER_ADMIN)) && (hasRole(msg.sender, SUPER_ADMIN) || hasRole(msg.sender, LIMITED_ADMIN))))\n        _;\n    }\n\n    /**\n     * @dev constructor. Sets msg.sender as admin by default\n     */\n    constructor()\n    public\n    {\n        addRole(msg.sender, SUPER_ADMIN);\n    }\n\n    /**\n     * @dev add admin role to an address\n     * @param addr address\n     */\n    function addAdmin(address addr)\n    onlyAdmin\n    public\n    {\n        addRole(addr, SUPER_ADMIN);\n    }\n\n    /**\n     * @dev remove a role from an address\n     * @param addr address\n     */\n    function removeAdmin(address addr)\n    onlyAdmin\n    public\n    {\n        require(msg.sender != addr);\n        removeRole(addr, SUPER_ADMIN);\n    }\n\n    /**\n     * @dev add a role to an address\n     * @param addr address\n     * @param roleName the name of the role\n     */\n    function adminAddRole(address addr, string roleName)\n    canUpdateRole(roleName)\n    public\n    {\n        addRole(addr, roleName);\n    }\n\n\n    /**\n     * @dev remove a role from an address\n     * @param addr address\n     * @param roleName the name of the role\n     */\n    function adminRemoveRole(address addr, string roleName)\n    canUpdateRole(roleName)\n    public\n    {\n        removeRole(addr, roleName);\n    }\n\n\n    /**\n     * @dev add a role to an addresses array\n     * solidity dosen't supports dynamic arrays as arguments so only one role at time.\n     * @param addrs addresses\n     * @param roleName the name of the role\n     */\n    function adminAddRoles(address[] addrs, string roleName)\n    public\n    {\n        for (uint256 i = 0; i < addrs.length; i++) {\n            adminAddRole(addrs[i],roleName);\n        }\n    }\n\n\n    /**\n     * @dev remove a specific role from an addresses array\n     * solidity dosen't supports dynamic arrays as arguments so only one role at time.\n     * @param addrs addresses\n     * @param roleName the name of the role\n     */\n    function adminRemoveRoles(address[] addrs, string roleName)\n    public\n    {\n        for (uint256 i = 0; i < addrs.length; i++) {\n            adminRemoveRole(addrs[i],roleName);\n        }\n    }\n\n\n}\n\n\n\ncontract AccessControlClient {\n\n\n    AccessControlManager public acm;\n\n\n    constructor(AccessControlManager addr) public {\n        acm = AccessControlManager(addr);\n    }\n\n    /**\n    * @dev add a role to an address\n    * ONLY WITH RELEVANT ROLES!!\n    * @param addr address\n    * @param roleName the name of the role\n    */\n    function addRole(address addr, string roleName)\n    public\n    {\n        acm.adminAddRole(addr,roleName);\n    }\n\n\n    /**\n     * @dev remove a role from an address\n     * ONLY WITH RELEVANT ROLES!!\n     * @param addr address\n     * @param roleName the name of the role\n     */\n    function removeRole(address addr, string roleName)\n    public\n    {\n        acm.adminRemoveRole(addr,roleName);\n    }\n\n    /**\n     * @dev add a role to an addresses array\n     * ONLY WITH RELEVANT ROLES!!\n     * solidity dosen't supports dynamic arrays as arguments so only one role at time.\n     * @param addrs addresses\n     * @param roleName the name of the role\n     */\n    function addRoles(address[] addrs, string roleName)\n    public\n    {\n        acm.adminAddRoles(addrs,roleName);\n\n    }\n\n\n    /**\n     * @dev remove a specific role from an addresses array\n     * ONLY WITH RELEVANT ROLES!!\n     * solidity dosen't supports dynamic arrays as arguments so only one role at time.\n     * @param addrs addresses\n     * @param roleName the name of the role\n     */\n    function removeRoles(address[] addrs, string roleName)\n    public\n    {\n        acm.adminRemoveRoles(addrs,roleName);\n    }\n\n    /**\n     * @dev reverts if addr does not have role\n     * @param addr address\n     * @param roleName the name of the role\n     * // reverts\n     */\n    function checkRole(address addr, string roleName)\n    view\n    public\n    {\n        acm.checkRole(addr, roleName);\n    }\n\n    /**\n     * @dev determine if addr has role\n     * @param addr address\n     * @param roleName the name of the role\n     * @return bool\n     */\n    function hasRole(address addr, string roleName)\n    view\n    public\n    returns (bool)\n    {\n        return acm.hasRole(addr, roleName);\n    }\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\ncontract DetailedERC20 is ERC20 {\n    string public name;\n\n    string public symbol;\n\n    uint8 public decimals;\n\nconstructor (string _name, string _symbol, uint8 _decimals) public {\nname = _name;\nsymbol = _symbol;\ndecimals = _decimals;\n}\n}\n\n\n\n\n\n\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n\n\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n\n\n\n\n\n\n\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n\ncontract MintableToken is StandardToken {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n\n  modifier canMint() {\n    _;\n  }\n\n  modifier canReceive(address addr) {\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) canMint canReceive(_to) public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n\n}\n\n\n\n\ncontract CaratToken is MintableToken, BurnableToken, DetailedERC20, AccessControlClient {\n\n\n    string public constant SUPER_ADMIN = \"superAdmin\";\n\n    string public constant LIMITED_ADMIN = \"limitedAdmin\";\n\n    string public constant KYC_ROLE = \"KycEnabled\";\n\n\n    //Token Spec\n    string public constant NAME = \"Carats Token\";\n\n    string public constant SYMBOL = \"CARAT\";\n\n    uint8 public constant DECIMALS = 18;\n\n\n\n    /**\n      * @dev Throws if called by any account other than the minters(ACM) or if the minting period finished.\n      */\n    modifier canMint() {\n        require(_isMinter(msg.sender));\n        _;\n    }\n\n\n    /**\n      * @dev Throws if minted to any account other than the KYC\n      */\n    modifier canReceive(address addr) {\n        if(hasRole(addr, KYC_ROLE) || hasRole(addr, LIMITED_ADMIN) || hasRole(addr, SUPER_ADMIN)){\n            _;\n        }\n    }\n\n\n    constructor (AccessControlManager acm)\n                 AccessControlClient(acm)\n                 DetailedERC20(NAME, SYMBOL,DECIMALS) public\n                 {}\n\n\n\n    function _isMinter(address addr) internal view returns (bool) {\n    return hasRole(addr, SUPER_ADMIN) || hasRole(addr, LIMITED_ADMIN);\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405160208062002af983398101806040528101908080519060200190929190505050806040805190810160405280600c81526020017f43617261747320546f6b656e00000000000000000000000000000000000000008152506040805190810160405280600581526020017f434152415400000000000000000000000000000000000000000000000000000081525060128260039080519060200190620000bc9291906200013d565b508160049080519060200190620000d59291906200013d565b5080600560006101000a81548160ff021916908360ff16021790555050505080600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620001ec565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200018057805160ff1916838001178555620001b1565b82800160010185558215620001b1579182015b82811115620001b057825182559160200191906001019062000193565b5b509050620001c09190620001c4565b5090565b620001e991905b80821115620001e5576000816000905550600101620001cb565b5090565b90565b6128fd80620001fc6000396000f300608060405260043610610154576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610159578063095ea7b3146101e95780630988ca8c1461024e57806318160ddd146102d75780631bfe030814610302578063217fe6c61461038b57806323b872dd1461042c5780632e0f2625146104b1578063313ce567146104e257806340c10f191461051357806342966c68146105785780635d405c25146105a5578063661884631461065157806370a08231146106b65780637338ddcc1461070d5780637c7c7c3c146107645780637d72aa65146107f457806395d89b411461087d5780639f3f736a1461090d578063a3f4df7e1461099d578063a9059cbb14610a2d578063ca9b48b314610a92578063d73dd62314610b3e578063dd62ed3e14610ba3578063f76f8d7814610c1a578063f9c8dec314610caa575b600080fd5b34801561016557600080fd5b5061016e610d3a565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ae578082015181840152602081019050610193565b50505050905090810190601f1680156101db5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f557600080fd5b50610234600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610dd8565b604051808215151515815260200191505060405180910390f35b34801561025a57600080fd5b506102d5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610eca565b005b3480156102e357600080fd5b506102ec611010565b6040518082815260200191505060405180910390f35b34801561030e57600080fd5b50610389600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061101a565b005b34801561039757600080fd5b50610412600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611160565b604051808215151515815260200191505060405180910390f35b34801561043857600080fd5b50610497600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112cf565b604051808215151515815260200191505060405180910390f35b3480156104bd57600080fd5b506104c6611689565b604051808260ff1660ff16815260200191505060405180910390f35b3480156104ee57600080fd5b506104f761168e565b604051808260ff1660ff16815260200191505060405180910390f35b34801561051f57600080fd5b5061055e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116a1565b604051808215151515815260200191505060405180910390f35b34801561058457600080fd5b506105a3600480360381019080803590602001909291905050506118f6565b005b3480156105b157600080fd5b5061064f60048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611903565b005b34801561065d57600080fd5b5061069c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a5e565b604051808215151515815260200191505060405180910390f35b3480156106c257600080fd5b506106f7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cef565b6040518082815260200191505060405180910390f35b34801561071957600080fd5b50610722611d37565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561077057600080fd5b50610779611d5d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107b957808201518184015260208101905061079e565b50505050905090810190601f1680156107e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561080057600080fd5b5061087b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611d96565b005b34801561088957600080fd5b50610892611edc565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108d25780820151818401526020810190506108b7565b50505050905090810190601f1680156108ff5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561091957600080fd5b50610922611f7a565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610962578082015181840152602081019050610947565b50505050905090810190601f16801561098f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156109a957600080fd5b506109b2611fb3565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109f25780820151818401526020810190506109d7565b50505050905090810190601f168015610a1f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610a3957600080fd5b50610a78600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611fec565b604051808215151515815260200191505060405180910390f35b348015610a9e57600080fd5b50610b3c60048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061220b565b005b348015610b4a57600080fd5b50610b89600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612366565b604051808215151515815260200191505060405180910390f35b348015610baf57600080fd5b50610c04600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612562565b6040518082815260200191505060405180910390f35b348015610c2657600080fd5b50610c2f6125e9565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c6f578082015181840152602081019050610c54565b50505050905090810190601f168015610c9c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610cb657600080fd5b50610cbf612622565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610cff578082015181840152602081019050610ce4565b50505050905090810190601f168015610d2c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dd05780601f10610da557610100808354040283529160200191610dd0565b820191906000526020600020905b815481529060010190602001808311610db357829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630988ca8c83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610fa7578082015181840152602081019050610f8c565b50505050905090810190601f168015610fd45780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610ff457600080fd5b505af1158015611008573d6000803e3d6000fd5b505050505050565b6000600154905090565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166388cee87e83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156110f75780820151818401526020810190506110dc565b50505050905090810190601f1680156111245780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561114457600080fd5b505af1158015611158573d6000803e3d6000fd5b505050505050565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663217fe6c684846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561123f578082015181840152602081019050611224565b50505050905090810190601f16801561126c5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561128c57600080fd5b505af11580156112a0573d6000803e3d6000fd5b505050506040513d60208110156112b657600080fd5b8101908080519060200190929190505050905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561130c57600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561135957600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156113e457600080fd5b611435826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461265b90919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506114c8826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461267490919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061159982600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461265b90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b600560009054906101000a900460ff1681565b60006116ac33612690565b15156116b757600080fd5b826116f7816040805190810160405280600a81526020017f4b7963456e61626c656400000000000000000000000000000000000000000000815250611160565b8061173d575061173c816040805190810160405280600c81526020017f6c696d6974656441646d696e0000000000000000000000000000000000000000815250611160565b5b806117835750611782816040805190810160405280600a81526020017f737570657241646d696e00000000000000000000000000000000000000000000815250611160565b5b156118ef5761179d8360015461267490919063ffffffff16565b6001819055506117f4836000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461267490919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885846040518082815260200191505060405180910390a28373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505b5092915050565b611900338261271e565b50565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663920b302783836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156119b557808201518184015260208101905061199a565b50505050905001838103825284818151815260200191508051906020019080838360005b838110156119f45780820151818401526020810190506119d9565b50505050905090810190601f168015611a215780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015611a4257600080fd5b505af1158015611a56573d6000803e3d6000fd5b505050505050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115611b6f576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c03565b611b82838261265b90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600a81526020017f737570657241646d696e0000000000000000000000000000000000000000000081525081565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b25fa92c83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611e73578082015181840152602081019050611e58565b50505050905090810190601f168015611ea05780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015611ec057600080fd5b505af1158015611ed4573d6000803e3d6000fd5b505050505050565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f725780601f10611f4757610100808354040283529160200191611f72565b820191906000526020600020905b815481529060010190602001808311611f5557829003601f168201915b505050505081565b6040805190810160405280600c81526020017f6c696d6974656441646d696e000000000000000000000000000000000000000081525081565b6040805190810160405280600c81526020017f43617261747320546f6b656e000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561202957600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561207657600080fd5b6120c7826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461265b90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061215a826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461267490919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e490177683836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156122bd5780820151818401526020810190506122a2565b50505050905001838103825284818151815260200191508051906020019080838360005b838110156122fc5780820151818401526020810190506122e1565b50505050905090810190601f1680156123295780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561234a57600080fd5b505af115801561235e573d6000803e3d6000fd5b505050505050565b60006123f782600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461267490919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6040805190810160405280600581526020017f434152415400000000000000000000000000000000000000000000000000000081525081565b6040805190810160405280600a81526020017f4b7963456e61626c65640000000000000000000000000000000000000000000081525081565b600082821115151561266957fe5b818303905092915050565b6000818301905082811015151561268757fe5b80905092915050565b60006126d1826040805190810160405280600a81526020017f737570657241646d696e00000000000000000000000000000000000000000000815250611160565b806127175750612716826040805190810160405280600c81526020017f6c696d6974656441646d696e0000000000000000000000000000000000000000815250611160565b5b9050919050565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561276b57600080fd5b6127bc816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461265b90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506128138160015461265b90919063ffffffff16565b6001819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350505600a165627a7a72305820bbef09561ce3ffd587a94797c45aaa82a186a9da9bbad74c2892b800679aebb000290000000000000000000000000971fdb3e627f9480f08b6e80d6bc3047742eb6c",
  "constructorArguments": "0000000000000000000000000971fdb3e627f9480f08b6e80d6bc3047742eb6c"
}