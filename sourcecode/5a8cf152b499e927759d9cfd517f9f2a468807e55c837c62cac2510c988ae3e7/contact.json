{
  "address": "0x44d5913ca4d304b97de6a09b39ed1f1a5e9a0b7a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Wallet",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-12\n*/\n\n/**\n *  The Consumer Contract Wallet\n *  Copyright (C) 2018 The Contract Wallet Company Limited\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n\n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.4.25;\n\n/**\n *  Token Exchange Rate Oracle\n *  Copyright (C) 2018 The Contract Wallet Company Limited\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n\n /**\n  *  Controller Interface\n  *  Copyright (C) 2018 The Contract Wallet Company Limited\n  *\n  *  This program is free software: you can redistribute it and/or modify\n  *  it under the terms of the GNU General Public License as published by\n  *  the Free Software Foundation, either version 3 of the License, or\n  *  (at your option) any later version.\n\n  *  This program is distributed in the hope that it will be useful,\n  *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  *  GNU General Public License for more details.\n\n  *  You should have received a copy of the GNU General Public License\n  *  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n  */\n\n  /**\n   *  Controller\n   *  Copyright (C) 2018 The Contract Wallet Company Limited\n   *\n   *  This program is free software: you can redistribute it and/or modify\n   *  it under the terms of the GNU General Public License as published by\n   *  the Free Software Foundation, either version 3 of the License, or\n   *  (at your option) any later version.\n\n   *  This program is distributed in the hope that it will be useful,\n   *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n   *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   *  GNU General Public License for more details.\n\n   *  You should have received a copy of the GNU General Public License\n   *  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n   */\n\n\n  /// @title The Controller interface provides access to an external list of controllers.\n  interface IController {\n      function isController(address) external view returns (bool);\n  }\n\n  /// @title Controller stores a list of controller addresses that can be used for authentication in other contracts.\n  contract Controller is IController {\n      event AddedController(address _sender, address _controller);\n      event RemovedController(address _sender, address _controller);\n\n      mapping (address => bool) private _isController;\n      uint private _controllerCount;\n\n      /// @dev Constructor initializes the list of controllers with the provided address.\n      /// @param _account address to add to the list of controllers.\n      constructor(address _account) public {\n          _addController(_account);\n      }\n\n      /// @dev Checks if message sender is a controller.\n      modifier onlyController() {\n          require(isController(msg.sender), \"sender is not a controller\");\n          _;\n      }\n\n      /// @dev Add a new controller to the list of controllers.\n      /// @param _account address to add to the list of controllers.\n      function addController(address _account) external onlyController {\n          _addController(_account);\n      }\n\n      /// @dev Remove a controller from the list of controllers.\n      /// @param _account address to remove from the list of controllers.\n      function removeController(address _account) external onlyController {\n          _removeController(_account);\n      }\n\n      /// @return true if the provided account is a controller.\n      function isController(address _account) public view returns (bool) {\n          return _isController[_account];\n      }\n\n      /// @return the current number of controllers.\n      function controllerCount() public view returns (uint) {\n          return _controllerCount;\n      }\n\n      /// @dev Internal-only function that adds a new controller.\n      function _addController(address _account) internal {\n          require(!_isController[_account], \"provided account is already a controller\");\n          _isController[_account] = true;\n          _controllerCount++;\n          emit AddedController(msg.sender, _account);\n      }\n\n      /// @dev Internal-only function that removes an existing controller.\n      function _removeController(address _account) internal {\n          require(_isController[_account], \"provided account is not a controller\");\n          require(_controllerCount > 1, \"cannot remove the last controller\");\n          _isController[_account] = false;\n          _controllerCount--;\n          emit RemovedController(msg.sender, _account);\n      }\n  }\n\n\n /// @title Resolver returns the controller contract address.\n interface IResolver {\n     function addr(bytes32) external view returns (address);\n }\n\n /// @title Controllable implements access control functionality based on a controller set in ENS.\n contract Controllable {\n     /// @dev _ENS points to the ENS registry smart contract.\n     ENS private _ENS;\n     /// @dev Is the registered ENS name of the controller contract.\n     bytes32 private _node;\n\n     /// @dev Constructor initializes the controller contract object.\n     /// @param _ens is the address of the ENS.\n     /// @param _controllerName is the ENS name of the Controller.\n     constructor(address _ens, bytes32 _controllerName) internal {\n       _ENS = ENS(_ens);\n       _node = _controllerName;\n     }\n\n     /// @dev Checks if message sender is the controller.\n     modifier onlyController() {\n         require(_isController(msg.sender), \"sender is not a controller\");\n         _;\n     }\n\n     /// @return true if the provided account is the controller.\n     function _isController(address _account) internal view returns (bool) {\n         return IController(IResolver(_ENS.resolver(_node)).addr(_node)).isController(_account);\n     }\n }\n\n/**\n *  Month Parser\n *  Copyright (C) 2018 The Contract Wallet Company Limited\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n\n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n\n/// @title Date provides date parsing functionality.\ncontract Date {\n\n    bytes32 constant private JANUARY = keccak256(\"Jan\");\n    bytes32 constant private FEBRUARY = keccak256(\"Feb\");\n    bytes32 constant private MARCH = keccak256(\"Mar\");\n    bytes32 constant private APRIL = keccak256(\"Apr\");\n    bytes32 constant private MAY = keccak256(\"May\");\n    bytes32 constant private JUNE = keccak256(\"Jun\");\n    bytes32 constant private JULY = keccak256(\"Jul\");\n    bytes32 constant private AUGUST = keccak256(\"Aug\");\n    bytes32 constant private SEPTEMBER = keccak256(\"Sep\");\n    bytes32 constant private OCTOBER = keccak256(\"Oct\");\n    bytes32 constant private NOVEMBER = keccak256(\"Nov\");\n    bytes32 constant private DECEMBER = keccak256(\"Dec\");\n\n    /// @return the number of the month based on its name.\n    /// @param _month the first three letters of a month's name e.g. \"Jan\".\n    function _monthToNumber(string _month) internal pure returns (uint8) {\n        bytes32 month = keccak256(abi.encodePacked(_month));\n        if (month == JANUARY) {\n            return 1;\n        } else if (month == FEBRUARY) {\n            return 2;\n        } else if (month == MARCH) {\n            return 3;\n        } else if (month == APRIL) {\n            return 4;\n        } else if (month == MAY) {\n            return 5;\n        } else if (month == JUNE) {\n            return 6;\n        } else if (month == JULY) {\n            return 7;\n        } else if (month == AUGUST) {\n            return 8;\n        } else if (month == SEPTEMBER) {\n            return 9;\n        } else if (month == OCTOBER) {\n            return 10;\n        } else if (month == NOVEMBER) {\n            return 11;\n        } else if (month == DECEMBER) {\n            return 12;\n        } else {\n            revert(\"not a valid month\");\n        }\n    }\n}\n\n\n/**\n *  JSON Parser\n *  Copyright (C) 2018 The Contract Wallet Company Limited\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n\n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n\n// <ORACLIZE_API>\n// Release targetted at solc 0.4.25 to silence compiler warning/error messages, compatible down to 0.4.22\n/*\nCopyright (c) 2015-2016 Oraclize SRL\nCopyright (c) 2016 Oraclize LTD\n\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n// This api is currently targeted at 0.4.22 to 0.4.25 (stable builds), please import oraclizeAPI_pre0.4.sol or oraclizeAPI_0.4 where necessary\n\ncontract OraclizeI {\n    address public cbAddress;\n    function query(uint _timestamp, string _datasource, string _arg) external payable returns (bytes32 _id);\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) external payable returns (bytes32 _id);\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) public payable returns (bytes32 _id);\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) external payable returns (bytes32 _id);\n    function queryN(uint _timestamp, string _datasource, bytes _argN) public payable returns (bytes32 _id);\n    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) external payable returns (bytes32 _id);\n    function getPrice(string _datasource) public returns (uint _dsprice);\n    function getPrice(string _datasource, uint gaslimit) public returns (uint _dsprice);\n    function setProofType(byte _proofType) external;\n    function setCustomGasPrice(uint _gasPrice) external;\n    function randomDS_getSessionPubKeyHash() external constant returns(bytes32);\n}\n\ncontract OraclizeAddrResolverI {\n    function getAddress() public returns (address _addr);\n}\n\n/*\nBegin solidity-cborutils\n\nhttps://github.com/smartcontractkit/solidity-cborutils\n\nMIT License\n\nCopyright (c) 2018 SmartContract ChainLink, Ltd.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n */\n\nlibrary Buffer {\n    struct buffer {\n        bytes buf;\n        uint capacity;\n    }\n\n    function init(buffer memory buf, uint _capacity) internal pure {\n        uint capacity = _capacity;\n        if(capacity % 32 != 0) capacity += 32 - (capacity % 32);\n        // Allocate space for the buffer data\n        buf.capacity = capacity;\n        assembly {\n            let ptr := mload(0x40)\n            mstore(buf, ptr)\n            mstore(ptr, 0)\n            mstore(0x40, add(ptr, capacity))\n        }\n    }\n\n    function resize(buffer memory buf, uint capacity) private pure {\n        bytes memory oldbuf = buf.buf;\n        init(buf, capacity);\n        append(buf, oldbuf);\n    }\n\n    function max(uint a, uint b) private pure returns(uint) {\n        if(a > b) {\n            return a;\n        }\n        return b;\n    }\n\n    /**\n     * @dev Appends a byte array to the end of the buffer. Resizes if doing so\n     *      would exceed the capacity of the buffer.\n     * @param buf The buffer to append to.\n     * @param data The data to append.\n     * @return The original buffer.\n     */\n    function append(buffer memory buf, bytes data) internal pure returns(buffer memory) {\n        if(data.length + buf.buf.length > buf.capacity) {\n            resize(buf, max(buf.capacity, data.length) * 2);\n        }\n\n        uint dest;\n        uint src;\n        uint len = data.length;\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Length of existing buffer data\n            let buflen := mload(bufptr)\n            // Start address = buffer address + buffer length + sizeof(buffer length)\n            dest := add(add(bufptr, buflen), 32)\n            // Update buffer length\n            mstore(bufptr, add(buflen, mload(data)))\n            src := add(data, 32)\n        }\n\n        // Copy word-length chunks while possible\n        for(; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        uint mask = 256 ** (32 - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n\n        return buf;\n    }\n\n    /**\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n     * exceed the capacity of the buffer.\n     * @param buf The buffer to append to.\n     * @param data The data to append.\n     * @return The original buffer.\n     */\n    function append(buffer memory buf, uint8 data) internal pure {\n        if(buf.buf.length + 1 > buf.capacity) {\n            resize(buf, buf.capacity * 2);\n        }\n\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Length of existing buffer data\n            let buflen := mload(bufptr)\n            // Address = buffer address + buffer length + sizeof(buffer length)\n            let dest := add(add(bufptr, buflen), 32)\n            mstore8(dest, data)\n            // Update buffer length\n            mstore(bufptr, add(buflen, 1))\n        }\n    }\n\n    /**\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n     * exceed the capacity of the buffer.\n     * @param buf The buffer to append to.\n     * @param data The data to append.\n     * @return The original buffer.\n     */\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\n        if(len + buf.buf.length > buf.capacity) {\n            resize(buf, max(buf.capacity, len) * 2);\n        }\n\n        uint mask = 256 ** len - 1;\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Length of existing buffer data\n            let buflen := mload(bufptr)\n            // Address = buffer address + buffer length + sizeof(buffer length) + len\n            let dest := add(add(bufptr, buflen), len)\n            mstore(dest, or(and(mload(dest), not(mask)), data))\n            // Update buffer length\n            mstore(bufptr, add(buflen, len))\n        }\n        return buf;\n    }\n}\n\nlibrary CBOR {\n    using Buffer for Buffer.buffer;\n\n    uint8 private constant MAJOR_TYPE_INT = 0;\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\n    uint8 private constant MAJOR_TYPE_STRING = 3;\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\n    uint8 private constant MAJOR_TYPE_MAP = 5;\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\n\n    function encodeType(Buffer.buffer memory buf, uint8 major, uint value) private pure {\n        if(value <= 23) {\n            buf.append(uint8((major << 5) | value));\n        } else if(value <= 0xFF) {\n            buf.append(uint8((major << 5) | 24));\n            buf.appendInt(value, 1);\n        } else if(value <= 0xFFFF) {\n            buf.append(uint8((major << 5) | 25));\n            buf.appendInt(value, 2);\n        } else if(value <= 0xFFFFFFFF) {\n            buf.append(uint8((major << 5) | 26));\n            buf.appendInt(value, 4);\n        } else if(value <= 0xFFFFFFFFFFFFFFFF) {\n            buf.append(uint8((major << 5) | 27));\n            buf.appendInt(value, 8);\n        }\n    }\n\n    function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private pure {\n        buf.append(uint8((major << 5) | 31));\n    }\n\n    function encodeUInt(Buffer.buffer memory buf, uint value) internal pure {\n        encodeType(buf, MAJOR_TYPE_INT, value);\n    }\n\n    function encodeInt(Buffer.buffer memory buf, int value) internal pure {\n        if(value >= 0) {\n            encodeType(buf, MAJOR_TYPE_INT, uint(value));\n        } else {\n            encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));\n        }\n    }\n\n    function encodeBytes(Buffer.buffer memory buf, bytes value) internal pure {\n        encodeType(buf, MAJOR_TYPE_BYTES, value.length);\n        buf.append(value);\n    }\n\n    function encodeString(Buffer.buffer memory buf, string value) internal pure {\n        encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\n        buf.append(bytes(value));\n    }\n\n    function startArray(Buffer.buffer memory buf) internal pure {\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\n    }\n\n    function startMap(Buffer.buffer memory buf) internal pure {\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\n    }\n\n    function endSequence(Buffer.buffer memory buf) internal pure {\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\n    }\n}\n\n/*\nEnd solidity-cborutils\n */\n\ncontract usingOraclize {\n    uint constant day = 60*60*24;\n    uint constant week = 60*60*24*7;\n    uint constant month = 60*60*24*30;\n    byte constant proofType_NONE = 0x00;\n    byte constant proofType_TLSNotary = 0x10;\n    byte constant proofType_Ledger = 0x30;\n    byte constant proofType_Android = 0x40;\n    byte constant proofType_Native = 0xF0;\n    byte constant proofStorage_IPFS = 0x01;\n    uint8 constant networkID_auto = 0;\n    uint8 constant networkID_mainnet = 1;\n    uint8 constant networkID_testnet = 2;\n    uint8 constant networkID_morden = 2;\n    uint8 constant networkID_consensys = 161;\n\n    OraclizeAddrResolverI OAR;\n\n    OraclizeI oraclize;\n    modifier oraclizeAPI {\n        if((address(OAR)==0)||(getCodeSize(address(OAR))==0))\n            oraclize_setNetwork(networkID_auto);\n\n        if(address(oraclize) != OAR.getAddress())\n            oraclize = OraclizeI(OAR.getAddress());\n\n        _;\n    }\n    modifier coupon(string code){\n        oraclize = OraclizeI(OAR.getAddress());\n        _;\n    }\n\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\n      return oraclize_setNetwork();\n      networkID; // silence the warning and remain backwards compatible\n    }\n    function oraclize_setNetwork() internal returns(bool){\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){ //mainnet\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\n            oraclize_setNetworkName(\"eth_mainnet\");\n            return true;\n        }\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet\n            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\n            oraclize_setNetworkName(\"eth_ropsten3\");\n            return true;\n        }\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)>0){ //kovan testnet\n            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\n            oraclize_setNetworkName(\"eth_kovan\");\n            return true;\n        }\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)>0){ //rinkeby testnet\n            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\n            oraclize_setNetworkName(\"eth_rinkeby\");\n            return true;\n        }\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)>0){ //ethereum-bridge\n            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\n            return true;\n        }\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)>0){ //ether.camp ide\n            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\n            return true;\n        }\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity\n            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\n            return true;\n        }\n        return false;\n    }\n\n    function __callback(bytes32 myid, string result) public {\n        __callback(myid, result, new bytes(0));\n    }\n    function __callback(bytes32 myid, string result, bytes proof) public {\n      return;\n      // Following should never be reached with a preceding return, however\n      // this is just a placeholder function, ideally meant to be defined in\n      // child contract when proofs are used\n      myid; result; proof; // Silence compiler warnings\n      oraclize = OraclizeI(0); // Additional compiler silence about making function pure/view.\n    }\n\n    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\n        return oraclize.getPrice(datasource);\n    }\n\n    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\n        return oraclize.getPrice(datasource, gaslimit);\n    }\n\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query.value(price)(0, datasource, arg);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query.value(price)(timestamp, datasource, arg);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\n    }\n    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN.value(price)(0, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n\n    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n\n    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN.value(price)(0, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n\n    function oraclize_query(string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n\n    function oraclize_query(string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\n        return oraclize.cbAddress();\n    }\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\n        return oraclize.setProofType(proofP);\n    }\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\n        return oraclize.setCustomGasPrice(gasPrice);\n    }\n\n    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32){\n        return oraclize.randomDS_getSessionPubKeyHash();\n    }\n\n    function getCodeSize(address _addr) view internal returns(uint _size) {\n        assembly {\n            _size := extcodesize(_addr)\n        }\n    }\n\n    function parseAddr(string _a) internal pure returns (address){\n        bytes memory tmp = bytes(_a);\n        uint160 iaddr = 0;\n        uint160 b1;\n        uint160 b2;\n        for (uint i=2; i<2+2*20; i+=2){\n            iaddr *= 256;\n            b1 = uint160(tmp[i]);\n            b2 = uint160(tmp[i+1]);\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\n            else if ((b1 >= 65)&&(b1 <= 70)) b1 -= 55;\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\n            else if ((b2 >= 65)&&(b2 <= 70)) b2 -= 55;\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\n            iaddr += (b1*16+b2);\n        }\n        return address(iaddr);\n    }\n\n    function strCompare(string _a, string _b) internal pure returns (int) {\n        bytes memory a = bytes(_a);\n        bytes memory b = bytes(_b);\n        uint minLength = a.length;\n        if (b.length < minLength) minLength = b.length;\n        for (uint i = 0; i < minLength; i ++)\n            if (a[i] < b[i])\n                return -1;\n            else if (a[i] > b[i])\n                return 1;\n        if (a.length < b.length)\n            return -1;\n        else if (a.length > b.length)\n            return 1;\n        else\n            return 0;\n    }\n\n    function indexOf(string _haystack, string _needle) internal pure returns (int) {\n        bytes memory h = bytes(_haystack);\n        bytes memory n = bytes(_needle);\n        if(h.length < 1 || n.length < 1 || (n.length > h.length))\n            return -1;\n        else if(h.length > (2**128 -1))\n            return -1;\n        else\n        {\n            uint subindex = 0;\n            for (uint i = 0; i < h.length; i ++)\n            {\n                if (h[i] == n[0])\n                {\n                    subindex = 1;\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\n                    {\n                        subindex++;\n                    }\n                    if(subindex == n.length)\n                        return int(i);\n                }\n            }\n            return -1;\n        }\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n        return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string _a, string _b) internal pure returns (string) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    // parseInt\n    function parseInt(string _a) internal pure returns (uint) {\n        return parseInt(_a, 0);\n    }\n\n    // parseInt(parseFloat*10^_b)\n    function parseInt(string _a, uint _b) internal pure returns (uint) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i=0; i<bresult.length; i++){\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\n                if (decimals){\n                   if (_b == 0) break;\n                    else _b--;\n                }\n                mint *= 10;\n                mint += uint(bresult[i]) - 48;\n            } else if (bresult[i] == 46) decimals = true;\n        }\n        if (_b > 0) mint *= 10**_b;\n        return mint;\n    }\n\n    function uint2str(uint i) internal pure returns (string){\n        if (i == 0) return \"0\";\n        uint j = i;\n        uint len;\n        while (j != 0){\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (i != 0){\n            bstr[k--] = byte(48 + i % 10);\n            i /= 10;\n        }\n        return string(bstr);\n    }\n\n    using CBOR for Buffer.buffer;\n    function stra2cbor(string[] arr) internal pure returns (bytes) {\n        safeMemoryCleaner();\n        Buffer.buffer memory buf;\n        Buffer.init(buf, 1024);\n        buf.startArray();\n        for (uint i = 0; i < arr.length; i++) {\n            buf.encodeString(arr[i]);\n        }\n        buf.endSequence();\n        return buf.buf;\n    }\n\n    function ba2cbor(bytes[] arr) internal pure returns (bytes) {\n        safeMemoryCleaner();\n        Buffer.buffer memory buf;\n        Buffer.init(buf, 1024);\n        buf.startArray();\n        for (uint i = 0; i < arr.length; i++) {\n            buf.encodeBytes(arr[i]);\n        }\n        buf.endSequence();\n        return buf.buf;\n    }\n\n    string oraclize_network_name;\n    function oraclize_setNetworkName(string _network_name) internal {\n        oraclize_network_name = _network_name;\n    }\n\n    function oraclize_getNetworkName() internal view returns (string) {\n        return oraclize_network_name;\n    }\n\n    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\n        require((_nbytes > 0) && (_nbytes <= 32));\n        // Convert from seconds to ledger timer ticks\n        _delay *= 10;\n        bytes memory nbytes = new bytes(1);\n        nbytes[0] = byte(_nbytes);\n        bytes memory unonce = new bytes(32);\n        bytes memory sessionKeyHash = new bytes(32);\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\n        assembly {\n            mstore(unonce, 0x20)\n            // the following variables can be relaxed\n            // check relaxed random contract under ethereum-examples repo\n            // for an idea on how to override and replace comit hash vars\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\n            mstore(sessionKeyHash, 0x20)\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\n        }\n        bytes memory delay = new bytes(32);\n        assembly {\n            mstore(add(delay, 0x20), _delay)\n        }\n\n        bytes memory delay_bytes8 = new bytes(8);\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\n\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\n        bytes32 queryId = oraclize_query(\"random\", args, _customGasLimit);\n\n        bytes memory delay_bytes8_left = new bytes(8);\n\n        assembly {\n            let x := mload(add(delay_bytes8, 0x20))\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\n\n        }\n\n        oraclize_randomDS_setCommitment(queryId, keccak256(abi.encodePacked(delay_bytes8_left, args[1], sha256(args[0]), args[2])));\n        return queryId;\n    }\n\n    function oraclize_randomDS_setCommitment(bytes32 queryId, bytes32 commitment) internal {\n        oraclize_randomDS_args[queryId] = commitment;\n    }\n\n    mapping(bytes32=>bytes32) oraclize_randomDS_args;\n    mapping(bytes32=>bool) oraclize_randomDS_sessionKeysHashVerified;\n\n    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){\n        bool sigok;\n        address signer;\n\n        bytes32 sigr;\n        bytes32 sigs;\n\n        bytes memory sigr_ = new bytes(32);\n        uint offset = 4+(uint(dersig[3]) - 0x20);\n        sigr_ = copyBytes(dersig, offset, 32, sigr_, 0);\n        bytes memory sigs_ = new bytes(32);\n        offset += 32 + 2;\n        sigs_ = copyBytes(dersig, offset+(uint(dersig[offset-1]) - 0x20), 32, sigs_, 0);\n\n        assembly {\n            sigr := mload(add(sigr_, 32))\n            sigs := mload(add(sigs_, 32))\n        }\n\n\n        (sigok, signer) = safer_ecrecover(tosignh, 27, sigr, sigs);\n        if (address(keccak256(pubkey)) == signer) return true;\n        else {\n            (sigok, signer) = safer_ecrecover(tosignh, 28, sigr, sigs);\n            return (address(keccak256(pubkey)) == signer);\n        }\n    }\n\n    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {\n        bool sigok;\n\n        // Step 6: verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\n        bytes memory sig2 = new bytes(uint(proof[sig2offset+1])+2);\n        copyBytes(proof, sig2offset, sig2.length, sig2, 0);\n\n        bytes memory appkey1_pubkey = new bytes(64);\n        copyBytes(proof, 3+1, 64, appkey1_pubkey, 0);\n\n        bytes memory tosign2 = new bytes(1+65+32);\n        tosign2[0] = byte(1); //role\n        copyBytes(proof, sig2offset-65, 65, tosign2, 1);\n        bytes memory CODEHASH = hex\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\";\n        copyBytes(CODEHASH, 0, 32, tosign2, 1+65);\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\n\n        if (sigok == false) return false;\n\n\n        // Step 7: verify the APPKEY1 provenance (must be signed by Ledger)\n        bytes memory LEDGERKEY = hex\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\";\n\n        bytes memory tosign3 = new bytes(1+65);\n        tosign3[0] = 0xFE;\n        copyBytes(proof, 3, 65, tosign3, 1);\n\n        bytes memory sig3 = new bytes(uint(proof[3+65+1])+2);\n        copyBytes(proof, 3+65, sig3.length, sig3, 0);\n\n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\n\n        return sigok;\n    }\n\n    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string _result, bytes _proof) {\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\n        require((_proof[0] == \"L\") && (_proof[1] == \"P\") && (_proof[2] == 1));\n\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n        require(proofVerified);\n\n        _;\n    }\n\n    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) return 1;\n\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n        if (proofVerified == false) return 2;\n\n        return 0;\n    }\n\n    function matchBytes32Prefix(bytes32 content, bytes prefix, uint n_random_bytes) internal pure returns (bool){\n        bool match_ = true;\n\n        require(prefix.length == n_random_bytes);\n\n        for (uint256 i=0; i< n_random_bytes; i++) {\n            if (content[i] != prefix[i]) match_ = false;\n        }\n\n        return match_;\n    }\n\n    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\n\n        // Step 2: the unique keyhash has to match with the sha256 of (context name + queryId)\n        uint ledgerProofLength = 3+65+(uint(proof[3+65+1])+2)+32;\n        bytes memory keyhash = new bytes(32);\n        copyBytes(proof, ledgerProofLength, 32, keyhash, 0);\n        if (!(keccak256(keyhash) == keccak256(abi.encodePacked(sha256(abi.encodePacked(context_name, queryId)))))) return false;\n\n        bytes memory sig1 = new bytes(uint(proof[ledgerProofLength+(32+8+1+32)+1])+2);\n        copyBytes(proof, ledgerProofLength+(32+8+1+32), sig1.length, sig1, 0);\n\n        // Step 3: we assume sig1 is valid (it will be verified during step 5) and we verify if 'result' is the prefix of sha256(sig1)\n        if (!matchBytes32Prefix(sha256(sig1), result, uint(proof[ledgerProofLength+32+8]))) return false;\n\n        // Step 4: commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\n        // This is to verify that the computed args match with the ones specified in the query.\n        bytes memory commitmentSlice1 = new bytes(8+1+32);\n        copyBytes(proof, ledgerProofLength+32, 8+1+32, commitmentSlice1, 0);\n\n        bytes memory sessionPubkey = new bytes(64);\n        uint sig2offset = ledgerProofLength+32+(8+1+32)+sig1.length+65;\n        copyBytes(proof, sig2offset-64, 64, sessionPubkey, 0);\n\n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\n        if (oraclize_randomDS_args[queryId] == keccak256(abi.encodePacked(commitmentSlice1, sessionPubkeyHash))){ //unonce, nbytes and sessionKeyHash match\n            delete oraclize_randomDS_args[queryId];\n        } else return false;\n\n\n        // Step 5: validity verification for sig1 (keyhash and args signed with the sessionKey)\n        bytes memory tosign1 = new bytes(32+8+1+32);\n        copyBytes(proof, ledgerProofLength, 32+8+1+32, tosign1, 0);\n        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) return false;\n\n        // verify if sessionPubkeyHash was verified already, if not.. let's do it!\n        if (oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false){\n            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof, sig2offset);\n        }\n\n        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\n    }\n\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {\n        uint minLength = length + toOffset;\n\n        // Buffer too small\n        require(to.length >= minLength); // Should be a better way?\n\n        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\n        uint i = 32 + fromOffset;\n        uint j = 32 + toOffset;\n\n        while (i < (32 + fromOffset + length)) {\n            assembly {\n                let tmp := mload(add(from, i))\n                mstore(add(to, j), tmp)\n            }\n            i += 32;\n            j += 32;\n        }\n\n        return to;\n    }\n\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    // Duplicate Solidity's ecrecover, but catching the CALL return value\n    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\n        // We do our own memory management here. Solidity uses memory offset\n        // 0x40 to store the current end of memory. We write past it (as\n        // writes are memory extensions), but don't update the offset so\n        // Solidity will reuse it. The memory used here is only needed for\n        // this context.\n\n        // FIXME: inline assembly can't access return values\n        bool ret;\n        address addr;\n\n        assembly {\n            let size := mload(0x40)\n            mstore(size, hash)\n            mstore(add(size, 32), v)\n            mstore(add(size, 64), r)\n            mstore(add(size, 96), s)\n\n            // NOTE: we can reuse the request memory because we deal with\n            //       the return code\n            ret := call(3000, 1, 0, size, 128, size, 32)\n            addr := mload(size)\n        }\n\n        return (ret, addr);\n    }\n\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        if (sig.length != 65)\n          return (false, 0);\n\n        // The signature format is a compact form of:\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n        // Compact means, uint8 is not padded to 32 bytes.\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n\n            // Here we are loading the last 32 bytes. We exploit the fact that\n            // 'mload' will pad with zeroes if we overread.\n            // There is no 'mload8' to do this, but that would be nicer.\n            v := byte(0, mload(add(sig, 96)))\n\n            // Alternative solution:\n            // 'byte' is not working due to the Solidity parser, so lets\n            // use the second best option, 'and'\n            // v := and(mload(add(sig, 65)), 255)\n        }\n\n        // albeit non-transactional signatures are not specified by the YP, one would expect it\n        // to match the YP range of [27, 28]\n        //\n        // geth uses [0, 1] and some clients have followed. This might change, see:\n        //  https://github.com/ethereum/go-ethereum/issues/2053\n        if (v < 27)\n          v += 27;\n\n        if (v != 27 && v != 28)\n            return (false, 0);\n\n        return safer_ecrecover(hash, v, r, s);\n    }\n\n    function safeMemoryCleaner() internal pure {\n        assembly {\n            let fmem := mload(0x40)\n            codecopy(fmem, codesize, sub(msize, fmem))\n        }\n    }\n\n}\n// </ORACLIZE_API>\n\n\n/// @title JSON provides JSON parsing functionality.\ncontract JSON is usingOraclize{\n    using strings for *;\n\n    bytes32 constant private prefixHash = keccak256(\"{\\\"ETH\\\":\");\n\n    /// @dev Extracts JSON rate value from the response object.\n    /// @param _json body of the JSON response from the CryptoCompare API.\n    function parseRate(string _json) public pure returns (string) {\n\n        uint json_len = abi.encodePacked(_json).length;\n        //{\"ETH\":}.length = 8, assuming a (maximum of) 18 digit prevision\n        require(json_len > 8 && json_len <= 28, \"misformatted input\");\n\n        bytes memory jsonPrefix = new bytes(7);\n        copyBytes(abi.encodePacked(_json), 0, 7, jsonPrefix, 0);\n        require(keccak256(jsonPrefix) == prefixHash, \"prefix mismatch\");\n\n        strings.slice memory body = _json.toSlice();\n        body.split(\":\".toSlice()); //we are sure that ':' is included in the string, body now contains the rate+'}'\n        json_len = body._len;\n        body.until(\"}\".toSlice());\n        require(body._len == json_len-1,\"not json format\"); //ensure that the json is properly terminated with a '}'\n        return body.toString();\n\n    }\n}\n\n\n/**\n *  ParseIntScientific\n *  Copyright (C) 2018 The Contract Wallet Company Limited\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n\n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\n/// @title ParseIntScientific provides floating point in scientific notation (e.g. e-5) parsing functionality.\ncontract ParseIntScientific {\n\n    using SafeMath for uint256;\n\n    byte constant private PLUS_ASCII = byte(43); //decimal value of '+'\n    byte constant private DASH_ASCII = byte(45); //decimal value of '-'\n    byte constant private DOT_ASCII = byte(46); //decimal value of '.'\n    byte constant private ZERO_ASCII = byte(48); //decimal value of '0'\n    byte constant private NINE_ASCII = byte(57); //decimal value of '9'\n    byte constant private E_ASCII = byte(69); //decimal value of 'E'\n    byte constant private e_ASCII = byte(101); //decimal value of 'e'\n\n    /// @dev ParseIntScientific delegates the call to _parseIntScientific(string, uint) with the 2nd argument being 0.\n    function _parseIntScientific(string _inString) internal pure returns (uint) {\n        return _parseIntScientific(_inString, 0);\n    }\n\n    /// @dev ParseIntScientificWei parses a rate expressed in ETH and returns its wei denomination\n    function _parseIntScientificWei(string _inString) internal pure returns (uint) {\n        return _parseIntScientific(_inString, 18);\n    }\n\n    /// @dev ParseIntScientific parses a JSON standard - floating point number.\n    /// @param _inString is input string.\n    /// @param _magnitudeMult multiplies the number with 10^_magnitudeMult.\n    function _parseIntScientific(string _inString, uint _magnitudeMult) internal pure returns (uint) {\n\n        bytes memory inBytes = bytes(_inString);\n        uint mint = 0; // the final uint returned\n        uint mintDec = 0; // the uint following the decimal point\n        uint mintExp = 0; // the exponent\n        uint decMinted = 0; // how many decimals were 'minted'.\n        uint expIndex = 0; // the position in the byte array that 'e' was found (if found)\n        bool integral = false; // indicates the existence of the integral part, it should always exist (even if 0) e.g. 'e+1'  or '.1' is not valid\n        bool decimals = false; // indicates a decimal number, set to true if '.' is found\n        bool exp = false; // indicates if the number being parsed has an exponential representation\n        bool minus = false; // indicated if the exponent is negative\n        bool plus = false; // indicated if the exponent is positive\n\n        for (uint i = 0; i < inBytes.length; i++) {\n            if ((inBytes[i] >= ZERO_ASCII) && (inBytes[i] <= NINE_ASCII) && (!exp)) {\n                // 'e' not encountered yet, minting integer part or decimals\n                if (decimals) {\n                    // '.' encountered\n                    //use safeMath in case there is an overflow\n                    mintDec = mintDec.mul(10);\n                    mintDec = mintDec.add(uint(inBytes[i]) - uint(ZERO_ASCII));\n                    decMinted++; //keep track of the #decimals\n                } else {\n                    // integral part (before '.')\n                    integral = true;\n                    //use safeMath in case there is an overflow\n                    mint = mint.mul(10);\n                    mint = mint.add(uint(inBytes[i]) - uint(ZERO_ASCII));\n                }\n            } else if ((inBytes[i] >= ZERO_ASCII) && (inBytes[i] <= NINE_ASCII) && (exp)) {\n                //exponential notation (e-/+) has been detected, mint the exponent\n                mintExp = mintExp.mul(10);\n                mintExp = mintExp.add(uint(inBytes[i]) - uint(ZERO_ASCII));\n            } else if (inBytes[i] == DOT_ASCII) {\n                //an integral part before should always exist before '.'\n                require(integral, \"missing integral part\");\n                // an extra decimal point makes the format invalid\n                require(!decimals, \"duplicate decimal point\");\n                //the decimal point should always be before the exponent\n                require(!exp, \"decimal after exponent\");\n                decimals = true;\n            } else if (inBytes[i] == DASH_ASCII) {\n                // an extra '-' should be considered an invalid character\n                require(!minus, \"duplicate -\");\n                require(!plus, \"extra sign\");\n                require(expIndex + 1 == i, \"- sign not immediately after e\");\n                minus = true;\n            } else if (inBytes[i] == PLUS_ASCII) {\n                // an extra '+' should be considered an invalid character\n                require(!plus, \"duplicate +\");\n                require(!minus, \"extra sign\");\n                require(expIndex + 1 == i, \"+ sign not immediately after e\");\n                plus = true;\n            } else if ((inBytes[i] == E_ASCII) || (inBytes[i] == e_ASCII)) {\n                //an integral part before should always exist before 'e'\n                require(integral, \"missing integral part\");\n                // an extra 'e' or 'E' should be considered an invalid character\n                require(!exp, \"duplicate exponent symbol\");\n                exp = true;\n                expIndex = i;\n            } else {\n                revert(\"invalid digit\");\n            }\n        }\n\n        if (minus || plus) {\n            // end of string e[x|-] without specifying the exponent\n            require(i > expIndex + 2);\n        } else if (exp) {\n            // end of string (e) without specifying the exponent\n            require(i > expIndex + 1);\n        }\n\n        if (minus) {\n            // e^(-x)\n            if (mintExp >= _magnitudeMult) {\n                // the (negative) exponent is bigger than the given parameter for \"shifting left\".\n                // use integer division to reduce the precision.\n                require(mintExp - _magnitudeMult < 78, \"exponent > 77\"); //\n                mint /= 10 ** (mintExp - _magnitudeMult);\n                return mint;\n\n            } else {\n                // the (negative) exponent is smaller than the given parameter for \"shifting left\".\n                //no need for underflow check\n                _magnitudeMult = _magnitudeMult - mintExp;\n            }\n        } else {\n            // e^(+x), positive exponent or no exponent\n            // just shift left as many times as indicated by the exponent and the shift parameter\n            _magnitudeMult = _magnitudeMult.add(mintExp);\n          }\n\n          if (_magnitudeMult >= decMinted) {\n              // the decimals are fewer or equal than the shifts: use all of them\n              // shift number and add the decimals at the end\n              // include decimals if present in the original input\n              require(decMinted < 78, \"more than 77 decimal digits parsed\"); //\n              mint = mint.mul(10 ** (decMinted));\n              mint = mint.add(mintDec);\n              //// add zeros at the end if the decimals were fewer than #_magnitudeMult\n              require(_magnitudeMult - decMinted < 78, \"exponent > 77\"); //\n              mint = mint.mul(10 ** (_magnitudeMult - decMinted));\n          } else {\n              // the decimals are more than the #_magnitudeMult shifts\n              // use only the ones needed, discard the rest\n              decMinted -= _magnitudeMult;\n              require(decMinted < 78, \"more than 77 decimal digits parsed\"); //\n              mintDec /= 10 ** (decMinted);\n              // shift number and add the decimals at the end\n              require(_magnitudeMult < 78, \"more than 77 decimal digits parsed\"); //\n              mint = mint.mul(10 ** (_magnitudeMult));\n              mint = mint.add(mintDec);\n          }\n\n        return mint;\n    }\n}\n\n\n/*\n * Copyright 2016 Nick Johnson\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * @title String & slice utility library for Solidity contracts.\n * @author Nick Johnson <[email protected]>\n *\n * @dev Functionality in this library is largely implemented using an\n *      abstraction called a 'slice'. A slice represents a part of a string -\n *      anything from the entire string to a single character, or even no\n *      characters at all (a 0-length slice). Since a slice only has to specify\n *      an offset and a length, copying and manipulating slices is a lot less\n *      expensive than copying and manipulating the strings they reference.\n *\n *      To further reduce gas costs, most functions on slice that need to return\n *      a slice modify the original one instead of allocating a new one; for\n *      instance, `s.split(\".\")` will return the text up to the first '.',\n *      modifying s to only contain the remainder of the string after the '.'.\n *      In situations where you do not want to modify the original slice, you\n *      can make a copy first with `.copy()`, for example:\n *      `s.copy().split(\".\")`. Try and avoid using this idiom in loops; since\n *      Solidity has no memory management, it will result in allocating many\n *      short-lived slices that are later discarded.\n *\n *      Functions that return two slices come in two versions: a non-allocating\n *      version that takes the second slice as an argument, modifying it in\n *      place, and an allocating version that allocates and returns the second\n *      slice; see `nextRune` for example.\n *\n *      Functions that have to copy string data will return strings rather than\n *      slices; these can be cast back to slices for further processing if\n *      required.\n *\n *      For convenience, some functions are provided with non-modifying\n *      variants that create a new slice and return both; for instance,\n *      `s.splitNew('.')` leaves s unmodified, and returns two values\n *      corresponding to the left and right parts of the string.\n */\n\nlibrary strings {\n    struct slice {\n        uint _len;\n        uint _ptr;\n    }\n\n    function memcpy(uint dest, uint src, uint len) private pure {\n        // Copy word-length chunks while possible\n        for(; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        uint mask = 256 ** (32 - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n\n    /*\n     * @dev Returns a slice containing the entire string.\n     * @param self The string to make a slice from.\n     * @return A newly allocated slice containing the entire string.\n     */\n    function toSlice(string memory self) internal pure returns (slice memory) {\n        uint ptr;\n        assembly {\n            ptr := add(self, 0x20)\n        }\n        return slice(bytes(self).length, ptr);\n    }\n\n    /*\n     * @dev Returns the length of a null-terminated bytes32 string.\n     * @param self The value to find the length of.\n     * @return The length of the string, from 0 to 32.\n     */\n    function len(bytes32 self) internal pure returns (uint) {\n        uint ret;\n        if (self == 0)\n            return 0;\n        if (self & 0xffffffffffffffffffffffffffffffff == 0) {\n            ret += 16;\n            self = bytes32(uint(self) / 0x100000000000000000000000000000000);\n        }\n        if (self & 0xffffffffffffffff == 0) {\n            ret += 8;\n            self = bytes32(uint(self) / 0x10000000000000000);\n        }\n        if (self & 0xffffffff == 0) {\n            ret += 4;\n            self = bytes32(uint(self) / 0x100000000);\n        }\n        if (self & 0xffff == 0) {\n            ret += 2;\n            self = bytes32(uint(self) / 0x10000);\n        }\n        if (self & 0xff == 0) {\n            ret += 1;\n        }\n        return 32 - ret;\n    }\n\n    /*\n     * @dev Returns a slice containing the entire bytes32, interpreted as a\n     *      null-terminated utf-8 string.\n     * @param self The bytes32 value to convert to a slice.\n     * @return A new slice containing the value of the input argument up to the\n     *         first null.\n     */\n    function toSliceB32(bytes32 self) internal pure returns (slice memory ret) {\n        // Allocate space for `self` in memory, copy it there, and point ret at it\n        assembly {\n            let ptr := mload(0x40)\n            mstore(0x40, add(ptr, 0x20))\n            mstore(ptr, self)\n            mstore(add(ret, 0x20), ptr)\n        }\n        ret._len = len(self);\n    }\n\n    /*\n     * @dev Returns a new slice containing the same data as the current slice.\n     * @param self The slice to copy.\n     * @return A new slice containing the same data as `self`.\n     */\n    function copy(slice memory self) internal pure returns (slice memory) {\n        return slice(self._len, self._ptr);\n    }\n\n    /*\n     * @dev Copies a slice to a new string.\n     * @param self The slice to copy.\n     * @return A newly allocated string containing the slice's text.\n     */\n    function toString(slice memory self) internal pure returns (string memory) {\n        string memory ret = new string(self._len);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n\n        memcpy(retptr, self._ptr, self._len);\n        return ret;\n    }\n\n    /*\n     * @dev Returns the length in runes of the slice. Note that this operation\n     *      takes time proportional to the length of the slice; avoid using it\n     *      in loops, and call `slice.empty()` if you only need to know whether\n     *      the slice is empty or not.\n     * @param self The slice to operate on.\n     * @return The length of the slice in runes.\n     */\n    function len(slice memory self) internal pure returns (uint l) {\n        // Starting at ptr-31 means the LSB will be the byte we care about\n        uint ptr = self._ptr - 31;\n        uint end = ptr + self._len;\n        for (l = 0; ptr < end; l++) {\n            uint8 b;\n            assembly { b := and(mload(ptr), 0xFF) }\n            if (b < 0x80) {\n                ptr += 1;\n            } else if(b < 0xE0) {\n                ptr += 2;\n            } else if(b < 0xF0) {\n                ptr += 3;\n            } else if(b < 0xF8) {\n                ptr += 4;\n            } else if(b < 0xFC) {\n                ptr += 5;\n            } else {\n                ptr += 6;\n            }\n        }\n    }\n\n    /*\n     * @dev Returns true if the slice is empty (has a length of 0).\n     * @param self The slice to operate on.\n     * @return True if the slice is empty, False otherwise.\n     */\n    function empty(slice memory self) internal pure returns (bool) {\n        return self._len == 0;\n    }\n\n    /*\n     * @dev Returns a positive number if `other` comes lexicographically after\n     *      `self`, a negative number if it comes before, or zero if the\n     *      contents of the two slices are equal. Comparison is done per-rune,\n     *      on unicode codepoints.\n     * @param self The first slice to compare.\n     * @param other The second slice to compare.\n     * @return The result of the comparison.\n     */\n    function compare(slice memory self, slice memory other) internal pure returns (int) {\n        uint shortest = self._len;\n        if (other._len < self._len)\n            shortest = other._len;\n\n        uint selfptr = self._ptr;\n        uint otherptr = other._ptr;\n        for (uint idx = 0; idx < shortest; idx += 32) {\n            uint a;\n            uint b;\n            assembly {\n                a := mload(selfptr)\n                b := mload(otherptr)\n            }\n            if (a != b) {\n                // Mask out irrelevant bytes and check again\n                uint256 mask = uint256(-1); // 0xffff...\n                if(shortest < 32) {\n                  mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\n                }\n                uint256 diff = (a & mask) - (b & mask);\n                if (diff != 0)\n                    return int(diff);\n            }\n            selfptr += 32;\n            otherptr += 32;\n        }\n        return int(self._len) - int(other._len);\n    }\n\n    /*\n     * @dev Returns true if the two slices contain the same text.\n     * @param self The first slice to compare.\n     * @param self The second slice to compare.\n     * @return True if the slices are equal, false otherwise.\n     */\n    function equals(slice memory self, slice memory other) internal pure returns (bool) {\n        return compare(self, other) == 0;\n    }\n\n    /*\n     * @dev Extracts the first rune in the slice into `rune`, advancing the\n     *      slice to point to the next rune and returning `self`.\n     * @param self The slice to operate on.\n     * @param rune The slice that will contain the first rune.\n     * @return `rune`.\n     */\n    function nextRune(slice memory self, slice memory rune) internal pure returns (slice memory) {\n        rune._ptr = self._ptr;\n\n        if (self._len == 0) {\n            rune._len = 0;\n            return rune;\n        }\n\n        uint l;\n        uint b;\n        // Load the first byte of the rune into the LSBs of b\n        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\n        if (b < 0x80) {\n            l = 1;\n        } else if(b < 0xE0) {\n            l = 2;\n        } else if(b < 0xF0) {\n            l = 3;\n        } else {\n            l = 4;\n        }\n\n        // Check for truncated codepoints\n        if (l > self._len) {\n            rune._len = self._len;\n            self._ptr += self._len;\n            self._len = 0;\n            return rune;\n        }\n\n        self._ptr += l;\n        self._len -= l;\n        rune._len = l;\n        return rune;\n    }\n\n    /*\n     * @dev Returns the first rune in the slice, advancing the slice to point\n     *      to the next rune.\n     * @param self The slice to operate on.\n     * @return A slice containing only the first rune from `self`.\n     */\n    function nextRune(slice memory self) internal pure returns (slice memory ret) {\n        nextRune(self, ret);\n    }\n\n    /*\n     * @dev Returns the number of the first codepoint in the slice.\n     * @param self The slice to operate on.\n     * @return The number of the first codepoint in the slice.\n     */\n    function ord(slice memory self) internal pure returns (uint ret) {\n        if (self._len == 0) {\n            return 0;\n        }\n\n        uint word;\n        uint length;\n        uint divisor = 2 ** 248;\n\n        // Load the rune into the MSBs of b\n        assembly { word:= mload(mload(add(self, 32))) }\n        uint b = word / divisor;\n        if (b < 0x80) {\n            ret = b;\n            length = 1;\n        } else if(b < 0xE0) {\n            ret = b & 0x1F;\n            length = 2;\n        } else if(b < 0xF0) {\n            ret = b & 0x0F;\n            length = 3;\n        } else {\n            ret = b & 0x07;\n            length = 4;\n        }\n\n        // Check for truncated codepoints\n        if (length > self._len) {\n            return 0;\n        }\n\n        for (uint i = 1; i < length; i++) {\n            divisor = divisor / 256;\n            b = (word / divisor) & 0xFF;\n            if (b & 0xC0 != 0x80) {\n                // Invalid UTF-8 sequence\n                return 0;\n            }\n            ret = (ret * 64) | (b & 0x3F);\n        }\n\n        return ret;\n    }\n\n    /*\n     * @dev Returns the keccak-256 hash of the slice.\n     * @param self The slice to hash.\n     * @return The hash of the slice.\n     */\n    function keccak(slice memory self) internal pure returns (bytes32 ret) {\n        assembly {\n            ret := keccak256(mload(add(self, 32)), mload(self))\n        }\n    }\n\n    /*\n     * @dev Returns true if `self` starts with `needle`.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return True if the slice starts with the provided text, false otherwise.\n     */\n    function startsWith(slice memory self, slice memory needle) internal pure returns (bool) {\n        if (self._len < needle._len) {\n            return false;\n        }\n\n        if (self._ptr == needle._ptr) {\n            return true;\n        }\n\n        bool equal;\n        assembly {\n            let length := mload(needle)\n            let selfptr := mload(add(self, 0x20))\n            let needleptr := mload(add(needle, 0x20))\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n        }\n        return equal;\n    }\n\n    /*\n     * @dev If `self` starts with `needle`, `needle` is removed from the\n     *      beginning of `self`. Otherwise, `self` is unmodified.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return `self`\n     */\n    function beyond(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        if (self._len < needle._len) {\n            return self;\n        }\n\n        bool equal = true;\n        if (self._ptr != needle._ptr) {\n            assembly {\n                let length := mload(needle)\n                let selfptr := mload(add(self, 0x20))\n                let needleptr := mload(add(needle, 0x20))\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n            }\n        }\n\n        if (equal) {\n            self._len -= needle._len;\n            self._ptr += needle._len;\n        }\n\n        return self;\n    }\n\n    /*\n     * @dev Returns true if the slice ends with `needle`.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return True if the slice starts with the provided text, false otherwise.\n     */\n    function endsWith(slice memory self, slice memory needle) internal pure returns (bool) {\n        if (self._len < needle._len) {\n            return false;\n        }\n\n        uint selfptr = self._ptr + self._len - needle._len;\n\n        if (selfptr == needle._ptr) {\n            return true;\n        }\n\n        bool equal;\n        assembly {\n            let length := mload(needle)\n            let needleptr := mload(add(needle, 0x20))\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n        }\n\n        return equal;\n    }\n\n    /*\n     * @dev If `self` ends with `needle`, `needle` is removed from the\n     *      end of `self`. Otherwise, `self` is unmodified.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return `self`\n     */\n    function until(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        if (self._len < needle._len) {\n            return self;\n        }\n\n        uint selfptr = self._ptr + self._len - needle._len;\n        bool equal = true;\n        if (selfptr != needle._ptr) {\n            assembly {\n                let length := mload(needle)\n                let needleptr := mload(add(needle, 0x20))\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n            }\n        }\n\n        if (equal) {\n            self._len -= needle._len;\n        }\n\n        return self;\n    }\n\n    // Returns the memory address of the first byte of the first occurrence of\n    // `needle` in `self`, or the first byte after `self` if not found.\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\n        uint ptr = selfptr;\n        uint idx;\n\n        if (needlelen <= selflen) {\n            if (needlelen <= 32) {\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\n\n                bytes32 needledata;\n                assembly { needledata := and(mload(needleptr), mask) }\n\n                uint end = selfptr + selflen - needlelen;\n                bytes32 ptrdata;\n                assembly { ptrdata := and(mload(ptr), mask) }\n\n                while (ptrdata != needledata) {\n                    if (ptr >= end)\n                        return selfptr + selflen;\n                    ptr++;\n                    assembly { ptrdata := and(mload(ptr), mask) }\n                }\n                return ptr;\n            } else {\n                // For long needles, use hashing\n                bytes32 hash;\n                assembly { hash := keccak256(needleptr, needlelen) }\n\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\n                    bytes32 testHash;\n                    assembly { testHash := keccak256(ptr, needlelen) }\n                    if (hash == testHash)\n                        return ptr;\n                    ptr += 1;\n                }\n            }\n        }\n        return selfptr + selflen;\n    }\n\n    // Returns the memory address of the first byte after the last occurrence of\n    // `needle` in `self`, or the address of `self` if not found.\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\n        uint ptr;\n\n        if (needlelen <= selflen) {\n            if (needlelen <= 32) {\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\n\n                bytes32 needledata;\n                assembly { needledata := and(mload(needleptr), mask) }\n\n                ptr = selfptr + selflen - needlelen;\n                bytes32 ptrdata;\n                assembly { ptrdata := and(mload(ptr), mask) }\n\n                while (ptrdata != needledata) {\n                    if (ptr <= selfptr)\n                        return selfptr;\n                    ptr--;\n                    assembly { ptrdata := and(mload(ptr), mask) }\n                }\n                return ptr + needlelen;\n            } else {\n                // For long needles, use hashing\n                bytes32 hash;\n                assembly { hash := keccak256(needleptr, needlelen) }\n                ptr = selfptr + (selflen - needlelen);\n                while (ptr >= selfptr) {\n                    bytes32 testHash;\n                    assembly { testHash := keccak256(ptr, needlelen) }\n                    if (hash == testHash)\n                        return ptr + needlelen;\n                    ptr -= 1;\n                }\n            }\n        }\n        return selfptr;\n    }\n\n    /*\n     * @dev Modifies `self` to contain everything from the first occurrence of\n     *      `needle` to the end of the slice. `self` is set to the empty slice\n     *      if `needle` is not found.\n     * @param self The slice to search and modify.\n     * @param needle The text to search for.\n     * @return `self`.\n     */\n    function find(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\n        self._len -= ptr - self._ptr;\n        self._ptr = ptr;\n        return self;\n    }\n\n    /*\n     * @dev Modifies `self` to contain the part of the string from the start of\n     *      `self` to the end of the first occurrence of `needle`. If `needle`\n     *      is not found, `self` is set to the empty slice.\n     * @param self The slice to search and modify.\n     * @param needle The text to search for.\n     * @return `self`.\n     */\n    function rfind(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\n        self._len = ptr - self._ptr;\n        return self;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything after the first\n     *      occurrence of `needle`, and `token` to everything before it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and `token` is set to the entirety of `self`.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @param token An output parameter to which the first token is written.\n     * @return `token`.\n     */\n    function split(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\n        token._ptr = self._ptr;\n        token._len = ptr - self._ptr;\n        if (ptr == self._ptr + self._len) {\n            // Not found\n            self._len = 0;\n        } else {\n            self._len -= token._len + needle._len;\n            self._ptr = ptr + needle._len;\n        }\n        return token;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything after the first\n     *      occurrence of `needle`, and returning everything before it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and the entirety of `self` is returned.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @return The part of `self` up to the first occurrence of `delim`.\n     */\n    function split(slice memory self, slice memory needle) internal pure returns (slice memory token) {\n        split(self, needle, token);\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything before the last\n     *      occurrence of `needle`, and `token` to everything after it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and `token` is set to the entirety of `self`.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @param token An output parameter to which the first token is written.\n     * @return `token`.\n     */\n    function rsplit(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\n        token._ptr = ptr;\n        token._len = self._len - (ptr - self._ptr);\n        if (ptr == self._ptr) {\n            // Not found\n            self._len = 0;\n        } else {\n            self._len -= token._len + needle._len;\n        }\n        return token;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything before the last\n     *      occurrence of `needle`, and returning everything after it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and the entirety of `self` is returned.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @return The part of `self` after the last occurrence of `delim`.\n     */\n    function rsplit(slice memory self, slice memory needle) internal pure returns (slice memory token) {\n        rsplit(self, needle, token);\n    }\n\n    /*\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\n     * @param self The slice to search.\n     * @param needle The text to search for in `self`.\n     * @return The number of occurrences of `needle` found in `self`.\n     */\n    function count(slice memory self, slice memory needle) internal pure returns (uint cnt) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\n        while (ptr <= self._ptr + self._len) {\n            cnt++;\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\n        }\n    }\n\n    /*\n     * @dev Returns True if `self` contains `needle`.\n     * @param self The slice to search.\n     * @param needle The text to search for in `self`.\n     * @return True if `needle` is found in `self`, false otherwise.\n     */\n    function contains(slice memory self, slice memory needle) internal pure returns (bool) {\n        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\n    }\n\n    /*\n     * @dev Returns a newly allocated string containing the concatenation of\n     *      `self` and `other`.\n     * @param self The first slice to concatenate.\n     * @param other The second slice to concatenate.\n     * @return The concatenation of the two strings.\n     */\n    function concat(slice memory self, slice memory other) internal pure returns (string memory) {\n        string memory ret = new string(self._len + other._len);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n        memcpy(retptr, self._ptr, self._len);\n        memcpy(retptr + self._len, other._ptr, other._len);\n        return ret;\n    }\n\n    /*\n     * @dev Joins an array of slices, using `self` as a delimiter, returning a\n     *      newly allocated string.\n     * @param self The delimiter to use.\n     * @param parts A list of slices to join.\n     * @return A newly allocated string containing all the slices in `parts`,\n     *         joined with `self`.\n     */\n    function join(slice memory self, slice[] memory parts) internal pure returns (string memory) {\n        if (parts.length == 0)\n            return \"\";\n\n        uint length = self._len * (parts.length - 1);\n        for(uint i = 0; i < parts.length; i++)\n            length += parts[i]._len;\n\n        string memory ret = new string(length);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n\n        for(i = 0; i < parts.length; i++) {\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\n            retptr += parts[i]._len;\n            if (i < parts.length - 1) {\n                memcpy(retptr, self._ptr, self._len);\n                retptr += self._len;\n            }\n        }\n\n        return ret;\n    }\n}\n\n\n/**\n * The MIT License (MIT)\n *\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\n\n/**\n * This method was modified from the GPLv3 solidity code found in this repository\n * https://github.com/vcealicu/melonport-price-feed/blob/master/pricefeed/PriceFeed.sol\n */\n\n/// @title Base64 provides base 64 decoding functionality.\ncontract Base64 {\n    bytes constant BASE64_DECODE_CHAR = hex\"000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e003e003f3435363738393a3b3c3d00000000000000000102030405060708090a0b0c0d0e0f10111213141516171819000000003f001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30313233\";\n\n    /// @return decoded array of bytes.\n    /// @param _encoded base 64 encoded array of bytes.\n    function _base64decode(bytes _encoded) internal pure returns (bytes) {\n        byte v1;\n        byte v2;\n        byte v3;\n        byte v4;\n        uint length = _encoded.length;\n        bytes memory result = new bytes(length);\n        uint index;\n\n        // base64 encoded strings can't be length 0 and they must be divisble by 4\n        require(length > 0  && length % 4 == 0, \"invalid base64 encoding\");\n\n          if (keccak256(abi.encodePacked(_encoded[length - 2])) == keccak256(\"=\")) {\n              length -= 2;\n          } else if (keccak256(abi.encodePacked(_encoded[length - 1])) == keccak256(\"=\")) {\n              length -= 1;\n          }\n          uint count = length >> 2 << 2;\n          for (uint i = 0; i < count;) {\n              v1 = BASE64_DECODE_CHAR[uint(_encoded[i++])];\n              v2 = BASE64_DECODE_CHAR[uint(_encoded[i++])];\n              v3 = BASE64_DECODE_CHAR[uint(_encoded[i++])];\n              v4 = BASE64_DECODE_CHAR[uint(_encoded[i++])];\n\n              result[index++] = (v1 << 2 | v2 >> 4) & 255;\n              result[index++] = (v2 << 4 | v3 >> 2) & 255;\n              result[index++] = (v3 << 6 | v4) & 255;\n          }\n          if (length - count == 2) {\n              v1 = BASE64_DECODE_CHAR[uint(_encoded[i++])];\n              v2 = BASE64_DECODE_CHAR[uint(_encoded[i++])];\n              result[index++] = (v1 << 2 | v2 >> 4) & 255;\n          } else if (length - count == 3) {\n              v1 = BASE64_DECODE_CHAR[uint(_encoded[i++])];\n              v2 = BASE64_DECODE_CHAR[uint(_encoded[i++])];\n              v3 = BASE64_DECODE_CHAR[uint(_encoded[i++])];\n\n              result[index++] = (v1 << 2 | v2 >> 4) & 255;\n              result[index++] = (v2 << 4 | v3 >> 2) & 255;\n          }\n\n        // Set to correct length.\n        assembly {\n            mstore(result, index)\n        }\n\n        return result;\n    }\n}\n\n\n\n/// @title Oracle converts ERC20 token amounts into equivalent ether amounts based on cryptocurrency exchange rates.\ninterface IOracle {\n    function convert(address, uint) external view returns (bool, uint);\n}\n\n\n/// @title Oracle provides asset exchange rates and conversion functionality.\ncontract Oracle is usingOraclize, Base64, Date, JSON, Controllable, ParseIntScientific, IOracle {\n    using strings for *;\n    using SafeMath for uint256;\n\n\n    /*******************/\n    /*     Events     */\n    /*****************/\n\n    event AddedToken(address _sender, address _token, string _symbol, uint _magnitude);\n    event RemovedToken(address _sender, address _token);\n    event UpdatedTokenRate(address _sender, address _token, uint _rate);\n\n    event SetGasPrice(address _sender, uint _gasPrice);\n    event Converted(address _sender, address _token, uint _amount, uint _ether);\n\n    event RequestedUpdate(string _symbol);\n    event FailedUpdateRequest(string _reason);\n\n    event VerifiedProof(bytes _publicKey, string _result);\n\n    event SetCryptoComparePublicKey(address _sender, bytes _publicKey);\n\n    /**********************/\n    /*     Constants     */\n    /********************/\n\n    uint constant private PROOF_LEN = 165;\n    uint constant private ECDSA_SIG_LEN = 65;\n    uint constant private ENCODING_BYTES = 2;\n    uint constant private HEADERS_LEN = PROOF_LEN - 2 * ENCODING_BYTES - ECDSA_SIG_LEN; // 2 bytes encoding headers length + 2 for signature.\n    uint constant private DIGEST_BASE64_LEN = 44; //base64 encoding of the SHA256 hash (32-bytes) of the result: fixed length.\n    uint constant private DIGEST_OFFSET = HEADERS_LEN - DIGEST_BASE64_LEN; // the starting position of the result hash in the headers string.\n\n    uint constant private MAX_BYTE_SIZE = 256; //for calculating length encoding\n\n    struct Token {\n        string symbol;    // Token symbol\n        uint magnitude;   // 10^decimals\n        uint rate;        // Token exchange rate in wei\n        uint lastUpdate;  // Time of the last rate update\n        bool exists;      // Flags if the struct is empty or not\n    }\n\n    mapping(address => Token) public tokens;\n    address[] private _tokenAddresses;\n\n    bytes public APIPublicKey;\n    mapping(bytes32 => address) private _queryToToken;\n\n    /// @dev Construct the oracle with multiple controllers, address resolver and custom gas price.\n    /// @dev _resolver is the oraclize address resolver contract address.\n    /// @param _ens is the address of the ENS.\n    /// @param _controllerName is the ENS name of the Controller.\n    constructor(address _resolver, address _ens, bytes32 _controllerName) Controllable(_ens, _controllerName) public {\n        APIPublicKey = hex\"a0f4f688350018ad1b9785991c0bde5f704b005dc79972b114dbed4a615a983710bfc647ebe5a320daa28771dce6a2d104f5efa2e4a85ba3760b76d46f8571ca\";\n        OAR = OraclizeAddrResolverI(_resolver);\n        oraclize_setCustomGasPrice(10000000000);\n        oraclize_setProof(proofType_Native);\n    }\n\n    /// @dev Updates the Crypto Compare public API key.\n    function updateAPIPublicKey(bytes _publicKey) external onlyController {\n        APIPublicKey = _publicKey;\n        emit SetCryptoComparePublicKey(msg.sender, _publicKey);\n    }\n\n    /// @dev Sets the gas price used by oraclize query.\n    function setCustomGasPrice(uint _gasPrice) external onlyController {\n        oraclize_setCustomGasPrice(_gasPrice);\n        emit SetGasPrice(msg.sender, _gasPrice);\n    }\n\n    /// @dev Convert ERC20 token amount to the corresponding ether amount (used by the wallet contract).\n    /// @param _token ERC20 token contract address.\n    /// @param _amount amount of token in base units.\n    function convert(address _token, uint _amount) external view returns (bool, uint) {\n        // Store the token in memory to save map entry lookup gas.\n        Token storage token = tokens[_token];\n        // If the token exists require that its rate is not zero\n        if (token.exists) {\n            require(token.rate != 0, \"token rate is 0\");\n            // Safely convert the token amount to ether based on the exchange rate.\n            // return the value and a 'true' implying that the token is protected\n            return (true, _amount.mul(token.rate).div(token.magnitude));\n        }\n        // this returns a 'false' to imply that a card is not protected\n        return (false, 0);\n\n    }\n\n    /// @dev Add ERC20 tokens to the list of supported tokens.\n    /// @param _tokens ERC20 token contract addresses.\n    /// @param _symbols ERC20 token names.\n    /// @param _magnitude 10 to the power of number of decimal places used by each ERC20 token.\n    /// @param _updateDate date for the token updates. This will be compared to when oracle updates are received.\n    function addTokens(address[] _tokens, bytes32[] _symbols, uint[] _magnitude, uint _updateDate) external onlyController {\n        // Require that all parameters have the same length.\n        require(_tokens.length == _symbols.length && _tokens.length == _magnitude.length, \"parameter lengths do not match\");\n        // Add each token to the list of supported tokens.\n        for (uint i = 0; i < _tokens.length; i++) {\n            // Require that the token doesn't already exist.\n            address token = _tokens[i];\n            require(!tokens[token].exists, \"token already exists\");\n            // Store the intermediate values.\n            string memory symbol = _symbols[i].toSliceB32().toString();\n            uint magnitude = _magnitude[i];\n            // Add the token to the token list.\n            tokens[token] = Token({\n                symbol : symbol,\n                magnitude : magnitude,\n                rate : 0,\n                exists : true,\n                lastUpdate: _updateDate\n            });\n            // Add the token address to the address list.\n            _tokenAddresses.push(token);\n            // Emit token addition event.\n            emit AddedToken(msg.sender, token, symbol, magnitude);\n        }\n    }\n\n    /// @dev Remove ERC20 tokens from the list of supported tokens.\n    /// @param _tokens ERC20 token contract addresses.\n    function removeTokens(address[] _tokens) external onlyController {\n        // Delete each token object from the list of supported tokens based on the addresses provided.\n        for (uint i = 0; i < _tokens.length; i++) {\n            //token must exist, reverts on duplicates as well\n            require(tokens[_tokens[i]].exists, \"token does not exist\");\n            // Store the token address.\n            address token = _tokens[i];\n            // Delete the token object.\n            delete tokens[token];\n            // Remove the token address from the address list.\n            for (uint j = 0; j < _tokenAddresses.length.sub(1); j++) {\n                if (_tokenAddresses[j] == token) {\n                    _tokenAddresses[j] = _tokenAddresses[_tokenAddresses.length.sub(1)];\n                    break;\n                }\n            }\n            _tokenAddresses.length--;\n            // Emit token removal event.\n            emit RemovedToken(msg.sender, token);\n        }\n    }\n\n    /// @dev Update ERC20 token exchange rate manually.\n    /// @param _token ERC20 token contract address.\n    /// @param _rate ERC20 token exchange rate in wei.\n    /// @param _updateDate date for the token updates. This will be compared to when oracle updates are received.\n    function updateTokenRate(address _token, uint _rate, uint _updateDate) external onlyController {\n        // Require that the token exists.\n        require(tokens[_token].exists, \"token does not exist\");\n        // Update the token's rate.\n        tokens[_token].rate = _rate;\n        // Update the token's last update timestamp.\n        tokens[_token].lastUpdate = _updateDate;\n        // Emit the rate update event.\n        emit UpdatedTokenRate(msg.sender, _token, _rate);\n    }\n\n    /// @dev Update ERC20 token exchange rates for all supported tokens.\n    //// @param _gasLimit the gas limit is passed, this is used for the Oraclize callback\n    function updateTokenRates(uint _gasLimit) external payable onlyController {\n        _updateTokenRates(_gasLimit);\n    }\n\n    //// @dev Withdraw ether from the smart contract to the specified account.\n    function withdraw(address _to, uint _amount) external onlyController {\n        _to.transfer(_amount);\n    }\n\n    //// @dev Handle Oraclize query callback and verifiy the provided origin proof.\n    //// @param _queryID Oraclize query ID.\n    //// @param _result query result in JSON format.\n    //// @param _proof origin proof from crypto compare.\n    // solium-disable-next-line mixedcase\n    function __callback(bytes32 _queryID, string _result, bytes _proof) public {\n        // Require that the caller is the Oraclize contract.\n        require(msg.sender == oraclize_cbAddress(), \"sender is not oraclize\");\n        // Use the query ID to find the matching token address.\n        address _token = _queryToToken[_queryID];\n        require(_token != address(0), \"queryID matches to address 0\");\n        // Get the corresponding token object.\n        Token storage token = tokens[_token];\n\n        bool valid;\n        uint timestamp;\n        (valid, timestamp) = _verifyProof(_result, _proof, APIPublicKey, token.lastUpdate);\n\n        // Require that the proof is valid.\n        if (valid) {\n            // Parse the JSON result to get the rate in wei.\n            token.rate = _parseIntScientificWei(parseRate(_result));\n            // Set the update time of the token rate.\n            token.lastUpdate = timestamp;\n            // Remove query from the list.\n            delete _queryToToken[_queryID];\n            // Emit the rate update event.\n            emit UpdatedTokenRate(msg.sender, _token, token.rate);\n        }\n    }\n\n    /// @dev Re-usable helper function that performs the Oraclize Query.\n    //// @param _gasLimit the gas limit is passed, this is used for the Oraclize callback\n    function _updateTokenRates(uint _gasLimit) private {\n        // Check if there are any existing tokens.\n        if (_tokenAddresses.length == 0) {\n            // Emit a query failure event.\n            emit FailedUpdateRequest(\"no tokens\");\n        // Check if the contract has enough Ether to pay for the query.\n        } else if (oraclize_getPrice(\"URL\") * _tokenAddresses.length > address(this).balance) {\n            // Emit a query failure event.\n            emit FailedUpdateRequest(\"insufficient balance\");\n        } else {\n            // Set up the cryptocompare API query strings.\n            strings.slice memory apiPrefix = \"https://min-api.cryptocompare.com/data/price?fsym=\".toSlice();\n            strings.slice memory apiSuffix = \"&tsyms=ETH&sign=true\".toSlice();\n\n            // Create a new oraclize query for each supported token.\n            for (uint i = 0; i < _tokenAddresses.length; i++) {\n                // Store the token symbol used in the query.\n                strings.slice memory symbol = tokens[_tokenAddresses[i]].symbol.toSlice();\n                // Create a new oraclize query from the component strings.\n                bytes32 queryID = oraclize_query(\"URL\", apiPrefix.concat(symbol).toSlice().concat(apiSuffix), _gasLimit);\n                // Store the query ID together with the associated token address.\n                _queryToToken[queryID] = _tokenAddresses[i];\n                // Emit the query success event.\n                emit RequestedUpdate(symbol.toString());\n            }\n        }\n    }\n\n    /// @dev Verify the origin proof returned by the cryptocompare API.\n    /// @param _result query result in JSON format.\n    /// @param _proof origin proof from cryptocompare.\n    /// @param _publicKey cryptocompare public key.\n    /// @param _lastUpdate timestamp of the last time the requested token was updated.\n    function _verifyProof(string _result, bytes _proof, bytes _publicKey, uint _lastUpdate) private returns (bool, uint) {\n\n        //expecting fixed length proofs\n        if (_proof.length != PROOF_LEN)\n          revert(\"invalid proof length\");\n\n        //proof should be 65 bytes long: R (32 bytes) + S (32 bytes) + v (1 byte)\n        if (uint(_proof[1]) != ECDSA_SIG_LEN)\n          revert(\"invalid signature length\");\n\n        bytes memory signature = new bytes(ECDSA_SIG_LEN);\n\n        signature = copyBytes(_proof, 2, ECDSA_SIG_LEN, signature, 0);\n\n        // Extract the headers, big endian encoding of headers length\n        if (uint(_proof[ENCODING_BYTES + ECDSA_SIG_LEN]) * MAX_BYTE_SIZE + uint(_proof[ENCODING_BYTES + ECDSA_SIG_LEN + 1]) != HEADERS_LEN)\n          revert(\"invalid headers length\");\n\n        bytes memory headers = new bytes(HEADERS_LEN);\n        headers = copyBytes(_proof, 2*ENCODING_BYTES + ECDSA_SIG_LEN, HEADERS_LEN, headers, 0);\n\n        // Check if the signature is valid and if the signer address is matching.\n        if (!_verifySignature(headers, signature, _publicKey)) {\n            revert(\"invalid signature\");\n        }\n\n        // Check if the date is valid.\n        bytes memory dateHeader = new bytes(20);\n        //keep only the relevant string(e.g. \"16 Nov 2018 16:22:18\")\n        dateHeader = copyBytes(headers, 11, 20, dateHeader, 0);\n\n        bool dateValid;\n        uint timestamp;\n        (dateValid, timestamp) = _verifyDate(string(dateHeader), _lastUpdate);\n\n        // Check whether the date returned is valid or not\n        if (!dateValid)\n            revert(\"invalid date\");\n\n        // Check if the signed digest hash matches the result hash.\n        bytes memory digest = new bytes(DIGEST_BASE64_LEN);\n        digest = copyBytes(headers, DIGEST_OFFSET, DIGEST_BASE64_LEN, digest, 0);\n\n        if (keccak256(abi.encodePacked(sha256(abi.encodePacked(_result)))) != keccak256(_base64decode(digest)))\n          revert(\"result hash not matching\");\n\n        emit VerifiedProof(_publicKey, _result);\n        return (true, timestamp);\n    }\n\n    /// @dev Verify the HTTP headers and the signature\n    /// @param _headers HTTP headers provided by the cryptocompare api\n    /// @param _signature signature provided by the cryptocompare api\n    /// @param _publicKey cryptocompare public key.\n    function _verifySignature(bytes _headers, bytes _signature, bytes _publicKey) private returns (bool) {\n        address signer;\n        bool signatureOK;\n\n        // Checks if the signature is valid by hashing the headers\n        (signatureOK, signer) = ecrecovery(sha256(_headers), _signature);\n        return signatureOK && signer == address(keccak256(_publicKey));\n    }\n\n    /// @dev Verify the signed HTTP date header.\n    /// @param _dateHeader extracted date string e.g. Wed, 12 Sep 2018 15:18:14 GMT.\n    /// @param _lastUpdate timestamp of the last time the requested token was updated.\n    function _verifyDate(string _dateHeader, uint _lastUpdate) private pure returns (bool, uint) {\n\n        //called by verifyProof(), _dateHeader is always a string of length = 20\n        assert(abi.encodePacked(_dateHeader).length == 20);\n\n        //Split the date string and get individual date components.\n        strings.slice memory date = _dateHeader.toSlice();\n        strings.slice memory timeDelimiter = \":\".toSlice();\n        strings.slice memory dateDelimiter = \" \".toSlice();\n\n        uint day = _parseIntScientific(date.split(dateDelimiter).toString());\n        require(day > 0 && day < 32, \"day error\");\n\n        uint month = _monthToNumber(date.split(dateDelimiter).toString());\n        require(month > 0 && month < 13, \"month error\");\n\n        uint year = _parseIntScientific(date.split(dateDelimiter).toString());\n        require(year > 2017 && year < 3000, \"year error\");\n\n        uint hour = _parseIntScientific(date.split(timeDelimiter).toString());\n        require(hour < 25, \"hour error\");\n\n        uint minute = _parseIntScientific(date.split(timeDelimiter).toString());\n        require(minute < 60, \"minute error\");\n\n        uint second = _parseIntScientific(date.split(timeDelimiter).toString());\n        require(second < 60, \"second error\");\n\n        uint timestamp = year * (10 ** 10) + month * (10 ** 8) + day * (10 ** 6) + hour * (10 ** 4) + minute * (10 ** 2) + second;\n\n        return (timestamp > _lastUpdate, timestamp);\n    }\n}\n\n\n/**\n *  Ownable\n *  Copyright (C) 2018 The Contract Wallet Company Limited\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n\n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n\n/// @title Ownable has an owner address and provides basic authorization control functions.\n/// This contract is modified version of the MIT OpenZepplin Ownable contract\n/// This contract doesn't allow for multiple changeOwner operations\n/// https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\ncontract Ownable {\n    event TransferredOwnership(address _from, address _to);\n\n    address private _owner;\n    bool private _isTransferable;\n\n    /// @dev Constructor sets the original owner of the contract and whether or not it is one time transferable.\n    constructor(address _account, bool _transferable) internal {\n        _owner = _account;\n        _isTransferable = _transferable;\n        emit TransferredOwnership(address(0), _account);\n    }\n\n    /// @dev Reverts if called by any account other than the owner.\n    modifier onlyOwner() {\n        require(_isOwner(), \"sender is not an owner\");\n        _;\n    }\n\n    /// @dev Allows the current owner to transfer control of the contract to a new address.\n    /// @param _account address to transfer ownership to.\n    function transferOwnership(address _account) external onlyOwner {\n        // Require that the ownership is transferable.\n        require(_isTransferable, \"ownership is not transferable\");\n        // Require that the new owner is not the zero address.\n        require(_account != address(0), \"owner cannot be set to zero address\");\n        // Set the transferable flag to false.\n        _isTransferable = false;\n        // Emit the ownership transfer event.\n        emit TransferredOwnership(_owner, _account);\n        // Set the owner to the provided address.\n        _owner = _account;\n    }\n\n    /// @dev Allows the current owner to relinquish control of the contract.\n    /// @notice Renouncing to ownership will leave the contract without an owner and unusable.\n    /// It will not be possible to call the functions with the `onlyOwner` modifier anymore.\n    function renounceOwnership() public onlyOwner {\n        // Require that the ownership is transferable.\n        require(_isTransferable, \"ownership is not transferable\");\n        emit TransferredOwnership(_owner, address(0));\n        // note that this could be terminal\n        _owner = address(0);\n    }\n\n    /// @return the address of the owner.\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /// @return true if the ownership is transferable.\n    function isTransferable() public view returns (bool) {\n        return _isTransferable;\n    }\n\n    /// @return true if sender is the owner of the contract.\n    function _isOwner() internal view returns (bool) {\n        return msg.sender == _owner;\n    }\n}\n\n\n\n/**\n * BSD 2-Clause License\n *\n * Copyright (c) 2018, True Names Limited\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice, this\n *   list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\ninterface ENS {\n\n    // Logged when the owner of a node assigns a new owner to a subnode.\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n\n    // Logged when the owner of a node transfers ownership to a new account.\n    event Transfer(bytes32 indexed node, address owner);\n\n    // Logged when the resolver for a node changes.\n    event NewResolver(bytes32 indexed node, address resolver);\n\n    // Logged when the TTL of a node changes\n    event NewTTL(bytes32 indexed node, uint64 ttl);\n\n\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) public;\n    function setResolver(bytes32 node, address resolver) public;\n    function setOwner(bytes32 node, address owner) public;\n    function setTTL(bytes32 node, uint64 ttl) public;\n    function owner(bytes32 node) public view returns (address);\n    function resolver(bytes32 node) public view returns (address);\n    function ttl(bytes32 node) public view returns (uint64);\n\n}\n\n\n/**\n * BSD 2-Clause License\n *\n * Copyright (c) 2018, True Names Limited\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice, this\n *   list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\n/**\n * A simple resolver anyone can use; only allows the owner of a node to set its\n * address.\n */\ncontract PublicResolver {\n\n    bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;\n    bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de;\n    bytes4 constant CONTENT_INTERFACE_ID = 0xd8389dc5;\n    bytes4 constant NAME_INTERFACE_ID = 0x691f3431;\n    bytes4 constant ABI_INTERFACE_ID = 0x2203ab56;\n    bytes4 constant PUBKEY_INTERFACE_ID = 0xc8690233;\n    bytes4 constant TEXT_INTERFACE_ID = 0x59d1d43c;\n    bytes4 constant MULTIHASH_INTERFACE_ID = 0xe89401a1;\n\n    event AddrChanged(bytes32 indexed node, address a);\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\n    event NameChanged(bytes32 indexed node, string name);\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\n    event TextChanged(bytes32 indexed node, string indexedKey, string key);\n    event MultihashChanged(bytes32 indexed node, bytes hash);\n\n    struct PublicKey {\n        bytes32 x;\n        bytes32 y;\n    }\n\n    struct Record {\n        address addr;\n        bytes32 content;\n        string name;\n        PublicKey pubkey;\n        mapping(string=>string) text;\n        mapping(uint256=>bytes) abis;\n        bytes multihash;\n    }\n\n    ENS ens;\n\n    mapping (bytes32 => Record) records;\n\n    modifier only_owner(bytes32 node) {\n        require(ens.owner(node) == msg.sender);\n        _;\n    }\n\n    /**\n     * Constructor.\n     * @param ensAddr The ENS registrar contract.\n     */\n    constructor(ENS ensAddr) public {\n        ens = ensAddr;\n    }\n\n    /**\n     * Sets the address associated with an ENS node.\n     * May only be called by the owner of that node in the ENS registry.\n     * @param node The node to update.\n     * @param addr The address to set.\n     */\n    function setAddr(bytes32 node, address addr) public only_owner(node) {\n        records[node].addr = addr;\n        emit AddrChanged(node, addr);\n    }\n\n    /**\n     * Sets the content hash associated with an ENS node.\n     * May only be called by the owner of that node in the ENS registry.\n     * Note that this resource type is not standardized, and will likely change\n     * in future to a resource type based on multihash.\n     * @param node The node to update.\n     * @param hash The content hash to set\n     */\n    function setContent(bytes32 node, bytes32 hash) public only_owner(node) {\n        records[node].content = hash;\n        emit ContentChanged(node, hash);\n    }\n\n    /**\n     * Sets the multihash associated with an ENS node.\n     * May only be called by the owner of that node in the ENS registry.\n     * @param node The node to update.\n     * @param hash The multihash to set\n     */\n    function setMultihash(bytes32 node, bytes hash) public only_owner(node) {\n        records[node].multihash = hash;\n        emit MultihashChanged(node, hash);\n    }\n\n    /**\n     * Sets the name associated with an ENS node, for reverse records.\n     * May only be called by the owner of that node in the ENS registry.\n     * @param node The node to update.\n     * @param name The name to set.\n     */\n    function setName(bytes32 node, string name) public only_owner(node) {\n        records[node].name = name;\n        emit NameChanged(node, name);\n    }\n\n    /**\n     * Sets the ABI associated with an ENS node.\n     * Nodes may have one ABI of each content type. To remove an ABI, set it to\n     * the empty string.\n     * @param node The node to update.\n     * @param contentType The content type of the ABI\n     * @param data The ABI data.\n     */\n    function setABI(bytes32 node, uint256 contentType, bytes data) public only_owner(node) {\n        // Content types must be powers of 2\n        require(((contentType - 1) & contentType) == 0);\n\n        records[node].abis[contentType] = data;\n        emit ABIChanged(node, contentType);\n    }\n\n    /**\n     * Sets the SECP256k1 public key associated with an ENS node.\n     * @param node The ENS node to query\n     * @param x the X coordinate of the curve point for the public key.\n     * @param y the Y coordinate of the curve point for the public key.\n     */\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) public only_owner(node) {\n        records[node].pubkey = PublicKey(x, y);\n        emit PubkeyChanged(node, x, y);\n    }\n\n    /**\n     * Sets the text data associated with an ENS node and key.\n     * May only be called by the owner of that node in the ENS registry.\n     * @param node The node to update.\n     * @param key The key to set.\n     * @param value The text data value to set.\n     */\n    function setText(bytes32 node, string key, string value) public only_owner(node) {\n        records[node].text[key] = value;\n        emit TextChanged(node, key, key);\n    }\n\n    /**\n     * Returns the text data associated with an ENS node and key.\n     * @param node The ENS node to query.\n     * @param key The text data key to query.\n     * @return The associated text data.\n     */\n    function text(bytes32 node, string key) public view returns (string) {\n        return records[node].text[key];\n    }\n\n    /**\n     * Returns the SECP256k1 public key associated with an ENS node.\n     * Defined in EIP 619.\n     * @param node The ENS node to query\n     * @return x, y the X and Y coordinates of the curve point for the public key.\n     */\n    function pubkey(bytes32 node) public view returns (bytes32 x, bytes32 y) {\n        return (records[node].pubkey.x, records[node].pubkey.y);\n    }\n\n    /**\n     * Returns the ABI associated with an ENS node.\n     * Defined in EIP205.\n     * @param node The ENS node to query\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\n     * @return contentType The content type of the return value\n     * @return data The ABI data\n     */\n    function ABI(bytes32 node, uint256 contentTypes) public view returns (uint256 contentType, bytes data) {\n        Record storage record = records[node];\n        for (contentType = 1; contentType <= contentTypes; contentType <<= 1) {\n            if ((contentType & contentTypes) != 0 && record.abis[contentType].length > 0) {\n                data = record.abis[contentType];\n                return;\n            }\n        }\n        contentType = 0;\n    }\n\n    /**\n     * Returns the name associated with an ENS node, for reverse records.\n     * Defined in EIP181.\n     * @param node The ENS node to query.\n     * @return The associated name.\n     */\n    function name(bytes32 node) public view returns (string) {\n        return records[node].name;\n    }\n\n    /**\n     * Returns the content hash associated with an ENS node.\n     * Note that this resource type is not standardized, and will likely change\n     * in future to a resource type based on multihash.\n     * @param node The ENS node to query.\n     * @return The associated content hash.\n     */\n    function content(bytes32 node) public view returns (bytes32) {\n        return records[node].content;\n    }\n\n    /**\n     * Returns the multihash associated with an ENS node.\n     * @param node The ENS node to query.\n     * @return The associated multihash.\n     */\n    function multihash(bytes32 node) public view returns (bytes) {\n        return records[node].multihash;\n    }\n\n    /**\n     * Returns the address associated with an ENS node.\n     * @param node The ENS node to query.\n     * @return The associated address.\n     */\n    function addr(bytes32 node) public view returns (address) {\n        return records[node].addr;\n    }\n\n    /**\n     * Returns true if the resolver implements the interface specified by the provided hash.\n     * @param interfaceID The ID of the interface to check for.\n     * @return True if the contract implements the requested interface.\n     */\n    function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\n        return interfaceID == ADDR_INTERFACE_ID ||\n        interfaceID == CONTENT_INTERFACE_ID ||\n        interfaceID == NAME_INTERFACE_ID ||\n        interfaceID == ABI_INTERFACE_ID ||\n        interfaceID == PUBKEY_INTERFACE_ID ||\n        interfaceID == TEXT_INTERFACE_ID ||\n        interfaceID == MULTIHASH_INTERFACE_ID ||\n        interfaceID == INTERFACE_META_ID;\n    }\n}\n\n\n/**\n * The MIT License (MIT)\n *\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n\n/// @title ERC20 interface is a subset of the ERC20 specification.\ninterface ERC20 {\n    function transfer(address, uint) external returns (bool);\n    function balanceOf(address) external view returns (uint);\n}\n\n\n/// @title ERC165 interface specifies a standard way of querying if a contract implements an interface.\ninterface ERC165 {\n    function supportsInterface(bytes4) external view returns (bool);\n}\n\n\n/// @title Whitelist provides payee-whitelist functionality.\ncontract Whitelist is Controllable, Ownable {\n    event AddedToWhitelist(address _sender, address[] _addresses);\n    event SubmittedWhitelistAddition(address[] _addresses, bytes32 _hash);\n    event CancelledWhitelistAddition(address _sender, bytes32 _hash);\n\n    event RemovedFromWhitelist(address _sender, address[] _addresses);\n    event SubmittedWhitelistRemoval(address[] _addresses, bytes32 _hash);\n    event CancelledWhitelistRemoval(address _sender, bytes32 _hash);\n\n    mapping(address => bool) public isWhitelisted;\n    address[] private _pendingWhitelistAddition;\n    address[] private _pendingWhitelistRemoval;\n    bool public submittedWhitelistAddition;\n    bool public submittedWhitelistRemoval;\n    bool public initializedWhitelist;\n\n    /// @dev Check if the provided addresses contain the owner or the zero-address address.\n    modifier hasNoOwnerOrZeroAddress(address[] _addresses) {\n        for (uint i = 0; i < _addresses.length; i++) {\n            require(_addresses[i] != owner(), \"provided whitelist contains the owner address\");\n            require(_addresses[i] != address(0), \"provided whitelist contains the zero address\");\n        }\n        _;\n    }\n\n    /// @dev Check that neither addition nor removal operations have already been submitted.\n    modifier noActiveSubmission() {\n        require(!submittedWhitelistAddition && !submittedWhitelistRemoval, \"whitelist operation has already been submitted\");\n        _;\n    }\n\n    /// @dev Getter for pending addition array.\n    function pendingWhitelistAddition() external view returns(address[]) {\n        return _pendingWhitelistAddition;\n    }\n\n    /// @dev Getter for pending removal array.\n    function pendingWhitelistRemoval() external view returns(address[]) {\n        return _pendingWhitelistRemoval;\n    }\n\n    /// @dev Getter for pending addition/removal array hash.\n    function pendingWhitelistHash(address[] _pendingWhitelist) public pure returns(bytes32) {\n        return keccak256(abi.encodePacked(_pendingWhitelist));\n    }\n\n    /// @dev Add initial addresses to the whitelist.\n    /// @param _addresses are the Ethereum addresses to be whitelisted.\n    function initializeWhitelist(address[] _addresses) external onlyOwner hasNoOwnerOrZeroAddress(_addresses) {\n        // Require that the whitelist has not been initialized.\n        require(!initializedWhitelist, \"whitelist has already been initialized\");\n        // Add each of the provided addresses to the whitelist.\n        for (uint i = 0; i < _addresses.length; i++) {\n            isWhitelisted[_addresses[i]] = true;\n        }\n        initializedWhitelist = true;\n        // Emit the addition event.\n        emit AddedToWhitelist(msg.sender, _addresses);\n    }\n\n    /// @dev Add addresses to the whitelist.\n    /// @param _addresses are the Ethereum addresses to be whitelisted.\n    function submitWhitelistAddition(address[] _addresses) external onlyOwner noActiveSubmission hasNoOwnerOrZeroAddress(_addresses)  {\n        // Require that the whitelist has been initialized.\n        require(initializedWhitelist, \"whitelist has not been initialized\");\n        // Require this array of addresses not empty\n        require(_addresses.length > 0, \"pending whitelist addition is empty\");\n        // Set the provided addresses to the pending addition addresses.\n        _pendingWhitelistAddition = _addresses;\n        // Flag the operation as submitted.\n        submittedWhitelistAddition = true;\n        // Emit the submission event.\n        emit SubmittedWhitelistAddition(_addresses, pendingWhitelistHash(_pendingWhitelistAddition));\n    }\n\n    /// @dev Confirm pending whitelist addition.\n    function confirmWhitelistAddition(bytes32 _hash) external onlyController {\n        // Require that the whitelist addition has been submitted.\n        require(submittedWhitelistAddition, \"whitelist addition has not been submitted\");\n\n        // Require that confirmation hash and the hash of the pending whitelist addition match\n        require(_hash == pendingWhitelistHash(_pendingWhitelistAddition), \"hash of the pending whitelist addition do not match\");\n\n        // Whitelist pending addresses.\n        for (uint i = 0; i < _pendingWhitelistAddition.length; i++) {\n            isWhitelisted[_pendingWhitelistAddition[i]] = true;\n        }\n        // Emit the addition event.\n        emit AddedToWhitelist(msg.sender, _pendingWhitelistAddition);\n        // Reset pending addresses.\n        delete _pendingWhitelistAddition;\n        // Reset the submission flag.\n        submittedWhitelistAddition = false;\n    }\n\n    /// @dev Cancel pending whitelist addition.\n    function cancelWhitelistAddition(bytes32 _hash) external onlyController {\n        // Check if operation has been submitted.\n        require(submittedWhitelistAddition, \"whitelist addition has not been submitted\");\n        // Require that confirmation hash and the hash of the pending whitelist addition match\n        require(_hash == pendingWhitelistHash(_pendingWhitelistAddition), \"hash of the pending whitelist addition does not match\");\n        // Reset pending addresses.\n        delete _pendingWhitelistAddition;\n        // Reset the submitted operation flag.\n        submittedWhitelistAddition = false;\n        // Emit the cancellation event.\n        emit CancelledWhitelistAddition(msg.sender, _hash);\n    }\n\n    /// @dev Remove addresses from the whitelist.\n    /// @param _addresses are the Ethereum addresses to be removed.\n    function submitWhitelistRemoval(address[] _addresses) external onlyOwner noActiveSubmission {\n        // Require that the whitelist has been initialized.\n        require(initializedWhitelist, \"whitelist has not been initialized\");\n        // Require that the array of addresses is not empty\n        require(_addresses.length > 0, \"submitted whitelist removal is empty\");\n        // Add the provided addresses to the pending addition list.\n        _pendingWhitelistRemoval = _addresses;\n        // Flag the operation as submitted.\n        submittedWhitelistRemoval = true;\n        // Emit the submission event.\n        emit SubmittedWhitelistRemoval(_addresses, pendingWhitelistHash(_pendingWhitelistRemoval));\n    }\n\n    /// @dev Confirm pending removal of whitelisted addresses.\n    function confirmWhitelistRemoval(bytes32 _hash) external onlyController {\n        // Require that the pending whitelist is not empty and the operation has been submitted.\n        require(submittedWhitelistRemoval, \"whitelist removal has not been submitted\");\n        // Require that confirmation hash and the hash of the pending whitelist removal match\n        require(_hash == pendingWhitelistHash(_pendingWhitelistRemoval), \"hash of the pending whitelist removal does not match the confirmed hash\");\n        // Remove pending addresses.\n        for (uint i = 0; i < _pendingWhitelistRemoval.length; i++) {\n            isWhitelisted[_pendingWhitelistRemoval[i]] = false;\n        }\n        // Emit the removal event.\n        emit RemovedFromWhitelist(msg.sender, _pendingWhitelistRemoval);\n        // Reset pending addresses.\n        delete _pendingWhitelistRemoval;\n        // Reset the submission flag.\n        submittedWhitelistRemoval = false;\n    }\n\n    /// @dev Cancel pending removal of whitelisted addresses.\n    function cancelWhitelistRemoval(bytes32 _hash) external onlyController {\n        // Check if operation has been submitted.\n        require(submittedWhitelistRemoval, \"whitelist removal has not been submitted\");\n        // Require that confirmation hash and the hash of the pending whitelist removal match\n        require(_hash == pendingWhitelistHash(_pendingWhitelistRemoval), \"hash of the pending whitelist removal does not match\");\n        // Reset pending addresses.\n        delete _pendingWhitelistRemoval;\n        // Reset the submitted operation flag.\n        submittedWhitelistRemoval = false;\n        // Emit the cancellation event.\n        emit CancelledWhitelistRemoval(msg.sender, _hash);\n    }\n}\n\n\n//// @title SpendLimit provides daily spend limit functionality.\ncontract SpendLimit is Controllable, Ownable {\n    event SetSpendLimit(address _sender, uint _amount);\n    event SubmittedSpendLimitChange(uint _amount);\n    event CancelledSpendLimitChange(address _sender, uint _amount);\n\n    using SafeMath for uint256;\n\n    uint public spendLimit;\n    uint private _spendLimitDay;\n    uint private _spendAvailable;\n\n    uint public pendingSpendLimit;\n    bool public submittedSpendLimit;\n    bool public initializedSpendLimit;\n\n    /// @dev Constructor initializes the daily spend limit in wei.\n    constructor(uint _spendLimit) internal {\n        spendLimit = _spendLimit;\n        _spendLimitDay = now;\n        _spendAvailable = spendLimit;\n    }\n\n    /// @dev Returns the available daily balance - accounts for daily limit reset.\n    /// @return amount of ether in wei.\n    function spendAvailable() public view returns (uint) {\n        if (now > _spendLimitDay + 24 hours) {\n            return spendLimit;\n        } else {\n            return _spendAvailable;\n        }\n    }\n\n    /// @dev Initialize a daily spend (aka transfer) limit for non-whitelisted addresses.\n    /// @param _amount is the daily limit amount in wei.\n    function initializeSpendLimit(uint _amount) external onlyOwner {\n        // Require that the spend limit has not been initialized.\n        require(!initializedSpendLimit, \"spend limit has already been initialized\");\n        // Modify spend limit based on the provided value.\n        _modifySpendLimit(_amount);\n        // Flag the operation as initialized.\n        initializedSpendLimit = true;\n        // Emit the set limit event.\n        emit SetSpendLimit(msg.sender, _amount);\n    }\n\n    /// @dev Set a daily transfer limit for non-whitelisted addresses.\n    /// @param _amount is the daily limit amount in wei.\n    function submitSpendLimit(uint _amount) external onlyOwner {\n        // Require that the spend limit has been initialized.\n        require(initializedSpendLimit, \"spend limit has not been initialized\");\n        // Assign the provided amount to pending daily limit change.\n        pendingSpendLimit = _amount;\n        // Flag the operation as submitted.\n        submittedSpendLimit = true;\n        // Emit the submission event.\n        emit SubmittedSpendLimitChange(_amount);\n    }\n\n    /// @dev Confirm pending set daily limit operation.\n    function confirmSpendLimit(uint _amount) external onlyController {\n        // Require that the operation has been submitted.\n        require(submittedSpendLimit, \"spend limit has not been submitted\");\n        // Require that pending and confirmed spend limit are the same\n        require(pendingSpendLimit == _amount, \"confirmed and submitted spend limits dont match\");\n        // Modify spend limit based on the pending value.\n        _modifySpendLimit(pendingSpendLimit);\n        // Emit the set limit event.\n        emit SetSpendLimit(msg.sender, pendingSpendLimit);\n        // Reset the submission flag.\n        submittedSpendLimit = false;\n        // Reset pending daily limit.\n        pendingSpendLimit = 0;\n    }\n\n    /// @dev Cancel pending set daily limit operation.\n    function cancelSpendLimit(uint _amount) external onlyController {\n        // Require a spendlimit has been submitted\n        require(submittedSpendLimit, \"a spendlimit needs to be submitted\");\n        // Require that pending and confirmed spend limit are the same\n        require(pendingSpendLimit == _amount, \"pending and cancelled spend limits dont match\");\n        // Reset pending daily limit.\n        pendingSpendLimit = 0;\n        // Reset the submitted operation flag.\n        submittedSpendLimit = false;\n        // Emit the cancellation event.\n        emit CancelledSpendLimitChange(msg.sender, _amount);\n    }\n\n    // @dev Setter method for the available daily spend limit.\n    function _setSpendAvailable(uint _amount) internal {\n        _spendAvailable = _amount;\n    }\n\n    /// @dev Update available spend limit based on the daily reset.\n    function _updateSpendAvailable() internal {\n        if (now > _spendLimitDay.add(24 hours)) {\n            // Advance the current day by how many days have passed.\n            uint extraDays = now.sub(_spendLimitDay).div(24 hours);\n            _spendLimitDay = _spendLimitDay.add(extraDays.mul(24 hours));\n            // Set the available limit to the current spend limit.\n            _spendAvailable = spendLimit;\n        }\n    }\n\n    /// @dev Modify the spend limit and spend available based on the provided value.\n    /// @dev _amount is the daily limit amount in wei.\n    function _modifySpendLimit(uint _amount) private {\n        // Account for the spend limit daily reset.\n        _updateSpendAvailable();\n        // Set the daily limit to the provided amount.\n        spendLimit = _amount;\n        // Lower the available limit if it's higher than the new daily limit.\n        if (_spendAvailable > spendLimit) {\n            _spendAvailable = spendLimit;\n        }\n    }\n}\n\n\n//// @title Asset store with extra security features.\ncontract Vault is Whitelist, SpendLimit, ERC165 {\n    event Received(address _from, uint _amount);\n    event Transferred(address _to, address _asset, uint _amount);\n    event BulkTransferred(address _to, address[] _assets);\n\n    using SafeMath for uint256;\n\n    /// @dev Supported ERC165 interface ID.\n    bytes4 private constant _ERC165_INTERFACE_ID = 0x01ffc9a7; // solium-disable-line uppercase\n\n    /// @dev ENS points to the ENS registry smart contract.\n    ENS private _ENS;\n    /// @dev Is the registered ENS name of the oracle contract.\n    bytes32 private _node;\n\n    /// @dev Constructor initializes the vault with an owner address and spend limit. It also sets up the oracle and controller contracts.\n    /// @param _owner is the owner account of the wallet contract.\n    /// @param _transferable indicates whether the contract ownership can be transferred.\n    /// @param _ens is the ENS public registry contract address.\n    /// @param _oracleName is the ENS name of the Oracle.\n    /// @param _controllerName is the ENS name of the controller.\n    /// @param _spendLimit is the initial spend limit.\n    constructor(address _owner, bool _transferable, address _ens, bytes32 _oracleName, bytes32 _controllerName, uint _spendLimit) SpendLimit(_spendLimit) Ownable(_owner, _transferable) Controllable(_ens, _controllerName) public {\n        _ENS = ENS(_ens);\n        _node = _oracleName;\n    }\n\n    /// @dev Checks if the value is not zero.\n    modifier isNotZero(uint _value) {\n        require(_value != 0, \"provided value cannot be zero\");\n        _;\n    }\n\n    /// @dev Ether can be deposited from any source, so this contract must be payable by anyone.\n    function() public payable {\n        //TODO question: Why is this check here, is it necessary or are we building into a corner?\n        require(msg.data.length == 0);\n        emit Received(msg.sender, msg.value);\n    }\n\n    /// @dev Returns the amount of an asset owned by the contract.\n    /// @param _asset address of an ERC20 token or 0x0 for ether.\n    /// @return balance associated with the wallet address in wei.\n    function balance(address _asset) external view returns (uint) {\n        if (_asset != address(0)) {\n            return ERC20(_asset).balanceOf(this);\n        } else {\n            return address(this).balance;\n        }\n    }\n\n    /// @dev This is a bulk transfer convenience function, used to migrate contracts.\n    /// If any of the transfers fail, this will revert.\n    /// @param _to is the recipient's address, can't be the zero (0x0) address: transfer() will revert.\n    /// @param _assets is an array of addresses of ERC20 tokens or 0x0 for ether.\n    function bulkTransfer(address _to, address[] _assets) public onlyOwner {\n        // check to make sure that _assets isn't empty\n        require(_assets.length != 0, \"asset array should be non-empty\");\n        // This loops through all of the transfers to be made\n        for (uint i = 0; i < _assets.length; i++) {\n            uint amount;\n            // Get amount based on whether eth or erc20\n            if (_assets[i] == address(0)) {\n                amount = address(this).balance;\n            } else {\n                amount = ERC20(_assets[i]).balanceOf(address(this));\n            }\n            // use our safe, daily limit protected transfer\n            transfer(_to, _assets[i], amount);\n        }\n        emit BulkTransferred(_to, _assets);\n    }\n\n    /// @dev Transfers the specified asset to the recipient's address.\n    /// @param _to is the recipient's address.\n    /// @param _asset is the address of an ERC20 token or 0x0 for ether.\n    /// @param _amount is the amount of tokens to be transferred in base units.\n    function transfer(address _to, address _asset, uint _amount) public onlyOwner isNotZero(_amount) {\n        // Checks if the _to address is not the zero-address\n        require(_to != address(0), \"_to address cannot be set to 0x0\");\n\n        // If address is not whitelisted, take daily limit into account.\n        if (!isWhitelisted[_to]) {\n            // Update the available spend limit.\n            _updateSpendAvailable();\n            // Convert token amount to ether value.\n            uint etherValue;\n            bool tokenExists;\n            if (_asset != address(0)) {\n                (tokenExists, etherValue) = IOracle(PublicResolver(_ENS.resolver(_node)).addr(_node)).convert(_asset, _amount);\n            } else {\n                etherValue = _amount;\n            }\n\n            // If token is supported by our oracle or is ether\n            // Check against the daily spent limit and update accordingly\n            if (tokenExists || _asset == address(0)) {\n                // Require that the value is under remaining limit.\n                require(etherValue <= spendAvailable(), \"transfer amount exceeds available spend limit\");\n                // Update the available limit.\n                _setSpendAvailable(spendAvailable().sub(etherValue));\n            }\n        }\n        // Transfer token or ether based on the provided address.\n        if (_asset != address(0)) {\n            require(ERC20(_asset).transfer(_to, _amount), \"ERC20 token transfer was unsuccessful\");\n        } else {\n            _to.transfer(_amount);\n        }\n        // Emit the transfer event.\n        emit Transferred(_to, _asset, _amount);\n    }\n\n    /// @dev Checks for interface support based on ERC165.\n    function supportsInterface(bytes4 interfaceID) external view returns (bool) {\n        return interfaceID == _ERC165_INTERFACE_ID;\n    }\n}\n\n\n//// @title Asset wallet with extra security features and gas top up management.\ncontract Wallet is Vault {\n    event SetTopUpLimit(address _sender, uint _amount);\n    event SubmittedTopUpLimitChange(uint _amount);\n    event CancelledTopUpLimitChange(address _sender, uint _amount);\n\n    event ToppedUpGas(address _sender, address _owner, uint _amount);\n\n    using SafeMath for uint256;\n\n    uint constant private MINIMUM_TOPUP_LIMIT = 1 finney; // solium-disable-line uppercase\n    uint constant private MAXIMUM_TOPUP_LIMIT = 500 finney; // solium-disable-line uppercase\n\n    uint public topUpLimit;\n    uint private _topUpLimitDay;\n    uint private _topUpAvailable;\n\n    uint public pendingTopUpLimit;\n    bool public submittedTopUpLimit;\n    bool public initializedTopUpLimit;\n\n    /// @dev Constructor initializes the wallet top up limit and the vault contract.\n    /// @param _owner is the owner account of the wallet contract.\n    /// @param _transferable indicates whether the contract ownership can be transferred.\n    /// @param _ens is the address of the ENS.\n    /// @param _oracleName is the ENS name of the Oracle.\n    /// @param _controllerName is the ENS name of the Controller.\n    /// @param _spendLimit is the initial spend limit.\n    constructor(address _owner, bool _transferable, address _ens, bytes32 _oracleName, bytes32 _controllerName, uint _spendLimit) Vault(_owner, _transferable, _ens, _oracleName, _controllerName, _spendLimit) public {\n        _topUpLimitDay = now;\n        topUpLimit = MAXIMUM_TOPUP_LIMIT;\n        _topUpAvailable = topUpLimit;\n    }\n\n    /// @dev Returns the available daily gas top up balance - accounts for daily limit reset.\n    /// @return amount of gas in wei.\n    function topUpAvailable() external view returns (uint) {\n        if (now > _topUpLimitDay + 24 hours) {\n            return topUpLimit;\n        } else {\n            return _topUpAvailable;\n        }\n    }\n\n    /// @dev Initialize a daily gas top up limit.\n    /// @param _amount is the gas top up amount in wei.\n    function initializeTopUpLimit(uint _amount) external onlyOwner {\n        // Require that the top up limit has not been initialized.\n        require(!initializedTopUpLimit, \"top up limit has already been initialized\");\n        // Require that the limit amount is within the acceptable range.\n        require(MINIMUM_TOPUP_LIMIT <= _amount && _amount <= MAXIMUM_TOPUP_LIMIT, \"top up amount is outside of the min/max range\");\n        // Modify spend limit based on the provided value.\n        _modifyTopUpLimit(_amount);\n        // Flag operation as initialized.\n        initializedTopUpLimit = true;\n        // Emit the set limit event.\n        emit SetTopUpLimit(msg.sender, _amount);\n    }\n\n    /// @dev Set a daily top up top up limit.\n    /// @param _amount is the daily top up limit amount in wei.\n    function submitTopUpLimit(uint _amount) external onlyOwner {\n        // Require that the top up limit has been initialized.\n        require(initializedTopUpLimit, \"top up limit has not been initialized\");\n        // Require that the limit amount is within the acceptable range.\n        require(MINIMUM_TOPUP_LIMIT <= _amount && _amount <= MAXIMUM_TOPUP_LIMIT, \"top up amount is outside of the min/max range\");\n        // Assign the provided amount to pending daily limit change.\n        pendingTopUpLimit = _amount;\n        // Flag the operation as submitted.\n        submittedTopUpLimit = true;\n        // Emit the submission event.\n        emit SubmittedTopUpLimitChange(_amount);\n    }\n\n    /// @dev Confirm pending set top up limit operation.\n    function confirmTopUpLimit(uint _amount) external onlyController {\n        // Require that the operation has been submitted.\n        require(submittedTopUpLimit, \"top up limit has not been submitted\");\n        // Assert that the pending top up limit amount is within the acceptable range.\n        require(MINIMUM_TOPUP_LIMIT <= pendingTopUpLimit && pendingTopUpLimit <= MAXIMUM_TOPUP_LIMIT, \"top up amount is outside the min/max range\");\n        // Assert that confirmed and pending topup limit are the same.\n        require(_amount == pendingTopUpLimit, \"confirmed and pending topup limit are not same\");\n        // Modify top up limit based on the pending value.\n        _modifyTopUpLimit(pendingTopUpLimit);\n        // Emit the set limit event.\n        emit SetTopUpLimit(msg.sender, pendingTopUpLimit);\n        // Reset pending daily limit.\n        pendingTopUpLimit = 0;\n        // Reset the submission flag.\n        submittedTopUpLimit = false;\n    }\n\n    /// @dev Cancel pending set top up limit operation.\n    function cancelTopUpLimit(uint _amount) external onlyController {\n        // Make sure a topup limit update has been submitted\n        require(submittedTopUpLimit, \"a topup limit has to be submitted\");\n        // Require that pending and confirmed spend limit are the same\n        require(pendingTopUpLimit == _amount, \"pending and cancelled top up limits dont match\");\n        // Reset pending daily limit.\n        pendingTopUpLimit = 0;\n        // Reset the submitted operation flag.\n        submittedTopUpLimit = false;\n        // Emit the cancellation event.\n        emit CancelledTopUpLimitChange(msg.sender, _amount);\n    }\n\n    /// @dev Refill owner's gas balance.\n    /// @dev Revert if the transaction amount is too large\n    /// @param _amount is the amount of ether to transfer to the owner account in wei.\n    function topUpGas(uint _amount) external isNotZero(_amount) {\n        // Require that the sender is either the owner or a controller.\n        require(_isOwner() || _isController(msg.sender), \"sender is neither an owner nor a controller\");\n        // Account for the top up limit daily reset.\n        _updateTopUpAvailable();\n        // Make sure the available top up amount is not zero.\n        require(_topUpAvailable != 0, \"available top up limit cannot be zero\");\n        // Fail if there isn't enough in the daily top up limit to perform topUp\n        require(_amount <= _topUpAvailable, \"available top up limit less than amount passed in\");\n        // Reduce the top up amount from available balance and transfer corresponding\n        // ether to the owner's account.\n        _topUpAvailable = _topUpAvailable.sub(_amount);\n        owner().transfer(_amount);\n        // Emit the gas top up event.\n        emit ToppedUpGas(tx.origin, owner(), _amount);\n    }\n\n    /// @dev Modify the top up limit and top up available based on the provided value.\n    /// @dev _amount is the daily limit amount in wei.\n    function _modifyTopUpLimit(uint _amount) private {\n        // Account for the top up limit daily reset.\n        _updateTopUpAvailable();\n        // Set the daily limit to the provided amount.\n        topUpLimit = _amount;\n        // Lower the available limit if it's higher than the new daily limit.\n        if (_topUpAvailable > topUpLimit) {\n            _topUpAvailable = topUpLimit;\n        }\n    }\n\n    /// @dev Update available top up limit based on the daily reset.\n    function _updateTopUpAvailable() private {\n        if (now > _topUpLimitDay.add(24 hours)) {\n            // Advance the current day by how many days have passed.\n            uint extraDays = now.sub(_topUpLimitDay).div(24 hours);\n            _topUpLimitDay = _topUpLimitDay.add(extraDays.mul(24 hours));\n            // Set the available limit to the current top up limit.\n            _topUpAvailable = topUpLimit;\n        }\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"cancelWhitelistAddition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"bulkTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTransferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"submittedWhitelistAddition\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"confirmTopUpLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingWhitelistRemoval\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"submitTopUpLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingWhitelistAddition\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initializedSpendLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"initializeSpendLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"confirmWhitelistAddition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"submitWhitelistRemoval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"initializeTopUpLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingTopUpLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"cancelTopUpLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pendingWhitelist\",\"type\":\"address[]\"}],\"name\":\"pendingWhitelistHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"submitWhitelistAddition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"topUpLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"submittedTopUpLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"topUpAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spendLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initializedWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_asset\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingSpendLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"confirmWhitelistRemoval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"cancelWhitelistRemoval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"submittedSpendLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"submitSpendLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spendAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"submittedWhitelistRemoval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"cancelSpendLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"topUpGas\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"confirmSpendLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"initializeWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initializedTopUpLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_transferable\",\"type\":\"bool\"},{\"name\":\"_ens\",\"type\":\"address\"},{\"name\":\"_oracleName\",\"type\":\"bytes32\"},{\"name\":\"_controllerName\",\"type\":\"bytes32\"},{\"name\":\"_spendLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SetTopUpLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SubmittedTopUpLimitChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CancelledTopUpLimitChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ToppedUpGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"BulkTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SetSpendLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SubmittedSpendLimitChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CancelledSpendLimitChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"AddedToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addresses\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"SubmittedWhitelistAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"CancelledWhitelistAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"RemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addresses\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"SubmittedWhitelistRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"CancelledWhitelistRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"TransferredOwnership\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5060405160c080613ec88339810160408181528251602080850151838601516060870151608088015160a09098015160008054600160a060020a0319908116600160a060020a0380871691909117835560018c90556002805490921690891690811760a060020a60ff02191674010000000000000000000000000000000000000000881515021790915590895294880194909452855194979296919590949293928892889288928892889288928392899289927f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea59281900390910190a150506007819055426008819055600991909155600b8054600160a060020a0390961662010000026201000060b060020a0319909616959095179094555050600c55600e5550506706f05b59d3b20000600d819055600f55505050505050613d6f806101596000396000f3006080604052600436106101f85763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461023f578063100f23fd1461028a5780631aa21fba146102a45780632121dc751461030757806326d05ab21461031c578063278ffa1314610331578063294f402514610349578063295b3299146103ae5780633af32abf146103c657806347b55a9d146103e75780635658eff0146103fc57806358453569146104115780635adc02ab146104295780636137d670146104415780636ea6f0c31461046157806370332d8514610479578063715018a6146104a0578063754628d0146104b55780637c955583146104cd5780637fd004fa1461052257806383d028031461054257806385cd9919146105575780638da5cb5b1461056c578063a83214591461059d578063aceaf92d146105b2578063afa0fd9b146105c7578063beabacc8146105dc578063c8ecaddb14610606578063cbd2ac681461061b578063ce0b5bd514610633578063d56665901461064b578063d9ec301814610660578063dae37fac14610678578063de212bf31461068d578063e3d670d7146106a2578063e4682f00146106c3578063e61c51ca146106db578063f2fde38b146106f3578063f349291514610714578063f4199bb81461072c578063f9c470a51461074c575b361561020357600080fd5b6040805133815234602082015281517f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874929181900390910190a1005b34801561024b57600080fd5b506102767bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960043516610761565b604080519115158252519081900360200190f35b34801561029657600080fd5b506102a26004356107a9565b005b3480156102b057600080fd5b506040805160206004602480358281013584810280870186019097528086526102a2968435600160a060020a0316963696604495919490910192918291850190849080828437509497506109ab9650505050505050565b34801561031357600080fd5b50610276610bf9565b34801561032857600080fd5b50610276610c1b565b34801561033d57600080fd5b506102a2600435610c24565b34801561035557600080fd5b5061035e610e6c565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561039a578181015183820152602001610382565b505050509050019250505060405180910390f35b3480156103ba57600080fd5b506102a2600435610ece565b3480156103d257600080fd5b50610276600160a060020a0360043516611084565b3480156103f357600080fd5b5061035e611099565b34801561040857600080fd5b506102766110f9565b34801561041d57600080fd5b506102a2600435611107565b34801561043557600080fd5b506102a260043561122f565b34801561044d57600080fd5b506102a260048035602481019101356114f0565b34801561046d57600080fd5b506102a260043561179c565b34801561048557600080fd5b5061048e61195f565b60408051918252519081900360200190f35b3480156104ac57600080fd5b506102a2611965565b3480156104c157600080fd5b506102a2600435611a8b565b3480156104d957600080fd5b506040805160206004803580820135838102808601850190965280855261048e95369593946024949385019291829185019084908082843750949750611c269650505050505050565b34801561052e57600080fd5b506102a26004803560248101910135611cd3565b34801561054e57600080fd5b5061048e6120ec565b34801561056357600080fd5b506102766120f2565b34801561057857600080fd5b506105816120fb565b60408051600160a060020a039092168252519081900360200190f35b3480156105a957600080fd5b5061048e61210a565b3480156105be57600080fd5b5061048e61212d565b3480156105d357600080fd5b50610276612133565b3480156105e857600080fd5b506102a2600160a060020a0360043581169060243516604435612142565b34801561061257600080fd5b5061048e6126d7565b34801561062757600080fd5b506102a26004356126dd565b34801561063f57600080fd5b506102a26004356129ca565b34801561065757600080fd5b50610276612bd0565b34801561066c57600080fd5b506102a2600435612bd9565b34801561068457600080fd5b5061048e612cf3565b34801561069957600080fd5b50610276612d16565b3480156106ae57600080fd5b5061048e600160a060020a0360043516612d24565b3480156106cf57600080fd5b506102a2600435612dd1565b3480156106e757600080fd5b506102a2600435612f54565b3480156106ff57600080fd5b506102a2600160a060020a03600435166131f6565b34801561072057600080fd5b506102a26004356133d0565b34801561073857600080fd5b506102a26004803560248101910135613561565b34801561075857600080fd5b50610276613873565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167f01ffc9a700000000000000000000000000000000000000000000000000000000145b919050565b6107b233613881565b15156107f6576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020613d04833981519152604482015290519081900360640190fd5b60065460ff161515610878576040805160e560020a62461bcd02815260206004820152602960248201527f77686974656c697374206164646974696f6e20686173206e6f74206265656e2060448201527f7375626d69747465640000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6108db60048054806020026020016040519081016040528092919081815260200182805480156108d157602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116108b3575b5050505050611c26565b8114610957576040805160e560020a62461bcd02815260206004820152603560248201527f68617368206f66207468652070656e64696e672077686974656c69737420616460448201527f646974696f6e20646f6573206e6f74206d617463680000000000000000000000606482015290519081900360840190fd5b61096360046000613c0a565b6006805460ff19169055604080513381526020810183905281517f7794eff834d760583543e6e510e717a5e66d2c064e225f4db448343c3e66afcf929181900390910190a150565b6000806109b6613a41565b15156109fa576040805160e560020a62461bcd0281526020600482015260166024820152600080516020613ce4833981519152604482015290519081900360640190fd5b82511515610a52576040805160e560020a62461bcd02815260206004820152601f60248201527f61737365742061727261792073686f756c64206265206e6f6e2d656d70747900604482015290519081900360640190fd5b600091505b8251821015610b64578251600090849084908110610a7157fe5b90602001906020020151600160a060020a03161415610a9257503031610b37565b8282815181101515610aa057fe5b6020908102909101810151604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216926370a08231926024808401938290030181600087803b158015610b0857600080fd5b505af1158015610b1c573d6000803e3d6000fd5b505050506040513d6020811015610b3257600080fd5b505190505b610b59848484815181101515610b4957fe5b9060200190602002015183612142565b600190910190610a57565b7fd4f62f23021706247dcffea245d104ae7ddaec7f23acf3d11d7136d5de6a69ad84846040518083600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015610bdf578181015183820152602001610bc7565b50505050905001935050505060405180910390a150505050565b60025474010000000000000000000000000000000000000000900460ff165b90565b60065460ff1681565b610c2d33613881565b1515610c71576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020613d04833981519152604482015290519081900360640190fd5b60115460ff161515610cf3576040805160e560020a62461bcd02815260206004820152602360248201527f746f70207570206c696d697420686173206e6f74206265656e207375626d697460448201527f7465640000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60105466038d7ea4c6800011158015610d1657506706f05b59d3b2000060105411155b1515610d92576040805160e560020a62461bcd02815260206004820152602a60248201527f746f7020757020616d6f756e74206973206f75747369646520746865206d696e60448201527f2f6d61782072616e676500000000000000000000000000000000000000000000606482015290519081900360840190fd5b6010548114610e11576040805160e560020a62461bcd02815260206004820152602e60248201527f636f6e6669726d656420616e642070656e64696e6720746f707570206c696d6960448201527f7420617265206e6f742073616d65000000000000000000000000000000000000606482015290519081900360840190fd5b610e1c601054613a52565b60105460408051338152602081019290925280517fb0b775ba506691c666928dfe7120eb5ccedd17f4554dc85ce86eb2b4cc437e369281900390910190a15060006010556011805460ff19169055565b60606005805480602002602001604051908101604052809291908181526020018280548015610ec457602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610ea6575b5050505050905090565b610ed6613a41565b1515610f1a576040805160e560020a62461bcd0281526020600482015260166024820152600080516020613ce4833981519152604482015290519081900360640190fd5b601154610100900460ff161515610fa1576040805160e560020a62461bcd02815260206004820152602560248201527f746f70207570206c696d697420686173206e6f74206265656e20696e6974696160448201527f6c697a6564000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8066038d7ea4c6800011158015610fc057506706f05b59d3b200008111155b151561103c576040805160e560020a62461bcd02815260206004820152602d60248201527f746f7020757020616d6f756e74206973206f757473696465206f66207468652060448201527f6d696e2f6d61782072616e676500000000000000000000000000000000000000606482015290519081900360840190fd5b60108190556011805460ff191660011790556040805182815290517f9312377d84b68703929715872be9f0309065e102db6152de9c0587d9e294216d9181900360200190a150565b60036020526000908152604090205460ff1681565b60606004805480602002602001604051908101604052809291908181526020018280548015610ec457602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610ea6575050505050905090565b600b54610100900460ff1681565b61110f613a41565b1515611153576040805160e560020a62461bcd0281526020600482015260166024820152600080516020613ce4833981519152604482015290519081900360640190fd5b600b54610100900460ff16156111d9576040805160e560020a62461bcd02815260206004820152602860248201527f7370656e64206c696d69742068617320616c7265616479206265656e20696e6960448201527f7469616c697a6564000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6111e281613a73565b600b805461ff001916610100179055604080513381526020810183905281517f068f112e5ec923d412be64779fe69e0fcbb6784c6617e94cccc8fd348f2e0f21929181900390910190a150565b600061123a33613881565b151561127e576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020613d04833981519152604482015290519081900360640190fd5b60065460ff161515611300576040805160e560020a62461bcd02815260206004820152602960248201527f77686974656c697374206164646974696f6e20686173206e6f74206265656e2060448201527f7375626d69747465640000000000000000000000000000000000000000000000606482015290519081900360840190fd5b61136160048054806020026020016040519081016040528092919081815260200182805480156108d157602002820191906000526020600020908154600160a060020a031681526001909101906020018083116108b3575050505050611c26565b82146113dd576040805160e560020a62461bcd02815260206004820152603360248201527f68617368206f66207468652070656e64696e672077686974656c69737420616460448201527f646974696f6e20646f206e6f74206d6174636800000000000000000000000000606482015290519081900360840190fd5b5060005b60045481101561143c5760016003600060048481548110151561140057fe5b600091825260208083209190910154600160a060020a031683528201929092526040019020805460ff19169115159190911790556001016113e1565b7fb2f6cccee7a369e23e293c25aa19bef80af11eb26deba3ea0f2a02783f752e4a3360046040518083600160a060020a0316600160a060020a031681526020018060200182810382528381815481526020019150805480156114c757602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116114a9575b5050935050505060405180910390a16114e260046000613c0a565b50506006805460ff19169055565b6114f8613a41565b151561153c576040805160e560020a62461bcd0281526020600482015260166024820152600080516020613ce4833981519152604482015290519081900360640190fd5b60065460ff161580156115575750600654610100900460ff16155b15156115d3576040805160e560020a62461bcd02815260206004820152602e60248201527f77686974656c697374206f7065726174696f6e2068617320616c72656164792060448201527f6265656e207375626d6974746564000000000000000000000000000000000000606482015290519081900360840190fd5b60065462010000900460ff161515611643576040805160e560020a62461bcd02815260206004820152602260248201527f77686974656c69737420686173206e6f74206265656e20696e697469616c697a604482015260f260020a61195902606482015290519081900360840190fd5b600081116116c0576040805160e560020a62461bcd028152602060048201526024808201527f7375626d69747465642077686974656c6973742072656d6f76616c206973206560448201527f6d70747900000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6116cc60058383613c28565b506006805461ff00191661010017905560058054604080516020808402820181019092528281527ffbc0e5ca6c7e4858daf0fdb185ef5186203e74ec9c64737e93c0aeaec596e1d19386938693611761939291908301828280156108d157602002820191906000526020600020908154600160a060020a031681526001909101906020018083116108b3575050505050611c26565b604080516020808201849052828252918101849052908190606082019086908602808284376040519201829003965090945050505050a15050565b6117a4613a41565b15156117e8576040805160e560020a62461bcd0281526020600482015260166024820152600080516020613ce4833981519152604482015290519081900360640190fd5b601154610100900460ff161561186e576040805160e560020a62461bcd02815260206004820152602960248201527f746f70207570206c696d69742068617320616c7265616479206265656e20696e60448201527f697469616c697a65640000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8066038d7ea4c680001115801561188d57506706f05b59d3b200008111155b1515611909576040805160e560020a62461bcd02815260206004820152602d60248201527f746f7020757020616d6f756e74206973206f757473696465206f66207468652060448201527f6d696e2f6d61782072616e676500000000000000000000000000000000000000606482015290519081900360840190fd5b61191281613a52565b6011805461ff001916610100179055604080513381526020810183905281517fb0b775ba506691c666928dfe7120eb5ccedd17f4554dc85ce86eb2b4cc437e36929181900390910190a150565b60105481565b61196d613a41565b15156119b1576040805160e560020a62461bcd0281526020600482015260166024820152600080516020613ce4833981519152604482015290519081900360640190fd5b60025474010000000000000000000000000000000000000000900460ff161515611a25576040805160e560020a62461bcd02815260206004820152601d60248201527f6f776e657273686970206973206e6f74207472616e7366657261626c65000000604482015290519081900360640190fd5b60025460408051600160a060020a0390921682526000602083015280517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea59281900390910190a16002805473ffffffffffffffffffffffffffffffffffffffff19169055565b611a9433613881565b1515611ad8576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020613d04833981519152604482015290519081900360640190fd5b60115460ff161515611b5a576040805160e560020a62461bcd02815260206004820152602160248201527f6120746f707570206c696d69742068617320746f206265207375626d6974746560448201527f6400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6010548114611bd9576040805160e560020a62461bcd02815260206004820152602e60248201527f70656e64696e6720616e642063616e63656c6c656420746f70207570206c696d60448201527f69747320646f6e74206d61746368000000000000000000000000000000000000606482015290519081900360840190fd5b60006010556011805460ff19169055604080513381526020810183905281517f25d36a8351febb568fa2c8f5a167990291168552d0f3381a618eb120f42d91f4929181900390910190a150565b60008160405160200180828051906020019060200280838360005b83811015611c59578181015183820152602001611c41565b505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611ca15780518252601f199092019160209182019101611c82565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b611cdb613a41565b1515611d1f576040805160e560020a62461bcd0281526020600482015260166024820152600080516020613ce4833981519152604482015290519081900360640190fd5b60065460ff16158015611d3a5750600654610100900460ff16155b1515611db6576040805160e560020a62461bcd02815260206004820152602e60248201527f77686974656c697374206f7065726174696f6e2068617320616c72656164792060448201527f6265656e207375626d6974746564000000000000000000000000000000000000606482015290519081900360840190fd5b8181808060200260200160405190810160405280939291908181526020018383602002808284375060009450505050505b8151811015611f2257611df86120fb565b600160a060020a03168282815181101515611e0f57fe5b60209081029091010151600160a060020a03161415611e8c576040805160e560020a62461bcd02815260206004820152602d6024820152600080516020613d2483398151915260448201527f6f776e6572206164647265737300000000000000000000000000000000000000606482015290519081900360840190fd5b8151600090839083908110611e9d57fe5b60209081029091010151600160a060020a03161415611f1a576040805160e560020a62461bcd02815260206004820152602c6024820152600080516020613d2483398151915260448201527f7a65726f20616464726573730000000000000000000000000000000000000000606482015290519081900360840190fd5b600101611de7565b60065462010000900460ff161515611f92576040805160e560020a62461bcd02815260206004820152602260248201527f77686974656c69737420686173206e6f74206265656e20696e697469616c697a604482015260f260020a61195902606482015290519081900360840190fd5b60008311612010576040805160e560020a62461bcd02815260206004820152602360248201527f70656e64696e672077686974656c697374206164646974696f6e20697320656d60448201527f7074790000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b61201c60048585613c28565b506006805460ff1916600117905560048054604080516020808402820181019092528281527f9c80b3b5f68b3e017766d59e8d09b34efe6462b05c398f35cab9e271d9bc3b9c93889388936120af939291908301828280156108d157602002820191906000526020600020908154600160a060020a031681526001909101906020018083116108b3575050505050611c26565b604080516020808201849052828252918101849052908190606082019086908602808284376040519201829003965090945050505050a150505050565b600d5481565b60115460ff1681565b600254600160a060020a031690565b6000600e5462015180014211156121245750600d54610c18565b50600f54610c18565b60075481565b60065462010000900460ff1681565b60008061214d613a41565b1515612191576040805160e560020a62461bcd0281526020600482015260166024820152600080516020613ce4833981519152604482015290519081900360640190fd5b828015156121e9576040805160e560020a62461bcd02815260206004820152601d60248201527f70726f76696465642076616c75652063616e6e6f74206265207a65726f000000604482015290519081900360640190fd5b600160a060020a0386161515612249576040805160e560020a62461bcd02815260206004820181905260248201527f5f746f20616464726573732063616e6e6f742062652073657420746f20307830604482015290519081900360640190fd5b600160a060020a03861660009081526003602052604090205460ff16151561251557612273613a93565b600160a060020a0385161561245457600b54600c54604080517f0178b8bf00000000000000000000000000000000000000000000000000000000815260048101929092525162010000909204600160a060020a031691630178b8bf916024808201926020929091908290030181600087803b1580156122f157600080fd5b505af1158015612305573d6000803e3d6000fd5b505050506040513d602081101561231b57600080fd5b5051600c54604080517f3b3b57de000000000000000000000000000000000000000000000000000000008152600481019290925251600160a060020a0390921691633b3b57de916024808201926020929091908290030181600087803b15801561238457600080fd5b505af1158015612398573d6000803e3d6000fd5b505050506040513d60208110156123ae57600080fd5b5051604080517f67c6e39c000000000000000000000000000000000000000000000000000000008152600160a060020a0388811660048301526024820188905282519316926367c6e39c926044808401939192918290030181600087803b15801561241857600080fd5b505af115801561242c573d6000803e3d6000fd5b505050506040513d604081101561244257600080fd5b50805160209091015193509150612458565b8392505b818061246b5750600160a060020a038516155b1561251557612478612cf3565b8311156124f5576040805160e560020a62461bcd02815260206004820152602d60248201527f7472616e7366657220616d6f756e74206578636565647320617661696c61626c60448201527f65207370656e64206c696d697400000000000000000000000000000000000000606482015290519081900360840190fd5b61251561251084612504612cf3565b9063ffffffff613b0e16565b613b2c565b600160a060020a0385161561264d5784600160a060020a031663a9059cbb87866040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156125a057600080fd5b505af11580156125b4573d6000803e3d6000fd5b505050506040513d60208110156125ca57600080fd5b50511515612648576040805160e560020a62461bcd02815260206004820152602560248201527f455243323020746f6b656e207472616e736665722077617320756e737563636560448201527f737366756c000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b612685565b604051600160a060020a0387169085156108fc029086906000818181858888f19350505050158015612683573d6000803e3d6000fd5b505b60408051600160a060020a0380891682528716602082015280820186905290517fd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee9181900360600190a1505050505050565b600a5481565b60006126e833613881565b151561272c576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020613d04833981519152604482015290519081900360640190fd5b600654610100900460ff1615156127b3576040805160e560020a62461bcd02815260206004820152602860248201527f77686974656c6973742072656d6f76616c20686173206e6f74206265656e207360448201527f75626d6974746564000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b61281460058054806020026020016040519081016040528092919081815260200182805480156108d157602002820191906000526020600020908154600160a060020a031681526001909101906020018083116108b3575050505050611c26565b82146128b6576040805160e560020a62461bcd02815260206004820152604760248201527f68617368206f66207468652070656e64696e672077686974656c69737420726560448201527f6d6f76616c20646f6573206e6f74206d617463682074686520636f6e6669726d60648201527f6564206861736800000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b5060005b600554811015612915576000600360006005848154811015156128d957fe5b600091825260208083209190910154600160a060020a031683528201929092526040019020805460ff19169115159190911790556001016128ba565b7fd218c430fa348f4ce67791021b6b89c0c3eacd4ead1d8f5b83c60038ec28249b3360056040518083600160a060020a0316600160a060020a031681526020018060200182810382528381815481526020019150805480156129a057602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612982575b5050935050505060405180910390a16129bb60056000613c0a565b50506006805461ff0019169055565b6129d333613881565b1515612a17576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020613d04833981519152604482015290519081900360640190fd5b600654610100900460ff161515612a9e576040805160e560020a62461bcd02815260206004820152602860248201527f77686974656c6973742072656d6f76616c20686173206e6f74206265656e207360448201527f75626d6974746564000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b612aff60058054806020026020016040519081016040528092919081815260200182805480156108d157602002820191906000526020600020908154600160a060020a031681526001909101906020018083116108b3575050505050611c26565b8114612b7b576040805160e560020a62461bcd02815260206004820152603460248201527f68617368206f66207468652070656e64696e672077686974656c69737420726560448201527f6d6f76616c20646f6573206e6f74206d61746368000000000000000000000000606482015290519081900360840190fd5b612b8760056000613c0a565b6006805461ff0019169055604080513381526020810183905281517f13c935eb475aa0f6e931fece83e2ac44569ce2d53460d29a6dedab40b965c8a3929181900390910190a150565b600b5460ff1681565b612be1613a41565b1515612c25576040805160e560020a62461bcd0281526020600482015260166024820152600080516020613ce4833981519152604482015290519081900360640190fd5b600b54610100900460ff161515612cab576040805160e560020a62461bcd028152602060048201526024808201527f7370656e64206c696d697420686173206e6f74206265656e20696e697469616c60448201527f697a656400000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600a819055600b805460ff191660011790556040805182815290517ff7155f467a69de148f41fc3c39089f07e9bff6d91519f3d69d46936643d5197a9181900360200190a150565b60006008546201518001421115612d0d5750600754610c18565b50600954610c18565b600654610100900460ff1681565b6000600160a060020a03821615612dc957604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038416916370a082319160248083019260209291908290030181600087803b158015612d9657600080fd5b505af1158015612daa573d6000803e3d6000fd5b505050506040513d6020811015612dc057600080fd5b505190506107a4565b5030316107a4565b612dda33613881565b1515612e1e576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020613d04833981519152604482015290519081900360640190fd5b600b5460ff161515612e88576040805160e560020a62461bcd02815260206004820152602260248201527f61207370656e646c696d6974206e6565647320746f206265207375626d697474604482015260f260020a61195902606482015290519081900360840190fd5b600a548114612f07576040805160e560020a62461bcd02815260206004820152602d60248201527f70656e64696e6720616e642063616e63656c6c6564207370656e64206c696d6960448201527f747320646f6e74206d6174636800000000000000000000000000000000000000606482015290519081900360840190fd5b6000600a55600b805460ff19169055604080513381526020810183905281517f83e15565cfc238cf8d4e7a0a2cefeda3c9d6621e44a4d2ee96034ea403648b6a929181900390910190a150565b80801515612fac576040805160e560020a62461bcd02815260206004820152601d60248201527f70726f76696465642076616c75652063616e6e6f74206265207a65726f000000604482015290519081900360640190fd5b612fb4613a41565b80612fc35750612fc333613881565b151561303f576040805160e560020a62461bcd02815260206004820152602b60248201527f73656e646572206973206e65697468657220616e206f776e6572206e6f72206160448201527f20636f6e74726f6c6c6572000000000000000000000000000000000000000000606482015290519081900360840190fd5b613047613b31565b600f5415156130c6576040805160e560020a62461bcd02815260206004820152602560248201527f617661696c61626c6520746f70207570206c696d69742063616e6e6f7420626560448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600f54821115613146576040805160e560020a62461bcd02815260206004820152603160248201527f617661696c61626c6520746f70207570206c696d6974206c657373207468616e60448201527f20616d6f756e742070617373656420696e000000000000000000000000000000606482015290519081900360840190fd5b600f54613159908363ffffffff613b0e16565b600f556131646120fb565b600160a060020a03166108fc839081150290604051600060405180830381858888f1935050505015801561319c573d6000803e3d6000fd5b507f611b7c0d84fda988026215bef9b3e4d81cbceced7e679be6d5e044b588467c0e326131c76120fb565b60408051600160a060020a03938416815291909216602082015280820185905290519081900360600190a15050565b6131fe613a41565b1515613242576040805160e560020a62461bcd0281526020600482015260166024820152600080516020613ce4833981519152604482015290519081900360640190fd5b60025474010000000000000000000000000000000000000000900460ff1615156132b6576040805160e560020a62461bcd02815260206004820152601d60248201527f6f776e657273686970206973206e6f74207472616e7366657261626c65000000604482015290519081900360640190fd5b600160a060020a038116151561333c576040805160e560020a62461bcd02815260206004820152602360248201527f6f776e65722063616e6e6f742062652073657420746f207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6002805474ff000000000000000000000000000000000000000019811690915560408051600160a060020a039283168152918316602083015280517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea59281900390910190a16002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6133d933613881565b151561341d576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020613d04833981519152604482015290519081900360640190fd5b600b5460ff161515613487576040805160e560020a62461bcd02815260206004820152602260248201527f7370656e64206c696d697420686173206e6f74206265656e207375626d697474604482015260f260020a61195902606482015290519081900360840190fd5b600a548114613506576040805160e560020a62461bcd02815260206004820152602f60248201527f636f6e6669726d656420616e64207375626d6974746564207370656e64206c6960448201527f6d69747320646f6e74206d617463680000000000000000000000000000000000606482015290519081900360840190fd5b613511600a54613a73565b600a5460408051338152602081019290925280517f068f112e5ec923d412be64779fe69e0fcbb6784c6617e94cccc8fd348f2e0f219281900390910190a150600b805460ff191690556000600a55565b600061356b613a41565b15156135af576040805160e560020a62461bcd0281526020600482015260166024820152600080516020613ce4833981519152604482015290519081900360640190fd5b8282808060200260200160405190810160405280939291908181526020018383602002808284375060009450505050505b815181101561371b576135f16120fb565b600160a060020a0316828281518110151561360857fe5b60209081029091010151600160a060020a03161415613685576040805160e560020a62461bcd02815260206004820152602d6024820152600080516020613d2483398151915260448201527f6f776e6572206164647265737300000000000000000000000000000000000000606482015290519081900360840190fd5b815160009083908390811061369657fe5b60209081029091010151600160a060020a03161415613713576040805160e560020a62461bcd02815260206004820152602c6024820152600080516020613d2483398151915260448201527f7a65726f20616464726573730000000000000000000000000000000000000000606482015290519081900360840190fd5b6001016135e0565b60065462010000900460ff16156137a2576040805160e560020a62461bcd02815260206004820152602660248201527f77686974656c6973742068617320616c7265616479206265656e20696e69746960448201527f616c697a65640000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600092505b838310156137fe576001600360008787878181106137c157fe5b60209081029290920135600160a060020a0316835250810191909152604001600020805460ff1916911515919091179055600192909201916137a7565b6006805462ff0000191662010000179055604080513380825260208083018481529383018890527fb2f6cccee7a369e23e293c25aa19bef80af11eb26deba3ea0f2a02783f752e4a93919289928992606083019085908502808284376040519201829003965090945050505050a15050505050565b601154610100900460ff1681565b60008054600154604080517f0178b8bf000000000000000000000000000000000000000000000000000000008152600481019290925251600160a060020a0390921691630178b8bf9160248082019260209290919082900301818787803b1580156138eb57600080fd5b505af11580156138ff573d6000803e3d6000fd5b505050506040513d602081101561391557600080fd5b5051600154604080517f3b3b57de000000000000000000000000000000000000000000000000000000008152600481019290925251600160a060020a0390921691633b3b57de916024808201926020929091908290030181600087803b15801561397e57600080fd5b505af1158015613992573d6000803e3d6000fd5b505050506040513d60208110156139a857600080fd5b5051604080517fb429afeb000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163b429afeb9160248083019260209291908290030181600087803b158015613a0f57600080fd5b505af1158015613a23573d6000803e3d6000fd5b505050506040513d6020811015613a3957600080fd5b505192915050565b600254600160a060020a0316331490565b613a5a613b31565b600d819055600f54811015613a7057600d54600f555b50565b613a7b613a93565b6007819055600954811015613a705760075460095550565b600854600090613aac906201518063ffffffff613ba016565b421115613a7057613adb62015180613acf60085442613b0e90919063ffffffff16565b9063ffffffff613bb916565b9050613b02613af3826201518063ffffffff613bdc16565b6008549063ffffffff613ba016565b60085560075460095550565b60008083831115613b1e57600080fd5b5050808203805b5092915050565b600955565b600e54600090613b4a906201518063ffffffff613ba016565b421115613a7057613b6d62015180613acf600e5442613b0e90919063ffffffff16565b9050613b94613b85826201518063ffffffff613bdc16565b600e549063ffffffff613ba016565b600e55600d54600f5550565b600082820183811015613bb257600080fd5b9392505050565b600080808311613bc857600080fd5b8284811515613bd357fe5b04949350505050565b600080831515613bef5760009150613b25565b50828202828482811515613bff57fe5b0414613bb257600080fd5b5080546000825590600052602060002090810190613a709190613c98565b828054828255906000526020600020908101928215613c88579160200282015b82811115613c8857815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03843516178255602090920191600190910190613c48565b50613c94929150613cb2565b5090565b610c1891905b80821115613c945760008155600101613c9e565b610c1891905b80821115613c9457805473ffffffffffffffffffffffffffffffffffffffff19168155600101613cb8560073656e646572206973206e6f7420616e206f776e65720000000000000000000073656e646572206973206e6f74206120636f6e74726f6c6c657200000000000070726f76696465642077686974656c69737420636f6e7461696e732074686520a165627a7a72305820a4e91fa17d5698527ae4dea62cb72d36566cb8ba76fefe1397e448399601aca10029000000000000000000000000982763ba6809ecdd96c335ee335db2a5ca1ceabc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b641c0900086ccfffea93c7d8b16693544f9f4ce389c6aeaa13ba5df602aa73147f2ce995617d2816b426c5c8698c5ec2952f7a34bb10f38326f74933d58936970000000000000000000000000000000000000000000000000de0b6b3a7640000",
  "constructorArguments": "000000000000000000000000982763ba6809ecdd96c335ee335db2a5ca1ceabc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b641c0900086ccfffea93c7d8b16693544f9f4ce389c6aeaa13ba5df602aa73147f2ce995617d2816b426c5c8698c5ec2952f7a34bb10f38326f74933d58936970000000000000000000000000000000000000000000000000de0b6b3a7640000"
}