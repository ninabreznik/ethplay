{
  "address": "0xb5335e24d0ab29c190ab8c2b459238da1153ceba",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Hexagon Token",
  "contractName": "Hexagon",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-07\n*/\n\npragma solidity ^0.4.18;\n\ncontract Hexagon {\n  /* Main information */\n  string public constant name = \"Hexagon\";\n  string public constant symbol = \"HXG\";\n  uint8 public constant decimals = 4;\n  uint8 public constant burnPerTransaction = 2;\n  uint256 public constant initialSupply = 420000000000000;\n  uint256 public currentSupply = initialSupply;\n\n  /* Create array with balances */\n  mapping (address => uint256) public balanceOf;\n  /* Create array with allowance */\n  mapping (address => mapping (address => uint256)) public allowance;\n\n  /* Constructor */\n  function Hexagon() public {\n    /* Give creator all initial supply of tokens */\n    balanceOf[msg.sender] = initialSupply;\n  }\n\n  /* PUBLIC */\n  /* Send tokens */\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n    _transfer(msg.sender, _to, _value);\n\n    return true;\n  }\n\n  /* Return current supply */\n  function totalSupply() public constant returns (uint) {\n    return currentSupply;\n  }\n\n  /* Burn tokens */\n  function burn(uint256 _value) public returns (bool success) {\n    /* Check if the sender has enough */\n    require(balanceOf[msg.sender] >= _value);\n    /* Subtract from the sender */\n    balanceOf[msg.sender] -= _value;\n    /* Send to the black hole */\n    balanceOf[0x0] += _value;\n    /* Update current supply */\n    currentSupply -= _value;\n    /* Notify network */\n    Burn(msg.sender, _value);\n\n    return true;\n  }\n\n  /* Allow someone to spend on your behalf */\n  function approve(address _spender, uint256 _value) public returns (bool success) {\n    /* Check if the sender has already  */\n    require(_value == 0 || allowance[msg.sender][_spender] == 0);\n    /* Add to allowance  */\n    allowance[msg.sender][_spender] = _value;\n    /* Notify network */\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n  }\n\n  /* Transfer tokens from allowance */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n    /* Prevent transfer of not allowed tokens */\n    require(allowance[_from][msg.sender] >= _value);\n    /* Remove tokens from allowance */\n    allowance[_from][msg.sender] -= _value;\n\n    _transfer(_from, _to, _value);\n\n    return true;\n  }\n\n  /* INTERNAL */\n  function _transfer(address _from, address _to, uint _value) internal {\n    /* Prevent transfer to 0x0 address. Use burn() instead  */\n    require (_to != 0x0);\n    /* Check if the sender has enough */\n    require (balanceOf[_from] >= _value + burnPerTransaction);\n    /* Check for overflows */\n    require (balanceOf[_to] + _value > balanceOf[_to]);\n    /* Subtract from the sender */\n    balanceOf[_from] -= _value + burnPerTransaction;\n    /* Add the same to the recipient */\n    balanceOf[_to] += _value;\n    /* Apply transaction fee */\n    balanceOf[0x0] += burnPerTransaction;\n    /* Update current supply */\n    currentSupply -= burnPerTransaction;\n    /* Notify network */\n    Burn(_from, burnPerTransaction);\n    /* Notify network */\n    Transfer(_from, _to, _value);\n  }\n\n  /* Events */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Burn(address indexed from, uint256 value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
  "bytecode": "606060405266017dfcdece4000600055341561001a57600080fd5b600160a060020a033316600090815260016020526040902066017dfcdece400090556106eb8061004b6000396000f3006060604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100c9578063095ea7b31461015357806318160ddd1461018957806323b872dd146101ae57806327edf097146101d6578063313ce567146101ff578063378dc3dc1461021257806342966c681461022557806370a082311461023b578063771282f61461025a57806395d89b411461026d578063a9059cbb14610280578063dd62ed3e146102a2575b600080fd5b34156100d457600080fd5b6100dc6102c7565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610118578082015183820152602001610100565b50505050905090810190601f1680156101455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015e57600080fd5b610175600160a060020a03600435166024356102fe565b604051901515815260200160405180910390f35b341561019457600080fd5b61019c6103a4565b60405190815260200160405180910390f35b34156101b957600080fd5b610175600160a060020a03600435811690602435166044356103aa565b34156101e157600080fd5b6101e9610422565b60405160ff909116815260200160405180910390f35b341561020a57600080fd5b6101e9610427565b341561021d57600080fd5b61019c61042c565b341561023057600080fd5b610175600435610437565b341561024657600080fd5b61019c600160a060020a03600435166104ea565b341561026557600080fd5b61019c6104fc565b341561027857600080fd5b6100dc610502565b341561028b57600080fd5b610175600160a060020a0360043516602435610539565b34156102ad57600080fd5b61019c600160a060020a036004358116906024351661054f565b60408051908101604052600781527f48657861676f6e00000000000000000000000000000000000000000000000000602082015281565b60008115806103305750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561033b57600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005490565b600160a060020a03808416600090815260026020908152604080832033909416835292905290812054829010156103e057600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052208054839003905561041884848461056c565b5060019392505050565b600281565b600481565b66017dfcdece400081565b600160a060020a0333166000908152600160205260408120548290101561045d57600080fd5b600160a060020a033316600081815260016020526040808220805486900390558180527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4980548601905581548590039091557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a2506001919050565b60016020526000908152604090205481565b60005481565b60408051908101604052600381527f4858470000000000000000000000000000000000000000000000000000000000602082015281565b600061054633848461056c565b50600192915050565b600260209081526000928352604080842090915290825290205481565b600160a060020a038216151561058157600080fd5b600160a060020a038316600090815260016020526040902054600282019010156105aa57600080fd5b600160a060020a038216600090815260016020526040902054818101116105d057600080fd5b600160a060020a03808416600081815260016020526040808220805460011990879003810190915593861682528082208054860190558180527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4980546002908101909155825490940190915590917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5915160ff909116815260200160405180910390a281600160a060020a031683600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35050505600a165627a7a72305820fbef5b10322242b8659b5de8e24ec1cf5e809831f6f7c08e52112f76daa31aef0029"
}