{
  "address": "0x2a4ebe4f7a8750260f31728162a88c1858966079",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DRIVRNetworkToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-20\n*/\n\npragma solidity ^0.4.11;\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet\n * as they arrive.\n */\n \n \nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant public returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) tokenBalances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(tokenBalances[msg.sender]>=_value);\n    tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(_value);\n    tokenBalances[_to] = tokenBalances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant public returns (uint256 balance) {\n    return tokenBalances[_owner];\n  }\n\n}\n\ncontract DRIVRNetworkToken is BasicToken,Ownable {\n\n   using SafeMath for uint256;\n   \n   string public constant name = \"DRIVR Network\";\n   string public constant symbol = \"DVR\";\n   uint256 public constant decimals = 18;\n\n   uint256 public constant INITIAL_SUPPLY = 750000000;\n  /**\n   * @dev Contructor that gives msg.sender all of existing tokens.\n   */\n    function DRIVRNetworkToken(address wallet) public {\n        owner = msg.sender;\n        totalSupply = INITIAL_SUPPLY * 10 ** 18;\n        tokenBalances[wallet] = totalSupply;   //Since we divided the token into 10^18 parts\n    }\n\n    function mint(address wallet, address buyer, uint256 tokenAmount) public onlyOwner {\n      require(tokenBalances[wallet] >= tokenAmount);               // checks if it has enough to sell\n      tokenBalances[buyer] = tokenBalances[buyer].add(tokenAmount);                  // adds the amount to buyer's balance\n      tokenBalances[wallet] = tokenBalances[wallet].sub(tokenAmount);                        // subtracts amount from seller's balance\n      Transfer(wallet, buyer, tokenAmount); \n      totalSupply = totalSupply.sub(tokenAmount);\n    }\n    function showMyTokenBalance(address addr) public view returns (uint tokenBalance) {\n        tokenBalance = tokenBalances[addr];\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b6040516020806106728339810160405280805160028054600160a060020a03338116600160a060020a031992831681179092169091179091556b026c62ad77dc602dae00000060008181559190921681526001602052604090205550506105f78061007b6000396000f3006060604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100b357806318160ddd1461013d5780632ff2e9dc14610162578063313ce5671461017557806370a08231146101885780638da5cb5b146101a75780638fe476251461018857806395d89b41146101d6578063a9059cbb146101e9578063c6c3bbe61461021f578063f2fde38b14610249575b600080fd5b34156100be57600080fd5b6100c6610268565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101025780820151838201526020016100ea565b50505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014857600080fd5b61015061029f565b60405190815260200160405180910390f35b341561016d57600080fd5b6101506102a5565b341561018057600080fd5b6101506102ad565b341561019357600080fd5b610150600160a060020a03600435166102b2565b34156101b257600080fd5b6101ba6102cd565b604051600160a060020a03909116815260200160405180910390f35b34156101e157600080fd5b6100c66102dc565b34156101f457600080fd5b61020b600160a060020a0360043516602435610313565b604051901515815260200160405180910390f35b341561022a57600080fd5b610247600160a060020a03600435811690602435166044356103f8565b005b341561025457600080fd5b610247600160a060020a0360043516610508565b60408051908101604052600d81527f4452495652204e6574776f726b00000000000000000000000000000000000000602082015281565b60005481565b632cb4178081565b601281565b600160a060020a031660009081526001602052604090205490565b600254600160a060020a031681565b60408051908101604052600381527f4456520000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a0333166000908152600160205260408120548290101561033957600080fd5b600160a060020a033316600090815260016020526040902054610362908363ffffffff6105a316565b600160a060020a033381166000908152600160205260408082209390935590851681522054610397908363ffffffff6105b516565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60025433600160a060020a0390811691161461041357600080fd5b600160a060020a0383166000908152600160205260409020548190101561043957600080fd5b600160a060020a038216600090815260016020526040902054610462908263ffffffff6105b516565b600160a060020a038084166000908152600160205260408082209390935590851681522054610497908263ffffffff6105a316565b600160a060020a038085166000818152600160205260409081902093909355908416917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a3600054610500908263ffffffff6105a316565b600055505050565b60025433600160a060020a0390811691161461052357600080fd5b600160a060020a038116151561053857600080fd5b600254600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000828211156105af57fe5b50900390565b6000828201838110156105c457fe5b93925050505600a165627a7a72305820c46254580663066672456b2ba7dabe1be2416ee2a91390e227abd2f597d2e8100029000000000000000000000000b43ce355b21d9af19953fa20cb7e3b1946e4650f",
  "constructorArguments": "000000000000000000000000b43ce355b21d9af19953fa20cb7e3b1946e4650f"
}