{
  "address": "0x340d2bde5eb28c1eed91b2f790723e3b160613b7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Blockv Token",
  "contractName": "BlockvToken",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-23\n*/\n\npragma solidity ^0.4.13;\n\ninterface MigrationAgent {\n  function migrateFrom(address _from, uint256 _value);\n}\n\ncontract PoolAllocations {\n\n  // ERC20 basic token contract being held\n  ERC20Basic public token;\n\n // allocations map\n  mapping (address => lockEntry) public allocations;\n\n  // lock entry\n  struct lockEntry {\n      uint256 totalAmount;        // total amount of token for a user\n      uint256 firstReleaseAmount; // amount to be released \n      uint256 nextRelease;        // amount to be released every month\n      uint256 restOfTokens;       // the rest of tokens if not divisible\n      bool isFirstRelease;        // just flag\n      uint numPayoutCycles;       // only after 3 years\n  }\n\n  // max number of payout cycles\n  uint public maxNumOfPayoutCycles;\n\n  // first release date\n  uint public startDay;\n\n  // defines how many of cycles should be released immediately\n  uint public cyclesStartFrom = 1;\n\n  uint public payoutCycleInDays;\n\n  function PoolAllocations(ERC20Basic _token) public {\n    token = _token;\n  }\n\n  /**\n   * @dev claims tokens held by time lock\n   */\n  function claim() public {\n    require(now >= startDay);\n\n     var elem = allocations[msg.sender];\n    require(elem.numPayoutCycles > 0);\n\n    uint256 tokens = 0;\n    uint cycles = getPayoutCycles(elem.numPayoutCycles);\n\n    if (elem.isFirstRelease) {\n      elem.isFirstRelease = false;\n      tokens += elem.firstReleaseAmount;\n      tokens += elem.restOfTokens;\n    } else {\n      require(cycles > 0);\n    }\n\n    tokens += elem.nextRelease * cycles;\n\n    elem.numPayoutCycles -= cycles;\n\n    assert(token.transfer(msg.sender, tokens));\n  }\n\n  function getPayoutCycles(uint payoutCyclesLeft) private constant returns (uint) {\n    uint cycles = uint((now - startDay) / payoutCycleInDays) + cyclesStartFrom;\n\n    if (cycles > maxNumOfPayoutCycles) {\n       cycles = maxNumOfPayoutCycles;\n    }\n\n    return cycles - (maxNumOfPayoutCycles - payoutCyclesLeft);\n  }\n\n  function createAllocationEntry(uint256 total, uint256 first, uint256 next, uint256 rest) internal returns(lockEntry) {\n    return lockEntry(total, // total\n                     first, // first\n                     next,  // next\n                     rest,  // rest\n                     true,  //isFirstRelease\n                     maxNumOfPayoutCycles); //payoutCyclesLeft\n  }\n}\n\ncontract PoolBLock is PoolAllocations {\n\n  uint256 public constant totalAmount = 911567810300063801255851777;\n\n  function PoolBLock(ERC20Basic _token) PoolAllocations(_token) {\n\n    // setup policy\n    maxNumOfPayoutCycles = 5; // 20% * 5 = 100%\n    startDay = now;\n    cyclesStartFrom = 1; // the first payout cycles is released immediately\n    payoutCycleInDays = 180 days; // 20% of tokens will be released every 6 months\n\n    // allocations\n    allocations[0x2f09079059b85c11DdA29ed62FF26F99b7469950] = createAllocationEntry(182313562060012760251170355, 0, 36462712412002552050234071, 0);\n    allocations[0x3634acA3cf97dCC40584dB02d53E290b5b4b65FA] = createAllocationEntry(182313562060012760251170355, 0, 36462712412002552050234071, 0);\n    allocations[0x768D9F044b9c8350b041897f08cA77AE871AeF1C] = createAllocationEntry(182313562060012760251170355, 0, 36462712412002552050234071, 0);\n    allocations[0xb96De72d3fee8c7B6c096Ddeab93bf0b3De848c4] = createAllocationEntry(182313562060012760251170355, 0, 36462712412002552050234071, 0);\n    allocations[0x2f97bfD7a479857a9028339Ce2426Fc3C62D96Bd] = createAllocationEntry(182313562060012760251170357, 0, 36462712412002552050234071, 2);\n  }\n}\n\ncontract PoolCLock is PoolAllocations {\n\n  uint256 public constant totalAmount = 911567810300063801255851777;\n\n  function PoolCLock(ERC20Basic _token) PoolAllocations(_token) {\n    \n    // setup policy\n    maxNumOfPayoutCycles = 5; // 20% * 5 = 100%\n    startDay = now;\n    cyclesStartFrom = 1; // the first payout cycles is released immediately\n    payoutCycleInDays = 180 days; // 20% of tokens will be released every 6 months\n\n    // allocations\n    allocations[0x0d02A3365dFd745f76225A0119fdD148955f821E] = createAllocationEntry(182313562060012760251170355, 0, 36462712412002552050234071, 0);\n    allocations[0x0deF4A4De337771c22Ac8C8D4b9C5Fec496841A5] = createAllocationEntry(182313562060012760251170355, 0, 36462712412002552050234071, 0);\n    allocations[0x467600367BdBA1d852dbd8C1661a5E6a2Be5F6C8] = createAllocationEntry(182313562060012760251170355, 0, 36462712412002552050234071, 0);\n    allocations[0x92E01739142386E4820eC8ddC3AFfF69de99641a] = createAllocationEntry(182313562060012760251170355, 0, 36462712412002552050234071, 0);\n    allocations[0x1E0a7E0706373d0b76752448ED33cA1E4070753A] = createAllocationEntry(182313562060012760251170357, 0, 36462712412002552050234071, 2);\n  }\n}\n\ncontract PoolDLock is PoolAllocations {\n\n  uint256 public constant totalAmount = 546940686180038280753511066;\n\n  function PoolDLock(ERC20Basic _token) PoolAllocations(_token) {\n    \n    // setup policy\n    maxNumOfPayoutCycles = 36; // total * .5 / 36\n    startDay = now + 3 years;  // first release date\n    cyclesStartFrom = 0;\n    payoutCycleInDays = 30 days; // 1/36 of tokens will be released every month\n\n    // allocations\n    allocations[0x4311F6F65B411f546c7DD8841A344614297Dbf62] = createAllocationEntry(\n      182313562060012760251170355, // total\n      91156781030006380125585177,  // first release\n      2532132806389066114599588,   // next release\n      10                           // the rest\n    );\n     allocations[0x3b52Ab408cd499A1456af83AC095fCa23C014e0d] = createAllocationEntry(\n      182313562060012760251170355, // total\n      91156781030006380125585177,  // first release\n      2532132806389066114599588,   // next release\n      10                           // the rest\n    );\n     allocations[0x728D5312FbbdFBcC1b9582E619f6ceB6412B98E4] = createAllocationEntry(\n      182313562060012760251170356, // total\n      91156781030006380125585177,  // first release\n      2532132806389066114599588,   // next release\n      11                           // the rest\n    );\n  }\n}\n\ncontract Pausable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n  address public owner;\n\n  function Pausable(address _owner) {\n    owner = _owner;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev modifier to allow actions only when the contract IS paused\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev modifier to allow actions only when the contract IS NOT paused\n   */\n  modifier whenPaused {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused returns (bool) {\n    paused = true;\n    Pause();\n    return true;\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused returns (bool) {\n    paused = false;\n    Unpause();\n    return true;\n  }\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n   * @dev Fix for the ERC20 short address attack.\n   */\n  modifier onlyPayloadSize(uint numwords) {\n      assert(msg.data.length == numwords * 32 + 4);\n      _;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) onlyPayloadSize(2) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\ncontract BlockvToken is StandardToken, Pausable {\n\n  string public constant name = \"BLOCKv Token\"; // Set the token name for display\n  string public constant symbol = \"VEE\";        // Set the token symbol for display\n  uint8  public constant decimals = 18;         // Set the number of decimals for display\n\n  PoolBLock public poolBLock;\n  PoolCLock public poolCLock;\n  PoolDLock public poolDLock;\n\n  uint256 public constant totalAmountOfTokens = 3646271241200255205023407108;\n  uint256 public constant amountOfTokensPoolA = 1276194934420089321758192488;\n  uint256 public constant amountOfTokensPoolB = 911567810300063801255851777;\n  uint256 public constant amountOfTokensPoolC = 911567810300063801255851777;\n  uint256 public constant amountOfTokensPoolD = 546940686180038280753511066;\n\n  // migration\n  address public migrationMaster;\n  address public migrationAgent;\n  uint256 public totalMigrated;\n  event Migrate(address indexed _from, address indexed _to, uint256 _value);\n\n  /**\n   * @dev BlockvToken Constructor\n   * Runs only on initial contract creation.\n   */\n  function BlockvToken(address _migrationMaster) Pausable(_migrationMaster) {\n    require(_migrationMaster != 0);\n    migrationMaster = _migrationMaster;\n\n    totalSupply = totalAmountOfTokens; // Set the total supply\n\n    balances[msg.sender] = amountOfTokensPoolA;\n    Transfer(0x0, msg.sender, amountOfTokensPoolA);\n  \n    // time-locked tokens\n    poolBLock = new PoolBLock(this);\n    poolCLock = new PoolCLock(this);\n    poolDLock = new PoolDLock(this);\n\n    balances[poolBLock] = amountOfTokensPoolB;\n    balances[poolCLock] = amountOfTokensPoolC;\n    balances[poolDLock] = amountOfTokensPoolD;\n\n    Transfer(0x0, poolBLock, amountOfTokensPoolB);\n    Transfer(0x0, poolCLock, amountOfTokensPoolC);\n    Transfer(0x0, poolDLock, amountOfTokensPoolD);\n  }\n\n  /**\n   * @dev Transfer token for a specified address when not paused\n   * @param _to The address to transfer to.\n   * @param _value The amount to be transferred.\n   */\n  function transfer(address _to, uint256 _value) whenNotPaused returns (bool) {\n    require(_to != address(0));\n    require(_to != address(this));\n    return super.transfer(_to, _value);\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another when not paused\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) whenNotPaused returns (bool) {\n    require(_to != address(0));\n    require(_from != _to);\n    require(_to != address(this));\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender when not paused.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) whenNotPaused returns (bool) {\n    require(_spender != address(0));\n    require(_spender != address(this));\n    return super.approve(_spender, _value);\n  }\n\n  /**\n  * Token migration support:\n  */\n\n  /** \n  * @notice Migrate tokens to the new token contract.\n  * @dev Required state: Operational Migration\n  * @param _value The amount of token to be migrated\n  */\n  function migrate(uint256 _value) external {\n    require(migrationAgent != 0);\n    require(_value != 0);\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    totalSupply = totalSupply.sub(_value);\n    totalMigrated = totalMigrated.add(_value);\n    MigrationAgent(migrationAgent).migrateFrom(msg.sender, _value);\n    \n    Migrate(msg.sender, migrationAgent, _value);\n  }\n\n  /**\n  * @dev Set address of migration target contract and enable migration process.\n  * @param _agent The address of the MigrationAgent contract\n  */\n  function setMigrationAgent(address _agent) external {\n    require(_agent != 0);\n    require(migrationAgent == 0);\n    require(msg.sender == migrationMaster);\n\n    migrationAgent = _agent;\n  }\n\n  function setMigrationMaster(address _master) external {\n    require(_master != 0);\n    require(msg.sender == migrationMaster);\n\n    migrationMaster = _master;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolDLock\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_master\",\"type\":\"address\"}],\"name\":\"setMigrationMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolBLock\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfTokensPoolA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolCLock\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfTokensPoolB\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setMigrationAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfTokensPoolC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmountOfTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfTokensPoolD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_migrationMaster\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000006CFA1A9CB5C94087f418B3cA45338e5Fd9c511B9"
}