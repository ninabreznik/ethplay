{
  "address": "0xcbc66115e9d8655709c3408d0e320410aef1161a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MassVestingSender",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-27\n*/\n\npragma solidity ^0.4.24;\n\ncontract ERC20Basic\n{\n\tfunction totalSupply() public view returns (uint256);\n\n\tfunction balanceOf(address who) public view returns (uint256);\n\n\tfunction transfer(address to, uint256 value) public returns (bool);\n\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic\n{\n\tfunction allowance(address owner, address spender) public view returns (uint256);\n\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n\n\tfunction approve(address spender, uint256 value) public returns (bool);\n\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Ownable\n{\n\taddress public owner;\n\n\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n\t/**\n\t* @dev The Ownable constructor sets the original `owner` of the contract to the sender\n\t* account.\n\t*/\n\tconstructor() public\n\t{\n\t\towner = msg.sender;\n\t}\n\n\t/**\n\t* @dev Throws if called by any account other than the owner.\n\t*/\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner);\n\n\t\t_;\n\t}\n\n\t/**\n\t* @dev Allows the current owner to transfer control of the contract to a newOwner.\n\t* @param newOwner The address to transfer ownership to.\n\t*/\n\tfunction transferOwnership(address newOwner) public onlyOwner {\n\t\trequire(newOwner != address(0));\n\n\t\temit OwnershipTransferred(owner, newOwner);\n\t\towner = newOwner;\n\t}\n\n}\n\n/**\n * @title TokenTimelock\n * @dev TokenTimelock is a token holder contract that will allow a\n * beneficiary to extract the tokens after a given release time\n */\ncontract TokenTimelock {\n\t// ERC20 basic token contract being held\n\tERC20 private _token;\n\n\t// beneficiary of tokens after they are released\n\taddress private _beneficiary;\n\n\t// timestamp when token release is enabled\n\tuint256 private _releaseTime;\n\n\tconstructor (ERC20 token, address beneficiary, uint256 releaseTime) public {\n\t\t// solium-disable-next-line security/no-block-members\n\t\trequire(releaseTime > block.timestamp);\n\t\t_token = token;\n\t\t_beneficiary = beneficiary;\n\t\t_releaseTime = releaseTime;\n\t}\n\n\t/**\n\t * @return the token being held.\n\t */\n\tfunction token() public view returns (ERC20) {\n\t\treturn _token;\n\t}\n\n\t/**\n\t * @return the beneficiary of the tokens.\n\t */\n\tfunction beneficiary() public view returns (address) {\n\t\treturn _beneficiary;\n\t}\n\n\t/**\n\t * @return the time when the tokens are released.\n\t */\n\tfunction releaseTime() public view returns (uint256) {\n\t\treturn _releaseTime;\n\t}\n\n\t/**\n\t * @notice Transfers tokens held by timelock to beneficiary.\n\t */\n\tfunction release() public {\n\t\t// solium-disable-next-line security/no-block-members\n\t\trequire(block.timestamp >= _releaseTime);\n\n\t\tuint256 amount = _token.balanceOf(address(this));\n\t\trequire(amount > 0);\n\n\t\t_token.transfer(_beneficiary, amount);\n\t}\n}\n\n\ncontract MassVestingSender is Ownable\n{\n\tmapping(uint32 => bool) processedTransactions;\n\n\tevent VestingTransfer(\n\t\taddress indexed _recipient,\n\t\taddress indexed _lock,\n\t\tuint32 indexed _vesting,\n\t\tuint _amount);\n\n\tfunction bulkTransfer(ERC20 token, uint32[] payment_ids, address[] receivers, uint256[] transfers, uint32[] vesting) external\n\t{\n\t\trequire(payment_ids.length == receivers.length);\n\t\trequire(payment_ids.length == transfers.length);\n\t\trequire(payment_ids.length == vesting.length);\n\n\t\tfor (uint i = 0; i < receivers.length; i++)\n\t\t{\n\t\t\tif (!processedTransactions[payment_ids[i]])\n\t\t\t{\n\t\t\t\tTokenTimelock vault = new TokenTimelock(token, receivers[i], vesting[i]);\n\n\t\t\t\trequire(token.transfer(address(vault), transfers[i]));\n\n\t\t\t\tprocessedTransactions[payment_ids[i]] = true;\n\n\t\t\t\temit VestingTransfer(receivers[i], address(vault), vesting[i], transfers[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction r(ERC20 token) external onlyOwner\n\t{\n\t\ttoken.transfer(owner, token.balanceOf(address(this)));\n\t}\n}",
  "bytecode": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e8c806100536000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063566ab6f91461006757806363751a6e146100aa5780638da5cb5b1461014d578063f2fde38b146101a4575b600080fd5b34801561007357600080fd5b506100a8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506101e7565b005b3480156100b657600080fd5b5061014b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190820180359060200191909192939192939080359060200190820180359060200191909192939192939080359060200190820180359060200191909192939192939080359060200190820180359060200191909192939192939050505061041a565b005b34801561015957600080fd5b506101626107c7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101b057600080fd5b506101e5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107ec565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561024257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561031b57600080fd5b505af115801561032f573d6000803e3d6000fd5b505050506040513d602081101561034557600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156103db57600080fd5b505af11580156103ef573d6000803e3d6000fd5b505050506040513d602081101561040557600080fd5b81019080805190602001909291905050505050565b600080878790508a8a905014151561043157600080fd5b858590508a8a905014151561044557600080fd5b838390508a8a905014151561045957600080fd5b600091505b878790508210156107ba57600160008b8b85818110151561047b57fe5b9050602002013563ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900460ff1615156107ad578a88888481811015156104c557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1685858581811015156104f057fe5b9050602002013563ffffffff16610505610941565b808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018263ffffffff1681526020019350505050604051809103906000f080158015610597573d6000803e3d6000fd5b5090508a73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8288888681811015156105c557fe5b905060200201356040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561065157600080fd5b505af1158015610665573d6000803e3d6000fd5b505050506040513d602081101561067b57600080fd5b8101908080519060200190929190505050151561069757600080fd5b60018060008c8c8681811015156106aa57fe5b9050602002013563ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555083838381811015156106f657fe5b9050602002013563ffffffff1663ffffffff168173ffffffffffffffffffffffffffffffffffffffff16898985818110151561072e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f9209cd2cbd1e5c7387e2391442ee1022a03b0073deaa086c0543e766295fa668898987818110151561079057fe5b905060200201356040518082815260200191505060405180910390a45b818060010192505061045e565b5050505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561084757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561088357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60405161050f80610952833901905600608060405234801561001057600080fd5b5060405160608061050f833981018060405281019080805190602001909291908051906020019092919080519060200190929190505050428111151561005557600080fd5b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600281905550505050610420806100ef6000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806338af3eed1461006757806386d1a69f146100be578063b91d4001146100d5578063fc0c546a14610100575b600080fd5b34801561007357600080fd5b5061007c610157565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100ca57600080fd5b506100d3610181565b005b3480156100e157600080fd5b506100ea6103c1565b6040518082815260200191505060405180910390f35b34801561010c57600080fd5b506101156103cb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600254421015151561019457600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561025057600080fd5b505af1158015610264573d6000803e3d6000fd5b505050506040513d602081101561027a57600080fd5b8101908080519060200190929190505050905060008111151561029c57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561038257600080fd5b505af1158015610396573d6000803e3d6000fd5b505050506040513d60208110156103ac57600080fd5b81019080805190602001909291905050505050565b6000600254905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050905600a165627a7a7230582047853e2e18ead0e8b39c327f60bae96d65646ab35e2493f7c539ffc2e6f572690029a165627a7a723058202e613c75f05bd90dcf1e5ff7bbb8699e94418b70b387b7f0bf07394816f6c8050029"
}