{
  "address": "0xe7c79deb6a9b74f691d5f882b7c588bba5db1a20",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MintingContract",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-11\n*/\n\ncontract SafeMath {\n    \n    uint256 constant public MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        require(x <= MAX_UINT256 - y);\n        return x + y;\n    }\n\n    function safeSub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        require(x >= y);\n        return x - y;\n    }\n\n    function safeMul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        if (y == 0) {\n            return 0;\n        }\n        require(x <= (MAX_UINT256 / y));\n        return x * y;\n    }\n}\n\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    function Owned() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        assert(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != owner);\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = 0x0;\n    }\n\n    event OwnerUpdate(address _prevOwner, address _newOwner);\n}\n\ncontract Lockable is Owned {\n\n    uint256 public lockedUntilBlock;\n\n    event ContractLocked(uint256 _untilBlock, string _reason);\n\n    modifier lockAffected {\n        require(block.number > lockedUntilBlock);\n        _;\n    }\n\n    function lockFromSelf(uint256 _untilBlock, string _reason) internal {\n        lockedUntilBlock = _untilBlock;\n        ContractLocked(_untilBlock, _reason);\n    }\n\n\n    function lockUntil(uint256 _untilBlock, string _reason) onlyOwner public {\n        lockedUntilBlock = _untilBlock;\n        ContractLocked(_untilBlock, _reason);\n    }\n}\n\ncontract ERC20TokenInterface {\n  function totalSupply() public constant returns (uint256 _totalSupply);\n  function balanceOf(address _owner) public constant returns (uint256 balance);\n  function transfer(address _to, uint256 _value) public returns (bool success);\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n  function approve(address _spender, uint256 _value) public returns (bool success);\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\ncontract ERC20PrivateInterface {\n    uint256 supply;\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowances;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract tokenRecipientInterface {\n  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\n}\ncontract OwnedInterface {\n    address public owner;\n    address public newOwner;\n\n    modifier onlyOwner {\n        _;\n    }\n}\n\ncontract ERC20Token is ERC20TokenInterface, SafeMath, Owned, Lockable {\n\n    // Name of token\n    string public name;\n    // Abbreviation of tokens name\n    string public symbol;\n    // Number of decimals token has\n    uint8 public decimals;\n    // Address of the contract with minting logic\n    address public mintingContract;\n\n    // Current supply of tokens\n    uint256 supply = 0;\n    // Map of users balances\n    mapping (address => uint256) balances;\n    // Map of users allowances\n    mapping (address => mapping (address => uint256)) allowances;\n\n    // Event that shows that new tokens were created\n    event Mint(address indexed _to, uint256 _value);\n    // Event that shows that old tokens were destroyed\n    event Burn(address indexed _from, uint _value);\n\n    /**\n    * @dev Returns number of tokens in circulation\n    *\n    * @return total number od tokens\n    */\n    function totalSupply() public constant returns (uint256) {\n        return supply;\n    }\n\n    /**\n    * @dev Returns the balance of specific account\n    *\n    * @param _owner The account that caller wants to querry\n    * @return the balance on this account\n    */\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /**\n    * @dev User can transfer tokens with this method, method is disabled if emergencyLock is activated\n    *\n    * @param _to Reciever of tokens\n    * @param _value The amount of tokens that will be sent \n    * @return if successful returns true\n    */\n    function transfer(address _to, uint256 _value) lockAffected public returns (bool success) {\n        require(_to != 0x0 && _to != address(this));\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n        balances[_to] = safeAdd(balanceOf(_to), _value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev This is used to allow some account to utilise transferFrom and sends tokens on your behalf, this method is disabled if emergencyLock is activated\n    *\n    * @param _spender Who can send tokens on your behalf\n    * @param _value The amount of tokens that are allowed to be sent \n    * @return if successful returns true\n    */\n    function approve(address _spender, uint256 _value) lockAffected public returns (bool success) {\n        allowances[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev This is used to send tokens and execute code on other smart contract, this method is disabled if emergencyLock is activated\n    *\n    * @param _spender Contract that is receiving tokens\n    * @param _value The amount that msg.sender is sending\n    * @param _extraData Additional params that can be used on reciving smart contract\n    * @return if successful returns true\n    */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) lockAffected public returns (bool success) {\n        tokenRecipientInterface spender = tokenRecipientInterface(_spender);\n        approve(_spender, _value);\n        spender.receiveApproval(msg.sender, _value, this, _extraData);\n        return true;\n    }\n\n    /**\n    * @dev Sender can transfer tokens on others behalf, this method is disabled if emergencyLock is activated\n    *\n    * @param _from The account that will send tokens\n    * @param _to Account that will recive the tokens\n    * @param _value The amount that msg.sender is sending\n    * @return if successful returns true\n    */\n    function transferFrom(address _from, address _to, uint256 _value) lockAffected public returns (bool success) {\n        require(_to != 0x0 && _to != address(this));\n        balances[_from] = safeSub(balanceOf(_from), _value);\n        balances[_to] = safeAdd(balanceOf(_to), _value);\n        allowances[_from][msg.sender] = safeSub(allowances[_from][msg.sender], _value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Returns the amount od tokens that can be sent from this addres by spender\n    *\n    * @param _owner Account that has tokens\n    * @param _spender Account that can spend tokens\n    * @return remaining balance to spend\n    */\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowances[_owner][_spender];\n    }\n\n    /**\n    * @dev Creates new tokens as long as total supply does not reach limit\n    *\n    * @param _to Reciver od newly created tokens\n    * @param _amount Amount of tokens to be created;\n    */\n    function mint(address _to, uint256 _amount) public {\n        require(msg.sender == mintingContract);\n        supply = safeAdd(supply, _amount);\n        balances[_to] = safeAdd(balances[_to], _amount);\n        emit Mint(_to, _amount);\n        emit Transfer(0x0, _to, _amount);\n    }\n\n    /**\n    * @dev Destroys the amount of tokens and lowers total supply\n    *\n    * @param _amount Number of tokens user wants to destroy\n    */\n    function burn(uint _amount) public {\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _amount);\n        supply = safeSub(supply, _amount);\n        emit Burn(msg.sender, _amount);\n        emit Transfer(msg.sender, 0x0, _amount);\n    }\n\n    /**\n    * @dev Saves exidentaly sent tokens to this contract, can be used only by owner\n    *\n    * @param _tokenAddress Address of tokens smart contract\n    * @param _to Where to send the tokens\n    * @param _amount The amount of tokens that we are salvaging\n    */\n    function salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) onlyOwner public {\n        ERC20TokenInterface(_tokenAddress).transfer(_to, _amount);\n    }\n\n    /**\n    * @dev Disables the contract and wipes all the balances, can be used only by owner\n    */\n    function killContract() public onlyOwner {\n        selfdestruct(owner);\n    }\n}\n\n\n\n\n\n\n\ncontract MintableTokenInterface {\n    function mint(address _to, uint256 _amount) public;\n}\n\n\ncontract MintingContract is Owned, SafeMath{\n    \n    address public tokenAddress;\n    uint256 public tokensAlreadyMinted;\n\n    enum state { crowdsaleMinting, teamMinting, finished}\n    state public mintingState; \n\n    address public crowdsaleContractAddress;\n    uint256 public crowdsaleMintingCap;\n\n    uint256 public teamTokensCap;\n    address public teamTokenAddress;\n\n    uint256 public communityTokensCap;\n    address public communityAddress;\n    uint256 public comunityMintedTokens;\n    \n    function MintingContract() public {\n        tokensAlreadyMinted = 0;\n        crowdsaleMintingCap = 200000000 * 10**18;\n        teamTokensCap = 45000000 * 10**18;\n        teamTokenAddress = 0x0;\n        communityTokensCap = 5000000 * 10**18;\n        communityAddress = 0x0;\n\n    }\n    \n    function doCommunityMinting(address _destination, uint _tokensToMint) public {\n        require(msg.sender == communityAddress || msg.sender == owner);\n        require(safeAdd(comunityMintedTokens, _tokensToMint) <= communityTokensCap);\n\n        MintableTokenInterface(tokenAddress).mint(_destination, _tokensToMint);\n        comunityMintedTokens = safeAdd(comunityMintedTokens, _tokensToMint);\n    }\n\n    function doPresaleMinting(address _destination, uint _tokensToMint) public onlyOwner {\n        require(mintingState == state.crowdsaleMinting);\n        require(safeAdd(tokensAlreadyMinted, _tokensToMint) <= crowdsaleMintingCap);\n\n        MintableTokenInterface(tokenAddress).mint(_destination, _tokensToMint);\n        tokensAlreadyMinted = safeAdd(tokensAlreadyMinted, _tokensToMint);\n    }\n    function doCrowdsaleMinting(address _destination, uint _tokensToMint) public {\n        require(msg.sender == crowdsaleContractAddress);\n        require(mintingState == state.crowdsaleMinting);\n        require(safeAdd(tokensAlreadyMinted, _tokensToMint) <= crowdsaleMintingCap);\n\n        MintableTokenInterface(tokenAddress).mint(_destination, _tokensToMint);\n        tokensAlreadyMinted = safeAdd(tokensAlreadyMinted, _tokensToMint);\n    }\n    \n    function finishCrowdsaleMinting() onlyOwner public {\n        mintingState = state.teamMinting;\n    }\n    \n    function doTeamMinting() public {\n        require(mintingState == state.teamMinting);\n        MintableTokenInterface(tokenAddress).mint(teamTokenAddress, safeSub(crowdsaleMintingCap, tokensAlreadyMinted));\n        MintableTokenInterface(tokenAddress).mint(teamTokenAddress, teamTokensCap);\n        mintingState = state.finished;\n    }\n\n    function setTokenAddress(address _tokenAddress) onlyOwner public {\n        tokenAddress = _tokenAddress;\n    }\n\n    function setCrowdsaleContractAddress(address _crowdsaleContractAddress) onlyOwner public {\n        crowdsaleContractAddress = _crowdsaleContractAddress;\n    }\n    \n    function setTeamTokenAddress(address _address) onlyOwner public {\n        teamTokenAddress = _address;\n    }\n    \n    function setCommunityAddress(address _address) onlyOwner public {\n        communityAddress = _address;\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006003819055506aa56fa5b99019a5c80000006005819055506a25391ee35a05c54d0000006006819055506000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506a0422ca8b0a00a4250000006008819055506000600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611546806101206000396000f30060606040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e6d3a891461014357806314163a831461017a5780631eeccead146101b357806326a4e8d2146101dc57806332dea1301461021557806333a581d21461022a5780635c0e1fff146102535780635d3a5e3b1461029557806369e795be146102ea57806377dcb4f91461031357806379ba5097146103555780638508a6931461036a57806386e476dd1461037f57806389f47b64146103d45780638da5cb5b146104165780639c481c9e1461046b5780639d76ea58146104c0578063a8e3a6b614610515578063b65dc8431461053e578063d38da8c814610567578063d4ee1d90146105a0578063e41fb842146105f5578063f2fde38b1461061e578063f7ce447914610657575b600080fd5b341561014e57600080fd5b610156610690565b6040518082600281111561016657fe5b60ff16815260200191505060405180910390f35b341561018557600080fd5b6101b1600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506106a3565b005b34156101be57600080fd5b6101c661073f565b6040518082815260200191505060405180910390f35b34156101e757600080fd5b610213600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610745565b005b341561022057600080fd5b6102286107e1565b005b341561023557600080fd5b61023d61085f565b6040518082815260200191505060405180910390f35b341561025e57600080fd5b610293600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610883565b005b34156102a057600080fd5b6102a8610a3c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102f557600080fd5b6102fd610a62565b6040518082815260200191505060405180910390f35b341561031e57600080fd5b610353600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a68565b005b341561036057600080fd5b610368610bfa565b005b341561037557600080fd5b61037d610dd6565b005b341561038a57600080fd5b61039261102b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103df57600080fd5b610414600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611051565b005b341561042157600080fd5b6104296111e7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561047657600080fd5b61047e61120c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104cb57600080fd5b6104d3611232565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561052057600080fd5b610528611258565b6040518082815260200191505060405180910390f35b341561054957600080fd5b61055161125e565b6040518082815260200191505060405180910390f35b341561057257600080fd5b61059e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611264565b005b34156105ab57600080fd5b6105b3611300565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561060057600080fd5b610608611326565b6040518082815260200191505060405180910390f35b341561062957600080fd5b610655600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061132c565b005b341561066257600080fd5b61068e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611424565b005b600460009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106fb57fe5b80600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60035481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561079d57fe5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561083957fe5b6001600460006101000a81548160ff0219169083600281111561085857fe5b0217905550565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061092b57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561093657600080fd5b600854610945600a54836114c0565b1115151561095257600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1515610a1657600080fd5b5af11515610a2357600080fd5b505050610a32600a54826114c0565b600a819055505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ac057fe5b60006002811115610acd57fe5b600460009054906101000a900460ff166002811115610ae857fe5b141515610af457600080fd5b600554610b03600354836114c0565b11151515610b1057600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1515610bd457600080fd5b5af11515610be157600080fd5b505050610bf0600354826114c0565b6003819055505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c5657600080fd5b7f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60016002811115610de357fe5b600460009054906101000a900460ff166002811115610dfe57fe5b141515610e0a57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f19600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610e796005546003546114fe565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1515610efd57600080fd5b5af11515610f0a57600080fd5b505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f19600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166006546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1515610ff557600080fd5b5af1151561100257600080fd5b5050506002600460006101000a81548160ff0219169083600281111561102457fe5b0217905550565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110ad57600080fd5b600060028111156110ba57fe5b600460009054906101000a900460ff1660028111156110d557fe5b1415156110e157600080fd5b6005546110f0600354836114c0565b111515156110fd57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15156111c157600080fd5b5af115156111ce57600080fd5b5050506111dd600354826114c0565b6003819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60055481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112bc57fe5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561138457fe5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156113e057600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561147c57fe5b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383111515156114f357600080fd5b818301905092915050565b600081831015151561150f57600080fd5b8183039050929150505600a165627a7a72305820644c40e8bd550b0d8ab1234b7213aac3998bfb91d84e7918bbbcc5bc9af4f9090029"
}