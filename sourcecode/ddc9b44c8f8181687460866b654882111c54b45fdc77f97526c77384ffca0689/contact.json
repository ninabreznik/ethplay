{
  "address": "0xf84c61bb982041c030b8580d1634f00fffb89059",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoMiningWar",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-28\n*/\n\npragma solidity ^0.4.24;\n\n/*\n* CryptoMiningWar - Mining Contest Game\n* Author: InspiGames\n* Website: https://cryptominingwar.github.io/\n*/\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\n/**\n * @title PullPayment\n * @dev Base contract supporting async send for pull payments. Inherit from this\n * contract and use asyncSend instead of send or transfer.\n */\ncontract PullPayment {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) public payments;\n  uint256 public totalPayments;\n\n  /**\n  * @dev Withdraw accumulated balance, called by payee.\n  */\n  function withdrawPayments() public {\n    address payee = msg.sender;\n    uint256 payment = payments[payee];\n\n    require(payment != 0);\n    require(address(this).balance >= payment);\n\n    totalPayments = totalPayments.sub(payment);\n    payments[payee] = 0;\n\n    payee.transfer(payment);\n  }\n\n  /**\n  * @dev Called by the payer to store the sent amount as credit to be pulled.\n  * @param dest The destination address of the funds.\n  * @param amount The amount to transfer.\n  */\n  function asyncSend(address dest, uint256 amount) internal {\n    payments[dest] = payments[dest].add(amount);\n    totalPayments = totalPayments.add(amount);\n  }\n}\n\ninterface MiniGameInterface {\n     function setupMiniGame(uint256 _miningWarRoundNumber, uint256 _miningWarDeadline) external;\n     function isContractMiniGame() external pure returns( bool _isContractMiniGame );\n}\n\ncontract CryptoMiningWar is PullPayment {\n    bool public initialized = false;\n    uint256 public roundNumber = 0;\n    uint256 public deadline;\n    uint256 public CRTSTAL_MINING_PERIOD = 86400; \n    uint256 public HALF_TIME = 8 hours;\n    uint256 public ROUND_TIME = 86400 * 7;\n\tuint256 public prizePool = 0;\n    uint256 BASE_PRICE = 0.005 ether;\n    uint256 RANK_LIST_LIMIT = 10000;\n    uint256 randNonce = 0;\n    uint256 public totalContractMiniGame = 0;\n    \n    mapping(uint256 => address) public contractsMiniGameAddress;\n    //miner info\n    mapping(uint256 => MinerData) private minerData;\n    uint256 private numberOfMiners;\n    // plyer info\n    mapping(address => PlayerData) public players;\n    //booster info\n    uint256 private numberOfBoosts;\n    mapping(uint256 => BoostData) private boostData;\n    //mini game contract info\n    mapping(address => bool) public miniGames;   \n    \n    uint256 private numberOfRank;\n    address[21] rankList;\n    address public sponsor;\n    uint256 public sponsorLevel;\n    address public administrator;\n    /*** DATATYPES ***/\n    struct PlayerData {\n        uint256 roundNumber;\n        mapping(uint256 => uint256) minerCount;\n        uint256 hashrate;\n        uint256 crystals;\n        uint256 lastUpdateTime;\n        uint256 referral_count;\n        uint256 noQuest;\n    }\n    struct MinerData {\n        uint256 basePrice;\n        uint256 baseProduct;\n        uint256 limit;\n    }\n    struct BoostData {\n        address owner;\n        uint256 boostRate;\n        uint256 startingLevel;\n        uint256 startingTime;\n        uint256 halfLife;\n    }\n    modifier isNotOver() \n    {\n        require(now <= deadline);\n        _;\n    }\n    modifier disableContract()\n    {\n        require(tx.origin == msg.sender);\n        _;\n    }\n    modifier isCurrentRound() \n    {\n        require(players[msg.sender].roundNumber == roundNumber);\n        _;\n    }\n    modifier onlyContractsMiniGame() \n    {\n        require(miniGames[msg.sender] == true);\n        _;\n    }\n    event eventDoQuest(\n        uint clientNumber,\n        uint randomNumber\n    );\n    constructor() public {\n        administrator = msg.sender;\n        numberOfMiners = 8;\n        numberOfBoosts = 5;\n        numberOfRank = 21;\n        //init miner data\n        //                      price,          prod.     limit\n        minerData[0] = MinerData(10,            10,         10);   //lv1\n        minerData[1] = MinerData(100,           200,        2);    //lv2\n        minerData[2] = MinerData(400,           800,        4);    //lv3\n        minerData[3] = MinerData(1600,          3200,       8);    //lv4 \n        minerData[4] = MinerData(6400,          9600,       16);   //lv5 \n        minerData[5] = MinerData(25600,         38400,      32);   //lv6 \n        minerData[6] = MinerData(204800,        204800,     64);   //lv7 \n        minerData[7] = MinerData(1638400,       819200,     65536); //lv8\n    }\n    function () public payable\n    {\n\t\tprizePool = SafeMath.add(prizePool, msg.value);\n    }\n    function startGame() public\n    {\n        require(msg.sender == administrator);\n        require(!initialized);\n        \n        startNewRound();\n        initialized = true;\n    }\n    /**\n    * @dev add crystals to a player\n    * msg.sender should be in the list of mini game\n    */\n    function addCrystal( address _addr, uint256 _value ) public onlyContractsMiniGame\n    {\n        require(players[_addr].roundNumber == roundNumber);\n\n        uint256 crystals = SafeMath.mul(_value, CRTSTAL_MINING_PERIOD);\n        PlayerData storage p = players[_addr];\n        p.crystals =  SafeMath.add( p.crystals, crystals ); \n    }\n    /**\n    * @dev sub player's crystals\n    * msg.sender should be in the list of mini game\n    * @param _addr player address\n    */\n    function subCrystal( address _addr, uint256 _value ) public onlyContractsMiniGame\n    {\n        require(players[_addr].roundNumber == roundNumber);\n        updateCrystal( _addr );\n        uint256 crystals = SafeMath.mul(_value,CRTSTAL_MINING_PERIOD);\n        require(crystals <= players[_addr].crystals);\n\n        PlayerData storage p = players[_addr];\n        p.crystals =  SafeMath.sub( p.crystals, crystals ); \n    }\n    /**\n    * @dev add hashrate to a player.\n    * msg.sender should be in the list of mini game\n    */\n    function addHashrate( address _addr, uint256 _value ) public onlyContractsMiniGame\n    {\n        require(players[_addr].roundNumber == roundNumber);\n\n        PlayerData storage p = players[_addr];\n        p.hashrate =  SafeMath.add( p.hashrate, _value ); \n    }\n    /**\n    * @dev sub player's hashrate\n    * msg.sender should be in the list of mini game\n    */\n    function subHashrate( address _addr, uint256 _value ) public onlyContractsMiniGame\n    {\n        require(players[_addr].roundNumber == roundNumber && players[_addr].hashrate >= _value);\n\n        PlayerData storage p = players[_addr];\n        \n        p.hashrate = SafeMath.sub( p.hashrate, _value ); \n    }\n    function setContractsMiniGame( address _contractMiniGameAddress ) public  \n    {\n        require(administrator == msg.sender);\n\n        MiniGameInterface MiniGame = MiniGameInterface( _contractMiniGameAddress );\n        bool isContractMiniGame = MiniGame.isContractMiniGame();\n        require( isContractMiniGame == true );\n\n        if ( miniGames[_contractMiniGameAddress] == false ) {\n            miniGames[_contractMiniGameAddress] = true;\n            contractsMiniGameAddress[totalContractMiniGame] = _contractMiniGameAddress;\n            totalContractMiniGame = totalContractMiniGame + 1;\n        }\n    }\n    /**\n    * @dev remove mini game contract from main contract\n    * @param _contractMiniGameAddress mini game contract address\n    */\n    function removeContractMiniGame(address _contractMiniGameAddress) public\n    {\n        require(administrator == msg.sender);        \n        miniGames[_contractMiniGameAddress] = false;\n    }\n\n    function startNewRound() private \n    {\n        deadline = SafeMath.add(now, ROUND_TIME);\n        roundNumber = SafeMath.add(roundNumber, 1);\n        initData();\n        setupMiniGame();\n    }\n    function setupMiniGame() private \n    {\n        for ( uint256 index = 0; index < totalContractMiniGame; index++ ) {\n            if (miniGames[contractsMiniGameAddress[index]] == true) {\n                MiniGameInterface MiniGame = MiniGameInterface( contractsMiniGameAddress[index] );\n                MiniGame.setupMiniGame(roundNumber,deadline);\n            }   \n        }\n    }\n    function initData() private\n    {\n        sponsor = administrator;\n        sponsorLevel = 6;\n        //init booster data\n        boostData[0] = BoostData(0, 150, 1, now, HALF_TIME);\n        boostData[1] = BoostData(0, 175, 1, now, HALF_TIME);\n        boostData[2] = BoostData(0, 200, 1, now, HALF_TIME);\n        boostData[3] = BoostData(0, 225, 1, now, HALF_TIME);\n        boostData[4] = BoostData(msg.sender, 250, 2, now, HALF_TIME);\n        for (uint256 idx = 0; idx < numberOfRank; idx++) {\n            rankList[idx] = 0;\n        }\n    }\n    function lottery() public disableContract\n    {\n        require(now > deadline);\n        uint256 balance = SafeMath.div(SafeMath.mul(prizePool, 90), 100);\n\t\tuint256 devFee = SafeMath.div(SafeMath.mul(prizePool, 5), 100);\n\t\tasyncSend(administrator, devFee);\n        uint8[10] memory profit = [30,20,10,8,7,5,5,5,5,5];\n\t\tuint256 totalPayment = 0;\n\t\tuint256 rankPayment = 0;\n        for(uint256 idx = 0; idx < 10; idx++){\n            if(rankList[idx] != 0){\n\t\t\t\trankPayment = SafeMath.div(SafeMath.mul(balance, profit[idx]),100);\n\t\t\t\tasyncSend(rankList[idx], rankPayment);\n\t\t\t\ttotalPayment = SafeMath.add(totalPayment, rankPayment);\n            }\n        }\n\t\tprizePool = SafeMath.add(devFee, SafeMath.sub(balance, totalPayment));\n        startNewRound();\n    }\n    function getRankList() public view returns(address[21])\n    {\n        return rankList;\n    }\n    //sponser\n    function becomeSponsor() public isNotOver payable\n    {\n        require(msg.value >= getSponsorFee());\n\t\trequire(msg.sender != sponsor);\n\t\tuint256 sponsorPrice = getCurrentPrice(sponsorLevel);\n\t\tasyncSend(sponsor, sponsorPrice);\n\t\tprizePool = SafeMath.add(prizePool, SafeMath.sub(msg.value, sponsorPrice));\n        sponsor = msg.sender;\n        sponsorLevel = SafeMath.add(sponsorLevel, 1);\n    }\n    function getSponsorFee() public view returns(uint256 sponsorFee)\n    {\n        sponsorFee = getCurrentPrice(SafeMath.add(sponsorLevel, 1));\n    }\n    //--------------------------------------------------------------------------\n    // Miner \n    //--------------------------------------------------------------------------\n    /**\n    * @dev get a free miner\n    */\n    function getFreeMiner() public disableContract isNotOver\n    {\n        require(players[msg.sender].roundNumber != roundNumber);\n        PlayerData storage p = players[msg.sender];\n        //reset player data\n        if(p.hashrate > 0){\n            for (uint idx = 1; idx < numberOfMiners; idx++) {\n                p.minerCount[idx] = 0;\n            }\n        }\n        MinerData storage m0 = minerData[0];\n        p.crystals = 0;\n        p.roundNumber = roundNumber;\n        //free miner\n        p.lastUpdateTime = now;\n        p.referral_count = 0;\n        p.noQuest        = 0;\n        p.minerCount[0] = 1;\n        p.hashrate = m0.baseProduct;\n    }\n\tfunction doQuest(uint256 clientNumber) disableContract isCurrentRound isNotOver public\n\t{\n\t\tPlayerData storage p = players[msg.sender];\n        p.noQuest            = SafeMath.add(p.noQuest, 1);\n\t\tuint256 randomNumber = getRandomNumber(msg.sender);\n\t\tif(clientNumber == randomNumber) {\n            p.referral_count = SafeMath.add(p.referral_count, 1);\n\t\t}\n\t\temit eventDoQuest(clientNumber, randomNumber);\n\t}\n    function buyMiner(uint256[] minerNumbers) public isNotOver isCurrentRound\n    {   \n        require(minerNumbers.length == numberOfMiners);\n        uint256 minerIdx = 0;\n        MinerData memory m;\n        for (; minerIdx < numberOfMiners; minerIdx++) {\n            m = minerData[minerIdx];\n            if(minerNumbers[minerIdx] > m.limit || minerNumbers[minerIdx] < 0){\n                revert();\n            }\n        }\n        updateCrystal(msg.sender);\n        PlayerData storage p = players[msg.sender];\n        uint256 price = 0;\n        uint256 minerNumber = 0;\n        for (minerIdx = 0; minerIdx < numberOfMiners; minerIdx++) {\n            minerNumber = minerNumbers[minerIdx];\n            if (minerNumber > 0) {\n                m = minerData[minerIdx];\n                price = SafeMath.add(price, SafeMath.mul(m.basePrice, minerNumber));\n            }\n        }\n        price = SafeMath.mul(price, CRTSTAL_MINING_PERIOD);\n        if(p.crystals < price){\n            revert();\n        }\n        p.crystals = SafeMath.sub(p.crystals, price);\n        uint256 hashrate = 0;\n        for (minerIdx = 0; minerIdx < numberOfMiners; minerIdx++) {\n            minerNumber = minerNumbers[minerIdx];\n            if (minerNumber > 0) {\n                m = minerData[minerIdx];\n                uint256 currentMinerCount = p.minerCount[minerIdx];\n                p.minerCount[minerIdx] = SafeMath.min(m.limit, SafeMath.add(p.minerCount[minerIdx], minerNumber));\n                // calculate no hashrate you want buy\n                hashrate = SafeMath.add(hashrate, SafeMath.mul(SafeMath.sub(p.minerCount[minerIdx],currentMinerCount), minerData[minerIdx].baseProduct));\n            }\n        }\n\n        updateHashrate(msg.sender, hashrate);\n    }\n    function getPlayerData(address addr) public view\n    returns (uint256 crystals, uint256 lastupdate, uint256 hashratePerDay, uint256[8] miners, uint256 hasBoost, uint256 referral_count, uint256 playerBalance, uint256 noQuest )\n    {\n        PlayerData storage p = players[addr];\n        if(p.roundNumber != roundNumber){\n            p = players[0];\n        }\n        crystals   = SafeMath.div(p.crystals, CRTSTAL_MINING_PERIOD);\n        lastupdate = p.lastUpdateTime;\n        hashratePerDay = addReferralHashrate(addr, p.hashrate);\n        uint256 i = 0;\n        for(i = 0; i < numberOfMiners; i++)\n        {\n            miners[i] = p.minerCount[i];\n        }\n        hasBoost = hasBooster(addr);\n        referral_count = p.referral_count;\n        noQuest        = p.noQuest; \n\t\tplayerBalance = payments[addr];\n    }\n    function getHashratePerDay(address minerAddr) public view returns (uint256 personalProduction)\n    {\n        PlayerData storage p = players[minerAddr];   \n        personalProduction = addReferralHashrate(minerAddr, p.hashrate);\n        uint256 boosterIdx = hasBooster(minerAddr);\n        if (boosterIdx != 999) {\n            BoostData storage b = boostData[boosterIdx];\n            personalProduction = SafeMath.div(SafeMath.mul(personalProduction, b.boostRate), 100);\n        }\n    }\n    //--------------------------------------------------------------------------\n    // BOOSTER \n    //--------------------------------------------------------------------------\n    function buyBooster(uint256 idx) public isNotOver isCurrentRound payable \n    {\n        require(idx < numberOfBoosts);\n        BoostData storage b = boostData[idx];\n        if(msg.value < getBoosterPrice(idx) || msg.sender == b.owner){\n            revert();\n        }\n        address beneficiary = b.owner;\n\t\tuint256 devFeePrize = devFee(getBoosterPrice(idx));\n\t\tasyncSend(sponsor, devFeePrize);\n\t\tuint256 refundPrize = 0;\n        if(beneficiary != 0){\n\t\t\trefundPrize = SafeMath.div(SafeMath.mul(getBoosterPrice(idx), 55), 100);\n\t\t\tasyncSend(beneficiary, refundPrize);\n        }\n\t\tprizePool = SafeMath.add(prizePool, SafeMath.sub(msg.value, SafeMath.add(devFeePrize, refundPrize)));\n        updateCrystal(msg.sender);\n        updateCrystal(beneficiary);\n        uint256 level = getCurrentLevel(b.startingLevel, b.startingTime, b.halfLife);\n        b.startingLevel = SafeMath.add(level, 1);\n        b.startingTime = now;\n        // transfer ownership    \n        b.owner = msg.sender;\n    }\n    function getBoosterData(uint256 idx) public view returns (address owner,uint256 boostRate, uint256 startingLevel, \n        uint256 startingTime, uint256 currentPrice, uint256 halfLife)\n    {\n        require(idx < numberOfBoosts);\n        owner            = boostData[idx].owner;\n        boostRate        = boostData[idx].boostRate; \n        startingLevel    = boostData[idx].startingLevel;\n        startingTime     = boostData[idx].startingTime;\n        currentPrice     = getBoosterPrice(idx);\n        halfLife         = boostData[idx].halfLife;\n    }\n    function getBoosterPrice(uint256 index) public view returns (uint256)\n    {\n        BoostData storage booster = boostData[index];\n        return getCurrentPrice(getCurrentLevel(booster.startingLevel, booster.startingTime, booster.halfLife));\n    }\n    function hasBooster(address addr) public view returns (uint256 boostIdx)\n    {         \n        boostIdx = 999;\n        for(uint256 i = 0; i < numberOfBoosts; i++){\n            uint256 revert_i = numberOfBoosts - i - 1;\n            if(boostData[revert_i].owner == addr){\n                boostIdx = revert_i;\n                break;\n            }\n        }\n    }\n    //--------------------------------------------------------------------------\n    // Other \n    //--------------------------------------------------------------------------\n    function devFee(uint256 amount) public pure returns(uint256)\n    {\n        return SafeMath.div(SafeMath.mul(amount, 5), 100);\n    }\n    function getBalance() public view returns(uint256)\n    {\n        return address(this).balance;\n    }\n\t//@dev use this function in case of bug\n    function upgrade(address addr) public \n    {\n        require(msg.sender == administrator);\n        selfdestruct(addr);\n    }\n\n    //--------------------------------------------------------------------------\n    // Private \n    //--------------------------------------------------------------------------\n    /**\n    * @param addr is player address you want add hash rate\n    * @param _hashrate is no hashrate you want add for this player\n    */\n    function updateHashrate(address addr, uint256 _hashrate) private\n    {\n        PlayerData storage p = players[addr];\n        p.hashrate = SafeMath.add(p.hashrate, _hashrate);\n        if(p.hashrate > RANK_LIST_LIMIT){\n            updateRankList(addr);\n        }\n    }\n    function updateCrystal(address addr) private\n    {\n        require(now > players[addr].lastUpdateTime);\n        if (players[addr].lastUpdateTime != 0) {\n            PlayerData storage p = players[addr];\n            uint256 secondsPassed = SafeMath.sub(now, p.lastUpdateTime);\n            uint256 revenue = getHashratePerDay(addr);\n            p.lastUpdateTime = now;\n            if (revenue > 0) {\n                revenue = SafeMath.mul(revenue, secondsPassed);\n                p.crystals = SafeMath.add(p.crystals, revenue);\n            }\n        }\n    }\n    function addReferralHashrate(address addr, uint256 hashrate) private view returns(uint256 personalProduction) \n    {\n        PlayerData storage p = players[addr];\n        if(p.referral_count < 5){\n            personalProduction = SafeMath.add(hashrate, SafeMath.mul(p.referral_count, 10));\n        }else if(p.referral_count < 10){\n            personalProduction = SafeMath.add(hashrate, SafeMath.add(50, SafeMath.mul(p.referral_count, 10)));\n        }else{\n            personalProduction = SafeMath.add(hashrate, 200);\n        }\n    }\n    function getCurrentLevel(uint256 startingLevel, uint256 startingTime, uint256 halfLife) private view returns(uint256) \n    {\n        uint256 timePassed=SafeMath.sub(now, startingTime);\n        uint256 levelsPassed=SafeMath.div(timePassed, halfLife);\n        if (startingLevel < levelsPassed) {\n            return 0;\n        }\n        return SafeMath.sub(startingLevel, levelsPassed);\n    }\n    function getCurrentPrice(uint256 currentLevel) private view returns(uint256) \n    {\n        return SafeMath.mul(BASE_PRICE, 2**currentLevel);\n    }\n    function updateRankList(address addr) private returns(bool)\n    {\n        uint256 idx = 0;\n        PlayerData storage insert = players[addr];\n        PlayerData storage lastOne = players[rankList[19]];\n        if(insert.hashrate < lastOne.hashrate) {\n            return false;\n        }\n        address[21] memory tempList = rankList;\n        if(!inRankList(addr)){\n            tempList[20] = addr;\n            quickSort(tempList, 0, 20);\n        }else{\n            quickSort(tempList, 0, 19);\n        }\n        for(idx = 0;idx < 21; idx++){\n            if(tempList[idx] != rankList[idx]){\n                rankList[idx] = tempList[idx];\n            }\n        }\n        \n        return true;\n    }\n    function inRankList(address addr) internal view returns(bool)\n    {\n        for(uint256 idx = 0;idx < 20; idx++){\n            if(addr == rankList[idx]){\n                return true;\n            }\n        }\n        return false;\n    }\n\tfunction getRandomNumber(address playerAddress) internal returns(uint256 randomNumber) {\n        randNonce++;\n        randomNumber = uint256(keccak256(abi.encodePacked(now, playerAddress, randNonce))) % 3;\n    }\n    function quickSort(address[21] list, int left, int right) internal\n    {\n        int i = left;\n        int j = right;\n        if(i == j) return;\n        address addr = list[uint(left + (right - left) / 2)];\n        PlayerData storage p = players[addr];\n        while (i <= j) {\n            while (players[list[uint(i)]].hashrate > p.hashrate) i++;\n            while (p.hashrate > players[list[uint(j)]].hashrate) j--;\n            if (i <= j) {\n                (list[uint(i)], list[uint(j)]) = (list[uint(j)], list[uint(i)]);\n                i++;\n                j--;\n            }\n        }\n        if (left < j)\n            quickSort(list, left, j);\n        if (i < right)\n            quickSort(list, i, right);\n    }\n}",
  "bytecode": ""
}