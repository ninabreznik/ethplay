{
  "address": "0xcbd901db55c9139828f7b5d5cbfd5afeab01d066",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoxmasEscrow",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-16\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\ncontract PauserRole {\n  using Roles for Roles.Role;\n\n  event PauserAdded(address indexed account);\n  event PauserRemoved(address indexed account);\n\n  Roles.Role private pausers;\n\n  constructor() internal {\n    _addPauser(msg.sender);\n  }\n\n  modifier onlyPauser() {\n    require(isPauser(msg.sender));\n    _;\n  }\n\n  function isPauser(address account) public view returns (bool) {\n    return pausers.has(account);\n  }\n\n  function addPauser(address account) public onlyPauser {\n    _addPauser(account);\n  }\n\n  function renouncePauser() public {\n    _removePauser(msg.sender);\n  }\n\n  function _addPauser(address account) internal {\n    pausers.add(account);\n    emit PauserAdded(account);\n  }\n\n  function _removePauser(address account) internal {\n    pausers.remove(account);\n    emit PauserRemoved(account);\n  }\n}\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n  event Paused(address account);\n  event Unpaused(address account);\n\n  bool private _paused;\n\n  constructor() internal {\n    _paused = false;\n  }\n\n  /**\n   * @return true if the contract is paused, false otherwise.\n   */\n  function paused() public view returns(bool) {\n    return _paused;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!_paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(_paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyPauser whenNotPaused {\n    _paused = true;\n    emit Paused(msg.sender);\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyPauser whenPaused {\n    _paused = false;\n    emit Unpaused(msg.sender);\n  }\n}\n\n/**\n * @title IERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface IERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n/**\n * @title ERC165\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract ERC165 is IERC165 {\n\n  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) private _supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    internal\n  {\n    _registerInterface(_InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return _supportedInterfaces[interfaceId];\n  }\n\n  /**\n   * @dev internal method for registering an interface\n   */\n  function _registerInterface(bytes4 interfaceId)\n    internal\n  {\n    require(interfaceId != 0xffffffff);\n    _supportedInterfaces[interfaceId] = true;\n  }\n}\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721 is IERC165 {\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 indexed tokenId\n  );\n  event Approval(\n    address indexed owner,\n    address indexed approved,\n    uint256 indexed tokenId\n  );\n  event ApprovalForAll(\n    address indexed owner,\n    address indexed operator,\n    bool approved\n  );\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n  function approve(address to, uint256 tokenId) public;\n  function getApproved(uint256 tokenId)\n    public view returns (address operator);\n\n  function setApprovalForAll(address operator, bool _approved) public;\n  function isApprovedForAll(address owner, address operator)\n    public view returns (bool);\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n    public;\n\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes data\n  )\n    public;\n}\n\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Metadata is IERC721 {\n  function name() external view returns (string);\n  function symbol() external view returns (string);\n  function tokenURI(uint256 tokenId) external view returns (string);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Enumerable is IERC721 {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address owner,\n    uint256 index\n  )\n    public\n    view\n    returns (uint256 tokenId);\n\n  function tokenByIndex(uint256 index) public view returns (uint256);\n}\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract IERC721Receiver {\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safeTransfer`. This function MUST return the function selector,\n   * otherwise the caller will revert the transaction. The selector to be\n   * returned can be obtained as `this.onERC721Received.selector`. This\n   * function MAY throw to revert and reject the transfer.\n   * Note: the ERC721 contract address is always the message sender.\n   * @param operator The address which called `safeTransferFrom` function\n   * @param from The address which previously owned the token\n   * @param tokenId The NFT identifier which is being transferred\n   * @param data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address operator,\n    address from,\n    uint256 tokenId,\n    bytes data\n  )\n    public\n    returns(bytes4);\n}\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param account address of the account to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address account) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(account) }\n    return size > 0;\n  }\n\n}\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC165, IERC721 {\n\n  using SafeMath for uint256;\n  using Address for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) private _tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) private _tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) private _ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  constructor()\n    public\n  {\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(_InterfaceId_ERC721);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address owner) public view returns (uint256) {\n    require(owner != address(0));\n    return _ownedTokensCount[owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 tokenId) public view returns (address) {\n    address owner = _tokenOwner[tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param to address to be approved for the given token ID\n   * @param tokenId uint256 ID of the token to be approved\n   */\n  function approve(address to, uint256 tokenId) public {\n    address owner = ownerOf(tokenId);\n    require(to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    _tokenApprovals[tokenId] = to;\n    emit Approval(owner, to, tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * Reverts if the token ID does not exist.\n   * @param tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 tokenId) public view returns (address) {\n    require(_exists(tokenId));\n    return _tokenApprovals[tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param to operator address to set the approval\n   * @param approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address to, bool approved) public {\n    require(to != msg.sender);\n    _operatorApprovals[msg.sender][to] = approved;\n    emit ApprovalForAll(msg.sender, to, approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param owner owner address which you want to query the approval of\n   * @param operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address owner,\n    address operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return _operatorApprovals[owner][operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  )\n    public\n  {\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n    require(to != address(0));\n\n    _clearApproval(from, tokenId);\n    _removeTokenFrom(from, tokenId);\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(from, to, tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  )\n    public\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(from, to, tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes _data\n  )\n    public\n  {\n    transferFrom(from, to, tokenId);\n    // solium-disable-next-line arg-overflow\n    require(_checkOnERC721Received(from, to, tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function _exists(uint256 tokenId) internal view returns (bool) {\n    address owner = _tokenOwner[tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param spender address of the spender to query\n   * @param tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function _isApprovedOrOwner(\n    address spender,\n    uint256 tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      spender == owner ||\n      getApproved(tokenId) == spender ||\n      isApprovedForAll(owner, spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param to The address that will own the minted token\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address to, uint256 tokenId) internal {\n    require(to != address(0));\n    _addTokenTo(to, tokenId);\n    emit Transfer(address(0), to, tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address owner, uint256 tokenId) internal {\n    _clearApproval(owner, tokenId);\n    _removeTokenFrom(owner, tokenId);\n    emit Transfer(owner, address(0), tokenId);\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n   * @param to address representing the new owner of the given token ID\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function _addTokenTo(address to, uint256 tokenId) internal {\n    require(_tokenOwner[tokenId] == address(0));\n    _tokenOwner[tokenId] = to;\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n   * and doesn't clear approvals.\n   * @param from address representing the previous owner of the given token ID\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n    require(ownerOf(tokenId) == from);\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n    _tokenOwner[tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param from address representing the previous owner of the given token ID\n   * @param to target address that will receive the tokens\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function _checkOnERC721Received(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!to.isContract()) {\n      return true;\n    }\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n      msg.sender, from, tokenId, _data);\n    return (retval == _ERC721_RECEIVED);\n  }\n\n  /**\n   * @dev Private function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param owner owner of the token\n   * @param tokenId uint256 ID of the token to be transferred\n   */\n  function _clearApproval(address owner, uint256 tokenId) private {\n    require(ownerOf(tokenId) == owner);\n    if (_tokenApprovals[tokenId] != address(0)) {\n      _tokenApprovals[tokenId] = address(0);\n    }\n  }\n}\n\ncontract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\n  // Token name\n  string private _name;\n\n  // Token symbol\n  string private _symbol;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) private _tokenURIs;\n\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string name, string symbol) public {\n    _name = name;\n    _symbol = symbol;\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string) {\n    return _name;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string) {\n    return _symbol;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 tokenId) external view returns (string) {\n    require(_exists(tokenId));\n    return _tokenURIs[tokenId];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param tokenId uint256 ID of the token to set its URI\n   * @param uri string URI to assign\n   */\n  function _setTokenURI(uint256 tokenId, string uri) internal {\n    require(_exists(tokenId));\n    _tokenURIs[tokenId] = uri;\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param owner owner of the token to burn\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address owner, uint256 tokenId) internal {\n    super._burn(owner, tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\n      delete _tokenURIs[tokenId];\n    }\n  }\n}\n\n\n\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) private _ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) private _ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] private _allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) private _allTokensIndex;\n\n  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  /**\n   * @dev Constructor function\n   */\n  constructor() public {\n    // register the supported interface to conform to ERC721 via ERC165\n    _registerInterface(_InterfaceId_ERC721Enumerable);\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param owner address owning the tokens list to be accessed\n   * @param index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address owner,\n    uint256 index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(index < balanceOf(owner));\n    return _ownedTokens[owner][index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return _allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 index) public view returns (uint256) {\n    require(index < totalSupply());\n    return _allTokens[index];\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * This function is internal due to language limitations, see the note in ERC721.sol.\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n   * @param to address representing the new owner of the given token ID\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function _addTokenTo(address to, uint256 tokenId) internal {\n    super._addTokenTo(to, tokenId);\n    uint256 length = _ownedTokens[to].length;\n    _ownedTokens[to].push(tokenId);\n    _ownedTokensIndex[tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * This function is internal due to language limitations, see the note in ERC721.sol.\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n   * and doesn't clear approvals.\n   * @param from address representing the previous owner of the given token ID\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n    super._removeTokenFrom(from, tokenId);\n\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n    // then delete the last slot.\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\n    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\n\n    _ownedTokens[from][tokenIndex] = lastToken;\n    // This also deletes the contents at the last position of the array\n    _ownedTokens[from].length--;\n\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    _ownedTokensIndex[tokenId] = 0;\n    _ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param to address the beneficiary that will own the minted token\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address to, uint256 tokenId) internal {\n    super._mint(to, tokenId);\n\n    _allTokensIndex[tokenId] = _allTokens.length;\n    _allTokens.push(tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param owner owner of the token to burn\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address owner, uint256 tokenId) internal {\n    super._burn(owner, tokenId);\n\n    // Reorg all tokens array\n    uint256 tokenIndex = _allTokensIndex[tokenId];\n    uint256 lastTokenIndex = _allTokens.length.sub(1);\n    uint256 lastToken = _allTokens[lastTokenIndex];\n\n    _allTokens[tokenIndex] = lastToken;\n    _allTokens[lastTokenIndex] = 0;\n\n    _allTokens.length--;\n    _allTokensIndex[tokenId] = 0;\n    _allTokensIndex[lastToken] = tokenIndex;\n  }\n}\n\n\n\ncontract NFT is ERC721Metadata,\n  ERC721Enumerable,\n  Ownable {\n  \n  constructor(string name, string symbol) public ERC721Metadata(name, symbol){\n  }\n    \n  function mintWithTokenURI(\n\t\tuint256 _id,\t\t\t    \n\t\tstring _uri\n\t\t) onlyOwner public {\n    super._mint(owner(), _id);\n    super._setTokenURI(_id, _uri);\n  }\n  \n}\n\n\n\ncontract CryptoxmasEscrow is Pausable, Ownable {\n  using SafeMath for uint256;\n  \n  /* Giveth */\n  address public givethBridge;\n  uint64 public givethReceiverId;\n\n  /* NFT */\n  NFT public nft; \n  \n  // commission to fund paying gas for claim transactions\n  uint public EPHEMERAL_ADDRESS_FEE = 0.01 ether;\n  uint public MIN_PRICE = 0.05 ether; // minimum token price\n  uint public tokensCounter; // minted tokens counter\n  \n  /* GIFT */\n  enum Statuses { Empty, Deposited, Claimed, Cancelled }  \n  \n  struct Gift {\n    address sender;\n    uint claimEth; // ETH for receiver    \n    uint256 tokenId;\n    Statuses status;\n    string msgHash; // IFPS message hash\n  }\n\n  // Mappings of transitAddress => Gift Struct\n  mapping (address => Gift) gifts;\n\n\n  /* Token Categories */\n  enum CategoryId { Common, Special, Rare, Scarce, Limited, Epic, Unique }  \n  struct TokenCategory {\n    CategoryId categoryId;\n    uint minted;  // already minted\n    uint maxQnty; // maximum amount of tokens to mint\n    uint price; \n  }\n\n  // tokenURI => TokenCategory\n  mapping(string => TokenCategory) tokenCategories;\n  \n  /*\n   * EVENTS\n   */\n  event LogBuy(\n\t       address indexed transitAddress,\n\t       address indexed sender,\n\t       string indexed tokenUri,\n\t       uint tokenId,\n\t       uint claimEth,\n\t       uint nftPrice\n\t       );\n\n  event LogClaim(\n\t\t address indexed transitAddress,\n\t\t address indexed sender,\n\t\t uint tokenId,\n\t\t address receiver,\n\t\t uint claimEth\n\t\t );  \n\n  event LogCancel(\n\t\t  address indexed transitAddress,\n\t\t  address indexed sender,\n\t\t  uint tokenId\n\t\t  );\n\n  event LogAddTokenCategory(\n\t\t\t    string tokenUri,\n\t\t\t    CategoryId categoryId,\n\t\t\t    uint maxQnty,\n\t\t\t    uint price\n\t\t  );\n  \n\n  /**\n   * @dev Contructor that sets msg.sender as owner in Ownable,\n   * sets escrow contract params and deploys new NFT contract \n   * for minting and selling tokens.\n   *\n   * @param _givethBridge address Address of GivethBridge contract\n   * @param _givethReceiverId uint64 Campaign Id created on Giveth platform.\n   * @param _name string Name for the NFT \n   * @param _symbol string Symbol for the NFT \n   */\n  constructor(address _givethBridge,\n\t      uint64 _givethReceiverId,\n\t      string _name,\n\t      string _symbol) public {\n    // setup Giveth params\n    givethBridge = _givethBridge;\n    givethReceiverId = _givethReceiverId;\n    \n    // deploy nft contract\n    nft = new NFT(_name, _symbol);\n  }\n\n   /* \n   * METHODS \n   */\n  \n  /**\n   * @dev Get Token Category for the tokenUri.\n   *\n   * @param _tokenUri string token URI of the category\n   * @return Token Category details (CategoryId, minted, maxQnty, price)\n   */  \n  function getTokenCategory(string _tokenUri) public view returns (CategoryId categoryId,\n\t\t\t\t\t\t\t\t  uint minted,\n\t\t\t\t\t\t\t\t  uint maxQnty,\n\t\t\t\t\t\t\t\t  uint price) { \n    TokenCategory memory category = tokenCategories[_tokenUri];    \n    return (category.categoryId,\n\t    category.minted,\n\t    category.maxQnty,\n\t    category.price);\n  }\n\n  /**\n   * @dev Add Token Category for the tokenUri.\n   *\n   * @param _tokenUri string token URI of the category\n   * @param _categoryId uint categoryid of the category\n   * @param _maxQnty uint maximum quantity of tokens allowed to be minted\n   * @param _price uint price tokens of that category will be sold at  \n   * @return True if success.\n   */    \n  function addTokenCategory(string _tokenUri, CategoryId _categoryId, uint _maxQnty, uint _price)\n    public onlyOwner returns (bool success) {\n\n    // price should be more than MIN_PRICE\n    require(_price >= MIN_PRICE);\n\t    \n    // can't override existing category\n    require(tokenCategories[_tokenUri].price == 0);\n    \n    tokenCategories[_tokenUri] = TokenCategory(_categoryId,\n\t\t\t\t\t       0, // zero tokens minted initially\n\t\t\t\t\t       _maxQnty,\n\t\t\t\t\t       _price);\n\n    emit LogAddTokenCategory(_tokenUri, _categoryId, _maxQnty, _price);\n    return true;\n  }\n\n  /**\n   * @dev Checks that it's possible to buy gift and mint token with the tokenURI.\n   *\n   * @param _tokenUri string token URI of the category\n   * @param _transitAddress address transit address assigned to gift\n   * @param _value uint amount of ether, that is send in tx. \n   * @return True if success.\n   */      \n  function canBuyGift(string _tokenUri, address _transitAddress, uint _value) public view whenNotPaused returns (bool) {\n    // can not override existing gift\n    require(gifts[_transitAddress].status == Statuses.Empty);\n\n    // eth covers NFT price\n    TokenCategory memory category = tokenCategories[_tokenUri];\n    require(_value >= category.price);\n\n    // tokens of that type not sold out yet\n    require(category.minted < category.maxQnty);\n    \n    return true;\n  }\n\n  /**\n   * @dev Buy gift and mint token with _tokenUri, new minted token will be kept in escrow\n   * until receiver claims it. \n   *\n   * Received ether, splitted in 3 parts:\n   *   - 0.01 ETH goes to ephemeral account, so it can pay gas fee for claim transaction. \n   *   - token price (minus ephemeral account fee) goes to the Giveth Campaign as a donation.  \n   *   - Eth above token price is kept in the escrow, waiting for receiver to claim. \n   *\n   * @param _tokenUri string token URI of the category\n   * @param _transitAddress address transit address assigned to gift\n   * @param _msgHash string IPFS hash, where gift message stored at \n   * @return True if success.\n   */    \n  function buyGift(string _tokenUri, address _transitAddress, string _msgHash)\n          payable public whenNotPaused returns (bool) {\n    \n    require(canBuyGift(_tokenUri, _transitAddress, msg.value));\n\n    // get token price from the category for that token URI\n    uint tokenPrice = tokenCategories[_tokenUri].price;\n\n    // ether above token price is for receiver to claim\n    uint claimEth = msg.value.sub(tokenPrice);\n\n    // mint new token \n    uint tokenId = tokensCounter.add(1);\n    nft.mintWithTokenURI(tokenId, _tokenUri);\n\n    // increment counters\n    tokenCategories[_tokenUri].minted = tokenCategories[_tokenUri].minted.add(1);\n    tokensCounter = tokensCounter.add(1);\n    \n    // saving gift details\n    gifts[_transitAddress] = Gift(\n\t\t\t\t  msg.sender,\n\t\t\t\t  claimEth,\n\t\t\t\t  tokenId,\n\t\t\t\t  Statuses.Deposited,\n\t\t\t\t  _msgHash\n\t\t\t\t  );\n\n\n    // transfer small fee to ephemeral account to fund claim txs\n    _transitAddress.transfer(EPHEMERAL_ADDRESS_FEE);\n\n    // send donation to Giveth campaign\n    uint donation = tokenPrice.sub(EPHEMERAL_ADDRESS_FEE);\n    if (donation > 0) {\n      bool donationSuccess = _makeDonation(msg.sender, donation);\n\n      // revert if there was problem with sending ether to GivethBridge\n      require(donationSuccess == true);\n    }\n    \n    // log buy event\n    emit LogBuy(\n\t\t_transitAddress,\n\t\tmsg.sender,\n\t\t_tokenUri,\n\t\ttokenId,\n\t\tclaimEth,\n\t\ttokenPrice);\n    return true;\n  }\n\n  /**\n   * @dev Send donation to Giveth campaign \n   * by calling function 'donateAndCreateGiver' of GivethBridge contract.\n   *\n   * @param _giver address giver address\n   * @param _value uint donation amount (in wei)\n   * @return True if success.\n   */    \n  function _makeDonation(address _giver, uint _value) internal returns (bool success) {\n    bytes memory _data = abi.encodePacked(0x1870c10f, // function signature\n\t\t\t\t\t   bytes32(_giver),\n\t\t\t\t\t   bytes32(givethReceiverId),\n\t\t\t\t\t   bytes32(0),\n\t\t\t\t\t   bytes32(0));\n    // make donation tx\n    success = givethBridge.call.value(_value)(_data);\n    return success;\n  }\n\n  /**\n   * @dev Get Gift assigned to transit address.\n   *\n   * @param _transitAddress address transit address assigned to gift\n   * @return Gift details\n   */    \n  function getGift(address _transitAddress) public view returns (\n\t     uint256 tokenId,\n\t     string tokenUri,\t\t\t\t\t\t\t\t \n\t     address sender,  // gift buyer\n\t     uint claimEth,   // eth for receiver\n\t     uint nftPrice,   // token price \t     \n\t     Statuses status, // gift status (deposited, claimed, cancelled) \t\t\t\t\t\t\t\t \t     \n\t     string msgHash   // IPFS hash, where gift message stored at \n    ) {\n    Gift memory gift = gifts[_transitAddress];\n    tokenUri =  nft.tokenURI(gift.tokenId);\n    TokenCategory memory category = tokenCategories[tokenUri];    \n    return (\n\t    gift.tokenId,\n\t    tokenUri,\n\t    gift.sender,\n\t    gift.claimEth,\n\t    category.price,\t    \n\t    gift.status,\n\t    gift.msgHash\n\t    );\n  }\n  \n  /**\n   * @dev Cancel gift and get sent ether back. Only gift buyer can\n   * cancel.\n   * \n   * @param _transitAddress transit address assigned to gift\n   * @return True if success.\n   */\n  function cancelGift(address _transitAddress) public returns (bool success) {\n    Gift storage gift = gifts[_transitAddress];\n\n    // is deposited and wasn't claimed or cancelled before\n    require(gift.status == Statuses.Deposited);\n    \n    // only sender can cancel transfer;\n    require(msg.sender == gift.sender);\n    \n    // update status to cancelled\n    gift.status = Statuses.Cancelled;\n\n    // transfer optional ether to receiver's address\n    if (gift.claimEth > 0) {\n      gift.sender.transfer(gift.claimEth);\n    }\n\n    // send nft to buyer\n    nft.transferFrom(address(this), msg.sender, gift.tokenId);\n\n    // log cancel event\n    emit LogCancel(_transitAddress, msg.sender, gift.tokenId);\n\n    return true;\n  }\n\n  \n  /**\n   * @dev Claim gift to receiver's address if it is correctly signed\n   * with private key for verification public key assigned to gift.\n   * \n   * @param _receiver address Signed address.\n   * @return True if success.\n   */\n  function claimGift(address _receiver) public whenNotPaused returns (bool success) {\n    // only holder of ephemeral private key can claim gift\n    address _transitAddress = msg.sender;\n    \n    Gift storage gift = gifts[_transitAddress];\n\n    // is deposited and wasn't claimed or cancelled before\n    require(gift.status == Statuses.Deposited);\n\n    // update gift status to claimed\n    gift.status = Statuses.Claimed;\n    \n    // send nft to receiver\n    nft.transferFrom(address(this), _receiver, gift.tokenId);\n    \n    // transfer ether to receiver's address\n    if (gift.claimEth > 0) {\n      _receiver.transfer(gift.claimEth);\n    }\n\n    // log claim event\n    emit LogClaim(_transitAddress, gift.sender, gift.tokenId, _receiver, gift.claimEth);\n    \n    return true;\n  }\n\n  // fallback function - do not receive ether by default\n  function() public payable {\n    revert();\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimGift\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transitAddress\",\"type\":\"address\"}],\"name\":\"cancelGift\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"givethBridge\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_transitAddress\",\"type\":\"address\"}],\"name\":\"getGift\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"tokenUri\",\"type\":\"string\"},{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"claimEth\",\"type\":\"uint256\"},{\"name\":\"nftPrice\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"msgHash\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EPHEMERAL_ADDRESS_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenUri\",\"type\":\"string\"},{\"name\":\"_transitAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"canBuyGift\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenUri\",\"type\":\"string\"}],\"name\":\"getTokenCategory\",\"outputs\":[{\"name\":\"categoryId\",\"type\":\"uint8\"},{\"name\":\"minted\",\"type\":\"uint256\"},{\"name\":\"maxQnty\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenUri\",\"type\":\"string\"},{\"name\":\"_transitAddress\",\"type\":\"address\"},{\"name\":\"_msgHash\",\"type\":\"string\"}],\"name\":\"buyGift\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"givethReceiverId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenUri\",\"type\":\"string\"},{\"name\":\"_categoryId\",\"type\":\"uint8\"},{\"name\":\"_maxQnty\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addTokenCategory\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_givethBridge\",\"type\":\"address\"},{\"name\":\"_givethReceiverId\",\"type\":\"uint64\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transitAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenUri\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"claimEth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nftPrice\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transitAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"claimEth\",\"type\":\"uint256\"}],\"name\":\"LogClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transitAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"LogCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenUri\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"categoryId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"maxQnty\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"LogAddTokenCategory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"}]",
  "bytecode": "6080604052662386f26fc1000060045566b1a2bc2ec500006005553480156200002757600080fd5b50604051620033e0380380620033e083398101604090815281516020830151918301516060840151919390810191016200006a3364010000000062000234810204565b60018054600160a860020a0319166101003381029190911791829055604051600160a060020a039190920416906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a360028054600160a060020a031916600160a060020a0386161760a060020a60e060020a0319167401000000000000000000000000000000000000000067ffffffffffffffff86160217905581816200011662000319565b604080825283519082015282518190602080830191606084019187019080838360005b838110156200015357818101518382015260200162000139565b50505050905090810190601f168015620001815780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015620001b65781810151838201526020016200019c565b50505050905090810190601f168015620001e45780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f08015801562000208573d6000803e3d6000fd5b5060038054600160a060020a031916600160a060020a0392909216919091179055506200032a92505050565b6200024f60008264010000000062001a3b6200028682021704565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600160a060020a03811615156200029c57600080fd5b620002b18282640100000000620002e1810204565b15620002bc57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a0382161515620002f957600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b6040516115018062001edf83390190565b611ba5806200033a6000396000f3006080604052600436106101325763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166304f3c40e8114610137578063254e6f261461016c5780632891da021461018d57806332970514146101b45780633b0df0d7146101e55780633f4ba83a1461032757806346fbf68e1461033e57806347ccca021461035f5780634b745f90146103745780635c975abb146103895780636146ff831461039e5780636ef8d66d14610408578063715018a61461041d5780637f75234e1461043257806382dc1ec4146104c45780638456cb59146104e55780638da5cb5b146104fa5780638f32d59b1461050f5780639155f18214610524578063ad9f20a6146105bd578063ec430752146105d2578063f12326dd14610604578063f2fde38b1461066c575b600080fd5b34801561014357600080fd5b50610158600160a060020a036004351661068d565b604080519115158252519081900360200190f35b34801561017857600080fd5b50610158600160a060020a0360043516610827565b34801561019957600080fd5b506101a26109ad565b60408051918252519081900360200190f35b3480156101c057600080fd5b506101c96109b3565b60408051600160a060020a039092168252519081900360200190f35b3480156101f157600080fd5b50610206600160a060020a03600435166109c2565b604051808881526020018060200187600160a060020a0316600160a060020a0316815260200186815260200185815260200184600381111561024457fe5b60ff16815260200180602001838103835289818151815260200191508051906020019080838360005b8381101561028557818101518382015260200161026d565b50505050905090810190601f1680156102b25780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156102e55781810151838201526020016102cd565b50505050905090810190601f1680156103125780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b34801561033357600080fd5b5061033c610cc0565b005b34801561034a57600080fd5b50610158600160a060020a0360043516610d24565b34801561036b57600080fd5b506101c9610d3c565b34801561038057600080fd5b506101a2610d4b565b34801561039557600080fd5b50610158610d51565b3480156103aa57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261015894369492936024939284019190819084018382808284375094975050508335600160a060020a0316945050506020909101359050610d5b565b34801561041457600080fd5b5061033c610e84565b34801561042957600080fd5b5061033c610e8f565b34801561043e57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261048b943694929360249392840191908190840183828082843750949750610eff9650505050505050565b6040518085600681111561049b57fe5b60ff16815260200184815260200183815260200182815260200194505050505060405180910390f35b3480156104d057600080fd5b5061033c600160a060020a0360043516610fdc565b3480156104f157600080fd5b5061033c610ffc565b34801561050657600080fd5b506101c9611061565b34801561051b57600080fd5b50610158611075565b6040805160206004803580820135601f810184900484028501840190955284845261015894369492936024939284019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b600160a060020a038b35169b909a90999401975091955091820193509150819084018382808284375094975061108b9650505050505050565b3480156105c957600080fd5b506101a26114f4565b3480156105de57600080fd5b506105e76114fa565b6040805167ffffffffffffffff9092168252519081900360200190f35b34801561061057600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101589436949293602493928401919081908401838280828437509497505050833560ff1694505050602082013591604001359050611522565b34801561067857600080fd5b5061033c600160a060020a036004351661174d565b6001546000908190819060ff16156106a457600080fd5b5050336000818152600760205260409020600160038083015460ff16908111156106ca57fe5b146106d457600080fd5b6003818101805460ff19166002908117909155905490820154604080517f23b872dd000000000000000000000000000000000000000000000000000000008152306004820152600160a060020a0388811660248301526044820193909352905191909216916323b872dd91606480830192600092919082900301818387803b15801561075f57600080fd5b505af1158015610773573d6000803e3d6000fd5b505050506000816001015411156107bf576001810154604051600160a060020a0386169180156108fc02916000818181858888f193505050501580156107bd573d6000803e3d6000fd5b505b80546002820154600183015460408051928352600160a060020a038881166020850152838201929092525192811692908516917f996c1a65142088eaea83b708f3800e60834c7357daf1469308e2aa52c2d1a3dd919081900360600190a35060019392505050565b600160a060020a0381166000908152600760205260408120600160038083015460ff169081111561085457fe5b1461085e57600080fd5b8054600160a060020a0316331461087457600080fd5b6003818101805460ff191690911790556001810154600010156108d05780546001820154604051600160a060020a039092169181156108fc0291906000818181858888f193505050501580156108ce573d6000803e3d6000fd5b505b6003546002820154604080517f23b872dd000000000000000000000000000000000000000000000000000000008152306004820152336024820152604481019290925251600160a060020a03909216916323b872dd9160648082019260009290919082900301818387803b15801561094757600080fd5b505af115801561095b573d6000803e3d6000fd5b50505060028201546040805191825251339250600160a060020a038616917f1f4fedef2ca6d59bb9d65eea71fc10da706e68e90d6bc96d278fc385b3195567919081900360200190a350600192915050565b60065481565b600254600160a060020a031681565b6000606060008060008060606109d6611a89565b6109de611ab8565b600160a060020a03808b16600090815260076020908152604091829020825160a08101845281549094168452600181015491840191909152600281015491830191909152600380820154606084019160ff90911690811115610a3c57fe5b6003811115610a4757fe5b815260048201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610ad55780601f10610aaa57610100808354040283529160200191610ad5565b820191906000526020600020905b815481529060010190602001808311610ab857829003601f168201915b50505091909252505060035460408084015181517fc87b56dd00000000000000000000000000000000000000000000000000000000815260048101919091529051939550600160a060020a039091169263c87b56dd9250602480830192600092919082900301818387803b158015610b4c57600080fd5b505af1158015610b60573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610b8957600080fd5b810190808051640100000000811115610ba157600080fd5b82016020810184811115610bb457600080fd5b8151640100000000811182820187101715610bce57600080fd5b505092919050505097506008886040518082805190602001908083835b60208310610c0a5780518252601f199092019160209182019101610beb565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003909101842060808501909152805490925083915060ff166006811115610c5457fe5b6006811115610c5f57fe5b8152602001600182015481526020016002820154815260200160038201548152505090508160400151888360000151846020015184606001518660600151876080015180905098509850985098509850985098505050919395979092949650565b610cc933610d24565b1515610cd457600080fd5b60015460ff161515610ce557600080fd5b6001805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b6000610d36818363ffffffff61176916565b92915050565b600354600160a060020a031681565b60045481565b60015460ff165b90565b6000610d65611ab8565b60015460ff1615610d7557600080fd5b600160a060020a038416600090815260076020526040812060039081015460ff1690811115610da057fe5b14610daa57600080fd5b6008856040518082805190602001908083835b60208310610ddc5780518252601f199092019160209182019101610dbd565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003909101842060808501909152805490925083915060ff166006811115610e2657fe5b6006811115610e3157fe5b81526001820154602082015260028201546040820152600390910154606091820152810151909150831015610e6557600080fd5b6040810151602082015110610e7957600080fd5b506001949350505050565b610e8d336117a0565b565b610e97611075565b1515610ea257600080fd5b6001546040516000916101009004600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36001805474ffffffffffffffffffffffffffffffffffffffff0019169055565b600080600080610f0d611ab8565b6008866040518082805190602001908083835b60208310610f3f5780518252601f199092019160209182019101610f20565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003909101842060808501909152805490925083915060ff166006811115610f8957fe5b6006811115610f9457fe5b81526020016001820154815260200160028201548152602001600382015481525050905080600001518160200151826040015183606001519450945094509450509193509193565b610fe533610d24565b1515610ff057600080fd5b610ff9816117e8565b50565b61100533610d24565b151561101057600080fd5b60015460ff161561102057600080fd5b6001805460ff1916811790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b6001546101009004600160a060020a031690565b6001546101009004600160a060020a0316331490565b6001546000908190819081908190819060ff16156110a857600080fd5b6110b3898934610d5b565b15156110be57600080fd5b6008896040518082805190602001908083835b602083106110f05780518252601f1990920191602091820191016110d1565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922060030154965061112f915034905086611830565b60065490945061114690600163ffffffff61184716565b600354604080517fa4fbaebd00000000000000000000000000000000000000000000000000000000815260048101848152602482019283528d5160448301528d51949750600160a060020a039093169363a4fbaebd9388938f939192909160640190602085019080838360005b838110156111cb5781810151838201526020016111b3565b50505050905090810190601f1680156111f85780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561121857600080fd5b505af115801561122c573d6000803e3d6000fd5b5050505061129f600160088b6040518082805190602001908083835b602083106112675780518252601f199092019160209182019101611248565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092206001015492915050611847565b60088a6040518082805190602001908083835b602083106112d15780518252601f1990920191602091820191016112b2565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220600190810193909355505060065461131391611847565b6006556040805160a0810182523381526020808201878152828401878152600160608501818152608086018e9052600160a060020a038f811660009081526007909652969094208551815473ffffffffffffffffffffffffffffffffffffffff191697169690961786559151858301555160028501559051600380850180549495949293909260ff19169184908111156113a957fe5b0217905550608082015180516113c9916004840191602090910190611ae1565b5050600454604051600160a060020a038b16925081156108fc0291906000818181858888f19350505050158015611404573d6000803e3d6000fd5b5060045461141990869063ffffffff61183016565b9150600082111561143f5761142e3383611860565b905060018115151461143f57600080fd5b886040518082805190602001908083835b6020831061146f5780518252601f199092019160209182019101611450565b51815160001960209485036101000a01908116901991909116179052604080519490920184900384208985529084018a90528382018b90529051909450339350600160a060020a038d16927f1fb8c7c5590346996c8e14141338c3fc270cc0c2bbb2df2627f19cb917d65e23925081900360600190a450600198975050505050505050565b60055481565b60025474010000000000000000000000000000000000000000900467ffffffffffffffff1681565b600061152c611075565b151561153757600080fd5b60055482101561154657600080fd5b6008856040518082805190602001908083835b602083106115785780518252601f199092019160209182019101611559565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220600301541591506115b5905057600080fd5b6080604051908101604052808560068111156115cd57fe5b815260200160008152602001848152602001838152506008866040518082805190602001908083835b602083106116155780518252601f1990920191602091820191016115f6565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220835181549193509150829060ff1916600183600681111561165d57fe5b02179055506020820151816001015560408201518160020155606082015181600301559050507feecad4c5fef104ebd8d817e80894be416315168481043aaddc34b44707b40b898585858560405180806020018560068111156116bc57fe5b60ff168152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b838110156117055781810151838201526020016116ed565b50505050905090810190601f1680156117325780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a1506001949350505050565b611755611075565b151561176057600080fd5b610ff981611966565b6000600160a060020a038216151561178057600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b6117b160008263ffffffff6119ef16565b604051600160a060020a038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b6117f960008263ffffffff611a3b16565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b6000808383111561184057600080fd5b5050900390565b60008282018381101561185957600080fd5b9392505050565b600254604080517f1870c10f00000000000000000000000000000000000000000000000000000000602080830191909152600160a060020a03808716602484015267ffffffffffffffff74010000000000000000000000000000000000000000860416604484015260006064840181905260848085018290528551808603909101815260a49094019485905283519095939493909116928692859282918401908083838b5b8381101561191d578181015183820152602001611905565b50505050905090810190601f16801561194a5780820380516001836020036101000a031916815260200191505b5091505060006040518083038185875af1979650505050505050565b600160a060020a038116151561197b57600080fd5b600154604051600160a060020a0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360018054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b600160a060020a0381161515611a0457600080fd5b611a0e8282611769565b1515611a1957600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0381161515611a5057600080fd5b611a5a8282611769565b15611a6457600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6040805160a0810182526000808252602082018190529181018290529060608201908152602001606081525090565b604080516080810190915280600081526020016000815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611b2257805160ff1916838001178555611b4f565b82800160010185558215611b4f579182015b82811115611b4f578251825591602001919060010190611b34565b50611b5b929150611b5f565b5090565b610d5891905b80821115611b5b5760008155600101611b655600a165627a7a72305820c4cc6ab13e5b8ddd1709e5afa15dd1bcb2400d591cac931ba66dce751377bf16002960806040523480156200001157600080fd5b506040516200150138038062001501833981016040528051602082015190820191018181620000697f01ffc9a70000000000000000000000000000000000000000000000000000000064010000000062000188810204565b6200009d7f80ac58cd0000000000000000000000000000000000000000000000000000000064010000000062000188810204565b8151620000b2906005906020850190620001f5565b508051620000c8906006906020840190620001f5565b50620000fd7f5b5e139f0000000000000000000000000000000000000000000000000000000064010000000062000188810204565b506200013490507f780e9d630000000000000000000000000000000000000000000000000000000064010000000062000188810204565b600c8054600160a060020a031916331790819055604051600160a060020a0391909116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350506200029a565b7fffffffff000000000000000000000000000000000000000000000000000000008082161415620001b857600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200023857805160ff191683800117855562000268565b8280016001018555821562000268579182015b82811115620002685782518255916020019190600101906200024b565b50620002769291506200027a565b5090565b6200029791905b8082111562000276576000815560010162000281565b90565b61125780620002aa6000396000f30060806040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461012157806306fdde031461016c578063081812fc146101f6578063095ea7b31461022a57806318160ddd1461025057806323b872dd146102775780632f745c59146102a157806342842e0e146102c55780634f6ccce7146102ef5780636352211e1461030757806370a082311461031f578063715018a6146103405780638da5cb5b146103555780638f32d59b1461036a57806395d89b411461037f578063a22cb46514610394578063a4fbaebd146103ba578063b88d4fde14610418578063c87b56dd14610487578063e985e9c51461049f578063f2fde38b146104c6575b600080fd5b34801561012d57600080fd5b506101587bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19600435166104e7565b604080519115158252519081900360200190f35b34801561017857600080fd5b5061018161051b565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101bb5781810151838201526020016101a3565b50505050905090810190601f1680156101e85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020257600080fd5b5061020e6004356105b2565b60408051600160a060020a039092168252519081900360200190f35b34801561023657600080fd5b5061024e600160a060020a03600435166024356105e4565b005b34801561025c57600080fd5b5061026561069a565b60408051918252519081900360200190f35b34801561028357600080fd5b5061024e600160a060020a03600435811690602435166044356106a0565b3480156102ad57600080fd5b50610265600160a060020a036004351660243561072e565b3480156102d157600080fd5b5061024e600160a060020a036004358116906024351660443561077b565b3480156102fb57600080fd5b5061026560043561079c565b34801561031357600080fd5b5061020e6004356107d1565b34801561032b57600080fd5b50610265600160a060020a03600435166107fb565b34801561034c57600080fd5b5061024e61082e565b34801561036157600080fd5b5061020e610898565b34801561037657600080fd5b506101586108a7565b34801561038b57600080fd5b506101816108b8565b3480156103a057600080fd5b5061024e600160a060020a03600435166024351515610919565b3480156103c657600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261024e95833595369560449491939091019190819084018382808284375094975061099d9650505050505050565b34801561042457600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261024e94600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506109cf9650505050505050565b34801561049357600080fd5b506101816004356109f7565b3480156104ab57600080fd5b50610158600160a060020a0360043581169060243516610aac565b3480156104d257600080fd5b5061024e600160a060020a0360043516610ada565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105a75780601f1061057c576101008083540402835291602001916105a7565b820191906000526020600020905b81548152906001019060200180831161058a57829003601f168201915b505050505090505b90565b60006105bd82610af9565b15156105c857600080fd5b50600090815260026020526040902054600160a060020a031690565b60006105ef826107d1565b9050600160a060020a03838116908216141561060a57600080fd5b33600160a060020a038216148061062657506106268133610aac565b151561063157600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600a5490565b6106aa3382610b16565b15156106b557600080fd5b600160a060020a03821615156106ca57600080fd5b6106d48382610b75565b6106de8382610be4565b6106e88282610ceb565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000610739836107fb565b821061074457600080fd5b600160a060020a038316600090815260086020526040902080548390811061076857fe5b9060005260206000200154905092915050565b61079783838360206040519081016040528060008152506109cf565b505050565b60006107a661069a565b82106107b157600080fd5b600a8054839081106107bf57fe5b90600052602060002001549050919050565b600081815260016020526040812054600160a060020a03168015156107f557600080fd5b92915050565b6000600160a060020a038216151561081257600080fd5b50600160a060020a031660009081526003602052604090205490565b6108366108a7565b151561084157600080fd5b600c54604051600091600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600c805473ffffffffffffffffffffffffffffffffffffffff19169055565b600c54600160a060020a031690565b600c54600160a060020a0316331490565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105a75780601f1061057c576101008083540402835291602001916105a7565b600160a060020a03821633141561092f57600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b6109a56108a7565b15156109b057600080fd5b6109c16109bb610898565b83610d34565b6109cb8282610d83565b5050565b6109da8484846106a0565b6109e684848484610db6565b15156109f157600080fd5b50505050565b6060610a0282610af9565b1515610a0d57600080fd5b60008281526007602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610aa05780601f10610a7557610100808354040283529160200191610aa0565b820191906000526020600020905b815481529060010190602001808311610a8357829003601f168201915b50505050509050919050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b610ae26108a7565b1515610aed57600080fd5b610af681610f38565b50565b600090815260016020526040902054600160a060020a0316151590565b600080610b22836107d1565b905080600160a060020a031684600160a060020a03161480610b5d575083600160a060020a0316610b52846105b2565b600160a060020a0316145b80610b6d5750610b6d8185610aac565b949350505050565b81600160a060020a0316610b88826107d1565b600160a060020a031614610b9b57600080fd5b600081815260026020526040902054600160a060020a0316156109cb576000908152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff1916905550565b6000806000610bf38585610fb6565b600084815260096020908152604080832054600160a060020a0389168452600890925290912054909350610c2e90600163ffffffff61104c16565b600160a060020a038616600090815260086020526040902080549193509083908110610c5657fe5b90600052602060002001549050806008600087600160a060020a0316600160a060020a0316815260200190815260200160002084815481101515610c9657fe5b6000918252602080832090910192909255600160a060020a0387168152600890915260409020805490610ccd90600019830161116f565b50600093845260096020526040808520859055908452909220555050565b6000610cf78383611063565b50600160a060020a039091166000908152600860209081526040808320805460018101825590845282842081018590559383526009909152902055565b610d3e82826110f3565b600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8015550565b610d8c82610af9565b1515610d9757600080fd5b6000828152600760209081526040909120825161079792840190611193565b600080610dcb85600160a060020a031661114e565b1515610dda5760019150610f2f565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b83811015610e6d578181015183820152602001610e55565b50505050905090810190601f168015610e9a5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610ebc57600080fd5b505af1158015610ed0573d6000803e3d6000fd5b505050506040513d6020811015610ee657600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b600160a060020a0381161515610f4d57600080fd5b600c54604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b81600160a060020a0316610fc9826107d1565b600160a060020a031614610fdc57600080fd5b600160a060020a03821660009081526003602052604090205461100690600163ffffffff61104c16565b600160a060020a03909216600090815260036020908152604080832094909455918152600190915220805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000808383111561105c57600080fd5b5050900390565b600081815260016020526040902054600160a060020a03161561108557600080fd5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03881690811790915584526003909152909120546110d391611156565b600160a060020a0390921660009081526003602052604090209190915550565b600160a060020a038216151561110857600080fd5b6111128282610ceb565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000903b1190565b60008282018381101561116857600080fd5b9392505050565b81548183558181111561079757600083815260209020610797918101908301611211565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106111d457805160ff1916838001178555611201565b82800160010185558215611201579182015b828111156112015782518255916020019190600101906111e6565b5061120d929150611211565b5090565b6105af91905b8082111561120d57600081556001016112175600a165627a7a72305820165f0a4ee604a9d374bf10d4907dfa514376928c678937461ebc5986c7500657002900000000000000000000000030f938fed5de6e06a9a7cd2ac3517131c317b1e70000000000000000000000000000000000000000000000000000000000000239000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001443727970746f586d617320506f73746361726473000000000000000000000000000000000000000000000000000000000000000000000000000000000000000543584d4153000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000030f938fed5de6e06a9a7cd2ac3517131c317b1e70000000000000000000000000000000000000000000000000000000000000239000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001443727970746f586d617320506f73746361726473000000000000000000000000000000000000000000000000000000000000000000000000000000000000000543584d4153000000000000000000000000000000000000000000000000000000"
}