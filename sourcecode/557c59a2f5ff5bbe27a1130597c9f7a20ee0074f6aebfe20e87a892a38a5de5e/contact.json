{
  "address": "0xecb28b3f513b2d1aa66cf2abaaeb3ab0aabf0787",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ldoh",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-16\n*/\n\npragma solidity ^0.4.25;\n\n\ncontract ldoh  {\n\n    function Holdplatform(address tokenAddress, uint256 amount) public {\n\n\n\t\tuint256 Finalamount \t\t\t= div(mul(amount, 98), 100);\t\n\t\tuint256 Burn \t\t\t\t\t= div(mul(amount, 2), 100);\t\n\t\taddress Burnaddress\t\t\t\t= 0x0000000000000000000000000000000000000000;\n\t\t\n\t\tERC20Interface token \t\t\t= ERC20Interface(tokenAddress);       \n        require(token.transferFrom(msg.sender, address(this), Finalamount));\t\n\t\trequire(token.transferFrom(msg.sender, Burnaddress, Burn));\t\n\t\t}\t\t\t\t\t\t\t\n\t\n\t\n    function Holdplatform2(address tokenAddress, uint256 amount) public {\n\n\t\tuint256 Finalamount \t\t\t= div(mul(amount, 98), 100);\t\n\t\tERC20Interface token \t\t\t= ERC20Interface(tokenAddress);       \n        require(token.transferFrom(msg.sender, address(this), Finalamount));\t\n\t\t}\t\n\t\t\n\t\n    function Holdplatform3(address tokenAddress, uint256 amount) public {\n\n\n\t\tuint256 Burn \t\t\t\t\t= div(mul(amount, 2), 100);\t\n\t\taddress Burnaddress\t\t\t\t= 0x0000000000000000000000000000000000000000;\n\t\t\n\t\tERC20Interface token \t\t\t= ERC20Interface(tokenAddress);       \n\t\trequire(token.transferFrom(msg.sender, Burnaddress, Burn));\t\n\t\t}\n\t\t\n\tfunction Holdplatform4(address tokenAddress, uint256 amount) public {\n\n\n\t\tuint256 Burn \t\t\t\t\t= div(mul(amount, 2), 100);\t\n\n\t\tERC20Interface token \t\t\t= ERC20Interface(tokenAddress);       \n\t\trequire(token.transferFrom(msg.sender, 0x0000000000000000000000000000000000000000, Burn));\t\n\t\t}\t\n\t\t\n\n\t/*==============================\n    =      SAFE MATH FUNCTIONS     =\n    ==============================*/  \t\n\t\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b; \n\t\trequire(c / a == b);\n\t\treturn c;\n\t}\n\t\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b > 0); \n\t\tuint256 c = a / b;\n\t\treturn c;\n\t}\n\t\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b <= a);\n\t\tuint256 c = a - b;\n\t\treturn c;\n\t}\n\t\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a);\n\t\treturn c;\n\t}\n    \n}\n\n\n\t/*==============================\n    =        ERC20 Interface       =\n    ==============================*/ \n\ncontract ERC20Interface {\n\n    uint256 public totalSupply;\n    uint256 public decimals;\n    \n    function symbol() public view returns (string);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
  "bytecode": "608060405234801561001057600080fd5b50610874806100206000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634d6ac6a114610067578063600c2666146100b4578063ae109cd914610101578063fed3baa71461014e575b600080fd5b34801561007357600080fd5b506100b2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061019b565b005b3480156100c057600080fd5b506100ff600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610418565b005b34801561010d57600080fd5b5061014c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061055f565b005b34801561015a57600080fd5b50610199600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061069f565b005b6000806000806101b66101af8660626107e0565b606461081e565b93506101cd6101c68660026107e0565b606461081e565b9250600091508590508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156102ad57600080fd5b505af11580156102c1573d6000803e3d6000fd5b505050506040513d60208110156102d757600080fd5b810190808051906020019092919050505015156102f357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3384866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156103ca57600080fd5b505af11580156103de573d6000803e3d6000fd5b505050506040513d60208110156103f457600080fd5b8101908080519060200190929190505050151561041057600080fd5b505050505050565b600080600061043261042b8560026107e0565b606461081e565b9250600091508490508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3384866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561051257600080fd5b505af1158015610526573d6000803e3d6000fd5b505050506040513d602081101561053c57600080fd5b8101908080519060200190929190505050151561055857600080fd5b5050505050565b6000806105776105708460626107e0565b606461081e565b91508390508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561065357600080fd5b505af1158015610667573d6000803e3d6000fd5b505050506040513d602081101561067d57600080fd5b8101908080519060200190929190505050151561069957600080fd5b50505050565b6000806106b76106b08460026107e0565b606461081e565b91508390508073ffffffffffffffffffffffffffffffffffffffff166323b872dd336000856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561079457600080fd5b505af11580156107a8573d6000803e3d6000fd5b505050506040513d60208110156107be57600080fd5b810190808051906020019092919050505015156107da57600080fd5b50505050565b60008060008414156107f55760009150610817565b828402905082848281151561080657fe5b0414151561081357600080fd5b8091505b5092915050565b60008060008311151561083057600080fd5b828481151561083b57fe5b04905080915050929150505600a165627a7a723058203e5238086c0710a247f315d475116f29b6fe3f85dd676ae1f8f2c795409312a30029"
}