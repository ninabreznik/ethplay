{
  "address": "0xd43ff5612420c8bcc6316dcc15fedfb4b791df32",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LptOrderBook",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-15\n*/\n\npragma solidity ^0.5.2;\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: contracts/livepeerInterface/IController.sol\n\npragma solidity ^0.5.7;\n\ncontract IController  {\n    event SetContractInfo(bytes32 id, address contractAddress, bytes20 gitCommitHash);\n\n    function setContractInfo(bytes32 _id, address _contractAddress, bytes20 _gitCommitHash) external;\n    function updateController(bytes32 _id, address _controller) external;\n    function getContract(bytes32 _id) public view returns (address);\n}\n\n// File: contracts/livepeerInterface/IBondingManager.sol\n\npragma solidity ^0.5.1;\n\ncontract IBondingManager {\n\n    function unbondingPeriod() public view returns (uint64);\n\n}\n\n// File: contracts/livepeerInterface/IRoundsManager.sol\n\npragma solidity ^0.5.1;\n\ncontract IRoundsManager {\n\n    function roundLength() public view returns (uint256);\n\n}\n\n// File: contracts/LptOrderBook.sol\n\npragma solidity ^0.5.7;\n\n\n\n\n\n\ncontract LptOrderBook {\n\n    using SafeMath for uint256;\n\n    address private constant ZERO_ADDRESS = address(0);\n\n    string internal constant ERROR_SELL_ORDER_COMMITTED_TO = \"LPT_ORDER_SELL_ORDER_COMMITTED_TO\";\n    string internal constant ERROR_SELL_ORDER_NOT_COMMITTED_TO = \"LPT_ORDER_SELL_ORDER_NOT_COMMITTED_TO\";\n    string internal constant ERROR_INITIALISED_ORDER = \"LPT_ORDER_INITIALISED_ORDER\";\n    string internal constant ERROR_UNINITIALISED_ORDER = \"LPT_ORDER_UNINITIALISED_ORDER\";\n    string internal constant ERROR_COMMITMENT_WITHIN_UNBONDING_PERIOD = \"LPT_ORDER_COMMITMENT_WITHIN_UNBONDING_PERIOD\";\n    string internal constant ERROR_NOT_BUYER = \"LPT_ORDER_NOT_BUYER\";\n    string internal constant ERROR_STILL_WITHIN_LOCK_PERIOD = \"LPT_ORDER_STILL_WITHIN_LOCK_PERIOD\";\n\n    struct LptSellOrder {\n        uint256 lptSellValue;\n        uint256 daiPaymentValue;\n        uint256 daiCollateralValue;\n        uint256 deliveredByBlock;\n        address buyerAddress;\n    }\n\n    IController livepeerController;\n    IERC20 daiToken;\n    mapping(address => LptSellOrder) public lptSellOrders; // One sell order per address for simplicity\n\n    constructor(address _livepeerController, address _daiToken) public {\n        livepeerController = IController(_livepeerController);\n        daiToken = IERC20(_daiToken);\n    }\n\n    /*\n    * @notice Create an LPT sell order, requires approval for this contract to spend _daiCollateralValue amount of DAI.\n    * @param _lptSellValue Value of LPT to sell\n    * @param _daiPaymentValue Value required in exchange for LPT\n    * @param _daiCollateralValue Value of collateral\n    * @param _deliveredByBlock Order filled or cancelled by this block or the collateral can be claimed\n    */\n    function createLptSellOrder(uint256 _lptSellValue, uint256 _daiPaymentValue, uint256 _daiCollateralValue, uint256 _deliveredByBlock) public {\n        LptSellOrder storage lptSellOrder = lptSellOrders[msg.sender];\n\n        require(lptSellOrder.daiCollateralValue == 0, ERROR_INITIALISED_ORDER);\n\n        daiToken.transferFrom(msg.sender, address(this), _daiCollateralValue);\n\n        lptSellOrders[msg.sender] = LptSellOrder(_lptSellValue, _daiPaymentValue, _daiCollateralValue, _deliveredByBlock, ZERO_ADDRESS);\n    }\n\n    /*\n    * @notice Cancel an LPT sell order, must be executed by the sell order creator.\n    */\n    function cancelLptSellOrder() public {\n        LptSellOrder storage lptSellOrder = lptSellOrders[msg.sender];\n\n        require(lptSellOrder.buyerAddress == ZERO_ADDRESS, ERROR_SELL_ORDER_COMMITTED_TO);\n\n        daiToken.transfer(msg.sender, lptSellOrder.daiCollateralValue);\n        delete lptSellOrders[msg.sender];\n    }\n\n    /*\n    * @notice Commit to buy LPT, requires approval for this contract to spend the payment amount in DAI.\n    * @param _sellOrderCreator Address of sell order creator\n    */\n    function commitToBuyLpt(address _sellOrderCreator) public {\n        LptSellOrder storage lptSellOrder = lptSellOrders[_sellOrderCreator];\n\n        require(lptSellOrder.lptSellValue > 0, ERROR_UNINITIALISED_ORDER);\n        require(lptSellOrder.buyerAddress == ZERO_ADDRESS, ERROR_SELL_ORDER_COMMITTED_TO);\n        require(lptSellOrder.deliveredByBlock.sub(_getUnbondingPeriodLength()) > block.number, ERROR_COMMITMENT_WITHIN_UNBONDING_PERIOD);\n\n        daiToken.transferFrom(msg.sender, address(this), lptSellOrder.daiPaymentValue);\n\n        lptSellOrder.buyerAddress = msg.sender;\n    }\n\n    /*\n    * @notice Claim collateral and payment after a sell order has been committed to but it hasn't been delivered by\n    *         the block number specified.\n    * @param _sellOrderCreator Address of sell order creator\n    */\n    function claimCollateralAndPayment(address _sellOrderCreator) public {\n        LptSellOrder storage lptSellOrder = lptSellOrders[_sellOrderCreator];\n\n        require(lptSellOrder.buyerAddress == msg.sender, ERROR_NOT_BUYER);\n        require(lptSellOrder.deliveredByBlock < block.number, ERROR_STILL_WITHIN_LOCK_PERIOD);\n\n        uint256 totalValue = lptSellOrder.daiPaymentValue.add(lptSellOrder.daiCollateralValue);\n        daiToken.transfer(msg.sender, totalValue);\n    }\n\n    /*\n    * @notice Fulfill sell order, requires approval for this contract spend the orders LPT value from the seller.\n    *         Returns the collateral and payment to the LPT seller.\n    */\n    function fulfillSellOrder() public {\n        LptSellOrder storage lptSellOrder = lptSellOrders[msg.sender];\n\n        require(lptSellOrder.buyerAddress != ZERO_ADDRESS, ERROR_SELL_ORDER_NOT_COMMITTED_TO);\n\n        IERC20 livepeerToken = IERC20(_getLivepeerContractAddress(\"LivepeerToken\"));livepeerToken.transferFrom(msg.sender, lptSellOrder.buyerAddress, lptSellOrder.lptSellValue);\n\n        uint256 totalValue = lptSellOrder.daiPaymentValue.add(lptSellOrder.daiCollateralValue);\n        daiToken.transfer(msg.sender, totalValue);\n\n        delete lptSellOrders[msg.sender];\n    }\n\n    function _getLivepeerContractAddress(string memory _livepeerContract) internal view returns (address) {\n        bytes32 contractId = keccak256(abi.encodePacked(_livepeerContract));\n        return livepeerController.getContract(contractId);\n    }\n\n    function _getUnbondingPeriodLength() internal view returns (uint256) {\n        IBondingManager bondingManager = IBondingManager(_getLivepeerContractAddress(\"BondingManager\"));\n        uint64 unbondingPeriodRounds = bondingManager.unbondingPeriod();\n\n        IRoundsManager roundsManager = IRoundsManager(_getLivepeerContractAddress(\"RoundsManager\"));\n        uint256 roundLength = roundsManager.roundLength();\n\n        return roundLength.mul(unbondingPeriodRounds);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051604080610f008339810180604052604081101561003057600080fd5b508051602090910151600080546001600160a01b039384166001600160a01b03199182161790915560018054939092169216919091179055610e89806100776000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631d30393d146100675780633e318d911461008f578063418160d01461009757806398c9f86e146100f1578063a84bacd414610117578063aded99f414610146575b600080fd5b61008d6004803603602081101561007d57600080fd5b50356001600160a01b031661014e565b005b61008d6103d3565b6100bd600480360360208110156100ad57600080fd5b50356001600160a01b0316610619565b6040805195865260208601949094528484019290925260608401526001600160a01b03166080830152519081900360a00190f35b61008d6004803603602081101561010757600080fd5b50356001600160a01b0316610651565b61008d6004803603608081101561012d57600080fd5b5080359060208101359060408101359060600135610812565b61008d6109b1565b6001600160a01b03811660009081526002602090815260409182902080548351808501909452601d84527f4c50545f4f524445525f554e494e495449414c495345445f4f5244455200000092840192909252919061022d57604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156101f25781810151838201526020016101da565b50505050905090810190601f16801561021f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506004810154604080516060810190915260218082526001600160a01b039092161591610e116020830139906102a757604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156101f25781810151838201526020016101da565b50436102c56102b4610b05565b60038401549063ffffffff610c8016565b116040518060600160405280602c8152602001610e32602c91399061032e57604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156101f25781810151838201526020016101da565b50600180549082015460408051600160e01b6323b872dd0281523360048201523060248201526044810192909252516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b15801561039157600080fd5b505af11580156103a5573d6000803e3d6000fd5b505050506040513d60208110156103bb57600080fd5b505060040180546001600160a01b0319163317905550565b336000908152600260209081526040918290206004810154835160608101909452602580855291936001600160a01b03909116151592909190610dca908301399061046257604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156101f25781810151838201526020016101da565b5060006104a36040518060400160405280600d81526020017f4c69766570656572546f6b656e00000000000000000000000000000000000000815250610c9a565b600480840154845460408051600160e01b6323b872dd02815233948101949094526001600160a01b0392831660248501526044840191909152519293508316916323b872dd916064808201926020929091908290030181600087803b15801561050b57600080fd5b505af115801561051f573d6000803e3d6000fd5b505050506040513d602081101561053557600080fd5b505060028201546001830154600091610554919063ffffffff610d8916565b60015460408051600160e01b63a9059cbb0281523360048201526024810184905290519293506001600160a01b039091169163a9059cbb916044808201926020929091908290030181600087803b1580156105ae57600080fd5b505af11580156105c2573d6000803e3d6000fd5b505050506040513d60208110156105d857600080fd5b5050336000908152600260208190526040822082815560018101839055908101829055600381019190915560040180546001600160a01b0319169055505050565b60026020819052600091825260409091208054600182015492820154600383015460049093015491939290916001600160a01b031685565b6001600160a01b0380821660009081526002602090815260409182902060048101548351808501909452601384527f4c50545f4f524445525f4e4f545f42555945520000000000000000000000000092840192909252921633146106f957604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156101f25781810151838201526020016101da565b5043816003015410604051806060016040528060228152602001610def602291399061076957604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156101f25781810151838201526020016101da565b50600061078782600201548360010154610d8990919063ffffffff16565b60015460408051600160e01b63a9059cbb0281523360048201526024810184905290519293506001600160a01b039091169163a9059cbb916044808201926020929091908290030181600087803b1580156107e157600080fd5b505af11580156107f5573d6000803e3d6000fd5b505050506040513d602081101561080b57600080fd5b5050505050565b33600090815260026020818152604092839020918201548351808501909452601b84527f4c50545f4f524445525f494e495449414c495345445f4f52444552000000000091840191909152909190156108af57604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156101f25781810151838201526020016101da565b5060015460408051600160e01b6323b872dd0281523360048201523060248201526044810186905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b15801561090d57600080fd5b505af1158015610921573d6000803e3d6000fd5b505050506040513d602081101561093757600080fd5b50506040805160a081018252958652602080870195865286820194855260608701938452600060808801818152338252600292839052929020965187559451600187015592519385019390935551600384015551600490920180546001600160a01b0319166001600160a01b039093169290921790915550565b336000908152600260209081526040918290206004810154835160608101909452602180855291936001600160a01b039091161592909190610e119083013990610a3f57604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156101f25781810151838201526020016101da565b50600154600282015460408051600160e01b63a9059cbb0281523360048201526024810192909252516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b158015610a9c57600080fd5b505af1158015610ab0573d6000803e3d6000fd5b505050506040513d6020811015610ac657600080fd5b5050336000908152600260208190526040822082815560018101839055908101829055600381019190915560040180546001600160a01b031916905550565b600080610b466040518060400160405280600e81526020017f426f6e64696e674d616e61676572000000000000000000000000000000000000815250610c9a565b90506000816001600160a01b0316636cf6d6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8357600080fd5b505afa158015610b97573d6000803e3d6000fd5b505050506040513d6020811015610bad57600080fd5b505160408051808201909152600d81527f526f756e64734d616e61676572000000000000000000000000000000000000006020820152909150600090610bf290610c9a565b90506000816001600160a01b0316638b649b946040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2f57600080fd5b505afa158015610c43573d6000803e3d6000fd5b505050506040513d6020811015610c5957600080fd5b50519050610c778167ffffffffffffffff851663ffffffff610da216565b94505050505090565b600082821115610c8f57600080fd5b508082035b92915050565b600080826040516020018082805190602001908083835b60208310610cd05780518252601f199092019160209182019101610cb1565b51815160209384036101000a60001901801990921691161790526040805192909401828103601f19018352808552825192820192909220600054600160e31b631c2d8fb30284526004840182905294519097506001600160a01b03909416955063e16c7d9894506024808301949193509091829003018186803b158015610d5657600080fd5b505afa158015610d6a573d6000803e3d6000fd5b505050506040513d6020811015610d8057600080fd5b50519392505050565b600082820183811015610d9b57600080fd5b9392505050565b600082610db157506000610c94565b82820282848281610dbe57fe5b0414610d9b57600080fdfe4c50545f4f524445525f53454c4c5f4f524445525f4e4f545f434f4d4d49545445445f544f4c50545f4f524445525f5354494c4c5f57495448494e5f4c4f434b5f504552494f444c50545f4f524445525f53454c4c5f4f524445525f434f4d4d49545445445f544f4c50545f4f524445525f434f4d4d49544d454e545f57495448494e5f554e424f4e44494e475f504552494f44a165627a7a723058200eb5a4991cfae82ac488bf26852a2f7408ef5fb3cf145a506feadd3c0fa40e8a0029000000000000000000000000f96d54e490317c557a967abfa5d6e33006be69b300000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359",
  "constructorArguments": "000000000000000000000000f96d54e490317c557a967abfa5d6e33006be69b300000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359"
}