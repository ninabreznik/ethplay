{
  "address": "0x792e0fc822ac6ff5531e46425f13540f1f68a7a8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CoinHot",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-28\n*/\n\npragma solidity ^0.4.21;\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\nlibrary DateTime {\n        /*\n         *  Date and Time utilities for ethereum contracts\n         *\n         */\n        struct MyDateTime {\n                uint16 year;\n                uint8 month;\n                uint8 day;\n                uint8 hour;\n                uint8 minute;\n                uint8 second;\n                uint8 weekday;\n        }\n        uint constant DAY_IN_SECONDS = 86400;\n        uint constant YEAR_IN_SECONDS = 31536000;\n        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n        uint constant HOUR_IN_SECONDS = 3600;\n        uint constant MINUTE_IN_SECONDS = 60;\n        uint16 constant ORIGIN_YEAR = 1970;\n        function isLeapYear(uint16 year) internal pure returns (bool) {\n                if (year % 4 != 0) {\n                        return false;\n                }\n                if (year % 100 != 0) {\n                        return true;\n                }\n                if (year % 400 != 0) {\n                        return false;\n                }\n                return true;\n        }\n        function leapYearsBefore(uint year) internal pure returns (uint) {\n                year -= 1;\n                return year / 4 - year / 100 + year / 400;\n        }\n        function getDaysInMonth(uint8 month, uint16 year) internal pure returns (uint8) {\n                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                        return 31;\n                }\n                else if (month == 4 || month == 6 || month == 9 || month == 11) {\n                        return 30;\n                }\n                else if (isLeapYear(year)) {\n                        return 29;\n                }\n                else {\n                        return 28;\n                }\n        }\n        function parseTimestamp(uint timestamp) internal pure returns (MyDateTime dt) {\n                uint secondsAccountedFor = 0;\n                uint buf;\n                uint8 i;\n                // Year\n                dt.year = getYear(timestamp);\n                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n                // Month\n                uint secondsInMonth;\n                for (i = 1; i <= 12; i++) {\n                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n                        if (secondsInMonth + secondsAccountedFor > timestamp) {\n                                dt.month = i;\n                                break;\n                        }\n                        secondsAccountedFor += secondsInMonth;\n                }\n                // Day\n                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n                        if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n                                dt.day = i;\n                                break;\n                        }\n                        secondsAccountedFor += DAY_IN_SECONDS;\n                }\n                // Hour\n                dt.hour = 0;//getHour(timestamp);\n                // Minute\n                dt.minute = 0;//getMinute(timestamp);\n                // Second\n                dt.second = 0;//getSecond(timestamp);\n                // Day of week.\n                dt.weekday = 0;//getWeekday(timestamp);\n        }\n        function getYear(uint timestamp) internal pure returns (uint16) {\n                uint secondsAccountedFor = 0;\n                uint16 year;\n                uint numLeapYears;\n                // Year\n                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n                while (secondsAccountedFor > timestamp) {\n                        if (isLeapYear(uint16(year - 1))) {\n                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n                        }\n                        else {\n                                secondsAccountedFor -= YEAR_IN_SECONDS;\n                        }\n                        year -= 1;\n                }\n                return year;\n        }\n        function getMonth(uint timestamp) internal pure returns (uint8) {\n                return parseTimestamp(timestamp).month;\n        }\n        function getDay(uint timestamp) internal pure returns (uint8) {\n                return parseTimestamp(timestamp).day;\n        }\n        function getHour(uint timestamp) internal pure returns (uint8) {\n                return uint8((timestamp / 60 / 60) % 24);\n        }\n        function getMinute(uint timestamp) internal pure returns (uint8) {\n                return uint8((timestamp / 60) % 60);\n        }\n        function getSecond(uint timestamp) internal pure returns (uint8) {\n                return uint8(timestamp % 60);\n        }\n        function toTimestamp(uint16 year, uint8 month, uint8 day) internal pure returns (uint timestamp) {\n                return toTimestamp(year, month, day, 0, 0, 0);\n        }\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) internal pure returns (uint timestamp) {\n                uint16 i;\n                // Year\n                for (i = ORIGIN_YEAR; i < year; i++) {\n                        if (isLeapYear(i)) {\n                                timestamp += LEAP_YEAR_IN_SECONDS;\n                        }\n                        else {\n                                timestamp += YEAR_IN_SECONDS;\n                        }\n                }\n                // Month\n                uint8[12] memory monthDayCounts;\n                monthDayCounts[0] = 31;\n                if (isLeapYear(year)) {\n                        monthDayCounts[1] = 29;\n                }\n                else {\n                        monthDayCounts[1] = 28;\n                }\n                monthDayCounts[2] = 31;\n                monthDayCounts[3] = 30;\n                monthDayCounts[4] = 31;\n                monthDayCounts[5] = 30;\n                monthDayCounts[6] = 31;\n                monthDayCounts[7] = 31;\n                monthDayCounts[8] = 30;\n                monthDayCounts[9] = 31;\n                monthDayCounts[10] = 30;\n                monthDayCounts[11] = 31;\n                for (i = 1; i < month; i++) {\n                        timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n                }\n                // Day\n                timestamp += DAY_IN_SECONDS * (day - 1);\n                // Hour\n                timestamp += HOUR_IN_SECONDS * (hour);\n                // Minute\n                timestamp += MINUTE_IN_SECONDS * (minute);\n                // Second\n                timestamp += second;\n                return timestamp;\n        }\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    pendingOwner = newOwner;\n  }\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner public {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n  mapping(address => uint256) balances;\n  uint256 totalSupply_;\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n}\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n  mapping (address => mapping (address => uint256)) internal allowed;\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n}\n/**\n * @title Helps contracts guard agains reentrancy attacks.\n * @author Remco Bloemen <[email protected]π.com>\n * @notice If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n  /**\n   * @dev We use a single lock for the whole contract.\n   */\n  bool private reentrancyLock = false;\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * @notice If you mark a function `nonReentrant`, you should also\n   * mark it `external`. Calling one nonReentrant function from\n   * another is not supported. Instead, you can implement a\n   * `private` function doing the actual work, and a `external`\n   * wrapper marked as `nonReentrant`.\n   */\n  modifier nonReentrant() {\n    require(!reentrancyLock);\n    reentrancyLock = true;\n    _;\n    reentrancyLock = false;\n  }\n}\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract StandardBurnableToken is StandardToken {\n    event Burn(address indexed burner, uint256 value);\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public returns (bool) {\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(burner, _value);\n        return true;\n    }\n}\ncontract Operational is Claimable {\n    address public operator;\n    function Operational(address _operator) public {\n      operator = _operator;\n    }\n    modifier onlyOperator() {\n      require(msg.sender == operator);\n      _;\n    }\n    function transferOperator(address newOperator) public onlyOwner {\n      require(newOperator != address(0));\n      operator = newOperator;\n    }\n}\ncontract Frozenable is Operational, StandardBurnableToken, ReentrancyGuard {\n    using DateTime for uint256;\n    struct FrozenRecord {\n        uint256 value;\n        uint256 unfreezeIndex;\n    }\n    uint256 public frozenBalance;\n    mapping (uint256 => FrozenRecord) public frozenRecords;\n    uint256 mulDecimals = 100000000; // match decimals\n    event SystemFreeze(address indexed owner, uint256 value, uint256 unfreezeIndex);\n    event Unfreeze(address indexed owner, uint256 value, uint256 unfreezeTime);\n    function Frozenable(address _operator) Operational(_operator) public {}\n    // freeze system' balance\n    function systemFreeze(uint256 _value, uint256 _unfreezeTime) internal {\n        uint256 unfreezeIndex = uint256(_unfreezeTime.parseTimestamp().year) * 10000 + uint256(_unfreezeTime.parseTimestamp().month) * 100 + uint256(_unfreezeTime.parseTimestamp().day);\n        balances[owner] = balances[owner].sub(_value);\n        frozenRecords[unfreezeIndex] = FrozenRecord({value: _value, unfreezeIndex: unfreezeIndex});\n        frozenBalance = frozenBalance.add(_value);\n        emit SystemFreeze(owner, _value, _unfreezeTime);\n    }\n    // unfreeze frozen amount\n    // everyone can call this function to unfreeze balance\n    function unfreeze(uint256 timestamp) public returns (uint256 unfreezeAmount) {\n        require(timestamp <= block.timestamp);\n        uint256 unfreezeIndex = uint256(timestamp.parseTimestamp().year) * 10000 + uint256(timestamp.parseTimestamp().month) * 100 + uint256(timestamp.parseTimestamp().day);\n        frozenBalance = frozenBalance.sub(frozenRecords[unfreezeIndex].value);\n        balances[owner] = balances[owner].add(frozenRecords[unfreezeIndex].value);\n        unfreezeAmount = frozenRecords[unfreezeIndex].value;\n        emit Unfreeze(owner, unfreezeAmount, timestamp);\n        frozenRecords[unfreezeIndex].value = 0;\n        return unfreezeAmount;\n    }\n}\ncontract Releaseable is Frozenable {\n    using SafeMath for uint;\n    uint256 public createTime;\n    uint256 public standardReleaseAmount = mulDecimals.mul(1024000); //\n    uint256 public releaseAmountPerDay = mulDecimals.mul(1024000);\n    uint256 public releasedSupply = 0;\n    event Release(address indexed receiver, uint256 value, uint256 sysAmount, uint256 releaseTime);\n    struct ReleaseRecord {\n        uint256 amount; // release amount\n        uint256 releaseIndex; // release time\n    }\n    mapping (uint256 => ReleaseRecord) public releaseRecords;\n    function Releaseable(\n                    address _operator, uint256 _initialSupply\n                ) Frozenable(_operator) public {\n        createTime = 1514563200;\n        releasedSupply = _initialSupply;\n        balances[owner] = _initialSupply;\n        totalSupply_ = mulDecimals.mul(369280000);\n    }\n    function release(uint256 timestamp, uint256 sysAmount) public onlyOperator returns(uint256 _actualRelease) {\n        require(timestamp >= createTime && timestamp <= block.timestamp);\n        require(!checkIsReleaseRecordExist(timestamp));\n        updateReleaseAmount(timestamp);\n        require(sysAmount <= releaseAmountPerDay.mul(4).div(5));\n        require(totalSupply_ >= releasedSupply.add(releaseAmountPerDay));\n        balances[owner] = balances[owner].add(releaseAmountPerDay);\n        releasedSupply = releasedSupply.add(releaseAmountPerDay);\n        uint256 _releaseIndex = uint256(timestamp.parseTimestamp().year) * 10000 + uint256(timestamp.parseTimestamp().month) * 100 + uint256(timestamp.parseTimestamp().day);\n        releaseRecords[_releaseIndex] = ReleaseRecord(releaseAmountPerDay, _releaseIndex);\n        emit Release(owner, releaseAmountPerDay, sysAmount, timestamp);\n        systemFreeze(sysAmount.div(5), timestamp.add(180 days));\n        systemFreeze(sysAmount.mul(7).div(10), timestamp.add(200 years));\n        return releaseAmountPerDay;\n    }\n    // check is release record existed\n    // if existed return true, else return false\n    function checkIsReleaseRecordExist(uint256 timestamp) internal view returns(bool _exist) {\n        bool exist = false;\n        uint256 releaseIndex = uint256(timestamp.parseTimestamp().year) * 10000 + uint256(timestamp.parseTimestamp().month) * 100 + uint256(timestamp.parseTimestamp().day);\n        if (releaseRecords[releaseIndex].releaseIndex == releaseIndex){\n            exist = true;\n        }\n        return exist;\n    }\n    // update release amount for single day\n    // according to dividend rule in https://coinhot.com\n    function updateReleaseAmount(uint256 timestamp) internal {\n        uint256 timeElapse = timestamp.sub(createTime);\n        uint256 cycles = timeElapse.div(180 days);\n        if (cycles > 0) {\n            if (cycles <= 10) {\n                releaseAmountPerDay = standardReleaseAmount;\n                for (uint index = 0; index < cycles; index++) {\n                    releaseAmountPerDay = releaseAmountPerDay.div(2);\n                }\n            } else {\n                releaseAmountPerDay = 0;\n            }\n        }\n    }\n}\ncontract CoinHot is Releaseable {\n    string public standard = '2018042801';\n    string public name = 'CoinHot';\n    string public symbol = 'CHT';\n    uint8 public decimals = 8;\n    function CoinHot() Releaseable(0x00C596061777d9A3ffEBcB759e4CE61098e58EA0, mulDecimals.mul(1000000)) public {}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseAmountPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"releaseRecords\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"releaseIndex\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"sysAmount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[{\"name\":\"_actualRelease\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"unfreezeAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standardReleaseAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releasedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"frozenRecords\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"unfreezeIndex\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sysAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"Release\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unfreezeIndex\",\"type\":\"uint256\"}],\"name\":\"SystemFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unfreezeTime\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60606040526000600660006101000a81548160ff0219169083151502179055506305f5e1006009556200004f620fa0006009546200030364010000000002620023d4179091906401000000009004565b600b556200007a620fa0006009546200030364010000000002620023d4179091906401000000009004565b600c556000600d556040805190810160405280600a81526020017f3230313830343238303100000000000000000000000000000000000000000000815250600f9080519060200190620000cf9291906200033f565b506040805190810160405280600781526020017f436f696e486f7400000000000000000000000000000000000000000000000000815250601090805190602001906200011d9291906200033f565b506040805190810160405280600381526020017f4348540000000000000000000000000000000000000000000000000000000000815250601190805190602001906200016b9291906200033f565b506008601260006101000a81548160ff021916908360ff16021790555034156200019457600080fd5b72c596061777d9a3ffebcb759e4ce61098e58ea0620001d0620f42406009546200030364010000000002620023d4179091906401000000009004565b8180336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050635a466680600a8190555080600d8190555080600360008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620002f5631602c4006009546200030364010000000002620023d4179091906401000000009004565b6004819055505050620003ee565b60008083141562000318576000905062000339565b81830290508183828115156200032a57fe5b041415156200033557fe5b8090505b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200038257805160ff1916838001178555620003b3565b82800160010185558215620003b3579182015b82811115620003b257825182559160200191906001019062000395565b5b509050620003c29190620003c6565b5090565b620003eb91905b80821115620003e7576000816000905550600101620003cd565b5090565b90565b612a4380620003fe6000396000f30060606040526004361061016a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461016f57806308cb4cb5146101fd578063095ea7b31461022657806318160ddd1461028057806323b872dd146102a957806326e6074b1461032257806329605e771461034b5780632ac12fde14610384578063313ce567146103c2578063366a4120146103f157806342966c68146104315780634e71e0c81461046c578063570ca735146104815780635a3b7e42146104d657806361dcd7ab14610564578063661884631461058d5780636623fc46146105e757806370a082311461061e5780637e7712f21461066b5780638da5cb5b1461069457806395d89b41146106e9578063a9059cbb14610777578063b813c627146107d1578063d73dd623146107fa578063dd62ed3e14610854578063e30c3978146108c0578063f25efc4914610915578063f2fde38b14610953575b600080fd5b341561017a57600080fd5b61018261098c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101c25780820151818401526020810190506101a7565b50505050905090810190601f1680156101ef5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561020857600080fd5b610210610a2a565b6040518082815260200191505060405180910390f35b341561023157600080fd5b610266600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a30565b604051808215151515815260200191505060405180910390f35b341561028b57600080fd5b610293610b22565b6040518082815260200191505060405180910390f35b34156102b457600080fd5b610308600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b2c565b604051808215151515815260200191505060405180910390f35b341561032d57600080fd5b610335610eeb565b6040518082815260200191505060405180910390f35b341561035657600080fd5b610382600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ef1565b005b341561038f57600080fd5b6103a56004808035906020019091905050610fcc565b604051808381526020018281526020019250505060405180910390f35b34156103cd57600080fd5b6103d5610ff0565b604051808260ff1660ff16815260200191505060405180910390f35b34156103fc57600080fd5b61041b6004808035906020019091908035906020019091905050611003565b6040518082815260200191505060405180910390f35b341561043c57600080fd5b6104526004808035906020019091905050611374565b604051808215151515815260200191505060405180910390f35b341561047757600080fd5b61047f6114d0565b005b341561048c57600080fd5b61049461166f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104e157600080fd5b6104e9611695565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561052957808201518184015260208101905061050e565b50505050905090810190601f1680156105565780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561056f57600080fd5b610577611733565b6040518082815260200191505060405180910390f35b341561059857600080fd5b6105cd600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611739565b604051808215151515815260200191505060405180910390f35b34156105f257600080fd5b61060860048080359060200190919050506119ca565b6040518082815260200191505060405180910390f35b341561062957600080fd5b610655600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611beb565b6040518082815260200191505060405180910390f35b341561067657600080fd5b61067e611c34565b6040518082815260200191505060405180910390f35b341561069f57600080fd5b6106a7611c3a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106f457600080fd5b6106fc611c5f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561073c578082015181840152602081019050610721565b50505050905090810190601f1680156107695780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561078257600080fd5b6107b7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611cfd565b604051808215151515815260200191505060405180910390f35b34156107dc57600080fd5b6107e4611f21565b6040518082815260200191505060405180910390f35b341561080557600080fd5b61083a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611f27565b604051808215151515815260200191505060405180910390f35b341561085f57600080fd5b6108aa600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612123565b6040518082815260200191505060405180910390f35b34156108cb57600080fd5b6108d36121aa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561092057600080fd5b61093660048080359060200190919050506121d0565b604051808381526020018281526020019250505060405180910390f35b341561095e57600080fd5b61098a600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506121f4565b005b60108054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a225780601f106109f757610100808354040283529160200191610a22565b820191906000526020600020905b815481529060010190602001808311610a0557829003601f168201915b505050505081565b600c5481565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600454905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610b6957600080fd5b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610bb757600080fd5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610c4257600080fd5b610c9482600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461229390919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d2982600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122ac90919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dfb82600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461229390919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60075481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f4c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610f8857600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600e6020528060005260406000206000915090508060000154908060010154905082565b601260009054906101000a900460ff1681565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561106257600080fd5b600a5484101580156110745750428411155b151561107f57600080fd5b611088846122c8565b15151561109457600080fd5b61109d84612339565b6110c660056110b86004600c546123d490919063ffffffff16565b61240c90919063ffffffff16565b83111515156110d457600080fd5b6110eb600c54600d546122ac90919063ffffffff16565b600454101515156110fb57600080fd5b611170600c54600360008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122ac90919063ffffffff16565b600360008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111eb600c54600d546122ac90919063ffffffff16565b600d819055506111fa84612422565b6040015160ff16606461120c86612422565b6020015160ff160261271061122087612422565b6000015161ffff1602010190506040805190810160405280600c54815260200182815250600e600083815260200190815260200160002060008201518160000155602082015181600101559050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f6d0f8bf20fdbf0501c403fa7863679b821f006a63b09c689ee2687d00220edf9600c54858760405180848152602001838152602001828152602001935050505060405180910390a261132161130660058561240c90919063ffffffff16565b61131c62ed4e00876122ac90919063ffffffff16565b6125a7565b61136861134b600a61133d6007876123d490919063ffffffff16565b61240c90919063ffffffff16565b611363640177f03c00876122ac90919063ffffffff16565b6125a7565b600c5491505092915050565b600080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111515156113c557600080fd5b33905061141a83600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461229390919063ffffffff16565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506114728360045461229390919063ffffffff16565b6004819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5846040518082815260200191505060405180910390a26001915050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561152c57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f8054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561172b5780601f106117005761010080835404028352916020019161172b565b820191906000526020600020905b81548152906001019060200180831161170e57829003601f168201915b505050505081565b600a5481565b600080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083111561184a576000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118de565b61185d838261229390919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000804283111515156119dc57600080fd5b6119e583612422565b6040015160ff1660646119f785612422565b6020015160ff1602612710611a0b86612422565b6000015161ffff160201019050611a43600860008381526020019081526020016000206000015460075461229390919063ffffffff16565b600781905550611ad26008600083815260200190815260200160002060000154600360008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122ac90919063ffffffff16565b600360008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600860008281526020019081526020016000206000015491506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7ed75eaf82098257819f0bd6dd7f79062e49152905980263c73ee48565a656a58385604051808381526020018281526020019250505060405180910390a26000600860008381526020019081526020016000206000018190555081915050919050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600b5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60118054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611cf55780601f10611cca57610100808354040283529160200191611cf5565b820191906000526020600020905b815481529060010190602001808311611cd857829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611d3a57600080fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611d8857600080fd5b611dda82600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461229390919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e6f82600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122ac90919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600d5481565b6000611fb882600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122ac90919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60086020528060005260406000206000915090508060000154908060010154905082565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561224f57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008282111515156122a157fe5b818303905092915050565b600081830190508281101515156122bf57fe5b80905092915050565b60008060008091506122d984612422565b6040015160ff1660646122eb86612422565b6020015160ff16026127106122ff87612422565b6000015161ffff16020101905080600e600083815260200190815260200160002060010154141561232f57600191505b8192505050919050565b6000806000612353600a548561229390919063ffffffff16565b925061236b62ed4e008461240c90919063ffffffff16565b915060008211156123ce57600a821115156123c457600b54600c81905550600090505b818110156123bf576123ac6002600c5461240c90919063ffffffff16565b600c81905550808060010191505061238e565b6123cd565b6000600c819055505b5b50505050565b6000808314156123e75760009050612406565b81830290508183828115156123f857fe5b0414151561240257fe5b8090505b92915050565b6000818381151561241957fe5b04905092915050565b61242a6129c3565b6000806000806000935061243d86612792565b856000019061ffff16908161ffff168152505061245f6107b261ffff1661283d565b612470866000015161ffff1661283d565b039250826301e285000284019350826107b286600001510361ffff16036301e133800284019350600191505b600c8260ff161115156124f4576124b7828660000151612876565b60ff16620151800290508584820111156124e25781856020019060ff16908160ff16815250506124f4565b8084019350818060010192505061249c565b600191505b61250b85602001518660000151612876565b60ff168260ff161115156125525785846201518001111561253d5781856040019060ff16908160ff1681525050612552565b620151808401935081806001019250506124f9565b6000856060019060ff16908160ff16815250506000856080019060ff16908160ff168152505060008560a0019060ff16908160ff168152505060008560c0019060ff16908160ff168152505050505050919050565b60006125b282612422565b6040015160ff1660646125c484612422565b6020015160ff16026127106125d885612422565b6000015161ffff16020101905061265883600360008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461229390919063ffffffff16565b600360008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550604080519081016040528084815260200182815250600860008381526020019081526020016000206000820151816000015560208201518160010155905050612710836007546122ac90919063ffffffff16565b6007819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb55465b458f8f3565cd38fc86992b720f5bdddb4532ab881265c1275f0db53d48484604051808381526020018281526020019250505060405180910390a2505050565b600080600080600092506301e13380858115156127ab57fe5b046107b261ffff160191506127c56107b261ffff1661283d565b6127d28361ffff1661283d565b039050806301e285000283019250806107b2830361ffff16036301e1338002830192505b848311156128325761280a60018303612942565b1561281d576301e2850083039250612827565b6301e13380830392505b6001820391506127f6565b819350505050919050565b60006001820391506101908281151561285257fe5b0460648381151561285f57fe5b0460048481151561286c57fe5b0403019050919050565b600060018360ff16148061288d575060038360ff16145b8061289b575060058360ff16145b806128a9575060078360ff16145b806128b7575060088360ff16145b806128c55750600a8360ff16145b806128d35750600c8360ff16145b156128e157601f905061293c565b60048360ff1614806128f6575060068360ff16145b80612904575060098360ff16145b806129125750600b8360ff16145b1561292057601e905061293c565b61292982612942565b1561293757601d905061293c565b601c90505b92915050565b60008060048361ffff1681151561295557fe5b0661ffff1614151561296a57600090506129be565b600060648361ffff1681151561297c57fe5b0661ffff1614151561299157600190506129be565b60006101908361ffff168115156129a457fe5b0661ffff161415156129b957600090506129be565b600190505b919050565b60e060405190810160405280600061ffff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff16815250905600a165627a7a72305820db5a9445fe47c628ef69add9e762c059374f881183af4c7e3a158eb2f126204d0029"
}