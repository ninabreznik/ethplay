{
  "address": "0xa39fcb48adf288f143459d57a1a0756718c919ae",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "x15",
  "compilerVersion": "v0.2.1-2016-01-30-91a6b35",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2016-03-24\n*/\n\ncontract x15{\n\n    struct Participant {\n        address etherAddress;\n        uint amount;\n    }\n\n    Participant[] public participants;\n\n    uint public payoutIdx = 0;\n    uint public collectedFees;\n    uint public balance = 0;\n\n    address public owner;\n\n    // simple single-sig function modifier\n    modifier onlyowner { if (msg.sender == owner) _ }\n\n    // this function is executed at initialization and sets the owner of the contract\n    function Doubler() {\n        owner = msg.sender;\n    }\n\n    // fallback function - simple transactions trigger this\n    function() {\n        enter();\n    }\n    \n    function enter() {\n        if (msg.value < 1 ether) {\n            msg.sender.send(msg.value);\n            return;\n        }\n\n      \t// add a new participant to array\n        uint idx = participants.length;\n        participants.length += 1;\n        participants[idx].etherAddress = msg.sender;\n        participants[idx].amount = msg.value;\n        \n        // collect fees and update contract balance\n        if (idx != 0) {\n            collectedFees += msg.value / 30;\n            balance += msg.value;\n        } \n        else {\n            // first participant has no one above him,\n            // so it goes all to fees\n            collectedFees += msg.value;\n        }\n\n\t// if there are enough ether on the balance we can pay out to an earlier participant\n        if (balance > participants[payoutIdx].amount * 2) {\n            uint transactionAmount = 2 * (participants[payoutIdx].amount - participants[payoutIdx].amount / 30);\n            participants[payoutIdx].etherAddress.send(transactionAmount);\n\n            balance -= participants[payoutIdx].amount * 2;\n            payoutIdx += 1;\n        }\n    }\n\n    function collectFees() onlyowner {\n        if (collectedFees == 0) return;\n\n        owner.send(collectedFees);\n        collectedFees = 0;\n    }\n\n    function setOwner(address _owner) onlyowner {\n        owner = _owner;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"name\":\"etherAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutIdx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Doubler\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"type\":\"function\"}]",
  "bytecode": "606060405260006001600050556000600360005055610493806100226000396000f3606060405236156100775760e060020a600035046313af4035811461008257806335c1d349146100b75780638da5cb5b146101065780639003adfe14610118578063a60f358814610121578063b69ef8a81461012a578063c879657214610133578063e977992d1461015d578063e97dcb6214610174575b6101b161015b610178565b6101b1600435600454600160a060020a03908116339190911614156100b45760048054600160a060020a031916821790555b50565b6101b3600435600080548290811015610002575080526002026000805160206104538339815191528101546000805160206104738339815191529190910154600160a060020a03919091169082565b6101d9600454600160a060020a031681565b6101f660025481565b6101f660015481565b6101f660035481565b6101b1600454600160a060020a039081163391909116141561015b5760025460001415610428575b565b6101b160048054600160a060020a03191633179055565b6101b15b60006000670de0b6b3a764000034101561020857604051600160a060020a033316908290349082818181858883f1935050505050610424565b005b6040518083600160a060020a031681526020018281526020019250505060405180910390f35b60408051600160a060020a03929092168252519081900360200190f35b60408051918252519081900360200190f35b600080546001810180835590935090818480158290116102635760020281600202836000526020600020918201910161026391905b808211156102e9578054600160a060020a0319168155600060019190910190815561023d565b5050505033600060005083815481101561000257818052600202600080516020610453833981519152018054600160a060020a0319169092179091558054349190849081101561000257600202600080516020610473833981519152019190915582146102ed5760028054601e34908104919091019091556003805490910190556102f6565b5090565b60028054340190555b6001546000805490919081101561000257908052600354600291820260008051602061047383398151915201549091029011156104245760015460008054601e9290811015610002578180526002026000805160206104538339815191520190506001016000505404600060005060016000505481548110156100025781805260020260008051602061045383398151915201905060010160005054036002029050600060005060016000505481548110156100025781805260020260008051602061045383398151915201905054604051600160a060020a039190911690600090839082818181858883f150506001548254929350918210159050610002579080526003805460029283026000805160206104738339815191520154909202909103905560018054810190555b5050565b600454600254604051600160a060020a0392909216916000919082818181858883f15050506002555056290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564",
  "constructorArguments": "283026000805160206104738339815191520154909202909103905560018054810190555b5050565b600454600254604051600160a060020a0392909216916000919082818181858883f15050506002555056290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564"
}