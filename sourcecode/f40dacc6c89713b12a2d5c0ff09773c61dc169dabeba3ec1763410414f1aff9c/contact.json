{
  "address": "0x3fbfb88462b2b51972ad7e41ee98dba989b39e7f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EtherGarden",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-22\n*/\n\n/**\n *\n * https://ethergarden.host\n *\n * Welcome to Ether Garden!\n * Here you can earn Ethereum, growing four kinds of vegetables. \n * You will get random kind of vegetable for growing with the first transaction.\n * One acre of garden field gives one vegetable per day. The more acres you have, the more vegetables they give.\n * Attention! Market value of each vegetable will be different. Less grown vegetables will be more expensive.\n * Also market value depends on contract balance, number of all bought acres and  number of all grown vegetables.\n *\n * Send from 0 to 0.00001 ether for sell your all grown vegetables or getting FREE acres, if you have no one acre.\n * Send 0.00001111 ether for reinvest all grown vegetables to the new acres.\n * Minimum invest amount for fields buying is 0.001 ETH.\n * Use 150000 of Gas limit for your transactions.\n *\n * Marketing commissions: 4% for buying arces\n * Admin commissions: 4% for selling vegetable\n * Referrer: 4%\n *\n */\n\npragma solidity ^0.4.25; \n\ncontract EtherGarden{\n\n    using SafeMath for uint256;\n \n    struct Farmer {\n\t\tuint8   vegetableId;\n        uint256 startGrowing;\n        uint256 fieldSize;\n    }\n\n\tmapping (uint8 => uint256) public vegetablesTradeBalance;\n\tmapping (address => Farmer) public farmers;\n\n\tuint256 maxVegetableId = 4;\n\tuint256 minimumInvest = 0.001 ether;\n\tuint256 growingSpeed = 1 days; \n\t\n\tbool public gameStarted = false;\n\tbool public initialized = false;\n\taddress public marketing = 0x25e6142178Fc3Afb7533739F5eDDD4a41227576A;\n\taddress public admin;\n\t\n    /**\n     * @dev Ð¡onstructor Sets the original roles of the contract \n     */\n    constructor() public {\n        admin = msg.sender;\n    }\n\t\n    /**\n     * @dev Modifiers\n     */\t\n    modifier onlyAdmin() {\n        require(msg.sender == admin);\n        _;\n    }\n    modifier isInitialized() {\n        require(initialized && gameStarted);\n        _;\n    }\t\n\n    /**\n     * @dev Market functions\n     */\t\t\n    function() external payable {\n\t\t\n\t\tFarmer storage farmer = farmers[msg.sender];\n\n\t\tif (msg.value >= 0 && msg.value <= 0.00001 ether) {\n\t\t\tif (farmer.vegetableId == 0) {\n\t\t\t\t//Set random vegetale for a new farmer\t\n\t\t\t\trollFieldId();\n\t\t\t\t\n\t\t\t\tgetFreeField();\n\t\t\t} else\n\t\t\t\tsellVegetables();\n        } \n\t\telse if (msg.value == 0.00001111 ether){\n\t\t\treInvest();\n        } \n\t\telse {\n\t\t\tif (farmer.vegetableId == 0) {\n\t\t\t\t//Set random vegetale for a new farmer\t\n\t\t\t\trollFieldId();\t\t\n\t\t\t}\n            buyField();\n        }\t\t\n    }\t \n\n    function sellVegetables() internal isInitialized {\n\t\tFarmer storage farmer = farmers[msg.sender];\n\t\t\n\t\tuint256 value = vegetablesValue(msg.sender);\n\t\tif (value > 0) {\n\t\t\tuint256 sellPrice = vegetablePrice(farmer.vegetableId).mul(value);\n\t\t\t\n\t\t\tif (sellPrice > address(this).balance) {\n\t\t\t\tsellPrice = address(this).balance;\n\t\t\t\t//stop game\n\t\t\t\tgameStarted = false;\n\t\t\t}\n\t\t\t\n\t\t\tuint256 fee = devFee(sellPrice);\n\t\t\t\n\t\t\tfarmer.startGrowing = now;\n\t\t\t\n\t\t\t//Update market values\n\t\t\tvegetablesTradeBalance[farmer.vegetableId] = vegetablesTradeBalance[farmer.vegetableId].add(value);\n\t\t\t\n\t\t\tadmin.transfer(fee);\n\t\t\tmsg.sender.transfer(sellPrice.sub(fee));\n\t\t}\n    }\t \n\t\n    function buyField() internal isInitialized {\n\t\trequire(msg.value >= minimumInvest, \"Too low ETH value\");\n\n\t\tFarmer storage farmer = farmers[msg.sender];\t\n\n\t\t//Calculate acres number for buying\n\t\tuint256 acres = msg.value.div(fieldPrice(msg.value));\n        \n\t\tif (farmer.startGrowing > 0)\n\t\t\tsellVegetables();\n\t\t\n\t\tfarmer.startGrowing = now;\n\t\tfarmer.fieldSize = farmer.fieldSize.add(acres);\n\t\t\n\t\t////Update market values by 20% from the number of the new acres\n\t\tvegetablesTradeBalance[farmer.vegetableId] = vegetablesTradeBalance[farmer.vegetableId].add( acres.div(5) );\n\t\t\n        uint256 fee = devFee(msg.value);\n\t\tmarketing.send(fee);\n\t\t\n        if (msg.data.length == 20) {\n            address _referrer = bytesToAddress(bytes(msg.data));\n\t\t\tif (_referrer != msg.sender && _referrer != address(0)) {\n\t\t\t\t _referrer.send(fee);\n\t\t\t}\n        }\t\t\n    }\n\t \n\tfunction reInvest() internal isInitialized {\n\t\t\n\t\tFarmer storage farmer = farmers[msg.sender];\t\n\t\t\n\t\tuint256 value = vegetablesValue(msg.sender);\n\t\trequire(value > 0, \"No grown vegetables for reinvest\");\n\t\t\n\t\t//Change one vegetable for one acre\n\t\tfarmer.fieldSize = farmer.fieldSize.add(value);\n\t\tfarmer.startGrowing = now;\n\t}\n\t\n    function getFreeField() internal isInitialized {\n\t\tFarmer storage farmer = farmers[msg.sender];\n\t\trequire(farmer.fieldSize == 0);\n\t\t\n\t\tfarmer.fieldSize = freeFieldSize();\n\t\tfarmer.startGrowing = now;\n\t\t\n    }\n\t\n    function initMarket(uint256 _newTradeBalance) public payable onlyAdmin{\n        require(!initialized);\n        initialized = true;\n\t\tgameStarted = true;\n\t\t\n\t\t//Set the first trade balance\n\t\tfor (uint8 _vegetableId = 1; _vegetableId <= maxVegetableId; _vegetableId++)\n\t\t\tvegetablesTradeBalance[_vegetableId] = _newTradeBalance;\n    }\t\n\t\n\tfunction rollFieldId() internal {\n\t\tFarmer storage farmer = farmers[msg.sender];\n\t\t\n\t    //Set random vegetables field for a new farmer\n\t\tfarmer.vegetableId = uint8(uint256(blockhash(block.number - 1)) % maxVegetableId + 1);\n\t}\n\t\n    /**\n     * @dev Referrer functions\n     */\t\t\n\n\tfunction bytesToAddress(bytes _source) internal pure returns(address parsedreferrer) {\n        assembly {\n            parsedreferrer := mload(add(_source,0x14))\n        }\n        return parsedreferrer;\n    }\t\n\t\n    /**\n     * @dev Views\n     */\t\t\n\t \n    function vegetablePrice(uint8 _VegetableId) public view returns(uint256){\n\t\treturn address(this).balance.div(maxVegetableId).div(vegetablesTradeBalance[_VegetableId]);\n    }\n\n    function vegetablesValue(address _Farmer) public view returns(uint256){\n\t\t//ONE acre gives ONE vegetable per day. Many acres give vegetables faster.\n\t\treturn farmers[_Farmer].fieldSize.mul( now.sub(farmers[_Farmer].startGrowing) ).div(growingSpeed);\n    }\t\n\t\n    function fieldPrice(uint256 _subValue) public view returns(uint256){\n\t    uint256 CommonTradeBalance;\n\t\t\n\t\tfor (uint8 _vegetableId = 1; _vegetableId <= maxVegetableId; _vegetableId++)\n\t\t\tCommonTradeBalance = CommonTradeBalance.add(vegetablesTradeBalance[_vegetableId]);\n\t\t\t\n\t\t//_subValue need to use the previous value of the balance before acres buying.\n\t\treturn ( address(this).balance.sub(_subValue) ).div(CommonTradeBalance);\n    }\n\t\n\tfunction freeFieldSize() public view returns(uint256) {\n\t\treturn minimumInvest.div(fieldPrice(0));\n\t}\n\t\n\tfunction devFee(uint256 _amount) internal pure returns(uint256){\n        return _amount.mul(4).div(100); //4%\n    }\n\t\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"vegetablesTradeBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketing\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"farmers\",\"outputs\":[{\"name\":\"vegetableId\",\"type\":\"uint8\"},{\"name\":\"startGrowing\",\"type\":\"uint256\"},{\"name\":\"fieldSize\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_VegetableId\",\"type\":\"uint8\"}],\"name\":\"vegetablePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_subValue\",\"type\":\"uint256\"}],\"name\":\"fieldPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_Farmer\",\"type\":\"address\"}],\"name\":\"vegetablesValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freeFieldSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTradeBalance\",\"type\":\"uint256\"}],\"name\":\"initMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
  "bytecode": "60806040526004600281905566038d7ea4c6800060035562015180905560058054600160b060020a0319167525e6142178fc3afb7533739f5eddd4a41227576a000017905534801561005057600080fd5b5060068054600160a060020a03191633179055610a34806100726000396000f3006080604052600436106100ae5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630d8b3a3a8114610139578063158ef93e146101665780632d3e474a1461018f578063401b2168146101c05780635e123ce414610203578063787fccc214610218578063cb11213114610233578063db24eb741461024b578063e41bd9f01461026c578063f11db84514610281578063f851a4401461028e575b3360009081526001602052604081209034108015906100d357506509184e72a0003411155b1561010557805460ff1615156100f8576100eb6102a3565b6100f36102d8565b610100565b610100610334565b610136565b34650a1abf9a7c00141561011b5761010061048d565b805460ff16151561012e5761012e6102a3565b610136610565565b50005b34801561014557600080fd5b5061015460ff6004351661077f565b60408051918252519081900360200190f35b34801561017257600080fd5b5061017b610791565b604080519115158252519081900360200190f35b34801561019b57600080fd5b506101a461079f565b60408051600160a060020a039092168252519081900360200190f35b3480156101cc57600080fd5b506101e1600160a060020a03600435166107b4565b6040805160ff9094168452602084019290925282820152519081900360600190f35b34801561020f57600080fd5b5061017b6107da565b34801561022457600080fd5b5061015460ff600435166107e3565b34801561023f57600080fd5b50610154600435610822565b34801561025757600080fd5b50610154600160a060020a036004351661087f565b34801561027857600080fd5b506101546108e1565b61028c600435610904565b005b34801561029a57600080fd5b506101a461097d565b3360009081526001602052604090206002546000194301408115156102c457fe5b825460ff191691900660010160ff16179055565b600554600090610100900460ff1680156102f4575060055460ff165b15156102ff57600080fd5b5033600090815260016020526040902060028101541561031e57600080fd5b6103266108e1565b600282015542600190910155565b600080600080600560019054906101000a900460ff168015610358575060055460ff165b151561036357600080fd5b336000818152600160205260409020945061037d9061087f565b925060008311156104875783546103a890849061039c9060ff166107e3565b9063ffffffff61098c16565b915030318211156103c2576005805460ff19169055303191505b6103cb826109b5565b426001860155845460ff166000908152602081905260409020549091506103f8908463ffffffff6109cd16565b845460ff16600090815260208190526040808220929092556006549151600160a060020a039092169183156108fc0291849190818181858888f19350505050158015610448573d6000803e3d6000fd5b50336108fc61045d848463ffffffff6109da16565b6040518115909202916000818181858888f19350505050158015610485573d6000803e3d6000fd5b505b50505050565b6005546000908190610100900460ff1680156104ab575060055460ff165b15156104b657600080fd5b33600081815260016020526040902092506104d09061087f565b90506000811161054157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4e6f2067726f776e20766567657461626c657320666f72207265696e76657374604482015290519081900360640190fd5b6002820154610556908263ffffffff6109cd16565b60028301555042600190910155565b600080600080600560019054906101000a900460ff168015610589575060055460ff165b151561059457600080fd5b60035434101561060557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f546f6f206c6f77204554482076616c7565000000000000000000000000000000604482015290519081900360640190fd5b336000908152600160205260409020935061062f61062234610822565b349063ffffffff6109ec16565b925060008460010154111561064657610646610334565b4260018501556002840154610661908463ffffffff6109cd16565b600285015561069a61067a84600563ffffffff6109ec16565b855460ff166000908152602081905260409020549063ffffffff6109cd16565b845460ff166000908152602081905260409020556106b7346109b5565b600554604051919350620100009004600160a060020a0316906108fc8415029084906000818181858888f15050506014361415915061048790505761072c6000368080601f01602080910402602001604051908101604052809392919081815260200183838082843750610a01945050505050565b9050600160a060020a038116331480159061074f5750600160a060020a03811615155b1561048757604051600160a060020a0382169083156108fc029084906000818181858888f1505050505050505050565b60006020819052908152604090205481565b600554610100900460ff1681565b600554620100009004600160a060020a031681565b600160208190526000918252604090912080549181015460029091015460ff9092169183565b60055460ff1681565b60ff811660009081526020819052604081205460025461081c91906108109030319063ffffffff6109ec16565b9063ffffffff6109ec16565b92915050565b60008060015b60025460ff8216116108625760ff811660009081526020819052604090205461085890839063ffffffff6109cd16565b9150600101610828565b6108778261081030318763ffffffff6109da16565b949350505050565b600454600160a060020a038216600090815260016020819052604082200154909161081c91610810906108b990429063ffffffff6109da16565b600160a060020a0386166000908152600160205260409020600201549063ffffffff61098c16565b60006108ff6108f06000610822565b6003549063ffffffff6109ec16565b905090565b600654600090600160a060020a0316331461091e57600080fd5b600554610100900460ff161561093357600080fd5b506005805460ff1961ff0019909116610100171660019081179091555b60025460ff8216116109795760ff81166000908152602081905260409020829055600101610950565b5050565b600654600160a060020a031681565b600082151561099d5750600061081c565b508181028183828115156109ad57fe5b041461081c57fe5b600061081c606461081084600463ffffffff61098c16565b8181018281101561081c57fe5b6000828211156109e657fe5b50900390565b600081838115156109f957fe5b049392505050565b60140151905600a165627a7a7230582085aac09a51b69e53d452e206b42686b39e5b026e97d20d49433ea60c08c39ae20029"
}