{
  "address": "0xd309865f2ab3ca793d167b595d372905a1ca6eb1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MainToken",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-11\n*/\n\n/*\n * This file was generated by MyWish Platform (https://mywish.io/)\n * The complete code could be found at https://github.com/MyWishPlatform/\n * Copyright (C) 2018 MyWish\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.4.20;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n\n\ncontract FreezableToken is StandardToken {\n    // freezing chains\n    mapping (bytes32 => uint64) internal chains;\n    // freezing amounts for each chain\n    mapping (bytes32 => uint) internal freezings;\n    // total freezing balance per address\n    mapping (address => uint) internal freezingBalance;\n\n    event Freezed(address indexed to, uint64 release, uint amount);\n    event Released(address indexed owner, uint amount);\n\n\n    /**\n     * @dev Gets the balance of the specified address include freezing tokens.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return super.balanceOf(_owner) + freezingBalance[_owner];\n    }\n\n    /**\n     * @dev Gets the balance of the specified address without freezing tokens.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function actualBalanceOf(address _owner) public view returns (uint256 balance) {\n        return super.balanceOf(_owner);\n    }\n\n    function freezingBalanceOf(address _owner) public view returns (uint256 balance) {\n        return freezingBalance[_owner];\n    }\n\n    /**\n     * @dev gets freezing count\n     * @param _addr Address of freeze tokens owner.\n     */\n    function freezingCount(address _addr) public view returns (uint count) {\n        uint64 release = chains[toKey(_addr, 0)];\n        while (release != 0) {\n            count ++;\n            release = chains[toKey(_addr, release)];\n        }\n    }\n\n    /**\n     * @dev gets freezing end date and freezing balance for the freezing portion specified by index.\n     * @param _addr Address of freeze tokens owner.\n     * @param _index Freezing portion index. It ordered by release date descending.\n     */\n    function getFreezing(address _addr, uint _index) public view returns (uint64 _release, uint _balance) {\n        for (uint i = 0; i < _index + 1; i ++) {\n            _release = chains[toKey(_addr, _release)];\n            if (_release == 0) {\n                return;\n            }\n        }\n        _balance = freezings[toKey(_addr, _release)];\n    }\n\n    /**\n     * @dev freeze your tokens to the specified address.\n     *      Be careful, gas usage is not deterministic,\n     *      and depends on how many freezes _to address already has.\n     * @param _to Address to which token will be freeze.\n     * @param _amount Amount of token to freeze.\n     * @param _until Release date, must be in future.\n     */\n    function freezeTo(address _to, uint _amount, uint64 _until) public {\n        require(_to != address(0));\n        require(_amount <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n\n        bytes32 currentKey = toKey(_to, _until);\n        freezings[currentKey] = freezings[currentKey].add(_amount);\n        freezingBalance[_to] = freezingBalance[_to].add(_amount);\n\n        freeze(_to, _until);\n        Freezed(_to, _until, _amount);\n    }\n\n    /**\n     * @dev release first available freezing tokens.\n     */\n    function releaseOnce() public {\n        bytes32 headKey = toKey(msg.sender, 0);\n        uint64 head = chains[headKey];\n        require(head != 0);\n        require(uint64(block.timestamp) > head);\n        bytes32 currentKey = toKey(msg.sender, head);\n\n        uint64 next = chains[currentKey];\n\n        uint amount = freezings[currentKey];\n        delete freezings[currentKey];\n\n        balances[msg.sender] = balances[msg.sender].add(amount);\n        freezingBalance[msg.sender] = freezingBalance[msg.sender].sub(amount);\n\n        if (next == 0) {\n            delete chains[headKey];\n        }\n        else {\n            chains[headKey] = next;\n            delete chains[currentKey];\n        }\n        Released(msg.sender, amount);\n    }\n\n    /**\n     * @dev release all available for release freezing tokens. Gas usage is not deterministic!\n     * @return how many tokens was released\n     */\n    function releaseAll() public returns (uint tokens) {\n        uint release;\n        uint balance;\n        (release, balance) = getFreezing(msg.sender, 0);\n        while (release != 0 && block.timestamp > release) {\n            releaseOnce();\n            tokens += balance;\n            (release, balance) = getFreezing(msg.sender, 0);\n        }\n    }\n\n    function toKey(address _addr, uint _release) internal pure returns (bytes32 result) {\n        // WISH masc to increase entropy\n        result = 0x5749534800000000000000000000000000000000000000000000000000000000;\n        assembly {\n            result := or(result, mul(_addr, 0x10000000000000000))\n            result := or(result, _release)\n        }\n    }\n\n    function freeze(address _to, uint64 _until) internal {\n        require(_until > block.timestamp);\n        bytes32 key = toKey(_to, _until);\n        bytes32 parentKey = toKey(_to, uint64(0));\n        uint64 next = chains[parentKey];\n\n        if (next == 0) {\n            chains[parentKey] = _until;\n            return;\n        }\n\n        bytes32 nextKey = toKey(_to, next);\n        uint parent;\n\n        while (next != 0 && _until > next) {\n            parent = next;\n            parentKey = nextKey;\n\n            next = chains[nextKey];\n            nextKey = toKey(_to, next);\n        }\n\n        if (_until == next) {\n            return;\n        }\n\n        if (next != 0) {\n            chains[key] = next;\n        }\n\n        chains[parentKey] = _until;\n    }\n}\n\n/**\n* @title Contract that will work with ERC223 tokens.\n*/\n\ncontract ERC223Receiver {\n    /**\n     * @dev Standard ERC223 function that will handle incoming token transfers.\n     *\n     * @param _from  Token sender address.\n     * @param _value Amount of tokens.\n     * @param _data  Transaction metadata.\n     */\n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\ncontract ERC223Basic is ERC20Basic {\n    function transfer(address to, uint value, bytes data) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n}\n\n\ncontract SuccessfulERC223Receiver is ERC223Receiver {\n    event Invoked(address from, uint value, bytes data);\n\n    function tokenFallback(address _from, uint _value, bytes _data) public {\n        Invoked(_from, _value, _data);\n    }\n}\n\ncontract FailingERC223Receiver is ERC223Receiver {\n    function tokenFallback(address, uint, bytes) public {\n        revert();\n    }\n}\n\ncontract ERC223ReceiverWithoutTokenFallback {\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value > 0);\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n}\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n\n\ncontract FreezableMintableToken is FreezableToken, MintableToken {\n    /**\n     * @dev Mint the specified amount of token to the specified address and freeze it until the specified date.\n     *      Be careful, gas usage is not deterministic,\n     *      and depends on how many freezes _to address already has.\n     * @param _to Address to which token will be freeze.\n     * @param _amount Amount of token to mint and freeze.\n     * @param _until Release date, must be in future.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mintAndFreeze(address _to, uint _amount, uint64 _until) onlyOwner canMint public returns (bool) {\n        totalSupply = totalSupply.add(_amount);\n\n        bytes32 currentKey = toKey(_to, _until);\n        freezings[currentKey] = freezings[currentKey].add(_amount);\n        freezingBalance[_to] = freezingBalance[_to].add(_amount);\n\n        freeze(_to, _until);\n        Mint(_to, _amount);\n        Freezed(_to, _until, _amount);\n        return true;\n    }\n}\n\ncontract Consts {\n    uint constant TOKEN_DECIMALS = 2;\n    uint8 constant TOKEN_DECIMALS_UINT8 = 2;\n    uint constant TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS;\n\n    string constant TOKEN_NAME = \"Chubex\";\n    string constant TOKEN_SYMBOL = \"CBX\";\n    bool constant PAUSED = false;\n    address constant TARGET_USER = 0x7A47F49Ca7863D2DC6Df4a34642C13e61062Cd34;\n    \n    uint constant START_TIME = 1525147200;\n    \n    bool constant CONTINUE_MINTING = true;\n}\n\n\n\n\n/**\n * @title Reference implementation of the ERC223 standard token.\n */\ncontract ERC223Token is ERC223Basic, BasicToken, FailingERC223Receiver {\n    using SafeMath for uint;\n\n    /**\n     * @dev Transfer the specified amount of tokens to the specified address.\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\n     *      The token transfer fails if the recipient is a contract\n     *      but does not implement the `tokenFallback` function\n     *      or the fallback function to receive funds.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     * @param _data  Transaction metadata.\n     */\n    function transfer(address _to, uint _value, bytes _data) public returns (bool) {\n        // Standard function transfer similar to ERC20 transfer with no _data .\n        // Added due to backwards compatibility reasons .\n        uint codeLength;\n\n        assembly {\n            // Retrieve the size of the code on target address, this needs assembly.\n            codeLength := extcodesize(_to)\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        if(codeLength > 0) {\n            ERC223Receiver receiver = ERC223Receiver(_to);\n            receiver.tokenFallback(msg.sender, _value, _data);\n        }\n        Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n\n    /**\n     * @dev Transfer the specified amount of tokens to the specified address.\n     *      This function works the same with the previous one\n     *      but doesn't contain `_data` param.\n     *      Added due to backwards compatibility reasons.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        bytes memory empty;\n        return transfer(_to, _value, empty);\n    }\n}\n\n\ncontract MainToken is Consts, FreezableMintableToken, BurnableToken, Pausable\n    \n{\n    \n\n    function name() pure public returns (string _name) {\n        return TOKEN_NAME;\n    }\n\n    function symbol() pure public returns (string _symbol) {\n        return TOKEN_SYMBOL;\n    }\n\n    function decimals() pure public returns (uint8 _decimals) {\n        return TOKEN_DECIMALS_UINT8;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {\n        require(!paused);\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool _success) {\n        require(!paused);\n        return super.transfer(_to, _value);\n    }\n}",
  "bytecode": "606060405260068054600160b060020a03191633600160a060020a03161790556117e98061002e6000396000f3006060604052600436106101695763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d6f730811461016e57806305d2035b146101b357806306fdde03146101da578063095ea7b3146102645780630bb2cd6b1461028657806317a950ac146102b557806318160ddd146102e657806323b872dd146102f9578063313ce567146103215780633be1e9521461034a5780633f4ba83a1461037b57806340c10f191461038e57806342966c68146103b05780635be7fde8146103c65780635c975abb146103d957806366188463146103ec57806366a92cda1461040e57806370a08231146104215780637d64bcb4146104405780638456cb59146104535780638da5cb5b1461046657806395d89b4114610495578063a9059cbb146104a8578063ca63b5b8146104ca578063d73dd623146104e9578063d8aeedf51461050b578063dd62ed3e1461052a578063f2fde38b1461054f575b600080fd5b341561017957600080fd5b610190600160a060020a036004351660243561056e565b60405167ffffffffffffffff909216825260208201526040908101905180910390f35b34156101be57600080fd5b6101c66105fb565b604051901515815260200160405180910390f35b34156101e557600080fd5b6101ed61060b565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610229578082015183820152602001610211565b50505050905090810190601f1680156102565780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561026f57600080fd5b6101c6600160a060020a036004351660243561064c565b341561029157600080fd5b6101c6600160a060020a036004351660243567ffffffffffffffff604435166106b8565b34156102c057600080fd5b6102d4600160a060020a036004351661082c565b60405190815260200160405180910390f35b34156102f157600080fd5b6102d461083d565b341561030457600080fd5b6101c6600160a060020a0360043581169060243516604435610843565b341561032c57600080fd5b610334610870565b60405160ff909116815260200160405180910390f35b341561035557600080fd5b610379600160a060020a036004351660243567ffffffffffffffff60443516610875565b005b341561038657600080fd5b6103796109d8565b341561039957600080fd5b6101c6600160a060020a0360043516602435610a58565b34156103bb57600080fd5b610379600435610b65565b34156103d157600080fd5b6102d4610c2e565b34156103e457600080fd5b6101c6610c93565b34156103f757600080fd5b6101c6600160a060020a0360043516602435610ca3565b341561041957600080fd5b610379610d9d565b341561042c57600080fd5b6102d4600160a060020a0360043516610f65565b341561044b57600080fd5b6101c6610f8e565b341561045e57600080fd5b610379611019565b341561047157600080fd5b61047961109e565b604051600160a060020a03909116815260200160405180910390f35b34156104a057600080fd5b6101ed6110ad565b34156104b357600080fd5b6101c6600160a060020a03600435166024356110ee565b34156104d557600080fd5b6102d4600160a060020a0360043516611119565b34156104f457600080fd5b6101c6600160a060020a036004351660243561119f565b341561051657600080fd5b6102d4600160a060020a0360043516611243565b341561053557600080fd5b6102d4600160a060020a036004358116906024351661125e565b341561055a57600080fd5b610379600160a060020a0360043516611289565b600080805b836001018110156105c75760036000610596878667ffffffffffffffff16611324565b815260208101919091526040016000205467ffffffffffffffff1692508215156105bf576105f3565b600101610573565b600460006105df878667ffffffffffffffff16611324565b815260208101919091526040016000205491505b509250929050565b60065460a060020a900460ff1681565b6106136117ab565b60408051908101604052600681527f43687562657800000000000000000000000000000000000000000000000000006020820152905090565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b600654600090819033600160a060020a039081169116146106d857600080fd5b60065460a060020a900460ff16156106ef57600080fd5b600054610702908563ffffffff61135816565b6000556107198567ffffffffffffffff8516611324565b60008181526004602052604090205490915061073b908563ffffffff61135816565b600082815260046020908152604080832093909355600160a060020a0388168252600590522054610772908563ffffffff61135816565b600160a060020a0386166000908152600560205260409020556107958584611367565b84600160a060020a03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968858560405190815260200160405180910390a284600160a060020a03167f2ecd071e4d10ed2221b04636ed0724cce66a873aa98c1a31b4bb0e6846d3aab4848660405167ffffffffffffffff909216825260208201526040908101905180910390a2506001949350505050565b600061083782611501565b92915050565b60005481565b60065460009060a860020a900460ff161561085d57600080fd5b61086884848461151c565b949350505050565b600290565b6000600160a060020a038416151561088c57600080fd5b600160a060020a0333166000908152600160205260409020548311156108b157600080fd5b600160a060020a0333166000908152600160205260409020546108da908463ffffffff61169e16565b600160a060020a0333166000908152600160205260409020556109078467ffffffffffffffff8416611324565b600081815260046020526040902054909150610929908463ffffffff61135816565b600082815260046020908152604080832093909355600160a060020a0387168252600590522054610960908463ffffffff61135816565b600160a060020a0385166000908152600560205260409020556109838483611367565b83600160a060020a03167f2ecd071e4d10ed2221b04636ed0724cce66a873aa98c1a31b4bb0e6846d3aab4838560405167ffffffffffffffff909216825260208201526040908101905180910390a250505050565b60065433600160a060020a039081169116146109f357600080fd5b60065460a860020a900460ff161515610a0b57600080fd5b6006805475ff000000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60065460009033600160a060020a03908116911614610a7657600080fd5b60065460a060020a900460ff1615610a8d57600080fd5b600054610aa0908363ffffffff61135816565b6000908155600160a060020a038416815260016020526040902054610acb908363ffffffff61135816565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a03831660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b6000808211610b7357600080fd5b600160a060020a033316600090815260016020526040902054821115610b9857600080fd5b5033600160a060020a038116600090815260016020526040902054610bbd908361169e565b600160a060020a03821660009081526001602052604081209190915554610bea908363ffffffff61169e16565b600055600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b6000806000610c3e33600061056e565b67ffffffffffffffff909116925090505b8115801590610c5d57508142115b15610c8e57610c6a610d9d565b91820191610c7933600061056e565b67ffffffffffffffff90911692509050610c4f565b505090565b60065460a860020a900460ff1681565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115610d0057600160a060020a033381166000908152600260209081526040808320938816835292905290812055610d37565b610d10818463ffffffff61169e16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b6000806000806000610db0336000611324565b60008181526003602052604090205490955067ffffffffffffffff169350831515610dda57600080fd5b8367ffffffffffffffff164267ffffffffffffffff16111515610dfc57600080fd5b610e10338567ffffffffffffffff16611324565b60008181526003602090815260408083205460048352818420805490859055600160a060020a0333168552600190935292205492955067ffffffffffffffff90911693509150610e66908263ffffffff61135816565b600160a060020a033316600090815260016020908152604080832093909355600590522054610e9b908263ffffffff61169e16565b600160a060020a03331660009081526005602052604090205567ffffffffffffffff82161515610ee7576000858152600360205260409020805467ffffffffffffffff19169055610f21565b600085815260036020526040808220805467ffffffffffffffff861667ffffffffffffffff19918216179091558583529120805490911690555b33600160a060020a03167fb21fb52d5749b80f3182f8c6992236b5e5576681880914484d7f4c9b062e619e8260405190815260200160405180910390a25050505050565b600160a060020a038116600090815260056020526040812054610f8783611501565b0192915050565b60065460009033600160a060020a03908116911614610fac57600080fd5b60065460a060020a900460ff1615610fc357600080fd5b6006805474ff0000000000000000000000000000000000000000191660a060020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b60065433600160a060020a0390811691161461103457600080fd5b60065460a860020a900460ff161561104b57600080fd5b6006805475ff000000000000000000000000000000000000000000191660a860020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600654600160a060020a031681565b6110b56117ab565b60408051908101604052600381527f43425800000000000000000000000000000000000000000000000000000000006020820152905090565b60065460009060a860020a900460ff161561110857600080fd5b61111283836116b0565b9392505050565b6000806003600061112b856000611324565b815260208101919091526040016000205467ffffffffffffffff1690505b67ffffffffffffffff81161561119957600190910190600360006111778567ffffffffffffffff8516611324565b815260208101919091526040016000205467ffffffffffffffff169050611149565b50919050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120546111d7908363ffffffff61135816565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a031660009081526005602052604090205490565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60065433600160a060020a039081169116146112a457600080fd5b600160a060020a03811615156112b957600080fd5b600654600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6801000000000000000091909102177f57495348000000000000000000000000000000000000000000000000000000001790565b60008282018381101561111257fe5b6000808080804267ffffffffffffffff87161161138357600080fd5b611397878767ffffffffffffffff16611324565b94506113a4876000611324565b60008181526003602052604090205490945067ffffffffffffffff1692508215156113f7576000848152600360205260409020805467ffffffffffffffff191667ffffffffffffffff88161790556114f8565b61140b878467ffffffffffffffff16611324565b91505b67ffffffffffffffff83161580159061143a57508267ffffffffffffffff168667ffffffffffffffff16115b15611473575060008181526003602052604090205490925067ffffffffffffffff9081169183911661146c8784611324565b915061140e565b8267ffffffffffffffff168667ffffffffffffffff161415611494576114f8565b67ffffffffffffffff8316156114ce576000858152600360205260409020805467ffffffffffffffff191667ffffffffffffffff85161790555b6000848152600360205260409020805467ffffffffffffffff191667ffffffffffffffff88161790555b50505050505050565b600160a060020a031660009081526001602052604090205490565b6000600160a060020a038316151561153357600080fd5b600160a060020a03841660009081526001602052604090205482111561155857600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561158b57600080fd5b600160a060020a0384166000908152600160205260409020546115b4908363ffffffff61169e16565b600160a060020a0380861660009081526001602052604080822093909355908516815220546115e9908363ffffffff61135816565b600160a060020a03808516600090815260016020908152604080832094909455878316825260028152838220339093168252919091522054611631908363ffffffff61169e16565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b6000828211156116aa57fe5b50900390565b6000600160a060020a03831615156116c757600080fd5b600160a060020a0333166000908152600160205260409020548211156116ec57600080fd5b600160a060020a033316600090815260016020526040902054611715908363ffffffff61169e16565b600160a060020a03338116600090815260016020526040808220939093559085168152205461174a908363ffffffff61135816565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b602060405190810160405260008152905600a165627a7a72305820e3ad26d33b656fcab24445ed617795c5da9ca64ef33f0519a48833cf0cba54f40029"
}