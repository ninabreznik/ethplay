{
  "address": "0x6ecd85f58b50d8a135376a86943b171c50d2ba7a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FacultyPool",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-31\n*/\n\npragma solidity 0.4.24;\n\n/**\n * @title Roles\n * @author Francisco Giordano (@frangio)\n * @dev Library for managing addresses assigned to a Role.\n *      See RBAC.sol for example usage.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = true;\n  }\n\n  /**\n   * @dev remove an address' access to this role\n   */\n  function remove(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage role, address addr)\n    view\n    internal\n  {\n    require(has(role, addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage role, address addr)\n    view\n    internal\n    returns (bool)\n  {\n    return role.bearer[addr];\n  }\n}\n\n/**\n * @title RBAC (Role-Based Access Control)\n * @author Matt Condon (@Shrugs)\n * @dev Stores and provides setters and getters for roles and addresses.\n * @dev Supports unlimited numbers of roles and addresses.\n * @dev See //contracts/mocks/RBACMock.sol for an example of usage.\n * This RBAC method uses strings to key roles. It may be beneficial\n *  for you to write your own implementation of this interface using Enums or similar.\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\n *  to avoid typos.\n */\ncontract RBAC {\n  using Roles for Roles.Role;\n\n  mapping (string => Roles.Role) private roles;\n\n  event RoleAdded(address addr, string roleName);\n  event RoleRemoved(address addr, string roleName);\n\n  /**\n   * @dev reverts if addr does not have role\n   * @param addr address\n   * @param roleName the name of the role\n   * // reverts\n   */\n  function checkRole(address addr, string roleName)\n    view\n    public\n  {\n    roles[roleName].check(addr);\n  }\n\n  /**\n   * @dev determine if addr has role\n   * @param addr address\n   * @param roleName the name of the role\n   * @return bool\n   */\n  function hasRole(address addr, string roleName)\n    view\n    public\n    returns (bool)\n  {\n    return roles[roleName].has(addr);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param addr address\n   * @param roleName the name of the role\n   */\n  function addRole(address addr, string roleName)\n    internal\n  {\n    roles[roleName].add(addr);\n    emit RoleAdded(addr, roleName);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param addr address\n   * @param roleName the name of the role\n   */\n  function removeRole(address addr, string roleName)\n    internal\n  {\n    roles[roleName].remove(addr);\n    emit RoleRemoved(addr, roleName);\n  }\n\n  /**\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n   * @param roleName the name of the role\n   * // reverts\n   */\n  modifier onlyRole(string roleName)\n  {\n    checkRole(msg.sender, roleName);\n    _;\n  }\n\n  /**\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n   * @param roleNames the names of the roles to scope access to\n   * // reverts\n   *\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n   *  see: https://github.com/ethereum/solidity/issues/2467\n   */\n  // modifier onlyRoles(string[] roleNames) {\n  //     bool hasAnyRole = false;\n  //     for (uint8 i = 0; i < roleNames.length; i++) {\n  //         if (hasRole(msg.sender, roleNames[i])) {\n  //             hasAnyRole = true;\n  //             break;\n  //         }\n  //     }\n\n  //     require(hasAnyRole);\n\n  //     _;\n  // }\n}\n\n/**\n * @title RBACWithAdmin\n * @author Matt Condon (@Shrugs)\n * @dev It's recommended that you define constants in the contract,\n * @dev like ROLE_ADMIN below, to avoid typos.\n */\ncontract RBACWithAdmin is RBAC {\n  /**\n   * A constant role name for indicating admins.\n   */\n  string public constant ROLE_ADMIN = \"admin\";\n\n  /**\n   * @dev modifier to scope access to admins\n   * // reverts\n   */\n  modifier onlyAdmin()\n  {\n    checkRole(msg.sender, ROLE_ADMIN);\n    _;\n  }\n\n  /**\n   * @dev constructor. Sets msg.sender as admin by default\n   */\n  function RBACWithAdmin()\n    public\n  {\n    addRole(msg.sender, ROLE_ADMIN);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param addr address\n   * @param roleName the name of the role\n   */\n  function adminAddRole(address addr, string roleName)\n    onlyAdmin\n    public\n  {\n    addRole(addr, roleName);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param addr address\n   * @param roleName the name of the role\n   */\n  function adminRemoveRole(address addr, string roleName)\n    onlyAdmin\n    public\n  {\n    removeRole(addr, roleName);\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract ERC20 {\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n}\n\n\n// Contract Code for Faculty - Faculty Devs\ncontract FacultyPool is RBACWithAdmin {\n\n    using SafeMath for uint;\n\n    // Constants\n    // ========================================================\n    uint8 constant CONTRACT_OPEN = 1;\n    uint8 constant CONTRACT_CLOSED = 2;\n    uint8 constant CONTRACT_SUBMIT_FUNDS = 3;\n    // 500,000 max gas\n    uint256 constant public gasLimit = 50000000000;\n    // 0.1 ether\n    uint256 constant public minContribution = 100000000000000000;\n\n    // State Vars\n    // ========================================================\n    // recipient address for fee\n    address public owner;\n    // the fee taken in tokens from the pool\n    uint256 public feePct;\n    // open our contract initially\n    uint8 public contractStage = CONTRACT_OPEN;\n    // the current Beneficiary Cap level in wei\n    uint256 public currentBeneficiaryCap;\n    // the total cap in wei of the pool\n    uint256 public totalPoolCap;\n    // the destination for this contract\n    address public receiverAddress;\n    // our beneficiaries\n    mapping (address => Beneficiary) beneficiaries;\n    // the total we raised before closing pool\n    uint256 public finalBalance;\n    // a set of refund amounts we may need to process\n    uint256[] public ethRefundAmount;\n    // mapping that holds the token allocation struct for each token address\n    mapping (address => TokenAllocation) tokenAllocationMap;\n    // the default token address\n    address public defaultToken;\n\n\n    // Modifiers and Structs\n    // ========================================================\n    // only run certain methods when contract is open\n    modifier isOpenContract() {\n        require (contractStage == CONTRACT_OPEN);\n        _;\n    }\n\n    // stop double processing attacks\n    bool locked;\n    modifier noReentrancy() {\n        require(!locked);\n        locked = true;\n        _;\n        locked = false;\n    }\n\n    // Beneficiary\n    struct Beneficiary {\n        uint256 ethRefund;\n        uint256 balance;\n        uint256 cap;\n        mapping (address => uint256) tokensClaimed;\n    }\n\n    // data structure for holding information related to token withdrawals.\n    struct TokenAllocation {\n        ERC20 token;\n        uint256[] pct;\n        uint256 balanceRemaining;\n    }\n\n    // Events\n    // ========================================================\n    event BeneficiaryBalanceChanged(address indexed beneficiary, uint256 totalBalance);\n    event ReceiverAddressSet(address indexed receiverAddress);\n    event ERC223Received(address indexed token, uint256 value);\n    event DepositReceived(address indexed beneficiary, uint256 amount, uint256 gas, uint256 gasprice, uint256 gasLimit);\n    event PoolStageChanged(uint8 stage);\n    event PoolSubmitted(address indexed receiver, uint256 amount);\n    event RefundReceived(address indexed sender, uint256 amount);\n    event TokenWithdrawal(address indexed beneficiary, address indexed token, uint256 amount);\n    event EthRefunded(address indexed beneficiary, uint256 amount);\n\n    // CODE BELOW HERE\n    // ========================================================\n\n    /*\n     * Construct a pool with a set of admins, the poolCap and the cap each beneficiary gets. And,\n     * optionally, the receiving address if know at time of contract creation.\n     * fee is in bips so 3.5% would be set as 350 and 100% == 100*100 => 10000\n     */\n    constructor(address[] _admins, uint256 _poolCap, uint256 _beneficiaryCap, address _receiverAddr, uint256 _feePct) public {\n        require(_admins.length > 0, \"Must have at least one admin apart from msg.sender\");\n        require(_poolCap >= _beneficiaryCap, \"Cannot have the poolCap <= beneficiaryCap\");\n        require(_feePct >=  0 && _feePct < 10000);\n        feePct = _feePct;\n        receiverAddress = _receiverAddr;\n        totalPoolCap = _poolCap;\n        currentBeneficiaryCap = _beneficiaryCap;\n        // setup privileges\n        owner = msg.sender;\n        addRole(msg.sender, ROLE_ADMIN);\n        for (uint8 i = 0; i < _admins.length; i++) {\n            addRole(_admins[i], ROLE_ADMIN);\n        }\n    }\n\n    // we pay in here\n    function () payable public {\n        if (contractStage == CONTRACT_OPEN) {\n            emit DepositReceived(msg.sender, msg.value, gasleft(), tx.gasprice, gasLimit);\n            _receiveDeposit();\n        } else {\n            _receiveRefund();\n        }\n    }\n\n    // receive funds. gas limited. min contrib.\n    function _receiveDeposit() isOpenContract internal {\n        require(tx.gasprice <= gasLimit, \"Gas too high\");\n        require(address(this).balance <= totalPoolCap, \"Deposit will put pool over limit. Reverting.\");\n        // Now the code\n        Beneficiary storage b = beneficiaries[msg.sender];\n        uint256 newBalance = b.balance.add(msg.value);\n        require(newBalance >= minContribution, \"contribution is lower than minContribution\");\n        if(b.cap > 0){\n            require(newBalance <= b.cap, \"balance is less than set cap for beneficiary\");\n        } else if(currentBeneficiaryCap == 0) {\n            // we have an open cap, no limits\n            b.cap = totalPoolCap;\n        }else {\n            require(newBalance <= currentBeneficiaryCap, \"balance is more than currentBeneficiaryCap\");\n            // we set it to the default cap\n            b.cap = currentBeneficiaryCap;\n        }\n        b.balance = newBalance;\n        emit BeneficiaryBalanceChanged(msg.sender, newBalance);\n    }\n\n    // Handle refunds only in closed state.\n    function _receiveRefund() internal {\n        assert(contractStage >= 2);\n        require(hasRole(msg.sender, ROLE_ADMIN) || msg.sender == receiverAddress, \"Receiver or Admins only\");\n        ethRefundAmount.push(msg.value);\n        emit RefundReceived(msg.sender, msg.value);\n    }\n\n    function getCurrentBeneficiaryCap() public view returns(uint256 cap) {\n        return currentBeneficiaryCap;\n    }\n\n    function getPoolDetails() public view returns(uint256 total, uint256 currentBalance, uint256 remaining) {\n        remaining = totalPoolCap.sub(address(this).balance);\n        return (totalPoolCap, address(this).balance, remaining);\n    }\n\n    // close the pool from receiving more funds\n    function closePool() onlyAdmin isOpenContract public {\n        contractStage = CONTRACT_CLOSED;\n        emit PoolStageChanged(contractStage);\n    }\n\n    function submitPool(uint256 weiAmount) public onlyAdmin noReentrancy {\n        require(contractStage < CONTRACT_SUBMIT_FUNDS, \"Cannot resubmit pool.\");\n        require(receiverAddress != 0x00, \"receiver address cannot be empty\");\n        uint256 contractBalance = address(this).balance;\n        if(weiAmount == 0){\n            weiAmount = contractBalance;\n        }\n        require(minContribution <= weiAmount && weiAmount <= contractBalance, \"submitted amount too small or larger than the balance\");\n        finalBalance = contractBalance;\n        // transfer to upstream receiverAddress\n        require(receiverAddress.call.value(weiAmount)\n            .gas(gasleft().sub(5000))(),\n            \"Error submitting pool to receivingAddress\");\n        // get balance post transfer\n        contractBalance = address(this).balance;\n        if(contractBalance > 0) {\n            ethRefundAmount.push(contractBalance);\n        }\n        contractStage = CONTRACT_SUBMIT_FUNDS;\n        emit PoolSubmitted(receiverAddress, weiAmount);\n    }\n\n    function viewBeneficiaryDetails(address beneficiary) public view returns (uint256 cap, uint256 balance, uint256 remaining, uint256 ethRefund){\n        Beneficiary storage b = beneficiaries[beneficiary];\n        return (b.cap, b.balance, b.cap.sub(b.balance), b.ethRefund);\n    }\n\n    function withdraw(address _tokenAddress) public {\n        Beneficiary storage b = beneficiaries[msg.sender];\n        require(b.balance > 0, \"msg.sender has no balance. Nice Try!\");\n        if(contractStage == CONTRACT_OPEN){\n            uint256 transferAmt = b.balance;\n            b.balance = 0;\n            msg.sender.transfer(transferAmt);\n            emit BeneficiaryBalanceChanged(msg.sender, 0);\n        } else {\n            _withdraw(msg.sender, _tokenAddress);\n        }\n    }\n\n    // This function allows the contract owner to force a withdrawal to any contributor.\n    function withdrawFor (address _beneficiary, address tokenAddr) public onlyAdmin {\n        require (contractStage == CONTRACT_SUBMIT_FUNDS, \"Can only be done on Submitted Contract\");\n        require (beneficiaries[_beneficiary].balance > 0, \"Beneficary has no funds to withdraw\");\n        _withdraw(_beneficiary, tokenAddr);\n    }\n\n    function _withdraw (address _beneficiary, address _tokenAddr) internal {\n        require(contractStage == CONTRACT_SUBMIT_FUNDS, \"Cannot withdraw when contract is not CONTRACT_SUBMIT_FUNDS\");\n        Beneficiary storage b = beneficiaries[_beneficiary];\n        if (_tokenAddr == 0x00) {\n            _tokenAddr = defaultToken;\n        }\n        TokenAllocation storage ta = tokenAllocationMap[_tokenAddr];\n        require ( (ethRefundAmount.length > b.ethRefund) || ta.pct.length > b.tokensClaimed[_tokenAddr] );\n\n        if (ethRefundAmount.length > b.ethRefund) {\n            uint256 pct = _toPct(b.balance,finalBalance);\n            uint256 ethAmount = 0;\n            for (uint i= b.ethRefund; i < ethRefundAmount.length; i++) {\n                ethAmount = ethAmount.add(_applyPct(ethRefundAmount[i],pct));\n            }\n            b.ethRefund = ethRefundAmount.length;\n            if (ethAmount > 0) {\n                _beneficiary.transfer(ethAmount);\n                emit EthRefunded(_beneficiary, ethAmount);\n            }\n        }\n        if (ta.pct.length > b.tokensClaimed[_tokenAddr]) {\n            uint tokenAmount = 0;\n            for (i= b.tokensClaimed[_tokenAddr]; i< ta.pct.length; i++) {\n                tokenAmount = tokenAmount.add(_applyPct(b.balance, ta.pct[i]));\n            }\n            b.tokensClaimed[_tokenAddr] = ta.pct.length;\n            if (tokenAmount > 0) {\n                require(ta.token.transfer(_beneficiary,tokenAmount));\n                ta.balanceRemaining = ta.balanceRemaining.sub(tokenAmount);\n                emit TokenWithdrawal(_beneficiary, _tokenAddr, tokenAmount);\n            }\n        }\n    }\n\n    function setReceiver(address addr) public onlyAdmin {\n        require (contractStage < CONTRACT_SUBMIT_FUNDS);\n        receiverAddress = addr;\n        emit ReceiverAddressSet(addr);\n    }\n\n    // once we have tokens we can enable the withdrawal\n    // setting this _useAsDefault to true will set this incoming address to the defaultToken.\n    function enableTokenWithdrawals (address _tokenAddr, bool _useAsDefault) public onlyAdmin noReentrancy {\n        require (contractStage == CONTRACT_SUBMIT_FUNDS, \"wrong contract stage\");\n        if (_useAsDefault) {\n            defaultToken = _tokenAddr;\n        } else {\n            require (defaultToken != 0x00, \"defaultToken must be set\");\n        }\n        TokenAllocation storage ta  = tokenAllocationMap[_tokenAddr];\n        if (ta.pct.length==0){\n            ta.token = ERC20(_tokenAddr);\n        }\n        uint256 amount = ta.token.balanceOf(this).sub(ta.balanceRemaining);\n        require (amount > 0);\n        if (feePct > 0) {\n            uint256 feePctFromBips = _toPct(feePct, 10000);\n            uint256 feeAmount = _applyPct(amount, feePctFromBips);\n            require (ta.token.transfer(owner, feeAmount));\n            emit TokenWithdrawal(owner, _tokenAddr, feeAmount);\n        }\n        amount = ta.token.balanceOf(this).sub(ta.balanceRemaining);\n        ta.balanceRemaining = ta.token.balanceOf(this);\n        ta.pct.push(_toPct(amount,finalBalance));\n    }\n\n    // get the available tokens\n    function checkAvailableTokens (address addr, address tokenAddr) view public returns (uint tokenAmount) {\n        Beneficiary storage b = beneficiaries[addr];\n        TokenAllocation storage ta = tokenAllocationMap[tokenAddr];\n        for (uint i = b.tokensClaimed[tokenAddr]; i < ta.pct.length; i++) {\n            tokenAmount = tokenAmount.add(_applyPct(b.balance, ta.pct[i]));\n        }\n        return tokenAmount;\n    }\n\n    // This is a standard function required for ERC223 compatibility.\n    function tokenFallback (address from, uint value, bytes data) public {\n        emit ERC223Received (from, value);\n    }\n\n    // returns a value as a % accurate to 20 decimal points\n    function _toPct (uint numerator, uint denominator ) internal pure returns (uint) {\n        return numerator.mul(10 ** 20) / denominator;\n    }\n\n    // returns % of any number, where % given was generated with toPct\n    function _applyPct (uint numerator, uint pct) internal pure returns (uint) {\n        return numerator.mul(pct) / (10 ** 20);\n    }\n\n\n}",
  "bytecode": "60806040526001600360006101000a81548160ff021916908360ff1602179055503480156200002d57600080fd5b50604051620037c9380380620037c983398101806040528101908080518201929190602001805190602001909291908051906020019092919080519060200190929190805190602001909291905050506000620000cf336040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250620003ab640100000000026401000000009004565b600086511115156200016f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001807f4d7573742068617665206174206c65617374206f6e652061646d696e2061706181526020017f72742066726f6d206d73672e73656e646572000000000000000000000000000081525060400191505060405180910390fd5b8385101515156200020e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f43616e6e6f7420686176652074686520706f6f6c436170203c3d2062656e656681526020017f696369617279436170000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000821015801562000221575061271082105b15156200022d57600080fd5b8160028190555082600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550846005819055508360048190555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000314336040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250620003ab640100000000026401000000009004565b600090505b85518160ff1610156200039f5762000391868260ff168151811015156200033c57fe5b906020019060200201516040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250620003ab640100000000026401000000009004565b808060010191505062000319565b5050505050506200056f565b6200043a826000836040518082805190602001908083835b602083101515620003ea5780518252602082019150602081019050602083039250620003c3565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206200051164010000000002620031c0179091906401000000009004565b7fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b7004898282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015620004d1578082015181840152602081019050620004b4565b50505050905090810190601f168015620004ff5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b61324a806200057f6000396000f30060806040526004361061015f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630370ca41146102005780630988ca8c1461023157806316fed3e2146102ba5780632129e25a14610311578063217fe6c61461033c57806323a6b8ca146103dd57806333e7ed61146104085780633e2153bf146104355780634fbc7e11146104a157806351cff8d9146104f057806352f1e07b1461053357806366805de514610574578063718da7ee1461058b578063737c2d8c146105ce57806374c13fda1461064557806388cee87e1461069c5780638da5cb5b14610725578063a02cf9371461077c578063aaffadf3146107a7578063aca34c11146107d2578063adb5735c1461080b578063b25fa92c1461086e578063c0ee0b8a146108f7578063d391014b1461098a578063de91af7b14610a1a578063f68016b714610a45578063f7b22fa214610a70575b600160ff16600360009054906101000a900460ff1660ff1614156101f5573373ffffffffffffffffffffffffffffffffffffffff167f448555cd3d69f6addef70bd506535e5756c8979dfbd49d6658b6452d8362aecd345a3a640ba43b74006040518085815260200184815260200183815260200182815260200194505050505060405180910390a26101f0610a9b565b6101fe565b6101fd610ecd565b5b005b34801561020c57600080fd5b50610215611073565b604051808260ff1660ff16815260200191505060405180910390f35b34801561023d57600080fd5b506102b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611086565b005b3480156102c657600080fd5b506102cf611107565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561031d57600080fd5b5061032661112d565b6040518082815260200191505060405180910390f35b34801561034857600080fd5b506103c3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611133565b604051808215151515815260200191505060405180910390f35b3480156103e957600080fd5b506103f26111ba565b6040518082815260200191505060405180910390f35b34801561041457600080fd5b50610433600480360381019080803590602001909291905050506111c0565b005b34801561044157600080fd5b50610476600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061164f565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b3480156104ad57600080fd5b506104ee600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506116d2565b005b3480156104fc57600080fd5b50610531600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611edd565b005b34801561053f57600080fd5b5061055e6004803603810190808035906020019092919050505061209d565b6040518082815260200191505060405180910390f35b34801561058057600080fd5b506105896120c0565b005b34801561059757600080fd5b506105cc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061218d565b005b3480156105da57600080fd5b5061062f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612277565b6040518082815260200191505060405180910390f35b34801561065157600080fd5b5061065a6123a9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106a857600080fd5b50610723600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506123cf565b005b34801561073157600080fd5b5061073a61241c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561078857600080fd5b50610791612442565b6040518082815260200191505060405180910390f35b3480156107b357600080fd5b506107bc612448565b6040518082815260200191505060405180910390f35b3480156107de57600080fd5b506107e7612454565b60405180848152602001838152602001828152602001935050505060405180910390f35b34801561081757600080fd5b5061086c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124ae565b005b34801561087a57600080fd5b506108f5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061268e565b005b34801561090357600080fd5b50610988600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506126db565b005b34801561099657600080fd5b5061099f61272e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109df5780820151818401526020810190506109c4565b50505050905090810190601f168015610a0c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610a2657600080fd5b50610a2f612767565b6040518082815260200191505060405180910390f35b348015610a5157600080fd5b50610a5a61276d565b6040518082815260200191505060405180910390f35b348015610a7c57600080fd5b50610a85612776565b6040518082815260200191505060405180910390f35b600080600160ff16600360009054906101000a900460ff1660ff16141515610ac257600080fd5b640ba43b74003a11151515610b3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f47617320746f6f2068696768000000000000000000000000000000000000000081525060200191505060405180910390fd5b6005543073ffffffffffffffffffffffffffffffffffffffff163111151515610bf6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f4465706f7369742077696c6c2070757420706f6f6c206f766572206c696d697481526020017f2e20526576657274696e672e000000000000000000000000000000000000000081525060400191505060405180910390fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209150610c4e34836001015461278090919063ffffffff16565b905067016345785d8a00008110151515610cf6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f636f6e747269627574696f6e206973206c6f776572207468616e206d696e436f81526020017f6e747269627574696f6e0000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600082600201541115610daa5781600201548111151515610da5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f62616c616e6365206973206c657373207468616e207365742063617020666f7281526020017f2062656e6566696369617279000000000000000000000000000000000000000081525060400191505060405180910390fd5b610e72565b60006004541415610dc5576005548260020181905550610e71565b6004548111151515610e65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f62616c616e6365206973206d6f7265207468616e2063757272656e7442656e6581526020017f666963696172794361700000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60045482600201819055505b5b8082600101819055503373ffffffffffffffffffffffffffffffffffffffff167f4269508a0f4505e076582b0b6d49289b5131434e5c507477352e5352366de777826040518082815260200191505060405180910390a25050565b6002600360009054906101000a900460ff1660ff1610151515610eec57fe5b610f2b336040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250611133565b80610f835750600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610ff7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f5265636569766572206f722041646d696e73206f6e6c7900000000000000000081525060200191505060405180910390fd5b60093490806001815401808255809150509060018203906000526020600020016000909192909190915055503373ffffffffffffffffffffffffffffffffffffffff167fe3f8f3d12883a82a6719d9abdecb63746f22f15debeef9703c9acf75103baaaf346040518082815260200191505060405180910390a2565b600360009054906101000a900460ff1681565b611103826000836040518082805190602001908083835b6020831015156110c2578051825260208201915060208101905060208303925061109d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902061279c90919063ffffffff16565b5050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60006111b2836000846040518082805190602001908083835b602083101515611171578051825260208201915060208101905060208303925061114c565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206127b590919063ffffffff16565b905092915050565b60045481565b6000611201336040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250611086565b600b60149054906101000a900460ff1615151561121d57600080fd5b6001600b60146101000a81548160ff021916908315150217905550600360ff16600360009054906101000a900460ff1660ff161015156112c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f43616e6e6f742072657375626d697420706f6f6c2e000000000000000000000081525060200191505060405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611376576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f726563656976657220616464726573732063616e6e6f7420626520656d70747981525060200191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16319050600082141561139d578091505b8167016345785d8a0000111580156113b55750808211155b151561144f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001807f7375626d697474656420616d6f756e7420746f6f20736d616c6c206f72206c6181526020017f72676572207468616e207468652062616c616e6365000000000000000000000081525060400191505060405180910390fd5b80600881905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16826114a56113885a61280e90919063ffffffff16565b90604051600060405180830381858888f193505050501515611555576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f4572726f72207375626d697474696e6720706f6f6c20746f207265636569766981526020017f6e6741646472657373000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff1631905060008111156115a55760098190806001815401808255809150509060018203906000526020600020016000909192909190915055505b60038060006101000a81548160ff021916908360ff160217905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f166428c0f697cf2ebca7e4045ddec0f48bb4914f5ffac8765da1551e2881a519836040518082815260200191505060405180910390a26000600b60146101000a81548160ff0219169083151502179055505050565b6000806000806000600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806002015481600101546116bd8360010154846002015461280e90919063ffffffff16565b83600001549450945094509450509193509193565b600080600080611717336040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250611086565b600b60149054906101000a900460ff1615151561173357600080fd5b6001600b60146101000a81548160ff021916908315150217905550600360ff16600360009054906101000a900460ff1660ff161415156117db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f77726f6e6720636f6e747261637420737461676500000000000000000000000081525060200191505060405180910390fd5b84156118275785600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506118d9565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156118d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f64656661756c74546f6b656e206d75737420626520736574000000000000000081525060200191505060405180910390fd5b5b600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020935060008460010180549050141561196e57858460000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b611a7e84600201548560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611a3557600080fd5b505af1158015611a49573d6000803e3d6000fd5b505050506040513d6020811015611a5f57600080fd5b810190808051906020019092919050505061280e90919063ffffffff16565b9250600083111515611a8f57600080fd5b60006002541115611c6d57611aa8600254612710612827565b9150611ab48383612858565b90508360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611b9f57600080fd5b505af1158015611bb3573d6000803e3d6000fd5b505050506040513d6020811015611bc957600080fd5b81019080805190602001909291905050501515611be557600080fd5b8573ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f42856d0378dde02337bb59ae41747abc77ded8ebdbbc5cbdd1e53693b7554938836040518082815260200191505060405180910390a35b611d7d84600201548560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611d3457600080fd5b505af1158015611d48573d6000803e3d6000fd5b505050506040513d6020811015611d5e57600080fd5b810190808051906020019092919050505061280e90919063ffffffff16565b92508360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611e3e57600080fd5b505af1158015611e52573d6000803e3d6000fd5b505050506040513d6020811015611e6857600080fd5b8101908080519060200190929190505050846002018190555083600101611e9184600854612827565b90806001815401808255809150509060018203906000526020600020016000909192909190915055506000600b60146101000a81548160ff021916908315150217905550505050505050565b600080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020915060008260010154111515611fc3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f6d73672e73656e64657220686173206e6f2062616c616e63652e204e6963652081526020017f547279210000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600160ff16600360009054906101000a900460ff1660ff16141561208d5781600101549050600082600101819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612038573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f4269508a0f4505e076582b0b6d49289b5131434e5c507477352e5352366de77760006040518082815260200191505060405180910390a2612098565b6120973384612889565b5b505050565b6009818154811015156120ac57fe5b906000526020600020016000915090505481565b6120ff336040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250611086565b600160ff16600360009054906101000a900460ff1660ff1614151561212357600080fd5b6002600360006101000a81548160ff021916908360ff1602179055507f163c09518223685abdc0cb7d2985f8009e8efb88f2161532fd790aba3ceecb71600360009054906101000a900460ff16604051808260ff1660ff16815260200191505060405180910390a1565b6121cc336040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250611086565b600360ff16600360009054906101000a900460ff1660ff161015156121f057600080fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f17528c7f18bea16a4db7e968a53fe806a68a29800c78185e7d52d343dd8004ba60405160405180910390a250565b600080600080600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209250600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508260030160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b816001018054905081101561239d5761238e61237f8460010154846001018481548110151561236f57fe5b9060005260206000200154612858565b8561278090919063ffffffff16565b93508080600101915050612344565b83935050505092915050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61240e336040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250611086565b6124188282612e88565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b67016345785d8a000081565b60008060006124853073ffffffffffffffffffffffffffffffffffffffff163160055461280e90919063ffffffff16565b90506005543073ffffffffffffffffffffffffffffffffffffffff163182925092509250909192565b6124ed336040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250611086565b600360ff16600360009054906101000a900460ff1660ff161415156125a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f43616e206f6e6c7920626520646f6e65206f6e205375626d697474656420436f81526020017f6e7472616374000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154111515612680576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f42656e6566696361727920686173206e6f2066756e647320746f20776974686481526020017f726177000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61268a8282612889565b5050565b6126cd336040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250611086565b6126d78282612fd9565b5050565b8273ffffffffffffffffffffffffffffffffffffffff167f121b68c1c3978d37f853f81c5ba5a0d2d36bb308e0765a3d6eb906c01ebdfe88836040518082815260200191505060405180910390a2505050565b6040805190810160405280600581526020017f61646d696e00000000000000000000000000000000000000000000000000000081525081565b60055481565b640ba43b740081565b6000600454905090565b6000818301905082811015151561279357fe5b80905092915050565b6127a682826127b5565b15156127b157600080fd5b5050565b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600082821115151561281c57fe5b818303905092915050565b60008161284668056bc75e2d631000008561312a90919063ffffffff16565b81151561284f57fe5b04905092915050565b600068056bc75e2d63100000612877838561312a90919063ffffffff16565b81151561288057fe5b04905092915050565b600080600080600080600360ff16600360009054906101000a900460ff1660ff16141515612945576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a8152602001807f43616e6e6f74207769746864726177207768656e20636f6e747261637420697381526020017f206e6f7420434f4e54524143545f5355424d49545f46554e445300000000000081525060400191505060405180910390fd5b600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020955060008773ffffffffffffffffffffffffffffffffffffffff1614156129cb57600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1696505b600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020945085600001546009805490501180612a6a57508560030160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548560010180549050115b1515612a7557600080fd5b85600001546009805490501115612ba357612a968660010154600854612827565b935060009250856000015491505b600980549050821015612af557612ae6612ad7600984815481101515612ac657fe5b906000526020600020015486612858565b8461278090919063ffffffff16565b92508180600101925050612aa4565b60098054905086600001819055506000831115612ba2578773ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015612b52573d6000803e3d6000fd5b508773ffffffffffffffffffffffffffffffffffffffff167fffab3269bdaceca4d1bbc53e74b982ac2b306687e17e21f1e499e7fdf6751ac8846040518082815260200191505060405180910390a25b5b8560030160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485600101805490501115612e7e57600090508560030160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505b8460010180549050821015612c9557612c86612c7787600101548760010185815481101515612c6757fe5b9060005260206000200154612858565b8261278090919063ffffffff16565b90508180600101925050612c3c565b84600101805490508660030160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000811115612e7d578460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612db257600080fd5b505af1158015612dc6573d6000803e3d6000fd5b505050506040513d6020811015612ddc57600080fd5b81019080805190602001909291905050501515612df857600080fd5b612e0f81866002015461280e90919063ffffffff16565b85600201819055508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f42856d0378dde02337bb59ae41747abc77ded8ebdbbc5cbdd1e53693b7554938836040518082815260200191505060405180910390a35b5b5050505050505050565b612f05826000836040518082805190602001908083835b602083101515612ec45780518252602082019150602081019050602083039250612e9f565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902061316290919063ffffffff16565b7fd211483f91fc6eff862467f8de606587a30c8fc9981056f051b897a418df803a8282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612f9a578082015181840152602081019050612f7f565b50505050905090810190601f168015612fc75780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b613056826000836040518082805190602001908083835b6020831015156130155780518252602082019150602081019050602083039250612ff0565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206131c090919063ffffffff16565b7fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b7004898282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156130eb5780820151818401526020810190506130d0565b50505050905090810190601f1680156131185780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b60008083141561313d576000905061315c565b818302905081838281151561314e57fe5b0414151561315857fe5b8090505b92915050565b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505600a165627a7a723058204c18d86ff03f643897e74b16b45314825245575b40936ac67e65065646fbb03b002900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000003635c9adc5dea0000000000000000000000000000000000000000000000000003635c9adc5dea00000000000000000000000000000caa54db3f9faefd0a16f5afd84c1dfea4813191e000000000000000000000000000000000000000000000000000000000000015e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a7a6faa276553df654b91f229caa683f359e1c0800000000000000000000000023973488f652f08a72e218e53de1463fbbc8a10f",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000003635c9adc5dea0000000000000000000000000000000000000000000000000003635c9adc5dea00000000000000000000000000000caa54db3f9faefd0a16f5afd84c1dfea4813191e000000000000000000000000000000000000000000000000000000000000015e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a7a6faa276553df654b91f229caa683f359e1c0800000000000000000000000023973488f652f08a72e218e53de1463fbbc8a10f"
}