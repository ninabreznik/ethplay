{
  "address": "0x67835bd73dc219c068779e773351fbcb7d0a45d7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BoltCrowdsaleTwo",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-07\n*/\n\npragma solidity ^0.4.25;\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\ncontract MinterRole {\n  using Roles for Roles.Role;\n\n  event MinterAdded(address indexed account);\n  event MinterRemoved(address indexed account);\n\n  Roles.Role private minters;\n\n  constructor() public {\n    minters.add(msg.sender);\n  }\n\n  modifier onlyMinter() {\n    require(isMinter(msg.sender));\n    _;\n  }\n\n  function isMinter(address account) public view returns (bool) {\n    return minters.has(account);\n  }\n\n  function addMinter(address account) public onlyMinter {\n    minters.add(account);\n    emit MinterAdded(account);\n  }\n\n  function renounceMinter() public {\n    minters.remove(msg.sender);\n  }\n\n  function _removeMinter(address account) internal {\n    minters.remove(account);\n    emit MinterRemoved(account);\n  }\n}\n\ncontract CapperRole {\n  using Roles for Roles.Role;\n\n  event CapperAdded(address indexed account);\n  event CapperRemoved(address indexed account);\n\n  Roles.Role private cappers;\n\n  constructor() public {\n    cappers.add(msg.sender);\n  }\n\n  modifier onlyCapper() {\n    require(isCapper(msg.sender));\n    _;\n  }\n\n  function isCapper(address account) public view returns (bool) {\n    return cappers.has(account);\n  }\n\n  function addCapper(address account) public onlyCapper {\n    cappers.add(account);\n    emit CapperAdded(account);\n  }\n\n  function renounceCapper() public {\n    cappers.remove(msg.sender);\n  }\n\n  function _removeCapper(address account) internal {\n    cappers.remove(account);\n    emit CapperRemoved(account);\n  }\n}\n\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    require(value <= _balances[msg.sender]);\n    require(to != address(0));\n\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _balances[from]);\n    require(value <= _allowed[from][msg.sender]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    emit Transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param amount The amount that will be created.\n   */\n  function _mint(address account, uint256 amount) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(amount);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param amount The amount that will be burnt.\n   */\n  function _burn(address account, uint256 amount) internal {\n    require(account != 0);\n    require(amount <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(amount);\n    _balances[account] = _balances[account].sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param amount The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 amount) internal {\n    require(amount <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      amount);\n    _burn(account, amount);\n  }\n}\n\nlibrary SafeERC20 {\n  function safeTransfer(\n    IERC20 token,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(\n    IERC20 token,\n    address spender,\n    uint256 value\n  )\n    internal\n  {\n    require(token.approve(spender, value));\n  }\n}\n\ncontract ERC20Mintable is ERC20, MinterRole {\n  event MintingFinished();\n\n  bool private _mintingFinished = false;\n\n  modifier onlyBeforeMintingFinished() {\n    require(!_mintingFinished);\n    _;\n  }\n\n  /**\n   * @return true if the minting is finished.\n   */\n  function mintingFinished() public view returns(bool) {\n    return _mintingFinished;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param to The address that will receive the minted tokens.\n   * @param amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address to,\n    uint256 amount\n  )\n    public\n    onlyMinter\n    onlyBeforeMintingFinished\n    returns (bool)\n  {\n    _mint(to, amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting()\n    public\n    onlyMinter\n    onlyBeforeMintingFinished\n    returns (bool)\n  {\n    _mintingFinished = true;\n    emit MintingFinished();\n    return true;\n  }\n}\n\ncontract Crowdsale {\n  using SafeMath for uint256;\n  using SafeERC20 for IERC20;\n\n  // The token being sold\n  IERC20 private _token;\n\n  // Address where funds are collected\n  address private _wallet;\n\n  // How many token units a buyer gets per wei.\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\n  // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\n  // 1 wei will give you 1 unit, or 0.001 TOK.\n  uint256 private _rate;\n\n  // Amount of wei raised\n  uint256 private _weiRaised;\n\n  /**\n   * Event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokensPurchased(\n    address indexed purchaser,\n    address indexed beneficiary,\n    uint256 value,\n    uint256 amount\n  );\n\n  /**\n   * @param rate Number of token units a buyer gets per wei\n   * @dev The rate is the conversion between wei and the smallest and indivisible\n   * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\n   * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\n   * @param wallet Address where collected funds will be forwarded to\n   * @param token Address of the token being sold\n   */\n  constructor(uint256 rate, address wallet, IERC20 token) public {\n    require(rate > 0);\n    require(wallet != address(0));\n    require(token != address(0));\n\n    _rate = rate;\n    _wallet = wallet;\n    _token = token;\n  }\n\n  // -----------------------------------------\n  // Crowdsale external interface\n  // -----------------------------------------\n\n  /**\n   * @dev fallback function ***DO NOT OVERRIDE***\n   */\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * @return the token being sold.\n   */\n  function token() public view returns(IERC20) {\n    return _token;\n  }\n\n  /**\n   * @return the address where funds are collected.\n   */\n  function wallet() public view returns(address) {\n    return _wallet;\n  }\n\n  /**\n   * @return the number of token units a buyer gets per wei.\n   */\n  function rate() public view returns(uint256) {\n    return _rate;\n  }\n\n  /**\n   * @return the mount of wei raised.\n   */\n  function weiRaised() public view returns (uint256) {\n    return _weiRaised;\n  }\n\n  /**\n   * @dev low level token purchase ***DO NOT OVERRIDE***\n   * @param beneficiary Address performing the token purchase\n   */\n  function buyTokens(address beneficiary) public payable {\n\n    uint256 weiAmount = msg.value;\n    _preValidatePurchase(beneficiary, weiAmount);\n\n    // calculate token amount to be created\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    // update state\n    _weiRaised = _weiRaised.add(weiAmount);\n\n    _processPurchase(beneficiary, tokens);\n    emit TokensPurchased(\n      msg.sender,\n      beneficiary,\n      weiAmount,\n      tokens\n    );\n\n    _updatePurchasingState(beneficiary, weiAmount);\n\n    _forwardFunds();\n    _postValidatePurchase(beneficiary, weiAmount);\n  }\n\n  // -----------------------------------------\n  // Internal interface (extensible)\n  // -----------------------------------------\n\n  /**\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n   * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n   *   super._preValidatePurchase(beneficiary, weiAmount);\n   *   require(weiRaised().add(weiAmount) <= cap);\n   * @param beneficiary Address performing the token purchase\n   * @param weiAmount Value in wei involved in the purchase\n   */\n  function _preValidatePurchase(\n    address beneficiary,\n    uint256 weiAmount\n  )\n    internal\n  {\n    require(beneficiary != address(0));\n    require(weiAmount != 0);\n  }\n\n  /**\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n   * @param beneficiary Address performing the token purchase\n   * @param weiAmount Value in wei involved in the purchase\n   */\n  function _postValidatePurchase(\n    address beneficiary,\n    uint256 weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n   * @param beneficiary Address performing the token purchase\n   * @param tokenAmount Number of tokens to be emitted\n   */\n  function _deliverTokens(\n    address beneficiary,\n    uint256 tokenAmount\n  )\n    internal\n  {\n    _token.safeTransfer(beneficiary, tokenAmount);\n  }\n\n  /**\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n   * @param beneficiary Address receiving the tokens\n   * @param tokenAmount Number of tokens to be purchased\n   */\n  function _processPurchase(\n    address beneficiary,\n    uint256 tokenAmount\n  )\n    internal\n  {\n    _deliverTokens(beneficiary, tokenAmount);\n  }\n\n  /**\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n   * @param beneficiary Address receiving the tokens\n   * @param weiAmount Value in wei involved in the purchase\n   */\n  function _updatePurchasingState(\n    address beneficiary,\n    uint256 weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Override to extend the way in which ether is converted to tokens.\n   * @param weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n  function _getTokenAmount(uint256 weiAmount)\n    internal view returns (uint256)\n  {\n    return weiAmount.mul(_rate);\n  }\n\n  /**\n   * @dev Determines how ETH is stored/forwarded on purchases.\n   */\n  function _forwardFunds() internal {\n    _wallet.transfer(msg.value);\n  }\n}\n\ncontract TimedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 private _openingTime;\n  uint256 private _closingTime;\n\n  /**\n   * @dev Reverts if not in crowdsale time range.\n   */\n  modifier onlyWhileOpen {\n    require(isOpen());\n    _;\n  }\n\n  /**\n   * @dev Constructor, takes crowdsale opening and closing times.\n   * @param openingTime Crowdsale opening time\n   * @param closingTime Crowdsale closing time\n   */\n  constructor(uint256 openingTime, uint256 closingTime) public {\n    // solium-disable-next-line security/no-block-members\n    require(openingTime >= block.timestamp);\n    require(closingTime >= openingTime);\n\n    _openingTime = openingTime;\n    _closingTime = closingTime;\n  }\n\n  /**\n   * @return the crowdsale opening time.\n   */\n  function openingTime() public view returns(uint256) {\n    return _openingTime;\n  }\n\n  /**\n   * @return the crowdsale closing time.\n   */\n  function closingTime() public view returns(uint256) {\n    return _closingTime;\n  }\n\n  /**\n   * @return true if the crowdsale is open, false otherwise.\n   */\n  function isOpen() public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n  }\n\n  /**\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n   * @return Whether crowdsale period has elapsed\n   */\n  function hasClosed() public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp > _closingTime;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring to be within contributing period\n   * @param beneficiary Token purchaser\n   * @param weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address beneficiary,\n    uint256 weiAmount\n  )\n    internal\n    onlyWhileOpen\n  {\n    super._preValidatePurchase(beneficiary, weiAmount);\n  }\n\n}\n\ncontract MintedCrowdsale is Crowdsale {\n\n  /**\n   * @dev Overrides delivery by minting tokens upon purchase.\n   * @param beneficiary Token purchaser\n   * @param tokenAmount Number of tokens to be minted\n   */\n  function _deliverTokens(\n    address beneficiary,\n    uint256 tokenAmount\n  )\n    internal\n  {\n    // Potentially dangerous assumption about the type of the token.\n    require(\n      ERC20Mintable(address(token())).mint(beneficiary, tokenAmount));\n  }\n}\n\ncontract CappedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 private _cap;\n\n  /**\n   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n   * @param cap Max amount of wei to be contributed\n   */\n  constructor(uint256 cap) public {\n    require(cap > 0);\n    _cap = cap;\n  }\n\n  /**\n   * @return the cap of the crowdsale.\n   */\n  function cap() public view returns(uint256) {\n    return _cap;\n  }\n\n  /**\n   * @dev Checks whether the cap has been reached.\n   * @return Whether the cap was reached\n   */\n  function capReached() public view returns (bool) {\n    return weiRaised() >= _cap;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring purchase to respect the funding cap.\n   * @param beneficiary Token purchaser\n   * @param weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address beneficiary,\n    uint256 weiAmount\n  )\n    internal\n  {\n    super._preValidatePurchase(beneficiary, weiAmount);\n    require(weiRaised().add(weiAmount) <= _cap);\n  }\n\n}\n\ncontract BoltCrowdsaleTwo is Crowdsale, CappedCrowdsale, TimedCrowdsale, CapperRole {\n  using SafeMath for uint256;\n\n  // Individual contribution amounts and caps\n  mapping(address => uint256) private _contributions;\n  mapping(address => uint256) private _caps;\n\n  // Bonus tokens locked in this contract\n  mapping(address => uint256) private _lockedTokens;\n  uint256 private _bonusAvailableUntil;\n  uint256 private _bonusUnlockTime;\n\n  constructor(\n      uint256 rate,               // rate, in BOLTbits to wei\n      address wallet,             // wallet to send Ether to\n      ERC20 token,                // the token\n      uint256 cap,                // total cap, in wei\n      uint256 openingTime,        // opening time in unix epoch seconds\n      uint256 closingTime,        // closing time in unix epoch seconds\n      uint256 bonusUnlockTime,    // unlocking time for bonus tokens in unix epoch seconds\n      uint256 bonusAvailableUntil // cutoff time for bonus tokens to be issued when minting\n  )\n      CapperRole()\n      TimedCrowdsale(openingTime, closingTime)\n      CappedCrowdsale(cap)\n      Crowdsale(rate, wallet, token)\n      public\n  {\n    require(\n      bonusUnlockTime > closingTime,\n      \"Cannot unlock bonus tokens before crowdsale ends\"\n    );\n\n    require(\n      bonusAvailableUntil >= openingTime && bonusAvailableUntil <= closingTime,\n      \"Cannot unlock bonus tokens before crowdsale ends\"\n    );\n\n    _bonusUnlockTime = bonusUnlockTime;\n    _bonusAvailableUntil = bonusAvailableUntil;\n  }\n\n  /**\n   * @dev Checks whether bonus is currently available.\n   * @return Returns whether bonus tokens are available\n   */\n  function _isBonusAvailable()\n    private\n    view\n    returns (bool)\n  {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp <= _bonusAvailableUntil;\n  }\n\n  /**\n   * @dev Overrides the way in which ether to tokens conversion calculation to give bonus tokens.\n   * @param weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n  function _getTokenAmount(uint256 weiAmount)\n    internal\n    view\n    returns (uint256)\n  {\n    uint256 baseTokenAmount = weiAmount.mul(rate());\n    uint256 bonusAmount = _isBonusAvailable() ?\n      baseTokenAmount.div(5) : // 20% bonus\n      0;\n\n    return baseTokenAmount + bonusAmount;\n  }\n\n  /**\n    * @dev Overrides delivery by minting tokens upon purchase.\n    * @param beneficiary Token purchaser\n    * @param tokenAmount Number of tokens to be minted\n    */\n  function _deliverTokens(address beneficiary, uint256 tokenAmount)\n    internal\n  {\n    uint256 baseAmount = _isBonusAvailable() ?\n      tokenAmount.div(6).mul(5) : // 20% total, may be slightly inaccurate, but doesn't matter\n      0;\n    uint256 lockedBonusAmount = tokenAmount.sub(baseAmount);\n\n    require(\n      ERC20Mintable(address(token())).mint(beneficiary, baseAmount),\n      \"Could not mint tokens to beneficiary.\"\n    );\n\n    if (lockedBonusAmount > 0) {\n      require(\n        ERC20Mintable(address(token())).mint(this, lockedBonusAmount),\n        \"Could not mint tokens to self for lockup.\"\n      );\n      _lockedTokens[beneficiary] = _lockedTokens[beneficiary].add(lockedBonusAmount);\n    }\n  }\n\n  /**\n   * @dev Gets the amount of locked bonus tokens for the beneficiary.\n   * @param beneficiary Address whose locked bonus token balance is to be checked\n   * @return Current locked bonus token balance for individual beneficiary\n   */\n  function getLockedTokens(address beneficiary)\n    public\n    view\n    returns (uint256)\n  {\n    return _lockedTokens[beneficiary];\n  }\n\n  /**\n    * @dev Deliver bonus tokens that were previously locked during purchase to multiple beneficiaries.\n    * @param beneficiaries Token purchaser\n    */\n  function deliverBonusTokens(address[] beneficiaries)\n    external\n  {\n    require(\n      // solium-disable-next-line security/no-block-members\n      _bonusUnlockTime <= block.timestamp,\n      \"Tokens are not yet unlocked.\"\n    );\n\n    for (uint8 i = 0; i < beneficiaries.length && i < 255; i ++) {\n      _deliverBonusTokens(beneficiaries[i]);\n    }\n  }\n\n  /**\n    * @dev Deliver bonus tokens that were previously locked during purchase to a single beneficiary .\n    * @param beneficiary Token purchaser\n    */\n  function _deliverBonusTokens(address beneficiary)\n    private\n  {\n    require(\n      _lockedTokens[beneficiary] > 0,\n      \"No tokens to unlock.\"\n    );\n\n    _lockedTokens[beneficiary] = 0;\n\n    require(\n      ERC20(address(token())).transfer(beneficiary, _lockedTokens[beneficiary]),\n      \"Could not transfer tokens.\"\n    );\n  }\n\n  /**\n   * @dev Sets multiple beneficiary's maximum contribution.\n   * @param beneficiaries Address to be capped\n   * @param caps Wei limit for each addresses contribution\n   */\n  function setCaps(address[] beneficiaries, uint256[] caps)\n    external\n    onlyCapper\n  {\n    for (uint8 i = 0; i < beneficiaries.length && i < 255; i ++) {\n      _caps[beneficiaries[i]] = caps[i];\n    }\n  }\n\n  /**\n   * @dev Sets a specific beneficiary's maximum contribution.\n   * @param beneficiary Address to be capped\n   * @param cap Wei limit for individual contribution\n   */\n  function setCap(address beneficiary, uint256 cap)\n    external\n    onlyCapper\n  {\n    _caps[beneficiary] = cap;\n  }\n\n  /**\n   * @dev Returns the cap of a specific beneficiary.\n   * @param beneficiary Address whose cap is to be checked\n   * @return Current cap for individual beneficiary\n   */\n  function getCap(address beneficiary)\n    public\n    view\n    returns (uint256)\n  {\n    return _caps[beneficiary];\n  }\n\n  /**\n   * @dev Returns the amount contributed so far by a specific beneficiary.\n   * @param beneficiary Address of contributor\n   * @return Beneficiary contribution so far\n   */\n  function getContribution(address beneficiary)\n    public\n    view\n    returns (uint256)\n  {\n    return _contributions[beneficiary];\n  }\n\n  /**\n   * @dev Extend parent behavior requiring purchase to respect the beneficiary's funding cap.\n   * @param beneficiary Token purchaser\n   * @param weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address beneficiary,\n    uint256 weiAmount\n  )\n    internal\n  {\n    super._preValidatePurchase(beneficiary, weiAmount);\n    require(\n      _contributions[beneficiary].add(weiAmount) <= _caps[beneficiary],\n      \"Contribution cap exceeded.\"\n    );\n  }\n\n  /**\n   * @dev Extend parent behavior to update beneficiary contributions\n   * @param beneficiary Token purchaser\n   * @param weiAmount Amount of wei contributed\n   */\n  function _updatePurchasingState(\n    address beneficiary,\n    uint256 weiAmount\n  )\n    internal\n  {\n    super._updatePurchasingState(beneficiary, weiAmount);\n    _contributions[beneficiary] = _contributions[beneficiary].add(\n      weiAmount);\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"name\":\"caps\",\"type\":\"uint256[]\"}],\"name\":\"setCaps\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isCapper\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceCapper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getLockedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addCapper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiaries\",\"type\":\"address[]\"}],\"name\":\"deliverBonusTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"cap\",\"type\":\"uint256\"},{\"name\":\"openingTime\",\"type\":\"uint256\"},{\"name\":\"closingTime\",\"type\":\"uint256\"},{\"name\":\"bonusUnlockTime\",\"type\":\"uint256\"},{\"name\":\"bonusAvailableUntil\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"CapperAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"CapperRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5060405161010080620010ed83398101604090815281516020830151918301516060840151608085015160a086015160c087015160e09097015194969394929391929091908383868a8a8a6000831161006857600080fd5b600160a060020a038216151561007d57600080fd5b600160a060020a038116151561009257600080fd5b60029290925560018054600160a060020a03928316600160a060020a0319918216179091556000805492909316911617815581116100cf57600080fd5b600455428210156100df57600080fd5b818110156100ec57600080fd5b60059190915560065561010d6007336401000000006108ba61023782021704565b82821161019057604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260306024820152600080516020620010cd83398151915260448201527f652063726f776473616c6520656e647300000000000000000000000000000000606482015290519081900360840190fd5b8381101580156101a05750828111155b151561022257604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260306024820152600080516020620010cd83398151915260448201527f652063726f776473616c6520656e647300000000000000000000000000000000606482015290519081900360840190fd5b600c91909155600b5550610271945050505050565b600160a060020a038116151561024c57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b610e4c80620002816000396000f3006080604052600436106100f85763ffffffff60e060020a600035041663099c4c7e81146101035780631515bc2b1461012f57806321eff7fc146101585780632c4e722e1461018b578063355274ea146101a057806339564561146101b55780634042b66f146101d657806347535d7b146101eb5780634b6753bc146102005780634f93594514610215578063521eb2731461022a5780635d5576f81461025b5780636b2d95d41461027057806380ad2cf3146102915780638dfbcf36146102b5578063b3aefb75146102d6578063b7a8807c146102f7578063e3a71e321461030c578063ec8ac4d81461032c578063fc0c546a14610340575b61010133610355565b005b34801561010f57600080fd5b5061010160246004803582810192908201359181359182019101356103f7565b34801561013b57600080fd5b50610144610488565b604080519115158252519081900360200190f35b34801561016457600080fd5b50610179600160a060020a0360043516610490565b60408051918252519081900360200190f35b34801561019757600080fd5b506101796104ab565b3480156101ac57600080fd5b506101796104b1565b3480156101c157600080fd5b50610144600160a060020a03600435166104b7565b3480156101e257600080fd5b506101796104d0565b3480156101f757600080fd5b506101446104d6565b34801561020c57600080fd5b506101796104f1565b34801561022157600080fd5b506101446104f7565b34801561023657600080fd5b5061023f61050b565b60408051600160a060020a039092168252519081900360200190f35b34801561026757600080fd5b5061010161051a565b34801561027c57600080fd5b50610179600160a060020a036004351661052d565b34801561029d57600080fd5b50610101600160a060020a0360043516602435610548565b3480156102c157600080fd5b50610101600160a060020a0360043516610578565b3480156102e257600080fd5b50610179600160a060020a03600435166105d4565b34801561030357600080fd5b506101796105ef565b34801561031857600080fd5b5061010160048035602481019101356105f5565b610101600160a060020a0360043516610355565b34801561034c57600080fd5b5061023f6106a0565b34600061036283836106af565b61036b82610748565b600354909150610381908363ffffffff61079616565b60035561038e83826107b3565b60408051838152602081018390528151600160a060020a0386169233927f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b929081900390910190a36103e083836107bd565b6103e8610810565b6103f28383610744565b505050565b6000610402336104b7565b151561040d57600080fd5b5060005b60ff811684118015610426575060ff8160ff16105b1561048157828260ff831681811061043a57fe5b905060200201356009600087878560ff16818110151561045657fe5b60209081029290920135600160a060020a031683525081019190915260400160002055600101610411565b5050505050565b600654421190565b600160a060020a031660009081526008602052604090205490565b60025490565b60045490565b60006104ca60078363ffffffff61084c16565b92915050565b60035490565b600060055442101580156104ec57506006544211155b905090565b60065490565b60006004546105046104d0565b1015905090565b600154600160a060020a031690565b61052b60073363ffffffff61088316565b565b600160a060020a03166000908152600a602052604090205490565b610551336104b7565b151561055c57600080fd5b600160a060020a03909116600090815260096020526040902055565b610581336104b7565b151561058c57600080fd5b61059d60078263ffffffff6108ba16565b604051600160a060020a038216907fa7555c95b69d4f5cc847881feb4ab2883a1921319e34fa2043747b793d65b36e90600090a250565b600160a060020a031660009081526009602052604090205490565b60055490565b600042600c5411151515610653576040805160e560020a62461bcd02815260206004820152601c60248201527f546f6b656e7320617265206e6f742079657420756e6c6f636b65642e00000000604482015290519081900360640190fd5b5060005b60ff81168211801561066c575060ff8160ff16105b156103f257610698838360ff841681811061068357fe5b90506020020135600160a060020a03166108f4565b600101610657565b600054600160a060020a031690565b6106b98282610a7f565b600160a060020a0382166000908152600960209081526040808320546008909252909120546106ee908363ffffffff61079616565b1115610744576040805160e560020a62461bcd02815260206004820152601a60248201527f436f6e747269627574696f6e206361702065786365656465642e000000000000604482015290519081900360640190fd5b5050565b60008060006107656107586104ab565b859063ffffffff610a9c16565b915061076f610aca565b61077a57600061078b565b61078b82600563ffffffff610ad316565b919091019392505050565b6000828201838110156107a857600080fd5b8091505b5092915050565b6107448282610af6565b6107c78282610744565b600160a060020a0382166000908152600860205260409020546107f0908263ffffffff61079616565b600160a060020a0390921660009081526008602052604090209190915550565b600154604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015610849573d6000803e3d6000fd5b50565b6000600160a060020a038216151561086357600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b600160a060020a038116151561089857600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a03811615156108cf57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a0381166000908152600a602052604081205411610962576040805160e560020a62461bcd02815260206004820152601460248201527f4e6f20746f6b656e7320746f20756e6c6f636b2e000000000000000000000000604482015290519081900360640190fd5b600160a060020a0381166000908152600a60205260408120556109836106a0565b600160a060020a038281166000818152600a602090815260408083205481517fa9059cbb0000000000000000000000000000000000000000000000000000000081526004810195909552602485015251949093169363a9059cbb936044808501949193918390030190829087803b1580156109fd57600080fd5b505af1158015610a11573d6000803e3d6000fd5b505050506040513d6020811015610a2757600080fd5b50511515610849576040805160e560020a62461bcd02815260206004820152601a60248201527f436f756c64206e6f74207472616e7366657220746f6b656e732e000000000000604482015290519081900360640190fd5b610a876104d6565b1515610a9257600080fd5b6107448282610db8565b600080831515610aaf57600091506107ac565b50828202828482811515610abf57fe5b04146107a857600080fd5b600b5442111590565b600080808311610ae257600080fd5b8284811515610aed57fe5b04949350505050565b600080610b01610aca565b610b0c576000610b2e565b610b2e6005610b2285600663ffffffff610ad316565b9063ffffffff610a9c16565b9150610b40838363ffffffff610de816565b9050610b4a6106a0565b600160a060020a03166340c10f1985846040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610bac57600080fd5b505af1158015610bc0573d6000803e3d6000fd5b505050506040513d6020811015610bd657600080fd5b50511515610c54576040805160e560020a62461bcd02815260206004820152602560248201527f436f756c64206e6f74206d696e7420746f6b656e7320746f2062656e6566696360448201527f696172792e000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000811115610db257610c656106a0565b600160a060020a03166340c10f1930836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610cc757600080fd5b505af1158015610cdb573d6000803e3d6000fd5b505050506040513d6020811015610cf157600080fd5b50511515610d6f576040805160e560020a62461bcd02815260206004820152602960248201527f436f756c64206e6f74206d696e7420746f6b656e7320746f2073656c6620666f60448201527f72206c6f636b75702e0000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0384166000908152600a6020526040902054610d98908263ffffffff61079616565b600160a060020a0385166000908152600a60205260409020555b50505050565b610dc28282610dff565b600454610ddd82610dd16104d0565b9063ffffffff61079616565b111561074457600080fd5b60008083831115610df857600080fd5b5050900390565b600160a060020a0382161515610e1457600080fd5b80151561074457600080fd00a165627a7a72305820ad41750ef4cb27d200870f5f7a104da1e42b551aace6843d4d99cce1c5bc0c46002943616e6e6f7420756e6c6f636b20626f6e757320746f6b656e73206265666f720000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000a30b0548ac59542147bd7a1956aee50db45d5a20000000000000000000000009f235d23354857efe6c541db92a9ef1877689bcb00000000000000000000000000000000000000000000030ca024f987b9000000000000000000000000000000000000000000000000000000000000005c1a3ea2000000000000000000000000000000000000000000000000000000005c41f7ff000000000000000000000000000000000000000000000000000000005cb89eff000000000000000000000000000000000000000000000000000000005c2a3cff",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000a30b0548ac59542147bd7a1956aee50db45d5a20000000000000000000000009f235d23354857efe6c541db92a9ef1877689bcb00000000000000000000000000000000000000000000030ca024f987b9000000000000000000000000000000000000000000000000000000000000005c1a3ea2000000000000000000000000000000000000000000000000000000005c41f7ff000000000000000000000000000000000000000000000000000000005cb89eff000000000000000000000000000000000000000000000000000000005c2a3cff"
}