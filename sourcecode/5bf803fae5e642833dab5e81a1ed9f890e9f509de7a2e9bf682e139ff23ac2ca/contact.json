{
  "address": "0x961e593b36920a767dad75f9fda07723231d9b77",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AbabPreICOToken",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-07-12\n*/\n\npragma solidity ^0.4.11;\n\n// ----------------------------------------------------------------------------\n// Abab.io preICO \n// The MIT Licence\n// ----------------------------------------------------------------------------\n\n// ----------------------------------------------------------------------------\n// Safe maths, borrowed from OpenZeppelin\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n\n    // ------------------------------------------------------------------------\n    // Add a number to another number, checking for overflows\n    // ------------------------------------------------------------------------\n    function add(uint a, uint b) internal returns (uint) {\n        uint c = a + b;\n        assert(c >= a && c >= b);\n        return c;\n    }\n\n    // ------------------------------------------------------------------------\n    // Subtract a number from another number, checking for underflows\n    // ------------------------------------------------------------------------\n    function sub(uint a, uint b) internal returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    function Owned() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        if (msg.sender != owner) throw;\n        _;\n    }\n\n    function transferOwnership(address _newOwner) onlyOwner {\n        newOwner = _newOwner;\n    }\n \n    function acceptOwnership() {\n        if (msg.sender == newOwner) {\n            OwnershipTransferred(owner, newOwner);\n            owner = newOwner;\n        }\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals\n// https://github.com/ethereum/EIPs/issues/20\n// ----------------------------------------------------------------------------\ncontract ERC20Token is Owned {\n    using SafeMath for uint;\n\n    // ------------------------------------------------------------------------\n    // Total Supply\n    // ------------------------------------------------------------------------\n    uint256 _totalSupply = 0;\n\n    // ------------------------------------------------------------------------\n    // Balances for each account\n    // ------------------------------------------------------------------------\n    mapping(address => uint256) balances;\n\n    // ------------------------------------------------------------------------\n    // Owner of account approves the transfer of an amount to another account\n    // ------------------------------------------------------------------------\n    mapping(address => mapping (address => uint256)) allowed;\n\n    // ------------------------------------------------------------------------\n    // Get the total token supply\n    // ------------------------------------------------------------------------\n    function totalSupply() constant returns (uint256 totalSupply) {\n        totalSupply = _totalSupply;\n    }\n\n    // ------------------------------------------------------------------------\n    // Get the account balance of another account with address _owner\n    // ------------------------------------------------------------------------\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from owner's account to another account\n    // ------------------------------------------------------------------------\n    function transfer(address _to, uint256 _amount) returns (bool success) {\n        if (balances[msg.sender] >= _amount                // User has balance\n            && _amount > 0                                 // Non-zero transfer\n            && balances[_to] + _amount > balances[_to]     // Overflow check\n        ) {\n            balances[msg.sender] = balances[msg.sender].sub(_amount);\n            balances[_to] = balances[_to].add(_amount);\n            Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // ------------------------------------------------------------------------\n    // Allow _spender to withdraw from your account, multiple times, up to the\n    // _value amount. If this function is called again it overwrites the\n    // current allowance with _value.\n    // ------------------------------------------------------------------------\n    function approve(\n        address _spender,\n        uint256 _amount\n    ) returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Spender of tokens transfer an amount of tokens from the token owner's\n    // balance to the spender's account. The owner of the tokens must already\n    // have approve(...)-d this transfer\n    // ------------------------------------------------------------------------\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) returns (bool success) {\n        if (balances[_from] >= _amount                  // From a/c has balance\n            && allowed[_from][msg.sender] >= _amount    // Transfer approved\n            && _amount > 0                              // Non-zero transfer\n            && balances[_to] + _amount > balances[_to]  // Overflow check\n        ) {\n            balances[_from] = balances[_from].sub(_amount);\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n            balances[_to] = balances[_to].add(_amount);\n            Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(\n        address _owner, \n        address _spender\n    ) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender,\n        uint256 _value);\n}\n\n\ncontract AbabPreICOToken is ERC20Token {\n\n    // ------------------------------------------------------------------------\n    // Token information\n    // ------------------------------------------------------------------------\n    string public constant symbol   = \"pAA\";\n    string public constant name     = \"AbabPreICOToken\";\n    uint8  public constant decimals = 18;\n\n    uint256 public STARTDATE;  \n    uint256 public ENDDATE;    \n    uint256 public BUYPRICE;   \n    uint256 public CAP;\n\n    function AbabPreICOToken() {\n        STARTDATE = 1499951593;        // 2017-07-13T13:13:13UTC to uint256 = 1499951593\n        ENDDATE   = 1500815593;        // 2017-07-23T13:13:13UTC to uint256 = 1500815593\n        BUYPRICE  = 4000;              // in eth will actualize before start. calc $0.05 @ $200 ETH/USD //  4000 pAA per ETH\n        CAP       = 2500*1 ether;      // in eth ($500K / 0.05 ) / etherPrice\n    }\n\t\n    function ActualizePriceBeforeStart(uint256 _start, uint256 _end, uint256 _buyPrice, uint256 _cap) \n    onlyOwner returns (bool success) \n    {\n        require(now < STARTDATE);\n        STARTDATE = _start;\n        ENDDATE   = _end;\n        BUYPRICE  = _buyPrice;\n        CAP       = _cap; \n        return true;\n    }\n\n    uint256 public totalEthers;\n\n    // ------------------------------------------------------------------------\n    // Buy tokens from the contract\n    // ------------------------------------------------------------------------\n    function () payable {\n        // No contributions before the start of the crowdsale\n        require(now >= STARTDATE);\n        // No contributions after the end of the crowdsale\n        require(now <= ENDDATE);\n        // No 0 contributions\n        require(msg.value > 0);\n\n        // Add ETH raised to total\n        totalEthers = totalEthers.add(msg.value);\n        // Cannot exceed cap\n        require(totalEthers <= CAP);\n\n        uint tokens = msg.value * BUYPRICE;\n\n        // Check tokens > 0\n        require(tokens > 0);\n\n        // Add to total supply\n        _totalSupply = _totalSupply.add(tokens);\n\n        // Add to balances\n        balances[msg.sender] = balances[msg.sender].add(tokens);\n\n        // Log events\n        Transfer(0x0, msg.sender, tokens);\n\n        // Move the funds to a safe wallet\n        owner.transfer(msg.value);\n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from owner's account to another account, with a\n    // check that the crowdsale is finalised\n    // ------------------------------------------------------------------------\n    function transfer(address _to, uint _amount) returns (bool success) {\n        // Cannot transfer before crowdsale ends or cap reached\n        require(now > ENDDATE || totalEthers == CAP);\n        // Standard transfer\n        return super.transfer(_to, _amount);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Spender of tokens transfer an amount of tokens from the token owner's\n    // balance to another account, with a check that the crowdsale is\n    // finalised\n    // ------------------------------------------------------------------------\n    function transferFrom(address _from, address _to, uint _amount) \n        returns (bool success)\n    {\n        // Cannot transfer before crowdsale ends or cap reached\n        require(now > ENDDATE || totalEthers == CAP);\n        // Standard transferFrom\n        return super.transferFrom(_from, _to, _amount);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint amount)\n      onlyOwner returns (bool success) \n    {\n        return ERC20Token(tokenAddress).transfer(owner, amount);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ENDDATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"},{\"name\":\"_buyPrice\",\"type\":\"uint256\"},{\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"ActualizePriceBeforeStart\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BUYPRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTDATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60606040526000600255341561001457600080fd5b5b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b63596771e9600581905550635974a0e9600681905550610fa060078190555068878678326eac9000006008819055505b5b6116d5806100976000396000f30060606040523615610110576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146102f2578063095ea7b3146103815780630a4625af146103db57806318160ddd146104045780631db9ec2c1461042d57806323b872dd14610456578063313ce567146104cf578063656f6873146104fe57806370a0823114610554578063749e8b88146105a157806379ba5097146105ca5780637e4d5ea1146105df5780638da5cb5b1461060857806395d89b411461065d578063a9059cbb146106ec578063d4ee1d9014610746578063dc39d06d1461079b578063dd62ed3e146107f5578063ec81b48314610861578063f2fde38b1461088a575b6102f05b6000600554421015151561012757600080fd5b600654421115151561013857600080fd5b60003411151561014757600080fd5b61015c346009546108c390919063ffffffff16565b6009819055506008546009541115151561017557600080fd5b6007543402905060008111151561018b57600080fd5b6101a0816002546108c390919063ffffffff16565b6002819055506101f881600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108c390919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a36000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015156102ec57600080fd5b5b50565b005b34156102fd57600080fd5b6103056108ee565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103465780820151818401525b60208101905061032a565b50505050905090810190601f1680156103735780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561038c57600080fd5b6103c1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610927565b604051808215151515815260200191505060405180910390f35b34156103e657600080fd5b6103ee610a1a565b6040518082815260200191505060405180910390f35b341561040f57600080fd5b610417610a20565b6040518082815260200191505060405180910390f35b341561043857600080fd5b610440610a2b565b6040518082815260200191505060405180910390f35b341561046157600080fd5b6104b5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a31565b604051808215151515815260200191505060405180910390f35b34156104da57600080fd5b6104e2610a66565b604051808260ff1660ff16815260200191505060405180910390f35b341561050957600080fd5b61053a6004808035906020019091908035906020019091908035906020019091908035906020019091905050610a6b565b604051808215151515815260200191505060405180910390f35b341561055f57600080fd5b61058b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b02565b6040518082815260200191505060405180910390f35b34156105ac57600080fd5b6105b4610b4c565b6040518082815260200191505060405180910390f35b34156105d557600080fd5b6105dd610b52565b005b34156105ea57600080fd5b6105f2610cab565b6040518082815260200191505060405180910390f35b341561061357600080fd5b61061b610cb1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561066857600080fd5b610670610cd6565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106b15780820151818401525b602081019050610695565b50505050905090810190601f1680156106de5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156106f757600080fd5b61072c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d0f565b604051808215151515815260200191505060405180910390f35b341561075157600080fd5b610759610d42565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107a657600080fd5b6107db600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d68565b604051808215151515815260200191505060405180910390f35b341561080057600080fd5b61084b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610eb6565b6040518082815260200191505060405180910390f35b341561086c57600080fd5b610874610f3e565b6040518082815260200191505060405180910390f35b341561089557600080fd5b6108c1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f44565b005b60008082840190508381101580156108db5750828110155b15156108e357fe5b8091505b5092915050565b6040805190810160405280600f81526020017f4162616250726549434f546f6b656e000000000000000000000000000000000081525081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b60095481565b600060025490505b90565b60065481565b6000600654421180610a465750600854600954145b1515610a5157600080fd5b610a5c848484610fe5565b90505b9392505050565b601281565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ac857600080fd5b60055442101515610ad857600080fd5b84600581905550836006819055508260078190555081600881905550600190505b5b949350505050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60075481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610ca857600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b565b60055481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f704141000000000000000000000000000000000000000000000000000000000081525081565b6000600654421180610d245750600854600954145b1515610d2f57600080fd5b610d398383611406565b90505b92915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610dc557600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610e9157600080fd5b6102c65a03f11515610ea257600080fd5b5050506040518051905090505b5b92915050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b60085481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f9f57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b600081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156110b2575081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156110be5750600082115b80156111495750600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b156113f5576111a082600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461168f90919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061127282600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461168f90919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061134482600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108c390919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190506113ff565b600090506113ff565b5b9392505050565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156114575750600082115b80156114e25750600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b1561167f5761153982600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461168f90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115ce82600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108c390919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611689565b60009050611689565b5b92915050565b600082821115151561169d57fe5b81830390505b929150505600a165627a7a7230582084cc5f12cb781ab9f6ca6fb1736a7885071d95e70fa36ace315301685b8e9aee0029"
}