{
  "address": "0x230c2a140e758087f7107dd31943c5c03b819e55",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Cointed Token",
  "contractName": "CtdToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-19\n*/\n\npragma solidity 0.4.15;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title PausableOnce\n * @dev The PausableOnce contract provides an option for the \"pauseMaster\"\n * to pause once the transactions for two weeks.\n *\n */\n\ncontract PausableOnce is Ownable {\n\n    /** Address that can start the pause */\n    address public pauseMaster;\n\n    uint constant internal PAUSE_DURATION = 14 days;\n    uint64 public pauseEnd = 0;\n\n    event Paused();\n\n    /**\n     * @dev Set the pauseMaster (callable by the owner only).\n     * @param _pauseMaster The address of the pauseMaster\n     */\n    function setPauseMaster(address _pauseMaster) onlyOwner external returns (bool success) {\n        require(_pauseMaster != address(0));\n        pauseMaster = _pauseMaster;\n        return true;\n    }\n\n    /**\n     * @dev Start the pause (by the pauseMaster, ONCE only).\n     */\n    function pause() onlyPauseMaster external returns (bool success) {\n        require(pauseEnd == 0);\n        pauseEnd = uint64(now + PAUSE_DURATION);\n        Paused();\n        return true;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(now > pauseEnd);\n        _;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the pauseMaster.\n     */\n    modifier onlyPauseMaster() {\n        require(msg.sender == pauseMaster);\n        _;\n    }\n\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    uint256 _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue)\n    returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue)\n    returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n* @title Upgrade agent interface\n*/\ncontract InterfaceUpgradeAgent {\n\n    uint32 public revision;\n    uint256 public originalSupply;\n\n    /**\n     * @dev Reissue the tokens onto the new contract revision.\n     * @param holder Holder (owner) of the tokens\n     * @param tokenQty How many tokens to be issued\n     */\n    function upgradeFrom(address holder, uint256 tokenQty) public;\n}\n\n/**\n * @title UpgradableToken\n * @dev The UpgradableToken contract provides an option of upgrading the tokens to a new revision.\n * The \"upgradeMaster\" may propose the upgrade. Token holders can opt-in amount of tokens to upgrade.\n */\n\ncontract UpgradableToken is StandardToken, Ownable {\n\n    using SafeMath for uint256;\n\n    uint32 public REVISION;\n\n    /** Address that can set the upgrade agent thus enabling the upgrade. */\n    address public upgradeMaster = address(0);\n\n    /** Address of the contract that issues the new revision tokens. */\n    address public upgradeAgent = address(0);\n\n    /** How many tokens are upgraded. */\n    uint256 public totalUpgraded;\n\n    event Upgrade(address indexed _from, uint256 _value);\n    event UpgradeEnabled(address agent);\n\n    /**\n     * @dev Set the upgrade master.\n     * parameter _upgradeMaster Upgrade master\n     */\n    function setUpgradeMaster(address _upgradeMaster) onlyOwner external {\n        require(_upgradeMaster != address(0));\n        upgradeMaster = _upgradeMaster;\n    }\n\n    /**\n     * @dev Set the upgrade agent (once only) thus enabling the upgrade.\n     * @param _upgradeAgent Upgrade agent contract address\n     * @param _revision Unique ID that agent contract must return on \".revision()\"\n     */\n    function setUpgradeAgent(address _upgradeAgent, uint32 _revision)\n        onlyUpgradeMaster whenUpgradeDisabled external\n    {\n        require((_upgradeAgent != address(0)) && (_revision != 0));\n\n        InterfaceUpgradeAgent agent = InterfaceUpgradeAgent(_upgradeAgent);\n\n        require(agent.revision() == _revision);\n        require(agent.originalSupply() == totalSupply);\n\n        upgradeAgent = _upgradeAgent;\n        UpgradeEnabled(_upgradeAgent);\n    }\n\n    /**\n     * @dev Upgrade tokens to the new revision.\n     * @param value How many tokens to be upgraded\n     */\n    function upgrade(uint256 value) whenUpgradeEnabled external {\n        require(value > 0);\n\n        uint256 balance = balances[msg.sender];\n        require(balance > 0);\n\n        // Take tokens out from the old contract\n        balances[msg.sender] = balance.sub(value);\n        totalSupply = totalSupply.sub(value);\n        totalUpgraded = totalUpgraded.add(value);\n        // Issue the new revision tokens\n        InterfaceUpgradeAgent agent = InterfaceUpgradeAgent(upgradeAgent);\n        agent.upgradeFrom(msg.sender, value);\n\n        Upgrade(msg.sender, value);\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the upgrade is enabled.\n    */\n    modifier whenUpgradeEnabled() {\n        require(upgradeAgent != address(0));\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the upgrade is impossible.\n    */\n    modifier whenUpgradeDisabled() {\n        require(upgradeAgent == address(0));\n        _;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the upgradeMaster.\n    */\n    modifier onlyUpgradeMaster() {\n        require(msg.sender == upgradeMaster);\n        _;\n    }\n\n}\n\n/**\n * @title Withdrawable\n * @dev The Withdrawable contract provides a mechanism of withdrawal(s).\n * \"Withdrawals\" are permissions for specified addresses to pull (withdraw) payments from the contract balance.\n */\n\ncontract Withdrawable {\n\n    mapping (address => uint) pendingWithdrawals;\n\n    /*\n     * @dev Logged upon a granted allowance to the specified drawer on withdrawal.\n     * @param drawer The address of the drawer.\n     * @param weiAmount The value in Wei which may be withdrawn.\n     */\n    event Withdrawal(address indexed drawer, uint256 weiAmount);\n\n    /*\n     * @dev Logged upon a withdrawn value.\n     * @param drawer The address of the drawer.\n     * @param weiAmount The value in Wei which has been withdrawn.\n     */\n    event Withdrawn(address indexed drawer, uint256 weiAmount);\n\n    /*\n     * @dev Allow the specified drawer to withdraw the specified value from the contract balance.\n     * @param drawer The address of the drawer.\n     * @param weiAmount The value in Wei allowed to withdraw.\n     * @return success\n     */\n    function setWithdrawal(address drawer, uint256 weiAmount) internal returns (bool success) {\n        if ((drawer != address(0)) && (weiAmount > 0)) {\n            uint256 oldBalance = pendingWithdrawals[drawer];\n            uint256 newBalance = oldBalance + weiAmount;\n            if (newBalance > oldBalance) {\n                pendingWithdrawals[drawer] = newBalance;\n                Withdrawal(drawer, weiAmount);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /*\n     * @dev Withdraw the allowed value from the contract balance.\n     * @return success\n     */\n    function withdraw() public returns (bool success) {\n        uint256 weiAmount = pendingWithdrawals[msg.sender];\n        require(weiAmount > 0);\n\n        pendingWithdrawals[msg.sender] = 0;\n        msg.sender.transfer(weiAmount);\n        Withdrawn(msg.sender, weiAmount);\n        return true;\n    }\n\n}\n\n/**\n * @title Cointed Token\n * @dev Cointed Token (CTD) and Token Sale (ICO).\n */\n\ncontract CtdToken is UpgradableToken, PausableOnce, Withdrawable {\n\n    using SafeMath for uint256;\n\n    string public constant name = \"Cointed Token\";\n    string public constant symbol = \"CTD\";\n    /** Number of \"Atom\" in 1 CTD (1 CTD = 1x10^decimals Atom) */\n    uint8  public constant decimals = 18;\n\n    /** Holder of bounty tokens */\n    address public bounty;\n\n    /** Limit (in Atom) issued, inclusive owner's and bounty shares */\n    uint256 constant internal TOTAL_LIMIT   = 650000000 * (10 ** uint256(decimals));\n    /** Limit (in Atom) for Pre-ICO Phases A, incl. owner's and bounty shares */\n    uint256 constant internal PRE_ICO_LIMIT = 130000000 * (10 ** uint256(decimals));\n\n    /**\n    * ICO Phases.\n    *\n    * - PreStart: tokens are not yet sold/issued\n    * - PreIcoA:  new tokens sold/issued at the premium price\n    * - PreIcoB:  new tokens sold/issued at the discounted price\n    * - MainIco   new tokens sold/issued at the regular price\n    * - AfterIco: new tokens can not be not be sold/issued any longer\n    */\n    enum Phases {PreStart, PreIcoA, PreIcoB, MainIco, AfterIco}\n\n    uint64 constant internal PRE_ICO_DURATION = 745 hours;\n    uint64 constant internal ICO_DURATION = 2423 hours + 59 minutes;\n    uint64 constant internal RETURN_WEI_PAUSE = 30 days;\n\n    // Main ICO rate in CTD(s) per 1 ETH:\n    uint256 constant internal TO_SENDER_RATE   = 1000;\n    uint256 constant internal TO_OWNER_RATE    =  263;\n    uint256 constant internal TO_BOUNTY_RATE   =   52;\n    uint256 constant internal TOTAL_RATE   =   TO_SENDER_RATE + TO_OWNER_RATE + TO_BOUNTY_RATE;\n    // Pre-ICO Phase A rate\n    uint256 constant internal TO_SENDER_RATE_A = 1150;\n    uint256 constant internal TO_OWNER_RATE_A  =  304;\n    uint256 constant internal TO_BOUNTY_RATE_A =   61;\n    uint256 constant internal TOTAL_RATE_A   =   TO_SENDER_RATE_A + TO_OWNER_RATE_A + TO_BOUNTY_RATE_A;\n    // Pre-ICO Phase B rate\n    uint256 constant internal TO_SENDER_RATE_B = 1100;\n    uint256 constant internal TO_OWNER_RATE_B  =  292;\n    uint256 constant internal TO_BOUNTY_RATE_B =   58;\n    uint256 constant internal TOTAL_RATE_B   =   TO_SENDER_RATE_B + TO_OWNER_RATE_B + TO_BOUNTY_RATE_B;\n\n    // Award in Wei(s) to a successful initiator of a Phase shift\n    uint256 constant internal PRE_OPENING_AWARD = 100 * (10 ** uint256(15));\n    uint256 constant internal ICO_OPENING_AWARD = 200 * (10 ** uint256(15));\n    uint256 constant internal ICO_CLOSING_AWARD = 500 * (10 ** uint256(15));\n\n    struct Rates {\n        uint256 toSender;\n        uint256 toOwner;\n        uint256 toBounty;\n        uint256 total;\n    }\n\n    event NewTokens(uint256 amount);\n    event NewFunds(address funder, uint256 value);\n    event NewPhase(Phases phase);\n\n    // current Phase\n    Phases public phase = Phases.PreStart;\n\n    // Timestamps limiting duration of Phases, in seconds since Unix epoch.\n    uint64 public preIcoOpeningTime;  // when Pre-ICO Phase A starts\n    uint64 public icoOpeningTime;     // when Main ICO starts (if not sold out before)\n    uint64 public closingTime;        // by when the ICO campaign finishes in any way\n    uint64 public returnAllowedTime;  // when owner may withdraw Eth from contract, if any\n\n    uint256 public totalProceeds;\n\n    /*\n     * @dev constructor\n     * @param _preIcoOpeningTime Timestamp when the Pre-ICO (Phase A) shall start.\n     * msg.value MUST be at least the sum of awards.\n     */\n    function CtdToken(uint64 _preIcoOpeningTime) payable {\n        require(_preIcoOpeningTime > now);\n\n        preIcoOpeningTime = _preIcoOpeningTime;\n        icoOpeningTime = preIcoOpeningTime + PRE_ICO_DURATION;\n        closingTime = icoOpeningTime + ICO_DURATION;\n    }\n\n    /*\n     * @dev Fallback function delegates the request to create().\n     */\n    function () payable external {\n        create();\n    }\n\n    /**\n     * @dev Set the address of the holder of bounty tokens.\n     * @param _bounty The address of the bounty token holder.\n     * @return success/failure\n     */\n    function setBounty(address _bounty) onlyOwner external returns (bool success) {\n        require(_bounty != address(0));\n        bounty = _bounty;\n        return true;\n    }\n\n    /**\n     * @dev Mint tokens and add them to the balance of the message.sender.\n     * Additional tokens are minted and added to the owner and the bounty balances.\n     * @return success/failure\n     */\n    function create() payable whenNotClosed whenNotPaused public returns (bool success) {\n        require(msg.value > 0);\n        require(now >= preIcoOpeningTime);\n\n        Phases oldPhase = phase;\n        uint256 weiToParticipate = msg.value;\n        uint256 overpaidWei;\n\n        adjustPhaseBasedOnTime();\n\n        if (phase != Phases.AfterIco) {\n\n            Rates memory rates = getRates();\n            uint256 newTokens = weiToParticipate.mul(rates.total);\n            uint256 requestedSupply = totalSupply.add(newTokens);\n\n            uint256 oversoldTokens = computeOversoldAndAdjustPhase(requestedSupply);\n            overpaidWei = (oversoldTokens > 0) ? oversoldTokens.div(rates.total) : 0;\n\n            if (overpaidWei > 0) {\n                weiToParticipate = msg.value.sub(overpaidWei);\n                newTokens = weiToParticipate.mul(rates.total);\n                requestedSupply = totalSupply.add(newTokens);\n            }\n\n            // \"emission\" of new tokens\n            totalSupply = requestedSupply;\n            balances[msg.sender] = balances[msg.sender].add(weiToParticipate.mul(rates.toSender));\n            balances[owner] = balances[owner].add(weiToParticipate.mul(rates.toOwner));\n            balances[bounty] = balances[bounty].add(weiToParticipate.mul(rates.toBounty));\n\n            // ETH transfers\n            totalProceeds = totalProceeds.add(weiToParticipate);\n            owner.transfer(weiToParticipate);\n            if (overpaidWei > 0) {\n                setWithdrawal(msg.sender, overpaidWei);\n            }\n\n            // Logging\n            NewTokens(newTokens);\n            NewFunds(msg.sender, weiToParticipate);\n\n        } else {\n            setWithdrawal(msg.sender, msg.value);\n        }\n\n        if (phase != oldPhase) {\n            logShiftAndBookAward();\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Send the value (ethers) that the contract holds to the owner address.\n     */\n    function returnWei() onlyOwner whenClosed afterWithdrawPause external {\n        owner.transfer(this.balance);\n    }\n\n    function adjustPhaseBasedOnTime() internal {\n\n        if (now >= closingTime) {\n            if (phase != Phases.AfterIco) {\n                phase = Phases.AfterIco;\n            }\n        } else if (now >= icoOpeningTime) {\n            if (phase != Phases.MainIco) {\n                phase = Phases.MainIco;\n            }\n        } else if (phase == Phases.PreStart) {\n            setDefaultParamsIfNeeded();\n            phase = Phases.PreIcoA;\n        }\n    }\n\n    function setDefaultParamsIfNeeded() internal {\n        if (bounty == address(0)) {\n            bounty = owner;\n        }\n        if (upgradeMaster == address(0)) {\n            upgradeMaster = owner;\n        }\n        if (pauseMaster == address(0)) {\n            pauseMaster = owner;\n        }\n    }\n\n    function computeOversoldAndAdjustPhase(uint256 newTotalSupply) internal returns (uint256 oversoldTokens) {\n\n        if ((phase == Phases.PreIcoA) &&\n            (newTotalSupply >= PRE_ICO_LIMIT)) {\n            phase = Phases.PreIcoB;\n            oversoldTokens = newTotalSupply.sub(PRE_ICO_LIMIT);\n\n        } else if (newTotalSupply >= TOTAL_LIMIT) {\n            phase = Phases.AfterIco;\n            oversoldTokens = newTotalSupply.sub(TOTAL_LIMIT);\n\n        } else {\n            oversoldTokens = 0;\n        }\n\n        return oversoldTokens;\n    }\n\n    function getRates() internal returns (Rates rates) {\n\n        if (phase == Phases.PreIcoA) {\n            rates.toSender = TO_SENDER_RATE_A;\n            rates.toOwner = TO_OWNER_RATE_A;\n            rates.toBounty = TO_BOUNTY_RATE_A;\n            rates.total = TOTAL_RATE_A;\n        } else if (phase == Phases.PreIcoB) {\n            rates.toSender = TO_SENDER_RATE_B;\n            rates.toOwner = TO_OWNER_RATE_B;\n            rates.toBounty = TO_BOUNTY_RATE_B;\n            rates.total = TOTAL_RATE_B;\n        } else {\n            rates.toSender = TO_SENDER_RATE;\n            rates.toOwner = TO_OWNER_RATE;\n            rates.toBounty = TO_BOUNTY_RATE;\n            rates.total = TOTAL_RATE;\n        }\n        return rates;\n    }\n\n    function logShiftAndBookAward() internal {\n        uint256 shiftAward;\n\n        if ((phase == Phases.PreIcoA) || (phase == Phases.PreIcoB)) {\n            shiftAward = PRE_OPENING_AWARD;\n\n        } else if (phase == Phases.MainIco) {\n            shiftAward = ICO_OPENING_AWARD;\n\n        } else {\n            shiftAward = ICO_CLOSING_AWARD;\n            returnAllowedTime = uint64(now + RETURN_WEI_PAUSE);\n        }\n\n        setWithdrawal(msg.sender, shiftAward);\n        NewPhase(phase);\n    }\n\n    /**\n     * @dev Transfer tokens to the specified address.\n     * @param _to The address to transfer to.\n     * @param _value The amount of tokens to be transferred.\n     * @return success/failure\n     */\n    function transfer(address _to, uint256 _value)\n        whenNotPaused limitForOwner public returns (bool success)\n    {\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * @param _from address The address which you want to send tokens from.\n     * @param _to address The address which you want to transfer to.\n     * @param _value the amount of tokens to be transferred.\n     * @return success/failure\n     */\n    function transferFrom(address _from, address _to, uint256 _value)\n        whenNotPaused limitForOwner public returns (bool success)\n    {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n     * @dev Approve the specified address to spend the specified amount of tokens on behalf of the msg.sender.\n     * Use \"increaseApproval\" or \"decreaseApproval\" function to change the approval, if needed.\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     * @return success/failure\n     */\n    function approve(address _spender, uint256 _value)\n        whenNotPaused limitForOwner public returns (bool success)\n    {\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n        return super.approve(_spender, _value);\n    }\n\n    /**\n     * @dev Increase the approval for the passed address to spend tokens on behalf of the msg.sender.\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the approval with.\n     * @return success/failure\n     */\n    function increaseApproval(address _spender, uint _addedValue)\n        whenNotPaused limitForOwner public returns (bool success)\n    {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    /**\n     * @dev Decrease the approval for the passed address to spend tokens on behalf of the msg.sender.\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the approval with.\n     * @return success/failure\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue)\n        whenNotPaused limitForOwner public returns (bool success)\n    {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n\n    /*\n     * @dev Withdraw the allowed value (ethers) from the contract balance.\n     * @return success/failure\n     */\n    function withdraw() whenNotPaused public returns (bool success) {\n        return super.withdraw();\n    }\n\n    /**\n     * @dev Throws if called when ICO is active.\n     */\n    modifier whenClosed() {\n        require(phase == Phases.AfterIco);\n        _;\n    }\n\n    /**\n     * @dev Throws if called when ICO is completed.\n     */\n    modifier whenNotClosed() {\n        require(phase != Phases.AfterIco);\n        _;\n    }\n\n    /**\n     * @dev Throws if called by the owner before ICO is completed.\n     */\n    modifier limitForOwner() {\n        require((msg.sender != owner) || (phase == Phases.AfterIco));\n        _;\n    }\n\n    /**\n     * @dev Throws if called before returnAllowedTime.\n     */\n    modifier afterWithdrawPause() {\n        require(now > returnAllowedTime);\n        _;\n    }\n\n}",
  "bytecode": "606060405260048054600160a060020a03199081169091556005805490911690556007805460a060020a60e060020a0319169055600980546000919060a060020a60ff02191674010000000000000000000000000000000000000000835b02179055506040516020806122ea833981016040528080519150505b5b60038054600160a060020a03191633600160a060020a03161790555b426001604060020a038216116100ab57600080fd5b600980546001604060020a03808416750100000000000000000000000000000000000000000090810260a860020a60e860020a03199093169290921792839055600a80549290930481166228ec9001811667ffffffffffffffff199092169190911780821662852744019091166801000000000000000002604060020a608060020a03199091161790555b505b6121a3806101476000396000f3006060604052361561019b5763ffffffff60e060020a60003504166306fdde0381146101a8578063095ea7b3146102335780630f4391f51461026957806318160ddd1461029c57806323b872dd146102c15780632d884a51146102fd578063313ce5671461032d5780633ccfd60b146103565780633f5cbdb61461037d57806345977d03146103925780634b6753bc146103aa5780635de4ccb0146103da578063600440cb14610409578063661884631461043857806370a082311461046e5780638456cb591461049f5780638da5cb5b146104c6578063943dfef1146104f557806395d89b4114610524578063a9059cbb146105af578063aa5a20e5146105e5578063b1c9fe6e1461060f578063bc300ed314610646578063c5c0b85914610679578063c752ff62146106a8578063d73dd623146106cd578063d87522ae14610703578063dd62ed3e14610733578063dde43cba1461076a578063efc81a8c14610796578063f1db23dc146107b2578063f2fde38b146107d7578063f397884b146107f8578063f885eaf214610828578063ffeb7d7514610858575b5b6101a4610879565b505b005b34156101b357600080fd5b6101bb610c3b565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101f85780820151818401525b6020016101df565b50505050905090810190601f1680156102255780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561023e57600080fd5b610255600160a060020a0360043516602435610c72565b604051901515815260200160405180910390f35b341561027457600080fd5b610255600160a060020a0360043516610d25565b604051901515815260200160405180910390f35b34156102a757600080fd5b6102af610d7d565b60405190815260200160405180910390f35b34156102cc57600080fd5b610255600160a060020a0360043581169060243516604435610d83565b604051901515815260200160405180910390f35b341561030857600080fd5b610310610dfd565b60405167ffffffffffffffff909116815260200160405180910390f35b341561033857600080fd5b610340610e0d565b60405160ff909116815260200160405180910390f35b341561036157600080fd5b610255610e12565b604051901515815260200160405180910390f35b341561038857600080fd5b6101a6610e43565b005b341561039d57600080fd5b6101a6600435610eee565b005b34156103b557600080fd5b610310611043565b60405167ffffffffffffffff909116815260200160405180910390f35b34156103e557600080fd5b6103ed61105f565b604051600160a060020a03909116815260200160405180910390f35b341561041457600080fd5b6103ed61106e565b604051600160a060020a03909116815260200160405180910390f35b341561044357600080fd5b610255600160a060020a036004351660243561107d565b604051901515815260200160405180910390f35b341561047957600080fd5b6102af600160a060020a03600435166110f5565b60405190815260200160405180910390f35b34156104aa57600080fd5b610255611114565b604051901515815260200160405180910390f35b34156104d157600080fd5b6103ed6111c3565b604051600160a060020a03909116815260200160405180910390f35b341561050057600080fd5b6103ed6111d2565b604051600160a060020a03909116815260200160405180910390f35b341561052f57600080fd5b6101bb6111e1565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101f85780820151818401525b6020016101df565b50505050905090810190601f1680156102255780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105ba57600080fd5b610255600160a060020a0360043516602435611218565b604051901515815260200160405180910390f35b34156105f057600080fd5b6101a6600160a060020a036004351663ffffffff60243516611290565b005b341561061a57600080fd5b610622611438565b6040518082600481111561063257fe5b60ff16815260200191505060405180910390f35b341561065157600080fd5b610255600160a060020a0360043516611448565b604051901515815260200160405180910390f35b341561068457600080fd5b6103ed6114a0565b604051600160a060020a03909116815260200160405180910390f35b34156106b357600080fd5b6102af6114af565b60405190815260200160405180910390f35b34156106d857600080fd5b610255600160a060020a03600435166024356114b5565b604051901515815260200160405180910390f35b341561070e57600080fd5b61031061152d565b60405167ffffffffffffffff909116815260200160405180910390f35b341561073e57600080fd5b6102af600160a060020a0360043581169060243516611544565b60405190815260200160405180910390f35b341561077557600080fd5b61077d611571565b60405163ffffffff909116815260200160405180910390f35b610255610879565b604051901515815260200160405180910390f35b34156107bd57600080fd5b6102af611584565b60405190815260200160405180910390f35b34156107e257600080fd5b6101a6600160a060020a036004351661158a565b005b341561080357600080fd5b610310611616565b60405167ffffffffffffffff909116815260200160405180910390f35b341561083357600080fd5b61031061163f565b60405167ffffffffffffffff909116815260200160405180910390f35b341561086357600080fd5b6101a6600160a060020a0360043516611663565b005b60008060008061088761214e565b6000808060045b60095460a060020a900460ff1660048111156108a657fe5b14156108b157600080fd5b60075460a060020a900467ffffffffffffffff1642116108d057600080fd5b600034116108dd57600080fd5b6009547501000000000000000000000000000000000000000000900467ffffffffffffffff1642101561090f57600080fd5b60095460a060020a900460ff1696503495506109296116b3565b60045b60095460a060020a900460ff16600481111561094457fe5b14610bec576109516117e8565b93506109688460600151879063ffffffff61189616565b60005490935061097e908463ffffffff6118c516565b9150610989826118df565b90506000811161099a5760006109af565b6109af8460600151829063ffffffff6119d416565b5b945060008511156109fb576109cb348663ffffffff6119f016565b95506109e28460600151879063ffffffff61189616565b6000549093506109f8908463ffffffff6118c516565b91505b6000829055610a3a610a158551889063ffffffff61189616565b600160a060020a0333166000908152600160205260409020549063ffffffff6118c516565b600160a060020a033316600090815260016020908152604090912091909155610a9890610a7190860151889063ffffffff61189616565b600354600160a060020a03166000908152600160205260409020549063ffffffff6118c516565b600354600160a060020a03166000908152600160205260409081902091909155610af790610ad090860151889063ffffffff61189616565b600954600160a060020a03166000908152600160205260409020549063ffffffff6118c516565b600954600160a060020a0316600090815260016020526040902055600b54610b25908763ffffffff6118c516565b600b55600354600160a060020a031686156108fc0287604051600060405180830381858888f193505050501515610b5b57600080fd5b6000851115610b7057610b6e3386611a07565b505b7fd7c894eab7da0862dea424c47485ac49eab56e3690186d9ee97bfc895e0eb5e98360405190815260200160405180910390a17f2b6aa69d7af29fd38518d44025ae0801e505fb9e1065cb57945b4200ef7d71943387604051600160a060020a03909216825260208201526040908101905180910390a1610bf8565b610bf63334611a07565b505b866004811115610c0457fe5b60095460a060020a900460ff166004811115610c1c57fe5b14610c2957610c29611ab5565b5b600197505b5b5b5050505050505090565b60408051908101604052600d81527f436f696e74656420546f6b656e00000000000000000000000000000000000000602082015281565b60075460009060a060020a900467ffffffffffffffff164211610c9457600080fd5b60035433600160a060020a039081169116141580610cca575060045b60095460a060020a900460ff166004811115610cc857fe5b145b1515610cd557600080fd5b811580610d055750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b1515610d1057600080fd5b610d1a8383611bec565b90505b5b5b92915050565b60035460009033600160a060020a03908116911614610d4357600080fd5b600160a060020a0382161515610d5857600080fd5b5060078054600160a060020a031916600160a060020a03831617905560015b5b919050565b60005481565b60075460009060a060020a900467ffffffffffffffff164211610da557600080fd5b60035433600160a060020a039081169116141580610ddb575060045b60095460a060020a900460ff166004811115610dd957fe5b145b1515610de657600080fd5b610df1848484611c59565b90505b5b5b9392505050565b600a5467ffffffffffffffff1681565b601281565b60075460009060a060020a900467ffffffffffffffff164211610e3457600080fd5b610e3c611d85565b90505b5b90565b60035433600160a060020a03908116911614610e5e57600080fd5b60045b60095460a060020a900460ff166004811115610e7957fe5b14610e8357600080fd5b600a54700100000000000000000000000000000000900467ffffffffffffffff164211610eaf57600080fd5b600354600160a060020a039081169030163180156108fc0290604051600060405180830381858888f193505050501515610ee857600080fd5b5b5b5b5b565b6005546000908190600160a060020a03161515610f0a57600080fd5b60008311610f1757600080fd5b600160a060020a03331660009081526001602052604081205492508211610f3d57600080fd5b610f4d828463ffffffff6119f016565b600160a060020a03331660009081526001602052604081209190915554610f7a908463ffffffff6119f016565b600055600654610f90908463ffffffff6118c516565b60065550600554600160a060020a03168063753e88e5338560405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610feb57600080fd5b6102c65a03f11515610ffc57600080fd5b50505033600160a060020a03167f318d2be9b9a887c0d168715bd2f44017dafbb3360b14cdcc2a8c0086b4e2d1518460405190815260200160405180910390a25b5b505050565b600a5468010000000000000000900467ffffffffffffffff1681565b600554600160a060020a031681565b600454600160a060020a031681565b60075460009060a060020a900467ffffffffffffffff16421161109f57600080fd5b60035433600160a060020a0390811691161415806110d5575060045b60095460a060020a900460ff1660048111156110d357fe5b145b15156110e057600080fd5b610d1a8383611e34565b90505b5b5b92915050565b600160a060020a0381166000908152600160205260409020545b919050565b60075460009033600160a060020a0390811691161461113257600080fd5b60075460a060020a900467ffffffffffffffff161561115057600080fd5b600780547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff1660a060020a62127500420167ffffffffffffffff16021790557f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75260405160405180910390a15060015b5b90565b600354600160a060020a031681565b600954600160a060020a031681565b60408051908101604052600381527f4354440000000000000000000000000000000000000000000000000000000000602082015281565b60075460009060a060020a900467ffffffffffffffff16421161123a57600080fd5b60035433600160a060020a039081169116141580611270575060045b60095460a060020a900460ff16600481111561126e57fe5b145b151561127b57600080fd5b610d1a8383611f30565b90505b5b5b92915050565b60045460009033600160a060020a039081169116146112ae57600080fd5b600554600160a060020a0316156112c457600080fd5b600160a060020a038316158015906112e1575063ffffffff821615155b15156112ec57600080fd5b508163ffffffff8216600160a060020a038216637cc963806000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561133b57600080fd5b6102c65a03f1151561134c57600080fd5b5050506040518051905063ffffffff1614151561136857600080fd5b60005481600160a060020a0316634b2ba0dd6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156113b157600080fd5b6102c65a03f115156113c257600080fd5b505050604051805190501415156113d857600080fd5b60058054600160a060020a031916600160a060020a0385161790557ff2c44e779d94e9806f973c8ff14aa5dcfd972c84192842a273550c3def4e27d883604051600160a060020a03909116815260200160405180910390a15b5b5b505050565b60095460a060020a900460ff1681565b60035460009033600160a060020a0390811691161461146657600080fd5b600160a060020a038216151561147b57600080fd5b5060098054600160a060020a031916600160a060020a03831617905560015b5b919050565b600754600160a060020a031681565b60065481565b60075460009060a060020a900467ffffffffffffffff1642116114d757600080fd5b60035433600160a060020a03908116911614158061150d575060045b60095460a060020a900460ff16600481111561150b57fe5b145b151561151857600080fd5b610d1a8383612007565b90505b5b5b92915050565b60075460a060020a900467ffffffffffffffff1681565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035460a060020a900463ffffffff1681565b600b5481565b60035433600160a060020a039081169116146115a557600080fd5b600160a060020a03811615156115ba57600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360038054600160a060020a031916600160a060020a0383161790555b5b50565b6009547501000000000000000000000000000000000000000000900467ffffffffffffffff1681565b600a54700100000000000000000000000000000000900467ffffffffffffffff1681565b60035433600160a060020a0390811691161461167e57600080fd5b600160a060020a038116151561169357600080fd5b60048054600160a060020a031916600160a060020a0383161790555b5b50565b600a5468010000000000000000900467ffffffffffffffff1642106117245760045b60095460a060020a900460ff1660048111156116ed57fe5b1461171f57600980546004919074ff0000000000000000000000000000000000000000191660a060020a835b02179055505b610ee8565b600a5467ffffffffffffffff16421061178d5760035b60095460a060020a900460ff16600481111561175257fe5b1461171f57600980546003919074ff0000000000000000000000000000000000000000191660a060020a83611719565b02179055505b610ee8565b60005b60095460a060020a900460ff1660048111156117a857fe5b1415610ee8576117b66120ac565b600980546001919074ff0000000000000000000000000000000000000000191660a060020a835b02179055505b5b5b5b565b6117f061214e565b60015b60095460a060020a900460ff16600481111561180b57fe5b14156118325761047e81526101306020820152603d60408201526105eb6060820152610e3f565b60025b60095460a060020a900460ff16600481111561184d57fe5b14156118745761044c81526101246020820152603a60408201526105aa6060820152610e3f565b6103e8815261010760208201526034604082015261052360608201525b5b5b90565b60008282028315806118b257508284828115156118af57fe5b04145b15156118ba57fe5b8091505b5092915050565b6000828201838110156118ba57fe5b8091505b5092915050565b600060015b60095460a060020a900460ff1660048111156118fc57fe5b14801561191457506a6b88921f0410abc20000008210155b1561196757600980546002919074ff0000000000000000000000000000000000000000191660a060020a835b0217905550611960826a6b88921f0410abc200000063ffffffff6119f016565b9050610d77565b6b0219aada9b14535aca00000082106119c957600980546004919074ff0000000000000000000000000000000000000000191660a060020a835b0217905550611960826b0219aada9b14535aca00000063ffffffff6119f016565b9050610d77565b5060005b5b5b919050565b60008082848115156119e257fe5b0490508091505b5092915050565b6000828211156119fc57fe5b508082035b92915050565b60008080600160a060020a03851615801590611a235750600084115b15611aa7575050600160a060020a03831660009081526008602052604090205482810181811115611aa757600160a060020a038516600081815260086020526040908190208390557f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b659086905190815260200160405180910390a260019250611aad565b5b600092505b505092915050565b600060015b60095460a060020a900460ff166004811115611ad257fe5b1480611af6575060025b60095460a060020a900460ff166004811115611af457fe5b145b15611b0a575067016345785d8a0000611b8a565b60035b60095460a060020a900460ff166004811115611b2557fe5b1415611b3a57506702c68af0bb140000611b8a565b50600a805477ffffffffffffffff00000000000000000000000000000000191670010000000000000000000000000000000067ffffffffffffffff62278d00420116021790556706f05b59d3b200005b5b611b953382611a07565b506009547f31f72b44f546d9e7eaec13f65636997665e15f134a81c82924f568f5c0d07b939060a060020a900460ff1660405180826004811115611bd557fe5b60ff16815260200191505060405180910390a15b50565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b600080600160a060020a0384161515611c7157600080fd5b50600160a060020a03808516600081815260026020908152604080832033909516835293815283822054928252600190529190912054611cb7908463ffffffff6119f016565b600160a060020a038087166000908152600160205260408082209390935590861681522054611cec908463ffffffff6118c516565b600160a060020a038516600090815260016020526040902055611d15818463ffffffff6119f016565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b600160a060020a033316600090815260086020526040812054818111611daa57600080fd5b600160a060020a0333166000818152600860205260408082209190915582156108fc0290839051600060405180830381858888f193505050501515611dee57600080fd5b33600160a060020a03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58260405190815260200160405180910390a2600191505b5090565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115611e9157600160a060020a033381166000908152600260209081526040808320938816835292905290812055611ec8565b611ea1818463ffffffff6119f016565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b6000600160a060020a0383161515611f4757600080fd5b600160a060020a033316600090815260016020526040902054611f70908363ffffffff6119f016565b600160a060020a033381166000908152600160205260408082209390935590851681522054611fa5908363ffffffff6118c516565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205461203f908363ffffffff6118c516565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a35060015b92915050565b600954600160a060020a031615156120e15760035460098054600160a060020a031916600160a060020a039092169190911790555b600454600160a060020a031615156121165760035460048054600160a060020a031916600160a060020a039092169190911790555b600754600160a060020a03161515610ee85760035460078054600160a060020a031916600160a060020a039092169190911790555b5b565b6080604051908101604052806000815260200160008152602001600081526020016000815250905600a165627a7a7230582094b10c2a6e6e4ebe96606e48a7611d3da6e223636638da8e85b7391ebe26f52e00290000000000000000000000000000000000000000000000000000000059e92060",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000059e92060"
}