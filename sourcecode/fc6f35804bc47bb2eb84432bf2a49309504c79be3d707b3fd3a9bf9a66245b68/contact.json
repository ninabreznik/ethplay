{
  "address": "0x56e0b2c7694e6e10391e870774daa45cf6583486",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "DUO Network Token",
  "contractName": "DUO",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-21\n*/\n\npragma solidity ^0.5.0;\n\ncontract DUO {\n\t// Public variables of the token\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals = 18;\n\t// 18 decimals is the strongly suggested default, avoid changing it\n\tuint public totalSupply;\n\n\t// This creates an array with all balances\n\tmapping (address => uint) public balanceOf;\n\tmapping (address => mapping (address => uint)) public allowance;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Transfer(address indexed from, address indexed to, uint tokens);\n\tevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n\n\t/**\n\t * Constrctor function\n\t *\n\t * Initializes contract with initial supply tokens to the creator of the contract\n\t */\n\tconstructor(\n\t\tuint initialSupply,\n\t\tstring memory tokenName,\n\t\tstring memory tokenSymbol\n\t) public \n\t{\n\t\ttotalSupply = initialSupply;  // Update total supply with the decimal amount\n\t\tbalanceOf[msg.sender] = totalSupply;\t\t\t\t// Give the creator all initial tokens\n\t\tname = tokenName;\t\t\t\t\t\t\t\t   // Set the name for display purposes\n\t\tsymbol = tokenSymbol;\t\t\t\t\t\t\t   // Set the symbol for display purposes\n\t}\n\n\t/**\n\t * Internal transfer, only can be called by this contract\n\t */\n\tfunction transfer(address from, address to, uint value) internal {\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(to != address(0));\n\t\t// Check if the sender has enough\n\t\trequire(balanceOf[from] >= value);\n\t\t// Check for overflows\n\t\trequire(balanceOf[to] + value > balanceOf[to]);\n\t\t// Save this for an assertion in the future\n\t\tuint previousBalances = balanceOf[from] + balanceOf[to];\n\t\t// Subtract from the sender\n\t\tbalanceOf[from] -= value;\n\t\t// Add the same to the recipient\n\t\tbalanceOf[to] += value;\n\t\temit Transfer(from, to, value);\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n\t\tassert(balanceOf[from] + balanceOf[to] == previousBalances);\n\t}\n\n\t/**\n\t * Transfer tokens\n\t *\n\t * Send `value` tokens to `to` from your account\n\t *\n\t * @param to The address of the recipient\n\t * @param value the amount to send\n\t */\n\tfunction transfer(address to, uint value) public returns (bool success) {\n\t\ttransfer(msg.sender, to, value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Transfer tokens from other address\n\t *\n\t * Send `value` tokens to `to` in behalf of `from`\n\t *\n\t * @param from The address of the sender\n\t * @param to The address of the recipient\n\t * @param value the amount to send\n\t */\n\tfunction transferFrom(address from, address to, uint value) public returns (bool success) {\n\t\trequire(value <= allowance[from][msg.sender]);\t // Check allowance\n\t\tallowance[from][msg.sender] -= value;\n\t\ttransfer(from, to, value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address\n\t *\n\t * Allows `spender` to spend no more than `value` tokens in your behalf\n\t *\n\t * @param spender The address authorized to spend\n\t * @param value the max amount they can spend\n\t */\n\tfunction approve(address spender, uint value) public returns (bool success) {\n\t\tallowance[msg.sender][spender] = value;\n\t\temit Approval(msg.sender, spender, value);\n\t\treturn true;\n\t}\n}",
  "bytecode": "60806040526012600260006101000a81548160ff021916908360ff1602179055503480156200002d57600080fd5b5060405162000de438038062000de4833981018060405260608110156200005357600080fd5b810190808051906020019092919080516401000000008111156200007657600080fd5b828101905060208101848111156200008d57600080fd5b8151856001820283011164010000000082111715620000ab57600080fd5b50509291906020018051640100000000811115620000c857600080fd5b82810190506020810184811115620000df57600080fd5b8151856001820283011164010000000082111715620000fd57600080fd5b505092919050505082600381905550600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600090805190602001906200016a9291906200018d565b508060019080519060200190620001839291906200018d565b505050506200023c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001d057805160ff191683800117855562000201565b8280016001018555821562000201579182015b8281111562000200578251825591602001919060010190620001e3565b5b50905062000210919062000214565b5090565b6200023991905b80821115620002355760008160009055506001016200021b565b5090565b90565b610b98806200024c6000396000f3fe608060405260043610610093576000357c01000000000000000000000000000000000000000000000000000000009004806306fdde0314610098578063095ea7b31461012857806318160ddd1461019b57806323b872dd146101c6578063313ce5671461025957806370a082311461028a57806395d89b41146102ef578063a9059cbb1461037f578063dd62ed3e146103f2575b600080fd5b3480156100a457600080fd5b506100ad610477565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100ed5780820151818401526020810190506100d2565b50505050905090810190601f16801561011a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013457600080fd5b506101816004803603604081101561014b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610515565b604051808215151515815260200191505060405180910390f35b3480156101a757600080fd5b506101b0610607565b6040518082815260200191505060405180910390f35b3480156101d257600080fd5b5061023f600480360360608110156101e957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061060d565b604051808215151515815260200191505060405180910390f35b34801561026557600080fd5b5061026e61073a565b604051808260ff1660ff16815260200191505060405180910390f35b34801561029657600080fd5b506102d9600480360360208110156102ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061074d565b6040518082815260200191505060405180910390f35b3480156102fb57600080fd5b50610304610765565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610344578082015181840152602081019050610329565b50505050905090810190601f1680156103715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561038b57600080fd5b506103d8600480360360408110156103a257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610803565b604051808215151515815260200191505060405180910390f35b3480156103fe57600080fd5b506104616004803603604081101561041557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061081a565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561050d5780601f106104e25761010080835404028352916020019161050d565b820191906000526020600020905b8154815290600101906020018083116104f057829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60035481565b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561069a57600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555061072f84848461083f565b600190509392505050565b600260009054906101000a900460ff1681565b60046020528060005260406000206000915090505481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107fb5780601f106107d0576101008083540402835291602001916107fb565b820191906000526020600020905b8154815290600101906020018083116107de57829003601f168201915b505050505081565b600061081033848461083f565b6001905092915050565b6005602052816000526040600020602052806000526040600020600091509150505481565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561087b57600080fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156108c957600080fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111151561095757600080fd5b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a380600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401141515610b6657fe5b5050505056fea165627a7a72305820e703b288ad235171c9015d34b3490b27dfc0e6156e26d89e6c84fc76e4b3a152002900000000000000000000000000000000000000000052b7d2dcc80cd2e4000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001144554f204e6574776f726b20546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000344554f0000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000052b7d2dcc80cd2e4000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001144554f204e6574776f726b20546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000344554f0000000000000000000000000000000000000000000000000000000000"
}