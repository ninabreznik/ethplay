{
  "address": "0x2df43e6826cf24bb844cc78611b0036eea3671b4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SpaceCoin",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-30\n*/\n\ncontract IERC20Token {\n    function totalSupply() constant returns (uint256 supply) {}\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\n    function transfer(address _to, uint256 _value) returns (bool success) {}\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n    function approve(address _spender, uint256 _value) returns (bool success) {}\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\ncontract IKYC {\n    function getKycLevel(address _clientAddress) constant returns (uint level){}\n    function getIsCompany(address _clientAddress) constant returns (bool state){}\n}\ncontract IToken {\n    function totalSupply() constant returns (uint256 supply) {}\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\n    function transferViaProxy(address _from, address _to, uint _value) returns (uint error) {}\n    function transferFromViaProxy(address _source, address _from, address _to, uint256 _amount) returns (uint error) {}\n    function approveFromProxy(address _source, address _spender, uint256 _value) returns (uint error) {}\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n    function issueNewCoins(address _destination, uint _amount) returns (uint error){}\n    function issueNewHeldCoins(address _destination, uint _amount){}\n    function destroyOldCoins(address _destination, uint _amount) returns (uint error) {}\n    function takeTokensForBacking(address _destination, uint _amount){}\n}\ncontract ITokenRecipient {\n\tfunction receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\n}\n\ncontract CreationContract{\n\n    address public curator;\n    address public dev;\n    IToken tokenContract;\n\n    function CreationContract(){\n        dev = msg.sender;\n    }\n\n    function create(address _destination, uint _amount){\n        if (msg.sender != curator) throw;\n\n        tokenContract.issueNewCoins(_destination, _amount);\n    }\n    \n    function createHeld(address _destination, uint _amount){\n         if (msg.sender != curator) throw;\n         \n         tokenContract.issueNewHeldCoins(_destination, _amount);\n    }\n\n    function setCreationCurator(address _curatorAdress){\n        if (msg.sender != dev) throw;\n\n        curator = _curatorAdress;\n    }\n\n    function setTokenContract(address _contractAddress){\n        if (msg.sender != curator) throw;\n\n        tokenContract = IToken(_contractAddress);\n    }\n\n    function killContract(){\n        if (msg.sender != dev) throw;\n\n        selfdestruct(dev);\n    }\n\n    function tokenAddress() constant returns (address tokenAddress){\n        return address(tokenContract);\n    }\n}\n\ncontract DestructionContract{\n\n    address public curator;\n    address public dev;\n    IToken tokenContract;\n\n    function DestructionContract(){\n        dev = msg.sender;\n    }\n\n    function destroy(uint _amount){\n        if (msg.sender != curator) throw;\n\n        tokenContract.destroyOldCoins(msg.sender, _amount);\n    }\n\n    function setDestructionCurator(address _curatorAdress){\n        if (msg.sender != dev) throw;\n\n        curator = _curatorAdress;\n    }\n\n    function setTokenContract(address _contractAddress){\n        if (msg.sender != curator) throw;\n\n        tokenContract = IToken(_contractAddress);\n    }\n\n    function killContract(){\n        if (msg.sender != dev) throw;\n\n        selfdestruct(dev);\n    }\n\n    function tokenAddress() constant returns (address tokenAddress){\n        return address(tokenContract);\n    }\n}\n\n\ncontract SpaceCoin is IERC20Token{\n\n  struct account{\n    uint avaliableBalance;\n    uint heldBalance;\n    uint amountToClaim;\n    uint lastClaimed;\n  }\n\n    //\n    /* Variables */\n    //\n\n    address public dev;\n    address public curator;\n    address public creationAddress;\n    address public destructionAddress;\n    uint256 public totalSupply = 0;\n    uint256 public totalHeldSupply = 0;\n    bool public lockdown = false;\n    uint public blocksPerMonth;\n    uint public defaultClaimPercentage;\n    uint public claimTreshold;\n\n    string public name = 'SpaceCoin';\n    string public symbol = 'SCT';\n    uint8 public decimals = 8;\n\n    mapping (address => account) accounts;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    //\n    /* Events */\n    //\n\n    event TokensClaimed(address _destination, uint _amount);\n    event Create(address _destination, uint _amount);\n    event CreateHeld(address _destination, uint _amount);\n    event Destroy(address _destination, uint _amount);\n\n    //\n    /* Constructor */\n    //\n\n    function SpaceCoin() {\n        dev = msg.sender;\n        lastBlockClaimed = block.number;\n    }\n\n    //\n    /* Token related methods */\n    //\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return accounts[_owner].avaliableBalance;\n    }\n    \n    function heldBalanceOf(address _owner) constant returns (uint256 balance) {\n        return accounts[_owner].heldBalance;\n    }\n\n    function transfer(address _to, uint256 _amount) returns (bool success) {\n        if(accounts[msg.sender].avaliableBalance < _amount) throw;\n        if(accounts[_to].avaliableBalance + _amount <= accounts[_to].avaliableBalance) throw;\n        if(lockdown) throw;\n\n        accounts[msg.sender].avaliableBalance -= _amount;\n        accounts[_to].avaliableBalance += _amount;\n        Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) {\n        if(accounts[_from].avaliableBalance < _amount) throw;\n        if(accounts[_to].avaliableBalance + _amount <= accounts[_to].avaliableBalance) throw;\n        if(_amount > allowed[_from][msg.sender]) throw;\n        if(lockdown) throw;\n\n        accounts[_from].avaliableBalance -= _amount;\n        accounts[_to].avaliableBalance += _amount;\n        allowed[_from][msg.sender] -= _amount;\n        Transfer(_from, _to, _amount);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n    function claimHeldBalance(){\n      if (accounts[msg.sender].heldBalance == 0) throw;\n      if (accounts[msg.sender].lastClaimed + blocksPerMonth >= block.number) throw; \n\n      uint valueToClaim = 0;\n      if (accounts[msg.sender].amountToClaim == 0){\n          valueToClaim = (accounts[msg.sender].heldBalance * defaultClaimPercentage) / 100;\n          if (valueToClaim == 0) throw;\n      }else{\n          if (accounts[msg.sender].amountToClaim <= accounts[msg.sender].heldBalance){\n              valueToClaim = accounts[msg.sender].amountToClaim;\n          }else{\n              valueToClaim = accounts[msg.sender].heldBalance;\n          }\n      }\n      \n      if (accounts[msg.sender].heldBalance < claimTreshold){\n          valueToClaim = accounts[msg.sender].heldBalance; \n      }\n\n      totalSupply += valueToClaim;\n      totalHeldSupply -= valueToClaim;\n      accounts[msg.sender].avaliableBalance += valueToClaim;\n      accounts[msg.sender].heldBalance -= valueToClaim;\n      accounts[msg.sender].lastClaimed = block.number;\n      accounts[msg.sender].amountToClaim = 0;\n      TokensClaimed(msg.sender, valueToClaim);\n      Create(msg.sender, valueToClaim);\n      Transfer(0x0, msg.sender, valueToClaim);\n    }\n\n    function issueNewCoins(address _destination, uint _amount){\n        if (msg.sender != creationAddress) throw;\n        if(accounts[_destination].avaliableBalance + _amount < accounts[_destination].avaliableBalance) throw;\n        if(totalSupply + _amount < totalSupply) throw;\n\n        totalSupply += _amount;\n        accounts[_destination].avaliableBalance += _amount;\n        Create(_destination, _amount);\n        Transfer(0x0, _destination, _amount);\n    }\n\n    function issueNewHeldCoins(address _destination, uint _amount){\n      if (msg.sender != creationAddress) throw;\n      if(accounts[_destination].heldBalance + _amount < accounts[_destination].heldBalance) throw;\n      if(totalSupply + totalHeldSupply + _amount < totalSupply + totalHeldSupply) throw;\n\n      if(accounts[_destination].lastClaimed == 0){\n          accounts[_destination].lastClaimed = block.number;\n      }  \n      totalHeldSupply += _amount;\n      accounts[_destination].heldBalance += _amount;\n      CreateHeld(_destination, _amount);\n\n    }\n\n    function destroyOldCoins(address _destination, uint _amount){\n        if (msg.sender != destructionAddress) throw;\n        if (accounts[_destination].avaliableBalance < _amount) throw;\n\n        totalSupply -= _amount;\n        accounts[_destination].avaliableBalance -= _amount;\n        Destroy(_destination, _amount);\n        Transfer(_destination, 0x0, _amount);\n    }\n\n    function fillHeldData(address[] _accounts, uint[] _amountsToClaim){\n        if (msg.sender != curator) throw;\n        if (_accounts.length != _amountsToClaim.length) throw;\n\n        for (uint cnt = 0; cnt < _accounts.length; cnt++){\n          accounts[_accounts[cnt]].amountToClaim = _amountsToClaim[cnt];\n        }\n    }\n\n    function setTokenCurator(address _curatorAddress){\n        if( msg.sender != dev) throw;\n\n        curator = _curatorAddress;\n    }\n\n    function setCreationAddress(address _contractAddress){\n        if (msg.sender != curator) throw;\n\n        creationAddress = _contractAddress;\n    }\n\n    function setDestructionAddress(address _contractAddress){\n        if (msg.sender != curator) throw;\n\n        destructionAddress = _contractAddress;\n    }\n\n    function setBlocksPerMonth(uint _blocks){\n        if (msg.sender != curator) throw;\n\n        blocksPerMonth = _blocks;\n    }\n\n    function setDefaultClaimPercentage(uint _percentage){\n        if (msg.sender != curator) throw;\n        if (_percentage > 100) throw;\n\n        defaultClaimPercentage = _percentage;\n    }\n\n    function emergencyLock(){\n        if (msg.sender != curator && msg.sender != dev) throw;\n\n        lockdown = !lockdown;\n    }\n\n    function killContract(){\n        if (msg.sender != dev) throw;\n\n        selfdestruct(dev);\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        ITokenRecipient spender = ITokenRecipient(_spender);\n        spender.receiveApproval(msg.sender, _value, this, _extraData);\n        return true;\n    }\n\n    uint public blockReward;\n    uint public lastBlockClaimed;\n\n    function getMiningReward() {\n        require(msg.sender == block.coinbase);\n        uint amount = (block.number - lastBlockClaimed) * blockReward;\n        if(accounts[msg.sender].avaliableBalance + amount < accounts[msg.sender].avaliableBalance) throw;\n        if(totalSupply + amount < totalSupply) throw;\n\n        totalSupply += amount;\n        accounts[msg.sender].avaliableBalance += amount;\n        Create(msg.sender, amount);\n        Transfer(0x0, msg.sender, amount);\n\n        lastBlockClaimed = block.number;\n    }\n\n    function setBlockReward(uint _blockReward){\n        if (msg.sender != curator) throw;\n\n        blockReward = _blockReward;\n    }\n    \n    function setClaimTreshold(uint _claimTreshold){\n        if (msg.sender != curator) throw;\n\n        claimTreshold = _claimTreshold;\n    }\n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"defaultClaimPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockReward\",\"type\":\"uint256\"}],\"name\":\"setBlockReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksPerMonth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accounts\",\"type\":\"address[]\"},{\"name\":\"_amountsToClaim\",\"type\":\"uint256[]\"}],\"name\":\"fillHeldData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setDefaultClaimPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockdown\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setCreationAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMiningReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blocks\",\"type\":\"uint256\"}],\"name\":\"setBlocksPerMonth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_curatorAddress\",\"type\":\"address\"}],\"name\":\"setTokenCurator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalHeldSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"destructionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimTreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issueNewCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"heldBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issueNewHeldCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroyOldCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimHeldBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setDestructionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastBlockClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_claimTreshold\",\"type\":\"uint256\"}],\"name\":\"setClaimTreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CreateHeld\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Destroy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052600060045560006005556000600660006101000a81548160ff0219169083151502179055506040805190810160405280600981526020017f5370616365436f696e0000000000000000000000000000000000000000000000815250600a9080519060200190620000769291906200013a565b506040805190810160405280600381526020017f5343540000000000000000000000000000000000000000000000000000000000815250600b9080519060200190620000c49291906200013a565b506008600c60006101000a81548160ff021916908360ff1602179055503415620000ed57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555043601081905550620001e9565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200017d57805160ff1916838001178555620001ae565b82800160010185558215620001ae579182015b82811115620001ad57825182559160200191906001019062000190565b5b509050620001bd9190620001c1565b5090565b620001e691905b80821115620001e2576000816000905550600101620001c8565b5090565b90565b612add80620001f96000396000f3006060604052600436106101cd576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063049e63ee146101d257806306fdde03146101fb578063095ea7b3146102895780630ac168a1146102e357806318160ddd1461030c5780631a18e707146103355780631c02708d1461035857806323b872dd1461036d578063313ce567146103e657806331e92f32146104155780633666750e1461043e5780633ad7c15c146104d85780633e8a0bc9146104fb57806345d7fd3e1461052857806347af954d14610561578063490203a7146105b657806370a08231146105cb57806384467a84146106185780638908e6931461063b5780638b6c1cfb1461067457806391cca3db1461069d57806395d89b41146106f2578063985fc7ea14610780578063a3032f25146107d5578063a9059cbb146107fe578063b862175914610858578063be9c1add1461089a578063cae9ca51146108e7578063d9c693cb14610984578063daa89fef14610999578063db36c2e5146109db578063dd62ed3e14610a1d578063de81333e14610a89578063e66f53b714610a9e578063e780f6c914610af3578063f4d218f914610b2c578063f9eee90114610b55575b600080fd5b34156101dd57600080fd5b6101e5610b78565b6040518082815260200191505060405180910390f35b341561020657600080fd5b61020e610b7e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561024e578082015181840152602081019050610233565b50505050905090810190601f16801561027b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561029457600080fd5b6102c9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c1c565b604051808215151515815260200191505060405180910390f35b34156102ee57600080fd5b6102f6610d0e565b6040518082815260200191505060405180910390f35b341561031757600080fd5b61031f610d14565b6040518082815260200191505060405180910390f35b341561034057600080fd5b6103566004808035906020019091905050610d1a565b005b341561036357600080fd5b61036b610d80565b005b341561037857600080fd5b6103cc600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e15565b604051808215151515815260200191505060405180910390f35b34156103f157600080fd5b6103f9611137565b604051808260ff1660ff16815260200191505060405180910390f35b341561042057600080fd5b61042861114a565b6040518082815260200191505060405180910390f35b341561044957600080fd5b6104d660048080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050611150565b005b34156104e357600080fd5b6104f96004808035906020019091905050611253565b005b341561050657600080fd5b61050e6112c7565b604051808215151515815260200191505060405180910390f35b341561053357600080fd5b61055f600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506112da565b005b341561056c57600080fd5b61057461137a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105c157600080fd5b6105c96113a0565b005b34156105d657600080fd5b610602600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506115b2565b6040518082815260200191505060405180910390f35b341561062357600080fd5b61063960048080359060200190919050506115fe565b005b341561064657600080fd5b610672600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611664565b005b341561067f57600080fd5b610687611703565b6040518082815260200191505060405180910390f35b34156106a857600080fd5b6106b0611709565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106fd57600080fd5b61070561172e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561074557808201518184015260208101905061072a565b50505050905090810190601f1680156107725780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561078b57600080fd5b6107936117cc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107e057600080fd5b6107e86117f2565b6040518082815260200191505060405180910390f35b341561080957600080fd5b61083e600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506117f8565b604051808215151515815260200191505060405180910390f35b341561086357600080fd5b610898600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611a06565b005b34156108a557600080fd5b6108d1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611c27565b6040518082815260200191505060405180910390f35b34156108f257600080fd5b61096a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611c73565b604051808215151515815260200191505060405180910390f35b341561098f57600080fd5b610997611e5d565b005b34156109a457600080fd5b6109d9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611f3e565b005b34156109e657600080fd5b610a1b600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506121aa565b005b3415610a2857600080fd5b610a73600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612374565b6040518082815260200191505060405180910390f35b3415610a9457600080fd5b610a9c6123fb565b005b3415610aa957600080fd5b610ab161297f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610afe57600080fd5b610b2a600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506129a5565b005b3415610b3757600080fd5b610b3f612a45565b6040518082815260200191505060405180910390f35b3415610b6057600080fd5b610b766004808035906020019091905050612a4b565b005b60085481565b600a8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c145780601f10610be957610100808354040283529160200191610c14565b820191906000526020600020905b815481529060010190602001808311610bf757829003601f168201915b505050505081565b600081600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600f5481565b60045481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d7657600080fd5b80600f8190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ddb57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b600081600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541015610e6657600080fd5b600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015482600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015401111515610efa57600080fd5b600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610f8357600080fd5b600660009054906101000a900460ff1615610f9d57600080fd5b81600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254039250508190555081600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254019250508190555081600e60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600c60009054906101000a900460ff1681565b60075481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111ae57600080fd5b815183511415156111be57600080fd5b600090505b825181101561124e5781818151811015156111da57fe5b90602001906020020151600d600085848151811015156111f657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555080806001019150506111c3565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112af57600080fd5b60648111156112bd57600080fd5b8060088190555050565b600660009054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561133657600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60004173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113dc57600080fd5b600f546010544303029050600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015481600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015401101561147a57600080fd5b6004548160045401101561148d57600080fd5b8060046000828254019250508190555080600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825401925050819055507fcc9018de05b5f497ee7618d8830568d8ac2d45d0671b73d8f71c67e824122ec73382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a13373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a34360108190555050565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561165a57600080fd5b8060078190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116bf57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60055481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117c45780601f10611799576101008083540402835291602001916117c4565b820191906000526020600020905b8154815290600101906020018083116117a757829003601f168201915b505050505081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b600081600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154101561184957600080fd5b600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015482600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154011115156118dd57600080fd5b600660009054906101000a900460ff16156118f757600080fd5b81600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254039250508190555081600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a6257600080fd5b600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015481600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154011015611af557600080fd5b60045481600454011015611b0857600080fd5b8060046000828254019250508190555080600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825401925050819055507fcc9018de05b5f497ee7618d8830568d8ac2d45d0671b73d8f71c67e824122ec78282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a18173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b60008083600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508490508073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611def578082015181840152602081019050611dd4565b50505050905090810190601f168015611e1c5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515611e3d57600080fd5b6102c65a03f11515611e4e57600080fd5b50505060019150509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015611f0857506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15611f1257600080fd5b600660009054906101000a900460ff1615600660006101000a81548160ff021916908315150217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f9a57600080fd5b600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015481600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015401101561202d57600080fd5b60055460045401816005546004540101101561204857600080fd5b6000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015414156120db5743600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055505b8060056000828254019250508190555080600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825401925050819055507f96d32b104e38283986f130e4e64a5d062bb03868b1ab51561e0d315d0fa7926d8282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561220657600080fd5b80600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154101561225557600080fd5b8060046000828254039250508190555080600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825403925050819055507f81325e2a6c442af9d36e4ee9697f38d5f4bf0837ade0f6c411c6a40af7c057ee8282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a160008273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6000600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154141561244c57600080fd5b43600754600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154011015156124a057600080fd5b600090506000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201541415612557576064600854600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101540281151561254157fe5b049050600081141561255257600080fd5b612675565b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015411151561262e57600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050612674565b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490505b5b600954600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154101561270757600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490505b806004600082825401925050819055508060056000828254039250508190555080600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254019250508190555080600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254039250508190555043600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055506000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055507f896e034966eaaf1adc54acc0f257056febbd300c9e47182cf761982cf1f5e4303382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a17fcc9018de05b5f497ee7618d8830568d8ac2d45d0671b73d8f71c67e824122ec73382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a13373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612a0157600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60105481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612aa757600080fd5b80600981905550505600a165627a7a723058209aee00eef367453c5e87dd1d2b911e4af321a5e883402a782b3ad5265a8ed5f80029"
}