{
  "address": "0x67601d7a7cbbd77368785122c508503f168b1daa",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CatFarmer",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-21\n*/\n\npragma solidity ^0.4.18; // solhint-disable-line\n\n\n\ncontract CatFarmer{\n    uint256 public EGGS_TO_HATCH_1Cat=86400;//for final version should be seconds in a day\n    uint256 public STARTING_CAT=300;\n    uint256 PSN=10000;\n    uint256 PSNH=5000;\n    bool public initialized=false;\n    address public ceoAddress;\n    mapping (address => uint256) public hatcheryCat;\n    mapping (address => uint256) public claimedEggs;\n    mapping (address => uint256) public lastHatch;\n    mapping (address => address) public referrals;\n    uint256 public marketEggs;\n    function CatFarmer() public{\n        ceoAddress=msg.sender;\n    }\n    function hatchEggs(address ref) public{\n        require(initialized);\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\n            referrals[msg.sender]=ref;\n        }\n        uint256 eggsUsed=getMyEggs();\n        uint256 newCat=SafeMath.div(eggsUsed,EGGS_TO_HATCH_1Cat);\n        hatcheryCat[msg.sender]=SafeMath.add(hatcheryCat[msg.sender],newCat);\n        claimedEggs[msg.sender]=0;\n        lastHatch[msg.sender]=now;\n        \n        //send referral eggs\n        claimedEggs[referrals[msg.sender]]=SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,5));\n        \n        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,10));\n    }\n    function sellEggs() public{\n        require(initialized);\n        uint256 hasEggs=getMyEggs();\n        uint256 eggValue=calculateEggSell(hasEggs);\n        uint256 fee=devFee(eggValue);\n        claimedEggs[msg.sender]=0;\n        lastHatch[msg.sender]=now;\n        marketEggs=SafeMath.add(marketEggs,hasEggs);\n        ceoAddress.transfer(fee);\n        msg.sender.transfer(SafeMath.sub(eggValue,fee));\n    }\n    function buyEggs() public payable{\n        require(initialized);\n        uint256 eggsBought=calculateEggBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\n        ceoAddress.transfer(devFee(msg.value));\n        claimedEggs[msg.sender]=SafeMath.add(claimedEggs[msg.sender],eggsBought);\n    }\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n    }\n    function calculateEggSell(uint256 eggs) public view returns(uint256){\n        return calculateTrade(eggs,marketEggs,this.balance);\n    }\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n        return calculateTrade(eth,contractBalance,marketEggs);\n    }\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\n        return calculateEggBuy(eth,this.balance);\n    }\n    function devFee(uint256 amount) public view returns(uint256){\n        return SafeMath.div(SafeMath.mul(amount,4),100);\n    }\n    function seedMarket(uint256 eggs) public payable{\n        require(marketEggs==0);\n        initialized=true;\n        marketEggs=eggs;\n    }\n    function getFreeCat() public{\n        require(initialized);\n        require(hatcheryCat[msg.sender]==0);\n        lastHatch[msg.sender]=now;\n        hatcheryCat[msg.sender]=STARTING_CAT;\n    }\n    function getBalance() public view returns(uint256){\n        return this.balance;\n    }\n    function getMyCat() public view returns(uint256){\n        return hatcheryCat[msg.sender];\n    }\n    function getMyEggs() public view returns(uint256){\n        return SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender));\n    }\n    function getEggsSinceLastHatch(address adr) public view returns(uint256){\n        uint256 secondsPassed=min(EGGS_TO_HATCH_1Cat,SafeMath.sub(now,lastHatch[adr]));\n        return SafeMath.mul(secondsPassed,hatcheryCat[adr]);\n    }\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": "60806040526201518060005561012c6001556127106002556113886003556000600460006101000a81548160ff02191690831515021790555034801561004457600080fd5b5033600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506112f1806100956000396000f300608060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a0f81681461013857806312065fe01461018f578063158ef93e146101ba578063229824c4146101e957806326fd84221461023e5780632e9392bb1461028957806330347537146102b45780633955f0fe146102df5780633b653755146102f65780633bc0461a146103165780633ec862a81461035757806343ce74221461039a578063452766a5146103c5578063467ece79146103f05780634f74acfe1461044757806372670361146104515780637e56fde5146104a85780638e316327146104e95780639ca423b31461052a578063a87e8aad146105ad578063b066fb34146105d8578063d7c8843b1461062f578063fc337f5a14610686575b600080fd5b34801561014457600080fd5b5061014d61069d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561019b57600080fd5b506101a46106c3565b6040518082815260200191505060405180910390f35b3480156101c657600080fd5b506101cf6106e2565b604051808215151515815260200191505060405180910390f35b3480156101f557600080fd5b506102286004803603810190808035906020019092919080359060200190929190803590602001909291905050506106f5565b6040518082815260200191505060405180910390f35b34801561024a57600080fd5b506102736004803603810190808035906020019092919080359060200190929190505050610748565b6040518082815260200191505060405180910390f35b34801561029557600080fd5b5061029e61075f565b6040518082815260200191505060405180910390f35b3480156102c057600080fd5b506102c9610765565b6040518082815260200191505060405180910390f35b3480156102eb57600080fd5b506102f461076b565b005b61031460048036038101908080359060200190929190505050610904565b005b34801561032257600080fd5b506103416004803603810190808035906020019092919050505061093a565b6040518082815260200191505060405180910390f35b34801561036357600080fd5b50610398600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610958565b005b3480156103a657600080fd5b506103af610dac565b6040518082815260200191505060405180910390f35b3480156103d157600080fd5b506103da610e04565b6040518082815260200191505060405180910390f35b3480156103fc57600080fd5b50610431600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e0a565b6040518082815260200191505060405180910390f35b61044f610e22565b005b34801561045d57600080fd5b50610492600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f7f565b6040518082815260200191505060405180910390f35b3480156104b457600080fd5b506104d360048036038101908080359060200190929190505050610f97565b6040518082815260200191505060405180910390f35b3480156104f557600080fd5b5061051460048036038101908080359060200190929190505050610fc1565b6040518082815260200191505060405180910390f35b34801561053657600080fd5b5061056b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fee565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105b957600080fd5b506105c2611021565b6040518082815260200191505060405180910390f35b3480156105e457600080fd5b50610619600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611068565b6040518082815260200191505060405180910390f35b34801561063b57600080fd5b50610670600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611080565b6040518082815260200191505060405180910390f35b34801561069257600080fd5b5061069b61112a565b005b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b600460009054906101000a900460ff1681565b600061073f6107066002548461121f565b61073a60035461073561072f61071e6002548a61121f565b61072a6003548c61121f565b61125a565b89611278565b61125a565b611278565b90509392505050565b600061075783836009546106f5565b905092915050565b60095481565b60015481565b6000806000600460009054906101000a900460ff16151561078b57600080fd5b610793610dac565b925061079e83610fc1565b91506107a98261093a565b90506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108406009548461125a565b600981905550600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156108ae573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff166108fc6108d38484611293565b9081150290604051600060405180830381858888f193505050501580156108fe573d6000803e3d6000fd5b50505050565b600060095414151561091557600080fd5b6001600460006101000a81548160ff0219169083151502179055508060098190555050565b600061095161094a83600461121f565b6064611278565b9050919050565b600080600460009054906101000a900460ff16151561097657600080fd5b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015610a8657503373ffffffffffffffffffffffffffffffffffffffff16600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15610b0a5782600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b610b12610dac565b9150610b2082600054611278565b9050610b6b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261125a565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ce960066000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ce4846005611278565b61125a565b60066000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610da1600954610d9c84600a611278565b61125a565b600981905550505050565b6000610dff600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dfa33611080565b61125a565b905090565b60005481565b60076020528060005260406000206000915090505481565b6000600460009054906101000a900460ff161515610e3f57600080fd5b610e6934610e643073ffffffffffffffffffffffffffffffffffffffff163134611293565b610748565b9050610e7d81610e788361093a565b611293565b9050600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc610ec43461093a565b9081150290604051600060405180830381858888f19350505050158015610eef573d6000803e3d6000fd5b50610f39600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261125a565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60066020528060005260406000206000915090505481565b6000610fba823073ffffffffffffffffffffffffffffffffffffffff1631610748565b9050919050565b6000610fe7826009543073ffffffffffffffffffffffffffffffffffffffff16316106f5565b9050919050565b60086020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60056020528060005260406000206000915090505481565b6000806110d76000546110d242600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611293565b6112ac565b905061112281600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461121f565b915050919050565b600460009054906101000a900460ff16151561114557600080fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561119357600080fd5b42600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600154600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60008060008414156112345760009150611253565b828402905082848281151561124557fe5b0414151561124f57fe5b8091505b5092915050565b600080828401905083811015151561126e57fe5b8091505092915050565b600080828481151561128657fe5b0490508091505092915050565b60008282111515156112a157fe5b818303905092915050565b60008183106112bb57816112bd565b825b9050929150505600a165627a7a723058200b859040eb822e4b51c46e615b3a7a51547f90f4f191011858c8b2d5a4a4519d0029"
}