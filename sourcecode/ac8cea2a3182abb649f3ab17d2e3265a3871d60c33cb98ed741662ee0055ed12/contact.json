{
  "address": "0x2737e022e8bf733b05fa0706b0e80003a576ccb4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenValueRelayer",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-02\n*/\n\npragma solidity ^0.4.11;\n\n/* The authentication manager details user accounts that have access to certain priviledges and keeps a permanent ledger of who has and has had these rights. */\ncontract AuthenticationManager {\n   \n    /* Map addresses to admins */\n    mapping (address => bool) adminAddresses;\n\n    /* Map addresses to account readers */\n    mapping (address => bool) accountReaderAddresses;\n\n    /* Map addresses to account minters */\n    mapping (address => bool) accountMinterAddresses;\n\n    /* Details of all admins that have ever existed */\n    address[] adminAudit;\n\n    /* Details of all account readers that have ever existed */\n    address[] accountReaderAudit;\n\n    /* Details of all account minters that have ever existed */\n    address[] accountMinterAudit;\n\n    /* Fired whenever an admin is added to the contract. */\n    event AdminAdded(address addedBy, address admin);\n\n    /* Fired whenever an admin is removed from the contract. */\n    event AdminRemoved(address removedBy, address admin);\n\n    /* Fired whenever an account-reader contract is added. */\n    event AccountReaderAdded(address addedBy, address account);\n\n    /* Fired whenever an account-reader contract is removed. */\n    event AccountReaderRemoved(address removedBy, address account);\n\n    /* Fired whenever an account-minter contract is added. */\n    event AccountMinterAdded(address addedBy, address account);\n\n    /* Fired whenever an account-minter contract is removed. */\n    event AccountMinterRemoved(address removedBy, address account);\n\n    /* When this contract is first setup we use the creator as the first admin */    \n    function AuthenticationManager() {\n        /* Set the first admin to be the person creating the contract */\n        adminAddresses[msg.sender] = true;\n        AdminAdded(0, msg.sender);\n        adminAudit.length++;\n        adminAudit[adminAudit.length - 1] = msg.sender;\n    }\n\n    /* Gets whether or not the specified address is currently an admin */\n    function isCurrentAdmin(address _address) constant returns (bool) {\n        return adminAddresses[_address];\n    }\n\n    /* Gets whether or not the specified address has ever been an admin */\n    function isCurrentOrPastAdmin(address _address) constant returns (bool) {\n        for (uint256 i = 0; i < adminAudit.length; i++)\n            if (adminAudit[i] == _address)\n                return true;\n        return false;\n    }\n\n    /* Gets whether or not the specified address is currently an account reader */\n    function isCurrentAccountReader(address _address) constant returns (bool) {\n        return accountReaderAddresses[_address];\n    }\n\n    /* Gets whether or not the specified address has ever been an admin */\n    function isCurrentOrPastAccountReader(address _address) constant returns (bool) {\n        for (uint256 i = 0; i < accountReaderAudit.length; i++)\n            if (accountReaderAudit[i] == _address)\n                return true;\n        return false;\n    }\n\n    /* Gets whether or not the specified address is currently an account minter */\n    function isCurrentAccountMinter(address _address) constant returns (bool) {\n        return accountMinterAddresses[_address];\n    }\n\n    /* Gets whether or not the specified address has ever been an admin */\n    function isCurrentOrPastAccountMinter(address _address) constant returns (bool) {\n        for (uint256 i = 0; i < accountMinterAudit.length; i++)\n            if (accountMinterAudit[i] == _address)\n                return true;\n        return false;\n    }\n\n    /* Adds a user to our list of admins */\n    function addAdmin(address _address) {\n        /* Ensure we're an admin */\n        if (!isCurrentAdmin(msg.sender))\n            throw;\n\n        // Fail if this account is already admin\n        if (adminAddresses[_address])\n            throw;\n        \n        // Add the user\n        adminAddresses[_address] = true;\n        AdminAdded(msg.sender, _address);\n        adminAudit.length++;\n        adminAudit[adminAudit.length - 1] = _address;\n\n    }\n\n    /* Removes a user from our list of admins but keeps them in the history audit */\n    function removeAdmin(address _address) {\n        /* Ensure we're an admin */\n        if (!isCurrentAdmin(msg.sender))\n            throw;\n\n        /* Don't allow removal of self */\n        if (_address == msg.sender)\n            throw;\n\n        // Fail if this account is already non-admin\n        if (!adminAddresses[_address])\n            throw;\n\n        /* Remove this admin user */\n        adminAddresses[_address] = false;\n        AdminRemoved(msg.sender, _address);\n    }\n\n    /* Adds a user/contract to our list of account readers */\n    function addAccountReader(address _address) {\n        /* Ensure we're an admin */\n        if (!isCurrentAdmin(msg.sender))\n            throw;\n\n        // Fail if this account is already in the list\n        if (accountReaderAddresses[_address])\n            throw;\n        \n        // Add the account reader\n        accountReaderAddresses[_address] = true;\n        AccountReaderAdded(msg.sender, _address);\n        accountReaderAudit.length++;\n        accountReaderAudit[accountReaderAudit.length - 1] = _address;\n    }\n\n    /* Removes a user/contracts from our list of account readers but keeps them in the history audit */\n    function removeAccountReader(address _address) {\n        /* Ensure we're an admin */\n        if (!isCurrentAdmin(msg.sender))\n            throw;\n\n        // Fail if this account is already not in the list\n        if (!accountReaderAddresses[_address])\n            throw;\n\n        /* Remove this account reader */\n        accountReaderAddresses[_address] = false;\n        AccountReaderRemoved(msg.sender, _address);\n    }\n\n    /* Add a contract to our list of account minters */\n    function addAccountMinter(address _address) {\n        /* Ensure we're an admin */\n        if (!isCurrentAdmin(msg.sender))\n            throw;\n\n        // Fail if this account is already in the list\n        if (accountMinterAddresses[_address])\n            throw;\n        \n        // Add the minter\n        accountMinterAddresses[_address] = true;\n        AccountMinterAdded(msg.sender, _address);\n        accountMinterAudit.length++;\n        accountMinterAudit[accountMinterAudit.length - 1] = _address;\n    }\n\n    /* Removes a user/contracts from our list of account readers but keeps them in the history audit */\n    function removeAccountMinter(address _address) {\n        /* Ensure we're an admin */\n        if (!isCurrentAdmin(msg.sender))\n            throw;\n\n        // Fail if this account is already not in the list\n        if (!accountMinterAddresses[_address])\n            throw;\n\n        /* Remove this minter account */\n        accountMinterAddresses[_address] = false;\n        AccountMinterRemoved(msg.sender, _address);\n    }\n}\n\n/* The TokenValue Relayer contract is responsible to keep a track of token value that can be audited at a later time. */\ncontract TokenValueRelayer {\n\n    /* Represents the value of the token at a particular moment in time. */\n    struct TokenValueRepresentation {\n        uint256 value;\n        string currency;\n        uint256 timestamp;\n    }\n\n    /* An array defining all the token values in history. */\n    TokenValueRepresentation[] public values;\n    \n    /* Defines the admin contract we interface with for credentails. */\n    AuthenticationManager authenticationManager;\n\n    /* Fired when the token value is updated by an admin. */\n    event TokenValue(uint256 value, string currency, uint256 timestamp);\n\n    /* This modifier allows a method to only be called by current admins */\n    modifier adminOnly {\n        if (!authenticationManager.isCurrentAdmin(msg.sender)) throw;\n        _;\n    }\n\n    /* Create our contract and specify the location of other addresses. */\n    function TokenValueRelayer(address _authenticationManagerAddress) {\n        /* Setup access to our other contracts and validate their versions */\n        authenticationManager = AuthenticationManager(_authenticationManagerAddress);\n    }\n\n    /* Returns how many token values are present in the history. */\n    function tokenValueCount() constant returns (uint256 _count) {\n        _count = values.length;\n    }\n\n    /* Defines the current value of the token. */\n    function tokenValuePublish(uint256 _value, string _currency, uint256 _timestamp) adminOnly {\n        values.length++;\n        values[values.length - 1] = TokenValueRepresentation(_value, _currency,_timestamp);\n\n        /* Audit this */\n        TokenValue(_value, _currency, _timestamp);\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b60405160208061062b8339810160405280805190602001909190505080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506105af8061007c6000396000f300606060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680635e383d211461005c5780638312a88614610123578063ed8f02d01461014c575b600080fd5b341561006757600080fd5b61007d60048080359060200190919050506101bb565b60405180848152602001806020018381526020018281038252848181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156101125780601f106100e757610100808354040283529160200191610112565b820191906000526020600020905b8154815290600101906020018083116100f557829003601f168201915b505094505050505060405180910390f35b341561012e57600080fd5b6101366101f3565b6040518082815260200191505060405180910390f35b341561015757600080fd5b6101b9600480803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080359060200190919050506101ff565b005b6000818154811015156101ca57fe5b906000526020600020906003020160009150905080600001549080600101908060020154905083565b60008080549050905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15156102c457600080fd5b6102c65a03f115156102d557600080fd5b5050506040518051905015156102ea57600080fd5b600080548091906001016102fe9190610425565b5060606040519081016040528084815260200183815260200182815250600060016000805490500381548110151561033257fe5b9060005260206000209060030201600082015181600001556020820151816001019080519060200190610366929190610457565b50604082015181600201559050507f7a9274299776364a7b69eca2b9f2bfc3e93941e5df82385be606580bf86eca518383836040518084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156103e45780820151818401526020810190506103c9565b50505050905090810190601f1680156104115780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1505050565b8154818355818115116104525760030281600302836000526020600020918201910161045191906104d7565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061049857805160ff19168380011785556104c6565b828001600101855582156104c6579182015b828111156104c55782518255916020019190600101906104aa565b5b5090506104d39190610516565b5090565b61051391905b8082111561050f576000808201600090556001820160006104fe919061053b565b6002820160009055506003016104dd565b5090565b90565b61053891905b8082111561053457600081600090555060010161051c565b5090565b90565b50805460018160011615610100020316600290046000825580601f106105615750610580565b601f01602090049060005260206000209081019061057f9190610516565b5b505600a165627a7a72305820bc108d55d7024d0928b46e6bdeb8fad2f5ad4bd790e4c41abc026f1b61e8a572002900000000000000000000000064c14e2c286918803de6d965174ca6bc9048eafa",
  "constructorArguments": "00000000000000000000000064c14e2c286918803de6d965174ca6bc9048eafa"
}