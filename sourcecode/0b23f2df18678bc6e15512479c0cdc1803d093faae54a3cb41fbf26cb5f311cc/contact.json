{
  "address": "0x4c218ac55d53e9de63214f7dde5b4db2a5d48ed3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Akoya",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-22\n*/\n\npragma solidity ^0.5.7;\n\n/**\n * @title oyster.org | Bandwidth Bound Consensus\n * @dev https://github.com/brunoblock/oystermesh\n * @dev [emailÂ protected]\n * \n * 1 AKYE == 1 AKY\n * \n * ERC-20 Source: https://github.com/OpenZeppelin/openzeppelin-solidity/tree/master/contracts/token/ERC20\n * \n * @dev see https://eips.ethereum.org/EIPS/eip-20\n *\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    \n    event Burn(address indexed from, uint256 value);\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract Akoya is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 private _totalSupply;\n    \n    constructor() public {\n        name = \"Oyster Akoya\";\n        symbol = \"AKYE\";\n        decimals = 18;\n        _totalSupply = 10000000 * 10 ** uint256(decimals);\n        \n        // Assign entire AKYE supply to the contract creator\n        _balances[msg.sender] = _totalSupply;\n    }\n\n    /**\n     * @dev Total number of tokens in existence.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n    \n     /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance.\n     * @param from address The account whose tokens will be burned.\n     * @param value uint256 The amount of token to be burned.\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses.\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n        emit Burn(account, value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n    \n    // Rejects ETH deposits\n    function () external payable {\n        revert();\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060408051808201909152600c8082527f4f797374657220416b6f796100000000000000000000000000000000000000006020909201918252610055916002916100d1565b506040805180820190915260048082527f414b594500000000000000000000000000000000000000000000000000000000602090920191825261009a916003916100d1565b5060048054601260ff19909116179081905560ff16600a0a629896800260058190553360009081526020819052604090205561016c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011257805160ff191683800117855561013f565b8280016001018555821561013f579182015b8281111561013f578251825591602001919060010190610124565b5061014b92915061014f565b5090565b61016991905b8082111561014b5760008155600101610155565b90565b6108e68061017b6000396000f3fe6080604052600436106100c25760003560e01c806342966c681161007f57806395d89b411161005957806395d89b4114610304578063a457c2d714610319578063a9059cbb14610352578063dd62ed3e1461038b576100c2565b806342966c681461026c57806370a082311461029857806379cc6790146102cb576100c2565b806306fdde03146100c7578063095ea7b31461015157806318160ddd1461019e57806323b872dd146101c5578063313ce567146102085780633950935114610233575b600080fd5b3480156100d357600080fd5b506100dc6103c6565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015d57600080fd5b5061018a6004803603604081101561017457600080fd5b506001600160a01b038135169060200135610451565b604080519115158252519081900360200190f35b3480156101aa57600080fd5b506101b3610467565b60408051918252519081900360200190f35b3480156101d157600080fd5b5061018a600480360360608110156101e857600080fd5b506001600160a01b0381358116916020810135909116906040013561046d565b34801561021457600080fd5b5061021d6104c4565b6040805160ff9092168252519081900360200190f35b34801561023f57600080fd5b5061018a6004803603604081101561025657600080fd5b506001600160a01b0381351690602001356104cd565b34801561027857600080fd5b506102966004803603602081101561028f57600080fd5b5035610509565b005b3480156102a457600080fd5b506101b3600480360360208110156102bb57600080fd5b50356001600160a01b0316610516565b3480156102d757600080fd5b50610296600480360360408110156102ee57600080fd5b506001600160a01b038135169060200135610531565b34801561031057600080fd5b506100dc61053f565b34801561032557600080fd5b5061018a6004803603604081101561033c57600080fd5b506001600160a01b03813516906020013561059a565b34801561035e57600080fd5b5061018a6004803603604081101561037557600080fd5b506001600160a01b0381351690602001356105d6565b34801561039757600080fd5b506101b3600480360360408110156103ae57600080fd5b506001600160a01b03813581169160200135166105e3565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156104495780601f1061041e57610100808354040283529160200191610449565b820191906000526020600020905b81548152906001019060200180831161042c57829003601f168201915b505050505081565b600061045e33848461060e565b50600192915050565b60055490565b600061047a848484610696565b6001600160a01b0384166000908152600160209081526040808320338085529252909120546104ba9186916104b5908663ffffffff61076116565b61060e565b5060019392505050565b60045460ff1681565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161045e9185906104b5908663ffffffff61077616565b610513338261078f565b50565b6001600160a01b031660009081526020819052604090205490565b61053b8282610875565b5050565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104495780601f1061041e57610100808354040283529160200191610449565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161045e9185906104b5908663ffffffff61076116565b600061045e338484610696565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b03821661062157600080fd5b6001600160a01b03831661063457600080fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0382166106a957600080fd5b6001600160a01b0383166000908152602081905260409020546106d2908263ffffffff61076116565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610707908263ffffffff61077616565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282111561077057600080fd5b50900390565b60008282018381101561078857600080fd5b9392505050565b6001600160a01b0382166107a257600080fd5b6005546107b5908263ffffffff61076116565b6005556001600160a01b0382166000908152602081905260409020546107e1908263ffffffff61076116565b6001600160a01b038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a36040805182815290516001600160a01b038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b61087f828261078f565b6001600160a01b03821660009081526001602090815260408083203380855292529091205461053b9184916104b5908563ffffffff6107611656fea165627a7a72305820ab053c90e32961ea0764a24b66d635a72d2f01f43b18199e6a7c306f6a2485ad0029"
}