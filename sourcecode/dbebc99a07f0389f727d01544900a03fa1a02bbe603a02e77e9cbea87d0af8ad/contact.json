{
  "address": "0xc057e4a0b6ef2b53d6bdfe7300f7f36470600376",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SaveWon",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-23\n*/\n\npragma solidity ^0.5.1;\n\n/* SafeMath cal*/\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/* IERC20 inteface */\ninterface IERC20 {\n  function transfer(address to, uint256 value) external returns (bool);\n  function approve(address spender, uint256 value) external returns (bool);\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\n  function totalSupply() external view returns (uint256);\n  function balanceOf(address who) external view returns (uint256);\n  function allowance(address owner, address spender) external view returns (uint256);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/* Owner permission */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/* LockAble contract */\ncontract LockAble is Ownable {\n\n    mapping (address => bool) _walletLockAddr;\n\n    function setLockWallet(address lockAddress)  public onlyOwner returns (bool){\n        _walletLockAddr[lockAddress] = true;\n        return true;\n    }\n\n    function setReleaseWallet(address lockAddress)  public onlyOwner returns (bool){\n         _walletLockAddr[lockAddress] = false;\n        return true;\n    }\n\n    function isLockWallet(address lockAddress)  public view returns (bool){\n        require(lockAddress != address(0), \"Ownable: new owner is the zero address\");\n        return _walletLockAddr[lockAddress];\n    }\n}\n\ncontract PartnerShip is LockAble{\n\n   mapping (address => bool) _partnerAddr;\n\n   function addPartnership(address partner) public onlyOwner returns (bool){\n       require(partner != address(0), \"Ownable: new owner is the zero address\");\n\n       _partnerAddr[partner] = true;\n       return true;\n   }\n\n   function removePartnership(address partner) public onlyOwner returns (bool){\n      require(partner != address(0), \"Ownable: new owner is the zero address\");\n\n      _partnerAddr[partner] = false;\n\n      return true;\n   }\n\n   function isPartnership(address partner)  public view returns (bool){\n       return _partnerAddr[partner];\n   }\n\n\n}\n\ncontract SaveWon is IERC20, Ownable, PartnerShip {\n\n    using SafeMath for uint256;\n    string private _name;\n    string private _symbol;\n    uint256 private _totalSupply;\n    \n    uint8 private _decimals = 18;\n\n    mapping (address => uint256) internal _balances;\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n\n    event Burn(address indexed from, uint256 value);\n    \n    constructor() public {\n        _name = \"SAVEWON\";\n        _symbol = \"SW\";\n        uint256 INITIAL_SUPPLY = 50000000000 * (10 ** uint256(_decimals));\n        _totalSupply = _totalSupply.add(INITIAL_SUPPLY);\n        _balances[msg.sender] = _balances[msg.sender].add(INITIAL_SUPPLY);\n        \n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n    \n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n         require(_walletLockAddr[msg.sender] != true, \"Wallet Locked\");\n\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n         _transfer(from, to, value);\n         _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n         return true;\n    }\n\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n   function burn(uint256 value) public onlyOwner{\n        require(value != 0, \"Ownable: new owner is the zero address\");\n\n       _burn(msg.sender, value);\n   }\n\n   function _burn(address account, uint256 value) internal {\n       require(account != address(0));\n       require(value <= _balances[account]);\n\n       _totalSupply = _totalSupply.sub(value);\n       _balances[account] = _balances[account].sub(value);\n       emit Burn(account, value);\n       emit Transfer(account, address(0), value);\n   }\n\n   function multiTransfer(address[] memory toArray, uint256[] memory valueArray) public returns (bool){\n     if(isPartnership(msg.sender) || isOwner()){\n       uint256 i = 0;\n       while(i < toArray.length){\n         transfer( toArray[i],valueArray[i]);\n         i += 1;\n       }\n       return true;\n     } else {\n       return false;\n     }\n   }\n}",
  "bytecode": "60806040526012600660006101000a81548160ff021916908360ff1602179055503480156200002d57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36040805190810160405280600781526020017f53415645574f4e00000000000000000000000000000000000000000000000000815250600390805190602001906200013792919062000308565b506040805190810160405280600281526020017f5357000000000000000000000000000000000000000000000000000000000000815250600490805190602001906200018592919062000308565b506000600660009054906101000a900460ff1660ff16600a0a640ba43b7400029050620001cc81600554620002e66401000000000262001acf179091906401000000009004565b6005819055506200023481600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620002e66401000000000262001acf179091906401000000009004565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6005546040518082815260200191505060405180910390a350620003b7565b6000808284019050838110151515620002fe57600080fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200034b57805160ff19168380011785556200037c565b828001600101855582156200037c579182015b828111156200037b5782518255916020019190600101906200035e565b5b5090506200038b91906200038f565b5090565b620003b491905b80821115620003b057600081600090555060010162000396565b5090565b90565b611b1c80620003c76000396000f3fe60806040526004361061010c576000357c0100000000000000000000000000000000000000000000000000000000900480630613a8981461011157806306fdde031461017a578063095ea7b31461020a5780631703a44d1461027d57806318160ddd146102e65780631e89d5451461031157806323b872dd146104825780632695ddfb14610515578063313ce5671461057e57806342966c68146105af57806370a08231146105ea5780638da5cb5b1461064f5780638f32d59b146106a657806395d89b41146106d5578063a0323f8f14610765578063a674f5df146107ce578063a7d742ba14610837578063a9059cbb146108a0578063dd62ed3e14610913578063f2fde38b14610998575b600080fd5b34801561011d57600080fd5b506101606004803603602081101561013457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109e9565b604051808215151515815260200191505060405180910390f35b34801561018657600080fd5b5061018f610a5f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101cf5780820151818401526020810190506101b4565b50505050905090810190601f1680156101fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021657600080fd5b506102636004803603604081101561022d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b01565b604051808215151515815260200191505060405180910390f35b34801561028957600080fd5b506102cc600480360360208110156102a057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b18565b604051808215151515815260200191505060405180910390f35b3480156102f257600080fd5b506102fb610c59565b6040518082815260200191505060405180910390f35b34801561031d57600080fd5b506104686004803603604081101561033457600080fd5b810190808035906020019064010000000081111561035157600080fd5b82018360208201111561036357600080fd5b8035906020019184602083028401116401000000008311171561038557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156103e557600080fd5b8201836020820111156103f757600080fd5b8035906020019184602083028401116401000000008311171561041957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610c63565b604051808215151515815260200191505060405180910390f35b34801561048e57600080fd5b506104fb600480360360608110156104a557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cea565b604051808215151515815260200191505060405180910390f35b34801561052157600080fd5b506105646004803603602081101561053857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d9b565b604051808215151515815260200191505060405180910390f35b34801561058a57600080fd5b50610593610ebb565b604051808260ff1660ff16815260200191505060405180910390f35b3480156105bb57600080fd5b506105e8600480360360208110156105d257600080fd5b8101908080359060200190929190505050610ed2565b005b3480156105f657600080fd5b506106396004803603602081101561060d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f91565b6040518082815260200191505060405180910390f35b34801561065b57600080fd5b50610664610fda565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106b257600080fd5b506106bb611003565b604051808215151515815260200191505060405180910390f35b3480156106e157600080fd5b506106ea61105a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561072a57808201518184015260208101905061070f565b50505050905090810190601f1680156107575780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561077157600080fd5b506107b46004803603602081101561078857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110fc565b604051808215151515815260200191505060405180910390f35b3480156107da57600080fd5b5061081d600480360360208110156107f157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611152565b604051808215151515815260200191505060405180910390f35b34801561084357600080fd5b506108866004803603602081101561085a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111c7565b604051808215151515815260200191505060405180910390f35b3480156108ac57600080fd5b506108f9600480360360408110156108c357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611308565b604051808215151515815260200191505060405180910390f35b34801561091f57600080fd5b506109826004803603604081101561093657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113e8565b6040518082815260200191505060405180910390f35b3480156109a457600080fd5b506109e7600480360360208110156109bb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061146f565b005b60006109f3611003565b15156109fe57600080fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060019050919050565b606060038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610af75780601f10610acc57610100808354040283529160200191610af7565b820191906000526020600020905b815481529060010190602001808311610ada57829003601f168201915b5050505050905090565b6000610b0e33848461148e565b6001905092915050565b6000610b22611003565b1515610b2d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610bf8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6001600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060019050919050565b6000600554905090565b6000610c6e336110fc565b80610c7d5750610c7c611003565b5b15610cdf5760008090505b8351811015610cd557610cc98482815181101515610ca257fe5b906020019060200201518483815181101515610cba57fe5b90602001906020020151611308565b50600181019050610c88565b6001915050610ce4565b600090505b92915050565b6000610cf78484846115f1565b610d908433610d8b85600860008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117c190919063ffffffff16565b61148e565b600190509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610e67576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600660009054906101000a900460ff16905090565b610eda611003565b1515610ee557600080fd5b60008114151515610f84576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b610f8e33826117e3565b50565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110f25780601f106110c7576101008083540402835291602001916110f2565b820191906000526020600020905b8154815290600101906020018083116110d557829003601f168201915b5050505050905090565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600061115c611003565b151561116757600080fd5b60018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060019050919050565b60006111d1611003565b15156111dc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156112a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060019050919050565b600060011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515156113d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f57616c6c6574204c6f636b65640000000000000000000000000000000000000081525060200191505060405180910390fd5b6113de3384846115f1565b6001905092915050565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b611477611003565b151561148257600080fd5b61148b816119d5565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156114ca57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561150657600080fd5b80600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561162d57600080fd5b61167f81600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117c190919063ffffffff16565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061171481600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611acf90919063ffffffff16565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60008282111515156117d257600080fd5b600082840390508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561181f57600080fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561186d57600080fd5b611882816005546117c190919063ffffffff16565b6005819055506118da81600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117c190919063ffffffff16565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611a1157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808284019050838110151515611ae657600080fd5b809150509291505056fea165627a7a723058208c6dd9867567cafd45d5ec03243b0de1a7343661b364173b4ab9a7650e21aa6f0029"
}