{
  "address": "0x743fb783dbaa0473bbf44bcb19d77b86a9c55c37",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BGTToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-18\n*/\n\npragma solidity ^0.4.18;\n\ncontract BGTToken {\n\n    string public name = \"Bankga token\";      //  token name\n    string public symbol = \"BGT\";           //  token symbol\n    uint256 public decimals = 18;            //  token digit\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    uint256 public totalSupply = 0;\n    bool public stopped = false;\n\n    uint256 constant valueFounder = 200000000000000000000000000;\n    address owner = 0x0;\n\n    modifier isOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n\n    modifier isRunning {\n        assert (!stopped);\n        _;\n    }\n\n    modifier validAddress {\n        assert(0x0 != msg.sender);\n        _;\n    }\n\n    function BGTToken(address _addressFounder) public{\n        owner = msg.sender;\n        totalSupply = valueFounder;\n        balanceOf[_addressFounder] = valueFounder;\n        Transfer(0x0, _addressFounder, valueFounder);\n    }\n\n    function transfer(address _to, uint256 _value) isRunning validAddress public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) isRunning validAddress public returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(allowance[_from][msg.sender] >= _value);\n        balanceOf[_to] += _value;\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) isRunning validAddress public returns (bool success) {\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function stop() isOwner public{\n        stopped = true;\n    }\n\n    function start() isOwner public{\n        stopped = false;\n    }\n\n    function setName(string _name) isOwner public{\n        name = _name;\n    }\n\n    function burn(uint256 _value) public{\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[0x0] += _value;\n        Transfer(msg.sender, 0x0, _value);\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
  "bytecode": "606060405260408051908101604052600c81527f42616e6b676120746f6b656e00000000000000000000000000000000000000006020820152600090805161004b929160200190610158565b5060408051908101604052600381527f424754000000000000000000000000000000000000000000000000000000000060208201526001908051610093929160200190610158565b506012600255600060055560068054600160a860020a031916905534156100b957600080fd5b604051602080610b2b8339810160405280805160068054600160a060020a033381166101000261010060a860020a0319909216919091179091556aa56fa5b99019a5c80000006005819055908216600081815260036020526040808220849055939550909350917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91905190815260200160405180910390a3506101f3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061019957805160ff19168380011785556101c6565b828001600101855582156101c6579182015b828111156101c65782518255916020019190600101906101ab565b506101d29291506101d6565b5090565b6101f091905b808211156101d257600081556001016101dc565b90565b610929806102026000396000f3006060604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d457806307da68f51461015e578063095ea7b31461017357806318160ddd146101a957806323b872dd146101ce578063313ce567146101f657806342966c681461020957806370a082311461021f57806375f12b211461023e57806395d89b4114610251578063a9059cbb14610264578063be9a655514610286578063c47f002714610299578063dd62ed3e146102ea575b600080fd5b34156100df57600080fd5b6100e761030f565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561012357808201518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016957600080fd5b6101716103ad565b005b341561017e57600080fd5b610195600160a060020a03600435166024356103d9565b604051901515815260200160405180910390f35b34156101b457600080fd5b6101bc61049f565b60405190815260200160405180910390f35b34156101d957600080fd5b610195600160a060020a03600435811690602435166044356104a5565b341561020157600080fd5b6101bc6105d6565b341561021457600080fd5b6101716004356105dc565b341561022a57600080fd5b6101bc600160a060020a0360043516610685565b341561024957600080fd5b610195610697565b341561025c57600080fd5b6100e76106a0565b341561026f57600080fd5b610195600160a060020a036004351660243561070b565b341561029157600080fd5b6101716107e8565b34156102a457600080fd5b61017160046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061081195505050505050565b34156102f557600080fd5b6101bc600160a060020a0360043581169060243516610845565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103a55780601f1061037a576101008083540402835291602001916103a5565b820191906000526020600020905b81548152906001019060200180831161038857829003601f168201915b505050505081565b60065433600160a060020a0390811661010090920416146103ca57fe5b6006805460ff19166001179055565b60065460009060ff16156103e957fe5b600160a060020a03331615156103fb57fe5b81158061042b5750600160a060020a03338116600090815260046020908152604080832093871683529290522054155b151561043657600080fd5b600160a060020a03338116600081815260046020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60055481565b60065460009060ff16156104b557fe5b600160a060020a03331615156104c757fe5b600160a060020a038416600090815260036020526040902054829010156104ed57600080fd5b600160a060020a038316600090815260036020526040902054828101101561051457600080fd5b600160a060020a03808516600090815260046020908152604080832033909416835292905220548290101561054857600080fd5b600160a060020a03808416600081815260036020908152604080832080548801905588851680845281842080548990039055600483528184203390961684529490915290819020805486900390559091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60025481565b600160a060020a0333166000908152600360205260409020548190101561060257600080fd5b600160a060020a033316600081815260036020526040808220805485900390558180527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff8054850190559091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a350565b60036020526000908152604090205481565b60065460ff1681565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103a55780601f1061037a576101008083540402835291602001916103a5565b60065460009060ff161561071b57fe5b600160a060020a033316151561072d57fe5b600160a060020a0333166000908152600360205260409020548290101561075357600080fd5b600160a060020a038316600090815260036020526040902054828101101561077a57600080fd5b600160a060020a033381166000818152600360205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60065433600160a060020a03908116610100909204161461080557fe5b6006805460ff19169055565b60065433600160a060020a03908116610100909204161461082e57fe5b6000818051610841929160200190610862565b5050565b600460209081526000928352604080842090915290825290205481565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106108a357805160ff19168380011785556108d0565b828001600101855582156108d0579182015b828111156108d05782518255916020019190600101906108b5565b506108dc9291506108e0565b5090565b6108fa91905b808211156108dc57600081556001016108e6565b905600a165627a7a72305820cf5db60659a8381a29a0151aae1a4618cc072821c41b31753e4fade18970123a0029000000000000000000000000aca391f375ce2e25204c32b09281ee2804e06888",
  "constructorArguments": "000000000000000000000000aca391f375ce2e25204c32b09281ee2804e06888"
}