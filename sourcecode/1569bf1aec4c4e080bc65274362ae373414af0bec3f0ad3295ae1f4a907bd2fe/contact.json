{
  "address": "0xb88924408a95917c75de67fc9fbdc4af992979c3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GetTheHorse",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-14\n*/\n\npragma solidity ^0.4.19;\n\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\ncontract ERC721 {\n    \n    function totalSupply() public view returns (uint256 total);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function ownerOf(uint256 _tokenId) external view returns (address owner, uint256 tokenId);\n    function approve(address _to, uint256 _tokenId) external;\n    function transfer(address _to, uint256 _tokenId) external payable;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n\n    event Transfer(address from, address to, uint256 tokenId);\n    event Approval(address owner, address approved, uint256 tokenId);\n    \n    \n    \n}\n\n\ncontract HorseControl  {\n\n    address public ceoAddress=0xC229F1e3D3a798725e09dbC6b31b20c07b95543B;\n    address public ctoAddress=0x01569f2D20499ad013daE86B325EE30cB582c3Ba;\n \n\n    modifier onCEO() {\n        require(msg.sender == ceoAddress);\n        _;\n    }\n\n    modifier onCTO() {\n        require(msg.sender == ctoAddress);\n        _;\n    }\n\n    modifier onlyC() {\n        require(\n            msg.sender == ceoAddress ||\n            msg.sender == ctoAddress\n        );\n        _;\n    }\n\n \n}\n\n\ncontract GeneScienceInterface is HorseControl{\n    \n        mapping (uint256 => uint256) public dna1; \n        mapping (uint256 => uint256) public dna2; \n        mapping (uint256 => uint256) public dna3; \n        mapping (uint256 => uint256) public dna4; \n        mapping (uint256 => uint256) public dna5; \n        mapping (uint256 => uint256) public dna6; \n\n    \n    function mixGenes(uint256 childId, uint256 _mareId, uint16 mumcool, uint256 _stallionId, uint16 dadcool) internal {\n     \n\n            uint16 cooldownI = (mumcool+dadcool)/2;     \n            \n   uint256   childG1;\n        uint256   childG2;\n        uint256   childG3;\n        uint256   childG4;\n        uint256   childG5;\n        uint256   childG6;\n\n               if(cooldownI<=1 && cooldownI>=0){\n                   \n                   \n           childG1= dna1[_stallionId];\n           childG2= dna2[_stallionId];\n           childG3= dna3[_mareId];\n           childG4= dna4[_mareId];\n           childG5= dna5[_mareId];\n           childG6= dna6[_stallionId];\n\n          \n                  \n                  \n              }else if(cooldownI<=2 && cooldownI>1){\n            childG1= dna1[_stallionId];\n           childG2= dna2[_mareId];\n           childG3= dna3[_stallionId];\n           childG4= dna4[_mareId];\n           childG5= dna5[_mareId];\n           childG6= dna6[_stallionId];\n           \n                  \n              }else if(cooldownI<=3 && cooldownI>2){\n                  \n           \n         childG1= dna1[_mareId];\n           childG2= dna2[_stallionId];\n           childG3= dna3[_mareId];\n           childG4= dna4[_stallionId];\n           childG5= dna5[_stallionId];\n           childG6= dna6[_mareId];\n        \n              }else if(cooldownI<=4 && cooldownI>3){\n                  \n           childG1= dna1[_mareId];\n           childG2= dna2[_mareId];\n           childG3= dna3[_stallionId];\n           childG4= dna4[_stallionId];\n           childG5= dna5[_stallionId];\n           childG6= dna6[_mareId];\n        \n              }\n\n        dna1[childId] = childG1;\n        dna2[childId] = childG2;\n        dna3[childId] = childG3;\n        dna4[childId] = childG4;\n        dna5[childId] = childG5;\n        dna6[childId] = childG6;\n\n    }\n   \n}\n\n\n\n\ncontract HoresBasis is  GeneScienceInterface {\n   \n    event Birth(address owner, uint256 HorseId, uint256 mareId, uint256 stallionId);\n   \n    event Transfer(address from, address to, uint256 tokenId);\n\n    struct Horse {\n        uint64 birthTime;\n        uint64 unproductiveEndBlock;\n        uint32 mareId;\n        uint32 stallionId;\n        uint32 stallionWithId;\n        uint16 unproductiveIndex;\n        uint16 generation;\n    }\n\n    uint32[5] public sterile = [\n        uint32(15 minutes),\n        uint32(120 minutes),\n        uint32(480 minutes),\n        uint32(1800 minutes),\n        uint32(3000 minutes)\n    ];\n\n\n    uint256 public secondsPerBlock = 15;\n\n    Horse[] horses;\n\n    mapping (uint256 => address) public horseOwnerIndex;\n    \n    mapping (uint256 => uint256) public horseIndexPrice;\n    \n    mapping (uint256 => bool)  horseIndexForSale;\n\n    mapping (address => uint256) tokenOwnershipCount;\n\n\n   uint256 public saleFee = 20;\n\n   uint256 public BirthFee = 4 finney;\n   \n   \n \n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        tokenOwnershipCount[_to]++;\n        horseOwnerIndex[_tokenId] = _to;\n        \n        if (_from != address(0)) {\n            tokenOwnershipCount[_from]--;\n         \n        }\n       Transfer(_from, _to, _tokenId);\n       \n    }\n    \n    \n    function _sell(address _from,  uint256 _tokenId, uint256 value) internal {\n     \n     if(horseIndexForSale[_tokenId]==true){\n         \n              uint256 price = horseIndexPrice[_tokenId];\n            \n            require(price<=value);\n            \n         uint256 Fee = price / saleFee;\n            \n          uint256  oPrice= price - Fee;\n            \n            address _to = msg.sender;\n            \n            tokenOwnershipCount[_to]++;\n            horseOwnerIndex[_tokenId] = _to;\n            \n            horseIndexForSale[_tokenId]=false;\n            \n            \n            if (_from != address(0)) {\n                tokenOwnershipCount[_from]--;\n               \n            }\n                 \n           Transfer(_from, _to, _tokenId);\n             \n             _from.transfer(oPrice);\n             \n             ceoAddress.transfer(Fee);\n             \n            uint256 bidExcess = value - oPrice - Fee;\n            _to.transfer(bidExcess);\n            \n            \n     }else{\n          _to.transfer(value);\n     }\n      \n    }\n    \n    \n\t\n    function _newHorse(\n        uint256 _mareId,\n        uint256 _stallionId,\n        uint256 _generation,\n        uint256 _genes1,\n        uint256 _genes2,\n        uint256 _genes3,\n        uint256 _genes4,\n        uint256 _genes5,\n        uint256 _genes6,\n        address _owner\n    )\n        internal\n        returns (uint)\n    {\n   \n        Horse memory _horse = Horse({\n           birthTime: uint64(now),\n            unproductiveEndBlock: 0,\n            mareId: uint32(_mareId),\n            stallionId: uint32(_stallionId),\n            stallionWithId: 0,\n            unproductiveIndex: 0,\n            generation: uint16(_generation)\n            \n        });\n       \n        \n       uint256 newHorseId;\n\t   \n     newHorseId = horses.push(_horse)-1;\n     \n     makeDna(_mareId, _stallionId, newHorseId, _genes1, _genes2, _genes3, _genes4, _genes5, _genes6);\n        require(newHorseId == uint256(uint32(newHorseId)));\n\n       Birth(\n            _owner,\n            newHorseId,\n            uint256(_horse.mareId),\n            uint256(_horse.stallionId)\n        );\n\n        _transfer(0, _owner, newHorseId);\n\n        return newHorseId;  \n    }\n\n\nfunction makeDna( uint256 _mareId,\n        uint256 _stallionId,\n        uint256 _newId,\n        uint256 _genes1,\n        uint256 _genes2,\n        uint256 _genes3,\n        uint256 _genes4,\n        uint256 _genes5,\n        uint256 _genes6)internal{\n    \n      if(_mareId!=0 && _stallionId!=0){\n               \n          Horse storage stallion = horses[_stallionId];\n     Horse storage mare = horses[_mareId];\n     \n    GeneScienceInterface.mixGenes(_newId, _mareId,mare.unproductiveIndex, _stallionId, stallion.unproductiveIndex);\n         \n     }else{\n         \n        dna1[_newId] = _genes1;\n        dna2[_newId] = _genes2;\n        dna3[_newId] = _genes3;\n        dna4[_newId] = _genes4;\n        dna5[_newId] = _genes5;\n        dna6[_newId] = _genes6;\n     }\n}\n\n\n\n    function setSecondsPerBlock(uint256 secs) external  onlyC {\n    require(secs < sterile[0]);\n       secondsPerBlock = secs;\n      \n    }\n   \n}\n\n\ncontract HorseOwnership is HoresBasis, ERC721{\n\n  string public constant  name = \"CryptoHorse\";\n    string public constant symbol = \"CHC\";\n     uint8 public constant decimals = 0; \n\n    function horseForSale(uint256 _tokenId, uint256 price) external {\n  \n     address  ownerof =  horseOwnerIndex[_tokenId];\n        require(ownerof == msg.sender);\n        horseIndexPrice[_tokenId] = price;\n        horseIndexForSale[_tokenId]= true;\n\t\t}\n\n\n function horseNotForSale(uint256 _tokenId) external {\n         address  ownerof =  horseOwnerIndex[_tokenId];\n            require(ownerof == msg.sender);\n        horseIndexForSale[_tokenId]= false;\n\n    }\n\n\n    function _owns(address _applicant, uint256 _tokenId) internal view returns (bool) {\n        return horseOwnerIndex[_tokenId] == _applicant;\n    }\n\n\n    function balanceOf(address _owner) public view returns (uint256 count) {\n        return tokenOwnershipCount[_owner];\n    }\n\n    function transfer(\n        address _to,\n        uint256 _tokenId\n    )\n        external\n        payable\n    {\n        require(_to != address(0));\n\t\t\n        require(_to != address(this));\n \n        require(_owns(msg.sender, _tokenId));\n       _transfer(msg.sender, _to, _tokenId);\n    }\n\n    function approve(\n        address _to,\n        uint256 _tokenId\n    )\n        external \n    {\n        require(_owns(msg.sender, _tokenId));\n\n        Approval(msg.sender, _to, _tokenId);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _tokenId ) external payable {\n        \n        if(_from != msg.sender){\n              require(_to == msg.sender);\n                 \n                require(_from==horseOwnerIndex[_tokenId]);\n        \n               _sell(_from,  _tokenId, msg.value);\n            \n        }\n \n    }\n\n    function totalSupply() public view returns (uint) {\n        return horses.length;\n    }\n\n    function ownerOf(uint256 _tokenId)  external view returns (address owner, uint256 tokenId)  {\n        owner = horseOwnerIndex[_tokenId];\n        tokenId=_tokenId;\n       \n       return;\n       \n    }\n\n       function horseFS(uint256 _tokenId) external view  returns (bool buyable, uint256 tokenId) {\n        buyable = horseIndexForSale[_tokenId];\n        tokenId=_tokenId;\n       return;\n       \n    }\n\t\n\tfunction horsePr(uint256 _tokenId) external view  returns (uint256 price, uint256 tokenId) {\n        price = horseIndexPrice[_tokenId];\n        tokenId=_tokenId;\n       return;\n       \n    }\n    \n}\n\ncontract HorseStud is HorseOwnership {\n  \n    event Pregnant(address owner, uint256 mareId, uint256 stallionId, uint256 unproductiveEndBlock);\n\n    uint256 public pregnantHorses;\n\n\n    function _isStallionPermitted(uint256 _stallionId, uint256 _mareId) internal view returns (bool) {\n        address mareOwner = horseOwnerIndex[_mareId];\n        address stallionOwner = horseOwnerIndex[_stallionId];\n        return (mareOwner == stallionOwner);\n    }\n\n function setBirthFee(uint256 val) external onCTO {\n        BirthFee = val;\n    }\n    \n function setSaleFee(uint256 val) external onCTO {\n        saleFee = val;\n    }\n\n \n    function isReadyToBear(uint256 _horseId) public view returns (bool) {\n        require(_horseId > 0);\n        Horse storage knight = horses[_horseId];\n        require(knight.unproductiveIndex<4);  \n    \n        bool ready = (knight.stallionWithId == 0) && (knight.unproductiveEndBlock <= uint64(block.number));\n       return ready;\n    }\n\n    function isPregnant(uint256 _horseId) public view returns (bool) {\n        require(_horseId > 0);\n        return horses[_horseId].stallionWithId != 0;\n    }\n\n\t\n    function _canScrewEachOther(uint256 _mareId, uint256 _stallionId) private view returns(bool) {\n\t\t\n        if (_mareId == _stallionId) {\n            return false;\n        }\n        \n     uint256   matronSex=dna4[_mareId];\n     uint256   sireSex=dna4[_stallionId];\n\n        if(matronSex!=1){\n            return false;\n        }\n        \n         if(sireSex!=2){\n            return false;\n        }\n        \n      if(matronSex==sireSex){\n          return false;\n      }  \n        \n        return true;\n    }\n\n    function canBearWith(uint256 _mareId, uint256 _stallionId)\n        external\n        view\n        returns(bool)\n    {\n        require(_mareId > 0);\n        require(_stallionId > 0);\n        return _canScrewEachOther( _mareId,  _stallionId) &&\n            _isStallionPermitted(_stallionId, _mareId);\n    }\n\n    \n    function _bearWith(uint256 _mareId, uint256 _stallionId) internal {\n        Horse storage stallion = horses[_stallionId];\n        Horse storage mare = horses[_mareId];\n\n        mare.stallionWithId = uint32(_stallionId);\n       \n         stallion.unproductiveEndBlock = uint64((sterile[stallion.unproductiveIndex]/secondsPerBlock) + block.number);\n mare.unproductiveEndBlock = uint64((sterile[mare.unproductiveIndex]/secondsPerBlock) + block.number);\n        \n        if (stallion.unproductiveIndex < 5) {\n            stallion.unproductiveIndex += 1;\n        }\n\t\t if (mare.unproductiveIndex < 5) {\n\t\t\t\t\tmare.unproductiveIndex += 1;\n\t\t}\n\t\t \n        pregnantHorses++;\n\n        Pregnant(horseOwnerIndex[_mareId], _mareId, _stallionId, mare.unproductiveEndBlock);\n   \n   bearChild(_mareId);\n\n    }\n\n\t\n\t\n    function stallionWith(uint256 _mareId, uint256 _stallionId) external payable  {\n\t\trequire(_owns(msg.sender, _mareId));\n        require(_owns(msg.sender, _stallionId));\n\n        Horse storage mare = horses[_mareId];\n\n        require(isReadyToBear(_mareId));\n        require(isReadyToBear(_stallionId));\n\n        bool (mare.stallionWithId == 0) && (mare.unproductiveEndBlock <= uint64(block.number));\n\n        Horse storage stallion = horses[_stallionId];\n\n        bool (stallion.stallionWithId == 0) && (stallion.unproductiveEndBlock <= uint64(block.number));\n\n        require(_canScrewEachOther(\n            _mareId,\n            _stallionId\n        ));\n        \n        if(BirthFee>= msg.value){\n           \n\t\t   ceoAddress.transfer(BirthFee);\n             uint256   rest=msg.value-BirthFee;\n                msg.sender.transfer(rest);   \n     _bearWith(uint32(_mareId), uint32(_stallionId));\n \n        \n        }else{\n            \n               msg.sender.transfer(msg.value);\n  \n        }\n        \n    }\n\n\t\n\t\n    function bearChild(uint256 _mareId) internal  {\n        \n            Horse storage mare = horses[_mareId];\n          \n               require(mare.birthTime != 0);\n        \n                bool (mare.stallionWithId != 0) && (mare.unproductiveEndBlock <= uint64(block.number)); \n            \n              uint256 stallionId = mare.stallionWithId;\n                \n               Horse storage stallion = horses[stallionId];\n        \n                uint16 parentGen = mare.generation;\n                if (stallion.generation > mare.generation) {\n                    parentGen = stallion.generation;\n                }\n        \n                address owner = horseOwnerIndex[_mareId];\n                \n             _newHorse(_mareId, stallionId, parentGen + 1, 0,0,0,0,0,0, owner);\n           \n              mare.stallionWithId=0;\n                \n                pregnantHorses--;\n                \n    }\n    \n    \n    \n}\n\n\n\n\ncontract HorseMinting is HorseStud {\n\n    uint256 public  GEN_0_LIMIT = 20000;\n\n\n    uint256 public gen0Count;\n\n    \n\n    function createGen0Horse(uint256 _genes1,uint256 _genes2,uint256 _genes3,uint256 _genes4,uint256 _genes5,uint256 _genes6, address _owner) external onCTO {\n        address horseOwner = _owner;\n       if (horseOwner == address(0)) {\n             horseOwner = ctoAddress;\n        }\n    require(gen0Count < GEN_0_LIMIT);\n\n            \n              _newHorse(0, 0, 0, _genes1, _genes2, _genes3, _genes4, _genes5, _genes6, horseOwner);\n            \n        gen0Count++;\n        \n    }\n\n   \n}\n\n\ncontract GetTheHorse is HorseMinting {\n\n\n    function getHorse(uint256 _id)\n        external\n        view\n        returns (\n        uint256 price,\n        uint256 id,\n        bool forSale,\n        bool isGestating,\n        bool isReady,\n        uint256 unproductiveIndex,\n        uint256 nextActionAt,\n        uint256 stallionWithId,\n        uint256 birthTime,\n        uint256 mareId,\n        uint256 stallionId,\n        uint256 generation\n\t\t\n    ) {\n\t\tprice = horseIndexPrice[_id];\n        id = uint256(_id);\n\t\tforSale = horseIndexForSale[_id];\n        Horse storage knight = horses[_id];\n        isGestating = (knight.stallionWithId != 0);\n        isReady = (knight.unproductiveEndBlock <= block.number);\n        unproductiveIndex = uint256(knight.unproductiveIndex);\n        nextActionAt = uint256(knight.unproductiveEndBlock);\n        stallionWithId = uint256(knight.stallionWithId);\n        birthTime = uint256(knight.birthTime);\n        mareId = uint256(knight.mareId);\n        stallionId = uint256(knight.stallionId);\n        generation = uint256(knight.generation);\n\n    }\n\n  \n\n}",
  "bytecode": "606060405273c229f1e3d3a798725e09dbc6b31b20c07b95543b6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507301569f2d20499ad013dae86b325ee30cb582c3ba600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a06040519081016040528061038463ffffffff1663ffffffff168152602001611c2063ffffffff1663ffffffff16815260200161708063ffffffff1663ffffffff1681526020016201a5e063ffffffff1663ffffffff1681526020016202bf2063ffffffff1663ffffffff1681525060089060056200012f9291906200015d565b50600f6009556014600f55660e35fa931a0000601055614e2060125534156200015757600080fd5b6200023d565b826005600701600890048101928215620001f45791602002820160005b83821115620001c057835183826101000a81548163ffffffff021916908363ffffffff16021790555092602001926004016020816003010492830192600103026200017a565b8015620001f25782816101000a81549063ffffffff0219169055600401602081600301049283019260010302620001c0565b505b50905062000203919062000207565b5090565b6200023a91905b808211156200023657600081816101000a81549063ffffffff0219169055506001016200020e565b5090565b90565b612ea6806200024d6000396000f3006060604052600436106101e3576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101e8578063095ea7b3146102765780630a0f8168146102b8578063178021e31461030d57806318160ddd146103365780631940a9361461035f5780631f5136601461039a57806323b872dd146103ef57806324e0487114610445578063313ce5671461047157806343f70f60146104a05780634f57641c146104d75780635579ac74146105675780635663896e1461059e5780635b28ad15146105c15780635bb18362146105f85780636352211e1461063357806370a082311461069d578063740b91b6146106ea5780637a7d49371461074d5780637c557a0f146107765780637e42f94d146107ad5780637ed57fa0146107eb5780638d551860146108145780639067690114610837578063941827981461085857806395d89b411461088f57806399b5b2fa1461091d578063a11ed15714610954578063a7c5c2a214610977578063a9059cbb146109a0578063b27a1f63146109d7578063b30387a414610a19578063bc8e9cde14610a42578063bdcafc5514610ab1578063ddf6e5a014610ad4578063e01964d014610afd578063f4ee47ac14610b40578063fb05443914610b77575b600080fd5b34156101f357600080fd5b6101fb610bbb565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561023b578082015181840152602081019050610220565b50505050905090810190601f1680156102685780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561028157600080fd5b6102b6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bf4565b005b34156102c357600080fd5b6102cb610cac565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561031857600080fd5b610320610cd1565b6040518082815260200191505060405180910390f35b341561034157600080fd5b610349610cd7565b6040518082815260200191505060405180910390f35b341561036a57600080fd5b6103806004808035906020019091905050610ce4565b604051808215151515815260200191505060405180910390f35b34156103a557600080fd5b6103ad610d33565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610443600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d59565b005b341561045057600080fd5b61046f6004808035906020019091908035906020019091905050610e46565b005b341561047c57600080fd5b610484610f01565b604051808260ff1660ff16815260200191505060405180910390f35b34156104ab57600080fd5b6104c16004808035906020019091905050610f06565b6040518082815260200191505060405180910390f35b34156104e257600080fd5b6104f86004808035906020019091905050610f1e565b604051808d81526020018c81526020018b1515151581526020018a151515158152602001891515151581526020018881526020018781526020018681526020018581526020018481526020018381526020018281526020019c5050505050505050505050505060405180910390f35b341561057257600080fd5b61058860048080359060200190919050506110b6565b6040518082815260200191505060405180910390f35b34156105a957600080fd5b6105bf60048080359060200190919050506110ce565b005b34156105cc57600080fd5b6105e260048080359060200190919050506111ca565b6040518082815260200191505060405180910390f35b341561060357600080fd5b61061960048080359060200190919050506111e2565b604051808215151515815260200191505060405180910390f35b341561063e57600080fd5b6106546004808035906020019091905050611298565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b34156106a857600080fd5b6106d4600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506112d9565b6040518082815260200191505060405180910390f35b34156106f557600080fd5b61070b6004808035906020019091905050611322565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561075857600080fd5b610760611355565b6040518082815260200191505060405180910390f35b341561078157600080fd5b610797600480803590602001909190505061135b565b6040518082815260200191505060405180910390f35b34156107b857600080fd5b6107ce6004808035906020019091905050611373565b604051808381526020018281526020019250505060405180910390f35b34156107f657600080fd5b6107fe611394565b6040518082815260200191505060405180910390f35b341561081f57600080fd5b610835600480803590602001909190505061139a565b005b610856600480803590602001909190803590602001909190505061143c565b005b341561086357600080fd5b61087960048080359060200190919050506116a6565b6040518082815260200191505060405180910390f35b341561089a57600080fd5b6108a26116be565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108e25780820151818401526020810190506108c7565b50505050905090810190601f16801561090f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561092857600080fd5b61093e60048080359060200190919050506116f7565b6040518082815260200191505060405180910390f35b341561095f57600080fd5b610975600480803590602001909190505061170f565b005b341561098257600080fd5b61098a611775565b6040518082815260200191505060405180910390f35b6109d5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061177b565b005b34156109e257600080fd5b6109f86004808035906020019091905050611816565b60405180831515151581526020018281526020019250505060405180910390f35b3415610a2457600080fd5b610a2c611844565b6040518082815260200191505060405180910390f35b3415610a4d57600080fd5b610aaf600480803590602001909190803590602001909190803590602001909190803590602001909190803590602001909190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061184a565b005b3415610abc57600080fd5b610ad26004808035906020019091905050611949565b005b3415610adf57600080fd5b610ae76119af565b6040518082815260200191505060405180910390f35b3415610b0857600080fd5b610b1e60048080359060200190919050506119b5565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b3415610b4b57600080fd5b610b6160048080359060200190919050506119e4565b6040518082815260200191505060405180910390f35b3415610b8257600080fd5b610ba160048080359060200190919080359060200190919050506119fc565b604051808215151515815260200191505060405180910390f35b6040805190810160405280600b81526020017f43727970746f486f72736500000000000000000000000000000000000000000081525081565b610bfe3382611a3f565b1515610c0957600080fd5b7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925338383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f5481565b6000600a80549050905090565b60008082111515610cf457600080fd5b6000600a83815481101515610d0557fe5b906000526020600020900160000160189054906101000a900463ffffffff1663ffffffff1614159050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515610e41573373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515610dc857600080fd5b600b600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515610e3557600080fd5b610e40838234611aab565b5b505050565b6000600b600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610eb857600080fd5b81600c6000858152602001908152602001600020819055506001600d600085815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b600081565b60066020528060005260406000206000915090505481565b6000806000806000806000806000806000806000600c60008f8152602001908152602001600020549c508d9b50600d60008f815260200190815260200160002060009054906101000a900460ff169a50600a8e815481101515610f7d57fe5b9060005260206000209001905060008160000160189054906101000a900463ffffffff1663ffffffff1614159950438160000160089054906101000a900467ffffffffffffffff1667ffffffffffffffff161115985080600001601c9054906101000a900461ffff1661ffff1697508060000160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1696508060000160189054906101000a900463ffffffff1663ffffffff1695508060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1694508060000160109054906101000a900463ffffffff1663ffffffff1693508060000160149054906101000a900463ffffffff1663ffffffff16925080600001601e9054906101000a900461ffff1661ffff1691505091939597999b5091939597999b565b60046020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806111765750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561118157600080fd5b6008600060058110151561119157fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff16811015156111c057600080fd5b8060098190555050565b60076020528060005260406000206000915090505481565b600080600080841115156111f557600080fd5b600a8481548110151561120457fe5b90600052602060002090019150600482600001601c9054906101000a900461ffff1661ffff1610151561123657600080fd5b60008260000160189054906101000a900463ffffffff1663ffffffff1614801561128c57504367ffffffffffffffff168260000160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1611155b90508092505050919050565b600080600b600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150829050915091565b6000600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600b6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60036020528060005260406000206000915090505481565b600080600c6000848152602001908152602001600020549150829050915091565b60115481565b6000600b600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561140c57600080fd5b6000600d600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600080600061144b3386611a3f565b151561145657600080fd5b6114603385611a3f565b151561146b57600080fd5b600a8581548110151561147a57fe5b90600052602060002090019250611490856111e2565b151561149b57600080fd5b6114a4846111e2565b15156114af57600080fd5b60008360000160189054906101000a900463ffffffff1663ffffffff1614801561150557504367ffffffffffffffff168360000160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1611155b50600a8481548110151561151557fe5b9060005260206000209001915060008260000160189054906101000a900463ffffffff1663ffffffff1614801561157857504367ffffffffffffffff168260000160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1611155b506115838585611e48565b151561158e57600080fd5b3460105410151561165e576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6010549081150290604051600060405180830381858888f1935050505015156115fc57600080fd5b601054340390503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561164357600080fd5b6116598563ffffffff168563ffffffff16611ece565b61169f565b3373ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050151561169e57600080fd5b5b5050505050565b60056020528060005260406000206000915090505481565b6040805190810160405280600381526020017f434843000000000000000000000000000000000000000000000000000000000081525081565b600c6020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561176b57600080fd5b8060108190555050565b60105481565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156117b757600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156117f257600080fd5b6117fc3382611a3f565b151561180757600080fd5b6118123383836121c3565b5050565b600080600d600084815260200190815260200160002060009054906101000a900460ff169150829050915091565b60135481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118a857600080fd5b819050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561190657600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b60125460135410151561191857600080fd5b61192c60008060008b8b8b8b8b8b8a61238f565b506013600081548092919060010191905055505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119a557600080fd5b80600f8190555050565b60125481565b6008816005811015156119c457fe5b60089182820401919006600402915054906101000a900463ffffffff1681565b60026020528060005260406000206000915090505481565b60008083111515611a0c57600080fd5b600082111515611a1b57600080fd5b611a258383611e48565b8015611a375750611a36828461261c565b5b905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff16600b600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b600080600080600060011515600d600089815260200190815260200160002060009054906101000a900460ff1615151415611dfd57600c6000888152602001908152602001600020549450858511151515611b0557600080fd5b600f5485811515611b1257fe5b0493508385039250339150600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050555081600b600089815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600d600089815260200190815260200160002060006101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141515611c7157600e60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001900391905055505b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef888389604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a18773ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050501515611d5057600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f193505050501515611db157600080fd5b838387030390508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515611df857600080fd5b611e3e565b8173ffffffffffffffffffffffffffffffffffffffff166108fc879081150290604051600060405180830381858888f193505050501515611e3d57600080fd5b5b5050505050505050565b600080600083851415611e5e5760009250611ec6565b6005600086815260200190815260200160002054915060056000858152602001908152602001600020549050600182141515611e9d5760009250611ec6565b600281141515611eb05760009250611ec6565b80821415611ec15760009250611ec6565b600192505b505092915050565b600080600a83815481101515611ee057fe5b90600052602060002090019150600a84815481101515611efc57fe5b90600052602060002090019050828160000160186101000a81548163ffffffff021916908363ffffffff16021790555043600954600884600001601c9054906101000a900461ffff1661ffff16600581101515611f5557fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff16811515611f8057fe5b04018260000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555043600954600883600001601c9054906101000a900461ffff1661ffff16600581101515611fd557fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff1681151561200057fe5b04018160000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600582600001601c9054906101000a900461ffff1661ffff16101561207f57600182600001601c8282829054906101000a900461ffff160192506101000a81548161ffff021916908361ffff1602179055505b600581600001601c9054906101000a900461ffff1661ffff1610156120d257600181600001601c8282829054906101000a900461ffff160192506101000a81548161ffff021916908361ffff1602179055505b6011600081548092919060010191905055507f241ea03ca20251805084d27d4440371c34a0b85ff108f6bb5611248f73818b80600b600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685858460000160089054906101000a900467ffffffffffffffff16604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018267ffffffffffffffff16815260200194505050505060405180910390a16121bd846126c6565b50505050565b600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050555081600b600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415156122eb57600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001900391905055505b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050565b6000612399612d1e565b600060e0604051908101604052804267ffffffffffffffff168152602001600067ffffffffffffffff1681526020018e63ffffffff1681526020018d63ffffffff168152602001600063ffffffff168152602001600061ffff1681526020018c61ffff1681525091506001600a80548060010182816124189190612d8a565b9160005260206000209001600085909190915060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160106101000a81548163ffffffff021916908363ffffffff16021790555060608201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060808201518160000160186101000a81548163ffffffff021916908363ffffffff16021790555060a082015181600001601c6101000a81548161ffff021916908361ffff16021790555060c082015181600001601e6101000a81548161ffff021916908361ffff160217905550505003905061255a8d8d838d8d8d8d8d8d61289e565b8063ffffffff168114151561256e57600080fd5b7fbade1ef9a1460ef6a988ba5d64ac136f3198dfb02107b88a8aa3b851a7e4644b8482846040015163ffffffff16856060015163ffffffff16604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a1612609600085836121c3565b80925050509a9950505050505050505050565b6000806000600b600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600b600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149250505092915050565b6000806000806000600a868154811015156126dd57fe5b9060005260206000209001945060008560000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff161415151561271c57600080fd5b60008560000160189054906101000a900463ffffffff1663ffffffff161415801561277357504367ffffffffffffffff168560000160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1611155b508460000160189054906101000a900463ffffffff1663ffffffff169350600a848154811015156127a057fe5b9060005260206000209001925084600001601e9054906101000a900461ffff16915084600001601e9054906101000a900461ffff1661ffff1683600001601e9054906101000a900461ffff1661ffff16111561280c5782600001601e9054906101000a900461ffff1691505b600b600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061285e86856001850161ffff166000806000806000808a61238f565b5060008560000160186101000a81548163ffffffff021916908363ffffffff16021790555060116000815480929190600190039190505550505050505050565b60008060008b141580156128b3575060008a14155b1561292657600a8a8154811015156128c757fe5b90600052602060002090019150600a8b8154811015156128e357fe5b90600052602060002090019050612921898c83600001601c9054906101000a900461ffff168d86600001601c9054906101000a900461ffff166129c4565b6129b7565b87600260008b81526020019081526020016000208190555086600360008b81526020019081526020016000208190555085600460008b81526020019081526020016000208190555084600560008b81526020019081526020016000208190555083600660008b81526020019081526020016000208190555082600760008b8152602001908152602001600020819055505b5050505050505050505050565b60008060008060008060006002888b0161ffff168115156129e157fe5b04965060018761ffff16111580156129fe575060008761ffff1610155b15612a8c57600260008a8152602001908152602001600020549550600360008a8152602001908152602001600020549450600460008c8152602001908152602001600020549350600560008c8152602001908152602001600020549250600660008c8152602001908152602001600020549150600760008a8152602001908152602001600020549050612c80565b60028761ffff1611158015612aa5575060018761ffff16115b15612b3357600260008a8152602001908152602001600020549550600360008c8152602001908152602001600020549450600460008a8152602001908152602001600020549350600560008c8152602001908152602001600020549250600660008c8152602001908152602001600020549150600760008a8152602001908152602001600020549050612c7f565b60038761ffff1611158015612b4c575060028761ffff16115b15612bda57600260008c8152602001908152602001600020549550600360008a8152602001908152602001600020549450600460008c8152602001908152602001600020549350600560008a8152602001908152602001600020549250600660008a8152602001908152602001600020549150600760008c8152602001908152602001600020549050612c7e565b60048761ffff1611158015612bf3575060038761ffff16115b15612c7d57600260008c8152602001908152602001600020549550600360008c8152602001908152602001600020549450600460008a8152602001908152602001600020549350600560008a8152602001908152602001600020549250600660008a8152602001908152602001600020549150600760008c81526020019081526020016000205490505b5b5b5b85600260008e81526020019081526020016000208190555084600360008e81526020019081526020016000208190555083600460008e81526020019081526020016000208190555082600560008e81526020019081526020016000208190555081600660008e81526020019081526020016000208190555080600760008e815260200190815260200160002081905550505050505050505050505050565b60e060405190810160405280600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600061ffff168152602001600061ffff1681525090565b815481835581811511612db157818360005260206000209182019101612db09190612db6565b5b505050565b612e7791905b80821115612e7357600080820160006101000a81549067ffffffffffffffff02191690556000820160086101000a81549067ffffffffffffffff02191690556000820160106101000a81549063ffffffff02191690556000820160146101000a81549063ffffffff02191690556000820160186101000a81549063ffffffff021916905560008201601c6101000a81549061ffff021916905560008201601e6101000a81549061ffff021916905550600101612dbc565b5090565b905600a165627a7a72305820edcf2c20eb8d8aaadf8403007f42e86d74d58599fcb45e12ff2ffb76c4f3818a0029"
}