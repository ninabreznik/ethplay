{
  "address": "0x228426bc6ae3036bd1daffa29d64529963deafa0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LINDOToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-14\n*/\n\npragma solidity ^0.4.24;\ncontract Token{\n    uint256 public totalSupply;\n\n    function balanceOf(address _owner) constant returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value) returns   \n    (bool success);\n\n    function approve(address _spender, uint256 _value) returns (bool success);\n\n    function allowance(address _owner, address _spender) constant returns \n    (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 \n    _value);\n}\n\ncontract StandardToken is Token {\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) returns \n    (bool success) {\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n        balances[_to] += _value;\n        balances[_from] -= _value; \n        allowed[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n\n    function approve(address _spender, uint256 _value) returns (bool success)   \n    {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n}\n\ncontract LINDOToken is StandardToken { \n\n    string public name;                   \n    uint8 public decimals;               \n    string public symbol;              \n\n    function LINDOToken() {\n        balances[msg.sender] = 0.1 ether; \n        totalSupply = 0.1 ether;         \n        name = \"LINDO Token\";                   \n        decimals = 8;           \n        symbol = \"LINDO\";             \n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        require(_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData));\n        return true;\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5033600090815260016020908152604080832067016345785d8a0000908190559092558151808301909252600b8083527f4c494e444f20546f6b656e00000000000000000000000000000000000000000092909101918252610074916003916100ca565b506004805460ff191660081790556040805180820190915260058082527f4c494e444f00000000000000000000000000000000000000000000000000000060209092019182526100c491816100ca565b50610165565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010b57805160ff1916838001178555610138565b82800160010185558215610138579182015b8281111561013857825182559160200191906001019061011d565b50610144929150610148565b5090565b61016291905b80821115610144576000815560010161014e565b90565b61078a806101746000396000f30060806040526004361061008a5763ffffffff60e060020a60003504166306fdde03811461008f578063095ea7b31461011957806318160ddd1461015157806323b872dd14610178578063313ce567146101a257806370a08231146101cd57806395d89b41146101ee578063a9059cbb14610203578063cae9ca5114610227578063dd62ed3e14610290575b600080fd5b34801561009b57600080fd5b506100a46102b7565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100de5781810151838201526020016100c6565b50505050905090810190601f16801561010b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561012557600080fd5b5061013d600160a060020a0360043516602435610345565b604080519115158252519081900360200190f35b34801561015d57600080fd5b506101666103ab565b60408051918252519081900360200190f35b34801561018457600080fd5b5061013d600160a060020a03600435811690602435166044356103b1565b3480156101ae57600080fd5b506101b761048f565b6040805160ff9092168252519081900360200190f35b3480156101d957600080fd5b50610166600160a060020a0360043516610498565b3480156101fa57600080fd5b506100a46104b3565b34801561020f57600080fd5b5061013d600160a060020a036004351660243561050e565b34801561023357600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261013d948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506105989650505050505050565b34801561029c57600080fd5b50610166600160a060020a0360043581169060243516610733565b6003805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561033d5780601f106103125761010080835404028352916020019161033d565b820191906000526020600020905b81548152906001019060200180831161032057829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60005481565b600160a060020a03831660009081526001602052604081205482118015906103fc5750600160a060020a03841660009081526002602090815260408083203384529091529020548211155b151561040757600080fd5b600160a060020a03808416600081815260016020908152604080832080548801905593881680835284832080548890039055600282528483203384528252918490208054879003905583518681529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b60045460ff1681565b600160a060020a031660009081526001602052604090205490565b6005805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561033d5780601f106103125761010080835404028352916020019161033d565b3360009081526001602052604081205482111561052a57600080fd5b33600081815260016020908152604080832080548790039055600160a060020a03871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600192915050565b336000818152600260209081526040808320600160a060020a038816808552908352818420879055815187815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a383600160a060020a031660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e019050604051809103902060e060020a9004338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a03168152602001828051906020019080838360005b838110156106d85781810151838201526020016106c0565b50505050905090810190601f1680156107055780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000875af192505050151561072957600080fd5b5060019392505050565b600160a060020a039182166000908152600260209081526040808320939094168252919091522054905600a165627a7a72305820cba5fcb597435c10f673ee2d9b9da6cec8dd00d973f8f83120b2375504e709630029"
}