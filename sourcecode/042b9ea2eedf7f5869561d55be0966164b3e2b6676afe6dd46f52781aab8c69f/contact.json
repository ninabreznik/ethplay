{
  "address": "0xdb600fda54568a35b78565b5257125bebc51eb27",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RequestCore",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-27\n*/\n\npragma solidity 0.4.18;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\n    int256 b = int256(a);\n    assert(b >= 0);\n    return b;\n  }\n}\n\n\n/**\n * @title SafeMathInt\n * @dev Math operations with safety checks that throw on error\n * @dev SafeMath adapted for int256\n */\nlibrary SafeMathInt {\n  function mul(int256 a, int256 b) internal pure returns (int256) {\n    // Prevent overflow when multiplying INT256_MIN with -1\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\n    assert(!(a == - 2**255 && b == -1) && !(b == - 2**255 && a == -1));\n\n    int256 c = a * b;\n    assert((b == 0) || (c / b == a));\n    return c;\n  }\n\n  function div(int256 a, int256 b) internal pure returns (int256) {\n    // Prevent overflow when dividing INT256_MIN by -1\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\n    assert(!(a == - 2**255 && b == -1));\n\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    int256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(int256 a, int256 b) internal pure returns (int256) {\n    assert((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\n\n    return a - b;\n  }\n\n  function add(int256 a, int256 b) internal pure returns (int256) {\n    int256 c = a + b;\n    assert((b >= 0 && c >= a) || (b < 0 && c < a));\n    return c;\n  }\n\n  function toUint256Safe(int256 a) internal pure returns (uint256) {\n    assert(a>=0);\n    return uint256(a);\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n * @dev SafeMath adapted for uint8\n */\nlibrary SafeMathUint8 {\n  function mul(uint8 a, uint8 b) internal pure returns (uint8) {\n    uint8 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint8 a, uint8 b) internal pure returns (uint8) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint8 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint8 a, uint8 b) internal pure returns (uint8) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint8 a, uint8 b) internal pure returns (uint8) {\n    uint8 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n * @dev SafeMath adapted for uint96\n */\nlibrary SafeMathUint96 {\n  function mul(uint96 a, uint96 b) internal pure returns (uint96) {\n    uint96 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint96 a, uint96 b) internal pure returns (uint96) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint96 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint96 a, uint96 b) internal pure returns (uint96) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint96 a, uint96 b) internal pure returns (uint96) {\n    uint96 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Administrable\n * @dev Base contract for the administration of Core. Handles whitelisting of currency contracts\n */\ncontract Administrable is Pausable {\n\n    // mapping of address of trusted contract\n    mapping(address => uint8) public trustedCurrencyContracts;\n\n    // Events of the system\n    event NewTrustedContract(address newContract);\n    event RemoveTrustedContract(address oldContract);\n\n    /**\n     * @dev add a trusted currencyContract \n     *\n     * @param _newContractAddress The address of the currencyContract\n     */\n    function adminAddTrustedCurrencyContract(address _newContractAddress)\n        external\n        onlyOwner\n    {\n        trustedCurrencyContracts[_newContractAddress] = 1; //Using int instead of boolean in case we need several states in the future.\n        NewTrustedContract(_newContractAddress);\n    }\n\n    /**\n     * @dev remove a trusted currencyContract \n     *\n     * @param _oldTrustedContractAddress The address of the currencyContract\n     */\n    function adminRemoveTrustedCurrencyContract(address _oldTrustedContractAddress)\n        external\n        onlyOwner\n    {\n        require(trustedCurrencyContracts[_oldTrustedContractAddress] != 0);\n        trustedCurrencyContracts[_oldTrustedContractAddress] = 0;\n        RemoveTrustedContract(_oldTrustedContractAddress);\n    }\n\n    /**\n     * @dev get the status of a trusted currencyContract \n     * @dev Not used today, useful if we have several states in the future.\n     *\n     * @param _contractAddress The address of the currencyContract\n     * @return The status of the currencyContract. If trusted 1, otherwise 0\n     */\n    function getStatusContract(address _contractAddress)\n        view\n        external\n        returns(uint8) \n    {\n        return trustedCurrencyContracts[_contractAddress];\n    }\n\n    /**\n     * @dev check if a currencyContract is trusted\n     *\n     * @param _contractAddress The address of the currencyContract\n     * @return bool true if contract is trusted\n     */\n    function isTrustedContract(address _contractAddress)\n        public\n        view\n        returns(bool)\n    {\n        return trustedCurrencyContracts[_contractAddress] == 1;\n    }\n}\n\n/**\n * @title RequestCore\n *\n * @dev The Core is the main contract which stores all the requests.\n *\n * @dev The Core philosophy is to be as much flexible as possible to adapt in the future to any new system\n * @dev All the important conditions and an important part of the business logic takes place in the currency contracts.\n * @dev Requests can only be created in the currency contracts\n * @dev Currency contracts have to be allowed by the Core and respect the business logic.\n * @dev Request Network will develop one currency contracts per currency and anyone can creates its own currency contracts.\n */\ncontract RequestCore is Administrable {\n    using SafeMath for uint256;\n    using SafeMathUint96 for uint96;\n    using SafeMathInt for int256;\n    using SafeMathUint8 for uint8;\n\n    enum State { Created, Accepted, Canceled }\n\n    struct Request {\n        // ID address of the payer\n        address payer;\n\n        // Address of the contract managing the request\n        address currencyContract;\n\n        // State of the request\n        State state;\n\n        // Main payee\n        Payee payee;\n    }\n\n    // Structure for the payees. A sub payee is an additional entity which will be paid during the processing of the invoice.\n    // ex: can be used for routing taxes or fees at the moment of the payment.\n    struct Payee {\n        // ID address of the payee\n        address addr;\n\n        // amount expected for the payee. \n        // Not uint for evolution (may need negative amounts one day), and simpler operations\n        int256 expectedAmount;\n\n        // balance of the payee\n        int256 balance;\n    }\n\n    // Count of request in the mapping. A maximum of 2^96 requests can be created per Core contract.\n    // Integer, incremented for each request of a Core contract, starting from 0\n    // RequestId (256bits) = contract address (160bits) + numRequest\n    uint96 public numRequests; \n    \n    // Mapping of all the Requests. The key is the request ID.\n    // not anymore public to avoid \"UnimplementedFeatureError: Only in-memory reference type can be stored.\"\n    // https://github.com/ethereum/solidity/issues/3577\n    mapping(bytes32 => Request) requests;\n\n    // Mapping of subPayees of the requests. The key is the request ID.\n    // This array is outside the Request structure to optimize the gas cost when there is only 1 payee.\n    mapping(bytes32 => Payee[256]) public subPayees;\n\n    /*\n     *  Events \n     */\n    event Created(bytes32 indexed requestId, address indexed payee, address indexed payer, address creator, string data);\n    event Accepted(bytes32 indexed requestId);\n    event Canceled(bytes32 indexed requestId);\n\n    // Event for Payee & subPayees\n    event NewSubPayee(bytes32 indexed requestId, address indexed payee); // Separated from the Created Event to allow a 4th indexed parameter (subpayees)\n    event UpdateExpectedAmount(bytes32 indexed requestId, uint8 payeeIndex, int256 deltaAmount);\n    event UpdateBalance(bytes32 indexed requestId, uint8 payeeIndex, int256 deltaAmount);\n\n    /*\n     * @dev Function used by currency contracts to create a request in the Core\n     *\n     * @dev _payees and _expectedAmounts must have the same size\n     *\n     * @param _creator Request creator. The creator is the one who initiated the request (create or sign) and not necessarily the one who broadcasted it\n     * @param _payees array of payees address (the index 0 will be the payee the others are subPayees). Size must be smaller than 256.\n     * @param _expectedAmounts array of Expected amount to be received by each payees. Must be in same order than the payees. Size must be smaller than 256.\n     * @param _payer Entity expected to pay\n     * @param _data data of the request\n     * @return Returns the id of the request\n     */\n    function createRequest(\n        address     _creator,\n        address[]   _payees,\n        int256[]    _expectedAmounts,\n        address     _payer,\n        string      _data)\n        external\n        whenNotPaused \n        returns (bytes32 requestId) \n    {\n        // creator must not be null\n        require(_creator!=0); // not as modifier to lighten the stack\n        // call must come from a trusted contract\n        require(isTrustedContract(msg.sender)); // not as modifier to lighten the stack\n\n        // Generate the requestId\n        requestId = generateRequestId();\n\n        address mainPayee;\n        int256 mainExpectedAmount;\n        // extract the main payee if filled\n        if(_payees.length!=0) {\n            mainPayee = _payees[0];\n            mainExpectedAmount = _expectedAmounts[0];\n        }\n\n        // Store the new request\n        requests[requestId] = Request(_payer, msg.sender, State.Created, Payee(mainPayee, mainExpectedAmount, 0));\n\n        // Declare the new request\n        Created(requestId, mainPayee, _payer, _creator, _data);\n        \n        // Store and declare the sub payees (needed in internal function to avoid \"stack too deep\")\n        initSubPayees(requestId, _payees, _expectedAmounts);\n\n        return requestId;\n    }\n\n    /*\n     * @dev Function used by currency contracts to create a request in the Core from bytes\n     * @dev Used to avoid receiving a stack too deep error when called from a currency contract with too many parameters.\n     * @audit Note that to optimize the stack size and the gas cost we do not extract the params and store them in the stack. As a result there is some code redundancy\n     * @param _data bytes containing all the data packed :\n            address(creator)\n            address(payer)\n            uint8(number_of_payees)\n            [\n                address(main_payee_address)\n                int256(main_payee_expected_amount)\n                address(second_payee_address)\n                int256(second_payee_expected_amount)\n                ...\n            ]\n            uint8(data_string_size)\n            size(data)\n     * @return Returns the id of the request \n     */ \n    function createRequestFromBytes(bytes _data) \n        external\n        whenNotPaused \n        returns (bytes32 requestId) \n    {\n        // call must come from a trusted contract\n        require(isTrustedContract(msg.sender)); // not as modifier to lighten the stack\n\n        // extract address creator & payer\n        address creator = extractAddress(_data, 0);\n\n        address payer = extractAddress(_data, 20);\n\n        // creator must not be null\n        require(creator!=0);\n        \n        // extract the number of payees\n        uint8 payeesCount = uint8(_data[40]);\n\n        // get the position of the dataSize in the byte (= number_of_payees * (address_payee_size + int256_payee_size) + address_creator_size + address_payer_size + payees_count_size\n        //                                              (= number_of_payees * (20+32) + 20 + 20 + 1 )\n        uint256 offsetDataSize = uint256(payeesCount).mul(52).add(41);\n\n        // extract the data size and then the data itself\n        uint8 dataSize = uint8(_data[offsetDataSize]);\n        string memory dataStr = extractString(_data, dataSize, offsetDataSize.add(1));\n\n        address mainPayee;\n        int256 mainExpectedAmount;\n        // extract the main payee if possible\n        if(payeesCount!=0) {\n            mainPayee = extractAddress(_data, 41);\n            mainExpectedAmount = int256(extractBytes32(_data, 61));\n        }\n\n        // Generate the requestId\n        requestId = generateRequestId();\n\n        // Store the new request\n        requests[requestId] = Request(payer, msg.sender, State.Created, Payee(mainPayee, mainExpectedAmount, 0));\n\n        // Declare the new request\n        Created(requestId, mainPayee, payer, creator, dataStr);\n\n        // Store and declare the sub payees\n        for(uint8 i = 1; i < payeesCount; i = i.add(1)) {\n            address subPayeeAddress = extractAddress(_data, uint256(i).mul(52).add(41));\n\n            // payees address cannot be 0x0\n            require(subPayeeAddress != 0);\n\n            subPayees[requestId][i-1] =  Payee(subPayeeAddress, int256(extractBytes32(_data, uint256(i).mul(52).add(61))), 0);\n            NewSubPayee(requestId, subPayeeAddress);\n        }\n\n        return requestId;\n    }\n\n    /*\n     * @dev Function used by currency contracts to accept a request in the Core.\n     * @dev callable only by the currency contract of the request\n     * @param _requestId Request id\n     */ \n    function accept(bytes32 _requestId) \n        external\n    {\n        Request storage r = requests[_requestId];\n        require(r.currencyContract==msg.sender); \n        r.state = State.Accepted;\n        Accepted(_requestId);\n    }\n\n    /*\n     * @dev Function used by currency contracts to cancel a request in the Core. Several reasons can lead to cancel a request, see request life cycle for more info.\n     * @dev callable only by the currency contract of the request\n     * @param _requestId Request id\n     */ \n    function cancel(bytes32 _requestId)\n        external\n    {\n        Request storage r = requests[_requestId];\n        require(r.currencyContract==msg.sender);\n        r.state = State.Canceled;\n        Canceled(_requestId);\n    }   \n\n    /*\n     * @dev Function used to update the balance\n     * @dev callable only by the currency contract of the request\n     * @param _requestId Request id\n     * @param _payeeIndex index of the payee (0 = main payee)\n     * @param _deltaAmount modifier amount\n     */ \n    function updateBalance(bytes32 _requestId, uint8 _payeeIndex, int256 _deltaAmount)\n        external\n    {   \n        Request storage r = requests[_requestId];\n        require(r.currencyContract==msg.sender);\n\n        if( _payeeIndex == 0 ) {\n            // modify the main payee\n            r.payee.balance = r.payee.balance.add(_deltaAmount);\n        } else {\n            // modify the sub payee\n            Payee storage sp = subPayees[_requestId][_payeeIndex-1];\n            sp.balance = sp.balance.add(_deltaAmount);\n        }\n        UpdateBalance(_requestId, _payeeIndex, _deltaAmount);\n    }\n\n    /*\n     * @dev Function update the expectedAmount adding additional or subtract\n     * @dev callable only by the currency contract of the request\n     * @param _requestId Request id\n     * @param _payeeIndex index of the payee (0 = main payee)\n     * @param _deltaAmount modifier amount\n     */ \n    function updateExpectedAmount(bytes32 _requestId, uint8 _payeeIndex, int256 _deltaAmount)\n        external\n    {   \n        Request storage r = requests[_requestId];\n        require(r.currencyContract==msg.sender); \n\n        if( _payeeIndex == 0 ) {\n            // modify the main payee\n            r.payee.expectedAmount = r.payee.expectedAmount.add(_deltaAmount);    \n        } else {\n            // modify the sub payee\n            Payee storage sp = subPayees[_requestId][_payeeIndex-1];\n            sp.expectedAmount = sp.expectedAmount.add(_deltaAmount);\n        }\n        UpdateExpectedAmount(_requestId, _payeeIndex, _deltaAmount);\n    }\n\n    /*\n     * @dev Internal: Init payees for a request (needed to avoid 'stack too deep' in createRequest())\n     * @param _requestId Request id\n     * @param _payees array of payees address\n     * @param _expectedAmounts array of payees initial expected amounts\n     */ \n    function initSubPayees(bytes32 _requestId, address[] _payees, int256[] _expectedAmounts)\n        internal\n    {\n        require(_payees.length == _expectedAmounts.length);\n     \n        for (uint8 i = 1; i < _payees.length; i = i.add(1))\n        {\n            // payees address cannot be 0x0\n            require(_payees[i] != 0);\n            subPayees[_requestId][i-1] = Payee(_payees[i], _expectedAmounts[i], 0);\n            NewSubPayee(_requestId, _payees[i]);\n        }\n    }\n\n\n    /* GETTER */\n    /*\n     * @dev Get address of a payee\n     * @param _requestId Request id\n     * @param _payeeIndex payee index (0 = main payee)\n     * @return payee address\n     */ \n    function getPayeeAddress(bytes32 _requestId, uint8 _payeeIndex)\n        public\n        constant\n        returns(address)\n    {\n        if(_payeeIndex == 0) {\n            return requests[_requestId].payee.addr;\n        } else {\n            return subPayees[_requestId][_payeeIndex-1].addr;\n        }\n    }\n\n    /*\n     * @dev Get payer of a request\n     * @param _requestId Request id\n     * @return payer address\n     */ \n    function getPayer(bytes32 _requestId)\n        public\n        constant\n        returns(address)\n    {\n        return requests[_requestId].payer;\n    }\n\n    /*\n     * @dev Get amount expected of a payee\n     * @param _requestId Request id\n     * @param _payeeIndex payee index (0 = main payee)\n     * @return amount expected\n     */     \n    function getPayeeExpectedAmount(bytes32 _requestId, uint8 _payeeIndex)\n        public\n        constant\n        returns(int256)\n    {\n        if(_payeeIndex == 0) {\n            return requests[_requestId].payee.expectedAmount;\n        } else {\n            return subPayees[_requestId][_payeeIndex-1].expectedAmount;\n        }\n    }\n\n    /*\n     * @dev Get number of subPayees for a request\n     * @param _requestId Request id\n     * @return number of subPayees\n     */     \n    function getSubPayeesCount(bytes32 _requestId)\n        public\n        constant\n        returns(uint8)\n    {\n        for (uint8 i = 0; subPayees[_requestId][i].addr != address(0); i = i.add(1)) {\n            // nothing to do\n        }\n        return i;\n    }\n\n    /*\n     * @dev Get currencyContract of a request\n     * @param _requestId Request id\n     * @return currencyContract address\n     */\n    function getCurrencyContract(bytes32 _requestId)\n        public\n        constant\n        returns(address)\n    {\n        return requests[_requestId].currencyContract;\n    }\n\n    /*\n     * @dev Get balance of a payee\n     * @param _requestId Request id\n     * @param _payeeIndex payee index (0 = main payee)\n     * @return balance\n     */     \n    function getPayeeBalance(bytes32 _requestId, uint8 _payeeIndex)\n        public\n        constant\n        returns(int256)\n    {\n        if(_payeeIndex == 0) {\n            return requests[_requestId].payee.balance;    \n        } else {\n            return subPayees[_requestId][_payeeIndex-1].balance;\n        }\n    }\n\n    /*\n     * @dev Get balance total of a request\n     * @param _requestId Request id\n     * @return balance\n     */     \n    function getBalance(bytes32 _requestId)\n        public\n        constant\n        returns(int256)\n    {\n        int256 balance = requests[_requestId].payee.balance;\n\n        for (uint8 i = 0; subPayees[_requestId][i].addr != address(0); i = i.add(1))\n        {\n            balance = balance.add(subPayees[_requestId][i].balance);\n        }\n\n        return balance;\n    }\n\n\n    /*\n     * @dev check if all the payees balances are null\n     * @param _requestId Request id\n     * @return true if all the payees balances are equals to 0\n     */     \n    function areAllBalanceNull(bytes32 _requestId)\n        public\n        constant\n        returns(bool isNull)\n    {\n        isNull = requests[_requestId].payee.balance == 0;\n\n        for (uint8 i = 0; isNull && subPayees[_requestId][i].addr != address(0); i = i.add(1))\n        {\n            isNull = subPayees[_requestId][i].balance == 0;\n        }\n\n        return isNull;\n    }\n\n    /*\n     * @dev Get total expectedAmount of a request\n     * @param _requestId Request id\n     * @return balance\n     */     \n    function getExpectedAmount(bytes32 _requestId)\n        public\n        constant\n        returns(int256)\n    {\n        int256 expectedAmount = requests[_requestId].payee.expectedAmount;\n\n        for (uint8 i = 0; subPayees[_requestId][i].addr != address(0); i = i.add(1))\n        {\n            expectedAmount = expectedAmount.add(subPayees[_requestId][i].expectedAmount);\n        }\n\n        return expectedAmount;\n    }\n\n    /*\n     * @dev Get state of a request\n     * @param _requestId Request id\n     * @return state\n     */ \n    function getState(bytes32 _requestId)\n        public\n        constant\n        returns(State)\n    {\n        return requests[_requestId].state;\n    }\n\n    /*\n     * @dev Get address of a payee\n     * @param _requestId Request id\n     * @return payee index (0 = main payee) or -1 if not address not found\n     */\n    function getPayeeIndex(bytes32 _requestId, address _address)\n        public\n        constant\n        returns(int16)\n    {\n        // return 0 if main payee\n        if(requests[_requestId].payee.addr == _address) return 0;\n\n        for (uint8 i = 0; subPayees[_requestId][i].addr != address(0); i = i.add(1))\n        {\n            if(subPayees[_requestId][i].addr == _address) {\n                // if found return subPayee index + 1 (0 is main payee)\n                return i+1;\n            }\n        }\n        return -1;\n    }\n\n    /*\n     * @dev getter of a request\n     * @param _requestId Request id\n     * @return request as a tuple : (address payer, address currencyContract, State state, address payeeAddr, int256 payeeExpectedAmount, int256 payeeBalance)\n     */ \n    function getRequest(bytes32 _requestId) \n        external\n        constant\n        returns(address payer, address currencyContract, State state, address payeeAddr, int256 payeeExpectedAmount, int256 payeeBalance)\n    {\n        Request storage r = requests[_requestId];\n        return ( r.payer, \n                 r.currencyContract, \n                 r.state, \n                 r.payee.addr, \n                 r.payee.expectedAmount, \n                 r.payee.balance );\n    }\n\n    /*\n     * @dev extract a string from a bytes. Extracts a sub-part from tha bytes and convert it to string\n     * @param data bytes from where the string will be extracted\n     * @param size string size to extract\n     * @param _offset position of the first byte of the string in bytes\n     * @return string\n     */ \n    function extractString(bytes data, uint8 size, uint _offset) \n        internal \n        pure \n        returns (string) \n    {\n        bytes memory bytesString = new bytes(size);\n        for (uint j = 0; j < size; j++) {\n            bytesString[j] = data[_offset+j];\n        }\n        return string(bytesString);\n    }\n\n    /*\n     * @dev generate a new unique requestId\n     * @return a bytes32 requestId \n     */ \n    function generateRequestId()\n        internal\n        returns (bytes32)\n    {\n        // Update numRequest\n        numRequests = numRequests.add(1);\n        // requestId = ADDRESS_CONTRACT_CORE + numRequests (0xADRRESSCONTRACT00000NUMREQUEST)\n        return bytes32((uint256(this) << 96).add(numRequests));\n    }\n\n    /*\n     * @dev extract an address from a bytes at a given position\n     * @param _data bytes from where the address will be extract\n     * @param _offset position of the first byte of the address\n     * @return address\n     */\n    function extractAddress(bytes _data, uint offset)\n        internal\n        pure\n        returns (address m)\n    {\n        require(offset >=0 && offset + 20 <= _data.length);\n        assembly {\n            m := and( mload(add(_data, add(20, offset))), \n                      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n    }\n\n    /*\n     * @dev extract a bytes32 from a bytes\n     * @param data bytes from where the bytes32 will be extract\n     * @param offset position of the first byte of the bytes32\n     * @return address\n     */\n    function extractBytes32(bytes _data, uint offset)\n        public\n        pure\n        returns (bytes32 bs)\n    {\n        require(offset >=0 && offset + 32 <= _data.length);\n        assembly {\n            bs := mload(add(_data, add(32, offset)))\n        }\n    }\n\n    /**\n     * @dev transfer to owner any tokens send by mistake on this contracts\n     * @param token The address of the token to transfer.\n     * @param amount The amount to be transfered.\n     */\n    function emergencyERC20Drain(ERC20 token, uint amount )\n        public\n        onlyOwner \n    {\n        token.transfer(owner, amount);\n    }\n}",
  "bytecode": "606060405260008060146101000a81548160ff021916908315150217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506132d68061006d6000396000f300606060405260043610610196576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630410fac71461019b57806307550f0a146101d457806309648a9d146102135780632ad8d8751461025c5780633f4ba83a146102a357806343107290146102b85780635bf3a315146103685780635c975abb146103b9578063624c0c91146103e65780637d1842ec146104645780638456cb59146104ab578063857bcb2c146104c05780638a80faeb146104f95780638da5cb5b1461054c5780638e739461146105a157806392fd1f01146105dc5780639e3572b51461064f5780639fb42b1f146106b6578063a12cad70146106fb578063b073f52b14610762578063b1e05e8a1461079e578063c4d252f514610820578063caef5dec14610847578063ce16589414610888578063db0e16f1146108c4578063e1cda46814610906578063e4725ba114610950578063f2fde38b14610977578063f6112d68146109b0578063f8db71b514610a10578063fb1e61ca14610a63578063fcc01cce14610b53575b600080fd5b34156101a657600080fd5b6101d2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b8e565b005b34156101df57600080fd5b6101f9600480803560001916906020019091905050610d07565b604051808215151515815260200191505060405180910390f35b341561021e57600080fd5b610238600480803560001916906020019091905050610e28565b6040518082600281111561024857fe5b60ff16815260200191505060405180910390f35b341561026757600080fd5b61028d60048080356000191690602001909190803560ff16906020019091905050610e5d565b6040518082815260200191505060405180910390f35b34156102ae57600080fd5b6102b6610ed3565b005b34156102c357600080fd5b61034a600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190820180359060200191909192908035906020019082018035906020019190919290803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190820180359060200191909192905050610f91565b60405180826000191660001916815260200191505060405180910390f35b341561037357600080fd5b61039f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611342565b604051808215151515815260200191505060405180910390f35b34156103c457600080fd5b6103cc61139d565b604051808215151515815260200191505060405180910390f35b34156103f157600080fd5b6104146004808035600019169060200190919080359060200190919050506113b0565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b341561046f57600080fd5b61049560048080356000191690602001909190803560ff1690602001909190505061140d565b6040518082815260200191505060405180910390f35b34156104b657600080fd5b6104be611483565b005b34156104cb57600080fd5b6104f7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611543565b005b341561050457600080fd5b610530600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061165c565b604051808260ff1660ff16815260200191505060405180910390f35b341561055757600080fd5b61055f61167c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105ac57600080fd5b6105c66004808035600019169060200190919050506116a1565b6040518082815260200191505060405180910390f35b34156105e757600080fd5b61060d60048080356000191690602001909190803560ff169060200190919050506117c8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561065a57600080fd5b61067460048080356000191690602001909190505061187e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106c157600080fd5b6106c96118c6565b60405180826bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200191505060405180910390f35b341561070657600080fd5b6107206004808035600019169060200190919050506118e4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561076d57600080fd5b61079c60048080356000191690602001909190803560ff1690602001909190803590602001909190505061192c565b005b34156107a957600080fd5b610802600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091905050611a86565b60405180826000191660001916815260200191505060405180910390f35b341561082b57600080fd5b610845600480803560001916906020019091905050611ab6565b005b341561085257600080fd5b61086c600480803560001916906020019091905050611b8e565b604051808260ff1660ff16815260200191505060405180910390f35b341561089357600080fd5b6108c260048080356000191690602001909190803560ff16906020019091908035906020019091905050611c46565b005b34156108cf57600080fd5b610904600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611da0565b005b341561091157600080fd5b61093260048080359060200190820180359060200191909192905050611ee7565b60405180826000191660001916815260200191505060405180910390f35b341561095b57600080fd5b610975600480803560001916906020019091905050612738565b005b341561098257600080fd5b6109ae600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612810565b005b34156109bb57600080fd5b6109f460048080356000191690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612965565b604051808260010b60010b815260200191505060405180910390f35b3415610a1b57600080fd5b610a47600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612b52565b604051808260ff1660ff16815260200191505060405180910390f35b3415610a6e57600080fd5b610a88600480803560001916906020019091905050612ba8565b604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001856002811115610afc57fe5b60ff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001965050505050505060405180910390f35b3415610b5e57600080fd5b610b78600480803560001916906020019091905050612c7a565b6040518082815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610be957600080fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614151515610c4857600080fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055507f37e1aad3ab2362f3de04d0fe2369a3dd3596a8c79745fb1345df1336f07cb72881604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b600080600060036000856000191660001916815260200190815260200160002060020160020154149150600090505b818015610dc35750600073ffffffffffffffffffffffffffffffffffffffff166004600085600019166000191681526020019081526020016000208260ff1661010081101515610d8257fe5b6003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15610e1f5760006004600085600019166000191681526020019081526020016000208260ff1661010081101515610df657fe5b6003020160020154149150610e1860018260ff16612da190919063ffffffff16565b9050610d36565b81915050919050565b600060036000836000191660001916815260200190815260200160002060010160149054906101000a900460ff169050919050565b6000808260ff161415610e9357600360008460001916600019168152602001908152602001600020600201600101549050610ecd565b6004600084600019166000191681526020019081526020016000206001830360ff1661010081101515610ec257fe5b600302016001015490505b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f2e57600080fd5b600060149054906101000a900460ff161515610f4957600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60008060008060149054906101000a900460ff16151515610fb157600080fd5b60008b73ffffffffffffffffffffffffffffffffffffffff1614151515610fd757600080fd5b610fe033611342565b1515610feb57600080fd5b610ff3612dc5565b925060008a8a90501415156110495789896000818110151561101157fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16915087876000818110151561103f57fe5b9050602002013590505b6080604051908101604052808773ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016000600281111561109a57fe5b81526020016060604051908101604052808573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001600081525081525060036000856000191660001916815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff021916908360028111156111a257fe5b021790555060608201518160020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550509050508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1684600019167fcd20b91aeef8959138131d87dd32347cc073c8ecbf1bf640a6cc20de4dd73a6c8e8989604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437820191505094505050505060405180910390a4611331838b8b808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050508a8a80806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050612e93565b829250505098975050505050505050565b600060018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16149050919050565b600060149054906101000a900460ff1681565b600460205281600052604060002081610100811015156113cc57fe5b60030201600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b6000808260ff1614156114435760036000846000191660001916815260200190815260200160002060020160020154905061147d565b6004600084600019166000191681526020019081526020016000206001830360ff166101008110151561147257fe5b600302016002015490505b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114de57600080fd5b600060149054906101000a900460ff161515156114fa57600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561159e57600080fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055507f26644c0325b712ffff764a64a71985fb39d46406ffb32dd76c3ca00c56136a5781604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b60016020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000600360008560001916600019168152602001908152602001600020600201600201549150600090505b600073ffffffffffffffffffffffffffffffffffffffff166004600086600019166000191681526020019081526020016000208260ff166101008110151561171357fe5b6003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156117be5761179e6004600086600019166000191681526020019081526020016000208260ff166101008110151561178757fe5b60030201600201548361307490919063ffffffff16565b91506117b760018260ff16612da190919063ffffffff16565b90506116cf565b8192505050919050565b6000808260ff16141561181e5760036000846000191660001916815260200190815260200160002060020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050611878565b6004600084600019166000191681526020019081526020016000206001830360ff166101008110151561184d57fe5b6003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b92915050565b600060036000836000191660001916815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600260009054906101000a90046bffffffffffffffffffffffff1681565b600060036000836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060036000866000191660001916815260200190815260200160002091503373ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156119aa57600080fd5b60008460ff1614156119e0576119d083836002016002015461307490919063ffffffff16565b8260020160020181905550611a35565b6004600086600019166000191681526020019081526020016000206001850360ff1661010081101515611a0f57fe5b600302019050611a2c83826002015461307490919063ffffffff16565b81600201819055505b84600019167fce1d42a66513418d0ed10563168625746b34f2f7c27964be8ff97c8061cd67678585604051808360ff1660ff1681526020018281526020019250505060405180910390a25050505050565b6000808210158015611a9c575082516020830111155b1515611aa757600080fd5b81602001830151905092915050565b600060036000836000191660001916815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611b3357600080fd5b60028160010160146101000a81548160ff02191690836002811115611b5457fe5b021790555081600019167f134fdd648feeaf30251f0157f9624ef8608ff9a042aad6d13e73f35d21d3f88d60405160405180910390a25050565b600080600090505b600073ffffffffffffffffffffffffffffffffffffffff166004600085600019166000191681526020019081526020016000208260ff1661010081101515611bda57fe5b6003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611c3d57611c3660018260ff16612da190919063ffffffff16565b9050611b96565b80915050919050565b60008060036000866000191660001916815260200190815260200160002091503373ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611cc457600080fd5b60008460ff161415611cfa57611cea83836002016001015461307490919063ffffffff16565b8260020160010181905550611d4f565b6004600086600019166000191681526020019081526020016000206001850360ff1661010081101515611d2957fe5b600302019050611d4683826001015461307490919063ffffffff16565b81600101819055505b84600019167fa03a5cab19cd5d68513718844732c5baad734cde30405141c14ae5e6734d19038585604051808360ff1660ff1681526020018281526020019250505060405180910390a25050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611dfb57600080fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515611ec757600080fd5b6102c65a03f11515611ed857600080fd5b50505060405180519050505050565b600080600080600080611ef8613282565b600080600080600060149054906101000a900460ff16151515611f1a57600080fd5b611f2333611342565b1515611f2e57600080fd5b611f6b8d8d8080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505060006130b5565b9950611faa8d8d8080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505060146130b5565b985060008a73ffffffffffffffffffffffffffffffffffffffff1614151515611fd257600080fd5b8c8c60288181101515611fe157fe5b90509001357f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f01000000000000000000000000000000000000000000000000000000000000009004975061209c602961208e60348b60ff166130fb90919063ffffffff16565b61312e90919063ffffffff16565b96508c8c8881811015156120ac57fe5b90509001357f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f01000000000000000000000000000000000000000000000000000000000000009004955061218d8d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508761218860018b61312e90919063ffffffff16565b61314c565b945060008860ff1614151561221f576121d98d8d8080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505060296130b5565b93506122188d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050603d611a86565b6001900492505b612227612dc5565b9a506080604051908101604052808a73ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016000600281111561227a57fe5b81526020016060604051908101604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018681526020016000815250815250600360008d6000191660001916815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff0219169083600281111561238257fe5b021790555060608201518160020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550509050508873ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168c600019167fcd20b91aeef8959138131d87dd32347cc073c8ecbf1bf640a6cc20de4dd73a6c8d89604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156124b857808201518184015260208101905061249d565b50505050905090810190601f1680156124e55780820380516001836020036101000a031916815260200191505b50935050505060405180910390a4600191505b8760ff168260ff1610156127255761256b8d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050612566602961255860348760ff166130fb90919063ffffffff16565b61312e90919063ffffffff16565b6130b5565b905060008173ffffffffffffffffffffffffffffffffffffffff161415151561259357600080fd5b6060604051908101604052808273ffffffffffffffffffffffffffffffffffffffff1681526020016126208f8f8080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505061261b603d61260d60348960ff166130fb90919063ffffffff16565b61312e90919063ffffffff16565b611a86565b6001900481526020016000815250600460008d600019166000191681526020019081526020016000206001840360ff166101008110151561265d57fe5b6003020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201559050508073ffffffffffffffffffffffffffffffffffffffff168b600019167f437cde07e12abe2256ac21a104805149aa34a4046bf7c254e868cdbace7b4b6e60405160405180910390a361271e60018360ff16612da190919063ffffffff16565b91506124f8565b8a9a505050505050505050505092915050565b600060036000836000191660001916815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156127b557600080fd5b60018160010160146101000a81548160ff021916908360028111156127d657fe5b021790555081600019167f1f3c0697c3ada95f9e84a917995664b76cd8b4ae5de25e77ee111122ae3a00d060405160405180910390a25050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561286b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156128a757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808273ffffffffffffffffffffffffffffffffffffffff1660036000866000191660001916815260200190815260200160002060020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156129e65760009150612b4b565b600090505b600073ffffffffffffffffffffffffffffffffffffffff166004600086600019166000191681526020019081526020016000208260ff1661010081101515612a2f57fe5b6003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612b27578273ffffffffffffffffffffffffffffffffffffffff166004600086600019166000191681526020019081526020016000208260ff1661010081101515612ab757fe5b6003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612b09576001810160ff169150612b4b565b612b2060018260ff16612da190919063ffffffff16565b90506129eb565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91505b5092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600080600080600080600060036000896000191660001916815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260010160149054906101000a900460ff168360020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846002016001015485600201600201549650965096509650965096505091939550919395565b6000806000600360008560001916600019168152602001908152602001600020600201600101549150600090505b600073ffffffffffffffffffffffffffffffffffffffff166004600086600019166000191681526020019081526020016000208260ff1661010081101515612cec57fe5b6003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612d9757612d776004600086600019166000191681526020019081526020016000208260ff1661010081101515612d6057fe5b60030201600101548361307490919063ffffffff16565b9150612d9060018260ff16612da190919063ffffffff16565b9050612ca8565b8192505050919050565b60008082840190508360ff168160ff1610151515612dbb57fe5b8091505092915050565b6000612e036001600260009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff1661324890919063ffffffff16565b600260006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550612e8b600260009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff1660603073ffffffffffffffffffffffffffffffffffffffff169060020a0261312e90919063ffffffff16565b600102905090565b600081518351141515612ea557600080fd5b600190505b82518160ff16101561306e576000838260ff16815181101515612ec957fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1614151515612ef657600080fd5b606060405190810160405280848360ff16815181101515612f1357fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff168152602001838360ff16815181101515612f4957fe5b90602001906020020151815260200160008152506004600086600019166000191681526020019081526020016000206001830360ff1661010081101515612f8c57fe5b6003020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155905050828160ff16815181101515612fff57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1684600019167f437cde07e12abe2256ac21a104805149aa34a4046bf7c254e868cdbace7b4b6e60405160405180910390a361306760018260ff16612da190919063ffffffff16565b9050612eaa565b50505050565b60008082840190506000831215801561308d5750838112155b806130a357506000831280156130a257508381125b5b15156130ab57fe5b8091505092915050565b60008082101580156130cb575082516014830111155b15156130d657600080fd5b73ffffffffffffffffffffffffffffffffffffffff8260140184015116905092915050565b6000808284029050600084148061311c575082848281151561311957fe5b04145b151561312457fe5b8091505092915050565b600080828401905083811015151561314257fe5b8091505092915050565b613154613282565b61315c613296565b60008460ff1660405180591061316f5750595b9080825280601f01601f19166020018201604052509150600090505b8460ff1681101561323c57858185018151811015156131a657fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000282828151811015156131ff57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061318b565b81925050509392505050565b6000808284019050836bffffffffffffffffffffffff16816bffffffffffffffffffffffff161015151561327857fe5b8091505092915050565b602060405190810160405280600081525090565b6020604051908101604052806000815250905600a165627a7a723058208cd671302811b45e2b64b797024b52111461b66d5b70fbd76fd8ca348cfb1f570029"
}