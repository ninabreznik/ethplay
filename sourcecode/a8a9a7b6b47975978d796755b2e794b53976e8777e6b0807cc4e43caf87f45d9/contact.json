{
  "address": "0x24b8ce20aeb2e68168e389bdb5f4b26bb77ac018",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LGCCoin",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-03\n*/\n\npragma solidity ^0.4.0;\n\ncontract ERC20 {\n    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n    function approve(address _spender, uint _value) public returns (bool);\n    function allowance(address _owner, address _spender) public constant returns (uint);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ncontract ERC223 {\n    function transfer(address _to, uint _value, bytes _data) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n}\n\ncontract ERC223ReceivingContract {\n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\ncontract Token {\n    string internal _symbol;\n    string internal _name;\n    uint8 internal _decimals;\n    uint internal _totalSupply = 1000;\n    mapping (address => uint) internal _balanceOf;\n    mapping (address => mapping (address => uint)) internal _allowances;\n\n    function Token(string symbol, string name, uint8 decimals, uint totalSupply) public {\n        _symbol = symbol;\n        _name = name;\n        _decimals = decimals;\n        _totalSupply = totalSupply;\n    }\n\n    function name() public constant returns (string) {\n        return _name;\n    }\n\n    function symbol() public constant returns (string) {\n        return _symbol;\n    }\n\n    function decimals() public constant returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public constant returns (uint) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address _addr) public constant returns (uint);\n    function transfer(address _to, uint _value) public returns (bool);\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract LGCCoin is Token(\"LGC\", \"LGC-Coin\", 2, 60000000000), ERC20, ERC223 {\n\n    using SafeMath for uint;\n\n    function LGCCoin() public {\n        _balanceOf[msg.sender] = _totalSupply;\n    }\n\n    function totalSupply() public constant returns (uint) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address _addr) public constant returns (uint) {\n        return _balanceOf[_addr];\n    }\n\n    function transfer(address _to, uint _value) public returns (bool) {\n        if (_value > 0 &&\n            _value <= _balanceOf[msg.sender] &&\n            !isContract(_to)) {\n            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        return false;\n    }\n\n    function transfer(address _to, uint _value, bytes _data) public returns (bool) {\n        if (_value > 0 &&\n            _value <= _balanceOf[msg.sender] &&\n            isContract(_to)) {\n            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\n            ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\n            _contract.tokenFallback(msg.sender, _value, _data);\n            Transfer(msg.sender, _to, _value, _data);\n            return true;\n        }\n        return false;\n    }\n\n    function isContract(address _addr) private constant returns (bool) {\n        uint codeSize;\n        assembly {\n            codeSize := extcodesize(_addr)\n        }\n        return codeSize > 0;\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n        if (_allowances[_from][msg.sender] > 0 &&\n            _value > 0 &&\n            _allowances[_from][msg.sender] >= _value &&\n            _balanceOf[_from] >= _value) {\n            _balanceOf[_from] = _balanceOf[_from].sub(_value);\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\n            _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(_value);\n            Transfer(_from, _to, _value);\n            return true;\n        }\n        return false;\n    }\n\n    function approve(address _spender, uint _value) public returns (bool) {\n        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender].add(_value);\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint) {\n        return _allowances[_owner][_spender];\n    }\n}",
  "bytecode": "60606040526103e8600355341561001557600080fd5b604080519081016040908152600382527f4c4743000000000000000000000000000000000000000000000000000000000060208301528051908101604052600881527f4c47432d436f696e00000000000000000000000000000000000000000000000060208201526002640df847580060008480516100989291602001906100e8565b5060018380516100ac9291602001906100e8565b506002805460ff191660ff9390931692909217909155600381905533600160a060020a0316600090815260046020526040902055506101839050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012957805160ff1916838001178555610156565b82800160010185558215610156579182015b8281111561015657825182559160200191906001019061013b565b50610162929150610166565b5090565b61018091905b80821115610162576000815560010161016c565b90565b610a5a806101926000396000f3006060604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100a8578063095ea7b31461013257806318160ddd1461016857806323b872dd1461018d578063313ce567146101b557806370a08231146101de57806395d89b41146101fd578063a9059cbb14610210578063be45fd6214610232578063dd62ed3e14610297575b600080fd5b34156100b357600080fd5b6100bb6102bc565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100f75780820151838201526020016100df565b50505050905090810190601f1680156101245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013d57600080fd5b610154600160a060020a0360043516602435610364565b604051901515815260200160405180910390f35b341561017357600080fd5b61017b610409565b60405190815260200160405180910390f35b341561019857600080fd5b610154600160a060020a036004358116906024351660443561040f565b34156101c057600080fd5b6101c86105c0565b60405160ff909116815260200160405180910390f35b34156101e957600080fd5b61017b600160a060020a03600435166105c9565b341561020857600080fd5b6100bb6105e4565b341561021b57600080fd5b610154600160a060020a0360043516602435610657565b341561023d57600080fd5b61015460048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061075e95505050505050565b34156102a257600080fd5b61017b600160a060020a03600435811690602435166109c8565b6102c4610a1c565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561035a5780601f1061032f5761010080835404028352916020019161035a565b820191906000526020600020905b81548152906001019060200180831161033d57829003601f168201915b5050505050905090565b600160a060020a03338116600090815260056020908152604080832093861683529290529081205461039c908363ffffffff6109f316565b600160a060020a03338116600081815260056020908152604080832094891680845294909152908190209390935590917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60035490565b600160a060020a0380841660009081526005602090815260408083203390941683529290529081205481901180156104475750600082115b801561047a5750600160a060020a0380851660009081526005602090815260408083203390941683529290522054829010155b801561049f5750600160a060020a038416600090815260046020526040902054829010155b156105b557600160a060020a0384166000908152600460205260409020546104cd908363ffffffff610a0216565b600160a060020a038086166000908152600460205260408082209390935590851681522054610502908363ffffffff6109f316565b600160a060020a0380851660009081526004602090815260408083209490945587831682526005815283822033909316825291909152205461054a908363ffffffff610a0216565b600160a060020a03808616600081815260056020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060016105b9565b5060005b9392505050565b60025460ff1690565b600160a060020a031660009081526004602052604090205490565b6105ec610a1c565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561035a5780601f1061032f5761010080835404028352916020019161035a565b600080821180156106805750600160a060020a0333166000908152600460205260409020548211155b8015610692575061069083610a14565b155b1561075557600160a060020a0333166000908152600460205260409020546106c0908363ffffffff610a0216565b600160a060020a0333811660009081526004602052604080822093909355908516815220546106f5908363ffffffff6109f316565b600160a060020a0380851660008181526004602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3506001610403565b50600092915050565b6000806000841180156107895750600160a060020a0333166000908152600460205260409020548411155b8015610799575061079985610a14565b156109bb57600160a060020a0333166000908152600460205260409020546107c7908563ffffffff610a0216565b600160a060020a0333811660009081526004602052604080822093909355908716815220546107fc908563ffffffff6109f316565b600160a060020a03861660008181526004602052604090819020929092558692509063c0ee0b8a90339087908790518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156108ae578082015183820152602001610896565b50505050905090810190601f1680156108db5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15156108fb57600080fd5b6102c65a03f1151561090c57600080fd5b505050826040518082805190602001908083835b6020831061093f5780518252601f199092019160209182019101610920565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902085600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c168760405190815260200160405180910390a4600191506109c0565b600091505b509392505050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b6000828201838110156105b957fe5b600082821115610a0e57fe5b50900390565b6000903b1190565b602060405190810160405260008152905600a165627a7a7230582020cd87a3165cd6b6e5de7d22f41f7528239ac5be3fedacdc106f9214a3cdf7330029"
}