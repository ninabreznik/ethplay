{
  "address": "0xba1fc049c537cbc555eb8020ca98ed8207f5a759",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Game20B",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-25\n*/\n\npragma solidity 0.4.25;\n\ncontract Game20B {\n    using SafeMath for uint;\n    uint public betFirstMin = 5 ether / 100;\n    uint public betFirstMax = 1 ether / 10;\n    uint public bet = betFirstMin;\n    uint public currentMinBet = betFirstMin;\n    uint public percentRaise = 20;\n    address private admin = 0xAF53747Ce9cd5132c52Ab9e9D11259875935C55A;\n    address public player = admin;\n    uint public compensation;\n    bool public first = true;\n    uint public time = 0;\n    uint public waitTime = 24 hours;\n\n    event Withdrawal(address player, uint time, uint value, uint bet);\n    event Bet(address player, uint time, uint bet);\n    event newCircle(address player, uint time, uint compensation);\n\n    function firstBet() private {\n        require(msg.value >= betFirstMin && msg.value <= betFirstMax, 'Wrong ETH value');\n\n        compensation = compensation.add(msg.value);\n\n        player = msg.sender;\n        time = now;\n        bet = msg.value;\n        currentMinBet = bet.mul(percentRaise).div(100).add(bet);\n\n        first = false;\n\n        emit Bet(player, time, bet);\n    }\n\n    function usualBet() private {\n        require(msg.value >= currentMinBet, 'Wrong ETH value');\n\n        uint profit = msg.value.sub(bet);\n\n        player.transfer(profit.mul(10).div(20).add(bet));\n        emit Withdrawal(player, now, profit.mul(10).div(20).add(bet), bet);\n        admin.transfer(profit.mul(1).div(20));\n        compensation = compensation.add(profit.mul(9).div(20));\n\n        player = msg.sender;\n        time = now;\n        bet = msg.value;\n        currentMinBet = bet.mul(percentRaise).div(100).add(bet);\n\n        emit Bet(player, time, bet);\n    }\n\n    function lastBet() private {\n        emit newCircle(player, time, bet);\n\n        if (msg.value >= betFirstMin && msg.value <= betFirstMax) {\n            player.transfer(address(this).balance.sub(msg.value));\n            emit Withdrawal(player, now, address(this).balance.sub(msg.value), bet);\n\n            compensation = 0;\n\n            firstBet();\n        } else {\n            msg.sender.transfer(msg.value);\n            player.transfer(address(this).balance);\n            emit Withdrawal(player, now, address(this).balance, bet);\n\n            compensation = 0;\n            player = admin;\n            bet = betFirstMin;\n            currentMinBet = bet;\n            time = 0;\n            first = true;\n        }\n\n    }\n\n    function() external payable {\n        if (first == true) {\n            firstBet();\n        } else {\n            now >= time + waitTime ? lastBet() : usualBet();\n        }\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "bytecode": "608060405266b1a2bc2ec5000060005567016345785d8a0000600155600054600255600054600355601460045573af53747ce9cd5132c52ab9e9d11259875935c55a600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600860006101000a81548160ff021916908315150217905550600060095562015180600a5534801561011757600080fd5b50610e3e806101276000396000f3006080604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806311610c25146100f457806316ada5471461011f57806330d86a7d1461014a5780633c89a6b9146101755780633df4ddf4146101a057806340d5ff58146101cf57806348db5f89146101fa578063803397c414610251578063ccca123b1461027c578063e7f3074c146102a7575b60011515600860009054906101000a900460ff16151514156100cd576100c86102d2565b6100f2565b600a54600954014210156100e8576100e36104be565b6100f1565b6100f06108cc565b5b5b005b34801561010057600080fd5b50610109610d0d565b6040518082815260200191505060405180910390f35b34801561012b57600080fd5b50610134610d13565b6040518082815260200191505060405180910390f35b34801561015657600080fd5b5061015f610d19565b6040518082815260200191505060405180910390f35b34801561018157600080fd5b5061018a610d1f565b6040518082815260200191505060405180910390f35b3480156101ac57600080fd5b506101b5610d25565b604051808215151515815260200191505060405180910390f35b3480156101db57600080fd5b506101e4610d38565b6040518082815260200191505060405180910390f35b34801561020657600080fd5b5061020f610d3e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561025d57600080fd5b50610266610d64565b6040518082815260200191505060405180910390f35b34801561028857600080fd5b50610291610d6a565b6040518082815260200191505060405180910390f35b3480156102b357600080fd5b506102bc610d70565b6040518082815260200191505060405180910390f35b60005434101580156102e657506001543411155b151561035a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f57726f6e67204554482076616c7565000000000000000000000000000000000081525060200191505060405180910390fd5b61036f34600754610d7690919063ffffffff16565b60078190555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600981905550346002819055506104026002546103f460646103e6600454600254610d9490919063ffffffff16565b610dcf90919063ffffffff16565b610d7690919063ffffffff16565b6003819055506000600860006101000a81548160ff0219169083151502179055507ff41b7910e085d0992d604fd470931728fd77cc8eb504d99e50e51a0a30fcfd1a600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600954600254604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a1565b6000600354341015151561053a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f57726f6e67204554482076616c7565000000000000000000000000000000000081525060200191505060405180910390fd5b61054f60025434610df990919063ffffffff16565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6105c86002546105ba60146105ac600a88610d9490919063ffffffff16565b610dcf90919063ffffffff16565b610d7690919063ffffffff16565b9081150290604051600060405180830381858888f193505050501580156105f3573d6000803e3d6000fd5b507f650fdf669e93aa6c8ff3defe2da9c12b64f1548e5e1e54e803f4c1beb6466c8e600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16426106746002546106666014610658600a89610d9490919063ffffffff16565b610dcf90919063ffffffff16565b610d7690919063ffffffff16565b600254604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a1600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6107306014610722600186610d9490919063ffffffff16565b610dcf90919063ffffffff16565b9081150290604051600060405180830381858888f1935050505015801561075b573d6000803e3d6000fd5b506107976107866014610778600985610d9490919063ffffffff16565b610dcf90919063ffffffff16565b600754610d7690919063ffffffff16565b60078190555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426009819055503460028190555061082a60025461081c606461080e600454600254610d9490919063ffffffff16565b610dcf90919063ffffffff16565b610d7690919063ffffffff16565b6003819055507ff41b7910e085d0992d604fd470931728fd77cc8eb504d99e50e51a0a30fcfd1a600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600954600254604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a150565b7f0fb16972160a5f384470a4019e95223247a51c98da103e8d732674f365c35ea0600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600954600254604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a1600054341015801561097957506001543411155b15610aed57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6109e4343073ffffffffffffffffffffffffffffffffffffffff1631610df990919063ffffffff16565b9081150290604051600060405180830381858888f19350505050158015610a0f573d6000803e3d6000fd5b507f650fdf669e93aa6c8ff3defe2da9c12b64f1548e5e1e54e803f4c1beb6466c8e600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1642610a7f343073ffffffffffffffffffffffffffffffffffffffff1631610df990919063ffffffff16565b600254604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a16000600781905550610ae86102d2565b610d0b565b3373ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610b33573d6000803e3d6000fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610bb3573d6000803e3d6000fd5b507f650fdf669e93aa6c8ff3defe2da9c12b64f1548e5e1e54e803f4c1beb6466c8e600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16423073ffffffffffffffffffffffffffffffffffffffff1631600254604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a16000600781905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005460028190555060025460038190555060006009819055506001600860006101000a81548160ff0219169083151502179055505b565b60025481565b60095481565b60035481565b60045481565b600860009054906101000a900460ff1681565b60075481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b600a5481565b60015481565b6000808284019050838110151515610d8a57fe5b8091505092915050565b6000806000841415610da95760009150610dc8565b8284029050828482811515610dba57fe5b04141515610dc457fe5b8091505b5092915050565b600080600083111515610de157600080fd5b8284811515610dec57fe5b0490508091505092915050565b6000828211151515610e0757fe5b8183039050929150505600a165627a7a72305820fe2da0cb39dc94d31a8ecd8f7966771383d1d04394ba131888b884dd122a4d300029"
}