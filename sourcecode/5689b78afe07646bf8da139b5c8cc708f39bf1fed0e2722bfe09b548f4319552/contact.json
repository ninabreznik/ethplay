{
  "address": "0x8bef82e549c29affcefdb73214ea436fcb98e9fa",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ACO",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-05\n*/\n\npragma solidity ^0.4.17;\n\n//Developed by Zenos Pavlakou\n\nlibrary SafeMath {\n    \n    function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract Ownable {\n    \n    address public owner;\n\n    /**\n     * The address whcih deploys this contrcat is automatically assgined ownership.\n     * */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * Functions with this modifier can only be executed by the owner of the contract. \n     * */\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n}\n\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) constant public returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) constant public returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public  returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract BasicToken is ERC20Basic, Ownable {\n\n    using SafeMath for uint256;\n\n    mapping (address => uint256) balances;\n\n    modifier onlyPayloadSize(uint size) {\n        if (msg.data.length < size + 4) {\n        revert();\n        }\n        _;\n    }\n\n    /**\n     * Transfers ACO tokens from the sender's account to another given account.\n     * \n     * @param _to The address of the recipient.\n     * @param _amount The amount of tokens to send.\n     * */\n    function transfer(address _to, uint256 _amount) public onlyPayloadSize(2 * 32) returns (bool) {\n        require(balances[msg.sender] >= _amount);\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    /**\n     * Returns the balance of a given address.\n     * \n     * @param _addr The address of the balance to query.\n     **/\n    function balanceOf(address _addr) public constant returns (uint256) {\n        return balances[_addr];\n    }\n}\n\n\ncontract AdvancedToken is BasicToken, ERC20 {\n\n    mapping (address => mapping (address => uint256)) allowances;\n\n    /**\n     * Transfers tokens from the account of the owner by an approved spender. \n     * The spender cannot spend more than the approved amount. \n     * \n     * @param _from The address of the owners account.\n     * @param _amount The amount of tokens to transfer.\n     * */\n    function transferFrom(address _from, address _to, uint256 _amount) public onlyPayloadSize(3 * 32) returns (bool) {\n        require(allowances[_from][msg.sender] >= _amount && balances[_from] >= _amount);\n        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_amount);\n        balances[_from] = balances[_from].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(_from, _to, _amount);\n        return true;\n    }\n\n    /**\n     * Allows another account to spend a given amount of tokens on behalf of the \n     * owner's account. If the owner has previously allowed a spender to spend\n     * tokens on his or her behalf and would like to change the approval amount,\n     * he or she will first have to set the allowance back to 0 and then update\n     * the allowance.\n     * \n     * @param _spender The address of the spenders account.\n     * @param _amount The amount of tokens the spender is allowed to spend.\n     * */\n    function approve(address _spender, uint256 _amount) public returns (bool) {\n        require((_amount == 0) || (allowances[msg.sender][_spender] == 0));\n        allowances[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n\n    /**\n     * Returns the approved allowance from an owners account to a spenders account.\n     * \n     * @param _owner The address of the owners account.\n     * @param _spender The address of the spenders account.\n     **/\n    function allowance(address _owner, address _spender) public constant returns (uint256) {\n        return allowances[_owner][_spender];\n    }\n}\n\n\ncontract MintableToken is AdvancedToken {\n\n    bool public mintingFinished;\n\n    event TokensMinted(address indexed to, uint256 amount);\n    event MintingFinished();\n\n    /**\n     * Generates new ACO tokens during the ICO, after which the minting period \n     * will terminate permenantly. This function can only be called by the ICO \n     * contract.\n     * \n     * @param _to The address of the account to mint new tokens to.\n     * @param _amount The amount of tokens to mint. \n     * */\n    function mint(address _to, uint256 _amount) external onlyOwner onlyPayloadSize(2 * 32) returns (bool) {\n        require(_to != 0x0 && _amount > 0 && !mintingFinished);\n        balances[_to] = balances[_to].add(_amount);\n        totalSupply = totalSupply.add(_amount);\n        Transfer(0x0, _to, _amount);\n        TokensMinted(_to, _amount);\n        return true;\n    }\n\n    /**\n     * Terminates the minting period permenantly. This function can only be called\n     * by the ICO contract only when the duration of the ICO has ended. \n     * */\n    function finishMinting() external onlyOwner {\n        require(!mintingFinished);\n        mintingFinished = true;\n        MintingFinished();\n    }\n    \n    /**\n     * Returns true if the minting period has ended, false otherwhise.\n     * */\n    function mintingFinished() public constant returns (bool) {\n        return mintingFinished;\n    }\n}\n\ncontract ACO is MintableToken {\n\n    uint8 public decimals;\n    string public name;\n    string public symbol;\n\n    function ACO() public {\n        totalSupply = 0;\n        decimals = 18;\n        name = \"ACO\";\n        symbol = \"ACO\";\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b60018054600160a060020a03191633600160a060020a0316179055600080556004805461ff00191661120017905560408051908101604052600381527f41434f0000000000000000000000000000000000000000000000000000000000602082015260059080516100849291602001906100d2565b5060408051908101604052600381527f41434f0000000000000000000000000000000000000000000000000000000000602082015260069080516100cc9291602001906100d2565b5061016d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011357805160ff1916838001178555610140565b82800160010185558215610140579182015b82811115610140578251825591602001919060010190610125565b5061014c929150610150565b5090565b61016a91905b8082111561014c5760008155600101610156565b90565b6109868061017c6000396000f3006060604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146100c957806306fdde03146100f0578063095ea7b31461017a57806318160ddd1461019c57806323b872dd146101c1578063313ce567146101e957806340c10f191461021257806370a08231146102345780637d64bcb4146102535780638da5cb5b1461026857806395d89b4114610297578063a9059cbb146102aa578063dd62ed3e146102cc575b600080fd5b34156100d457600080fd5b6100dc6102f1565b604051901515815260200160405180910390f35b34156100fb57600080fd5b6101036102fa565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561013f578082015183820152602001610127565b50505050905090810190601f16801561016c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018557600080fd5b6100dc600160a060020a0360043516602435610398565b34156101a757600080fd5b6101af61043e565b60405190815260200160405180910390f35b34156101cc57600080fd5b6100dc600160a060020a0360043581169060243516604435610444565b34156101f457600080fd5b6101fc6105c6565b60405160ff909116815260200160405180910390f35b341561021d57600080fd5b6100dc600160a060020a03600435166024356105d4565b341561023f57600080fd5b6101af600160a060020a0360043516610714565b341561025e57600080fd5b61026661072f565b005b341561027357600080fd5b61027b610795565b604051600160a060020a03909116815260200160405180910390f35b34156102a257600080fd5b6101036107a4565b34156102b557600080fd5b6100dc600160a060020a036004351660243561080f565b34156102d757600080fd5b6101af600160a060020a0360043581169060243516610907565b60045460ff1690565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103905780601f1061036557610100808354040283529160200191610390565b820191906000526020600020905b81548152906001019060200180831161037357829003601f168201915b505050505081565b60008115806103ca5750600160a060020a03338116600090815260036020908152604080832093871683529290522054155b15156103d557600080fd5b600160a060020a03338116600081815260036020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b60006060606436101561045657600080fd5b600160a060020a03808616600090815260036020908152604080832033909416835292905220548390108015906104a65750600160a060020a038516600090815260026020526040902054839010155b15156104b157600080fd5b600160a060020a03808616600090815260036020908152604080832033909416835292905220546104e8908463ffffffff61093216565b600160a060020a03808716600081815260036020908152604080832033909516835293815283822094909455908152600290925290205461052f908463ffffffff61093216565b600160a060020a038087166000908152600260205260408082209390935590861681522054610564908463ffffffff61094416565b600160a060020a03808616600081815260026020526040908190209390935591908716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b600454610100900460ff1681565b60015460009033600160a060020a039081169116146105f257600080fd5b6040604436101561060257600080fd5b600160a060020a0384161580159061061a5750600083115b8015610629575060045460ff16155b151561063457600080fd5b600160a060020a03841660009081526002602052604090205461065d908463ffffffff61094416565b600160a060020a0385166000908152600260205260408120919091555461068a908463ffffffff61094416565b6000908155600160a060020a038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405190815260200160405180910390a383600160a060020a03167f3f2c9d57c068687834f0de942a9babb9e5acab57d516d3480a3c16ee165a42738460405190815260200160405180910390a25060019392505050565b600160a060020a031660009081526002602052604090205490565b60015433600160a060020a0390811691161461074a57600080fd5b60045460ff161561075a57600080fd5b6004805460ff191660011790557fb828d9b5c78095deeeeff2eca2e5d4fe046ce3feb4c99702624a3fd384ad2dbc60405160405180910390a1565b600154600160a060020a031681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103905780601f1061036557610100808354040283529160200191610390565b60006040604436101561082157600080fd5b600160a060020a0333166000908152600260205260409020548390101561084757600080fd5b600160a060020a033316600090815260026020526040902054610870908463ffffffff61093216565b600160a060020a0333811660009081526002602052604080822093909355908616815220546108a5908463ffffffff61094416565b600160a060020a0380861660008181526002602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a35060019392505050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60008282111561093e57fe5b50900390565b60008282018381101561095357fe5b93925050505600a165627a7a723058202ccd9f253dfd5de038536b3561ddac7c9bb23d6511a8ddece0edd3b3a63509f50029"
}