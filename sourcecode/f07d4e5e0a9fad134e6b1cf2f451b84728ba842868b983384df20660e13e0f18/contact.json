{
  "address": "0x5f81f78b9d5549de7fb024ea66361e0326ce8f03",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "xEuro",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-24\n*/\n\npragma solidity 0.5.7;\n\n/*\n*  xEuro.sol\n*  xEUR tokens smart contract\n*  implements [ERC-20 Token Standard](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md)\n*  ver. 1.0.5\n*  2019-04-24\n*  https://xeuro.online\n*  address: https://etherscan.io/address/0x5f81f78b9d5549de7fb024ea66361e0326ce8f03\n*  deployed on block: 7630934\n*  solc version :  0.5.7+commit.6da8b019\n**/\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n* see: https://github.com/ethereum/EIPs/issues/677\n*/\ncontract TokenRecipient {\n\n    function tokenFallback(address _from, uint256 _value, bytes calldata _extraData) external returns (bool);\n\n}\n\n/*\n* see: https://www.cryptonomica.net/#!/verifyEthAddress/\n* in our smart contract every new admin should have a verified identity on cryptonomica.net\n*/\ncontract CryptonomicaVerification {\n\n    // returns 0 if verification is not revoked\n    function revokedOn(address _address) external view returns (uint unixTime);\n\n    function keyCertificateValidUntil(address _address) external view returns (uint unixTime);\n\n}\n\ncontract xEuro {\n\n    /**\n    * see: https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/BasicToken.sol\n    */\n    using SafeMath for uint256;\n\n    CryptonomicaVerification public cryptonomicaVerification;\n\n    /* --- ERC-20 variables ----- */\n\n    /**\n    * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#name\n    * function name() constant returns (string name)\n    */\n    string public constant name = \"xEuro\";\n\n    /**\n    * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#symbol\n    * function symbol() constant returns (string symbol)\n    */\n    string public constant symbol = \"xEUR\";\n\n    /**\n    * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#decimals\n    * function decimals() constant returns (uint8 decimals)\n    */\n    uint8 public constant decimals = 0; // 1 token = â‚¬1, no smaller unit\n\n    /**\n    * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#totalsupply\n    * function totalSupply() constant returns (uint256 totalSupply)\n    * we start with zero\n    */\n    uint256 public totalSupply = 0;\n\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#balanceof\n    // function balanceOf(address _owner) constant returns (uint256 balance)\n    mapping(address => uint256) public balanceOf;\n\n    /**\n    * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#allowance\n    * function allowance(address _owner, address _spender) constant returns (uint256 remaining)\n    */\n    mapping(address => mapping(address => uint256)) public allowance;\n\n\n    /* --- administrative variables */\n\n    /**\n    * addresses that are admins in this smart contracts\n    * admin can assign and revoke authority to perform functions (mint, burn, transfer) in this contract\n    * for other addresses and for himself\n    */\n    mapping(address => bool) public isAdmin;\n\n    /**\n    * addresses that can mint tokens\n    */\n    mapping(address => bool) public canMint;\n\n    /**\n    * addresses allowed to transfer tokens from contract's own address to another address\n    * for example after tokens were minted, they can be transferred to user\n    * (tokenholder of new (fresh minted) tokens is always this smart contract itself)\n    */\n    mapping(address => bool) public canTransferFromContract;\n\n    /**\n    * addresses allowed to burn tokens\n    * tokens can burned only if their tokenholder is smart contract itself\n    * nobody can burn tokens owned by user\n    */\n    mapping(address => bool) public canBurn;\n\n    /* --- ERC-20 events */\n\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#events\n\n    /**\n    * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#transfer-1\n    */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n    * event we fire when data are sent from this smart contract to other smart contract\n    * @param _from will be msg.sender\n    * @param _toContract address of smart contract information is sent to\n    * @param _extraData any data that msg.sender sends to another smart contract\n    */\n    event DataSentToAnotherContract(address indexed _from, address indexed _toContract, bytes _extraData);\n\n    /* --- ERC-20 Functions */\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#methods\n\n    /**\n    * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#transfer\n    */\n    function transfer(address _to, uint256 _value) public returns (bool){\n        return transferFrom(msg.sender, _to, _value);\n    }\n\n    /**\n    * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#transferfrom\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\n\n        // Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event (ERC-20)\n        // Variables of uint type cannot be negative. Thus, comparing uint variable with zero (greater than or equal) is redundant\n        // require(_value >= 0);\n\n        // The function SHOULD throw unless the _from account has deliberately authorized the sender of the message via some mechanism\n        require(\n            msg.sender == _from\n        || _value <= allowance[_from][msg.sender]\n        || (_from == address(this) && canTransferFromContract[msg.sender]),\n            \"Sender not authorized\");\n\n        // check if _from account have required amount\n        require(_value <= balanceOf[_from], \"Account doesn't have required amount\");\n\n        if (_to == address(this)) {// tokens sent to smart contract itself (for exchange to fiat)\n\n            // (!) only token holder can send tokens to smart contract address to get fiat, not using allowance\n            require(_from == msg.sender, \"Only token holder can do this\");\n\n            require(_value >= minExchangeAmount, \"Value is less than min. exchange amount\");\n\n            // this event used by our bot to monitor tokens that have to be burned and to make a fiat payment\n            // bot also verifies this information checking 'tokensInTransfer' mapping, which contains the same data\n            tokensInEventsCounter++;\n            emit TokensIn(\n                _from,\n                _value,\n                tokensInEventsCounter\n            );\n\n            // here we write information about this transfer\n            // (the same as in event, but stored in contract variable and with timestamp)\n            tokensInTransfer[tokensInEventsCounter].from = _from;\n            tokensInTransfer[tokensInEventsCounter].value = _value;\n            // timestamp:\n            tokensInTransfer[tokensInEventsCounter].receivedOn = now;\n\n        }\n\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n\n        // If allowance used, change allowances correspondingly\n        if (_from != msg.sender && _from != address(this)) {\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        }\n\n        emit Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    /*  ---------- Interaction with other contracts  */\n\n    /**\n    * https://github.com/ethereum/EIPs/issues/677\n    * transfer tokens with additional info to another smart contract, and calls its correspondent function\n    * this may be used, for example, to convert this tokens to another tokens via decentralized exchange\n    * @param _to - another smart contract address\n    * @param _value - number of tokens\n    * @param _extraData - data to send to another contract\n    */\n    function transferAndCall(address _to, uint256 _value, bytes memory _extraData) public returns (bool){\n\n        TokenRecipient receiver = TokenRecipient(_to);\n\n        if (transferFrom(msg.sender, _to, _value)) {\n\n            if (receiver.tokenFallback(msg.sender, _value, _extraData)) {\n                emit DataSentToAnotherContract(msg.sender, _to, _extraData);\n                return true;\n            }\n\n        }\n        return false;\n    }\n\n    /**\n    * the same as above ('transferAndCall'), but for all tokens on user account\n    * for example for converting ALL tokens of user account to another tokens\n    */\n    function transferAllAndCall(address _to, bytes calldata _extraData) external returns (bool){\n        return transferAndCall(_to, balanceOf[msg.sender], _extraData);\n    }\n\n    /* --- Administrative functions */\n\n    /*\n    * @param from old address\n    * @param to new address\n    * @param by who made a change\n    */\n    event CryptonomicaArbitrationContractAddressChanged(address from, address to, address indexed by);\n\n    /*\n    * @param _newAddress address of new contract to be used to verify identity of new admins\n    */\n    function changeCryptonomicaVerificationContractAddress(address _newAddress) public returns (bool) {\n\n        require(isAdmin[msg.sender], \"Only admin can do that\");\n\n        emit CryptonomicaArbitrationContractAddressChanged(address(cryptonomicaVerification), _newAddress, msg.sender);\n\n        cryptonomicaVerification = CryptonomicaVerification(_newAddress);\n\n        return true;\n    }\n\n    /**\n   * @param by who added new admin\n   * @param newAdmin address of new admin\n   */\n    event AdminAdded(address indexed by, address indexed newAdmin);\n\n    function addAdmin(address _newAdmin) public returns (bool){\n\n        require(isAdmin[msg.sender], \"Only admin can do that\");\n\n        require(cryptonomicaVerification.keyCertificateValidUntil(_newAdmin) > now, \"New admin has to be verified on Cryptonomica.net\");\n\n        // revokedOn returns uint256 (unix time), it's 0 if verification is not revoked\n        require(cryptonomicaVerification.revokedOn(_newAdmin) == 0, \"Verification for this address was revoked, can not add\");\n\n        isAdmin[_newAdmin] = true;\n\n        emit AdminAdded(msg.sender, _newAdmin);\n\n        return true;\n    }\n\n    /**\n    * @param by an address who removed admin\n    * @param _oldAdmin address of the admin removed\n    */\n    event AdminRemoved(address indexed by, address indexed _oldAdmin);\n\n    function removeAdmin(address _oldAdmin) external returns (bool){\n\n        require(isAdmin[msg.sender], \"Only admin can do that\");\n\n        // prevents from deleting the last admin (can be multisig smart contract) by itself:\n        require(msg.sender != _oldAdmin, \"Admin can't remove himself\");\n\n        isAdmin[_oldAdmin] = false;\n        emit AdminRemoved(msg.sender, _oldAdmin);\n\n        return true;\n    }\n\n    /**\n    * minimum amount of tokens than can be exchanged to fiat\n    * can be changed by admin\n    */\n    uint256 public minExchangeAmount;\n\n    /**\n    * @param by address who made a change\n    * @param from value before the change\n    * @param to value after the change\n    */\n    event MinExchangeAmountChanged (address indexed by, uint256 from, uint256 to);\n\n    /**\n    * @param _minExchangeAmount new value of minimum amount of tokens that can be exchanged to fiat\n    * only admin can make this change\n    */\n    function changeMinExchangeAmount(uint256 _minExchangeAmount) public returns (bool){\n\n        require(isAdmin[msg.sender], \"Only admin can do that\");\n\n        uint256 from = minExchangeAmount;\n        minExchangeAmount = _minExchangeAmount;\n        emit MinExchangeAmountChanged(msg.sender, from, minExchangeAmount);\n        return true;\n    }\n\n    /**\n    * @param by who add permission to mint (only admin can do this)\n    * @param newAddress address that was authorized to mint new tokens\n    */\n    event AddressAddedToCanMint(address indexed by, address indexed newAddress);\n\n    /**\n    * Add permission to mint new tokens to address _newAddress\n    */\n    function addToCanMint(address _newAddress) public returns (bool){\n\n        require(isAdmin[msg.sender], \"Only admin can do that\");\n\n        canMint[_newAddress] = true;\n        emit AddressAddedToCanMint(msg.sender, _newAddress);\n        return true;\n    }\n\n    event AddressRemovedFromCanMint(address indexed by, address indexed removedAddress);\n\n    function removeFromCanMint(address _addressToRemove) external returns (bool){\n\n        require(isAdmin[msg.sender], \"Only admin can do that\");\n\n        canMint[_addressToRemove] = false;\n        emit AddressRemovedFromCanMint(msg.sender, _addressToRemove);\n        return true;\n    }\n\n    /**\n    * @param by who add permission (should be admin)\n    * @param newAddress address that got permission\n    */\n    event AddressAddedToCanTransferFromContract(address indexed by, address indexed newAddress);\n\n    function addToCanTransferFromContract(address _newAddress) public returns (bool){\n\n        require(isAdmin[msg.sender], \"Only admin can do that\");\n\n        canTransferFromContract[_newAddress] = true;\n        emit AddressAddedToCanTransferFromContract(msg.sender, _newAddress);\n        return true;\n    }\n\n    event AddressRemovedFromCanTransferFromContract(address indexed by, address indexed removedAddress);\n\n    function removeFromCanTransferFromContract(address _addressToRemove) external returns (bool){\n\n        require(isAdmin[msg.sender], \"Only admin can do that\");\n\n        canTransferFromContract[_addressToRemove] = false;\n        emit AddressRemovedFromCanTransferFromContract(msg.sender, _addressToRemove);\n        return true;\n    }\n\n    /**\n    * @param by who add permission (should be admin)\n    * @param newAddress address that got permission\n    */\n    event AddressAddedToCanBurn(address indexed by, address indexed newAddress);\n\n    function addToCanBurn(address _newAddress) public returns (bool){\n\n        require(isAdmin[msg.sender], \"Only admin can do that\");\n\n        canBurn[_newAddress] = true;\n        emit AddressAddedToCanBurn(msg.sender, _newAddress);\n        return true;\n    }\n\n    event AddressRemovedFromCanBurn(address indexed by, address indexed removedAddress);\n\n    function removeFromCanBurn(address _addressToRemove) external returns (bool){\n\n        require(isAdmin[msg.sender], \"Only admin can do that\");\n\n        canBurn[_addressToRemove] = false;\n        emit AddressRemovedFromCanBurn(msg.sender, _addressToRemove);\n        return true;\n    }\n\n    /* ---------- Create and burn tokens  */\n\n    /**\n    * number (id) for MintTokensEvent\n    */\n    uint public mintTokensEventsCounter = 0;\n\n    /**\n    * struct used to write information about every transaction that mint new tokens (we call it 'MintTokensEvent')\n    * every 'MintTokensEvent' has its number (mintTokensEventsCounter)\n    */\n    struct MintTokensEvent {\n        address mintedBy; // address that minted tokens (msg.sender)\n        uint256 fiatInPaymentId; // reference to fiat transfer (deposit)\n        uint value;  // number of new tokens minted\n        uint on;    // UnixTime\n        uint currentTotalSupply; // new value of totalSupply\n    }\n\n    /**\n    * keep all fiat tx ids, to prevent minting tokens twice (or more times) for the same fiat deposit\n    * @param uint256 reference (id) of fiat deposit\n    * @param bool if true tokens already were minted for this fiat deposit\n    * (see: require(!fiatInPaymentIds[fiatInPaymentId]); in function mintTokens\n    */\n    mapping(uint256 => bool) public fiatInPaymentIds;\n\n    /**\n    * here we can find a MintTokensEvent by fiatInPaymentId,\n    * so we now if tokens were minted for given incoming fiat payment, and if yes when and how many\n    * @param uint256 reference (id) of fiat deposit\n    */\n    mapping(uint256 => MintTokensEvent) public fiatInPaymentsToMintTokensEvent;\n\n    /**\n    * here we store MintTokensEvent with its ordinal numbers (mintTokensEventsCounter)\n    * @param uint256 > mintTokensEventsCounter\n    */\n    mapping(uint256 => MintTokensEvent) public mintTokensEvent;\n\n    /**\n    * an event with the same information as in struct MintTokensEvent\n    */\n    event TokensMinted(\n        address indexed by, // who minted new tokens\n        uint256 indexed fiatInPaymentId, // reference to fiat payment (deposit)\n        uint value, // number of new minted tokens\n        uint currentTotalSupply, // totalSupply value after new tokens were minted\n        uint indexed mintTokensEventsCounter //\n    );\n\n    /**\n    * tokens should be minted to contracts own address, (!) after that tokens should be transferred using transferFrom\n    * @param value number of tokens to create\n    * @param fiatInPaymentId fiat payment (deposit) id\n    */\n    function mintTokens(uint256 value, uint256 fiatInPaymentId) public returns (bool){\n\n        require(canMint[msg.sender], \"Sender not authorized\");\n\n        // require that this fiatInPaymentId was not used before:\n        require(!fiatInPaymentIds[fiatInPaymentId], \"This fiat payment id is already used\");\n\n        // Variables of uint type cannot be negative. Thus, comparing uint variable with zero (greater than or equal) is redundant\n        // require(value >= 0);\n\n        // this is the moment when new tokens appear in the system\n        totalSupply = totalSupply.add(value);\n\n        // first token holder of fresh minted tokens is the contract itself\n        // (than tokens have to be transferred from contract address to user address)\n        balanceOf[address(this)] = balanceOf[address(this)].add(value);\n\n        mintTokensEventsCounter++;\n        mintTokensEvent[mintTokensEventsCounter].mintedBy = msg.sender;\n        mintTokensEvent[mintTokensEventsCounter].fiatInPaymentId = fiatInPaymentId;\n        mintTokensEvent[mintTokensEventsCounter].value = value;\n        mintTokensEvent[mintTokensEventsCounter].on = block.timestamp;\n        mintTokensEvent[mintTokensEventsCounter].currentTotalSupply = totalSupply;\n\n        // fiatInPaymentId => struct mintTokensEvent\n        fiatInPaymentsToMintTokensEvent[fiatInPaymentId] = mintTokensEvent[mintTokensEventsCounter];\n\n        emit TokensMinted(msg.sender, fiatInPaymentId, value, totalSupply, mintTokensEventsCounter);\n\n        // mark fiatInPaymentId as used to mint tokens\n        fiatInPaymentIds[fiatInPaymentId] = true;\n\n        return true;\n    }\n\n    /**\n    * mint and transfer new tokens to user in one tx\n    * requires msg.sender to have both 'canMint' and 'canTransferFromContract' permissions\n    * @param _value number of new tokens to create (to mint)\n    * @param fiatInPaymentId id of fiat payment (deposit) received for new tokens\n    * @param _to receiver of new tokens\n    */\n    function mintAndTransfer(uint256 _value, uint256 fiatInPaymentId, address _to) public returns (bool){\n\n        if (mintTokens(_value, fiatInPaymentId) && transferFrom(address(this), _to, _value)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /* -- Exchange tokens to fiat (tokens sent to contract owns address > fiat payment) */\n\n    /**\n    * number for every 'event' when we receive tokens to contract own address for exchange to fiat\n    */\n    uint public tokensInEventsCounter = 0;\n\n    /**\n    * @param from who sent tokens for exchange\n    * @param value number of tokens received for exchange\n    * @param receivedOn timestamp (UnixTime)\n    */\n    struct TokensInTransfer {// <<< used in 'transfer'\n        address from; //\n        uint value;   //\n        uint receivedOn; // unix time\n    }\n\n    /**\n    * @param uint256 < tokensInEventsCounter\n    */\n    mapping(uint256 => TokensInTransfer) public tokensInTransfer;\n\n    /**\n    * @param from address that sent tokens for exchange to fiat\n    * @param value number of tokens received\n    * @param tokensInEventsCounter number of event\n    */\n    event TokensIn(\n        address indexed from,\n        uint256 value,\n        uint256 indexed tokensInEventsCounter\n    );\n\n    /**\n    * we also count every every token burning\n    */\n    uint public burnTokensEventsCounter = 0;//\n\n    /**\n    * @param by who burned tokens\n    * @param value number of tokens burned\n    * @param tokensInEventId corresponding id on tokensInEvent, after witch tokens were burned\n    * @param fiatOutPaymentId id of outgoing fiat payment to user\n    * @param burnedOn timestamp (unix time)\n    * @param currentTotalSupply totalSupply after tokens were burned\n    */\n    struct burnTokensEvent {\n        address by; //\n        uint256 value;   //\n        uint256 tokensInEventId;\n        uint256 fiatOutPaymentId;\n        uint256 burnedOn; // UnixTime\n        uint256 currentTotalSupply;\n    }\n\n    /*\n    * @param uint256 < burnTokensEventsCounter\n    */\n    mapping(uint256 => burnTokensEvent) public burnTokensEvents;\n\n    /**\n    *  we count every fiat payment id used when burn tokens to prevent using it twice\n    */\n    mapping(uint256 => bool) public fiatOutPaymentIdsUsed; //\n\n    /*\n    * smart contract event with the same data as in struct burnTokensEvent\n    */\n    event TokensBurned(\n        address indexed by,\n        uint256 value,\n        uint256 indexed tokensInEventId, // this is the same as uint256 indexed tokensInEventsCounter in event TokensIn\n        uint256 indexed fiatOutPaymentId,\n        uint burnedOn, // UnixTime\n        uint currentTotalSupply\n    );\n\n    /**\n    * (!) only contract's own tokens (balanceOf[this]) can be burned\n    * @param value number of tokens to burn\n    * @param tokensInEventId reference to tokensInEventsCounter value for incoming tokens event (tokensInEvent)\n    * @param fiatOutPaymentId id of outgoing fiat payment (from the bank)\n    */\n    function burnTokens(\n        uint256 value,\n        uint256 tokensInEventId, // this is the same as uint256 indexed tokensInEventsCounter in event TokensIn\n        uint256 fiatOutPaymentId\n    ) public returns (bool){\n\n        // Variables of uint type cannot be negative. Thus, comparing uint variable with zero (greater than or equal) is redundant\n        // require(value >= 0);\n\n        require(canBurn[msg.sender], \"Sender not authorized\");\n        require(balanceOf[address(this)] >= value, \"Account does not have required amount\");\n\n        // require(!tokensInEventIdsUsed[tokensInEventId]);\n        require(!fiatOutPaymentIdsUsed[fiatOutPaymentId], \"This fiat payment id is already used\");\n\n        balanceOf[address(this)] = balanceOf[address(this)].sub(value);\n        totalSupply = totalSupply.sub(value);\n\n        burnTokensEventsCounter++;\n        burnTokensEvents[burnTokensEventsCounter].by = msg.sender;\n        burnTokensEvents[burnTokensEventsCounter].value = value;\n        burnTokensEvents[burnTokensEventsCounter].tokensInEventId = tokensInEventId;\n        burnTokensEvents[burnTokensEventsCounter].fiatOutPaymentId = fiatOutPaymentId;\n        burnTokensEvents[burnTokensEventsCounter].burnedOn = block.timestamp;\n        burnTokensEvents[burnTokensEventsCounter].currentTotalSupply = totalSupply;\n\n        emit TokensBurned(msg.sender, value, tokensInEventId, fiatOutPaymentId, block.timestamp, totalSupply);\n\n        fiatOutPaymentIdsUsed[fiatOutPaymentId] = true;\n\n        return true;\n    }\n\n    /* ---------- Constructor */\n    constructor() public {// Constructor must be public or internal\n\n        // initial admin:\n        isAdmin[msg.sender] = true;\n\n        addToCanMint(msg.sender);\n        addToCanTransferFromContract(msg.sender);\n        addToCanBurn(msg.sender);\n\n        changeCryptonomicaVerificationContractAddress(0x846942953c3b2A898F10DF1e32763A823bf6b27f);\n        addAdmin(0xD851d045d8Aee53EF24890afBa3d701163AcbC8B);\n\n        // to test main functions and events (can be removed in production, or can be not):\n        changeMinExchangeAmount(12);\n        mintAndTransfer(12, 0, msg.sender);\n        transfer(msg.sender, 12);\n        transfer(address(this), 12);\n        burnTokens(12, 1, 0);\n\n    }\n\n}",
  "bytecode": "",
  "constructorArguments": "4163636f756e7420646f65736e2774206861766520726571756972656420616d6f756e74546869732066696174207061796d656e7420696420697320616c726561647920757365644163636f756e7420646f6573206e6f74206861766520726571756972656420616d6f756e744f6e6c792061646d696e2063616e20646f2074686174000000000000000000004e65772061646d696e2068617320746f206265207665726966696564206f6e2043727970746f6e6f6d6963612e6e657456616c7565206973206c657373207468616e206d696e2e2065786368616e676520616d6f756e74566572696669636174696f6e20666f722074686973206164647265737320776173207265766f6b65642c2063616e206e6f7420616464"
}