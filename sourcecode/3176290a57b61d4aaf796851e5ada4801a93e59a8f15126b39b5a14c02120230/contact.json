{
  "address": "0xd3f04e421771e92a5026affdda5aba80952917a0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RFToken",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-04\n*/\n\npragma solidity 0.4.11;\n\n\n\n\ncontract ERC20Interface {\n\tuint256 public totalSupply;\n\tfunction balanceOf(address _owner) public constant returns (uint balance); // Get the account balance of another account with address _owner\n\tfunction transfer(address _to, uint256 _value) public returns (bool success); // Send _value amount of tokens to address _to\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success); // Send _value amount of tokens from address _from to address _to\n\tfunction approve(address _spender, uint256 _value) public returns (bool success);\n\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining); // Returns the amount which _spender is still allowed to withdraw from _owner\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value); // Triggered when tokens are transferred.\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value); // Triggered whenever approve(address _spender, uint256 _value) is called.\n}\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\tfunction mul(uint256 a, uint256 b) internal constant returns (uint256) {\n\t\tuint256 c = a * b;\n\t\tassert(a == 0 || c / a == b);\n\t\treturn c;\n\t}\n\n\n\n\n\tfunction div(uint256 a, uint256 b) internal constant returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\tuint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn c;\n\t}\n\n\n\n\n\tfunction sub(uint256 a, uint256 b) internal constant returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\n\n\n\tfunction add(uint256 a, uint256 b) internal constant returns (uint256) {\n\t\tuint256 c = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\ncontract ERC20Token is ERC20Interface {\n\tusing SafeMath for uint256;\n\n\n\n\n\tmapping (address => uint) balances;\n\tmapping (address => mapping (address => uint256)) allowed;\n\n\n\n\n\tmodifier onlyPayloadSize(uint size) {\n\t\trequire(msg.data.length >= (size + 4));\n\t\t_;\n\t}\n\n\n\n\n\tfunction () public{\n\t\trevert();\n\t}\n\n\n\n\n\tfunction balanceOf(address _owner) public constant returns (uint balance) {\n\t\treturn balances[_owner];\n\t}\n\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n\t\treturn allowed[_owner][_spender];\n\t}\n\n\n\n\n\tfunction transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) returns (bool success) {\n\t\t_transferFrom(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\tfunction transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) returns (bool) {\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\t\t_transferFrom(_from, _to, _value);\n\t\treturn true;\n\t}\n\tfunction _transferFrom(address _from, address _to, uint256 _value) internal {\n\t\trequire(_value > 0);\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tTransfer(_from, _to, _value);\n\t}\n\n\n\n\n\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n\t\trequire((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\t\tallowed[msg.sender][_spender] = _value;\n\t\tApproval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n}\n\n\n\n\ncontract owned {\n\taddress public owner;\n\n\n\n\n\tfunction owned() public {\n\t\towner = msg.sender;\n\t}\n\n\n\n\n\tmodifier onlyOwner {\n\t\tif (msg.sender != owner) revert();\n\t\t_;\n\t}\n\n\n\n\n\tfunction transferOwnership(address newOwner) public onlyOwner {\n\t\towner = newOwner;\n\t}\n}\n\n\n\n\n\n\n\n\ncontract RFToken is ERC20Token, owned{\n\tusing SafeMath for uint256;\n\n\n\n\n\tstring public name = 'RF Token';\n\tstring public symbol = 'RF';\n\tuint8 public decimals = 8;\n\tuint256 public totalSupply = 8625000000000000;//86250000 * 10^8\n\n\n\n\n\tfunction RFToken() public {\n\t\tbalances[this] = totalSupply;\n\t}\n\n\n\n\n\tfunction setTokens(address target, uint256 _value) public onlyOwner {\n\t\tbalances[this] = balances[this].sub(_value);\n\t\tbalances[target] = balances[target].add(_value);\n\t\tTransfer(this, target, _value);\n\t}\n\n\n\n\n\tfunction burnBalance() public onlyOwner {\n\t\ttotalSupply = totalSupply.sub(balances[this]);\n\t\tTransfer(this, address(0), balances[this]);\n\t\tbalances[this] = 0;\n\t}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnBalance\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052604060405190810160405280600881526020017f524620546f6b656e000000000000000000000000000000000000000000000000815250600490805190602001906200005292919062000163565b50604060405190810160405280600281526020017f524600000000000000000000000000000000000000000000000000000000000081525060059080519060200190620000a192919062000163565b506008600660006101000a81548160ff021916908360ff160217905550661ea4644d3010006007553415620000d257fe5b5b5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600754600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b62000212565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001a657805160ff1916838001178555620001d7565b82800160010185558215620001d7579182015b82811115620001d6578251825591602001919060010190620001b9565b5b509050620001e69190620001ea565b5090565b6200020f91905b808211156200020b576000816000905550600101620001f1565b5090565b90565b61109f80620002226000396000f300606060405236156100c3576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d9578063095ea7b31461017257806318160ddd146101c957806323b872dd146101ef578063313ce5671461026557806370a08231146102915780638da5cb5b146102db57806395d89b411461032d578063a9059cbb146103c6578063bac796511461041d578063bc68fad91461045c578063dd62ed3e1461046e578063f2fde38b146104d7575b34156100cb57fe5b6100d75b60006000fd5b565b005b34156100e157fe5b6100e961050d565b6040518080602001828103825283818151815260200191508051906020019080838360008314610138575b80518252602083111561013857602082019150602081019050602083039250610114565b505050905090810190601f1680156101645780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017a57fe5b6101af600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506105ab565b604051808215151515815260200191505060405180910390f35b34156101d157fe5b6101d9610735565b6040518082815260200191505060405180910390f35b34156101f757fe5b61024b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061073b565b604051808215151515815260200191505060405180910390f35b341561026d57fe5b61027561087e565b604051808260ff1660ff16815260200191505060405180910390f35b341561029957fe5b6102c5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610891565b6040518082815260200191505060405180910390f35b34156102e357fe5b6102eb6108db565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561033557fe5b61033d610901565b604051808060200182810382528381815181526020019150805190602001908083836000831461038c575b80518252602083111561038c57602082019150602081019050602083039250610368565b505050905090810190601f1680156103b85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103ce57fe5b610403600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061099f565b604051808215151515815260200191505060405180910390f35b341561042557fe5b61045a600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109d2565b005b341561046457fe5b61046c610bc4565b005b341561047657fe5b6104c1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d69565b6040518082815260200191505060405180910390f35b34156104df57fe5b61050b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610df1565b005b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105a35780601f10610578576101008083540402835291602001916105a3565b820191906000526020600020905b81548152906001019060200180831161058657829003601f168201915b505050505081565b6000600082148061063857506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156106445760006000fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b60075481565b60006060600481016000369050101515156107565760006000fd5b6107e583600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e9490919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610870858585610eae565b600191505b5b509392505050565b600660009054906101000a900460ff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109975780601f1061096c57610100808354040283529160200191610997565b820191906000526020600020905b81548152906001019060200180831161097a57829003601f168201915b505050505081565b60006040600481016000369050101515156109ba5760006000fd5b6109c5338585610eae565b600191505b5b5092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a2f5760006000fd5b610a8181600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e9490919063ffffffff16565b600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b1681600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461105390919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c215760006000fd5b610c75600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600754610e9490919063ffffffff16565b600781905550600073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36000600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e4e5760006000fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b6000828211151515610ea257fe5b81830390505b92915050565b600081111515610ebe5760006000fd5b610f1081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e9490919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fa581600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461105390919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b505050565b60006000828401905083811015151561106857fe5b8091505b50929150505600a165627a7a72305820dcf2bcce21e9bdbcab29969719c497e9ddc5335f9b0c4e8efd604b2e8e43faa90029"
}