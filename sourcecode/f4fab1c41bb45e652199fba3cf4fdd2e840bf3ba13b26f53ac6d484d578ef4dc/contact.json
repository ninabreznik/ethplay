{
  "address": "0x3a762bf32b432fe26fa1344899a328de94077845",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Asset",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "10000",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-01\n*/\n\n// This software is a subject to Ambisafe License Agreement.\n// No use or distribution is allowed without written permission from Ambisafe.\n// https://www.ambisafe.co/terms-of-use/\n\npragma solidity 0.4.15;\n\ncontract AssetInterface {\n    function _performTransferWithReference(address _to, uint _value, string _reference, address _sender) returns(bool);\n    function _performTransferToICAPWithReference(bytes32 _icap, uint _value, string _reference, address _sender) returns(bool);\n    function _performApprove(address _spender, uint _value, address _sender) returns(bool);    \n    function _performTransferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) returns(bool);\n    function _performTransferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender) returns(bool);\n    function _performGeneric(bytes, address) payable {\n        revert();\n    }\n}\n\ncontract AssetProxy {\n    function _forwardApprove(address _spender, uint _value, address _sender) returns(bool);\n    function _forwardTransferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) returns(bool);\n    function _forwardTransferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender) returns(bool);\n    function balanceOf(address _owner) constant returns(uint);\n}\n\ncontract Bytes32 {\n    function _bytes32(string _input) internal constant returns(bytes32 result) {\n        assembly {\n            result := mload(add(_input, 32))\n        }\n    }\n}\n\ncontract ReturnData {\n    function _returnReturnData(bool _success) internal {\n        assembly {\n            let returndatastart := msize()\n            mstore(0x40, add(returndatastart, returndatasize))\n            returndatacopy(returndatastart, 0, returndatasize)\n            switch _success case 0 { revert(returndatastart, returndatasize) } default { return(returndatastart, returndatasize) }\n        }\n    }\n\n    function _assemblyCall(address _destination, uint _value, bytes _data) internal returns(bool success) {\n        assembly {\n            success := call(div(mul(gas, 63), 64), _destination, _value, add(_data, 32), mload(_data), 0, 0)\n        }\n    }\n}\n\n\n/**\n * @title EToken2 Asset implementation contract.\n *\n * Basic asset implementation contract, without any additional logic.\n * Every other asset implementation contracts should derive from this one.\n * Receives calls from the proxy, and calls back immediatly without arguments modification.\n *\n * Note: all the non constant functions return false instead of throwing in case if state change\n * didn't happen yet.\n */\ncontract Asset is AssetInterface, Bytes32, ReturnData {\n    // Assigned asset proxy contract, immutable.\n    AssetProxy public proxy;\n\n    /**\n     * Only assigned proxy is allowed to call.\n     */\n    modifier onlyProxy() {\n        if (proxy == msg.sender) {\n            _;\n        }\n    }\n\n    /**\n     * Sets asset proxy address.\n     *\n     * Can be set only once.\n     *\n     * @param _proxy asset proxy contract address.\n     *\n     * @return success.\n     * @dev function is final, and must not be overridden.\n     */\n    function init(AssetProxy _proxy) returns(bool) {\n        if (address(proxy) != 0x0) {\n            return false;\n        }\n        proxy = _proxy;\n        return true;\n    }\n\n    /**\n     * Passes execution into virtual function.\n     *\n     * Can only be called by assigned asset proxy.\n     *\n     * @return success.\n     * @dev function is final, and must not be overridden.\n     */\n    function _performTransferWithReference(address _to, uint _value, string _reference, address _sender) onlyProxy() returns(bool) {\n        return _transferWithReference(_to, _value, _reference, _sender);\n    }\n\n    /**\n     * Calls back without modifications.\n     *\n     * @return success.\n     * @dev function is virtual, and meant to be overridden.\n     */\n    function _transferWithReference(address _to, uint _value, string _reference, address _sender) internal returns(bool) {\n        return proxy._forwardTransferFromWithReference(_sender, _to, _value, _reference, _sender);\n    }\n\n    /**\n     * Passes execution into virtual function.\n     *\n     * Can only be called by assigned asset proxy.\n     *\n     * @return success.\n     * @dev function is final, and must not be overridden.\n     */\n    function _performTransferToICAPWithReference(bytes32 _icap, uint _value, string _reference, address _sender) onlyProxy() returns(bool) {\n        return _transferToICAPWithReference(_icap, _value, _reference, _sender);\n    }\n\n    /**\n     * Calls back without modifications.\n     *\n     * @return success.\n     * @dev function is virtual, and meant to be overridden.\n     */\n    function _transferToICAPWithReference(bytes32 _icap, uint _value, string _reference, address _sender) internal returns(bool) {\n        return proxy._forwardTransferFromToICAPWithReference(_sender, _icap, _value, _reference, _sender);\n    }\n\n    /**\n     * Passes execution into virtual function.\n     *\n     * Can only be called by assigned asset proxy.\n     *\n     * @return success.\n     * @dev function is final, and must not be overridden.\n     */\n    function _performTransferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) onlyProxy() returns(bool) {\n        return _transferFromWithReference(_from, _to, _value, _reference, _sender);\n    }\n\n    /**\n     * Calls back without modifications.\n     *\n     * @return success.\n     * @dev function is virtual, and meant to be overridden.\n     */\n    function _transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) internal returns(bool) {\n        return proxy._forwardTransferFromWithReference(_from, _to, _value, _reference, _sender);\n    }\n\n    /**\n     * Passes execution into virtual function.\n     *\n     * Can only be called by assigned asset proxy.\n     *\n     * @return success.\n     * @dev function is final, and must not be overridden.\n     */\n    function _performTransferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender) onlyProxy() returns(bool) {\n        return _transferFromToICAPWithReference(_from, _icap, _value, _reference, _sender);\n    }\n\n    /**\n     * Calls back without modifications.\n     *\n     * @return success.\n     * @dev function is virtual, and meant to be overridden.\n     */\n    function _transferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender) internal returns(bool) {\n        return proxy._forwardTransferFromToICAPWithReference(_from, _icap, _value, _reference, _sender);\n    }\n\n    /**\n     * Passes execution into virtual function.\n     *\n     * Can only be called by assigned asset proxy.\n     *\n     * @return success.\n     * @dev function is final, and must not be overridden.\n     */\n    function _performApprove(address _spender, uint _value, address _sender) onlyProxy() returns(bool) {\n        return _approve(_spender, _value, _sender);\n    }\n\n    /**\n     * Calls back without modifications.\n     *\n     * @return success.\n     * @dev function is virtual, and meant to be overridden.\n     */\n    function _approve(address _spender, uint _value, address _sender) internal returns(bool) {\n        return proxy._forwardApprove(_spender, _value, _sender);\n    }\n\n    /**\n     * Passes execution into virtual function.\n     *\n     * Can only be called by assigned asset proxy.\n     *\n     * @return bytes32 result.\n     * @dev function is final, and must not be overridden.\n     */\n    function _performGeneric(bytes _data, address _sender) payable onlyProxy() {\n        _generic(_data, msg.value, _sender);\n    }\n\n    modifier onlyMe() {\n        if (this == msg.sender) {\n            _;\n        }\n    }\n\n    // Most probably the following should never be redefined in child contracts.\n    address genericSender;\n    function _generic(bytes _data, uint _value, address _msgSender) internal {\n        // Restrict reentrancy.\n        require(genericSender == 0x0);\n        genericSender = _msgSender;\n        bool success = _assemblyCall(address(this), _value, _data);\n        delete genericSender;\n        _returnReturnData(success);\n    }\n\n    // Decsendants should use _sender() instead of msg.sender to properly process proxied calls.\n    function _sender() constant internal returns(address) {\n        return this == msg.sender ? genericSender : msg.sender;\n    }\n\n    // Interface functions to allow specifying ICAP addresses as strings.\n    function transferToICAP(string _icap, uint _value) returns(bool) {\n        return transferToICAPWithReference(_icap, _value, '');\n    }\n\n    function transferToICAPWithReference(string _icap, uint _value, string _reference) returns(bool) {\n        return _transferToICAPWithReference(_bytes32(_icap), _value, _reference, _sender());\n    }\n\n    function transferFromToICAP(address _from, string _icap, uint _value) returns(bool) {\n        return transferFromToICAPWithReference(_from, _icap, _value, '');\n    }\n\n    function transferFromToICAPWithReference(address _from, string _icap, uint _value, string _reference) returns(bool) {\n        return _transferFromToICAPWithReference(_from, _bytes32(_icap), _value, _reference, _sender());\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferFromToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performGeneric\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferFromToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"}]",
  "bytecode": "6060604052341561000f57600080fd5b5b6110898061001f6000396000f300606060405236156100b75763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631962df7181146100bc57806319ab453c1461015a5780637609c5a91461019a57806381d434e91461021c57806384c5c34d146102835780639ab253cc1461034e578063c10796df146103fe578063cca9702514610486578063db00b8481461052b578063e34f71371461058b578063eb58705b146105d5578063ec55688914610676575b600080fd5b34156100c757600080fd5b6101466004803573ffffffffffffffffffffffffffffffffffffffff169060248035919060649060443590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505050923573ffffffffffffffffffffffffffffffffffffffff1692506106b2915050565b604051901515815260200160405180910390f35b341561016557600080fd5b61014673ffffffffffffffffffffffffffffffffffffffff600435166106f0565b604051901515815260200160405180910390f35b34156101a557600080fd5b6101466004803573ffffffffffffffffffffffffffffffffffffffff169060446024803590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650509335935061076092505050565b604051901515815260200160405180910390f35b341561022757600080fd5b61014660046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650509335935061078692505050565b604051901515815260200160405180910390f35b341561028e57600080fd5b6101466004803573ffffffffffffffffffffffffffffffffffffffff169060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496506107aa95505050505050565b604051901515815260200160405180910390f35b341561035957600080fd5b61014660046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496506107d395505050505050565b604051901515815260200160405180910390f35b341561040957600080fd5b610146600480359060248035919060649060443590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505050923573ffffffffffffffffffffffffffffffffffffffff1692506107fa915050565b604051901515815260200160405180910390f35b341561049157600080fd5b61014673ffffffffffffffffffffffffffffffffffffffff6004803582169160248035909116916044359160849060643590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505050923573ffffffffffffffffffffffffffffffffffffffff169250610838915050565b604051901515815260200160405180910390f35b61058960046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505050923573ffffffffffffffffffffffffffffffffffffffff169250610878915050565b005b341561059657600080fd5b61014673ffffffffffffffffffffffffffffffffffffffff60043581169060243590604435166108ae565b604051901515815260200160405180910390f35b34156105e057600080fd5b6101466004803573ffffffffffffffffffffffffffffffffffffffff169060248035916044359160849060643590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505050923573ffffffffffffffffffffffffffffffffffffffff1692506108ea915050565b604051901515815260200160405180910390f35b341561068157600080fd5b61068961092a565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b600080543373ffffffffffffffffffffffffffffffffffffffff908116911614156106e6576106e385858585610946565b90505b5b5b949350505050565b6000805473ffffffffffffffffffffffffffffffffffffffff16156107175750600061075b565b50600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617905560015b919050565b600061077c8484846020604051908101604052600081526107aa565b90505b9392505050565b60006107a183836020604051908101604052600081526107d3565b90505b92915050565b60006106e3856107b986610a86565b85856107c3610a95565b610af0565b90505b949350505050565b600061077c6107e185610a86565b84846107eb610a95565b610c30565b90505b9392505050565b600080543373ffffffffffffffffffffffffffffffffffffffff908116911614156106e6576106e385858585610c30565b90505b5b5b949350505050565b600080543373ffffffffffffffffffffffffffffffffffffffff9081169116141561086d5761086a8686868686610d6f565b90505b5b5b95945050505050565b6000543373ffffffffffffffffffffffffffffffffffffffff908116911614156108a7576108a7823483610eb0565b5b5b5b5050565b600080543373ffffffffffffffffffffffffffffffffffffffff9081169116141561077f5761077c848484610f5b565b90505b5b5b9392505050565b600080543373ffffffffffffffffffffffffffffffffffffffff9081169116141561086d5761086a8686868686610af0565b90505b5b5b95945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6000805473ffffffffffffffffffffffffffffffffffffffff166314cba002838787878387604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff881602815273ffffffffffffffffffffffffffffffffffffffff80871660048301908152868216602484015260448301869052908316608483015260a060648301908152909160a40184818151815260200191508051906020019080838360005b83811015610a125780820151818401525b6020016109f9565b50505050905090810190601f168015610a3f5780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b1515610a6157600080fd5b6102c65a03f11515610a7257600080fd5b50505060405180519150505b949350505050565b6000602082015190505b919050565b60003373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610ad05733610aea565b60015473ffffffffffffffffffffffffffffffffffffffff165b90505b90565b6000805473ffffffffffffffffffffffffffffffffffffffff16639b487f3f878787878787604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff881602815273ffffffffffffffffffffffffffffffffffffffff808716600483019081526024830187905260448301869052908316608483015260a060648301908152909160a40184818151815260200191508051906020019080838360005b83811015610bbb5780820151818401525b602001610ba2565b50505050905090810190601f168015610be85780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b1515610c0a57600080fd5b6102c65a03f11515610c1b57600080fd5b50505060405180519150505b95945050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff16639b487f3f838787878387604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff881602815273ffffffffffffffffffffffffffffffffffffffff808716600483019081526024830187905260448301869052908316608483015260a060648301908152909160a40184818151815260200191508051906020019080838360005b83811015610a125780820151818401525b6020016109f9565b50505050905090810190601f168015610a3f5780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b1515610a6157600080fd5b6102c65a03f11515610a7257600080fd5b50505060405180519150505b949350505050565b6000805473ffffffffffffffffffffffffffffffffffffffff166314cba002878787878787604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff881602815273ffffffffffffffffffffffffffffffffffffffff80871660048301908152868216602484015260448301869052908316608483015260a060648301908152909160a40184818151815260200191508051906020019080838360005b83811015610bbb5780820151818401525b602001610ba2565b50505050905090810190601f168015610be85780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b1515610c0a57600080fd5b6102c65a03f11515610c1b57600080fd5b50505060405180519150505b95945050505050565b60015460009073ffffffffffffffffffffffffffffffffffffffff1615610ed657600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416179055610f2130848661101d565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690559050610f548161103c565b5b50505050565b6000805473ffffffffffffffffffffffffffffffffffffffff16637bcdc2f085858585604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff861602815273ffffffffffffffffffffffffffffffffffffffff938416600482015260248101929092529091166044820152606401602060405180830381600087803b1515610ff957600080fd5b6102c65a03f1151561100a57600080fd5b50505060405180519150505b9392505050565b600080600083516020850186886040603f5a0204f190505b9392505050565b593d81016040523d6000823e818015611053573d82f35b3d82fd5b50505b505600a165627a7a72305820653254c2279ec2738953b9d066039ff18579755e3c70588c18daa3a19f9728f80029"
}