{
  "address": "0x959529102cfde07b1196bd27adedc196d75f84f6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BLO",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-18\n*/\n\npragma solidity ^0.4.19;\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\ncontract BLO{\n    using SafeMath for uint256;\n\n    uint256 constant MAX_UINT256 = 2**256 - 1;\n    uint256 _initialAmount = 0;\n    address  public contract_owner;\n    uint256 public exchangeRate = 7000;                    // exchangeRate for public sale, token per ETH\n    bool public icoOpen = false;                           // whether ICO is open and accept public investment\n\n    uint256 public publicToken = 110000000;                // 45% of total, for public sale\n    uint256 public bountyToken = 12070000;                 // bounty use\n    uint256 public airdropToken = 50430000 + 2500000;      // 20% + 1% of total, airdrop use including bonus\n    uint256 public reserveMember = 6450000;                // Reserve for new members and future M&D\n    uint256 public reservedFounder = 12000000;             // Future Founder & Advisor\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    // lock struct for member\n    struct lock {\n        uint256 amount;\n        uint256 duration;    \n    }    \n    // lock struct for founder\n    struct founderLock {\n        uint256 amount;\n        uint256 startTime;\n        uint remainRound;\n        uint totalRound;\n        uint256 period;\n    }\n    \n    mapping (address => lock) public lockance;\n    mapping (address => founderLock) public founderLockance;\n    \n\n    \n    // uint256 totalSupply;\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Unlock(address _sender, uint256 _amount);\n    event FounderUnlock(address _sender, uint256 _amount);\n    \n    \n    \n    \n    /*\n    NOTE:\n    The following variables are OPTIONAL vanities. One does not have to include them.\n    */\n    string public name = \"PABLOCoin\";                   //fancy name: eg Simon Bucks\n    uint8 public decimals = 0;                //How many decimals to show.\n    string public symbol = \"BLO\";                 //An identifier: eg SBX\n\n    /**\n      * @dev Fix for the ERC20 short address attack.\n      */\n      modifier onlyPayloadSize(uint size) {\n          require(msg.data.length >= size + 4);\n          _;\n      }\n      modifier  onlyOwner() { \n          require(msg.sender == contract_owner); \n          _; \n      }\n      modifier inIco() { \n          require(icoOpen==true); \n          _; \n      }\n      \n      \n\n    function BLO() public {\n        // set sender as contract_owner\n        contract_owner = msg.sender;\n\n        // token distribution, 56550000 in this part\n        address Wayne = 0x1A33cDA3cF3d9b7318B105171115F799ac3e986D;\n        address Sophie = 0xd4AFd732Da602Fc44e99B4c3285B46D9369F2Beb;\n        address Calvin = 0xa34cB9F691B939b7C137CaC3C11907c9bE5F7Ae9;\n        address Marsh = 0x042bD518576C7fEDF26870D7C65f9ff2597c9935;\n        address Chris = 0x050992436F5048F5C5B48Db0e8593DE48521b35A;\n        address Josh = 0x11ae09350b18ea810bc7fd6892612a63c641d641;\n        address LM = 0x8Dd1cDD513b05D07726a6F8C75b57602991a9c34;\n        address TJ = 0xdd36FBf1C0A63759892FeAE493f4AaB9dc23cE54;\n        address Chuck1 = 0xb5d93E0cE63E7B7cE8fD5A89e8a7E217721Ad5Fa;\n        address Chuck2 = 0xE76c0618Dd52403ad1907D3BCbF930226bFEa46B;\n        address Tom1 = 0x52103e8bbDfcFB49d978CE8F4a0b862e0F14dC7E;\n        address Tom2 = 0xeF2f04dbd3E3aD126979646383c94Fd29E29de9F;\n\n        balances[msg.sender] += 1000000/2;\n        transfer(Wayne, 1000000/2);\n        setLock(Wayne, 1000000/2, 60 days);\n        _initialAmount += 1000000;\n\n        balances[msg.sender] += 1000000/2;\n        transfer(Sophie, 1000000/2);\n        setLock(Sophie, 1000000/2, 60 days);\n        _initialAmount += 1000000;\n\n        balances[msg.sender] += 1000000/2;\n        transfer(Calvin, 1000000/2);\n        setLock(Calvin, 1000000/2, 60 days);\n        _initialAmount += 1000000;\n\n        balances[msg.sender] += 2600000/2;\n        transfer(Marsh, 2600000/2);\n        setLock(Marsh, 2600000/2, 60 days);\n        _initialAmount += 2600000;\n\n        balances[msg.sender] += 50000/2;\n        transfer(Chris, 50000/2);\n        setLock(Chris, 50000/2, 60 days);\n        _initialAmount += 50000;\n\n        balances[msg.sender] += 1000000/2;\n        transfer(Josh, 1000000/2);\n        setLock(Josh, 1000000/2, 60 days);\n        _initialAmount += 1000000;\n\n        balances[msg.sender] += 5100000/2;\n        transfer(LM, 5100000/2);\n        setLock(LM, 5100000/2, 60 days);\n        _initialAmount += 5100000;\n\n        balances[msg.sender] += 1800000/2;\n        transfer(TJ, 1800000/2);\n        setLock(TJ, 1800000/2, 60 days);\n        _initialAmount += 1800000;\n\n        balances[msg.sender] += 9000000;\n        transfer(Chuck1, 9000000);\n        setFounderLock(Chuck2, 12500000, 6, 180 days);\n        _initialAmount += 12500000 + 9000000;\n\n        balances[msg.sender] += 9000000;\n        transfer(Tom1, 9000000);\n        setFounderLock(Tom2, 12500000, 6, 180 days);\n        _initialAmount += 12500000 + 9000000;\n    }\n    function totalSupply() constant returns (uint256 _totalSupply){\n        _totalSupply = _initialAmount;\n      }\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        //Default assumes totalSupply can't be over max (2^256 - 1).\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n        //Replace the if with this one instead.\n        //require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n        }\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n        //require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n        uint256 allowance = allowed[_from][msg.sender];\n        require(balances[_from] >= _value && allowance >= _value);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        if (allowance < MAX_UINT256) {\n            allowed[_from][msg.sender] -= _value;\n        }\n        Transfer(_from, _to, _value);\n        return true;\n        }\n\n    function balanceOf(address _owner) view public returns (uint256 balance) {\n        return balances[_owner];\n        }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n        }\n\n    function allowance(address _owner, address _spender)\n    view public returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n        }\n\n    function multisend(address[] addrs,  uint256 _value)\n    {\n        uint length = addrs.length;\n        require(_value * length <= balances[msg.sender]);\n        uint i = 0;\n        while (i < length) {\n           transfer(addrs[i], _value);\n           i ++;\n        }\n        \n      }\n    function multAirdrop(address[] addrs,  uint256 _value) onlyOwner\n    {\n        uint length = addrs.length;\n        uint256 totalToken = _value * length;\n        require(totalToken <= airdropToken);\n        balances[contract_owner] += totalToken;\n        uint i = 0;\n        while (i < length) {\n           transfer(addrs[i], _value);\n           i ++;\n        }\n        _initialAmount += totalToken;\n        airdropToken -= totalToken;\n        \n      }\n    // lock token in specified address for some time\n    // _address: locked address\n    // _value: locked token\n    // _time: when it could be unlocked\n    function setLock(address _address, uint256 _value, uint256 _time) internal onlyOwner {\n        lockance[_address].amount = _value;\n        lockance[_address].duration = now + _time;\n      }\n    \n    // lock token of founder for periodically release\n    // _address: founder address; \n    // _value: totoal locked token; \n    // _round: rounds founder could withdraw; \n    // _period: interval time between two rounds\n    function setFounderLock(address _address, uint256 _value, uint _round, uint256 _period)  internal onlyOwner{\n        founderLockance[_address].amount = _value.div(_round);\n        founderLockance[_address].startTime = now;\n        founderLockance[_address].remainRound = _round;\n        founderLockance[_address].totalRound = _round;\n        founderLockance[_address].period = _period;\n    }\n    \n    // allow locked token to be obtained for member\n    function unlock () {\n        require(now >= lockance[msg.sender].duration);\n        uint256 _amount = lockance[msg.sender].amount;\n        balances[msg.sender] += lockance[msg.sender].amount;\n        lockance[msg.sender].amount = 0;\n        Unlock(msg.sender, _amount);\n    }\n    // allow locked token to be obtained for founder \n    function unlockFounder (uint _round) {\n        require(now >= founderLockance[msg.sender].startTime + _round * founderLockance[msg.sender].period);\n        require(founderLockance[msg.sender].remainRound > 0);\n        require(founderLockance[msg.sender].totalRound - founderLockance[msg.sender].remainRound < _round);\n        uint256 _amount = founderLockance[msg.sender].amount;\n        balances[msg.sender] += _amount;\n        founderLockance[msg.sender].remainRound --;\n        FounderUnlock(msg.sender, _amount);\n    }\n    \n    // starts ICO\n    function openIco () onlyOwner{\n        icoOpen = true;\n      }\n    // ends ICO \n    function closeIco () onlyOwner inIco{\n        icoOpen = false;\n      }\n\n    // transfer all unsold token to bounty balance;\n    function weAreClosed () onlyOwner{\n        bountyToken += publicToken;\n        publicToken = 0;\n    }\n    // change rate of public sale\n    function changeRate (uint256 _rate) onlyOwner{\n        require(_rate >= 5000 && _rate <= 8000);    //in case of mistypo :)\n        exchangeRate = _rate;\n    }\n    \n    \n    // add a new member and give him/her some token\n    function addMember (address _member, uint256 _value) onlyOwner{\n        require(_value <= reserveMember);\n        reserveMember -= _value;\n        balances[contract_owner] += _value;\n        transfer(_member, _value);\n        _initialAmount += _value;\n    }\n    // add a new founder/advisor and give him/her some token\n    function addFounder (address _founder, uint256 _value) onlyOwner{\n        require(_value <= reservedFounder);\n        reservedFounder -= _value;\n        balances[contract_owner] += _value;\n        transfer(_founder, _value);\n        _initialAmount += _value;\n    }\n    // obtain bounty token \n    function obtainBounty (address _receiver, uint256 _value) onlyOwner{\n        require(_value <= bountyToken);\n        balances[_receiver] += _value;\n        _initialAmount += _value;\n        bountyToken -= _value;\n    }\n    \n    \n    //  withdraw ETH from contract\n    function withdraw() onlyOwner{\n        contract_owner.transfer(this.balance);\n      }\n    // fallback function for receive ETH during ICO\n    function () payable inIco{\n        uint256 tokenChange = (msg.value * exchangeRate).div(10**18);\n        require(tokenChange <= publicToken);\n        balances[msg.sender] += tokenChange;\n        _initialAmount += tokenChange;\n        publicToken = publicToken.sub(tokenChange);\n      }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockance\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedFounder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"founderLockance\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"remainRound\",\"type\":\"uint256\"},{\"name\":\"totalRound\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"multisend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveMember\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_founder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"weAreClosed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"unlockFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"multAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"obtainBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FounderUnlock\",\"type\":\"event\"}]",
  "bytecode": "606060405260008055611b586002556000600360006101000a81548160ff02191690831515021790555063068e778060045562b82c70600555630327a5d060065562626b5060075562b71b006008556040805190810160405280600981526020017f5041424c4f436f696e0000000000000000000000000000000000000000000000815250600d90805190602001906200009b92919062000d9f565b506000600e60006101000a81548160ff021916908360ff1602179055506040805190810160405280600381526020017f424c4f0000000000000000000000000000000000000000000000000000000000815250600f90805190602001906200010592919062000d9f565b5034156200011257600080fd5b60008060008060008060008060008060008033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550731a33cda3cf3d9b7318b105171115f799ac3e986d9b5073d4afd732da602fc44e99b4c3285b46d9369f2beb9a5073a34cb9f691b939b7c137cac3c11907c9be5f7ae9995073042bd518576c7fedf26870d7c65f9ff2597c9935985073050992436f5048f5c5b48db0e8593de48521b35a97507311ae09350b18ea810bc7fd6892612a63c641d6419650738dd1cdd513b05d07726a6f8c75b57602991a9c34955073dd36fbf1c0a63759892feae493f4aab9dc23ce54945073b5d93e0ce63e7b7ce8fd5a89e8a7e217721ad5fa935073e76c0618dd52403ad1907d3bcbf930226bfea46b92507352103e8bbdfcfb49d978ce8f4a0b862e0f14dc7e915073ef2f04dbd3e3ad126979646383c94fd29e29de9f90506207a120600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550620002ec8c6207a1206200094f6401000000000262001a81176401000000009004565b50620003148c6207a120624f1a0062000aa96401000000000262001e8a176401000000009004565b620f424060008082825401925050819055506207a120600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550620003998b6207a1206200094f6401000000000262001a81176401000000009004565b50620003c18b6207a120624f1a0062000aa96401000000000262001e8a176401000000009004565b620f424060008082825401925050819055506207a120600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550620004468a6207a1206200094f6401000000000262001a81176401000000009004565b506200046e8a6207a120624f1a0062000aa96401000000000262001e8a176401000000009004565b620f424060008082825401925050819055506213d620600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550620004f3896213d6206200094f6401000000000262001a81176401000000009004565b506200051b896213d620624f1a0062000aa96401000000000262001e8a176401000000009004565b6227ac4060008082825401925050819055506161a8600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506200059e886161a86200094f6401000000000262001a81176401000000009004565b50620005c5886161a8624f1a0062000aa96401000000000262001e8a176401000000009004565b61c35060008082825401925050819055506207a120600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555062000649876207a1206200094f6401000000000262001a81176401000000009004565b5062000671876207a120624f1a0062000aa96401000000000262001e8a176401000000009004565b620f424060008082825401925050819055506226e8f0600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550620006f6866226e8f06200094f6401000000000262001a81176401000000009004565b506200071e866226e8f0624f1a0062000aa96401000000000262001e8a176401000000009004565b624dd1e06000808282540192505081905550620dbba0600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550620007a385620dbba06200094f6401000000000262001a81176401000000009004565b50620007cb85620dbba0624f1a0062000aa96401000000000262001e8a176401000000009004565b621b7740600080828254019250508190555062895440600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506200085084628954406200094f6401000000000262001a81176401000000009004565b506200087a8362bebc20600662ed4e0062000b9b6401000000000262001f7b176401000000009004565b6301481060600080828254019250508190555062895440600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506200090082628954406200094f6401000000000262001a81176401000000009004565b506200092a8162bebc20600662ed4e0062000b9b6401000000000262001f7b176401000000009004565b6301481060600080828254019250508190555050505050505050505050505062000e4e565b600081600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515620009a057600080fd5b81600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000b0657600080fd5b81600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550804201600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000bf857600080fd5b62000c1b828462000d836401000000000262000a25179091906401000000009004565b600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555042600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555081600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555080600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018190555050505050565b600080828481151562000d9257fe5b0490508091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000de257805160ff191683800117855562000e13565b8280016001018555821562000e13579182015b8281111562000e1257825182559160200191906001019062000df5565b5b50905062000e22919062000e26565b5090565b62000e4b91905b8082111562000e4757600081600090555060010162000e2d565b5090565b90565b61217e8062000e5e6000396000f30060606040526004361061018b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461025b578063095ea7b3146102e95780630ba8ebec14610343578063158f7f5c1461039757806318160ddd146103c057806318f729da146103e957806323b872dd146104525780632d4147e3146104cb5780632dc9ad7f146104f457806330e8b96314610557578063313ce56714610580578063384f58eb146105af5780633ba0b9a9146106045780633ccfd60b1461062d57806348546971146106425780634d06068a146106575780634ee3dc911461068057806370a08231146106a957806374e7493b146106f6578063846786f1146107195780638fa906b21461072e578063927a90da1461077057806395d89b411461079d57806396dfcc211461082b57806398041ea314610840578063a69df4b514610882578063a6d40d3914610897578063a9059cbb146108ba578063b897b4f514610914578063dd62ed3e14610977578063ee8bd224146109e3575b600060011515600360009054906101000a900460ff1615151415156101af57600080fd5b6101ce670de0b6b3a76400006002543402610a2590919063ffffffff16565b905060045481111515156101e157600080fd5b80600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080600080828254019250508190555061025281600454610a4090919063ffffffff16565b60048190555050005b341561026657600080fd5b61026e610a59565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102ae578082015181840152602081019050610293565b50505050905090810190601f1680156102db5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102f457600080fd5b610329600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610af7565b604051808215151515815260200191505060405180910390f35b341561034e57600080fd5b61037a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610be9565b604051808381526020018281526020019250505060405180910390f35b34156103a257600080fd5b6103aa610c0d565b6040518082815260200191505060405180910390f35b34156103cb57600080fd5b6103d3610c13565b6040518082815260200191505060405180910390f35b34156103f457600080fd5b610420600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c1c565b604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b341561045d57600080fd5b6104b1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c52565b604051808215151515815260200191505060405180910390f35b34156104d657600080fd5b6104de610eec565b6040518082815260200191505060405180910390f35b34156104ff57600080fd5b610555600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019091905050610ef2565b005b341561056257600080fd5b61056a610f8b565b6040518082815260200191505060405180910390f35b341561058b57600080fd5b610593610f91565b604051808260ff1660ff16815260200191505060405180910390f35b34156105ba57600080fd5b6105c2610fa4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561060f57600080fd5b610617610fca565b6040518082815260200191505060405180910390f35b341561063857600080fd5b610640610fd0565b005b341561064d57600080fd5b6106556110a7565b005b341561066257600080fd5b61066a611142565b6040518082815260200191505060405180910390f35b341561068b57600080fd5b610693611148565b6040518082815260200191505060405180910390f35b34156106b457600080fd5b6106e0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061114e565b6040518082815260200191505060405180910390f35b341561070157600080fd5b6107176004808035906020019091905050611197565b005b341561072457600080fd5b61072c61121c565b005b341561073957600080fd5b61076e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611295565b005b341561077b57600080fd5b61078361139f565b604051808215151515815260200191505060405180910390f35b34156107a857600080fd5b6107b06113b2565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107f05780820151818401526020810190506107d5565b50505050905090810190601f16801561081d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561083657600080fd5b61083e611450565b005b341561084b57600080fd5b610880600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506114c8565b005b341561088d57600080fd5b6108956115d2565b005b34156108a257600080fd5b6108b860048080359060200190919050506117af565b005b34156108c557600080fd5b6108fa600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611a81565b604051808215151515815260200191505060405180910390f35b341561091f57600080fd5b610975600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019091905050611bda565b005b341561098257600080fd5b6109cd600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611d26565b6040518082815260200191505060405180910390f35b34156109ee57600080fd5b610a23600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611dad565b005b6000808284811515610a3357fe5b0490508091505092915050565b6000828211151515610a4e57fe5b818303905092915050565b600d8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610aef5780601f10610ac457610100808354040283529160200191610aef565b820191906000526020600020905b815481529060010190602001808311610ad257829003601f168201915b505050505081565b600081600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600b6020528060005260406000206000915090508060000154908060010154905082565b60085481565b60008054905090565b600c6020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154905085565b600080600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610d235750828110155b1515610d2e57600080fd5b82600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555082600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015610e7b5782600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60055481565b60008083519150600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482840211151515610f4957600080fd5b600090505b81811015610f8557610f778482815181101515610f6757fe5b9060200190602002015184611a81565b508080600101915050610f4e565b50505050565b60075481565b600e60009054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561102c57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015156110a557600080fd5b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561110357600080fd5b60011515600360009054906101000a900460ff16151514151561112557600080fd5b6000600360006101000a81548160ff021916908315150217905550565b60065481565b60045481565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111f357600080fd5b61138881101580156112075750611f408111155b151561121257600080fd5b8060028190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561127857600080fd5b6001600360006101000a81548160ff021916908315150217905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112f157600080fd5b600854811115151561130257600080fd5b806008600082825403925050819055508060096000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555061138b8282611a81565b508060008082825401925050819055505050565b600360009054906101000a900460ff1681565b600f8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114485780601f1061141d57610100808354040283529160200191611448565b820191906000526020600020905b81548152906001019060200180831161142b57829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114ac57600080fd5b6004546005600082825401925050819055506000600481905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561152457600080fd5b600754811115151561153557600080fd5b806007600082825403925050819055508060096000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506115be8282611a81565b508060008082825401925050819055505050565b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154421015151561162557600080fd5b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055507f6381d9813cabeb57471b5a7e05078e64845ccdb563146a6911d536f24ce960f13382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150565b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401548202600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015401421015151561184857600080fd5b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015411151561189957600080fd5b81600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301540310151561192d57600080fd5b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905080600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008154809291906001900391905055507f09d03d90545d2ed6aa0cc5365506a63d1a32a8ef263b0995364bef1661ff07f53382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b600081600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611ad157600080fd5b81600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c3b57600080fd5b8451925082840291506006548211151515611c5557600080fd5b8160096000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600090505b82811015611d0057611cf28582815181101515611ce257fe5b9060200190602002015185611a81565b508080600101915050611cc9565b816000808282540192505081905550816006600082825403925050819055505050505050565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e0957600080fd5b6005548111151515611e1a57600080fd5b80600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806000808282540192505081905550806005600082825403925050819055505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ee657600080fd5b81600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550804201600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611fd757600080fd5b611fea8284610a2590919063ffffffff16565b600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555042600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555081600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555080600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550505050505600a165627a7a7230582029db6166b5b59e9f45a05f927608ff8dc1ccda69456ff06fcc750bd76be69f4d0029"
}