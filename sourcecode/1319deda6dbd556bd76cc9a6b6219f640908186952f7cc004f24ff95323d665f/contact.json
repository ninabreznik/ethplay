{
  "address": "0xb6fc6e2385d55ccb83e297bd92e2bd89795b47a3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PonyCore",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-28\n*/\n\npragma solidity ^0.4.25;\n\ncontract ERC721 {\n    function totalSupply() public view returns (uint256 total);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function ownerOf(uint256 _tokenId) external view   returns (address owner);\n    // ownerof\n    // deploy:  public ->external\n    // test : external -> public\n    function approve(address _to, uint256 _tokenId) external;\n    function transfer(address _to, uint256 _tokenId) external;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n\n    event Transfer(address from, address to, uint256 tokenId);\n    event Approval(address owner, address approved, uint256 tokenId);\n\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n\n}\n\n\n\n\ncontract ClockAuctionBase {\n\n    //@dev 옥션이 생성되었을 때 발생하는 이벤트\n    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\n    //@dev 옥션이 성공하였을 때 발생하는 이벤트\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\n    //@dev 옥션이 취소하였을 때 발생하는 이벤트\n    event AuctionCancelled(uint256 tokenId);\n\n    //@dev 옥션 정보를 가지고 있는 구조체\n    struct Auction {\n        //seller의 주소\n        address seller;\n        // 경매 시작 가격\n        uint128 startingPrice;\n        // 경매 종료 가격\n        uint128 endingPrice;\n        // 경매 기간\n        uint64 duration;\n        // 경매 시작 시점\n        uint64 startedAt;\n    }\n\n    //@dev ERC721 PonyCore의 주소\n    ERC721 public nonFungibleContract;\n\n    //@dev 수수료율\n    uint256 public ownerCut;\n\n    //@dev Pony Id에 해당하는 옥션 정보를 가지고 있는 테이블\n    mapping(uint256 => Auction) tokenIdToAuction;\n\n    //@dev 요청한 주소가 토큰 아이디(포니)를 소유하고 있는지 확인하기 위한 internal Method\n    //@param _claimant  요청한 주소\n    //@param _tokenId  포니 아이디\n    function _owns(address _claimant, uint256 _tokenId)\n    internal\n    view\n    returns (bool)\n    {\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\n    }\n\n\n    //@dev PonyCore Contract에 id에 해당하는 pony를 escrow 시키는 internal method\n    //@param _owner  소유자 주소\n    //@param _tokenId  포니 아이디\n    function _escrow(address _owner, uint256 _tokenId)\n    internal\n    {\n        nonFungibleContract.transferFrom(_owner, this, _tokenId);\n    }\n\n    //@dev 입력한 주소로 pony의 소유권을 이전시키는 internal method\n    //@param _receiver  포니를 소요할 주소\n    //@param _tokenId  포니 아이디\n    function _transfer(address _receiver, uint256 _tokenId)\n    internal\n    {\n        nonFungibleContract.transfer(_receiver, _tokenId);\n    }\n\n    //@dev 경매에 등록시키는 internal method\n    //@param _tokenId  포니 아이디\n    //@param _auction  옥션 정보\n    function _addAuction(uint256 _tokenId, Auction _auction) internal {\n        require(_auction.duration >= 1 minutes);\n\n        tokenIdToAuction[_tokenId] = _auction;\n\n        emit AuctionCreated(\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.duration)\n        );\n    }\n\n    //@dev 경매를 취소시키는 internal method\n    //@param _tokenId  포니 아이디\n    //@param _seller  판매자의 주소\n    function _cancelAuction(uint256 _tokenId, address _seller)\n    internal\n    {\n        _removeAuction(_tokenId);\n        _transfer(_seller, _tokenId);\n        emit AuctionCancelled(_tokenId);\n    }\n\n    //@dev 경매를 참여시키는 internal method\n    //@param _tokenId  포니 아이디\n    //@param _bidAmount 경매 가격 (최종)\n    function _bid(uint256 _tokenId, uint256 _bidAmount)\n    internal\n    returns (uint256)\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n\n        require(_isOnAuction(auction));\n\n        uint256 price = _currentPrice(auction);\n        require(_bidAmount >= price);\n\n        address seller = auction.seller;\n\n        _removeAuction(_tokenId);\n\n        if (price > 0) {\n            uint256 auctioneerCut = _computeCut(price);\n            uint256 sellerProceeds = price - auctioneerCut;\n            seller.transfer(sellerProceeds);\n        }\n\n        uint256 bidExcess = _bidAmount - price;\n        msg.sender.transfer(bidExcess);\n\n        emit AuctionSuccessful(_tokenId, price, msg.sender);\n\n        return price;\n    }\n\n    //@dev 경매에서 제거 시키는 internal method\n    //@param _tokenId  포니 아이디\n    function _removeAuction(uint256 _tokenId) internal {\n        delete tokenIdToAuction[_tokenId];\n    }\n\n    //@dev 경매가 진행중인지 확인하는 internal method\n    //@param _auction 경매 정보\n    function _isOnAuction(Auction storage _auction)\n    internal\n    view\n    returns (bool)\n    {\n        return (_auction.startedAt > 0);\n    }\n\n    //@dev 현재 경매 가격을 리턴하는 internal method\n    //@param _auction 경매 정보\n    function _currentPrice(Auction storage _auction)\n    internal\n    view\n    returns (uint256)\n    {\n        uint256 secondsPassed = 0;\n\n        if (now > _auction.startedAt) {\n            secondsPassed = now - _auction.startedAt;\n        }\n\n        return _computeCurrentPrice(\n            _auction.startingPrice,\n            _auction.endingPrice,\n            _auction.duration,\n            secondsPassed\n        );\n    }\n\n    //@dev 현재 경매 가격을 계산하는 internal method\n    //@param _startingPrice 경매 시작 가격\n    //@param _endingPrice 경매 종료 가격\n    //@param _duration 경매 기간\n    //@param _secondsPassed  경과 시간\n    function _computeCurrentPrice(\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        uint256 _secondsPassed\n    )\n    internal\n    pure\n    returns (uint256)\n    {\n        if (_secondsPassed >= _duration) {\n            return _endingPrice;\n        } else {\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\n            return uint256(currentPrice);\n        }\n    }\n    //@dev 현재 가격을 기준으로 수수료를 적용하여 가격을 리턴하는 internal method\n    //@param _price 현재 가격\n    function _computeCut(uint256 _price)\n    internal\n    view\n    returns (uint256)\n    {\n        return _price * ownerCut / 10000;\n    }\n\n}\n\n\n\n\n\ncontract Ownable {\n    address public owner;\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner)public onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n\n}\n\n//@title 컨트렉트에 대한 중지 및 시작 기능을 제공해주는 컨트렉트\n//@dev 컨트렉트 owner만이 컨트렉트 기능을 작동시킬 수 있음\ncontract Pausable is Ownable {\n\n    //@dev 컨트렉트가 멈추었을때 발생하는 이벤트\n    event Pause();\n    //@dev 컨트렉트가 시작되었을 때 발생하는 이벤트\n    event Unpause();\n\n    //@dev Contract의 운영을 관리(시작, 중지)하는 변수로서\n    //paused true가 되지 않으면  컨트렉트의 대부분 동작들이 작동하지 않음\n    bool public paused = false;\n\n\n    //@dev paused가 멈추지 않았을 때 기능을 수행하도록 해주는 modifier\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    //@dev paused가 멈춰을 때 기능을 수행하도록 해주는 modifier\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n    //@dev owner 권한을 가진 사용자와 paused가 falsed일 때 수행 가능\n    //paused를 true로 설정\n    function pause() public onlyOwner whenNotPaused returns (bool) {\n        paused = true;\n        emit Pause();\n        return true;\n    }\n\n\n    //@dev owner 권한을 가진 사용자와 paused가 true일때\n    //paused를 false로 설정\n    function unPause() public onlyOwner whenPaused returns (bool) {\n        paused = false;\n        emit Unpause();\n        return true;\n    }\n}\n\n\n\n//@title non-fungible 토큰을 위한 Clock Auction\n\ncontract ClockAuction is Pausable, ClockAuctionBase {\n\n    //@dev ERC721 Interface를 준수하고 있는지 체크하기 위해서 필요한 변수\n    bytes4 constant InterfaceSignature_ERC721 =bytes4(0x9a20483d);\n\n    //@dev ClockAuction의 생성자\n    //@param _nftAddr PonyCore의 주소\n    //@param _cut 수수료 율\n    constructor(address _nftAddress, uint256 _cut) public {\n        require(_cut <= 10000);\n        ownerCut = _cut;\n\n        ERC721 candidateContract = ERC721(_nftAddress);\n        require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\n        nonFungibleContract = candidateContract;\n    }\n\n    //@dev contract에서 잔고를 인출하기 위해서 사용\n    function withdrawBalance() external {\n        address nftAddress = address(nonFungibleContract);\n\n        require(\n            msg.sender == owner ||\n            msg.sender == nftAddress\n        );\n        nftAddress.transfer(address(this).balance);\n    }\n\n    //@dev  판매용 경매 생성\n    //@param _tokenId 포니의 아이디\n    //@param _startingPrice 경매의 시작 가격\n    //@param _endingPrice  경매의 종료 가격\n    //@param _duration 경매 기간\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n    external\n    whenNotPaused\n    {\n\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(_owns(msg.sender, _tokenId));\n        _escrow(msg.sender, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now)\n        );\n        _addAuction(_tokenId, auction);\n    }\n\n    //@dev 경매에 참여\n    //@param _tokenId 포니의 아이디\n    function bid(uint256 _tokenId)\n    external\n    payable\n    whenNotPaused\n    {\n        _bid(_tokenId, msg.value);\n        _transfer(msg.sender, _tokenId);\n    }\n\n    //@dev 경매를 취소\n    //@param _tokenId 포니의 아이디\n    function cancelAuction(uint256 _tokenId)\n    external\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        address seller = auction.seller;\n        require(msg.sender == seller);\n        _cancelAuction(_tokenId, seller);\n    }\n\n    //@dev 컨트랙트가 멈출 경우 포니아이디에 대해 경매를 취소하는 기능\n    //@param _tokenId 포니의 아이디\n    //modifier Owner\n    function cancelAuctionWhenPaused(uint256 _tokenId)\n    whenPaused\n    onlyOwner\n    external\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        _cancelAuction(_tokenId, auction.seller);\n    }\n\n    //@dev 옥션의 정보를 가져옴\n    //@param _tokenId 포니의 아이디\n    function getAuction(uint256 _tokenId)\n    external\n    view\n    returns\n    (\n        address seller,\n        uint256 startingPrice,\n        uint256 endingPrice,\n        uint256 duration,\n        uint256 startedAt\n    ) {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        return (\n        auction.seller,\n        auction.startingPrice,\n        auction.endingPrice,\n        auction.duration,\n        auction.startedAt\n        );\n    }\n\n    //@dev 현재의 가격을 가져옴\n    //@param _tokenId 포니의 아이디\n    function getCurrentPrice(uint256 _tokenId)\n    external\n    view\n    returns (uint256)\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        return _currentPrice(auction);\n    }\n}\n\n\ncontract GeneScienceInterface {\n    function isGeneScience() public pure returns (bool);\n    function createNewGen(bytes22 genes1, bytes22 genes22) external returns (bytes22, uint);\n}\n\n\ncontract PonyAbilityInterface {\n\n    function isPonyAbility() external pure returns (bool);\n\n    function getBasicAbility(bytes22 _genes) external pure returns(uint8, uint8, uint8, uint8, uint8);\n\n   function getMaxAbilitySpeed(\n        uint _matronDerbyAttendCount,\n        uint _matronRanking,\n        uint _matronWinningCount,\n        bytes22 _childGenes        \n      ) external view returns (uint);\n\n    function getMaxAbilityStamina(\n        uint _sireDerbyAttendCount,\n        uint _sireRanking,\n        uint _sireWinningCount,\n        bytes22 _childGenes\n    ) external view returns (uint);\n    \n    function getMaxAbilityStart(\n        uint _matronRanking,\n        uint _matronWinningCount,\n        uint _sireDerbyAttendCount,\n        bytes22 _childGenes\n        ) external view returns (uint);\n    \n        \n    function getMaxAbilityBurst(\n        uint _matronDerbyAttendCount,\n        uint _sireWinningCount,\n        uint _sireRanking,\n        bytes22 _childGenes\n    ) external view returns (uint);\n\n    function getMaxAbilityTemperament(\n        uint _matronDerbyAttendCount,\n        uint _matronWinningCount,\n        uint _sireDerbyAttendCount,\n        uint _sireWinningCount,\n        bytes22 _childGenes\n    ) external view returns (uint);\n\n  }\n\n\n//@title 포니에 대한 접근 권한을 관리하는 컨트렉트\n//@dev CFO, COO, CLevel, derby, reward에 대한 주소를 지정하고\n//contract의 method에 modifier를 통해서 사용하면 지정된 주소의\n//사용자 만이 그 기능을 사용할 수 있도록 접근을 제어 해줌\ncontract PonyAccessControl {\n\n    event ContractUpgrade(address newContract);\n\n    //@dev CFO,COO 역활을 수행하는 계정의 주소\n    address public cfoAddress;\n    address public cooAddress;    \n    address public derbyAddress; // derby update 전용\n    address public rewardAddress; // reward send 전용    \n\n    //@dev Contract의 운영을 관리(시작, 중지)하는 변수로서\n    //paused true가 되지 않으면  컨트렉트의 대부분 동작들이 작동하지 않음\n    bool public paused = false;\n\n    //@dev CFO 주소로 지정된 사용자만이 기능을 수행할 수 있도록해주는 modifier\n    modifier onlyCFO() {\n        require(msg.sender == cfoAddress);\n        _;\n    }\n\n    //@dev COO 주소로 지정된 사용자만이 기능을 수행할 수 있도록해주는 modifier\n    modifier onlyCOO() {\n        require(msg.sender == cooAddress);\n        _;\n    }      \n\n    //@dev derby 주소로 지정된 사용자만이 기능을 수행할 수 있도록해주는 modifier\n    modifier onlyDerbyAdress() {\n        require(msg.sender == derbyAddress);\n        _;\n    }\n\n    //@dev reward 주소로 지정된 사용자만이 기능을 수행할 수 있도록해주는 modifier\n    modifier onlyRewardAdress() {\n        require(msg.sender == rewardAddress);\n        _;\n    }           \n\n    //@dev COO, CFO, derby, reward 주소로 지정된 사용자들 만이 기능을 수행할 수 있도록해주는 modifier\n    modifier onlyCLevel() {\n        require(\n            msg.sender == cooAddress ||\n            msg.sender == cfoAddress ||            \n            msg.sender == derbyAddress ||\n            msg.sender == rewardAddress            \n        );\n        _;\n    }\n\n    //@dev CFO 권한을 가진 사용자만 수행 가능,새로운 CF0 계정을 지정\n    function setCFO(address _newCFO) external onlyCFO {\n        require(_newCFO != address(0));\n\n        cfoAddress = _newCFO;\n    }\n\n    //@dev CFO 권한을 가진 사용자만 수행 가능,새로운 COO 계정을 지정\n    function setCOO(address _newCOO) external onlyCFO {\n        require(_newCOO != address(0));\n\n        cooAddress = _newCOO;\n    }    \n\n    //@dev COO 권한을 가진 사용자만 수행 가능,새로운 Derby 계정을 지정\n    function setDerbyAdress(address _newDerby) external onlyCOO {\n        require(_newDerby != address(0));\n\n        derbyAddress = _newDerby;\n    }\n\n    //@dev COO 권한을 가진 사용자만 수행 가능,새로운 Reward 계정을 지정\n    function setRewardAdress(address _newReward) external onlyCOO {\n        require(_newReward != address(0));\n\n        rewardAddress = _newReward;\n    }    \n\n    //@dev paused가 멈추지 않았을 때 기능을 수행하도록 해주는 modifier\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    //@dev paused가 멈춰을 때 기능을 수행하도록 해주는 modifier\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n    //@dev COO 권한을 가진 사용자와 paused가 falsed일 때 수행 가능\n    //paused를 true로 설정\n    function pause() external onlyCOO whenNotPaused {\n        paused = true;\n    }\n\n    //@dev COO 권한을 가진 사용자와 paused가 true일때\n    //paused를 false로 설정\n    function unPause() public onlyCOO whenPaused {\n        paused = false;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//@title SaleClockAuction\n\ncontract SaleClockAuction is ClockAuction {\n\n    //@dev SaleClockAuction인지 확인해주기 위해서 사용하는 값\n    bool public isSaleClockAuction = true;\n\n    //@dev GEN0의 판매 개수\n    uint256 public gen0SaleCount;\n    //@dev GEN0의 최종 판매 갯수\n    uint256[5] public lastGen0SalePrices;\n\n    //@dev SaleClockAuction 생성자\n    //@param _nftAddr PonyCore의 주소\n    //@param _cut 수수료 율\n    constructor(address _nftAddr, uint256 _cut) public\n    ClockAuction(_nftAddr, _cut) {}\n\n    //@dev  판매용 경매 생성\n    //@param _tokenId 포니의 아이디\n    //@param _startingPrice 경매의 시작 가격\n    //@param _endingPrice  경매의 종료 가격\n    //@param _duration 경매 기간\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n    external\n    {\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now)\n        );\n        _addAuction(_tokenId, auction);\n    }\n\n    //@dev 경매에 참여\n    //@param _tokenId 포니의 아이디\n    function bid(uint256 _tokenId)\n    external\n    payable\n    {\n        address seller = tokenIdToAuction[_tokenId].seller;\n        uint256 price = _bid(_tokenId, msg.value);\n        _transfer(msg.sender, _tokenId);\n\n        if (seller == address(nonFungibleContract)) {\n            lastGen0SalePrices[gen0SaleCount % 5] = price;\n            gen0SaleCount++;\n        }\n    }\n\n    //@dev 포니 가격을 리턴 (최근 판매된 다섯개의 평균 가격)\n    function averageGen0SalePrice()\n    external\n    view\n    returns (uint256)\n    {\n        uint256 sum = 0;\n        for (uint256 i = 0; i < 5; i++) {\n            sum += lastGen0SalePrices[i];\n        }\n        return sum / 5;\n    }\n\n\n}\n\n\n\n\n//@title SiringClockAuction\n\ncontract SiringClockAuction is ClockAuction {\n\n    //@dev SiringClockAuction인지 확인해주기 위해서 사용하는 값\n    bool public isSiringClockAuction = true;\n\n    //@dev SiringClockAuction의 생성자\n    //@param _nftAddr PonyCore의 주소\n    //@param _cut 수수료 율\n    constructor(address _nftAddr, uint256 _cut) public\n    ClockAuction(_nftAddr, _cut) {}\n\n    //@dev 경매를 생성\n    //@param _tokenId 포니의 아이디\n    //@param _startingPrice 경매의 시작 가격\n    //@param _endingPrice  경매의 종료 가격\n    //@param _duration 경매 기간\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n    external\n    {\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now)\n        );\n        _addAuction(_tokenId, auction);\n    }\n\n    //@dev 경매에 참여\n    //@param _tokenId 포니의 아이디\n    function bid(uint256 _tokenId)\n    external\n    payable\n    {\n        require(msg.sender == address(nonFungibleContract));\n        address seller = tokenIdToAuction[_tokenId].seller;\n        _bid(_tokenId, msg.value);\n        _transfer(seller, _tokenId);\n    }\n\n}\n\n\n\n\n\n\n//@title 포니의 기본 contract\n//@dev Pony에 관련된 모든 struct, event, variables를 가지고 있음\ncontract PonyBase is PonyAccessControl {\n\n    //@dev 새로운 Pony가 생성되었을 때 발생하는 이벤트 (giveBirth 메소드 호출 시 발생)\n    event Birth(address owner, uint256 ponyId, uint256 matronId, uint256 sireId, bytes22 genes);\n\n    //@dev 기존 코어 데이터 이전용(새로운 ponyId)\n    event Relocate(address owner, uint256 ponyId, bytes22 genes);\n\n    //@dev 포니의 소유권 이전이 발생하였을 때 발생하는 이벤트 (출생 포함)\n    event Transfer(address from, address to, uint256 tokenId);\n\n    //@dev 당근구매시 발생하는 이벤트\n    event carrotPurchased(address buyer, uint256 receivedValue, uint256 carrotCount);\n\n    //@dev 랭킹보상이 지급되면 발생하는 이벤트\n    event RewardSendSuccessful(address from, address to, uint256 value);    \n\n    //@dev 당근 환전시 발생하는 이벤트\n    event CarrotToETHSuccessful(address to, uint256 count, uint256 value);    \n\n    struct Pony {\n        // 포니의 탄생 시간\n        uint64 birthTime;\n        // 새로운 쿨다운 적용되었을때, cooldown이 끝나는 block의 번호\n        uint64 cooldownEndBlock;\n        // 모의 아이디\n        uint32 matronId;\n        // 부의 아이디\n        uint32 sireId;        \n        // 나이\n        uint8 age;\n        // 개월 수\n        uint8 month;\n        // 은퇴 나이\n        uint8 retiredAge;        \n        // 유전자 정보\n        bytes22 genes;        \n    }\n    \n    struct Ability {\n        //속도\n        uint8 speed;\n        //스테미너\n        uint8 stamina;\n        //스타트\n        uint8 start;\n        //폭발력\n        uint8 burst;\n        //기질\n        uint8 temperament;\n        //속도\n\n        //최대 속도\n        uint8 maxSpeed;\n        //최대 스테미너\n        uint8 maxStamina;\n        //최대 시작\n        uint8 maxStart;\n        //최대 폭발력\n        uint8 maxBurst;\n        //최대 기질\n        uint8 maxTemperament;\n    }\n\n    struct Gen0Stat {\n        //은퇴나이\n        uint8 retiredAge;\n        //최대 속도\n        uint8 maxSpeed;\n        //최대 스테미너\n        uint8 maxStamina;\n        //최대 시작\n        uint8 maxStart;\n        //최대 폭발력\n        uint8 maxBurst;\n        //최대 기질\n        uint8 maxTemperament;\n    }    \n\n    //@dev 교배가 발생할때의 다음 교배까지 필요한 시간을 가진 배열\n    uint32[15] public cooldowns = [\n        uint32(2 minutes),\n        uint32(5 minutes),\n        uint32(10 minutes),\n        uint32(30 minutes),\n        uint32(1 hours),\n        uint32(2 hours),\n        uint32(4 hours),\n        uint32(8 hours),\n        uint32(16 hours),\n        uint32(24 hours),\n        uint32(48 hours),\n        uint32(5 days),\n        uint32(7 days),\n        uint32(10 days),\n        uint32(15 days)\n    ];\n\n\n    // 능력치 정보를 가지고 있는 배열\n    Ability[] ability;\n\n    // Gen0생성포니의 은퇴나이 Max능력치 정보\n    Gen0Stat public gen0Stat; \n\n    // 모든 포니의 정보를 가지고 있는 배열\n    Pony[] ponies;\n\n    //포니 아이디에 대한 소유권를 가진 주소들에 대한 테이블\n    mapping(uint256 => address) public ponyIndexToOwner;\n    //주소에 해당하는 소유자가 가지고 있는 포니의 개수를 가진 m테이블\n    mapping(address => uint256) ownershipTokenCount;\n    //포니 아이디에 대한 소유권 이전을 허용한 주소 정보를 가진 테이블\n    mapping(uint256 => address) public ponyIndexToApproved;    \n\n    //@dev 시간 기반의 Pony의 경매를 담당하는 SaleClockAuction의 주소\n    SaleClockAuction public saleAuction;\n    //@dev 교배 기반의 Pony의 경매를 담당하는 SiringClockAuction의 주소\n    SiringClockAuction public siringAuction;    \n\n\t//@dev 교배 시 능력치를 계산하는 컨트렉트의 주소\n    PonyAbilityInterface public ponyAbility;\n\n    //@dev 교배 시 유전자 정보를 생성하는 컨트렉트의 주소\n    GeneScienceInterface public geneScience;\n\n    // 새로운 블록이 생성되기까지 소유되는 시간\n    uint256 public secondsPerBlock = 15;\n\n    //@dev 포니의 소유권을 이전해는 internal Method\n    //@param _from 보내는 지갑 주소\n    //@param _to 받는 지갑 주소\n    //@param _tokenId Pony의 아이디\n    function _transfer(address _from, address _to, uint256 _tokenId)\n    internal\n    {\n        ownershipTokenCount[_to]++;\n        ponyIndexToOwner[_tokenId] = _to;\n        if (_from != address(0)) {\n            ownershipTokenCount[_from]--;            \n            delete ponyIndexToApproved[_tokenId];\n        }\n        emit Transfer(_from, _to, _tokenId);\n    }\n\n    //@dev 신규 포니를 생성하는 internal Method\n    //@param _relocate  코어 이전용\n    //@param _matronId  종마의 암컷의 id\n    //@param _sireId 종마의 수컷의 id\n    //@param _age  포니의 나이\n    //@param _month  포니의 나이\n    //@param _genes 포니의 유전자 정보\n    //@param _derbyMaxCount 경마 최대 참여 개수\n    //@param _owner 포니의 소유자\n    //@param _maxSpeed 최대 능력치\n    //@param _maxStamina 최대 스테미너\n    //@param _maxStart 최대 스타트\n    //@param _maxBurst 최대 폭발력\n    //@param _maxTemperament 최대 기질\n    function _createPony(\n        uint8 _relocate,\n        uint256[2] _parent, // 0-_matronId, 1-_sireId        \n        uint8[2] _age,        \n        bytes22 _genes,\n        uint256 _retiredAge,\n        address _owner,\n        uint8[5] _ability,\n        uint8[5] _maxAbility        \n    )\n    internal\n    returns (uint)\n    {\n        require(_parent[0] == uint256(uint32(_parent[0])));\n        require(_parent[1] == uint256(uint32(_parent[1])));\n        require(_retiredAge == uint256(uint32(_retiredAge)));\n\n        Pony memory _pony = Pony({\n            birthTime : uint64(now),\n            cooldownEndBlock : 0,\n            matronId : uint32(_parent[0]),\n            sireId : uint32(_parent[1]),            \n            age : _age[0],\n            month : _age[1],\n            retiredAge : uint8(_retiredAge),            \n            genes : _genes      \n            });\n\n\n        Ability memory _newAbility = Ability({\n            speed : _ability[0],\n            stamina : _ability[1],\n            start : _ability[2],\n            burst : _ability[3],\n            temperament : _ability[4],\n            maxSpeed : _maxAbility[0],\n            maxStamina : _maxAbility[1],\n            maxStart : _maxAbility[2],\n            maxBurst : _maxAbility[3],\n            maxTemperament : _maxAbility[4]\n            });\n       \n\n        uint256 newPonyId = ponies.push(_pony) - 1;\n        uint newAbilityId = ability.push(_newAbility) - 1;\n        require(newPonyId == uint256(uint32(newPonyId)));\n        require(newAbilityId == uint256(uint32(newAbilityId)));\n        require(newPonyId == newAbilityId);\n\n        if( _relocate == 1)\n        {\n            emit Relocate(_owner, newPonyId, _pony.genes);\n        }\n        else\n        {\n            emit Birth(\n                _owner,\n                newPonyId,\n                uint256(_pony.matronId),\n                uint256(_pony.sireId),\n                _pony.genes\n            );\n        }\n        _transfer(0, _owner, newPonyId);\n\n        return newPonyId;\n    }    \n\n    //@dev 블록체인에서 새로운 블록이 생성되는데 소요되는 평균 시간을 지정\n    //@param _secs 블록 생성 시간\n    //modifier : COO 만 실행 가능\n    function setSecondsPerBlock(uint256 _secs)\n    external\n    onlyCOO\n    {\n        require(_secs < cooldowns[0]);\n        secondsPerBlock = _secs;\n    }\n}\n\n\n/*import \"./ERC721Metadata.sol\";*/\n\n//@title non-Fungible 토큰에 대한 트랙잭션 지원을 위해 필요한 컨트렉트\n\ncontract PonyOwnership is PonyBase, ERC721 {\n\n    //@dev PonyId에 해당하는 포니가 from부터 to로 이전되었을 때 발생하는 이벤트\n    event Transfer(address from, address to, uint256 tokenId);\n    //@dev PonyId에 해당하는 포니의 소유권 이전을 승인하였을 때 발생하는 이벤트 (onwer -> approved)\n    event Approval(address owner, address approved, uint256 tokenId);\n\n    string public constant name = \"GoPony\";\n    string public constant symbol = \"GP\";\n\n/*    ERC721Metadata public erc721Metadata;\n\n    bytes4 constant InterfaceSignature_ERC165 =\n    bytes4(keccak256('supportsInterface(bytes4)'));*/\n\n    bytes4 constant InterfaceSignature_ERC721 =\n    bytes4(keccak256('name()')) ^\n    bytes4(keccak256('symbol()')) ^\n    bytes4(keccak256('totalSupply()')) ^\n    bytes4(keccak256('balanceOf(address)')) ^\n    bytes4(keccak256('ownerOf(uint256)')) ^\n    bytes4(keccak256('approve(address,uint256)')) ^\n    bytes4(keccak256('transfer(address,uint256)')) ^\n    bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n    bytes4(keccak256('tokensOfOwner(address)')) ^\n    bytes4(keccak256('tokenMetadata(uint256,string)'));\n\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\n    {\n        return (_interfaceID == InterfaceSignature_ERC721);\n    }\n\n    /*    \n    function setMetadataAddress(address _contractAddress)\n    public\n    onlyCOO\n    {\n        erc721Metadata = ERC721Metadata(_contractAddress);\n    }\n    */\n\n    //@dev 요청한 주소가 PonyId를 소유하고 있는지 확인하는 Internal Method\n    //@Param _calimant 요청자의 주소\n    //@param _tokenId 포니의 아이디\n    function _owns(address _claimant, uint256 _tokenId)\n    internal\n    view\n    returns (bool)\n    {\n        return ponyIndexToOwner[_tokenId] == _claimant;\n    }\n\n    //@dev 요청한 주소로 PonyId를 소유권 이전을 승인하였는지 확인하는 internal Method\n    //@Param _calimant 요청자의 주소\n    //@param _tokenId 포니의 아이디\n    function _approvedFor(address _claimant, uint256 _tokenId)\n    internal\n    view\n    returns (bool)\n    {\n        return ponyIndexToApproved[_tokenId] == _claimant;\n    }\n\n    //@dev  PonyId의 소유권 이전을 승인하는 Internal Method\n    //@param _tokenId 포니의 아이디\n    //@Param _approved 이전할 소유자의 주소\n    function _approve(uint256 _tokenId, address _approved)\n    internal\n    {\n        ponyIndexToApproved[_tokenId] = _approved;\n    }\n\n    //@dev  주소의 소유자가 가진 Pony의 개수를 리턴\n    //@Param _owner 소유자의 주소\n    function balanceOf(address _owner)\n    public\n    view\n    returns (uint256 count)\n    {\n        return ownershipTokenCount[_owner];\n    }\n\n    //@dev 소유권을 이전하는 Method\n    //@Param _owner 소유자의 주소\n    //@param _tokenId 포니의 아이디\n    function transfer(\n        address _to,\n        uint256 _tokenId\n    )\n    external\n    whenNotPaused\n    {\n        require(_to != address(0));\n        require(_to != address(this));\n        require(_to != address(saleAuction));\n        require(_to != address(siringAuction));\n        require(_owns(msg.sender, _tokenId));\n        _transfer(msg.sender, _to, _tokenId);\n    }\n\n    //@dev  PonyId의 소유권 이전을 승인하는 Method\n    //@param _tokenId 포니의 아이디\n    //@Param _approved 이전할 소유자의 주소\n    function approve(\n        address _to,\n        uint256 _tokenId\n    )\n    external\n    whenNotPaused\n    {\n        require(_owns(msg.sender, _tokenId));\n\n        _approve(_tokenId, _to);\n        emit Approval(msg.sender, _to, _tokenId);\n    }\n\n    //@dev  이전 소유자로부터 포니의 소유권을 이전 받아옴\n    //@Param _from 이전 소유자 주소\n    //@Param _to 신규 소유자 주소\n    //@param _tokenId 포니의 아이디\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    )\n    external\n    whenNotPaused\n    {\n        require(_to != address(0));\n        require(_to != address(this));\n        require(_approvedFor(msg.sender, _tokenId));\n        require(_owns(_from, _tokenId));\n        _transfer(_from, _to, _tokenId);\n    }\n\n    //@dev 존재하는 모든 포니의 개수를 가져옴\n    function totalSupply()\n    public\n    view\n    returns (uint)\n    {\n        return ponies.length - 1;\n    }\n\n    //@dev 포니 아이디에 대한 소유자 정보를 가져옴\n    //@param _tokenId  포니의 아이디\n    function ownerOf(uint256 _tokenId)\n    external\n    view\n    returns (address owner)\n    {\n        owner = ponyIndexToOwner[_tokenId];\n        require(owner != address(0));\n    }\n\n    //@dev 소유자의 모든 포니 아이디를 가져옴\n    //@param _owner 포니의 소유자\n    function tokensOfOwner(address _owner)\n    external\n    view\n    returns (uint256[] ownerTokens)\n    {\n        uint256 tokenCount = balanceOf(_owner);\n\n        if (tokenCount == 0) {\n            // Return an empty array\n            return new uint256[](0);\n        } else {\n            uint256[] memory result = new uint256[](tokenCount);\n            uint256 totalPonies = totalSupply();\n            uint256 resultIndex = 0;\n\n            uint256 ponyId;\n\n            for (ponyId = 1; ponyId <= totalPonies; ponyId++) {\n                if (ponyIndexToOwner[ponyId] == _owner) {\n                    result[resultIndex] = ponyId;\n                    resultIndex++;\n                }\n            }\n\n            return result;\n        }\n    }\n\n}\n\n\n//@title 포니의 교배, 임심, 출생을 관리하는 컨트렉트\n//@dev 외부의 SaleClockAuction과 SiringClockAuction에 대한 컨트렉트를 설정\n\ncontract PonyBreeding is PonyOwnership {\n\n\n    //@dev 포니가 임신되면 발생하는 이벤트\n    event Pregnant(address owner, uint256 matronId, uint256 sireId, uint256 matronCooldownEndBlock, uint256 sireCooldownEndBlock);\n\n    //교배가 이루어지는데 필요한 비용\n    uint256 public autoBirthFee = 13 finney;\n\n    //@dev 유전자 정보를 생성하는 컨트렉트의 주소를 지정하는 method\n    //modifier COO\n    function setGeneScienceAddress(address _address)\n    external\n    onlyCOO\n    {\n        GeneScienceInterface candidateContract = GeneScienceInterface(_address);\n\n        require(candidateContract.isGeneScience());\n\n        geneScience = candidateContract;\n    }\n\n    //@dev 유전자 정보를 생성하는 컨트렉트의 주소를 지정하는 method\n    //modifier COO\n    function setPonyAbilityAddress(address _address)\n    external\n    onlyCOO\n    {\n        PonyAbilityInterface candidateContract = PonyAbilityInterface(_address);\n\n        require(candidateContract.isPonyAbility());\n\n        ponyAbility = candidateContract;\n    }\n\n\n\n    //@dev 교배가 가능한지 확인하는 internal method\n    //@param _pony 포니 정보\n    function _isReadyToBreed(Pony _pony)\n    internal\n    view\n    returns (bool)\n    {\n        return (_pony.cooldownEndBlock <= uint64(block.number));\n    }\n\n    //@dev 셀프 교배 확인용\n    //@param _sireId  교배할 암놈의 아이디\n    //@param _matronId 교배할 숫놈의 아이디\n    function _isSiringPermitted(uint256 _sireId, uint256 _matronId)\n    internal\n    view\n    returns (bool)\n    {\n        address matronOwner = ponyIndexToOwner[_matronId];\n        address sireOwner = ponyIndexToOwner[_sireId];\n\n        return (matronOwner == sireOwner);\n    }\n\n\n    //@dev 포니에 대해서 쿨다운을 적용하는 internal method\n    //@param _pony 포니 정보\n    function _triggerCooldown(Pony storage _pony)\n    internal\n    {\n        if (_pony.age < 14) {\n            _pony.cooldownEndBlock = uint64((cooldowns[_pony.age] / secondsPerBlock) + block.number);\n        } else {\n            _pony.cooldownEndBlock = uint64((cooldowns[14] / secondsPerBlock) + block.number);\n        }\n\n    }\n    //@dev 포니 교배에 따라 나이를 6개월 증가시키는 internal method\n    //@param _pony 포니 정보\n    function _triggerAgeSixMonth(Pony storage _pony)\n    internal\n    {\n        uint8 sumMonth = _pony.month + 6;\n        if (sumMonth >= 12) {\n            _pony.age = _pony.age + 1;\n            _pony.month = sumMonth - 12;\n        } else {\n            _pony.month = sumMonth;\n        }\n    }\n    //@dev 포니 교배에 따라 나이를 1개월 증가시키는 internal method\n    //@param _pony 포니 정보\n    function _triggerAgeOneMonth(Pony storage _pony)\n    internal\n    {\n        uint8 sumMonth = _pony.month + 1;\n        if (sumMonth >= 12) {\n            _pony.age = _pony.age + 1;\n            _pony.month = sumMonth - 12;\n        } else {\n            _pony.month = sumMonth;\n        }\n    }    \n\n    //@dev 포니가 교배할때 수수료를 지정\n    //@param val  수수료율\n    //@modifier COO\n    function setAutoBirthFee(uint256 val)\n    external\n    onlyCOO {\n        autoBirthFee = val;\n    }    \n\n    //@dev 교배가 가능한지 확인\n    //@param _ponyId 포니의 아이디\n    function isReadyToBreed(uint256 _ponyId)\n    public\n    view\n    returns (bool)\n    {\n        require(_ponyId > 0);\n        Pony storage pony = ponies[_ponyId];\n        return _isReadyToBreed(pony);\n    }    \n\n    //@dev 교배가 가능한지 확인하는 method\n    //@param _matron 암놈의 정보\n    //@param _matronId 모의 아이디\n    //@param _sire 숫놈의 정보\n    //@param _sireId 부의 아이디\n    function _isValidMatingPair(\n        Pony storage _matron,\n        uint256 _matronId,\n        Pony storage _sire,\n        uint256 _sireId\n    )\n    private\n    view\n    returns (bool)\n    {\n        if (_matronId == _sireId) {\n            return false;\n        }\n\n        if (_matron.matronId == _sireId || _matron.sireId == _sireId) {\n            return false;\n        }\n        if (_sire.matronId == _matronId || _sire.sireId == _matronId) {\n            return false;\n        }\n\n        if (_sire.matronId == 0 || _matron.matronId == 0) {\n            return true;\n        }\n\n        if (_sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId) {\n            return false;\n        }\n        if (_sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId) {\n            return false;\n        }\n\n        return true;\n    }\n\n    //@dev 경매를 통해서 교배가 가능한지 확인하는 internal method\n    //@param _matronId 암놈의 아이디\n    //@param _sireId 숫놈의 아이디\n    function _canBreedWithViaAuction(uint256 _matronId, uint256 _sireId)\n    internal\n    view\n    returns (bool)\n    {\n        Pony storage matron = ponies[_matronId];\n        Pony storage sire = ponies[_sireId];\n        return _isValidMatingPair(matron, _matronId, sire, _sireId);\n    }\n\n    //@dev 교배가 가능한지 확인하는 method\n    //@param _matronId 암놈의 아이디\n    //@param _sireId 숫놈의 아이디\n    function canBreedWith(uint256 _matronId, uint256 _sireId)\n    external\n    view\n    returns (bool)\n    {\n        require(_matronId > 0);\n        require(_sireId > 0);\n        Pony storage matron = ponies[_matronId];\n        Pony storage sire = ponies[_sireId];\n        return _isValidMatingPair(matron, _matronId, sire, _sireId) &&\n        _isSiringPermitted(_sireId, _matronId);\n    }\n\n    //@dev 교배하는 method\n    //@param _matronId 암놈의 아이디\n    //@param _sireId 숫놈의 아이디\n    function _breedWith(uint256 _matronId, uint256 _sireId) internal {\n        Pony storage sire = ponies[_sireId];\n        Pony storage matron = ponies[_matronId];        \n\n        _triggerCooldown(sire);\n        _triggerCooldown(matron);\n        _triggerAgeSixMonth(sire);\n        _triggerAgeSixMonth(matron);            \n        emit Pregnant(ponyIndexToOwner[_matronId], _matronId, _sireId, matron.cooldownEndBlock, sire.cooldownEndBlock);\n        _giveBirth(_matronId, _sireId);\n    }\n\n    //@dev 소유하고 있는 암놈과 숫놈을 이용하여 교배를 시키는 method\n    //@param _matronId 암놈의 아이디\n    //@param _sireId 숫놈의 아이디\n    function breedWithAuto(uint256 _matronId, uint256 _sireId)\n    external\n    payable\n    whenNotPaused\n    {\n        require(msg.value >= autoBirthFee);\n\n        require(_owns(msg.sender, _matronId));\n\n        require(_isSiringPermitted(_sireId, _matronId));\n\n        Pony storage matron = ponies[_matronId];\n\n        require(_isReadyToBreed(matron));\n\n        Pony storage sire = ponies[_sireId];\n\n        require(_isReadyToBreed(sire));\n\n        require(_isValidMatingPair(\n                matron,\n                _matronId,\n                sire,\n                _sireId\n            ));\n\n        _breedWith(_matronId, _sireId);\n    }\n\n    //@dev 포니를 출생시키는 method\n    //@param _matronId 암놈의 아이디 (임신한)\n    function _giveBirth(uint256 _matronId, uint256 _sireId)\n    internal    \n    returns (uint256)\n    {\n        Pony storage matron = ponies[_matronId];\n        require(matron.birthTime != 0);\n        \n        Pony storage sire = ponies[_sireId];\n\n        bytes22 childGenes;\n        uint retiredAge;\n        (childGenes, retiredAge) = geneScience.createNewGen(matron.genes, sire.genes);\n\n        address owner = ponyIndexToOwner[_matronId];\n        \n        uint8[5] memory ability = [0,0,0,0,0];\n        uint8[5] memory maxAbility = [0,0,0,0,0];\n        uint[2] memory parent = [_matronId, _sireId];\n        uint8[2] memory age = [0,0];\n        \n\n        (ability[0], ability[1], ability[2], ability[3], ability[4]) = ponyAbility.getBasicAbility(childGenes);\n\n        //maxAbility = _getMaxAbility(_matronId, _sireId, matron.derbyAttendCount, matron.rankingScore, sire.derbyAttendCount, sire.rankingScore, childGenes);        \n        uint256 ponyId = _createPony(0, parent, age, childGenes, retiredAge, owner, ability, maxAbility);                \n\n        return ponyId;\n    }\n}\n\n\n\n\n\n//@title 포니의 Siring 및 Sale 옥션의 생성을 담담\n//@dev 외부의 SaleClockAuction과 SiringClockAuction에 대한 컨트렉트를 설정\ncontract PonyAuction is PonyBreeding {\n\n    //@dev SaleAuction의 주소를 지정\n    //@param _address SaleAuction의 주소\n    //modifier COO\n    function setSaleAuctionAddress(address _address) external onlyCOO {\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\n        require(candidateContract.isSaleClockAuction());\n        saleAuction = candidateContract;\n    }\n\n    //@dev SaleAuction의 주소를 지정\n    //@param _address SiringAuction의 주소\n    //modifier COO\n    function setSiringAuctionAddress(address _address) external onlyCOO {\n        SiringClockAuction candidateContract = SiringClockAuction(_address);\n        require(candidateContract.isSiringClockAuction());\n        siringAuction = candidateContract;\n    }\n\n    //@dev  판매용 경매 생성\n    //@param _ponyId 포니의 아이디\n    //@param _startingPrice 경매의 시작 가격\n    //@param _endingPrice  경매의 종료 가격\n    //@param _duration 경매 기간\n    function createSaleAuction(\n        uint _ponyId,\n        uint _startingPrice,\n        uint _endingPrice,\n        uint _duration\n    )\n    external\n    whenNotPaused\n    {\n        require(_owns(msg.sender, _ponyId));\n        require(isReadyToBreed(_ponyId));\n        _approve(_ponyId, saleAuction);\n        saleAuction.createAuction(\n            _ponyId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }\n\n    //@dev 교배용 경매 생성\n    //@param _ponyId 포니의 아이디\n    //@param _startingPrice 경매의 시작 가격\n    //@param _endingPrice  경매의 종료 가격\n    //@param _duration 경매 기간\n    function createSiringAuction(\n        uint _ponyId,\n        uint _startingPrice,\n        uint _endingPrice,\n        uint _duration\n    )\n    external\n    whenNotPaused\n    {\n        require(_owns(msg.sender, _ponyId));\n        require(isReadyToBreed(_ponyId));\n        _approve(_ponyId, siringAuction);\n        siringAuction.createAuction(\n            _ponyId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }\n\n\n    //@dev 교배 경매에 참여\n    //@param _sireId 경매에 등록한 숫놈 Id\n    //@param _matronId 교배한 암놈의 Id\n    function bidOnSiringAuction(\n        uint _sireId,\n        uint _matronId\n    )\n    external\n    payable\n    whenNotPaused\n    {\n        require(_owns(msg.sender, _matronId));\n        require(isReadyToBreed(_matronId));\n        require(_canBreedWithViaAuction(_matronId, _sireId));\n\n        uint currentPrice = siringAuction.getCurrentPrice(_sireId);\n        require(msg.value >= currentPrice + autoBirthFee);\n        siringAuction.bid.value(msg.value - autoBirthFee)(_sireId);\n        _breedWith(uint32(_matronId), uint32(_sireId));\n    }\n\n    //@dev ether를 PonyCore로 출금\n    //modifier CLevel\n    function withdrawAuctionBalances() external onlyCLevel {\n        saleAuction.withdrawBalance();\n        siringAuction.withdrawBalance();\n    }\n}\n\n\n//@title 포니의 생성과 관련된 컨트렉트\n\ncontract PonyMinting is PonyAuction {\n\n\n    //@dev 프로모션용 포니의 최대 생성 개수\n    //uint256 public constant PROMO_CREATION_LIMIT = 10000;\n    //@dev GEN0용 포니의 최대 생성 개수\n    //uint256 public constant GEN0_CREATION_LIMIT = 40000;\n\n    //@dev GEN0포니의 최소 시작 가격\n    uint256 public GEN0_MINIMUM_STARTING_PRICE = 90 finney;\n\n    //@dev GEN0포니의 최대 시작 가격\n    uint256 public GEN0_MAXIMUM_STARTING_PRICE = 500 finney;\n\n    //@dev 다음Gen0판매시작가격 상승율 ( 10000 => 100 % )\n    uint256 public nextGen0PriceRate = 1000;\n\n    //@dev GEN0용 포니의 경매 기간\n    uint256 public gen0AuctionDuration = 30 days;\n\n    //@dev 생성된 프로모션용 포니 카운트 개수\n    uint256 public promoCreatedCount;\n    //@dev 생성된 GEN0용 포니 카운트 개수\n    uint256 public gen0CreatedCount;\n\n    //@dev 주어진 유전자 정보와 coolDownIndex로 포니를 생성하고, 지정된 주소로 자동할당\n    //@param _genes  유전자 정보\n    //@param _coolDownIndex  genes에 해당하는 cooldown Index 값\n    //@param _owner Pony를 소유할 사용자의 주소\n    //@param _maxSpeed 최대 능력치\n    //@param _maxStamina 최대 스테미너\n    //@param _maxStart 최대 스타트\n    //@param _maxBurst 최대 폭발력\n    //@param _maxTemperament 최대 기질\n    //@modifier COO\n    function createPromoPony(bytes22 _genes, uint256 _retiredAge, address _owner, uint8[5] _maxStats) external onlyCOO {\n        address ponyOwner = _owner;\n        if (ponyOwner == address(0)) {\n            ponyOwner = cooAddress;\n        }\n        //require(promoCreatedCount < PROMO_CREATION_LIMIT);\n\n        promoCreatedCount++;\n\n        uint zero = uint(0);\n        uint8[5] memory ability;        \n        uint8[2] memory age = [0,0];\n        uint[2] memory parents = [zero, zero];\n        \n        \n        (ability[0],ability[1],ability[2],ability[3],ability[4]) = ponyAbility.getBasicAbility(_genes);\n        _createPony(0, parents, age, _genes, _retiredAge, ponyOwner,ability,_maxStats);\n    }\n\n    //@dev 이전 코어의 포니 정보를 새로 생성    \n    //@modifier COO\n    function createPreCorePony(bytes22 _genes, uint256 _retiredAge, address _owner, uint256 _matronId, uint256 _sireId, uint8 _age, uint8 _month, uint8[5] stats, uint8[5] maxStats) external onlyCOO {\n        address ponyOwner = _owner;\n        if (ponyOwner == address(0)) {\n            ponyOwner = cooAddress;\n        }\n        uint8[2] memory age = [_age, _month];\n        uint[2] memory parents = [_matronId, _sireId];        \n        _createPony(1, parents, age, _genes, _retiredAge, ponyOwner, stats, maxStats);\n    }\n\n    //@dev 주어진 유전자 정보와 cooldownIndex 이용하여 GEN0용 포니를 생성\n    //@param _genes  유전자 정보\n    //@param _coolDownIndex  genes에 해당하는 cooldown Index 값\n    //@param _maxSpeed 최대 능력치\n    //@param _maxStamina 최대 스테미너\n    //@param _maxStart 최대 스타트\n    //@param _maxBurst 최대 폭발력\n    //@param _maxTemperament 최대 기질\n    //@modifier COO\n    function createGen0Auction(bytes22 _genes) public onlyCOO {\n        //require(gen0CreatedCount < GEN0_CREATION_LIMIT);\n        uint zero = uint(0);\n        uint8[5] memory ability;\n        uint8[5] memory maxAbility = [gen0Stat.maxSpeed, gen0Stat.maxStamina, gen0Stat.maxStart, gen0Stat.maxBurst, gen0Stat.maxTemperament];\n        uint8[2] memory age = [0, 0];\n        uint[2] memory parents = [zero, zero];        \n\n        (ability[0],ability[1],ability[2],ability[3],ability[4]) = ponyAbility.getBasicAbility(_genes);\n        \n        uint256 ponyId = _createPony(0, parents, age,_genes, gen0Stat.retiredAge, address(this),ability,maxAbility);\n        _approve(ponyId, saleAuction);\n\n        saleAuction.createAuction(\n            ponyId,\n            _computeNextGen0Price(),\n            10 finney,\n            gen0AuctionDuration,\n            address(this)\n        );\n\n        gen0CreatedCount++;\n    }\n\n    //@dev 주어진 유전자 정보와 cooldownIndex 이용하여 GEN0용 포니를 생성\n    //@param _genes  유전자 정보\n    //@param _coolDownIndex  genes에 해당하는 cooldown Index 값\n    //@param _maxSpeed 최대 능력치\n    //@param _maxStamina 최대 스테미너\n    //@param _maxStart 최대 스타트\n    //@param _maxBurst 최대 폭발력\n    //@param _maxTemperament 최대 기질\n    //@param _startPrice 경매 시작가격\n    //@modifier COO\n    function createCustomGen0Auction(bytes22 _genes, uint256 _retiredAge, uint8[5] _maxStats, uint8 _startPrice, uint _endPrice) external onlyCOO {\n        require(10 finney < _startPrice);\n        require(10 finney < _endPrice);\n\n        uint zero = uint(0);\n        uint8[5] memory ability;        \n        uint8[2] memory age = [0, 0];\n        uint[2] memory parents = [zero, zero];\n        \n        (ability[0],ability[1],ability[2],ability[3],ability[4]) = ponyAbility.getBasicAbility(_genes);\n        \n        uint256 ponyId = _createPony(0, parents, age, _genes, _retiredAge, address(this),ability,_maxStats);\n        _approve(ponyId, saleAuction);\n\n        saleAuction.createAuction(\n            ponyId,\n            _startPrice,\n            _endPrice,\n            gen0AuctionDuration,\n            address(this)\n        );\n\n        gen0CreatedCount++;\n    }  \n\n    //@dev 새로운 Gen0의 가격 산정하는 internal Method\n    //(최근에 판매된 gen0 5개의 평균가격)*1.5+0.0.1\n    function _computeNextGen0Price()\n    internal\n    view\n    returns (uint256)\n    {\n        uint256 avePrice = saleAuction.averageGen0SalePrice();\n        require(avePrice == uint256(uint128(avePrice)));\n\n        uint256 nextPrice = avePrice + (avePrice * nextGen0PriceRate / 10000);\n\n        if (nextPrice < GEN0_MINIMUM_STARTING_PRICE) {\n            nextPrice = GEN0_MINIMUM_STARTING_PRICE;\n        }else if (nextPrice > GEN0_MAXIMUM_STARTING_PRICE) {\n            nextPrice = GEN0_MAXIMUM_STARTING_PRICE;\n        }\n\n        return nextPrice;\n    }\n    \n    function setAuctionDuration(uint256 _duration)\n    external\n    onlyCOO\n    {\n        gen0AuctionDuration=_duration * 1 days;\n    }\n\n    //Gen0 Pony Max능력치 Setting\n    function setGen0Stat(uint256[6] _gen0Stat) \n    public \n    onlyCOO\n    {\n        gen0Stat = Gen0Stat({\n            retiredAge : uint8(_gen0Stat[0]),\n            maxSpeed : uint8(_gen0Stat[1]),\n            maxStamina : uint8(_gen0Stat[2]),\n            maxStart : uint8(_gen0Stat[3]),\n            maxBurst : uint8(_gen0Stat[4]),\n            maxTemperament : uint8(_gen0Stat[5])\n        });\n    }\n\n    //@dev 최소시작판매가격을 변경\n    //@param _minPrice 최소시작판매가격\n    function setMinStartingPrice(uint256 _minPrice)\n    public\n    onlyCOO\n    {\n        GEN0_MINIMUM_STARTING_PRICE = _minPrice;\n    }\n\n    //@dev 최대시작판매가격을 변경\n    //@param _maxPrice 최대시작판매가격\n    function setMaxStartingPrice(uint256 _maxPrice)\n    public\n    onlyCOO\n    {\n        GEN0_MAXIMUM_STARTING_PRICE = _maxPrice;\n    }    \n\n    //@dev setNextGen0Price 상승율을 변경\n    //@param _increaseRate 가격상승율\n    function setNextGen0PriceRate(uint256 _increaseRate)\n    public\n    onlyCOO\n    {\n        require(_increaseRate <= 10000);\n        nextGen0PriceRate = _increaseRate;\n    }\n    \n}\n\n\n//@title 포니 경마에 대한 처리를 지원하는 컨트렉트\n\ncontract PonyDerby is PonyMinting {\n    //@dev 은퇴한 포니 인가를 조회하는 메소드\n    //@param _pony 포니 정보\n    //@returns 은퇴 : true, 은퇴하지 않은 경우 false\n    function isPonyRetired(uint256 _id)\n    external\n    view\n    returns (\n        bool isRetired\n\n    ) {\n        Pony storage pony = ponies[_id];\n        if (pony.age >= pony.retiredAge) {\n            isRetired = true;\n        } else {\n            isRetired = false;\n        }\n    }\n\n    //@dev 포니 정보 업데이트\n    function setPonyInfo(uint _id, uint8 age, uint8 month, uint8 speed, uint8 stamina, uint8 start, uint8 burst, uint8 temperament)\n    public\n    onlyDerbyAdress\n    {       \n        Pony storage pony = ponies[_id];\n        pony.age = age;\n        pony.month = month;\n\n        Ability storage _ability = ability[_id];        \n        _ability.speed = speed;\n        _ability.stamina = stamina;\n        _ability.start = start;\n        _ability.burst = burst;\n        _ability.temperament = temperament;\n    }\n\n    //@dev 포니 maxStat 업데이트\n    function setPonyMaxStat(uint _id, uint8 maxSpeed, uint8 maxStamina, uint8 maxStart, uint8 maxBurst, uint8 maxTemperament)\n    public\n    onlyDerbyAdress\n    {   \n        Ability storage _ability = ability[_id];        \n        _ability.maxSpeed = maxSpeed;\n        _ability.maxStamina = maxStamina;\n        _ability.maxStart = maxStart;\n        _ability.maxBurst = maxBurst;\n        _ability.maxTemperament = maxTemperament;\n    }\n\n    //@dev 포니별 능력치 정보를 가져옴\n    //@param id 포니 아이디\n    //@return speed 속도\n    //@return stamina  스태미나\n    //@return start  스타트\n    //@return burst 폭발력\n    //@return temperament  기질\n    //@return maxSpeed 최대 스피드\n    //@return maxStamina  최대 스태미나\n    //@return maxBurst  최대 폭발력\n    //@return maxStart  최대 스타트\n    //@return maxTemperament  최대 기질\n\n    function getAbility(uint _id)\n    public\n    view\n    returns (\n        uint8 speed,\n        uint8 stamina,\n        uint8 start,\n        uint8 burst,\n        uint8 temperament,\n        uint8 maxSpeed,\n        uint8 maxStamina,\n        uint8 maxBurst,\n        uint8 maxStart,\n        uint8 maxTemperament\n\n    ){\n        Ability memory _ability = ability[_id];\n        speed = _ability.speed;\n        stamina = _ability.stamina;\n        start = _ability.start;\n        burst = _ability.burst;\n        temperament = _ability.temperament;\n        maxSpeed = _ability.maxSpeed;\n        maxStamina = _ability.maxStamina;\n        maxBurst = _ability.maxBurst;\n        maxStart = _ability.maxStart;\n        maxTemperament = _ability.maxTemperament;\n    }\n\n\n}\n\n//@title 포니의 모든 작업을 처리하는 컨트렉트\n//@dev 포니 생성시 초기 유전자 코드 설정 필요\n\ncontract PonyCore is PonyDerby {\n\n    address public newContractAddress;\n\n    //@dev PonyCore의 생성자 (최초 한번만 실행됨)\n    constructor() public payable {\n        paused = true;\n        cfoAddress = msg.sender;\n        cooAddress = msg.sender;\n    }\n\n    //@param gensis gensis에 대한 유전자 코드\n    function genesisPonyInit(bytes22 _gensis, uint8[5] _ability, uint8[5] _maxAbility, uint[6] _gen0Stat) external onlyCOO whenPaused {\n        require(ponies.length==0);\n        uint zero = uint(0);\n        uint[2] memory parents = [zero, zero];\n        uint8[2] memory age = [0, 0];                \n        _createPony(0, parents, age, _gensis, 100, address(0),_ability,_maxAbility);\n        setGen0Stat(_gen0Stat);\n    }\n\n    function setNewAddress(address _v2Address)\n    external\n    onlyCOO whenPaused\n    {\n        newContractAddress = _v2Address;\n        emit ContractUpgrade(_v2Address);\n    }\n\n\n    function() external payable {\n        /*\n        require(\n            msg.sender == address(saleAuction) ||\n            msg.sender == address(siringAuction)\n        );\n        */\n    }\n\n    //@ 포니의 아이디에 해당하는 포니의 정보를 가져옴\n    //@param _id 포니의 아이디\n    function getPony(uint256 _id)\n    external\n    view\n    returns (        \n        bool isReady,\n        uint256 cooldownEndBlock,        \n        uint256 birthTime,\n        uint256 matronId,\n        uint256 sireId,\n        bytes22 genes,\n        uint256 age,\n        uint256 month,\n        uint256 retiredAge        \n    ) {\n        Pony storage pony = ponies[_id];        \n        isReady = (pony.cooldownEndBlock <= block.number);\n        cooldownEndBlock = pony.cooldownEndBlock;        \n        birthTime = uint256(pony.birthTime);\n        matronId = uint256(pony.matronId);\n        sireId = uint256(pony.sireId);\n        genes =  pony.genes;\n        age = uint256(pony.age);\n        month = uint256(pony.month);\n        retiredAge = uint256(pony.retiredAge);        \n    }\n\n    //@dev 컨트렉트를 작동시키는 method\n    //(SaleAuction, SiringAuction, GeneScience 지정되어 있어야하며, newContractAddress가 지정 되어 있지 않아야 함)\n    //modifier COO\n    function unPause()\n    public\n    onlyCOO\n    whenPaused\n    {\n        require(saleAuction != address(0));\n        require(siringAuction != address(0));\n        require(geneScience != address(0));\n        require(ponyAbility != address(0));\n        require(newContractAddress == address(0));\n\n        super.unPause();\n    }\n\n    //@dev 잔액을 인출하는 Method\n    //modifier CFO\n    function withdrawBalance(uint256 _value)\n    external\n    onlyCLevel\n    {\n        uint256 balance = address(this).balance;\n        require(balance >= _value);        \n        cfoAddress.transfer(_value);\n    }\n\n    function buyCarrot(uint256 carrotCount)\n    external\n    payable\n    whenNotPaused\n    {\n        emit carrotPurchased(msg.sender, msg.value, carrotCount);\n    }\n\n    event RewardSendSuccessful(address from, address to, uint value);    \n\n    function sendRankingReward(address[] _recipients, uint256[] _rewards)\n    external\n    payable\n    onlyRewardAdress\n    {\n        for(uint i = 0; i < _recipients.length; i++){\n            _recipients[i].transfer(_rewards[i]);\n            emit RewardSendSuccessful(this, _recipients[i], _rewards[i]);\n        }\n    }\n\n    event CarrotToETHSuccessful(address to, uint256 count, uint value);\n\n    function sendCarrotToETH(address _recipient, uint256 _carrotCount, uint256 _value)\n    external\n    payable\n    onlyRewardAdress\n    {        \n        _recipient.transfer(_value);\n        emit CarrotToETHSuccessful(_recipient, _carrotCount, _value);     \n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"maxSpeed\",\"type\":\"uint8\"},{\"name\":\"maxStamina\",\"type\":\"uint8\"},{\"name\":\"maxStart\",\"type\":\"uint8\"},{\"name\":\"maxBurst\",\"type\":\"uint8\"},{\"name\":\"maxTemperament\",\"type\":\"uint8\"}],\"name\":\"setPonyMaxStat\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"month\",\"type\":\"uint8\"},{\"name\":\"speed\",\"type\":\"uint8\"},{\"name\":\"stamina\",\"type\":\"uint8\"},{\"name\":\"start\",\"type\":\"uint8\"},{\"name\":\"burst\",\"type\":\"uint8\"},{\"name\":\"temperament\",\"type\":\"uint8\"}],\"name\":\"setPonyInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDerby\",\"type\":\"address\"}],\"name\":\"setDerbyAdress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSiringAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"siringAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGeneScienceAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_increaseRate\",\"type\":\"uint256\"}],\"name\":\"setNextGen0PriceRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_MINIMUM_STARTING_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPony\",\"outputs\":[{\"name\":\"isReady\",\"type\":\"bool\"},{\"name\":\"cooldownEndBlock\",\"type\":\"uint256\"},{\"name\":\"birthTime\",\"type\":\"uint256\"},{\"name\":\"matronId\",\"type\":\"uint256\"},{\"name\":\"sireId\",\"type\":\"uint256\"},{\"name\":\"genes\",\"type\":\"bytes22\"},{\"name\":\"age\",\"type\":\"uint256\"},{\"name\":\"month\",\"type\":\"uint256\"},{\"name\":\"retiredAge\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ponyId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPonyAbilityAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"canBreedWith\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ponyId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSiringAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setAutoBirthFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newReward\",\"type\":\"address\"}],\"name\":\"setRewardAdress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secs\",\"type\":\"uint256\"}],\"name\":\"setSecondsPerBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ponyIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"bytes22\"},{\"name\":\"_retiredAge\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_sireId\",\"type\":\"uint256\"},{\"name\":\"_age\",\"type\":\"uint8\"},{\"name\":\"_month\",\"type\":\"uint8\"},{\"name\":\"stats\",\"type\":\"uint8[5]\"},{\"name\":\"maxStats\",\"type\":\"uint8[5]\"}],\"name\":\"createPreCorePony\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"carrotCount\",\"type\":\"uint256\"}],\"name\":\"buyCarrot\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minPrice\",\"type\":\"uint256\"}],\"name\":\"setMinStartingPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxPrice\",\"type\":\"uint256\"}],\"name\":\"setMaxStartingPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondsPerBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_rewards\",\"type\":\"uint256[]\"}],\"name\":\"sendRankingReward\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isPonyRetired\",\"outputs\":[{\"name\":\"isRetired\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_carrotCount\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendCarrotToETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAuctionBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ponyIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"bytes22\"},{\"name\":\"_retiredAge\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_maxStats\",\"type\":\"uint8[5]\"}],\"name\":\"createPromoPony\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cooldowns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gensis\",\"type\":\"bytes22\"},{\"name\":\"_ability\",\"type\":\"uint8[5]\"},{\"name\":\"_maxAbility\",\"type\":\"uint8[5]\"},{\"name\":\"_gen0Stat\",\"type\":\"uint256[6]\"}],\"name\":\"genesisPonyInit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setAuctionDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"bytes22\"}],\"name\":\"createGen0Auction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"bytes22\"},{\"name\":\"_retiredAge\",\"type\":\"uint256\"},{\"name\":\"_maxStats\",\"type\":\"uint8[5]\"},{\"name\":\"_startPrice\",\"type\":\"uint8\"},{\"name\":\"_endPrice\",\"type\":\"uint256\"}],\"name\":\"createCustomGen0Auction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"derbyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoBirthFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_MAXIMUM_STARTING_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0Stat\",\"outputs\":[{\"name\":\"retiredAge\",\"type\":\"uint8\"},{\"name\":\"maxSpeed\",\"type\":\"uint8\"},{\"name\":\"maxStamina\",\"type\":\"uint8\"},{\"name\":\"maxStart\",\"type\":\"uint8\"},{\"name\":\"maxBurst\",\"type\":\"uint8\"},{\"name\":\"maxTemperament\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextGen0PriceRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ponyId\",\"type\":\"uint256\"}],\"name\":\"isReadyToBreed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getAbility\",\"outputs\":[{\"name\":\"speed\",\"type\":\"uint8\"},{\"name\":\"stamina\",\"type\":\"uint8\"},{\"name\":\"start\",\"type\":\"uint8\"},{\"name\":\"burst\",\"type\":\"uint8\"},{\"name\":\"temperament\",\"type\":\"uint8\"},{\"name\":\"maxSpeed\",\"type\":\"uint8\"},{\"name\":\"maxStamina\",\"type\":\"uint8\"},{\"name\":\"maxBurst\",\"type\":\"uint8\"},{\"name\":\"maxStart\",\"type\":\"uint8\"},{\"name\":\"maxTemperament\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gen0Stat\",\"type\":\"uint256[6]\"}],\"name\":\"setGen0Stat\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ponyAbility\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0AuctionDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sireId\",\"type\":\"uint256\"},{\"name\":\"_matronId\",\"type\":\"uint256\"}],\"name\":\"bidOnSiringAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0CreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"geneScience\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"breedWithAuto\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RewardSendSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CarrotToETHSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sireId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"matronCooldownEndBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sireCooldownEndBlock\",\"type\":\"uint256\"}],\"name\":\"Pregnant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ponyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sireId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genes\",\"type\":\"bytes22\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ponyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genes\",\"type\":\"bytes22\"}],\"name\":\"Relocate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receivedValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"carrotCount\",\"type\":\"uint256\"}],\"name\":\"carrotPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]",
  "bytecode": "6003805460a060020a60ff02191690556102606040526078608090815261012c60a05261025860c05261070860e052610e1061010052611c2061012052613840610140526170806101605261e10061018052620151806101a0526202a3006101c052620697806101e05262093a8061020052620d2f00610220526213c680610240526200009190600490600f62000117565b50600f601055662e2f6e5e14800060115567013fbe85edc900006012556706f05b59d3b200006013556103e860145562278d006015556003805460a060020a60ff0219167401000000000000000000000000000000000000000017905560008054600160a060020a031990811633908117909255600180549091169091179055620001e1565b600283019183908215620001a85791602002820160005b838211156200017457835183826101000a81548163ffffffff021916908363ffffffff16021790555092602001926004016020816003010492830192600103026200012e565b8015620001a65782816101000a81549063ffffffff021916905560040160208160030104928301926001030262000174565b505b50620001b6929150620001ba565b5090565b620001de91905b80821115620001b657805463ffffffff19168155600101620001c1565b90565b61449c80620001f16000396000f3006080604052600436106103295763ffffffff60e060020a60003504166301ffc9a7811461032b5780630416a8d2146103765780630519ce79146103ac57806305e45546146103dd57806306fdde0314610404578063095ea7b31461048e5780630a761f33146104b257806311453da7146104f457806314001f4c1461051557806318160ddd1461053657806321717ebf1461054b57806323b872dd1461056057806324e7a38a1461058a5780632ba73c15146105ab5780632cc2f997146105cc5780632d0020e4146105e457806336917dfa146105f95780633d7d3f5a146106675780633fcbb9311461068857806346d22c70146106a95780634ad8c938146106c45780634b85fd55146106e55780634e0a3379146106fd57806352ff03911461071e5780635663896e1461073f57806359d71a24146107575780635a5552ee1461076f5780635c975abb146107ba5780635d791938146107cf5780636352211e146107da5780636af04a57146107f25780636fba7544146108075780636fbde40d1461081f57806370a0823114610840578063715879881461086157806379808d51146108825780637a7d49371461089a5780637c6cd7bf146108af5780638456cb59146108ce5780638462151c146108e3578063863f7199146109545780638bf844ad1461096c5780638cf57cb91461098657806391876e571461099b57806395d89b41146109b05780639892a871146109c557806398c52d56146109dd5780639d6fac6f14610a135780639f8318c414610a44578063a497e67414610a70578063a62e3c9d14610a88578063a9059cbb14610aad578063ad12fce014610ad1578063ae91f14314610b05578063b047fb5014610b1a578063b0c35c0514610b2f578063beced1d314610b44578063bf00caca14610b59578063c0328cb814610bab578063d3e6f49f14610bc0578063d5523f7714610bd8578063da76d5cd14610c4e578063e307991014610c66578063e6cbe35114610ca9578063eb1c6fd114610cbe578063eb845c1714610cd3578063ed60ade614610ce8578063f1ca941014610cf6578063f2b47d5214610d0b578063f7b188a514610d20578063f7d8c88314610d35575b005b34801561033757600080fd5b506103627bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960043516610d43565b604080519115158252519081900360200190f35b34801561038257600080fd5b5061032960043560ff60243581169060443581169060643581169060843581169060a43516610f74565b3480156103b857600080fd5b506103c1611044565b60408051600160a060020a039092168252519081900360200190f35b3480156103e957600080fd5b506103f2611053565b60408051918252519081900360200190f35b34801561041057600080fd5b50610419611059565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561045357818101518382015260200161043b565b50505050905090810190601f1680156104805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561049a57600080fd5b50610329600160a060020a0360043516602435611090565b3480156104be57600080fd5b5061032960043560ff60243581169060443581169060643581169060843581169060a43581169060c43581169060e43516611112565b34801561050057600080fd5b50610329600160a060020a036004351661122d565b34801561052157600080fd5b50610329600160a060020a036004351661127b565b34801561054257600080fd5b506103f2611330565b34801561055757600080fd5b506103c161133a565b34801561056c57600080fd5b50610329600160a060020a0360043581169060243516604435611349565b34801561059657600080fd5b50610329600160a060020a03600435166113c5565b3480156105b757600080fd5b50610329600160a060020a036004351661147a565b3480156105d857600080fd5b506103296004356114c8565b3480156105f057600080fd5b506103f26114f3565b34801561060557600080fd5b506106116004356114f9565b604080519915158a5260208a0198909852888801969096526060880194909452608087019290925269ffffffffffffffffffff191660a086015260c085015260e084015261010083015251908190036101200190f35b34801561067357600080fd5b506103296004356024356044356064356115a9565b34801561069457600080fd5b50610329600160a060020a036004351661169f565b3480156106b557600080fd5b50610362600435602435611754565b3480156106d057600080fd5b506103296004356024356044356064356117d4565b3480156106f157600080fd5b506103296004356118ac565b34801561070957600080fd5b50610329600160a060020a03600435166118c8565b34801561072a57600080fd5b50610329600160a060020a0360043516611916565b34801561074b57600080fd5b50610329600435611964565b34801561076357600080fd5b506103c1600435611994565b34801561077b57600080fd5b5061032969ffffffffffffffffffff1960043516602435600160a060020a036044351660643560843560ff60a43581169060c4351660e46101846119af565b3480156107c657600080fd5b50610362611a95565b610329600435611aa5565b3480156107e657600080fd5b506103c1600435611afe565b3480156107fe57600080fd5b506103c1611b22565b34801561081357600080fd5b50610329600435611b31565b34801561082b57600080fd5b50610329600160a060020a0360043516611b4d565b34801561084c57600080fd5b506103f2600160a060020a0360043516611c02565b34801561086d57600080fd5b50610329600160a060020a0360043516611c1d565b34801561088e57600080fd5b50610329600435611ca0565b3480156108a657600080fd5b506103f2611cbc565b6103296024600480358281019290820135918135918201910135611cc2565b3480156108da57600080fd5b50610329611de0565b3480156108ef57600080fd5b50610904600160a060020a0360043516611e34565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610940578181015183820152602001610928565b505050509050019250505060405180910390f35b34801561096057600080fd5b50610362600435611f06565b610329600160a060020a0360043516602435604435611f5a565b34801561099257600080fd5b506103c1611ff6565b3480156109a757600080fd5b50610329612005565b3480156109bc57600080fd5b50610419612135565b3480156109d157600080fd5b506103c160043561216c565b3480156109e957600080fd5b5061032969ffffffffffffffffffff1960043516602435600160a060020a03604435166064612187565b348015610a1f57600080fd5b50610a2b60043561232e565b6040805163ffffffff9092168252519081900360200190f35b348015610a5057600080fd5b5061032969ffffffffffffffffffff1960043516602460c461016461235b565b348015610a7c57600080fd5b50610329600435612470565b348015610a9457600080fd5b5061032969ffffffffffffffffffff1960043516612491565b348015610ab957600080fd5b50610329600160a060020a03600435166024356126f9565b348015610add57600080fd5b5061032969ffffffffffffffffffff1960043516602435604460ff60e4351661010435612795565b348015610b1157600080fd5b506103c1612a48565b348015610b2657600080fd5b506103c1612a57565b348015610b3b57600080fd5b506103f2612a66565b348015610b5057600080fd5b506103f2612a6c565b348015610b6557600080fd5b50610b6e612a72565b6040805160ff978816815295871660208701529386168585015291851660608501528416608084015290921660a082015290519081900360c00190f35b348015610bb757600080fd5b506103f2612aae565b348015610bcc57600080fd5b50610362600435612ab4565b348015610be457600080fd5b50610bf0600435612b9e565b6040805160ff9b8c168152998b1660208b0152978a16898901529589166060890152938816608088015291871660a0870152861660c0860152851660e085015284166101008401529092166101208201529051908190036101400190f35b348015610c5a57600080fd5b50610329600435612d54565b348015610c7257600080fd5b506040805160c081810190925261032991369160049160c491908390600690839083908082843750939650612df895505050505050565b348015610cb557600080fd5b506103c1612ed1565b348015610cca57600080fd5b506103c1612ee0565b348015610cdf57600080fd5b506103f2612eef565b610329600435602435612ef5565b348015610d0257600080fd5b506103f261308f565b348015610d1757600080fd5b506103c1613095565b348015610d2c57600080fd5b506103296130a4565b61032960043560243561314f565b604080517f746f6b656e4d657461646174612875696e743235362c737472696e67290000008152815190819003601d0181207f746f6b656e734f664f776e657228616464726573732900000000000000000000825282519182900360160182207f7472616e7366657246726f6d28616464726573732c616464726573732c75696e83527f7432353629000000000000000000000000000000000000000000000000000000602084015283519283900360250183207f7472616e7366657228616464726573732c75696e743235362900000000000000845284519384900360190184207f617070726f766528616464726573732c75696e74323536290000000000000000855285519485900360180185207f6f776e65724f662875696e743235362900000000000000000000000000000000865286519586900360100186207f62616c616e63654f662861646472657373290000000000000000000000000000875287519687900360120187207f746f74616c537570706c792829000000000000000000000000000000000000008852885197889003600d0188207f73796d626f6c2829000000000000000000000000000000000000000000000000895289519889900360080189207f6e616d65282900000000000000000000000000000000000000000000000000008a529951988990036006019098207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff198b811691909a189098181818181818181891909116145b919050565b600254600090600160a060020a03163314610f8e57600080fd5b6006805488908110610f9c57fe5b6000918252602090912001805465ff000000000019166501000000000060ff988916021766ff00000000000019166601000000000000968816969096029590951767ff000000000000001916670100000000000000948716949094029390931768ff0000000000000000191668010000000000000000928616929092029190911769ff0000000000000000001916690100000000000000000091909416029290921790555050565b600054600160a060020a031681565b60165481565b60408051808201909152600681527f476f506f6e790000000000000000000000000000000000000000000000000000602082015281565b60035460a060020a900460ff16156110a757600080fd5b6110b13382613383565b15156110bc57600080fd5b6110c681836133a3565b60408051338152600160a060020a038416602082015280820183905290517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259181900360600190a15050565b6002546000908190600160a060020a0316331461112e57600080fd5b600880548b90811061113c57fe5b60009182526020909120600290910201805460ff8a811660c860020a0279ff0000000000000000000000000000000000000000000000000019918d1660c060020a0278ff00000000000000000000000000000000000000000000000019909316929092171617815560068054919350908b9081106111b657fe5b6000918252602090912001805460ff191660ff9889161761ff001916610100978916979097029690961762ff0000191662010000958816959095029490941763ff00000019166301000000938716939093029290921764ff0000000019166401000000009190951602939093179091555050505050565b600154600160a060020a0316331461124457600080fd5b600160a060020a038116151561125957600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600154600090600160a060020a0316331461129557600080fd5b81905080600160a060020a03166376190f8f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156112d657600080fd5b505af11580156112ea573d6000803e3d6000fd5b505050506040513d602081101561130057600080fd5b5051151561130d57600080fd5b600d8054600160a060020a031916600160a060020a039290921691909117905550565b6008546000190190565b600d54600160a060020a031681565b60035460a060020a900460ff161561136057600080fd5b600160a060020a038216151561137557600080fd5b600160a060020a03821630141561138b57600080fd5b61139533826133d1565b15156113a057600080fd5b6113aa8382613383565b15156113b557600080fd5b6113c08383836133f1565b505050565b600154600090600160a060020a031633146113df57600080fd5b81905080600160a060020a03166354c15b826040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561142057600080fd5b505af1158015611434573d6000803e3d6000fd5b505050506040513d602081101561144a57600080fd5b5051151561145757600080fd5b600f8054600160a060020a031916600160a060020a039290921691909117905550565b600054600160a060020a0316331461149157600080fd5b600160a060020a03811615156114a657600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b600154600160a060020a031633146114df57600080fd5b6127108111156114ee57600080fd5b601455565b60125481565b60008060008060008060008060008060088b81548110151561151757fe5b6000918252602090912060029091020180546001909101544367ffffffffffffffff6801000000000000000084048116918211159f919e5083169c5063ffffffff608060020a840481169c5060a060020a8404169a506a0100000000000000000000909102985060ff60c060020a83048116985060c860020a83048116975060d060020a909204909116945092505050565b60035460a060020a900460ff16156115c057600080fd5b6115ca3385613383565b15156115d557600080fd5b6115de84612ab4565b15156115e957600080fd5b600c54611600908590600160a060020a03166133a3565b600c54604080517f27ebe40a000000000000000000000000000000000000000000000000000000008152600481018790526024810186905260448101859052606481018490523360848201529051600160a060020a03909216916327ebe40a9160a48082019260009290919082900301818387803b15801561168157600080fd5b505af1158015611695573d6000803e3d6000fd5b5050505050505050565b600154600090600160a060020a031633146116b957600080fd5b81905080600160a060020a031663328913006040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156116fa57600080fd5b505af115801561170e573d6000803e3d6000fd5b505050506040513d602081101561172457600080fd5b5051151561173157600080fd5b600e8054600160a060020a031916600160a060020a039290921691909117905550565b6000808080851161176457600080fd5b6000841161177157600080fd5b600880548690811061177f57fe5b9060005260206000209060020201915060088481548110151561179e57fe5b906000526020600020906002020190506117ba828683876134c1565b80156117cb57506117cb8486613617565b95945050505050565b60035460a060020a900460ff16156117eb57600080fd5b6117f53385613383565b151561180057600080fd5b61180984612ab4565b151561181457600080fd5b600d5461182b908590600160a060020a03166133a3565b600d54604080517f27ebe40a000000000000000000000000000000000000000000000000000000008152600481018790526024810186905260448101859052606481018490523360848201529051600160a060020a03909216916327ebe40a9160a48082019260009290919082900301818387803b15801561168157600080fd5b600154600160a060020a031633146118c357600080fd5b601155565b600054600160a060020a031633146118df57600080fd5b600160a060020a03811615156118f457600080fd5b60008054600160a060020a031916600160a060020a0392909216919091179055565b600154600160a060020a0316331461192d57600080fd5b600160a060020a038116151561194257600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b600154600160a060020a0316331461197b57600080fd5b60045463ffffffff16811061198f57600080fd5b601055565b600b60205260009081526040902054600160a060020a031681565b60006119b961439e565b6119c161439e565b600154600160a060020a031633146119d857600080fd5b899250600160a060020a03831615156119fa57600154600160a060020a031692505b60408051908101604052808860ff1660ff1681526020018760ff1660ff16815250915060408051908101604052808a8152602001898152509050611a86600182848f8f888b600580602002604051908101604052809291908260056020028082843750506040805160a081810190925293508f92506005915083908390808284375061363e9350505050565b50505050505050505050505050565b60035460a060020a900460ff1681565b60035460a060020a900460ff1615611abc57600080fd5b6040805133815234602082015280820183905290517f3b1f33cd7a9283ad87739f0ef4d9be13b03698b0e8a61587a4d9ad0dd352f7a39181900360600190a150565b600081815260096020526040902054600160a060020a0316801515610f6f57600080fd5b601854600160a060020a031681565b600154600160a060020a03163314611b4857600080fd5b601255565b600154600090600160a060020a03163314611b6757600080fd5b81905080600160a060020a03166385b861886040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611ba857600080fd5b505af1158015611bbc573d6000803e3d6000fd5b505050506040513d6020811015611bd257600080fd5b50511515611bdf57600080fd5b600c8054600160a060020a031916600160a060020a039290921691909117905550565b600160a060020a03166000908152600a602052604090205490565b600154600160a060020a03163314611c3457600080fd5b60035460a060020a900460ff161515611c4c57600080fd5b60188054600160a060020a038316600160a060020a0319909116811790915560408051918252517f450db8da6efbe9c22f2347f7c2021231df1fc58d3ae9a2fa75d39fa4461993059181900360200190a150565b600154600160a060020a03163314611cb757600080fd5b601355565b60105481565b600354600090600160a060020a03163314611cdc57600080fd5b5060005b83811015611dd957848482818110611cf457fe5b90506020020135600160a060020a0316600160a060020a03166108fc8484848181101515611d1e57fe5b905060200201359081150290604051600060405180830381858888f19350505050158015611d50573d6000803e3d6000fd5b507f02f82126d826d0ffee87341ba824e5c1281882204b82e44c61d7321c9d342dba30868684818110611d7f57fe5b90506020020135600160a060020a03168585858181101515611d9d57fe5b60408051600160a060020a03968716815294909516602085810191909152029190910135828401525090519081900360600190a1600101611ce0565b5050505050565b600154600160a060020a03163314611df757600080fd5b60035460a060020a900460ff1615611e0e57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a179055565b6060600060606000806000611e4887611c02565b9450841515611e67576040805160008152602081019091529550611efc565b84604051908082528060200260200182016040528015611e91578160200160208202803883390190505b509350611e9c611330565b925060009150600190505b828111611ef857600081815260096020526040902054600160a060020a0388811691161415611ef057808483815181101515611edf57fe5b602090810290910101526001909101905b600101611ea7565b8395505b5050505050919050565b600080600883815481101515611f1857fe5b60009182526020909120600290910201805490915060ff60d060020a8204811660c060020a9092041610611f4f5760019150611f54565b600091505b50919050565b600354600160a060020a03163314611f7157600080fd5b604051600160a060020a0384169082156108fc029083906000818181858888f19350505050158015611fa7573d6000803e3d6000fd5b5060408051600160a060020a03851681526020810184905280820183905290517f6dfb0d5fcc2644d6040cfbd3cbce207ff793954e522f4360025b27f1c5da15f79181900360600190a1505050565b600354600160a060020a031681565b600154600160a060020a03163314806120285750600054600160a060020a031633145b8061203d5750600254600160a060020a031633145b806120525750600354600160a060020a031633145b151561205d57600080fd5b600c60009054906101000a9004600160a060020a0316600160a060020a0316635fd8c7106040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156120b057600080fd5b505af11580156120c4573d6000803e3d6000fd5b50505050600d60009054906101000a9004600160a060020a0316600160a060020a0316635fd8c7106040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561211b57600080fd5b505af115801561212f573d6000803e3d6000fd5b50505050565b60408051808201909152600281527f4750000000000000000000000000000000000000000000000000000000000000602082015281565b600960205260009081526040902054600160a060020a031681565b6000806121926143b9565b61219a61439e565b6121a261439e565b600154600160a060020a031633146121b957600080fd5b869450600160a060020a03851615156121db57600154600160a060020a031694505b50506016805460010190556040805180820182526000808252602080830182905283518085018552828152908101829052600e5484517f64ba401f00000000000000000000000000000000000000000000000000000000815269ffffffffffffffffffff198d166004820152945192965092939092600160a060020a0316916364ba401f9160248082019260a09290919082900301818a87803b15801561228157600080fd5b505af1158015612295573d6000803e3d6000fd5b505050506040513d60a08110156122ab57600080fd5b50805160208083015160408085015160608087015160809788015160ff908116988c01989098528716908a01528516888201529084169187019190915291168452805160a080820190925261232291600091849186918e918e918c918b91908f9060059083908390808284375061363e9350505050565b50505050505050505050565b600481600f811061233b57fe5b60089182820401919006600402915054906101000a900463ffffffff1681565b600061236561439e565b61236d61439e565b600154600160a060020a0316331461238457600080fd5b60035460a060020a900460ff16151561239c57600080fd5b600854156123a957600080fd5b6000925060408051908101604052808481526020018481525091506040805190810160405280600060ff168152602001600060ff16815250905061243e600083838a606460008c600580602002604051908101604052809291908260056020028082843782019150505050508c60058060200260405190810160405280929190826005602002808284375061363e9350505050565b506040805160c0818101909252612467918690600690839083908082843750612df89350505050565b50505050505050565b600154600160a060020a0316331461248757600080fd5b6201518002601555565b600061249b6143b9565b6124a36143b9565b6124ab61439e565b6124b361439e565b600154600090600160a060020a031633146124cd57600080fd5b6040805160a0818101835260075460ff6101008204811684526201000082048116602080860191909152630100000083048216858701526401000000008304821660608601526501000000000090920416608084015283518085018552600080825281830181905285518087018752818152928301819052600e5486517f64ba401f00000000000000000000000000000000000000000000000000000000815269ffffffffffffffffffff198f1660048201529651919c50949950909750909550600160a060020a03909216926364ba401f926024808301939282900301818c87803b1580156125bc57600080fd5b505af11580156125d0573d6000803e3d6000fd5b505050506040513d60a08110156125e657600080fd5b50805160208083015160408085015160608087015160809788015160ff908116988e01989098528716908c01528516908a01528316908801528116865260075461263c91600091859187918c9116308b8b61363e565b600c54909150612656908290600160a060020a03166133a3565b600c54600160a060020a03166327ebe40a82612670613c2b565b6015546040805160e060020a63ffffffff871602815260048101949094526024840192909252662386f26fc10000604484015260648301523060848301525160a480830192600092919082900301818387803b1580156126cf57600080fd5b505af11580156126e3573d6000803e3d6000fd5b5050601780546001019055505050505050505050565b60035460a060020a900460ff161561271057600080fd5b600160a060020a038216151561272557600080fd5b600160a060020a03821630141561273b57600080fd5b600c54600160a060020a038381169116141561275657600080fd5b600d54600160a060020a038381169116141561277157600080fd5b61277b3382613383565b151561278657600080fd5b6127913383836133f1565b5050565b600061279f6143b9565b6127a761439e565b6127af61439e565b600154600090600160a060020a031633146127c957600080fd5b60ff8716662386f26fc10000106127df57600080fd5b662386f26fc1000086116127f257600080fd5b600094506040805190810160405280600060ff168152602001600060ff1681525092506040805190810160405280868152602001868152509150600e60009054906101000a9004600160a060020a0316600160a060020a03166364ba401f8b6040518263ffffffff1660e060020a028152600401808269ffffffffffffffffffff191669ffffffffffffffffffff1916815260200191505060a060405180830381600087803b1580156128a457600080fd5b505af11580156128b8573d6000803e3d6000fd5b505050506040513d60a08110156128ce57600080fd5b5080516020820151604083015160608401516080909401519293919290919088600060200201896001602002018a6002602002018b6003602002018c6004602002018560ff1660ff168152508560ff1660ff168152508560ff1660ff168152508560ff1660ff168152508560ff1660ff16815250505050505061297b600083858d8d308a8f60058060200260405190810160405280929190826005602002808284375061363e9350505050565b600c54909150612995908290600160a060020a03166133a3565b600c54601554604080517f27ebe40a0000000000000000000000000000000000000000000000000000000081526004810185905260ff8b166024820152604481018a9052606481019290925230608483015251600160a060020a03909216916327ebe40a9160a48082019260009290919082900301818387803b158015612a1b57600080fd5b505af1158015612a2f573d6000803e3d6000fd5b5050601780546001019055505050505050505050505050565b600254600160a060020a031681565b600154600160a060020a031681565b60115481565b60135481565b60075460ff8082169161010081048216916201000082048116916301000000810482169164010000000082048116916501000000000090041686565b60145481565b600080808311612ac357600080fd5b6008805484908110612ad157fe5b600091825260209182902060408051610100810182526002909302909101805467ffffffffffffffff8082168552680100000000000000008204169484019490945263ffffffff608060020a850481169284019290925260a060020a8404909116606083015260ff60c060020a84048116608084015260c860020a8404811660a084015260d060020a90930490921660c0820152600182015469ffffffffffffffffffff196a01000000000000000000009091021660e0820152909150612b9790613d05565b9392505050565b600080600080600080600080600080612bb56143d8565b600680548d908110612bc357fe5b9060005260206000200161014060405190810160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff1660ff1660ff1681526020016000820160039054906101000a900460ff1660ff1660ff1681526020016000820160049054906101000a900460ff1660ff1660ff1681526020016000820160059054906101000a900460ff1660ff1660ff1681526020016000820160069054906101000a900460ff1660ff1660ff1681526020016000820160079054906101000a900460ff1660ff1660ff1681526020016000820160089054906101000a900460ff1660ff1660ff1681526020016000820160099054906101000a900460ff1660ff1660ff1681525050905080600001519a50806020015199508060400151985080606001519750806080015196508060a0015195508060c00151945080610100015193508060e0015192508061012001519150509193959799509193959799565b600154600090600160a060020a0316331480612d7a5750600054600160a060020a031633145b80612d8f5750600254600160a060020a031633145b80612da45750600354600160a060020a031633145b1515612daf57600080fd5b50303181811015612dbf57600080fd5b60008054604051600160a060020a039091169184156108fc02918591818181858888f193505050501580156113c0573d6000803e3d6000fd5b600154600160a060020a03163314612e0f57600080fd5b6040805160c081018252825160ff90811680835260208086015183169084018190528585015183169484018590526060808701518416908501819052608080880151851690860181905260a097880151909416969094018690526007805460ff191690921761ff0019166101009091021762ff00001916620100009094029390931763ff000000191663010000009092029190911764ff0000000019166401000000009091021765ff0000000000191665010000000000909202919091179055565b600c54600160a060020a031681565b600e54600160a060020a031681565b60155481565b60035460009060a060020a900460ff1615612f0f57600080fd5b612f193383613383565b1515612f2457600080fd5b612f2d82612ab4565b1515612f3857600080fd5b612f428284613d1c565b1515612f4d57600080fd5b600d54604080517fc55d0f56000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a039092169163c55d0f56916024808201926020929091908290030181600087803b158015612fb457600080fd5b505af1158015612fc8573d6000803e3d6000fd5b505050506040513d6020811015612fde57600080fd5b50516011549091508101341015612ff457600080fd5b600d54601154604080517f454a2ab3000000000000000000000000000000000000000000000000000000008152600481018790529051600160a060020a039093169263454a2ab39234039160248082019260009290919082900301818588803b15801561306057600080fd5b505af1158015613074573d6000803e3d6000fd5b50505050506113c08263ffffffff168463ffffffff16613d6b565b60175481565b600f54600160a060020a031681565b600154600160a060020a031633146130bb57600080fd5b60035460a060020a900460ff1615156130d357600080fd5b600c54600160a060020a031615156130ea57600080fd5b600d54600160a060020a0316151561310157600080fd5b600f54600160a060020a0316151561311857600080fd5b600e54600160a060020a0316151561312f57600080fd5b601854600160a060020a03161561314557600080fd5b61314d613e60565b565b600354600090819060a060020a900460ff161561316b57600080fd5b60115434101561317a57600080fd5b6131843385613383565b151561318f57600080fd5b6131998385613617565b15156131a457600080fd5b60088054859081106131b257fe5b600091825260209182902060408051610100810182526002909302909101805467ffffffffffffffff8082168552680100000000000000008204169484019490945263ffffffff608060020a850481169284019290925260a060020a8404909116606083015260ff60c060020a84048116608084015260c860020a8404811660a084015260d060020a90930490921660c0820152600182015469ffffffffffffffffffff196a01000000000000000000009091021660e082015290925061327890613d05565b151561328357600080fd5b600880548490811061329157fe5b600091825260209182902060408051610100810182526002909302909101805467ffffffffffffffff8082168552680100000000000000008204169484019490945263ffffffff608060020a850481169284019290925260a060020a8404909116606083015260ff60c060020a84048116608084015260c860020a8404811660a084015260d060020a90930490921660c0820152600182015469ffffffffffffffffffff196a01000000000000000000009091021660e082015290915061335790613d05565b151561336257600080fd5b61336e828583866134c1565b151561337957600080fd5b61212f8484613d6b565b600090815260096020526040902054600160a060020a0391821691161490565b6000918252600b60205260409091208054600160a060020a031916600160a060020a03909216919091179055565b6000908152600b6020526040902054600160a060020a0391821691161490565b600160a060020a038083166000818152600a6020908152604080832080546001019055858352600990915290208054600160a060020a031916909117905583161561347257600160a060020a0383166000908152600a602090815260408083208054600019019055838352600b90915290208054600160a060020a03191690555b60408051600160a060020a0380861682528416602082015280820183905290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360600190a1505050565b6000818414156134d35750600061360f565b8454608060020a900463ffffffff168214806134fc5750845460a060020a900463ffffffff1682145b156135095750600061360f565b8254608060020a900463ffffffff168414806135325750825460a060020a900463ffffffff1684145b1561353f5750600061360f565b8254608060020a900463ffffffff16158061356657508454608060020a900463ffffffff16155b156135735750600161360f565b84548354608060020a9182900463ffffffff908116929091041614806135b2575084548354608060020a900463ffffffff90811660a060020a90920416145b156135bf5750600061360f565b8454835460a060020a900463ffffffff908116608060020a9092041614806135fe57508454835460a060020a9182900463ffffffff9081169290910416145b1561360b5750600061360f565b5060015b949350505050565b60009081526009602052604080822054928252902054600160a060020a0391821691161490565b600061364861442c565b6136506143d8565b8951600090819063ffffffff81161461366857600080fd5b60208c015163ffffffff81161461367e57600080fd5b63ffffffff8916891461369057600080fd5b604080516101008101825267ffffffffffffffff4216815260006020820181905290918201908e906020908102919091015163ffffffff168252018d60016020908102919091015163ffffffff168252018c60006020908102919091015160ff168252018c6001602002015160ff1681526020018a60ff1681526020018b69ffffffffffffffffffff191681525093506101406040519081016040528088600060058110151561373c57fe5b6020908102919091015160ff168252018860016020908102919091015160ff168252018860026020908102919091015160ff168252018860036020908102919091015160ff168252018860046020908102919091015160ff168252018760006020908102919091015160ff168252018760016020908102919091015160ff168252018760026020908102919091015160ff168252018760036020908102919091015160ff16825201876004602002015160ff16815250925060016008859080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160106101000a81548163ffffffff021916908363ffffffff16021790555060608201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060808201518160000160186101000a81548160ff021916908360ff16021790555060a08201518160000160196101000a81548160ff021916908360ff16021790555060c082015181600001601a6101000a81548160ff021916908360ff16021790555060e08201518160010160006101000a81548175ffffffffffffffffffffffffffffffffffffffffffff02191690836a0100000000000000000000900402179055505050039150600160068490806001815401808255809150509060018203906000526020600020016000909192909190915060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff16021790555060608201518160000160036101000a81548160ff021916908360ff16021790555060808201518160000160046101000a81548160ff021916908360ff16021790555060a08201518160000160056101000a81548160ff021916908360ff16021790555060c08201518160000160066101000a81548160ff021916908360ff16021790555060e08201518160000160076101000a81548160ff021916908360ff1602179055506101008201518160000160086101000a81548160ff021916908360ff1602179055506101208201518160000160096101000a81548160ff021916908360ff16021790555050500390508163ffffffff1682141515613b0a57600080fd5b63ffffffff81168114613b1c57600080fd5b818114613b2857600080fd5b8c60ff1660011415613b935760e084015160408051600160a060020a038b1681526020810185905269ffffffffffffffffffff1990921682820152517f0d7d0c7ed4f354a39dacf0ef8c1134bd7a492e00229d7068f8454377d2547e629181900360600190a1613c0f565b60408481015160608087015160e08801518451600160a060020a038e1681526020810188905263ffffffff94851681870152939091169183019190915269ffffffffffffffffffff1916608082015290517fe465c79ded075209bc7587e787932aa3812ed7fa715c2e2aaf9916e9f97bfe5f9181900360a00190a15b613c1b600089846133f1565b509b9a5050505050505050505050565b6000806000600c60009054906101000a9004600160a060020a0316600160a060020a031663eac9d94c6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015613c8357600080fd5b505af1158015613c97573d6000803e3d6000fd5b505050506040513d6020811015613cad57600080fd5b505191506fffffffffffffffffffffffffffffffff82168214613ccf57600080fd5b6014546127109083020482019050601254811015613cf05750601254613cff565b601354811115613cff57506013545b92915050565b6020015167ffffffffffffffff4381169116111590565b6000806000600885815481101515613d3057fe5b90600052602060002090600202019150600884815481101515613d4f57fe5b906000526020600020906002020190506117cb828683876134c1565b600080600883815481101515613d7d57fe5b90600052602060002090600202019150600884815481101515613d9c57fe5b90600052602060002090600202019050613db582613eaf565b613dbe81613eaf565b613dc782613fa0565b613dd081613fa0565b60008481526009602090815260409182902054835485548451600160a060020a03909316835292820188905281840187905267ffffffffffffffff6801000000000000000091829004811660608401529204909116608082015290517f92f88a5b0e68184d6eaf466894625052095288be7d39de2429081c769956be1e9181900360a00190a1611dd9848461405b565b600154600160a060020a03163314613e7757600080fd5b60035460a060020a900460ff161515613e8f57600080fd5b6003805474ff000000000000000000000000000000000000000019169055565b8054600e60c060020a90910460ff161015613f4857601054815443919060049060c060020a900460ff16600f8110613ee357fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff16811515613f0e57fe5b83546fffffffffffffffff0000000000000000191668010000000000000000929091049290920167ffffffffffffffff1602178155613f9d565b60105460055443919060c060020a900463ffffffff16811515613f6757fe5b83546fffffffffffffffff0000000000000000191668010000000000000000929091049290920167ffffffffffffffff16021781555b50565b8054600660ff60c860020a90920482160190600c9082161061402957815478ff00000000000000000000000000000000000000000000000019811660c060020a9182900460ff90811660010181169092021779ff00000000000000000000000000000000000000000000000000191660c860020a600b1984019290921691909102178255612791565b815460ff821660c860020a0279ff00000000000000000000000000000000000000000000000000199091161782555050565b60008060008060008061406c6143b9565b6140746143b9565b61407c61439e565b61408461439e565b600060088d81548110151561409557fe5b600091825260209091206002909102018054909a5067ffffffffffffffff1615156140bf57600080fd5b600880548d9081106140cd57fe5b600091825260208220600f5460018e810154600290940290920191820154604080517f2cd29d7e00000000000000000000000000000000000000000000000000000000815269ffffffffffffffffffff196a010000000000000000000096870281166004830152929095029190911660248501528051929d50600160a060020a0390911693632cd29d7e9360448082019492918390030190829087803b15801561417657600080fd5b505af115801561418a573d6000803e3d6000fd5b505050506040513d60408110156141a057600080fd5b8101908080519060200190929190805190602001909291905050508098508199505050600960008e815260200190815260200160002060009054906101000a9004600160a060020a0316955060a060405190810160405280600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff16815250945060a060405190810160405280600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff16815250935060408051908101604052808e81526020018d81525092506040805190810160405280600060ff168152602001600060ff168152509150600e60009054906101000a9004600160a060020a0316600160a060020a03166364ba401f896040518263ffffffff1660e060020a028152600401808269ffffffffffffffffffff191669ffffffffffffffffffff1916815260200191505060a060405180830381600087803b15801561431657600080fd5b505af115801561432a573d6000803e3d6000fd5b505050506040513d60a081101561434057600080fd5b50805160208083015160408085015160608087015160809788015160ff908116988e01989098528716908c01528516908a015283169088015216855261438d600084848b8b8b8b8b61363e565b9d9c50505050505050505050505050565b60408051808201825290600290829080388339509192915050565b60a0604051908101604052806005906020820280388339509192915050565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081019190915290565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810191909152905600a165627a7a72305820b972e563f71126c4b1daddae9fc160422950b6dd87fcb5701ac01f333c4f97cb0029"
}