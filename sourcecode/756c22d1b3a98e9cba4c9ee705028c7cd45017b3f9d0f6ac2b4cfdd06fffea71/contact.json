{
  "address": "0x1fe3825a3012e581843a483df1452fc2fa4f0bad",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "JcashRegistrar",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-28\n*/\n\n/* Author: Aleksey Selikhov  [emailÂ protected] */\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title CommonModifiersInterface\n * @dev Base contract which contains common checks.\n */\ncontract CommonModifiersInterface {\n\n  /**\n   * @dev Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n   */\n  function isContract(address _targetAddress) internal constant returns (bool);\n\n  /**\n   * @dev modifier to allow actions only when the _targetAddress is a contract.\n   */\n  modifier onlyContractAddress(address _targetAddress) {\n    require(isContract(_targetAddress) == true);\n    _;\n  }\n}\n\n\n/**\n * @title CommonModifiers\n * @dev Base contract which contains common checks.\n */\ncontract CommonModifiers is CommonModifiersInterface {\n\n  /**\n   * @dev Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n   */\n  function isContract(address _targetAddress) internal constant returns (bool) {\n    require (_targetAddress != address(0x0));\n\n    uint256 length;\n    assembly {\n      //retrieve the size of the code on target address, this needs assembly\n      length := extcodesize(_targetAddress)\n    }\n    return (length > 0);\n  }\n}\n\n\n/**\n * @title OwnableInterface\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract OwnableInterface {\n\n  /**\n   * @dev The getter for \"owner\" contract variable\n   */\n  function getOwner() public constant returns (address);\n\n  /**\n   * @dev Throws if called by any account other than the current owner.\n   */\n  modifier onlyOwner() {\n    require (msg.sender == getOwner());\n    _;\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable is OwnableInterface {\n\n  /* Storage */\n\n  address owner = address(0x0);\n  address proposedOwner = address(0x0);\n\n\n  /* Events */\n\n  event OwnerAssignedEvent(address indexed newowner);\n  event OwnershipOfferCreatedEvent(address indexed currentowner, address indexed proposedowner);\n  event OwnershipOfferAcceptedEvent(address indexed currentowner, address indexed proposedowner);\n  event OwnershipOfferCancelledEvent(address indexed currentowner, address indexed proposedowner);\n\n\n  /**\n   * @dev The constructor sets the initial `owner` to the passed account.\n   */\n  constructor () public {\n    owner = msg.sender;\n\n    emit OwnerAssignedEvent(owner);\n  }\n\n\n  /**\n   * @dev Old owner requests transfer ownership to the new owner.\n   * @param _proposedOwner The address to transfer ownership to.\n   */\n  function createOwnershipOffer(address _proposedOwner) external onlyOwner {\n    require (proposedOwner == address(0x0));\n    require (_proposedOwner != address(0x0));\n    require (_proposedOwner != address(this));\n\n    proposedOwner = _proposedOwner;\n\n    emit OwnershipOfferCreatedEvent(owner, _proposedOwner);\n  }\n\n\n  /**\n   * @dev Allows the new owner to accept an ownership offer to contract control.\n   */\n  //noinspection UnprotectedFunction\n  function acceptOwnershipOffer() external {\n    require (proposedOwner != address(0x0));\n    require (msg.sender == proposedOwner);\n\n    address _oldOwner = owner;\n    owner = proposedOwner;\n    proposedOwner = address(0x0);\n\n    emit OwnerAssignedEvent(owner);\n    emit OwnershipOfferAcceptedEvent(_oldOwner, owner);\n  }\n\n\n  /**\n   * @dev Old owner cancels transfer ownership to the new owner.\n   */\n  function cancelOwnershipOffer() external {\n    require (proposedOwner != address(0x0));\n    require (msg.sender == owner || msg.sender == proposedOwner);\n\n    address _oldProposedOwner = proposedOwner;\n    proposedOwner = address(0x0);\n\n    emit OwnershipOfferCancelledEvent(owner, _oldProposedOwner);\n  }\n\n\n  /**\n   * @dev The getter for \"owner\" contract variable\n   */\n  function getOwner() public constant returns (address) {\n    return owner;\n  }\n\n  /**\n   * @dev The getter for \"proposedOwner\" contract variable\n   */\n  function getProposedOwner() public constant returns (address) {\n    return proposedOwner;\n  }\n}\n\n\n/**\n * @title ManageableInterface\n * @dev Contract that allows to grant permissions to any address\n * @dev In real life we are no able to perform all actions with just one Ethereum address\n * @dev because risks are too high.\n * @dev Instead owner delegates rights to manage an contract to the different addresses and\n * @dev stay able to revoke permissions at any time.\n */\ncontract ManageableInterface {\n\n  /**\n   * @dev Function to check if the manager can perform the action or not\n   * @param _manager        address Manager`s address\n   * @param _permissionName string  Permission name\n   * @return True if manager is enabled and has been granted needed permission\n   */\n  function isManagerAllowed(address _manager, string _permissionName) public constant returns (bool);\n\n  /**\n   * @dev Modifier to use in derived contracts\n   */\n  modifier onlyAllowedManager(string _permissionName) {\n    require(isManagerAllowed(msg.sender, _permissionName) == true);\n    _;\n  }\n}\n\n\ncontract Manageable is OwnableInterface,\n                       ManageableInterface {\n\n  /* Storage */\n\n  mapping (address => bool) managerEnabled;  // hard switch for a manager - on/off\n  mapping (address => mapping (string => bool)) managerPermissions;  // detailed info about manager`s permissions\n\n\n  /* Events */\n\n  event ManagerEnabledEvent(address indexed manager);\n  event ManagerDisabledEvent(address indexed manager);\n  event ManagerPermissionGrantedEvent(address indexed manager, bytes32 permission);\n  event ManagerPermissionRevokedEvent(address indexed manager, bytes32 permission);\n\n\n  /* Configure contract */\n\n  /**\n   * @dev Function to add new manager\n   * @param _manager address New manager\n   */\n  function enableManager(address _manager) external onlyOwner onlyValidManagerAddress(_manager) {\n    require(managerEnabled[_manager] == false);\n\n    managerEnabled[_manager] = true;\n\n    emit ManagerEnabledEvent(_manager);\n  }\n\n  /**\n   * @dev Function to remove existing manager\n   * @param _manager address Existing manager\n   */\n  function disableManager(address _manager) external onlyOwner onlyValidManagerAddress(_manager) {\n    require(managerEnabled[_manager] == true);\n\n    managerEnabled[_manager] = false;\n\n    emit ManagerDisabledEvent(_manager);\n  }\n\n  /**\n   * @dev Function to grant new permission to the manager\n   * @param _manager        address Existing manager\n   * @param _permissionName string  Granted permission name\n   */\n  function grantManagerPermission(\n    address _manager, string _permissionName\n  )\n    external\n    onlyOwner\n    onlyValidManagerAddress(_manager)\n    onlyValidPermissionName(_permissionName)\n  {\n    require(managerPermissions[_manager][_permissionName] == false);\n\n    managerPermissions[_manager][_permissionName] = true;\n\n    emit ManagerPermissionGrantedEvent(_manager, keccak256(_permissionName));\n  }\n\n  /**\n   * @dev Function to revoke permission of the manager\n   * @param _manager        address Existing manager\n   * @param _permissionName string  Revoked permission name\n   */\n  function revokeManagerPermission(\n    address _manager, string _permissionName\n  )\n    external\n    onlyOwner\n    onlyValidManagerAddress(_manager)\n    onlyValidPermissionName(_permissionName)\n  {\n    require(managerPermissions[_manager][_permissionName] == true);\n\n    managerPermissions[_manager][_permissionName] = false;\n\n    emit ManagerPermissionRevokedEvent(_manager, keccak256(_permissionName));\n  }\n\n\n  /* Getters */\n\n  /**\n   * @dev Function to check manager status\n   * @param _manager address Manager`s address\n   * @return True if manager is enabled\n   */\n  function isManagerEnabled(\n    address _manager\n  )\n    public\n    constant\n    onlyValidManagerAddress(_manager)\n    returns (bool)\n  {\n    return managerEnabled[_manager];\n  }\n\n  /**\n   * @dev Function to check permissions of a manager\n   * @param _manager        address Manager`s address\n   * @param _permissionName string  Permission name\n   * @return True if manager has been granted needed permission\n   */\n  function isPermissionGranted(\n    address _manager, string _permissionName\n  )\n    public\n    constant\n    onlyValidManagerAddress(_manager)\n    onlyValidPermissionName(_permissionName)\n    returns (bool)\n  {\n    return managerPermissions[_manager][_permissionName];\n  }\n\n  /**\n   * @dev Function to check if the manager can perform the action or not\n   * @param _manager        address Manager`s address\n   * @param _permissionName string  Permission name\n   * @return True if manager is enabled and has been granted needed permission\n   */\n  function isManagerAllowed(\n    address _manager, string _permissionName\n  )\n    public\n    constant\n    onlyValidManagerAddress(_manager)\n    onlyValidPermissionName(_permissionName)\n    returns (bool)\n  {\n    return (managerEnabled[_manager] && managerPermissions[_manager][_permissionName]);\n  }\n\n\n  /* Helpers */\n\n  /**\n   * @dev Modifier to check manager address\n   */\n  modifier onlyValidManagerAddress(address _manager) {\n    require(_manager != address(0x0));\n    _;\n  }\n\n  /**\n   * @dev Modifier to check name of manager permission\n   */\n  modifier onlyValidPermissionName(string _permissionName) {\n    require(bytes(_permissionName).length != 0);\n    _;\n  }\n}\n\n\n/**\n * @title PausableInterface\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n * @dev Based on zeppelin's Pausable, but integrated with Manageable\n * @dev Contract is in paused state by default and should be explicitly unlocked\n */\ncontract PausableInterface {\n\n  /**\n   * Events\n   */\n\n  event PauseEvent();\n  event UnpauseEvent();\n\n\n  /**\n   * @dev called by the manager to pause, triggers stopped state\n   */\n  function pauseContract() public;\n\n  /**\n   * @dev called by the manager to unpause, returns to normal state\n   */\n  function unpauseContract() public;\n\n  /**\n   * @dev The getter for \"paused\" contract variable\n   */\n  function getPaused() public constant returns (bool);\n\n\n  /**\n   * @dev modifier to allow actions only when the contract IS paused\n   */\n  modifier whenContractNotPaused() {\n    require(getPaused() == false);\n    _;\n  }\n\n  /**\n   * @dev modifier to allow actions only when the contract IS NOT paused\n   */\n  modifier whenContractPaused {\n    require(getPaused() == true);\n    _;\n  }\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n * @dev Based on zeppelin's Pausable, but integrated with Manageable\n * @dev Contract is in paused state by default and should be explicitly unlocked\n */\ncontract Pausable is ManageableInterface,\n                     PausableInterface {\n\n  /**\n   * Storage\n   */\n\n  bool paused = true;\n\n\n  /**\n   * @dev called by the manager to pause, triggers stopped state\n   */\n  function pauseContract() public onlyAllowedManager('pause_contract') whenContractNotPaused {\n    paused = true;\n    emit PauseEvent();\n  }\n\n  /**\n   * @dev called by the manager to unpause, returns to normal state\n   */\n  function unpauseContract() public onlyAllowedManager('unpause_contract') whenContractPaused {\n    paused = false;\n    emit UnpauseEvent();\n  }\n\n  /**\n   * @dev The getter for \"paused\" contract variable\n   */\n  function getPaused() public constant returns (bool) {\n    return paused;\n  }\n}\n\n\n\n/**\n * @title CrydrViewERC20Interface\n * @dev ERC20 interface to use in applications\n */\ncontract CrydrViewERC20Interface {\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  function transfer(address _to, uint256 _value) external returns (bool);\n  function totalSupply() external constant returns (uint256);\n  function balanceOf(address _owner) external constant returns (uint256);\n\n  function approve(address _spender, uint256 _value) external returns (bool);\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n  function allowance(address _owner, address _spender) external constant returns (uint256);\n}\n\n\n/**\n * @title CrydrViewERC20LoggableInterface\n * @dev Contract is able to create Transfer/Approval events with the cal from controller\n */\ncontract CrydrViewERC20LoggableInterface {\n\n  function emitTransferEvent(address _from, address _to, uint256 _value) external;\n  function emitApprovalEvent(address _owner, address _spender, uint256 _value) external;\n}\n\n\n/**\n * @title CrydrStorageERC20Interface interface\n * @dev Interface of a contract that manages balance of an CryDR and have optimization for ERC20 controllers\n */\ncontract CrydrStorageERC20Interface {\n\n  /* Events */\n\n  event CrydrTransferredEvent(address indexed from, address indexed to, uint256 value);\n  event CrydrTransferredFromEvent(address indexed spender, address indexed from, address indexed to, uint256 value);\n  event CrydrSpendingApprovedEvent(address indexed owner, address indexed spender, uint256 value);\n\n\n  /* ERC20 optimization. _msgsender - account that invoked CrydrView */\n\n  function transfer(address _msgsender, address _to, uint256 _value) public;\n  function transferFrom(address _msgsender, address _from, address _to, uint256 _value) public;\n  function approve(address _msgsender, address _spender, uint256 _value) public;\n}\n\n\n/**\n * @title CrydrControllerBaseInterface interface\n * @dev Interface of a contract that implement business-logic of an CryDR, mediates CryDR views and storage\n */\ncontract CrydrControllerBaseInterface {\n\n  /* Events */\n\n  event CrydrStorageChangedEvent(address indexed crydrstorage);\n  event CrydrViewAddedEvent(address indexed crydrview, bytes32 standardname);\n  event CrydrViewRemovedEvent(address indexed crydrview, bytes32 standardname);\n\n\n  /* Configuration */\n\n  function setCrydrStorage(address _newStorage) external;\n  function getCrydrStorageAddress() public constant returns (address);\n\n  function setCrydrView(address _newCrydrView, string _viewApiStandardName) external;\n  function removeCrydrView(string _viewApiStandardName) external;\n  function getCrydrViewAddress(string _viewApiStandardName) public constant returns (address);\n\n  function isCrydrViewAddress(address _crydrViewAddress) public constant returns (bool);\n  function isCrydrViewRegistered(string _viewApiStandardName) public constant returns (bool);\n\n\n  /* Helpers */\n\n  modifier onlyValidCrydrViewStandardName(string _viewApiStandard) {\n    require(bytes(_viewApiStandard).length > 0);\n    _;\n  }\n\n  modifier onlyCrydrView() {\n    require(isCrydrViewAddress(msg.sender) == true);\n    _;\n  }\n}\n\n\n/**\n * @title JNTPaymentGatewayInterface\n * @dev Allows to charge users by JNT\n */\ncontract JNTPaymentGatewayInterface {\n\n  /* Events */\n\n  event JNTChargedEvent(address indexed payableservice, address indexed from, address indexed to, uint256 value);\n\n\n  /* Actions */\n\n  function chargeJNT(address _from, address _to, uint256 _value) public;\n}\n\n\n/**\n * @title JNTPaymentGateway\n * @dev Allows to charge users by JNT\n */\ncontract JNTPaymentGateway is ManageableInterface,\n                              CrydrControllerBaseInterface,\n                              JNTPaymentGatewayInterface {\n\n  function chargeJNT(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    onlyAllowedManager('jnt_payable_service')\n  {\n    CrydrStorageERC20Interface(getCrydrStorageAddress()).transfer(_from, _to, _value);\n\n    emit JNTChargedEvent(msg.sender, _from, _to, _value);\n    if (isCrydrViewRegistered('erc20') == true) {\n      CrydrViewERC20LoggableInterface(getCrydrViewAddress('erc20')).emitTransferEvent(_from, _to, _value);\n    }\n  }\n}\n\n\n\n/**\n * @title JNTPayableService interface\n * @dev Interface of a contract that charge JNT for actions\n */\ncontract JNTPayableServiceInterface {\n\n  /* Events */\n\n  event JNTControllerChangedEvent(address jntcontroller);\n  event JNTBeneficiaryChangedEvent(address jntbeneficiary);\n  event JNTChargedEvent(address indexed payer, address indexed to, uint256 value, bytes32 actionname);\n\n\n  /* Configuration */\n\n  function setJntController(address _jntController) external;\n  function getJntController() public constant returns (address);\n\n  function setJntBeneficiary(address _jntBeneficiary) external;\n  function getJntBeneficiary() public constant returns (address);\n\n  function setActionPrice(string _actionName, uint256 _jntPriceWei) external;\n  function getActionPrice(string _actionName) public constant returns (uint256);\n\n\n  /* Actions */\n\n  function initChargeJNT(address _payer, string _actionName) internal;\n}\n\n\ncontract JNTPayableService is CommonModifiersInterface,\n                              ManageableInterface,\n                              PausableInterface,\n                              JNTPayableServiceInterface {\n\n  /* Storage */\n\n  JNTPaymentGateway jntController;\n  address jntBeneficiary;\n  mapping (string => uint256) actionPrice;\n\n\n  /* Configuration */\n\n  function setJntController(\n    address _jntController\n  )\n    external\n    onlyContractAddress(_jntController)\n    onlyAllowedManager('set_jnt_controller')\n    whenContractPaused\n  {\n    require(_jntController != address(jntController));\n\n    jntController = JNTPaymentGateway(_jntController);\n\n    emit JNTControllerChangedEvent(_jntController);\n  }\n\n  function getJntController() public constant returns (address) {\n    return address(jntController);\n  }\n\n\n  function setJntBeneficiary(\n    address _jntBeneficiary\n  )\n    external\n    onlyValidJntBeneficiary(_jntBeneficiary)\n    onlyAllowedManager('set_jnt_beneficiary')\n    whenContractPaused\n  {\n    require(_jntBeneficiary != jntBeneficiary);\n    require(_jntBeneficiary != address(this));\n\n    jntBeneficiary = _jntBeneficiary;\n\n    emit JNTBeneficiaryChangedEvent(jntBeneficiary);\n  }\n\n  function getJntBeneficiary() public constant returns (address) {\n    return jntBeneficiary;\n  }\n\n\n  function setActionPrice(\n    string _actionName,\n    uint256 _jntPriceWei\n  )\n    external\n    onlyAllowedManager('set_action_price')\n    onlyValidActionName(_actionName)\n    whenContractPaused\n  {\n    require (_jntPriceWei > 0);\n\n    actionPrice[_actionName] = _jntPriceWei;\n  }\n\n  function getActionPrice(\n    string _actionName\n  )\n    public\n    constant\n    onlyValidActionName(_actionName)\n    returns (uint256)\n  {\n    return actionPrice[_actionName];\n  }\n\n\n  /* Actions */\n\n  function initChargeJNT(\n    address _from,\n    string _actionName\n  )\n    internal\n    onlyValidActionName(_actionName)\n    whenContractNotPaused\n  {\n    require(_from != address(0x0));\n    require(_from != jntBeneficiary);\n\n    uint256 _actionPrice = getActionPrice(_actionName);\n    require (_actionPrice > 0);\n\n    jntController.chargeJNT(_from, jntBeneficiary, _actionPrice);\n\n    emit JNTChargedEvent(_from, jntBeneficiary, _actionPrice, keccak256(_actionName));\n  }\n\n\n  /* Pausable */\n\n  /**\n   * @dev Override method to ensure that contract properly configured before it is unpaused\n   */\n  function unpauseContract()\n    public\n    onlyContractAddress(jntController)\n    onlyValidJntBeneficiary(jntBeneficiary)\n  {\n    super.unpauseContract();\n  }\n\n\n  /* Modifiers */\n\n  modifier onlyValidJntBeneficiary(address _jntBeneficiary) {\n    require(_jntBeneficiary != address(0x0));\n    _;\n  }\n\n  /**\n   * @dev Modifier to check name of manager permission\n   */\n  modifier onlyValidActionName(string _actionName) {\n    require(bytes(_actionName).length != 0);\n    _;\n  }\n}\n\n\n/**\n * @title JcashRegistrarInterface\n * @dev Interface of a contract that can receives ETH&ERC20, refunds ETH&ERC20 and logs these operations\n */\ncontract JcashRegistrarInterface {\n\n  /* Events */\n\n  event ReceiveEthEvent(address indexed from, uint256 value);\n  event RefundEthEvent(bytes32 txhash, address indexed to, uint256 value);\n  event TransferEthEvent(bytes32 txhash, address indexed to, uint256 value);\n\n  event RefundTokenEvent(bytes32 txhash, address indexed tokenaddress, address indexed to, uint256 value);\n  event TransferTokenEvent(bytes32 txhash, address indexed tokenaddress, address indexed to, uint256 value);\n\n  event ReplenishEthEvent(address indexed from, uint256 value);\n  event WithdrawEthEvent(address indexed to, uint256 value);\n  event WithdrawTokenEvent(address indexed tokenaddress, address indexed to, uint256 value);\n\n  event PauseEvent();\n  event UnpauseEvent();\n\n\n  /* Replenisher actions */\n\n  /**\n   * @dev Allows to withdraw ETH by Replenisher.\n   */\n  function withdrawEth(uint256 _weivalue) external;\n\n  /**\n   * @dev Allows to withdraw tokens by Replenisher.\n   */\n  function withdrawToken(address _tokenAddress, uint256 _weivalue) external;\n\n\n  /* Processing of exchange operations */\n\n  /**\n   * @dev Allows to perform refund ETH.\n   */\n  function refundEth(bytes32 _txHash, address _to, uint256 _weivalue) external;\n\n  /**\n   * @dev Allows to perform refund ERC20 tokens.\n   */\n  function refundToken(bytes32 _txHash, address _tokenAddress, address _to, uint256 _weivalue) external;\n\n  /**\n   * @dev Allows to perform transfer ETH.\n   *\n   */\n  function transferEth(bytes32 _txHash, address _to, uint256 _weivalue) external;\n\n  /**\n   * @dev Allows to perform transfer ERC20 tokens.\n   */\n  function transferToken(bytes32 _txHash, address _tokenAddress, address _to, uint256 _weivalue) external;\n\n\n  /* Getters */\n\n  /**\n   * @dev The getter returns true if tx hash is processed\n   */\n  function isProcessedTx(bytes32 _txHash) public view returns (bool);\n}\n\n\n/**\n * @title JcashRegistrar\n * @dev Implementation of a contract that can receives ETH&ERC20, refunds ETH&ERC20 and logs these operations\n */\ncontract JcashRegistrar is CommonModifiers,\n                           Ownable,\n                           Manageable,\n                           Pausable,\n                           JNTPayableService,\n                           JcashRegistrarInterface {\n\n  /* Storage */\n\n  mapping (bytes32 => bool) processedTxs;\n\n\n  /* Events */\n\n  event ReceiveEthEvent(address indexed from, uint256 value);\n  event RefundEthEvent(bytes32 txhash, address indexed to, uint256 value);\n  event TransferEthEvent(bytes32 txhash, address indexed to, uint256 value);\n  event RefundTokenEvent(bytes32 txhash, address indexed tokenaddress, address indexed to, uint256 value);\n  event TransferTokenEvent(bytes32 txhash, address indexed tokenaddress, address indexed to, uint256 value);\n\n  event ReplenishEthEvent(address indexed from, uint256 value);\n  event WithdrawEthEvent(address indexed to, uint256 value);\n  event WithdrawTokenEvent(address indexed tokenaddress, address indexed to, uint256 value);\n\n  event PauseEvent();\n  event UnpauseEvent();\n\n\n  /* Modifiers */\n\n  /**\n   * @dev Fix for the ERC20 short address attack.\n   */\n  modifier onlyPayloadSize(uint256 size) {\n    require(msg.data.length == (size + 4));\n\n    _;\n  }\n\n  /**\n   * @dev Fallback function allowing the contract to receive funds, if contract haven't already been paused.\n   */\n  function () external payable {\n    if (isManagerAllowed(msg.sender, 'replenish_eth')==true) {\n      emit ReplenishEthEvent(msg.sender, msg.value);\n    } else {\n      require (getPaused() == false);\n      emit ReceiveEthEvent(msg.sender, msg.value);\n    }\n  }\n\n\n  /* Replenisher actions */\n\n  /**\n   * @dev Allows to withdraw ETH by Replenisher.\n   */\n  function withdrawEth(\n    uint256 _weivalue\n  )\n    external\n    onlyAllowedManager('replenish_eth')\n    onlyPayloadSize(1 * 32)\n  {\n    require (_weivalue > 0);\n\n    address(msg.sender).transfer(_weivalue);\n    emit WithdrawEthEvent(msg.sender, _weivalue);\n  }\n\n  /**\n   * @dev Allows to withdraw tokens by Replenisher.\n   */\n  function withdrawToken(\n    address _tokenAddress,\n    uint256 _weivalue\n  )\n    external\n    onlyAllowedManager('replenish_token')\n    onlyPayloadSize(2 * 32)\n  {\n    require (_tokenAddress != address(0x0));\n    require (_tokenAddress != address(this));\n    require (_weivalue > 0);\n\n    CrydrViewERC20Interface(_tokenAddress).transfer(msg.sender, _weivalue);\n    emit WithdrawTokenEvent(_tokenAddress, msg.sender, _weivalue);\n  }\n\n\n  /* Processing of exchange operations */\n\n  /**\n   * @dev Allows to perform refund ETH.\n   */\n  function refundEth(\n    bytes32 _txHash,\n    address _to,\n    uint256 _weivalue\n  )\n    external\n    onlyAllowedManager('refund_eth')\n    whenContractNotPaused\n    onlyPayloadSize(3 * 32)\n  {\n    require (_txHash != bytes32(0));\n    require (processedTxs[_txHash] == false);\n    require (_to != address(0x0));\n    require (_to != address(this));\n    require (_weivalue > 0);\n\n    processedTxs[_txHash] = true;\n    _to.transfer(_weivalue);\n\n    emit RefundEthEvent(_txHash, _to, _weivalue);\n  }\n\n  /**\n   * @dev Allows to perform refund ERC20 tokens.\n   */\n  function refundToken(\n    bytes32 _txHash,\n    address _tokenAddress,\n    address _to,\n    uint256 _weivalue\n  )\n    external\n    onlyAllowedManager('refund_token')\n    whenContractNotPaused\n    onlyPayloadSize(4 * 32)\n  {\n    require (_txHash != bytes32(0));\n    require (processedTxs[_txHash] == false);\n    require (_tokenAddress != address(0x0));\n    require (_tokenAddress != address(this));\n    require (_to != address(0x0));\n    require (_to != address(this));\n    require (_weivalue > 0);\n\n    processedTxs[_txHash] = true;\n    CrydrViewERC20Interface(_tokenAddress).transfer(_to, _weivalue);\n\n    emit RefundTokenEvent(_txHash, _tokenAddress, _to, _weivalue);\n  }\n\n  /**\n   * @dev Allows to perform transfer ETH.\n   *\n   */\n  function transferEth(\n    bytes32 _txHash,\n    address _to,\n    uint256 _weivalue\n  )\n    external\n    onlyAllowedManager('transfer_eth')\n    whenContractNotPaused\n    onlyPayloadSize(3 * 32)\n  {\n    require (_txHash != bytes32(0));\n    require (processedTxs[_txHash] == false);\n    require (_to != address(0x0));\n    require (_to != address(this));\n    require (_weivalue > 0);\n\n    processedTxs[_txHash] = true;\n    _to.transfer(_weivalue);\n\n    if (getActionPrice('transfer_eth') > 0) {\n      initChargeJNT(_to, 'transfer_eth');\n    }\n\n    emit TransferEthEvent(_txHash, _to, _weivalue);\n  }\n\n  /**\n   * @dev Allows to perform transfer ERC20 tokens.\n   */\n  function transferToken(\n    bytes32 _txHash,\n    address _tokenAddress,\n    address _to,\n    uint256 _weivalue\n  )\n    external\n    onlyAllowedManager('transfer_token')\n    whenContractNotPaused\n    onlyPayloadSize(4 * 32)\n  {\n    require (_txHash != bytes32(0));\n    require (processedTxs[_txHash] == false);\n    require (_tokenAddress != address(0x0));\n    require (_tokenAddress != address(this));\n    require (_to != address(0x0));\n    require (_to != address(this));\n\n    processedTxs[_txHash] = true;\n    CrydrViewERC20Interface(_tokenAddress).transfer(_to, _weivalue);\n\n    if (getActionPrice('transfer_token') > 0) {\n      initChargeJNT(_to, 'transfer_token');\n    }\n\n    emit TransferTokenEvent(_txHash, _tokenAddress, _to, _weivalue);\n  }\n\n\n  /* Getters */\n\n  /**\n   * @dev The getter returns true if tx hash is processed\n   */\n  function isProcessedTx(\n    bytes32 _txHash\n  )\n    public\n    view\n    onlyPayloadSize(1 * 32)\n    returns (bool)\n  {\n    require (_txHash != bytes32(0));\n    return processedTxs[_txHash];\n  }\n}",
  "bytecode": "608060405260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600460006101000a81548160ff021916908315150217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8d2a41ca5ff551a8f68510de75177b7d56e6019c8579b5509d2be1bb41a0d0af60405160405180910390a261373a806101556000396000f30060806040526004361061016a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630392d2b41461027357806315c5c950146103145780631b94413f1461035d5780631eb96a5c146103b8578063270f7219146103cf578063288054071461042657806332a2fda7146104a1578063439766ce1461054257806347f67eab146105595780635ca5b3341461059e5780636805b84b146105e15780637c0efb8b146106105780637de5ad891461066b578063822b08d0146106ae578063893d20e8146107095780639739db9d146107605780639b53d87c146107a35780639e281a98146107fe578063a2f56b2c1461084b578063b33712c5146108a6578063c2608314146108bd578063c311d04914610914578063c5af380814610941578063c5e974ed14610984578063c6c8823c146109ff578063d4859dc514610a7c578063eae5a62d14610abf578063f538534514610b16575b600115156101ad336040805190810160405280600d81526020017f7265706c656e6973685f65746800000000000000000000000000000000000000815250610b2d565b15151415610208573373ffffffffffffffffffffffffffffffffffffffff167f6a155903da182a2894b58e03d1ffb33c39e4ebec7a7cc0bc54945e709d9c91f1346040518082815260200191505060405180910390a2610271565b60001515610214610c93565b151514151561022257600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167f9f2aa993778384d1a464178bc602fe2f113364d0faad0eb68cbff639d2932bcb346040518082815260200191505060405180910390a25b005b34801561027f57600080fd5b506102fa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610b2d565b604051808215151515815260200191505060405180910390f35b34801561032057600080fd5b506103436004803603810190808035600019169060200190929190505050610caa565b604051808215151515815260200191505060405180910390f35b34801561036957600080fd5b506103b66004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d0f565b005b3480156103c457600080fd5b506103cd610fd4565b005b3480156103db57600080fd5b506103e46111cb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043257600080fd5b5061049f6004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111f5565b005b3480156104ad57600080fd5b50610528600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061155b565b604051808215151515815260200191505060405180910390f35b34801561054e57600080fd5b5061055761166c565b005b34801561056557600080fd5b5061059c60048036038101908080359060200190820180359060200191909192939192939080359060200190929190505050611722565b005b3480156105aa57600080fd5b506105df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611812565b005b3480156105ed57600080fd5b506105f6610c93565b604051808215151515815260200191505060405180910390f35b34801561061c57600080fd5b50610669600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190820180359060200191909192939192939050505061198e565b005b34801561067757600080fd5b506106ac600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bc6565b005b3480156106ba57600080fd5b50610707600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001919091929391929390505050611d54565b005b34801561071557600080fd5b5061071e611f8c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561076c57600080fd5b506107a1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611fb5565b005b3480156107af57600080fd5b506107e4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612189565b604051808215151515815260200191505060405180910390f35b34801561080a57600080fd5b50610849600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061221d565b005b34801561085757600080fd5b506108a46004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612456565b005b3480156108b257600080fd5b506108bb612695565b005b3480156108c957600080fd5b506108d261273e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561092057600080fd5b5061093f60048036038101908080359060200190929190505050612768565b005b34801561094d57600080fd5b50610982600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061287a565b005b34801561099057600080fd5b506109fd6004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612a86565b005b348015610a0b57600080fd5b50610a66600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612e63565b6040518082815260200191505060405180910390f35b348015610a8857600080fd5b50610abd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612eeb565b005b348015610acb57600080fd5b50610ad4613067565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b2257600080fd5b50610b2b613091565b005b600082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610b6c57600080fd5b826000815114151515610b7e57600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff168015610c895750600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020846040518082805190602001908083835b602083101515610c475780518252602082019150602081019050602083039250610c22565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff165b9250505092915050565b6000600460009054906101000a900460ff16905090565b60006020600481016000369050141515610cc357600080fd5b600060010260001916836000191614151515610cde57600080fd5b60076000846000191660001916815260200190815260200160002060009054906101000a900460ff16915050919050565b6040805190810160405280600c81526020017f7472616e736665725f657468000000000000000000000000000000000000000081525060011515610d533383610b2d565b1515141515610d6157600080fd5b60001515610d6d610c93565b1515141515610d7b57600080fd5b6060600481016000369050141515610d9257600080fd5b600060010260001916856000191614151515610dad57600080fd5b6000151560076000876000191660001916815260200190815260200160002060009054906101000a900460ff161515141515610de857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515610e2457600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515610e5f57600080fd5b600083111515610e6e57600080fd5b600160076000876000191660001916815260200190815260200160002060006101000a81548160ff0219169083151502179055508373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015610ee8573d6000803e3d6000fd5b506000610f296040805190810160405280600c81526020017f7472616e736665725f6574680000000000000000000000000000000000000000815250612e63565b1115610f6f57610f6e846040805190810160405280600c81526020017f7472616e736665725f65746800000000000000000000000000000000000000008152506132f6565b5b8373ffffffffffffffffffffffffffffffffffffffff167fe293d1008bdac0138e0cdb59f704a5bccc2bf371fff7f35bab379f0cbccdf31686856040518083600019166000191681526020018281526020019250505060405180910390a25050505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561103357600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806110db5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156110e657600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f223225995c0c0965e8752fd93ca10aba4bafcbca26f31b1565955adb68e76bda60405160405180910390a350565b6000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6040805190810160405280600c81526020017f726566756e645f746f6b656e0000000000000000000000000000000000000000815250600115156112393383610b2d565b151514151561124757600080fd5b60001515611253610c93565b151514151561126157600080fd5b608060048101600036905014151561127857600080fd5b60006001026000191686600019161415151561129357600080fd5b6000151560076000886000191660001916815260200190815260200160002060009054906101000a900460ff1615151415156112ce57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415151561130a57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415151561134557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561138157600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156113bc57600080fd5b6000831115156113cb57600080fd5b600160076000886000191660001916815260200190815260200160002060006101000a81548160ff0219169083151502179055508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156114a257600080fd5b505af11580156114b6573d6000803e3d6000fd5b505050506040513d60208110156114cc57600080fd5b8101908080519060200190929190505050508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fa739a4d86a454452cb1a2d9053db4aba2db0b7f25cb697742cfa1b910cbb45fc88866040518083600019166000191681526020018281526020019250505060405180910390a3505050505050565b600082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561159a57600080fd5b8260008151141515156115ac57600080fd5b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020846040518082805190602001908083835b60208310151561162157805182526020820191506020810190506020830392506115fc565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff169250505092915050565b6040805190810160405280600e81526020017f70617573655f636f6e7472616374000000000000000000000000000000000000815250600115156116b03383610b2d565b15151415156116be57600080fd5b600015156116ca610c93565b15151415156116d857600080fd5b6001600460006101000a81548160ff0219169083151502179055507f14cc32b2b0edca88201ca20553c392d108a2feb2c750a0ee14c707b4f34fbee260405160405180910390a150565b6040805190810160405280601081526020017f7365745f616374696f6e5f707269636500000000000000000000000000000000815250600115156117663383610b2d565b151514151561177457600080fd5b83838080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505060008151141515156117b857600080fd5b600115156117c4610c93565b15151415156117d257600080fd5b6000831115156117e157600080fd5b8260068686604051808383808284378201915050925050509081526020016040518091039020819055505050505050565b61181a611f8c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561185357600080fd5b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561189057600080fd5b60001515600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156118ef57600080fd5b6001600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f7f0b61f78ab0b549b68ce61404f4ee01a26ffdf8d421d099d271d789aaea3a8e60405160405180910390a25050565b611996611f8c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119cf57600080fd5b82600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611a0c57600080fd5b82828080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050506000815114151515611a5057600080fd5b60011515600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020858560405180838380828437820191505092505050908152602001604051809103902060009054906101000a900460ff161515141515611ad257600080fd5b6000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020858560405180838380828437820191505092505050908152602001604051809103902060006101000a81548160ff0219169083151502179055508473ffffffffffffffffffffffffffffffffffffffff167ffef063ea41a1d4d73bca77475bd8fc3c81a1145b2f3afa879a1530bb6a8401e3858560405180838380828437820191505092505050604051809103902060405180826000191660001916815260200191505060405180910390a25050505050565b8060011515611bd482613609565b1515141515611be257600080fd5b6040805190810160405280601281526020017f7365745f6a6e745f636f6e74726f6c6c6572000000000000000000000000000081525060011515611c263383610b2d565b1515141515611c3457600080fd5b60011515611c40610c93565b1515141515611c4e57600080fd5b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611cab57600080fd5b82600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fbc0c9683f9532136692cf8da566bb4c95e7181f306a5071816b35fb2fbb6234883604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1505050565b611d5c611f8c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d9557600080fd5b82600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611dd257600080fd5b82828080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050506000815114151515611e1657600080fd5b60001515600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020858560405180838380828437820191505092505050908152602001604051809103902060009054906101000a900460ff161515141515611e9857600080fd5b6001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020858560405180838380828437820191505092505050908152602001604051809103902060006101000a81548160ff0219169083151502179055508473ffffffffffffffffffffffffffffffffffffffff167fc1b43c9c4075dfc74444e2d220aecef01cd89d63abb613d28f1f727c973f1f50858560405180838380828437820191505092505050604051809103902060405180826000191660001916815260200191505060405180910390a25050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611fbd611f8c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ff657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561205357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561208f57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156120ca57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f0c5d18b25c2665dfeec8ea7956663ec48f079fdd04799ddd335f2fdce1a9fceb60405160405180910390a350565b600081600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156121c857600080fd5b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16915050919050565b6040805190810160405280600f81526020017f7265706c656e6973685f746f6b656e0000000000000000000000000000000000815250600115156122613383610b2d565b151514151561226f57600080fd5b604060048101600036905014151561228657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156122c257600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156122fd57600080fd5b60008311151561230c57600080fd5b8373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156123af57600080fd5b505af11580156123c3573d6000803e3d6000fd5b505050506040513d60208110156123d957600080fd5b8101908080519060200190929190505050503373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f641b6dfcd7a1e4a3897f63d0ada4e6c425c9b74a705399bfd105931ad2ee9d11856040518082815260200191505060405180910390a350505050565b6040805190810160405280600a81526020017f726566756e645f657468000000000000000000000000000000000000000000008152506001151561249a3383610b2d565b15151415156124a857600080fd5b600015156124b4610c93565b15151415156124c257600080fd5b60606004810160003690501415156124d957600080fd5b6000600102600019168560001916141515156124f457600080fd5b6000151560076000876000191660001916815260200190815260200160002060009054906101000a900460ff16151514151561252f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561256b57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156125a657600080fd5b6000831115156125b557600080fd5b600160076000876000191660001916815260200190815260200160002060006101000a81548160ff0219169083151502179055508373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f1935050505015801561262f573d6000803e3d6000fd5b508373ffffffffffffffffffffffffffffffffffffffff167fe8b092b72b5832cc34e44d22da74ea115e6889f415a9fd25767f7615cfbecbbe86856040518083600019166000191681526020018281526020019250505060405180910390a25050505050565b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600115156126c582613609565b15151415156126d357600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561273257600080fd5b61273a613658565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6040805190810160405280600d81526020017f7265706c656e6973685f65746800000000000000000000000000000000000000815250600115156127ac3383610b2d565b15151415156127ba57600080fd5b60206004810160003690501415156127d157600080fd5b6000831115156127e057600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015612826573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167fd4ac5a1758a4878945e9fffe2bbc7e42ac2a67ec9474bb885b0c91062bf57851846040518082815260200191505060405180910390a2505050565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156128b757600080fd5b6040805190810160405280601381526020017f7365745f6a6e745f62656e656669636961727900000000000000000000000000815250600115156128fb3383610b2d565b151514151561290957600080fd5b60011515612915610c93565b151514151561292357600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561298057600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156129bb57600080fd5b82600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f1ece313ac7706e8e41d52a3383f0415fe3f3062b92b49d194dcd1f1d15f3b1f3600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1505050565b6040805190810160405280600e81526020017f7472616e736665725f746f6b656e00000000000000000000000000000000000081525060011515612aca3383610b2d565b1515141515612ad857600080fd5b60001515612ae4610c93565b1515141515612af257600080fd5b6080600481016000369050141515612b0957600080fd5b600060010260001916866000191614151515612b2457600080fd5b6000151560076000886000191660001916815260200190815260200160002060009054906101000a900460ff161515141515612b5f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614151515612b9b57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614151515612bd657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515612c1257600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515612c4d57600080fd5b600160076000886000191660001916815260200190815260200160002060006101000a81548160ff0219169083151502179055508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612d2457600080fd5b505af1158015612d38573d6000803e3d6000fd5b505050506040513d6020811015612d4e57600080fd5b8101908080519060200190929190505050506000612da06040805190810160405280600e81526020017f7472616e736665725f746f6b656e000000000000000000000000000000000000815250612e63565b1115612de657612de5846040805190810160405280600e81526020017f7472616e736665725f746f6b656e0000000000000000000000000000000000008152506132f6565b5b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f15d96f7ab9ae6bb6621f9ff4ce3341921e42d7b4b030e928c2c2653f9337b57288866040518083600019166000191681526020018281526020019250505060405180910390a3505050505050565b6000816000815114151515612e7757600080fd5b6006836040518082805190602001908083835b602083101515612eaf5780518252602082019150602081019050602083039250612e8a565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902054915050919050565b612ef3611f8c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612f2c57600080fd5b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612f6957600080fd5b60011515600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515612fc857600080fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f91975e22df3ba360814d3153e8eaef17954cf47d52a42840fc9747ad1086b35160405160405180910390a25050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156130f057600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561314c57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8d2a41ca5ff551a8f68510de75177b7d56e6019c8579b5509d2be1bb41a0d0af60405160405180910390a26000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f3912b3f6ff73ee5d4cd2894666c349dec2d3d2ed7dc6d35c28c5eabf105a88d860405160405180910390a350565b600081600081511415151561330a57600080fd5b60001515613316610c93565b151514151561332457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561336057600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156133bd57600080fd5b6133c683612e63565b91506000821115156133d757600080fd5b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bed9d71285600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156134f257600080fd5b505af1158015613506573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f9f09374ab46f44196ad9d33bcb237f06abd19b3d64e801907b96cec9675311f884866040518082805190602001908083835b6020831015156135b2578051825260208201915060208101905060208303925061358d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518083815260200182600019166000191681526020019250505060405180910390a350505050565b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561364857600080fd5b823b905060008111915050919050565b6040805190810160405280601081526020017f756e70617573655f636f6e7472616374000000000000000000000000000000008152506001151561369c3383610b2d565b15151415156136aa57600080fd5b600115156136b6610c93565b15151415156136c457600080fd5b6000600460006101000a81548160ff0219169083151502179055507f6249a5c797c884cbf33e63e8cfc250816032db24e22051de68a388315e64afc660405160405180910390a1505600a165627a7a72305820830ffdbbb137a548742eaca9657ae2de63073c41d7e358d990f7b5e1a349ed3c0029"
}