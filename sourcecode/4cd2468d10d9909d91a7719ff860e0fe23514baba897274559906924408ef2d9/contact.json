{
  "address": "0x2a93826d4e815e34a9abfe5565de51ecfc6d59b2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BitMEXFund",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-18\n*/\n\npragma solidity ^0.4.20;\n\n/*\nBitMEX Fund\n\nhttps://bitmex.fund\n\nWhat is BitMEX Fund?\n\nBitMEX Fund is an investment vehicle which allows you to invest ETH into the XB10 smart contract and take\nadvantage of experienced futures traders using our proprietary algo trading system on the BitMEX Cryptocurrency\nFutures Exchange.  Our first fund trades 10X leverage on the XBTUSD Perpetual Inverse Swap Contract.  Nearly all \nof our trades are made on market making orders and receive 0.075% payments on each order. \n\nHow do I invest?\n\nYou will invest using Ethereum to buy XB10 shares.  You will need an Ethereum wallet such as metamask or trustwallet.\nJust enter the amount of Ethereum you want to invest and the page will tell you the number of XB10 shares you will receive.   \nThen complete the transaction with you wallet provider.\n\n\nWhen can I invest?\n\nOur token exchange will launch at 2200 UTC on March 19, 2019.\n\nWhen will the first Bitmex trades begin?\n\nWe will make our first deposit from the fund on March 22, 2019 or later.   Addional deposits from the fund will happen daily at \n2200 UTC.   Profits from the Bitmex accounts will sent to the XB10 Ethereum contract and automatically distributed to \nXB10 token holders.  Distibututions are made in relation to the amount of XB10 tokens you own.  You will be able to check the \nstatus of your account at bitmex.fund.\n\nWhat happens when I invest in XB10 shares?\n\nWhen you send your ETH to the XB10 contract you will purchase a calculated number of XB10 shares.   The price of XB10 \nincreases with the number of shares in the contract.   The XB10 contract will allocate 80% of your invested ETH to the Bitmex Trading fund.\n10% will be distributed to other XB10 token holders.   10% will be kept in the contract for liquidity.  If you ever sell your XB10 shares, 10%\nwill be deducted as an exit fee and distributed to all remaining XB10 shareholders.  But if you sell you will lose your ongoing BitMEX trading \nprofit distributions.\n\nWhat happens with Bitmex trading account?\n\nDeposits from the XB10 are converted to BTC and deposited to our Bitmex trading account.   When profits are made in the accounts, 14% are \nretained for the developers, 80% are deposited into the XB10 contract and distributed to XB10 shareholders, and 6% are retained as additional \nreinvested capital for the Bitmex trading account.\n*/\n\ncontract BitMEXFund {\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n    // only people with tokens\n    modifier onlyShareholders() {\n        require(myTokens() > 0);\n        _;\n    }\n    \n    // only shareholders with profits\n    modifier onlyStronghands() {\n        require(myDividends(true) > 0);\n        _;\n    }\n    \n\n    modifier onlyAdministrator(){\n        address _customerAddress = msg.sender;\n        require(administrators[_customerAddress]);\n        _;\n    }\n    \n    \n    // ensures that the first tokens in the contract will be equally distributed\n    // meaning, no divine dump will be ever possible\n    // result: healthy longevity.\n    modifier antiEarlyWhale(uint256 _amountOfEthereum){\n        address _customerAddress = msg.sender;\n        \n        // are we still in the vulnerable phase?\n        // if so, enact anti early whale protocol \n        if( onlyAmbassadors && ((totalEthereumBalance() - _amountOfEthereum) <= ambassadorQuota_ )){\n            require(\n                // is the customer in the ambassador list?\n                ambassadors_[_customerAddress] == true &&\n                \n                // does the customer purchase exceed the max ambassador quota?\n                (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfEthereum) <= ambassadorMaxPurchase_\n                \n            );\n            \n            // updated the accumulated quota    \n            ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfEthereum);\n        \n            // execute\n            _;\n        } else {\n            // in case the ether count drops low, the ambassador phase won't reinitiate\n            onlyAmbassadors = false;\n            _;    \n        }\n        \n    }\n    \n    \n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted\n    );\n    \n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned\n    );\n    \n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n    \n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n    \n    // ERC20\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n    \n    \n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n    string public name = \"BitMEXFund\";\n    string public symbol = \"XB10\";\n    uint8 constant public decimals = 18;\n    uint8 constant internal purchaseFee_ = 10; //10%\n    uint8 constant internal sellFee_ = 10; //10%\n    uint8 constant internal BitMEXFee = 80; //80% reserved for BitMEX Trading Account\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n    uint256 constant internal magnitude = 2**64;\n    \n    // proof of stake (defaults at 100 tokens)\n    uint256 public stakingRequirement = 100e18;\n    \n    // ambassador program\n    mapping(address => bool) internal ambassadors_;\n    uint256 constant internal ambassadorMaxPurchase_ = 1 ether;\n    uint256 constant internal ambassadorQuota_ = 20 ether;\n\n    uint public totalBitMEXDeposits;\n    uint public BitMEXAccount;\n    \n    \n    \n   /*================================\n    =            DATASETS            =\n    ================================*/\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n    uint256 internal tokenSupply_ = 0;\n    uint256 internal profitPerShare_;\n    \n    // administrator list (see above on what they can do)\n    mapping(address => bool) public administrators;\n    \n    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n    bool public onlyAmbassadors = true;\n    \n\n\n    /*=======================================\n    =            PUBLIC FUNCTIONS            =\n    =======================================*/\n    /*\n    * -- APPLICATION ENTRY POINTS --  \n    */\n    function BitMEXFund()\n        public\n    {\n        // add administrators here\n        administrators[msg.sender] = true;\n        \n\n    }\n\n    function addAmbassador(address _ambassador)\n        public\n        onlyAdministrator()\n    {\n        ambassadors_[_ambassador] = true;\n    }\n    \n    function BitMEXDeposit()\n        public\n        payable\n    {\n        //profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n        profitPerShare_ += (msg.value * magnitude / (tokenSupply_));\n        totalBitMEXDeposits = SafeMath.add(totalBitMEXDeposits, msg.value);\n    }\n     \n    /**\n     * Converts all incoming ethereum to shares for the caller, and passes down the referral addy (if any)\n     */\n    function buy(address _referredBy)\n        public\n        payable\n        returns(uint256)\n    {\n        purchaseTokens(msg.value, _referredBy);\n    }\n    \n    /**\n     * Fallback function to handle ethereum that was send straight to the contract\n     * Unfortunately we cannot use a referral address this way.\n     */\n    function()\n        payable\n        public\n    {\n        purchaseTokens(msg.value, 0x0);\n    }\n    \n    /**\n     * Converts all of caller's dividends to tokens.\n     */\n    function reinvest()\n        onlyStronghands()\n        public\n    {\n        // fetch dividends\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n        \n        // pay out the dividends virtually\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        \n        // retrieve ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        \n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n        \n        // fire event\n        onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n    \n    /**\n     * Alias of sell() and withdraw().\n     */\n    function exit()\n        public\n    {\n        // get token count for caller & sell them all\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if(_tokens > 0) sell(_tokens);\n        withdraw();\n    }\n\n    /**\n     * Withdraws all of the callers earnings.\n     */\n    function withdraw()\n        onlyStronghands()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n        \n        // update dividend tracker\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        \n        // add ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        \n        _customerAddress.transfer(_dividends);\n        \n        // fire event\n        onWithdraw(_customerAddress, _dividends);\n    }\n\n\n    function withdrawBITMEXAccount(uint amt)\n        public\n        onlyAdministrator()\n    {\n        require(amt <= BitMEXAccount);\n        BitMEXAccount = SafeMath.sub(BitMEXAccount,amt);\n        msg.sender.transfer(amt);\n\n    }\n    \n    /**\n     * Liquifies tokens to ethereum.\n     */\n    function sell(uint256 _amountOfTokens)\n        onlyShareholders()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n       \n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n        uint256 _dividends = SafeMath.div(_ethereum, sellFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        \n        // burn the sold tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n        \n        // update dividends tracker\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;       \n        \n        // dividing by zero is a bad idea\n        if (tokenSupply_ > 0) {\n            // update the amount of dividends per token\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n        \n        // fire event\n        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n    }\n    \n    \n    /**\n     * Transfer tokens from the caller to a new holder.\n     * Remember, there's a 10% fee here as well.\n     */\n    function transfer(address _toAddress, uint256 _amountOfTokens)\n        onlyShareholders()\n        public\n        returns(bool)\n    {\n        // setup\n        address _customerAddress = msg.sender;\n        \n        // make sure we have the requested tokens\n        // also disables transfers until ambassador phase is over\n        // ( we dont want whale premines )\n        require(!onlyAmbassadors && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        \n        // withdraw all outstanding dividends first\n        if(myDividends(true) > 0) withdraw();\n        \n        // liquify 10% of the tokens that are transfered\n        // these are dispersed to shareholders\n        uint256 _tokenFee = SafeMath.div(_amountOfTokens, sellFee_);\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\n  \n        // burn the fee tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n\n        // exchange tokens\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n        \n        // update dividend trackers\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n        \n        // disperse dividends among holders\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        \n        // fire event\n        Transfer(_customerAddress, _toAddress, _taxedTokens);\n        \n        // ERC20\n        return true;\n       \n    }\n    \n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n    /**\n     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\n     */\n    function disableInitialStage()\n        onlyAdministrator()\n        public\n    {\n        onlyAmbassadors = false;\n    }\n    \n    /**\n     * In case one of us dies, we need to replace ourselves.\n     */\n    function setAdministrator(address _identifier, bool _status)\n        onlyAdministrator()\n        public\n    {\n        administrators[_identifier] = _status;\n    }\n    \n    /**\n     * Precautionary measures in case we need to adjust the masternode rate.\n     */\n    function setStakingRequirement(uint256 _amountOfTokens)\n        onlyAdministrator()\n        public\n    {\n        stakingRequirement = _amountOfTokens;\n    }\n    \n    /**\n     * If we want to rebrand, we can.\n     */\n    function setName(string _name)\n        onlyAdministrator()\n        public\n    {\n        name = _name;\n    }\n    \n    /**\n     * If we want to rebrand, we can.\n     */\n    function setSymbol(string _symbol)\n        onlyAdministrator()\n        public\n    {\n        symbol = _symbol;\n    }\n\n    \n    /*----------  HELPERS AND CALCULATORS  ----------*/\n    /**\n     * Method to view the current Ethereum stored in the contract\n     * Example: totalEthereumBalance()\n     */\n    function totalEthereumBalance()\n        public\n        view\n        returns(uint)\n    {\n        return this.balance;\n    }\n\n\n    function getData() \n        //Ethereum Balance, MyTokens, TotalTokens, myDividends, myRefDividends\n        public \n        view \n        returns(uint256, uint256, uint256, uint256, uint256, uint256)\n    {\n        return(address(this).balance, balanceOf(msg.sender), tokenSupply_, dividendsOf(msg.sender), referralBalance_[msg.sender], totalBitMEXDeposits);\n    }\n    \n    /**\n     * Retrieve the total token supply.\n     */\n    function totalSupply()\n        public\n        view\n        returns(uint256)\n    {\n        return tokenSupply_;\n    }\n    \n    /**\n     * Retrieve the tokens owned by the caller.\n     */\n    function myTokens()\n        public\n        view\n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n    \n    /**\n     * Retrieve the dividends owned by the caller.\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     * But in the internal calculations, we want them separate. \n     */ \n    function myDividends(bool _includeReferralBonus) \n        public \n        view \n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n\n    // function getBitMEXAccount() \n    //     public \n    //     view \n    //     returns(uint256)\n    // {\n        \n    //     return BitMEXAccount;\n    // }\n\n    \n    /**\n     * Retrieve the token balance of any single address.\n     */\n    function balanceOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n    \n    /**\n     * Retrieve the dividend balance of any single address.\n     */\n    function dividendsOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n    \n    /**\n     * Return the buy price of 1 individual token.\n     */\n    function sellPrice() \n        public \n        view \n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(_ethereum, sellFee_);\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n            return _taxedEthereum;\n        }\n    }\n    \n    /**\n     * Return the sell price of 1 individual token.\n     */\n    function buyPrice() \n        public \n        view \n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(_ethereum, purchaseFee_  );\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n            return _taxedEthereum;\n        }\n    }\n    \n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n     */\n    function calculateTokensReceived(uint256 _ethereumToSpend) \n        public \n        view \n        returns(uint256)\n    {\n        uint256 _dividends = SafeMath.div(_ethereumToSpend, purchaseFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        \n        return _amountOfTokens;\n    }\n    \n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n     */\n    function calculateEthereumReceived(uint256 _tokensToSell) \n        public \n        view \n        returns(uint256)\n    {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(_ethereum, sellFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _taxedEthereum;\n    }\n    \n    \n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n        antiEarlyWhale(_incomingEthereum)\n        internal\n        returns(uint256)\n    {\n        // data setup\n        address _customerAddress = msg.sender;\n        uint256 _BitMEXTradeFee = SafeMath.div(SafeMath.mul(_incomingEthereum, BitMEXFee),100);\n        _incomingEthereum = SafeMath.sub(_incomingEthereum, _BitMEXTradeFee);\n        BitMEXAccount = BitMEXAccount + _BitMEXTradeFee;\n        uint256 _undividedDividends = SafeMath.div(_incomingEthereum, purchaseFee_);\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 2);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n \n        // no point in continuing execution if OP is a poorfag russian hacker\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n        // (or hackers)\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n        \n        // is the user referred by a masternode?\n        if(\n            // is this a referred purchase?\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n            // no cheating!\n            _referredBy != _customerAddress &&\n            \n            // does the referrer have at least X whole tokens?\n            // i.e is the referrer a godly chad masternode\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ){\n            // wealth redistribution\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } else {\n            // no ref purchase\n            // add the referral bonus back to the global dividends cake\n            _dividends = SafeMath.add(_dividends, _referralBonus);\n            _fee = _dividends * magnitude;\n        }\n        \n        // we can't give people infinite ethereum\n        if(tokenSupply_ > 0){\n            \n            // add tokens to the pool\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n \n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n            \n            // calculate the amount of tokens the customer receives over his purchase \n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n        \n        } else {\n            // add tokens to the pool\n            tokenSupply_ = _amountOfTokens;\n        }\n        \n        // update circulating supply & the ledger address for the customer\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        \n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n        //really i know you think you do but you don't\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n        \n        // fire event\n       onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens);\n        \n        return _amountOfTokens;\n    }\n\n    /**\n     * Calculate Token price based on an amount of incoming ethereum\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function ethereumToTokens_(uint256 _ethereum)\n        internal\n        view\n        returns(uint256)\n    {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived = \n         (\n            (\n                // underflow attempts BTFO\n                SafeMath.sub(\n                    (sqrt\n                        (\n                            (_tokenPriceInitial**2)\n                            +\n                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n                            +\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n                            +\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n                        )\n                    ), _tokenPriceInitial\n                )\n            )/(tokenPriceIncremental_)\n        )-(tokenSupply_)\n        ;\n  \n        return _tokensReceived;\n    }\n    \n    /**\n     * Calculate token sell value.\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n     function tokensToEthereum_(uint256 _tokens)\n        internal\n        view\n        returns(uint256)\n    {\n\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n        (\n            // underflow attempts BTFO\n            SafeMath.sub(\n                (\n                    (\n                        (\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n                        )-tokenPriceIncremental_\n                    )*(tokens_ - 1e18)\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n            )\n        /1e18);\n        return _etherReceived;\n    }\n    \n    \n    //This is where all your gas goes, sorry\n    //Not sorry, you probably only paid 1 gwei\n    function sqrt(uint x) internal pure returns (uint y) {\n        uint z = (x + 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "bytecode": "60606040526040805190810160405280600a81526020017f4269744d455846756e6400000000000000000000000000000000000000000000815250600090805190602001906200005192919062000137565b506040805190810160405280600481526020017f5842313000000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f92919062000137565b5068056bc75e2d631000006002556000600a556001600d60006101000a81548160ff0219169083151502179055503415620000d957600080fd5b6001600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001e6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200017a57805160ff1916838001178555620001ab565b82800160010185558215620001ab579182015b82811115620001aa5782518255916020019190600101906200018d565b5b509050620001ba9190620001be565b5090565b620001e391905b80821115620001df576000816000905550600101620001c5565b5090565b90565b61271180620001f66000396000f3006060604052600436106101a0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806265318b146101ae57806306fdde03146101fb57806310d0ffdd1461028957806318160ddd146102c057806322609373146102e957806327defa1f14610320578063295c25d51461034d578063313ce567146103865780633bc5de30146103b55780633ccfd60b146104015780634b7503341461041657806356d399e81461043f578063688abbf7146104685780636b2f4632146104a157806370a08231146104ca57806376be1585146105175780637d573144146105685780638328b610146105725780638620410b14610595578063868d1136146105be57806387c95058146105e1578063949e8acd1461062557806395d89b411461064e578063a8e04f34146106dc578063a9059cbb146106f1578063b84c82461461074b578063c47f0027146107a8578063cfbf09b914610805578063e4849b321461082e578063e9fad8ee14610851578063f088d54714610866578063f9929434146108a8578063fdb5a03e146108d1575b6101ab3460006108e6565b50005b34156101b957600080fd5b6101e5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061121c565b6040518082815260200191505060405180910390f35b341561020657600080fd5b61020e6112be565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561024e578082015181840152602081019050610233565b50505050905090810190601f16801561027b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561029457600080fd5b6102aa600480803590602001909190505061135c565b6040518082815260200191505060405180910390f35b34156102cb57600080fd5b6102d3611394565b6040518082815260200191505060405180910390f35b34156102f457600080fd5b61030a600480803590602001909190505061139e565b6040518082815260200191505060405180910390f35b341561032b57600080fd5b6103336113e7565b604051808215151515815260200191505060405180910390f35b341561035857600080fd5b610384600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506113fa565b005b341561039157600080fd5b6103996114b3565b604051808260ff1660ff16815260200191505060405180910390f35b34156103c057600080fd5b6103c86114b8565b60405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390f35b341561040c57600080fd5b610414611545565b005b341561042157600080fd5b6104296116e2565b6040518082815260200191505060405180910390f35b341561044a57600080fd5b610452611740565b6040518082815260200191505060405180910390f35b341561047357600080fd5b61048b60048080351515906020019091905050611746565b6040518082815260200191505060405180910390f35b34156104ac57600080fd5b6104b46117b2565b6040518082815260200191505060405180910390f35b34156104d557600080fd5b610501600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506117d1565b6040518082815260200191505060405180910390f35b341561052257600080fd5b61054e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061181a565b604051808215151515815260200191505060405180910390f35b61057061183a565b005b341561057d57600080fd5b6105936004808035906020019091905050611876565b005b34156105a057600080fd5b6105a86118de565b6040518082815260200191505060405180910390f35b34156105c957600080fd5b6105df600480803590602001909190505061193c565b005b34156105ec57600080fd5b610623600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080351515906020019091905050611a00565b005b341561063057600080fd5b610638611ab9565b6040518082815260200191505060405180910390f35b341561065957600080fd5b610661611ace565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106a1578082015181840152602081019050610686565b50505050905090810190601f1680156106ce5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156106e757600080fd5b6106ef611b6c565b005b34156106fc57600080fd5b610731600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611be7565b604051808215151515815260200191505060405180910390f35b341561075657600080fd5b6107a6600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611f19565b005b34156107b357600080fd5b610803600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611f91565b005b341561081057600080fd5b610818612009565b6040518082815260200191505060405180910390f35b341561083957600080fd5b61084f600480803590602001909190505061200f565b005b341561085c57600080fd5b61086461223d565b005b610892600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506122a4565b6040518082815260200191505060405180910390f35b34156108b357600080fd5b6108bb6122b6565b6040518082815260200191505060405180910390f35b34156108dc57600080fd5b6108e46122bc565b005b6000806000806000806000806000808b6000339050600d60009054906101000a900460ff16801561092957506801158e460913d00000826109256117b2565b0311155b15610e315760011515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151480156109d75750670de0b6b3a764000082600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111155b15156109e257600080fd5b610a2b600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612430565b600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550339a50610a89610a828f605060ff1661244e565b6064612489565b9950610a958e8b6124a4565b9d508960055401600581905550610ab08e600a60ff16612489565b9850610abd896002612489565b9750610ac989896124a4565b9650610ad58e8a6124a4565b9550610ae0866124bd565b94506801000000000000000087029350600085118015610b0c5750600a54610b0a86600a54612430565b115b1515610b1757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff1614158015610b8057508a73ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff1614155b8015610bcd5750600254600660008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b15610c6357610c1b600760008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205489612430565b600760008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c7e565b610c6d8789612430565b965068010000000000000000870293505b6000600a541115610ce957610c95600a5486612430565b600a81905550600a54680100000000000000008802811515610cb357fe5b04600b60008282540192505081905550600a54680100000000000000008802811515610cdb57fe5b048502840384039350610cf1565b84600a819055505b610d3a600660008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486612430565b600660008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508385600b540203925082600860008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508a73ffffffffffffffffffffffffffffffffffffffff167f7f743fb741e07b0c4daeb2af54fb3ebfa2bdb31d9913a0e555661c870411aae58f87604051808381526020018281526020019250505060405180910390a2849b5061120b565b6000600d60006101000a81548160ff021916908315150217905550339a50610e67610e608f605060ff1661244e565b6064612489565b9950610e738e8b6124a4565b9d508960055401600581905550610e8e8e600a60ff16612489565b9850610e9b896002612489565b9750610ea789896124a4565b9650610eb38e8a6124a4565b9550610ebe866124bd565b94506801000000000000000087029350600085118015610eea5750600a54610ee886600a54612430565b115b1515610ef557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff1614158015610f5e57508a73ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff1614155b8015610fab5750600254600660008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b1561104157610ff9600760008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205489612430565b600760008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061105c565b61104b8789612430565b965068010000000000000000870293505b6000600a5411156110c757611073600a5486612430565b600a81905550600a5468010000000000000000880281151561109157fe5b04600b60008282540192505081905550600a546801000000000000000088028115156110b957fe5b0485028403840393506110cf565b84600a819055505b611118600660008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486612430565b600660008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508385600b540203925082600860008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508a73ffffffffffffffffffffffffffffffffffffffff167f7f743fb741e07b0c4daeb2af54fb3ebfa2bdb31d9913a0e555661c870411aae58f87604051808381526020018281526020019250505060405180910390a2849b505b505050505050505050505092915050565b600068010000000000000000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600b5402038115156112b657fe5b049050919050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113545780601f1061132957610100808354040283529160200191611354565b820191906000526020600020905b81548152906001019060200180831161133757829003601f168201915b505050505081565b60008060008061137085600a60ff16612489565b925061137c85846124a4565b9150611387826124bd565b9050809350505050919050565b6000600a54905090565b600080600080600a5485111515156113b557600080fd5b6113be8561254a565b92506113ce83600a60ff16612489565b91506113da83836124a4565b9050809350505050919050565b600d60009054906101000a900460ff1681565b6000339050600c60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561145757600080fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b601281565b6000806000806000803073ffffffffffffffffffffffffffffffffffffffff16316114e2336117d1565b600a546114ee3361121c565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600454955095509550955095509550909192939495565b60008060006115546001611746565b11151561156057600080fd5b33915061156d6000611746565b9050680100000000000000008102600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054810190506000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561169057600080fd5b8173ffffffffffffffffffffffffffffffffffffffff167fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc826040518082815260200191505060405180910390a25050565b6000806000806000600a541415611707576402540be40064174876e80003935061173a565b611718670de0b6b3a764000061254a565b925061172883600a60ff16612489565b915061173483836124a4565b90508093505b50505090565b60025481565b6000803390508261175f5761175a8161121c565b6117aa565b600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117a88261121c565b015b915050919050565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600c6020528060005260406000206000915054906101000a900460ff1681565b600a5468010000000000000000340281151561185257fe5b04600b6000828254019250508190555061186e60045434612430565b600481905550565b6000339050600c60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156118d357600080fd5b816002819055505050565b6000806000806000600a541415611903576402540be40064174876e800019350611936565b611914670de0b6b3a764000061254a565b925061192483600a60ff16612489565b91506119308383612430565b90508093505b50505090565b6000339050600c60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561199957600080fd5b60055482111515156119aa57600080fd5b6119b6600554836124a4565b6005819055503373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015156119fc57600080fd5b5050565b6000339050600c60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611a5d57600080fd5b81600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b600080339050611ac8816117d1565b91505090565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b645780601f10611b3957610100808354040283529160200191611b64565b820191906000526020600020905b815481529060010190602001808311611b4757829003601f168201915b505050505081565b6000339050600c60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611bc957600080fd5b6000600d60006101000a81548160ff02191690831515021790555050565b600080600080600080611bf8611ab9565b111515611c0457600080fd5b339350600d60009054906101000a900460ff16158015611c635750600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548611155b1515611c6e57600080fd5b6000611c7a6001611746565b1115611c8957611c88611545565b5b611c9786600a60ff16612489565b9250611ca386846124a4565b9150611cae8361254a565b9050611cbc600a54846124a4565b600a81905550611d0b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054876124a4565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d97600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612430565b600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555085600b5402600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600b5402600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550611ea0600b54600a54680100000000000000008402811515611e9a57fe5b04612430565b600b819055508673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600194505050505092915050565b6000339050600c60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611f7657600080fd5b8160019080519060200190611f8c929190612640565b505050565b6000339050600c60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611fee57600080fd5b8160009080519060200190612004929190612640565b505050565b60055481565b6000806000806000806000612022611ab9565b11151561202e57600080fd5b339550600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054871115151561207f57600080fd5b86945061208b8561254a565b935061209b84600a60ff16612489565b92506120a784846124a4565b91506120b5600a54866124a4565b600a81905550612104600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054866124a4565b600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555068010000000000000000820285600b540201905080600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506000600a5411156121de576121d7600b54600a546801000000000000000086028115156121d157fe5b04612430565b600b819055505b8573ffffffffffffffffffffffffffffffffffffffff167fc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a311398684604051808381526020018281526020019250505060405180910390a250505050505050565b600080339150600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115612298576122978161200f565b5b6122a0611545565b5050565b60006122b034836108e6565b50919050565b60045481565b6000806000806122cc6001611746565b1115156122d857600080fd5b6122e26000611746565b9250339150680100000000000000008302600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054830192506000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506123d38360006108e6565b90508173ffffffffffffffffffffffffffffffffffffffff167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588483604051808381526020018281526020019250505060405180910390a2505050565b600080828401905083811015151561244457fe5b8091505092915050565b60008060008414156124635760009150612482565b828402905082848281151561247457fe5b0414151561247e57fe5b8091505b5092915050565b600080828481151561249757fe5b0490508091505092915050565b60008282111515156124b257fe5b818303905092915050565b6000806000670de0b6b3a764000064174876e800029150600a546402540be40061253361252d600a54866402540be40060020202026002600a540a60026402540be4000a02670de0b6b3a76400008a02670de0b6b3a76400006402540be40002600202026002890a0101016125f5565b856124a4565b81151561253c57fe5b040390508092505050919050565b600080600080670de0b6b3a764000085019250670de0b6b3a7640000600a54019150670de0b6b3a76400006125de670de0b6b3a764000085036402540be400670de0b6b3a76400008681151561259c57fe5b046402540be4000264174876e8000103026002670de0b6b3a7640000876002890a038115156125c757fe5b046402540be400028115156125d857fe5b046124a4565b8115156125e757fe5b049050809350505050919050565b60008060026001840181151561260757fe5b0490508291505b8181101561263a57809150600281828581151561262757fe5b040181151561263257fe5b04905061260e565b50919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061268157805160ff19168380011785556126af565b828001600101855582156126af579182015b828111156126ae578251825591602001919060010190612693565b5b5090506126bc91906126c0565b5090565b6126e291905b808211156126de5760008160009055506001016126c6565b5090565b905600a165627a7a723058205d96d8bb22c0efdc4622938ff7eebb10d3e13152b37d2095801cc1e3f978f4480029"
}