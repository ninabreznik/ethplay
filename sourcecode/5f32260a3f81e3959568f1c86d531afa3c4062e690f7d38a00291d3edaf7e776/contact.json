{
  "address": "0x1bb4df717e18a048d391d24e6dfbd67bb62a83ba",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TecoIco",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-06\n*/\n\npragma solidity ^0.4.23;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address who) public view returns (uint256);\n\n    function transfer(address to, uint256 value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender)\n    public view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale,\n * allowing investors to purchase tokens with ether. This contract implements\n * such functionality in its most fundamental form and can be extended to provide additional\n * functionality and/or custom behavior.\n * The external interface represents the basic interface for purchasing tokens, and conform\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n * behavior.\n */\ncontract Crowdsale {\n    using SafeMath for uint256;\n\n    // The token being sold\n    ERC20 public token;\n\n    // Address where funds are collected\n    address public wallet;\n\n    // How many token units a buyer gets per wei.\n    // The rate is the conversion between wei and the smallest and indivisible token unit.\n    // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n    // 1 wei will give you 1 unit, or 0.001 TOK.\n    uint256 public rate;\n\n    // Amount of wei raised\n    uint256 public weiRaised;\n\n    /**\n     * Event for token purchase logging\n     * @param purchaser who paid for the tokens\n     * @param beneficiary who got the tokens\n     * @param value weis paid for purchase\n     * @param amount amount of tokens purchased\n     */\n    event TokenPurchase(\n        address indexed purchaser,\n        address indexed beneficiary,\n        uint256 value,\n        uint256 amount\n    );\n\n    /**\n     * @param _rate Number of token units a buyer gets per wei\n     * @param _wallet Address where collected funds will be forwarded to\n     * @param _token Address of the token being sold\n     */\n    constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n        require(_rate > 0);\n        require(_wallet != address(0));\n        require(_token != address(0));\n\n        rate = _rate;\n        wallet = _wallet;\n        token = _token;\n    }\n\n    // -----------------------------------------\n    // Crowdsale external interface\n    // -----------------------------------------\n\n    /**\n     * @dev fallback function ***DO NOT OVERRIDE***\n     */\n    function() external payable {\n        buyTokens(msg.sender);\n    }\n\n    /**\n     * @dev low level token purchase ***DO NOT OVERRIDE***\n     * @param _beneficiary Address performing the token purchase\n     */\n    function buyTokens(address _beneficiary) public payable {\n\n        uint256 weiAmount = msg.value;\n        _preValidatePurchase(_beneficiary, weiAmount);\n\n        // calculate token amount to be created\n        uint256 tokens = _getTokenAmount(weiAmount);\n\n        // update state\n        weiRaised = weiRaised.add(weiAmount);\n\n        _processPurchase(_beneficiary, tokens);\n        emit TokenPurchase(\n            msg.sender,\n            _beneficiary,\n            weiAmount,\n            tokens\n        );\n\n        _processBonusStateSave(_beneficiary, weiAmount);\n\n        _forwardFunds();\n    }\n\n    // -----------------------------------------\n    // Internal interface (extensible)\n    // -----------------------------------------\n\n    /**\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n     * @param _beneficiary Address performing the token purchase\n     * @param _weiAmount Value in wei involved in the purchase\n     */\n    function _preValidatePurchase(\n        address _beneficiary,\n        uint256 _weiAmount\n    )\n    internal\n    {\n        require(_beneficiary != address(0));\n        require(_weiAmount != 0);\n    }\n\n    /**\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n     * @param _beneficiary Address performing the token purchase\n     * @param _tokenAmount Number of tokens to be emitted\n     */\n    function _deliverTokens(\n        address _beneficiary,\n        uint256 _tokenAmount\n    )\n    internal\n    {\n        token.transfer(_beneficiary, _tokenAmount);\n    }\n\n    /**\n     * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n     * @param _beneficiary Address receiving the tokens\n     * @param _tokenAmount Number of tokens to be purchased\n     */\n    function _processPurchase(\n        address _beneficiary,\n        uint256 _tokenAmount\n    )\n    internal\n    {\n        _deliverTokens(_beneficiary, _tokenAmount);\n    }\n\n    /**\n     * @dev Override to extend the way in which ether is converted to tokens.\n     * @param _weiAmount Value in wei to be converted into tokens\n     * @return Number of tokens that can be purchased with the specified _weiAmount\n     */\n    function _getTokenAmount(uint256 _weiAmount)\n    internal view returns (uint256)\n    {\n        return _weiAmount.mul(rate);\n    }\n\n    function _processBonusStateSave(\n        address _beneficiary,\n        uint256 _weiAmount\n    )\n    internal\n    {\n    }\n\n    /**\n     * @dev Determines how ETH is stored/forwarded on purchases.\n     */\n    function _forwardFunds() internal {\n        wallet.transfer(msg.value);\n    }\n}\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 value\n    )\n    internal\n    {\n        require(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n        require(token.approve(spender, value));\n    }\n}\n\n\n/**\n * @title AllowanceCrowdsale\n * @dev Extension of Crowdsale where tokens are held by a wallet, which approves an allowance to the crowdsale.\n */\ncontract AllowanceCrowdsale is Crowdsale {\n    using SafeMath for uint256;\n    using SafeERC20 for ERC20;\n\n    address public tokenWallet;\n\n    /**\n     * @dev Constructor, takes token wallet address.\n     * @param _tokenWallet Address holding the tokens, which has approved allowance to the crowdsale\n     */\n    constructor(address _tokenWallet) public {\n        require(_tokenWallet != address(0));\n        tokenWallet = _tokenWallet;\n    }\n\n    /**\n     * @dev Checks the amount of tokens left in the allowance.\n     * @return Amount of tokens left in the allowance\n     */\n    function remainingTokens() public view returns (uint256) {\n        return token.allowance(tokenWallet, this);\n    }\n\n    /**\n     * @dev Overrides parent behavior by transferring tokens from wallet.\n     * @param _beneficiary Token purchaser\n     * @param _tokenAmount Amount of tokens purchased\n     */\n    function _deliverTokens(\n        address _beneficiary,\n        uint256 _tokenAmount\n    )\n    internal\n    {\n        token.safeTransferFrom(tokenWallet, _beneficiary, _tokenAmount);\n    }\n}\n\n\n/**\n * @title TimedCrowdsale\n * @dev Crowdsale accepting contributions only within a time frame.\n */\ncontract TimedCrowdsale is Crowdsale {\n    using SafeMath for uint256;\n\n    uint256 public openingTime;\n\n    /**\n     * @dev Reverts if not in crowdsale time range.\n     */\n    modifier onlyWhileOpen {\n        // solium-disable-next-line security/no-block-members\n        require(isOpen());\n        _;\n    }\n\n    /**\n     * @dev Constructor, takes crowdsale opening and closing times.\n     * @param _openingTime Crowdsale opening time\n     */\n    constructor(uint256 _openingTime) public {\n        // solium-disable-next-line security/no-block-members\n        require(_openingTime >= block.timestamp);\n\n        openingTime = _openingTime;\n    }\n\n    /**\n     * @return true if the crowdsale is open, false otherwise.\n     */\n    function isOpen() public view returns (bool) {\n        // solium-disable-next-line security/no-block-members\n        return block.timestamp >= openingTime;\n    }\n\n    /**\n     * @dev Extend parent behavior requiring to be within contributing period\n     * @param _beneficiary Token purchaser\n     * @param _weiAmount Amount of wei contributed\n     */\n    function _preValidatePurchase(\n        address _beneficiary,\n        uint256 _weiAmount\n    )\n    internal\n    onlyWhileOpen\n    {\n        super._preValidatePurchase(_beneficiary, _weiAmount);\n    }\n\n}\n\n\n/**\n * @title CappedCrowdsale\n * @dev Crowdsale with a limit for total contributions.\n */\ncontract CappedCrowdsale is Crowdsale {\n    using SafeMath for uint256;\n\n    uint256 public cap;\n\n    /**\n     * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n     * @param _cap Max amount of wei to be contributed\n     */\n    constructor(uint256 _cap) public {\n        require(_cap > 0);\n        cap = _cap;\n    }\n\n    /**\n     * @dev Checks whether the cap has been reached.\n     * @return Whether the cap was reached\n     */\n    function capReached() public view returns (bool) {\n        return weiRaised >= cap;\n    }\n\n    /**\n     * @dev Extend parent behavior requiring purchase to respect the funding cap.\n     * @param _beneficiary Token purchaser\n     * @param _weiAmount Amount of wei contributed\n     */\n    function _preValidatePurchase(\n        address _beneficiary,\n        uint256 _weiAmount\n    )\n    internal\n    {\n        super._preValidatePurchase(_beneficiary, _weiAmount);\n        require(weiRaised.add(_weiAmount) <= cap);\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0));\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\n\ncontract TecoIco is Crowdsale, AllowanceCrowdsale, TimedCrowdsale, CappedCrowdsale, Ownable {\n    using SafeMath for uint256;\n\n    uint256 public bonusPercent;\n\n    mapping(address => uint256) bonuses;\n\n    constructor(uint256 _rate, address _wallet, ERC20 _token, address _tokenWallet, uint256 _openingTime, uint256 _cap)\n    Crowdsale(_rate, _wallet, _token)\n    AllowanceCrowdsale(_tokenWallet)\n    TimedCrowdsale(_openingTime)\n    CappedCrowdsale(_cap)\n    public\n    {\n        require(_rate > 0);\n        require(_wallet != address(0));\n        require(_token != address(0));\n\n        rate = _rate;\n        wallet = _wallet;\n        token = _token;\n    }\n\n    function setRate(uint256 _rate)\n    public\n    onlyOwner\n    {\n        rate = _rate;\n    }\n\n    function setBonusPercent(uint256 _bonusPercent)\n    public\n    onlyOwner\n    {\n        bonusPercent = _bonusPercent;\n    }\n\n    function getBonusTokenAmount(uint256 _weiAmount)\n    public\n    view\n    returns (uint256)\n    {\n        if (bonusPercent > 0) {\n            return _weiAmount.mul(rate).mul(bonusPercent).div(100);\n        }\n        return 0;\n    }\n\n    function _getTokenAmount(uint256 _weiAmount)\n    internal\n    view\n    returns (uint256)\n    {\n        if (bonusPercent > 0) {\n            return _weiAmount.mul(rate).mul(100 + bonusPercent).div(100);\n        }\n        return _weiAmount.mul(rate);\n    }\n\n    function _processBonusStateSave(\n        address _beneficiary,\n        uint256 _weiAmount\n    )\n    internal\n    {\n        bonuses[_beneficiary] = bonuses[_beneficiary].add(getBonusTokenAmount(_weiAmount));\n        super._processBonusStateSave(_beneficiary, _weiAmount);\n    }\n\n    function bonusOf(address _owner) public view returns (uint256) {\n        return bonuses[_owner];\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"bonusOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bonusPercent\",\"type\":\"uint256\"}],\"name\":\"setBonusPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"getBonusTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenWallet\",\"type\":\"address\"},{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_cap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5060405160c080610a9083398101604090815281516020830151918301516060840151608085015160a090950151929491929091908082848888886000831161005857600080fd5b600160a060020a038216151561006d57600080fd5b600160a060020a038116151561008257600080fd5b60029290925560018054600160a060020a0319908116600160a060020a03938416179091556000805490911692821692909217909155811615156100c557600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055428110156100f257600080fd5b6005556000811161010257600080fd5b60065560078054600160a060020a031916331790556000861161012457600080fd5b600160a060020a038516151561013957600080fd5b600160a060020a038416151561014e57600080fd5b50505060029290925560018054600160a060020a03928316600160a060020a031991821617909155600080549390921692169190911790556108fb806101956000396000f3006080604052600436106101065763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631283e32881146101115780632c4e722e1461014457806334fcf43714610159578063355274ea146101715780634042b66f1461018657806347535d7b1461019b5780634f935945146101c4578063521eb273146101d957806362bd689c1461020a578063715018a6146102225780638da5cb5b14610237578063b7a8807c1461024c578063becf3add14610261578063bf58390314610276578063bff99c6c1461028b578063ec75c866146102a0578063ec8ac4d8146102b8578063f2fde38b146102cc578063fc0c546a146102ed575b61010f33610302565b005b34801561011d57600080fd5b50610132600160a060020a036004351661039a565b60408051918252519081900360200190f35b34801561015057600080fd5b506101326103b9565b34801561016557600080fd5b5061010f6004356103bf565b34801561017d57600080fd5b506101326103db565b34801561019257600080fd5b506101326103e1565b3480156101a757600080fd5b506101b06103e7565b604080519115158252519081900360200190f35b3480156101d057600080fd5b506101b06103f0565b3480156101e557600080fd5b506101ee6103fb565b60408051600160a060020a039092168252519081900360200190f35b34801561021657600080fd5b5061010f60043561040a565b34801561022e57600080fd5b5061010f610426565b34801561024357600080fd5b506101ee610494565b34801561025857600080fd5b506101326104a3565b34801561026d57600080fd5b506101326104a9565b34801561028257600080fd5b506101326104af565b34801561029757600080fd5b506101ee610552565b3480156102ac57600080fd5b50610132600435610561565b61010f600160a060020a0360043516610302565b3480156102d857600080fd5b5061010f600160a060020a03600435166105b4565b3480156102f957600080fd5b506101ee6105d7565b34600061030f83836105e6565b61031882610615565b60035490915061032e908363ffffffff61065e16565b60035561033b838261066b565b60408051838152602081018390528151600160a060020a0386169233927f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18929081900390910190a361038d8383610675565b6103956106c7565b505050565b600160a060020a0381166000908152600960205260409020545b919050565b60025481565b600754600160a060020a031633146103d657600080fd5b600255565b60065481565b60035481565b60055442101590565b600654600354101590565b600154600160a060020a031681565b600754600160a060020a0316331461042157600080fd5b600855565b600754600160a060020a0316331461043d57600080fd5b600754604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26007805473ffffffffffffffffffffffffffffffffffffffff19169055565b600754600160a060020a031681565b60055481565b60085481565b6000805460048054604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a03928316938101939093523060248401525192169163dd62ed3e9160448082019260209290919082900301818787803b15801561052157600080fd5b505af1158015610535573d6000803e3d6000fd5b505050506040513d602081101561054b57600080fd5b5051905090565b600454600160a060020a031681565b60008060085411156105ac576105a5606461059960085461058d6002548761070090919063ffffffff16565b9063ffffffff61070016565b9063ffffffff61072916565b90506103b4565b506000919050565b600754600160a060020a031633146105cb57600080fd5b6105d48161073e565b50565b600054600160a060020a031681565b6105f082826107bc565b600654600354610606908363ffffffff61065e16565b111561061157600080fd5b5050565b6000806008541115610644576105a5606461059960085460640161058d6002548761070090919063ffffffff16565b60025461065890839063ffffffff61070016565b92915050565b8181018281101561065857fe5b61061182826107d9565b6106a661068182610561565b600160a060020a0384166000908152600960205260409020549063ffffffff61065e16565b600160a060020a038316600090815260096020526040902055610611828282565b600154604051600160a060020a03909116903480156108fc02916000818181858888f193505050501580156105d4573d6000803e3d6000fd5b600082151561071157506000610658565b5081810281838281151561072157fe5b041461065857fe5b6000818381151561073657fe5b049392505050565b600160a060020a038116151561075357600080fd5b600754604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6107c46103e7565b15156107cf57600080fd5b61061182826107fd565b60045460005461061191600160a060020a039182169116848463ffffffff61081e16565b600160a060020a038216151561081257600080fd5b80151561061157600080fd5b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301528481166024830152604482018490529151918616916323b872dd916064808201926020929091908290030181600087803b15801561089257600080fd5b505af11580156108a6573d6000803e3d6000fd5b505050506040513d60208110156108bc57600080fd5b505115156108c957600080fd5b505050505600a165627a7a72305820e775e851418d447c4e21b2b256176af8fe42dd192e7b1df25e3dccd1fbdc2e070029000000000000000000000000000000000000000000000000000000000000015900000000000000000000000009b03a5c871846b6817f7f0dccc53cc578eeaf17000000000000000000000000870ad90317c09c0aa03d3bbd76a7a6eefda6f6ac00000000000000000000000009b03a5c871846b6817f7f0dccc53cc578eeaf17000000000000000000000000000000000000000000000000000000005c093bc8000000000000000000000000000000000000000000000878678326eac9000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000015900000000000000000000000009b03a5c871846b6817f7f0dccc53cc578eeaf17000000000000000000000000870ad90317c09c0aa03d3bbd76a7a6eefda6f6ac00000000000000000000000009b03a5c871846b6817f7f0dccc53cc578eeaf17000000000000000000000000000000000000000000000000000000005c093bc8000000000000000000000000000000000000000000000878678326eac9000000"
}