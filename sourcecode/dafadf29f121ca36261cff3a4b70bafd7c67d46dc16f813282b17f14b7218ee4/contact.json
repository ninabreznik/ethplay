{
  "address": "0x2c984ec9bb20b33deb84fbeedf20effda481fdc4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Ethershares",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-01\n*/\n\npragma solidity ^0.4.20;\n\n/*\n* -> What?\n* The original autonomous pyramid, improved:\n* [x] More stable than ever, having withstood severe testnet abuse and attack attempts from our community!.\n* [x] Audited, tested, and approved by known community security specialists such as tocsick and Arc.\n* [X] New functionality; you can now perform partial sell orders. If you succumb to weak hands, you don't have to dump all of your bags!\n* [x] New functionality; you can now transfer tokens between wallets. Trading is now possible from within the contract!\n* [x] New Feature: PoS Masternodes! The first implementation of Ethereum Staking in the world! Vitalik is mad.\n* [x] Masternodes: Holding 100 ETC Tokens allow you to generate a Masternode link, Masternode links are used as unique entry points to the contract!\n* [x] Masternodes: All players who enter the contract through your Masternode have 30% of their 10% dividends fee rerouted from the master-node, to the node-master!\n*\n* -> What about the last projects?\n* Every programming member of the old dev team has been fired and/or killed by 232.\n* The new dev team consists of seasoned, professional developers and has been audited by veteran solidity experts.\n* Additionally, two independent testnet iterations have been used by hundreds of people; not a single point of failure was found.\n*\n* -> Who worked on this project?\n* - PonziBot (math/memes/main site/master)\n* - Mantso (lead solidity dev/lead web3 dev)\n* - swagg (concept design/feedback/management)\n* - Anonymous#1 (main site/web3/test cases)\n* - Anonymous#2 (math formulae/whitepaper)\n*\n* -> Who has audited & approved the projected:\n* - Arc\n* - tocisck\n* - sumpunk\n*/\n\ncontract Ethershares {\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n    // only people with tokens\n    modifier onlyBagholders() {\n        require(myTokens() > 0);\n        _;\n    }\n\n    // only people with profits\n    modifier onlyStronghands() {\n        require(myDividends(true) > 0);\n        _;\n    }\n\n    // administrators can:\n    // -> change the name of the contract\n    // -> change the name of the token\n    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\n    // they CANNOT:\n    // -> take funds\n    // -> disable withdrawals\n    // -> kill the contract\n    // -> change the price of tokens\n    modifier onlyAdministrator(){\n        address _customerAddress = msg.sender;\n        require(administrators[_customerAddress]);\n        _;\n    }\n\n\n    // ensures that the first tokens in the contract will be equally distributed\n    // meaning, no divine dump will be ever possible\n    // result: healthy longevity.\n    modifier antiEarlyWhale(uint256 _amountOfEthereum){\n        address _customerAddress = msg.sender;\n\n        // are we still in the vulnerable phase?\n        // if so, enact anti early whale protocol\n        if( onlyAmbassadors && ((totalEthereumBalance() - _amountOfEthereum) <= ambassadorQuota_ )){\n            require(\n                // is the customer in the ambassador list?\n                ambassadors_[_customerAddress] == true &&\n\n                // does the customer purchase exceed the max ambassador quota?\n                (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfEthereum) <= ambassadorMaxPurchase_\n\n            );\n\n            // updated the accumulated quota\n            ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfEthereum);\n\n            // execute\n            _;\n        } else {\n            // in case the ether count drops low, the ambassador phase won't reinitiate\n            onlyAmbassadors = false;\n            _;\n        }\n\n    }\n\n\n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy\n    );\n\n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned\n    );\n\n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n\n    // ERC20\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n\n\n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n    string public name = \"Ethershares\";\n    uint8 constant public decimals = 18;\n    string public symbol = \"ETS\";\n    uint8 constant internal dividendFee_ = 5; // Look, strong Math\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n    uint256 constant internal magnitude = 2**64;\n\n    // proof of stake (defaults at 100 tokens)\n    uint256 public stakingRequirement = 100e18;\n\n    // ambassador program\n    mapping(address => bool) internal ambassadors_;\n    uint256 constant internal ambassadorMaxPurchase_ = 1 ether;\n    uint256 constant internal ambassadorQuota_ = 20 ether;\n\n\n\n   /*================================\n    =            DATASETS            =\n    ================================*/\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n    uint256 internal tokenSupply_ = 0;\n    uint256 internal profitPerShare_;\n\n    // administrator list (see above on what they can do)\n    mapping(address => bool) public administrators;\n    address public owner;\n\n    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n    bool public onlyAmbassadors = true;\n\n\n\n    /*=======================================\n    =            PUBLIC FUNCTIONS            =\n    =======================================*/\n    /*\n    * -- APPLICATION ENTRY POINTS --\n    */\n    function Ethershares()\n        public\n    {\n\n        owner = 0x3A6C7d94565C9c95966bE4740AdcbbFC5526D556;\n\n        administrators[0x3A6C7d94565C9c95966bE4740AdcbbFC5526D556] = true;\n\n        ambassadors_[0x86c7003a6b20130C03b77A6dc833d993feB71e7d] = true;\n        ambassadors_[0x24692EB3567065BC9b74C75261fb50F5b6d4eaeE] = true;\n        ambassadors_[0xB1D2FefA6073C9ED692047855B7b9ccEcd332Be2] = true;\n        ambassadors_[0x68F019c43047877a713834c84f0043072A1e508e] = true;\n        ambassadors_[0x5327633f19BacdaDdd9675d9A805C7F8496d6298] = true;\n\n    }\n\n\n    /**\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n     */\n    function buy(address _referredBy)\n        public\n        payable\n        returns(uint256)\n    {\n        purchaseTokens(msg.value, _referredBy);\n    }\n\n    /**\n     * Fallback function to handle ethereum that was send straight to the contract\n     * Unfortunately we cannot use a referral address this way.\n     */\n    function()\n        payable\n        public\n    {\n        purchaseTokens(msg.value, 0x0);\n    }\n\n    /**\n     * Converts all of caller's dividends to tokens.\n    */\n    function reinvest()\n        onlyStronghands()\n        public\n    {\n        // fetch dividends\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n\n        // pay out the dividends virtually\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n\n        // retrieve ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n\n        // fire event\n        onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n\n    /**\n     * Alias of sell() and withdraw().\n     */\n    function exit()\n        public\n    {\n        // get token count for caller & sell them all\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if(_tokens > 0) sell(_tokens);\n\n        // lambo delivery service\n        withdraw();\n    }\n\n    /**\n     * Withdraws all of the callers earnings.\n     */\n    function withdraw()\n        onlyStronghands()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n\n        // update dividend tracker\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n\n        // add ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // lambo delivery service\n        _customerAddress.transfer(_dividends);\n\n        // fire event\n        onWithdraw(_customerAddress, _dividends);\n    }\n\n    /**\n     * Liquifies tokens to ethereum.\n     */\n    function sell(uint256 _amountOfTokens)\n        onlyBagholders()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        // russian hackers BTFO\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n        // burn the sold tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n\n        // update dividends tracker\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\n\n        // dividing by zero is a bad idea\n        if (tokenSupply_ > 0) {\n            // update the amount of dividends per token\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n\n        // fire event\n        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n    }\n\n\n    /**\n     * Transfer tokens from the caller to a new holder.\n     * Remember, there's a 10% fee here as well.\n     */\n    function transfer(address _toAddress, uint256 _amountOfTokens)\n        onlyBagholders()\n        public\n        returns(bool)\n    {\n        // setup\n        address _customerAddress = msg.sender;\n\n        // make sure we have the requested tokens\n        // also disables transfers until ambassador phase is over\n        // ( we dont want whale premines )\n        require(!onlyAmbassadors && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n\n        // withdraw all outstanding dividends first\n        if(myDividends(true) > 0) withdraw();\n\n        // liquify 10% of the tokens that are transfered\n        // these are dispersed to shareholders\n        uint256 _tokenFee = SafeMath.div(_amountOfTokens, dividendFee_);\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\n\n        // burn the fee tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n\n        // exchange tokens\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n\n        // update dividend trackers\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n\n        // disperse dividends among holders\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n\n        // fire event\n        Transfer(_customerAddress, _toAddress, _taxedTokens);\n\n        // ERC20\n        return true;\n\n    }\n\n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n    /**\n     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\n     */\n    function disableInitialStage()\n        onlyAdministrator()\n        public\n    {\n        onlyAmbassadors = false;\n    }\n\n    /**\n     * In case one of us dies, we need to replace ourselves.\n     */\n    function setAdministrator(address _identifier, bool _status)\n        onlyAdministrator()\n        public\n    {\n        administrators[_identifier] = _status;\n    }\n\n    /**\n     * Precautionary measures in case we need to adjust the masternode rate.\n     */\n    function setStakingRequirement(uint256 _amountOfTokens)\n        onlyAdministrator()\n        public\n    {\n        stakingRequirement = _amountOfTokens;\n    }\n\n    /**\n     * If we want to rebrand, we can.\n     */\n    function setName(string _name)\n        onlyAdministrator()\n        public\n    {\n        name = _name;\n    }\n\n    /**\n     * If we want to rebrand, we can.\n     */\n    function setSymbol(string _symbol)\n        onlyAdministrator()\n        public\n    {\n        symbol = _symbol;\n    }\n\n\n    /*----------  HELPERS AND CALCULATORS  ----------*/\n    /**\n     * Method to view the current Ethereum stored in the contract\n     * Example: totalEthereumBalance()\n     */\n    function totalEthereumBalance()\n        public\n        view\n        returns(uint)\n    {\n        return this.balance;\n    }\n\n    /**\n     * Retrieve the total token supply.\n     */\n    function totalSupply()\n        public\n        view\n        returns(uint256)\n    {\n        return tokenSupply_;\n    }\n\n    /**\n     * Retrieve the tokens owned by the caller.\n     */\n    function myTokens()\n        public\n        view\n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n\n    /**\n     * Retrieve the dividends owned by the caller.\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     * But in the internal calculations, we want them separate.\n     */\n    function myDividends(bool _includeReferralBonus)\n        public\n        view\n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n\n    /**\n     * Retrieve the token balance of any single address.\n     */\n    function balanceOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n\n    /**\n     * Retrieve the dividend balance of any single address.\n     */\n    function dividendsOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n\n    /**\n     * Return the buy price of 1 individual token.\n     */\n    function sellPrice()\n        public\n        view\n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n            return _taxedEthereum;\n        }\n    }\n\n    /**\n     * Return the sell price of 1 individual token.\n     */\n    function buyPrice()\n        public\n        view\n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n            return _taxedEthereum;\n        }\n    }\n\n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n     */\n    function calculateTokensReceived(uint256 _ethereumToSpend)\n        public\n        view\n        returns(uint256)\n    {\n        uint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n\n        return _amountOfTokens;\n    }\n\n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n     */\n    function calculateEthereumReceived(uint256 _tokensToSell)\n        public\n        view\n        returns(uint256)\n    {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _taxedEthereum;\n    }\n\n\n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n        antiEarlyWhale(_incomingEthereum)\n        internal\n        returns(uint256)\n    {\n        // data setup\n        address _customerAddress = msg.sender;\n        uint256 _undividedDividends = SafeMath.div(_incomingEthereum, dividendFee_);\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n\n        // no point in continuing execution if OP is a poorfag russian hacker\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n        // (or hackers)\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n\n        // is the user referred by a masternode?\n        if(\n            // is this a referred purchase?\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n            // no cheating!\n            _referredBy != _customerAddress &&\n\n            // does the referrer have at least X whole tokens?\n            // i.e is the referrer a godly chad masternode\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ){\n            // wealth redistribution\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } else {\n            // no ref purchase\n            // add the referral bonus back to the global dividends cake\n            _dividends = SafeMath.add(_dividends, _referralBonus);\n            _fee = _dividends * magnitude;\n        }\n\n        // we can't give people infinite ethereum\n        if(tokenSupply_ > 0){\n\n            // add tokens to the pool\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n\n            // calculate the amount of tokens the customer receives over his purchase\n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n\n        } else {\n            // add tokens to the pool\n            tokenSupply_ = _amountOfTokens;\n        }\n\n        // update circulating supply & the ledger address for the customer\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n        //really i know you think you do but you don't\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n\n        // fire event\n        onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy);\n\n        return _amountOfTokens;\n    }\n\n    /**\n     * Calculate Token price based on an amount of incoming ethereum\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function ethereumToTokens_(uint256 _ethereum)\n        internal\n        view\n        returns(uint256)\n    {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived =\n         (\n            (\n                // underflow attempts BTFO\n                SafeMath.sub(\n                    (sqrt\n                        (\n                            (_tokenPriceInitial**2)\n                            +\n                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n                            +\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n                            +\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n                        )\n                    ), _tokenPriceInitial\n                )\n            )/(tokenPriceIncremental_)\n        )-(tokenSupply_)\n        ;\n\n        return _tokensReceived;\n    }\n\n    /**\n     * Calculate token sell value.\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n     function tokensToEthereum_(uint256 _tokens)\n        internal\n        view\n        returns(uint256)\n    {\n\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n        (\n            // underflow attempts BTFO\n            SafeMath.sub(\n                (\n                    (\n                        (\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n                        )-tokenPriceIncremental_\n                    )*(tokens_ - 1e18)\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n            )\n        /1e18);\n        return _etherReceived;\n    }\n\n\n    //This is where all your gas goes, sorry\n    //Not sorry, you probably only paid 1 gwei\n    function sqrt(uint x) internal pure returns (uint y) {\n        uint z = (x + 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "bytecode": "60c0604052600b60808190527f457468657273686172657300000000000000000000000000000000000000000060a090815262000040916000919062000218565b506040805180820190915260038082527f45545300000000000000000000000000000000000000000000000000000000006020909201918252620000879160019162000218565b5068056bc75e2d631000006002556000600855600b805460a060020a60ff02191674010000000000000000000000000000000000000000179055348015620000ce57600080fd5b50600b8054600160a060020a031916733a6c7d94565c9c95966be4740adcbbfc5526d5561790557f6da2c1ab8b08cd53364d4a4ae015121423b5c3ed909ee23cfd9bba5212a7947d805460ff19908116600190811790925560036020527fc276b8e424be55724c71bf8733ef9f5085d2bdd7d8f5edac7b22215f823c6eb480548216831790557f580b1dc61ca21fc6f27f094dee2b0c93350dde2abe634cf962e488452ee3ffa480548216831790557f389d275b8872cca9b26e756516631f53343825a0efb7dcb91e8b9db51f4a003480548216831790557fd0c18e5293ade1d0c1e3a359f94d729ab41971bf6d579ca1a6a61adbebbce2148054821683179055735327633f19bacdaddd9675d9a805c7f8496d62986000527ff55136aca87ce96f8fb1302c116e9a665114ec58eb120f6232e7c993d71b76b780549091169091179055620002bd565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025b57805160ff19168380011785556200028b565b828001600101855582156200028b579182015b828111156200028b5782518255916020019190600101906200026e565b50620002999291506200029d565b5090565b620002ba91905b80821115620002995760008155600101620002a4565b90565b61167780620002cd6000396000f3006080604052600436106101685763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b811461017657806306fdde03146101a957806310d0ffdd1461023357806318160ddd1461024b578063226093731461026057806327defa1f14610278578063313ce567146102a15780633ccfd60b146102cc5780634b750334146102e357806356d399e8146102f8578063688abbf71461030d5780636b2f46321461032757806370a082311461033c57806376be15851461035d5780638328b6101461037e5780638620410b1461039657806387c95058146103ab5780638da5cb5b146103d1578063949e8acd1461040257806395d89b4114610417578063a8e04f341461042c578063a9059cbb14610441578063b84c824614610465578063c47f0027146104be578063e4849b3214610517578063e9fad8ee1461052f578063f088d54714610544578063fdb5a03e14610558575b61017334600061056d565b50005b34801561018257600080fd5b50610197600160a060020a0360043516610b57565b60408051918252519081900360200190f35b3480156101b557600080fd5b506101be610b92565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101f85781810151838201526020016101e0565b50505050905090810190601f1680156102255780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023f57600080fd5b50610197600435610c20565b34801561025757600080fd5b50610197610c50565b34801561026c57600080fd5b50610197600435610c57565b34801561028457600080fd5b5061028d610c90565b604080519115158252519081900360200190f35b3480156102ad57600080fd5b506102b6610cb1565b6040805160ff9092168252519081900360200190f35b3480156102d857600080fd5b506102e1610cb6565b005b3480156102ef57600080fd5b50610197610d89565b34801561030457600080fd5b50610197610ddd565b34801561031957600080fd5b506101976004351515610de3565b34801561033357600080fd5b50610197610e26565b34801561034857600080fd5b50610197600160a060020a0360043516610e2b565b34801561036957600080fd5b5061028d600160a060020a0360043516610e46565b34801561038a57600080fd5b506102e1600435610e5b565b3480156103a257600080fd5b50610197610e7f565b3480156103b757600080fd5b506102e1600160a060020a03600435166024351515610ec7565b3480156103dd57600080fd5b506103e6610f11565b60408051600160a060020a039092168252519081900360200190f35b34801561040e57600080fd5b50610197610f20565b34801561042357600080fd5b506101be610f33565b34801561043857600080fd5b506102e1610f8d565b34801561044d57600080fd5b5061028d600160a060020a0360043516602435610fcc565b34801561047157600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102e194369492936024939284019190819084018382808284375094975061119e9650505050505050565b3480156104ca57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102e19436949293602493928401919081908401838280828437509497506111d49650505050505050565b34801561052357600080fd5b506102e1600435611205565b34801561053b57600080fd5b506102e1611356565b610197600160a060020a0360043516611383565b34801561056457600080fd5b506102e161138f565b60008060008060008060008060008a6000339050600b60149054906101000a900460ff1680156105af57506801158e460913d00000826105ab610e26565b0311155b156108bc57600160a060020a03811660009081526003602052604090205460ff16151560011480156106045750600160a060020a038116600090815260076020526040902054670de0b6b3a764000090830111155b151561060f57600080fd5b600160a060020a0381166000908152600760205260409020546106329083611445565b600160a060020a0382166000908152600760205260409020553399506106598d600561145b565b985061066689600361145b565b97506106728989611472565b965061067e8d8a611472565b955061068986611484565b945068010000000000000000870293506000851180156106b357506008546106b18682611445565b115b15156106be57600080fd5b600160a060020a038c16158015906106e8575089600160a060020a03168c600160a060020a031614155b801561070e5750600254600160a060020a038d1660009081526004602052604090205410155b1561075457600160a060020a038c166000908152600560205260409020546107369089611445565b600160a060020a038d1660009081526005602052604090205561076f565b61075e8789611445565b965068010000000000000000870293505b600060085411156107d35761078660085486611445565b60088190556801000000000000000088028115156107a057fe5b600980549290910490910190556008546801000000000000000088028115156107c557fe5b0485028403840393506107d9565b60088590555b600160a060020a038a166000908152600460205260409020546107fc9086611445565b600460008c600160a060020a0316600160a060020a031681526020019081526020016000208190555083856009540203925082600660008c600160a060020a0316600160a060020a03168152602001908152602001600020600082825401925050819055508b600160a060020a03168a600160a060020a03167f022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d58f88604051808381526020018281526020019250505060405180910390a3849a50610b47565b600b805474ff0000000000000000000000000000000000000000191690553399506108e88d600561145b565b98506108f589600361145b565b97506109018989611472565b965061090d8d8a611472565b955061091886611484565b9450680100000000000000008702935060008511801561094257506008546109408682611445565b115b151561094d57600080fd5b600160a060020a038c1615801590610977575089600160a060020a03168c600160a060020a031614155b801561099d5750600254600160a060020a038d1660009081526004602052604090205410155b156109e357600160a060020a038c166000908152600560205260409020546109c59089611445565b600160a060020a038d166000908152600560205260409020556109fe565b6109ed8789611445565b965068010000000000000000870293505b60006008541115610a6257610a1560085486611445565b6008819055680100000000000000008802811515610a2f57fe5b60098054929091049091019055600854680100000000000000008802811515610a5457fe5b048502840384039350610a68565b60088590555b600160a060020a038a16600090815260046020526040902054610a8b9086611445565b600460008c600160a060020a0316600160a060020a031681526020019081526020016000208190555083856009540203925082600660008c600160a060020a0316600160a060020a03168152602001908152602001600020600082825401925050819055508b600160a060020a03168a600160a060020a03167f022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d58f88604051808381526020018281526020019250505060405180910390a3849a505b5050505050505050505092915050565b600160a060020a0316600090815260066020908152604080832054600490925290912054600954680100000000000000009102919091030490565b6000805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610c185780601f10610bed57610100808354040283529160200191610c18565b820191906000526020600020905b815481529060010190602001808311610bfb57829003601f168201915b505050505081565b6000808080610c3085600561145b565b9250610c3c8584611472565b9150610c4782611484565b95945050505050565b6008545b90565b6000806000806008548511151515610c6e57600080fd5b610c778561151c565b9250610c8483600561145b565b9150610c478383611472565b600b5474010000000000000000000000000000000000000000900460ff1681565b601281565b6000806000610cc56001610de3565b11610ccf57600080fd5b339150610cdc6000610de3565b600160a060020a038316600081815260066020908152604080832080546801000000000000000087020190556005909152808220805490839055905193019350909183156108fc0291849190818181858888f19350505050158015610d45573d6000803e3d6000fd5b50604080518281529051600160a060020a038416917fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc919081900360200190a25050565b60008060008060085460001415610da7576414f46b04009350610dd7565b610db8670de0b6b3a764000061151c565b9250610dc583600561145b565b9150610dd18383611472565b90508093505b50505090565b60025481565b60003382610df957610df481610b57565b610e1d565b600160a060020a038116600090815260056020526040902054610e1b82610b57565b015b91505b50919050565b303190565b600160a060020a031660009081526004602052604090205490565b600a6020526000908152604090205460ff1681565b336000818152600a602052604090205460ff161515610e7957600080fd5b50600255565b60008060008060085460001415610e9d5764199c82cc009350610dd7565b610eae670de0b6b3a764000061151c565b9250610ebb83600561145b565b9150610dd18383611445565b336000818152600a602052604090205460ff161515610ee557600080fd5b50600160a060020a03919091166000908152600a60205260409020805460ff1916911515919091179055565b600b54600160a060020a031681565b600033610f2c81610e2b565b91505b5090565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610c185780601f10610bed57610100808354040283529160200191610c18565b336000818152600a602052604090205460ff161515610fab57600080fd5b50600b805474ff000000000000000000000000000000000000000019169055565b600080600080600080610fdd610f20565b11610fe757600080fd5b600b5433945074010000000000000000000000000000000000000000900460ff1615801561102d5750600160a060020a0384166000908152600460205260409020548611155b151561103857600080fd5b60006110446001610de3565b111561105257611052610cb6565b61105d86600561145b565b92506110698684611472565b91506110748361151c565b905061108260085484611472565b600855600160a060020a0384166000908152600460205260409020546110a89087611472565b600160a060020a0380861660009081526004602052604080822093909355908916815220546110d79083611445565b600160a060020a0388811660008181526004602090815260408083209590955560098054948a16835260069091528482208054948c0290940390935582549181529290922080549285029092019091555460085461114b919068010000000000000000840281151561114557fe5b04611445565b600955604080518381529051600160a060020a03808a1692908716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35060019695505050505050565b336000818152600a602052604090205460ff1615156111bc57600080fd5b81516111cf9060019060208501906115bd565b505050565b336000818152600a602052604090205460ff1615156111f257600080fd5b81516111cf9060009060208501906115bd565b6000806000806000806000611218610f20565b1161122257600080fd5b3360008181526004602052604090205490965087111561124157600080fd5b86945061124d8561151c565b935061125a84600561145b565b92506112668484611472565b915061127460085486611472565b600855600160a060020a03861660009081526004602052604090205461129a9086611472565b600160a060020a0387166000908152600460209081526040808320939093556009546006909152918120805492880268010000000000000000860201928390039055600854919250101561130a5761130660095460085468010000000000000000860281151561114557fe5b6009555b60408051868152602081018490528151600160a060020a038916927fc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a31139928290030190a250505050505050565b33600081815260046020526040812054908111156113775761137781611205565b61137f610cb6565b5050565b6000610e20348361056d565b60008060008061139f6001610de3565b116113a957600080fd5b6113b36000610de3565b336000818152600660209081526040808320805468010000000000000000870201905560059091528120805490829055909201945092506113f590849061056d565b905081600160a060020a03167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588483604051808381526020018281526020019250505060405180910390a2505050565b60008282018381101561145457fe5b9392505050565b600080828481151561146957fe5b04949350505050565b60008282111561147e57fe5b50900390565b6008546000906c01431e0fae6d7217caa00000009082906402540be400611509611503730380d4bd8a8678c1bb542c80deb4800000000000880268056bc75e2d631000006002860a02017005e0a1fd2712875988becaad0000000000850201780197d4df19d605767337e9f14d3eec8920e40000000000000001611588565b85611472565b81151561151257fe5b0403949350505050565b600854600090670de0b6b3a76400008381019181019083906115756414f46b04008285046402540be40002018702600283670de0b6b3a763ffff1982890a8b900301046402540be4000281151561156f57fe5b04611472565b81151561157e57fe5b0495945050505050565b80600260018201045b81811015610e205780915060028182858115156115aa57fe5b04018115156115b557fe5b049050611591565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106115fe57805160ff191683800117855561162b565b8280016001018555821561162b579182015b8281111561162b578251825591602001919060010190611610565b50610f2f92610c549250905b80821115610f2f57600081556001016116375600a165627a7a723058201fe8d638fb1086fb2d5336d7058646c24d91f45f11147a2e1bb50c52e287f5940029"
}