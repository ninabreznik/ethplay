{
  "address": "0x3d7b33448b4e3b69bb6c0c3c905bd1592f8238f4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Moozicore",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-22\n*/\n\npragma solidity ^0.4.19;\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\ncontract MziGold is MintableToken {\n  function convertMint(address _to, uint256 _amount) onlyOwner canMint public returns (bool);\n  function allowTransfer(address _from, address _to) public view returns (bool);\n  function allowManager() public view returns (bool);\n  function setWhitelisting(bool _status) onlyOwner public;\n  function setAllowTransferGlobal(bool _status) onlyOwner public;\n  function setAllowTransferWhitelist(bool _status) onlyOwner public;\n  function setManager(address _manager, bool _status) onlyOwner public;\n  function burn(address _burner, uint256 _value) onlyOwner public;\n  function setWhitelist(address _address, bool _status) public;\n  function setWhitelistTransfer(address _address, bool _status) public;\n}\n\ncontract Crowdsale {\n  using SafeMath for uint256;\n\n  // The token being sold\n  MziGold public token;\n\n  // start and end timestamps where investments are allowed (both inclusive)\n  uint256 public startTime;\n  uint256 public endTime;\n\n  // address where funds are collected\n  address public wallet;\n\n  // how many token units a buyer gets per wei\n  uint256 public rate;\n\n  // amount of raised money in wei\n  uint256 public weiRaised;\n\n  /**\n   * event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n    require(_startTime >= now);\n    require(_endTime >= _startTime);\n    require(_rate > 0);\n    require(_wallet != address(0));\n\n    token = createTokenContract();\n    startTime = _startTime;\n    endTime = _endTime;\n    rate = _rate;\n    wallet = _wallet;\n  }\n\n  // creates the token to be sold.\n  // override this method to have crowdsale of a specific mintable token.\n  function createTokenContract() internal returns (MziGold);\n\n\n  // fallback function can be used to buy tokens\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  // low level token purchase function\n  function buyTokens(address beneficiary) public payable {\n    require(beneficiary != address(0));\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n\n    // calculate token amount to be created\n    uint256 tokens = weiAmount.mul(rate);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    token.mint(beneficiary, tokens);\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n    forwardFunds();\n  }\n\n  // send ether to the fund collection wallet\n  // override to create custom fund forwarding mechanisms\n  function forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n\n  // @return true if the transaction can buy tokens\n  function validPurchase() internal view returns (bool) {\n    bool withinPeriod = now >= startTime && now <= endTime;\n    bool nonZeroPurchase = msg.value != 0;\n    return withinPeriod && nonZeroPurchase;\n  }\n\n  // @return true if crowdsale event has ended\n  function hasEnded() public view returns (bool) {\n    return now > endTime;\n  }\n}\n\ncontract Moozicore is Crowdsale, Ownable {\n\n  uint256 constant ICO_CAP = 498000000000000000000000000;\n  uint256 constant MIN_INVEST = 0.3 ether;\n  address constant TOKEN_ADDRESS = 0xfE4455fd433Ed3CA025ec7c43cb8686eD89826CD;\n  uint256 public totalSupplyIco;\n\n  function Moozicore (\n    uint256 _startTime,\n    uint256 _endTime,\n    uint256 _rate,\n    address _wallet\n  ) public\n    Crowdsale(_startTime, _endTime, _rate, _wallet)\n  {\n  }\n\n  function createTokenContract() internal returns (MziGold) {\n    return MziGold(TOKEN_ADDRESS);\n  }\n\n  // overriding Crowdsale#validPurchase\n  function validPurchase() internal constant returns (bool) {\n    require(msg.value >= MIN_INVEST);\n    require(getRate() != 0);\n    require(totalSupplyIco.add(msg.value.mul(getRate())) <= ICO_CAP);\n\n    return super.validPurchase();\n  }\n\n  // overriding Crowdsale#buyTokens\n  function buyTokens(address beneficiary) payable public {\n    require(beneficiary != address(0));\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n    uint256 tokens = weiAmount.mul(getRate());\n    weiRaised = weiRaised.add(weiAmount);\n    totalSupplyIco = totalSupplyIco.add(tokens);\n\n    token.mint(beneficiary, tokens);\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n    forwardFunds();\n  }\n\n  function getRate() public constant returns (uint256) {\n    if (now >= startTime && now < 1545037200) {\n      return 5600;\n    }\n\n    if (now >= 1545037200 && now < 1546851600) {\n      return 4000;\n    }\n\n    if (now >= 1546851600 && now < endTime) {\n      return 3100;\n    }\n\n    return 0;\n  }\n\n  function setManager(address _manager, bool _status) onlyOwner public {\n    token.setManager(_manager, _status);\n  }\n\n  function setWhitelisting(bool _status) onlyOwner public {\n    token.setWhitelisting(_status);\n  }\n\n  function setAllowTransferGlobal(bool _status) onlyOwner public {\n    token.setAllowTransferGlobal(_status);\n  }\n\n  function setAllowTransferWhitelist(bool _status) onlyOwner public {\n    token.setAllowTransferWhitelist(_status);\n  }\n\n  function convertMintTokens(address _to, uint256 _amount) onlyOwner public returns (bool) {\n    token.convertMint(_to, _amount);\n  }\n\n  function mintTokens(address walletToMint, uint256 t) onlyOwner payable public {\n    token.mint(walletToMint, t);\n  }\n\n  function tokenTransferOwnership(address newOwner) onlyOwner payable public {\n    token.transferOwnership(newOwner);\n  }\n\n  function changeEnd(uint256 _end) onlyOwner public {\n    endTime = _end;\n  }\n\n  function burn(address _burner, uint256 _value) onlyOwner public {\n    token.burn(_burner, _value);\n  }\n\n  function setWhitelist(address _address, bool _status) onlyOwner public {\n    token.setWhitelist(_address, _status);\n  }\n\n  function setWhitelistTransfer(address _address, bool _status) onlyOwner public {\n    token.setWhitelistTransfer(_address, _status);\n  }\n}",
  "bytecode": "6060604052341561000f57600080fd5b60405160808062001a57833981016040528080519060200190919080519060200190919080519060200190919080519060200190919050508383838342841015151561005a57600080fd5b83831015151561006957600080fd5b60008211151561007857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156100b457600080fd5b6100cf6101b264010000000002611831176401000000009004565b6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600181905550826002819055508160048190555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050506101ce565b600073fe4455fd433ed3ca025ec7c43cb8686ed89826cd905090565b61187980620001de6000396000f300606060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dc081c51461013e5780632c4e722e1461016c5780633197cbb614610195578063319f22f9146101be5780634042b66f14610218578063521eb2731461024157806353d6fd59146102965780635af5f7ba146102da57806366a16cad146102ff578063679aefce1461034357806378e979251461036c5780638da5cb5b146103955780639ad74f81146103ea5780639dc29fac1461040f578063a5e90eee14610451578063adb88cb914610495578063e37bddc3146104be578063ec8ac4d8146104e1578063ecb70fb71461050f578063f0dda65c1461053c578063f2fde38b14610573578063fc0c546a146105ac578063fc1f2d4614610601575b61013c33610626565b005b61016a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061082f565b005b341561017757600080fd5b61017f61095d565b6040518082815260200191505060405180910390f35b34156101a057600080fd5b6101a8610963565b6040518082815260200191505060405180910390f35b34156101c957600080fd5b6101fe600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610969565b604051808215151515815260200191505060405180910390f35b341561022357600080fd5b61022b610ab5565b6040518082815260200191505060405180910390f35b341561024c57600080fd5b610254610abb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102a157600080fd5b6102d8600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080351515906020019091905050610ae1565b005b34156102e557600080fd5b6102fd60048080351515906020019091905050610c1c565b005b341561030a57600080fd5b610341600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080351515906020019091905050610d22565b005b341561034e57600080fd5b610356610e5d565b6040518082815260200191505060405180910390f35b341561037757600080fd5b61037f610ed5565b6040518082815260200191505060405180910390f35b34156103a057600080fd5b6103a8610edb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103f557600080fd5b61040d60048080351515906020019091905050610f01565b005b341561041a57600080fd5b61044f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611007565b005b341561045c57600080fd5b610493600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035151590602001909190505061113e565b005b34156104a057600080fd5b6104a8611279565b6040518082815260200191505060405180910390f35b34156104c957600080fd5b6104df600480803590602001909190505061127f565b005b61050d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610626565b005b341561051a57600080fd5b6105226112e5565b604051808215151515815260200191505060405180910390f35b610571600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506112f1565b005b341561057e57600080fd5b6105aa600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611439565b005b34156105b757600080fd5b6105bf611591565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561060c57600080fd5b610624600480803515159060200190919050506115b6565b005b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561066557600080fd5b61066d6116bc565b151561067857600080fd5b349150610695610686610e5d565b8361174190919063ffffffff16565b90506106ac8260055461177c90919063ffffffff16565b6005819055506106c78160075461177c90919063ffffffff16565b6007819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1984836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561079957600080fd5b6102c65a03f115156107aa57600080fd5b50505060405180519050508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188484604051808381526020018281526020019250505060405180910390a361082a61179a565b505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561088b57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2fde38b826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b151561094657600080fd5b6102c65a03f1151561095757600080fd5b50505050565b60045481565b60025481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109c757600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635ec1fc1984846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610a9357600080fd5b6102c65a03f11515610aa457600080fd5b505050604051805190505092915050565b60055481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b3d57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166353d6fd5983836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018215151515815260200192505050600060405180830381600087803b1515610c0457600080fd5b6102c65a03f11515610c1557600080fd5b5050505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c7857600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635af5f7ba826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082151515158152602001915050600060405180830381600087803b1515610d0b57600080fd5b6102c65a03f11515610d1c57600080fd5b50505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d7e57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166366a16cad83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018215151515815260200192505050600060405180830381600087803b1515610e4557600080fd5b6102c65a03f11515610e5657600080fd5b5050505050565b60006001544210158015610e745750635c17659042105b15610e83576115e09050610ed2565b635c1765904210158015610e9a5750635c33151042105b15610ea957610fa09050610ed2565b635c3315104210158015610ebe575060025442105b15610ecd57610c1c9050610ed2565b600090505b90565b60015481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f5d57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639ad74f81826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082151515158152602001915050600060405180830381600087803b1515610ff057600080fd5b6102c65a03f1151561100157600080fd5b50505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561106357600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b151561112657600080fd5b6102c65a03f1151561113757600080fd5b5050505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561119a57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a5e90eee83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018215151515815260200192505050600060405180830381600087803b151561126157600080fd5b6102c65a03f1151561127257600080fd5b5050505050565b60075481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112db57600080fd5b8060028190555050565b60006002544211905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561134d57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561141957600080fd5b6102c65a03f1151561142a57600080fd5b50505060405180519050505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561149557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156114d157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561161257600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fc1f2d46826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082151515158152602001915050600060405180830381600087803b15156116a557600080fd5b6102c65a03f115156116b657600080fd5b50505050565b6000670429d069189e000034101515156116d557600080fd5b60006116df610e5d565b141515156116ec57600080fd5b6b019bef9a184aa64332000000611727611716611707610e5d565b3461174190919063ffffffff16565b60075461177c90919063ffffffff16565b1115151561173457600080fd5b61173c6117fe565b905090565b60008060008414156117565760009150611775565b828402905082848281151561176757fe5b0414151561177157fe5b8091505b5092915050565b600080828401905083811015151561179057fe5b8091505092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015156117fc57600080fd5b565b6000806000600154421015801561181757506002544211155b91506000341415905081801561182a5750805b9250505090565b600073fe4455fd433ed3ca025ec7c43cb8686ed89826cd9050905600a165627a7a72305820b5f9bfac0d5debf918de864db9a509db341a4261768f0b4d72db8e126059aefb0029000000000000000000000000000000000000000000000000000000005bfbb610000000000000000000000000000000000000000000000000000000005c4ec4900000000000000000000000000000000000000000000000000000000000000001000000000000000000000000595a1db327727a1d2bd8791cae2c44220255c7c5",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000005bfbb610000000000000000000000000000000000000000000000000000000005c4ec4900000000000000000000000000000000000000000000000000000000000000001000000000000000000000000595a1db327727a1d2bd8791cae2c44220255c7c5"
}