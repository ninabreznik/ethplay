{
  "address": "0xc00bc14f555e48a37c81c95e5e0cdf5ee3c89548",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.5.8-nightly.2019.4.23+commit.13518820",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-24\n*/\n\npragma solidity ^0.5.7;\n\nlibrary SafeMath \n{\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \n\t{\n        if (a == 0) \n\t\t{\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        require(b > 0);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ninterface IERC20 \n{\n    function transfer(address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20 is IERC20 \n{\n    using SafeMath for uint256;\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowed;\n    uint256 private _totalSupply;\n\n    function totalSupply() public view returns (uint256) \n    {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) public view returns (uint256) \n    {\n        return _balances[owner];\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) \n    {\n        return _allowed[owner][spender];\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) \n    {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n    \n    function transferBulk(address[] memory _toAccounts, uint256[] memory _tokenAmount) public returns (bool)\n    {\n        require(_toAccounts.length == _tokenAmount.length);\n        for(uint i=0; i<_toAccounts.length; i++) \n        {\n            _transfer(msg.sender, _toAccounts[i], _tokenAmount[i]);\n        }\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) \n    {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) \n    {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) \n    {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) \n    {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    function _transfer(address from, address to, uint256 value) internal \n    {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function _mint(address account, uint256 value) internal \n    {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        \n        require(_balances[account].add(value) <= 11111111111000000000000000000, \"Cant mint > then 11†111†111†111\");\n        \n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    function _burn(address account, uint256 value) internal \n    {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        \n        require(_totalSupply.sub(value) > _totalSupply.div(2), \"Cant burn > 50% of total supply\");\n        \n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    function _burnFrom(address account, uint256 value) internal \n    {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\nlibrary Roles \n{\n    struct Role \n    {\n        mapping (address => bool) bearer;\n    }\n\n    function add(Role storage role, address account) internal \n    {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    function remove(Role storage role, address account) internal \n    {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    function has(Role storage role, address account) internal view returns (bool) \n    {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n    address private _owner;\n\n    constructor () internal {\n        _owner = msg.sender;\n        _addMinter(msg.sender);\n    }\n    \n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n    \n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyOwner {\n        _addMinter(account);\n    }\n\n    function renounceMinter(address account) public onlyOwner {\n        _removeMinter(account);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\ncontract ERC20Detailed is IERC20 \n{\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public \n    {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    function name() public view returns (string memory) \n    {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) \n    {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) \n    {\n        return _decimals;\n    }\n}\n\ncontract ERC20Burnable is ERC20, MinterRole \n{\n    function burn(uint256 value) public onlyMinter\n    {\n        _burn(msg.sender, value);\n    }\n\n    function burnFrom(address from, uint256 value) public onlyMinter\n    {\n        _burnFrom(from, value);\n    }\n}\n\ncontract ERC20Mintable is ERC20, MinterRole \n{\n    function mint(address to, uint256 value) public onlyMinter returns (bool) \n    {\n        _mint(to, value);\n        return true;\n    }\n}\n\ncontract Token is ERC20, MinterRole, ERC20Detailed, ERC20Mintable, ERC20Burnable \n{\n    address payable private _wallet;\n    uint256 private _weiRaised;\n    \n    constructor (address payable wallet) public ERC20Detailed(\"CryptoWars Token\", \"CWT\", 18) \n    {\n        _wallet = wallet;\n\t}\n\t\n\tfunction () external payable \n    {\n        uint256 weiAmount = msg.value;\n        require(msg.sender != address(0));\n        require(weiAmount != 0);\n        _weiRaised = _weiRaised.add(weiAmount);\n        _wallet.transfer(msg.value);\n    }\n    \n    function wallet() public view returns (address payable) \n    {\n        return _wallet;\n    }\n    \n    function weiRaised() public view returns (uint256) \n    {\n        return _weiRaised;\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405160208062001431833981018060405260208110156200003357600080fd5b5051604080518082018252601081527f43727970746f5761727320546f6b656e000000000000000000000000000000006020828101919091528251808401909352600383527f435754000000000000000000000000000000000000000000000000000000000083820152600480546001600160a01b03191633908117909155919291601291620000c8919062000134811b901c565b8251620000dd90600590602086019062000212565b508151620000f390600690602085019062000212565b50600780546001600160a01b0390951661010002610100600160a81b031960ff90931660ff1990961695909517919091169390931790925550620002b79050565b6200014f8160036200018660201b620010ad1790919060201c565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b6001600160a01b0381166200019a57600080fd5b620001ac8282620001dc60201b60201c565b15620001b757600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160a01b038216620001f257600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025557805160ff191683800117855562000285565b8280016001018555821562000285579182015b828111156200028557825182559160200191906001019062000268565b506200029392915062000297565b5090565b620002b491905b808211156200029357600081556001016200029e565b90565b61116a80620002c76000396000f3fe60806040526004361061012a5760003560e01c80635f112c68116100ab57806395d89b411161006f57806395d89b41146105d1578063983b2d56146105e6578063a457c2d714610619578063a9059cbb14610652578063aa271e1a1461068b578063dd62ed3e146106be5761012a565b80635f112c68146103e957806370a082311461041c57806379cc67901461044f5780638f32d59b146104885780639316c3e71461049d5761012a565b806339509351116100f257806339509351146103055780634042b66f1461033e57806340c10f191461035357806342966c681461038c578063521eb273146103b85761012a565b806306fdde0314610199578063095ea7b31461022357806318160ddd1461027057806323b872dd14610297578063313ce567146102da575b343361013557600080fd5b8061013f57600080fd5b600854610152908263ffffffff6106f916565b6008556007546040516001600160a01b0361010090920491909116903480156108fc02916000818181858888f19350505050158015610195573d6000803e3d6000fd5b5050005b3480156101a557600080fd5b506101ae610712565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101e85781810151838201526020016101d0565b50505050905090810190601f1680156102155780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022f57600080fd5b5061025c6004803603604081101561024657600080fd5b506001600160a01b0381351690602001356107a8565b604080519115158252519081900360200190f35b34801561027c57600080fd5b50610285610812565b60408051918252519081900360200190f35b3480156102a357600080fd5b5061025c600480360360608110156102ba57600080fd5b506001600160a01b03813581169160208101359091169060400135610818565b3480156102e657600080fd5b506102ef6108cf565b6040805160ff9092168252519081900360200190f35b34801561031157600080fd5b5061025c6004803603604081101561032857600080fd5b506001600160a01b0381351690602001356108d8565b34801561034a57600080fd5b50610285610974565b34801561035f57600080fd5b5061025c6004803603604081101561037657600080fd5b506001600160a01b03813516906020013561097a565b34801561039857600080fd5b506103b6600480360360208110156103af57600080fd5b50356109a1565b005b3480156103c457600080fd5b506103cd6109c0565b604080516001600160a01b039092168252519081900360200190f35b3480156103f557600080fd5b506103b66004803603602081101561040c57600080fd5b50356001600160a01b03166109d4565b34801561042857600080fd5b506102856004803603602081101561043f57600080fd5b50356001600160a01b03166109ee565b34801561045b57600080fd5b506103b66004803603604081101561047257600080fd5b506001600160a01b038135169060200135610a09565b34801561049457600080fd5b5061025c610a29565b3480156104a957600080fd5b5061025c600480360360408110156104c057600080fd5b8101906020810181356401000000008111156104db57600080fd5b8201836020820111156104ed57600080fd5b8035906020019184602083028401116401000000008311171561050f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561055f57600080fd5b82018360208201111561057157600080fd5b8035906020019184602083028401116401000000008311171561059357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610a3a945050505050565b3480156105dd57600080fd5b506101ae610a99565b3480156105f257600080fd5b506103b66004803603602081101561060957600080fd5b50356001600160a01b0316610afa565b34801561062557600080fd5b5061025c6004803603604081101561063c57600080fd5b506001600160a01b038135169060200135610b14565b34801561065e57600080fd5b5061025c6004803603604081101561067557600080fd5b506001600160a01b038135169060200135610b5d565b34801561069757600080fd5b5061025c600480360360208110156106ae57600080fd5b50356001600160a01b0316610b6a565b3480156106ca57600080fd5b50610285600480360360408110156106e157600080fd5b506001600160a01b0381358116916020013516610b83565b60008282018381101561070b57600080fd5b9392505050565b60058054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561079e5780601f106107735761010080835404028352916020019161079e565b820191906000526020600020905b81548152906001019060200180831161078157829003601f168201915b5050505050905090565b60006001600160a01b0383166107bd57600080fd5b3360008181526001602090815260408083206001600160a01b038816808552908352928190208690558051868152905192939260008051602061111f833981519152929181900390910190a350600192915050565b60025490565b6001600160a01b038316600090815260016020908152604080832033845290915281205461084c908363ffffffff610bae16565b6001600160a01b038516600090815260016020908152604080832033845290915290205561087b848484610bc3565b6001600160a01b03841660008181526001602090815260408083203380855290835292819020548151908152905192939260008051602061111f833981519152929181900390910190a35060019392505050565b60075460ff1690565b60006001600160a01b0383166108ed57600080fd5b3360009081526001602090815260408083206001600160a01b0387168452909152902054610921908363ffffffff6106f916565b3360008181526001602090815260408083206001600160a01b03891680855290835292819020859055805194855251919360008051602061111f833981519152929081900390910190a350600192915050565b60085490565b600061098533610b6a565b61098e57600080fd5b6109988383610c8e565b50600192915050565b6109aa33610b6a565b6109b357600080fd5b6109bd3382610dad565b50565b60075461010090046001600160a01b031690565b6109dc610a29565b6109e557600080fd5b6109bd81610ece565b6001600160a01b031660009081526020819052604090205490565b610a1233610b6a565b610a1b57600080fd5b610a258282610f16565b5050565b6004546001600160a01b0316331490565b60008151835114610a4a57600080fd5b60005b8351811015610a8f57610a8733858381518110610a6657fe5b6020026020010151858481518110610a7a57fe5b6020026020010151610bc3565b600101610a4d565b5060019392505050565b60068054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561079e5780601f106107735761010080835404028352916020019161079e565b610b02610a29565b610b0b57600080fd5b6109bd81610fc6565b60006001600160a01b038316610b2957600080fd5b3360009081526001602090815260408083206001600160a01b0387168452909152902054610921908363ffffffff610bae16565b6000610998338484610bc3565b6000610b7d60038363ffffffff61100e16565b92915050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600082821115610bbd57600080fd5b50900390565b6001600160a01b038216610bd657600080fd5b6001600160a01b038316600090815260208190526040902054610bff908263ffffffff610bae16565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610c34908263ffffffff6106f916565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6001600160a01b038216610ca157600080fd5b600254610cb4908263ffffffff6106f916565b6002556001600160a01b0382166000908152602081905260409020546b23e6e54c4381ee57e2bc000090610cee908363ffffffff6106f916565b1115610d2e57604051600160e51b62461bcd0281526004018080602001828103825260258152602001806110fa6025913960400191505060405180910390fd5b6001600160a01b038216600090815260208190526040902054610d57908263ffffffff6106f916565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038216610dc057600080fd5b600254610dd3908263ffffffff610bae16565b6002818155610de8919063ffffffff61104316565b600254610dfb908363ffffffff610bae16565b11610e505760408051600160e51b62461bcd02815260206004820152601f60248201527f43616e74206275726e203e20353025206f6620746f74616c20737570706c7900604482015290519081900360640190fd5b6001600160a01b038216600090815260208190526040902054610e79908263ffffffff610bae16565b6001600160a01b038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b610edf60038263ffffffff61106516565b6040516001600160a01b038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b6001600160a01b0382166000908152600160209081526040808320338452909152902054610f4a908263ffffffff610bae16565b6001600160a01b0383166000908152600160209081526040808320338452909152902055610f788282610dad565b6001600160a01b03821660008181526001602090815260408083203380855290835292819020548151908152905192939260008051602061111f833981519152929181900390910190a35050565b610fd760038263ffffffff6110ad16565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b60006001600160a01b03821661102357600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b600080821161105157600080fd5b600082848161105c57fe5b04949350505050565b6001600160a01b03811661107857600080fd5b611082828261100e565b61108b57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6001600160a01b0381166110c057600080fd5b6110ca828261100e565b156110d457600080fd5b6001600160a01b0316600090815260209190915260409020805460ff1916600117905556fe43616e74206d696e74203e207468656e203131e280a0313131e280a0313131e280a03131318c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a165627a7a72305820b678d5c34fbd783f1bd3af530ff48253fa957e2cc348dd1cd8a1078cd0c2f96200290000000000000000000000001d7eb9a780f836f6ffa1c9366d1927cf3a5b82de",
  "constructorArguments": "0000000000000000000000001d7eb9a780f836f6ffa1c9366d1927cf3a5b82de"
}