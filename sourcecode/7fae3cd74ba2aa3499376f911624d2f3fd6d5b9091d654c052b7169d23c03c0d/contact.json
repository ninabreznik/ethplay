{
  "address": "0x59c36e47c4490efb7a48d5ec4c68ea8a725c1c56",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ZodiacCore",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-01\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\taddress public owner;\n\n\n\t/**\n\t * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n\t * account.\n\t */\n\tfunction Ownable() public {\n\t\towner = msg.sender;\n\t}\n\n\n\t/**\n\t * @dev Throws if called by any account other than the owner.\n\t */\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n\n\t/**\n\t * @dev Allows the current owner to transfer control of the contract to a newOwner.\n\t * @param newOwner The address to transfer ownership to.\n\t */\n\tfunction transferOwnership(address newOwner) public onlyOwner {\n\t\tif (newOwner != address(0)) {\n\t\t\towner = newOwner;\n\t\t}\n\t}\n\n}\n\n\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n/// @author Dieter Shirley <[emailÂ protected]> (https://github.com/dete)\ncontract ERC721 {\n    // Required methods\n    function totalSupply() public view returns (uint256 total);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\n    function approve(address _to, uint256 _tokenId) external;\n    function transfer(address _to, uint256 _tokenId) external;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n\n    // Events\n    event Transfer(address from, address to, uint256 tokenId);\n    event Approval(address owner, address approved, uint256 tokenId);\n\n    // Optional\n    // function name() public view returns (string name);\n    // function symbol() public view returns (string symbol);\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\n\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n}\n\n\n/// @title SEKRETs\ncontract GeneScienceInterface {\n    /// @dev simply a boolean to indicate this is the contract we expect to be\n    function isGeneScience() public pure returns (bool);\n\n    /// @dev given genes of Zodiacs 1 & 2, return a genetic combination - may have a random factor\n    /// @param genes1 genes of mom\n    /// @param genes2 genes of sire\n    /// @return the genes that are supposed to be passed down the child\n    function mixGenes(uint256 genes1, uint256 genes2, uint256 targetBlock) public returns (uint256);\n}\n\n\n/// @title A facet of ZodiacCore that manages special access privileges.\n/// @author Axiom Zen (https://www.axiomzen.co)\n/// @dev See the ZodiacCore contract documentation to understand how the various contract facets are arranged.\ncontract ZodiacACL {\n    // This facet controls access control for Zodiacs. There are four roles managed here:\n    //\n    //     - The CEO: The CEO can reassign other roles and change the addresses of our dependent smart\n    //         contracts. It is also the only role that can unpause the smart contract. It is initially\n    //         set to the address that created the smart contract in the ZodiacCore constructor.\n    //\n    //     - The CFO: The CFO can withdraw funds from ZodiacCore and its auction contracts.\n    //\n    //     - The COO: The COO can release gen0 Zodiacs to auction, and mint promo Zodiacs.\n    //\n    // It should be noted that these roles are distinct without overlap in their access abilities, the\n    // abilities listed for each role above are exhaustive. In particular, while the CEO can assign any\n    // address to any role, the CEO address itself doesn't have the ability to act in those roles. This\n    // restriction is intentional so that we aren't tempted to use the CEO address frequently out of\n    // convenience. The less we use an address, the less likely it is that we somehow compromise the\n    // account.\n\n    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\n    event ContractUpgrade(address newContract);\n\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\n    address public ceoAddress;\n    address public cfoAddress;\n    address public cooAddress;\n\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n    bool public paused = false;\n\n    /// @dev Access modifier for CEO-only functionality\n    modifier onlyCEO() {\n        require(msg.sender == ceoAddress);\n        _;\n    }\n\n    /// @dev Access modifier for CFO-only functionality\n    modifier onlyCFO() {\n        require(msg.sender == cfoAddress);\n        _;\n    }\n\n    /// @dev Access modifier for COO-only functionality\n    modifier onlyCOO() {\n        require(msg.sender == cooAddress);\n        _;\n    }\n\n    modifier onlyCLevel() {\n        require(\n            msg.sender == cooAddress ||\n            msg.sender == ceoAddress ||\n            msg.sender == cfoAddress\n        );\n        _;\n    }\n\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n    /// @param _newCEO The address of the new CEO\n    function setCEO(address _newCEO) external onlyCEO {\n        require(_newCEO != address(0));\n\n        ceoAddress = _newCEO;\n    }\n\n    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\n    /// @param _newCFO The address of the new CFO\n    function setCFO(address _newCFO) external onlyCEO {\n        require(_newCFO != address(0));\n\n        cfoAddress = _newCFO;\n    }\n\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\n    /// @param _newCOO The address of the new COO\n    function setCOO(address _newCOO) external onlyCEO {\n        require(_newCOO != address(0));\n\n        cooAddress = _newCOO;\n    }\n\n    /*** Pausable functionality adapted from OpenZeppelin ***/\n\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /// @dev Modifier to allow actions only when the contract IS paused\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\n    ///  a bug or exploit is detected and we need to limit damage.\n    function pause() external onlyCLevel whenNotPaused {\n        paused = true;\n    }\n\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\n    ///  one reason we may pause the contract is when CFO or COO accounts are\n    ///  compromised.\n    /// @notice This is public rather than external so it can be called by\n    ///  derived contracts.\n    function unpause() public onlyCEO whenPaused {\n        // can't unpause if contract was upgraded\n        paused = false;\n    }\n}\n\n\n/// @title Base contract for CryptoZodiac. Holds all common structs, events and base variables.\n/// @author Axiom Zen (https://www.axiomzen.co)\n/// @dev See the ZodiacCore contract documentation to understand how the various contract facets are arranged.\ncontract ZodiacBase is ZodiacACL {\n\t/*** EVENTS ***/\n\n\t/// @dev The Birth event is fired whenever a new Zodiac comes into existence. This obviously\n\t///  includes any time a zodiac is created through the giveBirth method, but it is also called\n\t///  when a new gen0 zodiac is created.\n    event Birth(address owner, uint256 ZodiacId, uint256 matronId, uint256 sireId, uint256 genes, uint256 generation, uint256 zodiacType);\n\n\t/// @dev Transfer event as defined in current draft of ERC721. Emitted every time a Zodiac\n\t///  ownership is assigned, including births.\n\tevent Transfer(address from, address to, uint256 tokenId);\n\n\t/*** DATA TYPES ***/\n\n\t/// @dev The main Zodiac struct. Every zodiac in CryptoZodiac is represented by a copy\n\t///  of this structure, so great care was taken to ensure that it fits neatly into\n\t///  exactly two 256-bit words. Note that the order of the members in this structure\n\t///  is important because of the byte-packing rules used by Ethereum.\n\t///  Ref: http://solidity.readthedocs.io/en/develop/miscellaneous.html\n\tstruct Zodiac {\n\t\t// The Zodiac's genetic code is packed into these 256-bits, the format is\n\t\t// sooper-sekret! A zodiac's genes never change.\n\t\tuint256 genes;\n\n\t\t// The timestamp from the block when this zodiac came into existence.\n\t\tuint64 birthTime;\n\n\t\t// The minimum timestamp after which this zodiac can engage in breeding\n\t\t// activities again. This same timestamp is used for the pregnancy\n\t\t// timer (for matrons) as well as the siring cooldown.\n\t\tuint64 cooldownEndBlock;\n\n\t\t// The ID of the parents of this Zodiac, set to 0 for gen0 zodiacs.\n\t\t// Note that using 32-bit unsigned integers limits us to a \"mere\"\n\t\t// 4 billion zodiacs. This number might seem small until you realize\n\t\t// that Ethereum currently has a limit of about 500 million\n\t\t// transactions per year! So, this definitely won't be a problem\n\t\t// for several years (even as Ethereum learns to scale).\n\t\tuint32 matronId;\n\t\tuint32 sireId;\n\n\t\t// Set to the ID of the sire zodiac for matrons that are pregnant,\n\t\t// zero otherwise. A non-zero value here is how we know a zodiac\n\t\t// is pregnant. Used to retrieve the genetic material for the new\n\t\t// Zodiac when the birth transpires.\n\t\tuint32 siringWithId;\n\n\t\t// Set to the index in the cooldown array (see below) that represents\n\t\t// the current cooldown duration for this Zodiac. This starts at zero\n\t\t// for gen0 zodiacs, and is initialized to floor(generation/2) for others.\n\t\t// Incremented by one for each successful breeding action, regardless\n\t\t// of whether this zodiac is acting as matron or sire.\n\t\tuint16 cooldownIndex;\n\n\t\t// The \"generation number\" of this zodiac. zodiacs minted by the CZ contract\n\t\t// for sale are called \"gen0\" and have a generation number of 0. The\n\t\t// generation number of all other zodiacs is the larger of the two generation\n\t\t// numbers of their parents, plus one.\n\t\t// (i.e. max(matron.generation, sire.generation) + 1)\n\t\tuint16 generation;\n\n\t\t// The type of this zodiac, including 12 types\n\t\tuint16 zodiacType;\n\n\t}\n\n\t/*** CONSTANTS ***/\n\n\t/// @dev A lookup table inzodiacing the cooldown duration after any successful\n\t///  breeding action, called \"pregnancy time\" for matrons and \"siring cooldown\"\n\t///  for sires. Designed such that the cooldown roughly doubles each time a zodiac\n\t///  is bred, encouraging owners not to just keep breeding the same zodiac over\n\t///  and over again. Caps out at one week (a zodiac can breed an unbounded number\n\t///  of times, and the maximum cooldown is always seven days).\n\tuint32[14] public cooldowns = [\n\t\tuint32(1 minutes),\n\t\tuint32(2 minutes),\n\t\tuint32(5 minutes),\n\t\tuint32(10 minutes),\n\t\tuint32(30 minutes),\n\t\tuint32(1 hours),\n\t\tuint32(2 hours),\n\t\tuint32(4 hours),\n\t\tuint32(8 hours),\n\t\tuint32(16 hours),\n\t\tuint32(1 days),\n\t\tuint32(2 days),\n\t\tuint32(4 days),\n\t\tuint32(7 days)\n\t];\n\n\t// An approximation of currently how many seconds are in between blocks.\n\tuint256 public secondsPerBlock = 15;\n\n\t/*** STORAGE ***/\n\n//    // Limits the number of Zodiacs of different types the contract owner can ever create.\n//    uint32 public constant OWNER_CREATION_LIMIT = 1000000;\n\n\n\t/// @dev An array containing the Zodiac struct for all Zodiacs in existence. The ID\n\t///  of each zodiac is actually an index into this array. Note that ID 0 is a negazodiac,\n\t///  the unZodiac, the mythical beast that is the parent of all gen0 zodiacs. A bizarre\n\t///  creature that is both matron and sire... to itself! Has an invalid genetic code.\n\t///  In other words, zodiac ID 0 is invalid... ;-)\n\tZodiac[] zodiacs;\n\n\t/// @dev A mapping from zodiac IDs to the address that owns them. All zodiacs have\n\t///  some valid owner address, even gen0 zodiacs are created with a non-zero owner.\n\tmapping (uint256 => address) public ZodiacIndexToOwner;\n\n\t// @dev A mapping from owner address to count of tokens that address owns.\n\t//  Used internally inside balanceOf() to resolve ownership count.\n\tmapping (address => uint256) ownershipTokenCount;\n\n\t/// @dev A mapping from ZodiacIDs to an address that has been approved to call\n\t///  transferFrom(). Each Zodiac can only have one approved address for transfer\n\t///  at any time. A zero value means no approval is outstanding.\n\tmapping (uint256 => address) public ZodiacIndexToApproved;\n\n\t/// @dev A mapping from ZodiacIDs to an address that has been approved to use\n\t///  this Zodiac for siring via breedWith(). Each Zodiac can only have one approved\n\t///  address for siring at any time. A zero value means no approval is outstanding.\n\tmapping (uint256 => address) public sireAllowedToAddress;\n\n\t/// @dev The address of the ClockAuction contract that handles sales of Zodiacs. This\n\t///  same contract handles both peer-to-peer sales as well as the gen0 sales which are\n\t///  initiated every 15 minutes.\n\tSaleClockAuction public saleAuction;\n\n\t/// @dev The address of a custom ClockAuction subclassed contract that handles siring\n\t///  auctions. Needs to be separate from saleAuction because the actions taken on success\n\t///  after a sales and siring auction are quite different.\n\tSiringClockAuction public siringAuction;\n\n\t/// @dev Assigns ownership of a specific Zodiac to an address.\n\tfunction _transfer(address _from, address _to, uint256 _tokenId) internal {\n\t\t// Since the number of Zodiacs is capped to 2^32 we can't overflow this\n\t\townershipTokenCount[_to]++;\n\t\t// transfer ownership\n\t\tZodiacIndexToOwner[_tokenId] = _to;\n\t\t// When creating new Zodiacs _from is 0x0, but we can't account that address.\n\t\tif (_from != address(0)) {\n\t\t\townershipTokenCount[_from]--;\n\t\t\t// once the Zodiac is transferred also clear sire allowances\n\t\t\tdelete sireAllowedToAddress[_tokenId];\n\t\t\t// clear any previously approved ownership exchange\n\t\t\tdelete ZodiacIndexToApproved[_tokenId];\n\t\t}\n\t\t// Emit the transfer event.\n\t\tTransfer(_from, _to, _tokenId);\n\t}\n\n\t/// @dev An internal method that creates a new Zodiac and stores it. This\n\t///  method doesn't do any checking and should only be called when the\n\t///  input data is known to be valid. Will generate both a Birth event\n\t///  and a Transfer event.\n\t/// @param _matronId The Zodiac ID of the matron of this zodiac (zero for gen0)\n\t/// @param _sireId The Zodiac ID of the sire of this zodiac (zero for gen0)\n\t/// @param _generation The generation number of this zodiac, must be computed by caller.\n\t/// @param _genes The Zodiac's genetic code.\n\t/// @param _owner The inital owner of this zodiac, must be non-zero (except for the unZodiac, ID 0)\n\t/// @param _zodiacType The type of this zodiac\n\tfunction _createZodiac(\n\t\tuint256 _matronId,\n\t\tuint256 _sireId,\n\t\tuint256 _generation,\n\t\tuint256 _genes,\n\t\taddress _owner,\n\t\tuint256 _zodiacType\n\t)\n\t\tinternal\n\t\treturns (uint)\n\t{\n\t\t// These requires are not strictly necessary, our calling code should make\n\t\t// sure that these conditions are never broken. However! _createZodiac() is already\n\t\t// an expensive call (for storage), and it doesn't hurt to be especially careful\n\t\t// to ensure our data structures are always valid.\n\t\trequire(_matronId == uint256(uint32(_matronId)));\n\t\trequire(_sireId == uint256(uint32(_sireId)));\n\t\trequire(_generation == uint256(uint16(_generation)));\n        require(_zodiacType == uint256(uint16(_zodiacType)));\n\n\t\t// New Zodiac starts with the same cooldown as parent gen/2\n\t\tuint16 cooldownIndex = uint16(_generation / 2);\n\t\tif (cooldownIndex > 13) {\n\t\t\tcooldownIndex = 13;\n\t\t}\n\n\t\tZodiac memory _Zodiac = Zodiac({\n\t\t\tgenes: _genes,\n\t\t\tbirthTime: uint64(now),\n\t\t\tcooldownEndBlock: 0,\n\t\t\tmatronId: uint32(_matronId),\n\t\t\tsireId: uint32(_sireId),\n\t\t\tsiringWithId: 0,\n\t\t\tcooldownIndex: cooldownIndex,\n\t\t\tgeneration: uint16(_generation),\n\t\t\tzodiacType: uint16(_zodiacType)\n\t\t});\n\t\tuint256 newZodiacId = zodiacs.push(_Zodiac) - 1;\n\n\t\t// It's probably never going to happen, 4 billion zodiacs is A LOT, but\n\t\t// let's just be 100% sure we never let this happen.\n\t\trequire(newZodiacId == uint256(uint32(newZodiacId)));\n\n\t\t// emit the birth event\n\t\tBirth(\n\t\t\t_owner,\n\t\t\tnewZodiacId,\n\t\t\tuint256(_Zodiac.matronId),\n\t\t\tuint256(_Zodiac.sireId),\n\t\t\t_Zodiac.genes,\n\t\t\tuint256(_Zodiac.generation),\n\t\t\tuint256(_Zodiac.zodiacType)\n\t\t);\n\n\t\t// This will assign ownership, and also emit the Transfer event as\n\t\t// per ERC721 draft\n\t\t_transfer(0, _owner, newZodiacId);\n\n\t\treturn newZodiacId;\n\t}\n\n\t/// @dev An internal method that creates a new Zodiac and stores it. This\n\t///  method doesn't do any checking and should only be called when the\n\t///  input data is known to be valid. Will generate both a Birth event\n\t///  and a Transfer event.\n\t/// @param _matronId The Zodiac ID of the matron of this zodiac (zero for gen0)\n\t/// @param _sireId The Zodiac ID of the sire of this zodiac (zero for gen0)\n\t/// @param _generation The generation number of this zodiac, must be computed by caller.\n\t/// @param _genes The Zodiac's genetic code.\n\t/// @param _owner The inital owner of this zodiac, must be non-zero (except for the unZodiac, ID 0)\n\t/// @param _time The birth time of zodiac\n\t/// @param _cooldownIndex The cooldownIndex of zodiac\n\t/// @param _zodiacType The type of this zodiac\n\tfunction _createZodiacWithTime(\n\t\tuint256 _matronId,\n\t\tuint256 _sireId,\n\t\tuint256 _generation,\n\t\tuint256 _genes,\n\t\taddress _owner,\n\t\tuint256 _time,\n\t\tuint256 _cooldownIndex,\n\t\tuint256 _zodiacType\n\t)\n\tinternal\n\treturns (uint)\n\t{\n\t\t// These requires are not strictly necessary, our calling code should make\n\t\t// sure that these conditions are never broken. However! _createZodiac() is already\n\t\t// an expensive call (for storage), and it doesn't hurt to be especially careful\n\t\t// to ensure our data structures are always valid.\n\t\trequire(_matronId == uint256(uint32(_matronId)));\n\t\trequire(_sireId == uint256(uint32(_sireId)));\n\t\trequire(_generation == uint256(uint16(_generation)));\n\t\trequire(_zodiacType == uint256(uint16(_zodiacType)));\n        require(_time == uint256(uint64(_time)));\n        require(_cooldownIndex == uint256(uint16(_cooldownIndex)));\n\n\t\t// Copy down Zodiac cooldownIndex\n\t\tuint16 cooldownIndex = uint16(_cooldownIndex);\n\t\tif (cooldownIndex > 13) {\n\t\t\tcooldownIndex = 13;\n\t\t}\n\n\t\tZodiac memory _Zodiac = Zodiac({\n\t\t\tgenes: _genes,\n\t\t\tbirthTime: uint64(_time),\n\t\t\tcooldownEndBlock: 0,\n\t\t\tmatronId: uint32(_matronId),\n\t\t\tsireId: uint32(_sireId),\n\t\t\tsiringWithId: 0,\n\t\t\tcooldownIndex: cooldownIndex,\n\t\t\tgeneration: uint16(_generation),\n\t\t\tzodiacType: uint16(_zodiacType)\n\t\t\t});\n\t\tuint256 newZodiacId = zodiacs.push(_Zodiac) - 1;\n\n\t\t// It's probably never going to happen, 4 billion zodiacs is A LOT, but\n\t\t// let's just be 100% sure we never let this happen.\n\t\trequire(newZodiacId == uint256(uint32(newZodiacId)));\n\n\t\t// emit the birth event\n\t\tBirth(\n\t\t\t_owner,\n\t\t\tnewZodiacId,\n\t\t\tuint256(_Zodiac.matronId),\n\t\t\tuint256(_Zodiac.sireId),\n\t\t\t_Zodiac.genes,\n\t\t\tuint256(_Zodiac.generation),\n\t\t\tuint256(_Zodiac.zodiacType)\n\t\t);\n\n\t\t// This will assign ownership, and also emit the Transfer event as\n\t\t// per ERC721 draft\n\t\t_transfer(0, _owner, newZodiacId);\n\n\t\treturn newZodiacId;\n\t}\n\n\t// Any C-level can fix how many seconds per blocks are currently observed.\n\tfunction setSecondsPerBlock(uint256 secs) external onlyCLevel {\n\t\trequire(secs < cooldowns[0]);\n\t\tsecondsPerBlock = secs;\n\t}\n}\n\n\n/// @title The external contract that is responsible for generating metadata for the zodiacs,\n///  it has one function that will return the data as bytes.\ncontract ERC721Metadata {\n    /// @dev Given a token Id, returns a byte array that is supposed to be converted into string.\n    function getMetadata(uint256 _tokenId, string) public pure returns (bytes32[4] buffer, uint256 count) {\n        if (_tokenId == 1) {\n            buffer[0] = \"Hello World! :D\";\n            count = 15;\n        } else if (_tokenId == 2) {\n            buffer[0] = \"I would definitely choose a medi\";\n            buffer[1] = \"um length string.\";\n            count = 49;\n        } else if (_tokenId == 3) {\n            buffer[0] = \"Lorem ipsum dolor sit amet, mi e\";\n            buffer[1] = \"st accumsan dapibus augue lorem,\";\n            buffer[2] = \" tristique vestibulum id, libero\";\n            buffer[3] = \" suscipit varius sapien aliquam.\";\n            count = 128;\n        }\n    }\n}\n\n\n/// @title The facet of the CryptoZodiacs core contract that manages ownership, ERC-721 (draft) compliant.\n/// @dev Ref: https://github.com/ethereum/EIPs/issues/721\n///  See the ZodiacCore contract documentation to understand how the various contract facets are arranged.\ncontract ZodiacOwnership is ZodiacBase, ERC721 {\n\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n    string public constant name = \"CryptoZodiacs\";\n    string public constant symbol = \"CZ\";\n\n    // The contract that will return Zodiac metadata\n    ERC721Metadata public erc721Metadata;\n\n    bytes4 constant InterfaceSignature_ERC165 =\n        bytes4(keccak256('supportsInterface(bytes4)'));\n\n    bytes4 constant InterfaceSignature_ERC721 =\n        bytes4(keccak256('name()')) ^\n        bytes4(keccak256('symbol()')) ^\n        bytes4(keccak256('totalSupply()')) ^\n        bytes4(keccak256('balanceOf(address)')) ^\n        bytes4(keccak256('ownerOf(uint256)')) ^\n        bytes4(keccak256('approve(address,uint256)')) ^\n        bytes4(keccak256('transfer(address,uint256)')) ^\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n        bytes4(keccak256('tokensOfOwner(address)')) ^\n        bytes4(keccak256('tokenMetadata(uint256,string)'));\n\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n    ///  Returns true for any standardized interfaces implemented by this contract. We implement\n    ///  ERC-165 (obviously!) and ERC-721.\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\n    {\n        // DEBUG ONLY\n        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\n\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n    }\n\n    /// @dev Set the address of the sibling contract that tracks metadata.\n    ///  CEO only.\n    function setMetadataAddress(address _contractAddress) public onlyCEO {\n        erc721Metadata = ERC721Metadata(_contractAddress);\n    }\n\n    // Internal utility functions: These functions all assume that their input arguments\n    // are valid. We leave it to public methods to sanitize their inputs and follow\n    // the required logic.\n\n    /// @dev Checks if a given address is the current owner of a particular Zodiac.\n    /// @param _claimant the address we are validating against.\n    /// @param _tokenId zodiac id, only valid when > 0\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return ZodiacIndexToOwner[_tokenId] == _claimant;\n    }\n\n    /// @dev Checks if a given address currently has transferApproval for a particular Zodiac.\n    /// @param _claimant the address we are confirming zodiac is approved for.\n    /// @param _tokenId zodiac id, only valid when > 0\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return ZodiacIndexToApproved[_tokenId] == _claimant;\n    }\n\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\n    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\n    ///  _approve() and transferFrom() are used together for putting Zodiacs on auction, and\n    ///  there is no value in spamming the log with Approval events in that case.\n    function _approve(uint256 _tokenId, address _approved) internal {\n        ZodiacIndexToApproved[_tokenId] = _approved;\n    }\n\n    /// @notice Returns the number of Zodiacs owned by a specific address.\n    /// @param _owner The owner address to check.\n    /// @dev Required for ERC-721 compliance\n    function balanceOf(address _owner) public view returns (uint256 count) {\n        return ownershipTokenCount[_owner];\n    }\n\n    /// @notice Transfers a Zodiac to another address. If transferring to a smart\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\n    ///  CryptoZodiacs specifically) or your Zodiac may be lost forever. Seriously.\n    /// @param _to The address of the recipient, can be a user or contract.\n    /// @param _tokenId The ID of the Zodiac to transfer.\n    /// @dev Required for ERC-721 compliance.\n    function transfer(\n        address _to,\n        uint256 _tokenId\n    )\n        external\n        whenNotPaused\n    {\n        // Safety check to prevent against an unexpected 0x0 default.\n        require(_to != address(0));\n        // Disallow transfers to this contract to prevent accidental misuse.\n        // The contract should never own any Zodiacs (except very briefly\n        // after a gen0 Zodiac is created and before it goes on auction).\n        require(_to != address(this));\n        // Disallow transfers to the auction contracts to prevent accidental\n        // misuse. Auction contracts should only take ownership of Zodiacs\n        // through the allow + transferFrom flow.\n        require(_to != address(saleAuction));\n        require(_to != address(siringAuction));\n\n        // You can only send your own Zodiac.\n        require(_owns(msg.sender, _tokenId));\n\n        // Reassign ownership, clear pending approvals, emit Transfer event.\n        _transfer(msg.sender, _to, _tokenId);\n    }\n\n    /// @notice Grant another address the right to transfer a specific Zodiac via\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\n    ///  clear all approvals.\n    /// @param _tokenId The ID of the Zodiac that can be transferred if this call succeeds.\n    /// @dev Required for ERC-721 compliance.\n    function approve(\n        address _to,\n        uint256 _tokenId\n    )\n        external\n        whenNotPaused\n    {\n        // Only an owner can grant transfer approval.\n        require(_owns(msg.sender, _tokenId));\n\n        // Register the approval (replacing any previous approval).\n        _approve(_tokenId, _to);\n\n        // Emit approval event.\n        Approval(msg.sender, _to, _tokenId);\n    }\n\n    /// @notice Transfer a Zodiac owned by another address, for which the calling address\n    ///  has previously been granted transfer approval by the owner.\n    /// @param _from The address that owns the Zodiac to be transfered.\n    /// @param _to The address that should take ownership of the Zodiac. Can be any address,\n    ///  including the caller.\n    /// @param _tokenId The ID of the Zodiac to be transferred.\n    /// @dev Required for ERC-721 compliance.\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    )\n        external\n        whenNotPaused\n    {\n        // Safety check to prevent against an unexpected 0x0 default.\n        require(_to != address(0));\n        // Disallow transfers to this contract to prevent accidental misuse.\n        // The contract should never own any Zodiacs (except very briefly\n        // after a gen0 Zodiac is created and before it goes on auction).\n        require(_to != address(this));\n        // Check for approval and valid ownership\n        require(_approvedFor(msg.sender, _tokenId));\n        require(_owns(_from, _tokenId));\n\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\n        _transfer(_from, _to, _tokenId);\n    }\n\n    /// @notice Returns the total number of Zodiacs currently in existence.\n    /// @dev Required for ERC-721 compliance.\n    function totalSupply() public view returns (uint) {\n        return zodiacs.length - 1;\n    }\n\n    /// @notice Returns the address currently assigned ownership of a given Zodiac.\n    /// @dev Required for ERC-721 compliance.\n    function ownerOf(uint256 _tokenId)\n        external\n        view\n        returns (address owner)\n    {\n        owner = ZodiacIndexToOwner[_tokenId];\n\n        require(owner != address(0));\n    }\n\n    /// @notice Returns a list of all Zodiac IDs assigned to an address.\n    /// @param _owner The owner whose Zodiacs we are interested in.\n    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\n    ///  expensive (it walks the entire Zodiac array looking for Zodiacs belonging to owner),\n    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n    ///  not contract-to-contract calls.\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n        uint256 tokenCount = balanceOf(_owner);\n\n        if (tokenCount == 0) {\n            // Return an empty array\n            return new uint256[](0);\n        } else {\n            uint256[] memory result = new uint256[](tokenCount);\n            uint256 totalZods = totalSupply();\n            uint256 resultIndex = 0;\n\n            // We count on the fact that all Zodiacs have IDs starting at 1 and increasing\n            // sequentially up to the totalZods count.\n            uint256 zodId;\n\n            for (zodId = 1; zodId <= totalZods; zodId++) {\n                if (ZodiacIndexToOwner[zodId] == _owner) {\n                    result[resultIndex] = zodId;\n                    resultIndex++;\n                }\n            }\n\n            return result;\n        }\n    }\n\n    /// @dev Adapted from memcpy() by @arachnid (Nick Johnson <[emailÂ protected]>)\n    ///  This method is licenced under the Apache License.\n    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\n    function _memcpy(uint _dest, uint _src, uint _len) private view {\n        // Copy word-length chunks while possible\n        for(; _len >= 32; _len -= 32) {\n            assembly {\n                mstore(_dest, mload(_src))\n            }\n            _dest += 32;\n            _src += 32;\n        }\n\n        // Copy remaining bytes\n        uint256 mask = 256 ** (32 - _len) - 1;\n        assembly {\n            let srcpart := and(mload(_src), not(mask))\n            let destpart := and(mload(_dest), mask)\n            mstore(_dest, or(destpart, srcpart))\n        }\n    }\n\n    /// @dev Adapted from toString(slice) by @arachnid (Nick Johnson <[emailÂ protected]>)\n    ///  This method is licenced under the Apache License.\n    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\n    function _toString(bytes32[4] _rawBytes, uint256 _stringLength) private view returns (string) {\n        var outputString = new string(_stringLength);\n        uint256 outputPtr;\n        uint256 bytesPtr;\n\n        assembly {\n            outputPtr := add(outputString, 32)\n            bytesPtr := _rawBytes\n        }\n\n        _memcpy(outputPtr, bytesPtr, _stringLength);\n\n        return outputString;\n    }\n\n    /// @notice Returns a URI pointing to a metadata package for this token conforming to\n    ///  ERC-721 (https://github.com/ethereum/EIPs/issues/721)\n    /// @param _tokenId The ID number of the Zodiac whose metadata should be returned.\n    function tokenMetadata(uint256 _tokenId, string _preferredTransport) external view returns (string infoUrl) {\n        require(erc721Metadata != address(0));\n        bytes32[4] memory buffer;\n        uint256 count;\n        (buffer, count) = erc721Metadata.getMetadata(_tokenId, _preferredTransport);\n\n        return _toString(buffer, count);\n    }\n}\n\n\n/// @title A facet of ZodiacCore that manages Zodiac siring, gestation, and birth.\n/// @author Axiom Zen (https://www.axiomzen.co)\n/// @dev See the ZodiacCore contract documentation to understand how the various contract facets are arranged.\ncontract ZodiacBreeding is ZodiacOwnership {\n\n    /// @dev The Pregnant event is fired when two Zodiacs successfully breed and the pregnancy\n    ///  timer begins for the matron.\n    event Pregnant(address owner, uint256 matronId, uint256 sireId, uint256 matronCooldownEndBlock, uint256 sireCooldownEndBlock);\n\n    /// @notice The minimum payment required to use breedWithAuto(). This fee goes towards\n    ///  the gas cost paid by whatever calls giveBirth(), and can be dynamically updated by\n    ///  the COO role as the gas price changes.\n    uint256 public autoBirthFee = 2 finney;\n\n    // Keeps track of number of pregnant zodiacs.\n    uint256 public pregnantZodiacs;\n\n    /// @dev The address of the sibling contract that is used to implement the sooper-sekret\n    ///  genetic combination algorithm.\n    GeneScienceInterface public geneScience;\n\n    /// @dev Update the address of the genetic contract, can only be called by the CEO.\n    /// @param _address An address of a GeneScience contract instance to be used from this point forward.\n    function setGeneScienceAddress(address _address) external onlyCEO {\n        GeneScienceInterface candidateContract = GeneScienceInterface(_address);\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n        require(candidateContract.isGeneScience());\n\n        // Set the new contract address\n        geneScience = candidateContract;\n    }\n\n    /// @dev Checks that a given zodiac is able to breed. Requires that the\n    ///  current cooldown is finished (for sires) and also checks that there is\n    ///  no pending pregnancy.\n    function _isReadyToBreed(Zodiac _zod) internal view returns (bool) {\n        // In addition to checking the cooldownEndBlock, we also need to check to see if\n        // the Zodiac has a pending birth; there can be some period of time between the end\n        // of the pregnacy timer and the birth event.\n        return (_zod.siringWithId == 0) && (_zod.cooldownEndBlock <= uint64(block.number));\n    }\n\n    /// @dev Check if a sire has authorized breeding with this matron. True if both sire\n    ///  and matron have the same owner, or if the sire has given siring permission to\n    ///  the matron's owner (via approveSiring()).\n    function _isSiringPermitted(uint256 _sireId, uint256 _matronId) internal view returns (bool) {\n        address matronOwner = ZodiacIndexToOwner[_matronId];\n        address sireOwner = ZodiacIndexToOwner[_sireId];\n\n        // Siring is okay if they have same owner, or if the matron's owner was given\n        // permission to breed with this sire.\n        return (matronOwner == sireOwner || sireAllowedToAddress[_sireId] == matronOwner);\n    }\n\n    /// @dev Set the cooldownEndTime for the given Zodiac, based on its current cooldownIndex.\n    ///  Also increments the cooldownIndex (unless it has hit the cap).\n    /// @param _zod A reference to the Zodiac in storage which needs its timer started.\n    function _triggerCooldown(Zodiac storage _zod) internal {\n        // Compute an estimation of the cooldown time in blocks (based on current cooldownIndex).\n        _zod.cooldownEndBlock = uint64((cooldowns[_zod.cooldownIndex]/secondsPerBlock) + block.number);\n\n        // Increment the breeding count, clamping it at 13, which is the length of the\n        // cooldowns array. We could check the array size dynamically, but hard-coding\n        // this as a constant saves gas. Yay, Solidity!\n        if (_zod.cooldownIndex < 13) {\n            _zod.cooldownIndex += 1;\n        }\n    }\n\n    /// @notice Grants approval to another user to sire with one of your zodiacs.\n    /// @param _addr The address that will be able to sire with your Zodiac. Set to\n    ///  address(0) to clear all siring approvals for this Zodiac.\n    /// @param _sireId A Zodiac that you own that _addr will now be able to sire with.\n    function approveSiring(address _addr, uint256 _sireId)\n        external\n        whenNotPaused\n    {\n        require(_owns(msg.sender, _sireId));\n        sireAllowedToAddress[_sireId] = _addr;\n    }\n\n    /// @dev Updates the minimum payment required for calling giveBirthAuto(). Can only\n    ///  be called by the COO address. (This fee is used to offset the gas cost incurred\n    ///  by the autobirth daemon).\n    function setAutoBirthFee(uint256 val) external onlyCOO {\n        autoBirthFee = val;\n    }\n\n    /// @dev Checks to see if a given Zodiac is pregnant and (if so) if the gestation\n    ///  period has passed.\n    function _isReadyToGiveBirth(Zodiac _matron) private view returns (bool) {\n        return (_matron.siringWithId != 0) && (_matron.cooldownEndBlock <= uint64(block.number));\n    }\n\n    /// @notice Checks that a given zodiac is able to breed (i.e. it is not pregnant or\n    ///  in the middle of a siring cooldown).\n    /// @param _ZodiacId reference the id of the zodiac, any user can inquire about it\n    function isReadyToBreed(uint256 _ZodiacId)\n        public\n        view\n        returns (bool)\n    {\n        require(_ZodiacId > 0);\n        Zodiac storage zod = zodiacs[_ZodiacId];\n        return _isReadyToBreed(zod);\n    }\n\n    /// @dev Checks whether a Zodiac is currently pregnant.\n    /// @param _ZodiacId reference the id of the zodiac, any user can inquire about it\n    function isPregnant(uint256 _ZodiacId)\n        public\n        view\n        returns (bool)\n    {\n        require(_ZodiacId > 0);\n        // A Zodiac is pregnant if and only if this field is set\n        return zodiacs[_ZodiacId].siringWithId != 0;\n    }\n\n    /// @dev Internal check to see if a given sire and matron are a valid mating pair. DOES NOT\n    ///  check ownership permissions (that is up to the caller).\n    /// @param _matron A reference to the Zodiac struct of the potential matron.\n    /// @param _matronId The matron's ID.\n    /// @param _sire A reference to the Zodiac struct of the potential sire.\n    /// @param _sireId The sire's ID\n    function _isValidMatingPair(\n        Zodiac storage _matron,\n        uint256 _matronId,\n        Zodiac storage _sire,\n        uint256 _sireId\n    )\n        private\n        view\n        returns(bool)\n    {\n        // Must be same Zodiac type\n        if (_matron.zodiacType != _sire.zodiacType) {\n            return false;\n        }\n\n        // A Zodiac can't breed with itself!\n        if (_matronId == _sireId) {\n            return false;\n        }\n\n        // zodiacs can't breed with their parents.\n        if (_matron.matronId == _sireId || _matron.sireId == _sireId) {\n            return false;\n        }\n        if (_sire.matronId == _matronId || _sire.sireId == _matronId) {\n            return false;\n        }\n\n        // We can short circuit the sibling check (below) if either Zodiac is\n        // gen zero (has a matron ID of zero).\n        if (_sire.matronId == 0 || _matron.matronId == 0) {\n            return true;\n        }\n\n        // zodiacs can't breed with full or half siblings.\n        if (_sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId) {\n            return false;\n        }\n        if (_sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId) {\n            return false;\n        }\n\n        // Everything seems cool! Let's get DTF.\n        return true;\n    }\n\n    /// @dev Internal check to see if a given sire and matron are a valid mating pair for\n    ///  breeding via auction (i.e. skips ownership and siring approval checks).\n    function _canBreedWithViaAuction(uint256 _matronId, uint256 _sireId)\n        internal\n        view\n        returns (bool)\n    {\n        Zodiac storage matron = zodiacs[_matronId];\n        Zodiac storage sire = zodiacs[_sireId];\n        return _isValidMatingPair(matron, _matronId, sire, _sireId);\n    }\n\n    /// @notice Checks to see if two Zodiacs can breed together, including checks for\n    ///  ownership and siring approvals. Does NOT check that both Zodiacs are ready for\n    ///  breeding (i.e. breedWith could still fail until the cooldowns are finished).\n    ///  TODO: Shouldn't this check pregnancy and cooldowns?!?\n    /// @param _matronId The ID of the proposed matron.\n    /// @param _sireId The ID of the proposed sire.\n    function canBreedWith(uint256 _matronId, uint256 _sireId)\n        external\n        view\n        returns(bool)\n    {\n        require(_matronId > 0);\n        require(_sireId > 0);\n        Zodiac storage matron = zodiacs[_matronId];\n        Zodiac storage sire = zodiacs[_sireId];\n        return _isValidMatingPair(matron, _matronId, sire, _sireId) &&\n            _isSiringPermitted(_sireId, _matronId);\n    }\n\n    /// @dev Internal utility function to initiate breeding, assumes that all breeding\n    ///  requirements have been checked.\n    function _breedWith(uint256 _matronId, uint256 _sireId) internal {\n        // Grab a reference to the zodiacs from storage.\n        Zodiac storage sire = zodiacs[_sireId];\n        Zodiac storage matron = zodiacs[_matronId];\n\n        // Mark the matron as pregnant, keeping track of who the sire is.\n        matron.siringWithId = uint32(_sireId);\n\n        // Trigger the cooldown for both parents.\n        _triggerCooldown(sire);\n        _triggerCooldown(matron);\n\n        // Clear siring permission for both parents. This may not be strictly necessary\n        // but it's likely to avoid confusion!\n        delete sireAllowedToAddress[_matronId];\n        delete sireAllowedToAddress[_sireId];\n\n        // Every time a Zodiac gets pregnant, counter is incremented.\n        pregnantZodiacs++;\n\n        // Emit the pregnancy event.\n        Pregnant(ZodiacIndexToOwner[_matronId], _matronId, _sireId, matron.cooldownEndBlock, sire.cooldownEndBlock);\n    }\n\n    /// @notice Breed a Zodiac you own (as matron) with a sire that you own, or for which you\n    ///  have previously been given Siring approval. Will either make your Zodiac pregnant, or will\n    ///  fail entirely. Requires a pre-payment of the fee given out to the first caller of giveBirth()\n    /// @param _matronId The ID of the Zodiac acting as matron (will end up pregnant if successful)\n    /// @param _sireId The ID of the Zodiac acting as sire (will begin its siring cooldown if successful)\n    function breedWithAuto(uint256 _matronId, uint256 _sireId)\n        external\n        payable\n        whenNotPaused\n    {\n        // Checks for payment.\n        require(msg.value >= autoBirthFee);\n\n        // Caller must own the matron.\n        require(_owns(msg.sender, _matronId));\n\n        // Neither sire nor matron are allowed to be on auction during a normal\n        // breeding operation, but we don't need to check that explicitly.\n        // For matron: The caller of this function can't be the owner of the matron\n        //   because the owner of a Zodiac on auction is the auction house, and the\n        //   auction house will never call breedWith().\n        // For sire: Similarly, a sire on auction will be owned by the auction house\n        //   and the act of transferring ownership will have cleared any oustanding\n        //   siring approval.\n        // Thus we don't need to spend gas explicitly checking to see if either Zodiac\n        // is on auction.\n\n        // Check that matron and sire are both owned by caller, or that the sire\n        // has given siring permission to caller (i.e. matron's owner).\n        // Will fail for _sireId = 0\n        require(_isSiringPermitted(_sireId, _matronId));\n\n        // Grab a reference to the potential matron\n        Zodiac storage matron = zodiacs[_matronId];\n\n        // Make sure matron isn't pregnant, or in the middle of a siring cooldown\n        require(_isReadyToBreed(matron));\n\n        // Grab a reference to the potential sire\n        Zodiac storage sire = zodiacs[_sireId];\n\n        // Make sure sire isn't pregnant, or in the middle of a siring cooldown\n        require(_isReadyToBreed(sire));\n\n        // Test that these Zodiacs are a valid mating pair.\n        require(_isValidMatingPair(\n            matron,\n            _matronId,\n            sire,\n            _sireId\n        ));\n\n        // All checks passed, Zodiac gets pregnant!\n        _breedWith(_matronId, _sireId);\n    }\n\n    /// @notice Have a pregnant Zodiac give birth!\n    /// @param _matronId A Zodiac ready to give birth.\n    /// @return The Zodiac ID of the new zodiac.\n    /// @dev Looks at a given Zodiac and, if pregnant and if the gestation period has passed,\n    ///  combines the genes of the two parents to create a new zodiac. The new Zodiac is assigned\n    ///  to the current owner of the matron. Upon successful completion, both the matron and the\n    ///  new zodiac will be ready to breed again. Note that anyone can call this function (if they\n    ///  are willing to pay the gas!), but the new zodiac always goes to the mother's owner.\n    function giveBirth(uint256 _matronId)\n        external\n        whenNotPaused\n        returns(uint256)\n    {\n        // Grab a reference to the matron in storage.\n        Zodiac storage matron = zodiacs[_matronId];\n\n        // Check that the matron is a valid Zodiac.\n        require(matron.birthTime != 0);\n\n        // Check that the matron is pregnant, and that its time has come!\n        require(_isReadyToGiveBirth(matron));\n\n        // Grab a reference to the sire in storage.\n        uint256 sireId = matron.siringWithId;\n        Zodiac storage sire = zodiacs[sireId];\n\n        // Determine the higher generation number of the two parents\n        uint16 parentGen = matron.generation;\n        if (sire.generation > matron.generation) {\n            parentGen = sire.generation;\n        }\n\n        // Call the sooper-sekret gene mixing operation.\n        uint256 childGenes = geneScience.mixGenes(matron.genes, sire.genes, matron.cooldownEndBlock - 1);\n\n        // Make the new zodiac!\n        address owner = ZodiacIndexToOwner[_matronId];\n        uint256 zodiacId = _createZodiac(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner, matron.zodiacType);\n\n        // Clear the reference to sire from the matron (REQUIRED! Having siringWithId\n        // set is what marks a matron as being pregnant.)\n        delete matron.siringWithId;\n\n        // Every time a Zodiac gives birth counter is decremented.\n        pregnantZodiacs--;\n\n        // Send the balance fee to the person who made birth happen.\n        msg.sender.transfer(autoBirthFee);\n\n        // return the new zodiac's ID\n        return zodiacId;\n    }\n}\n\n\n/// @title Auction Core\n/// @dev Contains models, variables, and internal methods for the auction.\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\ncontract ClockAuctionBase {\n\n    // Represents an auction on an NFT\n    struct Auction {\n        // Current owner of NFT\n        address seller;\n        // Price (in wei) at beginning of auction\n        uint128 startingPrice;\n        // Price (in wei) at end of auction\n        uint128 endingPrice;\n        // Duration (in seconds) of auction\n        uint64 duration;\n        // Time when auction started\n        // NOTE: 0 if this auction has been concluded\n        uint64 startedAt;\n    }\n\n    // Reference to contract tracking NFT ownership\n    ERC721 public nonFungibleContract;\n\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\n    // Values 0-10,000 map to 0%-100%\n    uint256 public ownerCut;\n\n    // Map from token ID to their corresponding auction.\n    mapping (uint256 => Auction) tokenIdToAuction;\n\n    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\n    event AuctionCancelled(uint256 tokenId);\n\n    /// @dev Returns true if the claimant owns the token.\n    /// @param _claimant - Address claiming to own the token.\n    /// @param _tokenId - ID of token whose ownership to verify.\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\n    }\n\n    /// @dev Escrows the NFT, assigning ownership to this contract.\n    /// Throws if the escrow fails.\n    /// @param _owner - Current owner address of token to escrow.\n    /// @param _tokenId - ID of token whose approval to verify.\n    function _escrow(address _owner, uint256 _tokenId) internal {\n        // it will throw if transfer fails\n        nonFungibleContract.transferFrom(_owner, this, _tokenId);\n    }\n\n    /// @dev Transfers an NFT owned by this contract to another address.\n    /// Returns true if the transfer succeeds.\n    /// @param _receiver - Address to transfer NFT to.\n    /// @param _tokenId - ID of token to transfer.\n    function _transfer(address _receiver, uint256 _tokenId) internal {\n        // it will throw if transfer fails\n        nonFungibleContract.transfer(_receiver, _tokenId);\n    }\n\n    /// @dev Adds an auction to the list of open auctions. Also fires the\n    ///  AuctionCreated event.\n    /// @param _tokenId The ID of the token to be put on auction.\n    /// @param _auction Auction to add.\n    function _addAuction(uint256 _tokenId, Auction _auction) internal {\n        // Require that all auctions have a duration of\n        // at least one minute. (Keeps our math from getting hairy!)\n        require(_auction.duration >= 1 minutes);\n\n        tokenIdToAuction[_tokenId] = _auction;\n\n        AuctionCreated(\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.duration)\n        );\n    }\n\n    /// @dev Cancels an auction unconditionally.\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\n        _removeAuction(_tokenId);\n        _transfer(_seller, _tokenId);\n        AuctionCancelled(_tokenId);\n    }\n\n    /// @dev Computes the price and transfers winnings.\n    /// Does NOT transfer ownership of token.\n    function _bid(uint256 _tokenId, uint256 _bidAmount)\n        internal\n        returns (uint256)\n    {\n        // Get a reference to the auction struct\n        Auction storage auction = tokenIdToAuction[_tokenId];\n\n        // Explicitly check that this auction is currently live.\n        // (Because of how Ethereum mappings work, we can't just count\n        // on the lookup above failing. An invalid _tokenId will just\n        // return an auction object that is all zeros.)\n        require(_isOnAuction(auction));\n\n        // Check that the bid is greater than or equal to the current price\n        uint256 price = _currentPrice(auction);\n        require(_bidAmount >= price);\n\n        // Grab a reference to the seller before the auction struct\n        // gets deleted.\n        address seller = auction.seller;\n\n        // The bid is good! Remove the auction before sending the fees\n        // to the sender so we can't have a reentrancy attack.\n        _removeAuction(_tokenId);\n\n        // Transfer proceeds to seller (if there are any!)\n        if (price > 0) {\n            // Calculate the auctioneer's cut.\n            // (NOTE: _computeCut() is guaranteed to return a\n            // value <= price, so this subtraction can't go negative.)\n            uint256 auctioneerCut = _computeCut(price);\n            uint256 sellerProceeds = price - auctioneerCut;\n\n            // NOTE: Doing a transfer() in the middle of a complex\n            // method like this is generally discouraged because of\n            // reentrancy attacks and DoS attacks if the seller is\n            // a contract with an invalid fallback function. We explicitly\n            // guard against reentrancy attacks by removing the auction\n            // before calling transfer(), and the only thing the seller\n            // can DoS is the sale of their own asset! (And if it's an\n            // accident, they can call cancelAuction(). )\n            seller.transfer(sellerProceeds);\n        }\n\n        // Calculate any excess funds included with the bid. If the excess\n        // is anything worth worrying about, transfer it back to bidder.\n        // NOTE: We checked above that the bid amount is greater than or\n        // equal to the price so this cannot underflow.\n        uint256 bidExcess = _bidAmount - price;\n\n        // Return the funds. Similar to the previous transfer, this is\n        // not susceptible to a re-entry attack because the auction is\n        // removed before any transfers occur.\n        msg.sender.transfer(bidExcess);\n\n        // Tell the world!\n        AuctionSuccessful(_tokenId, price, msg.sender);\n\n        return price;\n    }\n\n    /// @dev Removes an auction from the list of open auctions.\n    /// @param _tokenId - ID of NFT on auction.\n    function _removeAuction(uint256 _tokenId) internal {\n        delete tokenIdToAuction[_tokenId];\n    }\n\n    /// @dev Returns true if the NFT is on auction.\n    /// @param _auction - Auction to check.\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\n        return (_auction.startedAt > 0);\n    }\n\n    /// @dev Returns current price of an NFT on auction. Broken into two\n    ///  functions (this one, that computes the duration from the auction\n    ///  structure, and the other that does the price computation) so we\n    ///  can easily test that the price computation works correctly.\n    function _currentPrice(Auction storage _auction)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 secondsPassed = 0;\n\n        // A bit of insurance against negative values (or wraparound).\n        // Probably not necessary (since Ethereum guarnatees that the\n        // now variable doesn't ever go backwards).\n        if (now > _auction.startedAt) {\n            secondsPassed = now - _auction.startedAt;\n        }\n\n        return _computeCurrentPrice(\n            _auction.startingPrice,\n            _auction.endingPrice,\n            _auction.duration,\n            secondsPassed\n        );\n    }\n\n    /// @dev Computes the current price of an auction. Factored out\n    ///  from _currentPrice so we can run extensive unit tests.\n    ///  When testing, make this function public and turn on\n    ///  `Current price computation` test suite.\n    function _computeCurrentPrice(\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        uint256 _secondsPassed\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        // NOTE: We don't use SafeMath (or similar) in this function because\n        //  all of our public functions carefully cap the maximum values for\n        //  time (at 64-bits) and currency (at 128-bits). _duration is\n        //  also known to be non-zero (see the require() statement in\n        //  _addAuction())\n        if (_secondsPassed >= _duration) {\n            // We've reached the end of the dynamic pricing portion\n            // of the auction, just return the end price.\n            return _endingPrice;\n        } else {\n            // Starting price can be higher than ending price (and often is!), so\n            // this delta can be negative.\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\n\n            // This multiplication can't overflow, _secondsPassed will easily fit within\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\n            // will always fit within 256-bits.\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\n\n            // currentPriceChange can be negative, but if so, will have a magnitude\n            // less that _startingPrice. Thus, this result will always end up positive.\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\n\n            return uint256(currentPrice);\n        }\n    }\n\n    /// @dev Computes owner's cut of a sale.\n    /// @param _price - Sale price of NFT.\n    function _computeCut(uint256 _price) internal view returns (uint256) {\n        // NOTE: We don't use SafeMath (or similar) in this function because\n        //  all of our entry functions carefully cap the maximum values for\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\n        //  statement in the ClockAuction constructor). The result of this\n        //  function is always guaranteed to be <= _price.\n        return _price * ownerCut / 10000;\n    }\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n\tevent Pause();\n\tevent Unpause();\n\n\tbool public paused = false;\n\n\n\t/**\n\t * @dev modifier to allow actions only when the contract IS paused\n\t */\n\tmodifier whenNotPaused() {\n\t\trequire(!paused);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev modifier to allow actions only when the contract IS NOT paused\n\t */\n\tmodifier whenPaused {\n\t\trequire(paused);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev called by the owner to pause, triggers stopped state\n\t */\n\tfunction pause() public onlyOwner whenNotPaused returns (bool) {\n\t\tpaused = true;\n\t\tPause();\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev called by the owner to unpause, returns to normal state\n\t */\n\tfunction unpause() public onlyOwner whenPaused returns (bool) {\n\t\tpaused = false;\n\t\tUnpause();\n\t\treturn true;\n\t}\n}\n\n\n/// @title Clock auction for non-fungible tokens.\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\ncontract ClockAuction is Pausable, ClockAuctionBase {\n\n    /// @dev The ERC-165 interface signature for ERC-721.\n    ///  Ref: https://github.com/ethereum/EIPs/issues/165\n    ///  Ref: https://github.com/ethereum/EIPs/issues/721\n    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);\n\n    /// @dev Constructor creates a reference to the NFT ownership contract\n    ///  and verifies the owner cut is in the valid range.\n    /// @param _nftAddress - address of a deployed contract implementing\n    ///  the Nonfungible Interface.\n    /// @param _cut - percent cut the owner takes on each auction, must be\n    ///  between 0-10,000.\n    function ClockAuction(address _nftAddress, uint256 _cut) public {\n        require(_cut <= 10000);\n        ownerCut = _cut;\n\n        ERC721 candidateContract = ERC721(_nftAddress);\n        require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\n        nonFungibleContract = candidateContract;\n    }\n\n    /// @dev Remove all Ether from the contract, which is the owner's cuts\n    ///  as well as any Ether sent directly to the contract address.\n    ///  Always transfers to the NFT contract, but can be called either by\n    ///  the owner or the NFT contract.\n    function withdrawBalance() external {\n        address nftAddress = address(nonFungibleContract);\n\n        require(\n            msg.sender == owner ||\n            msg.sender == nftAddress\n        );\n        // We are using this boolean method to make sure that even if one fails it will still work\n        nftAddress.transfer(this.balance);\n    }\n\n    /// @dev Creates and begins a new auction.\n    /// @param _tokenId - ID of token to auction, sender must be owner.\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\n    /// @param _duration - Length of time to move between starting\n    ///  price and ending price (in seconds).\n    /// @param _seller - Seller, if not the message sender\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n        whenNotPaused\n    {\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(_owns(msg.sender, _tokenId));\n        _escrow(msg.sender, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now)\n        );\n        _addAuction(_tokenId, auction);\n    }\n\n    /// @dev Bids on an open auction, completing the auction and transferring\n    ///  ownership of the NFT if enough Ether is supplied.\n    /// @param _tokenId - ID of token to bid on.\n    function bid(uint256 _tokenId)\n        external\n        payable\n        whenNotPaused\n    {\n        // _bid will throw if the bid or funds transfer fails\n        _bid(_tokenId, msg.value);\n        _transfer(msg.sender, _tokenId);\n    }\n\n    /// @dev Cancels an auction that hasn't been won yet.\n    ///  Returns the NFT to original owner.\n    /// @notice This is a state-modifying function that can\n    ///  be called while the contract is paused.\n    /// @param _tokenId - ID of token on auction\n    function cancelAuction(uint256 _tokenId)\n        external\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        address seller = auction.seller;\n        require(msg.sender == seller);\n        _cancelAuction(_tokenId, seller);\n    }\n\n    /// @dev Cancels an auction when the contract is paused.\n    ///  Only the owner may do this, and NFTs are returned to\n    ///  the seller. This should only be used in emergencies.\n    /// @param _tokenId - ID of the NFT on auction to cancel.\n    function cancelAuctionWhenPaused(uint256 _tokenId)\n        whenPaused\n        onlyOwner\n        external\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        _cancelAuction(_tokenId, auction.seller);\n    }\n\n    /// @dev Returns auction info for an NFT on auction.\n    /// @param _tokenId - ID of NFT on auction.\n    function getAuction(uint256 _tokenId)\n        external\n        view\n        returns\n    (\n        address seller,\n        uint256 startingPrice,\n        uint256 endingPrice,\n        uint256 duration,\n        uint256 startedAt\n    ) {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        return (\n            auction.seller,\n            auction.startingPrice,\n            auction.endingPrice,\n            auction.duration,\n            auction.startedAt\n        );\n    }\n\n    /// @dev Returns the current price of an auction.\n    /// @param _tokenId - ID of the token price we are checking.\n    function getCurrentPrice(uint256 _tokenId)\n        external\n        view\n        returns (uint256)\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        return _currentPrice(auction);\n    }\n\n}\n\n\n/// @title Reverse auction modified for siring\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\ncontract SiringClockAuction is ClockAuction {\n\n    // @dev Sanity check that allows us to ensure that we are pointing to the\n    //  right auction in our setSiringAuctionAddress() call.\n    bool public isSiringClockAuction = true;\n\n    // Delegate constructor\n    function SiringClockAuction(address _nftAddr, uint256 _cut) public\n        ClockAuction(_nftAddr, _cut) {}\n\n    /// @dev Creates and begins a new auction. Since this function is wrapped,\n    /// require sender to be ZodiacCore contract.\n    /// @param _tokenId - ID of token to auction, sender must be owner.\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\n    /// @param _duration - Length of auction (in seconds).\n    /// @param _seller - Seller, if not the message sender\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n    {\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now)\n        );\n        _addAuction(_tokenId, auction);\n    }\n\n    /// @dev Places a bid for siring. Requires the sender\n    /// is the ZodiacCore contract because all bid methods\n    /// should be wrapped. Also returns the Zodiac to the\n    /// seller rather than the winner.\n    function bid(uint256 _tokenId)\n        external\n        payable\n    {\n        require(msg.sender == address(nonFungibleContract));\n        address seller = tokenIdToAuction[_tokenId].seller;\n        // _bid checks that token ID is valid and will throw if bid fails\n        _bid(_tokenId, msg.value);\n        // We transfer the Zodiac back to the seller, the winner will get\n        // the offspring\n        _transfer(seller, _tokenId);\n    }\n\n}\n\n\n/// @title Clock auction modified for sale of Zodiacs\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\ncontract SaleClockAuction is ClockAuction {\n\n    // @dev Sanity check that allows us to ensure that we are pointing to the\n    //  right auction in our setSaleAuctionAddress() call.\n    bool public isSaleClockAuction = true;\n\n    // Tracks last 5 sale price of gen0 zodiac sales\n    uint256 public gen0SaleCount;\n    uint256[5] public lastGen0SalePrices;\n\n    // Delegate constructor\n    function SaleClockAuction(address _nftAddr, uint256 _cut) public\n        ClockAuction(_nftAddr, _cut) {}\n\n    /// @dev Creates and begins a new auction.\n    /// @param _tokenId - ID of token to auction, sender must be owner.\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\n    /// @param _duration - Length of auction (in seconds).\n    /// @param _seller - Seller, if not the message sender\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n    {\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now)\n        );\n        _addAuction(_tokenId, auction);\n    }\n\n    /// @dev Updates lastSalePrice if seller is the nft contract\n    /// Otherwise, works the same as default bid method.\n    function bid(uint256 _tokenId)\n        external\n        payable\n    {\n        // _bid verifies token ID size\n        address seller = tokenIdToAuction[_tokenId].seller;\n        uint256 price = _bid(_tokenId, msg.value);\n        _transfer(msg.sender, _tokenId);\n\n        // If not a gen0 auction, exit\n        if (seller == address(nonFungibleContract)) {\n            // Track gen0 sale prices\n            lastGen0SalePrices[gen0SaleCount % 5] = price;\n            gen0SaleCount++;\n        }\n    }\n\n    function averageGen0SalePrice() external view returns (uint256) {\n        uint256 sum = 0;\n        for (uint256 i = 0; i < 5; i++) {\n            sum += lastGen0SalePrices[i];\n        }\n        return sum / 5;\n    }\n\n}\n\n\n/// @title Handles creating auctions for sale and siring of Zodiacs.\n///  This wrapper of ReverseAuction exists only so that users can create\n///  auctions with only one transaction.\ncontract ZodiacAuction is ZodiacBreeding {\n\n    // @notice The auction contract variables are defined in ZodiacBase to allow\n    //  us to refer to them in ZodiacOwnership to prevent accidental transfers.\n    // `saleAuction` refers to the auction for gen0 and p2p sale of Zodiacs.\n    // `siringAuction` refers to the auction for siring rights of Zodiacs.\n\n    /// @dev Sets the reference to the sale auction.\n    /// @param _address - Address of sale contract.\n    function setSaleAuctionAddress(address _address) external onlyCEO {\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n        require(candidateContract.isSaleClockAuction());\n\n        // Set the new contract address\n        saleAuction = candidateContract;\n    }\n\n    /// @dev Sets the reference to the siring auction.\n    /// @param _address - Address of siring contract.\n    function setSiringAuctionAddress(address _address) external onlyCEO {\n        SiringClockAuction candidateContract = SiringClockAuction(_address);\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n        require(candidateContract.isSiringClockAuction());\n\n        // Set the new contract address\n        siringAuction = candidateContract;\n    }\n\n    /// @dev Put a Zodiac up for auction.\n    ///  Does some ownership trickery to create auctions in one tx.\n    function createSaleAuction(\n        uint256 _ZodiacId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )\n        external\n        whenNotPaused\n    {\n        // Auction contract checks input sizes\n        // If Zodiac is already on any auction, this will throw\n        // because it will be owned by the auction contract.\n        require(_owns(msg.sender, _ZodiacId));\n        // Ensure the Zodiac is not pregnant to prevent the auction\n        // contract accidentally receiving ownership of the child.\n        // NOTE: the Zodiac IS allowed to be in a cooldown.\n        require(!isPregnant(_ZodiacId));\n        _approve(_ZodiacId, saleAuction);\n        // Sale auction throws if inputs are invalid and clears\n        // transfer and sire approval after escrowing the Zodiac.\n        saleAuction.createAuction(\n            _ZodiacId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }\n\n    /// @dev Put a Zodiac up for auction to be sire.\n    ///  Performs checks to ensure the Zodiac can be sired, then\n    ///  delegates to reverse auction.\n    function createSiringAuction(\n        uint256 _ZodiacId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )\n        external\n        whenNotPaused\n    {\n        // Auction contract checks input sizes\n        // If Zodiac is already on any auction, this will throw\n        // because it will be owned by the auction contract.\n        require(_owns(msg.sender, _ZodiacId));\n        require(isReadyToBreed(_ZodiacId));\n        _approve(_ZodiacId, siringAuction);\n        // Siring auction throws if inputs are invalid and clears\n        // transfer and sire approval after escrowing the Zodiac.\n        siringAuction.createAuction(\n            _ZodiacId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }\n\n    /// @dev Completes a siring auction by bidding.\n    ///  Immediately breeds the winning matron with the sire on auction.\n    /// @param _sireId - ID of the sire on auction.\n    /// @param _matronId - ID of the matron owned by the bidder.\n    function bidOnSiringAuction(\n        uint256 _sireId,\n        uint256 _matronId\n    )\n        external\n        payable\n        whenNotPaused\n    {\n        // Auction contract checks input sizes\n        require(_owns(msg.sender, _matronId));\n        require(isReadyToBreed(_matronId));\n        require(_canBreedWithViaAuction(_matronId, _sireId));\n\n        // Define the current price of the auction.\n        uint256 currentPrice = siringAuction.getCurrentPrice(_sireId);\n        require(msg.value >= currentPrice + autoBirthFee);\n\n        // Siring auction will throw if the bid fails.\n        siringAuction.bid.value(msg.value - autoBirthFee)(_sireId);\n        _breedWith(uint32(_matronId), uint32(_sireId));\n    }\n\n    /// @dev Transfers the balance of the sale auction contract\n    /// to the ZodiacCore contract. We use two-step withdrawal to\n    /// prevent two transfer calls in the auction bid function.\n    function withdrawAuctionBalances() external onlyCLevel {\n        saleAuction.withdrawBalance();\n        siringAuction.withdrawBalance();\n    }\n}\n\n\n/// @title all functions related to creating Zodiacs\ncontract ZodiacMinting is ZodiacAuction {\n\n    // Limits the number of zodiacs the contract owner can ever create.\n    uint256 public constant DEFAULT_CREATION_LIMIT = 50000 * 12;\n\n    // Counts the number of zodiacs the contract owner has created.\n    uint256 public defaultCreatedCount;\n\n    /// @dev we can create zodiacs with different generations. Only callable by COO\n    /// @param _genes The encoded genes of the zodiac to be created, any value is accepted\n    /// @param _owner The future owner of the created zodiac. Default to contract COO\n    /// @param _time The birth time of zodiac\n    /// @param _cooldownIndex The cooldownIndex of zodiac\n    /// @param _zodiacType The type of this zodiac\n    function createDefaultGen0Zodiac(uint256 _genes, address _owner, uint256 _time, uint256 _cooldownIndex, uint256 _zodiacType) external onlyCOO {\n\n        require(_time == uint256(uint64(_time)));\n        require(_cooldownIndex == uint256(uint16(_cooldownIndex)));\n        require(_zodiacType == uint256(uint16(_zodiacType)));\n\n        require(_time > 0);\n        require(_cooldownIndex >= 0 && _cooldownIndex <= 13);\n        require(_zodiacType >= 1 && _zodiacType <= 12);\n\n        address ZodiacOwner = _owner;\n        if (ZodiacOwner == address(0)) {\n            ZodiacOwner = cooAddress;\n        }\n        require(defaultCreatedCount < DEFAULT_CREATION_LIMIT);\n\n        defaultCreatedCount++;\n        _createZodiacWithTime(0, 0, 0, _genes, ZodiacOwner, _time, _cooldownIndex, _zodiacType);\n    }\n\n\n    /// @dev we can create Zodiacs with different generations. Only callable by COO\n    /// @param _matronId The Zodiac ID of the matron of this Zodiac (zero for gen0)\n    /// @param _sireId The Zodiac ID of the sire of this Zodiac (zero for gen0)\n    /// @param _genes The encoded genes of the Zodiac to be created, any value is accepted\n    /// @param _owner The future owner of the created Zodiacs. Default to contract COO\n    /// @param _time The birth time of zodiac\n    /// @param _cooldownIndex The cooldownIndex of zodiac\n    function createDefaultZodiac(uint256 _matronId, uint256 _sireId, uint256 _genes, address _owner, uint256 _time, uint256 _cooldownIndex) external onlyCOO {\n\n        require(_matronId == uint256(uint32(_matronId)));\n        require(_sireId == uint256(uint32(_sireId)));\n        require(_time == uint256(uint64(_time)));\n        require(_cooldownIndex == uint256(uint16(_cooldownIndex)));\n\n        require(_time > 0);\n        require(_cooldownIndex >= 0 && _cooldownIndex <= 13);\n\n        address ZodiacOwner = _owner;\n        if (ZodiacOwner == address(0)) {\n            ZodiacOwner = cooAddress;\n        }\n\n        require(_matronId > 0);\n        require(_sireId > 0);\n\n        // Grab a reference to the matron in storage.\n        Zodiac storage matron = zodiacs[_matronId];\n\n        // Grab a reference to the sire in storage.\n        Zodiac storage sire = zodiacs[_sireId];\n\n        // Must be same Zodiac type\n        require(matron.zodiacType == sire.zodiacType);\n\n        // Determine the higher generation number of the two parents\n        uint16 parentGen = matron.generation;\n        if (sire.generation > matron.generation) {\n            parentGen = sire.generation;\n        }\n\n        _createZodiacWithTime(_matronId, _sireId, parentGen + 1, _genes, ZodiacOwner, _time, _cooldownIndex, matron.zodiacType);\n    }\n\n}\n\n\n/// @title Cryptozodiacs: Collectible, breedable, and oh-so-adorable zodiacs on the Ethereum blockchain.\n/// @dev The main Cryptozodiacs contract, keeps track of zodens so they don't wander around and get lost.\ncontract ZodiacCore is ZodiacMinting {\n/* contract ZodiacCore { */\n    // This is the main Cryptozodiacs contract. In order to keep our code seperated into logical sections,\n    // we've broken it up in two ways. First, we have several seperately-instantiated sibling contracts\n    // that handle auctions and our super-top-secret genetic combination algorithm. The auctions are\n    // seperate since their logic is somewhat complex and there's always a risk of subtle bugs. By keeping\n    // them in their own contracts, we can upgrade them without disrupting the main contract that tracks\n    // Zodiac ownership. The genetic combination algorithm is kept seperate so we can open-source all of\n    // the rest of our code without making it _too_ easy for folks to figure out how the genetics work.\n    // Don't worry, I'm sure someone will reverse engineer it soon enough!\n    //\n    // Secondly, we break the core contract into multiple files using inheritence, one for each major\n    // facet of functionality of CK. This allows us to keep related code bundled together while still\n    // avoiding a single giant file with everything in it. The breakdown is as follows:\n    //\n    //      - ZodiacBase: This is where we define the most fundamental code shared throughout the core\n    //             functionality. This includes our main data storage, constants and data types, plus\n    //             internal functions for managing these items.\n    //\n    //      - ZodiacAccessControl: This contract manages the various addresses and constraints for operations\n    //             that can be executed only by specific roles. Namely CEO, CFO and COO.\n    //\n    //      - ZodiacOwnership: This provides the methods required for basic non-fungible token\n    //             transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).\n    //\n    //      - ZodiacBreeding: This file contains the methods necessary to breed zodiacs together, including\n    //             keeping track of siring offers, and relies on an external genetic combination contract.\n    //\n    //      - ZodiacAuctions: Here we have the public methods for auctioning or bidding on zodiacs or siring\n    //             services. The actual auction functionality is handled in two sibling contracts (one\n    //             for sales and one for siring), while auction creation and bidding is mostly mediated\n    //             through this facet of the core contract.\n    //\n    //      - ZodiacMinting: This final facet contains the functionality we use for creating new gen0 zodiacs.\n    //             We can make up to 5000 \"promo\" zodiacs that can be given away (especially important when\n    //             the community is new), and all others can only be created and then immediately put up\n    //             for auction via an algorithmically determined starting price. Regardless of how they\n    //             are created, there is a hard limit of 2400*12*12 gen0 zodiacs. After that, it's all up to the\n    //             community to breed, breed, breed!\n\n    // Set in case the core contract is broken and an upgrade is required\n    address public newContractAddress;\n\n    /// @notice Creates the main Cryptozodiacs smart contract instance.\n    function ZodiacCore() public {\n        // Starts paused.\n        paused = true;\n\n        // the creator of the contract is the initial CEO\n        ceoAddress = msg.sender;\n\n        // the creator of the contract is also the initial COO\n        cooAddress = msg.sender;\n\n        // start with the mythical zodiac 0 - so we don't have generation-0 parent issues\n        _createZodiac(0, 0, 0, uint256(-1), address(0), 0);\n    }\n\n    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\n    ///  breaking bug. This method does nothing but keep track of the new contract and\n    ///  emit a message indicating that the new address is set. It's up to clients of this\n    ///  contract to update to the new contract address in that case. (This contract will\n    ///  be paused indefinitely if such an upgrade takes place.)\n    /// @param _v2Address new address\n    function setNewAddress(address _v2Address) external onlyCEO whenPaused {\n        // See README.md for updgrade plan\n        newContractAddress = _v2Address;\n        ContractUpgrade(_v2Address);\n    }\n\n    /// @notice No tipping!\n    /// @dev Reject all Ether from being sent here, unless it's from one of the\n    ///  two auction contracts. (Hopefully, we can prevent user accidents.)\n    function() external payable {\n        require(\n            msg.sender == address(saleAuction) ||\n            msg.sender == address(siringAuction)\n        );\n    }\n\n    /// @notice Returns all the relevant information about a specific Zodiac.\n    /// @param _id The ID of the Zodiac of interest.\n    function getZodiac(uint256 _id)\n        external\n        view\n        returns (\n        bool isGestating,\n        bool isReady,\n        uint256 cooldownIndex,\n        uint256 nextActionAt,\n        uint256 siringWithId,\n        uint256 birthTime,\n        uint256 matronId,\n        uint256 sireId,\n        uint256 generation,\n        uint256 genes\n    ) {\n        Zodiac storage zod = zodiacs[_id];\n\n        // if this variable is 0 then it's not gestating\n        isGestating = (zod.siringWithId != 0);\n        isReady = (zod.cooldownEndBlock <= block.number);\n        cooldownIndex = uint256(zod.cooldownIndex);\n        nextActionAt = uint256(zod.cooldownEndBlock);\n        siringWithId = uint256(zod.siringWithId);\n        birthTime = uint256(zod.birthTime);\n        matronId = uint256(zod.matronId);\n        sireId = uint256(zod.sireId);\n        generation = uint256(zod.generation);\n        genes = zod.genes;\n    }\n\n    /// @dev Override unpause so it requires all external contract addresses\n    ///  to be set before contract can be unpaused. Also, we can't have\n    ///  newContractAddress set either, because then the contract was upgraded.\n    /// @notice This is public rather than external so we can call super.unpause\n    ///  without using an expensive CALL.\n    function unpause() public onlyCEO whenPaused {\n        require(saleAuction != address(0));\n        require(siringAuction != address(0));\n        require(geneScience != address(0));\n        require(newContractAddress == address(0));\n\n        // Actually unpause the contract.\n        super.unpause();\n    }\n\n    // @dev Allows the CFO to capture the balance available to the contract.\n    function withdrawBalance() external onlyCFO {\n        uint256 balance = this.balance;\n        // Subtract all the currently pregnant zodens we have, plus 1 of margin.\n        uint256 subtractFees = (pregnantZodiacs + 1) * autoBirthFee;\n\n        if (balance > subtractFees) {\n            cfoAddress.transfer(balance - subtractFees);\n        }\n    }\n}",
  "bytecode": "606060409081526002805460a060020a60ff02191690556101c090519081016040908152603c82526078602083015261012c9082015261025860608201526107086080820152610e1060a0820152611c2060c082015261384060e082015261708061010082015261e100610120820152620151806101408201526202a3006101608201526205460061018082015262093a806101a0820152620000a790600390600e6200051d565b50600f60055566071afd498d0000600e553415620000c457600080fd5b6002805460008054600160a060020a033316600160a060020a03199182168117835560a060020a60ff021990931674010000000000000000000000000000000000000000171690911790915562000130908080600019818064010000000062002cfe6200013782021704565b5062000697565b60008062000144620005c0565b600063ffffffff8a168a146200015957600080fd5b63ffffffff891689146200016c57600080fd5b61ffff881688146200017d57600080fd5b61ffff851685146200018e57600080fd5b600288049250600d8361ffff161115620001a757600d92505b61012060405190810160409081528882526001604060020a0342166020830152600090820181905263ffffffff808d1660608401528b16608083015260a082015261ffff80851660c083015289811660e08301528616610100820152600680549193506001918083016200021c83826200060c565b6000928352602090922085916003020181518155602082015160018201805467ffffffffffffffff19166001604060020a039290921691909117905560408201518160010160086101000a8154816001604060020a0302191690836001604060020a0316021790555060608201518160010160106101000a81548163ffffffff021916908363ffffffff16021790555060808201518160010160146101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160010160186101000a81548163ffffffff021916908363ffffffff16021790555060c082015181600101601c6101000a81548161ffff021916908361ffff16021790555060e082015181600101601e6101000a81548161ffff021916908361ffff160217905550610100820151600291909101805461ffff191661ffff9092169190911790555003905063ffffffff811681146200037657600080fd5b7f7dcf8cf9480f02e61cf7d356dc33a677317dbee76b7ac90ac9a521f134e27ed48682846060015163ffffffff16856080015163ffffffff1686518760e0015161ffff1688610100015161ffff16604051600160a060020a03909716875260208701959095526040808701949094526060860192909252608085015260a084015260c083019190915260e0909101905180910390a16200042760008783640100000000620029966200043482021704565b9998505050505050505050565b600160a060020a03808316600081815260086020908152604080832080546001019055858352600790915290208054600160a060020a0319169091179055831615620004c857600160a060020a03831660009081526008602090815260408083208054600019019055838352600a82528083208054600160a060020a03199081169091556009909252909120805490911690555b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef838383604051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a1505050565b600283019183908215620005ae5791602002820160005b838211156200057a57835183826101000a81548163ffffffff021916908363ffffffff160217905550926020019260040160208160030104928301926001030262000534565b8015620005ac5782816101000a81549063ffffffff02191690556004016020816003010492830192600103026200057a565b505b50620005bc92915062000640565b5090565b6101206040519081016040908152600080835260208301819052908201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082015290565b8154818355818115116200063b576003028160030283600052602060002091820191016200063b919062000667565b505050565b6200066491905b80821115620005bc57805463ffffffff1916815560010162000647565b90565b6200066491905b80821115620005bc576000808255600182015560028101805461ffff191690556003016200066e565b61342880620006a76000396000f3006060604052600436106102785763ffffffff60e060020a600035041662d1779981146102b057806301ffc9a7146102d55780630519ce79146103215780630560ff441461035057806306fdde03146103e957806308723e32146103fc578063095ea7b3146104125780630a0f8168146104345780630c9066dd1461044757806314001f4c146104b5578063174b0093146104d457806318160ddd146104ff5780631940a9361461051257806321717ebf1461052857806323b872dd1461053b57806324e7a38a1461056357806327d7874c146105825780632ba73c15146105a15780633d7d3f5a146105c05780633f4ba83a146105df57806346116e6f146105f257806346d22c70146106085780634ad8c938146106215780634b85fd55146106405780634dfff04f146106565780634e0a3379146106785780635663896e146106975780635c975abb146106ad5780635fd8c710146106c05780636352211e146106d357806364b39a14146106e95780636af04a57146106ff5780636fbde40d1461071257806370a082311461073157806371587988146107505780637a7d49371461076f5780638456cb59146107825780638462151c146107955780638899568c1461080757806388c2a0bf1461083557806391876e571461084b5780639520a06f1461085e57806395d89b41146108715780639d6fac6f14610884578063a9059cbb146108b3578063b047fb50146108d5578063b0c35c05146108e8578063bc4006f5146108fb578063d3e6f49f1461090e578063e17b25af14610924578063e6cbe35114610943578063ed60ade614610956578063f2b47d5214610964578063f66f640e14610977578063f7d8c8831461098a575b600b5433600160a060020a03908116911614806102a35750600c5433600160a060020a039081169116145b15156102ae57600080fd5b005b34156102bb57600080fd5b6102c3610998565b60405190815260200160405180910390f35b34156102e057600080fd5b61030d7fffffffff000000000000000000000000000000000000000000000000000000006004351661099e565b604051901515815260200160405180910390f35b341561032c57600080fd5b610334610c25565b604051600160a060020a03909116815260200160405180910390f35b341561035b57600080fd5b610372600480359060248035908101910135610c34565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156103ae578082015183820152602001610396565b50505050905090810190601f1680156103db5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103f457600080fd5b610372610d04565b341561040757600080fd5b610334600435610d3b565b341561041d57600080fd5b6102ae600160a060020a0360043516602435610d56565b341561043f57600080fd5b610334610de0565b341561045257600080fd5b61045d600435610def565b6040519915158a5297151560208a01526040808a01979097526060890195909552608088019390935260a087019190915260c086015260e0850152610100840152610120830191909152610140909101905180910390f35b34156104c057600080fd5b6102ae600160a060020a0360043516610f50565b34156104df57600080fd5b6102ae600435600160a060020a0360243516604435606435608435610ff0565b341561050a57600080fd5b6102c36110e0565b341561051d57600080fd5b61030d6004356110eb565b341561053357600080fd5b610334611130565b341561054657600080fd5b6102ae600160a060020a036004358116906024351660443561113f565b341561056e57600080fd5b6102ae600160a060020a03600435166111c6565b341561058d57600080fd5b6102ae600160a060020a0360043516611266565b34156105ac57600080fd5b6102ae600160a060020a03600435166112b8565b34156105cb57600080fd5b6102ae60043560243560443560643561130a565b34156105ea57600080fd5b6102ae6113dc565b34156105fd57600080fd5b610334600435611474565b341561061357600080fd5b61030d60043560243561148f565b341561062c57600080fd5b6102ae60043560243560443560643561150f565b341561064b57600080fd5b6102ae6004356115d5565b341561066157600080fd5b6102ae600160a060020a03600435166024356115f5565b341561068357600080fd5b6102ae600160a060020a036004351661164f565b34156106a257600080fd5b6102ae6004356116a1565b34156106b857600080fd5b61030d611709565b34156106cb57600080fd5b6102ae611719565b34156106de57600080fd5b610334600435611794565b34156106f457600080fd5b6103346004356117b8565b341561070a57600080fd5b6103346117d3565b341561071d57600080fd5b6102ae600160a060020a03600435166117e2565b341561073c57600080fd5b6102c3600160a060020a0360043516611882565b341561075b57600080fd5b6102ae600160a060020a036004351661189d565b341561077a57600080fd5b6102c361192b565b341561078d57600080fd5b6102ae611931565b34156107a057600080fd5b6107b4600160a060020a03600435166119bd565b60405160208082528190810183818151815260200191508051906020019060200280838360005b838110156107f35780820151838201526020016107db565b505050509050019250505060405180910390f35b341561081257600080fd5b6102ae600435602435604435600160a060020a036064351660843560a435611a9e565b341561084057600080fd5b6102c3600435611c38565b341561085657600080fd5b6102ae611f1f565b341561086957600080fd5b6102c361200a565b341561087c57600080fd5b610372612011565b341561088f57600080fd5b61089a600435612048565b60405163ffffffff909116815260200160405180910390f35b34156108be57600080fd5b6102ae600160a060020a0360043516602435612075565b34156108e057600080fd5b610334612118565b34156108f357600080fd5b6102c3612127565b341561090657600080fd5b61033461212d565b341561091957600080fd5b61030d60043561213c565b341561092f57600080fd5b6102ae600160a060020a0360043516612212565b341561094e57600080fd5b61033461224f565b6102ae60043560243561225e565b341561096f57600080fd5b6103346123a0565b341561098257600080fd5b6102c36123af565b6102ae6004356024356123b5565b60115481565b60006040517f737570706f727473496e7465726661636528627974657334290000000000000081526019016040518091039020600160e060020a03191682600160e060020a0319161480610c1d57506040517f746f6b656e4d657461646174612875696e743235362c737472696e67290000008152601d0160405180910390206040517f746f6b656e734f664f776e657228616464726573732900000000000000000000815260160160405180910390206040517f7472616e7366657246726f6d28616464726573732c616464726573732c75696e81527f7432353629000000000000000000000000000000000000000000000000000000602082015260250160405180910390206040517f7472616e7366657228616464726573732c75696e743235362900000000000000815260190160405180910390206040517f617070726f766528616464726573732c75696e74323536290000000000000000815260180160405180910390206040517f6f776e65724f662875696e743235362900000000000000000000000000000000815260100160405180910390206040517f62616c616e63654f662861646472657373290000000000000000000000000000815260120160405180910390206040517f746f74616c537570706c792829000000000000000000000000000000000000008152600d0160405180910390206040517f73796d626f6c2829000000000000000000000000000000000000000000000000815260080160405180910390206040517f6e616d652829000000000000000000000000000000000000000000000000000081526006016040518091039020181818181818181818600160e060020a03191682600160e060020a031916145b90505b919050565b600154600160a060020a031681565b610c3c613320565b610c44613332565b600d54600090600160a060020a03161515610c5e57600080fd5b600d54600160a060020a031663cb4799f287878760405160e060020a63ffffffff861602815260048101848152604060248301908152604483018490529091606401848480828437820191505094505050505060a060405180830381600087803b1515610cca57600080fd5b5af11515610cd757600080fd5b50505060405180608001805160209091016040529092509050610cfa82826125c7565b9695505050505050565b60408051908101604052600d81527f43727970746f5a6f646961637300000000000000000000000000000000000000602082015281565b600960205260009081526040902054600160a060020a031681565b60025460a060020a900460ff1615610d6d57600080fd5b610d77338261261c565b1515610d8257600080fd5b610d8c818361263c565b7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925338383604051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a15050565b600054600160a060020a031681565b600080600080600080600080600080600060068c815481101515610e0f57fe5b906000526020600020906003020190508060010160189054906101000a900463ffffffff1663ffffffff16600014159a50438160010160089054906101000a900467ffffffffffffffff1667ffffffffffffffff161115995080600101601c9054906101000a900461ffff1661ffff1698508060010160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1697508060010160189054906101000a900463ffffffff1663ffffffff1696508060010160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1695508060010160109054906101000a900463ffffffff1663ffffffff1694508060010160149054906101000a900463ffffffff1663ffffffff16935080600101601e9054906101000a900461ffff1661ffff16925080600001549150509193959799509193959799565b6000805433600160a060020a03908116911614610f6c57600080fd5b5080600160a060020a0381166376190f8f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610fab57600080fd5b5af11515610fb857600080fd5b505050604051805190501515610fcd57600080fd5b600c8054600160a060020a031916600160a060020a039290921691909117905550565b60025460009033600160a060020a0390811691161461100e57600080fd5b67ffffffffffffffff8416841461102457600080fd5b61ffff8316831461103457600080fd5b61ffff8216821461104457600080fd5b6000841161105157600080fd5b600083101580156110635750600d8311155b151561106e57600080fd5b600182101580156110805750600c8211155b151561108b57600080fd5b5083600160a060020a03811615156110ab5750600254600160a060020a03165b601154620927c090106110bd57600080fd5b6011805460010190556110d760008080898589898961266a565b50505050505050565b600654600019015b90565b60008082116110f957600080fd5b600680548390811061110757fe5b600091825260209091206003909102016001015460c060020a900463ffffffff16151592915050565b600c54600160a060020a031681565b60025460a060020a900460ff161561115657600080fd5b600160a060020a038216151561116b57600080fd5b30600160a060020a031682600160a060020a03161415151561118c57600080fd5b6111963382612976565b15156111a157600080fd5b6111ab838261261c565b15156111b657600080fd5b6111c1838383612996565b505050565b6000805433600160a060020a039081169116146111e257600080fd5b5080600160a060020a0381166354c15b826040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561122157600080fd5b5af1151561122e57600080fd5b50505060405180519050151561124357600080fd5b60108054600160a060020a031916600160a060020a039290921691909117905550565b60005433600160a060020a0390811691161461128157600080fd5b600160a060020a038116151561129657600080fd5b60008054600160a060020a031916600160a060020a0392909216919091179055565b60005433600160a060020a039081169116146112d357600080fd5b600160a060020a03811615156112e857600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b60025460a060020a900460ff161561132157600080fd5b61132b338561261c565b151561133657600080fd5b61133f846110eb565b1561134957600080fd5b600b54611360908590600160a060020a031661263c565b600b54600160a060020a03166327ebe40a858585853360405160e060020a63ffffffff88160281526004810195909552602485019390935260448401919091526064830152600160a060020a0316608482015260a401600060405180830381600087803b15156113cf57600080fd5b5af115156110d757600080fd5b60005433600160a060020a039081169116146113f757600080fd5b60025460a060020a900460ff16151561140f57600080fd5b600b54600160a060020a0316151561142657600080fd5b600c54600160a060020a0316151561143d57600080fd5b601054600160a060020a0316151561145457600080fd5b601254600160a060020a03161561146a57600080fd5b611472612a7e565b565b600a60205260009081526040902054600160a060020a031681565b6000808080851161149f57600080fd5b600084116114ac57600080fd5b60068054869081106114ba57fe5b906000526020600020906003020191506006848154811015156114d957fe5b906000526020600020906003020190506114f582868387612ad1565b801561150657506115068486612c71565b95945050505050565b60025460a060020a900460ff161561152657600080fd5b611530338561261c565b151561153b57600080fd5b6115448461213c565b151561154f57600080fd5b600c54611566908590600160a060020a031661263c565b600c54600160a060020a03166327ebe40a858585853360405160e060020a63ffffffff88160281526004810195909552602485019390935260448401919091526064830152600160a060020a0316608482015260a401600060405180830381600087803b15156113cf57600080fd5b60025433600160a060020a039081169116146115f057600080fd5b600e55565b60025460a060020a900460ff161561160c57600080fd5b611616338261261c565b151561162157600080fd5b6000908152600a602052604090208054600160a060020a031916600160a060020a0392909216919091179055565b60005433600160a060020a0390811691161461166a57600080fd5b600160a060020a038116151561167f57600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b60025433600160a060020a03908116911614806116cc575060005433600160a060020a039081169116145b806116e5575060015433600160a060020a039081169116145b15156116f057600080fd5b60035463ffffffff16811061170457600080fd5b600555565b60025460a060020a900460ff1681565b600154600090819033600160a060020a0390811691161461173957600080fd5b30600160a060020a0316319150600e54600f546001010290508082111561179057600154600160a060020a031681830380156108fc0290604051600060405180830381858888f19350505050151561179057600080fd5b5050565b600081815260076020526040902054600160a060020a0316801515610c2057600080fd5b600760205260009081526040902054600160a060020a031681565b601254600160a060020a031681565b6000805433600160a060020a039081169116146117fe57600080fd5b5080600160a060020a0381166385b861886040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561183d57600080fd5b5af1151561184a57600080fd5b50505060405180519050151561185f57600080fd5b600b8054600160a060020a031916600160a060020a039290921691909117905550565b600160a060020a031660009081526008602052604090205490565b60005433600160a060020a039081169116146118b857600080fd5b60025460a060020a900460ff1615156118d057600080fd5b60128054600160a060020a031916600160a060020a0383161790557f450db8da6efbe9c22f2347f7c2021231df1fc58d3ae9a2fa75d39fa44619930581604051600160a060020a03909116815260200160405180910390a150565b60055481565b60025433600160a060020a039081169116148061195c575060005433600160a060020a039081169116145b80611975575060015433600160a060020a039081169116145b151561198057600080fd5b60025460a060020a900460ff161561199757600080fd5b6002805474ff0000000000000000000000000000000000000000191660a060020a179055565b6119c5613320565b60006119cf613320565b60008060006119dd87611882565b9450841515611a0d5760006040518059106119f55750595b90808252806020026020018201604052509550611a94565b84604051805910611a1b5750595b90808252806020026020018201604052509350611a366110e0565b925060009150600190505b828111611a9057600081815260076020526040902054600160a060020a0388811691161415611a885780848381518110611a7757fe5b602090810290910101526001909101905b600101611a41565b8395505b5050505050919050565b60025460009081908190819033600160a060020a03908116911614611ac257600080fd5b63ffffffff8a168a14611ad457600080fd5b63ffffffff89168914611ae657600080fd5b67ffffffffffffffff86168614611afc57600080fd5b61ffff85168514611b0c57600080fd5b60008611611b1957600080fd5b60008510158015611b2b5750600d8511155b1515611b3657600080fd5b869350600160a060020a0384161515611b5857600254600160a060020a031693505b60008a11611b6557600080fd5b60008911611b7257600080fd5b600680548b908110611b8057fe5b90600052602060002090600302019250600689815481101515611b9f57fe5b600091825260209091206002600390920201818101549185015490935061ffff908116911614611bce57600080fd5b506001808301549082015461ffff60f060020a928390048116929091041681901115611c065750600181015460f060020a900461ffff165b6002830154611c2b908b908b9061ffff600186018116918d918a918d918d911661266a565b5050505050505050505050565b600080600080600080600080600260149054906101000a900460ff16151515611c6057600080fd5b600680548a908110611c6e57fe5b60009182526020909120600390910201600181015490975067ffffffffffffffff161515611c9b57600080fd5b611d3d87610120604051908101604090815282548252600183015467ffffffffffffffff8082166020850152680100000000000000008204169183019190915263ffffffff608060020a82048116606084015260a060020a82048116608084015260c060020a82041660a083015261ffff60e060020a8204811660c084015260f060020a909104811660e0830152600290920154909116610100820152612cc6565b1515611d4857600080fd5b60018701546006805460c060020a90920463ffffffff1697509087908110611d6c57fe5b600091825260209091206001808a015460039093029091019081015490965061ffff60f060020a92839004811696509190041684901115611dba57600185015460f060020a900461ffff1693505b6010548754865460018a0154600160a060020a0390931692630d9f5aed92919068010000000000000000900467ffffffffffffffff166000190160405160e060020a63ffffffff86160281526004810193909352602483019190915267ffffffffffffffff166044820152606401602060405180830381600087803b1515611e4157600080fd5b5af11515611e4e57600080fd5b505050604051805160008b81526007602052604090205460018a81015460028c0154939750600160a060020a039092169550611eaa93508c9260c060020a90920463ffffffff169190880161ffff908116918891889116612cfe565b6001880180547bffffffff00000000000000000000000000000000000000000000000019169055600f8054600019019055600e54909150600160a060020a0333169080156108fc0290604051600060405180830381858888f193505050501515611f1357600080fd5b98975050505050505050565b60025433600160a060020a0390811691161480611f4a575060005433600160a060020a039081169116145b80611f63575060015433600160a060020a039081169116145b1515611f6e57600080fd5b600b54600160a060020a0316635fd8c7106040518163ffffffff1660e060020a028152600401600060405180830381600087803b1515611fad57600080fd5b5af11515611fba57600080fd5b5050600c54600160a060020a03169050635fd8c7106040518163ffffffff1660e060020a028152600401600060405180830381600087803b1515611ffd57600080fd5b5af115156111c157600080fd5b620927c081565b60408051908101604052600281527f435a000000000000000000000000000000000000000000000000000000000000602082015281565b600381600e811061205557fe5b60089182820401919006600402915054906101000a900463ffffffff1681565b60025460a060020a900460ff161561208c57600080fd5b600160a060020a03821615156120a157600080fd5b30600160a060020a031682600160a060020a0316141515156120c257600080fd5b600b54600160a060020a03838116911614156120dd57600080fd5b600c54600160a060020a03838116911614156120f857600080fd5b612102338261261c565b151561210d57600080fd5b611790338383612996565b600254600160a060020a031681565b600e5481565b600d54600160a060020a031681565b60008080831161214b57600080fd5b600680548490811061215957fe5b9060005260206000209060030201905061220b81610120604051908101604090815282548252600183015467ffffffffffffffff8082166020850152680100000000000000008204169183019190915263ffffffff608060020a82048116606084015260a060020a82048116608084015260c060020a82041660a083015261ffff60e060020a8204811660c084015260f060020a909104811660e0830152600290920154909116610100820152612fe5565b9392505050565b60005433600160a060020a0390811691161461222d57600080fd5b600d8054600160a060020a031916600160a060020a0392909216919091179055565b600b54600160a060020a031681565b60025460009060a060020a900460ff161561227857600080fd5b612282338361261c565b151561228d57600080fd5b6122968261213c565b15156122a157600080fd5b6122ab828461301c565b15156122b657600080fd5b600c54600160a060020a031663c55d0f568460405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156122fe57600080fd5b5af1151561230b57600080fd5b5050506040518051600e549092508201341015905061232957600080fd5b600c54600e54600160a060020a039091169063454a2ab39034038560405160e060020a63ffffffff851602815260048101919091526024016000604051808303818588803b151561237957600080fd5b5af1151561238657600080fd5b505050506111c18263ffffffff168463ffffffff1661306b565b601054600160a060020a031681565b600f5481565b600254600090819060a060020a900460ff16156123d157600080fd5b600e543410156123e057600080fd5b6123ea338561261c565b15156123f557600080fd5b6123ff8385612c71565b151561240a57600080fd5b600680548590811061241857fe5b906000526020600020906003020191506124ca82610120604051908101604090815282548252600183015467ffffffffffffffff8082166020850152680100000000000000008204169183019190915263ffffffff608060020a82048116606084015260a060020a82048116608084015260c060020a82041660a083015261ffff60e060020a8204811660c084015260f060020a909104811660e0830152600290920154909116610100820152612fe5565b15156124d557600080fd5b60068054849081106124e357fe5b9060005260206000209060030201905061259581610120604051908101604090815282548252600183015467ffffffffffffffff8082166020850152680100000000000000008204169183019190915263ffffffff608060020a82048116606084015260a060020a82048116608084015260c060020a82041660a083015261ffff60e060020a8204811660c084015260f060020a909104811660e0830152600290920154909116610100820152612fe5565b15156125a057600080fd5b6125ac82858386612ad1565b15156125b757600080fd5b6125c1848461306b565b50505050565b6125cf613320565b6125d7613320565b600080846040518059106125e85750595b818152601f19601f83011681016020016040529050925050602082019050846126128282876131f2565b5090949350505050565b600090815260076020526040902054600160a060020a0391821691161490565b6000918252600960205260409091208054600160a060020a031916600160a060020a03909216919091179055565b60008061267561335b565b600063ffffffff8c168c1461268957600080fd5b63ffffffff8b168b1461269b57600080fd5b61ffff8a168a146126ab57600080fd5b61ffff851685146126bb57600080fd5b67ffffffffffffffff871687146126d157600080fd5b61ffff861686146126e157600080fd5b859250600d8361ffff1611156126f657600d92505b61012060405190810160409081528a825267ffffffffffffffff89166020830152600090820181905263ffffffff808f1660608401528d16608083015260a082015261ffff80851660c08301528b811660e083015286166101008201526006805491935060019180830161276a83826133a7565b6000928352602090922085916003020181518155602082015160018201805467ffffffffffffffff191667ffffffffffffffff9290921691909117905560408201518160010160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160010160106101000a81548163ffffffff021916908363ffffffff16021790555060808201518160010160146101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160010160186101000a81548163ffffffff021916908363ffffffff16021790555060c082015181600101601c6101000a81548161ffff021916908361ffff16021790555060e082015181600101601e6101000a81548161ffff021916908361ffff160217905550610100820151600291909101805461ffff191661ffff9092169190911790555003905063ffffffff811681146128c657600080fd5b7f7dcf8cf9480f02e61cf7d356dc33a677317dbee76b7ac90ac9a521f134e27ed48882846060015163ffffffff16856080015163ffffffff1686518760e0015161ffff1688610100015161ffff16604051600160a060020a03909716875260208701959095526040808701949094526060860192909252608085015260a084015260c083019190915260e0909101905180910390a161296760008983612996565b9b9a5050505050505050505050565b600090815260096020526040902054600160a060020a0391821691161490565b600160a060020a03808316600081815260086020908152604080832080546001019055858352600790915290208054600160a060020a0319169091179055831615612a2957600160a060020a03831660009081526008602090815260408083208054600019019055838352600a82528083208054600160a060020a03199081169091556009909252909120805490911690555b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef838383604051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a1505050565b60005433600160a060020a03908116911614612a9957600080fd5b60025460a060020a900460ff161515612ab157600080fd5b6002805474ff000000000000000000000000000000000000000019169055565b6002808301549085015460009161ffff918216911614612af357506000612c69565b81841415612b0357506000612c69565b6001850154608060020a900463ffffffff16821480612b325750600185015460a060020a900463ffffffff1682145b15612b3f57506000612c69565b6001830154608060020a900463ffffffff16841480612b6e5750600183015460a060020a900463ffffffff1684145b15612b7b57506000612c69565b6001830154608060020a900463ffffffff161580612ba857506001850154608060020a900463ffffffff16155b15612bb557506001612c69565b60018581015490840154608060020a9182900463ffffffff90811692909104161480612c00575060018086015490840154608060020a900463ffffffff90811660a060020a90920416145b15612c0d57506000612c69565b6001808601549084015460a060020a900463ffffffff908116608060020a909204161480612c5857506001858101549084015460a060020a9182900463ffffffff9081169290910416145b15612c6557506000612c69565b5060015b949350505050565b6000818152600760205260408082205484835290822054600160a060020a0391821691168082148061150657506000858152600a6020526040902054600160a060020a03908116908316149250505092915050565b60008160a0015163ffffffff1615801590610c1d57504367ffffffffffffffff16826040015167ffffffffffffffff16111592915050565b600080612d0961335b565b600063ffffffff8a168a14612d1d57600080fd5b63ffffffff89168914612d2f57600080fd5b61ffff88168814612d3f57600080fd5b61ffff85168514612d4f57600080fd5b600288049250600d8361ffff161115612d6757600d92505b610120604051908101604090815288825267ffffffffffffffff42166020830152600090820181905263ffffffff808d1660608401528b16608083015260a082015261ffff80851660c083015289811660e0830152861661010082015260068054919350600191808301612ddb83826133a7565b6000928352602090922085916003020181518155602082015160018201805467ffffffffffffffff191667ffffffffffffffff9290921691909117905560408201518160010160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160010160106101000a81548163ffffffff021916908363ffffffff16021790555060808201518160010160146101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160010160186101000a81548163ffffffff021916908363ffffffff16021790555060c082015181600101601c6101000a81548161ffff021916908361ffff16021790555060e082015181600101601e6101000a81548161ffff021916908361ffff160217905550610100820151600291909101805461ffff191661ffff9092169190911790555003905063ffffffff81168114612f3757600080fd5b7f7dcf8cf9480f02e61cf7d356dc33a677317dbee76b7ac90ac9a521f134e27ed48682846060015163ffffffff16856080015163ffffffff1686518760e0015161ffff1688610100015161ffff16604051600160a060020a03909716875260208701959095526040808701949094526060860192909252608085015260a084015260c083019190915260e0909101905180910390a1612fd860008783612996565b9998505050505050505050565b60008160a0015163ffffffff16158015610c1d57504367ffffffffffffffff16826040015167ffffffffffffffff16111592915050565b600080600060068581548110151561303057fe5b9060005260206000209060030201915060068481548110151561304f57fe5b9060005260206000209060030201905061150682868387612ad1565b60008060068381548110151561307d57fe5b9060005260206000209060030201915060068481548110151561309c57fe5b600091825260209091206003909102016001810180547bffffffff000000000000000000000000000000000000000000000000191660c060020a63ffffffff87160217905590506130ec82613237565b6130f581613237565b6000848152600a602090815260408083208054600160a060020a031990811690915586845281842080549091169055600f805460019081019091558784526007909252918290205483820154918501547f92f88a5b0e68184d6eaf466894625052095288be7d39de2429081c769956be1e93600160a060020a0392909216928892889267ffffffffffffffff68010000000000000000938490048116939091041690518086600160a060020a0316600160a060020a031681526020018581526020018481526020018367ffffffffffffffff1681526020018267ffffffffffffffff1681526020019550505050505060405180910390a150505050565b60005b6020821061321857825184526020840193506020830192506020820391506131f5565b6001826020036101000a03905080198351168185511617909352505050565b600554600182015443919060039060e060020a900461ffff16600e811061325a57fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff1681151561328557fe5b6001840180546fffffffffffffffff0000000000000000191668010000000000000000939092049390930167ffffffffffffffff16919091021790819055600d60e060020a90910461ffff16101561331d576001818101805461ffff60e060020a8083048216909401169092027fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092169190911790555b50565b60206040519081016040526000815290565b60806040519081016040526004815b600081526000199190910190602001816133415790505090565b6101206040519081016040908152600080835260208301819052908201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082015290565b8154818355818115116111c1576000838152602090206111c1916110e89160039182028101918502015b808211156133f8576000808255600182015560028101805461ffff191690556003016133d1565b50905600a165627a7a72305820f4d770eaf13f2e5dd887d15f2bdc89b4ddffc3188b5ea623cd7eca237ab4c4ea0029"
}