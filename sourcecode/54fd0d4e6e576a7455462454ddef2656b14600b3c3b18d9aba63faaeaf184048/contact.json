{
  "address": "0x60cd862c9c687a9de49aecdc3a99b74a4fc54ab6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MoonCatRescue",
  "compilerVersion": "v0.4.14+commit.c2215d46",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-09\n*/\n\npragma solidity ^0.4.13;\n\ncontract MoonCatRescue {\n  enum Modes { Inactive, Disabled, Test, Live }\n\n  Modes public mode = Modes.Inactive;\n\n  address owner;\n\n  bytes16 public imageGenerationCodeMD5 = 0xdbad5c08ec98bec48490e3c196eec683; // use this to verify mooncatparser.js the cat image data generation javascript file.\n\n  string public name = \"MoonCats\";\n  string public symbol = \"?\"; // unicode cat symbol\n  uint8 public decimals = 0;\n\n  uint256 public totalSupply = 25600;\n  uint16 public remainingCats = 25600 - 256; // there will only ever be 25,000 cats\n  uint16 public remainingGenesisCats = 256; // there can only be a maximum of 256 genesis cats\n  uint16 public rescueIndex = 0;\n\n  bytes5[25600] public rescueOrder;\n\n  bytes32 public searchSeed = 0x0; // gets set with the immediately preceding blockhash when the contract is activated to prevent \"premining\"\n\n  struct AdoptionOffer {\n    bool exists;\n    bytes5 catId;\n    address seller;\n    uint price;\n    address onlyOfferTo;\n  }\n\n  struct AdoptionRequest{\n    bool exists;\n    bytes5 catId;\n    address requester;\n    uint price;\n  }\n\n  mapping (bytes5 => AdoptionOffer) public adoptionOffers;\n  mapping (bytes5 => AdoptionRequest) public adoptionRequests;\n\n  mapping (bytes5 => bytes32) public catNames;\n  mapping (bytes5 => address) public catOwners;\n  mapping (address => uint256) public balanceOf; //number of cats owned by a given address\n  mapping (address => uint) public pendingWithdrawals;\n\n  /* events */\n\n  event CatRescued(address indexed to, bytes5 indexed catId);\n  event CatNamed(bytes5 indexed catId, bytes32 catName);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event CatAdopted(bytes5 indexed catId, uint price, address indexed from, address indexed to);\n  event AdoptionOffered(bytes5 indexed catId, uint price, address indexed toAddress);\n  event AdoptionOfferCancelled(bytes5 indexed catId);\n  event AdoptionRequested(bytes5 indexed catId, uint price, address indexed from);\n  event AdoptionRequestCancelled(bytes5 indexed catId);\n  event GenesisCatsAdded(bytes5[16] catIds);\n\n  function MoonCatRescue() payable {\n    owner = msg.sender;\n    assert((remainingCats + remainingGenesisCats) == totalSupply);\n    assert(rescueOrder.length == totalSupply);\n    assert(rescueIndex == 0);\n  }\n\n  /* registers and validates cats that are found */\n  function rescueCat(bytes32 seed) activeMode returns (bytes5) {\n    require(remainingCats > 0); // cannot register any cats once supply limit is reached\n    bytes32 catIdHash = keccak256(seed, searchSeed); // generate the prospective catIdHash\n    require(catIdHash[0] | catIdHash[1] | catIdHash[2] == 0x0); // ensures the validity of the catIdHash\n    bytes5 catId = bytes5((catIdHash & 0xffffffff) << 216); // one byte to indicate genesis, and the last 4 bytes of the catIdHash\n    require(catOwners[catId] == 0x0); // if the cat is already registered, throw an error. All cats are unique.\n\n    rescueOrder[rescueIndex] = catId;\n    rescueIndex++;\n\n    catOwners[catId] = msg.sender;\n    balanceOf[msg.sender]++;\n    remainingCats--;\n\n    CatRescued(msg.sender, catId);\n\n    return catId;\n  }\n\n  /* assigns a name to a cat, once a name is assigned it cannot be changed */\n  function nameCat(bytes5 catId, bytes32 catName) onlyCatOwner(catId) {\n    require(catNames[catId] == 0x0); // ensure the current name is empty; cats can only be named once\n    require(!adoptionOffers[catId].exists); // cats cannot be named while they are up for adoption\n    catNames[catId] = catName;\n    CatNamed(catId, catName);\n  }\n\n  /* puts a cat up for anyone to adopt */\n  function makeAdoptionOffer(bytes5 catId, uint price) onlyCatOwner(catId) {\n    require(price > 0);\n    adoptionOffers[catId] = AdoptionOffer(true, catId, msg.sender, price, 0x0);\n    AdoptionOffered(catId, price, 0x0);\n  }\n\n  /* puts a cat up for a specific address to adopt */\n  function makeAdoptionOfferToAddress(bytes5 catId, uint price, address to) onlyCatOwner(catId) isNotSender(to){\n    adoptionOffers[catId] = AdoptionOffer(true, catId, msg.sender, price, to);\n    AdoptionOffered(catId, price, to);\n  }\n\n  /* cancel an adoption offer */\n  function cancelAdoptionOffer(bytes5 catId) onlyCatOwner(catId) {\n    adoptionOffers[catId] = AdoptionOffer(false, catId, 0x0, 0, 0x0);\n    AdoptionOfferCancelled(catId);\n  }\n\n  /* accepts an adoption offer  */\n  function acceptAdoptionOffer(bytes5 catId) payable {\n    AdoptionOffer storage offer = adoptionOffers[catId];\n    require(offer.exists);\n    require(offer.onlyOfferTo == 0x0 || offer.onlyOfferTo == msg.sender);\n    require(msg.value >= offer.price);\n    if(msg.value > offer.price) {\n      pendingWithdrawals[msg.sender] += (msg.value - offer.price); // if the submitted amount exceeds the price allow the buyer to withdraw the difference\n    }\n    transferCat(catId, catOwners[catId], msg.sender, offer.price);\n  }\n\n  /* transfer a cat directly without payment */\n  function giveCat(bytes5 catId, address to) onlyCatOwner(catId) {\n    transferCat(catId, msg.sender, to, 0);\n  }\n\n  /* requests adoption of a cat with an ETH offer */\n  function makeAdoptionRequest(bytes5 catId) payable isNotSender(catOwners[catId]) {\n    require(catOwners[catId] != 0x0); // the cat must be owned\n    AdoptionRequest storage existingRequest = adoptionRequests[catId];\n    require(msg.value > 0);\n    require(msg.value > existingRequest.price);\n\n\n    if(existingRequest.price > 0) {\n      pendingWithdrawals[existingRequest.requester] += existingRequest.price;\n    }\n\n    adoptionRequests[catId] = AdoptionRequest(true, catId, msg.sender, msg.value);\n    AdoptionRequested(catId, msg.value, msg.sender);\n\n  }\n\n  /* allows the owner of the cat to accept an adoption request */\n  function acceptAdoptionRequest(bytes5 catId) onlyCatOwner(catId) {\n    AdoptionRequest storage existingRequest = adoptionRequests[catId];\n    require(existingRequest.exists);\n    address existingRequester = existingRequest.requester;\n    uint existingPrice = existingRequest.price;\n    adoptionRequests[catId] = AdoptionRequest(false, catId, 0x0, 0); // the adoption request must be cancelled before calling transferCat to prevent refunding the requester.\n    transferCat(catId, msg.sender, existingRequester, existingPrice);\n  }\n\n  /* allows the requester to cancel their adoption request */\n  function cancelAdoptionRequest(bytes5 catId) {\n    AdoptionRequest storage existingRequest = adoptionRequests[catId];\n    require(existingRequest.exists);\n    require(existingRequest.requester == msg.sender);\n\n    uint price = existingRequest.price;\n\n    adoptionRequests[catId] = AdoptionRequest(false, catId, 0x0, 0);\n\n    msg.sender.transfer(price);\n\n    AdoptionRequestCancelled(catId);\n  }\n\n\n  function withdraw() {\n    uint amount = pendingWithdrawals[msg.sender];\n    pendingWithdrawals[msg.sender] = 0;\n    msg.sender.transfer(amount);\n  }\n\n  /* owner only functions */\n\n  /* disable contract before activation. A safeguard if a bug is found before the contract is activated */\n  function disableBeforeActivation() onlyOwner inactiveMode {\n    mode = Modes.Disabled;  // once the contract is disabled it's mode cannot be changed\n  }\n\n  /* activates the contract in *Live* mode which sets the searchSeed and enables rescuing */\n  function activate() onlyOwner inactiveMode {\n    searchSeed = block.blockhash(block.number - 1); // once the searchSeed is set it cannot be changed;\n    mode = Modes.Live; // once the contract is activated it's mode cannot be changed\n  }\n\n  /* activates the contract in *Test* mode which sets the searchSeed and enables rescuing */\n  function activateInTestMode() onlyOwner inactiveMode { //\n    searchSeed = 0x5713bdf5d1c3398a8f12f881f0f03b5025b6f9c17a97441a694d5752beb92a3d; // once the searchSeed is set it cannot be changed;\n    mode = Modes.Test; // once the contract is activated it's mode cannot be changed\n  }\n\n  /* add genesis cats in groups of 16 */\n  function addGenesisCatGroup() onlyOwner activeMode {\n    require(remainingGenesisCats > 0);\n    bytes5[16] memory newCatIds;\n    uint256 price = (17 - (remainingGenesisCats / 16)) * 300000000000000000;\n    for(uint8 i = 0; i < 16; i++) {\n\n      uint16 genesisCatIndex = 256 - remainingGenesisCats;\n      bytes5 genesisCatId = (bytes5(genesisCatIndex) << 24) | 0xff00000ca7;\n\n      newCatIds[i] = genesisCatId;\n\n      rescueOrder[rescueIndex] = genesisCatId;\n      rescueIndex++;\n      balanceOf[0x0]++;\n      remainingGenesisCats--;\n\n      adoptionOffers[genesisCatId] = AdoptionOffer(true, genesisCatId, owner, price, 0x0);\n    }\n    GenesisCatsAdded(newCatIds);\n  }\n\n\n  /* aggregate getters */\n\n  function getCatIds() constant returns (bytes5[]) {\n    bytes5[] memory catIds = new bytes5[](rescueIndex);\n    for (uint i = 0; i < rescueIndex; i++) {\n      catIds[i] = rescueOrder[i];\n    }\n    return catIds;\n  }\n\n\n  function getCatNames() constant returns (bytes32[]) {\n    bytes32[] memory names = new bytes32[](rescueIndex);\n    for (uint i = 0; i < rescueIndex; i++) {\n      names[i] = catNames[rescueOrder[i]];\n    }\n    return names;\n  }\n\n  function getCatOwners() constant returns (address[]) {\n    address[] memory owners = new address[](rescueIndex);\n    for (uint i = 0; i < rescueIndex; i++) {\n      owners[i] = catOwners[rescueOrder[i]];\n    }\n    return owners;\n  }\n\n  function getCatOfferPrices() constant returns (uint[]) {\n    uint[] memory catOffers = new uint[](rescueIndex);\n    for (uint i = 0; i < rescueIndex; i++) {\n      bytes5 catId = rescueOrder[i];\n      if(adoptionOffers[catId].exists && adoptionOffers[catId].onlyOfferTo == 0x0) {\n        catOffers[i] = adoptionOffers[catId].price;\n      }\n    }\n    return catOffers;\n  }\n\n  function getCatRequestPrices() constant returns (uint[]) {\n    uint[] memory catRequests = new uint[](rescueIndex);\n    for (uint i = 0; i < rescueIndex; i++) {\n      bytes5 catId = rescueOrder[i];\n      catRequests[i] = adoptionRequests[catId].price;\n    }\n    return catRequests;\n  }\n\n  function getCatDetails(bytes5 catId) constant returns (bytes5 id,\n                                                         address owner,\n                                                         bytes32 name,\n                                                         address onlyOfferTo,\n                                                         uint offerPrice,\n                                                         address requester,\n                                                         uint requestPrice) {\n\n    return (catId,\n            catOwners[catId],\n            catNames[catId],\n            adoptionOffers[catId].onlyOfferTo,\n            adoptionOffers[catId].price,\n            adoptionRequests[catId].requester,\n            adoptionRequests[catId].price);\n  }\n\n  /* modifiers */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  modifier inactiveMode() {\n    require(mode == Modes.Inactive);\n    _;\n  }\n\n  modifier activeMode() {\n    require(mode == Modes.Live || mode == Modes.Test);\n    _;\n  }\n\n  modifier onlyCatOwner(bytes5 catId) {\n    require(catOwners[catId] == msg.sender);\n    _;\n  }\n\n  modifier isNotSender(address a) {\n    require(msg.sender != a);\n    _;\n  }\n\n  /* transfer helper */\n  function transferCat(bytes5 catId, address from, address to, uint price) private {\n    catOwners[catId] = to;\n    balanceOf[from]--;\n    balanceOf[to]++;\n    adoptionOffers[catId] = AdoptionOffer(false, catId, 0x0, 0, 0x0); // cancel any existing adoption offer when cat is transferred\n\n    AdoptionRequest storage request = adoptionRequests[catId]; //if the recipient has a pending adoption request, cancel it\n    if(request.requester == to) {\n      pendingWithdrawals[to] += request.price;\n      adoptionRequests[catId] = AdoptionRequest(false, catId, 0x0, 0);\n    }\n\n    pendingWithdrawals[from] += price;\n\n    Transfer(from, to, 1);\n    CatAdopted(catId, price, from, to);\n  }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"catId\",\"type\":\"bytes5\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"makeAdoptionOffer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingGenesisCats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingCats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catId\",\"type\":\"bytes5\"}],\"name\":\"acceptAdoptionOffer\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"catId\",\"type\":\"bytes5\"}],\"name\":\"getCatDetails\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes5\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"onlyOfferTo\",\"type\":\"address\"},{\"name\":\"offerPrice\",\"type\":\"uint256\"},{\"name\":\"requester\",\"type\":\"address\"},{\"name\":\"requestPrice\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCatOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes5\"}],\"name\":\"catOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rescueOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes5\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seed\",\"type\":\"bytes32\"}],\"name\":\"rescueCat\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes5\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catId\",\"type\":\"bytes5\"}],\"name\":\"cancelAdoptionOffer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCatIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes5[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCatNames\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catId\",\"type\":\"bytes5\"},{\"name\":\"catName\",\"type\":\"bytes32\"}],\"name\":\"nameCat\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateInTestMode\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes5\"}],\"name\":\"adoptionOffers\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"catId\",\"type\":\"bytes5\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"onlyOfferTo\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes5\"}],\"name\":\"catNames\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCatRequestPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catId\",\"type\":\"bytes5\"}],\"name\":\"cancelAdoptionRequest\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableBeforeActivation\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addGenesisCatGroup\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catId\",\"type\":\"bytes5\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"makeAdoptionOfferToAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"searchSeed\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"imageGenerationCodeMD5\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes5\"}],\"name\":\"adoptionRequests\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"catId\",\"type\":\"bytes5\"},{\"name\":\"requester\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catId\",\"type\":\"bytes5\"}],\"name\":\"acceptAdoptionRequest\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCatOfferPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catId\",\"type\":\"bytes5\"}],\"name\":\"makeAdoptionRequest\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rescueIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catId\",\"type\":\"bytes5\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"giveCat\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"catId\",\"type\":\"bytes5\"}],\"name\":\"CatRescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"catId\",\"type\":\"bytes5\"},{\"indexed\":false,\"name\":\"catName\",\"type\":\"bytes32\"}],\"name\":\"CatNamed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"catId\",\"type\":\"bytes5\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"CatAdopted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"catId\",\"type\":\"bytes5\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"AdoptionOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"catId\",\"type\":\"bytes5\"}],\"name\":\"AdoptionOfferCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"catId\",\"type\":\"bytes5\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"AdoptionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"catId\",\"type\":\"bytes5\"}],\"name\":\"AdoptionRequestCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"catIds\",\"type\":\"bytes5[16]\"}],\"name\":\"GenesisCatsAdded\",\"type\":\"event\"}]",
  "bytecode": ""
}