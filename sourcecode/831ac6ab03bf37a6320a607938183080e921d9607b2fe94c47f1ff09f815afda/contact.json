{
  "address": "0x8d80de8a78198396329dfa769ad54d24bf90e7aa",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Nami Token",
  "contractName": "NamiCrowdSale",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-04\n*/\n\npragma solidity ^0.4.18;\n/**\n * Math operations with safety checks\n */\nlibrary SafeMath {\n  function mul(uint a, uint b) internal pure returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint a, uint b) internal pure returns (uint) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint a, uint b) internal pure returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal pure returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\n// ERC20 token interface is implemented only partially.\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract NamiCrowdSale {\n    using SafeMath for uint256;\n\n    /// NAC Broker Presale Token\n    /// @dev Constructor\n    function NamiCrowdSale(address _escrow, address _namiMultiSigWallet, address _namiPresale) public {\n        require(_namiMultiSigWallet != 0x0);\n        escrow = _escrow;\n        namiMultiSigWallet = _namiMultiSigWallet;\n        namiPresale = _namiPresale;\n    }\n\n\n    /*/\n     *  Constants\n    /*/\n\n    string public name = \"Nami ICO\";\n    string public  symbol = \"NAC\";\n    uint   public decimals = 18;\n\n    bool public TRANSFERABLE = false; // default not transferable\n\n    uint public constant TOKEN_SUPPLY_LIMIT = 1000000000 * (1 ether / 1 wei);\n    \n    uint public binary = 0;\n\n    /*/\n     *  Token state\n    /*/\n\n    enum Phase {\n        Created,\n        Running,\n        Paused,\n        Migrating,\n        Migrated\n    }\n\n    Phase public currentPhase = Phase.Created;\n    uint public totalSupply = 0; // amount of tokens already sold\n\n    // escrow has exclusive priveleges to call administrative\n    // functions on this contract.\n    address public escrow;\n\n    // Gathered funds can be withdrawn only to namimultisigwallet's address.\n    address public namiMultiSigWallet;\n\n    // nami presale contract\n    address public namiPresale;\n\n    // Crowdsale manager has exclusive priveleges to burn presale tokens.\n    address public crowdsaleManager;\n    \n    // binary option address\n    address public binaryAddress;\n    \n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    modifier onlyCrowdsaleManager() {\n        require(msg.sender == crowdsaleManager); \n        _; \n    }\n\n    modifier onlyEscrow() {\n        require(msg.sender == escrow);\n        _;\n    }\n    \n    modifier onlyTranferable() {\n        require(TRANSFERABLE);\n        _;\n    }\n    \n    modifier onlyNamiMultisig() {\n        require(msg.sender == namiMultiSigWallet);\n        _;\n    }\n    \n    /*/\n     *  Events\n    /*/\n\n    event LogBuy(address indexed owner, uint value);\n    event LogBurn(address indexed owner, uint value);\n    event LogPhaseSwitch(Phase newPhase);\n    // Log migrate token\n    event LogMigrate(address _from, address _to, uint256 amount);\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /*/\n     *  Public functions\n    /*/\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    // Transfer the balance from owner's account to another account\n    // only escrow can send token (to send token private sale)\n    function transferForTeam(address _to, uint256 _value) public\n        onlyEscrow\n    {\n        _transfer(msg.sender, _to, _value);\n    }\n    \n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public\n        onlyTranferable\n    {\n        _transfer(msg.sender, _to, _value);\n    }\n    \n       /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) \n        public\n        onlyTranferable\n        returns (bool success)\n    {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        onlyTranferable\n        returns (bool success) \n    {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        onlyTranferable\n        returns (bool success) \n    {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    // allows transfer token\n    function changeTransferable () public\n        onlyEscrow\n    {\n        TRANSFERABLE = !TRANSFERABLE;\n    }\n    \n    // change escrow\n    function changeEscrow(address _escrow) public\n        onlyNamiMultisig\n    {\n        require(_escrow != 0x0);\n        escrow = _escrow;\n    }\n    \n    // change binary value\n    function changeBinary(uint _binary)\n        public\n        onlyEscrow\n    {\n        binary = _binary;\n    }\n    \n    // change binary address\n    function changeBinaryAddress(address _binaryAddress)\n        public\n        onlyEscrow\n    {\n        require(_binaryAddress != 0x0);\n        binaryAddress = _binaryAddress;\n    }\n    \n    /*\n    * price in ICO:\n    * first week: 1 ETH = 2400 NAC\n    * second week: 1 ETH = 23000 NAC\n    * 3rd week: 1 ETH = 2200 NAC\n    * 4th week: 1 ETH = 2100 NAC\n    * 5th week: 1 ETH = 2000 NAC\n    * 6th week: 1 ETH = 1900 NAC\n    * 7th week: 1 ETH = 1800 NAC\n    * 8th week: 1 ETH = 1700 nac\n    * time: \n    * 1517443200: Thursday, February 1, 2018 12:00:00 AM\n    * 1518048000: Thursday, February 8, 2018 12:00:00 AM\n    * 1518652800: Thursday, February 15, 2018 12:00:00 AM\n    * 1519257600: Thursday, February 22, 2018 12:00:00 AM\n    * 1519862400: Thursday, March 1, 2018 12:00:00 AM\n    * 1520467200: Thursday, March 8, 2018 12:00:00 AM\n    * 1521072000: Thursday, March 15, 2018 12:00:00 AM\n    * 1521676800: Thursday, March 22, 2018 12:00:00 AM\n    * 1522281600: Thursday, March 29, 2018 12:00:00 AM\n    */\n    function getPrice() public view returns (uint price) {\n        if (now < 1517443200) {\n            // presale\n            return 3450;\n        } else if (1517443200 < now && now <= 1518048000) {\n            // 1st week\n            return 2400;\n        } else if (1518048000 < now && now <= 1518652800) {\n            // 2nd week\n            return 2300;\n        } else if (1518652800 < now && now <= 1519257600) {\n            // 3rd week\n            return 2200;\n        } else if (1519257600 < now && now <= 1519862400) {\n            // 4th week\n            return 2100;\n        } else if (1519862400 < now && now <= 1520467200) {\n            // 5th week\n            return 2000;\n        } else if (1520467200 < now && now <= 1521072000) {\n            // 6th week\n            return 1900;\n        } else if (1521072000 < now && now <= 1521676800) {\n            // 7th week\n            return 1800;\n        } else if (1521676800 < now && now <= 1522281600) {\n            // 8th week\n            return 1700;\n        } else {\n            return binary;\n        }\n    }\n\n\n    function() payable public {\n        buy(msg.sender);\n    }\n    \n    \n    function buy(address _buyer) payable public {\n        // Available only if presale is running.\n        require(currentPhase == Phase.Running);\n        // require ICO time or binary option\n        require(now <= 1522281600 || msg.sender == binaryAddress);\n        require(msg.value != 0);\n        uint newTokens = msg.value * getPrice();\n        require (totalSupply + newTokens < TOKEN_SUPPLY_LIMIT);\n        // add new token to buyer\n        balanceOf[_buyer] = balanceOf[_buyer].add(newTokens);\n        // add new token to totalSupply\n        totalSupply = totalSupply.add(newTokens);\n        LogBuy(_buyer,newTokens);\n        Transfer(this,_buyer,newTokens);\n    }\n    \n\n    /// @dev Returns number of tokens owned by given address.\n    /// @param _owner Address of token owner.\n    function burnTokens(address _owner) public\n        onlyCrowdsaleManager\n    {\n        // Available only during migration phase\n        require(currentPhase == Phase.Migrating);\n\n        uint tokens = balanceOf[_owner];\n        require(tokens != 0);\n        balanceOf[_owner] = 0;\n        totalSupply -= tokens;\n        LogBurn(_owner, tokens);\n        Transfer(_owner, crowdsaleManager, tokens);\n\n        // Automatically switch phase when migration is done.\n        if (totalSupply == 0) {\n            currentPhase = Phase.Migrated;\n            LogPhaseSwitch(Phase.Migrated);\n        }\n    }\n\n\n    /*/\n     *  Administrative functions\n    /*/\n    function setPresalePhase(Phase _nextPhase) public\n        onlyEscrow\n    {\n        bool canSwitchPhase\n            =  (currentPhase == Phase.Created && _nextPhase == Phase.Running)\n            || (currentPhase == Phase.Running && _nextPhase == Phase.Paused)\n                // switch to migration phase only if crowdsale manager is set\n            || ((currentPhase == Phase.Running || currentPhase == Phase.Paused)\n                && _nextPhase == Phase.Migrating\n                && crowdsaleManager != 0x0)\n            || (currentPhase == Phase.Paused && _nextPhase == Phase.Running)\n                // switch to migrated only if everyting is migrated\n            || (currentPhase == Phase.Migrating && _nextPhase == Phase.Migrated\n                && totalSupply == 0);\n\n        require(canSwitchPhase);\n        currentPhase = _nextPhase;\n        LogPhaseSwitch(_nextPhase);\n    }\n\n\n    function withdrawEther(uint _amount) public\n        onlyEscrow\n    {\n        require(namiMultiSigWallet != 0x0);\n        // Available at any phase.\n        if (this.balance > 0) {\n            namiMultiSigWallet.transfer(_amount);\n        }\n    }\n    \n    function safeWithdraw(address _withdraw, uint _amount) public\n        onlyEscrow\n    {\n        NamiMultiSigWallet namiWallet = NamiMultiSigWallet(namiMultiSigWallet);\n        if (namiWallet.isOwner(_withdraw)) {\n            _withdraw.transfer(_amount);\n        }\n    }\n\n\n    function setCrowdsaleManager(address _mgr) public\n        onlyEscrow\n    {\n        // You can't change crowdsale contract when migration is in progress.\n        require(currentPhase != Phase.Migrating);\n        crowdsaleManager = _mgr;\n    }\n\n    // internal migrate migration tokens\n    function _migrateToken(address _from, address _to)\n        internal\n    {\n        PresaleToken presale = PresaleToken(namiPresale);\n        uint256 newToken = presale.balanceOf(_from);\n        require(newToken > 0);\n        // burn old token\n        presale.burnTokens(_from);\n        // add new token to _to\n        balanceOf[_to] = balanceOf[_to].add(newToken);\n        // add new token to totalSupply\n        totalSupply = totalSupply.add(newToken);\n        LogMigrate(_from, _to, newToken);\n        Transfer(this,_to,newToken);\n    }\n\n    // migate token function for Nami Team\n    function migrateToken(address _from, address _to) public\n        onlyEscrow\n    {\n        _migrateToken(_from, _to);\n    }\n\n    // migrate token for investor\n    function migrateForInvestor() public {\n        _migrateToken(msg.sender, msg.sender);\n    }\n\n    // Nami internal exchange\n    \n    // event for Nami exchange\n    event TransferToBuyer(address indexed _from, address indexed _to, uint _value, address indexed _seller);\n    event TransferToExchange(address indexed _from, address indexed _to, uint _value, uint _price);\n    \n    \n        /**\n     * @dev Transfer the specified amount of tokens to the specified address.\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\n     *      The token transfer fails if the recipient is a contract\n     *      but does not implement the `tokenFallback` function\n     *      or the fallback function to receive funds.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     * @param _price price to sell token.\n     */\n     \n    function transferToExchange(address _to, uint _value, uint _price) public {\n        uint codeLength;\n        \n        assembly {\n            codeLength := extcodesize(_to)\n        }\n        \n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        Transfer(msg.sender,_to,_value);\n        if (codeLength > 0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallbackExchange(msg.sender, _value, _price);\n            TransferToExchange(msg.sender, _to, _value, _price);\n        }\n    }\n    \n    /**\n     * @dev Transfer the specified amount of tokens to the specified address.\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\n     *      The token transfer fails if the recipient is a contract\n     *      but does not implement the `tokenFallback` function\n     *      or the fallback function to receive funds.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     * @param _buyer address of seller.\n     */\n     \n    function transferToBuyer(address _to, uint _value, address _buyer) public {\n        uint codeLength;\n        \n        assembly {\n            codeLength := extcodesize(_to)\n        }\n        \n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        Transfer(msg.sender,_to,_value);\n        if (codeLength > 0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallbackBuyer(msg.sender, _value, _buyer);\n            TransferToBuyer(msg.sender, _to, _value, _buyer);\n        }\n    }\n//-------------------------------------------------------------------------------------------------------\n}\n\n\n/*\n* Binary option smart contract-------------------------------\n*/\ncontract BinaryOption {\n    /*\n     * binary option controled by escrow to buy NAC with good price\n     */\n    // NamiCrowdSale address\n    address public namiCrowdSaleAddr;\n    address public escrow;\n    \n    // namiMultiSigWallet\n    address public namiMultiSigWallet;\n    \n    Session public session;\n    uint public timeInvestInMinute = 30;\n    uint public timeOneSession = 180;\n    uint public sessionId = 1;\n    uint public rate = 190;\n    uint public constant MAX_INVESTOR = 20;\n    /**\n     * Events for binany option system\n     */\n    event SessionOpen(uint timeOpen, uint indexed sessionId);\n    event InvestClose(uint timeInvestClose, uint priceOpen, uint indexed sessionId);\n    event Invest(address indexed investor, bool choose, uint amount, uint timeInvest, uint indexed sessionId);\n    event SessionClose(uint timeClose, uint indexed sessionId, uint priceClose, uint nacPrice, uint rate);\n\n    event Deposit(address indexed sender, uint value);\n    /// @dev Fallback function allows to deposit ether.\n    function() public payable {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n    // there is only one session available at one timeOpen\n    // priceOpen is price of ETH in USD\n    // priceClose is price of ETH in USD\n    // process of one Session\n    // 1st: escrow reset session by run resetSession()\n    // 2nd: escrow open session by run openSession() => save timeOpen at this time\n    // 3rd: all investor can invest by run invest(), send minimum 0.1 ETH\n    // 4th: escrow close invest and insert price open for this Session\n    // 5th: escrow close session and send NAC for investor\n    struct Session {\n        uint priceOpen;\n        uint priceClose;\n        uint timeOpen;\n        bool isReset;\n        bool isOpen;\n        bool investOpen;\n        uint investorCount;\n        mapping(uint => address) investor;\n        mapping(uint => bool) win;\n        mapping(uint => uint) amountInvest;\n        mapping(address=> uint) investedSession;\n    }\n    \n    function BinaryOption(address _namiCrowdSale, address _escrow, address _namiMultiSigWallet) public {\n        require(_namiCrowdSale != 0x0 && _escrow != 0x0);\n        namiCrowdSaleAddr = _namiCrowdSale;\n        escrow = _escrow;\n        namiMultiSigWallet = _namiMultiSigWallet;\n    }\n    \n    \n    modifier onlyEscrow() {\n        require(msg.sender==escrow);\n        _;\n    }\n    \n        \n    modifier onlyNamiMultisig() {\n        require(msg.sender == namiMultiSigWallet);\n        _;\n    }\n    \n    // change escrow\n    function changeEscrow(address _escrow) public\n        onlyNamiMultisig\n    {\n        require(_escrow != 0x0);\n        escrow = _escrow;\n    }\n    \n    /// @dev Change time for investor can invest in one session, can only change at time not in session\n    /// @param _timeInvest time invest in minutes\n    function changeTimeInvest(uint _timeInvest)\n        public\n        onlyEscrow\n    {\n        require(!session.isOpen && _timeInvest < timeOneSession);\n        timeInvestInMinute = _timeInvest;\n    }\n    \n    // 100 < _rate < 200\n    // price of NAC for investor win = _rate/100\n    // price of NAC for investor loss = 2 - _rate/100\n    function changeRate(uint _rate)\n        public\n        onlyEscrow\n    {\n        require(100 < _rate && _rate < 200 && !session.isOpen);\n        rate = _rate;\n    }\n    \n    function changeTimeOneSession(uint _timeOneSession) \n        public\n        onlyEscrow\n    {\n        require(!session.isOpen && _timeOneSession > timeInvestInMinute);\n        timeOneSession = _timeOneSession;\n    }\n    \n    /// @dev withdraw ether to nami multisignature wallet, only escrow can call\n    /// @param _amount value ether in wei to withdraw\n    function withdrawEther(uint _amount) public\n        onlyEscrow\n    {\n        require(namiMultiSigWallet != 0x0);\n        // Available at any phase.\n        if (this.balance > 0) {\n            namiMultiSigWallet.transfer(_amount);\n        }\n    }\n    \n    /// @dev safe withdraw Ether to one of owner of nami multisignature wallet\n    /// @param _withdraw address to withdraw\n    function safeWithdraw(address _withdraw, uint _amount) public\n        onlyEscrow\n    {\n        NamiMultiSigWallet namiWallet = NamiMultiSigWallet(namiMultiSigWallet);\n        if (namiWallet.isOwner(_withdraw)) {\n            _withdraw.transfer(_amount);\n        }\n    }\n    \n    // @dev Returns list of owners.\n    // @return List of owner addresses.\n    // MAX_INVESTOR = 20\n    function getInvestors()\n        public\n        view\n        returns (address[20])\n    {\n        address[20] memory listInvestor;\n        for (uint i = 0; i < MAX_INVESTOR; i++) {\n            listInvestor[i] = session.investor[i];\n        }\n        return listInvestor;\n    }\n    \n    function getChooses()\n        public\n        view\n        returns (bool[20])\n    {\n        bool[20] memory listChooses;\n        for (uint i = 0; i < MAX_INVESTOR; i++) {\n            listChooses[i] = session.win[i];\n        }\n        return listChooses;\n    }\n    \n    function getAmount()\n        public\n        view\n        returns (uint[20])\n    {\n        uint[20] memory listAmount;\n        for (uint i = 0; i < MAX_INVESTOR; i++) {\n            listAmount[i] = session.amountInvest[i];\n        }\n        return listAmount;\n    }\n    \n    /// @dev reset all data of previous session, must run before open new session\n    // only escrow can call\n    function resetSession()\n        public\n        onlyEscrow\n    {\n        require(!session.isReset && !session.isOpen);\n        session.priceOpen = 0;\n        session.priceClose = 0;\n        session.isReset = true;\n        session.isOpen = false;\n        session.investOpen = false;\n        session.investorCount = 0;\n        for (uint i = 0; i < MAX_INVESTOR; i++) {\n            session.investor[i] = 0x0;\n            session.win[i] = false;\n            session.amountInvest[i] = 0;\n        }\n    }\n    \n    /// @dev Open new session, only escrow can call\n    function openSession ()\n        public\n        onlyEscrow\n    {\n        require(session.isReset && !session.isOpen);\n        session.isReset = false;\n        // open invest\n        session.investOpen = true;\n        session.timeOpen = now;\n        session.isOpen = true;\n        SessionOpen(now, sessionId);\n    }\n    \n    /// @dev Fuction for investor, minimun ether send is 0.1, one address can call one time in one session\n    /// @param _choose choise of investor, true is call, false is put\n    function invest (bool _choose)\n        public\n        payable\n    {\n        require(msg.value >= 100000000000000000 && session.investOpen); // msg.value >= 0.1 ether\n        require(now < (session.timeOpen + timeInvestInMinute * 1 minutes));\n        require(session.investorCount < MAX_INVESTOR && session.investedSession[msg.sender] != sessionId);\n        session.investor[session.investorCount] = msg.sender;\n        session.win[session.investorCount] = _choose;\n        session.amountInvest[session.investorCount] = msg.value;\n        session.investorCount += 1;\n        session.investedSession[msg.sender] = sessionId;\n        Invest(msg.sender, _choose, msg.value, now, sessionId);\n    }\n    \n    /// @dev close invest for escrow\n    /// @param _priceOpen price ETH in USD\n    function closeInvest (uint _priceOpen) \n        public\n        onlyEscrow\n    {\n        require(_priceOpen != 0 && session.investOpen);\n        require(now > (session.timeOpen + timeInvestInMinute * 1 minutes));\n        session.investOpen = false;\n        session.priceOpen = _priceOpen;\n        InvestClose(now, _priceOpen, sessionId);\n    }\n    \n    /// @dev get amount of ether to buy NAC for investor\n    /// @param _ether amount ether which investor invest\n    /// @param _rate rate between win and loss investor\n    /// @param _status true for investor win and false for investor loss\n    function getEtherToBuy (uint _ether, uint _rate, bool _status)\n        public\n        pure\n        returns (uint)\n    {\n        if (_status) {\n            return _ether * _rate / 100;\n        } else {\n            return _ether * (200 - _rate) / 100;\n        }\n    }\n\n    /// @dev close session, only escrow can call\n    /// @param _priceClose price of ETH in USD\n    function closeSession (uint _priceClose)\n        public\n        onlyEscrow\n    {\n        require(_priceClose != 0 && now > (session.timeOpen + timeOneSession * 1 minutes));\n        require(!session.investOpen && session.isOpen);\n        session.priceClose = _priceClose;\n        bool result = (_priceClose>session.priceOpen)?true:false;\n        uint etherToBuy;\n        NamiCrowdSale namiContract = NamiCrowdSale(namiCrowdSaleAddr);\n        uint price = namiContract.getPrice();\n        for (uint i = 0; i < session.investorCount; i++) {\n            if (session.win[i]==result) {\n                etherToBuy = getEtherToBuy(session.amountInvest[i], rate, true);\n            } else {\n                etherToBuy = getEtherToBuy(session.amountInvest[i], rate, false);\n            }\n            namiContract.buy.value(etherToBuy)(session.investor[i]);\n            // reset investor\n            session.investor[i] = 0x0;\n            session.win[i] = false;\n            session.amountInvest[i] = 0;\n        }\n        session.isOpen = false;\n        SessionClose(now, sessionId, _priceClose, price, rate);\n        sessionId += 1;\n        \n        // require(!session.isReset && !session.isOpen);\n        // reset state session\n        session.priceOpen = 0;\n        session.priceClose = 0;\n        session.isReset = true;\n        session.investOpen = false;\n        session.investorCount = 0;\n    }\n}\n\n\ncontract PresaleToken {\n    mapping (address => uint256) public balanceOf;\n    function burnTokens(address _owner) public;\n}\n\n /*\n * Contract that is working with ERC223 tokens\n */\n \n /**\n * @title Contract that will work with ERC223 tokens.\n */\n \ncontract ERC223ReceivingContract {\n/**\n * @dev Standard ERC223 function that will handle incoming token transfers.\n *\n * @param _from  Token sender address.\n * @param _value Amount of tokens.\n * @param _data  Transaction metadata.\n */\n    function tokenFallback(address _from, uint _value, bytes _data) public returns (bool success);\n    function tokenFallbackBuyer(address _from, uint _value, address _buyer) public returns (bool success);\n    function tokenFallbackExchange(address _from, uint _value, uint _price) public returns (bool success);\n}\n\n\n /*\n * Nami Internal Exchange smartcontract-----------------------------------------------------------------\n *\n */\n\ncontract NamiExchange {\n    using SafeMath for uint;\n    \n    function NamiExchange(address _namiAddress) public {\n        NamiAddr = _namiAddress;\n    }\n\n    event UpdateBid(address owner, uint price, uint balance);\n    event UpdateAsk(address owner, uint price, uint volume);\n\n    \n    mapping(address => OrderBid) public bid;\n    mapping(address => OrderAsk) public ask;\n    string public name = \"NacExchange\";\n    \n    /// address of Nami token\n    address NamiAddr;\n    \n    /// price of Nac = ETH/NAC\n    uint public price = 1;\n    uint public etherBalance=0;\n    uint public nacBalance=0;\n    // struct store order of user\n    struct OrderBid {\n        uint price;\n        uint eth;\n    }\n    \n    struct OrderAsk {\n        uint price;\n        uint volume;\n    }\n    \n        \n    // prevent lost ether\n    function() payable public {\n        require(msg.value > 0);\n        if (bid[msg.sender].price > 0) {\n            bid[msg.sender].eth = (bid[msg.sender].eth).add(msg.value);\n            etherBalance = etherBalance.add(msg.value);\n            UpdateBid(msg.sender, bid[msg.sender].price, bid[msg.sender].eth);\n        } else {\n            // refund\n            msg.sender.transfer(msg.value);\n        }\n        // test\n        // address test = \"0x70c932369fc1C76fde684FF05966A70b9c1561c1\";\n        // test.transfer(msg.value);\n    }\n\n    // prevent lost token\n    function tokenFallback(address _from, uint _value, bytes _data) public returns (bool success) {\n        require(_value > 0 && _data.length == 0);\n        if (ask[_from].price > 0) {\n            ask[_from].volume = (ask[_from].volume).add(_value);\n            nacBalance = nacBalance.add(_value);\n            UpdateAsk(_from, ask[_from].price, ask[_from].volume);\n            return true;\n        } else {\n            //refund\n            ERC23 asset = ERC23(NamiAddr);\n            asset.transfer(_from, _value);\n            return false;\n        }\n    }\n    \n    modifier onlyNami {\n        require(msg.sender == NamiAddr);\n        _;\n    }\n    \n    \n    /////////////////\n    // function about bid Order-----------------------------------------------------------\n    \n    function placeBuyOrder(uint _price) payable public {\n        require(_price > 0);\n        if (msg.value > 0) {\n            etherBalance += msg.value;\n            bid[msg.sender].eth = (bid[msg.sender].eth).add(msg.value);\n            UpdateBid(msg.sender, _price, bid[msg.sender].eth);\n        }\n        bid[msg.sender].price = _price;\n    }\n    \n    function tokenFallbackBuyer(address _from, uint _value, address _buyer) onlyNami public returns (bool success) {\n        ERC23 asset = ERC23(NamiAddr);\n        uint currentEth = bid[_buyer].eth;\n        if ((_value.div(bid[_buyer].price)) > currentEth) {\n            if (_from.send(currentEth) && asset.transfer(_buyer, currentEth.mul(bid[_buyer].price)) && asset.transfer(_from, _value - (currentEth.mul(bid[_buyer].price) ) ) ) {\n                bid[_buyer].eth = 0;\n                etherBalance = etherBalance.sub(currentEth);\n                UpdateBid(_buyer, bid[_buyer].price, bid[_buyer].eth);\n                return true;\n            } else {\n                // refund token\n                asset.transfer(_from, _value);\n                return false;\n            }\n        } else {\n            uint eth = _value.div(bid[_buyer].price);\n            if (_from.send(eth) && asset.transfer(_buyer, _value)) {\n                bid[_buyer].eth = (bid[_buyer].eth).sub(eth);\n                etherBalance = etherBalance.sub(eth);\n                UpdateBid(_buyer, bid[_buyer].price, bid[_buyer].eth);\n                return true;\n            } else {\n                // refund token\n                asset.transfer(_from, _value);\n                return false;\n            }\n        }\n    }\n    \n    function closeBidOrder() public {\n        require(bid[msg.sender].eth > 0 && bid[msg.sender].price > 0);\n        msg.sender.transfer(bid[msg.sender].eth);\n        etherBalance = etherBalance.sub(bid[msg.sender].eth);\n        bid[msg.sender].eth = 0;\n        UpdateBid(msg.sender, bid[msg.sender].price, bid[msg.sender].eth);\n    }\n    \n\n    ////////////////\n    // function about ask Order-----------------------------------------------------------\n    // place ask order by send NAC to contract\n    \n    function tokenFallbackExchange(address _from, uint _value, uint _price) onlyNami public returns (bool success) {\n        require(_price > 0);\n        if (_value > 0) {\n            nacBalance = nacBalance.add(_value);\n            ask[_from].volume = (ask[_from].volume).add(_value);\n            ask[_from].price = _price;\n            UpdateAsk(_from, _price, ask[_from].volume);\n            return true;\n        } else {\n            ask[_from].price = _price;\n            return false;\n        }\n    }\n    \n    function closeAskOrder() public {\n        require(ask[msg.sender].volume > 0 && ask[msg.sender].price > 0);\n        ERC23 asset = ERC23(NamiAddr);\n        if (asset.transfer(msg.sender, ask[msg.sender].volume)) {\n            nacBalance = nacBalance.sub(ask[msg.sender].volume);\n            ask[msg.sender].volume = 0;\n            UpdateAsk(msg.sender, ask[msg.sender].price, 0);\n        }\n    }\n    \n    function buyNac(address _seller) payable public returns (bool success) {\n        require(msg.value > 0 && ask[_seller].volume > 0 && ask[_seller].price > 0);\n        ERC23 asset = ERC23(NamiAddr);\n        uint maxEth = (ask[_seller].volume).div(ask[_seller].price);\n        if (msg.value > maxEth) {\n            if (_seller.send(maxEth) && msg.sender.send(msg.value.sub(maxEth)) && asset.transfer(msg.sender, ask[_seller].volume)) {\n                nacBalance = nacBalance.sub(ask[_seller].volume);\n                ask[_seller].volume = 0;\n                UpdateAsk(_seller, ask[_seller].price, 0);\n                return true;\n            } else {\n                //refund\n                return false;\n            }\n        } else {\n            if (_seller.send(msg.value) && asset.transfer(msg.sender, (msg.value).mul(ask[_seller].price))) {\n                uint nac = (msg.value).mul(ask[_seller].price);\n                nacBalance = nacBalance.sub(nac);\n                ask[_seller].volume = (ask[_seller].volume).sub(nac);\n                UpdateAsk(_seller, ask[_seller].price, ask[_seller].volume);\n                return true;\n            } else {\n                //refund\n                return false;\n            }\n        }\n    }\n}\n\ncontract ERC23 {\n  function balanceOf(address who) public constant returns (uint);\n  function transfer(address to, uint value) public returns (bool success);\n}\n\n\n\n/*\n* NamiMultiSigWallet smart contract-------------------------------\n*/\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\ncontract NamiMultiSigWallet {\n\n    uint constant public MAX_OWNER_COUNT = 50;\n\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Revocation(address indexed sender, uint indexed transactionId);\n    event Submission(uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event Deposit(address indexed sender, uint value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint required);\n\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] public owners;\n    uint public required;\n    uint public transactionCount;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n\n    modifier onlyWallet() {\n        require(msg.sender == address(this));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        require(!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require(isOwner[owner]);\n        _;\n    }\n\n    modifier transactionExists(uint transactionId) {\n        require(transactions[transactionId].destination != 0);\n        _;\n    }\n\n    modifier confirmed(uint transactionId, address owner) {\n        require(confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(uint transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(uint transactionId) {\n        require(!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require(_address != 0);\n        _;\n    }\n\n    modifier validRequirement(uint ownerCount, uint _required) {\n        require(!(ownerCount > MAX_OWNER_COUNT\n            || _required > ownerCount\n            || _required == 0\n            || ownerCount == 0));\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function() public payable {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    /*\n     * Public functions\n     */\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function NamiMultiSigWallet(address[] _owners, uint _required)\n        public\n        validRequirement(_owners.length, _required)\n    {\n        for (uint i = 0; i < _owners.length; i++) {\n            require(!(isOwner[_owners[i]] || _owners[i] == 0));\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++) {\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param owner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyWallet\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint i=0; i<owners.length; i++) {\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        OwnerRemoval(owner);\n        OwnerAddition(newOwner);\n    }\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        RequirementChange(_required);\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes data)\n        public\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n        public\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            // Transaction tx = transactions[transactionId];\n            transactions[transactionId].executed = true;\n            // tx.executed = true;\n            if (transactions[transactionId].destination.call.value(transactions[transactionId].value)(transactions[transactionId].data)) {\n                Execution(transactionId);\n            } else {\n                ExecutionFailure(transactionId);\n                transactions[transactionId].executed = false;\n            }\n        }\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n    }\n\n    /*\n     * Internal functions\n     */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes data)\n        internal\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination, \n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        Submission(transactionId);\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n        }\n    }\n\n    /// @dev Returns total number of transactions after filers are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i = 0; i < transactionCount; i++) {\n            if (pending && !transactions[i].executed || executed && transactions[i].executed)\n                count += 1;\n        }\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        constant\n        returns (address[])\n    {\n        return owners;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n        public\n        constant\n        returns (address[] _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        }\n        _confirmations = new address[](count);\n        for (i = 0; i < count; i++) {\n            _confirmations[i] = confirmationsTemp[i];\n        }\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n        public\n        constant\n        returns (uint[] _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i = 0; i < transactionCount; i++) {\n            if (pending && !transactions[i].executed || executed && transactions[i].executed) {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        }\n        _transactionIds = new uint[](to - from);\n        for (i = from; i < to; i++) {\n            _transactionIds[i - from] = transactionIdsTemp[i];\n        }\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"namiMultiSigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TRANSFERABLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextPhase\",\"type\":\"uint8\"}],\"name\":\"setPresalePhase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mgr\",\"type\":\"address\"}],\"name\":\"setCrowdsaleManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_withdraw\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"safeWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"transferToBuyer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"transferToExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"namiPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"binary\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeTransferable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferForTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"migrateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_binary\",\"type\":\"uint256\"}],\"name\":\"changeBinary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_escrow\",\"type\":\"address\"}],\"name\":\"changeEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"binaryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrateForInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_binaryAddress\",\"type\":\"address\"}],\"name\":\"changeBinaryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_escrow\",\"type\":\"address\"},{\"name\":\"_namiMultiSigWallet\",\"type\":\"address\"},{\"name\":\"_namiPresale\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newPhase\",\"type\":\"uint8\"}],\"name\":\"LogPhaseSwitch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogMigrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"TransferToBuyer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"TransferToExchange\",\"type\":\"event\"}]",
  "bytecode": "60606040526040805190810160405280600881526020017f4e616d692049434f00000000000000000000000000000000000000000000000081525060009080519060200190620000519291906200021d565b506040805190810160405280600381526020017f4e41430000000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f9291906200021d565b5060126002556000600360006101000a81548160ff02191690831515021790555060006004556000600560006101000a81548160ff02191690836004811115620000e557fe5b021790555060006006553415620000fb57600080fd5b6040516060806200312e8339810160405280805190602001909190805190602001909190805190602001909190505060008273ffffffffffffffffffffffffffffffffffffffff16141515156200015157600080fd5b82600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620002cc565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200026057805160ff191683800117855562000291565b8280016001018555821562000291579182015b828111156200029057825182559160200191906001019062000273565b5b509050620002a09190620002a4565b5090565b620002c991905b80821115620002c5576000816000905550600101620002ab565b5090565b90565b612e5280620002dc6000396000f3006060604052600436106101b7576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630321f836146101c2578063055ad42e1461021757806306fdde031461024e578063095ea7b3146102dc57806318160ddd146103365780631bfd68141461035f5780631ca2e94a1461038c57806323b872dd146103b2578063292005a21461042b578063313ce56714610454578063341176d61461047d5780633bed33ce146104d25780634defd1bf146104f55780635058c4601461052e57806370a082311461057057806378044ba5146105bd5780638d70c0ce1461061e57806390a9cc021461066957806395d89b41146106be57806398d5fdca1461074c578063a76044a414610775578063a9059cbb1461079e578063a99d8d48146107e0578063abc4cbd3146107f5578063b237f7d414610837578063cae9ca5114610870578063ce6d35d11461090d578063d579f9e814610965578063dcfcda2b14610988578063dd62ed3e146109c1578063dff2db7114610a2d578063e0c6d1ed14610a82578063e2fdcc1714610a97578063f088d54714610aec578063f5d9778914610b1a575b6101c033610b53565b005b34156101cd57600080fd5b6101d5610d95565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561022257600080fd5b61022a610dbb565b6040518082600481111561023a57fe5b60ff16815260200191505060405180910390f35b341561025957600080fd5b610261610dce565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102a1578082015181840152602081019050610286565b50505050905090810190601f1680156102ce5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102e757600080fd5b61031c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e6c565b604051808215151515815260200191505060405180910390f35b341561034157600080fd5b610349610f14565b6040518082815260200191505060405180910390f35b341561036a57600080fd5b610372610f1a565b604051808215151515815260200191505060405180910390f35b341561039757600080fd5b6103b0600480803560ff16906020019091905050610f2d565b005b34156103bd57600080fd5b610411600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061121a565b604051808215151515815260200191505060405180910390f35b341561043657600080fd5b61043e611362565b6040518082815260200191505060405180910390f35b341561045f57600080fd5b610467611372565b6040518082815260200191505060405180910390f35b341561048857600080fd5b610490611378565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104dd57600080fd5b6104f3600480803590602001909190505061139e565b005b341561050057600080fd5b61052c600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506114c8565b005b341561053957600080fd5b61056e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061159d565b005b341561057b57600080fd5b6105a7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611729565b6040518082815260200191505060405180910390f35b34156105c857600080fd5b61061c600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611741565b005b341561062957600080fd5b610667600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091905050611a62565b005b341561067457600080fd5b61067c611d48565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106c957600080fd5b6106d1611d6e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107115780820151818401526020810190506106f6565b50505050905090810190601f16801561073e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561075757600080fd5b61075f611e0c565b6040518082815260200191505060405180910390f35b341561078057600080fd5b610788611f5d565b6040518082815260200191505060405180910390f35b34156107a957600080fd5b6107de600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611f63565b005b34156107eb57600080fd5b6107f3611f8d565b005b341561080057600080fd5b610835600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612015565b005b341561084257600080fd5b61086e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612080565b005b341561087b57600080fd5b6108f3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050612308565b604051808215151515815260200191505060405180910390f35b341561091857600080fd5b610963600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506124a1565b005b341561097057600080fd5b610986600480803590602001909190505061250b565b005b341561099357600080fd5b6109bf600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612571565b005b34156109cc57600080fd5b610a17600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612637565b6040518082815260200191505060405180910390f35b3415610a3857600080fd5b610a4061265c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610a8d57600080fd5b610a95612682565b005b3415610aa257600080fd5b610aaa61268e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610b18600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b53565b005b3415610b2557600080fd5b610b51600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506126b4565b005b600060016004811115610b6257fe5b600560009054906101000a900460ff166004811115610b7d57fe5b141515610b8957600080fd5b635abc2c8042111580610be95750600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610bf457600080fd5b60003414151515610c0457600080fd5b610c0c611e0c565b340290506b033b2e3c9fd0803ce80000008160065401101515610c2e57600080fd5b610c8081600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461277a90919063ffffffff16565b600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cd88160065461277a90919063ffffffff16565b6006819055508173ffffffffffffffffffffffffffffffffffffffff167f4f79409f494e81c38036d80aa8a6507c2cb08d90bfb2fead5519447646b3497e826040518082815260200191505060405180910390a28173ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900460ff1681565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e645780601f10610e3957610100808354040283529160200191610e64565b820191906000526020600020905b815481529060010190602001808311610e4757829003601f168201915b505050505081565b6000600360009054906101000a900460ff161515610e8957600080fd5b81600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b60065481565b600360009054906101000a900460ff1681565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f8b57600080fd5b60006004811115610f9857fe5b600560009054906101000a900460ff166004811115610fb357fe5b148015610fd6575060016004811115610fc857fe5b826004811115610fd457fe5b145b80611028575060016004811115610fe957fe5b600560009054906101000a900460ff16600481111561100457fe5b14801561102757506002600481111561101957fe5b82600481111561102557fe5b145b5b806110ef57506001600481111561103b57fe5b600560009054906101000a900460ff16600481111561105657fe5b148061108757506002600481111561106a57fe5b600560009054906101000a900460ff16600481111561108557fe5b145b80156110a957506003600481111561109b57fe5b8260048111156110a757fe5b145b80156110ee57506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b5b8061114157506002600481111561110257fe5b600560009054906101000a900460ff16600481111561111d57fe5b14801561114057506001600481111561113257fe5b82600481111561113e57fe5b145b5b806111a057506003600481111561115457fe5b600560009054906101000a900460ff16600481111561116f57fe5b148015611191575060048081111561118357fe5b82600481111561118f57fe5b145b801561119f57506000600654145b5b90508015156111ae57600080fd5b81600560006101000a81548160ff021916908360048111156111cc57fe5b02179055507f8d9efa3fab1bd6476defa44f520afbf9337886a4947021fd7f2775e0efaf4571826040518082600481111561120357fe5b60ff16815260200191505060405180910390a15050565b6000600360009054906101000a900460ff16151561123757600080fd5b600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156112c257600080fd5b81600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550611357848484612798565b600190509392505050565b6b033b2e3c9fd0803ce800000081565b60025481565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113fa57600080fd5b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561144257600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff163111156114c557600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015156114c457600080fd5b5b50565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561152457600080fd5b6003600481111561153157fe5b600560009054906101000a900460ff16600481111561154c57fe5b1415151561155957600080fd5b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115fb57600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16632f54bf6e846000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15156116c357600080fd5b6102c65a03f115156116d457600080fd5b5050506040518051905015611724578273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050151561172357600080fd5b5b505050565b600c6020528060005260406000206000915090505481565b600080843b915061179a84600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612aae90919063ffffffff16565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061182f84600c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461277a90919063ffffffff16565b600c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a36000821115611a5b578490508073ffffffffffffffffffffffffffffffffffffffff166309c716903386866000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050602060405180830381600087803b15156119c257600080fd5b6102c65a03f115156119d357600080fd5b50505060405180519050508273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f7051b075ffda80300623a0c664d9583af6ff4153a784b041e17c2505eb758e25876040518082815260200191505060405180910390a45b5050505050565b600080843b9150611abb84600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612aae90919063ffffffff16565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b5084600c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461277a90919063ffffffff16565b600c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a36000821115611d41578490508073ffffffffffffffffffffffffffffffffffffffff1663cd8d8da03386866000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050602060405180830381600087803b1515611cb757600080fd5b6102c65a03f11515611cc857600080fd5b50505060405180519050508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fb52303b2c118351a837187237ba9792c0733fe98fe5697c787d0f07116c2d8d58686604051808381526020018281526020019250505060405180910390a35b5050505050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e045780601f10611dd957610100808354040283529160200191611e04565b820191906000526020600020905b815481529060010190602001808311611de757829003601f168201915b505050505081565b6000635a725880421015611e2457610d7a9050611f5a565b42635a725880108015611e3b5750635a7b93004211155b15611e4a576109609050611f5a565b42635a7b9300108015611e615750635a84cd804211155b15611e70576108fc9050611f5a565b42635a84cd80108015611e875750635a8e08004211155b15611e96576108989050611f5a565b42635a8e0800108015611ead5750635a9742804211155b15611ebc576108349050611f5a565b42635a974280108015611ed35750635aa07d004211155b15611ee2576107d09050611f5a565b42635aa07d00108015611ef95750635aa9b7804211155b15611f085761076c9050611f5a565b42635aa9b780108015611f1f5750635ab2f2004211155b15611f2e576107089050611f5a565b42635ab2f200108015611f455750635abc2c804211155b15611f54576106a49050611f5a565b60045490505b90565b60045481565b600360009054906101000a900460ff161515611f7e57600080fd5b611f89338383612798565b5050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611fe957600080fd5b600360009054906101000a900460ff1615600360006101000a81548160ff021916908315150217905550565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561207157600080fd5b61207c338383612798565b5050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156120de57600080fd5b600360048111156120eb57fe5b600560009054906101000a900460ff16600481111561210657fe5b14151561211257600080fd5b600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811415151561216457600080fd5b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806006600082825403925050819055508173ffffffffffffffffffffffffffffffffffffffff167f38d762ef507761291a578e921acfe29c1af31a7331ea03e391cf16cfc4d4f581826040518082815260200191505060405180910390a2600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a360006006541415612304576004600560006101000a81548160ff021916908360048111156122b857fe5b02179055507f8d9efa3fab1bd6476defa44f520afbf9337886a4947021fd7f2775e0efaf45716004604051808260048111156122f057fe5b60ff16815260200191505060405180910390a15b5050565b600080600360009054906101000a900460ff16151561232657600080fd5b8490506123338585610e6c565b15612498578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561242d578082015181840152602081019050612412565b50505050905090810190601f16801561245a5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561247b57600080fd5b6102c65a03f1151561248c57600080fd5b50505060019150612499565b5b509392505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156124fd57600080fd5b6125078282612ac7565b5050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561256757600080fd5b8060048190555050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156125cd57600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff16141515156125f357600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600d602052816000526040600020602052806000526040600020600091509150505481565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61268c3333612ac7565b565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561271057600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff161415151561273657600080fd5b80600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080828401905083811015151561278e57fe5b8091505092915050565b6000808373ffffffffffffffffffffffffffffffffffffffff16141515156127bf57600080fd5b81600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561280d57600080fd5b600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111151561289b57600080fd5b600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905081600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a380600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401141515612aa857fe5b50505050565b6000828211151515612abc57fe5b818303905092915050565b600080600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508173ffffffffffffffffffffffffffffffffffffffff166370a08231856000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515612b9257600080fd5b6102c65a03f11515612ba357600080fd5b505050604051805190509050600081111515612bbe57600080fd5b8173ffffffffffffffffffffffffffffffffffffffff1663b237f7d4856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1515612c5857600080fd5b6102c65a03f11515612c6957600080fd5b505050612cbe81600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461277a90919063ffffffff16565b600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612d168160065461277a90919063ffffffff16565b6006819055507ff0fee1f70845d356d6a3e0baa0944ce846437b6469ea89416dad2cd7067919a4848483604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a18273ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050505600a165627a7a723058204de28bdd2bb77832c4628d306defc38b5d2b0b6d80372994619d3a2112e9b3a30029000000000000000000000000ca293800147768bece42669bb29995f1b238d4560000000000000000000000004e237f139582708a592a14034b3c1a5b38da45a60000000000000000000000008f2ecccc42ed88348ad39a1985188dc57d75bdf0",
  "constructorArguments": "000000000000000000000000ca293800147768bece42669bb29995f1b238d4560000000000000000000000004e237f139582708a592a14034b3c1a5b38da45a60000000000000000000000008f2ecccc42ed88348ad39a1985188dc57d75bdf0"
}