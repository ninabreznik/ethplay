{
  "address": "0xa71bb37f2334eaee518f34057a693220835b8d7d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EremitCash",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-20\n*/\n\npragma solidity ^0.4.19;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\n\ncontract EremitCash{\n\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\taddress public owner;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\tmapping (address => uint256) public freezeOf;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    // This generates a public event on the blockchain that will notify clients\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\t\n\t/* This notifies clients about the amount frozen */\n    event Freeze(address indexed from, uint256 value);\n\t\n\t/* This notifies clients about the amount unfrozen */\n    event Unfreeze(address indexed from, uint256 value);\n\t\n\tevent Mint(uint256 _value);\n\n    /**\n     * Constructor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    constructor(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n\t\towner = msg.sender;\n    }\n\t\n\tfunction safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a * b;\n\t\tassert(a == 0 || c / a == b);\n\t\treturn c;\n    }\n\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b > 0);\n\t\tuint256 c = a / b;\n\t\tassert(a == b * c + a % b);\n\t\treturn c;\n    }\n\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n   }\n\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\tassert(c>=a && c>=b);\n\t\treturn c;\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` on behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\t\n\t/**\n     * mint tokens\n     *\n     * add `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to mint\n     */\n    function mint(uint256 _value) public returns (bool success) {\n\t\trequire((msg.sender == owner));             // Only the owner can do this\n        balanceOf[msg.sender] += _value;            // add coin for sender\n        totalSupply += _value;                      // Updates totalSupply\n        emit Mint(_value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n\t\n\tfunction freeze(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);            // Check if the sender has enough\n\t\trequire(_value > 0); \n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n        freezeOf[msg.sender] = safeAdd(freezeOf[msg.sender], _value);                                // Updates totalSupply\n        emit Freeze(msg.sender, _value);\n        return true;\n    }\n\t\n\tfunction unfreeze(uint256 _value) public returns (bool success) {\n        require(freezeOf[msg.sender] >= _value);            // Check if the sender has enough\n\t\trequire(_value > 0); \n        freezeOf[msg.sender] = safeSub(freezeOf[msg.sender], _value);                      // Subtract from the sender\n\t\tbalanceOf[msg.sender] = safeAdd(balanceOf[msg.sender], _value);\n        emit Unfreeze(msg.sender, _value);\n        return true;\n    }\n}",
  "bytecode": "60806040526002805460ff1916601217905534801561001d57600080fd5b50604051610dd6380380610dd683398101604090815281516020808401518385015160025460ff16600a0a84026003819055600160a060020a0333166000908152600585529586205590850180519395909491019261007e928501906100b7565b5080516100929060019060208401906100b7565b505060048054600160a060020a03191633600160a060020a0316179055506101529050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100f857805160ff1916838001178555610125565b82800160010185558215610125579182015b8281111561012557825182559160200191906001019061010a565b50610131929150610135565b5090565b61014f91905b80821115610131576000815560010161013b565b90565b610c75806101616000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f57806318160ddd146101b757806323b872dd146101de578063313ce5671461020857806342966c68146102335780636623fc461461024b57806370a082311461026357806379cc6790146102845780638da5cb5b146102a857806395d89b41146102d9578063a0712d68146102ee578063a9059cbb14610306578063cae9ca511461032a578063cd4217c114610393578063d7a78db8146103b4578063dd62ed3e146103cc575b600080fd5b34801561010157600080fd5b5061010a6103f3565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014457818101518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018b57600080fd5b506101a3600160a060020a0360043516602435610481565b604080519115158252519081900360200190f35b3480156101c357600080fd5b506101cc6104eb565b60408051918252519081900360200190f35b3480156101ea57600080fd5b506101a3600160a060020a03600435811690602435166044356104f1565b34801561021457600080fd5b5061021d610568565b6040805160ff9092168252519081900360200190f35b34801561023f57600080fd5b506101a3600435610571565b34801561025757600080fd5b506101a36004356105fb565b34801561026f57600080fd5b506101cc600160a060020a03600435166106d9565b34801561029057600080fd5b506101a3600160a060020a03600435166024356106eb565b3480156102b457600080fd5b506102bd6107c7565b60408051600160a060020a039092168252519081900360200190f35b3480156102e557600080fd5b5061010a6107d6565b3480156102fa57600080fd5b506101a3600435610830565b34801561031257600080fd5b506101a3600160a060020a03600435166024356108b1565b34801561033657600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101a3948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506108c79650505050505050565b34801561039f57600080fd5b506101cc600160a060020a03600435166109fe565b3480156103c057600080fd5b506101a3600435610a10565b3480156103d857600080fd5b506101cc600160a060020a0360043581169060243516610aee565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104795780601f1061044e57610100808354040283529160200191610479565b820191906000526020600020905b81548152906001019060200180831161045c57829003601f168201915b505050505081565b600160a060020a03338116600081815260066020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60035481565b600160a060020a0380841660009081526006602090815260408083203390941683529290529081205482111561052657600080fd5b600160a060020a038085166000908152600660209081526040808320339094168352929052208054839003905561055e848484610b0b565b5060019392505050565b60025460ff1681565b600160a060020a03331660009081526005602052604081205482111561059657600080fd5b600160a060020a03331660008181526005602090815260409182902080548690039055600380548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b600160a060020a03331660009081526007602052604081205482111561062057600080fd5b6000821161062d57600080fd5b600160a060020a0333166000908152600760205260409020546106509083610c13565b600160a060020a03331660009081526007602090815260408083209390935560059052205461067f9083610c25565b600160a060020a033316600081815260056020908152604091829020939093558051858152905191927f2cfce4af01bcb9d6cf6c84ee1b7c491100b8695368264146a94d71e10a63083f92918290030190a2506001919050565b60056020526000908152604090205481565b600160a060020a03821660009081526005602052604081205482111561071057600080fd5b600160a060020a038084166000908152600660209081526040808320339094168352929052205482111561074357600080fd5b600160a060020a038084166000818152600560209081526040808320805488900390556006825280832033909516835293815290839020805486900390556003805486900390558251858152925191927fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5929081900390910190a250600192915050565b600454600160a060020a031681565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104795780601f1061044e57610100808354040283529160200191610479565b60045460009033600160a060020a0390811691161461084e57600080fd5b600160a060020a0333166000908152600560209081526040918290208054850190556003805485019055815184815291517f07883703ed0e86588a40d76551c92f8a4b329e3bf19765e0e6749473c1a846659281900390910190a1506001919050565b60006108be338484610b0b565b50600192915050565b6000836108d48185610481565b156109f65780600160a060020a0316638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561098a578181015183820152602001610972565b50505050905090810190601f1680156109b75780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156109d957600080fd5b505af11580156109ed573d6000803e3d6000fd5b50505050600191505b509392505050565b60076020526000908152604090205481565b600160a060020a033316600090815260056020526040812054821115610a3557600080fd5b60008211610a4257600080fd5b600160a060020a033316600090815260056020526040902054610a659083610c13565b600160a060020a033316600090815260056020908152604080832093909355600790522054610a949083610c25565b600160a060020a033316600081815260076020908152604091829020939093558051858152905191927ff97a274face0b5517365ad396b1fdba6f68bd3135ef603e44272adba3af5a1e092918290030190a2506001919050565b600660209081526000928352604080842090915290825290205481565b6000600160a060020a0383161515610b2257600080fd5b600160a060020a038416600090815260056020526040902054821115610b4757600080fd5b600160a060020a0383166000908152600560205260409020548281011015610b6e57600080fd5b50600160a060020a038083166000818152600560209081526040808320805495891680855282852080548981039091559486905281548801909155815187815291519390950194927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600160a060020a03808416600090815260056020526040808220549287168252902054018114610c0d57fe5b50505050565b600082821115610c1f57fe5b50900390565b6000828201838110801590610c3a5750828110155b1515610c4257fe5b93925050505600a165627a7a72305820a902b577a67effc2b95aeb2400e01751161f977ad7b745c39153258b3946144200290000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000a4572656d6974436173680000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044552434800000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000a4572656d6974436173680000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044552434800000000000000000000000000000000000000000000000000000000"
}