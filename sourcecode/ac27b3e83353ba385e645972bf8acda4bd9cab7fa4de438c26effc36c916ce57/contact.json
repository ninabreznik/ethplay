{
  "address": "0x6911270d4bc1915744aedd785d41d44f47245bd0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "QPay Token",
  "contractName": "QPay",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-07\n*/\n\n/**Quanta Pay-Qpay (QPY) previous contract was \n0x2fe0bc5ffb80a84739da913f0a393a4b0cce661b\ndeprecated. QPay new contract initiated. Visit project : https://quantaex.com\nand https://qpay.group for detaails. */\n\n\npragma solidity ^0.4.21;\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b > 0);\n    uint256 c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\ncontract QPay is SafeMath{\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\taddress public owner;\n\n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOf;\n\tmapping (address => uint256) public freezeOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* This notifies clients about the amount burnt */\n    event Burn(address indexed from, uint256 value);\n\t\n\t/* This notifies clients about the amount frozen */\n    event Freeze(address indexed from, uint256 value);\n\t\n\t/* This notifies clients about the amount unfrozen */\n    event Unfreeze(address indexed from, uint256 value);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function QPay(\n        uint256 initialSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol\n        ) {\n        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n        totalSupply = initialSupply;                        // Update total supply\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n        decimals = decimalUnits;                            // Amount of decimals for display purposes\n\t\towner = msg.sender;\n    }\n\n    /* Send coins */\n    function transfer(address _to, uint256 _value) {\n        if (_to == 0x0) throw;                               // Prevent transfer to 0x0 address. Use burn() instead\n\t\tif (_value <= 0) throw; \n        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                     // Subtract from the sender\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n    }\n\n    /* Allow another contract to spend some tokens in your behalf */\n    function approve(address _spender, uint256 _value)\n        returns (bool success) {\n\t\tif (_value <= 0) throw; \n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n       \n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (_to == 0x0) throw;                                // Prevent transfer to 0x0 address. Use burn() instead\n\t\tif (_value <= 0) throw; \n        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n        if (_value > allowance[_from][msg.sender]) throw;     // Check allowance\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           // Subtract from the sender\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function burn(uint256 _value) returns (bool success) {\n        if (balanceOf[msg.sender] < _value) throw;            // Check if the sender has enough\n\t\tif (_value <= 0) throw; \n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n        totalSupply = SafeMath.safeSub(totalSupply,_value);                                // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n\t\n\tfunction freeze(uint256 _value) returns (bool success) {\n        if (balanceOf[msg.sender] < _value) throw;            // Check if the sender has enough\n\t\tif (_value <= 0) throw; \n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);                                // Updates totalSupply\n        Freeze(msg.sender, _value);\n        return true;\n    }\n\t\n\tfunction unfreeze(uint256 _value) returns (bool success) {\n        if (freezeOf[msg.sender] < _value) throw;            // Check if the sender has enough\n\t\tif (_value <= 0) throw; \n        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);                      // Subtract from the sender\n\t\tbalanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\n        Unfreeze(msg.sender, _value);\n        return true;\n    }\n\t\n\t// transfer balance to owner\n\tfunction withdrawEther(uint256 amount) {\n\t\tif(msg.sender != owner)throw;\n\t\towner.transfer(amount);\n\t}\n\t\n\t// can not accept ether\n\tfunction() {\nrevert();    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b604051610c55380380610c55833981016040528080519190602001805182019190602001805191906020018051600160a060020a0333166000908152600560205260408120879055600387905592019190508380516100729291602001906100be565b5060018180516100869291602001906100be565b50506002805460ff191660ff92909216919091179055505060048054600160a060020a03191633600160a060020a0316179055610159565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100ff57805160ff191683800117855561012c565b8280016001018555821561012c579182015b8281111561012c578251825591602001919060010190610111565b5061013892915061013c565b5090565b61015691905b808211156101385760008155600101610142565b90565b610aed806101686000396000f3006060604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ea578063095ea7b31461017457806318160ddd146101aa57806323b872dd146101cf578063313ce567146101f75780633bed33ce1461022057806342966c68146102385780636623fc461461024e57806370a08231146102645780638da5cb5b1461028357806395d89b41146102b2578063a9059cbb146102c5578063cd4217c1146102e7578063d7a78db814610306578063dd62ed3e1461031c575b34156100e557600080fd5b600080fd5b34156100f557600080fd5b6100fd610341565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610139578082015183820152602001610121565b50505050905090810190601f1680156101665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017f57600080fd5b610196600160a060020a03600435166024356103df565b604051901515815260200160405180910390f35b34156101b557600080fd5b6101bd61041e565b60405190815260200160405180910390f35b34156101da57600080fd5b610196600160a060020a0360043581169060243516604435610424565b341561020257600080fd5b61020a6105c9565b60405160ff909116815260200160405180910390f35b341561022b57600080fd5b6102366004356105d2565b005b341561024357600080fd5b610196600435610623565b341561025957600080fd5b6101966004356106e7565b341561026f57600080fd5b6101bd600160a060020a03600435166107c6565b341561028e57600080fd5b6102966107d8565b604051600160a060020a03909116815260200160405180910390f35b34156102bd57600080fd5b6100fd6107e7565b34156102d057600080fd5b610236600160a060020a0360043516602435610852565b34156102f257600080fd5b6101bd600160a060020a036004351661096f565b341561031157600080fd5b610196600435610981565b341561032757600080fd5b6101bd600160a060020a0360043581169060243516610a60565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103d75780601f106103ac576101008083540402835291602001916103d7565b820191906000526020600020905b8154815290600101906020018083116103ba57829003601f168201915b505050505081565b60008082116103ed57600080fd5b50600160a060020a033381166000908152600760209081526040808320938616835292905220819055600192915050565b60035481565b6000600160a060020a038316151561043b57600080fd5b6000821161044857600080fd5b600160a060020a0384166000908152600560205260409020548290101561046e57600080fd5b600160a060020a038316600090815260056020526040902054828101101561049557600080fd5b600160a060020a03808516600090815260076020908152604080832033909416835292905220548211156104c857600080fd5b600160a060020a0384166000908152600560205260409020546104eb9083610a7d565b600160a060020a03808616600090815260056020526040808220939093559085168152205461051a9083610a91565b600160a060020a0380851660009081526005602090815260408083209490945587831682526007815283822033909316825291909152205461055c9083610a7d565b600160a060020a03808616600081815260076020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60025460ff1681565b60045433600160a060020a039081169116146105ed57600080fd5b600454600160a060020a031681156108fc0282604051600060405180830381858888f19350505050151561062057600080fd5b50565b600160a060020a0333166000908152600560205260408120548290101561064957600080fd5b6000821161065657600080fd5b600160a060020a0333166000908152600560205260409020546106799083610a7d565b600160a060020a03331660009081526005602052604090205560035461069f9083610a7d565b600355600160a060020a0333167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a2506001919050565b600160a060020a0333166000908152600660205260408120548290101561070d57600080fd5b6000821161071a57600080fd5b600160a060020a03331660009081526006602052604090205461073d9083610a7d565b600160a060020a03331660009081526006602090815260408083209390935560059052205461076c9083610a91565b600160a060020a0333166000818152600560205260409081902092909255907f2cfce4af01bcb9d6cf6c84ee1b7c491100b8695368264146a94d71e10a63083f9084905190815260200160405180910390a2506001919050565b60056020526000908152604090205481565b600454600160a060020a031681565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103d75780601f106103ac576101008083540402835291602001916103d7565b600160a060020a038216151561086757600080fd5b6000811161087457600080fd5b600160a060020a0333166000908152600560205260409020548190101561089a57600080fd5b600160a060020a03821660009081526005602052604090205481810110156108c157600080fd5b600160a060020a0333166000908152600560205260409020546108e49082610a7d565b600160a060020a0333811660009081526005602052604080822093909355908416815220546109139082610a91565b600160a060020a0380841660008181526005602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35050565b60066020526000908152604090205481565b600160a060020a033316600090815260056020526040812054829010156109a757600080fd5b600082116109b457600080fd5b600160a060020a0333166000908152600560205260409020546109d79083610a7d565b600160a060020a033316600090815260056020908152604080832093909355600690522054610a069083610a91565b600160a060020a0333166000818152600660205260409081902092909255907ff97a274face0b5517365ad396b1fdba6f68bd3135ef603e44272adba3af5a1e09084905190815260200160405180910390a2506001919050565b600760209081526000928352604080842090915290825290205481565b6000610a8b83831115610ab5565b50900390565b6000828201610aae848210801590610aa95750838210155b610ab5565b9392505050565b80151561062057600080fd00a165627a7a723058208600dcc293c19b437ebd80285d537fc8b8813f396fdec1ffccc7b871f3af3da500290000000000000000000000000000000000000000033b2e3c9fd0803ce80000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000004515061790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035150590000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000033b2e3c9fd0803ce80000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000004515061790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035150590000000000000000000000000000000000000000000000000000000000"
}