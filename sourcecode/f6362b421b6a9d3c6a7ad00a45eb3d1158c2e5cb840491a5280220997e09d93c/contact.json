{
  "address": "0xacaca5b8805636608e14c64b0bfffc2deb2c6cec",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ROMToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-13\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n      if (_a == 0) {\n          return 0;\n        }\n      uint256 c = _a * _b;\n      assert(c / _a == _b);\n      return c;\n      \n  }\n\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n      require(_b > 0);\n      uint256 c = _a / _b;\n      return c;\n  }\n\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n      assert(_b <= _a);\n      uint256 c = _a - _b;\n      return c;\n  }\n\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n      uint256 c = _a + _b;\n      assert(c >= _a);\n      return c;\n  }\n}\n\ncontract ERC20 {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function allowance(address _owner, address _spender) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  function approve(address _spender, uint256 _value) public returns (bool);\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20 {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n  mapping (address => mapping (address => uint256)) internal allowed;\n  uint256 totalSupply_;\n\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n}\n\ncontract ROMToken is StandardToken{\n    using SafeMath for uint256;\n    \n    string public name=\"ROMToken\";\n    string public symbol=\"ROM\";\n    uint256 public decimals=18;\n    address owner;\n    \n    event Burn(uint256 amount);\n    event Mint(uint256 amount);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    constructor(uint256 initialSupply) public {\n        totalSupply_ = initialSupply * (10 ** decimals);\n        balances[msg.sender]=totalSupply_;\n        owner=msg.sender;\n    }\n    \n    function mint(uint256 _amount) onlyOwner public returns (bool) {\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[owner] = balances[owner].add(_amount);\n        emit Mint(_amount);\n        return true;\n    }\n    \n    function burn(uint256 _value) onlyOwner public returns (bool) {\n        require(0 < _value && _value <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(_value);\n        return true;\n    }\n}",
  "bytecode": "60c0604052600860808190527f524f4d546f6b656e00000000000000000000000000000000000000000000000060a090815261003e91600391906100de565b506040805180820190915260038082527f524f4d00000000000000000000000000000000000000000000000000000000006020909201918252610083916004916100de565b50601260055534801561009557600080fd5b506040516020806109868339810160409081529051600554600a0a0260028190553360008181526020819052929092205560068054600160a060020a0319169091179055610179565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011f57805160ff191683800117855561014c565b8280016001018555821561014c579182015b8281111561014c578251825591602001919060010190610131565b5061015892915061015c565b5090565b61017691905b808211156101585760008155600101610162565b90565b6107fe806101886000396000f3006080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100b3578063095ea7b31461013d57806318160ddd1461017557806323b872dd1461019c578063313ce567146101c657806342966c68146101db57806370a08231146101f357806395d89b4114610214578063a0712d6814610229578063a9059cbb14610241578063dd62ed3e14610265575b600080fd5b3480156100bf57600080fd5b506100c861028c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101025781810151838201526020016100ea565b50505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014957600080fd5b50610161600160a060020a036004351660243561031a565b604080519115158252519081900360200190f35b34801561018157600080fd5b5061018a610380565b60408051918252519081900360200190f35b3480156101a857600080fd5b50610161600160a060020a0360043581169060243516604435610386565b3480156101d257600080fd5b5061018a6104a8565b3480156101e757600080fd5b506101616004356104ae565b3480156101ff57600080fd5b5061018a600160a060020a0360043516610573565b34801561022057600080fd5b506100c861058e565b34801561023557600080fd5b506101616004356105e9565b34801561024d57600080fd5b50610161600160a060020a036004351660243561069e565b34801561027157600080fd5b5061018a600160a060020a036004358116906024351661077d565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103125780601f106102e757610100808354040283529160200191610312565b820191906000526020600020905b8154815290600101906020018083116102f557829003601f168201915b505050505081565b336000818152600160209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60025490565b6000600160a060020a038316151561039d57600080fd5b600160a060020a0384166000908152602081905260409020546103c6908363ffffffff6107a816565b600160a060020a0380861660009081526020819052604080822093909355908516815220546103fb908363ffffffff6107bc16565b600160a060020a0380851660009081526020818152604080832094909455918716815260018252828120338252909152205461043d908363ffffffff6107a816565b600160a060020a03808616600081815260016020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60055481565b600654600090600160a060020a031633146104c857600080fd5b8160001080156104e75750336000908152602081905260409020548211155b15156104f257600080fd5b33600090815260208190526040902054610512908363ffffffff6107a816565b33600090815260208190526040902055600254610535908363ffffffff6107a816565b6002556040805183815290517fb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb9181900360200190a1506001919050565b600160a060020a031660009081526020819052604090205490565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103125780601f106102e757610100808354040283529160200191610312565b600654600090600160a060020a0316331461060357600080fd5b600254610616908363ffffffff6107bc16565b600255600654600160a060020a0316600090815260208190526040902054610644908363ffffffff6107bc16565b600654600160a060020a03166000908152602081815260409182902092909255805184815290517f07883703ed0e86588a40d76551c92f8a4b329e3bf19765e0e6749473c1a84665929181900390910190a1506001919050565b336000908152602081905260408120548211156106ba57600080fd5b600160a060020a03831615156106cf57600080fd5b336000908152602081905260409020546106ef908363ffffffff6107a816565b3360009081526020819052604080822092909255600160a060020a03851681522054610721908363ffffffff6107bc16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600080838311156107b557fe5b5050900390565b6000828201838110156107cb57fe5b93925050505600a165627a7a72305820a03aa602c68108c63b6428d2453147ddf62f4d7354bfadaab3515f828e43702f0029000000000000000000000000000000000000000000000000000000517da02c00",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000517da02c00"
}