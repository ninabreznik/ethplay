{
  "address": "0x2d6c469497388239fe4fe4062a89c1ea68e1e84e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SaverProxy",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-20\n*/\n\npragma solidity ^0.5.0;\n\ncontract TokenInterface {\n    function allowance(address, address) public returns (uint);\n    function balanceOf(address) public returns (uint);\n    function approve(address, uint) public;\n    function transfer(address, uint) public returns (bool);\n    function transferFrom(address, address, uint) public returns (bool);\n    function deposit() public payable;\n    function withdraw(uint) public;\n}\n\ncontract PipInterface {\n    function read() public returns (bytes32);\n}\n\ncontract PepInterface {\n    function peek() public returns (bytes32, bool);\n}\n\ncontract VoxInterface {\n    function par() public returns (uint);\n}\n\ncontract TubInterface {\n    event LogNewCup(address indexed lad, bytes32 cup);\n\n    function open() public returns (bytes32);\n    function join(uint) public;\n    function exit(uint) public;\n    function lock(bytes32, uint) public;\n    function free(bytes32, uint) public;\n    function draw(bytes32, uint) public;\n    function wipe(bytes32, uint) public;\n    function give(bytes32, address) public;\n    function shut(bytes32) public;\n    function bite(bytes32) public;\n    function cups(bytes32) public returns (address, uint, uint, uint);\n    function gem() public returns (TokenInterface);\n    function gov() public returns (TokenInterface);\n    function skr() public returns (TokenInterface);\n    function sai() public returns (TokenInterface);\n    function vox() public returns (VoxInterface);\n    function ask(uint) public returns (uint);\n    function mat() public returns (uint);\n    function chi() public returns (uint);\n    function ink(bytes32) public returns (uint);\n    function tab(bytes32) public returns (uint);\n    function rap(bytes32) public returns (uint);\n    function per() public returns (uint);\n    function pip() public returns (PipInterface);\n    function pep() public returns (PepInterface);\n    function tag() public returns (uint);\n    function drip() public;\n    function lad(bytes32 cup) public view returns (address);\n}\n\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint supply);\n    function balanceOf(address _owner) external view returns (uint balance);\n    function transfer(address _to, uint _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n    function approve(address _spender, uint _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\n    function decimals() external view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ninterface ExchangeInterface {\n    function swapEtherToToken (uint _ethAmount, address _tokenAddress, uint _maxAmount) payable external returns(uint, uint);\n    function swapTokenToEther (address _tokenAddress, uint _amount, uint _maxAmount) external returns(uint);\n\n    function getExpectedRate(address src, address dest, uint srcQty) external\n        returns (uint expectedRate, uint slippageRate);\n}\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\ncontract SaverLogger {\n    event Repay(uint indexed cdpId, address indexed owner, uint collateralAmount, uint daiAmount);\n    event Boost(uint indexed cdpId, address indexed owner, uint daiAmount, uint collateralAmount);\n\n    function LogRepay(uint _cdpId, address _owner, uint _collateralAmount, uint _daiAmount) public {\n        emit Repay(_cdpId, _owner, _collateralAmount, _daiAmount);\n    }\n\n    function LogBoost(uint _cdpId, address _owner, uint _daiAmount, uint _collateralAmount) public {\n        emit Boost(_cdpId, _owner, _daiAmount, _collateralAmount);\n    }\n}\n\n/// @title SaverProxy implements advanced dashboard features repay/boost\ncontract SaverProxy is DSMath {\n    //KOVAN\n    // address public constant WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n    // address public constant DAI_ADDRESS = 0xC4375B7De8af5a38a93548eb8453a498222C4fF2;\n    // address public constant MKR_ADDRESS = 0xAaF64BFCC32d0F15873a02163e7E500671a4ffcD;\n    // address public constant VOX_ADDRESS = 0xBb4339c0aB5B1d9f14Bd6e3426444A1e9d86A1d9;\n    // address public constant PETH_ADDRESS = 0xf4d791139cE033Ad35DB2B2201435fAd668B1b64;\n    // address public constant KYBER_WRAPPER = 0x82CD6436c58A65E2D4263259EcA5843d3d7e0e65;\n    // address public constant TUB_ADDRESS = 0xa71937147b55Deb8a530C7229C442Fd3F31b7db2;\n    // address public constant ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    \n    // MAINNET\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address public constant DAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n    address public constant MKR_ADDRESS = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\n    address public constant VOX_ADDRESS = 0x9B0F70Df76165442ca6092939132bBAEA77f2d7A;\n    address public constant PETH_ADDRESS = 0xf53AD2c6851052A81B42133467480961B2321C09;\n    address public constant TUB_ADDRESS = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\n    address public constant ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address public constant KYBER_WRAPPER = 0xAae7ba823679889b12f71D1f18BEeCBc69E62237;\n    address public constant LOGGER_ADDRESS = 0xeCf88e1ceC2D2894A0295DB3D86Fe7CE4991E6dF;\n    \n    /// @notice Withdraws Eth collateral, swaps Eth -> Dai with Kyber, and pays back the debt in Dai\n    /// @dev If _buyMkr is false user needs to have MKR tokens and approve his DSProxy\n    /// @param _cup Id of the CDP\n    /// @param _amount Amount of Eth to sell\n    /// @param _buyMkr If true it will convert ETH -> MKR to pay stability fee, if false it will take MKR from user\n    /// @param _userAddr The address of the user who called the function, so we can send extra Dai to user\n    function repay(bytes32 _cup, uint _amount, bool _buyMkr, address _userAddr) public {\n        TubInterface tub = TubInterface(TUB_ADDRESS);\n\n        approveTub(DAI_ADDRESS);\n        approveTub(MKR_ADDRESS);\n        approveTub(PETH_ADDRESS);\n        approveTub(WETH_ADDRESS);\n\n        uint startingRatio = getRatio(tub, _cup);\n\n        uint maxAmount = maxFreeCollateral(tub, _cup);\n\n        if (_amount > maxAmount) {\n            _amount = maxAmount;\n        }\n\n        withdrawEth(tub, _cup, _amount);\n\n        uint daiAmount = wmul(_amount, estimatedDaiPrice(_amount));\n        uint daiDebt = daiAmount > getDebt(tub, _cup) ? getDebt(tub, _cup) : daiAmount;\n\n        if (_buyMkr) {\n            uint mkrAmount = stabilityFeeInMkr(tub, _cup, daiDebt);\n            uint ethFee = wdiv(mkrAmount, estimatedMkrPrice(_amount));\n\n            uint change;\n            (, change) = ExchangeInterface(KYBER_WRAPPER).swapEtherToToken.\n                            value(ethFee)(ethFee, MKR_ADDRESS, mkrAmount);\n\n            _amount = sub(_amount, sub(ethFee, change));\n        } else {\n            uint mkrAmount = stabilityFeeInMkr(tub, _cup, daiDebt);\n            ERC20(MKR_ADDRESS).transferFrom(msg.sender, address(this), mkrAmount);\n        }\n\n        (daiAmount, ) = ExchangeInterface(KYBER_WRAPPER).swapEtherToToken.\n                            value(_amount)(_amount, DAI_ADDRESS, uint(-1));\n                    \n\n        if (daiAmount > daiDebt) {\n            tub.wipe(_cup, daiDebt);\n            ERC20(DAI_ADDRESS).transfer(_userAddr, sub(daiAmount, daiDebt));\n        } else {\n            tub.wipe(_cup, daiAmount);\n            require(getRatio(tub, _cup) > startingRatio, \"ratio must be better off at the end\");\n\n        }\n\n        SaverLogger(LOGGER_ADDRESS).LogRepay(uint(_cup), msg.sender, _amount, daiAmount);\n    }\n\n    /// @notice Boost will draw Dai, swap Dai -> Eth on kyber, and add that Eth to the CDP\n    /// @dev Amount must be less then the max. amount available Dai to generate\n    /// @param _cup Id of the CDP\n    /// @param _amount Amount of Dai to sell\n    function boost(bytes32 _cup, uint _amount) public {\n        TubInterface tub = TubInterface(TUB_ADDRESS);\n\n        approveTub(WETH_ADDRESS);\n        approveTub(PETH_ADDRESS);\n        approveTub(DAI_ADDRESS);\n        \n        uint maxAmount = maxFreeDai(tub, _cup);\n\n        if (_amount > maxAmount) {\n            _amount = maxAmount;\n        }\n\n        uint startingCollateral = tub.ink(_cup);\n        \n        tub.draw(_cup, _amount);\n        \n        uint ethAmount = swapDaiAndLockEth(tub, _cup, _amount);\n\n        require(tub.ink(_cup) > startingCollateral, \"collateral must be bigger than starting point\");\n        \n        SaverLogger(LOGGER_ADDRESS).LogBoost(uint(_cup), msg.sender, _amount, ethAmount);\n    }\n\n    /// @notice Max. amount of collateral available to withdraw\n    /// @param _tub Tub interface\n    /// @param _cup Id of the CDP\n    function maxFreeCollateral(TubInterface _tub, bytes32 _cup) public returns (uint) {\n        return sub(_tub.ink(_cup), wdiv(wmul(wmul(_tub.tab(_cup), rmul(_tub.mat(), WAD)),\n                VoxInterface(VOX_ADDRESS).par()), _tub.tag())) - 1;\n    }\n    \n    /// @notice Max. amount of Dai available to generate\n    /// @param _tub Tub interface\n    /// @param _cup Id of the CDP\n    function maxFreeDai(TubInterface _tub, bytes32 _cup) public returns (uint) {\n        return sub(wdiv(rmul(_tub.ink(_cup), _tub.tag()), rmul(_tub.mat(), WAD)), _tub.tab(_cup)) - 1;\n    }\n\n    /// @notice Stability fee amount in Mkr\n    /// @param _tub Tub interface\n    /// @param _cup Id of the CDP\n    /// @param _daiRepay Amount of dai we are repaying\n    function stabilityFeeInMkr(TubInterface _tub, bytes32 _cup, uint _daiRepay) public returns (uint) {\n        bytes32 mkrPrice;\n        bool ok;\n\n        uint feeInDai = rmul(_daiRepay, rdiv(_tub.rap(_cup), _tub.tab(_cup)));\n\n        (mkrPrice, ok) = _tub.pep().peek();\n\n        return wdiv(feeInDai, uint(mkrPrice));\n    }\n    \n    /// @notice Helper function which swaps Dai for Eth and adds the collateral to the CDP\n    /// @param _tub Tub interface\n    /// @param _cup Id of the CDP\n    /// @param _daiAmount Amount of Dai to swap for Eth\n    function swapDaiAndLockEth(TubInterface _tub, bytes32 _cup, uint _daiAmount) internal returns(uint) {\n        ERC20(DAI_ADDRESS).transferFrom(address(this), KYBER_WRAPPER, _daiAmount);\n\n        uint ethAmount = ExchangeInterface(KYBER_WRAPPER).swapTokenToEther(DAI_ADDRESS, _daiAmount, uint(-1));\n        \n        _tub.gem().deposit.value(ethAmount)();\n\n        uint ink = rdiv(ethAmount, _tub.per());\n        \n        _tub.join(ink);\n\n        _tub.lock(_cup, ink);\n        \n        return ethAmount;\n    }\n\n    /// @notice Approve a token if it's not already approved\n    /// @param _tokenAddress Address of the ERC20 token we want to approve\n    function approveTub(address _tokenAddress) internal {\n        if (ERC20(_tokenAddress).allowance(msg.sender, _tokenAddress) < (uint(-1) / 2)) {\n            ERC20(_tokenAddress).approve(TUB_ADDRESS, uint(-1));\n        }\n    }\n\n    /// @notice Returns the current collaterlization ratio for the CDP\n    /// @param _tub Tub interface\n    /// @param _cup Id of the CDP\n    function getRatio(TubInterface _tub, bytes32 _cup) internal returns(uint) {\n        return (wdiv(rmul(rmul(_tub.ink(_cup), _tub.tag()), WAD), _tub.tab(_cup)));\n    }\n\n    /// @notice Helper function which withdraws collateral from CDP\n    /// @param _tub Tub interface\n    /// @param _cup Id of the CDP\n    /// @param _ethAmount Amount of Eth to withdraw\n    function withdrawEth(TubInterface _tub, bytes32 _cup, uint _ethAmount) internal {\n        uint ink = rdiv(_ethAmount, _tub.per());\n        _tub.free(_cup, ink);\n        \n        _tub.exit(ink);\n        _tub.gem().withdraw(_ethAmount);\n    }\n\n    /// @notice Returns expected rate for Eth -> Dai conversion\n    /// @param _amount Amount of Ether\n    function estimatedDaiPrice(uint _amount) internal returns (uint expectedRate) {\n        (expectedRate, ) = ExchangeInterface(KYBER_WRAPPER).getExpectedRate(ETHER_ADDRESS, DAI_ADDRESS, _amount);\n    }\n\n    /// @notice Returns expected rate for Eth -> Mkr conversion\n    /// @param _amount Amount of Ether\n    function estimatedMkrPrice(uint _amount) internal returns (uint expectedRate) {\n        (expectedRate, ) = ExchangeInterface(KYBER_WRAPPER).getExpectedRate(ETHER_ADDRESS, MKR_ADDRESS, _amount);\n    }\n\n    /// @notice Returns current Dai debt of the CDP\n    /// @param _tub Tub interface\n    /// @param _cup Id of the CDP\n    function getDebt(TubInterface _tub, bytes32 _cup) internal returns (uint debt) {\n        ( , , debt, ) = _tub.cups(_cup);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50612e75806100206000396000f3fe6080604052600436106100ca576000357c010000000000000000000000000000000000000000000000000000000090048063040141e5146100cf57806304500f4e1461012657806323a66a99146101975780632a4c0a1a146101dc57806336e6da1114610233578063730fd6801461028a578063825ffd92146102f957806394bfbe7414610350578063b175afa1146103a7578063c387fd86146103fe578063c9fde27014610477578063cf1d21c0146104ce578063d325a2c114610525578063f0d405e514610594575b600080fd5b3480156100db57600080fd5b506100e46105eb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561013257600080fd5b506101956004803603608081101561014957600080fd5b810190808035906020019092919080359060200190929190803515159060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610603565b005b3480156101a357600080fd5b506101da600480360360408110156101ba57600080fd5b810190808035906020019092919080359060200190929190505050610e97565b005b3480156101e857600080fd5b506101f161129e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561023f57600080fd5b506102486112b6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561029657600080fd5b506102e3600480360360408110156102ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112ce565b6040518082815260200191505060405180910390f35b34801561030557600080fd5b5061030e611596565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561035c57600080fd5b506103656115ae565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103b357600080fd5b506103bc6115c6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561040a57600080fd5b506104616004803603606081101561042157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506115de565b6040518082815260200191505060405180910390f35b34801561048357600080fd5b5061048c6118b3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104da57600080fd5b506104e36118cb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561053157600080fd5b5061057e6004803603604081101561054857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506118e3565b6040518082815260200191505060405180910390f35b3480156105a057600080fd5b506105a9611c66565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b600073448a5065aebb8e423f0896e6c5d525c040f59af390506106397389d24a6b4ccb1b6faa2625fe562bdd9a23260359611c7e565b610656739f8f72aa9304c8b593d555f12ef6589cc3a579a2611c7e565b61067373f53ad2c6851052a81b42133467480961b2321c09611c7e565b61069073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2611c7e565b600061069c8287611ed0565b905060006106aa83886118e3565b9050808611156106b8578095505b6106c38388886120ee565b60006106d7876106d2896123db565b61253e565b905060006106e5858a612582565b82116106f157816106fc565b6106fb858a612582565b5b90508615610866576000610711868b846115de565b90506000610727826107228c61265e565b6127c1565b9050600073aae7ba823679889b12f71d1f18beecbc69e6223773ffffffffffffffffffffffffffffffffffffffff166343ac1dc68384739f8f72aa9304c8b593d555f12ef6589cc3a579a2876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060408051808303818588803b1580156107fd57600080fd5b505af1158015610811573d6000803e3d6000fd5b50505050506040513d604081101561082857600080fd5b81019080805190602001909291908051906020019092919050505090508091505061085c8b61085784846127fd565b6127fd565b9a5050505061099e565b6000610873868b846115de565b9050739f8f72aa9304c8b593d555f12ef6589cc3a579a273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561096057600080fd5b505af1158015610974573d6000803e3d6000fd5b505050506040513d602081101561098a57600080fd5b810190808051906020019092919050505050505b73aae7ba823679889b12f71d1f18beecbc69e6223773ffffffffffffffffffffffffffffffffffffffff166343ac1dc6898a7389d24a6b4ccb1b6faa2625fe562bdd9a232603597fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060408051808303818588803b158015610a9057600080fd5b505af1158015610aa4573d6000803e3d6000fd5b50505050506040513d6040811015610abb57600080fd5b810190808051906020019092919080519060200190929190505050508092505080821115610c73578473ffffffffffffffffffffffffffffffffffffffff166373b381018a836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015610b5a57600080fd5b505af1158015610b6e573d6000803e3d6000fd5b505050507389d24a6b4ccb1b6faa2625fe562bdd9a2326035973ffffffffffffffffffffffffffffffffffffffff1663a9059cbb87610bad85856127fd565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610c3257600080fd5b505af1158015610c46573d6000803e3d6000fd5b505050506040513d6020811015610c5c57600080fd5b810190808051906020019092919050505050610da9565b8473ffffffffffffffffffffffffffffffffffffffff166373b381018a846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015610cea57600080fd5b505af1158015610cfe573d6000803e3d6000fd5b5050505083610d0d868b611ed0565b111515610da8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f726174696f206d75737420626520626574746572206f6666206174207468652081526020017f656e64000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b73ecf88e1cec2d2894a0295db3d86fe7ce4991e6df73ffffffffffffffffffffffffffffffffffffffff1663406bb32a8a60019004338b866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001945050505050600060405180830381600087803b158015610e7457600080fd5b505af1158015610e88573d6000803e3d6000fd5b50505050505050505050505050565b600073448a5065aebb8e423f0896e6c5d525c040f59af39050610ecd73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2611c7e565b610eea73f53ad2c6851052a81b42133467480961b2321c09611c7e565b610f077389d24a6b4ccb1b6faa2625fe562bdd9a23260359611c7e565b6000610f1382856112ce565b905080831115610f21578092505b60008273ffffffffffffffffffffffffffffffffffffffff16631f3634ed866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015610f9257600080fd5b505af1158015610fa6573d6000803e3d6000fd5b505050506040513d6020811015610fbc57600080fd5b810190808051906020019092919050505090508273ffffffffffffffffffffffffffffffffffffffff1663440f19ba86866040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561104657600080fd5b505af115801561105a573d6000803e3d6000fd5b50505050600061106b848787612819565b9050818473ffffffffffffffffffffffffffffffffffffffff16631f3634ed886040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156110dd57600080fd5b505af11580156110f1573d6000803e3d6000fd5b505050506040513d602081101561110757600080fd5b81019080805190602001909291905050501115156111b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f636f6c6c61746572616c206d75737420626520626967676572207468616e207381526020017f74617274696e6720706f696e740000000000000000000000000000000000000081525060400191505060405180910390fd5b73ecf88e1cec2d2894a0295db3d86fe7ce4991e6df73ffffffffffffffffffffffffffffffffffffffff16636877100587600190043388856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001945050505050600060405180830381600087803b15801561127e57600080fd5b505af1158015611292573d6000803e3d6000fd5b50505050505050505050565b7389d24a6b4ccb1b6faa2625fe562bdd9a2326035981565b739b0f70df76165442ca6092939132bbaea77f2d7a81565b6000600161158d6114de6114298673ffffffffffffffffffffffffffffffffffffffff16631f3634ed876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561134a57600080fd5b505af115801561135e573d6000803e3d6000fd5b505050506040513d602081101561137457600080fd5b81019080805190602001909291905050508773ffffffffffffffffffffffffffffffffffffffff166351f910666040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156113e957600080fd5b505af11580156113fd573d6000803e3d6000fd5b505050506040513d602081101561141357600080fd5b8101908080519060200190929190505050612d71565b6114d98773ffffffffffffffffffffffffffffffffffffffff1663ab0783da6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561149057600080fd5b505af11580156114a4573d6000803e3d6000fd5b505050506040513d60208110156114ba57600080fd5b8101908080519060200190929190505050670de0b6b3a7640000612d71565b6127c1565b8573ffffffffffffffffffffffffffffffffffffffff1663f7c8d634866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561154d57600080fd5b505af1158015611561573d6000803e3d6000fd5b505050506040513d602081101561157757600080fd5b81019080805190602001909291905050506127fd565b03905092915050565b739f8f72aa9304c8b593d555f12ef6589cc3a579a281565b73ecf88e1cec2d2894a0295db3d86fe7ce4991e6df81565b73aae7ba823679889b12f71d1f18beecbc69e6223781565b600080600080611749856117448973ffffffffffffffffffffffffffffffffffffffff16636f78ee0d8a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561165a57600080fd5b505af115801561166e573d6000803e3d6000fd5b505050506040513d602081101561168457600080fd5b81019080805190602001909291905050508a73ffffffffffffffffffffffffffffffffffffffff1663f7c8d6348b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561170457600080fd5b505af1158015611718573d6000803e3d6000fd5b505050506040513d602081101561172e57600080fd5b8101908080519060200190929190505050612dbd565b612d71565b90508673ffffffffffffffffffffffffffffffffffffffff1663ace237f56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156117af57600080fd5b505af11580156117c3573d6000803e3d6000fd5b505050506040513d60208110156117d957600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff166359e02dd76040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016040805180830381600087803b15801561184c57600080fd5b505af1158015611860573d6000803e3d6000fd5b505050506040513d604081101561187657600080fd5b81019080805190602001909291908051906020019092919050505080935081945050506118a78184600190046127c1565b93505050509392505050565b73f53ad2c6851052a81b42133467480961b2321c0981565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60006001611c5d8473ffffffffffffffffffffffffffffffffffffffff16631f3634ed856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561195957600080fd5b505af115801561196d573d6000803e3d6000fd5b505050506040513d602081101561198357600080fd5b8101908080519060200190929190505050611c58611bb4611afc8873ffffffffffffffffffffffffffffffffffffffff1663f7c8d634896040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015611a0c57600080fd5b505af1158015611a20573d6000803e3d6000fd5b505050506040513d6020811015611a3657600080fd5b8101908080519060200190929190505050611af78a73ffffffffffffffffffffffffffffffffffffffff1663ab0783da6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611aae57600080fd5b505af1158015611ac2573d6000803e3d6000fd5b505050506040513d6020811015611ad857600080fd5b8101908080519060200190929190505050670de0b6b3a7640000612d71565b61253e565b739b0f70df76165442ca6092939132bbaea77f2d7a73ffffffffffffffffffffffffffffffffffffffff1663495d32cb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611b7457600080fd5b505af1158015611b88573d6000803e3d6000fd5b505050506040513d6020811015611b9e57600080fd5b810190808051906020019092919050505061253e565b8773ffffffffffffffffffffffffffffffffffffffff166351f910666040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611c1857600080fd5b505af1158015611c2c573d6000803e3d6000fd5b505050506040513d6020811015611c4257600080fd5b81019080805190602001909291905050506127c1565b6127fd565b03905092915050565b73448a5065aebb8e423f0896e6c5d525c040f59af381565b60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811515611caa57fe5b048173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015611d7857600080fd5b505afa158015611d8c573d6000803e3d6000fd5b505050506040513d6020811015611da257600080fd5b81019080805190602001909291905050501015611ecd578073ffffffffffffffffffffffffffffffffffffffff1663095ea7b373448a5065aebb8e423f0896e6c5d525c040f59af37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611e9057600080fd5b505af1158015611ea4573d6000803e3d6000fd5b505050506040513d6020811015611eba57600080fd5b8101908080519060200190929190505050505b50565b60006120e66120376120298573ffffffffffffffffffffffffffffffffffffffff16631f3634ed866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015611f4a57600080fd5b505af1158015611f5e573d6000803e3d6000fd5b505050506040513d6020811015611f7457600080fd5b81019080805190602001909291905050508673ffffffffffffffffffffffffffffffffffffffff166351f910666040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611fe957600080fd5b505af1158015611ffd573d6000803e3d6000fd5b505050506040513d602081101561201357600080fd5b8101908080519060200190929190505050612d71565b670de0b6b3a7640000612d71565b8473ffffffffffffffffffffffffffffffffffffffff1663f7c8d634856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156120a657600080fd5b505af11580156120ba573d6000803e3d6000fd5b505050506040513d60208110156120d057600080fd5b81019080805190602001909291905050506127c1565b905092915050565b6000612198828573ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561215857600080fd5b505af115801561216c573d6000803e3d6000fd5b505050506040513d602081101561218257600080fd5b8101908080519060200190929190505050612dbd565b90508373ffffffffffffffffffffffffffffffffffffffff1663a5cd184e84836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561221157600080fd5b505af1158015612225573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16637f8661a1826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561229857600080fd5b505af11580156122ac573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561231457600080fd5b505af1158015612328573d6000803e3d6000fd5b505050506040513d602081101561233e57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1580156123bd57600080fd5b505af11580156123d1573d6000803e3d6000fd5b5050505050505050565b600073aae7ba823679889b12f71d1f18beecbc69e6223773ffffffffffffffffffffffffffffffffffffffff1663809a9e5573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee7389d24a6b4ccb1b6faa2625fe562bdd9a23260359856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200193505050506040805180830381600087803b1580156124ef57600080fd5b505af1158015612503573d6000803e3d6000fd5b505050506040513d604081101561251957600080fd5b8101908080519060200190929190805190602001909291905050505080915050919050565b6000670de0b6b3a76400006125706125568585612dfd565b6002670de0b6b3a764000081151561256a57fe5b04612e2d565b81151561257957fe5b04905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff1663fdac0025836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050608060405180830381600087803b1580156125f357600080fd5b505af1158015612607573d6000803e3d6000fd5b505050506040513d608081101561261d57600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919050505090919250909150508091505092915050565b600073aae7ba823679889b12f71d1f18beecbc69e6223773ffffffffffffffffffffffffffffffffffffffff1663809a9e5573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee739f8f72aa9304c8b593d555f12ef6589cc3a579a2856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200193505050506040805180830381600087803b15801561277257600080fd5b505af1158015612786573d6000803e3d6000fd5b505050506040513d604081101561279c57600080fd5b8101908080519060200190929190805190602001909291905050505080915050919050565b6000816127eb6127d985670de0b6b3a7640000612dfd565b6002858115156127e557fe5b04612e2d565b8115156127f457fe5b04905092915050565b6000828284039150811115151561281357600080fd5b92915050565b60007389d24a6b4ccb1b6faa2625fe562bdd9a2326035973ffffffffffffffffffffffffffffffffffffffff166323b872dd3073aae7ba823679889b12f71d1f18beecbc69e62237856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561291a57600080fd5b505af115801561292e573d6000803e3d6000fd5b505050506040513d602081101561294457600080fd5b810190808051906020019092919050505050600073aae7ba823679889b12f71d1f18beecbc69e6223773ffffffffffffffffffffffffffffffffffffffff16633bba21dc7389d24a6b4ccb1b6faa2625fe562bdd9a23260359857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050602060405180830381600087803b158015612a4b57600080fd5b505af1158015612a5f573d6000803e3d6000fd5b505050506040513d6020811015612a7557600080fd5b810190808051906020019092919050505090508473ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612aec57600080fd5b505af1158015612b00573d6000803e3d6000fd5b505050506040513d6020811015612b1657600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b158015612b8a57600080fd5b505af1158015612b9e573d6000803e3d6000fd5b50505050506000612c4d828773ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612c0d57600080fd5b505af1158015612c21573d6000803e3d6000fd5b505050506040513d6020811015612c3757600080fd5b8101908080519060200190929190505050612dbd565b90508573ffffffffffffffffffffffffffffffffffffffff1663049878f3826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b158015612cbe57600080fd5b505af1158015612cd2573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663b3b77a5186836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015612d4d57600080fd5b505af1158015612d61573d6000803e3d6000fd5b5050505081925050509392505050565b60006b033b2e3c9fd0803ce8000000612dab612d8d8585612dfd565b60026b033b2e3c9fd0803ce8000000811515612da557fe5b04612e2d565b811515612db457fe5b04905092915050565b600081612deb612dd9856b033b2e3c9fd0803ce8000000612dfd565b600285811515612de557fe5b04612e2d565b811515612df457fe5b04905092915050565b600080821480612e1c57508282838502925082811515612e1957fe5b04145b1515612e2757600080fd5b92915050565b60008282840191508110151515612e4357600080fd5b9291505056fea165627a7a72305820f85e159818c1925cdf1fc9be4788eb7e3a24f296633464635dcff02064a66dd50029"
}