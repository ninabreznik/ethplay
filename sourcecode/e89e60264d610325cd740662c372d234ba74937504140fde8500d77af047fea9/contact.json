{
  "address": "0x826f6d1242231b70832d009f7d2c99a0ca8b7a12",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoPoosToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-11\n*/\n\npragma solidity ^0.4.18; \n\n\n\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\ncontract ERC721 {\n  // Required methods\n  function approve(address _to, uint256 _tokenId) public;\n  function balanceOf(address _owner) public view returns (uint256 balance);\n  function implementsERC721() public pure returns (bool);\n  function ownerOf(uint256 _tokenId) public view returns (address addr);\n  function takeOwnership(uint256 _tokenId) public;\n  function totalSupply() public view returns (uint256 total);\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function transfer(address _to, uint256 _tokenId) public;\n\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n\n  // Optional\n  // function name() public view returns (string name);\n  // function symbol() public view returns (string symbol);\n  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n}\n\n\ncontract CryptoPoosToken is ERC721 {\n\n  // Modified CryptoCelebs contract\n  /*** EVENTS ***/\n\n  /// @dev The Birth event is fired whenever a new poo comes into existence.\n  event Birth(uint256 tokenId, string name, address owner);\n\n  /// @dev The TokenSold event is fired whenever a token is sold.\n  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\n\n  /// @dev Transfer event as defined in current draft of ERC721. \n  ///  ownership is assigned, including births.\n  event Transfer(address from, address to, uint256 tokenId);\n\n  // Triggered on toilet flush\n  event ToiletPotChange();\n\n  /*** CONSTANTS ***/\n\n  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n  string public constant NAME = \"CryptoPoos\"; // solhint-disable-line\n  string public constant SYMBOL = \"CryptoPoosToken\"; // solhint-disable-line\n\n  uint256 private startingPrice = 0.005 ether;\n  uint256 private constant PROMO_CREATION_LIMIT = 5000;\n  \n  // Min price to flush the toilet\n  uint256 private minFlushPrice = 0.002 ether;\n\n\n  /*** STORAGE ***/\n\n  /// @dev A mapping from poo IDs to the address that owns them. All poos have\n  ///  some valid owner address.\n  mapping (uint256 => address) public pooIndexToOwner;\n\n  // @dev A mapping from owner address to count of tokens that address owns.\n  //  Used internally inside balanceOf() to resolve ownership count.\n  mapping (address => uint256) private ownershipTokenCount;\n\n  /// @dev A mapping from PooIDs to an address that has been approved to call\n  ///  transferFrom(). Each poo can only have one approved address for transfer\n  ///  at any time. A zero value means no approval is outstanding.\n  mapping (uint256 => address) public pooIndexToApproved;\n\n  // @dev A mapping from PooIDs to the price of the token.\n  mapping (uint256 => uint256) private pooIndexToPrice;\n  \n  // The addresses of the accounts (or contracts) that can execute actions within each roles.\n  address public ceoAddress;\n  address public cooAddress;\n  \n  uint256 roundCounter;\n  address lastFlusher;   // Person that flushed\n  uint256 flushedTokenId;   // Poo that got flushed\n  uint256 lastPotSize; //Stores last pot size obviously\n  uint256 goldenPooId; // Current golden poo id\n  uint public lastPurchaseTime; // Tracks time since last purchase\n\n  /*** DATATYPES ***/\n  struct Poo {\n    string name;\n  }\n\n  Poo[] private poos;\n\n  /*** ACCESS MODIFIERS ***/\n  /// @dev Access modifier for CEO-only functionality\n  modifier onlyCEO() {\n    require(msg.sender == ceoAddress);\n    _;\n  }\n\n  /// @dev Access modifier for COO-only functionality\n  modifier onlyCOO() {\n    require(msg.sender == cooAddress);\n    _;\n  }\n\n  /// Access modifier for contract owner only functionality\n  modifier onlyCLevel() {\n    require(\n      msg.sender == ceoAddress ||\n      msg.sender == cooAddress\n    );\n    _;\n  }\n\n  /*** CONSTRUCTOR ***/\n  function CryptoPoosToken() public {\n    ceoAddress = msg.sender;\n    cooAddress = msg.sender;\n\t\n\tcreateContractPoo(\"1\");\n\tcreateContractPoo(\"2\");\n\tcreateContractPoo(\"3\");\n\tcreateContractPoo(\"4\");\n\tcreateContractPoo(\"5\");\n\tcreateContractPoo(\"6\");\n\troundCounter = 1;\n  }\n\n  /*** PUBLIC FUNCTIONS ***/\n  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\n  /// @param _to The address to be granted transfer approval. Pass address(0) to\n  ///  clear all approvals.\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n  /// @dev Required for ERC-721 compliance.\n  function approve(\n    address _to,\n    uint256 _tokenId\n  ) public {\n    // Caller must own token.\n    require(_owns(msg.sender, _tokenId));\n\n    pooIndexToApproved[_tokenId] = _to;\n\n    Approval(msg.sender, _to, _tokenId);\n  }\n\n  /// For querying balance of a particular account\n  /// @param _owner The address for balance query\n  /// @dev Required for ERC-721 compliance.\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return ownershipTokenCount[_owner];\n  }\n\n  /// @dev Creates a new poo with the given name.\n  function createContractPoo(string _name) public onlyCOO {\n    _createPoo(_name, address(this), startingPrice);\n  }\n\n  /// @notice Returns all the relevant information about a specific poo.\n  /// @param _tokenId The tokenId of the poo of interest.\n  function getPoo(uint256 _tokenId) public view returns (\n    string pooName,\n    uint256 sellingPrice,\n    address owner\n  ) {\n    Poo storage poo = poos[_tokenId];\n    pooName = poo.name;\n    sellingPrice = pooIndexToPrice[_tokenId];\n    owner = pooIndexToOwner[_tokenId];\n  }\n\n  function getRoundDetails() public view returns (\n    uint256 currentRound,\n\tuint256 currentBalance,\n\tuint256 currentGoldenPoo,\n\tuint256 lastRoundReward,\n    uint256 lastFlushedTokenId,\n    address lastRoundFlusher,\n\tbool bonusWinChance,\n\tuint256 lowestFlushPrice\n  ) {\n\tcurrentRound = roundCounter;\n\tcurrentBalance = this.balance;\n\tcurrentGoldenPoo = goldenPooId;\n\tlastRoundReward = lastPotSize;\n\tlastFlushedTokenId = flushedTokenId;\n\tlastRoundFlusher = lastFlusher;\n\tbonusWinChance = _increaseWinPotChance();\n\tlowestFlushPrice = minFlushPrice;\n  }\n\n  function implementsERC721() public pure returns (bool) {\n    return true;\n  }\n\n  /// @dev Required for ERC-721 compliance.\n  function name() public pure returns (string) {\n    return NAME;\n  }\n\n  /// For querying owner of token\n  /// @param _tokenId The tokenID for owner inquiry\n  /// @dev Required for ERC-721 compliance.\n  function ownerOf(uint256 _tokenId)\n    public\n    view\n    returns (address owner)\n  {\n    owner = pooIndexToOwner[_tokenId];\n    require(owner != address(0));\n  }\n\n   function donate() public payable {\n\trequire(msg.value >= 0.001 ether);\n   }\n\n\n  // Allows someone to send ether and obtain the token\n  function purchase(uint256 _tokenId) public payable {\n    address oldOwner = pooIndexToOwner[_tokenId];\n    address newOwner = msg.sender;\n\n    uint256 sellingPrice = pooIndexToPrice[_tokenId];\n\n    // Making sure token owner is not sending to self\n    require(oldOwner != newOwner);\n\n    // Safety check to prevent against an unexpected 0x0 default.\n    require(_addressNotNull(newOwner));\n\n    // Making sure sent amount is greater than or equal to the sellingPrice\n    require(msg.value >= sellingPrice);\n\n    // 62% to previous owner\n    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 62), 100));\n  \n    // 8% to the jew\n    ceoAddress.transfer(uint256(SafeMath.div(SafeMath.mul(sellingPrice, 8), 100)));\n\n\t// 30% goes to the pot\n\n    // Next token price is double\n     pooIndexToPrice[_tokenId] = uint256(SafeMath.mul(sellingPrice, 2));\n\n    _transfer(oldOwner, newOwner, _tokenId);\n\t\n    // Pay previous tokenOwner if owner is not contract\n    if (oldOwner != address(this)) {\n      oldOwner.transfer(payment); \n    }\n\n    _checkToiletFlush(false, _tokenId); \n\tlastPurchaseTime = now;\n\tToiletPotChange();\n  }\n  \n  // User is trying to flush the toilet. See if they succeed\n  function tryFlush() public payable {\n\n        // Make sure they are sending min flush price\n        require(msg.value >= minFlushPrice);\n\n\t\t// Jew takes 10% of manual flush attempt. Stops dat spam....\n\t\tceoAddress.transfer(uint256(SafeMath.div(SafeMath.mul(msg.value, 10), 100)));\n\n        _checkToiletFlush(true, 0);\n\t\tlastPurchaseTime = now;\n\t\tToiletPotChange();\n  }\n  \n  // If manual flush attempt, the user has a chance to flush their own poo\n function _checkToiletFlush(bool _manualFlush, uint256 _purchasedTokenId) private {\n     \n    uint256 winningChance = 25;\n\n\t// We are calling manual flush option, so the chance of winning is less\n\tif(_manualFlush){\n\t\twinningChance = 50;\n\t}else if(_purchasedTokenId == goldenPooId){\n\t\t// If buying golden poo, and is not a manual flush, increase chance of winning!\n\t\twinningChance = uint256(SafeMath.div(SafeMath.mul(winningChance, 90), 100));\n\t}\n\n\t// Check if we are trippling chance to win on next flush attempt/poop purchase\n\tif(_increaseWinPotChance()){\n\t\twinningChance = uint256(SafeMath.div(winningChance,3));\n\t}\n     \n    // Check if owner owns a poo. If not, their chance of winning is lower\n    if(ownershipTokenCount[msg.sender] == 0){\n        winningChance = uint256(SafeMath.mul(winningChance,2));\n    }\n     \n    uint256 flushPooIndex = rand(winningChance);\n    \n    if( (flushPooIndex < 6) && (flushPooIndex != goldenPooId) &&  (msg.sender != pooIndexToOwner[flushPooIndex])  ){\n      lastFlusher = msg.sender;\n\t  flushedTokenId = flushPooIndex;\n      \n      _transfer(pooIndexToOwner[flushPooIndex],address(this),flushPooIndex);\n      pooIndexToPrice[flushPooIndex] = startingPrice;\n      \n      // Leave 5% behind for next pot\n\t  uint256 reward = uint256(SafeMath.div(SafeMath.mul(this.balance, 95), 100));\n\t  lastPotSize = reward;\n\n      msg.sender.transfer(reward); // Send reward to purchaser\n\t  goldenPooId = rand(6);// There is a new golden poo in town.\n\n\t  roundCounter += 1; // Keeps track of how many flushes\n    }\n  }\n\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\n    return pooIndexToPrice[_tokenId];\n  }\n\n  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n  /// @param _newCEO The address of the new CEO\n  function setCEO(address _newCEO) public onlyCEO {\n    require(_newCEO != address(0));\n\n    ceoAddress = _newCEO;\n  }\n\n  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\n  /// @param _newCOO The address of the new COO\n  function setCOO(address _newCOO) public onlyCEO {\n    require(_newCOO != address(0));\n\n    cooAddress = _newCOO;\n  }\n\n  // If 2 hours elapsed since last purchase, increase chance of winning pot.\n  function _increaseWinPotChance() constant private returns (bool) {\n    if (now >= lastPurchaseTime + 120 minutes) {\n        // 120 minutes has elapsed from last purchased time\n        return true;\n    }\n    return false;\n}\n\n  /// @dev Required for ERC-721 compliance.\n  function symbol() public pure returns (string) {\n    return SYMBOL;\n  }\n\n  /// @notice Allow pre-approved user to take ownership of a token\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n  /// @dev Required for ERC-721 compliance.\n  function takeOwnership(uint256 _tokenId) public {\n    address newOwner = msg.sender;\n    address oldOwner = pooIndexToOwner[_tokenId];\n\n    // Safety check to prevent against an unexpected 0x0 default.\n    require(_addressNotNull(newOwner));\n\n    // Making sure transfer is approved\n    require(_approved(newOwner, _tokenId));\n\n    _transfer(oldOwner, newOwner, _tokenId);\n  }\n\n  /// @param _owner The owner whose social media tokens we are interested in.\n  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\n  ///  expensive (it walks the entire poos array looking for poos belonging to owner),\n  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n  ///  not contract-to-contract calls.\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\n    uint256 tokenCount = balanceOf(_owner);\n    if (tokenCount == 0) {\n        // Return an empty array\n      return new uint256[](0);\n    } else {\n      uint256[] memory result = new uint256[](tokenCount);\n      uint256 totalPoos = totalSupply();\n      uint256 resultIndex = 0;\n\n      uint256 pooId;\n      for (pooId = 0; pooId <= totalPoos; pooId++) {\n        if (pooIndexToOwner[pooId] == _owner) {\n          result[resultIndex] = pooId;\n          resultIndex++;\n        }\n      }\n      return result;\n    }\n  }\n\n  /// For querying totalSupply of token\n  /// @dev Required for ERC-721 compliance.\n  function totalSupply() public view returns (uint256 total) {\n    return poos.length;\n  }\n\n  /// Owner initates the transfer of the token to another account\n  /// @param _to The address for the token to be transferred to.\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n  /// @dev Required for ERC-721 compliance.\n  function transfer(\n    address _to,\n    uint256 _tokenId\n  ) public {\n    require(_owns(msg.sender, _tokenId));\n    require(_addressNotNull(_to));\n\n    _transfer(msg.sender, _to, _tokenId);\n  }\n\n  /// Third-party initiates transfer of token from address _from to address _to\n  /// @param _from The address for the token to be transferred from.\n  /// @param _to The address for the token to be transferred to.\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n  /// @dev Required for ERC-721 compliance.\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  ) public {\n    require(_owns(_from, _tokenId));\n    require(_approved(_to, _tokenId));\n    require(_addressNotNull(_to));\n\n    _transfer(_from, _to, _tokenId);\n  }\n\n  /*** PRIVATE FUNCTIONS ***/\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\n  function _addressNotNull(address _to) private pure returns (bool) {\n    return _to != address(0);\n  }\n\n  /// For checking approval of transfer for address _to\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\n    return pooIndexToApproved[_tokenId] == _to;\n  }\n\n  /// For creating Poo\n  function _createPoo(string _name, address _owner, uint256 _price) private {\n    Poo memory _poo = Poo({\n      name: _name\n    });\n    uint256 newPooId = poos.push(_poo) - 1;\n\n    // It's probably never going to happen, 4 billion tokens are A LOT, but\n    // let's just be 100% sure we never let this happen.\n    require(newPooId == uint256(uint32(newPooId)));\n\n    Birth(newPooId, _name, _owner);\n\n    pooIndexToPrice[newPooId] = _price;\n\n    // This will assign ownership, and also emit the Transfer event as\n    // per ERC721 draft\n    _transfer(address(0), _owner, newPooId);\n  }\n\n  /// Check for token ownership\n  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\n    return claimant == pooIndexToOwner[_tokenId];\n  }\n\n  /// @dev Assigns ownership of a specific Poo to an address.\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\n    // Since the number of poos is capped to 2^32 we can't overflow this\n    ownershipTokenCount[_to]++;\n    //transfer ownership\n    pooIndexToOwner[_tokenId] = _to;\n\n    // When creating new poos _from is 0x0, but we can't account that address.\n    if (_from != address(0)) {\n      ownershipTokenCount[_from]--;\n      // clear any previously approved ownership exchange\n      delete pooIndexToApproved[_tokenId];\n    }\n\n    // Emit the transfer event.\n    Transfer(_from, _to, _tokenId);\n  }\n  \n    //Generate random number between 0 & max\n    uint256 constant private FACTOR =  1157920892373161954235709850086879078532699846656405640394575840079131296399;\n    function rand(uint max) constant private returns (uint256 result){\n        uint256 factor = FACTOR * 100 / max;\n        uint256 lastBlockNumber = block.number - 1;\n        uint256 hashVal = uint256(block.blockhash(lastBlockNumber));\n    \n        return uint256((uint256(hashVal) / factor)) % max;\n    }\n  \n}\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": "60606040526611c37937e0800060005566071afd498d000060015534156200002657600080fd5b33600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000fc6040805190810160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250620002ae6401000000000262000be5176401000000009004565b620001506040805190810160405280600181526020017f3200000000000000000000000000000000000000000000000000000000000000815250620002ae6401000000000262000be5176401000000009004565b620001a46040805190810160405280600181526020017f3300000000000000000000000000000000000000000000000000000000000000815250620002ae6401000000000262000be5176401000000009004565b620001f86040805190810160405280600181526020017f3400000000000000000000000000000000000000000000000000000000000000815250620002ae6401000000000262000be5176401000000009004565b6200024c6040805190810160405280600181526020017f3500000000000000000000000000000000000000000000000000000000000000815250620002ae6401000000000262000be5176401000000009004565b620002a06040805190810160405280600181526020017f3600000000000000000000000000000000000000000000000000000000000000815250620002ae6401000000000262000be5176401000000009004565b600160088190555062000860565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200030b57600080fd5b6200032e8130600054620003316401000000000262001736176401000000009004565b50565b6200033b620006d2565b60006020604051908101604052808681525091506001600e8054806001018281620003679190620006ee565b916000526020600020900160008590919091506000820151816000019080519060200190620003989291906200071d565b5050500390508063ffffffff1681141515620003b357600080fd5b7fb3b0cf861f168bcdb275c69da97b2543631552ba562628aa3c7317d4a6089ef281868660405180848152602001806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156200045157808201518184015260208101905062000434565b50505050905090810190601f1680156200047f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1826005600083815260200190815260200160002081905550620004c860008583620004cf6401000000000262001959176401000000009004565b5050505050565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415156200062e57600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001900391905055506004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050565b602060405190810160405280620006e8620007a4565b81525090565b8154818355818115116200071857818360005260206000209182019101620007179190620007b8565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200076057805160ff191683800117855562000791565b8280016001018555821562000791579182015b828111156200079057825182559160200191906001019062000773565b5b509050620007a09190620007ec565b5090565b602060405190810160405280600081525090565b620007e991905b80821115620007e55760008082016000620007db919062000814565b50600101620007bf565b5090565b90565b6200081191905b808211156200080d576000816000905550600101620007f3565b5090565b90565b50805460018160011615610100020316600290046000825580601f106200083c57506200085d565b601f0160209004906000526020600020908101906200085c9190620007ec565b5b50565b61207a80620008706000396000f30060606040526004361061015f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610164578063095ea7b3146101f25780630a0f8168146102345780631051db341461028957806318160ddd146102b65780631cbb04b3146102df57806322c61e731461034257806323b872dd1461039f57806327d7874c146104005780632ba73c15146104395780636352211e1461047257806370a08231146104d55780638462151c14610522578063957f9a0b146105b057806395d89b41146105ba5780639a68323c14610648578063a3f4df7e146106d2578063a9059cbb14610760578063b047fb50146107a2578063b2e6ceeb146107f7578063b9186d7d1461081a578063c14bafb114610851578063c8a0d5461461087a578063c8f288ad146108dd578063ed88c68e146109b3578063efef39a1146109bd578063f76f8d78146109d5575b600080fd5b341561016f57600080fd5b610177610a63565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101b757808201518184015260208101905061019c565b50505050905090810190601f1680156101e45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101fd57600080fd5b610232600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610aa6565b005b341561023f57600080fd5b610247610b76565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561029457600080fd5b61029c610b9c565b604051808215151515815260200191505060405180910390f35b34156102c157600080fd5b6102c9610ba5565b6040518082815260200191505060405180910390f35b34156102ea57600080fd5b6103006004808035906020019091905050610bb2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561034d57600080fd5b61039d600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610be5565b005b34156103aa57600080fd5b6103fe600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c51565b005b341561040b57600080fd5b610437600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c9f565b005b341561044457600080fd5b610470600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d7b565b005b341561047d57600080fd5b6104936004808035906020019091905050610e57565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104e057600080fd5b61050c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ed0565b6040518082815260200191505060405180910390f35b341561052d57600080fd5b610559600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f19565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561059c578082015181840152602081019050610581565b505050509050019250505060405180910390f35b6105b8611050565b005b34156105c557600080fd5b6105cd611118565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561060d5780820151818401526020810190506105f2565b50505050905090810190601f16801561063a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561065357600080fd5b61065b61115b565b604051808981526020018881526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001831515151581526020018281526020019850505050505050505060405180910390f35b34156106dd57600080fd5b6106e56111d3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561072557808201518184015260208101905061070a565b50505050905090810190601f1680156107525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561076b57600080fd5b6107a0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061120c565b005b34156107ad57600080fd5b6107b5611244565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561080257600080fd5b610818600480803590602001909190505061126a565b005b341561082557600080fd5b61083b60048080359060200190919050506112df565b6040518082815260200191505060405180910390f35b341561085c57600080fd5b6108646112fc565b6040518082815260200191505060405180910390f35b341561088557600080fd5b61089b6004808035906020019091905050611302565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156108e857600080fd5b6108fe6004808035906020019091905050611335565b60405180806020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b8381101561097657808201518184015260208101905061095b565b50505050905090810190601f1680156109a35780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6109bb611451565b005b6109d36004808035906020019091905050611469565b005b34156109e057600080fd5b6109e8611691565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a28578082015181840152602081019050610a0d565b50505050905090810190601f168015610a555780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610a6b611eb0565b6040805190810160405280600a81526020017f43727970746f506f6f7300000000000000000000000000000000000000000000815250905090565b610ab033826116ca565b1515610abb57600080fd5b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001905090565b6000600e80549050905090565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c4157600080fd5b610c4e8130600054611736565b50565b610c5b83826116ca565b1515610c6657600080fd5b610c7082826118b4565b1515610c7b57600080fd5b610c8482611920565b1515610c8f57600080fd5b610c9a838383611959565b505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610cfb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610d3757600080fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610dd757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610e1357600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610ecb57600080fd5b919050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610f21611ec4565b6000610f2b611ec4565b6000806000610f3987610ed0565b94506000851415610f6b576000604051805910610f535750595b90808252806020026020018201604052509550611046565b84604051805910610f795750595b90808252806020026020018201604052509350610f94610ba5565b925060009150600090505b8281111515611042578673ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156110355780848381518110151561101e57fe5b906020019060200201818152505081806001019250505b8080600101915050610f9f565b8395505b5050505050919050565b600154341015151561106157600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6110b26110ab34600a611b5b565b6064611b96565b9081150290604051600060405180830381858888f1935050505015156110d757600080fd5b6110e360016000611bb1565b42600d819055507fc4e72dc9988ec1ed3d1b1d23b63b088328343b079d6eaab7d314b511bbeb3bed60405160405180910390a1565b611120611eb0565b6040805190810160405280600f81526020017f43727970746f506f6f73546f6b656e0000000000000000000000000000000000815250905090565b60008060008060008060008060085497503073ffffffffffffffffffffffffffffffffffffffff16319650600c549550600b549450600a549350600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692506111c2611e28565b915060015490509091929394959697565b6040805190810160405280600a81526020017f43727970746f506f6f730000000000000000000000000000000000000000000081525081565b61121633826116ca565b151561122157600080fd5b61122a82611920565b151561123557600080fd5b611240338383611959565b5050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000803391506002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506112af82611920565b15156112ba57600080fd5b6112c482846118b4565b15156112cf57600080fd5b6112da818385611959565b505050565b600060056000838152602001908152602001600020549050919050565b600d5481565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61133d611eb0565b6000806000600e8581548110151561135157fe5b90600052602060002090019050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113f65780601f106113cb576101008083540402835291602001916113f6565b820191906000526020600020905b8154815290600101906020018083116113d957829003601f168201915b50505050509350600560008681526020019081526020016000205492506002600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150509193909250565b66038d7ea4c68000341015151561146757600080fd5b565b6000806000806002600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169350339250600560008681526020019081526020016000205491508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156114f957600080fd5b61150283611920565b151561150d57600080fd5b81341015151561151c57600080fd5b61153161152a83603e611b5b565b6064611b96565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc61158461157d856008611b5b565b6064611b96565b9081150290604051600060405180830381858888f1935050505015156115a957600080fd5b6115b4826002611b5b565b60056000878152602001908152602001600020819055506115d6848487611959565b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151561164c578373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561164b57600080fd5b5b611657600086611bb1565b42600d819055507fc4e72dc9988ec1ed3d1b1d23b63b088328343b079d6eaab7d314b511bbeb3bed60405160405180910390a15050505050565b6040805190810160405280600f81526020017f43727970746f506f6f73546f6b656e000000000000000000000000000000000081525081565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614905092915050565b61173e611ed8565b60006020604051908101604052808681525091506001600e80548060010182816117689190611ef2565b916000526020600020900160008590919091506000820151816000019080519060200190611797929190611f1e565b5050500390508063ffffffff16811415156117b157600080fd5b7fb3b0cf861f168bcdb275c69da97b2543631552ba562628aa3c7317d4a6089ef281868660405180848152602001806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561184d578082015181840152602081019050611832565b50505050905090810190601f16801561187a5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18260056000838152602001908152602001600020819055506118ad60008583611959565b5050505050565b60008273ffffffffffffffffffffffffffffffffffffffff166004600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515611ab757600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001900391905055506004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050565b6000806000841415611b705760009150611b8f565b8284029050828482811515611b8157fe5b04141515611b8b57fe5b8091505b5092915050565b6000808284811515611ba457fe5b0490508091505092915050565b6000806000601992508415611bc95760329250611bec565b600c54841415611beb57611be8611be184605a611b5b565b6064611b96565b92505b5b611bf4611e28565b15611c0757611c04836003611b96565b92505b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415611c5d57611c5a836002611b5b565b92505b611c6683611e4a565b9150600682108015611c7a5750600c548214155b8015611ce557506002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15611e215733600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600a81905550611d706002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163084611959565b6000546005600084815260200190815260200160002081905550611db6611daf3073ffffffffffffffffffffffffffffffffffffffff1631605f611b5b565b6064611b96565b905080600b819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515611dff57600080fd5b611e096006611e4a565b600c8190555060016008600082825401925050819055505b5050505050565b6000611c20600d540142101515611e425760019050611e47565b600090505b90565b6000806000808460647f028f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f02811515611e7e57fe5b0492506001430391508140600190049050848382811515611e9b57fe5b04811515611ea557fe5b069350505050919050565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b602060405190810160405280611eec611f9e565b81525090565b815481835581811511611f1957818360005260206000209182019101611f189190611fb2565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611f5f57805160ff1916838001178555611f8d565b82800160010185558215611f8d579182015b82811115611f8c578251825591602001919060010190611f71565b5b509050611f9a9190611fe1565b5090565b602060405190810160405280600081525090565b611fde91905b80821115611fda5760008082016000611fd19190612006565b50600101611fb8565b5090565b90565b61200391905b80821115611fff576000816000905550600101611fe7565b5090565b90565b50805460018160011615610100020316600290046000825580601f1061202c575061204b565b601f01602090049060005260206000209081019061204a9190611fe1565b5b505600a165627a7a7230582051272718ded635a701355d5440446dbd94db63479bb7ba75f50a0b87ee3ba02d0029"
}