{
  "address": "0x8efd96c0183f852794f3f18c48ea2508fc5dff9e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DSLACrowdsale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-11\n*/\n\npragma solidity 0.4.24;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    int256 constant private INT256_MIN = -2**255;\n\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Multiplies two signed integers, reverts on overflow.\n    */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\n\n        int256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n    */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\n        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two signed integers, reverts on overflow.\n    */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two signed integers, reverts on overflow.\n    */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n  * @title Escrow (based on openzeppelin version with one function to withdraw funds to the wallet)\n  * @dev Base escrow contract, holds funds destinated to a payee until they\n  * withdraw them. The contract that uses the escrow as its payment method\n  * should be its owner, and provide public methods redirecting to the escrow's\n  * deposit and withdraw.\n  */\ncontract Escrow is Ownable {\n    using SafeMath for uint256;\n\n    event Deposited(address indexed payee, uint256 weiAmount);\n    event Withdrawn(address indexed payee, uint256 weiAmount);\n\n    mapping(address => uint256) private deposits;\n\n    /**\n      * @dev Stores the sent amount as credit to be withdrawn.\n      * @param _payee The destination address of the funds.\n      */\n    function deposit(address _payee) public onlyOwner payable {\n        uint256 amount = msg.value;\n        deposits[_payee] = deposits[_payee].add(amount);\n\n        emit Deposited(_payee, amount);\n    }\n\n    /**\n      * @dev Withdraw accumulated balance for a payee.\n      * @param _payee The address whose funds will be withdrawn and transferred to.\n      * @return Amount withdrawn\n      */\n    function withdraw(address _payee) public onlyOwner returns(uint256) {\n        uint256 payment = deposits[_payee];\n\n        assert(address(this).balance >= payment);\n\n        deposits[_payee] = 0;\n\n        _payee.transfer(payment);\n\n        emit Withdrawn(_payee, payment);\n        return payment;\n    }\n\n    /**\n      * @dev Withdraws the wallet's funds.\n      * @param _wallet address the funds will be transferred to.\n      */\n    function beneficiaryWithdraw(address _wallet) public onlyOwner {\n        uint256 _amount = address(this).balance;\n        \n        _wallet.transfer(_amount);\n\n        emit Withdrawn(_wallet, _amount);\n    }\n\n    /**\n      * @dev Returns the deposited amount of the given address.\n      * @param _payee address of the payee of which to return the deposted amount.\n      * @return Deposited amount by the address given as argument.\n      */\n    function depositsOf(address _payee) public view returns(uint256) {\n        return deposits[_payee];\n    }\n}\n\n/**\n  * @title PullPayment (based on openzeppelin version with one function to withdraw funds to the wallet)\n  * @dev Base contract supporting async send for pull payments. Inherit from this\n  * contract and use asyncTransfer instead of send or transfer.\n  */\ncontract PullPayment {\n    Escrow private escrow;\n\n    constructor() public {\n        escrow = new Escrow();\n    }\n\n    /**\n      * @dev Returns the credit owed to an address.\n      * @param _dest The creditor's address.\n      * @return Deposited amount by the address given as argument.\n      */\n    function payments(address _dest) public view returns(uint256) {\n        return escrow.depositsOf(_dest);\n    }\n\n    /**\n      * @dev Withdraw accumulated balance, called by payee.\n      * @param _payee The address whose funds will be withdrawn and transferred to.\n      * @return Amount withdrawn\n      */\n    function _withdrawPayments(address _payee) internal returns(uint256) {\n        uint256 payment = escrow.withdraw(_payee);\n\n        return payment;\n    }\n\n    /**\n      * @dev Called by the payer to store the sent amount as credit to be pulled.\n      * @param _dest The destination address of the funds.\n      * @param _amount The amount to transfer.\n      */\n    function _asyncTransfer(address _dest, uint256 _amount) internal {\n        escrow.deposit.value(_amount)(_dest);\n    }\n\n    /**\n      * @dev Withdraws the wallet's funds.\n      * @param _wallet address the funds will be transferred to.\n      */\n    function _withdrawFunds(address _wallet) internal {\n        escrow.beneficiaryWithdraw(_wallet);\n    }\n}\n\n/** @title VestedCrowdsale\n  * @dev Extension of Crowdsale to allow a vested distribution of tokens\n  * Users have to individually claim their tokens\n  */\ncontract VestedCrowdsale {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) public withdrawn;\n    mapping (address => uint256) public contributions;\n    mapping (address => uint256) public contributionsRound;\n    uint256 public vestedTokens;\n\n    /**\n      * @dev Gives how much a user is allowed to withdraw at the current moment\n      * @param _beneficiary The address of the user asking how much he's allowed\n      * to withdraw\n      * @return Amount _beneficiary is allowed to withdraw\n      */\n    function getWithdrawableAmount(address _beneficiary) public view returns(uint256) {\n        uint256 step = _getVestingStep(_beneficiary);\n        uint256 valueByStep = _getValueByStep(_beneficiary);\n        uint256 result = step.mul(valueByStep).sub(withdrawn[_beneficiary]);\n\n        return result;\n    }\n\n    /**\n      * @dev Gives the step of the vesting (starts from 0 to steps)\n      * @param _beneficiary The address of the user asking how much he's allowed\n      * to withdraw\n      * @return The vesting step for _beneficiary\n      */\n    function _getVestingStep(address _beneficiary) internal view returns(uint8) {\n        require(contributions[_beneficiary] != 0);\n        require(contributionsRound[_beneficiary] > 0 && contributionsRound[_beneficiary] < 4);\n\n        uint256 march31 = 1554019200;\n        uint256 april30 = 1556611200;\n        uint256 may31 = 1559289600;\n        uint256 june30 = 1561881600;\n        uint256 july31 = 1564560000;\n        uint256 sept30 = 1569830400;\n        uint256 contributionRound = contributionsRound[_beneficiary];\n\n        // vesting for private sale contributors\n        if (contributionRound == 1) {\n            if (block.timestamp < march31) {\n                return 0;\n            }\n            if (block.timestamp < june30) {\n                return 1;\n            }\n            if (block.timestamp < sept30) {\n                return 2;\n            }\n\n            return 3;\n        }\n        // vesting for pre ico contributors\n        if (contributionRound == 2) {\n            if (block.timestamp < april30) {\n                return 0;\n            }\n            if (block.timestamp < july31) {\n                return 1;\n            }\n\n            return 2;\n        }\n        // vesting for ico contributors\n        if (contributionRound == 3) {\n            if (block.timestamp < may31) {\n                return 0;\n            }\n\n            return 1;\n        }\n    }\n\n    /**\n      * @dev Gives the amount a user is allowed to withdraw by step\n      * @param _beneficiary The address of the user asking how much he's allowed\n      * to withdraw\n      * @return How much a user is allowed to withdraw by step\n      */\n    function _getValueByStep(address _beneficiary) internal view returns(uint256) {\n        require(contributions[_beneficiary] != 0);\n        require(contributionsRound[_beneficiary] > 0 && contributionsRound[_beneficiary] < 4);\n\n        uint256 contributionRound = contributionsRound[_beneficiary];\n        uint256 amount;\n        uint256 rate;\n\n        if (contributionRound == 1) {\n            rate = 416700;\n            amount = contributions[_beneficiary].mul(rate).mul(25).div(100);\n            return amount;\n        } else if (contributionRound == 2) {\n            rate = 312500;\n            amount = contributions[_beneficiary].mul(rate).mul(25).div(100);\n            return amount;\n        }\n\n        rate = 250000;\n        amount = contributions[_beneficiary].mul(rate).mul(25).div(100);\n        return amount;\n    }\n}\n\n/**\n  * @title Whitelist\n  * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n  * This simplifies the implementation of \"user permissions\".\n  */\ncontract Whitelist is Ownable {\n    // Whitelisted address\n    mapping(address => bool) public whitelist;\n\n    event AddedBeneficiary(address indexed _beneficiary);\n    event RemovedBeneficiary(address indexed _beneficiary);\n\n    /**\n      * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n      * @param _beneficiaries Addresses to be added to the whitelist\n      */\n    function addAddressToWhitelist(address[] _beneficiaries) public onlyOwner {\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n            whitelist[_beneficiaries[i]] = true;\n\n            emit AddedBeneficiary(_beneficiaries[i]);\n        }\n    }\n\n    /**\n      * @dev Adds list of address to whitelist. Not overloaded due to limitations with truffle testing.\n      * @param _beneficiary Address to be added to the whitelist\n      */\n    function addToWhitelist(address _beneficiary) public onlyOwner {\n        whitelist[_beneficiary] = true;\n\n        emit AddedBeneficiary(_beneficiary);\n    }\n\n    /**\n      * @dev Removes single address from whitelist.\n      * @param _beneficiary Address to be removed to the whitelist\n      */\n    function removeFromWhitelist(address _beneficiary) public onlyOwner {\n        whitelist[_beneficiary] = false;\n\n        emit RemovedBeneficiary(_beneficiary);\n    }\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The address which you want to send tokens from\n     * @param value uint256 The amount of token to be burned\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\n/**\n  * @title DSLACrowdsale\n  * @dev Crowdsale is a base contract for managing a token crowdsale,\n  * allowing investors to purchase tokens with ether\n  */\ncontract DSLACrowdsale is VestedCrowdsale, Whitelist, Pausable, PullPayment {\n    // struct to store ico rounds details\n    struct IcoRound {\n        uint256 rate;\n        uint256 individualFloor;\n        uint256 individualCap;\n        uint256 softCap;\n        uint256 hardCap;\n    }\n\n    // mapping ico rounds\n    mapping (uint256 => IcoRound) public icoRounds;\n    // The token being sold\n    ERC20Burnable private _token;\n    // Address where funds are collected\n    address private _wallet;\n    // Amount of wei raised\n    uint256 private totalContributionAmount;\n    // Tokens to sell = 5 Billions * 10^18 = 5 * 10^27 = 5000000000000000000000000000\n    uint256 public constant TOKENSFORSALE = 5000000000000000000000000000;\n    // Current ico round\n    uint256 public currentIcoRound;\n    // Distributed Tokens\n    uint256 public distributedTokens;\n    // Amount of wei raised from other currencies\n    uint256 public weiRaisedFromOtherCurrencies;\n    // Refund period on\n    bool public isRefunding = false;\n    // Finalized crowdsale off\n    bool public isFinalized = false;\n    // Refunding deadline\n    uint256 public refundDeadline;\n\n    /**\n      * Event for token purchase logging\n      * @param purchaser who paid for the tokens\n      * @param beneficiary who got the tokens\n      * @param value weis paid for purchase\n      * @param amount amount of tokens purchased\n      */\n    event TokensPurchased(\n        address indexed purchaser,\n        address indexed beneficiary,\n        uint256 value,\n        uint256 amount\n    );\n\n    /**\n      * @param wallet Address where collected funds will be forwarded to\n      * @param token Address of the token being sold\n      */\n    constructor(address wallet, ERC20Burnable token) public {\n        require(wallet != address(0) && token != address(0));\n\n        icoRounds[1] = IcoRound(\n            416700,\n            3 ether,\n            600 ether,\n            0,\n            1200 ether\n        );\n\n        icoRounds[2] = IcoRound(\n            312500,\n            12 ether,\n            5000 ether,\n            0,\n            6000 ether\n        );\n\n        icoRounds[3] = IcoRound(\n            250000,\n            3 ether,\n            30 ether,\n            7200 ether,\n            17200 ether\n        );\n\n        _wallet = wallet;\n        _token = token;\n    }\n\n    /**\n      * @dev fallback function ***DO NOT OVERRIDE***\n      */\n    function () external payable {\n        buyTokens(msg.sender);\n    }\n\n    /**\n      * @dev low level token purchase ***DO NOT OVERRIDE***\n      * @param _contributor Address performing the token purchase\n      */\n    function buyTokens(address _contributor) public payable {\n        require(whitelist[_contributor]);\n\n        uint256 contributionAmount = msg.value;\n\n        _preValidatePurchase(_contributor, contributionAmount, currentIcoRound);\n\n        totalContributionAmount = totalContributionAmount.add(contributionAmount);\n\n        uint tokenAmount = _handlePurchase(contributionAmount, currentIcoRound, _contributor);\n\n        emit TokensPurchased(msg.sender, _contributor, contributionAmount, tokenAmount);\n\n        _forwardFunds();\n    }\n\n    /**\n      * @dev Function to go to the next round\n      * @return True bool when round is incremented\n      */\n    function goToNextRound() public onlyOwner returns(bool) {\n        require(currentIcoRound >= 0 && currentIcoRound < 3);\n\n        currentIcoRound = currentIcoRound + 1;\n\n        return true;\n    }\n\n    /**\n      * @dev Manually adds a contributor's contribution for private presale period\n      * @param _contributor The address of the contributor\n      * @param _contributionAmount Amount of wei contributed\n      */\n    function addPrivateSaleContributors(address _contributor, uint256 _contributionAmount)\n    public onlyOwner\n    {\n        uint privateSaleRound = 1;\n        _preValidatePurchase(_contributor, _contributionAmount, privateSaleRound);\n\n        totalContributionAmount = totalContributionAmount.add(_contributionAmount);\n\n        addToWhitelist(_contributor);\n\n        _handlePurchase(_contributionAmount, privateSaleRound, _contributor);\n    }\n\n    /**\n      * @dev Manually adds a contributor's contribution with other currencies\n      * @param _contributor The address of the contributor\n      * @param _contributionAmount Amount of wei contributed\n      * @param _round contribution round\n      */\n    function addOtherCurrencyContributors(address _contributor, uint256 _contributionAmount, uint256 _round)\n    public onlyOwner\n    {\n        _preValidatePurchase(_contributor, _contributionAmount, _round);\n\n        weiRaisedFromOtherCurrencies = weiRaisedFromOtherCurrencies.add(_contributionAmount);\n\n        addToWhitelist(_contributor);\n\n        _handlePurchase(_contributionAmount, _round, _contributor);\n    }\n\n    /**\n      * @dev Function to close refunding period\n      * @return True bool\n      */\n    function closeRefunding() public returns(bool) {\n        require(isRefunding);\n        require(block.timestamp > refundDeadline);\n\n        isRefunding = false;\n\n        _withdrawFunds(wallet());\n\n        return true;\n    }\n\n    /**\n      * @dev Function to close the crowdsale\n      * @return True bool\n      */\n    function closeCrowdsale() public onlyOwner returns(bool) {\n        require(currentIcoRound > 0 && currentIcoRound < 4);\n\n        currentIcoRound = 4;\n\n        return true;\n    }\n\n    /**\n      * @dev Function to finalize the crowdsale\n      * @param _burn bool burn unsold tokens when true\n      * @return True bool\n      */\n    function finalizeCrowdsale(bool _burn) public onlyOwner returns(bool) {\n        require(currentIcoRound == 4 && !isRefunding);\n\n        if (raisedFunds() < icoRounds[3].softCap) {\n            isRefunding = true;\n            refundDeadline = block.timestamp + 4 weeks;\n\n            return true;\n        }\n\n        require(!isFinalized);\n\n        _withdrawFunds(wallet());\n        isFinalized = true;\n\n        if (_burn) {\n            _burnUnsoldTokens();\n        } else {\n            _withdrawUnsoldTokens();\n        }\n\n        return  true;\n    }\n\n    /**\n      * @dev Investors can claim refunds here if crowdsale is unsuccessful\n      */\n    function claimRefund() public {\n        require(isRefunding);\n        require(block.timestamp <= refundDeadline);\n        require(payments(msg.sender) > 0);\n\n        uint256 payment = _withdrawPayments(msg.sender);\n\n        totalContributionAmount = totalContributionAmount.sub(payment);\n    }\n\n    /**\n      * @dev Allows the sender to claim the tokens he is allowed to withdraw\n      */\n    function claimTokens() public {\n        require(getWithdrawableAmount(msg.sender) != 0);\n\n        uint256 amount = getWithdrawableAmount(msg.sender);\n        withdrawn[msg.sender] = withdrawn[msg.sender].add(amount);\n\n        _deliverTokens(msg.sender, amount);\n    }\n\n    /**\n      * @dev returns the token being sold\n      * @return the token being sold\n      */\n    function token() public view returns(ERC20Burnable) {\n        return _token;\n    }\n\n    /**\n      * @dev returns the wallet address that collects the funds\n      * @return the address where funds are collected\n      */\n    function wallet() public view returns(address) {\n        return _wallet;\n    }\n\n    /**\n      * @dev Returns the total of raised funds\n      * @return total amount of raised funds\n      */\n    function raisedFunds() public view returns(uint256) {\n        return totalContributionAmount.add(weiRaisedFromOtherCurrencies);\n    }\n\n    // -----------------------------------------\n    // Internal interface\n    // -----------------------------------------\n    /**\n      * @dev Source of tokens. Override this method to modify the way in which\n      * the crowdsale ultimately gets and sends its tokens.\n      * @param _beneficiary Address performing the token purchase\n      * @param _tokenAmount Number of tokens to be emitted\n      */\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount)\n    internal\n    {\n        _token.transfer(_beneficiary, _tokenAmount);\n    }\n\n    /**\n      * @dev Determines how ETH is stored/forwarded on purchases.\n      */\n    function _forwardFunds()\n    internal\n    {\n        if (currentIcoRound == 2 || currentIcoRound == 3) {\n            _asyncTransfer(msg.sender, msg.value);\n        } else {\n            _wallet.transfer(msg.value);\n        }\n    }\n\n    /**\n      * @dev Gets tokens allowed to deliver in the given round\n      * @param _tokenAmount total amount of tokens involved in the purchase\n      * @param _round Round in which the purchase is happening\n      * @return Returns the amount of tokens allowed to deliver\n      */\n    function _getTokensToDeliver(uint _tokenAmount, uint _round)\n    internal pure returns(uint)\n    {\n        require(_round > 0 && _round < 4);\n        uint deliverPercentage = _round.mul(25);\n\n        return _tokenAmount.mul(deliverPercentage).div(100);\n    }\n\n    /**\n      * @dev Handles token purchasing\n      * @param _contributor Address performing the token purchase\n      * @param _contributionAmount Value in wei involved in the purchase\n      * @param _round Round in which the purchase is happening\n      * @return Returns the amount of tokens purchased\n      */\n    function _handlePurchase(uint _contributionAmount, uint _round, address _contributor)\n    internal returns(uint) {\n        uint256 soldTokens = distributedTokens.add(vestedTokens);\n        uint256 tokenAmount = _getTokenAmount(_contributionAmount, _round);\n\n        require(tokenAmount.add(soldTokens) <= TOKENSFORSALE);\n\n        contributions[_contributor] = contributions[_contributor].add(_contributionAmount);\n        contributionsRound[_contributor] = _round;\n\n        uint tokensToDeliver = _getTokensToDeliver(tokenAmount, _round);\n        uint tokensToVest = tokenAmount.sub(tokensToDeliver);\n\n        distributedTokens = distributedTokens.add(tokensToDeliver);\n        vestedTokens = vestedTokens.add(tokensToVest);\n\n        _deliverTokens(_contributor, tokensToDeliver);\n\n        return tokenAmount;\n    }\n\n    /**\n      * @dev Validation of an incoming purchase.\n      * @param _contributor Address performing the token purchase\n      * @param _contributionAmount Value in wei involved in the purchase\n      * @param _round Round in which the purchase is happening\n      */\n    function _preValidatePurchase(address _contributor, uint256 _contributionAmount, uint _round)\n    internal view\n    {\n        require(_contributor != address(0));\n        require(currentIcoRound > 0 && currentIcoRound < 4);\n        require(_round > 0 && _round < 4);\n        require(contributions[_contributor] == 0);\n        require(_contributionAmount >= icoRounds[_round].individualFloor);\n        require(_contributionAmount < icoRounds[_round].individualCap);\n        require(_doesNotExceedHardCap(_contributionAmount, _round));\n    }\n\n    /**\n      * @dev define the way in which ether is converted to tokens.\n      * @param _contributionAmount Value in wei to be converted into tokens\n      * @return Number of tokens that can be purchased with the specified _contributionAmount\n      */\n    function _getTokenAmount(uint256 _contributionAmount, uint256 _round)\n    internal view returns(uint256)\n    {\n        uint256 _rate = icoRounds[_round].rate;\n        return _contributionAmount.mul(_rate);\n    }\n\n    /**\n      * @dev Checks if current round hardcap will not be exceeded by a new contribution\n      * @param _contributionAmount purchase amount in Wei\n      * @param _round Round in which the purchase is happening\n      * @return true when current hardcap is not exceeded, false if exceeded\n      */\n    function _doesNotExceedHardCap(uint _contributionAmount, uint _round)\n    internal view returns(bool)\n    {\n        uint roundHardCap = icoRounds[_round].hardCap;\n        return totalContributionAmount.add(_contributionAmount) <= roundHardCap;\n    }\n\n    /**\n      * @dev Function to burn unsold tokens\n      */\n    function _burnUnsoldTokens()\n    internal\n    {\n        uint256 tokensToBurn = TOKENSFORSALE.sub(vestedTokens).sub(distributedTokens);\n\n        _token.burn(tokensToBurn);\n    }\n\n    /**\n      * @dev Transfer the unsold tokens to the funds collecting address\n      */\n    function _withdrawUnsoldTokens()\n    internal {\n        uint256 tokensToWithdraw = TOKENSFORSALE.sub(vestedTokens).sub(distributedTokens);\n\n        _token.transfer(_wallet, tokensToWithdraw);\n    }\n}",
  "bytecode": "6080604052600f805461ffff191690553480156200001c57600080fd5b5060405160408062002621833981016040819052815160209092015160048054600160a060020a0319163317908190559091600160a060020a0391909116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3620000973364010000000062000445810204565b6007805460ff19169055620000ab6200052a565b604051809103906000f080158015620000c8573d6000803e3d6000fd5b506007805461010060a860020a031916610100600160a060020a0393841602179055821615801590620001035750600160a060020a03811615155b15156200010f57600080fd5b6040805160a0818101835262065bbc82526729a2241af62c00006020808401828152682086ac3510526000008587019081526000606080880182815268410d586a20a4c000006080808b019182526001855260088089529a517fad67d757c34507f157cacfa2e3153e9f260a2244f30428821be7be64587ac55f5595517fad67d757c34507f157cacfa2e3153e9f260a2244f30428821be7be64587ac5605593517fad67d757c34507f157cacfa2e3153e9f260a2244f30428821be7be64587ac56155517fad67d757c34507f157cacfa2e3153e9f260a2244f30428821be7be64587ac5625591517fad67d757c34507f157cacfa2e3153e9f260a2244f30428821be7be64587ac56355875180870189526204c4b4815267a688906bd8b0000081860190815269010f0cf064dd59200000828b0190815282850184815269014542ba12a337c00000848801908152600286528b895293517f6add646517a5b0f6793cd5891b7937d28a5b2981a5d88ebc7cd776088fea90415591517f6add646517a5b0f6793cd5891b7937d28a5b2981a5d88ebc7cd776088fea904255517f6add646517a5b0f6793cd5891b7937d28a5b2981a5d88ebc7cd776088fea904355517f6add646517a5b0f6793cd5891b7937d28a5b2981a5d88ebc7cd776088fea904455517f6add646517a5b0f6793cd5891b7937d28a5b2981a5d88ebc7cd776088fea904555875195860188526203d09086528584019485526801a055690d9db8000097860197885269018650127cc3dc8000009186019182526903a469f3467e8ec00000928601928352600390529490915291517f625b35f5e76f098dd7c3a05b10e2e5e78a4a01228d60c3b143426cdf36d2645555517f625b35f5e76f098dd7c3a05b10e2e5e78a4a01228d60c3b143426cdf36d264565591517f625b35f5e76f098dd7c3a05b10e2e5e78a4a01228d60c3b143426cdf36d2645755517f625b35f5e76f098dd7c3a05b10e2e5e78a4a01228d60c3b143426cdf36d2645855517f625b35f5e76f098dd7c3a05b10e2e5e78a4a01228d60c3b143426cdf36d2645955600a8054600160a060020a03938416600160a060020a031991821617909155600980549290931691161790556200053b565b6200046060068264010000000062001ac06200049782021704565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600160a060020a0381161515620004ad57600080fd5b620004c28282640100000000620004f2810204565b15620004cd57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a03821615156200050a57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b60405161057980620020a883390190565b611b5d806200054b6000396000f3006080604052600436106101ed5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663039beb0c81146101f85780630dfee9361461023b578063102793f6146102625780631aa7a4631461027757806320ab39f31461028c5780633c83c2a4146102b35780633f4ba83a146102e157806342e94c90146102f657806346fbf68e1461031757806348c54b9d14610338578063521eb2731461034d578063586360ce1461037e5780635c975abb146103935780636ef61092146103a85780636ef8d66d146103c9578063715018a6146103de57806375ceada4146103f357806382dc1ec4146104145780638456cb59146104355780638ab1d6811461044a5780638d4e40831461046b5780638da5cb5b146104805780638f32d59b14610495578063983c0a01146104aa5780639b19251a146104bf5780639d6fb020146104e0578063b5545a3c146104f5578063bd71127e1461050a578063bdf712341461051f578063d3bcbb3c14610543578063d62d381814610598578063dfb8dca9146105ad578063e1aa1bcc146105c2578063e2982c21146105d7578063e43252d7146105f8578063ec8ac4d814610619578063f2fde38b1461062d578063f67771751461064e578063f6f230581461066f578063fc0c546a14610684575b6101f633610699565b005b34801561020457600080fd5b5061021060043561074c565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561024757600080fd5b5061025061077b565b60408051918252519081900360200190f35b34801561026e57600080fd5b50610250610781565b34801561028357600080fd5b50610250610787565b34801561029857600080fd5b506101f6600160a060020a0360043516602435604435610797565b3480156102bf57600080fd5b506102cd60043515156107e5565b604080519115158252519081900360200190f35b3480156102ed57600080fd5b506101f66108cb565b34801561030257600080fd5b50610250600160a060020a036004351661092f565b34801561032357600080fd5b506102cd600160a060020a0360043516610941565b34801561034457600080fd5b506101f661095a565b34801561035957600080fd5b506103626109bc565b60408051600160a060020a039092168252519081900360200190f35b34801561038a57600080fd5b506102506109cb565b34801561039f57600080fd5b506102cd6109d1565b3480156103b457600080fd5b50610250600160a060020a03600435166109da565b3480156103d557600080fd5b506101f66109ec565b3480156103ea57600080fd5b506101f66109f7565b3480156103ff57600080fd5b50610250600160a060020a0360043516610a61565b34801561042057600080fd5b506101f6600160a060020a0360043516610a73565b34801561044157600080fd5b506101f6610a90565b34801561045657600080fd5b506101f6600160a060020a0360043516610af6565b34801561047757600080fd5b506102cd610b52565b34801561048c57600080fd5b50610362610b60565b3480156104a157600080fd5b506102cd610b6f565b3480156104b657600080fd5b506102cd610b80565b3480156104cb57600080fd5b506102cd600160a060020a0360043516610bbf565b3480156104ec57600080fd5b506102cd610bd4565b34801561050157600080fd5b506101f6610bdd565b34801561051657600080fd5b506102cd610c3a565b34801561052b57600080fd5b506101f6600160a060020a0360043516602435610c77565b34801561054f57600080fd5b50604080516020600480358082013583810280860185019096528085526101f695369593946024949385019291829185019084908082843750949750610cb99650505050505050565b3480156105a457600080fd5b50610250610d7a565b3480156105b957600080fd5b50610250610d80565b3480156105ce57600080fd5b50610250610d9e565b3480156105e357600080fd5b50610250600160a060020a0360043516610da4565b34801561060457600080fd5b506101f6600160a060020a0360043516610e45565b6101f6600160a060020a0360043516610699565b34801561063957600080fd5b506101f6600160a060020a0360043516610ea4565b34801561065a57600080fd5b50610250600160a060020a0360043516610ec0565b34801561067b57600080fd5b506102cd610f27565b34801561069057600080fd5b50610362610f6c565b600160a060020a038116600090815260056020526040812054819060ff1615156106c257600080fd5b3491506106d28383600c54610f7b565b600b546106e5908363ffffffff61103d16565b600b55600c546106f79083908561105a565b60408051848152602081018390528151929350600160a060020a0386169233927f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b928290030190a3610747611160565b505050565b600860205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b60035481565b600c5481565b6b1027e72f1f1281308800000081565b61079f610b6f565b15156107aa57600080fd5b6107b5838383610f7b565b600e546107c8908363ffffffff61103d16565b600e556107d483610e45565b6107df82828561105a565b50505050565b60006107ef610b6f565b15156107fa57600080fd5b600c54600414801561080f5750600f5460ff16155b151561081a57600080fd5b600360005260086020527f625b35f5e76f098dd7c3a05b10e2e5e78a4a01228d60c3b143426cdf36d264585461084e610d80565b10156108735750600f805460ff191660019081179091556224ea0042016010556108c6565b600f54610100900460ff161561088857600080fd5b6108986108936109bc565b6111c0565b600f805461ff00191661010017905581156108ba576108b5611248565b6108c2565b6108c26112da565b5060015b919050565b6108d433610941565b15156108df57600080fd5b60075460ff1615156108f057600080fd5b6007805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b60016020526000908152604090205481565b600061095460068363ffffffff6113a116565b92915050565b600061096533610ec0565b151561097057600080fd5b61097933610ec0565b3360009081526020819052604090205490915061099c908263ffffffff61103d16565b336000818152602081905260409020919091556109b990826113d8565b50565b600a54600160a060020a031690565b600d5481565b60075460ff1690565b60006020819052908152604090205481565b6109f533611471565b565b6109ff610b6f565b1515610a0a57600080fd5b600454604051600091600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36004805473ffffffffffffffffffffffffffffffffffffffff19169055565b60026020526000908152604090205481565b610a7c33610941565b1515610a8757600080fd5b6109b9816114b9565b610a9933610941565b1515610aa457600080fd5b60075460ff1615610ab457600080fd5b6007805460ff191660011790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b610afe610b6f565b1515610b0957600080fd5b600160a060020a038116600081815260056020526040808220805460ff19169055517f91ffc01aeb0780ceeb564f01b8d508d274c196b6b2c013fce6087f29e6970e089190a250565b600f54610100900460ff1681565b600454600160a060020a031690565b600454600160a060020a0316331490565b6000610b8a610b6f565b1515610b9557600080fd5b6000600c54118015610ba957506004600c54105b1515610bb457600080fd5b506004600c55600190565b60056020526000908152604090205460ff1681565b600f5460ff1681565b600f5460009060ff161515610bf157600080fd5b601054421115610c0057600080fd5b6000610c0b33610da4565b11610c1557600080fd5b610c1e33611501565b600b54909150610c34908263ffffffff6115a316565b600b5550565b600f5460009060ff161515610c4e57600080fd5b6010544211610c5c57600080fd5b600f805460ff19169055610c716108936109bc565b50600190565b6000610c81610b6f565b1515610c8c57600080fd5b506001610c9a838383610f7b565b600b54610cad908363ffffffff61103d16565b600b556107d483610e45565b6000610cc3610b6f565b1515610cce57600080fd5b5060005b8151811015610d76576001600560008484815181101515610cef57fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff19169115159190911790558151829082908110610d2f57fe5b90602001906020020151600160a060020a03167f2e3361a4e7a8b067d0bbafcb5811e35ba5eccbb7a274be8bcfe4fb6f81fe30c860405160405180910390a2600101610cd2565b5050565b600e5481565b6000610d99600e54600b5461103d90919063ffffffff16565b905090565b60105481565b600754604080517fe3a9db1a000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152915160009361010090049092169163e3a9db1a9160248082019260209290919082900301818787803b158015610e1357600080fd5b505af1158015610e27573d6000803e3d6000fd5b505050506040513d6020811015610e3d57600080fd5b505192915050565b610e4d610b6f565b1515610e5857600080fd5b600160a060020a038116600081815260056020526040808220805460ff19166001179055517f2e3361a4e7a8b067d0bbafcb5811e35ba5eccbb7a274be8bcfe4fb6f81fe30c89190a250565b610eac610b6f565b1515610eb757600080fd5b6109b9816115ba565b600080600080610ecf85611638565b60ff169250610edd8561179b565b600160a060020a038616600090815260208190526040902054909250610f1990610f0d858563ffffffff61191d16565b9063ffffffff6115a316565b90508093505b505050919050565b6000610f31610b6f565b1515610f3c57600080fd5b6000600c5410158015610f5157506003600c54105b1515610f5c57600080fd5b50600c8054600190810190915590565b600954600160a060020a031690565b600160a060020a0383161515610f9057600080fd5b6000600c54118015610fa457506004600c54105b1515610faf57600080fd5b600081118015610fbf5750600481105b1515610fca57600080fd5b600160a060020a03831660009081526001602052604090205415610fed57600080fd5b60008181526008602052604090206001015482101561100b57600080fd5b600081815260086020526040902060020154821061102857600080fd5b611032828261194b565b151561074757600080fd5b60008282018381101561104f57600080fd5b8091505b5092915050565b6000806000806000611079600354600d5461103d90919063ffffffff16565b9350611085888861197c565b92506b1027e72f1f128130880000006110a4848663ffffffff61103d16565b11156110af57600080fd5b600160a060020a0386166000908152600160205260409020546110d8908963ffffffff61103d16565b600160a060020a038716600090815260016020908152604080832093909355600290522087905561110983886119a3565b915061111b838363ffffffff6115a316565b600d54909150611131908363ffffffff61103d16565b600d55600354611147908263ffffffff61103d16565b60035561115486836113d8565b50909695505050505050565b600c54600214806111735750600c546003145b156111875761118233346119e9565b6109f5565b600a54604051600160a060020a03909116903480156108fc02916000818181858888f193505050501580156109b9573d6000803e3d6000fd5b600754604080517f5b7e3405000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152915161010090930490911691635b7e34059160248082019260009290919082900301818387803b15801561122d57600080fd5b505af1158015611241573d6000803e3d6000fd5b5050505050565b6000611271600d54610f0d6003546b1027e72f1f128130880000006115a390919063ffffffff16565b600954604080517f42966c68000000000000000000000000000000000000000000000000000000008152600481018490529051929350600160a060020a03909116916342966c689160248082019260009290919082900301818387803b15801561122d57600080fd5b6000611303600d54610f0d6003546b1027e72f1f128130880000006115a390919063ffffffff16565b600954600a54604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015260248101859052905193945091169163a9059cbb916044808201926020929091908290030181600087803b15801561137757600080fd5b505af115801561138b573d6000803e3d6000fd5b505050506040513d602081101561074757600080fd5b6000600160a060020a03821615156113b857600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b600954604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561144757600080fd5b505af115801561145b573d6000803e3d6000fd5b505050506040513d60208110156107df57600080fd5b61148260068263ffffffff611a7416565b604051600160a060020a038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b6114ca60068263ffffffff611ac016565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600754604080517f51cff8d9000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151600093849361010090910416916351cff8d991602480830192602092919082900301818787803b15801561157057600080fd5b505af1158015611584573d6000803e3d6000fd5b505050506040513d602081101561159a57600080fd5b50519392505050565b600080838311156115b357600080fd5b5050900390565b600160a060020a03811615156115cf57600080fd5b600454604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0381166000908152600160205260408120548190819081908190819081908190151561166a57600080fd5b600160a060020a0389166000908152600260205260408120541180156116a85750600160a060020a0389166000908152600260205260409020546004115b15156116b357600080fd5b505050600160a060020a038616600090815260026020526040902054635ca073809450635cc800809350635cf0df009250635d186c009150635d414a8090635d91b60090600181141561173c5786421015611711576000975061178f565b83421015611722576001975061178f565b81421015611733576002975061178f565b6003975061178f565b80600214156117705785421015611756576000975061178f565b82421015611767576001975061178f565b6002975061178f565b806003141561178f578442101561178a576000975061178f565b600197505b50505050505050919050565b600160a060020a03811660009081526001602052604081205481908190819015156117c557600080fd5b600160a060020a0385166000908152600260205260408120541180156118035750600160a060020a0385166000908152600260205260409020546004115b151561180e57600080fd5b600160a060020a038516600090815260026020526040902054925060018314156118915750600160a060020a03841660009081526001602052604090205462065bbc906118879060649061187b9060199061186f908663ffffffff61191d16565b9063ffffffff61191d16565b9063ffffffff611b0e16565b9150819350610f1f565b82600214156118d75750600160a060020a0384166000908152600160205260409020546204c4b4906118879060649061187b9060199061186f908663ffffffff61191d16565b50600160a060020a0384166000908152600160205260409020546203d090906119149060649061187b9060199061186f908663ffffffff61191d16565b95945050505050565b6000808315156119305760009150611053565b5082820282848281151561194057fe5b041461104f57600080fd5b600081815260086020526040812060040154600b548190611972908663ffffffff61103d16565b1115949350505050565b60008181526008602052604081205461199b848263ffffffff61191d16565b949350505050565b6000806000831180156119b65750600483105b15156119c157600080fd5b6119d283601963ffffffff61191d16565b905061199b606461187b868463ffffffff61191d16565b600754604080517ff340fa01000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483015291516101009093049091169163f340fa01918491602480830192600092919082900301818588803b158015611a5757600080fd5b505af1158015611a6b573d6000803e3d6000fd5b50505050505050565b600160a060020a0381161515611a8957600080fd5b611a9382826113a1565b1515611a9e57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0381161515611ad557600080fd5b611adf82826113a1565b15611ae957600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600080808311611b1d57600080fd5b8284811515611b2857fe5b049493505050505600a165627a7a7230582097aa7cd1ce05a26eee319d960a5821c41b46cf85aa7054b666ae324463b1391e00296080604081905260008054600160a060020a0319163317808255600160a060020a0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3610522806100576000396000f30060806040526004361061008d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166351cff8d981146100925780635b7e3405146100c5578063715018a6146100e85780638da5cb5b146100fd5780638f32d59b1461012e578063e3a9db1a14610157578063f2fde38b14610178578063f340fa0114610199575b600080fd5b34801561009e57600080fd5b506100b3600160a060020a03600435166101ad565b60408051918252519081900360200190f35b3480156100d157600080fd5b506100e6600160a060020a0360043516610272565b005b3480156100f457600080fd5b506100e6610305565b34801561010957600080fd5b5061011261036f565b60408051600160a060020a039092168252519081900360200190f35b34801561013a57600080fd5b5061014361037e565b604080519115158252519081900360200190f35b34801561016357600080fd5b506100b3600160a060020a036004351661038f565b34801561018457600080fd5b506100e6600160a060020a03600435166103aa565b6100e6600160a060020a03600435166103c9565b6000806101b861037e565b15156101c357600080fd5b50600160a060020a03821660009081526001602052604090205430318111156101e857fe5b600160a060020a0383166000818152600160205260408082208290555183156108fc0291849190818181858888f1935050505015801561022c573d6000803e3d6000fd5b50604080518281529051600160a060020a038516917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a292915050565b600061027c61037e565b151561028757600080fd5b50604051303190600160a060020a0383169082156108fc029083906000818181858888f193505050501580156102c1573d6000803e3d6000fd5b50604080518281529051600160a060020a038416917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a25050565b61030d61037e565b151561031857600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031690565b600054600160a060020a0316331490565b600160a060020a031660009081526001602052604090205490565b6103b261037e565b15156103bd57600080fd5b6103c681610460565b50565b60006103d361037e565b15156103de57600080fd5b50600160a060020a038116600090815260016020526040902054349061040a908263ffffffff6104dd16565b600160a060020a038316600081815260016020908152604091829020939093558051848152905191927f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c492918290030190a25050565b600160a060020a038116151561047557600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000828201838110156104ef57600080fd5b93925050505600a165627a7a7230582073447b5e5b9d45d6eda24dac267c99e9972ec32b7802157b8097ebbf0573666700290000000000000000000000005b5eb140d73ae818d013c51f92ccfcd2567708aa000000000000000000000000eeb86b7c0687002613bc88328499f5734e7be4c0",
  "constructorArguments": "0000000000000000000000005b5eb140d73ae818d013c51f92ccfcd2567708aa000000000000000000000000eeb86b7c0687002613bc88328499f5734e7be4c0"
}