{
  "address": "0x8a187d5285d316bcbc9adafc08b51d70a0d8e000",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "SIFT Token",
  "contractName": "SmartInvestmentFundToken",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-07-17\n*/\n\npragma solidity ^0.4.11;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n/* The authentication manager details user accounts that have access to certain priviledges and keeps a permanent ledger of who has and has had these rights. */\ncontract AuthenticationManager {\n    /* Map addresses to admins */\n    mapping (address => bool) adminAddresses;\n\n    /* Map addresses to account readers */\n    mapping (address => bool) accountReaderAddresses;\n\n    /* Details of all admins that have ever existed */\n    address[] adminAudit;\n\n    /* Details of all account readers that have ever existed */\n    address[] accountReaderAudit;\n\n    /* Fired whenever an admin is added to the contract. */\n    event AdminAdded(address addedBy, address admin);\n\n    /* Fired whenever an admin is removed from the contract. */\n    event AdminRemoved(address removedBy, address admin);\n\n    /* Fired whenever an account-reader contract is added. */\n    event AccountReaderAdded(address addedBy, address account);\n\n    /* Fired whenever an account-reader contract is removed. */\n    event AccountReaderRemoved(address removedBy, address account);\n\n    /* When this contract is first setup we use the creator as the first admin */    \n    function AuthenticationManager() {\n        /* Set the first admin to be the person creating the contract */\n        adminAddresses[msg.sender] = true;\n        AdminAdded(0, msg.sender);\n        adminAudit.length++;\n        adminAudit[adminAudit.length - 1] = msg.sender;\n    }\n\n    /* Gets the contract version for validation */\n    function contractVersion() constant returns(uint256) {\n        // Admin contract identifies as 100YYYYMMDDHHMM\n        return 100201707171503;\n    }\n\n    /* Gets whether or not the specified address is currently an admin */\n    function isCurrentAdmin(address _address) constant returns (bool) {\n        return adminAddresses[_address];\n    }\n\n    /* Gets whether or not the specified address has ever been an admin */\n    function isCurrentOrPastAdmin(address _address) constant returns (bool) {\n        for (uint256 i = 0; i < adminAudit.length; i++)\n            if (adminAudit[i] == _address)\n                return true;\n        return false;\n    }\n\n    /* Gets whether or not the specified address is currently an account reader */\n    function isCurrentAccountReader(address _address) constant returns (bool) {\n        return accountReaderAddresses[_address];\n    }\n\n    /* Gets whether or not the specified address has ever been an admin */\n    function isCurrentOrPastAccountReader(address _address) constant returns (bool) {\n        for (uint256 i = 0; i < accountReaderAudit.length; i++)\n            if (accountReaderAudit[i] == _address)\n                return true;\n        return false;\n    }\n\n    /* Adds a user to our list of admins */\n    function addAdmin(address _address) {\n        /* Ensure we're an admin */\n        if (!isCurrentAdmin(msg.sender))\n            throw;\n\n        // Fail if this account is already admin\n        if (adminAddresses[_address])\n            throw;\n        \n        // Add the user\n        adminAddresses[_address] = true;\n        AdminAdded(msg.sender, _address);\n        adminAudit.length++;\n        adminAudit[adminAudit.length - 1] = _address;\n    }\n\n    /* Removes a user from our list of admins but keeps them in the history audit */\n    function removeAdmin(address _address) {\n        /* Ensure we're an admin */\n        if (!isCurrentAdmin(msg.sender))\n            throw;\n\n        /* Don't allow removal of self */\n        if (_address == msg.sender)\n            throw;\n\n        // Fail if this account is already non-admin\n        if (!adminAddresses[_address])\n            throw;\n\n        /* Remove this admin user */\n        adminAddresses[_address] = false;\n        AdminRemoved(msg.sender, _address);\n    }\n\n    /* Adds a user/contract to our list of account readers */\n    function addAccountReader(address _address) {\n        /* Ensure we're an admin */\n        if (!isCurrentAdmin(msg.sender))\n            throw;\n\n        // Fail if this account is already in the list\n        if (accountReaderAddresses[_address])\n            throw;\n        \n        // Add the user\n        accountReaderAddresses[_address] = true;\n        AccountReaderAdded(msg.sender, _address);\n        accountReaderAudit.length++;\n        accountReaderAudit[adminAudit.length - 1] = _address;\n    }\n\n    /* Removes a user/contracts from our list of account readers but keeps them in the history audit */\n    function removeAccountReader(address _address) {\n        /* Ensure we're an admin */\n        if (!isCurrentAdmin(msg.sender))\n            throw;\n\n        // Fail if this account is already not in the list\n        if (!accountReaderAddresses[_address])\n            throw;\n\n        /* Remove this admin user */\n        accountReaderAddresses[_address] = false;\n        AccountReaderRemoved(msg.sender, _address);\n    }\n}\n\ncontract IcoPhaseManagement {\n    using SafeMath for uint256;\n    \n    /* Defines whether or not we are in the ICO phase */\n    bool public icoPhase = true;\n\n    /* Defines whether or not the ICO has been abandoned */\n    bool public icoAbandoned = false;\n\n    /* Defines whether or not the SIFT contract address has yet been set.  */\n    bool siftContractDefined = false;\n    \n    /* Defines the sale price during ICO */\n    uint256 constant icoUnitPrice = 10 finney;\n\n    /* If an ICO is abandoned and some withdrawals fail then this map allows people to request withdrawal of locked-in ether. */\n    mapping(address => uint256) public abandonedIcoBalances;\n\n    /* Defines our interface to the SIFT contract. */\n    SmartInvestmentFundToken smartInvestmentFundToken;\n\n    /* Defines the admin contract we interface with for credentails. */\n    AuthenticationManager authenticationManager;\n\n    /* Defines the time that the ICO starts. */\n    uint256 constant public icoStartTime = 1501545600; // August 1st 2017 at 00:00:00 UTC\n\n    /* Defines the time that the ICO ends. */\n    uint256 constant public icoEndTime = 1505433600; // September 15th 2017 at 00:00:00 UTC\n\n    /* Defines our event fired when the ICO is closed */\n    event IcoClosed();\n\n    /* Defines our event fired if the ICO is abandoned */\n    event IcoAbandoned(string details);\n    \n    /* Ensures that once the ICO is over this contract cannot be used until the point it is destructed. */\n    modifier onlyDuringIco {\n        bool contractValid = siftContractDefined && !smartInvestmentFundToken.isClosed();\n        if (!contractValid || (!icoPhase && !icoAbandoned)) throw;\n        _;\n    }\n\n    /* This modifier allows a method to only be called by current admins */\n    modifier adminOnly {\n        if (!authenticationManager.isCurrentAdmin(msg.sender)) throw;\n        _;\n    }\n\n    /* Create the ICO phase managerment and define the address of the main SIFT contract. */\n    function IcoPhaseManagement(address _authenticationManagerAddress) {\n        /* A basic sanity check */\n        if (icoStartTime >= icoEndTime)\n            throw;\n\n        /* Setup access to our other contracts and validate their versions */\n        authenticationManager = AuthenticationManager(_authenticationManagerAddress);\n        if (authenticationManager.contractVersion() != 100201707171503)\n            throw;\n    }\n\n    /* Set the SIFT contract address as a one-time operation.  This happens after all the contracts are created and no\n       other functionality can be used until this is set. */\n    function setSiftContractAddress(address _siftContractAddress) adminOnly {\n        /* This can only happen once in the lifetime of this contract */\n        if (siftContractDefined)\n            throw;\n\n        /* Setup access to our other contracts and validate their versions */\n        smartInvestmentFundToken = SmartInvestmentFundToken(_siftContractAddress);\n        if (smartInvestmentFundToken.contractVersion() != 500201707171440)\n            throw;\n        siftContractDefined = true;\n    }\n\n    /* Gets the contract version for validation */\n    function contractVersion() constant returns(uint256) {\n        /* ICO contract identifies as 300YYYYMMDDHHMM */\n        return 300201707171440;\n    }\n\n    /* Close the ICO phase and transition to execution phase */\n    function close() adminOnly onlyDuringIco {\n        // Forbid closing contract before the end of ICO\n        if (now <= icoEndTime)\n            throw;\n\n        // Close the ICO\n        icoPhase = false;\n        IcoClosed();\n\n        // Withdraw funds to the caller\n        if (!msg.sender.send(this.balance))\n            throw;\n    }\n    \n    /* Handle receiving ether in ICO phase - we work out how much the user has bought, allocate a suitable balance and send their change */\n    function () onlyDuringIco payable {\n        // Forbid funding outside of ICO\n        if (now < icoStartTime || now > icoEndTime)\n            throw;\n\n        /* Determine how much they've actually purhcased and any ether change */\n        uint256 tokensPurchased = msg.value / icoUnitPrice;\n        uint256 purchaseTotalPrice = tokensPurchased * icoUnitPrice;\n        uint256 change = msg.value.sub(purchaseTotalPrice);\n\n        /* Increase their new balance if they actually purchased any */\n        if (tokensPurchased > 0)\n            smartInvestmentFundToken.mintTokens(msg.sender, tokensPurchased);\n\n        /* Send change back to recipient */\n        if (change > 0 && !msg.sender.send(change))\n            throw;\n    }\n\n    /* Abandons the ICO and returns funds to shareholders.  Any failed funds can be separately withdrawn once the ICO is abandoned. */\n    function abandon(string details) adminOnly onlyDuringIco {\n        // Forbid closing contract before the end of ICO\n        if (now <= icoEndTime)\n            throw;\n\n        /* If already abandoned throw an error */\n        if (icoAbandoned)\n            throw;\n\n        /* Work out a refund per share per share */\n        uint256 paymentPerShare = this.balance / smartInvestmentFundToken.totalSupply();\n\n        /* Enum all accounts and send them refund */\n        uint numberTokenHolders = smartInvestmentFundToken.tokenHolderCount();\n        uint256 totalAbandoned = 0;\n        for (uint256 i = 0; i < numberTokenHolders; i++) {\n            /* Calculate how much goes to this shareholder */\n            address addr = smartInvestmentFundToken.tokenHolder(i);\n            uint256 etherToSend = paymentPerShare * smartInvestmentFundToken.balanceOf(addr);\n            if (etherToSend < 1)\n                continue;\n\n            /* Allocate appropriate amount of fund to them */\n            abandonedIcoBalances[addr] = abandonedIcoBalances[addr].add(etherToSend);\n            totalAbandoned = totalAbandoned.add(etherToSend);\n        }\n\n        /* Audit the abandonment */\n        icoAbandoned = true;\n        IcoAbandoned(details);\n\n        // There should be no money left, but withdraw just incase for manual resolution\n        uint256 remainder = this.balance.sub(totalAbandoned);\n        if (remainder > 0)\n            if (!msg.sender.send(remainder))\n                // Add this to the callers balance for emergency refunds\n                abandonedIcoBalances[msg.sender] = abandonedIcoBalances[msg.sender].add(remainder);\n    }\n\n    /* Allows people to withdraw funds that failed to send during the abandonment of the ICO for any reason. */\n    function abandonedFundWithdrawal() {\n        // This functionality only exists if an ICO was abandoned\n        if (!icoAbandoned || abandonedIcoBalances[msg.sender] == 0)\n            throw;\n        \n        // Attempt to send them to funds\n        uint256 funds = abandonedIcoBalances[msg.sender];\n        abandonedIcoBalances[msg.sender] = 0;\n        if (!msg.sender.send(funds))\n            throw;\n    }\n}\n\n/* The SIFT itself is a simple extension of the ERC20 that allows for granting other SIFT contracts special rights to act on behalf of all transfers. */\ncontract SmartInvestmentFundToken {\n    using SafeMath for uint256;\n\n    /* Map all our our balances for issued tokens */\n    mapping (address => uint256) balances;\n\n    /* Map between users and their approval addresses and amounts */\n    mapping(address => mapping (address => uint256)) allowed;\n\n    /* List of all token holders */\n    address[] allTokenHolders;\n\n    /* The name of the contract */\n    string public name;\n\n    /* The symbol for the contract */\n    string public symbol;\n\n    /* How many DPs are in use in this contract */\n    uint8 public decimals;\n\n    /* Defines the current supply of the token in its own units */\n    uint256 totalSupplyAmount = 0;\n\n    /* Defines the address of the ICO contract which is the only contract permitted to mint tokens. */\n    address public icoContractAddress;\n\n    /* Defines whether or not the fund is closed. */\n    bool public isClosed;\n\n    /* Defines the contract handling the ICO phase. */\n    IcoPhaseManagement icoPhaseManagement;\n\n    /* Defines the admin contract we interface with for credentails. */\n    AuthenticationManager authenticationManager;\n\n    /* Fired when the fund is eventually closed. */\n    event FundClosed();\n    \n    /* Our transfer event to fire whenever we shift SMRT around */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    /* Our approval event when one user approves another to control */\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    /* Create a new instance of this fund with links to other contracts that are required. */\n    function SmartInvestmentFundToken(address _icoContractAddress, address _authenticationManagerAddress) {\n        // Setup defaults\n        name = \"Smart Investment Fund Token\";\n        symbol = \"SIFT\";\n        decimals = 0;\n\n        /* Setup access to our other contracts and validate their versions */\n        icoPhaseManagement = IcoPhaseManagement(_icoContractAddress);\n        if (icoPhaseManagement.contractVersion() != 300201707171440)\n            throw;\n        authenticationManager = AuthenticationManager(_authenticationManagerAddress);\n        if (authenticationManager.contractVersion() != 100201707171503)\n            throw;\n        \n        /* Store our special addresses */\n        icoContractAddress = _icoContractAddress;\n    }\n\n    modifier onlyPayloadSize(uint numwords) {\n        assert(msg.data.length == numwords * 32 + 4);\n        _;\n    } \n\n    /* This modifier allows a method to only be called by account readers */\n    modifier accountReaderOnly {\n        if (!authenticationManager.isCurrentAccountReader(msg.sender)) throw;\n        _;\n    }\n\n    modifier fundSendablePhase {\n        // If it's in ICO phase, forbid it\n        if (icoPhaseManagement.icoPhase())\n            throw;\n\n        // If it's abandoned, forbid it\n        if (icoPhaseManagement.icoAbandoned())\n            throw;\n\n        // We're good, funds can now be transferred\n        _;\n    }\n\n    /* Gets the contract version for validation */\n    function contractVersion() constant returns(uint256) {\n        /* SIFT contract identifies as 500YYYYMMDDHHMM */\n        return 500201707171440;\n    }\n    \n    /* Transfer funds between two addresses that are not the current msg.sender - this requires approval to have been set separately and follows standard ERC20 guidelines */\n    function transferFrom(address _from, address _to, uint256 _amount) fundSendablePhase onlyPayloadSize(3) returns (bool) {\n        if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to].add(_amount) > balances[_to]) {\n            bool isNew = balances[_to] == 0;\n            balances[_from] = balances[_from].sub(_amount);\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n            balances[_to] = balances[_to].add(_amount);\n            if (isNew)\n                tokenOwnerAdd(_to);\n            if (balances[_from] == 0)\n                tokenOwnerRemove(_from);\n            Transfer(_from, _to, _amount);\n            return true;\n        }\n        return false;\n    }\n\n    /* Returns the total number of holders of this currency. */\n    function tokenHolderCount() accountReaderOnly constant returns (uint256) {\n        return allTokenHolders.length;\n    }\n\n    /* Gets the token holder at the specified index. */\n    function tokenHolder(uint256 _index) accountReaderOnly constant returns (address) {\n        return allTokenHolders[_index];\n    }\n \n    /* Adds an approval for the specified account to spend money of the message sender up to the defined limit */\n    function approve(address _spender, uint256 _amount) fundSendablePhase onlyPayloadSize(2) returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /* Gets the current allowance that has been approved for the specified spender of the owner address */\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /* Gets the total supply available of this token */\n    function totalSupply() constant returns (uint256) {\n        return totalSupplyAmount;\n    }\n\n    /* Gets the balance of a specified account */\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /* Transfer the balance from owner's account to another account */\n    function transfer(address _to, uint256 _amount) fundSendablePhase onlyPayloadSize(2) returns (bool) {\n        /* Check if sender has balance and for overflows */\n        if (balances[msg.sender] < _amount || balances[_to].add(_amount) < balances[_to])\n            return false;\n\n        /* Do a check to see if they are new, if so we'll want to add it to our array */\n        bool isRecipientNew = balances[_to] < 1;\n\n        /* Add and subtract new balances */\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n\n        /* Consolidate arrays if they are new or if sender now has empty balance */\n        if (isRecipientNew)\n            tokenOwnerAdd(_to);\n        if (balances[msg.sender] < 1)\n            tokenOwnerRemove(msg.sender);\n\n        /* Fire notification event */\n        Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    /* If the specified address is not in our owner list, add them - this can be called by descendents to ensure the database is kept up to date. */\n    function tokenOwnerAdd(address _addr) internal {\n        /* First check if they already exist */\n        uint256 tokenHolderCount = allTokenHolders.length;\n        for (uint256 i = 0; i < tokenHolderCount; i++)\n            if (allTokenHolders[i] == _addr)\n                /* Already found so we can abort now */\n                return;\n        \n        /* They don't seem to exist, so let's add them */\n        allTokenHolders.length++;\n        allTokenHolders[allTokenHolders.length - 1] = _addr;\n    }\n\n    /* If the specified address is in our owner list, remove them - this can be called by descendents to ensure the database is kept up to date. */\n    function tokenOwnerRemove(address _addr) internal {\n        /* Find out where in our array they are */\n        uint256 tokenHolderCount = allTokenHolders.length;\n        uint256 foundIndex = 0;\n        bool found = false;\n        uint256 i;\n        for (i = 0; i < tokenHolderCount; i++)\n            if (allTokenHolders[i] == _addr) {\n                foundIndex = i;\n                found = true;\n                break;\n            }\n        \n        /* If we didn't find them just return */\n        if (!found)\n            return;\n        \n        /* We now need to shuffle down the array */\n        for (i = foundIndex; i < tokenHolderCount - 1; i++)\n            allTokenHolders[i] = allTokenHolders[i + 1];\n        allTokenHolders.length--;\n    }\n\n    /* Mint new tokens - this can only be done by special callers (i.e. the ICO management) during the ICO phase. */\n    function mintTokens(address _address, uint256 _amount) onlyPayloadSize(2) {\n        /* Ensure we are the ICO contract calling */\n        if (msg.sender != icoContractAddress || !icoPhaseManagement.icoPhase())\n            throw;\n\n        /* Mint the tokens for the new address*/\n        bool isNew = balances[_address] == 0;\n        totalSupplyAmount = totalSupplyAmount.add(_amount);\n        balances[_address] = balances[_address].add(_amount);\n        if (isNew)\n            tokenOwnerAdd(_address);\n        Transfer(0, _address, _amount);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenHolderCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_icoContractAddress\",\"type\":\"address\"},{\"name\":\"_authenticationManagerAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FundClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000f8Fc0cc97d01A47E0Ba66B167B120A8A0DeAb949000000000000000000000000c6a3746aa3fec176559f0865fd5240159402a81f"
}