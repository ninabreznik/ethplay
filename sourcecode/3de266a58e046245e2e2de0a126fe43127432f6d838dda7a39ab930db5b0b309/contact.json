{
  "address": "0x49ace07d165f3f453cdbe1d68aa6b62a4161325e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WinToToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-01\n*/\n\npragma solidity ^0.4.18;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract WinToToken {\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n\n    constructor() public {\n        totalSupply = 1000000000 * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"Win Together Token\";                                   // Set the name for display purposes\n        symbol = \"WinTo\";                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    \n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n}",
  "bytecode": "60806040526002805460ff1916601217905534801561001d57600080fd5b5060025460ff16600a0a633b9aca0002600381905533600090815260046020908152604080832093909355825180840190935260128084527f57696e20546f67657468657220546f6b656e00000000000000000000000000009390910192835261008792906100d2565b506040805180820190915260058082527f57696e546f00000000000000000000000000000000000000000000000000000060209092019182526100cc916001916100d2565b5061016d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011357805160ff1916838001178555610140565b82800160010185558215610140579182015b82811115610140578251825591602001919060010190610125565b5061014c929150610150565b5090565b61016a91905b8082111561014c5760008155600101610156565b90565b6106ef8061017c6000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100a8578063095ea7b31461013257806318160ddd1461016a57806323b872dd14610191578063313ce567146101bb57806370a08231146101e657806395d89b4114610207578063a9059cbb1461021c578063cae9ca5114610242578063dd62ed3e146102ab575b600080fd5b3480156100b457600080fd5b506100bd6102d2565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f75781810151838201526020016100df565b50505050905090810190601f1680156101245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013e57600080fd5b50610156600160a060020a0360043516602435610360565b604080519115158252519081900360200190f35b34801561017657600080fd5b5061017f61038d565b60408051918252519081900360200190f35b34801561019d57600080fd5b50610156600160a060020a0360043581169060243516604435610393565b3480156101c757600080fd5b506101d0610402565b6040805160ff9092168252519081900360200190f35b3480156101f257600080fd5b5061017f600160a060020a036004351661040b565b34801561021357600080fd5b506100bd61041d565b34801561022857600080fd5b50610240600160a060020a0360043516602435610477565b005b34801561024e57600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610156948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506104869650505050505050565b3480156102b757600080fd5b5061017f600160a060020a036004358116906024351661059f565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103585780601f1061032d57610100808354040283529160200191610358565b820191906000526020600020905b81548152906001019060200180831161033b57829003601f168201915b505050505081565b336000908152600560209081526040808320600160a060020a039590951683529390529190912055600190565b60035481565b600160a060020a03831660009081526005602090815260408083203384529091528120548211156103c357600080fd5b600160a060020a03841660009081526005602090815260408083203384529091529020805483900390556103f88484846105bc565b5060019392505050565b60025460ff1681565b60046020526000908152604090205481565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103585780601f1061032d57610100808354040283529160200191610358565b6104823383836105bc565b5050565b6000836104938185610360565b15610597576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b8381101561052b578181015183820152602001610513565b50505050905090810190601f1680156105585780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561057a57600080fd5b505af115801561058e573d6000803e3d6000fd5b50505050600191505b509392505050565b600560209081526000928352604080842090915290825290205481565b6000600160a060020a03831615156105d357600080fd5b600160a060020a0384166000908152600460205260409020548211156105f857600080fd5b600160a060020a0383166000908152600460205260409020548281011161061e57600080fd5b50600160a060020a038083166000818152600460209081526040808320805495891680855282852080548981039091559486905281548801909155815187815291519390950194927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600160a060020a038084166000908152600460205260408082205492871682529020540181146106bd57fe5b505050505600a165627a7a723058207b66a119d6f2b418f14a5fd4c2412ffd4c910a28f3ba541094f0547c1d2153e00029"
}