{
  "address": "0xb5630e5dfd604b3b88965f2a5103bbf5e31a7340",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GTIX",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-13\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract ForeignToken {\n    function balanceOf(address _owner) constant public returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n}\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface Token {\n    function distr(address _to, uint256 _value) external returns (bool);\n    function totalSupply() constant external returns (uint256 supply);\n    function balanceOf(address _owner) constant external returns (uint256 balance);\n}\n\ncontract GTIX is ERC20 {\n\n    using SafeMath for uint256;\n    address owner = msg.sender;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    mapping (address => bool) public blacklist;\n\n    string public constant name = \"GT-IX\";\n    string public constant symbol = \"GTIX\";\n    uint public constant decimals = 8;\n    uint256 public totalSupply = 50000000000e8;\n    uint256 public totalDistributed = 2000000000e8;\n\tuint256 public totalPurchase = 2000000000e8;\n    uint256 public totalRemaining = totalSupply.sub(totalDistributed).sub(totalPurchase);\n\t\n    uint256 public value = 2500e8;\n\tuint256 public purchaseCardinal = 50000000e8;\n\t\n\tuint256 public minPurchase = 0.001e18;\n\tuint256 public maxPurchase = 10e18;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    event Distr(address indexed to, uint256 amount);\n    event DistrFinished();\n\tevent Purchase(address indexed to, uint256 amount);\n\tevent PurchaseFinished();\n\n    event Burn(address indexed burner, uint256 value);\n\n    bool public distributionFinished = false;\n\tbool public purchaseFinished = false;\n\n    modifier canDistr() {\n        require(!distributionFinished);\n        _;\n    }\n\t\n\tmodifier canPurchase(){\n\t\trequire(!purchaseFinished);\n\t\t_;\n\t}\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyWhitelist() {\n        require(blacklist[msg.sender] == false);\n        _;\n    }\n\n    function Constructor() public {\n        owner = msg.sender;\n        balances[owner] = totalDistributed;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n\n    function finishDistribution() onlyOwner canDistr public returns (bool) {\n        distributionFinished = true;\n        emit DistrFinished();\n        return true;\n    }\n\t\n\tfunction finishedPurchase() onlyOwner canPurchase public returns (bool) {\n\t\tpurchaseFinished = true;\n\t\temit PurchaseFinished();\n\t\treturn true;\n\t}\n\n    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n        totalRemaining = totalRemaining.sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Distr(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\t\n\tfunction purch(address _to,uint256 _amount) canPurchase private returns (bool){\n\t\ttotalPurchase = totalPurchase.sub(_amount);\n\t\tbalances[_to] = balances[_to].add(_amount);\n\t\temit Purchase(_to, _amount);\n\t\temit Transfer(address(0), _to, _amount);\n\t\treturn true;\n\t}\n\n    function () external payable {\n\t\tif (msg.value >= minPurchase){\n\t\t\tpurchaseTokens();\n\t\t}else{\n\t\t\tairdropTokens();\n\t\t}\n    }\n\n\tfunction purchaseTokens() payable canPurchase public {\n\t\tuint256 recive = msg.value;\n\t\trequire(recive >= minPurchase && recive <= maxPurchase);\n\n        // 0.001 - 0.01 10%;\n\t\t// 0.01 - 0.05 20%;\n\t\t// 0.05 - 0.1 30%;\n\t\t// 0.1 - 0.5 50%;\n\t\t// 0.5 - 1 100%;\n\t\tuint256 amount;\n\t\tamount = recive.mul(purchaseCardinal);\n\t\tuint256 bonus;\n\t\tif (recive >= 0.001e18 && recive < 0.01e18){\n\t\t\tbonus = amount.mul(1).div(10);\n\t\t}else if(recive >= 0.01e18 && recive < 0.05e18){\n\t\t\tbonus = amount.mul(2).div(10);\n\t\t}else if(recive >= 0.05e18 && recive < 0.1e18){\n\t\t\tbonus = amount.mul(3).div(10);\n\t\t}else if(recive >= 0.1e18 && recive < 0.5e18){\n\t\t\tbonus = amount.mul(5).div(10);\n\t\t}else if(recive >= 0.5e18){\n\t\t\tbonus = amount;\n\t\t}\n\t\t\n\t\tamount = amount.add(bonus).div(1e18);\n\t\t\n\t\trequire(amount <= totalPurchase);\n\t\t\n\t\tpurch(msg.sender, amount);\n\t}\n\t\n    function airdropTokens() payable canDistr onlyWhitelist public {\n        if (value > totalRemaining) {\n            value = totalRemaining;\n        }\n\n        require(value <= totalRemaining);\n\n        address investor = msg.sender;\n        uint256 toGive = value;\n\t\t\n\t\tdistr(investor, toGive);\n\t\t\n\t\tif (toGive > 0) {\n\t\t\tblacklist[investor] = true;\n\t\t}\n\n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n\n        value = value.div(100000).mul(99999);\n    }\n\n    function balanceOf(address _owner) constant public returns (uint256) {\n        return balances[_owner];\n    }\n\n    modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n\n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n        require(_to != address(0));\n        require(_amount <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n        require(_to != address(0));\n        require(_amount <= balances[_from]);\n        require(_amount <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\n        ForeignToken t = ForeignToken(tokenAddress);\n        uint bal = t.balanceOf(who);\n        return bal;\n    }\n\n    function withdraw() onlyOwner public {\n        uint256 etherBalance = address(this).balance;\n        owner.transfer(etherBalance);\n    }\n\n    function burn(uint256 _value) onlyOwner public {\n        require(_value <= balances[msg.sender]);\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        totalDistributed = totalDistributed.sub(_value);\n        emit Burn(burner, _value);\n    }\n\t\n\tfunction burnPurchase(uint256 _value) onlyOwner public {\n\t\trequire(_value <= totalPurchase);\n\t\t\n\t\ttotalSupply = totalSupply.sub(_value);\n\t\ttotalPurchase = totalPurchase.sub(_value);\n\t\t\n\t\temit Burn(msg.sender, _value);\n\t}\n\n    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n        ForeignToken token = ForeignToken(_tokenContract);\n        uint256 amount = token.balanceOf(address(this));\n        return token.transfer(owner, amount);\n    }\n\t\n\tfunction withdrawToken(address _to,uint256 _amount) onlyOwner public returns(bool){\n        require(_amount <= totalRemaining);\n        \n        return distr(_to,_amount);\n    }\n}",
  "bytecode": "608060405260018054600160a060020a03191633179055674563918244f4000060058190556702c68af0bb140000600681905560078190556100659161005290826401000000006113436100b082021704565b906401000000006113436100b082021704565b600855643a352944006009556611c37937e08000600a5566038d7ea4c68000600b55678ac7230489e80000600c55600d805461ffff191690553480156100aa57600080fd5b506100c2565b6000828211156100bc57fe5b50900390565b6113a1806100d16000396000f30060806040526004361061018a5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101aa578063095ea7b31461023457806318160ddd1461026c57806323b872dd14610293578063313ce567146102bd5780633290ce29146102d257806333b5b62e146102da5780633ccfd60b146102ef5780633fa4f2451461030457806342966c681461031957806370a08231146103315780637b2581c214610352578063832a66a2146103675780638a3c44a51461037c57806390b9c31a1461039157806391152c5c146101a057806395d89b41146103a6578063977b055b146103bb5780639b1cbccc146103d05780639e281a98146103e5578063a9059cbb14610409578063c108d5421461042d578063c489744b14610442578063c6b6bc3c14610469578063c84ba84a14610481578063d8a5436014610496578063dd62ed3e146104ab578063e58fc54c146104d2578063efca2eed146104f3578063f2fde38b14610508578063f9f92be414610529575b600b5434106101a05761019b61054a565b6101a8565b6101a86106e4565b005b3480156101b657600080fd5b506101bf6107c4565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101f95781810151838201526020016101e1565b50505050905090810190601f1680156102265780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024057600080fd5b50610258600160a060020a03600435166024356107fb565b604080519115158252519081900360200190f35b34801561027857600080fd5b506102816108a3565b60408051918252519081900360200190f35b34801561029f57600080fd5b50610258600160a060020a03600435811690602435166044356108a9565b3480156102c957600080fd5b50610281610a1c565b6101a861054a565b3480156102e657600080fd5b50610281610a21565b3480156102fb57600080fd5b506101a8610a27565b34801561031057600080fd5b50610281610a81565b34801561032557600080fd5b506101a8600435610a87565b34801561033d57600080fd5b50610281600160a060020a0360043516610b66565b34801561035e57600080fd5b50610281610b81565b34801561037357600080fd5b50610281610b87565b34801561038857600080fd5b506101a8610b8d565b34801561039d57600080fd5b50610258610bce565b3480156103b257600080fd5b506101bf610bdc565b3480156103c757600080fd5b50610281610c13565b3480156103dc57600080fd5b50610258610c19565b3480156103f157600080fd5b50610258600160a060020a0360043516602435610c7f565b34801561041557600080fd5b50610258600160a060020a0360043516602435610cb9565b34801561043957600080fd5b50610258610d98565b34801561044e57600080fd5b50610281600160a060020a0360043581169060243516610da1565b34801561047557600080fd5b506101a8600435610e52565b34801561048d57600080fd5b50610258610edd565b3480156104a257600080fd5b50610281610f4a565b3480156104b757600080fd5b50610281600160a060020a0360043581169060243516610f50565b3480156104de57600080fd5b50610258600160a060020a0360043516610f7b565b3480156104ff57600080fd5b506102816110cf565b34801561051457600080fd5b506101a8600160a060020a03600435166110d5565b34801561053557600080fd5b50610258600160a060020a0360043516611127565b600d5460009081908190610100900460ff161561056657600080fd5b349250600b54831015801561057d5750600c548311155b151561058857600080fd5b600a5461059c90849063ffffffff61113c16565b915066038d7ea4c6800083101580156105bb5750662386f26fc1000083105b156105e9576105e2600a6105d684600163ffffffff61113c16565b9063ffffffff61116016565b90506106a6565b662386f26fc100008310158015610606575066b1a2bc2ec5000083105b15610621576105e2600a6105d684600263ffffffff61113c16565b66b1a2bc2ec50000831015801561063f575067016345785d8a000083105b1561065a576105e2600a6105d684600363ffffffff61113c16565b67016345785d8a0000831015801561067957506706f05b59d3b2000083105b15610694576105e2600a6105d684600563ffffffff61113c16565b6706f05b59d3b2000083106106a65750805b6106c2670de0b6b3a76400006105d6848463ffffffff61117716565b6007549092508211156106d457600080fd5b6106de3383611186565b50505050565b600d54600090819060ff16156106f957600080fd5b3360009081526004602052604090205460ff161561071657600080fd5b6008546009541115610729576008546009555b600854600954111561073a57600080fd5b5050600954339061074b8282611267565b50600081111561077957600160a060020a0382166000908152600460205260409020805460ff191660011790555b6005546006541061079257600d805460ff191660011790555b6107bd6201869f6107b1620186a060095461116090919063ffffffff16565b9063ffffffff61113c16565b6009555050565b60408051808201909152600581527f47542d4958000000000000000000000000000000000000000000000000000000602082015281565b6000811580159061082e5750336000908152600360209081526040808320600160a060020a038716845290915290205415155b1561083b5750600061089d565b336000818152600360209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60055481565b6000606060643610156108b857fe5b600160a060020a03841615156108cd57600080fd5b600160a060020a0385166000908152600260205260409020548311156108f257600080fd5b600160a060020a038516600090815260036020908152604080832033845290915290205483111561092257600080fd5b600160a060020a03851660009081526002602052604090205461094b908463ffffffff61134316565b600160a060020a0386166000908152600260209081526040808320939093556003815282822033835290522054610988908463ffffffff61134316565b600160a060020a0380871660009081526003602090815260408083203384528252808320949094559187168152600290915220546109cc908463ffffffff61117716565b600160a060020a03808616600081815260026020908152604091829020949094558051878152905191939289169260008051602061135683398151915292918290030190a3506001949350505050565b600881565b600b5481565b600154600090600160a060020a03163314610a4157600080fd5b50600154604051303191600160a060020a03169082156108fc029083906000818181858888f19350505050158015610a7d573d6000803e3d6000fd5b5050565b60095481565b600154600090600160a060020a03163314610aa157600080fd5b33600090815260026020526040902054821115610abd57600080fd5b5033600081815260026020526040902054610ade908363ffffffff61134316565b600160a060020a038216600090815260026020526040902055600554610b0a908363ffffffff61134316565b600555600654610b20908363ffffffff61134316565b600655604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b600160a060020a031660009081526002602052604090205490565b60075481565b600a5481565b6001805473ffffffffffffffffffffffffffffffffffffffff1916331790819055600654600160a060020a0391909116600090815260026020526040902055565b600d54610100900460ff1681565b60408051808201909152600481527f4754495800000000000000000000000000000000000000000000000000000000602082015281565b600c5481565b600154600090600160a060020a03163314610c3357600080fd5b600d5460ff1615610c4357600080fd5b600d805460ff191660011790556040517f7f95d919e78bdebe8a285e6e33357c2fcb65ccf66e72d7573f9f8f6caad0c4cc90600090a150600190565b600154600090600160a060020a03163314610c9957600080fd5b600854821115610ca857600080fd5b610cb28383611267565b9392505050565b600060406044361015610cc857fe5b600160a060020a0384161515610cdd57600080fd5b33600090815260026020526040902054831115610cf957600080fd5b33600090815260026020526040902054610d19908463ffffffff61134316565b3360009081526002602052604080822092909255600160a060020a03861681522054610d4b908463ffffffff61117716565b600160a060020a0385166000818152600260209081526040918290209390935580518681529051919233926000805160206113568339815191529281900390910190a35060019392505050565b600d5460ff1681565b600080600084915081600160a060020a03166370a08231856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015610e1d57600080fd5b505af1158015610e31573d6000803e3d6000fd5b505050506040513d6020811015610e4757600080fd5b505195945050505050565b600154600160a060020a03163314610e6957600080fd5b600754811115610e7857600080fd5b600554610e8b908263ffffffff61134316565b600555600754610ea1908263ffffffff61134316565b60075560408051828152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250565b600154600090600160a060020a03163314610ef757600080fd5b600d54610100900460ff1615610f0c57600080fd5b600d805461ff0019166101001790556040517f50ace3efca2a92281a35fee7cd1e1c67bde1444a6b9ad4b77aa30690af9640d890600090a150600190565b60085481565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60015460009081908190600160a060020a03163314610f9957600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051859350600160a060020a038416916370a082319160248083019260209291908290030181600087803b158015610ffd57600080fd5b505af1158015611011573d6000803e3d6000fd5b505050506040513d602081101561102757600080fd5b5051600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810184905290519293509084169163a9059cbb916044808201926020929091908290030181600087803b15801561109b57600080fd5b505af11580156110af573d6000803e3d6000fd5b505050506040513d60208110156110c557600080fd5b5051949350505050565b60065481565b600154600160a060020a031633146110ec57600080fd5b600160a060020a03811615611124576001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b60046020526000908152604090205460ff1681565b6000828202831580611158575082848281151561115557fe5b04145b1515610cb257fe5b600080828481151561116e57fe5b04949350505050565b600082820183811015610cb257fe5b600d54600090610100900460ff161561119e57600080fd5b6007546111b1908363ffffffff61134316565b600755600160a060020a0383166000908152600260205260409020546111dd908363ffffffff61117716565b600160a060020a038416600081815260026020908152604091829020939093558051858152905191927f2499a5330ab0979cc612135e7883ebc3cd5c9f7a8508f042540c34723348f63292918290030190a2604080518381529051600160a060020a038516916000916000805160206113568339815191529181900360200190a350600192915050565b600d5460009060ff161561127a57600080fd5b60085461128d908363ffffffff61134316565b600855600160a060020a0383166000908152600260205260409020546112b9908363ffffffff61117716565b600160a060020a038416600081815260026020908152604091829020939093558051858152905191927f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a7792918290030190a2604080518381529051600160a060020a038516916000916000805160206113568339815191529181900360200190a350600192915050565b60008282111561134f57fe5b509003905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582065159c0589d133518021c4f65c4451a0974f8b926c2fda584fef2084846ad3d20029"
}