{
  "address": "0x3fb111fed284aea5e3db069fa12045d61f78668a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Onigiri",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-06\n*/\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: contracts/Onigiri.sol\n\npragma solidity ^0.5.0;\n\n\ncontract Onigiri {\n    using SafeMath for uint256;\n\n    struct InvestorInfo {\n        uint256 invested;\n        uint256 lockbox;\n        uint256 withdrawn;\n        uint256 lastInvestmentTime;\n    }\n    \n    mapping (address => InvestorInfo) public investors;\n    mapping (address => uint256) public affiliateCommission;\n    mapping (address => uint256) public devCommission;\n\n    uint256 public investorsCount;\n    uint256 public lockboxTotal;\n    uint256 public withdrawnProfitTotal;\n    uint256 public affiliateCommissionWithdrawnTotal;\n    \n    uint256 public donatedTotal;\n    uint256 public gamesIncomeTotal;\n    \n    address private constant dev_0_master = 0x6a5D9648381b90AF0e6881c26739efA4379c19B2;\n    address private constant dev_1_master = 0xDBd32Ef31Fcd7fc1EF028A7471a7A9BFC39ab609;\n    address private dev_0_escrow = 0xF57924672D6dBF0336c618fDa50E284E02715000;\n    address private dev_1_escrow = 0xE4Cf94e5D30FB4406A2B139CD0e872a1C8012dEf;\n\n    uint256 public constant minInvest = 0.025 ether;\n\n    event Invested(address investor, uint256 amount);\n    event Renvested(address investor, uint256 amount);\n    event WithdrawnAffiliateCommission(address affiliate, uint256 amount);\n    event WithdrawnProfit(address investor, uint256 amount);\n    event WithdrawnLockbox(address investor, uint256 amount);\n\n    /**\n     * PUBLIC\n     */\n\n     /**\n     * @dev Donation for Onigiry ecosystem.\n     * TESTED\n     */\n    function() external payable {\n        //  2% - to developers\n        uint256 devFee = msg.value.div(100);\n        devCommission[dev_0_escrow] = devCommission[dev_0_escrow].add(devFee);\n        devCommission[dev_1_escrow] = devCommission[dev_1_escrow].add(devFee);\n        \n        donatedTotal = donatedTotal.add(msg.value);\n    }\n\n    /**\n     * @dev Accepts income from games for Onigiry ecosystem.\n     * TESTED\n     */\n    function fromGame() external payable {\n        //  4% - to developers\n        uint256 devFee = msg.value.div(100).mul(2);\n        devCommission[dev_0_escrow] = devCommission[dev_0_escrow].add(devFee);\n        devCommission[dev_1_escrow] = devCommission[dev_1_escrow].add(devFee);\n        \n        gamesIncomeTotal = gamesIncomeTotal.add(msg.value);\n    }\n\n    /**\n     * @dev Returns invested amount for investor.\n     * @param _address Investor address.\n     * @return invested amount.\n     * TESTED\n     */\n    function getInvested(address _address) public view returns(uint256) {\n        return investors[_address].invested;\n    }\n\n    /**\n     * @dev Returns lockbox amount for investor.\n     * @param _address Investor address.\n     * @return lockbox amount.\n     * TESTED\n     */\n    function getLockBox(address _address) public view returns(uint256) {\n        return investors[_address].lockbox;\n    }\n\n    /**\n     * @dev Returns withdrawn amount for investor.\n     * @param _address Investor address.\n     * @return withdrawn amount.\n     * TESTED\n     */\n    function getWithdrawn(address _address) public view returns(uint256) {\n        return investors[_address].withdrawn;\n    }\n\n    /**\n     * @dev Returns last investment time amount for investor.\n     * @param _address Investor address.\n     * @return last investment time.\n     * TESTED\n     */\n    function getLastInvestmentTime(address _address) public view returns(uint256) {\n        return investors[_address].lastInvestmentTime;\n    }\n\n    /**\n     * @dev Gets balance for current contract.\n     * @return balance for current contract.\n     * TESTED\n     */\n    function getBalance() public view returns(uint256){\n        return address(this).balance;\n    }\n\n    /**\n     * @dev Calculates sum for lockboxes and dev fees.\n     * @return Amount of guaranteed balance by constract.\n     * TESTED\n     */\n    function guaranteedBalance() public view returns(uint256) {\n        return lockboxTotal.add(devCommission[dev_0_escrow]).add(devCommission[dev_1_escrow]);\n    }\n\n    /**\n     * @dev User invests funds.\n     * @param _affiliate affiliate address.\n     * TESTED\n     */\n    function invest(address _affiliate) public payable {\n        require(msg.value >= minInvest, \"min 0.025 eth\");\n\n        uint256 profit = calculateProfit(msg.sender);\n        if(profit > 0){\n            msg.sender.transfer(profit);\n        }\n\n        //  1% - to affiliateCommission\n        if(_affiliate != msg.sender && _affiliate != address(0)) {\n            uint256 commission = msg.value.div(100);\n            affiliateCommission[_affiliate] = affiliateCommission[_affiliate].add(commission);\n        }\n\n        if(getLastInvestmentTime(msg.sender) == 0) {\n            investorsCount = investorsCount.add(1);\n        }\n\n        uint256 lockboxAmount = msg.value.div(100).mul(84);\n        investors[msg.sender].lockbox = investors[msg.sender].lockbox.add(lockboxAmount);\n        investors[msg.sender].invested = investors[msg.sender].invested.add(msg.value);\n        investors[msg.sender].lastInvestmentTime = now;\n        delete investors[msg.sender].withdrawn;\n        \n        lockboxTotal = lockboxTotal.add(lockboxAmount);\n        \n        //  4% - to developers\n        uint256 devFee = msg.value.div(100).mul(2);\n        devCommission[dev_0_escrow] = devCommission[dev_0_escrow].add(devFee);\n        devCommission[dev_1_escrow] = devCommission[dev_1_escrow].add(devFee);\n\n        emit Invested(msg.sender, msg.value);\n    }\n\n    /**\n     * @dev Updates escrow address for developer.\n     * @param _address Address of escrow to be used.\n     * TESTED\n     */\n    function updateDevEscrow(address _address) public {\n        require(msg.sender == dev_0_master || msg.sender == dev_1_master, \"not dev\");\n        (msg.sender == dev_0_master) ? dev_0_escrow = _address : dev_1_escrow = _address;\n    }\n\n    /**\n     * @dev Allows developer to withdraw commission.\n     * TESTED\n     */\n    function withdrawDevCommission() public {\n        uint256 commission = devCommission[msg.sender];\n        require(commission > 0, \"no dev commission\");\n        require(address(this).balance.sub(commission) >= lockboxTotal, \"not enough funds\");\n\n        delete devCommission[msg.sender];\n        msg.sender.transfer(commission);\n    }\n    \n    /**\n     * @dev Withdraws affiliate commission for current address.\n     * TESTED\n     */\n    function withdrawAffiliateCommission() public {\n        uint256 commission = affiliateCommission[msg.sender];\n        require(commission > 0, \"no commission\");\n        require(address(this).balance.sub(commission) >= guaranteedBalance(), \"not enough funds\");\n\n        delete affiliateCommission[msg.sender];\n        affiliateCommissionWithdrawnTotal = affiliateCommissionWithdrawnTotal.add(commission);\n\n        msg.sender.transfer(commission);\n\n        emit WithdrawnAffiliateCommission(msg.sender, commission);\n    }\n\n    /**\n     * @dev Allows investor to withdraw profit.\n     * TESTED\n     */\n    function withdrawProfit() public {\n        uint256 profit = calculateProfit(msg.sender);\n        require(profit > 0, \"no profit\");\n        require(address(this).balance.sub(profit) >= guaranteedBalance(), \"not enough funds\");\n\n        investors[msg.sender].lastInvestmentTime = now;\n        investors[msg.sender].withdrawn = investors[msg.sender].withdrawn.add(profit);\n\n        withdrawnProfitTotal = withdrawnProfitTotal.add(profit);\n        \n        //  2% - to developers\n        uint256 devFee = profit.div(100);\n        devCommission[dev_0_escrow] = devCommission[dev_0_escrow].add(devFee);\n        devCommission[dev_1_escrow] = devCommission[dev_1_escrow].add(devFee);\n        \n        //  3% - stay in contract\n        msg.sender.transfer(profit.div(100).mul(95));\n\n        emit WithdrawnProfit(msg.sender, profit);\n    }\n\n    /**\n     * @dev Allows investor to withdraw lockbox funds, close deposit and clear all data.\n     * @notice Pending profit stays in contract.\n     * TESTED\n     */\n    function withdrawLockBoxAndClose() public {\n        uint256 lockboxAmount = getLockBox(msg.sender);\n        require(lockboxAmount > 0, \"no investments\");\n\n        delete investors[msg.sender];\n        investorsCount = investorsCount.sub(1);\n        lockboxTotal = lockboxTotal.sub(lockboxAmount);\n\n        msg.sender.transfer(lockboxAmount);\n\n        emit WithdrawnLockbox(msg.sender, lockboxAmount);\n    }\n    \n    /**\n     * @dev Reinvests pending profit.\n     * TESTED\n     */\n    function reinvestProfit() public {\n        uint256 profit = calculateProfit(msg.sender);\n        require(profit > 0, \"no profit\");\n        require(address(this).balance.sub(profit) >= guaranteedBalance(), \"not enough funds\");\n        \n        uint256 lockboxFromProfit = profit.div(100).mul(84);\n        investors[msg.sender].lockbox = investors[msg.sender].lockbox.add(lockboxFromProfit);\n        investors[msg.sender].lastInvestmentTime = now;\n        investors[msg.sender].invested = investors[msg.sender].invested.add(profit);\n\n        lockboxTotal = lockboxTotal.add(lockboxFromProfit);\n\n        emit Renvested(msg.sender, profit);\n    }\n\n    /**\n     * @dev Calculates pending profit for provided customer.\n     * @param _investor Address of investor.\n     * @return pending profit.\n     * TESTED\n     */\n    function calculateProfit(address _investor) public view returns(uint256){\n        uint256 hourDifference = now.sub(investors[_investor].lastInvestmentTime).div(3600);\n        uint256 rate = percentRateInternal(investors[_investor].lockbox);\n        uint256 calculatedPercent = hourDifference.mul(rate);\n        return investors[_investor].lockbox.div(100000).mul(calculatedPercent);\n    }\n\n    /**\n     * @dev Calculates rate for lockbox balance for msg.sender.\n     * @param _balance Balance to calculate percentage.\n     * @return rate for lockbox balance.\n     * TESTED\n     */\n    function percentRateInternal(uint256 _balance) public pure returns(uint256) {\n        /**\n            ~ .99 -    - 0.6%\n            1 ~ 50     - 0.96% \n            51 ~ 100   - 1.2% \n            100 ~ 250  - 1.44% \n            250 ~      - 1.8% \n         */\n        uint256 step_1 = .99 ether;\n        uint256 step_2 = 50 ether;\n        uint256 step_3 = 100 ether;\n        uint256 step_4 = 250 ether;\n\n        uint256 dailyPercent_0 = 25;   //  0.6%\n        uint256 dailyPercent_1 = 40;   //  0.96%\n        uint256 dailyPercent_2 = 50;   //  1.2%\n        uint256 dailyPercent_3 = 60;   //  1.44%\n        uint256 dailyPercent_4 = 75;   //  1.8%\n\n        if (_balance >= step_4) {\n            return dailyPercent_4;\n        } else if (_balance >= step_3 && _balance < step_4) {\n            return dailyPercent_3;\n        } else if (_balance >= step_2 && _balance < step_3) {\n            return dailyPercent_2;\n        } else if (_balance >= step_1 && _balance < step_2) {\n            return dailyPercent_1;\n        }\n\n        return dailyPercent_0;\n    }\n\n    /**\n     * @dev Calculates rate for lockbox balance for msg.sender. User for public\n     * @param _balance Balance to calculate percentage.\n     * @return rate for lockbox balance.\n     * TESTED\n     */\n    function percentRatePublic(uint256 _balance) public pure returns(uint256) {\n        /**\n            ~ .99 -    - 0.6%\n            1 ~ 50     - 0.96% \n            51 ~ 100   - 1.2% \n            100 ~ 250  - 1.44% \n            250 ~      - 1.8% \n         */\n        uint256 step_1 = .99 ether;\n        uint256 step_2 = 50 ether;\n        uint256 step_3 = 100 ether;\n        uint256 step_4 = 250 ether;\n\n        uint256 dailyPercent_0 = 60;   //  0.6%\n        uint256 dailyPercent_1 = 96;   //  0.96%\n        uint256 dailyPercent_2 = 120;   //  1.2%\n        uint256 dailyPercent_3 = 144;   //  1.44%\n        uint256 dailyPercent_4 = 180;   //  1.8%\n\n        if (_balance >= step_4) {\n            return dailyPercent_4;\n        } else if (_balance >= step_3 && _balance < step_4) {\n            return dailyPercent_3;\n        } else if (_balance >= step_2 && _balance < step_3) {\n            return dailyPercent_2;\n        } else if (_balance >= step_1 && _balance < step_2) {\n            return dailyPercent_1;\n        }\n\n        return dailyPercent_0;\n    }\n}",
  "bytecode": "608060405273f57924672d6dbf0336c618fda50e284e02715000600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073e4cf94e5d30fb4406a2b139cd0e872a1c8012def600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156100ba57600080fd5b5061291b806100ca6000396000f3fe608060405260043610610159576000357c01000000000000000000000000000000000000000000000000000000009004806303f9c7931461034157806312065fe01461038557806315682cc9146103b0578063197748e0146104015780632ae2b6431461042c5780632b71105114610491578063550dd212146104bc578063567541a9146104e75780635e70dec51461053657806363fd9e381461059b578063699333aa146105c65780636c116a2e146105dd5780636f7bc9be146106425780637cc7310f146106bc578063959499b6146106e757806398f3f8e6146106fe578063a360fea714610763578063ae66d9481461076d578063b1c17506146107d2578063b77fc54914610837578063c1a635171461084e578063c831ae0314610865578063c858257214610890578063cc38c8ee146108f5578063d6b9bf2614610920578063e1f4e68d1461094b578063e3b611351461099a575b600061016f6064346109b190919063ffffffff16565b90506101e58160026000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109db90919063ffffffff16565b60026000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506102be8160026000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109db90919063ffffffff16565b60026000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610338346007546109db90919063ffffffff16565b60078190555050005b6103836004803603602081101561035757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109fc565b005b34801561039157600080fd5b5061039a611075565b6040518082815260200191505060405180910390f35b3480156103bc57600080fd5b506103ff600480360360208110156103d357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611094565b005b34801561040d57600080fd5b50610416611266565b6040518082815260200191505060405180910390f35b34801561043857600080fd5b5061047b6004803603602081101561044f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061126c565b6040518082815260200191505060405180910390f35b34801561049d57600080fd5b506104a66112b7565b6040518082815260200191505060405180910390f35b3480156104c857600080fd5b506104d16112bd565b6040518082815260200191505060405180910390f35b3480156104f357600080fd5b506105206004803603602081101561050a57600080fd5b81019080803590602001909291905050506113ad565b6040518082815260200191505060405180910390f35b34801561054257600080fd5b506105856004803603602081101561055957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061149e565b6040518082815260200191505060405180910390f35b3480156105a757600080fd5b506105b06114e9565b6040518082815260200191505060405180910390f35b3480156105d257600080fd5b506105db6114f4565b005b3480156105e957600080fd5b5061062c6004803603602081101561060057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116e0565b6040518082815260200191505060405180910390f35b34801561064e57600080fd5b506106916004803603602081101561066557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061172b565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b3480156106c857600080fd5b506106d161175b565b6040518082815260200191505060405180910390f35b3480156106f357600080fd5b506106fc611761565b005b34801561070a57600080fd5b5061074d6004803603602081101561072157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c2e565b6040518082815260200191505060405180910390f35b61076b611c46565b005b34801561077957600080fd5b506107bc6004803603602081101561079057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e41565b6040518082815260200191505060405180910390f35b3480156107de57600080fd5b50610821600480360360208110156107f557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e8c565b6040518082815260200191505060405180910390f35b34801561084357600080fd5b5061084c611fd1565b005b34801561085a57600080fd5b50610863612248565b005b34801561087157600080fd5b5061087a61241a565b6040518082815260200191505060405180910390f35b34801561089c57600080fd5b506108df600480360360208110156108b357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612420565b6040518082815260200191505060405180910390f35b34801561090157600080fd5b5061090a612438565b6040518082815260200191505060405180910390f35b34801561092c57600080fd5b5061093561243e565b6040518082815260200191505060405180910390f35b34801561095757600080fd5b506109846004803603602081101561096e57600080fd5b8101908080359060200190929190505050612444565b6040518082815260200191505060405180910390f35b3480156109a657600080fd5b506109af612535565b005b600080821115156109c157600080fd5b600082848115156109ce57fe5b0490508091505092915050565b60008082840190508381101515156109f257600080fd5b8091505092915050565b6658d15e176280003410151515610a7b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6d696e20302e303235206574680000000000000000000000000000000000000081525060200191505060405180910390fd5b6000610a8633611e8c565b90506000811115610ad9573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610ad7573d6000803e3d6000fd5b505b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015610b425750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15610bf6576000610b5d6064346109b190919063ffffffff16565b9050610bb181600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109db90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000610c01336116e0565b1415610c2457610c1d60016003546109db90919063ffffffff16565b6003819055505b6000610c4d6054610c3f6064346109b190919063ffffffff16565b61288f90919063ffffffff16565b9050610ca3816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546109db90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550610d3c346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546109db90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550426000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009055610e21816004546109db90919063ffffffff16565b6004819055506000610e506002610e426064346109b190919063ffffffff16565b61288f90919063ffffffff16565b9050610ec68160026000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109db90919063ffffffff16565b60026000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f9f8160026000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109db90919063ffffffff16565b60026000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fc3f75dfc78f6efac88ad5abb5e606276b903647d97b2a62a1ef89840a658bbc33334604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150505050565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b736a5d9648381b90af0e6881c26739efa4379c19b273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611121575073dbd32ef31fcd7fc1ef028a7471a7a9bfc39ab60973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611195576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260078152602001807f6e6f74206465760000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b736a5d9648381b90af0e6881c26739efa4379c19b273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112215780600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055611262565b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555b5050565b60045481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b60035481565b60006113a860026000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461139a60026000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546004546109db90919063ffffffff16565b6109db90919063ffffffff16565b905090565b600080670dbd2fc137a30000905060006802b5e3af16b18800009050600068056bc75e2d6310000090506000680d8d726b7177a8000090506000601990506000602890506000603290506000603c90506000604b9050858b10151561141d57809950505050505050505050611499565b868b1015801561142c5750858b105b1561144257819950505050505050505050611499565b878b101580156114515750868b105b1561146757829950505050505050505050611499565b888b101580156114765750878b105b1561148c57839950505050505050505050611499565b8499505050505050505050505b919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b6658d15e1762800081565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115156115b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f2064657620636f6d6d697373696f6e00000000000000000000000000000081525060200191505060405180910390fd5b6004546115dd823073ffffffffffffffffffffffffffffffffffffffff16316128cd90919063ffffffff16565b10151515611653576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f6e6f7420656e6f7567682066756e64730000000000000000000000000000000081525060200191505060405180910390fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090553373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156116dc573d6000803e3d6000fd5b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050919050565b60006020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b60055481565b600061176c33611e8c565b90506000811115156117e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f6e6f2070726f666974000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6117ee6112bd565b611818823073ffffffffffffffffffffffffffffffffffffffff16316128cd90919063ffffffff16565b1015151561188e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f6e6f7420656e6f7567682066756e64730000000000000000000000000000000081525060200191505060405180910390fd5b426000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030181905550611928816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546109db90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550611982816005546109db90919063ffffffff16565b600581905550600061199e6064836109b190919063ffffffff16565b9050611a148160026000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109db90919063ffffffff16565b60026000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611aed8160026000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109db90919063ffffffff16565b60026000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc611b93605f611b856064876109b190919063ffffffff16565b61288f90919063ffffffff16565b9081150290604051600060405180830381858888f19350505050158015611bbe573d6000803e3d6000fd5b507f9acd446c7c5d67289e9ab24bf8d274c3e60b36709aad13c9ccefec55a25c00bb3383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b60026020528060005260406000206000915090505481565b6000611c6f6002611c616064346109b190919063ffffffff16565b61288f90919063ffffffff16565b9050611ce58160026000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109db90919063ffffffff16565b60026000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611dbe8160026000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109db90919063ffffffff16565b60026000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e38346008546109db90919063ffffffff16565b60088190555050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050919050565b600080611ef7610e10611ee96000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154426128cd90919063ffffffff16565b6109b190919063ffffffff16565b90506000611f456000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546113ad565b90506000611f5c828461288f90919063ffffffff16565b9050611fc781611fb9620186a06000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546109b190919063ffffffff16565b61288f90919063ffffffff16565b9350505050919050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111151561208d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6e6f20636f6d6d697373696f6e0000000000000000000000000000000000000081525060200191505060405180910390fd5b6120956112bd565b6120bf823073ffffffffffffffffffffffffffffffffffffffff16316128cd90919063ffffffff16565b10151515612135576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f6e6f7420656e6f7567682066756e64730000000000000000000000000000000081525060200191505060405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905561218d816006546109db90919063ffffffff16565b6006819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156121d9573d6000803e3d6000fd5b507ff00b94e6d3eae70f13396fc1316a95fffe65e4e4268f517278311cd9618e75e33382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150565b60006122533361149e565b90506000811115156122cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f6e6f20696e766573746d656e747300000000000000000000000000000000000081525060200191505060405180910390fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905560028201600090556003820160009055505061234460016003546128cd90919063ffffffff16565b60038190555061235f816004546128cd90919063ffffffff16565b6004819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156123ab573d6000803e3d6000fd5b507f2a14c6c4baf70f0f57eb7d8bed4856b2a7f80a238a2dce681b404e0cae9dce7b3382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150565b60075481565b60016020528060005260406000206000915090505481565b60065481565b60085481565b600080670dbd2fc137a30000905060006802b5e3af16b18800009050600068056bc75e2d6310000090506000680d8d726b7177a8000090506000603c9050600060609050600060789050600060909050600060b49050858b1015156124b457809950505050505050505050612530565b868b101580156124c35750858b105b156124d957819950505050505050505050612530565b878b101580156124e85750868b105b156124fe57829950505050505050505050612530565b888b1015801561250d5750878b105b1561252357839950505050505050505050612530565b8499505050505050505050505b919050565b600061254033611e8c565b90506000811115156125ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f6e6f2070726f666974000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6125c26112bd565b6125ec823073ffffffffffffffffffffffffffffffffffffffff16316128cd90919063ffffffff16565b10151515612662576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f6e6f7420656e6f7567682066756e64730000000000000000000000000000000081525060200191505060405180910390fd5b600061268b605461267d6064856109b190919063ffffffff16565b61288f90919063ffffffff16565b90506126e1816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546109db90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550426000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055506127c0826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546109db90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555061281a816004546109db90919063ffffffff16565b6004819055507f31b79d553a711214890a10f851808f023529bb2f0ce14b7954818f3746c8f1743383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b6000808314156128a257600090506128c7565b600082840290508284828115156128b557fe5b041415156128c257600080fd5b809150505b92915050565b60008282111515156128de57600080fd5b60008284039050809150509291505056fea165627a7a72305820fce0e4a0d2e1cc0d7524e649161a68f02e28500df8011c38ff63e501e6374e850029"
}