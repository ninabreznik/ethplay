{
  "address": "0x48c1b2f3efa85fbafb2ab951bf4ba860a08cdbb7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "ShowHand Token",
  "contractName": "HAND",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-17\n*/\n\npragma solidity ^0.4.19;\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\ncontract HAND{\n    using SafeMath for uint256;\n\n    uint256 constant MAX_UINT256 = 2**256 - 1;\n    uint256 _initialAmount = 0;\n    uint256 public publicToken = 4*10**11;                // 40% of total, for public sale\n    uint256 public maxSupply = 10**12;\n    address  public contract_owner;\n    uint256 public exchangeRate = 3900000;                    // exchangeRate for public sale, token per ETH\n    bool public icoOpen = false;                           // whether ICO is open and accept public investment\n\n\n    address privateSaleAdd = 0x85e4FE33c590b8A5812fBF926a0f9fe64E6d8b35;\n    \n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    \n      \n    // lock struct for founder\n    struct founderLock {\n        uint256 amount;\n        uint256 startTime;\n        uint remainRound;\n        uint totalRound;\n        uint256 period;\n    }\n    \n    mapping (address => founderLock) public founderLockance;\n    mapping (address => bool) isFreezed;\n    \n\n    \n    // uint256 totalSupply;\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event FounderUnlock(address _sender, uint256 _amount);\n            \n    /*\n    NOTE:\n    The following variables are OPTIONAL vanities. One does not have to include them.\n    */\n    string public name = \"ShowHand\";               //fancy name: eg Simon Bucks\n    uint8 public decimals = 0;                     //How many decimals to show.\n    string public symbol = \"HAND\";                 //An identifier: eg SBX\n\n    /**\n      * @dev Fix for the ERC20 short address attack.\n      */\n      modifier onlyPayloadSize(uint size) {\n          require(msg.data.length >= size + 4);\n          _;\n      }\n      modifier  onlyOwner() { \n          require(msg.sender == contract_owner); \n          _; \n      }\n      modifier inIco() { \n          require(icoOpen==true); \n          _; \n      }\n      \n      \n    // token distribution, 60% in this part\n        address address1 = 0x85e4FE33c590b8A5812fBF926a0f9fe64E6d8b35;\n        address address2 = 0x5af6353F2BB222DF6FCD82065ed2e6db1bB12291;\n        address address3 = 0x6c24A6EfdfF15230EE284E2E72D86656ac752e48;\n        address address4 = 0xCB946d83617eDb6fbCa19148AD83e17Ea7B67294;\n        address address5 = 0x76360A75dC6e4bC5c6C0a20A4B74b8823fAFad8C;\n        address address6 = 0x356399eE0ebCB6AfB13dF33168fD2CC54Ba219C2;\n        address address7 = 0x8b46b43cA5412311A5Dfa08EF1149B5942B5FE22;\n        address address8 = 0xA51551B57CB4e37Ea20B3226ceA61ebc7135a11a;\n        address address9 = 0x174bC643442bE89265500E6C2c236D32248A4FaE;\n        address address10 = 0x0D78E82ECEd57aC3CE65fE3B828f4d52fF712f31;\n        address address11 = 0xe31062592358Cd489Bdc09e8217543C8cc3D5C1C;\n        address address12 = 0x0DB8c855C4BB0efd5a1c32de2362c5ABCFa4CA33;\n        address address13 = 0xF25A3ccDC54A746d56A90197d911d9a1f27cF512;\n        address address14 = 0x102d36210d312FB9A9Cf5f5c3A293a8f6598BD50;\n\n        address address15 = 0x8Dd1cDD513b05D07726a6F8C75b57602991a9c34;\n        address address16 = 0x9d566BCc1BDda779a00a1D44E0b4cA07FB68EFEF;\n        address address17 = 0x1cfCe9A13aBC3381100e85BFA21160C98f8B103D;\n        address address18 = 0x61F0c924C0F91f4d17c82C534cfaF716A7893c13;\n        address address19 = 0xE76c0618Dd52403ad1907D3BCbF930226bFEa46B;\n        address address20 = 0xeF2f04dbd3E3aD126979646383c94Fd29E29de9F;\n\n    function HAND() public {\n        // set sender as contract_owner\n        contract_owner = msg.sender;\n        _initialAmount += publicToken;\n\n        \n\n        setFounderLock(address1, 800*10**8, 4, 180 days);\n        setFounderLock(address2, 40*10**8, 4, 180 days);\n        setFounderLock(address3, 5*10**8, 4, 180 days);\n        setFounderLock(address4, 5*10**8, 4, 180 days);\n        setFounderLock(address5, 300*10**8, 4, 180 days);\n        setFounderLock(address6, 200*10**8, 4, 180 days);\n        setFounderLock(address7, 100*10**8, 4, 180 days);\n        setFounderLock(address8, 50*10**8, 4, 180 days);\n        setFounderLock(address9, 600*10**8, 4, 180 days);\n        setFounderLock(address10, 150*10**8, 4, 180 days);\n        setFounderLock(address11, 100*10**8, 4, 180 days);\n        setFounderLock(address12, 800*10**8, 4, 180 days);\n        setFounderLock(address13, 2400*10**8, 4, 180 days);\n        setFounderLock(address14, 100*10**8, 4, 180 days);\n\n        setFounderLock(address15, 135*10**8, 4, 180 days);\n        setFounderLock(address16, 25*10**8, 4, 180 days);\n        setFounderLock(address17, 20*10**8, 4, 180 days);\n        setFounderLock(address18, 40*10**8, 4, 180 days);\n        setFounderLock(address19, 20*10**8, 4, 180 days);\n        setFounderLock(address20, 110*10**8, 4, 180 days);\n    }\n    function totalSupply() constant returns (uint256 _totalSupply){\n        _totalSupply = _initialAmount;\n      }\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        //Default assumes totalSupply can't be over max (2^256 - 1).\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n        //Replace the if with this one instead.\n        //require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n        require(balances[msg.sender] >= _value);\n        require(isFreezed[msg.sender]==false);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n        }\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n        //require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n        uint256 allowance = allowed[_from][msg.sender];\n        require(balances[_from] >= _value && allowance >= _value);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        if (allowance < MAX_UINT256) {\n            allowed[_from][msg.sender] -= _value;\n        }\n        Transfer(_from, _to, _value);\n        return true;\n        }\n\n    function balanceOf(address _owner) view public returns (uint256 balance) {\n        return balances[_owner];\n        }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        require(isFreezed[msg.sender]==false);\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n        }\n\n    function allowance(address _owner, address _spender)\n    view public returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n        }\n\n    function multisend(address[] addrs,  uint256 _value)\n    {\n        uint length = addrs.length;\n        require(_value * length <= balances[msg.sender]);\n        uint i = 0;\n        while (i < length) {\n           transfer(addrs[i], _value);\n           i ++;\n        }\n        \n      }\n    \n    \n    \n    // lock token of founder for periodically release\n    // _address: founder address; \n    // _value: totoal locked token; \n    // _round: rounds founder could withdraw; \n    // _period: interval time between two rounds\n    function setFounderLock(address _address, uint256 _value, uint _round, uint256 _period)  internal onlyOwner{\n        founderLockance[_address].amount = _value;\n        founderLockance[_address].startTime = now;\n        founderLockance[_address].remainRound = _round;\n        founderLockance[_address].totalRound = _round;\n        founderLockance[_address].period = _period;\n    }\n    \n    \n    // allow locked token to be obtained for founder \n    function unlockFounder () {\n        require(now >= founderLockance[msg.sender].startTime + (founderLockance[msg.sender].totalRound - founderLockance[msg.sender].remainRound + 1) * founderLockance[msg.sender].period);\n        require(founderLockance[msg.sender].remainRound > 0);\n        uint256 changeAmount = founderLockance[msg.sender].amount.div(founderLockance[msg.sender].remainRound);\n        balances[msg.sender] += changeAmount;\n        founderLockance[msg.sender].amount -= changeAmount;\n        _initialAmount += changeAmount;\n        founderLockance[msg.sender].remainRound --;\n        FounderUnlock(msg.sender, changeAmount);\n    }\n    \n    function freezeAccount (address _target) onlyOwner {\n        isFreezed[_target] = true;\n    }\n    function unfreezeAccount (address _target) onlyOwner {\n        isFreezed[_target] = false;\n    }\n    function ownerUnlock (address _target, uint256 _value) onlyOwner {\n        require(founderLockance[_target].amount >= _value);\n        founderLockance[_target].amount -= _value;\n        balances[_target] += _value;\n        _initialAmount += _value;\n    }\n    \n    // starts ICO\n    function openIco () onlyOwner{\n        icoOpen = true;\n      }\n    // ends ICO \n    function closeIco () onlyOwner inIco{\n        icoOpen = false;\n      }\n\n    // transfer all unsold token to bounty balance;\n    function weAreClosed () onlyOwner{\n        balances[contract_owner] += publicToken;\n        transfer(privateSaleAdd, publicToken);\n        publicToken = 0;\n    }\n    // change rate of public sale\n    function changeRate (uint256 _rate) onlyOwner{\n        exchangeRate = _rate;\n    }    \n    \n    //  withdraw ETH from contract\n    function withdraw() onlyOwner{\n        contract_owner.transfer(this.balance);\n      }\n    // fallback function for receive ETH during ICO\n    function () payable inIco{\n        require(msg.value >= 10**18);\n        uint256 tokenChange = (msg.value * exchangeRate).div(10**18);\n        require(tokenChange <= publicToken);\n        balances[msg.sender] += tokenChange;\n        publicToken = publicToken.sub(tokenChange);\n      }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"founderLockance\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"remainRound\",\"type\":\"uint256\"},{\"name\":\"totalRound\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"multisend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ownerUnlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"unfreezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"weAreClosed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FounderUnlock\",\"type\":\"event\"}]",
  "bytecode": "606060405260008055645d21dba00060015564e8d4a51000600255623b82606004556000600560006101000a81548160ff0219169083151502179055507385e4fe33c590b8a5812fbf926a0f9fe64e6d8b35600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600881526020017f53686f7748616e64000000000000000000000000000000000000000000000000815250600a9080519060200190620000de92919062001014565b506000600b60006101000a81548160ff021916908360ff1602179055506040805190810160405280600481526020017f48414e4400000000000000000000000000000000000000000000000000000000815250600c90805190602001906200014892919062001014565b507385e4fe33c590b8a5812fbf926a0f9fe64e6d8b35600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550735af6353f2bb222df6fcd82065ed2e6db1bb12291600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550736c24a6efdff15230ee284e2e72d86656ac752e48600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073cb946d83617edb6fbca19148ad83e17ea7b67294601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507376360a75dc6e4bc5c6c0a20a4b74b8823fafad8c601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073356399ee0ebcb6afb13df33168fd2cc54ba219c2601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550738b46b43ca5412311a5dfa08ef1149b5942b5fe22601360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073a51551b57cb4e37ea20b3226cea61ebc7135a11a601460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073174bc643442be89265500e6c2c236d32248a4fae601560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550730d78e82eced57ac3ce65fe3b828f4d52ff712f31601660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073e31062592358cd489bdc09e8217543c8cc3d5c1c601760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550730db8c855c4bb0efd5a1c32de2362c5abcfa4ca33601860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073f25a3ccdc54a746d56a90197d911d9a1f27cf512601960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073102d36210d312fb9a9cf5f5c3a293a8f6598bd50601a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550738dd1cdd513b05d07726a6f8c75b57602991a9c34601b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550739d566bcc1bdda779a00a1d44e0b4ca07fb68efef601c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550731cfce9a13abc3381100e85bfa21160c98f8b103d601d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507361f0c924c0f91f4d17c82c534cfaf716a7893c13601e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073e76c0618dd52403ad1907d3bcbf930226bfea46b601f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073ef2f04dbd3e3ad126979646383c94fd29e29de9f602060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503415620007f957600080fd5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600154600080828254019250508190555062000898600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166412a05f2000600462ed4e0062000e4e6401000000000262001b37176401000000009004565b620008e4600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1663ee6b2800600462ed4e0062000e4e6401000000000262001b37176401000000009004565b62000930600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16631dcd6500600462ed4e0062000e4e6401000000000262001b37176401000000009004565b6200097c601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16631dcd6500600462ed4e0062000e4e6401000000000262001b37176401000000009004565b620009c9601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166406fc23ac00600462ed4e0062000e4e6401000000000262001b37176401000000009004565b62000a16601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166404a817c800600462ed4e0062000e4e6401000000000262001b37176401000000009004565b62000a63601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166402540be400600462ed4e0062000e4e6401000000000262001b37176401000000009004565b62000ab0601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1664012a05f200600462ed4e0062000e4e6401000000000262001b37176401000000009004565b62000afd601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16640df8475800600462ed4e0062000e4e6401000000000262001b37176401000000009004565b62000b4a601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1664037e11d600600462ed4e0062000e4e6401000000000262001b37176401000000009004565b62000b97601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166402540be400600462ed4e0062000e4e6401000000000262001b37176401000000009004565b62000be4601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166412a05f2000600462ed4e0062000e4e6401000000000262001b37176401000000009004565b62000c31601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166437e11d6000600462ed4e0062000e4e6401000000000262001b37176401000000009004565b62000c7e601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166402540be400600462ed4e0062000e4e6401000000000262001b37176401000000009004565b62000ccb601b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16640324a9a700600462ed4e0062000e4e6401000000000262001b37176401000000009004565b62000d17601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16639502f900600462ed4e0062000e4e6401000000000262001b37176401000000009004565b62000d63601d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166377359400600462ed4e0062000e4e6401000000000262001b37176401000000009004565b62000daf601e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1663ee6b2800600462ed4e0062000e4e6401000000000262001b37176401000000009004565b62000dfb601f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166377359400600462ed4e0062000e4e6401000000000262001b37176401000000009004565b62000e48602060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1664028fa6ae00600462ed4e0062000e4e6401000000000262001b37176401000000009004565b620010c3565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000eab57600080fd5b82600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555042600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555081600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555080600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018190555050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200105757805160ff191683800117855562001088565b8280016001018555821562001088579182015b82811115620010875782518255916020019190600101906200106a565b5b5090506200109791906200109b565b5090565b620010c091905b80821115620010bc576000816000905550600101620010a2565b5090565b90565b611d2880620010d36000396000f300606060405260043610610149576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610221578063095ea7b3146102af57806318160ddd1461030957806318f729da1461033257806323b872dd1461039b5780632dc9ad7f14610414578063313ce56714610477578063384f58eb146104a65780633ba0b9a9146104fb5780633ccfd60b1461052457806340528f9814610539578063485469711461057b5780634ee3dc911461059057806370a08231146105b957806374e7493b14610606578063788649ea14610629578063846786f114610662578063927a90da1461067757806395d89b41146106a457806396dfcc2114610732578063a9059cbb14610747578063bb389952146107a1578063d5abeb01146107b6578063dd62ed3e146107df578063f26c159f1461084b575b600060011515600560009054906101000a900460ff16151514151561016d57600080fd5b670de0b6b3a7640000341015151561018457600080fd5b6101a3670de0b6b3a7640000600454340261088490919063ffffffff16565b905060015481111515156101b657600080fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506102188160015461089f90919063ffffffff16565b60018190555050005b341561022c57600080fd5b6102346108b8565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610274578082015181840152602081019050610259565b50505050905090810190601f1680156102a15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102ba57600080fd5b6102ef600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610956565b604051808215151515815260200191505060405180910390f35b341561031457600080fd5b61031c610aa6565b6040518082815260200191505060405180910390f35b341561033d57600080fd5b610369600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610aaf565b604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b34156103a657600080fd5b6103fa600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ae5565b604051808215151515815260200191505060405180910390f35b341561041f57600080fd5b610475600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019091905050610d7f565b005b341561048257600080fd5b61048a610e18565b604051808260ff1660ff16815260200191505060405180910390f35b34156104b157600080fd5b6104b9610e2b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561050657600080fd5b61050e610e51565b6040518082815260200191505060405180910390f35b341561052f57600080fd5b610537610e57565b005b341561054457600080fd5b610579600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f2e565b005b341561058657600080fd5b61058e61108b565b005b341561059b57600080fd5b6105a3611126565b6040518082815260200191505060405180910390f35b34156105c457600080fd5b6105f0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061112c565b6040518082815260200191505060405180910390f35b341561061157600080fd5b6106276004808035906020019091905050611175565b005b341561063457600080fd5b610660600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111db565b005b341561066d57600080fd5b610675611292565b005b341561068257600080fd5b61068a61130b565b604051808215151515815260200191505060405180910390f35b34156106af57600080fd5b6106b761131e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106f75780820151818401526020810190506106dc565b50505050905090810190601f1680156107245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561073d57600080fd5b6107456113bc565b005b341561075257600080fd5b610787600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506114c2565b604051808215151515815260200191505060405180910390f35b34156107ac57600080fd5b6107b461167a565b005b34156107c157600080fd5b6107c96119f3565b6040518082815260200191505060405180910390f35b34156107ea57600080fd5b610835600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506119f9565b6040518082815260200191505060405180910390f35b341561085657600080fd5b610882600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611a80565b005b600080828481151561089257fe5b0490508091505092915050565b60008282111515156108ad57fe5b818303905092915050565b600a8054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561094e5780601f106109235761010080835404028352916020019161094e565b820191906000526020600020905b81548152906001019060200180831161093157829003601f168201915b505050505081565b6000801515600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156109b657600080fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008054905090565b60086020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154905085565b600080600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610bb65750828110155b1515610bc157600080fd5b82600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555082600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015610d0e5782600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60008083519150600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482840211151515610dd657600080fd5b600090505b81811015610e1257610e048482815181101515610df457fe5b90602001906020020151846114c2565b508080600101915050610ddb565b50505050565b600b60009054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610eb357600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515610f2c57600080fd5b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f8a57600080fd5b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015410151515610fdb57600080fd5b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254039250508190555080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508060008082825401925050819055505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110e757600080fd5b60011515600560009054906101000a900460ff16151514151561110957600080fd5b6000600560006101000a81548160ff021916908315150217905550565b60015481565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111d157600080fd5b8060048190555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561123757600080fd5b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112ee57600080fd5b6001600560006101000a81548160ff021916908315150217905550565b600560009054906101000a900460ff1681565b600c8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113b45780601f10611389576101008083540402835291602001916113b4565b820191906000526020600020905b81548152906001019060200180831161139757829003601f168201915b505050505081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561141857600080fd5b60015460066000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506114b7600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001546114c2565b506000600181905550565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561151257600080fd5b60001515600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561157157600080fd5b81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401546001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154030102600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015401421015151561179c57600080fd5b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201541115156117ed57600080fd5b611884600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461088490919063ffffffff16565b905080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282540392505081905550806000808282540192505081905550600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008154809291906001900391905055507f09d03d90545d2ed6aa0cc5365506a63d1a32a8ef263b0995364bef1661ff07f53382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150565b60025481565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611adc57600080fd5b6001600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b9357600080fd5b82600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555042600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555081600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555080600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550505050505600a165627a7a72305820fa377f383c806c860476fca45efad8b9ee65810ca8611ffe5c7b38c30ba7ad810029"
}