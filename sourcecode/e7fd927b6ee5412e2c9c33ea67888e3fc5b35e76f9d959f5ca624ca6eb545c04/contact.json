{
  "address": "0xddece215e5e36b06cab930bde12f72244260f2db",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BRNameBook",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-09\n*/\n\npragma solidity ^0.4.25;\n\n/*\n                              (           (        )      )          (          \n   (     (       *   )  *   ) )\\ )        )\\ )  ( /(   ( /(   (      )\\ )       \n ( )\\    )\\    ` )  /(` )  /((()/(  (    (()/(  )\\())  )\\())  )\\    (()/(  (    \n )((_)((((_)(   ( )(_))( )(_))/(_)) )\\    /(_))((_)\\  ((_)\\((((_)(   /(_)) )\\   \n((_)_  )\\ _ )\\ (_(_())(_(_())(_))  ((_)  (_))    ((_)__ ((_))\\ _ )\\ (_))  ((_)  \n | _ ) (_)_\\(_)|_   _||_   _|| |   | __| | _ \\  / _ \\\\ \\ / /(_)_\\(_)| |   | __| \n | _ \\  / _ \\    | |    | |  | |__ | _|  |   / | (_) |\\ V /  / _ \\  | |__ | _|  \n |___/ /_/ \\_\\   |_|    |_|  |____||___| |_|_\\  \\___/  |_|  /_/ \\_\\ |____||___| \n\n    Name Book implementation for ETH.TOWN Battle Royale\n    https://eth.town/battle\n\n    ETH.TOWN https://eth.town/\n    Â© 2018 ETH.TOWN All rights reserved\n*/\n\ncontract Owned {\n    address owner;\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Not owner\");\n        _;\n    }\n\n    /// @dev Contract constructor\n    constructor() public {\n        owner = msg.sender;\n    }\n}\n\ncontract Managed is Owned {\n    mapping(address => bool) public isManager;\n\n    modifier onlyManagers {\n        require(msg.sender == owner || isManager[msg.sender], \"Not authorized\");\n        _;\n    }\n\n    function setIsManager(address _address, bool _value) external onlyOwner {\n        isManager[_address] = _value;\n    }\n}\n\ncontract BRNameBook is Managed {\n    using SafeMath for uint256;\n\n    address public feeRecipient = 0xFd6D4265443647C70f8D0D80356F3b22d596DA29; // Mainnet\n\n    uint256 public registrationFee = 0.1 ether;             // price to register a name\n    uint256 public numPlayers;                              // total number of players\n    mapping (address => uint256) public playerIdByAddr;     // (addr => pID) returns player id by address\n    mapping (bytes32 => uint256) public playerIdByName;     // (name => pID) returns player id by name\n    mapping (uint256 => Player) public playerData;          // (pID => data) player data\n    mapping (uint256 => mapping (bytes32 => bool)) public playerOwnsName; // (pID => name => bool) whether the player owns the name\n    mapping (uint256 => mapping (uint256 => bytes32)) public playerNamesList; // (pID => nameNum => name) list of names a player owns\n\n    struct Player {\n        address addr;\n        address loomAddr;\n        bytes32 name;\n        uint256 lastAffiliate;\n        uint256 nameCount;\n    }\n\n    constructor() public {\n\n    }\n\n    /**\n     * @dev prevents calls from contracts\n     */\n    modifier onlyHumans() {\n        require(msg.sender == tx.origin, \"Humans only\");\n        _;\n    }\n\n    event NameRegistered (\n        uint256 indexed playerID,\n        address indexed playerAddress,\n        bytes32 indexed playerName,\n        bool isNewPlayer,\n        uint256 affiliateID,\n        address affiliateAddress,\n        bytes32 affiliateName,\n        uint256 amountPaid,\n        uint256 timeStamp\n    );\n\n    function nameIsValid(string _nameStr) public view returns(bool) {\n        bytes32 _name = _processName(_nameStr);\n        return (playerIdByName[_name] == 0);\n    }\n\n    function setRegistrationFee(uint256 _newFee) onlyManagers() external {\n        registrationFee = _newFee;\n    }\n\n    function setFeeRecipient(address _feeRecipient) onlyManagers() external {\n        feeRecipient = _feeRecipient;\n    }\n\n    /**\n     * @dev registers a name.  UI will always display the last name you registered.\n     * but you will still own all previously registered names to use as affiliate\n     * links.\n     * - must pay a registration fee.\n     * - name must be unique\n     * - names will be converted to lowercase\n     * - name cannot start or end with a space\n     * - cannot have more than 1 space in a row\n     * - cannot be only numbers\n     * - cannot start with 0x\n     * - name must be at least 1 char\n     * - max length of 32 characters long\n     * - allowed characters: a-z, 0-9, and space\n     * -functionhash- 0x921dec21 (using ID for affiliate)\n     * -functionhash- 0x3ddd4698 (using address for affiliate)\n     * -functionhash- 0x685ffd83 (using name for affiliate)\n     * @param _nameString players desired name\n     * @param _affCode affiliate ID, address, or name of who refered you\n     * (this might cost a lot of gas)\n     */\n    function registerNameAffId(string _nameString, uint256 _affCode) onlyHumans() external payable {\n        // make sure name fees paid\n        require (msg.value >= registrationFee, \"Value below the fee\");\n\n        // filter name + condition checks\n        bytes32 name = _processName(_nameString);\n\n        // set up address\n        address addr = msg.sender;\n\n        // set up our tx event data and determine if player is new or not\n        bool isNewPlayer = _determinePlayerId(addr);\n\n        // fetch player id\n        uint256 playerId = playerIdByAddr[addr];\n\n        // manage affiliate residuals\n        // if no affiliate code was given, no new affiliate code was given, or the\n        // player tried to use their own pID as an affiliate code, lolz\n        uint256 affiliateId = _affCode;\n        if (affiliateId != 0 && affiliateId != playerData[playerId].lastAffiliate && affiliateId != playerId) {\n            // update last affiliate\n            playerData[playerId].lastAffiliate = affiliateId;\n        } else if (_affCode == playerId) {\n            affiliateId = 0;\n        }\n\n        // register name\n        _registerName(playerId, addr, affiliateId, name, isNewPlayer);\n    }\n\n    function registerNameAffAddress(string _nameString, address _affCode) onlyHumans() external payable {\n        // make sure name fees paid\n        require (msg.value >= registrationFee, \"Value below the fee\");\n\n        // filter name + condition checks\n        bytes32 name = _processName(_nameString);\n\n        // set up address\n        address addr = msg.sender;\n\n        // set up our tx event data and determine if player is new or not\n        bool isNewPlayer = _determinePlayerId(addr);\n\n        // fetch player id\n        uint256 playerId = playerIdByAddr[addr];\n\n        // manage affiliate residuals\n        // if no affiliate code was given or player tried to use their own, lolz\n        uint256 affiliateId;\n        if (_affCode != address(0) && _affCode != addr) {\n            // get affiliate ID from aff Code\n            affiliateId = playerIdByAddr[_affCode];\n\n            // if affID is not the same as previously stored\n            if (affiliateId != playerData[playerId].lastAffiliate) {\n                // update last affiliate\n                playerData[playerId].lastAffiliate = affiliateId;\n            }\n        }\n\n        // register name\n        _registerName(playerId, addr, affiliateId, name, isNewPlayer);\n    }\n\n    function registerNameAffName(string _nameString, bytes32 _affCode) onlyHumans() public payable {\n        // make sure name fees paid\n        require (msg.value >= registrationFee, \"Value below the fee\");\n\n        // filter name + condition checks\n        bytes32 name = _processName(_nameString);\n\n        // set up address\n        address addr = msg.sender;\n\n        // set up our tx event data and determine if player is new or not\n        bool isNewPlayer = _determinePlayerId(addr);\n\n        // fetch player id\n        uint256 playerId = playerIdByAddr[addr];\n\n        // manage affiliate residuals\n        // if no affiliate code was given or player tried to use their own, lolz\n        uint256 affiliateId;\n        if (_affCode != \"\" && _affCode != name) {\n            // get affiliate ID from aff Code\n            affiliateId = playerIdByName[_affCode];\n\n            // if affID is not the same as previously stored\n            if (affiliateId != playerData[playerId].lastAffiliate) {\n                // update last affiliate\n                playerData[playerId].lastAffiliate = affiliateId;\n            }\n        }\n\n        // register the name\n        _registerName(playerId, addr, affiliateId, name, isNewPlayer);\n    }\n\n    /**\n     * @dev players use this to change back to one of your old names.  tip, you'll\n     * still need to push that info to existing games.\n     * -functionhash- 0xb9291296\n     * @param _nameString the name you want to use\n     */\n    function useMyOldName(string _nameString) onlyHumans() public {\n        // filter name, and get pID\n        bytes32 name = _processName(_nameString);\n        uint256 playerId = playerIdByAddr[msg.sender];\n\n        // make sure they own the name\n        require(playerOwnsName[playerId][name] == true, \"Not your name\");\n\n        // update their current name\n        playerData[playerId].name = name;\n    }\n\n\n    function _registerName(uint256 _playerId, address _addr, uint256 _affID, bytes32 _name, bool _isNewPlayer) internal {\n        // if names already has been used, require that current msg sender owns the name\n        if (playerIdByName[_name] != 0) {\n            require(playerOwnsName[_playerId][_name] == true, \"Name already taken\");\n        }\n\n        // add name to player profile, registry, and name book\n        playerData[_playerId].name = _name;\n        playerIdByName[_name] = _playerId;\n        if (playerOwnsName[_playerId][_name] == false) {\n            playerOwnsName[_playerId][_name] = true;\n            playerData[_playerId].nameCount++;\n            playerNamesList[_playerId][playerData[_playerId].nameCount] = _name;\n        }\n\n        // process the registration fee\n        uint256 total = address(this).balance;\n        uint256 devDirect = total.mul(375).div(1000);\n        owner.call.value(devDirect)();\n        feeRecipient.call.value(total.sub(devDirect))();\n\n        // fire event\n        emit NameRegistered(_playerId, _addr, _name, _isNewPlayer, _affID, playerData[_affID].addr, playerData[_affID].name, msg.value, now);\n    }\n\n    function _determinePlayerId(address _addr) internal returns (bool) {\n        if (playerIdByAddr[_addr] == 0)\n        {\n            numPlayers++;\n            playerIdByAddr[_addr] = numPlayers;\n            playerData[numPlayers].addr = _addr;\n\n            // set the new player bool to true\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function _processName(string _input) internal pure returns (bytes32) {\n        bytes memory _temp = bytes(_input);\n        uint256 _length = _temp.length;\n\n        //sorry limited to 32 characters\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\n        // make sure it doesnt start with or end with space\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\n        // make sure first two characters are not 0x\n        if (_temp[0] == 0x30)\n        {\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\n        }\n\n        // create a bool to track if we have a non number character\n        bool _hasNonNumber;\n\n        // convert & check\n        for (uint256 i = 0; i < _length; i++)\n        {\n            // if its uppercase A-Z\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\n            {\n                // convert to lower case a-z\n                _temp[i] = byte(uint(_temp[i]) + 32);\n\n                // we have a non number\n                if (_hasNonNumber == false)\n                    _hasNonNumber = true;\n            } else {\n                require\n                (\n                // require character is a space\n                    _temp[i] == 0x20 ||\n                // OR lowercase a-z\n                (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\n                // or 0-9\n                (_temp[i] > 0x2f && _temp[i] < 0x3a),\n                    \"string contains invalid characters\"\n                );\n                // make sure theres not 2x spaces in a row\n                if (_temp[i] == 0x20)\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\n\n                // see if we have a character other than a number\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\n                    _hasNonNumber = true;\n            }\n        }\n\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\n\n        bytes32 _ret;\n        assembly {\n            _ret := mload(add(_temp, 32))\n        }\n        return (_ret);\n    }\n\n    function registerNameAffIdExternal(address _addr, bytes32 _name, uint256 _affCode)\n    onlyManagers()\n    external\n    payable\n    returns (bool, uint256)\n    {\n        // make sure name fees paid\n        require (msg.value >= registrationFee, \"Value below the fee\");\n\n        // set up our tx event data and determine if player is new or not\n        bool isNewPlayer = _determinePlayerId(_addr);\n\n        // fetch player id\n        uint256 playerId = playerIdByAddr[_addr];\n\n        // manage affiliate residuals\n        // if no affiliate code was given, no new affiliate code was given, or the\n        // player tried to use their own pID as an affiliate code, lolz\n        uint256 affiliateId = _affCode;\n        if (affiliateId != 0 && affiliateId != playerData[playerId].lastAffiliate && affiliateId != playerId) {\n            // update last affiliate\n            playerData[playerId].lastAffiliate = affiliateId;\n        } else if (affiliateId == playerId) {\n            affiliateId = 0;\n        }\n\n        // register name\n        _registerName(playerId, _addr, affiliateId, _name, isNewPlayer);\n\n        return (isNewPlayer, affiliateId);\n    }\n\n    function registerNameAffAddressExternal(address _addr, bytes32 _name, address _affCode)\n    onlyManagers()\n    external\n    payable\n    returns (bool, uint256)\n    {\n        // make sure name fees paid\n        require (msg.value >= registrationFee, \"Value below the fee\");\n\n        // set up our tx event data and determine if player is new or not\n        bool isNewPlayer = _determinePlayerId(_addr);\n\n        // fetch player id\n        uint256 playerId = playerIdByAddr[_addr];\n\n        // manage affiliate residuals\n        // if no affiliate code was given or player tried to use their own, lolz\n        uint256 affiliateId;\n        if (_affCode != address(0) && _affCode != _addr)\n        {\n            // get affiliate ID from aff Code\n            affiliateId = playerIdByAddr[_affCode];\n\n            // if affID is not the same as previously stored\n            if (affiliateId != playerData[playerId].lastAffiliate) {\n                // update last affiliate\n                playerData[playerId].lastAffiliate = affiliateId;\n            }\n        }\n\n        // register name\n        _registerName(playerId, _addr, affiliateId, _name, isNewPlayer);\n\n        return (isNewPlayer, affiliateId);\n    }\n\n    function registerNameAffNameExternal(address _addr, bytes32 _name, bytes32 _affCode)\n    onlyManagers()\n    external\n    payable\n    returns (bool, uint256)\n    {\n        // make sure name fees paid\n        require (msg.value >= registrationFee, \"Value below the fee\");\n\n        // set up our tx event data and determine if player is new or not\n        bool isNewPlayer = _determinePlayerId(_addr);\n\n        // fetch player id\n        uint256 playerId = playerIdByAddr[_addr];\n\n        // manage affiliate residuals\n        // if no affiliate code was given or player tried to use their own, lolz\n        uint256 affiliateId;\n        if (_affCode != \"\" && _affCode != _name)\n        {\n            // get affiliate ID from aff Code\n            affiliateId = playerIdByName[_affCode];\n\n            // if affID is not the same as previously stored\n            if (affiliateId != playerData[playerId].lastAffiliate) {\n                // update last affiliate\n                playerData[playerId].lastAffiliate = affiliateId;\n            }\n        }\n\n        // register name\n        _registerName(playerId, _addr, affiliateId, _name, isNewPlayer);\n\n        return (isNewPlayer, affiliateId);\n    }\n\n    function assignPlayerID(address _addr) onlyManagers() external returns (uint256) {\n        _determinePlayerId(_addr);\n        return playerIdByAddr[_addr];\n    }\n\n    function getPlayerID(address _addr) public view returns (uint256) {\n        return playerIdByAddr[_addr];\n    }\n\n    function getPlayerName(uint256 _pID) public view returns (bytes32) {\n        return playerData[_pID].name;\n    }\n\n    function getPlayerNameCount(uint256 _pID) public view returns (uint256) {\n        return playerData[_pID].nameCount;\n    }\n\n    function getPlayerLastAffiliate(uint256 _pID) public view returns (uint256) {\n        return playerData[_pID].lastAffiliate;\n    }\n\n    function getPlayerAddr(uint256 _pID) public view returns (address) {\n        return playerData[_pID].addr;\n    }\n\n    function getPlayerLoomAddr(uint256 _pID) public view returns (address) {\n        return playerData[_pID].loomAddr;\n    }\n\n    function getPlayerLoomAddrByAddr(address _addr) public view returns (address) {\n        uint256 playerId = playerIdByAddr[_addr];\n        if (playerId == 0) {\n            return 0;\n        }\n\n        return playerData[playerId].loomAddr;\n    }\n\n    function getPlayerNames(uint256 _pID) public view returns (bytes32[]) {\n        uint256 nameCount = playerData[_pID].nameCount;\n\n        bytes32[] memory names = new bytes32[](nameCount);\n\n        uint256 i;\n        for (i = 1; i <= nameCount; i++) {\n            names[i - 1] = playerNamesList[_pID][i];\n        }\n\n        return names;\n    }\n\n    function setPlayerLoomAddr(uint256 _pID, address _addr, bool _allowOverwrite) onlyManagers() external {\n        require(_allowOverwrite || playerData[_pID].loomAddr == 0x0);\n\n        playerData[_pID].loomAddr = _addr;\n    }\n\n}\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"SafeMath mul failed\");\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256)\n    {\n        require(b <= a, \"SafeMath sub failed\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c)\n    {\n        c = a + b;\n        require(c >= a, \"SafeMath add failed\");\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers, never throws.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n     * @dev gives square root of given x.\n     */\n    function sqrt(uint256 x) internal pure returns (uint256 y)\n    {\n        uint256 z = ((add(x,1)) / 2);\n        y = x;\n        while (z < y) {\n            y = z;\n            z = ((add((x / z),z)) / 2);\n        }\n    }\n\n    /**\n     * @dev gives square. multiplies x by x\n     */\n    function sq(uint256 x) internal pure returns (uint256)\n    {\n        return mul(x,x);\n    }\n\n    /**\n     * @dev x to the power of y\n     */\n    function pwr(uint256 x, uint256 y) internal pure returns (uint256)\n    {\n        if (x==0) {\n            return 0;\n        } else if (y==0) {\n            return 1;\n        } else {\n            uint256 z = x;\n            for (uint256 i=1; i < y; i++)\n                z = mul(z,x);\n            return z;\n        }\n    }\n}",
  "bytecode": "608060405260028054600160a060020a03191673fd6d4265443647c70f8d0d80356f3b22d596da2917905567016345785d8a000060035534801561004257600080fd5b5060008054600160a060020a031916331790556120ee806100646000396000f30060806040526004361061017f5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663065506bd81146101845780630aec4ed1146101ae5780630bc7564f146101fd5780630e763ae21461021657806314c44e091461023757806316a99e591461024c57806325f008761461026d57806326767f90146102a2578063447110d5146102c857806346904840146102f15780634d0d35ff14610322578063690deacb1461033a5780637a811cfb146103a75780637edfe89f146103c557806382e37b2c146103e65780638678ae8f146103fe578063918ed0941461041657806397b2f55614610464578063b929129614610479578063bb84405c146104d2578063c320c727146104ec578063caefdf4e14610504578063cdbc606614610525578063cdcf59d91461058d578063e56556a9146105a5578063e74b981b146105c6578063e9b6915a146105e7578063f35dcad3146105ff578063f3ae24151461061a578063fd7f64591461063b575b600080fd5b34801561019057600080fd5b5061019c600435610656565b60408051918252519081900360200190f35b3480156101ba57600080fd5b506101c660043561066e565b60408051600160a060020a039687168152949095166020850152838501929092526060830152608082015290519081900360a00190f35b6102146024600480358281019291013590356106a9565b005b34801561022257600080fd5b5061019c600160a060020a0360043516610811565b34801561024357600080fd5b5061019c610823565b6102146024600480358281019291013590600160a060020a03903516610829565b610287600160a060020a036004351660243560443561099d565b60408051921515835260208301919091528051918290030190f35b3480156102ae57600080fd5b50610214600160a060020a03600435166024351515610aed565b3480156102d457600080fd5b50610214600435600160a060020a03602435166044351515610b7a565b3480156102fd57600080fd5b50610306610c54565b60408051600160a060020a039092168252519081900360200190f35b34801561032e57600080fd5b50610306600435610c63565b34801561034657600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610393943694929360249392840191908190840183828082843750949750610c7e9650505050505050565b604080519115158252519081900360200190f35b610287600160a060020a036004358116906024359060443516610ca5565b3480156103d157600080fd5b50610306600160a060020a0360043516610e05565b3480156103f257600080fd5b5061019c600435610e4f565b34801561040a57600080fd5b50610306600435610e64565b6040805160206004803580820135601f81018490048402850184019095528484526102149436949293602493928401919081908401838280828437509497505093359450610e829350505050565b34801561047057600080fd5b5061019c610fb1565b34801561048557600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610214943694929360249392840191908190840183828082843750949750610fb79650505050505050565b610287600160a060020a03600435166024356044356110a5565b3480156104f857600080fd5b506102146004356111ee565b34801561051057600080fd5b5061019c600160a060020a036004351661125f565b34801561053157600080fd5b5061053d6004356112f2565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610579578181015183820152602001610561565b505050509050019250505060405180910390f35b34801561059957600080fd5b5061019c600435611392565b3480156105b157600080fd5b5061019c600160a060020a03600435166113a7565b3480156105d257600080fd5b50610214600160a060020a03600435166113c2565b3480156105f357600080fd5b5061019c60043561145d565b34801561060b57600080fd5b5061019c60043560243561146f565b34801561062657600080fd5b50610393600160a060020a036004351661148c565b34801561064757600080fd5b506103936004356024356114a1565b6000818152600760205260409020600301545b919050565b60076020526000908152604090208054600182015460028301546003840154600490940154600160a060020a03938416949390921692909185565b6000808080803332146106f4576040805160e560020a62461bcd02815260206004820152600b6024820152600080516020612063833981519152604482015290519081900360640190fd5b60035434101561073c576040805160e560020a62461bcd0281526020600482015260136024820152600080516020612083833981519152604482015290519081900360640190fd5b61077588888080601f016020809104026020016040519081016040528093929190818152602001838380828437506114c1945050505050565b945033935061078384611cd4565b600160a060020a038516600090815260056020526040902054909350915085905080158015906107c457506000828152600760205260409020600301548114155b80156107d05750818114155b156107ee5760008281526007602052604090206003018190556107fa565b818614156107fa575060005b6108078285838887611d56565b5050505050505050565b60056020526000908152604090205481565b60035481565b600080808080333214610874576040805160e560020a62461bcd02815260206004820152600b6024820152600080516020612063833981519152604482015290519081900360640190fd5b6003543410156108bc576040805160e560020a62461bcd0281526020600482015260136024820152600080516020612083833981519152604482015290519081900360640190fd5b6108f588888080601f016020809104026020016040519081016040528093929190818152602001838380828437506114c1945050505050565b945033935061090384611cd4565b600160a060020a03808616600090815260056020526040902054919450909250861615801590610945575083600160a060020a031686600160a060020a031614155b156107fa5750600160a060020a03851660009081526005602090815260408083205484845260079092529091206003015481146107fa5760008281526007602052604090206003018190556108078285838887611d56565b600080548190819081908190600160a060020a03163314806109ce57503360009081526001602052604090205460ff165b1515610a12576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206120a3833981519152604482015290519081900360640190fd5b600354341015610a5a576040805160e560020a62461bcd0281526020600482015260136024820152600080516020612083833981519152604482015290519081900360640190fd5b610a6388611cd4565b600160a060020a03891660009081526005602052604090205490935091508515801590610a905750858714155b15610ad257506000858152600660209081526040808320548484526007909252909120600301548114610ad25760008281526007602052604090206003018190555b610adf8289838a87611d56565b919791965090945050505050565b600054600160a060020a03163314610b4f576040805160e560020a62461bcd02815260206004820152600960248201527f4e6f74206f776e65720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a03919091166000908152600160205260409020805460ff1916911515919091179055565b600054600160a060020a0316331480610ba257503360009081526001602052604090205460ff165b1515610be6576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206120a3833981519152604482015290519081900360640190fd5b8080610c0a5750600083815260076020526040902060010154600160a060020a0316155b1515610c1557600080fd5b50600091825260076020526040909120600101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055565b600254600160a060020a031681565b600090815260076020526040902054600160a060020a031690565b600080610c8a836114c1565b60008181526006602052604090205415925090505b50919050565b600080548190819081908190600160a060020a0316331480610cd657503360009081526001602052604090205460ff165b1515610d1a576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206120a3833981519152604482015290519081900360640190fd5b600354341015610d62576040805160e560020a62461bcd0281526020600482015260136024820152600080516020612083833981519152604482015290519081900360640190fd5b610d6b88611cd4565b600160a060020a03808a16600090815260056020526040902054919450909250861615801590610dad575087600160a060020a031686600160a060020a031614155b15610ad25750600160a060020a0385166000908152600560209081526040808320548484526007909252909120600301548114610ad2576000828152600760205260409020600301819055610adf8289838a87611d56565b600160a060020a038116600090815260056020526040812054801515610e2e5760009150610c9f565b600090815260076020526040902060010154600160a060020a031692915050565b60009081526007602052604090206002015490565b600090815260076020526040902060010154600160a060020a031690565b600080808080333214610ecd576040805160e560020a62461bcd02815260206004820152600b6024820152600080516020612063833981519152604482015290519081900360640190fd5b600354341015610f15576040805160e560020a62461bcd0281526020600482015260136024820152600080516020612083833981519152604482015290519081900360640190fd5b610f1e876114c1565b9450339350610f2c84611cd4565b600160a060020a03851660009081526005602052604090205490935091508515801590610f595750858514155b15610f9b57506000858152600660209081526040808320548484526007909252909120600301548114610f9b5760008281526007602052604090206003018190555b610fa88285838887611d56565b50505050505050565b60045481565b600080333214610fff576040805160e560020a62461bcd02815260206004820152600b6024820152600080516020612063833981519152604482015290519081900360640190fd5b611008836114c1565b336000908152600560209081526040808320548084526008835281842085855290925290912054919350915060ff161515600114611090576040805160e560020a62461bcd02815260206004820152600d60248201527f4e6f7420796f7572206e616d6500000000000000000000000000000000000000604482015290519081900360640190fd5b60009081526007602052604090206002015550565b600080548190819081908190600160a060020a03163314806110d657503360009081526001602052604090205460ff165b151561111a576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206120a3833981519152604482015290519081900360640190fd5b600354341015611162576040805160e560020a62461bcd0281526020600482015260136024820152600080516020612083833981519152604482015290519081900360640190fd5b61116b88611cd4565b600160a060020a038916600090815260056020526040902054909350915085905080158015906111ac57506000828152600760205260409020600301548114155b80156111b85750818114155b156111d6576000828152600760205260409020600301819055610ad2565b81811415610ad257506000610adf8289838a87611d56565b600054600160a060020a031633148061121657503360009081526001602052604090205460ff165b151561125a576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206120a3833981519152604482015290519081900360640190fd5b600355565b60008054600160a060020a031633148061128857503360009081526001602052604090205460ff165b15156112cc576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206120a3833981519152604482015290519081900360640190fd5b6112d582611cd4565b5050600160a060020a031660009081526005602052604090205490565b6060600060606000600760008681526020019081526020016000206004015492508260405190808252806020026020018201604052801561133d578160200160208202803883390190505b509150600190505b82811161138a57600085815260096020908152604080832084845290915290205482518390600019840190811061137857fe5b60209081029091010152600101611345565b509392505050565b60009081526007602052604090206004015490565b600160a060020a031660009081526005602052604090205490565b600054600160a060020a03163314806113ea57503360009081526001602052604090205460ff165b151561142e576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206120a3833981519152604482015290519081900360640190fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60066020526000908152604090205481565b600960209081526000928352604080842090915290825290205481565b60016020526000908152604090205460ff1681565b600860209081526000928352604080842090915290825290205460ff1681565b80516000908290828080602084118015906114dc5750600084115b1515611558576040805160e560020a62461bcd02815260206004820152602a60248201527f737472696e67206d757374206265206265747765656e203120616e642033322060448201527f6368617261637465727300000000000000000000000000000000000000000000606482015290519081900360840190fd5b84600081518110151561156757fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a02141580156115ce575084600185038151811015156115a657fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a0214155b151561164a576040805160e560020a62461bcd02815260206004820152602560248201527f737472696e672063616e6e6f74207374617274206f7220656e6420776974682060448201527f7370616365000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b84600081518110151561165957fe5b90602001015160f860020a900460f860020a02600160f860020a031916603060f860020a02141561179c5784600181518110151561169357fe5b90602001015160f860020a900460f860020a02600160f860020a031916607860f860020a0214151515611710576040805160e560020a62461bcd02815260206004820152601b60248201527f737472696e672063616e6e6f7420737461727420776974682030780000000000604482015290519081900360640190fd5b84600181518110151561171f57fe5b90602001015160f860020a900460f860020a02600160f860020a031916605860f860020a021415151561179c576040805160e560020a62461bcd02815260206004820152601b60248201527f737472696e672063616e6e6f7420737461727420776974682030580000000000604482015290519081900360640190fd5b600091505b83821015611c6c5784517f4000000000000000000000000000000000000000000000000000000000000000908690849081106117d957fe5b90602001015160f860020a900460f860020a02600160f860020a03191611801561184d575084517f5b000000000000000000000000000000000000000000000000000000000000009086908490811061182e57fe5b90602001015160f860020a900460f860020a02600160f860020a031916105b156118ba57848281518110151561186057fe5b90602001015160f860020a900460f860020a0260f860020a900460200160f860020a02858381518110151561189157fe5b906020010190600160f860020a031916908160001a9053508215156118b557600192505b611c61565b84828151811015156118c857fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a021480611998575084517f60000000000000000000000000000000000000000000000000000000000000009086908490811061192457fe5b90602001015160f860020a900460f860020a02600160f860020a031916118015611998575084517f7b000000000000000000000000000000000000000000000000000000000000009086908490811061197957fe5b90602001015160f860020a900460f860020a02600160f860020a031916105b80611a42575084517f2f00000000000000000000000000000000000000000000000000000000000000908690849081106119ce57fe5b90602001015160f860020a900460f860020a02600160f860020a031916118015611a42575084517f3a0000000000000000000000000000000000000000000000000000000000000090869084908110611a2357fe5b90602001015160f860020a900460f860020a02600160f860020a031916105b1515611abe576040805160e560020a62461bcd02815260206004820152602260248201527f737472696e6720636f6e7461696e7320696e76616c696420636861726163746560448201527f7273000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8482815181101515611acc57fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a021415611bab578482600101815181101515611b0857fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a0214151515611bab576040805160e560020a62461bcd02815260206004820152602860248201527f737472696e672063616e6e6f7420636f6e7461696e20636f6e7365637574697660448201527f6520737061636573000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b82158015611c57575084517f300000000000000000000000000000000000000000000000000000000000000090869084908110611be457fe5b90602001015160f860020a900460f860020a02600160f860020a0319161080611c57575084517f390000000000000000000000000000000000000000000000000000000000000090869084908110611c3857fe5b90602001015160f860020a900460f860020a02600160f860020a031916115b15611c6157600192505b6001909101906117a1565b600183151514611cc6576040805160e560020a62461bcd02815260206004820152601d60248201527f737472696e672063616e6e6f74206265206f6e6c79206e756d62657273000000604482015290519081900360640190fd5b505050506020015192915050565b600160a060020a0381166000908152600560205260408120541515611d4e575060048054600190810191829055600160a060020a03831660008181526005602090815260408083208690559482526007905292909220805473ffffffffffffffffffffffffffffffffffffffff1916909217909155610669565b506000610669565b600082815260066020526040812054819015611de257600087815260086020908152604080832087845290915290205460ff161515600114611de2576040805160e560020a62461bcd02815260206004820152601260248201527f4e616d6520616c72656164792074616b656e0000000000000000000000000000604482015290519081900360640190fd5b6000878152600760209081526040808320600201879055868352600682528083208a90558983526008825280832087845290915290205460ff161515611e725760008781526008602090815260408083208784528252808320805460ff191660019081179091558a8452600783528184206004018054909101908190556009835281842090845290915290208490555b30319150611e9a6103e8611e8e8461017763ffffffff611f6e16565b9063ffffffff611feb16565b60008054604051929350600160a060020a031691839181818185875af15050600254600160a060020a03169150611ed99050838363ffffffff61200216565b604051600081818185875af15050506000868152600760209081526040918290208054600290910154835188151581529283018a9052600160a060020a039182168385015260608301523460808301524260a08301529151879350918916918a917f0c6ccf53aced55e22117898114f39244a2e26bb526467d2c077b29bfe422f264919081900360c00190a450505050505050565b6000821515611f7f57506000611fe5565b50818102818382811515611f8f57fe5b0414611fe5576040805160e560020a62461bcd02815260206004820152601360248201527f536166654d617468206d756c206661696c656400000000000000000000000000604482015290519081900360640190fd5b92915050565b6000808284811515611ff957fe5b04949350505050565b60008282111561205c576040805160e560020a62461bcd02815260206004820152601360248201527f536166654d61746820737562206661696c656400000000000000000000000000604482015290519081900360640190fd5b50900390560048756d616e73206f6e6c7900000000000000000000000000000000000000000056616c75652062656c6f772074686520666565000000000000000000000000004e6f7420617574686f72697a6564000000000000000000000000000000000000a165627a7a723058204889eb06d16b00d7f8fa1fc214db3fe5b28b0c71c5368fd0ae2aa17510a283c80029"
}