{
  "address": "0xb8beb497ff26b57e4c13295f93a42b6a049826f4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CraftBeerCoin",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-21\n*/\n\npragma solidity ^0.5.0;\n\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != address(0), 'account is null');\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != address(0));\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\ncontract ERC20Detailed is IERC20 {\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n\n  constructor(string memory name, string memory symbol, uint8 decimals) public {\n    _name = name;\n    _symbol = symbol;\n    _decimals = decimals;\n  }\n\n  /**\n   * @return the name of the token.\n   */\n  function name() public view returns(string memory) {\n    return _name;\n  }\n\n  /**\n   * @return the symbol of the token.\n   */\n  function symbol() public view returns(string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @return the number of decimals of the token.\n   */\n  function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n}\n\ncontract CraftBeerCoin is ERC20, ERC20Detailed {\n\n    mapping (address => mapping (address => uint256)) public _confirmations;\n    mapping (address => bool) public _isOwner;\n    address[] public _owners;\n    uint public _required;\n    uint256 multiplier;\n\n    modifier notConfirmed(address owner, address to) {\n        require(_confirmations[to][owner] == 0);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require(_isOwner[owner]);\n        _;\n    }\n\n    event Confirmation(address indexed sender, address indexed to, uint256 value);\n    event Minted(address indexed to, uint256 value);\n    event ConfirmationRevoked(address indexed sender, address indexed to);\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint8 decimals\n    )\n\n    ERC20Detailed(name, symbol, decimals)\n    ERC20() public {\n\n        _owners = [0x460f0cc4e0fE5576b03abC1C1632EeFb5ed77fc2,\n        0x5E9a0E1acd44fbC49A14bBEae88f74593e0C0f56,\n        0x4B7C1eA71A85eCe00b231F6C1C31fb1Fa6910297,\n        0xf03523Fe4cEebA6E28Aea8F0a5ca293FC3E787c9];\n\n        _required = 2;\n\n        for (uint i=0; i<_owners.length; i++) {\n            _isOwner[_owners[i]] = true;\n        }\n\n        multiplier = 10 ** uint256(decimals);\n    }\n\n\n    function confirmMint(address to, uint256 value)\n    public\n    notConfirmed(msg.sender, to)\n    ownerExists(msg.sender)\n    {\n        uint256 _value = value*multiplier;\n        _confirmations[to][msg.sender] = _value;\n        emit Confirmation(msg.sender, to, _value);\n        executeMint(to, _value);\n    }\n\n\n    function executeMint(address to, uint256 value)\n    internal\n    returns (bool) {\n\n        if (isConfirmed(to, value)) {\n\n            if (resetConfirmations(to)) {\n\n                _mint(to, value);\n                emit Minted(to, value);\n                return true;\n            }\n\n        }\n    }\n\n\n    function resetConfirmations(address to)\n    internal\n    returns (bool) {\n\n        for (uint i=0; i<_owners.length; i++) {\n\n            if (_confirmations[to][_owners[i]] != 0)\n                _confirmations[to][_owners[i]] = 0;\n\n        }\n\n        return true;\n    }\n\n\n    function revokeConfirmations(address to)\n    public\n    ownerExists(msg.sender)\n    returns (bool) {\n\n        _confirmations[to][msg.sender] = 0;\n        emit ConfirmationRevoked(msg.sender, to);\n        return true;\n    }\n\n    function getConfirmation(address to)\n    public\n    view\n    returns (uint256)\n    {\n\n        return _confirmations[to][msg.sender];\n    }\n\n\n    function isConfirmed(address to, uint256 value)\n    internal view\n    returns (bool)\n    {\n        uint count = 0;\n        for (uint i=0; i<_owners.length; i++) {\n            if (_confirmations[to][_owners[i]] == value)\n                count += 1;\n            if (count == _required)\n                return true;\n        }\n    }\n\n    function() external payable {\n        revert();\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b50604051620011aa380380620011aa833981018060405260608110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b820160208101848111156200006457600080fd5b81516401000000008111828201871017156200007f57600080fd5b505092919060200180516401000000008111156200009c57600080fd5b82016020810184811115620000b057600080fd5b8151640100000000811182820187101715620000cb57600080fd5b505060209182015185519194509250849184918491620000f1916003918601906200021a565b508151620001079060049060208501906200021a565b506005805460ff191660ff9290921691909117905550506040805160808101825273460f0cc4e0fe5576b03abc1c1632eefb5ed77fc28152735e9a0e1acd44fbc49a14bbeae88f74593e0c0f566020820152734b7c1ea71a85ece00b231f6c1c31fb1fa69102979181019190915273f03523fe4ceeba6e28aea8f0a5ca293fc3e787c960608201526200019f9060089060046200029f565b50600260095560005b6008548110156200020657600160076000600884815481101515620001c957fe5b600091825260208083209190910154600160a060020a031683528201929092526040019020805460ff1916911515919091179055600101620001a8565b5060ff16600a90810a9055506200034c9050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025d57805160ff19168380011785556200028d565b828001600101855582156200028d579182015b828111156200028d57825182559160200191906001019062000270565b506200029b92915062000305565b5090565b828054828255906000526020600020908101928215620002f7579160200282015b82811115620002f75782518254600160a060020a031916600160a060020a03909116178255602090920191600190910190620002c0565b506200029b92915062000325565b6200032291905b808211156200029b57600081556001016200030c565b90565b6200032291905b808211156200029b578054600160a060020a03191681556001016200032c565b610e4e806200035c6000396000f3fe6080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610100578063095ea7b31461018a57806318160ddd146101d757806323b872dd146101fe578063313ce56714610241578063395093511461026c5780633a09a406146102a557806348c27f40146102ba5780636af964b4146102ed57806370a082311461032857806395d89b411461035b57806396c0dbb214610370578063992924a6146103a3578063a457c2d7146103e9578063a9059cbb14610422578063b71fbe4b1461045b578063dce793b31461048e578063dd62ed3e146104c9575b600080fd5b34801561010c57600080fd5b50610115610504565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014f578181015183820152602001610137565b50505050905090810190601f16801561017c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019657600080fd5b506101c3600480360360408110156101ad57600080fd5b50600160a060020a03813516906020013561059a565b604080519115158252519081900360200190f35b3480156101e357600080fd5b506101ec610619565b60408051918252519081900360200190f35b34801561020a57600080fd5b506101c36004803603606081101561022157600080fd5b50600160a060020a0381358116916020810135909116906040013561061f565b34801561024d57600080fd5b506102566106bc565b6040805160ff9092168252519081900360200190f35b34801561027857600080fd5b506101c36004803603604081101561028f57600080fd5b50600160a060020a0381351690602001356106c5565b3480156102b157600080fd5b506101ec610775565b3480156102c657600080fd5b506101ec600480360360208110156102dd57600080fd5b5035600160a060020a031661077b565b3480156102f957600080fd5b506103266004803603604081101561031057600080fd5b50600160a060020a0381351690602001356107a1565b005b34801561033457600080fd5b506101ec6004803603602081101561034b57600080fd5b5035600160a060020a0316610865565b34801561036757600080fd5b50610115610880565b34801561037c57600080fd5b506101c36004803603602081101561039357600080fd5b5035600160a060020a03166108e1565b3480156103af57600080fd5b506103cd600480360360208110156103c657600080fd5b5035610958565b60408051600160a060020a039092168252519081900360200190f35b3480156103f557600080fd5b506101c36004803603604081101561040c57600080fd5b50600160a060020a038135169060200135610980565b34801561042e57600080fd5b506101c36004803603604081101561044557600080fd5b50600160a060020a0381351690602001356109cb565b34801561046757600080fd5b506101c36004803603602081101561047e57600080fd5b5035600160a060020a03166109e1565b34801561049a57600080fd5b506101ec600480360360408110156104b157600080fd5b50600160a060020a03813581169160200135166109f6565b3480156104d557600080fd5b506101ec600480360360408110156104ec57600080fd5b50600160a060020a0381358116916020013516610a13565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105905780601f1061056557610100808354040283529160200191610590565b820191906000526020600020905b81548152906001019060200180831161057357829003601f168201915b5050505050905090565b6000600160a060020a03831615156105b157600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60025490565b600160a060020a038316600090815260016020908152604080832033845290915281205482111561064f57600080fd5b600160a060020a0384166000908152600160209081526040808320338452909152902054610683908363ffffffff610a3e16565b600160a060020a03851660009081526001602090815260408083203384529091529020556106b2848484610a53565b5060019392505050565b60055460ff1690565b6000600160a060020a03831615156106dc57600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610710908363ffffffff610b4516565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b60095481565b600160a060020a0316600090815260066020908152604080832033845290915290205490565b600160a060020a0382166000908152600660209081526040808320338085529252909120548390156107d257600080fd5b3360008181526007602052604090205460ff1615156107f057600080fd5b600a54600160a060020a0386166000818152600660209081526040808320338085529083529281902094890294859055805185815290517fc18a96ff84cf8f593e2214dfbc9f897503a4a17ec0c894db5b7ed4ed6896cc9d929181900390910190a361085c8682610b5e565b50505050505050565b600160a060020a031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105905780601f1061056557610100808354040283529160200191610590565b3360008181526007602052604081205490919060ff16151561090257600080fd5b600160a060020a03831660008181526006602090815260408083203380855292528083208390555190917fefdfcba697e094b885ff87b60edb76304c1cbe7a219cb32f83255e519ccb488491a350600192915050565b600880548290811061096657fe5b600091825260209091200154600160a060020a0316905081565b6000600160a060020a038316151561099757600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610710908363ffffffff610a3e16565b60006109d8338484610a53565b50600192915050565b60076020526000908152604090205460ff1681565b600660209081526000928352604080842090915290825290205481565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600082821115610a4d57600080fd5b50900390565b600160a060020a038316600090815260208190526040902054811115610a7857600080fd5b600160a060020a0382161515610a8d57600080fd5b600160a060020a038316600090815260208190526040902054610ab6908263ffffffff610a3e16565b600160a060020a038085166000908152602081905260408082209390935590841681522054610aeb908263ffffffff610b4516565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600082820183811015610b5757600080fd5b9392505050565b6000610b6a8383610bce565b1561061357610b7883610c5e565b1561061357610b878383610d16565b604080518381529051600160a060020a038516917f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe919081900360200190a2506001610613565b600080805b600854811015610c5657600160a060020a0385166000908152600660205260408120600880548793919085908110610c0757fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020541415610c39576001820191505b600954821415610c4e57600192505050610613565b600101610bd3565b505092915050565b6000805b6008548110156109d857600160a060020a03831660009081526006602052604081206008805491929184908110610c9557fe5b6000918252602080832090910154600160a060020a0316835282019290925260400190205415610d0e57600160a060020a03831660009081526006602052604081206008805483919085908110610ce857fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020555b600101610c62565b600160a060020a0382161515610d8d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6163636f756e74206973206e756c6c0000000000000000000000000000000000604482015290519081900360640190fd5b600254610da0908263ffffffff610b4516565b600255600160a060020a038216600090815260208190526040902054610dcc908263ffffffff610b4516565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3505056fea165627a7a72305820e91f878af77c6632fa6e85d296f691f3fb1cc42ec4b38c3a91cde862fa70006d0029000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000d437261667442656572436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034342430000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000d437261667442656572436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034342430000000000000000000000000000000000000000000000000000000000"
}