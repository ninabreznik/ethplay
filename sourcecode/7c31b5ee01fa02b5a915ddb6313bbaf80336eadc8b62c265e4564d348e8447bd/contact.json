{
  "address": "0x599c49b932f08707888791a9b55949e385a00aeb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MetabaseToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-25\n*/\n\npragma solidity ^0.4.18;\n\n// File: src/Token/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: src/Token/OracleOwnable.sol\n\ncontract OracleOwnable is Ownable {\n\n    address public oracle;\n\n    modifier onlyOracle() {\n        require(msg.sender == oracle);\n        _;\n    }\n\n    modifier onlyOracleOrOwner() {\n        require(msg.sender == oracle || msg.sender == owner);\n        _;\n    }\n\n    function setOracle(address newOracle) public onlyOracleOrOwner {\n        if (newOracle != address(0)) {\n            oracle = newOracle;\n        }\n\n    }\n\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: src/Token/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, OracleOwnable {\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Mint(_to, _amount);\n        Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     * @return True if the operation was successful.\n     */\n    function finishMinting() onlyOwner canMint public returns (bool) {\n        mintingFinished = true;\n        MintFinished();\n        return true;\n    }\n}\n\n// File: src/Token/ReleasableToken.sol\n\ncontract ReleasableToken is MintableToken {\n    bool public released = false;\n\n    event Release();\n    event Burn(address, uint);\n\n    modifier isReleased () {\n        require(mintingFinished);\n        require(released);\n        _;\n    }\n\n    function release() public onlyOwner returns (bool) {\n        require(mintingFinished);\n        require(!released);\n        released = true;\n        Release();\n\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) public isReleased returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public isReleased returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public isReleased returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public isReleased returns (bool success) {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public isReleased returns (bool success) {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n\n    function burn(address _to, uint _amount) public onlyOwner {\n        totalSupply_ = totalSupply_.sub(_amount);\n        balances[_to] = balances[_to].sub(_amount);\n        Burn(_to, _amount);\n    }\n}\n\n// File: src/Token/StageVestingToken.sol\n\ncontract StageVestingToken is ReleasableToken {\n    uint256 public stageCount;\n    uint256 public stage;\n    bool public isCheckStage;\n\n    mapping(uint => mapping(address => uint256)) internal stageVesting;\n\n    modifier isValidmint() {\n      require(totalSupply_ <= 4e27 );\n      _;\n    }\n\n    function StageVestingToken () public{\n        stageCount = 4;\n        stage = 0;\n        isCheckStage = true;\n    }\n\n    function setStage(uint256 _stage) public onlyOracleOrOwner {\n        stage = _stage;\n    }\n\n    function setStageCount(uint256 _stageCount) public onlyOracleOrOwner {\n        stageCount = _stageCount;\n    }\n\n    function setIsCheckStage(bool _isCheckStage) public onlyOracleOrOwner {\n        isCheckStage = _isCheckStage;\n    }\n\n    function getHolderLimit(address _holder) view public returns (uint256){\n        return stageVesting[stage][_holder];\n    }\n\n    function canUseTokens(address _holder, uint256 _amount) view internal returns (bool){\n        if (!isCheckStage) {\n            return true;\n        }\n        return (getHolderLimit(_holder) >= _amount);\n    }\n\n    function addOnOneStage(address _to, uint256 _amount, uint256 _stage) internal {\n        require(_stage < stageCount);\n        stageVesting[_stage][_to] = stageVesting[_stage][_to].add(_amount);\n    }\n\n    function subOnOneStage(address _to, uint256 _amount, uint256 _stage) internal {\n        require(_stage < stageCount);\n        if (stageVesting[_stage][_to] >= _amount) {\n            stageVesting[_stage][_to] = stageVesting[_stage][_to].sub(_amount);\n        } else {\n            stageVesting[_stage][_to] = 0;\n        }\n    }\n\n    function addOnStage(address _to, uint256 _amount) internal returns (bool){\n        return addOnStage(_to, _amount, stage);\n    }\n\n    function addOnStage(address _to, uint256 _amount, uint256 _stage) internal returns (bool){\n        if (!isCheckStage) {\n            return true;\n        }\n        for (uint256 i = _stage; i < stageCount; i++) {\n            addOnOneStage(_to, _amount, i);\n        }\n        return true;\n    }\n\n    function subOnStage(address _to, uint256 _amount) internal returns (bool){\n        return subOnStage(_to, _amount, stage);\n    }\n\n    function subOnStage(address _to, uint256 _amount, uint256 _stage) internal returns (bool){\n        if (!isCheckStage) {\n            return true;\n        }\n\n        for (uint256 i = _stage; i < stageCount; i++) {\n            subOnOneStage(_to, _amount, i);\n        }\n        return true;\n    }\n\n    function mint(address _to, uint256 _amount, uint256 _stage) onlyOwner canMint isValidmint public {\n        super.mint(_to, _amount);\n        addOnStage(_to, _amount, _stage);\n    }\n\n    function burn(address _to, uint _amount, uint256 _stage) public onlyOwner canMint{\n        super.burn(_to, _amount);\n        subOnStage(_to, _amount, _stage);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(canUseTokens(msg.sender, _value));\n        require(subOnStage(msg.sender, _value));\n        require(addOnStage(_to, _value));\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(canUseTokens(_from, _value));\n        require(subOnStage(_from, _value));\n        require(addOnStage(_to, _value));\n        return super.transferFrom(_from, _to, _value);\n    }\n}\n\n// File: src/Token/MetabaseToken.sol\n\ncontract MetabaseToken is StageVestingToken {\n\n    string public constant name = \"METABASE\";\n    string public constant symbol = \"MBT\";\n    uint256 public constant decimals = 18;\n\n}",
  "bytecode": "60606040526000600460146101000a81548160ff0219169083151502179055506000600460156101000a81548160ff02191690831515021790555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460058190555060006006819055506001600760006101000a81548160ff021916908315150217905550612855806100b56000396000f300606060405260043610610180576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b1461018557806306fdde03146101b2578063095ea7b314610240578063156e29f61461029a57806318160ddd146102e557806323b872dd1461030e578063313ce567146103875780633eb1d777146103b057806340c10f19146103d3578063661884631461042d57806370a08231146104875780637adbf973146104d45780637d64bcb41461050d5780637dc0d1d01461053a57806386d1a69f1461058f5780638da5cb5b146105bc57806395d89b4114610611578063961325211461069f5780639dc29fac146106cc578063a9059cbb1461070e578063a9147e2214610768578063af49e3211461078d578063b23d36b0146107da578063c040e6b814610807578063c1b664de14610830578063d73dd62314610853578063dd62ed3e146108ad578063f2fde38b14610919578063f33261ac14610952578063f5298aca1461097b575b600080fd5b341561019057600080fd5b6101986109c6565b604051808215151515815260200191505060405180910390f35b34156101bd57600080fd5b6101c56109d9565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102055780820151818401526020810190506101ea565b50505050905090810190601f1680156102325780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561024b57600080fd5b610280600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a12565b604051808215151515815260200191505060405180910390f35b34156102a557600080fd5b6102e3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091905050610a5c565b005b34156102f057600080fd5b6102f8610b0d565b6040518082815260200191505060405180910390f35b341561031957600080fd5b61036d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b17565b604051808215151515815260200191505060405180910390f35b341561039257600080fd5b61039a610b6c565b6040518082815260200191505060405180910390f35b34156103bb57600080fd5b6103d16004808035906020019091905050610b71565b005b34156103de57600080fd5b610413600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c2f565b604051808215151515815260200191505060405180910390f35b341561043857600080fd5b61046d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e15565b604051808215151515815260200191505060405180910390f35b341561049257600080fd5b6104be600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e5f565b6040518082815260200191505060405180910390f35b34156104df57600080fd5b61050b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ea7565b005b341561051857600080fd5b610520610fd6565b604051808215151515815260200191505060405180910390f35b341561054557600080fd5b61054d61109e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561059a57600080fd5b6105a26110c4565b604051808215151515815260200191505060405180910390f35b34156105c757600080fd5b6105cf6111a7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561061c57600080fd5b6106246111cd565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610664578082015181840152602081019050610649565b50505050905090810190601f1680156106915780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156106aa57600080fd5b6106b2611206565b604051808215151515815260200191505060405180910390f35b34156106d757600080fd5b61070c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611219565b005b341561071957600080fd5b61074e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611392565b604051808215151515815260200191505060405180910390f35b341561077357600080fd5b61078b600480803515159060200190919050506113e5565b005b341561079857600080fd5b6107c4600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506114b6565b6040518082815260200191505060405180910390f35b34156107e557600080fd5b6107ed611512565b604051808215151515815260200191505060405180910390f35b341561081257600080fd5b61081a611525565b6040518082815260200191505060405180910390f35b341561083b57600080fd5b610851600480803590602001909190505061152b565b005b341561085e57600080fd5b610893600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506115e9565b604051808215151515815260200191505060405180910390f35b34156108b857600080fd5b610903600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611633565b6040518082815260200191505060405180910390f35b341561092457600080fd5b610950600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506116ba565b005b341561095d57600080fd5b610965611812565b6040518082815260200191505060405180910390f35b341561098657600080fd5b6109c4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091905050611818565b005b600460149054906101000a900460ff1681565b6040805190810160405280600881526020017f4d4554414241534500000000000000000000000000000000000000000000000081525081565b6000600460149054906101000a900460ff161515610a2f57600080fd5b600460159054906101000a900460ff161515610a4a57600080fd5b610a5483836118ab565b905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ab857600080fd5b600460149054906101000a900460ff16151515610ad457600080fd5b6b0cecb8f27f4200f3a000000060015411151515610af157600080fd5b610afb8383610c2f565b50610b0783838361199d565b50505050565b6000600154905090565b6000610b2384836119f2565b1515610b2e57600080fd5b610b388483611a28565b1515610b4357600080fd5b610b4d8383611a3f565b1515610b5857600080fd5b610b63848484611a56565b90509392505050565b601281565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610c1a5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610c2557600080fd5b8060068190555050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c8d57600080fd5b600460149054906101000a900460ff16151515610ca957600080fd5b610cbe82600154611aa290919063ffffffff16565b600181905550610d15826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611aa290919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600460149054906101000a900460ff161515610e3257600080fd5b600460159054906101000a900460ff161515610e4d57600080fd5b610e578383611abe565b905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610f505750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610f5b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610fd35780600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561103457600080fd5b600460149054906101000a900460ff1615151561105057600080fd5b6001600460146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561112257600080fd5b600460149054906101000a900460ff16151561113d57600080fd5b600460159054906101000a900460ff1615151561115957600080fd5b6001600460156101000a81548160ff0219169083151502179055507fdf3164c6542982869e04c28f5083f269f2b72ca4bff9a7e792f5c0422788bbc560405160405180910390a16001905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f4d4254000000000000000000000000000000000000000000000000000000000081525081565b600460159054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561127557600080fd5b61128a81600154611d4f90919063ffffffff16565b6001819055506112e1816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d4f90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b600061139e33836119f2565b15156113a957600080fd5b6113b33383611a28565b15156113be57600080fd5b6113c88383611a3f565b15156113d357600080fd5b6113dd8383611d68565b905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061148e5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561149957600080fd5b80600760006101000a81548160ff02191690831515021790555050565b600060086000600654815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600760009054906101000a900460ff1681565b60065481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806115d45750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156115df57600080fd5b8060058190555050565b6000600460149054906101000a900460ff16151561160657600080fd5b600460159054906101000a900460ff16151561162157600080fd5b61162b8383611db2565b905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561171657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561175257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60055481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561187457600080fd5b600460149054906101000a900460ff1615151561189057600080fd5b61189a8383611219565b6118a5838383611fae565b50505050565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600080600760009054906101000a900460ff1615156119bf57600191506119ea565b8290505b6005548110156119e5576119d8858583612003565b80806001019150506119c3565b600191505b509392505050565b6000600760009054906101000a900460ff161515611a135760019050611a22565b81611a1d846114b6565b101590505b92915050565b6000611a378383600654611fae565b905092915050565b6000611a4e838360065461199d565b905092915050565b6000600460149054906101000a900460ff161515611a7357600080fd5b600460159054906101000a900460ff161515611a8e57600080fd5b611a998484846120cf565b90509392505050565b60008183019050828110151515611ab557fe5b80905092915050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115611bcf576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c63565b611be28382611d4f90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000828211151515611d5d57fe5b818303905092915050565b6000600460149054906101000a900460ff161515611d8557600080fd5b600460159054906101000a900460ff161515611da057600080fd5b611daa8383612489565b905092915050565b6000611e4382600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611aa290919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600080600760009054906101000a900460ff161515611fd05760019150611ffb565b8290505b600554811015611ff657611fe98585836126a8565b8080600101915050611fd4565b600191505b509392505050565b6005548110151561201357600080fd5b612076826008600084815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611aa290919063ffffffff16565b6008600083815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561210c57600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561215957600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156121e457600080fd5b612235826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d4f90919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506122c8826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611aa290919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061239982600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d4f90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156124c657600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561251357600080fd5b612564826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d4f90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506125f7826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611aa290919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600554811015156126b857600080fd5b816008600083815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015156127cd57612774826008600084815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d4f90919063ffffffff16565b6008600083815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612824565b60006008600083815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5050505600a165627a7a7230582022cd5a4f77ef532e09d37b2988f3997cbbaae7a723872dcfe73e2d7d921265e60029"
}