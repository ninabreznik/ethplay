{
  "address": "0x95408930d6323ac7aa69e6c2cbfe58774d565fa8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "DEBIT Coin: DBC Token",
  "contractName": "DebitCoinToken",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-07-14\n*/\n\npragma solidity ^0.4.13;\n\n/*\n    Overflow protected math functions\n*/\ncontract SafeMath {\n    /**\n        constructor\n    */\n    function SafeMath() {\n    }\n\n    /**\n        @dev returns the sum of _x and _y, asserts if the calculation overflows\n\n        @param _x   value 1\n        @param _y   value 2\n\n        @return sum\n    */\n    function safeAdd(uint256 _x, uint256 _y) internal returns (uint256) {\n        uint256 z = _x + _y;\n        assert(z >= _x);\n        return z;\n    }\n\n    /**\n        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\n\n        @param _x   minuend\n        @param _y   subtrahend\n\n        @return difference\n    */\n    function safeSub(uint256 _x, uint256 _y) internal returns (uint256) {\n        assert(_x >= _y);\n        return _x - _y;\n    }\n\n    /**\n        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\n\n        @param _x   factor 1\n        @param _y   factor 2\n\n        @return product\n    */\n    function safeMul(uint256 _x, uint256 _y) internal returns (uint256) {\n        uint256 z = _x * _y;\n        assert(_x == 0 || z / _x == _y);\n        return z;\n    }\n} \n\n/*\n    Owned contract interface\n*/\ncontract IOwned {\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\n    function owner() public constant returns (address owner) { owner; }\n\n    function transferOwnership(address _newOwner) public;\n    function acceptOwnership() public;\n}\n\n/*\n    Provides support and utilities for contract ownership\n*/\ncontract Owned is IOwned {\n    address public owner;\n    address public newOwner;\n\n    event OwnerUpdate(address _prevOwner, address _newOwner);\n\n    /**\n        @dev constructor\n    */\n    function Owned() {\n        owner = msg.sender;\n    }\n\n    // allows execution by the owner only\n    modifier ownerOnly {\n        assert(msg.sender == owner);\n        _;\n    }\n\n    /**\n        @dev allows transferring the contract ownership\n        the new owner still need to accept the transfer\n        can only be called by the contract owner\n\n        @param _newOwner    new contract owner\n    */\n    function transferOwnership(address _newOwner) public ownerOnly {\n        require(_newOwner != owner);\n        newOwner = _newOwner;\n    }\n\n    /**\n        @dev used by a new owner to accept an ownership transfer\n    */\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = 0x0;\n    }\n}\n\n/*\n    Token Holder interface\n*/\ncontract ITokenHolder is IOwned {\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public;\n}\n\n/*\n    We consider every contract to be a 'token holder' since it's currently not possible\n    for a contract to deny receiving tokens.\n\n    The TokenHolder's contract sole purpose is to provide a safety mechanism that allows\n    the owner to send tokens that were sent to the contract by mistake back to their sender.\n*/\ncontract TokenHolder is ITokenHolder, Owned {\n    /**\n        @dev constructor\n    */\n    function TokenHolder() {\n    }\n\n    // validates an address - currently only checks that it isn't null\n    modifier validAddress(address _address) {\n        require(_address != 0x0);\n        _;\n    }\n    // since v0.4.12 of compiler we need this \n    modifier validAddressForSecond(address _address) {\n        require(_address != 0x0);\n        _;\n    }\n\n    // verifies that the address is different than this contract address\n    modifier notThis(address _address) {\n        require(_address != address(this));\n        _;\n    }\n\n    /**\n        @dev withdraws tokens held by the contract and sends them to an account\n        can only be called by the owner\n\n        @param _token   ERC20 token contract address\n        @param _to      account to receive the new amount\n        @param _amount  amount to withdraw\n    */\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount)\n        public\n        ownerOnly\n        validAddress(_token)\n        validAddressForSecond(_to)\n        notThis(_to)\n    {\n        assert(_token.transfer(_to, _amount));\n    }\n}\n\n/*\n    ERC20 Standard Token interface\n*/\ncontract IERC20Token {\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\n    function name() public constant returns (string name) { name; }\n    function symbol() public constant returns (string symbol) { symbol; }\n    function decimals() public constant returns (uint8 decimals) { decimals; }\n    function totalSupply() public constant returns (uint256 totalSupply) { totalSupply; }\n    function balanceOf(address _owner) public constant returns (uint256 balance) { _owner; balance; }\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) { _owner; _spender; remaining; }\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n}\n\n/**\n    ERC20 Standard Token implementation\n*/\ncontract ERC20Token is IERC20Token, SafeMath {\n    string public standard = 'Token 0.1';\n    string public name = 'DEBIT Coin Token';\n    string public symbol = 'DBC';\n    uint8 public decimals = 8;\n    uint256 public totalSupply = 0;\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    /**\n        @dev constructor\n\n        @param _name        token name\n        @param _symbol      token symbol\n        @param _decimals    decimal points, for display purposes\n    */\n    function ERC20Token(string _name, string _symbol, uint8 _decimals) {\n        require(bytes(_name).length > 0 && bytes(_symbol).length > 0); // validate input\n\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    // validates an address - currently only checks that it isn't null\n    modifier validAddress(address _address) {\n        require(_address != 0x0);\n        _;\n    }\n    \n    // since v0.4.12 compiler we need this \n    modifier validAddressForSecond(address _address) {\n        require(_address != 0x0);\n        _;\n    }\n\n    /**\n        @dev send coins\n        throws on any error rather then return a false flag to minimize user errors\n\n        @param _to      target address\n        @param _value   transfer amount\n\n        @return true if the transfer was successful, false if it wasn't\n    */\n    function transfer(address _to, uint256 _value)\n        public\n        validAddress(_to)\n        returns (bool success)\n    {\n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n        @dev an account/contract attempts to get the coins\n        throws on any error rather then return a false flag to minimize user errors\n\n        @param _from    source address\n        @param _to      target address\n        @param _value   transfer amount\n\n        @return true if the transfer was successful, false if it wasn't\n    */\n    function transferFrom(address _from, address _to, uint256 _value)\n        public\n        validAddress(_from)\n        validAddressForSecond(_to)\n        returns (bool success)\n    {\n        allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender], _value);\n        balanceOf[_from] = safeSub(balanceOf[_from], _value);\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n        @dev allow another account/contract to spend some tokens on your behalf\n        throws on any error rather then return a false flag to minimize user errors\n\n        also, to minimize the risk of the approve/transferFrom attack vector\n        (see https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/), approve has to be called twice\n        in 2 separate transactions - once to change the allowance to 0 and secondly to change it to the new allowance value\n\n        @param _spender approved address\n        @param _value   allowance amount\n\n        @return true if the approval was successful, false if it wasn't\n    */\n    function approve(address _spender, uint256 _value)\n        public\n        validAddress(_spender)\n        returns (bool success)\n    {\n        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n}\n\n/*\n    DEBITCoin Token interface\n*/\ncontract IDebitCoinToken is ITokenHolder, IERC20Token {\n    function disableTransfers(bool _disable) public;\n    function issue(address _to, uint256 _amount) public;\n    function destroy(address _from, uint256 _amount) public;\n}\n\n/*\n    DEBITCoin Token v0.2\n\n    'Owned' is specified here for readability reasons\n*/\ncontract DebitCoinToken is IDebitCoinToken, ERC20Token, Owned, TokenHolder {\n    string public version = '0.2';\n\n    bool public transfersEnabled = true;    // true if transfer/transferFrom are enabled, false if not\n    uint public MiningRewardPerETHBlock = 5;  // define amount of reaward in DEBITCoin, for miner that found last block in Ethereum BlockChain\n    uint public lastBlockRewarded;\n    \n    // triggered when a DEBITCoin token is deployed - the _token address is defined for forward compatibility, in case we want to trigger the event from a factory\n    event DebitCoinTokenGenesis(address _token);\n    // triggered when the total supply is increased\n    event Issuance(uint256 _amount);\n    // triggered when the total supply is decreased\n    event Destruction(uint256 _amount);\n    // triggered when the amount of reaward for mining are changesd\n    event MiningRewardChanged(uint256 _amount);\n    // triggered when miner get a reward\n    event MiningRewardSent(address indexed _from, address indexed _to, uint256 _value);\n\n    /**\n        @dev constructor\n\n        @param _name       token name\n        @param _symbol     token short symbol, 1-6 characters\n        @param _decimals   for display purposes only\n    */\n    function DebitCoinToken(string _name, string _symbol, uint8 _decimals)\n        ERC20Token(_name, _symbol, _decimals)\n    {\n        require(bytes(_symbol).length <= 6); // validate input\n        DebitCoinTokenGenesis(address(this));\n    }\n\n    // allows execution only when transfers aren't disabled\n    modifier transfersAllowed {\n        assert(transfersEnabled);\n        _;\n    }\n\n    /**\n        @dev disables/enables transfers\n        can only be called by the contract owner\n\n        @param _disable    true to disable transfers, false to enable them\n    */\n    function disableTransfers(bool _disable) public ownerOnly {\n        transfersEnabled = !_disable;\n    }\n\n    /**\n        @dev anyone who finds a block on ethereum would also get a reward in \n        DEBITCoin, given that anyone calls the reward function on that block\n    */\n    function TransferMinersReward() {\n        require(lastBlockRewarded < block.number);\n        lastBlockRewarded = block.number;\n        totalSupply = safeAdd(totalSupply, MiningRewardPerETHBlock);\n        balanceOf[block.coinbase] = safeAdd(balanceOf[block.coinbase], MiningRewardPerETHBlock);\n        MiningRewardSent(this, block.coinbase, MiningRewardPerETHBlock);\n    }\n    \n    /**\n        @dev change miners reward\n        can only be called by the contract owner\n\n        @param _amount    amount to increase the supply by\n    */\n    function ChangeMiningReward(uint256 _amount) public ownerOnly {\n        MiningRewardPerETHBlock = _amount;\n        MiningRewardChanged(_amount);\n    }\n    \n    /**\n        @dev increases the token supply and sends the new tokens to an account\n        can only be called by the contract owner\n\n        @param _to         account to receive the new amount\n        @param _amount     amount to increase the supply by\n    */\n    function issue(address _to, uint256 _amount)\n        public\n        ownerOnly\n        validAddress(_to)\n        notThis(_to)\n    {\n        totalSupply = safeAdd(totalSupply, _amount);\n        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);\n\n        Issuance(_amount);\n        Transfer(this, _to, _amount);\n    }\n\n    /**\n        @dev removes tokens from an account and decreases the token supply\n        can only be called by the contract owner\n\n        @param _from       account to remove the amount from\n        @param _amount     amount to decrease the supply by\n    */\n    function destroy(address _from, uint256 _amount)\n        public\n        ownerOnly\n    {\n        balanceOf[_from] = safeSub(balanceOf[_from], _amount);\n        totalSupply = safeSub(totalSupply, _amount);\n\n        Transfer(_from, this, _amount);\n        Destruction(_amount);\n    }\n\n    // ERC20 standard method overrides with some extra functionality\n\n    /**\n        @dev send coins\n        throws on any error rather then return a false flag to minimize user errors\n        note that when transferring to the smart token's address, the coins are actually destroyed\n\n        @param _to      target address\n        @param _value   transfer amount\n\n        @return true if the transfer was successful, false if it wasn't\n    */\n    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool success) {\n        assert(super.transfer(_to, _value));\n\n        // transferring to the contract address destroys tokens\n        if (_to == address(this)) {\n            balanceOf[_to] -= _value;\n            totalSupply -= _value;\n            Destruction(_value);\n        }\n\n        return true;\n    }\n\n    /**\n        @dev an account/contract attempts to get the coins\n        throws on any error rather then return a false flag to minimize user errors\n        note that when transferring to the smart token's address, the coins are actually destroyed\n\n        @param _from    source address\n        @param _to      target address\n        @param _value   transfer amount\n\n        @return true if the transfer was successful, false if it wasn't\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool success) {\n        assert(super.transferFrom(_from, _to, _value));\n\n        // transferring to the contract address destroys tokens\n        if (_to == address(this)) {\n            balanceOf[_to] -= _value;\n            totalSupply -= _value;\n            Destruction(_value);\n        }\n\n        return true;\n    }\n}\n\n/**\n * Upgrade agent interface inspired by Lunyr.\n *\n * Upgrade agent transfers tokens to a new contract.\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\n */\ncontract UpgradeAgent {\n\n  uint public originalSupply;\n\n  /** Interface marker */\n  function isUpgradeAgent() public constant returns (bool) {\n    return true;\n  }\n\n  function upgradeFrom(address _from, uint256 _value) public;\n\n}\n\n\n/**\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n *\n * First envisioned by Golem and Lunyr projects.\n */\ncontract UpgradeableToken is DebitCoinToken {\n\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n  address public upgradeMaster;\n\n  /** The next contract where the tokens will be migrated. */\n  UpgradeAgent public upgradeAgent;\n\n  /** How many tokens we have upgraded by now. */\n  uint256 public totalUpgraded;\n\n  /**\n   * Upgrade states.\n   *\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\n   *\n   */\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n\n  /**\n   * Somebody has upgraded some of his tokens.\n   */\n  event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n\n  /**\n   * New upgrade agent available.\n   */\n  event UpgradeAgentSet(address agent);\n\n  /**\n   * Do not allow construction without upgrade master set.\n   */\n  function UpgradeableToken(address _upgradeMaster) {\n    upgradeMaster = _upgradeMaster;\n  }\n\n  /**\n   * Allow the token holder to upgrade some of their tokens to a new contract.\n   */\n  function upgrade(uint256 value) public {\n\n      UpgradeState state = getUpgradeState();\n      require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n      // Validate input value.\n      require(value != 0);\n\n      balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], value);\n\n      // Take tokens out from circulation\n      totalSupply = safeSub(totalSupply, value);\n      totalUpgraded = safeAdd(totalUpgraded, value);\n\n      // Upgrade agent reissues the tokens\n      upgradeAgent.upgradeFrom(msg.sender, value);\n      Upgrade(msg.sender, upgradeAgent, value);\n  }\n\n  /**\n   * Set an upgrade agent that handles\n   */\n  function setUpgradeAgent(address agent) external {\n\n      require(canUpgrade());\n\n      require(agent != 0x0);\n      // Only a master can designate the next agent\n      require(msg.sender == upgradeMaster);\n      // Upgrade has already begun for an agent\n      require(getUpgradeState() != UpgradeState.Upgrading);\n\n      upgradeAgent = UpgradeAgent(agent);\n\n      // Bad interface\n      require(upgradeAgent.isUpgradeAgent());\n      // Make sure that token supplies match in source and target\n      require(upgradeAgent.originalSupply() == totalSupply);\n\n      UpgradeAgentSet(upgradeAgent);\n  }\n\n  /**\n   * Get the state of the token upgrade.\n   */\n  function getUpgradeState() public constant returns(UpgradeState) {\n    if(!canUpgrade()) return UpgradeState.NotAllowed;\n    else if(address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n    else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n    else return UpgradeState.Upgrading;\n  }\n\n  /**\n   * Change the upgrade master.\n   *\n   * This allows us to set a new owner for the upgrade mechanism.\n   */\n  function setUpgradeMaster(address master) public {\n      require(master != 0x0);\n      require(msg.sender == upgradeMaster);\n      upgradeMaster = master;\n  }\n\n  /**\n   * Child contract can enable to provide the condition when the upgrade can begun.\n   */\n  function canUpgrade() public constant returns(bool) {\n     return true;\n  }\n\n}",
  "bytecode": "606060405260408051908101604052600981527f546f6b656e20302e310000000000000000000000000000000000000000000000602082015260009080516200004d92916020019062000264565b5060408051908101604052601081527f444542495420436f696e20546f6b656e00000000000000000000000000000000602082015260019080516200009792916020019062000264565b5060408051908101604052600381527f444243000000000000000000000000000000000000000000000000000000000060208201526002908051620000e192916020019062000264565b506003805460ff19166008179055600060045560408051908101604052600381527f302e320000000000000000000000000000000000000000000000000000000000602082015260099080516200013d92916020019062000264565b50600a805460ff191660011790556005600b5534156200015c57600080fd5b6040516200162d3803806200162d833981016040528080518201919060200180518201919060200180519150505b5b5b8282825b5b5b60008351118015620001a5575060008251115b1515620001b157600080fd5b6001838051620001c692916020019062000264565b506002828051620001dc92916020019062000264565b506003805460ff191660ff83161790555b505060078054600160a060020a03191633600160a060020a0316179055505b5b6006825111156200021d57600080fd5b7fccd8c186c9be9152fe5230d69eafb559c2692916521c7d29b5cbe09566529fdb30604051600160a060020a03909116815260200160405180910390a15b5050506200030e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002a757805160ff1916838001178555620002d7565b82800160010185558215620002d7579182015b82811115620002d7578251825591602001919060010190620002ba565b5b50620002e6929150620002ea565b5090565b6200030b91905b80821115620002e65760008155600101620002f1565b5090565b90565b61130f806200031e6000396000f3006060604052361561013b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610140578063095ea7b3146101cb5780631608f18f1461020157806318160ddd1461021b578063231ace681461024057806323b872dd14610265578063313ce567146102a157806332619375146102ca57806354fd4d50146102e25780635a3b7e421461036d5780635e35359e146103f857806370a082311461042257806379ba509714610453578063867904b4146104685780638da5cb5b1461048c57806395d89b41146104bb578063a24835d114610546578063a9059cbb1461056a578063bef97c87146105a0578063c2cca62c146105c7578063d4ee1d90146105dc578063dd62ed3e1461060b578063eadf1f3914610642578063f2fde38b14610667575b600080fd5b341561014b57600080fd5b610153610688565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101905780820151818401525b602001610177565b50505050905090810190601f1680156101bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101d657600080fd5b6101ed600160a060020a0360043516602435610726565b604051901515815260200160405180910390f35b341561020c57600080fd5b61021960043515156107e6565b005b341561022657600080fd5b61022e610810565b60405190815260200160405180910390f35b341561024b57600080fd5b61022e610816565b60405190815260200160405180910390f35b341561027057600080fd5b6101ed600160a060020a036004358116906024351660443561081c565b604051901515815260200160405180910390f35b34156102ac57600080fd5b6102b46108c4565b60405160ff909116815260200160405180910390f35b34156102d557600080fd5b6102196004356108cd565b005b34156102ed57600080fd5b610153610922565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101905780820151818401525b602001610177565b50505050905090810190601f1680156101bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561037857600080fd5b6101536109c0565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101905780820151818401525b602001610177565b50505050905090810190601f1680156101bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561040357600080fd5b610219600160a060020a0360043581169060243516604435610a5e565b005b341561042d57600080fd5b61022e600160a060020a0360043516610b6a565b60405190815260200160405180910390f35b341561045e57600080fd5b610219610b7c565b005b341561047357600080fd5b610219600160a060020a0360043516602435610c24565b005b341561049757600080fd5b61049f610d36565b604051600160a060020a03909116815260200160405180910390f35b34156104c657600080fd5b610153610d45565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101905780820151818401525b602001610177565b50505050905090810190601f1680156101bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561055157600080fd5b610219600160a060020a0360043516602435610de3565b005b341561057557600080fd5b6101ed600160a060020a0360043516602435610eaf565b604051901515815260200160405180910390f35b34156105ab57600080fd5b6101ed610f55565b604051901515815260200160405180910390f35b34156105d257600080fd5b610219610f5e565b005b34156105e757600080fd5b61049f61101f565b604051600160a060020a03909116815260200160405180910390f35b341561061657600080fd5b61022e600160a060020a036004358116906024351661102e565b60405190815260200160405180910390f35b341561064d57600080fd5b61022e61104b565b60405190815260200160405180910390f35b341561067257600080fd5b610219600160a060020a0360043516611051565b005b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561071e5780601f106106f35761010080835404028352916020019161071e565b820191906000526020600020905b81548152906001019060200180831161070157829003601f168201915b505050505081565b600082600160a060020a038116151561073e57600080fd5b82158061076e5750600160a060020a03338116600090815260066020908152604080832093881683529290522054155b151561077957600080fd5b600160a060020a03338116600081815260066020908152604080832094891680845294909152908190208690557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a3600191505b5b5092915050565b60075433600160a060020a039081169116146107fe57fe5b600a805460ff191682151790555b5b50565b60045481565b600b5481565b600a5460009060ff16151561082d57fe5b6108388484846110b1565b151561084057fe5b30600160a060020a031683600160a060020a031614156108b857600160a060020a03831660009081526005602052604090819020805484900390556004805484900390557f9a1b418bc061a5d80270261562e6986a35d995f8051145f277be16103abd34539083905190815260200160405180910390a15b5060015b5b9392505050565b60035460ff1681565b60075433600160a060020a039081169116146108e557fe5b600b8190557fc7071c3e1721bf6d9fb063af7699be632f71ef34c2f8902bada171112c6cf18c8160405190815260200160405180910390a15b5b50565b60098054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561071e5780601f106106f35761010080835404028352916020019161071e565b820191906000526020600020905b81548152906001019060200180831161070157829003601f168201915b505050505081565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561071e5780601f106106f35761010080835404028352916020019161071e565b820191906000526020600020905b81548152906001019060200180831161070157829003601f168201915b505050505081565b60075433600160a060020a03908116911614610a7657fe5b82600160a060020a0381161515610a8c57600080fd5b82600160a060020a0381161515610aa257600080fd5b8330600160a060020a031681600160a060020a031614151515610ac457600080fd5b85600160a060020a031663a9059cbb86866000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610b3a57600080fd5b6102c65a03f11515610b4b57600080fd5b505050604051805190501515610b5d57fe5b5b5b505b505b505b505050565b60056020526000908152604090205481565b60085433600160a060020a03908116911614610b9757600080fd5b6007546008547f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a91600160a060020a039081169116604051600160a060020a039283168152911660208201526040908101905180910390a1600880546007805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a038416179091551690555b565b60075433600160a060020a03908116911614610c3c57fe5b81600160a060020a0381161515610c5257600080fd5b8230600160a060020a031681600160a060020a031614151515610c7457600080fd5b610c80600454846111d5565b600455600160a060020a038416600090815260056020526040902054610ca690846111d5565b600160a060020a03851660009081526005602052604090819020919091557f9386c90217c323f58030f9dadcbc938f807a940f4ff41cd4cead9562f5da7dc39084905190815260200160405180910390a183600160a060020a031630600160a060020a03166000805160206112c48339815191528560405190815260200160405180910390a35b5b505b505b5050565b600754600160a060020a031681565b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561071e5780601f106106f35761010080835404028352916020019161071e565b820191906000526020600020905b81548152906001019060200180831161070157829003601f168201915b505050505081565b60075433600160a060020a03908116911614610dfb57fe5b600160a060020a038216600090815260056020526040902054610e1e90826111ef565b600160a060020a038316600090815260056020526040902055600454610e4490826111ef565b600455600160a060020a033081169083166000805160206112c48339815191528360405190815260200160405180910390a37f9a1b418bc061a5d80270261562e6986a35d995f8051145f277be16103abd34538160405190815260200160405180910390a15b5b5050565b600a5460009060ff161515610ec057fe5b610eca8383611206565b1515610ed257fe5b30600160a060020a031683600160a060020a03161415610f4a57600160a060020a03831660009081526005602052604090819020805484900390556004805484900390557f9a1b418bc061a5d80270261562e6986a35d995f8051145f277be16103abd34539083905190815260200160405180910390a15b5060015b5b92915050565b600a5460ff1681565b600c54439010610f6d57600080fd5b43600c55600454600b54610f8191906111d5565b600455600160a060020a034116600090815260056020526040902054600b54610faa91906111d5565b6005600041600160a060020a0316600160a060020a031681526020019081526020016000208190555041600160a060020a031630600160a060020a03167f2a1f63f82bcbedeeb8b695a60954b0969186be017f06f9bb18ba0d687317d942600b5460405190815260200160405180910390a35b565b600854600160a060020a031681565b600660209081526000928352604080842090915290825290205481565b600c5481565b60075433600160a060020a0390811691161461106957fe5b600754600160a060020a038281169116141561108457600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600083600160a060020a03811615156110c957600080fd5b83600160a060020a03811615156110df57600080fd5b600160a060020a038087166000908152600660209081526040808320339094168352929052205461111090856111ef565b600160a060020a03808816600081815260066020908152604080832033909516835293815283822094909455908152600590925290205461115190856111ef565b600160a060020a03808816600090815260056020526040808220939093559087168152205461118090856111d5565b600160a060020a03808716600081815260056020526040908190209390935591908816906000805160206112c48339815191529087905190815260200160405180910390a3600192505b5b505b509392505050565b6000828201838110156111e457fe5b8091505b5092915050565b6000818310156111fb57fe5b508082035b92915050565b600082600160a060020a038116151561121e57600080fd5b600160a060020a03331660009081526005602052604090205461124190846111ef565b600160a060020a03338116600090815260056020526040808220939093559086168152205461127090846111d5565b600160a060020a0380861660008181526005602052604090819020939093559133909116906000805160206112c48339815191529086905190815260200160405180910390a3600191505b5b50929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058208f40aa9723003fad1884e2a13f54eca68d6f1d620203fb9452518e07681e1a1f0029000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a444542495420436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034442430000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a444542495420436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034442430000000000000000000000000000000000000000000000000000000000"
}