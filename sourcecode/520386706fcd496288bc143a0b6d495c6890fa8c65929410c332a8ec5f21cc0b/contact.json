{
  "address": "0x5824f275dab2c59b8972a1fda45ff404c9a703e3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Equal: Old Token",
  "contractName": "EqualToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-25\n*/\n\npragma solidity ^0.4.18;\n\ncontract Token {\n\n    /// @return total amount of tokens\n    function totalSupply() constant returns (uint256 supply);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) constant returns (uint256 balance);\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) returns (bool success);\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n\n\n\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) returns (bool success);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Burn(address indexed from, uint256 value);\n    \n}\n\n\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function onePercent(uint256 a) internal constant returns (uint256){\n      return div(a,uint256(100));\n  }\n  \n  function power(uint256 a,uint256 b) internal constant returns (uint256){\n      return mul(a,10**b);\n  }\n}\n\ncontract StandardToken is Token {\n    using SafeMath for uint256;\n    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n    mapping(address=>bool) internal withoutFee;\n    uint256 internal maxFee;\n    \n    function transfer(address _to, uint256 _value) returns (bool success) {\n        uint256 fee=getFee(_value);\n        if (balances[msg.sender].add(fee) >= _value && _value > 0) {\n            //Do Transfer\n            doTransfer(msg.sender,_to,_value,fee);\n            return true;\n        }  else { return false; }\n    }\n    \n    function getFee(uint256 _value) private returns (uint256){\n        uint256 onePercentOfValue=_value.onePercent();\n        uint256 fee=uint256(maxFee).power(decimals);\n         // Check if 1% burn fee exceeds maxfee\n        // If so then hard cap for burn fee is maxfee\n        if (onePercentOfValue>= fee) {\n            return fee;\n        // If 1% burn fee is less than maxfee\n        // then use 1% burn fee\n        } \n        if (onePercentOfValue < fee) {\n            return onePercentOfValue;\n        }\n    }\n    function doTransfer(address _from,address _to,uint256 _value,uint256 fee) internal {\n            balances[_from] =balances[_from].sub(_value);\n            balances[_to] = balances[_to].add(_value);\n            Transfer(_from, _to, _value);\n            if(!withoutFee[_from]){\n                doBurn(_from,fee);\n            }\n    }\n    \n    function doBurn(address _from,uint256 _value) private returns (bool success){\n        require(balanceOf(_from) >= _value);   // Check if the sender has enough\n        balances[_from] =balances[_from].sub(_value);            // Subtract from the sender\n        _totalSupply =_totalSupply.sub(_value);                      // Updates totalSupply\n        Burn(_from, _value);\n        return true;\n    }\n    \n    function burn(address _from,uint256 _value) public returns (bool success) {\n        return doBurn(_from,_value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n        uint256 fee=getFee(_value);  \n        uint256 valueWithFee=_value;\n        if(!withoutFee[_from]){\n            valueWithFee=valueWithFee.add(fee);\n        }\n        if (balances[_from] >= valueWithFee && allowed[_from][msg.sender] >= valueWithFee && _value > 0 ) {\n            doTransfer(_from,_to,_value,fee);\n            allowed[_from][msg.sender] =allowed[_from][msg.sender].sub(valueWithFee);\n            return true;\n        } else { return false; }\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        uint256 fee=getFee(_value);  \n        allowed[msg.sender][_spender] = _value.add(fee);\n        Approval(msg.sender, _spender, _value.add(fee));\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n    \n    function totalSupply() constant returns (uint totalSupply){\n        return _totalSupply;\n    }\n    \n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    uint256 public _totalSupply;\n}\n\n\ncontract EqualToken is StandardToken {\n\n    function () {\n        //if ether is sent to this address, send it back.\n        revert();\n    }\n\n    /* Public variables of the token */\n\n    /*\n    NOTE:\n    The following variables are OPTIONAL vanities. One does not have to include them.\n    They allow one to customise the token contract & in no way influences the core functionality.\n    Some wallets/interfaces might not even bother to look at this information.\n    */\n    string public name;                   //fancy name: eg Simon Bucks\n    string public symbol;                 //An identifier: eg SBX\n    string public version = 'H1.0';       //human 0.1 standard. Just an arbitrary versioning scheme.\n    address private _owner;\n    // Fee info\n    string public feeInfo = \"Each operation costs 1% of the transaction amount, but not more than 250 tokens.\";\n\n    function EqualToken() {\n        _totalSupply = 800000000000000000000000000; \n        _owner=msg.sender;\n        balances[msg.sender] =_totalSupply;\n\n        // Airdrop Allocation\n        allocate(0xeeEb0f191c4E2ee96E1399937a5241fA1E9f9A6e,20); // Airdrop Round One\n        allocate(0x3CF9d0484790a1a24cfb1A51f8BEf39b6F1322d6,20); // Airdrop Round Two\n        allocate(0x64d1832cf8879A903af86E60fF9ed549648B2Bda,5); // Airdrop Round Three\n\n        // Adoption Allocation\n        allocate(0x0b6cFbc459efF6B12238380AC2A26926896eaFA2,35); // Seed Offerings\n\n        // Internal Allocation\n        allocate(0xaBf029361BeCB2bE58011AD874C6eAbCD4c84D09,20); // Team \n\n        maxFee=250; // max fee for transfer\n        \n        name = \"EQUAL Token\";                      // Set the name for display purposes\n        decimals = 18;                            // Amount of decimals for display purposes\n        symbol = \"EQL\";                          // Set the symbol for display purposes\n    }\n\n    function allocate(address _address,uint256 percent) private{\n        uint256 bal=_totalSupply.onePercent().mul(percent);\n        //balances[_address]=bal;\n        withoutFee[_address]=true;\n        doTransfer(msg.sender,_address,bal,0);\n    }\n   \n    function setWithoutFee(address _address,bool _withoutFee) public {\n        require(_owner==msg.sender);\n        withoutFee[_address]=_withoutFee;\n    }\n    \n    /* Approves and then calls the receiving contract */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { revert(); }\n        return true;\n    }\n}",
  "bytecode": "60606040526040805190810160405280600481526020017f48312e30000000000000000000000000000000000000000000000000000000008152506008908051906020019062000051929190620008a8565b50608060405190810160405280605081526020017f45616368206f7065726174696f6e20636f737473203125206f6620746865207481526020017f72616e73616374696f6e20616d6f756e742c20627574206e6f74206d6f72652081526020017f7468616e2032353020746f6b656e732e00000000000000000000000000000000815250600a9080519060200190620000ec929190620008a8565b503415620000f957600080fd5b6b0295be96e64066972000000060058190555033600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600554600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620001c873eeeb0f191c4e2ee96e1399937a5241fa1e9f9a6e6014620003616401000000000262001603176401000000009004565b620001fd733cf9d0484790a1a24cfb1a51f8bef39b6f1322d66014620003616401000000000262001603176401000000009004565b620002327364d1832cf8879a903af86e60ff9ed549648b2bda6005620003616401000000000262001603176401000000009004565b62000267730b6cfbc459eff6b12238380ac2a26926896eafa26023620003616401000000000262001603176401000000009004565b6200029c73abf029361becb2be58011ad874c6eabcd4c84d096014620003616401000000000262001603176401000000009004565b60fa6002819055506040805190810160405280600b81526020017f455155414c20546f6b656e00000000000000000000000000000000000000000081525060069080519060200190620002f1929190620008a8565b5060126000806101000a81548160ff021916908360ff1602179055506040805190810160405280600381526020017f45514c0000000000000000000000000000000000000000000000000000000000815250600790805190602001906200035a929190620008a8565b5062000957565b6000620003a6826200038960055462000427640100000000026200158a176401000000009004565b6200045164010000000002620015d0179091906401000000009004565b905060018060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555062000422338483600062000487640100000000026200125c176401000000009004565b505050565b60006200044a826064620006b264010000000002620015b5176401000000009004565b9050919050565b600080828402905060008414806200047457508284828115156200047157fe5b04145b15156200047d57fe5b8091505092915050565b620004e982600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620006ce6401000000000262001450179091906401000000009004565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506200058e82600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620006e8640100000000026200123e179091906401000000009004565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515620006ac57620006aa8482620007076401000000000262001469176401000000009004565b505b50505050565b6000808284811515620006c157fe5b0490508091505092915050565b6000828211151515620006dd57fe5b818303905092915050565b6000808284019050838110151515620006fd57fe5b8091505092915050565b60008162000729846200085f6401000000000262000bd0176401000000009004565b101515156200073757600080fd5b6200079982600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620006ce6401000000000262001450179091906401000000009004565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506200080182600554620006ce6401000000000262001450179091906401000000009004565b6005819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a26001905092915050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620008eb57805160ff19168380011785556200091c565b828001600101855582156200091c579182015b828111156200091b578251825591602001919060010190620008fe565b5b5090506200092b91906200092f565b5090565b6200095491905b808211156200095057600081600090555060010162000936565b5090565b90565b6116b980620009676000396000f3006060604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100eb578063095ea7b31461017957806318160ddd146101d357806323b872dd146101fc578063313ce567146102755780633eaaf86b146102a457806354fd4d50146102cd57806370a082311461035b57806395d89b41146103a8578063995b5aae146104365780639dc29fac146104c4578063a235ae521461051e578063a9059cbb14610562578063cae9ca51146105bc578063dd62ed3e14610659575b34156100e657600080fd5b600080fd5b34156100f657600080fd5b6100fe6106c5565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013e578082015181840152602081019050610123565b50505050905090810190601f16801561016b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018457600080fd5b6101b9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610763565b604051808215151515815260200191505060405180910390f35b34156101de57600080fd5b6101e6610886565b6040518082815260200191505060405180910390f35b341561020757600080fd5b61025b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610890565b604051808215151515815260200191505060405180910390f35b341561028057600080fd5b610288610b1a565b604051808260ff1660ff16815260200191505060405180910390f35b34156102af57600080fd5b6102b7610b2c565b6040518082815260200191505060405180910390f35b34156102d857600080fd5b6102e0610b32565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610320578082015181840152602081019050610305565b50505050905090810190601f16801561034d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561036657600080fd5b610392600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610bd0565b6040518082815260200191505060405180910390f35b34156103b357600080fd5b6103bb610c19565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103fb5780820151818401526020810190506103e0565b50505050905090810190601f1680156104285780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561044157600080fd5b610449610cb7565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561048957808201518184015260208101905061046e565b50505050905090810190601f1680156104b65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104cf57600080fd5b610504600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d55565b604051808215151515815260200191505060405180910390f35b341561052957600080fd5b610560600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080351515906020019091905050610d69565b005b341561056d57600080fd5b6105a2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e20565b604051808215151515815260200191505060405180910390f35b34156105c757600080fd5b61063f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610eb5565b604051808215151515815260200191505060405180910390f35b341561066457600080fd5b6106af600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611156565b6040518082815260200191505060405180910390f35b60068054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561075b5780601f106107305761010080835404028352916020019161075b565b820191906000526020600020905b81548152906001019060200180831161073e57829003601f168201915b505050505081565b60008061076f836111dd565b9050610784818461123e90919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925610866848761123e90919063ffffffff16565b6040518082815260200191505060405180910390a3600191505092915050565b6000600554905090565b600080600061089e846111dd565b9150839050600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561090c57610909828261123e90919063ffffffff16565b90505b80600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156109d7575080600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156109e35750600084115b15610b0c576109f48686868561125c565b610a8381600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461145090919063ffffffff16565b600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060019250610b11565b600092505b50509392505050565b6000809054906101000a900460ff1681565b60055481565b60088054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bc85780601f10610b9d57610100808354040283529160200191610bc8565b820191906000526020600020905b815481529060010190602001808311610bab57829003601f168201915b505050505081565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610caf5780601f10610c8457610100808354040283529160200191610caf565b820191906000526020600020905b815481529060010190602001808311610c9257829003601f168201915b505050505081565b600a8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d4d5780601f10610d2257610100808354040283529160200191610d4d565b820191906000526020600020905b815481529060010190602001808311610d3057829003601f168201915b505050505081565b6000610d618383611469565b905092915050565b3373ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610dc557600080fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600080610e2c836111dd565b905082610e8182600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461123e90919063ffffffff16565b10158015610e8f5750600083115b15610ea957610ea03385858461125c565b60019150610eae565b600091505b5092915050565b600082600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff1660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e01905060405180910390207c01000000000000000000000000000000000000000000000000000000009004338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828051906020019080838360005b838110156110f65780820151818401526020810190506110db565b50505050905090810190601f1680156111235780820380516001836020036101000a031916815260200191505b5094505050505060006040518083038160008761646e5a03f192505050151561114b57600080fd5b600190509392505050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008060006111eb8461158a565b91506112136000809054906101000a900460ff1660ff1660025461159e90919063ffffffff16565b9050808210151561122657809250611237565b8082101561123657819250611237565b5b5050919050565b600080828401905083811015151561125257fe5b8091505092915050565b6112ae82600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461145090919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061134382600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461123e90919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561144a576114488482611469565b505b50505050565b600082821115151561145e57fe5b818303905092915050565b60008161147584610bd0565b1015151561148257600080fd5b6114d482600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461145090919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061152c8260055461145090919063ffffffff16565b6005819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a26001905092915050565b60006115978260646115b5565b9050919050565b60006115ad8383600a0a6115d0565b905092915050565b60008082848115156115c357fe5b0490508091505092915050565b600080828402905060008414806115f157508284828115156115ee57fe5b04145b15156115f957fe5b8091505092915050565b60006116228261161460055461158a565b6115d090919063ffffffff16565b905060018060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611688338483600061125c565b5050505600a165627a7a7230582003157a881cbeb271c2ac473f7a83ac498e77628ebad3e7cf4d521bd02770c22e0029"
}