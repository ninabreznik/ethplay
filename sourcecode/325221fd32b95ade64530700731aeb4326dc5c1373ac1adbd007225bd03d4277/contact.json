{
  "address": "0x8b353021189375591723e7384262f45709a3c3dc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TomoCoin",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-28\n*/\n\npragma solidity 0.4.19;\n\n// ================= Ownable Contract start =============================\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\ncontract Ownable {\n  address public owner;\n\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) public onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n}\n// ================= Ownable Contract end ===============================\n\n// ================= Safemath Lib ============================\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n// ================= Safemath Lib end ==============================\n\n// ================= ERC20 Token Contract start =========================\n/*\n * ERC20 interface\n * see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n// ================= ERC20 Token Contract end ===========================\n\n// ================= Standard Token Contract start ======================\ncontract StandardToken is ERC20 {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n}\n// ================= Standard Token Contract end ========================\n\n// ================= Pausable Token Contract start ======================\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n  * @dev modifier to allow actions only when the contract IS paused\n  */\n  modifier whenNotPaused() {\n    require (!paused);\n    _;\n  }\n\n  /**\n  * @dev modifier to allow actions only when the contract IS NOT paused\n  */\n  modifier whenPaused {\n    require (paused) ;\n    _;\n  }\n\n  /**\n  * @dev called by the owner to pause, triggers stopped state\n  */\n  function pause() public onlyOwner whenNotPaused returns (bool) {\n    paused = true;\n    Pause();\n    return true;\n  }\n\n  /**\n  * @dev called by the owner to unpause, returns to normal state\n  */\n  function unpause() public onlyOwner whenPaused returns (bool) {\n    paused = false;\n    Unpause();\n    return true;\n  }\n}\n// ================= Pausable Token Contract end ========================\n\n// ================= Tomocoin  start =======================\ncontract TomoCoin is StandardToken, Pausable {\n  string public constant name = 'Tomocoin';\n  string public constant symbol = 'TOMO';\n  uint256 public constant decimals = 18;\n  address public tokenSaleAddress;\n  address public tomoDepositAddress; // multisig wallet\n\n  uint256 public constant tomoDeposit = 100000000 * 10**decimals;\n\n  function TomoCoin(address _tomoDepositAddress) public { \n    tomoDepositAddress = _tomoDepositAddress;\n\n    balances[tomoDepositAddress] = tomoDeposit;\n    Transfer(0x0, tomoDepositAddress, tomoDeposit);\n    totalSupply_ = tomoDeposit;\n  }\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool success) {\n    return super.transfer(_to,_value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool success) {\n    return super.approve(_spender, _value);\n  }\n\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return super.balanceOf(_owner);\n  }\n\n  // Setup Token Sale Smart Contract\n  function setTokenSaleAddress(address _tokenSaleAddress) public onlyOwner {\n    if (_tokenSaleAddress != address(0)) {\n      tokenSaleAddress = _tokenSaleAddress;\n    }\n  }\n\n  function mint(address _recipient, uint256 _value) public whenNotPaused returns (bool success) {\n      require(_value > 0);\n      // This function is only called by Token Sale Smart Contract\n      require(msg.sender == tokenSaleAddress);\n\n      balances[tomoDepositAddress] = balances[tomoDepositAddress].sub(_value);\n      balances[ _recipient ] = balances[_recipient].add(_value);\n\n      Transfer(tomoDepositAddress, _recipient, _value);\n      return true;\n  }\n}\n// ================= Ico Token Contract end =======================\n\n\n// ================= Whitelist start ====================\ncontract TomoContributorWhitelist is Ownable {\n    mapping(address => uint256) public whitelist;\n\n    function TomoContributorWhitelist() public {}\n\n    event ListAddress( address _user, uint256 cap, uint256 _time );\n\n    function listAddress( address _user, uint256 cap ) public onlyOwner {\n        whitelist[_user] = cap;\n        ListAddress( _user, cap, now );\n    }\n\n    function listAddresses( address[] _users, uint256[] _caps ) public onlyOwner {\n        for( uint i = 0 ; i < _users.length ; i++ ) {\n            listAddress( _users[i], _caps[i] );\n        }\n    }\n\n    function getCap( address _user ) public view returns(uint) {\n        return whitelist[_user];\n    }\n}\n// ================= Whitelist end ====================\n\n// ================= Actual Sale Contract Start ====================\ncontract TomoTokenSale is Pausable {\n  using SafeMath for uint256;\n\n  TomoCoin tomo;\n  TomoContributorWhitelist whitelist;\n  mapping(address => uint256) public participated;\n\n  address public ethFundDepositAddress;\n  address public tomoDepositAddress;\n\n  uint256 public constant tokenCreationCap = 4000000 * 10**18;\n  uint256 public totalTokenSold = 0;\n  uint256 public constant fundingStartTime = 1519876800; // 2018/03/01 04:00:00\n  uint256 public constant fundingPoCEndTime = 1519963200; // 2018/03/02 04:00:00\n  uint256 public constant fundingEndTime = 1520136000; // 2018/03/04 04:00:00\n  uint256 public constant minContribution = 0.1 ether;\n  uint256 public constant maxContribution = 10 ether;\n  uint256 public constant tokenExchangeRate = 3200;\n  uint256 public constant maxCap = tokenExchangeRate * maxContribution;\n\n  bool public isFinalized;\n\n  event MintTomo(address from, address to, uint256 val);\n  event RefundTomo(address to, uint256 val);\n\n  function TomoTokenSale(\n    TomoCoin _tomoCoinAddress,\n    TomoContributorWhitelist _tomoContributorWhitelistAddress,\n    address _ethFundDepositAddress,\n    address _tomoDepositAddress\n  ) public\n  {\n    tomo = TomoCoin(_tomoCoinAddress);\n    whitelist = TomoContributorWhitelist(_tomoContributorWhitelistAddress);\n    ethFundDepositAddress = _ethFundDepositAddress;\n    tomoDepositAddress = _tomoDepositAddress;\n\n    isFinalized = false;\n  }\n\n  function buy(address to, uint256 val) internal returns (bool success) {\n    MintTomo(tomoDepositAddress, to, val);\n    return tomo.mint(to, val);\n  }\n\n  function () public payable {    \n    createTokens(msg.sender, msg.value);\n  }\n\n  function createTokens(address _beneficiary, uint256 _value) internal whenNotPaused {\n    require (now >= fundingStartTime);\n    require (now <= fundingEndTime);\n    require (_value >= minContribution);\n    require (_value <= maxContribution);\n    require (!isFinalized);\n\n    uint256 tokens = _value.mul(tokenExchangeRate);\n\n    uint256 cap = whitelist.getCap(_beneficiary);\n    require (cap > 0);\n\n    uint256 tokensToAllocate = 0;\n    uint256 tokensToRefund = 0;\n    uint256 etherToRefund = 0;\n\n    // running while PoC Buying Time\n    if (now <= fundingPoCEndTime) {\n      tokensToAllocate = cap.sub(participated[_beneficiary]);\n    } else {\n      tokensToAllocate = maxCap.sub(participated[_beneficiary]);\n    }\n\n    // calculate refund if over max cap or individual cap\n    if (tokens > tokensToAllocate) {\n      tokensToRefund = tokens.sub(tokensToAllocate);\n      etherToRefund = tokensToRefund.div(tokenExchangeRate);\n    } else {\n      // user can buy amount they want\n      tokensToAllocate = tokens;\n    }\n\n    uint256 checkedTokenSold = totalTokenSold.add(tokensToAllocate);\n\n    // if reaches hard cap\n    if (tokenCreationCap < checkedTokenSold) {\n      tokensToAllocate = tokenCreationCap.sub(totalTokenSold);\n      tokensToRefund   = tokens.sub(tokensToAllocate);\n      etherToRefund = tokensToRefund.div(tokenExchangeRate);\n      totalTokenSold = tokenCreationCap;\n    } else {\n      totalTokenSold = checkedTokenSold;\n    }\n\n    // save to participated data\n    participated[_beneficiary] = participated[_beneficiary].add(tokensToAllocate);\n\n    // allocate tokens\n    require(buy(_beneficiary, tokensToAllocate));\n    if (etherToRefund > 0) {\n      // refund in case user buy over hard cap, individual cap\n      RefundTomo(msg.sender, etherToRefund);\n      msg.sender.transfer(etherToRefund);\n    }\n    ethFundDepositAddress.transfer(this.balance);\n    return;\n  }\n\n  /// @dev Ends the funding period and sends the ETH home\n  function finalize() external onlyOwner {\n    require (!isFinalized);\n    // move to operational\n    isFinalized = true;\n    ethFundDepositAddress.transfer(this.balance);\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenSaleAddress\",\"type\":\"address\"}],\"name\":\"setTokenSaleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tomoDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tomoDepositAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tomoDepositAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526003805460a060020a60ff0219169055341561001f57600080fd5b604051602080610c038339810160405280805160038054600160a060020a03338116600160a060020a0319928316179092556005805483851692169190911780825582166000908152602081905260408082206a52b7d2dcc80cd2e400000090819055925494965093909216935090917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91905190815260200160405180910390a3506a52b7d2dcc80cd2e4000000600255610b23806100e06000396000f3006060604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461010b578063095ea7b3146101955780631448b3ca146101cb57806318160ddd146101fa57806323b872dd1461021f578063313ce567146102475780633f4ba83a1461025a57806340c10f191461026d5780635afe52071461028f5780635c975abb146102b057806370a08231146102c35780638456cb59146102e25780638da5cb5b146102f557806395d89b4114610308578063a9059cbb1461031b578063be16dccd1461033d578063dd62ed3e14610350578063ebbfcfef14610375578063f2fde38b14610388575b600080fd5b341561011657600080fd5b61011e6103a7565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561015a578082015183820152602001610142565b50505050905090810190601f1680156101875780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101a057600080fd5b6101b7600160a060020a03600435166024356103de565b604051901515815260200160405180910390f35b34156101d657600080fd5b6101de610409565b604051600160a060020a03909116815260200160405180910390f35b341561020557600080fd5b61020d610418565b60405190815260200160405180910390f35b341561022a57600080fd5b6101b7600160a060020a036004358116906024351660443561041e565b341561025257600080fd5b61020d61059e565b341561026557600080fd5b6101b76105a3565b341561027857600080fd5b6101b7600160a060020a0360043516602435610629565b341561029a57600080fd5b6102ae600160a060020a0360043516610731565b005b34156102bb57600080fd5b6101b7610787565b34156102ce57600080fd5b61020d600160a060020a0360043516610797565b34156102ed57600080fd5b6101b76107a8565b341561030057600080fd5b6101de610833565b341561031357600080fd5b61011e610842565b341561032657600080fd5b6101b7600160a060020a0360043516602435610879565b341561034857600080fd5b61020d61089d565b341561035b57600080fd5b61020d600160a060020a03600435811690602435166108ac565b341561038057600080fd5b6101de6108d7565b341561039357600080fd5b6102ae600160a060020a03600435166108e6565b60408051908101604052600881527f546f6d6f636f696e000000000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff16156103f857600080fd5b610402838361093d565b9392505050565b600454600160a060020a031681565b60025490565b6000600160a060020a038316151561043557600080fd5b600160a060020a03841660009081526020819052604090205482111561045a57600080fd5b600160a060020a038085166000908152600160209081526040808320339094168352929052205482111561048d57600080fd5b600160a060020a0384166000908152602081905260409020546104b6908363ffffffff6109a916565b600160a060020a0380861660009081526020819052604080822093909355908516815220546104eb908363ffffffff6109bb16565b600160a060020a0380851660009081526020818152604080832094909455878316825260018152838220339093168252919091522054610531908363ffffffff6109a916565b600160a060020a03808616600081815260016020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b601281565b60035460009033600160a060020a039081169116146105c157600080fd5b60035460a060020a900460ff1615156105d957600080fd5b6003805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a150600190565b60035460009060a060020a900460ff161561064357600080fd5b6000821161065057600080fd5b60045433600160a060020a0390811691161461066b57600080fd5b600554600160a060020a0316600090815260208190526040902054610696908363ffffffff6109a916565b600554600160a060020a0390811660009081526020819052604080822093909355908516815220546106ce908363ffffffff6109bb16565b600160a060020a03808516600081815260208190526040908190209390935560055490929116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60035433600160a060020a0390811691161461074c57600080fd5b600160a060020a03811615610784576004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b60035460a060020a900460ff1681565b60006107a2826109ca565b92915050565b60035460009033600160a060020a039081169116146107c657600080fd5b60035460a060020a900460ff16156107dd57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a150600190565b600354600160a060020a031681565b60408051908101604052600481527f544f4d4f00000000000000000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff161561089357600080fd5b61040283836109e5565b6a52b7d2dcc80cd2e400000081565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600554600160a060020a031681565b60035433600160a060020a0390811691161461090157600080fd5b600160a060020a038116156107845760038054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff1990911617905550565b600160a060020a03338116600081815260016020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6000828211156109b557fe5b50900390565b60008282018381101561040257fe5b600160a060020a031660009081526020819052604090205490565b6000600160a060020a03831615156109fc57600080fd5b600160a060020a033316600090815260208190526040902054821115610a2157600080fd5b600160a060020a033316600090815260208190526040902054610a4a908363ffffffff6109a916565b600160a060020a033381166000908152602081905260408082209390935590851681522054610a7f908363ffffffff6109bb16565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a3506001929150505600a165627a7a7230582052d4187afac8e2912ec2fabc2c8a17ecba268895603de5e019547060ebc0bc6f00290000000000000000000000009b1356cc6213b5d93a9afb34804ba87bdff37ea6",
  "constructorArguments": "0000000000000000000000009b1356cc6213b5d93a9afb34804ba87bdff37ea6"
}