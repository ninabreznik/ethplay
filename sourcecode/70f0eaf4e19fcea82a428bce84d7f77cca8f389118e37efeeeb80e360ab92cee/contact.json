{
  "address": "0x4a8688ccc04aee23b868cf66fbbf3a88428d095b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PumaPayPullPayment",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-03\n*/\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity 0.5.0;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity 0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity 0.5.0;\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\npragma solidity 0.5.0;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n\npragma solidity 0.5.0;\n\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\n\npragma solidity 0.5.0;\n\n\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}\n\n// File: contracts/PumaPayToken.sol\n\npragma solidity 0.5.0;\n\n\n\n/// PumaPayToken inherits from MintableToken, which in turn inherits from StandardToken.\n/// Super is used to bypass the original function signature and include the whenNotMinting modifier.\n\ncontract PumaPayToken is ERC20Mintable {\n\n    string public name = \"PumaPay\";\n    string public symbol = \"PMA\";\n    uint8 public decimals = 18;\n\n    constructor() public {\n    }\n\n    /// @dev transfer token for a specified address\n    /// @param _to address The address to transfer to.\n    /// @param _value uint256 The amount to be transferred.\n    /// @return success bool Calling super.transfer and returns true if successful.\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    /// @dev Transfer tokens from one address to another.\n    /// @param _from address The address which you want to send tokens from.\n    /// @param _to address The address which you want to transfer to.\n    /// @param _value uint256 the amount of tokens to be transferred.\n    /// @return success bool Calling super.transferFrom and returns true if successful.\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n}\n\n// File: contracts/ownership/PayableOwnable.sol\n\npragma solidity 0.5.0;\n\n/**\n * @title PayableOwnable\n * @dev The PayableOwnable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n * PayableOwnable is extended from open-zeppelin Ownable smart contract, with the difference of making the owner\n * a payable address.\n */\ncontract PayableOwnable {\n    address payable private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address payable) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address payable newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address payable newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/PumaPayPullPayment.sol\n\npragma solidity 0.5.0;\n\n\n\n\n/// @title PumaPay Pull Payment - Contract that facilitates our pull payment protocol\n/// @author PumaPay Dev Team - <[email protected]>\n\ncontract PumaPayPullPayment is PayableOwnable {\n\n    using SafeMath for uint256;\n\n    /// ===============================================================================================================\n    ///                                      Events\n    /// ===============================================================================================================\n\n    event LogExecutorAdded(address executor);\n    event LogExecutorRemoved(address executor);\n    event LogSetConversionRate(string currency, uint256 conversionRate);\n\n    event LogPaymentRegistered(\n        address customerAddress,\n        bytes32 paymentID,\n        bytes32 businessID,\n        bytes32 uniqueReferenceID\n    );\n    event LogPaymentCancelled(\n        address customerAddress,\n        bytes32 paymentID,\n        bytes32 businessID,\n        bytes32 uniqueReferenceID\n    );\n    event LogPullPaymentExecuted(\n        address customerAddress,\n        bytes32 paymentID,\n        bytes32 businessID,\n        bytes32 uniqueReferenceID\n    );\n\n    /// ===============================================================================================================\n    ///                                      Constants\n    /// ===============================================================================================================\n\n    uint256 constant private DECIMAL_FIXER = 10 ** 10; /// 1e^10 - This transforms the Rate from decimals to uint256\n    uint256 constant private FIAT_TO_CENT_FIXER = 100;    /// Fiat currencies have 100 cents in 1 basic monetary unit.\n    uint256 constant private OVERFLOW_LIMITER_NUMBER = 10 ** 20; /// 1e^20 - Prevent numeric overflows\n\n    uint256 constant private ONE_ETHER = 1 ether;         /// PumaPay token has 18 decimals - same as one ETHER\n    uint256 constant private FUNDING_AMOUNT = 1 ether;  /// Amount to transfer to owner/executor\n    uint256 constant private MINIMUM_AMOUNT_OF_ETH_FOR_OPERATORS = 0.15 ether; /// min amount of ETH for owner/executor\n\n    /// ===============================================================================================================\n    ///                                      Members\n    /// ===============================================================================================================\n\n    PumaPayToken public token;\n\n    mapping(string => uint256) private conversionRates;\n    mapping(address => bool) public executors;\n    mapping(address => mapping(address => PullPayment)) public pullPayments;\n\n    struct PullPayment {\n        bytes32 paymentID;                      /// ID of the payment\n        bytes32 businessID;                     /// ID of the business\n        bytes32 uniqueReferenceID;              /// unique reference ID the business is adding on the pull payment\n        string currency;                        /// 3-letter abbr i.e. 'EUR' / 'USD' etc.\n        uint256 initialPaymentAmountInCents;    /// initial payment amount in fiat in cents\n        uint256 fiatAmountInCents;              /// payment amount in fiat in cents\n        uint256 frequency;                      /// how often merchant can pull - in seconds\n        uint256 numberOfPayments;               /// amount of pull payments merchant can make\n        uint256 startTimestamp;                 /// when subscription starts - in seconds\n        uint256 nextPaymentTimestamp;           /// timestamp of next payment\n        uint256 lastPaymentTimestamp;           /// timestamp of last payment\n        uint256 cancelTimestamp;                /// timestamp the payment was cancelled\n        address treasuryAddress;                /// address which pma tokens will be transfer to on execution\n    }\n\n    /// ===============================================================================================================\n    ///                                      Modifiers\n    /// ===============================================================================================================\n    modifier isExecutor() {\n        require(executors[msg.sender], \"msg.sender not an executor\");\n        _;\n    }\n\n    modifier executorExists(address _executor) {\n        require(executors[_executor], \"Executor does not exists.\");\n        _;\n    }\n\n    modifier executorDoesNotExists(address _executor) {\n        require(!executors[_executor], \"Executor already exists.\");\n        _;\n    }\n\n    modifier paymentExists(address _client, address _pullPaymentExecutor) {\n        require(doesPaymentExist(_client, _pullPaymentExecutor), \"Pull Payment does not exists\");\n        _;\n    }\n\n    modifier paymentNotCancelled(address _client, address _pullPaymentExecutor) {\n        require(pullPayments[_client][_pullPaymentExecutor].cancelTimestamp == 0, \"Pull Payment is cancelled.\");\n        _;\n    }\n\n    modifier isValidPullPaymentExecutionRequest(address _client, address _pullPaymentExecutor, bytes32 _paymentID) {\n        require(\n            (pullPayments[_client][_pullPaymentExecutor].initialPaymentAmountInCents > 0 ||\n        (now >= pullPayments[_client][_pullPaymentExecutor].startTimestamp &&\n        now >= pullPayments[_client][_pullPaymentExecutor].nextPaymentTimestamp)\n            ), \"Invalid pull payment execution request - Time of execution is invalid.\"\n        );\n        require(pullPayments[_client][_pullPaymentExecutor].numberOfPayments > 0,\n            \"Invalid pull payment execution request - Number of payments is zero.\");\n\n        require((pullPayments[_client][_pullPaymentExecutor].cancelTimestamp == 0 ||\n        pullPayments[_client][_pullPaymentExecutor].cancelTimestamp > pullPayments[_client][_pullPaymentExecutor].nextPaymentTimestamp),\n            \"Invalid pull payment execution request - Pull payment is cancelled\");\n        require(keccak256(\n            abi.encodePacked(pullPayments[_client][_pullPaymentExecutor].paymentID)\n        ) == keccak256(abi.encodePacked(_paymentID)),\n            \"Invalid pull payment execution request - Payment ID not matching.\");\n        _;\n    }\n\n    modifier isValidDeletionRequest(bytes32 _paymentID, address _client, address _pullPaymentExecutor) {\n        require(_client != address(0), \"Invalid deletion request - Client address is ZERO_ADDRESS.\");\n        require(_pullPaymentExecutor != address(0), \"Invalid deletion request - Beneficiary address is ZERO_ADDRESS.\");\n        require(_paymentID.length != 0, \"Invalid deletion request - Payment ID is empty.\");\n        _;\n    }\n\n    modifier isValidAddress(address _address) {\n        require(_address != address(0), \"Invalid address - ZERO_ADDRESS provided\");\n        _;\n    }\n\n    modifier validConversionRate(string memory _currency) {\n        require(bytes(_currency).length != 0, \"Invalid conversion rate - Currency is empty.\");\n        require(conversionRates[_currency] > 0, \"Invalid conversion rate - Must be higher than zero.\");\n        _;\n    }\n\n    modifier validAmount(uint256 _fiatAmountInCents) {\n        require(_fiatAmountInCents > 0, \"Invalid amount - Must be higher than zero\");\n        _;\n    }\n\n    /// ===============================================================================================================\n    ///                                      Constructor\n    /// ===============================================================================================================\n\n    /// @dev Contract constructor - sets the token address that the contract facilitates.\n    /// @param _token Token Address.\n\n    constructor (address _token)\n    public {\n        require(_token != address(0), \"Invalid address for token - ZERO_ADDRESS provided\");\n        token = PumaPayToken(_token);\n    }\n\n    // @notice Will receive any eth sent to the contract\n    function() external payable {\n    }\n\n    /// ===============================================================================================================\n    ///                                      Public Functions - Owner Only\n    /// ===============================================================================================================\n\n    /// @dev Adds a new executor. - can be executed only by the onwer.\n    /// When adding a new executor 1 ETH is tranferred to allow the executor to pay for gas.\n    /// The balance of the owner is also checked and if funding is needed 1 ETH is transferred.\n    /// @param _executor - address of the executor which cannot be zero address.\n\n    function addExecutor(address payable _executor)\n    public\n    onlyOwner\n    isValidAddress(_executor)\n    executorDoesNotExists(_executor)\n    {\n        _executor.transfer(FUNDING_AMOUNT);\n        executors[_executor] = true;\n\n        if (isFundingNeeded(owner())) {\n            owner().transfer(FUNDING_AMOUNT);\n        }\n\n        emit LogExecutorAdded(_executor);\n    }\n\n    /// @dev Removes a new executor. - can be executed only by the onwer.\n    /// The balance of the owner is checked and if funding is needed 1 ETH is transferred.\n    /// @param _executor - address of the executor which cannot be zero address.\n    function removeExecutor(address payable _executor)\n    public\n    onlyOwner\n    isValidAddress(_executor)\n    executorExists(_executor)\n    {\n        executors[_executor] = false;\n        if (isFundingNeeded(owner())) {\n            owner().transfer(FUNDING_AMOUNT);\n        }\n        emit LogExecutorRemoved(_executor);\n    }\n\n    /// @dev Sets the exchange rate for a currency. - can be executed only by the onwer.\n    /// Emits 'LogSetConversionRate' with the currency and the updated rate.\n    /// The balance of the owner is checked and if funding is needed 1 ETH is transferred.\n    /// @param _currency - address of the executor which cannot be zero address\n    /// @param _rate - address of the executor which cannot be zero address\n    function setRate(string memory _currency, uint256 _rate)\n    public\n    onlyOwner\n    returns (bool) {\n        conversionRates[_currency] = _rate;\n        emit LogSetConversionRate(_currency, _rate);\n\n        if (isFundingNeeded(owner())) {\n            owner().transfer(FUNDING_AMOUNT);\n        }\n\n        return true;\n    }\n\n    /// ===============================================================================================================\n    ///                                      Public Functions - Executors Only\n    /// ===============================================================================================================\n\n    /// @dev Registers a new pull payment to the PumaPay Pull Payment Contract - The registration can be executed only\n    /// by one of the executors of the PumaPay Pull Payment Contract\n    /// and the PumaPay Pull Payment Contract checks that the pull payment has been singed by the client of the account.\n    /// The balance of the executor (msg.sender) is checked and if funding is needed 1 ETH is transferred.\n    /// Emits 'LogPaymentRegistered' with client address, beneficiary address and paymentID.\n    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\n    /// @param r - R output of ECDSA signature.\n    /// @param s - S output of ECDSA signature.\n    /// @param _ids - all the relevant IDs for the payment.\n    /// @param _addresses - all the relevant addresses for the payment.\n    /// @param _currency - currency of the payment / 3-letter abbr i.e. 'EUR'.\n    /// @param _fiatAmountInCents - payment amount in fiat in cents.\n    /// @param _frequency - how often merchant can pull - in seconds.\n    /// @param _numberOfPayments - amount of pull payments merchant can make\n    /// @param _startTimestamp - when subscription starts - in seconds.\n    function registerPullPayment(\n        uint8 v,\n        bytes32 r,\n        bytes32 s,\n        bytes32[3] memory _ids, // 0 paymentID, 1 businessID, 2 uniqueReferenceID\n        address[3] memory _addresses, // 0 customer, 1 pull payment executor, 2 treasury\n        string memory _currency,\n        uint256 _initialPaymentAmountInCents,\n        uint256 _fiatAmountInCents,\n        uint256 _frequency,\n        uint256 _numberOfPayments,\n        uint256 _startTimestamp\n    )\n    public\n    isExecutor()\n    {\n        require(_ids[0].length > 0, \"Payment ID is empty.\");\n        require(_ids[1].length > 0, \"Business ID is empty.\");\n        require(_ids[2].length > 0, \"Unique Reference ID is empty.\");\n        require(bytes(_currency).length > 0, \"Currency is empty\");\n        require(_addresses[0] != address(0), \"Customer Address is ZERO_ADDRESS.\");\n        require(_addresses[1] != address(0), \"Beneficiary Address is ZERO_ADDRESS.\");\n        require(_addresses[2] != address(0), \"Treasury Address is ZERO_ADDRESS.\");\n        require(_fiatAmountInCents > 0, \"Payment amount in fiat is zero.\");\n        require(_frequency > 0, \"Payment frequency is zero.\");\n        require(_frequency < OVERFLOW_LIMITER_NUMBER, \"Payment frequency is higher thant the overflow limit.\");\n        require(_numberOfPayments > 0, \"Payment number of payments is zero.\");\n        require(_numberOfPayments < OVERFLOW_LIMITER_NUMBER, \"Payment number of payments is higher thant the overflow limit.\");\n        require(_startTimestamp > 0, \"Payment start time is zero.\");\n        require(_startTimestamp < OVERFLOW_LIMITER_NUMBER, \"Payment start time is higher thant the overflow limit.\");\n\n        pullPayments[_addresses[0]][_addresses[1]].currency = _currency;\n        pullPayments[_addresses[0]][_addresses[1]].initialPaymentAmountInCents = _initialPaymentAmountInCents;\n        pullPayments[_addresses[0]][_addresses[1]].fiatAmountInCents = _fiatAmountInCents;\n        pullPayments[_addresses[0]][_addresses[1]].frequency = _frequency;\n        pullPayments[_addresses[0]][_addresses[1]].startTimestamp = _startTimestamp;\n        pullPayments[_addresses[0]][_addresses[1]].numberOfPayments = _numberOfPayments;\n        pullPayments[_addresses[0]][_addresses[1]].paymentID = _ids[0];\n        pullPayments[_addresses[0]][_addresses[1]].businessID = _ids[1];\n        pullPayments[_addresses[0]][_addresses[1]].uniqueReferenceID = _ids[2];\n        pullPayments[_addresses[0]][_addresses[1]].treasuryAddress = _addresses[2];\n\n        require(isValidRegistration(\n                v,\n                r,\n                s,\n                _addresses[0],\n                _addresses[1],\n                pullPayments[_addresses[0]][_addresses[1]]),\n            \"Invalid pull payment registration - ECRECOVER_FAILED\"\n        );\n\n        pullPayments[_addresses[0]][_addresses[1]].nextPaymentTimestamp = _startTimestamp;\n        pullPayments[_addresses[0]][_addresses[1]].lastPaymentTimestamp = 0;\n        pullPayments[_addresses[0]][_addresses[1]].cancelTimestamp = 0;\n\n        if (isFundingNeeded(msg.sender)) {\n            msg.sender.transfer(FUNDING_AMOUNT);\n        }\n\n        emit LogPaymentRegistered(_addresses[0], _ids[0], _ids[1], _ids[2]);\n    }\n\n    /// @dev Deletes a pull payment for a beneficiary - The deletion needs can be executed only by one of the\n    /// executors of the PumaPay Pull Payment Contract\n    /// and the PumaPay Pull Payment Contract checks that the beneficiary and the paymentID have\n    /// been singed by the client of the account.\n    /// This method sets the cancellation of the pull payment in the pull payments array for this beneficiary specified.\n    /// The balance of the executor (msg.sender) is checked and if funding is needed 1 ETH is transferred.\n    /// Emits 'LogPaymentCancelled' with beneficiary address and paymentID.\n    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\n    /// @param r - R output of ECDSA signature.\n    /// @param s - S output of ECDSA signature.\n    /// @param _paymentID - ID of the payment.\n    /// @param _client - client address that is linked to this pull payment.\n    /// @param _pullPaymentExecutor - address that is allowed to execute this pull payment.\n    function deletePullPayment(\n        uint8 v,\n        bytes32 r,\n        bytes32 s,\n        bytes32 _paymentID,\n        address _client,\n        address _pullPaymentExecutor\n    )\n    public\n    isExecutor()\n    paymentExists(_client, _pullPaymentExecutor)\n    paymentNotCancelled(_client, _pullPaymentExecutor)\n    isValidDeletionRequest(_paymentID, _client, _pullPaymentExecutor)\n    {\n        require(isValidDeletion(v, r, s, _paymentID, _client, _pullPaymentExecutor), \"Invalid deletion - ECRECOVER_FAILED.\");\n\n        pullPayments[_client][_pullPaymentExecutor].cancelTimestamp = now;\n\n        if (isFundingNeeded(msg.sender)) {\n            msg.sender.transfer(FUNDING_AMOUNT);\n        }\n\n        emit LogPaymentCancelled(\n            _client,\n            _paymentID,\n            pullPayments[_client][_pullPaymentExecutor].businessID,\n            pullPayments[_client][_pullPaymentExecutor].uniqueReferenceID\n        );\n    }\n\n    /// ===============================================================================================================\n    ///                                      Public Functions\n    /// ===============================================================================================================\n\n    /// @dev Executes a pull payment for the msg.sender - The pull payment should exist and the payment request\n    /// should be valid in terms of when it can be executed.\n    /// Emits 'LogPullPaymentExecuted' with client address, msg.sender as the beneficiary address and the paymentID.\n    /// Use Case 1: Single/Recurring Fixed Pull Payment (initialPaymentAmountInCents == 0 )\n    /// ------------------------------------------------\n    /// We calculate the amount in PMA using the rate for the currency specified in the pull payment\n    /// and the 'fiatAmountInCents' and we transfer from the client account the amount in PMA.\n    /// After execution we set the last payment timestamp to NOW, the next payment timestamp is incremented by\n    /// the frequency and the number of payments is decreased by 1.\n    /// Use Case 2: Recurring Fixed Pull Payment with initial fee (initialPaymentAmountInCents > 0)\n    /// ------------------------------------------------------------------------------------------------\n    /// We calculate the amount in PMA using the rate for the currency specified in the pull payment\n    /// and the 'initialPaymentAmountInCents' and we transfer from the client account the amount in PMA.\n    /// After execution we set the last payment timestamp to NOW and the 'initialPaymentAmountInCents to ZERO.\n    /// @param _client - address of the client from which the msg.sender requires to pull funds.\n    /// @param _paymentID - ID of the payment.\n    function executePullPayment(address _client, bytes32 _paymentID)\n    public\n    paymentExists(_client, msg.sender)\n    isValidPullPaymentExecutionRequest(_client, msg.sender, _paymentID)\n    {\n        uint256 amountInPMA;\n\n        if (pullPayments[_client][msg.sender].initialPaymentAmountInCents > 0) {\n            amountInPMA = calculatePMAFromFiat(\n                pullPayments[_client][msg.sender].initialPaymentAmountInCents,\n                pullPayments[_client][msg.sender].currency\n            );\n            pullPayments[_client][msg.sender].initialPaymentAmountInCents = 0;\n        } else {\n            amountInPMA = calculatePMAFromFiat(\n                pullPayments[_client][msg.sender].fiatAmountInCents,\n                pullPayments[_client][msg.sender].currency\n            );\n\n            pullPayments[_client][msg.sender].nextPaymentTimestamp =\n            pullPayments[_client][msg.sender].nextPaymentTimestamp + pullPayments[_client][msg.sender].frequency;\n            pullPayments[_client][msg.sender].numberOfPayments = pullPayments[_client][msg.sender].numberOfPayments - 1;\n        }\n\n        pullPayments[_client][msg.sender].lastPaymentTimestamp = now;\n        token.transferFrom(\n            _client,\n            pullPayments[_client][msg.sender].treasuryAddress,\n            amountInPMA\n        );\n\n        emit LogPullPaymentExecuted(\n            _client,\n            pullPayments[_client][msg.sender].paymentID,\n            pullPayments[_client][msg.sender].businessID,\n            pullPayments[_client][msg.sender].uniqueReferenceID\n        );\n    }\n\n    function getRate(string memory _currency) public view returns (uint256) {\n        return conversionRates[_currency];\n    }\n\n    /// ===============================================================================================================\n    ///                                      Internal Functions\n    /// ===============================================================================================================\n\n    /// @dev Calculates the PMA Rate for the fiat currency specified - The rate is set every 10 minutes by our PMA server\n    /// for the currencies specified in the smart contract.\n    /// @param _fiatAmountInCents - payment amount in fiat CENTS so that is always integer\n    /// @param _currency - currency in which the payment needs to take place\n    /// RATE CALCULATION EXAMPLE\n    /// ------------------------\n    /// RATE ==> 1 PMA = 0.01 USD$\n    /// 1 USD$ = 1/0.01 PMA = 100 PMA\n    /// Start the calculation from one ether - PMA Token has 18 decimals\n    /// Multiply by the DECIMAL_FIXER (1e+10) to fix the multiplication of the rate\n    /// Multiply with the fiat amount in cents\n    /// Divide by the Rate of PMA to Fiat in cents\n    /// Divide by the FIAT_TO_CENT_FIXER to fix the _fiatAmountInCents\n    function calculatePMAFromFiat(uint256 _fiatAmountInCents, string memory _currency)\n    internal\n    view\n    validConversionRate(_currency)\n    validAmount(_fiatAmountInCents)\n    returns (uint256) {\n        return ONE_ETHER.mul(DECIMAL_FIXER).mul(_fiatAmountInCents).div(conversionRates[_currency]).div(FIAT_TO_CENT_FIXER);\n    }\n\n    /// @dev Checks if a registration request is valid by comparing the v, r, s params\n    /// and the hashed params with the client address.\n    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\n    /// @param r - R output of ECDSA signature.\n    /// @param s - S output of ECDSA signature.\n    /// @param _client - client address that is linked to this pull payment.\n    /// @param _pullPaymentExecutor - address that is allowed to execute this pull payment.\n    /// @param _pullPayment - pull payment to be validated.\n    /// @return bool - if the v, r, s params with the hashed params match the client address\n    function isValidRegistration(\n        uint8 v,\n        bytes32 r,\n        bytes32 s,\n        address _client,\n        address _pullPaymentExecutor,\n        PullPayment memory _pullPayment\n    )\n    internal\n    pure\n    returns (bool)\n    {\n        return ecrecover(\n            keccak256(\n                abi.encodePacked(\n                    _pullPaymentExecutor,\n                    _pullPayment.paymentID,\n                    _pullPayment.businessID,\n                    _pullPayment.uniqueReferenceID,\n                    _pullPayment.treasuryAddress,\n                    _pullPayment.currency,\n                    _pullPayment.initialPaymentAmountInCents,\n                    _pullPayment.fiatAmountInCents,\n                    _pullPayment.frequency,\n                    _pullPayment.numberOfPayments,\n                    _pullPayment.startTimestamp\n                )\n            ),\n            v, r, s) == _client;\n    }\n\n    /// @dev Checks if a deletion request is valid by comparing the v, r, s params\n    /// and the hashed params with the client address.\n    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\n    /// @param r - R output of ECDSA signature.\n    /// @param s - S output of ECDSA signature.\n    /// @param _paymentID - ID of the payment.\n    /// @param _client - client address that is linked to this pull payment.\n    /// @param _pullPaymentExecutor - address that is allowed to execute this pull payment.\n    /// @return bool - if the v, r, s params with the hashed params match the client address\n    function isValidDeletion(\n        uint8 v,\n        bytes32 r,\n        bytes32 s,\n        bytes32 _paymentID,\n        address _client,\n        address _pullPaymentExecutor\n    )\n    internal\n    view\n    returns (bool)\n    {\n        return ecrecover(\n            keccak256(\n                abi.encodePacked(\n                    _paymentID,\n                    _pullPaymentExecutor\n                )\n            ), v, r, s) == _client\n        && keccak256(\n            abi.encodePacked(pullPayments[_client][_pullPaymentExecutor].paymentID)\n        ) == keccak256(abi.encodePacked(_paymentID)\n        );\n    }\n\n    /// @dev Checks if a payment for a beneficiary of a client exists.\n    /// @param _client - client address that is linked to this pull payment.\n    /// @param _pullPaymentExecutor - address to execute a pull payment.\n    /// @return bool - whether the beneficiary for this client has a pull payment to execute.\n    function doesPaymentExist(address _client, address _pullPaymentExecutor)\n    internal\n    view\n    returns (bool) {\n        return (\n        bytes(pullPayments[_client][_pullPaymentExecutor].currency).length > 0 &&\n        pullPayments[_client][_pullPaymentExecutor].fiatAmountInCents > 0 &&\n        pullPayments[_client][_pullPaymentExecutor].frequency > 0 &&\n        pullPayments[_client][_pullPaymentExecutor].startTimestamp > 0 &&\n        pullPayments[_client][_pullPaymentExecutor].numberOfPayments > 0 &&\n        pullPayments[_client][_pullPaymentExecutor].nextPaymentTimestamp > 0\n        );\n    }\n\n    /// @dev Checks if the address of an owner/executor needs to be funded.\n    /// The minimum amount the owner/executors should always have is 0.001 ETH\n    /// @param _address - address of owner/executors that the balance is checked against.\n    /// @return bool - whether the address needs more ETH.\n    function isFundingNeeded(address _address)\n    private\n    view\n    returns (bool) {\n        return address(_address).balance <= MINIMUM_AMOUNT_OF_ETH_FOR_OPERATORS;\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405160208062005422833981018060405260208110156200003357600080fd5b8101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515620001cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001807f496e76616c6964206164647265737320666f7220746f6b656e202d205a45524f81526020017f5f414444524553532070726f766964656400000000000000000000000000000081525060400191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050615204806200021e6000396000f3fe6080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631f5a0bbe146100d257806324788429146101235780636c0daed814610174578063715018a6146102505780637d45bd2f146102675780638da5cb5b146103d15780638f32d59b1461042857806397bfe6cf146104575780639ac2a011146104b2578063c84cda0f1461051b578063d851693514610605578063f2fde38b146106a1578063fc0c546a146106f2578063fca851dc14610749575b005b3480156100de57600080fd5b50610121600480360360208110156100f557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108e7565b005b34801561012f57600080fd5b506101726004803603602081101561014657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c04565b005b34801561018057600080fd5b5061023a6004803603602081101561019757600080fd5b81019080803590602001906401000000008111156101b457600080fd5b8201836020820111156101c657600080fd5b803590602001918460018302840111640100000000831117156101e857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610ed1565b6040518082815260200191505060405180910390f35b34801561025c57600080fd5b50610265610f46565b005b34801561027357600080fd5b506102d66004803603604081101561028a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611018565b604051808e81526020018d81526020018c8152602001806020018b81526020018a81526020018981526020018881526020018781526020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182810382528c818151815260200191508051906020019080838360005b8381101561038a57808201518184015260208101905061036f565b50505050905090810190601f1680156103b75780820380516001836020036101000a031916815260200191505b509e50505050505050505050505050505060405180910390f35b3480156103dd57600080fd5b506103e6611143565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043457600080fd5b5061043d61116c565b604051808215151515815260200191505060405180910390f35b34801561046357600080fd5b506104b06004803603604081101561047a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111c3565b005b3480156104be57600080fd5b50610501600480360360208110156104d557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124f6565b604051808215151515815260200191505060405180910390f35b34801561052757600080fd5b506105eb6004803603604081101561053e57600080fd5b810190808035906020019064010000000081111561055b57600080fd5b82018360208201111561056d57600080fd5b8035906020019184600183028401116401000000008311171561058f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050612516565b604051808215151515815260200191505060405180910390f35b34801561061157600080fd5b5061069f600480360360c081101561062857600080fd5b81019080803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506126b5565b005b3480156106ad57600080fd5b506106f0600480360360208110156106c457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612e3d565b005b3480156106fe57600080fd5b50610707612e5c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561075557600080fd5b506108e560048036036101e081101561076d57600080fd5b81019080803560ff169060200190929190803590602001909291908035906020019092919080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f820116905080830192505050505050919291929080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f82011690508083019250505050505091929192908035906020019064010000000081111561082d57600080fd5b82018360208201111561083f57600080fd5b8035906020019184600183028401116401000000008311171561086157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190505050612e82565b005b6108ef61116c565b15156108fa57600080fd5b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156109c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f496e76616c69642061646472657373202d205a45524f5f41444452455353207081526020017f726f76696465640000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b81600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610a89576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4578656375746f7220616c7265616479206578697374732e000000000000000081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166108fc670de0b6b3a76400009081150290604051600060405180830381858888f19350505050158015610ad7573d6000803e3d6000fd5b506001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610b40610b3b611143565b61454f565b15610b9c57610b4d611143565b73ffffffffffffffffffffffffffffffffffffffff166108fc670de0b6b3a76400009081150290604051600060405180830381858888f19350505050158015610b9a573d6000803e3d6000fd5b505b7f8002cf25aa76b379f7f97c8fe71f2bb091370573ab719fd656612219aae890ba83604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1505050565b610c0c61116c565b1515610c1757600080fd5b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610ce3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f496e76616c69642061646472657373202d205a45524f5f41444452455353207081526020017f726f76696465640000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b81600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610da5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4578656375746f7220646f6573206e6f74206578697374732e0000000000000081525060200191505060405180910390fd5b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610e0d610e08611143565b61454f565b15610e6957610e1a611143565b73ffffffffffffffffffffffffffffffffffffffff166108fc670de0b6b3a76400009081150290604051600060405180830381858888f19350505050158015610e67573d6000803e3d6000fd5b505b7f67c86b0b9218d30f0d89e72b9aafcace5cd51e46f60fdf6f3323877952e21c4b83604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1505050565b60006002826040518082805190602001908083835b602083101515610f0b5780518252602082019150602081019050602083039250610ee6565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020549050919050565b610f4e61116c565b1515610f5957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600460205281600052604060002060205280600052604060002060009150915050806000015490806001015490806002015490806003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110e35780601f106110b8576101008083540402835291602001916110e3565b820191906000526020600020905b8154815290600101906020018083116110c657829003601f168201915b50505050509080600401549080600501549080600601549080600701549080600801549080600901549080600a01549080600b01549080600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508d565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b81336111cf828261457b565b1515611243576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f50756c6c205061796d656e7420646f6573206e6f74206578697374730000000081525060200191505060405180910390fd5b8333846000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015411806113de5750600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206008015442101580156113dd5750600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600901544210155b5b151561149e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260468152602001807f496e76616c69642070756c6c207061796d656e7420657865637574696f6e207281526020017f657175657374202d2054696d65206f6620657865637574696f6e20697320696e81526020017f76616c69642e000000000000000000000000000000000000000000000000000081525060600191505060405180910390fd5b6000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600701541115156115e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260448152602001807f496e76616c69642070756c6c207061796d656e7420657865637574696f6e207281526020017f657175657374202d204e756d626572206f66207061796d656e7473206973207a81526020017f65726f2e0000000000000000000000000000000000000000000000000000000081525060600191505060405180910390fd5b6000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600b0154148061176c5750600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060090154600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600b0154115b151561182c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260428152602001807f496e76616c69642070756c6c207061796d656e7420657865637574696f6e207281526020017f657175657374202d2050756c6c207061796d656e742069732063616e63656c6c81526020017f656400000000000000000000000000000000000000000000000000000000000081525060600191505060405180910390fd5b806040516020018082815260200191505060405160208183030381529060405280519060200120600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015460405160200180828152602001915050604051602081830303815290604052805190602001201415156119ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260418152602001807f496e76616c69642070756c6c207061796d656e7420657865637574696f6e207281526020017f657175657374202d205061796d656e74204944206e6f74206d61746368696e6781526020017f2e0000000000000000000000000000000000000000000000000000000000000081525060600191505060405180910390fd5b600080600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401541115611c6f57611be3600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bd95780601f10611bae57610100808354040283529160200191611bd9565b820191906000526020600020905b815481529060010190602001808311611bbc57829003601f168201915b50505050506148d2565b90506000600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018190555061209c565b611e0f600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e055780601f10611dda57610100808354040283529160200191611e05565b820191906000526020600020905b815481529060010190602001808311611de857829003601f168201915b50505050506148d2565b9050600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060154600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206009015401600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600901819055506001600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007015403600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600701819055505b42600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600a0181905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd89600460008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156122b857600080fd5b505af11580156122cc573d6000803e3d6000fd5b505050506040513d60208110156122e257600080fd5b8101908080519060200190929190505050507f53db5d4232a1bc69c50f6ec61f04d12088862438e96e2e22a33c245d6c791ebe88600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600460008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600460008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a15050505050505050565b60036020528060005260406000206000915054906101000a900460ff1681565b600061252061116c565b151561252b57600080fd5b816002846040518082805190602001908083835b602083101515612564578051825260208201915060208101905060208303925061253f565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055507f562518c881f0e264efac0b02067a166240e9d29261963f9ec8594ed2f70d2e4a83836040518080602001838152602001828103825284818151815260200191508051906020019080838360005b838110156126045780820151818401526020810190506125e9565b50505050905090810190601f1680156126315780820380516001836020036101000a031916815260200191505b50935050505060405180910390a161264f61264a611143565b61454f565b156126ab5761265c611143565b73ffffffffffffffffffffffffffffffffffffffff166108fc670de0b6b3a76400009081150290604051600060405180830381858888f193505050501580156126a9573d6000803e3d6000fd5b505b6001905092915050565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515612776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f6d73672e73656e646572206e6f7420616e206578656375746f7200000000000081525060200191505060405180910390fd5b8181612782828261457b565b15156127f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f50756c6c205061796d656e7420646f6573206e6f74206578697374730000000081525060200191505060405180910390fd5b83836000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600b01541415156128ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f50756c6c205061796d656e742069732063616e63656c6c65642e00000000000081525060200191505060405180910390fd5b868686600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156129bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a8152602001807f496e76616c69642064656c6574696f6e2072657175657374202d20436c69656e81526020017f742061646472657373206973205a45524f5f414444524553532e00000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612a88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603f8152602001807f496e76616c69642064656c6574696f6e2072657175657374202d2042656e656681526020017f6963696172792061646472657373206973205a45524f5f414444524553532e0081525060400191505060405180910390fd5b6000602060ff1614151515612b2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f496e76616c69642064656c6574696f6e2072657175657374202d205061796d6581526020017f6e7420494420697320656d7074792e000000000000000000000000000000000081525060400191505060405180910390fd5b612b398d8d8d8d8d8d614be9565b1515612bd3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f496e76616c69642064656c6574696f6e202d2045435245434f5645525f46414981526020017f4c45442e0000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b42600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600b0181905550612c603361454f565b15612cb5573373ffffffffffffffffffffffffffffffffffffffff166108fc670de0b6b3a76400009081150290604051600060405180830381858888f19350505050158015612cb3573d6000803e3d6000fd5b505b7fc85a0b1d6f3141384cf8132808219851926be1209fa52f30c8713b3f3c6da18c898b600460008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600460008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a150505050505050505050505050565b612e4561116c565b1515612e5057600080fd5b612e5981614dcb565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515612f43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f6d73672e73656e646572206e6f7420616e206578656375746f7200000000000081525060200191505060405180910390fd5b6000886000600381101515612f5457fe5b602002015150602060ff16111515612fd4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5061796d656e7420494420697320656d7074792e00000000000000000000000081525060200191505060405180910390fd5b6000886001600381101515612fe557fe5b602002015150602060ff16111515613065576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f427573696e65737320494420697320656d7074792e000000000000000000000081525060200191505060405180910390fd5b600088600260038110151561307657fe5b602002015150602060ff161115156130f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f556e69717565205265666572656e636520494420697320656d7074792e00000081525060200191505060405180910390fd5b6000865111151561316f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f43757272656e637920697320656d70747900000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1687600060038110151561319657fe5b602002015173ffffffffffffffffffffffffffffffffffffffff161415151561324d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f437573746f6d65722041646472657373206973205a45524f5f4144445245535381526020017f2e0000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1687600160038110151561327457fe5b602002015173ffffffffffffffffffffffffffffffffffffffff161415151561332b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f42656e65666963696172792041646472657373206973205a45524f5f4144445281526020017f4553532e0000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1687600260038110151561335257fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1614151515613409576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f54726561737572792041646472657373206973205a45524f5f4144445245535381526020017f2e0000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600084111515613481576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5061796d656e7420616d6f756e7420696e2066696174206973207a65726f2e0081525060200191505060405180910390fd5b6000831115156134f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f5061796d656e74206672657175656e6379206973207a65726f2e00000000000081525060200191505060405180910390fd5b68056bc75e2d631000008310151561359f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001807f5061796d656e74206672657175656e637920697320686967686572207468616e81526020017f7420746865206f766572666c6f77206c696d69742e000000000000000000000081525060400191505060405180910390fd5b60008211151561363d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f5061796d656e74206e756d626572206f66207061796d656e7473206973207a6581526020017f726f2e000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b68056bc75e2d63100000821015156136e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e8152602001807f5061796d656e74206e756d626572206f66207061796d656e747320697320686981526020017f67686572207468616e7420746865206f766572666c6f77206c696d69742e000081525060400191505060405180910390fd5b60008111151561375b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5061796d656e742073746172742074696d65206973207a65726f2e000000000081525060200191505060405180910390fd5b68056bc75e2d6310000081101515613801576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001807f5061796d656e742073746172742074696d65206973206869676865722074686181526020017f6e7420746865206f766572666c6f77206c696d69742e0000000000000000000081525060400191505060405180910390fd5b856004600089600060038110151561381557fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089600160038110151561386557fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030190805190602001906138ba929190615133565b5084600460008960006003811015156138cf57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089600160038110151561391f57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550836004600089600060038110151561397957fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008960016003811015156139c957fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501819055508260046000896000600381101515613a2357fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000896001600381101515613a7357fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601819055508060046000896000600381101515613acd57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000896001600381101515613b1d57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600801819055508160046000896000600381101515613b7757fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000896001600381101515613bc757fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070181905550876000600381101515613c1c57fe5b602002015160046000896000600381101515613c3457fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000896001600381101515613c8457fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550876001600381101515613cd957fe5b602002015160046000896000600381101515613cf157fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000896001600381101515613d4157fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550876002600381101515613d9657fe5b602002015160046000896000600381101515613dae57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000896001600381101515613dfe57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550866002600381101515613e5357fe5b602002015160046000896000600381101515613e6b57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000896001600381101515613ebb57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600c0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506141838b8b8b8a6000600381101515613f5057fe5b60200201518b6001600381101515613f6457fe5b6020020151600460008e6000600381101515613f7c57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e6001600381101515613fcc57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206101a06040519081016040529081600082015481526020016001820154815260200160028201548152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156140cf5780601f106140a4576101008083540402835291602001916140cf565b820191906000526020600020905b8154815290600101906020018083116140b257829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050614ec5565b151561421d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001807f496e76616c69642070756c6c207061796d656e7420726567697374726174696f81526020017f6e202d2045435245434f5645525f4641494c454400000000000000000000000081525060400191505060405180910390fd5b806004600089600060038110151561423157fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089600160038110151561428157fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600901819055506000600460008960006003811015156142dc57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089600160038110151561432c57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600a018190555060006004600089600060038110151561438757fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008960016003811015156143d757fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600b01819055506144263361454f565b1561447b573373ffffffffffffffffffffffffffffffffffffffff166108fc670de0b6b3a76400009081150290604051600060405180830381858888f19350505050158015614479573d6000803e3d6000fd5b505b7fc0028b6a3e328c438fb316cb08abd17e0f2132ef9c24f0404864f57e4488812d8760006003811015156144ab57fe5b60200201518960006003811015156144bf57fe5b60200201518a60016003811015156144d357fe5b60200201518b60026003811015156144e757fe5b6020020151604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a15050505050505050505050565b6000670214e8348c4f00008273ffffffffffffffffffffffffffffffffffffffff163111159050919050565b600080600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030180546001816001161561010002031660029004905011801561469e57506000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154115b801561472957506000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060154115b80156147b457506000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080154115b801561483f57506000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070154115b80156148ca57506000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060090154115b905092915050565b6000816000815114151515614975576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f496e76616c696420636f6e76657273696f6e2072617465202d2043757272656e81526020017f637920697320656d7074792e000000000000000000000000000000000000000081525060400191505060405180910390fd5b60006002826040518082805190602001908083835b6020831015156149af578051825260208201915060208101905060208303925061498a565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902054111515614a7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001807f496e76616c696420636f6e76657273696f6e2072617465202d204d757374206281526020017f6520686967686572207468616e207a65726f2e0000000000000000000000000081525060400191505060405180910390fd5b83600081111515614b1d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f496e76616c696420616d6f756e74202d204d757374206265206869676865722081526020017f7468616e207a65726f000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b614bdf6064614bd16002876040518082805190602001908083835b602083101515614b5d5780518252602082019150602081019050602083039250614b38565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902054614bc389614bb56402540be400670de0b6b3a76400006150cb90919063ffffffff16565b6150cb90919063ffffffff16565b61510990919063ffffffff16565b61510990919063ffffffff16565b9250505092915050565b60008273ffffffffffffffffffffffffffffffffffffffff1660018584604051602001808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401925050506040516020818303038152906040528051906020012089898960405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015614cc8573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff16148015614dbf5750836040516020018082815260200191505060405160208183030381529060405280519060200120600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546040516020018082815260200191505060405160208183030381529060405280519060200120145b90509695505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515614e0757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008373ffffffffffffffffffffffffffffffffffffffff16600184846000015185602001518660400151876101800151886060015189608001518a60a001518b60c001518c60e001518d6101000151604051602001808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018b81526020018a81526020018981526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140187805190602001908083835b602083101515614fe15780518252602082019150602081019050602083039250614fbc565b6001836020036101000a0380198251168184511680821785525050505050509050018681526020018581526020018481526020018381526020018281526020019b5050505050505050505050506040516020818303038152906040528051906020012089898960405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561509e573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff161490509695505050505050565b6000808314156150de5760009050615103565b600082840290508284828115156150f157fe5b041415156150fe57600080fd5b809150505b92915050565b6000808211151561511957600080fd5b6000828481151561512657fe5b0490508091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061517457805160ff19168380011785556151a2565b828001600101855582156151a2579182015b828111156151a1578251825591602001919060010190615186565b5b5090506151af91906151b3565b5090565b6151d591905b808211156151d15760008160009055506001016151b9565b5090565b9056fea165627a7a72305820aa90ddb0247f1bb96a0b0e5428c033212e845a0fed1cd70c5cb6c90ef519715a0029000000000000000000000000846c66cf71c43f80403b51fe3906b3599d63336f",
  "constructorArguments": "000000000000000000000000846c66cf71c43f80403b51fe3906b3599d63336f"
}