{
  "address": "0xe9808c7a95e9c50ddcc4339516c188ad5dacf88e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "JoycoinSale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-25\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n\ninterface IJoycoinToken  {\n\tfunction transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n\tfunction approve(address _spender, uint256 _value) external returns (bool);\n\tfunction allowance(address _owner, address _spender) external view returns (uint256);\n\tfunction balanceOf(address who) external view returns (uint256);\n\tfunction transfer(address to, uint256 value) external returns (bool);\n\tfunction burnUnsold() external returns (bool);\n}\n\n\ncontract JoycoinSale is Ownable {\n\tusing SafeMath for uint256;\n\n\tevent NewRound(uint256 round, uint256 at);\n\tevent Finish(uint256 at);\n\n\tuint256 constant round3Duration = 90 days;\n\tuint256 constant softCap = 140000000 * 10 ** 8; // $ 2.100.000\n\n\tIJoycoinToken public token;\n\n\tuint256 public round; // 1, 2 or 3. Rounds 1 and 3 are whitelisted. \n\tuint256 public round3StartAt;\n\tuint256 public tokensSold;\n\t\n\tbool isFinished;\n\tuint256 finishedAt;\n\n\tmapping(address => bool) public whiteListedWallets;\n\n\tconstructor(address _token) public {\n\t\trequire(_token != address(0));\n\t\ttoken = IJoycoinToken(_token);\n\t\tround = 1;\n\t\temit NewRound(1, now);\n\t}\n\n\tfunction addWalletToWhitelist(address _wallet) public onlyOwner returns (bool) {\n\t\twhiteListedWallets[_wallet] = true;\n\t\treturn true;\n\t}\n\n\tfunction removeWalletFromWhitelist(address _wallet) public onlyOwner returns (bool) {\n\t\twhiteListedWallets[_wallet] = false;\n\t\treturn true;\n\t}\n\n\tfunction addWalletsToWhitelist(address[] _wallets) public onlyOwner returns (bool) {\n\t\tuint256 i = 0;\n\t\twhile (i < _wallets.length) {\n\t\t\twhiteListedWallets[_wallets[i]] = true;\n\t\t\ti += 1;\n\t\t}\n\t\treturn true;\n\t}\n\n\tfunction removeWalletsFromWhitelist(address[] _wallets) public onlyOwner returns (bool) {\n\t\tuint256 i = 0;\n\t\twhile (i < _wallets.length) {\n\t\t\twhiteListedWallets[_wallets[i]] = false;\n\t\t\ti += 1;\n\t\t}\n\t\treturn true;\n\t}\n\n\tfunction finishSale() public onlyOwner returns (bool) {\n\t\trequire ( (round3StartAt > 0 && now > (round3StartAt + round3Duration)) || token.balanceOf(address(this)) == 0);\n\t\trequire (!isFinished);\n\t\trequire (tokensSold >= softCap);\n\t\tisFinished = true;\n\t\tfinishedAt = now;\n\t\tif (token.balanceOf(address(this)) > 0) {\n\t\t\ttoken.burnUnsold();\n\t\t}\n\t\temit Finish(now);\n\t\treturn true;\n\t}\n\n\tfunction getEndDate() public view returns (uint256) {\n\t\treturn finishedAt;\n\n\t}\n\n\tfunction setRound(uint256 _round) public onlyOwner returns (bool) {\n\t\trequire (_round == 2 || _round == 3);\n\t\trequire (_round == round + 1);\n\n\t\tround = _round;\n\t\tif (_round == 3) {\n\t\t\tround3StartAt = now;\n\t\t}\n\t\temit NewRound(_round, now);\n\t\treturn true;\n\t}\n\n\tfunction sendTokens(address[] _recipients, uint256[] _values) onlyOwner public returns (bool) {\n\t \trequire(_recipients.length == _values.length);\n\t \trequire(!isFinished);\n\t \tuint256 i = 0;\n\t \twhile (i < _recipients.length) {\n\t \t\tif (round == 1 || round == 3) {\n\t \t\t\trequire(whiteListedWallets[_recipients[i]]);\n\t \t\t}\n\n\t \t\tif (_values[i] > 0) {\n\t \t\t\ttoken.transfer(_recipients[i], _values[i]);\n\t \t\t\ttokensSold = tokensSold.add(_values[i]);\n\t \t\t}\n\n\t \t\ti += 1;\n\t \t}\n\t \treturn true;\n\t}\n\n\tfunction sendBonusTokens(address[] _recipients, uint256[] _values) onlyOwner public returns (bool) {\n\t \trequire(_recipients.length == _values.length);\n\t \trequire(!isFinished);\n\t \tuint256 i = 0;\n\t \twhile (i < _recipients.length) {\n\t \t\tif (round == 1 || round == 3) {\n\t \t\t\trequire(whiteListedWallets[_recipients[i]]);\n\t \t\t}\n\n\t \t\tif (_values[i] > 0) {\n\t \t\t\ttoken.transfer(_recipients[i], _values[i]);\n\t \t\t}\n\n\t \t\ti += 1;\n\t \t}\n\t \treturn true;\n\t}\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610e75833981016040819052905160008054600160a060020a03191633178082559192600160a060020a0392909216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3600160a060020a038116151561008157600080fd5b60018054600160a060020a031916600160a060020a03831617815560028190556040805191825242602083015280517f1237ad121dfe1e3abc3b4254161693eb4add51b458114b8c15502bea94a6b02b9281900390910190a150610d8b806100ea6000396000f3006080604052600436106100e25763ffffffff60e060020a600035041663146ca53181146100e75780632578dce61461010e5780633f0f42e214610123578063518ab2a8146101585780635c6242201461016d5780635ddb8a2e1461018e578063715018a61461021c5780638da5cb5b146102335780638f32d59b146102645780638f86f5ea146102795780639b624e7b1461028e578063b1356488146102a6578063be2863ab146102bb578063ce23772b14610310578063d5ad3cda14610331578063d8b66ae114610386578063f2fde38b14610414578063fc0c546a14610435575b600080fd5b3480156100f357600080fd5b506100fc61044a565b60408051918252519081900360200190f35b34801561011a57600080fd5b506100fc610450565b34801561012f57600080fd5b50610144600160a060020a0360043516610456565b604080519115158252519081900360200190f35b34801561016457600080fd5b506100fc610494565b34801561017957600080fd5b50610144600160a060020a036004351661049a565b34801561019a57600080fd5b506040805160206004803580820135838102808601850190965280855261014495369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506104af9650505050505050565b34801561022857600080fd5b50610231610641565b005b34801561023f57600080fd5b506102486106ab565b60408051600160a060020a039092168252519081900360200190f35b34801561027057600080fd5b506101446106ba565b34801561028557600080fd5b506101446106cb565b34801561029a57600080fd5b50610144600435610925565b3480156102b257600080fd5b506100fc6109ba565b3480156102c757600080fd5b5060408051602060048035808201358381028086018501909652808552610144953695939460249493850192918291850190849080828437509497506109c09650505050505050565b34801561031c57600080fd5b50610144600160a060020a0360043516610a3a565b34801561033d57600080fd5b506040805160206004803580820135838102808601850190965280855261014495369593946024949385019291829185019084908082843750949750610a749650505050505050565b34801561039257600080fd5b506040805160206004803580820135838102808601850190965280855261014495369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610ae59650505050505050565b34801561042057600080fd5b50610231600160a060020a0360043516610c9b565b34801561044157600080fd5b50610248610cba565b60025481565b60035481565b60006104606106ba565b151561046b57600080fd5b50600160a060020a03166000908152600760205260409020805460ff1916600190811790915590565b60045481565b60076020526000908152604090205460ff1681565b6000806104ba6106ba565b15156104c557600080fd5b82518451146104d357600080fd5b60055460ff16156104e357600080fd5b5060005b8351811015610637576002546001148061050357506002546003145b1561054b5760076000858381518110151561051a57fe5b6020908102909101810151600160a060020a031682528101919091526040016000205460ff16151561054b57600080fd5b6000838281518110151561055b57fe5b90602001906020020151111561062f576001548451600160a060020a039091169063a9059cbb9086908490811061058e57fe5b9060200190602002015185848151811015156105a657fe5b906020019060200201516040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561060257600080fd5b505af1158015610616573d6000803e3d6000fd5b505050506040513d602081101561062c57600080fd5b50505b6001016104e7565b5060019392505050565b6106496106ba565b151561065457600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031690565b600054600160a060020a0316331490565b60006106d56106ba565b15156106e057600080fd5b60006003541180156106f857506276a7006003540142115b806107925750600154604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b15801561076457600080fd5b505af1158015610778573d6000803e3d6000fd5b505050506040513d602081101561078e57600080fd5b5051155b151561079d57600080fd5b60055460ff16156107ad57600080fd5b6004546631bced02db000011156107c357600080fd5b6005805460ff191660019081179091554260065554604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600092600160a060020a0316916370a0823191602480830192602092919082900301818787803b15801561083a57600080fd5b505af115801561084e573d6000803e3d6000fd5b505050506040513d602081101561086457600080fd5b505111156108ec57600160009054906101000a9004600160a060020a0316600160a060020a031663b52a58516040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156108bf57600080fd5b505af11580156108d3573d6000803e3d6000fd5b505050506040513d60208110156108e957600080fd5b50505b6040805142815290517fd5472786e74e36fb8d8be85c44b0c9e4ba9f9c6d37e44b07e7e79812569376cf9181900360200190a150600190565b600061092f6106ba565b151561093a57600080fd5b81600214806109495750816003145b151561095457600080fd5b600254600101821461096557600080fd5b6002829055600382141561097857426003555b6040805183815242602082015281517f1237ad121dfe1e3abc3b4254161693eb4add51b458114b8c15502bea94a6b02b929181900390910190a1506001919050565b60065490565b6000806109cb6106ba565b15156109d657600080fd5b5060005b8251811015610a315760016007600085848151811015156109f757fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff19169115159190911790556001016109da565b50600192915050565b6000610a446106ba565b1515610a4f57600080fd5b50600160a060020a03166000908152600760205260409020805460ff19169055600190565b600080610a7f6106ba565b1515610a8a57600080fd5b5060005b8251811015610a31576000600760008584815181101515610aab57fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff1916911515919091179055600101610a8e565b600080610af06106ba565b1515610afb57600080fd5b8251845114610b0957600080fd5b60055460ff1615610b1957600080fd5b5060005b83518110156106375760025460011480610b3957506002546003145b15610b8157600760008583815181101515610b5057fe5b6020908102909101810151600160a060020a031682528101919091526040016000205460ff161515610b8157600080fd5b60008382815181101515610b9157fe5b906020019060200201511115610c93576001548451600160a060020a039091169063a9059cbb90869084908110610bc457fe5b906020019060200201518584815181101515610bdc57fe5b906020019060200201516040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610c3857600080fd5b505af1158015610c4c573d6000803e3d6000fd5b505050506040513d6020811015610c6257600080fd5b50508251610c8f90849083908110610c7657fe5b602090810290910101516004549063ffffffff610cc916565b6004555b600101610b1d565b610ca36106ba565b1515610cae57600080fd5b610cb781610ce2565b50565b600154600160a060020a031681565b600082820183811015610cdb57600080fd5b9392505050565b600160a060020a0381161515610cf757600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058206d4125531d320ccdacaf7cdc8b00a996ef69ff41ea21409e7d538fb5003fc11d002900000000000000000000000094195826ff3fd6ec11513c5d61d3931e653f1505",
  "constructorArguments": "00000000000000000000000094195826ff3fd6ec11513c5d61d3931e653f1505"
}