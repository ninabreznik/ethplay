{
  "address": "0x2368056f36035d01e7c2aa2a15b87e47cc9d2d23",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GSDToken",
  "compilerVersion": "v0.4.21-nightly.2018.3.1+commit.cf6720ea",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-06\n*/\n\npragma solidity ^0.4.8;\n\n/* Getseeds Token (GSD) source code. */\n  \n contract GSDToken {\n     \n    // Get the total token supply\n  \n    // Triggered when tokens are transferred.\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  \n    // Triggered whenever approve(address _spender, uint256 _value) is called.\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    /* This notifies clients about the XBL amount burned */\n    event Burn(address indexed from, uint256 value);\n    \n    // And we begin:\n    string public constant symbol = \"GSD\";\n    string public constant name = \"Getseeds Token\";\n    uint8 public constant decimals = 18;\n    uint256 _totalSupply = 100000000000000000000000000000;    // 100,000,000,000 tokens with 18 decimal places.\n    uint256 _totalBurned = 0;                            // Total burned initially starts at 0.\n     \n    /* The owner of this contract (initial address) */\n    address public owner;\n  \n    /* Dictionary containing balances for each account */\n    mapping(address => uint256) balances;\n  \n    /* Owner of account can approve (allow) the transfer of an amount to another account */\n    mapping(address => mapping (address => uint256)) allowed;\n  \n     // Functions with this modifier can only be executed by the owner\n    modifier onlyOwner() \n     {\n         if (msg.sender != owner) \n         {\n             throw;\n         }\n         _;\n     }\n  \n     // Constructor:\n     function GSDToken() \n     {\n        owner = msg.sender;\n        balances[owner] = _totalSupply;\n     }\n  \n     function totalSupply() constant returns (uint256 l_totalSupply) \n     {\n        l_totalSupply = _totalSupply;\n     }\n\n     function totalBurned() constant returns (uint256 l_totalBurned)\n     {\n        l_totalBurned = _totalBurned;\n     }\n  \n     /* What is the balance of a particular account? */\n     function balanceOf(address _owner) constant returns (uint256 balance) \n     {\n        return balances[_owner];\n     }\n  \n     /* Transfer the balance from owner's account to another account. */\n     function transfer(address _to, uint256 _amount) returns (bool success) \n     {\n        if (_to == 0x0) throw;      /* Prevents transferring to 0x0 addresses. Use burn() instead. */\n\n        if (balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) \n        {\n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(msg.sender, _to, _amount);\n            return true;\n         } \n         else \n         {\n            return false;\n         }\n     }\n  \n     // Send _value amount of tokens from address _from to address _to\n     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n     // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n     // fees in sub-currencies; the command should fail unless the _from account has\n     // deliberately authorized the sender of the message via some mechanism; we propose\n     // these standardized APIs for approval:\n     function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) \n     {\n        if (_to == 0x0) throw;      /* Prevents transferring to 0x0 addresses. Use burn() instead. */\n\n        if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) \n        {\n            balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(_from, _to, _amount);\n            return true;\n         } \n         else \n         {\n            return false;\n         }\n     }\n  \n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n     // If this function is called again it overwrites the current allowance with _value.\n     function approve(address _spender, uint256 _amount) returns (bool success) \n     {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n     }\n  \n     /* Is the _spender allowed to spend on the behalf of the _owner? */ \n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) \n     {\n        return allowed[_owner][_spender];\n     }\n\n    function burn(uint256 _value) returns (bool success) \n    {\n        if (balances[msg.sender] < _value) throw;            // Check if the sender has enough\n        balances[msg.sender] -= _value;                      // Subtract from the sender\n        /* Updating indicator variables */\n        _totalSupply -= _value;          \n        _totalBurned += _value;                             \n        /* Send the event notification */\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) returns (bool success) \n    {\n        if (balances[_from] < _value) throw;                // Check if the sender has enough\n        if (_value > allowed[_from][msg.sender]) throw;     // Check allowance\n        balances[_from] -= _value;                          // Subtract from the sender\n        /* Updating indicator variables */\n        _totalSupply -= _value;                           \n        _totalBurned += _value;\n        /* Send the event notification */\n        Burn(_from, _value);\n        return true;\n    }\n }",
  "bytecode": "60606040526c01431e0fae6d7217caa00000006000556000600155341561002557600080fd5b60028054600160a060020a03338116600160a060020a0319909216919091179182905560008054929091168152600360205260409020556107c68061006b6000396000f3006060604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100c9578063095ea7b31461015357806318160ddd1461018957806323b872dd146101ae578063313ce567146101d657806342966c68146101ff57806370a082311461021557806379cc6790146102345780638da5cb5b1461025657806395d89b4114610285578063a9059cbb14610298578063d89135cd146102ba578063dd62ed3e146102cd575b600080fd5b34156100d457600080fd5b6100dc6102f2565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610118578082015183820152602001610100565b50505050905090810190601f1680156101455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015e57600080fd5b610175600160a060020a0360043516602435610329565b604051901515815260200160405180910390f35b341561019457600080fd5b61019c610396565b60405190815260200160405180910390f35b34156101b957600080fd5b610175600160a060020a036004358116906024351660443561039c565b34156101e157600080fd5b6101e96104ce565b60405160ff909116815260200160405180910390f35b341561020a57600080fd5b6101756004356104d3565b341561022057600080fd5b61019c600160a060020a0360043516610564565b341561023f57600080fd5b610175600160a060020a036004351660243561057f565b341561026157600080fd5b610269610644565b604051600160a060020a03909116815260200160405180910390f35b341561029057600080fd5b6100dc610653565b34156102a357600080fd5b610175600160a060020a036004351660243561068a565b34156102c557600080fd5b61019c610769565b34156102d857600080fd5b61019c600160a060020a036004358116906024351661076f565b60408051908101604052600e81527f476574736565647320546f6b656e000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260046020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005490565b6000600160a060020a03831615156103b357600080fd5b600160a060020a0384166000908152600360205260409020548290108015906104035750600160a060020a0380851660009081526004602090815260408083203390941683529290522054829010155b801561040f5750600082115b80156104345750600160a060020a038316600090815260036020526040902054828101115b156104c357600160a060020a0380851660008181526003602081815260408084208054899003905560048252808420338716855282528084208054899003905594881680845291905290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060016104c7565b5060005b9392505050565b601281565b600160a060020a033316600090815260036020526040812054829010156104f957600080fd5b600160a060020a03331660008181526003602052604080822080548690039055815485900390915560018054850190557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a2506001919050565b600160a060020a031660009081526003602052604090205490565b600160a060020a038216600090815260036020526040812054829010156105a557600080fd5b600160a060020a03808416600090815260046020908152604080832033909416835292905220548211156105d857600080fd5b600160a060020a03831660008181526003602052604080822080548690039055815485900390915560018054850190557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a250600192915050565b600254600160a060020a031681565b60408051908101604052600381527f4753440000000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a03831615156106a157600080fd5b600160a060020a0333166000908152600360205260409020548290108015906106ca5750600082115b80156106ef5750600160a060020a038316600090815260036020526040902054828101115b1561076157600160a060020a033381166000818152600360205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3506001610390565b506000610390565b60015490565b600160a060020a039182166000908152600460209081526040808320939094168252919091522054905600a165627a7a72305820ee6d1a742fe654ea44466ea19b49a3a49b9bf97003eb51bea30d8bfa11bfd9b10029"
}