{
  "address": "0x20e569eca4737c4b12be2e5dcdbfdf0d829ba1c8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ldoh",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-07\n*/\n\npragma solidity ^0.4.25;\n\n/**\n\n\n\t\t\t\t\t.----------------.  .----------------.  .----------------.  .----------------. \n\t\t\t\t\t| .--------------. || .--------------. || .--------------. || .--------------. |\n\t\t\t\t\t| |  ____  ____  | || |     ____     | || |   _____      | || |  ________    | |\n\t\t\t\t\t| | |_   ||   _| | || |   .'    `.   | || |  |_   _|     | || | |_   ___ `.  | |\n\t\t\t\t\t| |   | |__| |   | || |  /  .--.  \\  | || |    | |       | || |   | |   `. \\ | |\n\t\t\t\t\t| |   |  __  |   | || |  | |    | |  | || |    | |   _   | || |   | |    | | | |\n\t\t\t\t\t| |  _| |  | |_  | || |  \\  `--'  /  | || |   _| |__/ |  | || |  _| |___.' / | |\n\t\t\t\t\t| | |____||____| | || |   `.____.'   | || |  |________|  | || | |________.'  | |\n\t\t\t\t\t| |              | || |              | || |              | || |              | |\n\t\t\t\t\t| '--------------' || '--------------' || '--------------' || '--------------' |\n\t\t\t\t\t'----------------'  '----------------'  '----------------'  '----------------' \n\n \n*/\n\n\t/*==============================\n    =          Version 7.0         =\n    ==============================*/\n\t\ncontract EthereumSmartContract {    \n    address EthereumNodes; \n\t\n    constructor() public { \n        EthereumNodes = msg.sender;\n    }\n    modifier restricted() {\n        require(msg.sender == EthereumNodes);\n        _;\n    } \n\t\n    function GetEthereumNodes() public view returns (address owner) { return EthereumNodes; }\n}\n\ncontract ldoh is EthereumSmartContract {\n\t\n\t/*==============================\n    =            EVENTS            =\n    ==============================*/\n\t\n\tevent onCashbackCode\t(address indexed hodler, address cashbackcode);\t\t\n\tevent onAffiliateBonus\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\t\n\tevent onClaimTokens\t\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\t\tevent onHodlTokens\t\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\n\tevent onClaimCashBack\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\n\t\n\tevent onAddContractAddress(\n\t\t  address indexed contracthodler,\n\t\t  bool \t\tcontractstatus,\n\t      uint256 \t_maxcontribution,\n\t\t  string \t_ContractSymbol,\n\t\t  uint256 \t_PercentPermonth, \n\t\t  uint256 \t_HodlingTime\t  \n\t\t);\t\n\t\t\t\n\tevent onUnlockedTokens(uint256 returned);\t\t\n\t\n\t/*==============================\n    =          VARIABLES           =\n    ==============================*/   \n\n\taddress public DefaultToken;\n\n\t//-------o Affiliate = 12% o-------o Cashback = 16% o-------o Total Receive = 88% o-------o Without Cashback = 72% o-------o\t\n\t\n\t// Struct Database\n\n    struct Safe {\n        uint256 id;\t\t\t\t\t\t// 01 -- > Registration Number\n        uint256 amount;\t\t\t\t\t// 02 -- > Total amount of contribution to this transaction\n        uint256 endtime;\t\t\t\t// 03 -- > The Expiration Of A Hold Platform Based On Unix Time\n        address user;\t\t\t\t\t// 04 -- > The ETH address that you are using\n        address tokenAddress;\t\t\t// 05 -- > The Token Contract Address That You Are Using\n\t\tstring  tokenSymbol;\t\t\t// 06 -- > The Token Symbol That You Are Using\n\t\tuint256 amountbalance; \t\t\t// 07 -- > 88% from Contribution / 72% Without Cashback\n\t\tuint256 cashbackbalance; \t\t// 08 -- > 16% from Contribution / 0% Without Cashback\n\t\tuint256 lasttime; \t\t\t\t// 09 -- > The Last Time You Withdraw Based On Unix Time\n\t\tuint256 percentage; \t\t\t// 10 -- > The percentage of tokens that are unlocked every month ( Default = 3% )\n\t\tuint256 percentagereceive; \t\t// 11 -- > The Percentage You Have Received\n\t\tuint256 tokenreceive; \t\t\t// 12 -- > The Number Of Tokens You Have Received\n\t\tuint256 lastwithdraw; \t\t\t// 13 -- > The Last Amount You Withdraw\n\t\taddress referrer; \t\t\t\t// 14 -- > Your ETH referrer address\n\t\tbool \tcashbackstatus; \t\t// 15 -- > Cashback Status\n    }\n\t\n\t\t// Uint256\n\t\t\n\tuint256 private _currentIndex; \t\t\t\t\t\t\t\t\t// 01 -- > ID number ( Start from 500 )\t\t\t\t//IDNumber\n\tuint256 public  _countSafes; \t\t\t\t\t\t\t\t\t// 02 -- > Total Smart Contract User\t\t\t\t//TotalUser\n\t\n\t\t// Mapping\n\t\t\n\tmapping(address => bool) \t\t\tpublic contractaddress; \t// 01 -- > Contract Address \n\tmapping(address => uint256) \t\tpublic percent; \t\t\t// 02 -- > Monthly Unlock Percentage (Default 3%)\n\tmapping(address => uint256) \t\tpublic hodlingTime; \t\t// 03 -- > Length of hold time in seconds\t\n\tmapping(address => address) \t\tpublic cashbackcode; \t\t// 04 -- > Cashback Code \t\t\t\t\t\t\t\n\tmapping(address => uint256) \t\tpublic _totalSaved; \t\t// 05 -- > Token Balance\t\t\t\t//TokenBalance\t\t\n\tmapping(address => uint256[]) \t\tpublic _userSafes;\t\t\t// 06 -- > Search ID by Address \t\t//IDAddress\n\tmapping(address => uint256) \t\tprivate EthereumVault;    \t// 07 -- > Reserve Funds\t\t\t\t\n\tmapping(uint256 => Safe) \t\t\tprivate _safes; \t\t\t// 08 -- > Struct safe database\t\t\t\n\tmapping(address => uint256) \t\tpublic maxcontribution; \t// 09 -- > Maximum Contribution\t\t\t\t\t//N\t\t\t\t\n\tmapping(address => uint256) \t\tpublic AllContribution; \t// 10 -- > Deposit amount for all members\t\t//N\t\n\tmapping(address => uint256) \t\tpublic AllPayments; \t\t// 11 -- > Withdraw amount for all members\t\t//N\n\tmapping(address => string) \t\t\tpublic ContractSymbol; \t\t// 12 -- > Contract Address Symbol\t\t\t\t//N\n\tmapping(address => address[]) \t\tpublic afflist;\t\t\t\t// 13 -- > Affiliate List by ID\t\t\t\t\t//N\n\tmapping(address => uint256) \t\tpublic tokenpriceUSD; \t\t// 14 -- > Token Price ( USD )\t\t\t\t\t//N\n\n\tmapping (address => mapping (address => uint256)) public LifetimeContribution;\t// 01 -- > Total Deposit Amount Based On Address & Token  //N\n\tmapping (address => mapping (address => uint256)) public LifetimePayments;\t\t// 02 -- > Total Withdraw Amount Based On Address & Token //N\t\n\tmapping (address => mapping (address => uint256)) public Affiliatevault;\t\t// 03 -- > Affiliate Balance That Hasn't Been Withdrawn\t  //N\n\tmapping (address => mapping (address => uint256)) public Affiliateprofit;\t\t// 04 -- > The Amount Of Profit As An Affiliate\t\t\t  //N\n\tmapping (address => mapping (address => uint256)) public ActiveContribution;\t// 05 -- > Total Active Amount Based On Address & Token  //N\n\t\n\t/*==============================\n    =          CONSTRUCTOR         =\n    ==============================*/  \t\n   \n    constructor() public {     \t \t\n        _currentIndex \t= 500;\n    }\n    \n\t\n\t/*==============================\n    =    AVAILABLE FOR EVERYONE    =\n    ==============================*/  \n\n//-------o Function 01 - Ethereum Payable\n\n    function () public payable {    \n        if (msg.value > 0 ) { EthereumVault[0x0] = add(EthereumVault[0x0], msg.value);}\t\t \n    }\n\t\n\t\n//-------o Function 02 - Cashback Code\n\n    function CashbackCode(address _cashbackcode) public {\t\t\n\t\trequire(_cashbackcode != msg.sender);\t\t\n\t\tif (cashbackcode[msg.sender] == 0) { cashbackcode[msg.sender] = _cashbackcode; emit onCashbackCode(msg.sender, _cashbackcode);}\t\t             \n    } \n\t\n//-------o Function 03 - Contribute \n\n\t//--o 01\n    function HodlTokens(address tokenAddress, uint256 amount) public {\n        require(tokenAddress != 0x0);\n\t\trequire(amount > 0 && add(ActiveContribution[msg.sender][tokenAddress], amount) <= maxcontribution[tokenAddress] );\n\t\t\n\t\tif (contractaddress[tokenAddress] == false) { revert(); } else { \t\t\n\t\tERC20Interface token \t\t\t= ERC20Interface(tokenAddress);       \n        require(token.transferFrom(msg.sender, address(this), amount));\t\n\t\t\n\t\tHodlTokens2(tokenAddress, amount);}\t\t\t\t\t\t\t\n\t}\n\t//--o 02\t\n    function HodlTokens2(address ERC, uint256 amount) private {\n\t\t\n\t\tuint256 AvailableBalances \t\t\t\t\t= div(mul(amount, 72), 100);\t\n\t\t\n\t\tif (cashbackcode[msg.sender] == 0 ) { //--o  Hold without cashback code\n\t\t\n\t\t\taddress ref\t\t\t\t\t\t\t\t= EthereumNodes;\n\t\t\tcashbackcode[msg.sender] \t\t\t\t= EthereumNodes;\n\t\t\tuint256 AvailableCashback \t\t\t\t= 0; \t\t\t\n\t\t\tuint256 zerocashback \t\t\t\t\t= div(mul(amount, 28), 100); \n\t\t\tEthereumVault[ERC] \t\t\t\t\t\t= add(EthereumVault[ERC], zerocashback);\n\t\t\tAffiliateprofit[EthereumNodes][ERC] \t= add(Affiliateprofit[EthereumNodes][ERC], zerocashback); \t\t\n\t\t\t\n\t\t\temit onCashbackCode(msg.sender, EthereumNodes);\n\t\t\t\n\t\t} else { \t//--o  Cashback code has been activated\n\t\t\n\t\t\tref\t\t\t\t\t\t\t\t\t\t= cashbackcode[msg.sender];\n\t\t\tuint256 affcomission \t\t\t\t\t= div(mul(amount, 12), 100); \t\n\t\t\tAvailableCashback \t\t\t\t\t\t= div(mul(amount, 16), 100);\t\t\t\n\t\t\tuint256 ReferrerContribution \t\t\t= ActiveContribution[ref][ERC];\t\t\n\t\t\tuint256 ReferralContribution\t\t\t= add(ActiveContribution[msg.sender][ERC], amount);\n\t\t\t\n\t\t\tif (ReferrerContribution >= ReferralContribution) { //--o  if referrer contribution >= referral contribution\n\t\t\n\t\t\t\tAffiliatevault[ref][ERC] \t\t\t= add(Affiliatevault[ref][ERC], affcomission); \n\t\t\t\tAffiliateprofit[ref][ERC] \t\t\t= add(Affiliateprofit[ref][ERC], affcomission); \t\n\t\t\t\t\n\t\t\t} else {\t\t\t\t\t\t\t\t\t\t\t//--o  if referral contribution > referrer contribution\n\t\t\t\n\t\t\t\tuint256 Newbie \t\t\t\t\t\t= div(mul(ReferrerContribution, 12), 100); \t\t\t\n\t\t\t\tAffiliatevault[ref][ERC] \t\t\t= add(Affiliatevault[ref][ERC], Newbie); \n\t\t\t\tAffiliateprofit[ref][ERC] \t\t\t= add(Affiliateprofit[ref][ERC], Newbie); \n\t\t\t\t\n\t\t\t\tuint256 NodeFunds \t\t\t\t\t= sub(affcomission, Newbie);\t\n\t\t\t\tEthereumVault[ERC] \t\t\t\t\t= add(EthereumVault[ERC], NodeFunds);\n\t\t\t\tAffiliateprofit[EthereumNodes][ERC] = add(Affiliateprofit[EthereumNodes][ERC], Newbie); \t\t\t\t\n\t\t\t}\n\t\t} \n\n\t\tHodlTokens3(ERC, amount, AvailableBalances, AvailableCashback, ref); \t\n\t}\n\t//--o 03\t\n    function HodlTokens3(address ERC, uint256 amount, uint256 AvailableBalances, uint256 AvailableCashback, address ref) private {\n\t\t\n\t\tERC20Interface token \t= ERC20Interface(ERC);\t\t\t\n\t\tuint256 TokenPercent \t= percent[ERC];\t\n\t\tuint256 TokenHodlTime \t= hodlingTime[ERC];\t\n\t\tuint256 HodlTime\t\t= add(now, TokenHodlTime);\n\t\t\n\t\tuint256 AM = amount; \tuint256 AB = AvailableBalances;\t\tuint256 AC = AvailableCashback;\t\n\t\tamount \t= 0; AvailableBalances = 0; AvailableCashback = 0;\n\t\t\n\t\t_safes[_currentIndex] = Safe(_currentIndex, AM, HodlTime, msg.sender, ERC, token.symbol(), AB, AC, now, TokenPercent, 0, 0, 0, ref, false);\t\n\t\t\t\t\n\t\tLifetimeContribution[msg.sender][ERC] \t= add(LifetimeContribution[msg.sender][ERC], AM); \n\t\tActiveContribution[msg.sender][ERC] \t= add(ActiveContribution[msg.sender][ERC], AM); \t\t\t\n\t\tAllContribution[ERC] \t\t\t\t\t= add(AllContribution[ERC], AM);   \t\n        _totalSaved[ERC] \t\t\t\t\t\t= add(_totalSaved[ERC], AM);    \n\t\t\n\t\tafflist[ref].push(msg.sender); _userSafes[msg.sender].push(_currentIndex); _currentIndex++; _countSafes++;       \n        emit onHodlTokens(msg.sender, ERC, token.symbol(), AM, HodlTime);\t\n\t}\n\t\n//-------o Function 05 - Recontribute\n\n    function Recontribute(address tokenAddress, uint256 id) public {\n        require(tokenAddress != 0x0);\n        require(id != 0);        \n        \n        Safe storage s = _safes[id];\n        require(s.user == msg.sender);  \n\t\t\n\t\tif (s.cashbackbalance == 0) { revert(); } else {\t\n\t\t\n\t\t\tuint256 amount\t\t\t\t= s.cashbackbalance;\n\t\t\ts.cashbackbalance \t\t\t= 0;\n\t\t\tHodlTokens2(tokenAddress, amount); \n\t\t}\n    }\n\t\n//-------o Function 06 - Claim Cashback\n\n\tfunction ClaimCashback(address tokenAddress, uint256 id) public {\n        require(tokenAddress != 0x0);\n        require(id != 0);        \n        \n        Safe storage s = _safes[id];\n        require(s.user == msg.sender);  \n\t\t\n\t\tif (s.cashbackbalance == 0) { revert(); } else {\n\t\t\t\n\t\t\tuint256 realAmount\t\t\t\t= s.cashbackbalance;\t\n\t\t\taddress eventTokenAddress \t\t= s.tokenAddress;\n\t\t\tstring memory eventTokenSymbol \t= s.tokenSymbol;\t\n\t\t\t\n\t\t\ts.cashbackbalance \t\t\t\t= 0;\n\t\t\ts.cashbackstatus \t\t\t\t= true;\t\t\t\n\t\t\tPayToken(s.user, s.tokenAddress, realAmount);           \t\t\n\t\t\t\n\t\t\temit onClaimCashBack(msg.sender, eventTokenAddress, eventTokenSymbol, realAmount, now);\n\t\t}\n    }\n\t\n\t\n//-------o Function 07 - Claim Token That Has Been Unlocked\n    function ClaimTokens(address tokenAddress, uint256 id) public {\n        require(tokenAddress != 0x0);\n        require(id != 0);        \n        \n        Safe storage s = _safes[id];\n        require(s.user == msg.sender);  \n\t\trequire(s.tokenAddress == tokenAddress);\n\t\t\n\t\tif (s.amountbalance == 0) { revert(); } else { UnlockToken1(tokenAddress, id); }\n    }\n    //--o 01\n    function UnlockToken1(address ERC, uint256 id) private {\n        Safe storage s = _safes[id];      \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\n\n        uint256 eventAmount\t\t\t\t= s.amountbalance;\n        address eventTokenAddress \t\t= s.tokenAddress;\n        string memory eventTokenSymbol \t= s.tokenSymbol;\t\t\n\t\t     \n        if(s.endtime < now){ //--o  Hold Complete\n        \n\t\tuint256 amounttransfer \t\t= add(s.amountbalance, s.cashbackbalance);      \n\t\ts.lastwithdraw \t\t\t\t= s.amountbalance;   s.amountbalance = 0;   s.lasttime = now;  \t\t\n\t\tPayToken(s.user, s.tokenAddress, amounttransfer); \n\t\t\n\t\t    if(s.cashbackbalance > 0 && s.cashbackstatus == false || s.cashbackstatus == true) {\n            s.tokenreceive \t= div(mul(s.amount, 88), 100) ; \ts.percentagereceive = mul(1000000000000000000, 88);\n            }\n\t\t\telse {\n\t\t\ts.tokenreceive \t= div(mul(s.amount, 72), 100) ;     s.percentagereceive = mul(1000000000000000000, 72);\n\t\t\t}\n\t\t\t\n\t\ts.cashbackbalance = 0;\t\n\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n\t\t\n        } else { UnlockToken2(ERC, s.id); }\n        \n    }   \n\t//--o 02\n\tfunction UnlockToken2(address ERC, uint256 id) private {\t\t\n\t\tSafe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\t\t\n\t\t\t\n\t\tuint256 timeframe  \t\t\t= sub(now, s.lasttime);\t\t\t                            \n\t\tuint256 CalculateWithdraw \t= div(mul(div(mul(s.amount, s.percentage), 100), timeframe), 2592000); // 2592000 = seconds30days\n\t\t\t\t\t\t\t//--o   = s.amount * s.percentage / 100 * timeframe / seconds30days\t;\n\t\t                         \n\t\tuint256 MaxWithdraw \t\t= div(s.amount, 10);\n\t\t\t\n\t\t//--o Maximum withdraw before unlocked, Max 10% Accumulation\n\t\t\tif (CalculateWithdraw > MaxWithdraw) { uint256 MaxAccumulation = MaxWithdraw; } else { MaxAccumulation = CalculateWithdraw; }\n\t\t\t\n\t\t//--o Maximum withdraw = User Amount Balance   \n\t\t\tif (MaxAccumulation > s.amountbalance) { uint256 realAmount = s.amountbalance; } else { realAmount = MaxAccumulation; }\n\t\t\t\n\t\t \t\t\t\n\t\tuint256 newamountbalance \t= sub(s.amountbalance, realAmount);\n\t\ts.amountbalance \t\t\t= newamountbalance;\n\t\ts.lastwithdraw \t\t\t\t= realAmount; \n\t\ts.lasttime \t\t\t\t\t= now; \t\t\n\t\t\t\n\t\tUnlockToken3(ERC, id, newamountbalance, realAmount);\t\t\n    }   \n\t//--o 03\n    function UnlockToken3(address ERC, uint256 id, uint256 newamountbalance, uint256 realAmount) private {\n        Safe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\n\n        uint256 eventAmount\t\t\t\t= realAmount;\n        address eventTokenAddress \t\t= s.tokenAddress;\n        string memory eventTokenSymbol \t= s.tokenSymbol;\t\t\n\n\t\tuint256 tokenaffiliate \t\t= div(mul(s.amount, 12), 100) ; \n\t\tuint256 maxcashback \t\t= div(mul(s.amount, 16), 100) ; \t\n\t\t\n\t\t\tif (cashbackcode[msg.sender] == EthereumNodes || s.cashbackbalance > 0  ) {\n\t\t\tuint256 tokenreceived \t= sub(sub(sub(s.amount, tokenaffiliate), maxcashback), newamountbalance) ;\t\n\t\t\t}else { tokenreceived \t= sub(sub(s.amount, tokenaffiliate), newamountbalance) ;}\n\t\t\t\n\t\tuint256 percentagereceived \t= div(mul(tokenreceived, 100000000000000000000), s.amount) ; \t\n\t\t\n\t\ts.tokenreceive \t\t\t\t\t= tokenreceived; \n\t\ts.percentagereceive \t\t\t= percentagereceived; \t\t\n\n\t\tPayToken(s.user, s.tokenAddress, realAmount);           \t\t\n\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n    } \n\t//--o Pay Token\n    function PayToken(address user, address tokenAddress, uint256 amount) private {\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n\t\t\n\t\t_totalSaved[tokenAddress] \t\t\t\t\t= sub(_totalSaved[tokenAddress], amount); \n\t\tAllPayments[tokenAddress] \t\t\t\t\t= add(AllPayments[tokenAddress], amount);\n\t\tLifetimePayments[msg.sender][tokenAddress] \t= add(LifetimePayments[user][tokenAddress], amount); \n    }   \t\n\t\n//-------o Function 08 - Get How Many Contribute ?\n\n    function GetUserSafesLength(address hodler) public view returns (uint256 length) {\n        return _userSafes[hodler].length;\n    }\n\t\n//-------o Function 09 - Get How Many Affiliate ?\n\n    function GetTotalAffiliate(address hodler) public view returns (uint256 length) {\n        return afflist[hodler].length;\n    }\n    \n//-------o Function 10 - Get complete data from each user\n\tfunction GetSafe(uint256 _id) public view\n        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 endtime, string tokenSymbol, uint256 amountbalance, uint256 lasttime, uint256 percentage, uint256 percentagereceive, uint256 tokenreceive, address referrer)\n    {\n        Safe storage s = _safes[_id];\n        return(s.id, s.user, s.tokenAddress, s.amount, s.endtime, s.tokenSymbol, s.amountbalance, s.lasttime, s.percentage, s.percentagereceive, s.tokenreceive, s.referrer);\n    }\n\t\n//-------o Function 11 - Get Tokens Reserved For Ethereum Vault\n\n    function GetTokenReserve(address tokenAddress) public view returns (uint256 amount) {\n        return EthereumVault[tokenAddress];\n    }    \n\t\n//-------o Function 12 - Get Ethereum Contract's Balance  \n\n    function GetContractBalance() public view returns(uint256)\n    {\n        return address(this).balance;\n    } \t\n\t\n//-------o Function 13 - Withdraw Affiliate Bonus\n\n    function WithdrawAffiliate(address user, address tokenAddress) public {  \n\t\trequire(tokenAddress != 0x0);\t\t\n\t\trequire(Affiliatevault[user][tokenAddress] > 0 );\n\t\t\n\t\tuint256 amount = Affiliatevault[msg.sender][tokenAddress];\n\t\tAffiliatevault[msg.sender][tokenAddress] = 0;\n\t\t\n\t\t_totalSaved[tokenAddress] \t\t= sub(_totalSaved[tokenAddress], amount); \n\t\tAllPayments[tokenAddress] \t\t= add(AllPayments[tokenAddress], amount);\n\t\t\n\t\tuint256 eventAmount\t\t\t\t= amount;\n        address eventTokenAddress \t\t= tokenAddress;\n        string \tmemory eventTokenSymbol = ContractSymbol[tokenAddress];\t\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n\t\t\n\t\temit onAffiliateBonus(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n    } \t\t\n\t\n//-------o Function 14 - Get User's Any Token Balance\n\n    function GetHodlTokensBalance(address tokenAddress) public view returns (uint256 balance) {\n        require(tokenAddress != 0x0);\n        \n        for(uint256 i = 1; i < _currentIndex; i++) {            \n            Safe storage s = _safes[i];\n            if(s.user == msg.sender && s.tokenAddress == tokenAddress)\n                balance += s.amount;\n        }\n        return balance;\n    }\n\t\n\t\n\t\n\t/*==============================\n    =          RESTRICTED          =\n    ==============================*/  \t\n\n//-------o 01 Add Contract Address\t\n    function AddContractAddress(address tokenAddress, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth) public restricted {\n\t\tuint256 newSpeed\t= _PercentPermonth;\n\t\trequire(newSpeed >= 3 && newSpeed <= 12);\n\t\t\n\t\tpercent[tokenAddress] \t\t\t= newSpeed;\t\n\t\tContractSymbol[tokenAddress] \t= _ContractSymbol;\n\t\tmaxcontribution[tokenAddress] \t= _maxcontribution;\t\n\t\t\n\t\tuint256 _HodlingTime \t\t\t= mul(div(72, newSpeed), 30);\n\t\tuint256 HodlTime \t\t\t\t= _HodlingTime * 1 days;\t\t\n\t\thodlingTime[tokenAddress] \t\t= HodlTime;\t\n\t\t\n\t\tif (DefaultToken == 0x0000000000000000000000000000000000000000) { DefaultToken = tokenAddress; } \n\t\t\n\t\tif (tokenAddress == DefaultToken && contractstatus == false) {\n\t\t\tcontractaddress[tokenAddress] \t= true;\n\t\t} else {         \n\t\t\tcontractaddress[tokenAddress] \t= contractstatus; \n\t\t}\t\n\t\t\n\t\temit onAddContractAddress(tokenAddress, contractstatus, _maxcontribution, _ContractSymbol, _PercentPermonth, HodlTime);\n    }\n\t\n//-------o 02 - Update Token Price (USD)\n    function TokenPrice(address tokenAddress, uint256 price) public restricted  {\n        tokenpriceUSD[tokenAddress] = price;\t\n    }\n\t\n//-------o 03 - Withdraw Ethereum \n    function WithdrawEth() restricted public {\n        require(address(this).balance > 0); \n\t\tuint256 amount = address(this).balance;\n\t\t\n\t\tEthereumVault[0x0] = 0;   \n        msg.sender.transfer(amount);\n    }\n    \n//-------o 04 Ethereum Nodes Fees   \n    function EthereumNodesFees(address tokenAddress) restricted public {\n        require(EthereumVault[tokenAddress] > 0);\n        \n        uint256 amount = EthereumVault[tokenAddress];\n\t\t_totalSaved[tokenAddress] \t= sub(_totalSaved[tokenAddress], amount); \n        EthereumVault[tokenAddress] = 0;\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);\n        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(msg.sender, amount);\n    }\n\t\n//-------o 05 - Send All Tokens That Have Been Unlocked  \n    function SendUnlockedTokens() restricted public\n    {\n        uint256 returned;\n\n        for(uint256 i = 1; i < _currentIndex; i++) {            \n            Safe storage s = _safes[i];\n            if (s.id != 0) {\n\t\t\t\t\n\t\t\t\tif(s.amountbalance > 0) {\n\t\t\t\t\tUnlockToken2(s.tokenAddress, s.id);\n\t\t\t\t}\n\t\t\t\t   \n\t\t\t\tif(Affiliatevault[s.user][s.tokenAddress] > 0) {\n\t\t\t\t\tWithdrawAffiliate(s.user, s.tokenAddress);\t\n\t\t\t\t}\n\n            }\n        }\n\t\t\n        emit onUnlockedTokens(returned);\n    }   \t\n\t\n\t\n//-------o 06 - Return All Tokens To Their Respective Addresses    \n    function ReturnAllTokens() restricted public\n    {\n        uint256 returned;\n\n        for(uint256 i = 1; i < _currentIndex; i++) {            \n            Safe storage s = _safes[i];\n            if (s.id != 0) {\n\t\t\t\t\n\t\t\t\tif(s.amountbalance > 0) {\n\t\t\t\t\t\n\t\t\t\t\tPayToken(s.user, s.tokenAddress, s.amountbalance);\n\t\t\t\t\t\n\t\t\t\t\ts.lastwithdraw \t\t\t\t\t= s.amountbalance;\n\t\t\t\t\ts.lasttime \t\t\t\t\t\t= now;  \n\t\t\t\t\t\n\t\t\t\t\tif(s.cashbackbalance > 0) {\n\t\t\t\t\ts.tokenreceive \t\t\t\t\t= div(mul(s.amount, 88), 100) ;\n\t\t\t\t\ts.percentagereceive \t\t\t= mul(1000000000000000000, 88);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\ts.tokenreceive \t\t\t\t\t= div(mul(s.amount, 72), 100) ;\n\t\t\t\t\ts.percentagereceive \t\t\t= mul(1000000000000000000, 72);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t_totalSaved[s.tokenAddress] \t= sub(_totalSaved[s.tokenAddress], s.amountbalance); \t\t\t\t\t\n\t\t\t\t\ts.amountbalance \t\t\t\t= 0;\n\n                    returned++;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\n                \n            }\n        }\n\t\t\n    }   \n\t\n\t\n\t/*==============================\n    =      SAFE MATH FUNCTIONS     =\n    ==============================*/  \t\n\t\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b; \n\t\trequire(c / a == b);\n\t\treturn c;\n\t}\n\t\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b > 0); \n\t\tuint256 c = a / b;\n\t\treturn c;\n\t}\n\t\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b <= a);\n\t\tuint256 c = a - b;\n\t\treturn c;\n\t}\n\t\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a);\n\t\treturn c;\n\t}\n    \n}\n\n\n\t/*==============================\n    =        ERC20 Interface       =\n    ==============================*/ \n\ncontract ERC20Interface {\n\n    uint256 public totalSupply;\n    uint256 public decimals;\n    \n    function symbol() public view returns (string);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"hodler\",\"type\":\"address\"}],\"name\":\"GetTotalAffiliate\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"AllPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_userSafes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ContractSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hodlingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"SendUnlockedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ActiveContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetEthereumNodes\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"GetTokenReserve\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"WithdrawAffiliate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"GetSafe\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"endtime\",\"type\":\"uint256\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"amountbalance\",\"type\":\"uint256\"},{\"name\":\"lasttime\",\"type\":\"uint256\"},{\"name\":\"percentage\",\"type\":\"uint256\"},{\"name\":\"percentagereceive\",\"type\":\"uint256\"},{\"name\":\"tokenreceive\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ClaimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cashbackcode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Recontribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cashbackcode\",\"type\":\"address\"}],\"name\":\"CashbackCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_totalSaved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"LifetimePayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"AllContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"afflist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenpriceUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ReturnAllTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Affiliateprofit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_countSafes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"GetHodlTokensBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxcontribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ClaimCashback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"LifetimeContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"contractstatus\",\"type\":\"bool\"},{\"name\":\"_maxcontribution\",\"type\":\"uint256\"},{\"name\":\"_ContractSymbol\",\"type\":\"string\"},{\"name\":\"_PercentPermonth\",\"type\":\"uint256\"}],\"name\":\"AddContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"EthereumNodesFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Affiliatevault\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hodler\",\"type\":\"address\"}],\"name\":\"GetUserSafesLength\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HodlTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DefaultToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"percent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cashbackcode\",\"type\":\"address\"}],\"name\":\"onCashbackCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onAffiliateBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onClaimTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onHodlTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onClaimCashBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contracthodler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractstatus\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_maxcontribution\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ContractSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_PercentPermonth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_HodlingTime\",\"type\":\"uint256\"}],\"name\":\"onAddContractAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"returned\",\"type\":\"uint256\"}],\"name\":\"onUnlockedTokens\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101f4600281905550615a72806200006a6000396000f3006080604052600436106101d8576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305a2dd26146102445780630d826c0b1461029b57806311a3311c146102f257806311d2c211146103535780631996bc1c1461040f578063256812381461046657806327e6d3c81461047d57806331b78a92146104f4578063374d7e3a1461054b57806338da63d8146105a257806347f849cd146106055780634d7f917f1461077c5780634eeaa212146107c957806356b71f71146108245780635db164d5146108a75780635df1539c146108f4578063666a73701461093757806367da21dd1461098e5780636a37f57314610a055780637028b6a314610a5c57806387b4559814610ae95780638e9e279514610b40578063910592de14610b5757806393002f0214610bce57806394606d0c14610bf957806398c7aba214610c105780639961395614610c67578063baaa718014610cbe578063bb142c2d14610d0b578063bcdf853614610d82578063d429ec5114610e2b578063d76ca04714610e6e578063d9d61a1014610ee5578063e396e97114610f3c578063e61021e814610f89578063e781495a14610fd6578063ee3cd8251461102d578063f6d0bf2f14611084575b600034111561024257610214600a60008073ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054346110af565b600a60008073ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b005b34801561025057600080fd5b50610285600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110d0565b6040518082815260200191505060405180910390f35b3480156102a757600080fd5b506102dc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061111c565b6040518082815260200191505060405180910390f35b3480156102fe57600080fd5b5061033d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611134565b6040518082815260200191505060405180910390f35b34801561035f57600080fd5b50610394600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611164565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103d45780820151818401526020810190506103b9565b50505050905090810190601f1680156104015780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561041b57600080fd5b50610450600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611214565b6040518082815260200191505060405180910390f35b34801561047257600080fd5b5061047b61122c565b005b34801561048957600080fd5b506104de600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611468565b6040518082815260200191505060405180910390f35b34801561050057600080fd5b5061050961148d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561055757600080fd5b5061058c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114b6565b6040518082815260200191505060405180910390f35b3480156105ae57600080fd5b50610603600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114ff565b005b34801561061157600080fd5b5061063060048036038101908080359060200190929190505050611b5a565b604051808d81526020018c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018a8152602001898152602001806020018881526020018781526020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825289818151815260200191508051906020019080838360005b8381101561073657808201518184015260208101905061071b565b50505050905090810190601f1680156107635780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390f35b34801561078857600080fd5b506107c7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611ce3565b005b3480156107d557600080fd5b5061080a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e0c565b604051808215151515815260200191505060405180910390f35b34801561083057600080fd5b50610865600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e2c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108b357600080fd5b506108f2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611e5f565b005b34801561090057600080fd5b50610935600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f3e565b005b34801561094357600080fd5b50610978600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120f3565b6040518082815260200191505060405180910390f35b34801561099a57600080fd5b506109ef600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061210b565b6040518082815260200191505060405180910390f35b348015610a1157600080fd5b50610a46600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612130565b6040518082815260200191505060405180910390f35b348015610a6857600080fd5b50610aa7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612148565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610af557600080fd5b50610b2a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612195565b6040518082815260200191505060405180910390f35b348015610b4c57600080fd5b50610b556121ad565b005b348015610b6357600080fd5b50610bb8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612442565b6040518082815260200191505060405180910390f35b348015610bda57600080fd5b50610be3612467565b6040518082815260200191505060405180910390f35b348015610c0557600080fd5b50610c0e61246d565b005b348015610c1c57600080fd5b50610c51600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612583565b6040518082815260200191505060405180910390f35b348015610c7357600080fd5b50610ca8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506126a5565b6040518082815260200191505060405180910390f35b348015610cca57600080fd5b50610d09600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506126bd565b005b348015610d1757600080fd5b50610d6c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506129a8565b6040518082815260200191505060405180910390f35b348015610d8e57600080fd5b50610e29600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291905050506129cd565b005b348015610e3757600080fd5b50610e6c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612e21565b005b348015610e7a57600080fd5b50610ecf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506131ab565b6040518082815260200191505060405180910390f35b348015610ef157600080fd5b50610f26600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506131d0565b6040518082815260200191505060405180910390f35b348015610f4857600080fd5b50610f87600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061321c565b005b348015610f9557600080fd5b50610fd4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506132bf565b005b348015610fe257600080fd5b50610feb613552565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561103957600080fd5b5061106e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613578565b6040518082815260200191505060405180910390f35b34801561109057600080fd5b50611099613590565b6040518082815260200191505060405180910390f35b60008082840190508381101515156110c657600080fd5b8091505092915050565b6000601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b600e6020528060005260406000206000915090505481565b60096020528160005260406000208181548110151561114f57fe5b90600052602060002001600091509150505481565b600f6020528060005260406000206000915090508054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561120c5780601f106111e15761010080835404028352916020019161120c565b820191906000526020600020905b8154815290600101906020018083116111ef57829003601f168201915b505050505081565b60066020528060005260406000206000915090505481565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561128c57600080fd5b600191505b60025482101561142c57600b600083815260200190815260200160002090506000816000015414151561141f576000816006015411156112fe576112fd8160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600001546135af565b5b6000601460008360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111561141e5761141d8160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166114ff565b5b5b8180600101925050611291565b7f73e4c62a9db99acf06fc610be1dc4a4422b9692d47b9c69adf3a14408ab7632e836040518082815260200191505060405180910390a1505050565b6016602052816000526040600020602052806000526040600020600091509150505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600060606000808673ffffffffffffffffffffffffffffffffffffffff161415151561152d57600080fd5b6000601460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115156115b857600080fd5b601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205494506000601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611702600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486613707565b600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061178e600e60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054866110af565b600e60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550849350859250600f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118aa5780601f1061187f576101008083540402835291602001916118aa565b820191906000526020600020905b81548152906001019060200180831161188d57829003601f168201915b50505050509150859050848173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561195057600080fd5b505af1158015611964573d6000803e3d6000fd5b505050506040513d602081101561197a57600080fd5b81019080805190602001909291905050501015151561199857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611a3b57600080fd5b505af1158015611a4f573d6000803e3d6000fd5b505050506040513d6020811015611a6557600080fd5b8101908080519060200190929190505050508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f772c23bb220b948b929f588a1f309403a056930064c60b1452db4c2904918b918487426040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015611b15578082015181840152602081019050611afa565b50505050905090810190601f168015611b425780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a350505050505050565b600080600080600060606000806000806000806000600b60008f8152602001908152602001600020905080600001548160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836001015484600201548560050186600601548760080154886009015489600a01548a600b01548b600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611cb45780601f10611c8957610100808354040283529160200191611cb4565b820191906000526020600020905b815481529060010190602001808311611c9757829003601f168201915b505050505096509c509c509c509c509c509c509c509c509c509c509c509c505091939597999b5091939597999b565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515611d0a57600080fd5b60008214151515611d1a57600080fd5b600b600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611d8d57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611deb57600080fd5b600081600601541415611dfd57600080fd5b611e078383613728565b505050565b60046020528060005260406000206000915054906101000a900460ff1681565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008473ffffffffffffffffffffffffffffffffffffffff1614151515611e8857600080fd5b60008314151515611e9857600080fd5b600b600084815260200190815260200160002091503373ffffffffffffffffffffffffffffffffffffffff168260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611f0b57600080fd5b600082600701541415611f1d57600080fd5b8160070154905060008260070181905550611f388482613ae5565b50505050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611f7957600080fd5b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156120f05780600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f3bf019f5f0b17480693601e318eb6120c1eac4732d3b7b3a006c5024f9dd69bd82604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a25b50565b60086020528060005260406000206000915090505481565b6013602052816000526040600020602052806000526040600020600091509150505481565b600d6020528060005260406000206000915090505481565b60106020528160005260406000208181548110151561216357fe5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60116020528060005260406000206000915090505481565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561220d57600080fd5b600191505b60025482101561243d57600b60008381526020019081526020016000209050600081600001541415156124305760008160060154111561242f576122a38160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600601546146aa565b806006015481600c0181905550428160080181905550600081600701541115612307576122df6122d882600101546058614a96565b6064614ad4565b81600b01819055506122fa670de0b6b3a76400006058614a96565b81600a0181905550612344565b61232061231982600101546048614a96565b6064614ad4565b81600b018190555061233b670de0b6b3a76400006048614a96565b81600a01819055505b6123b5600860008360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548260060154613707565b600860008360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000816006018190555082806001019350505b5b8180600101925050612212565b505050565b6015602052816000526040600020602052806000526040600020600091509150505481565b60035481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156124ca57600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff16311115156124f057600080fd5b3073ffffffffffffffffffffffffffffffffffffffff163190506000600a60008073ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561257f573d6000803e3d6000fd5b5050565b6000806000808473ffffffffffffffffffffffffffffffffffffffff16141515156125ad57600080fd5b600191505b60025482101561269b57600b600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614801561267f57508373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1561268e578060010154830192505b81806001019250506125b2565b8292505050919050565b600c6020528060005260406000206000915090505481565b6000806000606060008673ffffffffffffffffffffffffffffffffffffffff16141515156126ea57600080fd5b600085141515156126fa57600080fd5b600b600086815260200190815260200160002093503373ffffffffffffffffffffffffffffffffffffffff168460030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561276d57600080fd5b60008460070154141561277f57600080fd5b836007015492508360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150836005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128455780601f1061281a57610100808354040283529160200191612845565b820191906000526020600020905b81548152906001019060200180831161282857829003601f168201915b5050505050905060008460070181905550600184600d0160146101000a81548160ff0219169083151502179055506128c68460030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856146aa565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe25eb861ce58ae57eb93f8131c86619c305c21426184053647f8d0b5c306107e8386426040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015612964578082015181840152602081019050612949565b50505050905090810190601f1680156129915780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a3505050505050565b6012602052816000526040600020602052806000526040600020600091509150505481565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612a2d57600080fd5b83925060038310158015612a425750600c8311155b1515612a4d57600080fd5b82600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555084600f60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190612ae4929190615921565b5085600c60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612b3e612b37604885614ad4565b601e614a96565b9150620151808202905080600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612c255787600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16148015612c86575060001515871515145b15612ce8576001600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612d40565b86600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b8773ffffffffffffffffffffffffffffffffffffffff167f84e005593e5e94e5aa70dc9c7e68d408611b8860dcba4a9297858b82c88748a68888888886604051808615151515815260200185815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015612dd9578082015181840152602081019050612dbe565b50505050905090810190601f168015612e065780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a25050505050505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612e7f57600080fd5b6000600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515612ecd57600080fd5b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150612f58600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483613707565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550829050818173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561307f57600080fd5b505af1158015613093573d6000803e3d6000fd5b505050506040513d60208110156130a957600080fd5b8101908080519060200190929190505050101515156130c757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561316a57600080fd5b505af115801561317e573d6000803e3d6000fd5b505050506040513d602081101561319457600080fd5b810190808051906020019092919050505050505050565b6014602052816000526040600020602052806000526040600020600091509150505481565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561327757600080fd5b80601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000808373ffffffffffffffffffffffffffffffffffffffff16141515156132e657600080fd5b6000821180156133ba5750600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546133b7601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846110af565b11155b15156133c557600080fd5b60001515600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141561342357600080fd5b8290508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156134fd57600080fd5b505af1158015613511573d6000803e3d6000fd5b505050506040513d602081101561352757600080fd5b8101908080519060200190929190505050151561354357600080fd5b61354d8383613ae5565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60056020528060005260406000206000915090505481565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b6000806000806000806000600b6000898152602001908152602001600020965060008760000154141515156135e357600080fd5b8873ffffffffffffffffffffffffffffffffffffffff168760040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561364157600080fd5b61364f428860080154613707565b955061368261367961367361366c8a600101548b60090154614a96565b6064614ad4565b88614a96565b62278d00614ad4565b94506136938760010154600a614ad4565b9350838511156136a5578392506136a9565b8492505b86600601548311156136c157866006015491506136c5565b8291505b6136d3876006015483613707565b90508087600601819055508187600c01819055504287600801819055506136fc89898385614afe565b505050505050505050565b60008083831115151561371957600080fd5b82840390508091505092915050565b600080600060606000600b60008781526020019081526020016000209450600085600001541415151561375a57600080fd5b8673ffffffffffffffffffffffffffffffffffffffff168560040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156137b857600080fd5b846006015493508460040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250846005018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561387e5780601f106138535761010080835404028352916020019161387e565b820191906000526020600020905b81548152906001019060200180831161386157829003601f168201915b505050505091504285600201541015613acd576138a3856006015486600701546110af565b9050846006015485600c0181905550600085600601819055504285600801819055506139188560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836146aa565b6000856007015411801561394157506000151585600d0160149054906101000a900460ff161515145b8061396157506001151585600d0160149054906101000a900460ff161515145b156139a75761397f61397886600101546058614a96565b6064614ad4565b85600b018190555061399a670de0b6b3a76400006058614a96565b85600a01819055506139e4565b6139c06139b986600101546048614a96565b6064614ad4565b85600b01819055506139db670de0b6b3a76400006048614a96565b85600a01819055505b600085600701819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f959346e7719e944c33f76798af64519a9c17a870c805ae49c011066f18fa9cb08487426040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015613a8c578082015181840152602081019050613a71565b50505050905090810190601f168015613ab95780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a3613adc565b613adb8786600001546135af565b5b50505050505050565b6000806000806000806000806000613b08613b018b6048614a96565b6064614ad4565b98506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613eda576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1697506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060009650613c64613c5d8b601c614a96565b6064614ad4565b9550613caf600a60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054876110af565b600a60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613d99601560008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054876110af565b601560008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f3bf019f5f0b17480693601e318eb6120c1eac4732d3b7b3a006c5024f9dd69bd6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a2614690565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169750613f51613f4a8b600c614a96565b6064614ad4565b9450613f68613f618b6010614a96565b6064614ad4565b9650601660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054935061406f601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548b6110af565b9250828410151561428b57614100601460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054866110af565b601460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550614206601560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054866110af565b601560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061468f565b6142a061429985600c614a96565b6064614ad4565b9150614328601460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836110af565b601460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061442e601560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836110af565b601560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506144b88583613707565b9050614503600a60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826110af565b600a60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506145ed601560008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836110af565b601560008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b61469d8b8b8b8a8c614f04565b5050505050505050505050565b6000829050818173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561474b57600080fd5b505af115801561475f573d6000803e3d6000fd5b505050506040513d602081101561477557600080fd5b81019080805190602001909291905050501015151561479357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561483657600080fd5b505af115801561484a573d6000803e3d6000fd5b505050506040513d602081101561486057600080fd5b8101908080519060200190929190505050506148bb600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483613707565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550614947600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836110af565b600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550614a10601360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836110af565b601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505050565b6000806000841415614aab5760009150614acd565b8284029050828482811515614abc57fe5b04141515614ac957600080fd5b8091505b5092915050565b600080600083111515614ae657600080fd5b8284811515614af157fe5b0490508091505092915050565b60008060006060600080600080600b60008c815260200190815260200160002097506000886000015414151515614b3457600080fd5b8b73ffffffffffffffffffffffffffffffffffffffff168860040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515614b9257600080fd5b8896508760040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169550876005018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614c545780601f10614c2957610100808354040283529160200191614c54565b820191906000526020600020905b815481529060010190602001808311614c3757829003601f168201915b50505050509450614c74614c6d8960010154600c614a96565b6064614ad4565b9350614c8f614c8889600101546010614a96565b6064614ad4565b92506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480614d4f575060008860070154115b15614d7b57614d74614d6e614d688a6001015487613707565b85613707565b8b613707565b9150614d95565b614d92614d8c896001015486613707565b8b613707565b91505b614db5614dab8368056bc75e2d63100000614a96565b8960010154614ad4565b90508188600b01819055508088600a0181905550614e1c8860030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168960040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168b6146aa565b8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f959346e7719e944c33f76798af64519a9c17a870c805ae49c011066f18fa9cb0878a426040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015614eba578082015181840152602081019050614e9f565b50505050905090810190601f168015614ee75780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a3505050505050505050505050565b60008060008060008060008b9650600560008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549550600660008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549450614fa042866110af565b93508a925089915088905060009a5060009950600098506101e06040519081016040528060025481526020018481526020018581526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018d73ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561507457600080fd5b505af1158015615088573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156150b257600080fd5b8101908080516401000000008111156150ca57600080fd5b828101905060208101848111156150e057600080fd5b81518560018202830111640100000000821117156150fd57600080fd5b505092919050505081526020018381526020018281526020014281526020018781526020016000815260200160008152602001600081526020018973ffffffffffffffffffffffffffffffffffffffff16815260200160001515815250600b6000600254815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050190805190602001906152379291906159a1565b5060c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b015561018082015181600c01556101a082015181600d0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101c082015181600d0160146101000a81548160ff021916908315150217905550905050615375601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846110af565b601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061547b601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846110af565b601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550615544600d60008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846110af565b600d60008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506155d0600860008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846110af565b600860008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000203390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060025490806001815401808255809150509060018203906000526020600020016000909192909190915055506002600081548092919060010191905055506003600081548092919060010191905055508b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fed175a8ddea84085fa2767c9c1f3342fae1f118bc1213ac4d4a0c6277bc0ad738973ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156157f857600080fd5b505af115801561580c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561583657600080fd5b81019080805164010000000081111561584e57600080fd5b8281019050602081018481111561586457600080fd5b815185600182028301116401000000008211171561588157600080fd5b505092919050505086886040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b838110156158d75780820151818401526020810190506158bc565b50505050905090810190601f1680156159045780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a3505050505050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061596257805160ff1916838001178555615990565b82800160010185558215615990579182015b8281111561598f578251825591602001919060010190615974565b5b50905061599d9190615a21565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106159e257805160ff1916838001178555615a10565b82800160010185558215615a10579182015b82811115615a0f5782518255916020019190600101906159f4565b5b509050615a1d9190615a21565b5090565b615a4391905b80821115615a3f576000816000905550600101615a27565b5090565b905600a165627a7a72305820256dd880730d7fb8769f6e21d2001d91755b58a299e7f7c0e404ef436aaafd4f0029"
}