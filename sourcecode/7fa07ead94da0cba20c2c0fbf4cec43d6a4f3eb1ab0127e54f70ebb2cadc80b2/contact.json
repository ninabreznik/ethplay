{
  "address": "0xa90249101da7cdf0bc01795b9609c37719075275",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "UpsweepV1",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-12\n*/\n\npragma solidity ^0.5.2;\n\n/*\n*\n* WELCOME TO THE SUSTAINABLE UPSWEEP NETWORK\n*\n*                  upsweep.net\n*\n* Gambling with low gas fees, no edge and no leaks.  \n*\n*   \n*                _19^^^^0^^^^1_\n*             .18''           ``2.\n*           .17'      \n*          .16'   Here's to the   `3.\n*         .15'      unfolding      `4.\n*         ::         of hope.       ::\n*         ::  ...................   ::\n*         ::                        ::\n*         `14.       @author       .5'\n*          `13.  symmetricproof   .6'\n*           `12.                .7'\n*             `11..          ..8'\n*                ^10........9^\n*                    ''''     \n*\n*\n/* @title The Upsweep Network; a social and sustainable circle of bets.\n*/\n\ncontract UpsweepV1 {\n\n    uint public elapsed;\n    uint public timeout;\n    uint public lastId;\n    uint public counter;\n    bool public closed;\n    \n    struct Player {\n        bool revealOnce;\n        bool claimed;\n        bool gotHonour;\n        uint8 i;\n        bytes32 commit;\n    }\n\n    mapping(uint => mapping (address => Player)) public player;\n    mapping(uint => uint8[20]) public balancesById;   \n    mapping(uint => uint8[20]) public bottleneckById;\n    \n    address payable public owner = msg.sender;\n    uint public ticketPrice = 100000000000000000;\n    \n    mapping(uint => uint) public honour;\n    \n    event FirstBlock(uint);\n    event LastBlock(uint);\n    event Join(uint);\n    event Reveal(uint seat, uint indexed gameId);\n    event NewId(uint);\n    \n    modifier onlyBy(address _account)\n    {\n        require(\n            msg.sender == _account,\n            \"Sender not authorized.\"\n        );\n        _;\n    }\n    \n    modifier circleIsPrivate(bool _closed) {\n        require(\n            _closed == true,\n            \"Game is in progress.\"\n        );\n        _;\n    }\n    \n    modifier circleIsPublic(bool _closed) {\n        require(\n            _closed == false,\n            \"Next game has not started.\"\n        );\n        _;\n    } \n    \n    modifier onlyAfter(uint _time) {\n        require(\n            block.number > _time,\n            \"Function called too early.\"\n        );\n        _;\n    }\n    \n    modifier onlyBefore(uint _time) {\n        require(\n            block.number <= _time,\n            \"Function called too late.\"\n        );\n        _;\n    }\n    \n    modifier ticketIsAffordable(uint _amount) {\n        require(\n            msg.value >= _amount,\n            \"Not enough Ether provided.\"\n        );\n        _;\n        if (msg.value > _amount)\n            msg.sender.transfer(msg.value - _amount);\n    }\n    \n    /**\n    * @dev pick a number and cast the hash to the network. \n    * @param _hash is the keccak256 output for the address of the message sender+\n    * the number + a passphrase\n    */\n    function join(bytes32 _hash)\n        public\n        payable\n        circleIsPublic(closed)\n        ticketIsAffordable(ticketPrice)\n        returns (uint gameId)\n    {\n        //the circle is only open to 40 players.\n        require(\n            counter < 40,       \n            \"Game is full.\"\n        );            \n        \n        //timer starts when the first ticket of the game is sold\n        if (counter == 0) {\n            elapsed = block.number;\n            emit FirstBlock(block.number);\n        }\n\n        player[lastId][msg.sender].commit = _hash;\n        \n        //when the game is full, timer stops and the countdown to reveal begins\n        //NO MORE COMMITS ARE RECEIVED.\n        if (counter == 39) {       \n            closed = true;\n            uint temp = sub(block.number,elapsed);\n            timeout = add(temp,block.number);\n            emit LastBlock(timeout);\n        } \n        \n        counter++;\n\n        emit Join(counter);\n        return lastId;\n    }\n   \n     /**\n    * @notice get a refund and exit the game before it begins\n    */\n    function abandon()\n        public\n        circleIsPublic(closed)\n        returns (bool success)\n    {\n        bytes32 commit = player[lastId][msg.sender].commit;\n        require(\n            commit != 0,\n            \"Player was not in the game.\"\n        );\n        \n        player[lastId][msg.sender].commit = 0;\n        counter --;\n        if (counter == 0) {\n            elapsed = 0;\n            emit FirstBlock(0);\n        }    \n        emit Join(counter);\n        msg.sender.transfer(ticketPrice);\n        return true;\n    }     \n    /**\n    * @notice to make your bet legal, you must reveal the corresponding number\n    * @dev a new hash is computed to verify authenticity of the bet\n    * @param i is the number (between 0 and 19)\n    * @param passphrase to prevent brute-force validation\n    */\n    function reveal(\n        uint8 i, \n        string memory passphrase \n    )\n        public \n        circleIsPrivate(closed)\n        onlyBefore(timeout)\n        returns (bool success)\n    {\n        bool status = player[lastId][msg.sender].revealOnce;\n        require(\n            status == false,\n            \"Player already revealed.\"\n        );\n        \n        bytes32 commit = player[lastId][msg.sender].commit;\n \n        //hash is recalculated to verify authenticity\n        bytes32 hash = keccak256(\n            abi.encodePacked(msg.sender,i,passphrase)\n        );\n            \n        require(\n            hash == commit,\n            \"Hashes don't match.\"\n        );\n        \n        player[lastId][msg.sender].revealOnce = true;\n        player[lastId][msg.sender].i = i;\n        \n        //contribution is credited to the chosen number\n        balancesById[lastId][i] ++;\n        //the list of players inside this numbers grows by one\n        bottleneckById[lastId][i] ++;\n        \n        counter--;\n        //last player to reveal must pay extra gas fees to update the game \n        if (counter == 0) {\n            timeout = 0;\n            updateBalances();\n        }\n        \n        emit Reveal(i,lastId);\n        return true;\n    }\n  \n    /**\n    * @notice distributes rewards fairly.\n    * @dev the circle has no head or foot, node 19 passes to node 0 only if node 0 is not empty.\n    * To successfully distribute contributions, the function loops through all numbers and \n    * identifies the first empty number, from there the chain of transfers begins. \n    * \n    */\n    function updateBalances()\n        public\n        circleIsPrivate(closed)\n        onlyAfter(timeout)\n        returns (bool success)\n    {\n        // identify the first empty number.\n        for (uint8 i = 0; i < 20; i++) {\n            if (balancesById[lastId][i] == 0) { \n                // start chain of transfers from the next number.\n                uint j = i + 1;\n                for (uint8 a = 0; a < 19; a++) {   \n                    if (j == 20) j = 0;\n                    if (j == 19) {       \n                        if (balancesById[lastId][0] > 0) {\n                            uint8 temp = balancesById[lastId][19];\n                            balancesById[lastId][19] = 0;\n                            balancesById[lastId][0] += temp;  \n                            j = 0; \n                        } else {\n                            j = 1;\n                        }\n                    } else {            \n                        if (balancesById[lastId][j + 1] > 0) { \n                            uint8 temp = balancesById[lastId][j];\n                            balancesById[lastId][j] = 0;\n                            balancesById[lastId][j + 1] += temp; \n                            j += 1; \n                        } else { \n                            j += 2; \n                        }\n                    }\n                }\n                // will break when all balances are updated.\n                break;\n            }\n        }\n        // reset variables and start a new game.\n        closed = false;\n        if (timeout > 0) timeout = 0;\n        elapsed = 0;\n        // players that reveal are rewarded the ticket value of those\n        // that don't reveal.\n        if (counter > 0) {\n            uint total = mul(counter, ticketPrice);\n            uint among = sub(40,counter);\n            honour[lastId] = div(total,among);\n            counter = 0;\n        } \n        lastId ++;\n        emit NewId(lastId);\n        return true;\n    }\n    \n    /**\n    * @notice accumulated rewards are already allocated in specific numbers, if players can\n    * prove they picked that \"lucky\" number, they are allowed to withdraw the accumulated\n    * ether.\n    * \n    * If there is more than one player in a given number, the reward is split equally. \n    * \n    * @param gameId only attempt to withdraw rewards from a valid game, otherwise the transaction\n    * will fail.\n    */\n    function withdraw(uint gameId) \n        public\n        returns (bool success)\n    {\n        bool status = player[gameId][msg.sender].revealOnce;\n        require(\n            status == true,\n            \"Player has not revealed.\"\n        );\n        \n        bool claim = player[gameId][msg.sender].claimed;\n        require(\n            claim == false,\n            \"Player already claimed.\"\n        );\n        \n        uint8 index = player[gameId][msg.sender].i;\n        require(\n            balancesById[gameId][index] > 0,\n            \"Player didn't won.\"\n        );\n        \n        player[gameId][msg.sender].claimed = true;\n        \n        uint temp = uint(balancesById[gameId][index]);\n        uint among = uint(bottleneckById[gameId][index]);\n        uint total = mul(temp, ticketPrice);\n        uint payout = div(total, among);\n        \n        msg.sender.transfer(payout);   \n        \n        return true;\n    }   \n    \n    function microTip()\n        public\n        payable\n        returns (bool success)\n    {\n        owner.transfer(msg.value);\n        return true;\n    }\n    \n    function changeOwner(address payable _newOwner)\n        public\n        onlyBy(owner)\n        returns (bool success)\n    {\n        owner = _newOwner;\n        return true;\n    }\n    \n    function getHonour(uint _gameId)\n        public\n        returns (bool success)\n    {\n        bool status = player[_gameId][msg.sender].gotHonour;\n        require(\n            status == false,\n            \"Player already claimed honour.\"\n        );\n        bool revealed = player[_gameId][msg.sender].revealOnce;\n        require(\n            revealed == true,\n            \"Player has not revealed.\"\n        );\n        player[_gameId][msg.sender].gotHonour = true;\n        msg.sender.transfer(honour[_gameId]);\n        return true;\n    }\n    \n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n\n\n}",
  "bytecode": "608060405233600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555067016345785d8a000060095534801561005d57600080fd5b506122318061006d6000396000f3fe608060405260043610610131576000357c010000000000000000000000000000000000000000000000000000000090048063786d8945116100bd578063c1292cc311610081578063c1292cc314610488578063ca3ed9e8146104b3578063d81a63eb146105a0578063d9cfd558146105ff578063f2fb17741461065e57610131565b8063786d89451461030857806388318834146103575780638da5cb5b14610386578063a6f9dae1146103dd578063ad677d0b1461044657610131565b806337516ead1161010457806337516ead14610232578063597e1fb51461025457806361bc221a146102835780636f3fe404146102ae57806370dea79a146102dd57610131565b80631209b1f6146101365780631ff96c74146101615780632e1a7d4d146101b45780632f29d8c514610207575b600080fd5b34801561014257600080fd5b5061014b6106fb565b6040518082815260200191505060405180910390f35b34801561016d57600080fd5b5061019a6004803603602081101561018457600080fd5b8101908080359060200190929190505050610701565b604051808215151515815260200191505060405180910390f35b3480156101c057600080fd5b506101ed600480360360208110156101d757600080fd5b8101908080359060200190929190505050610995565b604051808215151515815260200191505060405180910390f35b34801561021357600080fd5b5061021c610dd1565b6040518082815260200191505060405180910390f35b61023a610dd7565b604051808215151515815260200191505060405180910390f35b34801561026057600080fd5b50610269610e49565b604051808215151515815260200191505060405180910390f35b34801561028f57600080fd5b50610298610e5c565b6040518082815260200191505060405180910390f35b3480156102ba57600080fd5b506102c3610e62565b604051808215151515815260200191505060405180910390f35b3480156102e957600080fd5b506102f2611360565b6040518082815260200191505060405180910390f35b34801561031457600080fd5b506103416004803603602081101561032b57600080fd5b8101908080359060200190929190505050611366565b6040518082815260200191505060405180910390f35b34801561036357600080fd5b5061036c61137e565b604051808215151515815260200191505060405180910390f35b34801561039257600080fd5b5061039b611629565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103e957600080fd5b5061042c6004803603602081101561040057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061164f565b604051808215151515815260200191505060405180910390f35b6104726004803603602081101561045c57600080fd5b8101908080359060200190929190505050611762565b6040518082815260200191505060405180910390f35b34801561049457600080fd5b5061049d611ab3565b6040518082815260200191505060405180910390f35b3480156104bf57600080fd5b50610586600480360360408110156104d657600080fd5b81019080803560ff1690602001909291908035906020019064010000000081111561050057600080fd5b82018360208201111561051257600080fd5b8035906020019184600183028401116401000000008311171561053457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611ab9565b604051808215151515815260200191505060405180910390f35b3480156105ac57600080fd5b506105e3600480360360408110156105c357600080fd5b810190808035906020019092919080359060200190929190505050612073565b604051808260ff1660ff16815260200191505060405180910390f35b34801561060b57600080fd5b506106426004803603604081101561062257600080fd5b8101908080359060200190929190803590602001909291905050506120ab565b604051808260ff1660ff16815260200191505060405180910390f35b34801561066a57600080fd5b506106b76004803603604081101561068157600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120e3565b604051808615151515815260200185151515158152602001841515151581526020018360ff1660ff1681526020018281526020019550505050505060405180910390f35b60095481565b6000806005600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160029054906101000a900460ff169050600015158115151415156107e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f506c6179657220616c726561647920636c61696d656420686f6e6f75722e000081525060200191505060405180910390fd5b60006005600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff169050600115158115151415156108c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f506c6179657220686173206e6f742072657665616c65642e000000000000000081525060200191505060405180910390fd5b60016005600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160026101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff166108fc600a6000878152602001908152602001600020549081150290604051600060405180830381858888f19350505050158015610989573d6000803e3d6000fd5b50600192505050919050565b6000806005600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16905060011515811515141515610a77576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f506c6179657220686173206e6f742072657665616c65642e000000000000000081525060200191505060405180910390fd5b60006005600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff16905060001515811515141515610b58576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f506c6179657220616c726561647920636c61696d65642e00000000000000000081525060200191505060405180910390fd5b60006005600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160039054906101000a900460ff1690506000600660008781526020019081526020016000208260ff16601481101515610be257fe5b602091828204019190069054906101000a900460ff1660ff16111515610c70576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f506c61796572206469646e277420776f6e2e000000000000000000000000000081525060200191505060405180910390fd5b60016005600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff0219169083151502179055506000600660008781526020019081526020016000208260ff16601481101515610d0157fe5b602091828204019190069054906101000a900460ff1660ff1690506000600760008881526020019081526020016000208360ff16601481101515610d4157fe5b602091828204019190069054906101000a900460ff1660ff1690506000610d6a8360095461215a565b90506000610d788284612198565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610dc0573d6000803e3d6000fd5b506001975050505050505050919050565b60005481565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610e41573d6000803e3d6000fd5b506001905090565b600460009054906101000a900460ff1681565b60035481565b6000600460009054906101000a900460ff1660011515811515141515610ef0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f47616d6520697320696e2070726f67726573732e00000000000000000000000081525060200191505060405180910390fd5b6001548043111515610f6a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f46756e6374696f6e2063616c6c656420746f6f206561726c792e00000000000081525060200191505060405180910390fd5b60008090505b60148160ff1610156112795760006006600060025481526020019081526020016000208260ff16601481101515610fa357fe5b602091828204019190069054906101000a900460ff1660ff16141561126c5760006001820160ff16905060008090505b60138160ff161015611265576014821415610fed57600091505b6013821415611126576000600660006002548152602001908152602001600020600060148110151561101b57fe5b602091828204019190069054906101000a900460ff1660ff16111561111c576000600660006002548152602001908152602001600020601360148110151561105f57fe5b602091828204019190069054906101000a900460ff1690506000600660006002548152602001908152602001600020601360148110151561109c57fe5b602091828204019190066101000a81548160ff021916908360ff1602179055508060066000600254815260200190815260200160002060006014811015156110e057fe5b602091828204019190068282829054906101000a900460ff160192506101000a81548160ff021916908360ff1602179055506000925050611121565b600191505b611258565b60006006600060025481526020019081526020016000206001840160148110151561114d57fe5b602091828204019190069054906101000a900460ff1660ff1611156112505760006006600060025481526020019081526020016000208360148110151561119057fe5b602091828204019190069054906101000a900460ff1690506000600660006002548152602001908152602001600020846014811015156111cc57fe5b602091828204019190066101000a81548160ff021916908360ff160217905550806006600060025481526020019081526020016000206001850160148110151561121257fe5b602091828204019190068282829054906101000a900460ff160192506101000a81548160ff021916908360ff16021790555060018301925050611257565b6002820191505b5b8080600101915050610fd3565b5050611279565b8080600101915050610f70565b506000600460006101000a81548160ff021916908315150217905550600060015411156112a95760006001819055505b600080819055506000600354111561130c5760006112cb60035460095461215a565b905060006112dc60286003546121c2565b90506112e88282612198565b600a6000600254815260200190815260200160002081905550600060038190555050505b6002600081548092919060010191905055507f7df273aabd0c2fdf9b56091e8da922313a50aefbc3d3793e28df976eb8595ceb6002546040518082815260200191505060405180910390a160019250505090565b60015481565b600a6020528060005260406000206000915090505481565b6000600460009054906101000a900460ff166000151581151514151561140c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4e6578742067616d6520686173206e6f7420737461727465642e00000000000081525060200191505060405180910390fd5b600060056000600254815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050600060010281141515156114e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f506c6179657220776173206e6f7420696e207468652067616d652e000000000081525060200191505060405180910390fd5b600060010260056000600254815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550600360008154809291906001900391905055506000600354141561159e57600080819055507f8745a53f91b57a7f9c085719e1f336d1cf50dc89b315137de02a041f2533f16060006040518082815260200191505060405180910390a15b7f858d2e17a8121c939a8c52f6821c748d2592cc8ecd8e6afcda3fc4c84248002f6003546040518082815260200191505060405180910390a13373ffffffffffffffffffffffffffffffffffffffff166108fc6009549081150290604051600060405180830381858888f1935050505015801561161f573d6000803e3d6000fd5b5060019250505090565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611717576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f53656e646572206e6f7420617574686f72697a65642e0000000000000000000081525060200191505060405180910390fd5b82600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001915050919050565b6000600460009054906101000a900460ff16600015158115151415156117f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4e6578742067616d6520686173206e6f7420737461727465642e00000000000081525060200191505060405180910390fd5b60095480341015151561186b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4e6f7420656e6f7567682045746865722070726f76696465642e00000000000081525060200191505060405180910390fd5b60286003541015156118e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f47616d652069732066756c6c2e0000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600354141561192f57436000819055507f8745a53f91b57a7f9c085719e1f336d1cf50dc89b315137de02a041f2533f160436040518082815260200191505060405180910390a15b8360056000600254815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555060276003541415611a0a576001600460006101000a81548160ff02191690831515021790555060006119bd436000546121c2565b90506119c981436121e4565b6001819055507f7665a62338ae6744993183c91a7f4954cd546948f5f7dfadd8533690bbe5afb16001546040518082815260200191505060405180910390a1505b6003600081548092919060010191905055507f858d2e17a8121c939a8c52f6821c748d2592cc8ecd8e6afcda3fc4c84248002f6003546040518082815260200191505060405180910390a1600254925080341115611aac573373ffffffffffffffffffffffffffffffffffffffff166108fc8234039081150290604051600060405180830381858888f19350505050158015611aaa573d6000803e3d6000fd5b505b5050919050565b60025481565b6000600460009054906101000a900460ff1660011515811515141515611b47576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f47616d6520697320696e2070726f67726573732e00000000000000000000000081525060200191505060405180910390fd5b600154804311151515611bc2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f46756e6374696f6e2063616c6c656420746f6f206c6174652e0000000000000081525060200191505060405180910390fd5b600060056000600254815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16905060001515811515141515611ca5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f506c6179657220616c72656164792072657665616c65642e000000000000000081525060200191505060405180910390fd5b600060056000600254815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000338888604051602001808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018360ff1660ff167f010000000000000000000000000000000000000000000000000000000000000002815260010182805190602001908083835b602083101515611dab5780518252602082019150602081019050602083039250611d86565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506040516020818303038152906040528051906020012090508181141515611e61576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f48617368657320646f6e2774206d617463682e0000000000000000000000000081525060200191505060405180910390fd5b600160056000600254815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055508760056000600254815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160036101000a81548160ff021916908360ff1602179055506006600060025481526020019081526020016000208860ff16601481101515611f6257fe5b6020918282040191900681819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff160217905550506007600060025481526020019081526020016000208860ff16601481101515611fbf57fe5b6020918282040191900681819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff160217905550506003600081548092919060019003919050555060006003541415612027576000600181905550612025610e62565b505b6002547fc172d6f677c5cb603b93b418c5bbd19afeb3dc6d48a2c4b658254bdae7203b5489604051808260ff16815260200191505060405180910390a260019550505050505092915050565b60066020528160005260406000208160148110151561208e57fe5b60209182820401919006915091509054906101000a900460ff1681565b6007602052816000526040600020816014811015156120c657fe5b60209182820401919006915091509054906101000a900460ff1681565b6005602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060000160029054906101000a900460ff16908060000160039054906101000a900460ff16908060010154905085565b60008083141561216d5760009050612192565b6000828402905082848281151561218057fe5b0414151561218d57600080fd5b809150505b92915050565b600080821115156121a857600080fd5b600082848115156121b557fe5b0490508091505092915050565b60008282111515156121d357600080fd5b600082840390508091505092915050565b60008082840190508381101515156121fb57600080fd5b809150509291505056fea165627a7a723058203f1d8290bd6aa63af5cf0edcd1e0464da200dd819fb2322f4247b78fe303a1bf0029"
}