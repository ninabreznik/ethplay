{
  "address": "0xfea71f436ec963507c26f424d93168e4285cd822",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "batchTransfer",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-28\n*/\n\npragma solidity ^0.4.21;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract batchTransfer {\n    using SafeMath for uint256;\n    \n    uint public totalEther;\n    \n    function batchTransfer() public {\n        totalEther = 0;\n    }\n    \n    function distribute(address[] myAddresses) public payable {\n            require(myAddresses.length>0);\n            \n            uint256 value = msg.value;\n            uint256 length = myAddresses.length;\n            uint256 distr = value.div(length);\n            \n            if(length==1)\n            {\n               myAddresses[0].transfer(value);\n            }else\n            {\n                for(uint256 i=0;i<(length.sub(1));i++)\n                {\n                    myAddresses[i].transfer(distr);\n                    value = value.sub(distr);\n                }\n                myAddresses[myAddresses.length-1].transfer(value);\n            }\n            \n            totalEther = totalEther.add(msg.value);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506000808190555061031d806100276000396000f30060806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680636138889b14610051578063ae6e22f1146100aa575b600080fd5b6100a8600480360381019080803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506100d5565b005b3480156100b657600080fd5b506100bf610299565b6040518082815260200191505060405180910390f35b600080600080600085511115156100eb57600080fd5b34935084519250610105838561029f90919063ffffffff16565b915060018314156101745784600081518110151561011f57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f1935050505015801561016e573d6000803e3d6000fd5b50610277565b600090505b61018d6001846102ba90919063ffffffff16565b8110156102145784818151811015156101a257fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156101f1573d6000803e3d6000fd5b5061020582856102ba90919063ffffffff16565b93508080600101915050610179565b84600186510381518110151561022657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f19350505050158015610275573d6000803e3d6000fd5b505b61028c346000546102d390919063ffffffff16565b6000819055505050505050565b60005481565b60008082848115156102ad57fe5b0490508091505092915050565b60008282111515156102c857fe5b818303905092915050565b60008082840190508381101515156102e757fe5b80915050929150505600a165627a7a7230582088f47f15452822e67262da3534ca6fceecaf614b2697ea3cc34b9feb9fb29a400029"
}