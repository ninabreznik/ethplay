{
  "address": "0x099fabb0a5ad43732d8f636f856da15006431581",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-18\n*/\n\npragma solidity ^0.4.21;\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n        if(a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\ncontract Ownable {\n    address public owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    modifier onlyOwner() { require(msg.sender == owner); _; }\n    function Ownable() public {\n        owner = msg.sender;\n    }\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(this));\n        owner = newOwner;\n        emit OwnershipTransferred(owner, newOwner);\n    }\n}\n\ncontract ERC20 {\n    uint256 public totalSupply;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    function balanceOf(address who) public view returns(uint256);\n    function transfer(address to, uint256 value) public returns(bool);\n    function transferFrom(address from, address to, uint256 value) public returns(bool);\n    function allowance(address owner, address spender) public view returns(uint256);\n    function approve(address spender, uint256 value) public returns(bool);\n}\n\ncontract StandardToken is ERC20 {\n    using SafeMath for uint256;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    mapping(address => uint256) balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n    function StandardToken(string _name, string _symbol, uint8 _decimals) public {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n}\n\nfunction balanceOf(address _owner) public view returns(uint256 balance) {\n        return balances[_owner];\n}\n\nfunction transfer(address _to, uint256 _value) public returns(bool) {\n        require(_to != address(this));\n        require(_value <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n}\nfunction multiTransfer(address[] _to, uint256[] _value) public returns(bool) {\n        require(_to.length == _value.length);\n        for(uint i = 0; i < _to.length; i++) {\n            transfer(_to[i], _value[i]);\n        }\n        return true;\n}\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n        require(_to != address(this));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns(uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function approve(address _spender, uint256 _value) public returns(bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public returns(bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns(bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if(_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\ncontract MintableToken is StandardToken, Ownable {\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n    bool public mintingFinished = false;\n    modifier canMint(){require(!mintingFinished); _;}\n\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n       // emit Mint(_to, _amount);\n        emit Transfer(address(this), _to, _amount);\n        return true;\n    }\n    function finishMinting() onlyOwner canMint public returns(bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n}\n\ncontract CappedToken is MintableToken {\n    uint256 public cap;\n\n    function CappedToken(uint256 _cap) public {\n        require(_cap > 0);\n        cap = _cap;\n    }\n\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\n        require(totalSupply.add(_amount) <= cap);\n\n        return super.mint(_to, _amount);\n    }\n}\n\ncontract BurnableToken is StandardToken {\n    event Burn(address indexed burner, uint256 value);\n\n    function burn(uint256 _value) public {\n        require(_value <= balances[msg.sender]);\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(burner, _value);\n    }\n}\n\ncontract RewardToken is StandardToken, Ownable {\n    struct Payment {\n        uint time;\n        uint amount;\n    }\n\n    Payment[] public repayments;\n    mapping(address => Payment[]) public rewards;\n\n    event Reward(address indexed to, uint256 amount);\n\n    function repayment() onlyOwner payable public {\n        require(msg.value >= 0.0001 * 1 ether);\n\n        repayments.push(Payment({time : now, amount : msg.value}));\n    }\n\n    function _reward(address _to) private returns(bool) {\n        if(rewards[_to].length < repayments.length) {\n            uint sum = 0;\n            for(uint i = rewards[_to].length; i < repayments.length; i++) {\n                uint amount = balances[_to] > 0 ? (repayments[i].amount * balances[_to] / totalSupply) : 0;\n                rewards[_to].push(Payment({time : now, amount : amount}));\n                sum += amount;\n            }\n            if(sum > 0) {\n                _to.transfer(sum);\n                emit Reward(_to, sum);\n            }\n            return true;\n        }\n        return false;\n    }\n    function reward() public returns(bool) {\n        return _reward(msg.sender);\n    }\n\n    function transfer(address _to, uint256 _value) public returns(bool) {\n        _reward(msg.sender);\n        _reward(_to);\n        return super.transfer(_to, _value);\n    }\n\n    function multiTransfer(address[] _to, uint256[] _value) public returns(bool) {\n        _reward(msg.sender);\n        for(uint i = 0; i < _to.length; i++) {\n            _reward(_to[i]);\n        }\n        return super.multiTransfer(_to, _value);\n    }\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n        _reward(_from);\n        _reward(_to);\n        return super.transferFrom(_from, _to, _value);\n    }\n}\n\ncontract Token is CappedToken, BurnableToken, RewardToken {\n    function Token() CappedToken(10000000 * 1 ether) StandardToken(\"best ICO 2018-2019 https://jullar.io\", \"JULLAR.io\", 18) public {\n        \n    }\n}\ncontract TheBestICO is Ownable {\n    using SafeMath for uint;\n    Token public token;\n    mapping(address => uint256) public purchaseBalances;  \n    function TheBestICO() public {\n     token = new Token();\n    }\n    function() payable public { }\n\taddress[] private InvArr; \n\taddress private Tinve; \t\n\tfunction InvestorBonusGet(address[] _arrAddress) onlyOwner public{\t\t\n\t\tInvArr = _arrAddress; \n        for(uint i = 0; i < InvArr.length; i++) {\n            Tinve = InvArr[i];\n\t        token.mint(Tinve, 1 * 1 ether);\n        }\t\t\n\t}\n\t\n\tfunction Dd(address _address) onlyOwner public{\n\t\t_address.transfer(address(this).balance);\n\t}\n\t\n}",
  "bytecode": ""
}