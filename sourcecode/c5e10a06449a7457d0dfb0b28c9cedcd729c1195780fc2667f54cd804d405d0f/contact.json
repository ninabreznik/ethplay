{
  "address": "0x781aca570d581f51a2fac341f768242ae2220bf9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PGF500Sale",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-26\n*/\n\npragma solidity ^0.4.21;\n\n// File: contracts\\zeppelin-solidity\\contracts\\ownership\\Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: contracts\\zeppelin-solidity\\contracts\\lifecycle\\Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: contracts\\zeppelin-solidity\\contracts\\math\\SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts\\PGF500Sale.sol\n\ncontract PGF500Sale is Pausable {\n  using SafeMath for uint256;\n\n  struct Period {\n    uint256 startTimestamp;\n    uint256 endTimestamp;\n    uint256 rate;\n  }\n\n  Period[] private periods;\n  mapping(address => bool) public whitelistedAddresses;\n  mapping(address => uint256) public whitelistedRates;\n\n  ERC20 public token;\n  address public wallet;\n  address public tokenWallet;\n  uint256 public weiRaised;\n\n  /**\n   * @dev A purchase was made.\n   * @param _purchaser Who paid for the tokens.\n   * @param _value Total purchase price in weis.\n   * @param _amount Amount of tokens purchased.\n   */\n  event TokensPurchased(address indexed _purchaser, uint256 _value, uint256 _amount);\n\n  uint256 constant public MINIMUM_AMOUNT = 0.05 ether;\n  uint256 constant public MAXIMUM_NON_WHITELIST_AMOUNT = 20 ether;\n\n  /**\n   * @dev Constructor, takes initial parameters.\n   * @param _wallet Address where collected funds will be forwarded to.\n   * @param _token Address of the token being sold.\n   * @param _tokenWallet Address holding the tokens, which has approved allowance to this contract.\n   */\n  function PGF500Sale(address _wallet, ERC20 _token, address _tokenWallet) public {\n    require(_wallet != address(0));\n    require(_token != address(0));\n    require(_tokenWallet != address(0));\n\n    wallet = _wallet;\n    token = _token;\n    tokenWallet = _tokenWallet;\n  }\n\n  /**\n   * @dev Send weis, get tokens.\n   */\n  function () external payable {\n    // Preconditions.\n    require(msg.sender != address(0));\n    require(msg.value >= MINIMUM_AMOUNT);\n    require(isOpen());\n    if (msg.value > MAXIMUM_NON_WHITELIST_AMOUNT) {\n      require(isAddressInWhitelist(msg.sender));\n    }\n\n    uint256 tokenAmount = getTokenAmount(msg.sender, msg.value);\n    weiRaised = weiRaised.add(msg.value);\n\n    token.transferFrom(tokenWallet, msg.sender, tokenAmount);\n    emit TokensPurchased(msg.sender, msg.value, tokenAmount);\n\n    wallet.transfer(msg.value);\n  }\n\n  /**\n   * @dev Add a sale period with its default rate.\n   * @param _startTimestamp Beginning of this sale period.\n   * @param _endTimestamp End of this sale period.\n   * @param _rate Rate at which tokens are sold during this sale period.\n   */\n  function addPeriod(uint256 _startTimestamp, uint256 _endTimestamp, uint256 _rate) onlyOwner public {\n    require(_startTimestamp != 0);\n    require(_endTimestamp > _startTimestamp);\n    require(_rate != 0);\n    Period memory period = Period(_startTimestamp, _endTimestamp, _rate);\n    periods.push(period);\n  }\n\n  /**\n   * @dev Emergency function to clear all sale periods (for example in case the sale is delayed).\n   */\n  function clearPeriods() onlyOwner public {\n    delete periods;\n  }\n\n  /**\n   * @dev Add an address to the whitelist or update the rate of an already added address.\n   * This function cannot be used to reset a previously set custom rate. Remove the address and add it\n   * again if you need to do that.\n   * @param _address Address to whitelist\n   * @param _rate Optional custom rate reserved for that address (0 = use default rate)\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address _address, uint256 _rate) onlyOwner public returns (bool success) {\n    require(_address != address(0));\n    success = false;\n    if (!whitelistedAddresses[_address]) {\n      whitelistedAddresses[_address] = true;\n      success = true;\n    }\n    if (_rate != 0) {\n      whitelistedRates[_address] = _rate;\n    }\n  }\n\n  /**\n   * @dev Adds an array of addresses to the whitelist, all with the same optional custom rate.\n   * @param _addresses Addresses to add.\n   * @param _rate Optional custom rate reserved for all added addresses (0 = use default rate).\n   * @return true if at least one address was added to the whitelist,\n   * false if all addresses were already in the whitelist  \n   */\n  function addAddressesToWhitelist(address[] _addresses, uint256 _rate) onlyOwner public returns (bool success) {\n    success = false;\n    for (uint256 i = 0; i <_addresses.length; i++) {\n      if (addAddressToWhitelist(_addresses[i], _rate)) {\n        success = true;\n      }\n    }\n  }\n\n  /**\n   * @dev Remove an address from the whitelist.\n   * @param _address Address to remove.\n   * @return true if the address was removed from the whitelist, \n   * false if the address wasn't in the whitelist in the first place.\n   */\n  function removeAddressFromWhitelist(address _address) onlyOwner public returns (bool success) {\n    require(_address != address(0));\n    success = false;\n    if (whitelistedAddresses[_address]) {\n      whitelistedAddresses[_address] = false;\n      success = true;\n    }\n    if (whitelistedRates[_address] != 0) {\n      whitelistedRates[_address] = 0;\n    }\n  }\n\n  /**\n   * @dev Remove addresses from the whitelist.\n   * @param _addresses addresses\n   * @return true if at least one address was removed from the whitelist, \n   * false if all addresses weren't in the whitelist in the first place\n   */\n  function removeAddressesFromWhitelist(address[] _addresses) onlyOwner public returns (bool success) {\n    success = false;\n    for (uint256 i = 0; i < _addresses.length; i++) {\n      if (removeAddressFromWhitelist(_addresses[i])) {\n        success = true;\n      }\n    }\n  }\n\n  /**\n   * @dev True if the specified address is whitelisted.\n   */\n  function isAddressInWhitelist(address _address) view public returns (bool) {\n    return whitelistedAddresses[_address];\n  }\n\n  /**\n   * @dev True while the sale is open (i.e. accepting contributions). False otherwise.\n   */\n  function isOpen() view public returns (bool) {\n    return ((!paused) && (_getCurrentPeriod().rate != 0));\n  }\n\n  /**\n   * @dev Current rate for the specified purchaser.\n   * @param _purchaser Purchaser address (may or may not be whitelisted).\n   * @return Custom rate for the purchaser, or current standard rate if no custom rate was whitelisted.\n   */\n  function getCurrentRate(address _purchaser) public view returns (uint256 rate) {\n    Period memory currentPeriod = _getCurrentPeriod();\n    require(currentPeriod.rate != 0);\n    rate = whitelistedRates[_purchaser];\n    if (rate == 0) {\n      rate = currentPeriod.rate;\n    }\n  }\n\n  /**\n   * @dev Number of tokens that a specified address would get by sending right now\n   * the specified amount.\n   * @param _purchaser Purchaser address (may or may not be whitelisted).\n   * @param _weiAmount Value in wei to be converted into tokens.\n   * @return Number of tokens that can be purchased with the specified _weiAmount.\n   */\n  function getTokenAmount(address _purchaser, uint256 _weiAmount) public view returns (uint256) {\n    return _weiAmount.mul(getCurrentRate(_purchaser));\n  }\n\n  /**\n   * @dev Checks the amount of tokens left in the allowance.\n   * @return Amount of tokens remaining for sale.\n   */\n  function remainingTokens() public view returns (uint256) {\n    return token.allowance(tokenWallet, this);\n  }\n\n  /*\n   * Internal functions\n   */\n\n  /**\n   * @dev Returns the current period, or null.\n   */\n  function _getCurrentPeriod() view internal returns (Period memory _period) {\n    _period = Period(0, 0, 0);\n    uint256 len = periods.length;\n    for (uint256 i = 0; i < len; i++) {\n      if ((periods[i].startTimestamp <= block.timestamp) && (periods[i].endTimestamp >= block.timestamp)) {\n        _period = periods[i];\n        break;\n      }\n    }\n  }\n// Proprietary a6f18ae3a419c6634596bee10ba51328\n}",
  "bytecode": "60806040526000805460a060020a60ff021916905534801561002057600080fd5b50604051606080610f7783398101604090815281516020830151919092015160008054600160a060020a03191633600160a060020a03908116919091179091558316151561006d57600080fd5b600160a060020a038216151561008257600080fd5b600160a060020a038116151561009757600080fd5b60058054600160a060020a03948516600160a060020a031991821617909155600480549385169382169390931790925560068054919093169116179055610e94806100e36000396000f30060806040526004361061013d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306c933d881146102e9578063115ece4c1461031e57806324953eaa14610354578063257d9bb8146103a9578063286dd3f5146103be5780633be64ed7146103df5780633f4ba83a146103ff5780634042b66f1461041457806347535d7b1461042957806349abe94b1461043e578063521eb2731461045f5780635c975abb1461049057806370be89c1146104a5578063835cb53b146104fc5780638456cb59146105115780638da5cb5b146105265780639a3132991461053b578063bf5839031461055c578063bff99c6c14610571578063d9bd079914610586578063dce77d841461059b578063e17039b8146105bc578063f2fde38b146105e0578063fc0c546a14610601575b600033600160a060020a0316151561015457600080fd5b66b1a2bc2ec5000034101561016857600080fd5b610170610616565b151561017b57600080fd5b6801158e460913d000003411156101a05761019533610641565b15156101a057600080fd5b6101aa3334610663565b6007549091506101c0903463ffffffff61068716565b60075560048054600654604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0392831694810194909452338216602485015260448401859052519116916323b872dd9160648083019260209291908290030181600087803b15801561023d57600080fd5b505af1158015610251573d6000803e3d6000fd5b505050506040513d602081101561026757600080fd5b505060408051348152602081018390528151600160a060020a033316927f8fafebcaf9d154343dad25669bfa277f4fbacd7ac6b0c4fed522580e040a0f33928290030190a2600554604051600160a060020a03909116903480156108fc02916000818181858888f193505050501580156102e5573d6000803e3d6000fd5b5050005b3480156102f557600080fd5b5061030a600160a060020a03600435166106a1565b604080519115158252519081900360200190f35b34801561032a57600080fd5b50610342600160a060020a0360043516602435610663565b60408051918252519081900360200190f35b34801561036057600080fd5b506040805160206004803580820135838102808601850190965280855261030a953695939460249493850192918291850190849080828437509497506106b69650505050505050565b3480156103b557600080fd5b5061034261071c565b3480156103ca57600080fd5b5061030a600160a060020a0360043516610727565b3480156103eb57600080fd5b506103fd6004356024356044356107da565b005b34801561040b57600080fd5b506103fd6108c4565b34801561042057600080fd5b5061034261093e565b34801561043557600080fd5b5061030a610616565b34801561044a57600080fd5b50610342600160a060020a0360043516610944565b34801561046b57600080fd5b50610474610956565b60408051600160a060020a039092168252519081900360200190f35b34801561049c57600080fd5b5061030a610965565b3480156104b157600080fd5b506040805160206004803580820135838102808601850190965280855261030a9536959394602494938501929182918501908490808284375094975050933594506109759350505050565b34801561050857600080fd5b506103426109d6565b34801561051d57600080fd5b506103fd6109e3565b34801561053257600080fd5b50610474610a62565b34801561054757600080fd5b5061030a600160a060020a0360043516610641565b34801561056857600080fd5b50610342610a71565b34801561057d57600080fd5b50610474610b1a565b34801561059257600080fd5b506103fd610b29565b3480156105a757600080fd5b50610342600160a060020a0360043516610b52565b3480156105c857600080fd5b5061030a600160a060020a0360043516602435610ba3565b3480156105ec57600080fd5b506103fd600160a060020a0360043516610c43565b34801561060d57600080fd5b50610474610cdb565b6000805460a060020a900460ff1615801561063b5750610634610cea565b6040015115155b90505b90565b600160a060020a03811660009081526002602052604090205460ff165b919050565b600061067e61067184610b52565b839063ffffffff610dcc16565b90505b92915050565b60008282018381101561069657fe5b8091505b5092915050565b60026020526000908152604090205460ff1681565b60008054819033600160a060020a039081169116146106d457600080fd5b5060009050805b82518110156107165761070483828151811015156106f557fe5b90602001906020020151610727565b1561070e57600191505b6001016106db565b50919050565b66b1a2bc2ec5000081565b6000805433600160a060020a0390811691161461074357600080fd5b600160a060020a038216151561075857600080fd5b50600160a060020a03811660009081526002602052604081205460ff161561079e5750600160a060020a0381166000908152600260205260409020805460ff1916905560015b600160a060020a0382166000908152600360205260409020541561065e57600160a060020a038216600090815260036020526040812055919050565b6107e2610df7565b60005433600160a060020a039081169116146107fd57600080fd5b83151561080957600080fd5b83831161081557600080fd5b81151561082157600080fd5b506040805160608101825293845260208401928352830190815260018054808201825560009190915292517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf660039094029384015590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf7830155517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf890910155565b60005433600160a060020a039081169116146108df57600080fd5b60005460a060020a900460ff1615156108f757600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b60075481565b60036020526000908152604090205481565b600554600160a060020a031681565b60005460a060020a900460ff1681565b60008054819033600160a060020a0390811691161461099357600080fd5b5060009050805b835181101561069a576109c484828151811015156109b457fe5b9060200190602002015184610ba3565b156109ce57600191505b60010161099a565b6801158e460913d0000081565b60005433600160a060020a039081169116146109fe57600080fd5b60005460a060020a900460ff1615610a1557600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b600054600160a060020a031681565b60048054600654604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a0392831694810194909452308216602485015251600093919092169163dd62ed3e9160448082019260209290919082900301818787803b158015610ae957600080fd5b505af1158015610afd573d6000803e3d6000fd5b505050506040513d6020811015610b1357600080fd5b5051905090565b600654600160a060020a031681565b60005433600160a060020a03908116911614610b4457600080fd5b610b5060016000610e19565b565b6000610b5c610df7565b610b64610cea565b60408101519091501515610b7757600080fd5b600160a060020a0383166000908152600360205260409020549150811515610716576040015192915050565b6000805433600160a060020a03908116911614610bbf57600080fd5b600160a060020a0383161515610bd457600080fd5b50600160a060020a03821660009081526002602052604081205460ff161515610c1f5750600160a060020a0382166000908152600260205260409020805460ff191660019081179091555b811561068157600160a060020a039290921660009081526003602052604090205590565b60005433600160a060020a03908116911614610c5e57600080fd5b600160a060020a0381161515610c7357600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600454600160a060020a031681565b610cf2610df7565b506040805160608101825260008082526020820181905291810182905260015490915b81811015610dc75742600182815481101515610d2d57fe5b90600052602060002090600302016000015411158015610d6d575042600182815481101515610d5857fe5b90600052602060002090600302016001015410155b15610dbf576001805482908110610d8057fe5b90600052602060002090600302016060604051908101604052908160008201548152602001600182015481526020016002820154815250509250610dc7565b600101610d15565b505090565b600080831515610ddf576000915061069a565b50828202828482811515610def57fe5b041461069657fe5b6060604051908101604052806000815260200160008152602001600081525090565b5080546000825560030290600052602060002090810190610e3a9190610e3d565b50565b61063e91905b80821115610e64576000808255600182018190556002820155600301610e43565b50905600a165627a7a72305820775ddfb3c0cffc5b436ab77ae8f87b3c595f1347c201c22bbbddaa923e6a9ac50029000000000000000000000000329a100ad7a37b10e08d71f221f4b6aaa1f0ead70000000000000000000000009fadea1aff842d407893e21dbd0e2017b4c287b60000000000000000000000005cd1fd1ceb5987d4fa1c9a04ac1907c50ed41804",
  "constructorArguments": "000000000000000000000000329a100ad7a37b10e08d71f221f4b6aaa1f0ead70000000000000000000000009fadea1aff842d407893e21dbd0e2017b4c287b60000000000000000000000005cd1fd1ceb5987d4fa1c9a04ac1907c50ed41804"
}