{
  "address": "0x964C1F7B4c7F5433Cc9b2398CB78dDb9D76D8832",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-08\n*/\n\npragma solidity 0.5.7;\n\n/**\n * @title SafeMath \n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on underflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n}\n/**\n * @title Token\n * @dev Implementation of the basic standard token.\n * https://eips.ethereum.org/EIPS/eip-20\n */\ncontract Token {\n    using SafeMath for uint256;\n    \n    string public constant name = \"5G Cloud Chain\";\n    string public constant symbol = \"5GCC\";\n    uint8 public constant decimals = 4;\n\n    uint256 private constant INITIAL_SUPPLY = 1e9;\n    uint256 public constant totalSupply = INITIAL_SUPPLY * 10 ** uint256(decimals);\n\n    address public constant wallet = 0x25c5141A20f2D901C2fbA19131C8f6dccdE90399;\n\n    mapping (address => uint256) internal _balances;\n    mapping (address => mapping (address => uint256)) internal _allowed;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor() public {\n        _balances[wallet] = totalSupply;\n        emit Transfer(address(0), wallet, totalSupply);\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified address.\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0), \"Cannot transfer to zero address\");\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0), \"Cannot approve to the zero address\");\n        require(owner != address(0), \"Setter cannot be a zero address\");\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b507325c5141a20f2d901c2fba19131c8f6dccde90399600081815260208181526509184e72a0007f3aa08104be4b111a2aa3bf1903aee2e757315e6ad95e383c22bee6f47201812081905560408051918252517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a361073d8061009d6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063521eb27311610071578063521eb2731461021057806370a082311461023457806395d89b411461025a578063a457c2d714610262578063a9059cbb1461028e578063dd62ed3e146102ba576100b4565b806306fdde03146100b9578063095ea7b31461013657806318160ddd1461017657806323b872dd14610190578063313ce567146101c657806339509351146101e4575b600080fd5b6100c16102e8565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100fb5781810151838201526020016100e3565b50505050905090810190601f1680156101285780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101626004803603604081101561014c57600080fd5b506001600160a01b038135169060200135610321565b604080519115158252519081900360200190f35b61017e610337565b60408051918252519081900360200190f35b610162600480360360608110156101a657600080fd5b506001600160a01b03813581169160208101359091169060400135610341565b6101ce610398565b6040805160ff9092168252519081900360200190f35b610162600480360360408110156101fa57600080fd5b506001600160a01b03813516906020013561039d565b6102186103d9565b604080516001600160a01b039092168252519081900360200190f35b61017e6004803603602081101561024a57600080fd5b50356001600160a01b03166103f1565b6100c161040c565b6101626004803603604081101561027857600080fd5b506001600160a01b03813516906020013561042f565b610162600480360360408110156102a457600080fd5b506001600160a01b03813516906020013561046b565b61017e600480360360408110156102d057600080fd5b506001600160a01b0381358116916020013516610478565b6040518060400160405280600e81526020017f354720436c6f756420436861696e00000000000000000000000000000000000081525081565b600061032e3384846104a3565b50600192915050565b6509184e72a00081565b600061034e8484846105ab565b6001600160a01b03841660009081526001602090815260408083203380855292529091205461038e918691610389908663ffffffff6106c116565b6104a3565b5060019392505050565b600481565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161032e918590610389908663ffffffff6106d616565b7325c5141a20f2d901c2fba19131c8f6dccde9039981565b6001600160a01b031660009081526020819052604090205490565b604051806040016040528060048152602001600160e01b63354743430281525081565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161032e918590610389908663ffffffff6106c116565b600061032e3384846105ab565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0382166104eb57604051600160e51b62461bcd0281526004018080602001828103825260228152602001806106f06022913960400191505060405180910390fd5b6001600160a01b0383166105495760408051600160e51b62461bcd02815260206004820152601f60248201527f5365747465722063616e6e6f742062652061207a65726f206164647265737300604482015290519081900360640190fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0382166106095760408051600160e51b62461bcd02815260206004820152601f60248201527f43616e6e6f74207472616e7366657220746f207a65726f206164647265737300604482015290519081900360640190fd5b6001600160a01b038316600090815260208190526040902054610632908263ffffffff6106c116565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610667908263ffffffff6106d616565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828211156106d057600080fd5b50900390565b6000828201838110156106e857600080fd5b939250505056fe43616e6e6f7420617070726f766520746f20746865207a65726f2061646472657373a165627a7a72305820e969d83b758d131bdef8706f26d0491d3d838ccdea2e2e43760179196a19b49f0029"
}