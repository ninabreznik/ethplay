{
  "address": "0x6f7a4bac3315b5082f793161a22e26666d22717f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "YeedToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-12\n*/\n\npragma solidity ^0.4.11;\n/**\n    ERC20 Interface\n    @author DongOk Peter Ryu - <[email protected]>\n*/\ncontract ERC20 {\n    function totalSupply() public constant returns (uint supply);\n    function balanceOf( address who ) public constant returns (uint value);\n    function allowance( address owner, address spender ) public constant returns (uint _allowance);\n\n    function transfer( address to, uint value) public returns (bool ok);\n    function transferFrom( address from, address to, uint value) public returns (bool ok);\n    function approve( address spender, uint value ) public returns (bool ok);\n\n    event Transfer( address indexed from, address indexed to, uint value);\n    event Approval( address indexed owner, address indexed spender, uint value);\n}\n/**\n    LOCKABLE TOKEN\n    @author DongOk Peter Ryu - <[email protected]>\n*/\ncontract Lockable {\n    uint public creationTime;\n    bool public lock;\n    bool public tokenTransfer;\n    address public owner;\n    mapping( address => bool ) public unlockaddress;\n    // lockaddress List\n    mapping( address => bool ) public lockaddress;\n\n    // LOCK EVENT\n    event Locked(address lockaddress,bool status);\n    // UNLOCK EVENT\n    event Unlocked(address unlockedaddress, bool status);\n\n\n    // if Token transfer\n    modifier isTokenTransfer {\n        // if token transfer is not allow\n        if(!tokenTransfer) {\n            require(unlockaddress[msg.sender]);\n        }\n        _;\n    }\n\n    // This modifier check whether the contract should be in a locked\n    // or unlocked state, then acts and updates accordingly if\n    // necessary\n    modifier checkLock {\n        assert(!lockaddress[msg.sender]);\n        _;\n    }\n\n    modifier isOwner\n    {\n        require(owner == msg.sender);\n        _;\n    }\n\n    function Lockable()\n    public\n    {\n        creationTime = now;\n        tokenTransfer = false;\n        owner = msg.sender;\n    }\n\n    // Lock Address\n    function lockAddress(address target, bool status)\n    external\n    isOwner\n    {\n        require(owner != target);\n        lockaddress[target] = status;\n        Locked(target, status);\n    }\n\n    // UnLock Address\n    function unlockAddress(address target, bool status)\n    external\n    isOwner\n    {\n        unlockaddress[target] = status;\n        Unlocked(target, status);\n    }\n}\n\nlibrary SafeMath {\n  function mul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint a, uint b) internal returns (uint) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n\n}\n/**\n    YGGDRASH Token\n    @author DongOk Peter Ryu - <[email protected]>\n*/\ncontract YeedToken is ERC20, Lockable {\n\n    // ADD INFORMATION\n    string public constant name = \"YGGDRASH\";\n    string public constant symbol = \"YEED\";\n    uint8 public constant decimals = 18;  // 18 is the most common number of decimal places\n\n    using SafeMath for uint;\n\n    mapping( address => uint ) _balances;\n    mapping( address => mapping( address => uint ) ) _approvals;\n    uint _supply;\n    address public walletAddress;\n\n    event TokenBurned(address burnAddress, uint amountOfTokens);\n    event TokenTransfer();\n\n    modifier onlyFromWallet {\n        require(msg.sender != walletAddress);\n        _;\n    }\n\n    function YeedToken( uint initial_balance, address wallet)\n    public\n    {\n        require(wallet != 0);\n        require(initial_balance != 0);\n        _balances[msg.sender] = initial_balance;\n        _supply = initial_balance;\n        walletAddress = wallet;\n    }\n\n    function totalSupply() public constant returns (uint supply) {\n        return _supply;\n    }\n\n    function balanceOf( address who ) public constant returns (uint value) {\n        return _balances[who];\n    }\n\n    function allowance(address owner, address spender) public constant returns (uint _allowance) {\n        return _approvals[owner][spender];\n    }\n\n    function transfer( address to, uint value)\n    public\n    isTokenTransfer\n    checkLock\n    returns (bool success) {\n\n        require( _balances[msg.sender] >= value );\n\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\n        _balances[to] = _balances[to].add(value);\n        Transfer( msg.sender, to, value );\n        return true;\n    }\n\n    function transferFrom( address from, address to, uint value)\n    public\n    isTokenTransfer\n    checkLock\n    returns (bool success) {\n        // if you don't have enough balance, throw\n        require( _balances[from] >= value );\n        // if you don't have approval, throw\n        require( _approvals[from][msg.sender] >= value );\n        // transfer and return true\n        _approvals[from][msg.sender] = _approvals[from][msg.sender].sub(value);\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        Transfer( from, to, value );\n        return true;\n    }\n\n    function approve(address spender, uint value)\n    public\n    checkLock\n    returns (bool success) {\n        _approvals[msg.sender][spender] = value;\n        Approval( msg.sender, spender, value );\n        return true;\n    }\n\n    // burnToken burn tokensAmount for sender balance\n    function burnTokens(uint tokensAmount)\n    public\n    isTokenTransfer\n    {\n        require( _balances[msg.sender] >= tokensAmount );\n\n        _balances[msg.sender] = _balances[msg.sender].sub(tokensAmount);\n        _supply = _supply.sub(tokensAmount);\n        TokenBurned(msg.sender, tokensAmount);\n\n    }\n\n\n    function enableTokenTransfer()\n    external\n    onlyFromWallet\n    {\n        tokenTransfer = true;\n        TokenTransfer();\n    }\n\n    function disableTokenTransfer()\n    external\n    onlyFromWallet\n    {\n        tokenTransfer = false;\n        TokenTransfer();\n    }\n\n    /* This unnamed function is called whenever someone tries to send ether to it */\n    function () public payable {\n        revert();\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"unlockAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"_allowance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"lockAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initial_balance\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"burnAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"TokenBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lockaddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"unlockedaddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b6040516040806118fe833981016040528080519060200190919080519060200190919050504260008190555060006001806101000a81548160ff02191690831515021790555033600160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff16141515156100bc57600080fd5b600082141515156100cc57600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160068190555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050611795806101696000396000f30060606040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610122578063095ea7b3146101b057806318160ddd1461020a57806323b872dd14610233578063313ce567146102ac5780633a764462146102db57806360805e5a146102f05780636ad5b3ea146103345780636c4eca27146103895780636d1b229d146103b657806370a08231146103d95780638da5cb5b1461042657806395d89b411461047b578063a9059cbb14610509578063cb7bba3914610563578063d8270dce146105b4578063dd62ed3e146105dd578063e2a9ca4c14610649578063ec4a79cf1461065e578063f2260031146106af578063f83d08ba146106f3575b600080fd5b341561012d57600080fd5b610135610720565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017557808201518184015260208101905061015a565b50505050905090810190601f1680156101a25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101bb57600080fd5b6101f0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610759565b604051808215151515815260200191505060405180910390f35b341561021557600080fd5b61021d6108a1565b6040518082815260200191505060405180910390f35b341561023e57600080fd5b610292600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108ab565b604051808215151515815260200191505060405180910390f35b34156102b757600080fd5b6102bf610cf3565b604051808260ff1660ff16815260200191505060405180910390f35b34156102e657600080fd5b6102ee610cf8565b005b34156102fb57600080fd5b610332600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080351515906020019091905050610d9d565b005b341561033f57600080fd5b610347610ec3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561039457600080fd5b61039c610ee9565b604051808215151515815260200191505060405180910390f35b34156103c157600080fd5b6103d76004808035906020019091905050610efb565b005b34156103e457600080fd5b610410600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506110d5565b6040518082815260200191505060405180910390f35b341561043157600080fd5b61043961111e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561048657600080fd5b61048e611144565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104ce5780820151818401526020810190506104b3565b50505050905090810190601f1680156104fb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561051457600080fd5b610549600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061117d565b604051808215151515815260200191505060405180910390f35b341561056e57600080fd5b61059a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061142a565b604051808215151515815260200191505060405180910390f35b34156105bf57600080fd5b6105c761144a565b6040518082815260200191505060405180910390f35b34156105e857600080fd5b610633600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611450565b6040518082815260200191505060405180910390f35b341561065457600080fd5b61065c6114d7565b005b341561066957600080fd5b610695600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061157c565b604051808215151515815260200191505060405180910390f35b34156106ba57600080fd5b6106f1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035151590602001909190505061159c565b005b34156106fe57600080fd5b61070661171f565b604051808215151515815260200191505060405180910390f35b6040805190810160405280600881526020017f594747445241534800000000000000000000000000000000000000000000000081525081565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156107b157fe5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600654905090565b60006001809054906101000a900460ff16151561091b57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561091a57600080fd5b5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561097157fe5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156109bf57600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610a4a57600080fd5b610ad982600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461173290919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bab82600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461173290919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c4082600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461174b90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610d5557600080fd5b60018060016101000a81548160ff0219169083151502179055507feb2cf4fc9168a2d848de8c48d73f2b6e32ef3b25eb1e730b673209b002bca01d60405160405180910390a1565b3373ffffffffffffffffffffffffffffffffffffffff16600160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610df957600080fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f5c42a6eb70f030b267ab6ddbc362cfe8dbe7cc3b42c590692fa695c58aeaca2b8282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001809054906101000a900460ff1681565b6001809054906101000a900460ff161515610f6957600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610f6857600080fd5b5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610fb757600080fd5b61100981600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461173290919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110618160065461173290919063ffffffff16565b6006819055507f1af5163f80e79b5e554f61e1d052084d3a3fe1166e42a265798c4e2ddce8ffa23382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600481526020017f594545440000000000000000000000000000000000000000000000000000000081525081565b60006001809054906101000a900460ff1615156111ed57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156111ec57600080fd5b5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561124357fe5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561129157600080fd5b6112e382600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461173290919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061137882600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461174b90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60036020528060005260406000206000915054906101000a900460ff1681565b60005481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415151561153457600080fd5b60006001806101000a81548160ff0219169083151502179055507feb2cf4fc9168a2d848de8c48d73f2b6e32ef3b25eb1e730b673209b002bca01d60405160405180910390a1565b60026020528060005260406000206000915054906101000a900460ff1681565b3373ffffffffffffffffffffffffffffffffffffffff16600160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156115f857600080fd5b8173ffffffffffffffffffffffffffffffffffffffff16600160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561165557600080fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fcaf46096bdd957e9271a7e46a00ff61870b80644805049e7ea814162a2b606bc8282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15050565b600160009054906101000a900460ff1681565b600082821115151561174057fe5b818303905092915050565b600080828401905083811015151561175f57fe5b80915050929150505600a165627a7a72305820bc44e13eaff5f0cf51e4adf29b7095d4df9b8bf3d2a064a3d3d7bf2823c1944f00290000000000000000000000000000000000000000204fce5e3e250261100000000000000000000000000000000000c72e03a01cd93b2b68b5e08b7bfd49182b3a",
  "constructorArguments": "0000000000000000000000000000000000000000204fce5e3e250261100000000000000000000000000000000000c72e03a01cd93b2b68b5e08b7bfd49182b3a"
}