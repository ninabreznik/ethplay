{
  "address": "0x5db8ec42496670c189a184ef3640fb6f18e2bb67",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BTR",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-13\n*/\n\npragma solidity ^0.4.24;\n\ncontract owned {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\n/**\n * Math operations with safety checks\n */\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\ncontract BTR is owned{\n    \n    using SafeMath for uint;\n    \n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOf;\n\tmapping (address => uint256) public freezeOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* This notifies clients about the amount burnt */\n    event Burn(address indexed from, uint256 value);\n\t\n\t/* This notifies clients about the amount frozen */\n    event Freeze(address indexed from, uint256 value);\n\t\n\t/* This notifies clients about the amount unfrozen */\n    event Unfreeze(address indexed from, uint256 value);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    constructor(string tokenName,string tokenSymbol,address tokenOwner) public {           \n        decimals = 18; // Amount of decimals for display purposes\n        totalSupply = 10000000000 * 10 ** uint(decimals); // Update total supply\n        balanceOf[tokenOwner] = totalSupply;// Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n\t\towner = tokenOwner;\n    }\n\n    /* Send coins */\n    function transfer(address _to, uint256 _value) public {\n        require (_to != address(0));                               // Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire (_value > 0); \n        require (balanceOf[msg.sender] >= _value);           // Check if the sender has enough\n        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);                     // Subtract from the sender\n        balanceOf[_to] = balanceOf[_to].add(_value);                            // Add the same to the recipient\n        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n    }\n\n    /* Allow another contract to spend some tokens in your behalf */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n\t\trequire (_value > 0);\n\t\trequire (balanceOf[msg.sender] >= _value);\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n       \n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require (_to != address(0));                                // Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire (_value > 0); \n        require (balanceOf[_from] >= _value);                 // Check if the sender has enough\n        require (balanceOf[_to] + _value >= balanceOf[_to]);  // Check for overflows\n        require (_value <= allowance[_from][msg.sender]);     // Check allowance\n        balanceOf[_from] = balanceOf[_from].sub(_value);                           // Subtract from the sender\n        balanceOf[_to] = balanceOf[_to].add(_value);                             // Add the same to the recipient\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require (balanceOf[msg.sender] >= _value);            // Check if the sender has enough\n\t\trequire (_value > 0); \n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);                      // Subtract from the sender\n        totalSupply = totalSupply.sub(_value);                                // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\t\n\tfunction freeze(uint256 _value) public returns (bool success) {\n        require (balanceOf[msg.sender] >= _value);            // Check if the sender has enough\n\t\trequire (_value > 0); \n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);                      // Subtract from the sender\n        freezeOf[msg.sender] = freezeOf[msg.sender].add(_value);                                // Updates totalSupply\n        emit Freeze(msg.sender, _value);\n        return true;\n    }\n\t\n\tfunction unfreeze(uint256 _value) public returns (bool success) {\n        require (freezeOf[msg.sender] >= _value);            // Check if the sender has enough\n\t\trequire (_value > 0); \n        freezeOf[msg.sender] = freezeOf[msg.sender].sub(_value);                      // Subtract from the sender\n\t\tbalanceOf[msg.sender] = balanceOf[msg.sender].add(_value);\n        emit Unfreeze(msg.sender, _value);\n        return true;\n    }\n\t\n\t// transfer balance to owner\n\tfunction withdrawEther(uint256 amount) onlyOwner public {\n\t    msg.sender.transfer(amount);\n\t}\n\t\n\t// can accept ether\n\tfunction() external payable {\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051610c6f380380610c6f83398101604090815281516020808401518385015160008054600160a060020a031916331781556003805460ff1916601217908190556402540be40060ff91909116600a0a026004819055600160a060020a038316825260058552959020949094559184018051909492909201929161009c91600191908601906100d9565b5081516100b09060029060208501906100d9565b5060008054600160a060020a031916600160a060020a0392909216919091179055506101749050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011a57805160ff1916838001178555610147565b82800160010185558215610147579182015b8281111561014757825182559160200191906001019061012c565b50610153929150610157565b5090565b61017191905b80821115610153576000815560010161015d565b90565b610aec806101836000396000f3006080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100e7578063095ea7b31461017157806318160ddd146101a957806323b872dd146101d0578063313ce567146101fa5780633bed33ce1461022557806342966c681461023d5780636623fc461461025557806370a082311461026d5780638da5cb5b1461028e57806395d89b41146102bf578063a9059cbb146102d4578063cd4217c1146102f8578063d7a78db814610319578063dd62ed3e14610331578063f2fde38b14610358575b005b3480156100f357600080fd5b506100fc610379565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561013657818101518382015260200161011e565b50505050905090810190601f1680156101635780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017d57600080fd5b50610195600160a060020a0360043516602435610406565b604080519115158252519081900360200190f35b3480156101b557600080fd5b506101be610460565b60408051918252519081900360200190f35b3480156101dc57600080fd5b50610195600160a060020a0360043581169060243516604435610466565b34801561020657600080fd5b5061020f610613565b6040805160ff9092168252519081900360200190f35b34801561023157600080fd5b506100e560043561061c565b34801561024957600080fd5b50610195600435610664565b34801561026157600080fd5b50610195600435610711565b34801561027957600080fd5b506101be600160a060020a03600435166107d7565b34801561029a57600080fd5b506102a36107e9565b60408051600160a060020a039092168252519081900360200190f35b3480156102cb57600080fd5b506100fc6107f8565b3480156102e057600080fd5b506100e5600160a060020a0360043516602435610850565b34801561030457600080fd5b506101be600160a060020a0360043516610960565b34801561032557600080fd5b50610195600435610972565b34801561033d57600080fd5b506101be600160a060020a0360043581169060243516610a38565b34801561036457600080fd5b506100e5600160a060020a0360043516610a55565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103fe5780601f106103d3576101008083540402835291602001916103fe565b820191906000526020600020905b8154815290600101906020018083116103e157829003601f168201915b505050505081565b600080821161041457600080fd5b3360009081526005602052604090205482111561043057600080fd5b50336000908152600760209081526040808320600160a060020a0386168452909152902081905560015b92915050565b60045481565b6000600160a060020a038316151561047d57600080fd5b6000821161048a57600080fd5b600160a060020a0384166000908152600560205260409020548211156104af57600080fd5b600160a060020a03831660009081526005602052604090205482810110156104d657600080fd5b600160a060020a038416600090815260076020908152604080832033845290915290205482111561050657600080fd5b600160a060020a03841660009081526005602052604090205461052f908363ffffffff610a9b16565b600160a060020a038086166000908152600560205260408082209390935590851681522054610564908363ffffffff610ab016565b600160a060020a0380851660009081526005602090815260408083209490945591871681526007825282812033825290915220546105a8908363ffffffff610a9b16565b600160a060020a03808616600081815260076020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60035460ff1681565b600054600160a060020a0316331461063357600080fd5b604051339082156108fc029083906000818181858888f19350505050158015610660573d6000803e3d6000fd5b5050565b3360009081526005602052604081205482111561068057600080fd5b6000821161068d57600080fd5b336000908152600560205260409020546106ad908363ffffffff610a9b16565b336000908152600560205260409020556004546106d0908363ffffffff610a9b16565b60045560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2506001919050565b3360009081526006602052604081205482111561072d57600080fd5b6000821161073a57600080fd5b3360009081526006602052604090205461075a908363ffffffff610a9b16565b33600090815260066020908152604080832093909355600590522054610786908363ffffffff610ab016565b33600081815260056020908152604091829020939093558051858152905191927f2cfce4af01bcb9d6cf6c84ee1b7c491100b8695368264146a94d71e10a63083f92918290030190a2506001919050565b60056020526000908152604090205481565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156103fe5780601f106103d3576101008083540402835291602001916103fe565b600160a060020a038216151561086557600080fd5b6000811161087257600080fd5b3360009081526005602052604090205481111561088e57600080fd5b600160a060020a03821660009081526005602052604090205481810110156108b557600080fd5b336000908152600560205260409020546108d5908263ffffffff610a9b16565b3360009081526005602052604080822092909255600160a060020a03841681522054610907908263ffffffff610ab016565b600160a060020a0383166000818152600560209081526040918290209390935580518481529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60066020526000908152604090205481565b3360009081526005602052604081205482111561098e57600080fd5b6000821161099b57600080fd5b336000908152600560205260409020546109bb908363ffffffff610a9b16565b336000908152600560209081526040808320939093556006905220546109e7908363ffffffff610ab016565b33600081815260066020908152604091829020939093558051858152905191927ff97a274face0b5517365ad396b1fdba6f68bd3135ef603e44272adba3af5a1e092918290030190a2506001919050565b600760209081526000928352604080842090915290825290205481565b600054600160a060020a03163314610a6c57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610aaa57600080fd5b50900390565b8181018281101561045a57600080fd00a165627a7a723058205c9845ff72c4805b030b7806c5c5852d23dbf8fe8c6cb4f00dc2093a23b8a7360029000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000cdce6adddb328cdb7b20efd96992938353a604990000000000000000000000000000000000000000000000000000000000000003425452000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034254520000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000cdce6adddb328cdb7b20efd96992938353a604990000000000000000000000000000000000000000000000000000000000000003425452000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034254520000000000000000000000000000000000000000000000000000000000"
}