{
  "address": "0x3594b81234a14d0051e817793dc300763ce48241",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ERC20_ICO",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-11\n*/\n\npragma solidity ^0.4.25;\n\n// ----------------------------------------------------------------------------\n// 'WRC'  token contract\n//\n// Owner Address : 0xB95E9dd364B904Ea03b1995B52d76922A7dc6a5e\n// Symbol        : WRC\n// Name          : WorkCoin Token\n// Total supply  : 2000000000\n// Decimals      : 18\n// POWERED BY WorkCoin.\n\n// (c) by Team @ WorkCoin 2019.\n// ----------------------------------------------------------------------------\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n*/\n\n\nlibrary SafeMath {\n    \n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n    }\n    \n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n    }\n    \n     /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n    }\n    \n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\n\ncontract owned {\n    address public owner;\n\n    constructor () public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract ERC20 is owned {\n   // Public variables of the token\n    string public name = \"WorkCoin Token\";\n    string public symbol = \"WRC\";\n    uint8 public decimals = 18;\n    uint256 public totalSupply = 2000000000 * 10 ** uint256(decimals);\n\n    /// contract that is allowed to create new tokens and allows unlift the transfer limits on this token\n    address public ICO_Contract;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => bool) public frozenAccount;\n   \n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n    \n     // This notifies clients about the amount burnt\n       event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    constructor () public {\n        balanceOf[owner] = totalSupply;\n    }\n    \n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint256 _value)  internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Check if sender is frozen\n        require(!frozenAccount[_from]);\n        // Check if recipient is frozen\n        require(!frozenAccount[_to]);\n        // Save this for an assertion in the future\n        uint256 previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n    \n    /// @notice Create `mintedAmount` tokens and send it to `target`\n    /// @param target Address to receive the tokens\n    /// @param mintedAmount the amount of tokens it will receive\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balanceOf[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        emit Transfer(this, target, mintedAmount);\n    }\n     /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n    \n    /// @dev Set the ICO_Contract.\n    /// @param _ICO_Contract crowdsale contract address\n    function setICO_Contract(address _ICO_Contract) onlyOwner public {\n        ICO_Contract = _ICO_Contract;\n    }\n}\ncontract Killable is owned {\n    function kill() onlyOwner public {\n        selfdestruct(owner);\n    }\n}\ncontract ERC20_ICO is Killable {\n\n    /// The token we are selling\n    ERC20 public token;\n\n    /// the UNIX timestamp start date of the crowdsale\n    uint256 public startsAt = 1559390400;\n\n    /// the UNIX timestamp end date of the crowdsale\n    uint256 public endsAt = 1561982400;\n\n    /// the price of token\n    uint256 public TokenPerETH = 140;\n\n    /// Has this crowdsale been finalized\n    bool public finalized = false;\n\n    /// the number of tokens already sold through this contract\n    uint256 public tokensSold = 0;\n\n    /// the number of ETH raised through this contract\n    uint256 public weiRaised = 0;\n\n    /// How many distinct addresses have invested\n    uint256 public investorCount = 0;\n    \n    /// How much ETH each address has invested to this crowdsale\n    mapping (address => uint256) public investedAmountOf;\n    \n    event Invested(address investor, uint256 weiAmount, uint256 tokenAmount);\n    /// Crowdsale Start time has been changed\n    event StartsAtChanged(uint256 startsAt);\n    /// Crowdsale end time has been changed\n    event EndsAtChanged(uint256 endsAt);\n    /// Calculated new price\n    event RateChanged(uint256 oldValue, uint256 newValue);\n    \n    constructor (address _token) public {\n        token = ERC20(_token);\n    }\n    \n    function investInternal(address receiver) private {\n        require(!finalized);\n        require(startsAt <= now && endsAt > now);\n\n        if(investedAmountOf[receiver] == 0) {\n            // A new investor\n            investorCount++;\n        }\n\n        // Update investor\n        uint256 tokensAmount = msg.value * TokenPerETH;\n        investedAmountOf[receiver] += msg.value;\n        // Update totals\n        tokensSold += tokensAmount;\n        weiRaised += msg.value;\n\n        // Emit an event that shows invested successfully\n        emit Invested(receiver, msg.value, tokensAmount);\n        \n        // Transfer Token to owner's address\n        token.transfer(receiver, tokensAmount);\n\n        // Transfer Fund to owner's address\n        owner.transfer(address(this).balance);\n\n    }\n    \n    \n    function () public payable {\n        investInternal(msg.sender);\n    }\n\n    function setStartsAt(uint256 time) onlyOwner public {\n        require(!finalized);\n        startsAt = time;\n        emit StartsAtChanged(startsAt);\n    }\n    function setEndsAt(uint256 time) onlyOwner public {\n        require(!finalized);\n        endsAt = time;\n        emit EndsAtChanged(endsAt);\n    }\n    function setRate(uint256 value) onlyOwner public {\n        require(!finalized);\n        require(value > 0);\n        emit RateChanged(TokenPerETH, value);\n        TokenPerETH = value;\n    }\n\n    function finalize() public onlyOwner {\n        // Finalized Pre ICO crowdsele.\n        finalized = true;\n        uint256 tokensAmount = token.balanceOf(this);\n        token.transfer(owner, tokensAmount);\n    }\n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"endsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TokenPerETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setEndsAt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setStartsAt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startsAt\",\"type\":\"uint256\"}],\"name\":\"StartsAtChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"endsAt\",\"type\":\"uint256\"}],\"name\":\"EndsAtChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"RateChanged\",\"type\":\"event\"}]",
  "bytecode": "6080604052635cf268c0600255635d19f5c0600355608c6004556000600560006101000a81548160ff02191690831515021790555060006006556000600755600060085534801561004f57600080fd5b50604051602080610eb183398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610dae806101036000396000f3006080604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a09284a146100f15780631aae34601461011c57806334fcf437146101735780633f52c660146101a05780634042b66f146101cb57806341c0e1b5146101f65780634bb278f31461020d578063518ab2a8146102245780636e50eb3f1461024f5780638da5cb5b1461027c578063af468682146102d3578063b3f05b97146102fe578063bf5fc2ee1461032d578063d7e64c001461035a578063f2fde38b14610385578063fc0c546a146103c8575b6100ef3361041f565b005b3480156100fd57600080fd5b506101066106fd565b6040518082815260200191505060405180910390f35b34801561012857600080fd5b5061015d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610703565b6040518082815260200191505060405180910390f35b34801561017f57600080fd5b5061019e6004803603810190808035906020019092919050505061071b565b005b3480156101ac57600080fd5b506101b56107ec565b6040518082815260200191505060405180910390f35b3480156101d757600080fd5b506101e06107f2565b6040518082815260200191505060405180910390f35b34801561020257600080fd5b5061020b6107f8565b005b34801561021957600080fd5b5061022261088d565b005b34801561023057600080fd5b50610239610b00565b6040518082815260200191505060405180910390f35b34801561025b57600080fd5b5061027a60048036038101908080359060200190929190505050610b06565b005b34801561028857600080fd5b50610291610bc0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102df57600080fd5b506102e8610be5565b6040518082815260200191505060405180910390f35b34801561030a57600080fd5b50610313610beb565b604051808215151515815260200191505060405180910390f35b34801561033957600080fd5b5061035860048036038101908080359060200190929190505050610bfe565b005b34801561036657600080fd5b5061036f610cb8565b6040518082815260200191505060405180910390f35b34801561039157600080fd5b506103c6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cbe565b005b3480156103d457600080fd5b506103dd610d5c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000600560009054906101000a900460ff1615151561043d57600080fd5b4260025411158015610450575042600354115b151561045b57600080fd5b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156104b6576008600081548092919060010191905055505b6004543402905034600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080600660008282540192505081905550346007600082825401925050819055507f9e9d071824fd57d062ca63fd8b786d8da48a6807eebbcb2d83f9e8d21398e28c823483604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561066257600080fd5b505af1158015610676573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501580156106f8573d6000803e3d6000fd5b505050565b60035481565b60096020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561077657600080fd5b600560009054906101000a900460ff1615151561079257600080fd5b6000811115156107a157600080fd5b7f4ac9052a820bf4f8c02d7588587cae835573b5b99ea7ad4ca002f17f319f718660045482604051808381526020018281526020019250505060405180910390a18060048190555050565b60045481565b60075481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561085357600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108ea57600080fd5b6001600560006101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156109c257600080fd5b505af11580156109d6573d6000803e3d6000fd5b505050506040513d60208110156109ec57600080fd5b81019080805190602001909291905050509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015610ae557600080fd5b505af1158015610af9573d6000803e3d6000fd5b5050505050565b60065481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b6157600080fd5b600560009054906101000a900460ff16151515610b7d57600080fd5b806003819055507fd34bb772c4ae9baa99db852f622773b31c7827e8ee818449fef20d30980bd3106003546040518082815260200191505060405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b600560009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c5957600080fd5b600560009054906101000a900460ff16151515610c7557600080fd5b806002819055507fa3f2a813a039e5195c620dabcd490267a9aa5a50e4e1383bc474e9b800f7defe6002546040518082815260200191505060405180910390a150565b60085481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d1957600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a72305820af7c4294d8a0838416f1fb57328424ab018ea2cbfab2e8c686636eacea6b03bc0029000000000000000000000000be0bcea181b0f7693aaeb4ab6430c177e7b8cc3b",
  "constructorArguments": "000000000000000000000000be0bcea181b0f7693aaeb4ab6430c177e7b8cc3b"
}