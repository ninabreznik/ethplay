{
  "address": "0xbb7406274368d3385e89512c167ace3eab4a5763",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ChrysalisToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-28\n*/\n\npragma solidity ^0.4.20;\n\n\n// ----------------------------------------------------------------------------\n// CWH token contract\n//\n// Symbol           : CWH\n// Name             : Chrysalis Token\n// Total Supply     : 25,000,000\n// Decimals         : 18\n// ----------------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------------\n// Safe math\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and an\n// initial fixed supply\n// ----------------------------------------------------------------------------\ncontract ChrysalisToken is ERC20Interface {\n    \n    using SafeMath for uint;\n\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint public _totalSupply;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n    \n    \n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    constructor() public {\n        symbol = \"CWH\";\n        name = \"Chrysalis Token\";\n        decimals = 18;\n        _totalSupply = 25000000;\n        _totalSupply = _totalSupply.mul(10 ** uint(decimals));\n        address owner = 0x49BB86e52f724dcbD858F66640fC58E3CA8000A0;\n        balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, _totalSupply);\n    }\n    \n    \n    // ------------------------------------------------------------------------\n    // Reject when someone sends ethers to this contract\n    // ------------------------------------------------------------------------\n    function() public payable {\n        revert();\n    }\n    \n    \n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public view returns (uint) {\n        return _totalSupply;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to `to` account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens) public returns (bool success) {\n        require(to != address(0));\n        require(tokens > 0);\n        require(balances[msg.sender] >= tokens);\n        \n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    //\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces \n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public returns (bool success) {\n        require(spender != address(0));\n        require(tokens > 0);\n        \n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer `tokens` from the `from` account to the `to` account\n    // \n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the `from` account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        require(from != address(0));\n        require(to != address(0));\n        require(tokens > 0);\n        require(balances[from] >= tokens);\n        require(allowed[from][msg.sender] >= tokens);\n        \n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n    \n    \n    // ------------------------------------------------------------------------\n    // Increase the amount of tokens that an owner allowed to a spender.\n    //\n    // approve should be called when allowed[_spender] == 0. To increment\n    // allowed value is better to use this function to avoid 2 calls (and wait until\n    // the first transaction is mined)\n    // _spender The address which will spend the funds.\n    // _addedValue The amount of tokens to increase the allowance by.\n    // ------------------------------------------------------------------------\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        require(_spender != address(0));\n        \n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n    \n    \n    // ------------------------------------------------------------------------\n    // Decrease the amount of tokens that an owner allowed to a spender.\n    //\n    // approve should be called when allowed[_spender] == 0. To decrement\n    // allowed value is better to use this function to avoid 2 calls (and wait until\n    // the first transaction is mined)\n    // _spender The address which will spend the funds.\n    // _subtractedValue The amount of tokens to decrease the allowance by.\n    // ------------------------------------------------------------------------\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        require(_spender != address(0));\n        \n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b506040805180820190915260038082527f4357480000000000000000000000000000000000000000000000000000000000602090920191825260009161005891839190610187565b5060408051808201909152600f8082527f4368727973616c697320546f6b656e0000000000000000000000000000000000602090920191825261009d91600191610187565b506002805460ff19166012179081905563017d784060038190556100d39160ff16600a0a64010000000061091061015c82021704565b60038190557349bb86e52f724dcbd858f66640fc58e3ca8000a06000818152600460209081527fd1bb6051106b7f5719abb16290d02284ff50352ae538aab86160c3e57b13ef708490556040805194855251929450849391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350610222565b818102821580610176575081838281151561017357fe5b04145b151561018157600080fd5b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101c857805160ff19168380011785556101f5565b828001600101855582156101f5579182015b828111156101f55782518255916020019190600101906101da565b50610201929150610205565b5090565b61021f91905b80821115610201576000815560010161020b565b90565b610961806102316000396000f3006080604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100be578063095ea7b31461014857806318160ddd1461018057806323b872dd146101a7578063313ce567146101d15780633eaaf86b146101fc578063661884631461021157806370a082311461023557806395d89b4114610256578063a9059cbb1461026b578063d73dd6231461028f578063dd62ed3e146102b3575b600080fd5b3480156100ca57600080fd5b506100d36102da565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561010d5781810151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015457600080fd5b5061016c600160a060020a0360043516602435610367565b604080519115158252519081900360200190f35b34801561018c57600080fd5b506101956103f3565b60408051918252519081900360200190f35b3480156101b357600080fd5b5061016c600160a060020a03600435811690602435166044356103f9565b3480156101dd57600080fd5b506101e6610592565b6040805160ff9092168252519081900360200190f35b34801561020857600080fd5b5061019561059b565b34801561021d57600080fd5b5061016c600160a060020a03600435166024356105a1565b34801561024157600080fd5b50610195600160a060020a03600435166106aa565b34801561026257600080fd5b506100d36106c5565b34801561027757600080fd5b5061016c600160a060020a0360043516602435610720565b34801561029b57600080fd5b5061016c600160a060020a0360043516602435610810565b3480156102bf57600080fd5b50610195600160a060020a03600435811690602435166108c0565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561035f5780601f106103345761010080835404028352916020019161035f565b820191906000526020600020905b81548152906001019060200180831161034257829003601f168201915b505050505081565b6000600160a060020a038316151561037e57600080fd5b6000821161038b57600080fd5b336000818152600560209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60035490565b6000600160a060020a038416151561041057600080fd5b600160a060020a038316151561042557600080fd5b6000821161043257600080fd5b600160a060020a03841660009081526004602052604090205482111561045757600080fd5b600160a060020a038416600090815260056020908152604080832033845290915290205482111561048757600080fd5b600160a060020a0384166000908152600460205260409020546104b0908363ffffffff6108eb16565b600160a060020a03851660009081526004602090815260408083209390935560058152828220338352905220546104ed908363ffffffff6108eb16565b600160a060020a038086166000908152600560209081526040808320338452825280832094909455918616815260049091522054610531908363ffffffff61090016565b600160a060020a0380851660008181526004602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b60025460ff1681565b60035481565b600080600160a060020a03841615156105b957600080fd5b50336000908152600560209081526040808320600160a060020a03871684529091529020548083111561060f57336000908152600560209081526040808320600160a060020a0388168452909152812055610644565b61061f818463ffffffff6108eb16565b336000908152600560209081526040808320600160a060020a03891684529091529020555b336000818152600560209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526004602052604090205490565b6000805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561035f5780601f106103345761010080835404028352916020019161035f565b6000600160a060020a038316151561073757600080fd5b6000821161074457600080fd5b3360009081526004602052604090205482111561076057600080fd5b33600090815260046020526040902054610780908363ffffffff6108eb16565b3360009081526004602052604080822092909255600160a060020a038516815220546107b2908363ffffffff61090016565b600160a060020a0384166000818152600460209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b6000600160a060020a038316151561082757600080fd5b336000908152600560209081526040808320600160a060020a038716845290915290205461085b908363ffffffff61090016565b336000818152600560209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b6000828211156108fa57600080fd5b50900390565b818101828110156103ed57600080fd5b81810282158061092a575081838281151561092757fe5b04145b15156103ed57600080fd00a165627a7a723058206f42654007944d72f85bc657b94585bcd1070f4e17080e73fab1e6c2f4d70deb0029"
}