{
  "address": "0xd0c6cf11f31732ead1715c3455e3bea2654fe660",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenTimelock",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-19\n*/\n\npragma solidity ^0.4.23;\n\ncontract ERC20Basic {\n  \n  \n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  \n    \n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n/**\n * @title SafeERC20\n * @dev 围绕ERC20操作发生故障的包装程序.\n * 可以在合约中通过这样使用这个库 `using SafeERC20 for ERC20;` 来使用安全的操作`token.safeTransfer(...)`\n */\nlibrary SafeERC20 {\n  \n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    require(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    ERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    require(token.approve(spender, value));\n  }\n}\n\n/**\n * @title TokenTimelock 锁定期释放token\n * @dev TokenTimelock 是一个令token持有人合同，将允许一个受益人在给定的发布时间之后提取token\n */\ncontract TokenTimelock {\n  //这里用到了上面的SafeERC20\n  using SafeERC20 for ERC20Basic;\n\n  // ERC20 basic token contract being held\n  ERC20Basic public token;\n  address public owner;\n  \n  // token 释放受益人组  \n  mapping (address => uint256) public beneficiary;\n  address[] beneficial;\n  // token可以被释放的时间戳\n  uint256 public releaseTime;\n  // 对token，受益人address和释放时间初始化\n  constructor(\n    ERC20Basic _token,\n    uint256 _releaseTime\n  )\n    public\n  {\n    require(_releaseTime > block.timestamp);\n    token = _token;\n    owner = msg.sender;\n    releaseTime = _releaseTime;\n  }\n  \n  function pushInvestor(address Ins,uint256 count) public  {\n      require (msg.sender == owner);\n      require (block.timestamp < releaseTime);\n      beneficial.push(Ins);\n      beneficiary[Ins] = count;\n  }\n  function chkBalance() public view returns (uint) {\n         return token.balanceOf(this);\n      \n  }\n  /**\n   * @notice 将时间限制内的token转移给受益人.\n   */\n  function release() public {\n    require(block.timestamp >= releaseTime);\n    \n    for (uint i=0;i<beneficial.length;i++ ){\n        uint256 amount = token.balanceOf(this);\n        require(amount > 0);\n        uint256 count = beneficiary[beneficial[i]];\n        if (amount>=count){\n             beneficiary[beneficial[i]] = 0;\n             token.safeTransfer(beneficial[i], count);\n        }\n    }\n  }\n  /**\n   * @notice owner可以退回合约内的token.\n   */\n  function revoke() public {\n      require (msg.sender == owner);\n      uint256 amount = token.balanceOf(this);\n      require(amount > 0);\n      token.safeTransfer(owner, amount);\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051604080610b898339810180604052810190808051906020019092919080519060200190929190505050428111151561004b57600080fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806004819055505050610aa5806100e46000396000f30060806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063810085681461009357806386d1a69f146100ea5780638da5cb5b14610101578063b6549f7514610158578063b91d40011461016f578063d11728bd1461019a578063d9dcef6e146101e7578063fc0c546a14610212575b600080fd5b34801561009f57600080fd5b506100d4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610269565b6040518082815260200191505060405180910390f35b3480156100f657600080fd5b506100ff610281565b005b34801561010d57600080fd5b5061011661054b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561016457600080fd5b5061016d610571565b005b34801561017b57600080fd5b50610184610748565b6040518082815260200191505060405180910390f35b3480156101a657600080fd5b506101e5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061074e565b005b3480156101f357600080fd5b506101fc610868565b6040518082815260200191505060405180910390f35b34801561021e57600080fd5b50610227610966565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60026020528060005260406000206000915090505481565b6000806000600454421015151561029757600080fd5b600092505b600380549050831015610546576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561036557600080fd5b505af1158015610379573d6000803e3d6000fd5b505050506040513d602081101561038f57600080fd5b810190808051906020019092919050505091506000821115156103b157600080fd5b600260006003858154811015156103c457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080821015156105395760006002600060038681548110151561044a57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506105386003848154811015156104c557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661098b9092919063ffffffff16565b5b828060010193505061029c565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105cf57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561068b57600080fd5b505af115801561069f573d6000803e3d6000fd5b505050506040513d60208110156106b557600080fd5b810190808051906020019092919050505090506000811115156106d757600080fd5b610745600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661098b9092919063ffffffff16565b50565b60045481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107aa57600080fd5b600454421015156107ba57600080fd5b60038290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561092657600080fd5b505af115801561093a573d6000803e3d6000fd5b505050506040513d602081101561095057600080fd5b8101908080519060200190929190505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610a2e57600080fd5b505af1158015610a42573d6000803e3d6000fd5b505050506040513d6020811015610a5857600080fd5b81019080805190602001909291905050501515610a7457600080fd5b5050505600a165627a7a72305820a51dd07f4feb13f9a3e9c0f3548b1f561eea574bd8f8331c0ae8976e2fcedc260029000000000000000000000000d17f8c64635e189f3ca1ca3a16b33e841bf53427000000000000000000000000000000000000000000000000000000005cf0f086",
  "constructorArguments": "000000000000000000000000d17f8c64635e189f3ca1ca3a16b33e841bf53427000000000000000000000000000000000000000000000000000000005cf0f086"
}