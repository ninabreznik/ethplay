{
  "address": "0x4fca89aee1bd76ddda71d98b5944f65b31ad336f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AnimalMarketplace",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-24\n*/\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\math\\SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\introspection\\IERC165.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title IERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface IERC165 {\n    /**\n     * @notice Query if a contract implements an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @dev Interface identification is specified in ERC-165. This function\n     * uses less than 30,000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\IERC721.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\IERC721Enumerable.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Enumerable is IERC721 {\n    function totalSupply() public view returns (uint256);\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\n\n    function tokenByIndex(uint256 index) public view returns (uint256);\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\IERC721Metadata.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Metadata is IERC721 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\IERC721Full.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Full is IERC721, IERC721Enumerable, IERC721Metadata {\n    // solhint-disable-previous-line no-empty-blocks\n}\n\n// File: contracts\\IMarketplace.sol\n\npragma solidity 0.5.0;\n\n\ncontract IMarketplace {\n    function createAuction(\n        uint256 _tokenId,\n        uint128 startPrice,\n        uint128 endPrice,\n        uint128 duration\n    )\n        external;\n}\n\n// File: contracts\\AnimalMarketplace.sol\n\npragma solidity 0.5.0;\n\n\n\n\n\n\ncontract AnimalMarketplace is Ownable, IMarketplace {\n    using SafeMath for uint256;\n    uint8 internal percentFee = 5;\n\n    IERC721Full private erc721Contract;\n\n    struct Auction {\n        address payable tokenOwner;\n        uint256 startTime;\n        uint128 startPrice;\n        uint128 endPrice;\n        uint128 duration;\n    }\n\n    struct AuctionEntry {\n        uint256 keyIndex;\n        Auction value;\n    }\n\n    struct TokenIdAuctionMap {\n        mapping(uint256 => AuctionEntry) data;\n        uint256[] keys;\n    }\n\n    TokenIdAuctionMap private auctions;\n\n    event AuctionBoughtEvent(\n        uint256 tokenId,\n        address previousOwner,\n        address newOwner,\n        uint256 pricePaid\n    );\n\n    event AuctionCreatedEvent(\n        uint256 tokenId,\n        uint128 startPrice,\n        uint128 endPrice,\n        uint128 duration\n    );\n\n    event AuctionCanceledEvent(uint256 tokenId);\n\n    constructor(IERC721Full _erc721Contract) public {\n        erc721Contract = _erc721Contract;\n    }\n\n    // \"approve\" in game contract will revert if sender is not token owner\n    function createAuction(\n        uint256 _tokenId,\n        uint128 _startPrice,\n        uint128 _endPrice,\n        uint128 _duration\n    )\n        external\n    {\n        // this can be only called from game contract\n        require(msg.sender == address(erc721Contract));\n\n        AuctionEntry storage entry = auctions.data[_tokenId];\n        require(entry.keyIndex == 0);\n\n        address payable tokenOwner = address(uint160(erc721Contract.ownerOf(_tokenId)));\n        erc721Contract.transferFrom(tokenOwner, address(this), _tokenId);\n\n        entry.value = Auction({\n            tokenOwner: tokenOwner,\n            startTime: block.timestamp,\n            startPrice: _startPrice,\n            endPrice: _endPrice,\n            duration: _duration\n        });\n\n        entry.keyIndex = ++auctions.keys.length;\n        auctions.keys[entry.keyIndex - 1] = _tokenId;\n\n        emit AuctionCreatedEvent(_tokenId, _startPrice, _endPrice, _duration);\n    }\n\n    function cancelAuction(uint256 _tokenId) external {\n        AuctionEntry storage entry = auctions.data[_tokenId];\n        Auction storage auction = entry.value;\n        address sender = msg.sender;\n        require(sender == auction.tokenOwner);\n        erc721Contract.transferFrom(address(this), sender, _tokenId);\n        deleteAuction(_tokenId, entry);\n        emit AuctionCanceledEvent(_tokenId);\n    }\n\n    function buyAuction(uint256 _tokenId)\n        external\n        payable\n    {\n        AuctionEntry storage entry = auctions.data[_tokenId];\n        require(entry.keyIndex > 0);\n        Auction storage auction = entry.value;\n        address payable sender = msg.sender;\n        address payable tokenOwner = auction.tokenOwner;\n        uint256 auctionPrice = calculateCurrentPrice(auction);\n        uint256 pricePaid = msg.value;\n\n        require(pricePaid >= auctionPrice);\n        deleteAuction(_tokenId, entry);\n\n        refundSender(sender, pricePaid, auctionPrice);\n        payTokenOwner(tokenOwner, auctionPrice);\n        erc721Contract.transferFrom(address(this), sender, _tokenId);\n        emit AuctionBoughtEvent(_tokenId, tokenOwner, sender, auctionPrice);\n    }\n\n    function getAuctionByTokenId(uint256 _tokenId)\n        external\n        view\n        returns (\n            uint256 tokenId,\n            address tokenOwner,\n            uint128 startPrice,\n            uint128 endPrice,\n            uint256 startTime,\n            uint128 duration,\n            uint256 currentPrice,\n            bool exists\n        )\n    {\n        AuctionEntry storage entry = auctions.data[_tokenId];\n        Auction storage auction = entry.value;\n        uint256 calculatedCurrentPrice = calculateCurrentPrice(auction);\n        return (\n            entry.keyIndex > 0 ? _tokenId : 0,\n            auction.tokenOwner,\n            auction.startPrice,\n            auction.endPrice,\n            auction.startTime,\n            auction.duration,\n            calculatedCurrentPrice,\n            entry.keyIndex > 0\n        );\n    }\n\n    function getAuctionByIndex(uint256 _auctionIndex)\n        external\n        view\n        returns (\n            uint256 tokenId,\n            address tokenOwner,\n            uint128 startPrice,\n            uint128 endPrice,\n            uint256 startTime,\n            uint128 duration,\n            uint256 currentPrice,\n            bool exists\n        )\n    {\n        // for consistency with getAuctionByTokenId when returning invalid auction - otherwise it would throw error\n        if (_auctionIndex >= auctions.keys.length) {\n            return (0, address(0), 0, 0, 0, 0, 0, false);\n        }\n\n        uint256 currentTokenId = auctions.keys[_auctionIndex];\n        Auction storage auction = auctions.data[currentTokenId].value;\n        uint256 calculatedCurrentPrice = calculateCurrentPrice(auction);\n        return (\n            currentTokenId,\n            auction.tokenOwner,\n            auction.startPrice,\n            auction.endPrice,\n            auction.startTime,\n            auction.duration,\n            calculatedCurrentPrice,\n            true\n        );\n    }\n\n    function getAuctionsCount() external view returns (uint256 auctionsCount) {\n        return auctions.keys.length;\n    }\n\n    function isOnAuction(uint256 _tokenId) public view returns (bool onAuction) {\n        return auctions.data[_tokenId].keyIndex > 0;\n    }\n\n    function withdrawContract() public onlyOwner {\n        msg.sender.transfer(address(this).balance);\n    }\n\n    function refundSender(address payable _sender, uint256 _pricePaid, uint256 _auctionPrice) private {\n        uint256 etherToRefund = _pricePaid.sub(_auctionPrice);\n        if (etherToRefund > 0) {\n            _sender.transfer(etherToRefund);\n        }\n    }\n\n    function payTokenOwner(address payable _tokenOwner, uint256 _auctionPrice) private {\n        uint256 etherToPay = _auctionPrice.sub(_auctionPrice * percentFee / 100);\n        if (etherToPay > 0) {\n            _tokenOwner.transfer(etherToPay);\n        }\n    }\n\n    function deleteAuction(uint256 _tokenId, AuctionEntry storage _entry) private {\n        uint256 keysLength = auctions.keys.length;\n        if (_entry.keyIndex <= keysLength) {\n            // Move an existing element into the vacated key slot.\n            auctions.data[auctions.keys[keysLength - 1]].keyIndex = _entry.keyIndex;\n            auctions.keys[_entry.keyIndex - 1] = auctions.keys[keysLength - 1];\n            auctions.keys.length = keysLength - 1;\n            delete auctions.data[_tokenId];\n        }\n    }\n\n    function calculateCurrentPrice(Auction storage _auction) private view returns (uint256) {\n        uint256 secondsInProgress = block.timestamp - _auction.startTime;\n\n        if (secondsInProgress >= _auction.duration) {\n            return _auction.endPrice;\n        }\n\n        int256 totalPriceChange = int256(_auction.endPrice) - int256(_auction.startPrice);\n        int256 currentPriceChange =\n            totalPriceChange * int256(secondsInProgress) / int256(_auction.duration);\n\n        int256 calculatedPrice = int256(_auction.startPrice) + int256(currentPriceChange);\n\n        return uint256(calculatedPrice);\n    }\n\n}",
  "bytecode": "60806040526005600060146101000a81548160ff021916908360ff16021790555034801561002c57600080fd5b50604051602080611a108339810180604052602081101561004c57600080fd5b8101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506118a68061016a6000396000f3fe6080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063011879db146100bf57806337e246ad1461014e578063715018a6146101a157806377413267146101b85780638da5cb5b146102d45780638f32d59b1461032b57806396b5a7551461035a5780639da9df3e14610395578063b1ddf52f146103ac578063e45c1879146104c8578063f2fde38b146104f3578063fd8acc4214610544575b600080fd5b3480156100cb57600080fd5b5061014c600480360360808110156100e257600080fd5b810190808035906020019092919080356fffffffffffffffffffffffffffffffff16906020019092919080356fffffffffffffffffffffffffffffffff16906020019092919080356fffffffffffffffffffffffffffffffff169060200190929190505050610572565b005b34801561015a57600080fd5b506101876004803603602081101561017157600080fd5b8101908080359060200190929190505050610a6c565b604051808215151515815260200191505060405180910390f35b3480156101ad57600080fd5b506101b6610a91565b005b3480156101c457600080fd5b506101f1600480360360208110156101db57600080fd5b8101908080359060200190929190505050610b63565b604051808981526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001876fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001866fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001858152602001846fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001838152602001821515151581526020019850505050505050505060405180910390f35b3480156102e057600080fd5b506102e9610c6a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561033757600080fd5b50610340610c93565b604051808215151515815260200191505060405180910390f35b34801561036657600080fd5b506103936004803603602081101561037d57600080fd5b8101908080359060200190929190505050610cea565b005b3480156103a157600080fd5b506103aa610ec7565b005b3480156103b857600080fd5b506103e5600480360360208110156103cf57600080fd5b8101908080359060200190929190505050610f3a565b604051808981526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001876fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001866fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001858152602001846fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001838152602001821515151581526020019850505050505050505060405180910390f35b3480156104d457600080fd5b506104dd61108b565b6040518082815260200191505060405180910390f35b3480156104ff57600080fd5b506105426004803603602081101561051657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061109b565b005b6105706004803603602081101561055a57600080fd5b81019080803590602001909291905050506110ba565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105ce57600080fd5b6000600260000160008681526020019081526020016000209050600081600001541415156105fb57600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561068c57600080fd5b505afa1580156106a0573d6000803e3d6000fd5b505050506040513d60208110156106b657600080fd5b81019080805190602001909291905050509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8230896040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156107c257600080fd5b505af11580156107d6573d6000803e3d6000fd5b5050505060a0604051908101604052808273ffffffffffffffffffffffffffffffffffffffff168152602001428152602001866fffffffffffffffffffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff168152602001846fffffffffffffffffffffffffffffffff168152508260010160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060608201518160020160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060808201518160030160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050506002600101805460010190816109799190611829565b8260000181905550856002600101600184600001540381548110151561099b57fe5b90600052602060002001819055507f1f3fa07eef312d01584476eae20b7e2ec9c47e5e9dbe030f1b6f4fd2e4e98ebd8686868660405180858152602001846fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001836fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200194505050505060405180910390a1505050505050565b6000806002600001600084815260200190815260200160002060000154119050919050565b610a99610c93565b1515610aa457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000806000806000806000806000600260000160008b8152602001908152602001600020905060008160010190506000610b9c8261131e565b90506000836000015411610bb1576000610bb3565b8b5b8260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360020160009054906101000a90046fffffffffffffffffffffffffffffffff168460020160109054906101000a90046fffffffffffffffffffffffffffffffff1685600101548660030160009054906101000a90046fffffffffffffffffffffffffffffffff168660008a60000154118696509a509a509a509a509a509a509a509a50505050919395975091939597565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6000600260000160008381526020019081526020016000209050600081600101905060003390508160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610d6f57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3083876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015610e6857600080fd5b505af1158015610e7c573d6000803e3d6000fd5b50505050610e8a8484611495565b7fed8fb000ffbca95a3d18bf4e255c9afd07b522bebf471f94919571d2cafaa4a7846040518082815260200191505060405180910390a150505050565b610ecf610c93565b1515610eda57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610f37573d6000803e3d6000fd5b50565b60008060008060008060008060026001018054905089101515610f8d5760008060008060008060008087975086965085955084945083935082925081915097509750975097509750975097509750611080565b600060026001018a815481101515610fa157fe5b9060005260206000200154905060006002600001600083815260200190815260200160002060010190506000610fd68261131e565b9050828260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360020160009054906101000a90046fffffffffffffffffffffffffffffffff168460020160109054906101000a90046fffffffffffffffffffffffffffffffff1685600101548660030160009054906101000a90046fffffffffffffffffffffffffffffffff168660018696509a509a509a509a509a509a509a509a505050505b919395975091939597565b6000600260010180549050905090565b6110a3610c93565b15156110ae57600080fd5b6110b781611612565b50565b6000600260000160008381526020019081526020016000209050600081600001541115156110e757600080fd5b6000816001019050600033905060008260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006111288461131e565b9050600034905081811015151561113e57600080fd5b6111488787611495565b61115384828461170c565b61115d838361177a565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd30868a6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561125657600080fd5b505af115801561126a573d6000803e3d6000fd5b505050507f83a815b11f49373aebbe0b7a4065fc83c15d7dbdde75e788016e4ae250c12f0387848685604051808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060405180910390a150505050505050565b6000808260010154420390508260030160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16811015156113a0578260020160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16915050611490565b60008360020160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168460020160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1603905060008460030160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1683830281151561144c57fe5b0590506000818660020160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16019050809450505050505b919050565b6000600260010180549050905080826000015411151561160d578160000154600260000160006002600101600185038154811015156114d057fe5b906000526020600020015481526020019081526020016000206000018190555060026001016001820381548110151561150557fe5b90600052602060002001546002600101600184600001540381548110151561152957fe5b90600052602060002001819055506001810360026001018161154b9190611829565b506002600001600084815260200190815260200160002060008082016000905560018201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556002820160106101000a8154906fffffffffffffffffffffffffffffffff02191690556003820160006101000a8154906fffffffffffffffffffffffffffffffff0219169055505050505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561164e57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000611721828461180790919063ffffffff16565b90506000811115611774578373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611772573d6000803e3d6000fd5b505b50505050565b60006117af6064600060149054906101000a900460ff1660ff16840281151561179f57fe5b048361180790919063ffffffff16565b90506000811115611802578273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611800573d6000803e3d6000fd5b505b505050565b600082821115151561181857600080fd5b600082840390508091505092915050565b8154818355818111156118505781836000526020600020918201910161184f9190611855565b5b505050565b61187791905b8082111561187357600081600090555060010161185b565b5090565b9056fea165627a7a72305820f8a4a1ab08e7286dd2077dadee51f1f2b9c6a5c45bd49ca1873aebce912d1512002900000000000000000000000014c4293d7e7325cec8c52cea3df37d91aa9cc7b6",
  "constructorArguments": "00000000000000000000000014c4293d7e7325cec8c52cea3df37d91aa9cc7b6"
}