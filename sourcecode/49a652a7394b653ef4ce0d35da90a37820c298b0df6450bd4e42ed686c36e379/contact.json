{
  "address": "0x134b079e902f1208e19bb9ac4765237928d50279",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenTimelock",
  "compilerVersion": "v0.5.9+commit.e560f70d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-09\n*/\n\npragma solidity 0.5.9;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    function allowance(address owner, address spender)\n    public view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 value\n    )\n    internal\n    {\n        require(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n        require(token.approve(spender, value));\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0));\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\n\ncontract TokenTimelock is Ownable {\n    using SafeERC20 for ERC20;\n    using SafeMath for uint256;\n\n    ERC20 public token;\n\n    struct User {\n        uint deposit;\n        uint balance;\n        uint releaseTime;\n        uint step;\n    }\n\n    mapping(address => User) public users;\n\n    uint public releaseStep = 90 days;\n    uint public releaseStepCount = 8;\n    uint public releaseStepPercent = 12500;\n\n    constructor(ERC20 _token) public {\n        token = _token;\n    }\n\n    function addTokens(address _user, uint256 _value) onlyOwner external returns (bool) {\n        require(_user != address(0));\n        require(users[_user].deposit == 0);\n        require(_value > 0);\n\n        token.safeTransferFrom(msg.sender, address(this), _value);\n\n        users[_user].deposit = _value;\n        users[_user].balance = _value;\n        users[_user].releaseTime = now + 720 days;\n    }\n\n\n    function getTokens() external {\n        require(users[msg.sender].balance > 0);\n        uint currentStep = getCurrentStep(msg.sender);\n        require(currentStep > 0);\n        require(currentStep > users[msg.sender].step);\n\n        if (currentStep == releaseStepCount) {\n            users[msg.sender].step = releaseStepCount;\n            token.safeTransfer(msg.sender, users[msg.sender].balance);\n            users[msg.sender].balance = 0;\n        } else {\n            uint p = releaseStepPercent * (currentStep - users[msg.sender].step);\n            uint val = _valueFromPercent(users[msg.sender].deposit, p);\n\n            if (users[msg.sender].balance >= val) {\n                users[msg.sender].balance = users[msg.sender].balance.sub(val);\n                token.safeTransfer(msg.sender, val);\n            }\n\n            users[msg.sender].step = currentStep;\n        }\n\n    }\n\n\n    function getCurrentStep(address _user) public view returns (uint) {\n        require(users[_user].deposit != 0);\n        uint _id;\n        \n        if (users[_user].releaseTime >= now) {\n            uint _count = (users[_user].releaseTime - now) / releaseStep;\n            _count = _count == releaseStepCount ? _count : _count + 1;\n            _id = releaseStepCount - _count;\n        } else _id = releaseStepCount;\n\n        return _id;\n    }\n    \n \n     \n\n    //1% - 1000, 10% - 10000 50% - 50000\n    function _valueFromPercent(uint _value, uint _percent) internal pure returns (uint amount)    {\n        uint _amount = _value.mul(_percent).div(100000);\n        return (_amount);\n    }\n\n    function getUser(address _user) public view returns(uint, uint, uint, uint){\n        return (users[_user].deposit, users[_user].balance, users[_user].step, users[_user].releaseTime);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"releaseStepCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCurrentStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseStepPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"name\":\"step\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526276a70060035560086004556130d460055534801561002257600080fd5b5060405161083a38038061083a8339818101604052602081101561004557600080fd5b5051600080546001600160a01b03199081163317909155600180546001600160a01b03909316929091169190911790556107b6806100846000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80636f77926b116100715780636f77926b1461013e5780638da5cb5b1461018a578063a87430ba146101ae578063aa6ca808146101d4578063f2fde38b146101de578063fc0c546a14610204576100a9565b80631f61e55a146100ae578063285a08f2146100c857806338f79036146100ee5780634c92c6c9146100f65780636039fbdb146100fe575b600080fd5b6100b661020c565b60408051918252519081900360200190f35b6100b6600480360360208110156100de57600080fd5b50356001600160a01b0316610212565b6100b66102b1565b6100b66102b7565b61012a6004803603604081101561011457600080fd5b506001600160a01b0381351690602001356102bd565b604080519115158252519081900360200190f35b6101646004803603602081101561015457600080fd5b50356001600160a01b031661036a565b604080519485526020850193909352838301919091526060830152519081900360800190f35b610192610399565b604080516001600160a01b039092168252519081900360200190f35b610164600480360360208110156101c457600080fd5b50356001600160a01b03166103a8565b6101dc6103d1565b005b6101dc600480360360208110156101f457600080fd5b50356001600160a01b0316610534565b610192610554565b60045481565b6001600160a01b03811660009081526002602052604081205461023457600080fd5b6001600160a01b03821660009081526002602081905260408220015442116102a6576003546001600160a01b0384166000908152600260208190526040822001549091904290038161028257fe5b04905060045481146102975780600101610299565b805b6004540391506102ab9050565b506004545b92915050565b60035481565b60055481565b600080546001600160a01b031633146102d557600080fd5b6001600160a01b0383166102e857600080fd5b6001600160a01b0383166000908152600260205260409020541561030b57600080fd5b6000821161031857600080fd5b600154610336906001600160a01b031633308563ffffffff61056316565b6001600160a01b03909216600090815260026020819052604090912082815560018101929092556303b53800420191015590565b6001600160a01b0316600090815260026020819052604090912080546001820154600383015492909301549093565b6000546001600160a01b031681565b600260208190526000918252604090912080546001820154928201546003909201549092919084565b336000908152600260205260409020600101546103ed57600080fd5b60006103f833610212565b90506000811161040757600080fd5b33600090815260026020526040902060030154811161042557600080fd5b60045481141561047f5760045433600081815260026020526040902060038101929092556001918201549154610467926001600160a01b0390911691906105f9565b33600090815260026020526040812060010155610531565b3360009081526002602052604081206003810154600554915490840390910291906104aa9083610693565b33600090815260026020526040902060010154909150811161051957336000908152600260205260409020600101546104e9908263ffffffff6106c116565b3360008181526002602052604090206001908101929092559054610519916001600160a01b0390911690836105f9565b50503360009081526002602052604090206003018190555b50565b6000546001600160a01b0316331461054b57600080fd5b610531816106d3565b6001546001600160a01b031681565b604080516323b872dd60e01b81526001600160a01b0385811660048301528481166024830152604482018490529151918616916323b872dd916064808201926020929091908290030181600087803b1580156105be57600080fd5b505af11580156105d2573d6000803e3d6000fd5b505050506040513d60208110156105e857600080fd5b50516105f357600080fd5b50505050565b826001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561065957600080fd5b505af115801561066d573d6000803e3d6000fd5b505050506040513d602081101561068357600080fd5b505161068e57600080fd5b505050565b6000806106b9620186a06106ad868663ffffffff61074116565b9063ffffffff61076c16565b949350505050565b6000828211156106cd57fe5b50900390565b6001600160a01b0381166106e657600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600082610750575060006102ab565b8282028284828161075d57fe5b041461076557fe5b9392505050565b60008082848161077857fe5b0494935050505056fea265627a7a7230582047de3a7338be0b2c073f4b356ace9e87e30643f113ca27b08df52fa9d1ae78c964736f6c63430005090032000000000000000000000000e990f83d0a309fe847c018430cc79bc3b3c6d616",
  "constructorArguments": "000000000000000000000000e990f83d0a309fe847c018430cc79bc3b3c6d616"
}