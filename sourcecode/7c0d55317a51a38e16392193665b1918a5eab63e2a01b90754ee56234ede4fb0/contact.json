{
  "address": "0xff78F0Cb8E93CafaD39377D774e0EDE1B48EE903",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MCVToken",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-08\n*/\n\npragma solidity 0.5.0;\n\n\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\n\ncontract Owned {\n    address private _owner;\n    address private _newOwner;\n\n    event TransferredOwner(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n    constructor() internal {\n        _owner = msg.sender;\n        emit TransferredOwner(address(0), _owner);\n    }\n\n  /**\n   * @return the address of the owner.\n   */\n\n    function owner() public view returns(address) {\n        return _owner;\n    }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n    modifier onlyOwner() {\n        require(isOwner(), \"Access is denied\");\n        _;\n    }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n    function isOwner() public view returns(bool) {\n        return msg.sender == _owner;\n    }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n    function renounceOwner() public onlyOwner {\n        emit TransferredOwner(_owner, address(0));\n        _owner = address(0);\n    }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n    function transferOwner(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Empty address\");\n        _newOwner = newOwner;\n    }\n\n\n    function cancelOwner() public onlyOwner {\n        _newOwner = address(0);\n    }\n\n    function confirmOwner() public {\n        require(msg.sender == _newOwner, \"Access is denied\");\n        emit TransferredOwner(_owner, _newOwner);\n        _owner = _newOwner;\n    }\n}\n\n\ncontract Freezed {\n\tbool public frozen;\n\n\t/**\n\t* Logged when token transfers were frozen/unfrozen.\n\t*/\n\tevent Freeze ();\n\tevent Unfreeze ();\n\n\n    modifier onlyUnfreeze() {\n        require(!frozen, \"Action temporarily paused\");\n        _;\n    }\n\n\tconstructor(bool _frozen) public {\n\t\tfrozen = _frozen;\n\t}\n\n\tfunction _freezeTransfers () internal {\n\t\tif (!frozen) {\n\t\t\tfrozen = true;\n\t\t\temit Freeze();\n\t\t}\n\t}\n\n\tfunction _unfreezeTransfers () internal {\n\t\tif (frozen) {\n\t\t\tfrozen = false;\n\t\t\temit Unfreeze();\n\t\t}\n\t}\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n */\n\ncontract ERC20Base {\n\n\n\n    mapping (address => uint) internal _balanceOf;\n    uint internal _totalSupply; \n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n\n    function totalSupply() public view returns(uint) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n\n    function balanceOf(address owner) public view returns(uint) {\n        return _balanceOf[owner];\n    }\n\n\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n\n    function _transfer(address from, address to, uint256 value) internal {\n        _checkRequireERC20(to, value, true, _balanceOf[from]);\n\n        // _balanceOf[from] -= value;\n        // _balanceOf[to] += value;\n        _balanceOf[from] = SafeMath.sub(_balanceOf[from], value);\n        _balanceOf[to] = SafeMath.add(_balanceOf[to], value);\n        emit Transfer(from, to, value);\n    }\n\n\n    /**\n    * @dev Internal function that mints an amount of the token and assigns it to\n    * an account. This encapsulates the modification of balances such that the\n    * proper events are emitted.\n    * @param account The account that will receive the created tokens.\n    * @param value The amount that will be created.\n    */\n\n    function _mint(address account, uint256 value) internal {\n        _checkRequireERC20(account, value, false, 0);\n        _totalSupply = SafeMath.add(_totalSupply, value);\n        _balanceOf[account] = SafeMath.add(_balanceOf[account], value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n    * @dev Internal function that burns an amount of the token of a given\n    * account.\n    * @param account The account whose tokens will be burnt.\n    * @param value The amount that will be burnt.\n    */\n\n    function _burn(address account, uint256 value) internal {\n        _checkRequireERC20(account, value, true, _balanceOf[account]);\n\n        _totalSupply = SafeMath.sub(_totalSupply, value);\n        _balanceOf[account] = SafeMath.sub(_balanceOf[account], value);\n        emit Transfer(account, address(0), value);\n    }\n\n\n    function _checkRequireERC20(address addr, uint value, bool checkMax, uint max) internal pure {\n        require(addr != address(0), \"Empty address\");\n        require(value > 0, \"Empty value\");\n        if (checkMax) {\n            require(value <= max, \"Out of value\");\n        }\n    }\n\n}\n\n\ncontract ERC20 is ERC20Base {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _total, address _fOwner) public {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        _mint(_fOwner, _total);\n    }\n\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    ); \n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n\n    function transfer(address to, uint256 value) public {\n        _transfer(msg.sender, to, value);\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param owner address The address which owns the funds.\n    * @param spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    \n    function allowance(address owner, address spender) public view returns(uint) {\n        return _allowed[owner][spender];\n    }\n\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param spender The address which will spend the funds.\n    * @param value The amount of tokens to be spent.\n    */\n\n    function approve(address spender, uint256 value) public {\n        _checkRequireERC20(spender, value, true, _balanceOf[msg.sender]);\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n    }\n\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param from address The address which you want to send tokens from\n    * @param to address The address which you want to transfer to\n    * @param value uint256 the amount of tokens to be transferred\n    */\n\n    function transferFrom(address from, address to, uint256 value) public {\n        _checkRequireERC20(to, value, true, _allowed[from][msg.sender]);\n\n        _allowed[from][msg.sender] = SafeMath.sub(_allowed[from][msg.sender], value);\n        _transfer(from, to, value);\n    }\n\n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed_[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * @param spender The address which will spend the funds.\n    * @param value The amount of tokens to increase the allowance by.\n    */\n\n    function increaseAllowance(address spender, uint256 value)  public {\n        _checkRequireERC20(spender, value, false, 0);\n        require(_balanceOf[msg.sender] >= (_allowed[msg.sender][spender] + value), \"Out of value\");\n\n        _allowed[msg.sender][spender] = SafeMath.add(_allowed[msg.sender][spender], value);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    }\n\n\n\n    /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed_[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * @param spender The address which will spend the funds.\n    * @param value The amount of tokens to decrease the allowance by.\n    */\n\n    function decreaseAllowance(address spender, uint256 value) public {\n        _checkRequireERC20(spender, value, true, _allowed[msg.sender][spender]);\n\n        _allowed[msg.sender][spender] = SafeMath.sub(_allowed[msg.sender][spender],value);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    }\n}\n\n\ncontract MCVToken is ERC20, Owned, Freezed {\n    \n    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _total, address _fOwner, bool _freeze) \n        public \n        ERC20(_name, _symbol, _decimals, _total, _fOwner) \n        Freezed(_freeze) {\n    }\n\n\n\tfunction freezeTransfers () public onlyOwner {\n\t\t_freezeTransfers();\n\t}\n\n\t/**\n\t* Unfreeze token transfers.\n\t* May only be called by smart contract owner.\n\t*/\n\tfunction unfreezeTransfers () public onlyOwner {\n\t\t_unfreezeTransfers();\n\t}\n\n    /**\n    * @dev Internal function that burns an amount of the token of a sender\n    * @param value The amount that will be burnt.\n    */\n\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    function transfer(address to, uint256 value) public onlyUnfreeze {\n        super.transfer(to, value);\n    }\n\n\n\n    function transferFrom(address from, address to, uint256 value) public onlyUnfreeze {\n        super.transferFrom(from, to, value);\n    }\n\n}",
  "bytecode": "60806040523480156200001157600080fd5b50604051620025f1380380620025f1833981018060405260c08110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b828101905060208101848111156200006757600080fd5b81518560018202830111640100000000821117156200008557600080fd5b50509291906020018051640100000000811115620000a257600080fd5b82810190506020810184811115620000b957600080fd5b8151856001820283011164010000000082111715620000d757600080fd5b5050929190602001805190602001909291908051906020019092919080519060200190929190805190602001909291905050508086868686868460029080519060200190620001289291906200057a565b508360039080519060200190620001419291906200057a565b5082600460006101000a81548160ff021916908360ff16021790555062000178818362000262640100000000026401000000009004565b505050505033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f6675173a8fe1b89f5898691dfddeaf1677f56a1ec486d2643c36a42643a3d6e860405160405180910390a380600760146101000a81548160ff0219169083151502179055505050505050505062000629565b620002808282600080620003b2640100000000026401000000009004565b620002a260015482620005586401000000000262001c20176401000000009004565b600181905550620003066000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482620005586401000000000262001c20176401000000009004565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151562000458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f456d70747920616464726573730000000000000000000000000000000000000081525060200191505060405180910390fd5b600083111515620004d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f456d7074792076616c756500000000000000000000000000000000000000000081525060200191505060405180910390fd5b8115620005525780831115151562000551576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4f7574206f662076616c7565000000000000000000000000000000000000000081525060200191505060405180910390fd5b5b50505050565b60008082840190508381101515156200057057600080fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620005bd57805160ff1916838001178555620005ee565b82800160010185558215620005ee579182015b82811115620005ed578251825591602001919060010190620005d0565b5b509050620005fd919062000601565b5090565b6200062691905b808211156200062257600081600090555060010162000608565b5090565b90565b611fb880620006396000396000f3fe60806040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630150246014610122578063054f7d9c1461013957806306fdde0314610168578063095ea7b3146101f857806318160ddd1461025357806323b872dd1461027e57806328c23a45146102f9578063313ce5671461031057806331c420d414610341578063395093511461035857806342966c68146103b35780634fb2e45d146103ee57806370a082311461043f5780638da5cb5b146104a45780638f32d59b146104fb57806395d89b411461052a578063a457c2d7146105ba578063a9059cbb14610615578063bd9b6d8614610670578063d128f2de14610687578063dd62ed3e1461069e575b600080fd5b34801561012e57600080fd5b50610137610723565b005b34801561014557600080fd5b5061014e6107a9565b604051808215151515815260200191505060405180910390f35b34801561017457600080fd5b5061017d6107bc565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101bd5780820151818401526020810190506101a2565b50505050905090810190601f1680156101ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020457600080fd5b506102516004803603604081101561021b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061085a565b005b34801561025f57600080fd5b5061026861098f565b6040518082815260200191505060405180910390f35b34801561028a57600080fd5b506102f7600480360360608110156102a157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610999565b005b34801561030557600080fd5b5061030e610a2e565b005b34801561031c57600080fd5b50610325610b6b565b604051808260ff1660ff16815260200191505060405180910390f35b34801561034d57600080fd5b50610356610b7e565b005b34801561036457600080fd5b506103b16004803603604081101561037b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c04565b005b3480156103bf57600080fd5b506103ec600480360360208110156103d657600080fd5b8101908080359060200190929190505050610f30565b005b3480156103fa57600080fd5b5061043d6004803603602081101561041157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f3d565b005b34801561044b57600080fd5b5061048e6004803603602081101561046257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110a2565b6040518082815260200191505060405180910390f35b3480156104b057600080fd5b506104b96110ea565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561050757600080fd5b50610510611114565b604051808215151515815260200191505060405180910390f35b34801561053657600080fd5b5061053f61116c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561057f578082015181840152602081019050610564565b50505050905090810190601f1680156105ac5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105c657600080fd5b50610613600480360360408110156105dd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061120a565b005b34801561062157600080fd5b5061066e6004803603604081101561063857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061147e565b005b34801561067c57600080fd5b50610685611511565b005b34801561069357600080fd5b5061069c6116d9565b005b3480156106aa57600080fd5b5061070d600480360360408110156106c157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611799565b6040518082815260200191505060405180910390f35b61072b611114565b151561079f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4163636573732069732064656e6965640000000000000000000000000000000081525060200191505060405180910390fd5b6107a7611820565b565b600760149054906101000a900460ff1681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108525780601f1061082757610100808354040283529160200191610852565b820191906000526020600020905b81548152906001019060200180831161083557829003601f168201915b505050505081565b6108a5828260016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611880565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35050565b6000600154905090565b600760149054906101000a900460ff16151515610a1e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f416374696f6e2074656d706f726172696c79207061757365640000000000000081525060200191505060405180910390fd5b610a29838383611a22565b505050565b610a36611114565b1515610aaa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4163636573732069732064656e6965640000000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f6675173a8fe1b89f5898691dfddeaf1677f56a1ec486d2643c36a42643a3d6e860405160405180910390a36000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600460009054906101000a900460ff1681565b610b86611114565b1515610bfa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4163636573732069732064656e6965640000000000000000000000000000000081525060200191505060405180910390fd5b610c02611bc1565b565b610c118282600080611880565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610d45576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4f7574206f662076616c7565000000000000000000000000000000000000000081525060200191505060405180910390fd5b610dcb600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611c20565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a35050565b610f3a3382611c41565b50565b610f45611114565b1515610fb9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4163636573732069732064656e6965640000000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561105e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f456d70747920616464726573730000000000000000000000000000000000000081525060200191505060405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112025780601f106111d757610100808354040283529160200191611202565b820191906000526020600020905b8154815290600101906020018083116111e557829003601f168201915b505050505081565b61129382826001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611880565b611319600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611d92565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a35050565b600760149054906101000a900460ff16151515611503576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f416374696f6e2074656d706f726172696c79207061757365640000000000000081525060200191505060405180910390fd5b61150d8282611db4565b5050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4163636573732069732064656e6965640000000000000000000000000000000081525060200191505060405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f6675173a8fe1b89f5898691dfddeaf1677f56a1ec486d2643c36a42643a3d6e860405160405180910390a3600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6116e1611114565b1515611755576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4163636573732069732064656e6965640000000000000000000000000000000081525060200191505060405180910390fd5b6000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600760149054906101000a900460ff16151561187e576001600760146101000a81548160ff0219169083151502179055507f615acbaede366d76a8b8cb2a9ada6a71495f0786513d71aa97aaf0c3910b78de60405160405180910390a15b565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515611925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f456d70747920616464726573730000000000000000000000000000000000000081525060200191505060405180910390fd5b60008311151561199d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f456d7074792076616c756500000000000000000000000000000000000000000081525060200191505060405180910390fd5b8115611a1c57808311151515611a1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4f7574206f662076616c7565000000000000000000000000000000000000000081525060200191505060405180910390fd5b5b50505050565b611aab82826001600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611880565b611b31600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611d92565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611bbc838383611dc3565b505050565b600760149054906101000a900460ff1615611c1e576000600760146101000a81548160ff0219169083151502179055507f2f05ba71d0df11bf5fa562a6569d70c4f80da84284badbe015ce1456063d0ded60405160405180910390a15b565b6000808284019050838110151515611c3757600080fd5b8091505092915050565b611c8c828260016000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611880565b611c9860015482611d92565b600181905550611ce66000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611d92565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6000828211151515611da357600080fd5b600082840390508091505092915050565b611dbf338383611dc3565b5050565b611e0e828260016000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611880565b611e566000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611d92565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ee06000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611c20565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350505056fea165627a7a723058206bcdbd345cf586e784b2f9814cb6e399e06c5ea966a51fefbaf7e1bbc9da00c4002900000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000b37fe8a7098d44b1c2579c6a48a1a87d3b16965f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000094d435620546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d43560000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000b37fe8a7098d44b1c2579c6a48a1a87d3b16965f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000094d435620546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d43560000000000000000000000000000000000000000000000000000000000"
}