{
  "address": "0x014b50466590340d41307cc54dcee990c8d58aa8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ICOSToken",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-28\n*/\n\n/*\n * ICOS Token Smart Contract.  Copyright © 2017 by ABDK Consulting.\n * Author: Mikhail Vladimirov <[email protected]>\n */\n\npragma solidity ^0.4.11;\n\ncontract Token {\n  /**\n   * Get total number of tokens in circulation.\n   *\n   * @return total number of tokens in circulation\n   */\n  function totalSupply () constant returns (uint256 supply);\n\n  /**\n   * Get number of tokens currently belonging to given owner.\n   *\n   * @param _owner address to get number of tokens currently belonging to the\n   *        owner of\n   * @return number of tokens currently belonging to the owner of given address\n   */\n  function balanceOf (address _owner) constant returns (uint256 balance);\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer (address _to, uint256 _value) returns (bool success);\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom (address _from, address _to, uint256 _value)\n  returns (bool success);\n\n  /**\n   * Allow given spender to transfer given number of tokens from message sender.\n   *\n   * @param _spender address to allow the owner of to transfer tokens from\n   *        message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n  function approve (address _spender, uint256 _value) returns (bool success);\n\n  /**\n   * Tell how many tokens given spender is currently allowed to transfer from\n   * given owner.\n   *\n   * @param _owner address to get number of tokens allowed to be transferred\n   *        from the owner of\n   * @param _spender address to get number of tokens allowed to be transferred\n   *        by the owner of\n   * @return number of tokens given spender is currently allowed to transfer\n   *         from given owner\n   */\n  function allowance (address _owner, address _spender) constant\n  returns (uint256 remaining);\n\n  /**\n   * Logged when tokens were transferred from one owner to another.\n   *\n   * @param _from address of the owner, tokens were transferred from\n   * @param _to address of the owner, tokens were transferred to\n   * @param _value number of tokens transferred\n   */\n  event Transfer (address indexed _from, address indexed _to, uint256 _value);\n\n  /**\n   * Logged when owner approved his tokens to be transferred by some spender.\n   *\n   * @param _owner owner who approved his tokens to be transferred\n   * @param _spender spender who were allowed to transfer the tokens belonging\n   *        to the owner\n   * @param _value number of tokens belonging to the owner, approved to be\n   *        transferred by the spender\n   */\n  event Approval (\n    address indexed _owner, address indexed _spender, uint256 _value);\n}\n/*\n * Safe Math Smart Contract.  Copyright © 2016–2017 by ABDK Consulting.\n * Author: Mikhail Vladimirov <[email protected]>\n */\npragma solidity ^0.4.11;\n\n/**\n * Provides methods to safely add, subtract and multiply uint256 numbers.\n */\ncontract SafeMath {\n  uint256 constant private MAX_UINT256 =\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n  /**\n   * Add two uint256 values, throw in case of overflow.\n   *\n   * @param x first value to add\n   * @param y second value to add\n   * @return x + y\n   */\n  function safeAdd (uint256 x, uint256 y)\n  constant internal\n  returns (uint256 z) {\n    if (x > MAX_UINT256 - y) throw;\n    return x + y;\n  }\n\n  /**\n   * Subtract one uint256 value from another, throw in case of underflow.\n   *\n   * @param x value to subtract from\n   * @param y value to subtract\n   * @return x - y\n   */\n  function safeSub (uint256 x, uint256 y)\n  constant internal\n  returns (uint256 z) {\n    if (x < y) throw;\n    return x - y;\n  }\n\n  /**\n   * Multiply two uint256 values, throw in case of overflow.\n   *\n   * @param x first value to multiply\n   * @param y second value to multiply\n   * @return x * y\n   */\n  function safeMul (uint256 x, uint256 y)\n  constant internal\n  returns (uint256 z) {\n    if (y == 0) return 0; // Prevent division by zero at the next line\n    if (x > MAX_UINT256 / y) throw;\n    return x * y;\n  }\n}\n/**\n * Abstract Token Smart Contract that could be used as a base contract for\n * ERC-20 token contracts.\n */\ncontract AbstractToken is Token, SafeMath {\n  /**\n   * Create new Abstract Token contract.\n   */\n  function AbstractToken () {\n    // Do nothing\n  }\n\n  /**\n   * Get number of tokens currently belonging to given owner.\n   *\n   * @param _owner address to get number of tokens currently belonging to the\n   *        owner of\n   * @return number of tokens currently belonging to the owner of given address\n   */\n  function balanceOf (address _owner) constant returns (uint256 balance) {\n    return accounts [_owner];\n  }\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer (address _to, uint256 _value) returns (bool success) {\n    if (accounts [msg.sender] < _value) return false;\n    if (_value > 0 && msg.sender != _to) {\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n      Transfer (msg.sender, _to, _value);\n    }\n    return true;\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom (address _from, address _to, uint256 _value)\n  returns (bool success) {\n    if (allowances [_from][msg.sender] < _value) return false;\n    if (accounts [_from] < _value) return false;\n\n    allowances [_from][msg.sender] =\n      safeSub (allowances [_from][msg.sender], _value);\n\n    if (_value > 0 && _from != _to) {\n      accounts [_from] = safeSub (accounts [_from], _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n      Transfer (_from, _to, _value);\n    }\n    return true;\n  }\n\n  /**\n   * Allow given spender to transfer given number of tokens from message sender.\n   *\n   * @param _spender address to allow the owner of to transfer tokens from\n   *        message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n  function approve (address _spender, uint256 _value) returns (bool success) {\n    allowances [msg.sender][_spender] = _value;\n    Approval (msg.sender, _spender, _value);\n\n    return true;\n  }\n\n  /**\n   * Tell how many tokens given spender is currently allowed to transfer from\n   * given owner.\n   *\n   * @param _owner address to get number of tokens allowed to be transferred\n   *        from the owner of\n   * @param _spender address to get number of tokens allowed to be transferred\n   *        by the owner of\n   * @return number of tokens given spender is currently allowed to transfer\n   *         from given owner\n   */\n  function allowance (address _owner, address _spender) constant\n  returns (uint256 remaining) {\n    return allowances [_owner][_spender];\n  }\n\n  /**\n   * Mapping from addresses of token holders to the numbers of tokens belonging\n   * to these token holders.\n   */\n  mapping (address => uint256) accounts;\n\n  /**\n   * Mapping from addresses of token holders to the mapping of addresses of\n   * spenders to the allowances set by these token holders to these spenders.\n   */\n  mapping (address => mapping (address => uint256)) private allowances;\n}\n\n\ncontract ICOSToken is AbstractToken {\n  /**\n   * Address of the owner of this smart contract.\n   */\n  address owner;\n\n  /**\n   * Total number of tokens ins circulation.\n   */\n  uint256 tokensCount;\n\n  /**\n   * True if tokens transfers are currently frozen, false otherwise.\n   */\n  bool frozen = false;\n\n  /**\n   * Create new ICOS Token Smart Contract, make message sender to be the owner\n   * of smart contract, issue given number of tokens and give them to message\n   * sender.\n   *\n   * @param _tokensCount number of tokens to issue and give to message sender\n   */\n  function ICOSToken (uint256 _tokensCount) {\n    tokensCount = _tokensCount;\n    accounts [msg.sender] = _tokensCount;\n    owner = msg.sender;\n  }\n\n  /**\n   * Get name of this token.\n   *\n   * @return name of this token\n   */\n  function name () constant returns (string name) {\n    return \"ICOS\";\n  }\n\n  /**\n   * Get number of decimals for this token.\n   *\n   * @return number of decimals for this token\n   */\n  function decimals () constant returns (uint8 decimals) {\n    return 6;\n  }\n\n  /**\n   * Get total number of tokens in circulation.\n   *\n   * @return total number of tokens in circulation\n   */\n  function totalSupply () constant returns (uint256 supply) {\n    return tokensCount;\n  }\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer (address _to, uint256 _value) returns (bool success) {\n    if (frozen) return false;\n    else return AbstractToken.transfer (_to, _value);\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom (address _from, address _to, uint256 _value)\n  returns (bool success) {\n    if (frozen) return false;\n    else return AbstractToken.transferFrom (_from, _to, _value);\n  }\n\n  /**\n   * Change how many tokens given spender is allowed to transfer from message\n   * spender.  In order to prevent double spending of allowance, this method\n   * receives assumed current allowance value as an argument.  If actual\n   * allowance differs from an assumed one, this method just returns false.\n   *\n   * @param _spender address to allow the owner of to transfer tokens from\n   *        message sender\n   * @param _currentValue assumed number of tokens currently allowed to be\n   *        transferred\n   * @param _newValue number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n  function approve (address _spender, uint256 _currentValue, uint256 _newValue)\n  returns (bool success) {\n    if (allowance (msg.sender, _spender) == _currentValue)\n      return approve (_spender, _newValue);\n    else return false;\n  }\n\n  /**\n   * Burn given number of tokens belonging to message sender.\n   *\n   * @param _value number of tokens to burn\n   * @return true on success, false on error\n   */\n  function burnTokens (uint256 _value) returns (bool success) {\n    if (_value > accounts [msg.sender]) return false;\n    else if (_value > 0) {\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\n      tokensCount = safeSub (tokensCount, _value);\n      return true;\n    } else return true;\n  }\n\n  /**\n   * Set new owner for the smart contract.\n   * May only be called by smart contract owner.\n   *\n   * @param _newOwner address of new owner of the smart contract\n   */\n  function setOwner (address _newOwner) {\n    if (msg.sender != owner) throw;\n\n    owner = _newOwner;\n  }\n\n  /**\n   * Freeze token transfers.\n   * May only be called by smart contract owner.\n   */\n  function freezeTransfers () {\n    if (msg.sender != owner) throw;\n\n    if (!frozen) {\n      frozen = true;\n      Freeze ();\n    }\n  }\n\n  /**\n   * Unfreeze token transfers.\n   * May only be called by smart contract owner.\n   */\n  function unfreezeTransfers () {\n    if (msg.sender != owner) throw;\n\n    if (frozen) {\n      frozen = false;\n      Unfreeze ();\n    }\n  }\n\n  /**\n   * Logged when token transfers were frozen.\n   */\n  event Freeze ();\n\n  /**\n   * Logged when token transfers were unfrozen.\n   */\n  event Unfreeze ();\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"freezeTransfers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"decimals\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreezeTransfers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_currentValue\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokensCount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526004805460ff19169055341561001657fe5b6040516020806109e883398101604052515b5b5b6003819055600160a060020a033316600081815260208190526040902082905560028054600160a060020a03191690911790555b505b6109798061006f6000396000f300606060405236156100c25763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630150246081146100c457806306fdde03146100d6578063095ea7b31461016657806313af40351461019957806318160ddd146101b757806323b872dd146101d9578063313ce5671461021257806331c420d414610238578063426a84931461024a5780636d1b229d1461028057806370a08231146102a7578063a9059cbb146102d5578063dd62ed3e14610308575bfe5b34156100cc57fe5b6100d461033c565b005b34156100de57fe5b6100e661039e565b60408051602080825283518183015283519192839290830191850190808383821561012c575b80518252602083111561012c57601f19909201916020918201910161010c565b505050905090810190601f1680156101585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016e57fe5b610185600160a060020a03600435166024356103df565b604080519115158252519081900360200190f35b34156101a157fe5b6100d4600160a060020a036004351661044a565b005b34156101bf57fe5b6101c7610492565b60408051918252519081900360200190f35b34156101e157fe5b610185600160a060020a0360043581169060243516604435610499565b604080519115158252519081900360200190f35b341561021a57fe5b6102226104c5565b6040805160ff9092168252519081900360200190f35b341561024057fe5b6100d46104cb565b005b341561025257fe5b610185600160a060020a0360043516602435604435610529565b604080519115158252519081900360200190f35b341561028857fe5b61018560043561055d565b604080519115158252519081900360200190f35b34156102af57fe5b6101c7600160a060020a03600435166105ed565b60408051918252519081900360200190f35b34156102dd57fe5b610185600160a060020a036004351660243561060c565b604080519115158252519081900360200190f35b341561031057fe5b6101c7600160a060020a036004358116906024351661063a565b60408051918252519081900360200190f35b60025433600160a060020a039081169116146103585760006000fd5b60045460ff16151561039b576004805460ff191660011790556040517f615acbaede366d76a8b8cb2a9ada6a71495f0786513d71aa97aaf0c3910b78de90600090a15b5b565b6103a661093b565b5060408051808201909152600481527f49434f530000000000000000000000000000000000000000000000000000000060208201525b90565b600160a060020a03338116600081815260016020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60025433600160a060020a039081169116146104665760006000fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b6003545b90565b60045460009060ff16156104af575060006104bd565b6104ba848484610667565b90505b5b9392505050565b60065b90565b60025433600160a060020a039081169116146104e75760006000fd5b60045460ff161561039b576004805460ff191690556040517f2f05ba71d0df11bf5fa562a6569d70c4f80da84284badbe015ce1456063d0ded90600090a15b5b565b600082610536338661063a565b141561054d576104ba84836103df565b90506104bd565b5060006104bd565b5b9392505050565b600160a060020a033316600090815260208190526040812054821115610585575060006105e6565b60008211156105e257600160a060020a0333166000908152602081905260409020546105b190836107fe565b600160a060020a0333166000908152602081905260409020556003546105d790836107fe565b6003555060016105e6565b5060015b5b5b919050565b600160a060020a0381166000908152602081905260409020545b919050565b60045460009060ff161561062257506000610444565b61062c8383610819565b9050610444565b5b92915050565b600160a060020a038083166000908152600160209081526040808320938516835292905220545b92915050565b600160a060020a03808416600090815260016020908152604080832033909416835292905290812054829010156106a0575060006104bd565b600160a060020a038416600090815260208190526040902054829010156106c9575060006104bd565b600160a060020a03808516600090815260016020908152604080832033909416835292905220546106fa90836107fe565b600160a060020a0380861660009081526001602090815260408083203390941683529290529081209190915582118015610746575082600160a060020a031684600160a060020a031614155b156107f357600160a060020a03841660009081526020819052604090205461076e90836107fe565b600160a060020a03808616600090815260208190526040808220939093559085168152205461079d908361091c565b600160a060020a038085166000818152602081815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35b5060015b9392505050565b60008183101561080e5760006000fd5b508082035b92915050565b600160a060020a0333166000908152602081905260408120548290101561084257506000610444565b600082118015610864575082600160a060020a031633600160a060020a031614155b1561091257600160a060020a03331660009081526020819052604090205461088c90836107fe565b600160a060020a0333811660009081526020819052604080822093909355908516815220546108bb908361091c565b600160a060020a03808516600081815260208181526040918290209490945580518681529051919333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35b5060015b92915050565b600081600019038311156109305760006000fd5b508181015b92915050565b604080516020810190915260008152905600a165627a7a7230582002e17aeec54bbe6d83c363123e6f20d6582d5cd6bf867ed9c8fdcfc2abd9d8d1002900000000000000000000000000000000000000000000000000000089bf1f0240",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000089bf1f0240"
}