{
  "address": "0x3cc2806b2aff4a3a77dfb99f0ed689db221a4a29",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ldoh",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-14\n*/\n\npragma solidity ^0.4.25;\n\n/**\n\n\n\t\t\t\t\t.----------------.  .----------------.  .----------------.  .----------------. \n\t\t\t\t\t| .--------------. || .--------------. || .--------------. || .--------------. |\n\t\t\t\t\t| |  ____  ____  | || |     ____     | || |   _____      | || |  ________    | |\n\t\t\t\t\t| | |_   ||   _| | || |   .'    `.   | || |  |_   _|     | || | |_   ___ `.  | |\n\t\t\t\t\t| |   | |__| |   | || |  /  .--.  \\  | || |    | |       | || |   | |   `. \\ | |\n\t\t\t\t\t| |   |  __  |   | || |  | |    | |  | || |    | |   _   | || |   | |    | | | |\n\t\t\t\t\t| |  _| |  | |_  | || |  \\  `--'  /  | || |   _| |__/ |  | || |  _| |___.' / | |\n\t\t\t\t\t| | |____||____| | || |   `.____.'   | || |  |________|  | || | |________.'  | |\n\t\t\t\t\t| |              | || |              | || |              | || |              | |\n\t\t\t\t\t| '--------------' || '--------------' || '--------------' || '--------------' |\n\t\t\t\t\t'----------------'  '----------------'  '----------------'  '----------------' \n\n \n*/\n\n\t/*==============================\n    =          Version 7.3         =\n    ==============================*/\n\t\ncontract EthereumSmartContract {    \n    address EthereumNodes; \n\t\n    constructor() public { \n        EthereumNodes = msg.sender;\n    }\n    modifier restricted() {\n        require(msg.sender == EthereumNodes);\n        _;\n    } \n\t\n    function GetEthereumNodes() public view returns (address owner) { return EthereumNodes; }\n}\n\ncontract ldoh is EthereumSmartContract {\n\t\n\t/*==============================\n    =            EVENTS            =\n    ==============================*/\n\t\n\tevent onCashbackCode\t(address indexed hodler, address cashbackcode);\t\t\n\tevent onAffiliateBonus\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\t\n\tevent onClaimTokens\t\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\t\t\n\tevent onHodlTokens\t\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\n\tevent onAddContractAddress(address indexed contracthodler, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth, uint256 _HodlingTime);\t\n\n\t\n\t\n\t/*==============================\n    =          VARIABLES           =\n    ==============================*/   \n\n\taddress public DefaultToken;\n\n\t//-------o Affiliate = 12% o-------o Cashback = 16% o-------o Total Receive = 88% o-------o Without Cashback = 72% o-------o\t\n\t\n\t// Struct Database\n\n    struct Safe {\n        uint256 id;\t\t\t\t\t\t// 01 -- > Registration Number\n        uint256 amount;\t\t\t\t\t// 02 -- > Total amount of contribution to this transaction\n        uint256 endtime;\t\t\t\t// 03 -- > The Expiration Of A Hold Platform Based On Unix Time\n        address user;\t\t\t\t\t// 04 -- > The ETH address that you are using\n        address tokenAddress;\t\t\t// 05 -- > The Token Contract Address That You Are Using\n\t\tstring  tokenSymbol;\t\t\t// 06 -- > The Token Symbol That You Are Using\n\t\tuint256 amountbalance; \t\t\t// 07 -- > 88% from Contribution / 72% Without Cashback\n\t\tuint256 cashbackbalance; \t\t// 08 -- > 16% from Contribution / 0% Without Cashback\n\t\tuint256 lasttime; \t\t\t\t// 09 -- > The Last Time You Withdraw Based On Unix Time\n\t\tuint256 percentage; \t\t\t// 10 -- > The percentage of tokens that are unlocked every month ( Default = 3% )\n\t\tuint256 percentagereceive; \t\t// 11 -- > The Percentage You Have Received\n\t\tuint256 tokenreceive; \t\t\t// 12 -- > The Number Of Tokens You Have Received\n\t\tuint256 lastwithdraw; \t\t\t// 13 -- > The Last Amount You Withdraw\n\t\taddress referrer; \t\t\t\t// 14 -- > Your ETH referrer address\n\t\tbool \tcashbackstatus; \t\t// 15 -- > Cashback Status\n    }\n\t\n\t\t// Uint256\n\t\t\n\tuint256 private _currentIndex; \t\t\t\t\t\t\t\t\t// 01 -- > ID number ( Start from 500 )\t\t\t\t//IDNumber\n\tuint256 public  _countSafes; \t\t\t\t\t\t\t\t\t// 02 -- > Total Smart Contract User\t\t\t\t//TotalUser\n\t\n\t\t// Mapping\n\t\t\n\tmapping(address => address) \t\tpublic cashbackcode; \t\t// 01 -- > Cashback Code \t\t\t\t\t\n\tmapping(address => uint256) \t\tpublic percent; \t\t\t// 02 -- > Monthly Unlock Percentage (Default 3%)\n\tmapping(address => uint256) \t\tpublic hodlingTime; \t\t// 03 -- > Length of hold time in seconds\n\tmapping(address => uint256) \t\tpublic _totalSaved; \t\t// 04 -- > Token Balance\t\t\t\t\t\t\t//TokenBalance\t\n\tmapping(address => uint256) \t\tprivate EthereumVault;    \t// 05 -- > Reserve Funds\t\t\t\t\n\tmapping(address => uint256) \t\tpublic maxcontribution; \t// 06 -- > Maximum Contribution\t\t\t\t\t//N\t\n\tmapping(address => uint256) \t\tpublic AllContribution; \t// 07 -- > Deposit amount for all members\t\t//N\t\n\tmapping(address => uint256) \t\tpublic AllPayments; \t\t// 08 -- > Withdraw amount for all members\t\t//N\n\tmapping(address => uint256) \t\tpublic token_price; \t\t// 09 -- > Token Price ( USD )\t\t\t\t\t//N\n\tmapping(address => bool) \t\t\tpublic contractaddress; \t// 10 -- > Contract Address \n\tmapping(address => bool) \t\t\tpublic activeuser; \t\t\t// 11 -- > Active User Status\n\tmapping(address => uint256[]) \t\tpublic _userSafes;\t\t\t// 12 -- > Search ID by Address \t\t\t\t\t//IDAddress\n\tmapping(address => address[]) \t\tpublic afflist;\t\t\t\t// 13 -- > Affiliate List by ID\t\t\t\t\t//N\n\tmapping(address => string) \t\t\tpublic ContractSymbol; \t\t// 14 -- > Contract Address Symbol\t\t\t\t//N\n\tmapping(uint256 => Safe) \t\t\tprivate _safes; \t\t\t// 15 -- > Struct safe database\t\t\t\n\t\t\t\n\tmapping (address => mapping (address => mapping (uint256 => uint256))) public Statistics;\n\t//3rd uint256, Category >>> 1 = LifetimeContribution, 2 = LifetimePayments, 3 = Affiliatevault, 4 = Affiliateprofit, 5 = ActiveContribution\n\t\n\t\n\t\t// Airdrop - Hold Platform (HPM)\n\t\t\t\t\t\t\t\t\n\taddress public Holdplatform_address;\t\n\tuint256 public Holdplatform_balance; \t\n\tmapping(address => bool) \tpublic Holdplatform_status;\n\tmapping(address => uint256) public Holdplatform_ratio; \t\n\t\n \n\t\n\t/*==============================\n    =          CONSTRUCTOR         =\n    ==============================*/  \t\n   \n    constructor() public {     \t \t\n        _currentIndex \t\t\t= 500;\n\t\tHoldplatform_address\t= 0x23bAdee11Bf49c40669e9b09035f048e9146213e;\t//Change before deploy\n    }\n    \n\t\n\t/*==============================\n    =    AVAILABLE FOR EVERYONE    =\n    ==============================*/  \n\n//-------o Function 01 - Ethereum Payable\n\n    function () public payable {    \n        if (msg.value > 0 ) { EthereumVault[0x0] = add(EthereumVault[0x0], msg.value);}\t\t \n    }\n\t\n\t\n//-------o Function 02 - Cashback Code\n\n    function CashbackCode(address _cashbackcode) public {\t\t\n\t\trequire(_cashbackcode != msg.sender);\t\t\n\t\tif (cashbackcode[msg.sender] == 0 && activeuser[_cashbackcode] == true) { \n\t\tcashbackcode[msg.sender] = _cashbackcode; }\n\t\telse { cashbackcode[msg.sender] = EthereumNodes; }\t\t\n\t\t\n\temit onCashbackCode(msg.sender, _cashbackcode);\t\t\n    } \n\t\n//-------o Function 03 - Contribute \n\n\t//--o 01\n    function HodlTokens(address tokenAddress, uint256 amount) public {\n        require(tokenAddress != 0x0);\n\t\trequire(amount > 0 && add(Statistics[msg.sender][tokenAddress][5], amount) <= maxcontribution[tokenAddress] );\n\t\t\n\t\tif (contractaddress[tokenAddress] == false) { revert(); } else { \t\t\n\t\tERC20Interface token \t\t\t= ERC20Interface(tokenAddress);       \n        require(token.transferFrom(msg.sender, address(this), amount));\t\n\t\t\n\t\tHodlTokens2(tokenAddress, amount);}\t\t\t\t\t\t\t\n\t}\n\t//--o 02\t\n    function HodlTokens2(address ERC, uint256 amount) private {\n\t\t\n\t\tuint256 AvailableBalances \t\t\t\t\t= div(mul(amount, 72), 100);\t\n\t\t\n\t\tif (cashbackcode[msg.sender] == 0 ) { //--o  Hold without cashback code\n\t\t\n\t\t\taddress ref\t\t\t\t\t\t\t\t= EthereumNodes;\n\t\t\tcashbackcode[msg.sender] \t\t\t\t= EthereumNodes;\n\t\t\tuint256 AvailableCashback \t\t\t\t= 0; \t\t\t\n\t\t\tuint256 zerocashback \t\t\t\t\t= div(mul(amount, 28), 100); \n\t\t\tEthereumVault[ERC] \t\t\t\t\t\t= add(EthereumVault[ERC], zerocashback);\n\t\t\tStatistics[EthereumNodes][ERC][4]\t\t= add(Statistics[EthereumNodes][ERC][4], zerocashback); \t\t\n\t\t\t\n\t\t} else { \t//--o  Cashback code has been activated\n\t\t\n\t\t\tref\t\t\t\t\t\t\t\t\t\t= cashbackcode[msg.sender];\n\t\t\tuint256 affcomission \t\t\t\t\t= div(mul(amount, 12), 100); \t\n\t\t\tAvailableCashback \t\t\t\t\t\t= div(mul(amount, 16), 100);\t\t\t\n\t\t\tuint256 ReferrerContribution \t\t\t= Statistics[ref][ERC][5];\t\t\n\t\t\tuint256 ReferralContribution\t\t\t= add(Statistics[ref][ERC][5], amount);\n\t\t\t\n\t\t\tif (ReferrerContribution >= ReferralContribution) { //--o  if referrer contribution >= referral contribution\n\t\t\n\t\t\t\tStatistics[ref][ERC][3] \t\t\t= add(Statistics[ref][ERC][3], affcomission); \n\t\t\t\tStatistics[ref][ERC][4] \t\t\t= add(Statistics[ref][ERC][4], affcomission); \t\n\t\t\t\t\n\t\t\t} else {\t\t\t\t\t\t\t\t\t\t\t//--o  if referral contribution > referrer contribution\n\t\t\t\n\t\t\t\tuint256 Newbie \t\t\t\t\t\t= div(mul(ReferrerContribution, 12), 100); \t\t\t\n\t\t\t\tStatistics[ref][ERC][3]\t\t\t\t= add(Statistics[ref][ERC][3], Newbie); \n\t\t\t\tStatistics[ref][ERC][4] \t\t\t= add(Statistics[ref][ERC][4], Newbie); \n\t\t\t\t\n\t\t\t\tuint256 NodeFunds \t\t\t\t\t= sub(affcomission, Newbie);\t\n\t\t\t\tEthereumVault[ERC] \t\t\t\t\t= add(EthereumVault[ERC], NodeFunds);\n\t\t\t\tStatistics[EthereumNodes][ERC][4] \t= add(Statistics[EthereumNodes][ERC][4], NodeFunds); \t\t\t\t\n\t\t\t}\n\t\t} \n\n\t\tHodlTokens3(ERC, amount, AvailableBalances, AvailableCashback, ref); \t\n\t}\n\t//--o 03\t\n    function HodlTokens3(address ERC, uint256 amount, uint256 AvailableBalances, uint256 AvailableCashback, address ref) private {\n\t    \n\t    ERC20Interface token \t= ERC20Interface(ERC); \t\n\t\tuint256 TokenPercent \t= percent[ERC];\t\n\t\tuint256 TokenHodlTime \t= hodlingTime[ERC];\t\n\t\tuint256 HodlTime\t\t= add(now, TokenHodlTime);\n\t\t\n\t\tuint256 AM = amount; \tuint256 AB = AvailableBalances;\t\tuint256 AC = AvailableCashback;\t\n\t\tamount \t= 0; AvailableBalances = 0; AvailableCashback = 0;\n\t\t\n\t\t_safes[_currentIndex] = Safe(_currentIndex, AM, HodlTime, msg.sender, ERC, token.symbol(), AB, AC, now, TokenPercent, 0, 0, 0, ref, false);\t\n\t\t\t\t\n\t\tStatistics[msg.sender][ERC][1]\t\t\t= add(Statistics[msg.sender][ERC][1], AM); \n\t\tStatistics[msg.sender][ERC][5]  \t\t= add(Statistics[msg.sender][ERC][5], AM); \t\t\t\n\t\tAllContribution[ERC] \t\t\t\t\t= add(AllContribution[ERC], AM);   \t\n        _totalSaved[ERC] \t\t\t\t\t\t= add(_totalSaved[ERC], AM);  \n\t\tactiveuser[msg.sender] \t\t\t\t\t= true;  \t\t\n\t\t\n\t\tafflist[ref].push(msg.sender); _userSafes[msg.sender].push(_currentIndex); _currentIndex++; _countSafes++;       \n        emit onHodlTokens(msg.sender, ERC, token.symbol(), AM, HodlTime);\t\t\n\t\t\n\t    HodlTokens4(ERC, amount); \t\n\t}\n\t//--o 04\t\n    function HodlTokens4(address ERC, uint256 amount) private {\n\t\t\n\t\tif (Holdplatform_status[ERC] == true) {\n\t\trequire(Holdplatform_balance > 0);\n\t\t\t\n\t\tuint256 Airdrop\t= div(mul(Holdplatform_ratio[ERC], amount), 100000);\n\t\t\n\t\tERC20Interface token \t= ERC20Interface(Holdplatform_address);        \n        require(token.balanceOf(address(this)) >= Airdrop);\n\n        token.transfer(msg.sender, Airdrop);\n\t\t}\t\t\n\t}\n\t\n//-------o Function 05 - Claim Token That Has Been Unlocked\n    function ClaimTokens(address tokenAddress, uint256 id) public {\n        require(tokenAddress != 0x0);\n        require(id != 0);        \n        \n        Safe storage s = _safes[id];\n        require(s.user == msg.sender);  \n\t\trequire(s.tokenAddress == tokenAddress);\n\t\t\n\t\tif (s.amountbalance == 0) { revert(); } else { UnlockToken1(tokenAddress, id); }\n    }\n    //--o 01\n    function UnlockToken1(address ERC, uint256 id) private {\n        Safe storage s = _safes[id];      \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\n\n        uint256 eventAmount\t\t\t\t= s.amountbalance;\n        address eventTokenAddress \t\t= s.tokenAddress;\n        string memory eventTokenSymbol \t= s.tokenSymbol;\t\t\n\t\t     \n        if(s.endtime < now){ //--o  Hold Complete\n        \n\t\tuint256 amounttransfer \t\t\t\t\t= add(s.amountbalance, s.cashbackbalance);\n\t\tStatistics[msg.sender][ERC][5] \t\t\t= sub(Statistics[s.user][s.tokenAddress][5], s.amount); \t\t\n\t\ts.lastwithdraw \t\t\t\t\t\t\t= s.amountbalance;   s.amountbalance = 0;   s.lasttime = now;  \t\t\n\t\tPayToken(s.user, s.tokenAddress, amounttransfer); \n\t\t\n\t\t    if(s.cashbackbalance > 0 && s.cashbackstatus == false || s.cashbackstatus == true) {\n            s.tokenreceive \t= div(mul(s.amount, 88), 100) ; \ts.percentagereceive = mul(1000000000000000000, 88);\n            }\n\t\t\telse {\n\t\t\ts.tokenreceive \t= div(mul(s.amount, 72), 100) ;     s.percentagereceive = mul(1000000000000000000, 72);\n\t\t\t}\n\t\t\t\n\t\ts.cashbackbalance = 0;\t\n\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n\t\t\n        } else { UnlockToken2(ERC, s.id); }\n        \n    }   \n\t//--o 02\n\tfunction UnlockToken2(address ERC, uint256 id) private {\t\t\n\t\tSafe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\t\t\n\t\t\t\n\t\tuint256 timeframe  \t\t\t= sub(now, s.lasttime);\t\t\t                            \n\t\tuint256 CalculateWithdraw \t= div(mul(div(mul(s.amount, s.percentage), 100), timeframe), 2592000); // 2592000 = seconds30days\n\t\t\t\t\t\t\t//--o   = s.amount * s.percentage / 100 * timeframe / seconds30days\t;\n\t\t                         \n\t\tuint256 MaxWithdraw \t\t= div(s.amount, 10);\n\t\t\t\n\t\t//--o Maximum withdraw before unlocked, Max 10% Accumulation\n\t\t\tif (CalculateWithdraw > MaxWithdraw) { uint256 MaxAccumulation = MaxWithdraw; } else { MaxAccumulation = CalculateWithdraw; }\n\t\t\t\n\t\t//--o Maximum withdraw = User Amount Balance   \n\t\t\tif (MaxAccumulation > s.amountbalance) { uint256 realAmount1 = s.amountbalance; } else { realAmount1 = MaxAccumulation; }\n\t\t\t\n\t\tuint256 realAmount\t\t\t= add(s.cashbackbalance, realAmount1); \t\t\t\n\t\tuint256 newamountbalance \t= sub(s.amountbalance, realAmount);\n\t\ts.amountbalance \t\t\t= 0; \n\t\ts.amountbalance \t\t\t= newamountbalance;\n\t\ts.lastwithdraw \t\t\t\t= realAmount; \n\t\ts.lasttime \t\t\t\t\t= now; \t\t\n\t\t\t\n\t\tUnlockToken3(ERC, id, newamountbalance, realAmount);\t\t\n    }   \n\t//--o 03\n    function UnlockToken3(address ERC, uint256 id, uint256 newamountbalance, uint256 realAmount) private {\n        Safe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\n\n        uint256 eventAmount\t\t\t\t= realAmount;\n        address eventTokenAddress \t\t= s.tokenAddress;\n        string memory eventTokenSymbol \t= s.tokenSymbol;\t\t\n\n\t\tuint256 tokenaffiliate \t\t= div(mul(s.amount, 12), 100) ; \n\t\tuint256 maxcashback \t\t= div(mul(s.amount, 16), 100) ; \t\n\t\t\n\t\t\tif (cashbackcode[msg.sender] == EthereumNodes || s.cashbackbalance > 0  ) {\n\t\t\tuint256 tokenreceived \t= sub(sub(sub(s.amount, tokenaffiliate), maxcashback), newamountbalance) ;\t\n\t\t\t}else { tokenreceived \t= sub(sub(s.amount, tokenaffiliate), newamountbalance) ;}\n\t\t\t\n\t\tuint256 percentagereceived \t= div(mul(tokenreceived, 100000000000000000000), s.amount) ; \t\n\t\t\n\t\ts.tokenreceive \t\t\t\t\t= tokenreceived; \n\t\ts.percentagereceive \t\t\t= percentagereceived; \t\t\n\n\t\tPayToken(s.user, s.tokenAddress, realAmount);           \t\t\n\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n    } \n\t//--o Pay Token\n    function PayToken(address user, address tokenAddress, uint256 amount) private {\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n\t\t\n\t\t_totalSaved[tokenAddress] \t\t\t\t\t= sub(_totalSaved[tokenAddress], amount); \n\t\tAllPayments[tokenAddress] \t\t\t\t\t= add(AllPayments[tokenAddress], amount);\n\t\tStatistics[msg.sender][tokenAddress][2]  \t= add(Statistics[user][tokenAddress][2], amount); \n    }  \n\t\n//-------o Function 06 - Get How Many Contribute ?\n\n    function GetUserSafesLength(address hodler) public view returns (uint256 length) {\n        return _userSafes[hodler].length;\n    }\n\t\n//-------o Function 07 - Get How Many Affiliate ?\n\n    function GetTotalAffiliate(address hodler) public view returns (uint256 length) {\n        return afflist[hodler].length;\n    }\n    \n//-------o Function 08 - Get complete data from each user\n\tfunction GetSafe(uint256 _id) public view\n        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 endtime, string tokenSymbol, uint256 amountbalance, uint256 cashbackbalance, uint256 lasttime, uint256 percentage, uint256 percentagereceive, uint256 tokenreceive)\n    {\n        Safe storage s = _safes[_id];\n        return(s.id, s.user, s.tokenAddress, s.amount, s.endtime, s.tokenSymbol, s.amountbalance, s.cashbackbalance, s.lasttime, s.percentage, s.percentagereceive, s.tokenreceive);\n    }\n\t\n//-------o Function 09 - Get Tokens Reserved For Ethereum Vault\n\n    function GetTokenReserve(address tokenAddress) public view returns (uint256 amount) {\n        return EthereumVault[tokenAddress];\n    }    \n\t\n//-------o Function 10 - Get Ethereum Contract's Balance  \n\n    function GetContractBalance() public view returns(uint256)\n    {\n        return address(this).balance;\n    } \t\n\t\n//-------o Function 11 - Withdraw Affiliate Bonus\n\n    function WithdrawAffiliate(address user, address tokenAddress) public {  \n\t\trequire(tokenAddress != 0x0);\t\t\n\t\trequire(Statistics[user][tokenAddress][3] > 0 );\n\t\t\n\t\tuint256 amount = Statistics[msg.sender][tokenAddress][3];\n\t\tStatistics[msg.sender][tokenAddress][3] = 0;\n\t\t\n\t\t_totalSaved[tokenAddress] \t\t= sub(_totalSaved[tokenAddress], amount); \n\t\tAllPayments[tokenAddress] \t\t= add(AllPayments[tokenAddress], amount);\n\t\t\n\t\tuint256 eventAmount\t\t\t\t= amount;\n        address eventTokenAddress \t\t= tokenAddress;\n        string \tmemory eventTokenSymbol = ContractSymbol[tokenAddress];\t\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n\t\t\n\t\tStatistics[user][tokenAddress][2] \t= add(Statistics[user][tokenAddress][2], amount); \n\t\t\n\t\temit onAffiliateBonus(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n    } \t\t\n\t\n\t\n\t/*==============================\n    =          RESTRICTED          =\n    ==============================*/  \t\n\n//-------o 01 Add Contract Address\t\n    function AddContractAddress(address tokenAddress, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth) public restricted {\n\t\tuint256 newSpeed\t= _PercentPermonth;\n\t\trequire(newSpeed >= 3 && newSpeed <= 12);\n\t\t\n\t\tpercent[tokenAddress] \t\t\t= newSpeed;\t\n\t\tContractSymbol[tokenAddress] \t= _ContractSymbol;\n\t\tmaxcontribution[tokenAddress] \t= _maxcontribution;\t\n\t\t\n\t\tuint256 _HodlingTime \t\t\t= mul(div(72, newSpeed), 30);\n\t\tuint256 HodlTime \t\t\t\t= _HodlingTime * 1 days;\t\t\n\t\thodlingTime[tokenAddress] \t\t= HodlTime;\t\n\t\t\n\t\tif (DefaultToken == 0x0000000000000000000000000000000000000000) { DefaultToken = tokenAddress; } \n\t\t\n\t\tif (tokenAddress == DefaultToken && contractstatus == false) {\n\t\t\tcontractaddress[tokenAddress] \t= true;\n\t\t} else {         \n\t\t\tcontractaddress[tokenAddress] \t= contractstatus; \n\t\t}\t\n\t\t\n\t\temit onAddContractAddress(tokenAddress, contractstatus, _maxcontribution, _ContractSymbol, _PercentPermonth, HodlTime);\n    }\n\t\n//-------o 02 - Update Token Price (USD)\n    function TokenPrice(address tokenAddress, uint256 price) public restricted  {\n        token_price[tokenAddress] = price;\t\n    }\n\t\n//-------o 03 - Withdraw Ethereum \n    function WithdrawEth() restricted public {\n        require(address(this).balance > 0); \n\t\tuint256 amount = address(this).balance;\n\t\t\n\t\tEthereumVault[0x0] = 0;   \n        msg.sender.transfer(amount);\n    }\n    \n//-------o 04 Ethereum Nodes Fees   \n    function EthereumNodesFees(address tokenAddress) restricted public {\n        require(EthereumVault[tokenAddress] > 0);\n        \n        uint256 amount \t\t\t\t\t\t\t\t= EthereumVault[tokenAddress];\n\t\t_totalSaved[tokenAddress] \t\t\t\t\t= sub(_totalSaved[tokenAddress], amount); \n\t\tAllPayments[tokenAddress] \t\t\t\t\t= add(AllPayments[tokenAddress], amount);\n\t\tStatistics[msg.sender][tokenAddress][2] \t= add(Statistics[msg.sender][tokenAddress][2], amount); \n        EthereumVault[tokenAddress] = 0;\n\t\t\n        ERC20Interface token = ERC20Interface(tokenAddress);\n        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(msg.sender, amount);\n    }\n\t\n//-------o 05 Hold Platform\n    function Holdplatform_Airdrop(address tokenAddress, bool HPM_status, uint256 HPM_ratio) public restricted {\n\t\trequire(HPM_ratio <= 100000 );\n\t\t\n\t\tHoldplatform_status[tokenAddress] \t= HPM_status;\t\n\t\tHoldplatform_ratio[tokenAddress] \t= HPM_ratio;\t// 100% = 100.000\n\t\n    }\t\n\t\n\tfunction Holdplatform_Deposit(uint256 amount) restricted public {\n\t\trequire(amount > 0 );\n        \n       \tERC20Interface token = ERC20Interface(Holdplatform_address);       \n        require(token.transferFrom(msg.sender, address(this), amount));\n\t\t\n\t\tuint256 newbalance\t\t= add(Holdplatform_balance, amount) ;\n\t\tHoldplatform_balance \t= newbalance;\n    }\n\t\n\tfunction Holdplatform_Withdraw(uint256 amount) restricted public {\n        require(Holdplatform_balance > 0);\n        \n\t\tuint256 newbalance\t\t= sub(Holdplatform_balance, amount) ;\n\t\tHoldplatform_balance \t= newbalance;\n        \n        ERC20Interface token = ERC20Interface(Holdplatform_address);\n        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(msg.sender, amount);\n    }\n\t\n//-------o 06 - Return All Tokens To Their Respective Addresses    \n    function ReturnAllTokens() restricted public\n    {\n\n        for(uint256 i = 1; i < _currentIndex; i++) {            \n            Safe storage s = _safes[i];\n            if (s.id != 0) {\n\t\t\t\t\n\t\t\t\tif(s.amountbalance > 0) {\n\t\t\t\t\tuint256 amount = add(s.amountbalance, s.cashbackbalance);\n\t\t\t\t\tPayToken(s.user, s.tokenAddress, amount);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\n                \n            }\n        }\n\t\t\n    }   \n\t\n\t\n\t/*==============================\n    =      SAFE MATH FUNCTIONS     =\n    ==============================*/  \t\n\t\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b; \n\t\trequire(c / a == b);\n\t\treturn c;\n\t}\n\t\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b > 0); \n\t\tuint256 c = a / b;\n\t\treturn c;\n\t}\n\t\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b <= a);\n\t\tuint256 c = a - b;\n\t\treturn c;\n\t}\n\t\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a);\n\t\treturn c;\n\t}\n    \n}\n\n\n\t/*==============================\n    =        ERC20 Interface       =\n    ==============================*/ \n\ncontract ERC20Interface {\n\n    uint256 public totalSupply;\n    uint256 public decimals;\n    \n    function symbol() public view returns (string);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"hodler\",\"type\":\"address\"}],\"name\":\"GetTotalAffiliate\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"AllPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_userSafes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ContractSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hodlingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Statistics\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetEthereumNodes\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Holdplatform_Withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"GetTokenReserve\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"WithdrawAffiliate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"GetSafe\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"endtime\",\"type\":\"uint256\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"amountbalance\",\"type\":\"uint256\"},{\"name\":\"cashbackbalance\",\"type\":\"uint256\"},{\"name\":\"lasttime\",\"type\":\"uint256\"},{\"name\":\"percentage\",\"type\":\"uint256\"},{\"name\":\"percentagereceive\",\"type\":\"uint256\"},{\"name\":\"tokenreceive\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ClaimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cashbackcode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cashbackcode\",\"type\":\"address\"}],\"name\":\"CashbackCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Holdplatform_ratio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"token_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_totalSaved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"AllContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"afflist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeuser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ReturnAllTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Holdplatform_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_countSafes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Holdplatform_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxcontribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"contractstatus\",\"type\":\"bool\"},{\"name\":\"_maxcontribution\",\"type\":\"uint256\"},{\"name\":\"_ContractSymbol\",\"type\":\"string\"},{\"name\":\"_PercentPermonth\",\"type\":\"uint256\"}],\"name\":\"AddContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Holdplatform_Deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"EthereumNodesFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"HPM_status\",\"type\":\"bool\"},{\"name\":\"HPM_ratio\",\"type\":\"uint256\"}],\"name\":\"Holdplatform_Airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hodler\",\"type\":\"address\"}],\"name\":\"GetUserSafesLength\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HodlTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DefaultToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Holdplatform_status\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"percent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cashbackcode\",\"type\":\"address\"}],\"name\":\"onCashbackCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onAffiliateBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onClaimTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onHodlTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contracthodler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractstatus\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_maxcontribution\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ContractSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_PercentPermonth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_HodlingTime\",\"type\":\"uint256\"}],\"name\":\"onAddContractAddress\",\"type\":\"event\"}]",
  "bytecode": ""
}