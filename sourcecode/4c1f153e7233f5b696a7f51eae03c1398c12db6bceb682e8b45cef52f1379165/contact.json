{
  "address": "0x4fce5178346fc58a0a1261ec2306acc39ed801ab",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HubCulture",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-01\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n/**\n* @dev This is a library based implementation of the ERC20 token standard.\n* This library allows all values to be set by interface logic. This includes\n* the ability to set msg.sender. This allows two distinct advantages:\n*  - Access control logic may be layered without the need to change the\n*    core logic of the ERC20 system in any way.\n*  - Tokens that require administrative action, under some conditions,\n*    may take administrative action on an account, without having to\n*    create fragile backdoors into the transfer logic of the token. This\n*    system makes such administrative priveledge clear, apparent, and\n*    more easily auditable to ensure reasonable limitations of power.\n*/\nlibrary ERC20Lib {\n\n\n  ////////////////////////////////////////////////////////////////////////////\n  //Imports\n\n  /**\n  * @dev Prevents underflow and overflow attacks..\n  */\n  using SafeMath for uint256;\n  ///////////////////////////////////////////////////////////////////////////\n\n\n  ////////////////////////////////////////////////////////////////////////////\n  //Events\n\n  /**\n  * @dev Transfer event emitted in 3 cases; transfers, minting, and burning.\n  * for transfers, all fields set as normal\n  * for minting from is set to address(0)\n  * for burning is set to address(0)\n  */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n  * @dev Specifies an approval being granted from an owner to a spender\n  * for the amount specified.\n  */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  ////////////////////////////////////////////////////////////////////////////\n\n  ////////////////////////////////////////////////////////////////////////////\n  //Declarations\n\n  /**\n  * @dev Struct like representation of ERC20 state vairiables.\n  * this allows the ERC20 logic to become a library under using for syntax\n  */\n  struct Token{\n    mapping (address => uint256) _balances;\n    mapping (address => mapping (address => uint256)) _allowed;\n    uint256 _totalSupply;\n  }\n  ////////////////////////////////////////////////////////////////////////////\n\n\n  ////////////////////////////////////////////////////////////////////////////\n  //Logic\n\n  /**\n  * @dev Returns the total supply of the token.\n  */\n  function totalSupply(Token storage self)\n  internal\n  view\n  returns (uint256) {\n    return self._totalSupply;\n  }\n\n  /**\n  * @dev Returns the balance of an account.\n  */\n  function balances(Token storage self, address account)\n  internal\n  view\n  returns (uint256) {\n    return self._balances[account];\n  }\n\n  /**\n  * @dev Returns the total allowance from the account to the spender..\n  */\n  function allowance(Token storage self, address account, address spender)\n  internal\n  view\n  returns (uint256) {\n    return self._allowed[account][spender];\n  }\n\n  /**\n  * @dev Issues an allowance from an account to another.\n  */\n  function approve(Token storage self, address sender, address spender, uint256 value)\n  internal {\n    require(spender != address(0));\n    self._allowed[sender][spender] = value;\n    emit Approval(sender, spender, value);\n  }\n\n  /**\n  * @dev Cause a transfer to occur based on an existing allowance.\n  */\n  function transferFrom(Token storage self, address sender, address from, address to, uint256 value)\n  internal {\n    require(value <= self._allowed[from][sender]);\n    self._allowed[from][sender] = self._allowed[from][sender].sub(value);\n    transfer(self,from, to, value);\n  }\n\n  /**\n  * @dev Increase the allowance from one account to another. Prevents\n  * change allowance attack.\n  */\n  function increaseAllowance(Token storage self, address sender, address spender, uint256 addedValue)\n  internal {\n    require(spender != address(0));\n    self._allowed[sender][spender] = self._allowed[sender][spender].add(addedValue);\n    emit Approval(sender, spender, self._allowed[sender][spender]);\n  }\n\n  /**\n  * @dev Decrease the allowance from one account to another. Prevents\n  * the change allowance attack.\n  */\n  function decreaseAllowance(Token storage self, address sender, address spender, uint256 subtractedValue)\n  internal {\n    require(spender != address(0));\n    self._allowed[sender][spender] = self._allowed[sender][spender].sub(subtractedValue);\n    emit Approval(sender, spender, self._allowed[sender][spender]);\n  }\n\n  /**\n  * @dev Transfer tokens from one account to another.\n  */\n  function transfer(Token storage self, address sender, address to, uint256 value)\n  internal {\n    require(value <= self._balances[sender]);\n    require(to != address(0));\n    self._balances[sender] = self._balances[sender].sub(value);\n    self._balances[to] = self._balances[to].add(value);\n    emit Transfer(sender, to, value);\n  }\n\n  /**\n  * @dev Mint new tokens to an account.\n  */\n  function mint(Token storage self, address account, uint256 value)\n  internal {\n    require(account != 0);\n    self._totalSupply = self._totalSupply.add(value);\n    self._balances[account] = self._balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n  * @dev Burn tokens from an account.\n  */\n  function burn(Token storage self, address account, uint256 value)\n  internal {\n    require(account != 0);\n    require(value <= self._balances[account]);\n    self._totalSupply = self._totalSupply.sub(value);\n    self._balances[account] = self._balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n  ////////////////////////////////////////////////////////////////////////////\n\n}\n\n\n\ncontract HubCulture{\n\n  ////////////////////////////////////////////////////////////////////////////\n  //Imports\n  using ERC20Lib for ERC20Lib.Token;\n  using SafeMath for uint256;\n  ///////////////////////////////////////////////////////////////////////////\n\n  ///////////////////////////////////////////////////////////////////////////\n  //Events\n  event Pending(address indexed account, uint256 indexed value, uint256 indexed nonce);\n  event Deposit(address indexed account, uint256 indexed value, uint256 indexed nonce);\n  event Withdraw(address indexed account, uint256 indexed value, uint256 indexed nonce);\n  event Decline(address indexed account, uint256 indexed value, uint256 indexed nonce);\n  event Registration(address indexed account, bytes32 indexed uuid, uint256 indexed nonce);\n  event Unregistered(address indexed account, uint256 indexed nonce);\n  ////////////////////////////////////////////////////////////////////////////\n\n  ////////////////////////////////////////////////////////////////////////////\n  //Declarations\n  mapping(address=>bool) authorities;\n  mapping(address=>bool) registered;\n  mapping(address=>bool) vaults;\n  ERC20Lib.Token token;\n  ERC20Lib.Token pending;\n  uint256 eventNonce;\n  address failsafe;\n  address owner;\n  bool paused;\n  ////////////////////////////////////////////////////////////////////////////\n\n  ////////////////////////////////////////////////////////////////////////////\n  //Constructor\n  constructor(address _owner,address _failsafe)\n  public {\n    failsafe = _failsafe;\n    owner = _owner;\n  }\n  ////////////////////////////////////////////////////////////////////////////\n\n  ////////////////////////////////////////////////////////////////////////////\n  //Modifiers\n  modifier onlyFailsafe(){\n    require(msg.sender == failsafe);\n    _;\n  }\n\n  modifier onlyAdmin(){\n    require(msg.sender == owner || msg.sender == failsafe);\n    _;\n  }\n\n  modifier onlyAuthority(){\n    require(authorities[msg.sender]);\n    _;\n  }\n\n  modifier onlyVault(){\n    require(vaults[msg.sender]);\n    _;\n  }\n\n  modifier notPaused(){\n    require(!paused);\n    _;\n  }\n  ////////////////////////////////////////////////////////////////////////////\n\n  ////////////////////////////////////////////////////////////////////////////\n  //Failsafe Logic\n  function isFailsafe(address _failsafe)\n  public\n  view\n  returns (bool){\n    return (failsafe == _failsafe);\n  }\n\n  function setFailsafe(address _failsafe)\n  public\n  onlyFailsafe{\n    failsafe = _failsafe;\n  }\n  ////////////////////////////////////////////////////////////////////////////\n\n  ////////////////////////////////////////////////////////////////////////////\n  //Owner Logic\n  function isOwner(address _owner)\n  public\n  view\n  returns (bool){\n    return (owner == _owner);\n  }\n\n  function setOwner(address _owner)\n  public\n  onlyAdmin{\n    owner = _owner;\n  }\n  ////////////////////////////////////////////////////////////////////////////\n\n  ////////////////////////////////////////////////////////////////////////////\n  //Vault Logic\n  function isVault(address vault)\n  public\n  view\n  returns (bool) {\n    return vaults[vault];\n  }\n\n  function addVault(address vault)\n  public\n  onlyAdmin\n  notPaused\n  returns (bool) {\n    vaults[vault] = true;\n    return true;\n  }\n\n  function removeVault(address vault)\n  public\n  onlyAdmin\n  returns (bool) {\n    vaults[vault] = false;\n    return true;\n  }\n  ////////////////////////////////////////////////////////////////////////////\n\n  ////////////////////////////////////////////////////////////////////////////\n  //Authority Logic\n  function isAuthority(address authority)\n  public\n  view\n  returns (bool) {\n    return authorities[authority];\n  }\n\n  function addAuthority(address authority)\n  public\n  onlyAdmin\n  notPaused\n  returns (bool) {\n    authorities[authority] = true;\n    return true;\n  }\n\n  function removeAuthority(address authority)\n  public\n  onlyAdmin\n  returns (bool) {\n    authorities[authority] = false;\n    return true;\n  }\n  ////////////////////////////////////////////////////////////////////////////\n\n  ////////////////////////////////////////////////////////////////////////////\n  //Pause Logic\n\n  /**\n  * @dev Administrative lockdown check.\n  **/\n  function isPaused()\n  public\n  view\n  returns (bool) {\n    return paused;\n  }\n\n  /**\n  * @dev Locks down all actions except administrative actions. Should be used\n  * to address security flaws. If this contract has a critical bug, This method\n  * should be called to allow for a hault of operations and a migration to occur\n  * If this method is called due to a loss of server keys, it will hault\n  * operation until root cause may be found.\n  **/\n  function pause()\n  public\n  onlyAdmin\n  notPaused\n  returns (bool) {\n    paused = true;\n    return true;\n  }\n\n  /**\n  * @dev Releases system from administrative lockdown. Requires retrieval of\n  * failsafe coldwallet.\n  **/\n  function unpause()\n  public\n  onlyFailsafe\n  returns (bool) {\n    paused = false;\n    return true;\n  }\n\n  /**\n  * @dev Locks down all actions FOREVER! This should only be used in\n  * manual contract migration due to critical bug. This will halt all\n  *operations and allow a new contract to be built by transfering all balances.\n  **/\n  function lockForever()\n  public\n  onlyFailsafe\n  returns (bool) {\n    pause();\n    setOwner(address(this));\n    setFailsafe(address(this));\n    return true;\n  }\n  ////////////////////////////////////////////////////////////////////////////\n\n  ////////////////////////////////////////////////////////////////////////////\n  //Panic Logic\n\n  /**\n  * @dev Lets everyone know if something catastrophic has occured. The owner,\n  * and failsafe should not ever be the same entity. This combined with a paused\n  * state indicates that panic has most likely been called or this contract has\n  * been permanently locked for migration.\n  */\n  function isBadDay()\n  public\n  view\n  returns (bool) {\n    return (isPaused() && (owner == failsafe));\n  }\n  ////////////////////////////////////////////////////////////////////////////\n\n  ////////////////////////////////////////////////////////////////////////////\n  //ERC20Lib Wrappers\n\n  /**\n  * @dev These methods act as transparent wrappers around the ERC20Lib. The\n  * only changes in logic are as follows:\n  *  - The msg.sender must be explicitly set by the wrapper\n  *  - The totalSupply has been broken up into 3 functions as totalSupply\n  *    pendingSupply, and activeSupply.\n  * Pending supply is the supply that has been deposited but not released\n  * Active supply is the released deposited supply\n  * Total supply is the sum of active and pending.\n  */\n  function totalSupply()\n  public\n  view\n  returns (uint256) {\n    uint256 supply = 0;\n    supply = supply.add(pending.totalSupply());\n    supply = supply.add(token.totalSupply());\n    return supply;\n  }\n\n  function pendingSupply()\n  public\n  view\n  returns (uint256) {\n    return pending.totalSupply();\n  }\n\n  function availableSupply()\n  public\n  view\n  returns (uint256) {\n    return token.totalSupply();\n  }\n\n  function balanceOf(address account)\n  public\n  view\n  returns (uint256) {\n    return token.balances(account);\n  }\n\n  function allowance(address account, address spender)\n  public\n  view\n  returns (uint256) {\n    return token.allowance(account,spender);\n  }\n\n  function transfer(address to, uint256 value)\n  public\n  notPaused\n  returns (bool) {\n    token.transfer(msg.sender, to, value);\n    return true;\n  }\n\n  function approve(address spender, uint256 value)\n  public\n  notPaused\n  returns (bool) {\n    token.approve(msg.sender,spender,value);\n    return true;\n  }\n\n  function transferFrom(address from, address to, uint256 value)\n  public\n  notPaused\n  returns (bool) {\n    token.transferFrom(msg.sender,from,to,value);\n    return true;\n  }\n\n  function increaseAllowance(address spender, uint256 addedValue)\n  public\n  notPaused\n  returns (bool) {\n    token.increaseAllowance(msg.sender,spender,addedValue);\n    return true;\n  }\n\n  function decreaseAllowance(address spender, uint256 subtractedValue)\n  public\n  notPaused\n  returns (bool) {\n    token.decreaseAllowance(msg.sender,spender,subtractedValue);\n    return true;\n  }\n  ////////////////////////////////////////////////////////////////////////////\n\n  ////////////////////////////////////////////////////////////////////////////\n  //Deposit Logic\n\n  /**\n  * @dev This logic allows for a delay between a deposit\n  * and the release of funds. This is accomplished by maintaining\n  * two independant ERC20 contracts in this one contract by using\n  * the ERC20Lib library.\n  * The first is the token contract that is used to transfer value\n  * as is normally expected of an ERC20. The second is the system\n  * that allows Ven to be dposited and withdrawn from the\n  * blockchain such that no extra priveledge is given to HubCulture\n  * for on blockchain actions. This system also allows for the time\n  * delay based approval of deposits. Further, the entity that\n  * creates a deposit request is an authority, but only a vault\n  * may release the deposit into the active balances of the ERC20\n  * token.\n  */\n\n\n  /**\n  * @dev Deposit value from HubCulture into ERC20\n  * This is a pending deposit that must be released.\n  * Only an authority may request a deposit.\n  */\n  function deposit(address account, uint256 value)\n  public\n  notPaused\n  onlyAuthority\n  returns (bool) {\n    pending.mint(account,value);\n    eventNonce+=1;\n    emit Pending(account,value,eventNonce);\n    return true;\n  }\n\n  /**\n  * @dev Release a deposit from pending state and credit\n  * account with the balance due.\n  */\n  function releaseDeposit(address account, uint256 value)\n  public\n  notPaused\n  onlyVault\n  returns (bool) {\n    pending.burn(account,value);\n    token.mint(account,value);\n    eventNonce+=1;\n    emit Deposit(account,value,eventNonce);\n    return true;\n  }\n\n  /**\n  * @dev Cancel a deposit. This prevents the deposit from\n  * being released.\n  */\n  function revokeDeposit(address account, uint256 value)\n  public\n  notPaused\n  onlyVault\n  returns (bool) {\n    pending.burn(account,value);\n    eventNonce+=1;\n    emit Decline(account,value,eventNonce);\n    return true;\n  }\n  ////////////////////////////////////////////////////////////////////////////\n\n  ////////////////////////////////////////////////////////////////////////////\n  //Withdraw Logic\n\n  /**\n  * @dev Withdraw tokens by burning the balance and emitting the event.\n  * In order to withdraw the account must be a registered wallet. This is\n  * to prevent loss of funds.\n  */\n  function withdraw(uint256 value)\n  public\n  notPaused\n  returns (bool) {\n    require(registered[msg.sender]);\n    token.burn(msg.sender,value);\n    eventNonce+=1;\n    emit Withdraw(msg.sender,value,eventNonce);\n    return true;\n  }\n  ////////////////////////////////////////////////////////////////////////////\n\n  ////////////////////////////////////////////////////////////////////////////\n  //Wallet Registration Logic\n\n  /**\n  * @dev Allows the registration state of a wallet to be queried.\n  */\n  function isRegistered(address wallet)\n  public\n  view\n  returns (bool) {\n    return registered[wallet];\n  }\n\n  /**\n  * @dev Allows a HubCulture user to claim thier wallet. This system works\n  * as follows:\n  *  - User must enter the address they wish to claim on HubCulture\n  *  - The user will be provided with a UUID that will be a randomly\n  *      generated value (salt) hashed with the user ID for this user.\n  *  -  The keccak256 of the uuid and account address will then be\n  *      signed by an authority to ensure authenticity.\n  *  -  The user must submit a transaction, from the claimed account, with\n  *      the uuid, proof, and signature from the authority as arguments to\n  *      this method.\n  * If all checks pass, the account registration event should be emitted,\n  * and this account may now withdraw Ven to HubCulture.\n  */\n  function register(bytes32 uuid, uint8 v, bytes32 r, bytes32 s)\n  public\n  notPaused\n  returns (bool) {\n    require(authorities[ecrecover(keccak256(abi.encodePacked(msg.sender,uuid)),v,r,s)]);\n    registered[msg.sender]=true;\n    eventNonce+=1;\n    emit Registration(msg.sender, uuid, eventNonce);\n    return true;\n  }\n\n  /**\n  * @dev Allows an authority to unregister an account. This will prevent\n  * a withdraw comand from being issued by this account unless it is\n  * re-registered. This is not a security feature. This is a cleanup\n  * function to ensure that closed accounts become zeroed out to minimize\n  * chain bloat.\n  */\n  function unregister(address wallet)\n  public\n  notPaused\n  onlyAuthority\n  returns (bool) {\n    registered[wallet] = false;\n    eventNonce+=1;\n    emit Unregistered(wallet, eventNonce);\n    return true;\n  }\n  ////////////////////////////////////////////////////////////////////////////\n\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051604080611509833981016040528051602090910151600a8054600160a060020a03928316600160a060020a031991821617909155600b80549290931691161790556114a5806100646000396000f3006080604052600436106101955763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663095ea7b3811461019a5780630975f4dd146101d257806313af4035146101f657806318160ddd146102195780632330f2471461024057806323b872dd14610261578063256b5a021461028b57806326defa73146102ac5780632e1a7d4d146102cd5780632ec2c246146102e55780632f54bf6e1461030657806335dd5dfb14610327578063395093511461033c5780633f4ba83a14610360578063404b33b11461037557806347e7ef241461038a5780634abf8bd2146103ae578063524dd059146103cf578063652b9b41146103f357806370a08231146104145780637e8dac4a146104355780637ecc2b56146104565780638456cb591461046b57806390f3173b14610480578063a457c2d714610495578063a9059cbb146104b9578063b187bd26146104dd578063baee1d1d146104f2578063c3c5a54714610516578063ceb68c2314610537578063d544e01014610558578063dd62ed3e14610579575b600080fd5b3480156101a657600080fd5b506101be600160a060020a03600435166024356105a0565b604080519115158252519081900360200190f35b3480156101de57600080fd5b506101be600160a060020a03600435166024356105d6565b34801561020257600080fd5b50610217600160a060020a036004351661066a565b005b34801561022557600080fd5b5061022e6106c7565b60408051918252519081900360200190f35b34801561024c57600080fd5b506101be600160a060020a03600435166106f9565b34801561026d57600080fd5b506101be600160a060020a0360043581169060243516604435610717565b34801561029757600080fd5b506101be600160a060020a036004351661074f565b3480156102b857600080fd5b506101be600160a060020a03600435166107c0565b3480156102d957600080fd5b506101be600435610831565b3480156102f157600080fd5b506101be600160a060020a03600435166108bb565b34801561031257600080fd5b506101be600160a060020a0360043516610950565b34801561033357600080fd5b5061022e610964565b34801561034857600080fd5b506101be600160a060020a0360043516602435610975565b34801561036c57600080fd5b506101be6109a2565b34801561038157600080fd5b506101be6109e0565b34801561039657600080fd5b506101be600160a060020a0360043516602435610a09565b3480156103ba57600080fd5b50610217600160a060020a0360043516610a9d565b3480156103db57600080fd5b506101be600160a060020a0360043516602435610ae3565b3480156103ff57600080fd5b506101be600160a060020a0360043516610b89565b34801561042057600080fd5b5061022e600160a060020a0360043516610ba7565b34801561044157600080fd5b506101be600160a060020a0360043516610bba565b34801561046257600080fd5b5061022e610bce565b34801561047757600080fd5b506101be610bda565b34801561048c57600080fd5b506101be610c4c565b3480156104a157600080fd5b506101be600160a060020a0360043516602435610c87565b3480156104c557600080fd5b506101be600160a060020a0360043516602435610cb4565b3480156104e957600080fd5b506101be610ce1565b3480156104fe57600080fd5b506101be60043560ff60243516604435606435610cf1565b34801561052257600080fd5b506101be600160a060020a0360043516610e82565b34801561054357600080fd5b506101be600160a060020a0360043516610ea0565b34801561056457600080fd5b506101be600160a060020a0360043516610ef6565b34801561058557600080fd5b5061022e600160a060020a0360043581169060243516610f4c565b600b5460009060a060020a900460ff16156105ba57600080fd5b6105cd600333858563ffffffff610f6716565b50600192915050565b600b5460009060a060020a900460ff16156105f057600080fd5b3360009081526002602052604090205460ff16151561060e57600080fd5b6106206006848463ffffffff610fe116565b60098054600101908190556040518390600160a060020a038616907f36d6fb92b6d268f5240d9474033e6331c70937573bb9a9f1c7afbb95a15b704590600090a450600192915050565b600b54600160a060020a031633148061068d5750600a54600160a060020a031633145b151561069857600080fd5b600b805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000806106e46106d760066110b4565b829063ffffffff6110bb16565b90506106f36106d760036110b4565b92915050565b600160a060020a031660009081526020819052604090205460ff1690565b600b5460009060a060020a900460ff161561073157600080fd5b61074560033386868663ffffffff6110cd16565b5060019392505050565b600b54600090600160a060020a03163314806107755750600a54600160a060020a031633145b151561078057600080fd5b600b5460a060020a900460ff161561079757600080fd5b50600160a060020a03166000908152600260205260409020805460ff1916600190811790915590565b600b54600090600160a060020a03163314806107e65750600a54600160a060020a031633145b15156107f157600080fd5b600b5460a060020a900460ff161561080857600080fd5b50600160a060020a03166000908152602081905260409020805460ff1916600190811790915590565b600b5460009060a060020a900460ff161561084b57600080fd5b3360009081526001602052604090205460ff16151561086957600080fd5b61087b6003338463ffffffff610fe116565b6009805460010190819055604051839033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56890600090a4506001919050565b600b5460009060a060020a900460ff16156108d557600080fd5b3360009081526020819052604090205460ff1615156108f357600080fd5b600160a060020a0382166000818152600160208190526040808320805460ff191690556009805490920191829055519092917f15f7469572dc44ee54c08cc4adf4e1031d7b6254626e8894015195a560039d0991a3506001919050565b600b54600160a060020a0391821691161490565b600061097060066110b4565b905090565b600b5460009060a060020a900460ff161561098f57600080fd5b6105cd600333858563ffffffff61117416565b600a54600090600160a060020a031633146109bc57600080fd5b50600b805474ff000000000000000000000000000000000000000019169055600190565b60006109ea610ce1565b8015610970575050600a54600b54600160a060020a0391821691161490565b600b5460009060a060020a900460ff1615610a2357600080fd5b3360009081526020819052604090205460ff161515610a4157600080fd5b610a536006848463ffffffff61122a16565b60098054600101908190556040518390600160a060020a038616907fa379518b98caa65e8a819cbd566044593ad5ae1eb3d1dae3565c78a3a52346c390600090a450600192915050565b600a54600160a060020a03163314610ab457600080fd5b600a805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600b5460009060a060020a900460ff1615610afd57600080fd5b3360009081526002602052604090205460ff161515610b1b57600080fd5b610b2d6006848463ffffffff610fe116565b610b3f6003848463ffffffff61122a16565b60098054600101908190556040518390600160a060020a038616907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1590600090a450600192915050565b600160a060020a031660009081526002602052604090205460ff1690565b60006106f360038363ffffffff6112d916565b600a54600160a060020a0391821691161490565b600061097060036110b4565b600b54600090600160a060020a0316331480610c005750600a54600160a060020a031633145b1515610c0b57600080fd5b600b5460a060020a900460ff1615610c2257600080fd5b50600b805474ff0000000000000000000000000000000000000000191660a060020a179055600190565b600a54600090600160a060020a03163314610c6657600080fd5b610c6e610bda565b50610c783061066a565b610c8130610a9d565b50600190565b600b5460009060a060020a900460ff1615610ca157600080fd5b6105cd600333858563ffffffff6112f516565b600b5460009060a060020a900460ff1615610cce57600080fd5b6105cd600333858563ffffffff61134216565b600b5460a060020a900460ff1690565b600b5460009060a060020a900460ff1615610d0b57600080fd5b604080516c01000000000000000000000000330260208083019190915260348083018990528351808403909101815260549092019283905281516000938493600193909282918401908083835b60208310610d775780518252601f199092019160209182019101610d58565b51815160209384036101000a60001901801990921691161790526040805192909401829003822060008084528383018087529190915260ff8e1683860152606083018d9052608083018c9052935160a08084019750919550601f1981019492819003909101925090865af1158015610df3573d6000803e3d6000fd5b505060408051601f190151600160a060020a03168352602083019390935250016000205460ff161515610e2557600080fd5b336000818152600160208190526040808320805460ff1916831790556009805490920191829055519092889290917f365c8f0eae5b0ae25f511df9c6e1a6853020a8020c5d6b2c7557c797e81ae1619190a4506001949350505050565b600160a060020a031660009081526001602052604090205460ff1690565b600b54600090600160a060020a0316331480610ec65750600a54600160a060020a031633145b1515610ed157600080fd5b50600160a060020a03166000908152600260205260409020805460ff19169055600190565b600b54600090600160a060020a0316331480610f1c5750600a54600160a060020a031633145b1515610f2757600080fd5b50600160a060020a03166000908152602081905260409020805460ff19169055600190565b6000610f606003848463ffffffff61143516565b9392505050565b600160a060020a0382161515610f7c57600080fd5b600160a060020a038084166000818152600187016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350505050565b600160a060020a0382161515610ff657600080fd5b600160a060020a03821660009081526020849052604090205481111561101b57600080fd5b6002830154611030908263ffffffff61146216565b6002840155600160a060020a03821660009081526020849052604090205461105e908263ffffffff61146216565b600160a060020a038316600081815260208681526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3505050565b6002015490565b600082820183811015610f6057600080fd5b600160a060020a03808416600090815260018701602090815260408083209388168352929052205481111561110157600080fd5b600160a060020a038084166000908152600187016020908152604080832093881683529290522054611139908263ffffffff61146216565b600160a060020a03808516600090815260018801602090815260408083209389168352929052205561116d85848484611342565b5050505050565b600160a060020a038216151561118957600080fd5b600160a060020a0380841660009081526001860160209081526040808320938616835292905220546111c1908263ffffffff6110bb16565b600160a060020a03848116600081815260018801602090815260408083209488168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350505050565b600160a060020a038216151561123f57600080fd5b6002830154611254908263ffffffff6110bb16565b6002840155600160a060020a038216600090815260208490526040902054611282908263ffffffff6110bb16565b600160a060020a0383166000818152602086815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3505050565b600160a060020a03166000908152602091909152604090205490565b600160a060020a038216151561130a57600080fd5b600160a060020a0380841660009081526001860160209081526040808320938616835292905220546111c1908263ffffffff61146216565b600160a060020a03831660009081526020859052604090205481111561136757600080fd5b600160a060020a038216151561137c57600080fd5b600160a060020a0383166000908152602085905260409020546113a5908263ffffffff61146216565b600160a060020a0380851660009081526020879052604080822093909355908416815220546113da908263ffffffff6110bb16565b600160a060020a038084166000818152602088815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350505050565b600160a060020a039182166000908152600193909301602090815260408085209290931684525290205490565b6000808383111561147257600080fd5b50509003905600a165627a7a7230582006b974ed5c46dc1a26d6bf07e5a0eb110d77d58f956bf3d04e34cb26ce8702350029000000000000000000000000b2cae47cb1fd1eaef61a68f74258cd953e3fc362000000000000000000000000b2cae47cb1fd1eaef61a68f74258cd953e3fc362",
  "constructorArguments": "000000000000000000000000b2cae47cb1fd1eaef61a68f74258cd953e3fc362000000000000000000000000b2cae47cb1fd1eaef61a68f74258cd953e3fc362"
}