{
  "address": "0x148fabfe726359fa8eb5d72eb270773e3f5c507d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BDR",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-15\n*/\n\npragma solidity 0.5.4;\n\n\nlibrary SafeMath {\n\n    uint256 constant internal MAX_UINT = 2 ** 256 - 1; // max uint256\n\n    /**\n     * @dev Multiplies two numbers, reverts on overflow.\n     */\n    function mul(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        if (_a == 0) {\n            return 0;\n        }\n        require(MAX_UINT / _a >= _b);\n        return _a * _b;\n    }\n\n    /**\n     * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        require(_b != 0);\n        return _a / _b;\n    }\n\n    /**\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        require(_b <= _a);\n        return _a - _b;\n    }\n\n    /**\n     * @dev Adds two numbers, reverts on overflow.\n     */\n    function add(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        require(MAX_UINT - _a >= _b);\n        return _a + _b;\n    }\n\n}\n\ninterface AbcInterface {\n    function decimals() external view returns (uint8);\n    function tokenFallback(address _from, uint _value, bytes calldata _data) external;\n    function transfer(address _to, uint _value) external returns (bool);\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n}\n\n\ncontract StandardToken {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) internal balances;\n\n    mapping(address => mapping(address => uint256)) internal allowed;\n\n    uint256 public totalSupply;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the value owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns(uint256) {\n        return balances[_owner];\n    }\n\n    /**\n     * @dev Function to check the value of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the value of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns(uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The value to be transferred.\n     */\n    function transfer(address _to, uint256 _value) public returns(bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified value of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The value of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns(bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the value of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Increase the value of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The value of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint256 _addedValue) public returns(bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the value of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The value of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns(bool) {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue >= oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n        totalSupply = totalSupply.sub(value);\n        balances[account] = balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an value of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * @param account The account whose tokens will be burnt.\n     * @param value The value that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n        // this function needs to emit an event with the updated approval.\n        allowed[account][msg.sender] = allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n    }\n\n}\n\n\ncontract BurnableToken is StandardToken {\n\n    /**\n     * @dev Burns a specific value of tokens.\n     * @param value The value of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific value of tokens from the target address and decrements allowance\n     * @param from address The address which you want to send tokens from\n     * @param value uint256 The value of token to be burned\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n */\ncontract PausableToken is StandardToken, Pausable {\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseApproval(address spender, uint256 addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseApproval(spender, addedValue);\n    }\n\n    function decreaseApproval(address spender, uint256 subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseApproval(spender, subtractedValue);\n    }\n}\n\ncontract Token is PausableToken, BurnableToken {\n    string public name; // name of Token\n    string public symbol; // symbol of Token\n    uint8 public decimals;\n\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) public {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n}\n\ncontract BDR is Token {\n    struct Trx {\n        bool executed;\n        address from;\n        uint256 value;\n        address[] signers;\n    }\n\n    mapping(address => bool) public isSigner;\n    mapping(uint256 => Trx) public exchangeTrx;\n    address public AbcInstance;  // address of AbcToken\n    uint256 public requestSigners = 2;  // BDR => Abc need signers number\n    uint256 public applyCounts = 0;  // Sequence of exchange request\n    mapping(address => uint256) public exchangeLock;\n\n    event SetSigner(address indexed signer,bool isSigner);  // emit when add/remove signer\n    event ApplyExchangeToken(address indexed from,uint256 value,uint256 trxSeq);  // emit when exchange successful\n    event ConfirmTrx(address indexed signer,uint256 indexed trxSeq);  // emit when signer confirmed exchange request\n    event CancleConfirmTrx(address indexed signer,uint256 indexed trxSeq);  // emit when signer cancles confirmed exchange request\n    event CancleExchangeRequest(address indexed signer,uint256 indexed trxSeq);  // emit when signer/requester cancles exchange request\n    event TokenExchange(address indexed from,uint256 value,bool AbcExchangeBDR); // emit when Abc <=> Bdr,true:Abc => BDR,false:BDR => abc\n    event Mint(address indexed target,uint256 value);\n\n    modifier onlySigner() {\n        require(isSigner[msg.sender]);\n        _;\n    }\n    /**\n     * @dev initialize token info\n     * @param _name string The name of token\n     * @param _symbol string The symbol of token\n     * @param _decimals uint8 The decimals of token\n     */\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) Token(_name,_symbol,_decimals) public {\n    }\n\n    /**\n     * @dev rewrite transfer function，user can't transfer token to AbcToken's address directly\n     */\n    function transfer(address _to,uint256 _value) public returns (bool success) {\n        require(_to != AbcInstance,\"can't transfer to AbcToken address directly\");\n        return super.transfer(_to,_value);\n    }\n\n    /**\n     * @dev rewrite transferFrom function，user can't transferFrom token to AbcToken's address directly\n     */\n    function transferFrom(address _from, address _to,uint256 _value) public returns (bool success) {\n        require(_to != AbcInstance,\"can't transferFrom to AbcToken address directly\");\n        return super.transferFrom(_from,_to,_value);\n    }\n\n    /**\n     * @dev set AbcToken's address\n     */\n    function setAbcInstance(address _abc) public onlyOwner {\n        require(_abc != address(0));\n        AbcInstance = _abc;\n    }\n\n    /**\n     * @dev add/remove signers\n     * @param _signers address[] The array of signers to add/remove\n     * @param _addSigner bool true:add signers,false:remove:signers\n     */\n    function setSigners(address[] memory _signers,bool _addSigner) public onlyOwner {\n        for(uint256 i = 0;i< _signers.length;i++){\n            require(_signers[i] != address(0));\n            isSigner[_signers[i]] = _addSigner;\n            emit SetSigner(_signers[i],_addSigner);\n        }\n    }\n\n    /**\n     * @dev set the number of exchange request in order to execute\n     * @param _requestSigners uint256 The number of signers\n     */\n    function setrequestSigners(uint256 _requestSigners) public onlyOwner {\n        require(_requestSigners != 0);\n        requestSigners = _requestSigners;\n    }\n\n    /**\n     * @dev check whether the signer confirmed this exchange request\n     */\n    function isConfirmer(uint256 _trxSeq,address _signer) public view returns (bool) {\n        require(exchangeTrx[_trxSeq].from != address(0),\"trxSeq not exist\");\n        for(uint256 i = 0;i < exchangeTrx[_trxSeq].signers.length;i++){\n            if(exchangeTrx[_trxSeq].signers[i] == _signer){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @dev get how many signers that confirmed this exchange request\n     */\n    function getConfirmersLengthOfTrx(uint256 _trxSeq) public view returns (uint256) {\n        return exchangeTrx[_trxSeq].signers.length;\n    }\n\n    /**\n     * @dev get signers's address that confirmed this exchange request\n     * @param _trxSeq uint256 the Sequence of exchange request\n     * @param _index uint256 the index of signers\n     */\n    function getConfirmerOfTrx(uint256 _trxSeq,uint256 _index) public view returns (address) {\n        require(_index < getConfirmersLengthOfTrx(_trxSeq),\"out of range\");\n        return exchangeTrx[_trxSeq].signers[_index];\n    }\n\n    /**\n     * @dev apply BDR exchange Abc\n     * @param _value uint256 amount of BDR to exchange\n     * @return uint256 the sequence of exchange request\n     */\n    function applyExchangeToken(uint256 _value) public whenNotPaused returns (uint256) {\n        uint256 trxSeq = applyCounts;\n        require(exchangeTrx[trxSeq].from == address(0),\"trxSeq already exist\");\n        require(balances[msg.sender] >= _value);\n        exchangeTrx[trxSeq].executed = false;\n        exchangeTrx[trxSeq].from = msg.sender;\n        exchangeTrx[trxSeq].value = _value;\n        applyCounts = applyCounts.add(1);\n        balances[address(this)] = balances[address(this)].add(_value);\n        balances[exchangeTrx[trxSeq].from] = balances[exchangeTrx[trxSeq].from].sub(_value);\n        exchangeLock[exchangeTrx[trxSeq].from] = exchangeLock[exchangeTrx[trxSeq].from].add(_value);\n        emit ApplyExchangeToken(exchangeTrx[trxSeq].from,exchangeTrx[trxSeq].value,trxSeq);\n        emit Transfer(msg.sender,address(this),_value);\n        return trxSeq;\n    }\n\n    /**\n     * @dev signer confirms one exchange request\n     * @param _trxSeq uint256 the Sequence of exchange request\n     */\n    function confirmExchangeTrx(uint256 _trxSeq) public onlySigner {\n        require(exchangeTrx[_trxSeq].from != address(0),\"_trxSeq not exist\");\n        require(exchangeTrx[_trxSeq].signers.length < requestSigners,\"trx already has enough signers\");\n        require(exchangeTrx[_trxSeq].executed == false,\"trx already executed\");\n        require(isConfirmer(_trxSeq, msg.sender) == false,\"signer already confirmed\");\n        exchangeTrx[_trxSeq].signers.push(msg.sender);\n        emit ConfirmTrx(msg.sender, _trxSeq);\n    }\n\n    /**\n     * @dev signer cancel confirmed exchange request\n     * @param _trxSeq uint256 the Sequence of exchange request\n     */\n    function cancelConfirm(uint256 _trxSeq) public onlySigner {\n        require(exchangeTrx[_trxSeq].from != address(0),\"_trxSeq not exist\");\n        require(isConfirmer(_trxSeq, msg.sender),\"Signer didn't confirm\");\n        require(exchangeTrx[_trxSeq].executed == false,\"trx already executed\");\n        uint256 len = exchangeTrx[_trxSeq].signers.length;\n        for(uint256 i = 0;i < len;i++){\n            if(exchangeTrx[_trxSeq].signers[i] == msg.sender){\n                exchangeTrx[_trxSeq].signers[i] = exchangeTrx[_trxSeq].signers[len.sub(1)] ;\n                exchangeTrx[_trxSeq].signers.length --;\n                break;\n            }\n        }\n        emit CancleConfirmTrx(msg.sender,_trxSeq);\n    }\n\n    /**\n     * @dev signer cancel exchange request\n     * @param _trxSeq uint256 the Sequence of exchange request\n     */\n    function cancleExchangeRequest(uint256 _trxSeq) public {\n        require(exchangeTrx[_trxSeq].from != address(0),\"_trxSeq not exist\");\n        require(exchangeTrx[_trxSeq].executed == false,\"trx already executed\");\n        require(isSigner[msg.sender] || exchangeTrx[_trxSeq].from == msg.sender);\n        balances[address(this)] = balances[address(this)].sub(exchangeTrx[_trxSeq].value);\n        balances[exchangeTrx[_trxSeq].from] = balances[exchangeTrx[_trxSeq].from].add(exchangeTrx[_trxSeq].value);\n        exchangeLock[exchangeTrx[_trxSeq].from] = exchangeLock[exchangeTrx[_trxSeq].from].sub(exchangeTrx[_trxSeq].value);\n        delete exchangeTrx[_trxSeq];\n        emit CancleExchangeRequest(msg.sender,_trxSeq);\n        emit Transfer(address(this),exchangeTrx[_trxSeq].from,exchangeTrx[_trxSeq].value);\n    }\n\n    /**\n     * @dev execute exchange request which confirmed by enough signers\n     * @param _trxSeq uint256 the Sequence of exchange request\n     */\n    function executeExchangeTrx(uint256 _trxSeq) public whenNotPaused{\n        address from = exchangeTrx[_trxSeq].from;\n        uint256 value = exchangeTrx[_trxSeq].value;\n        require(from != address(0),\"trxSeq not exist\");\n        require(exchangeTrx[_trxSeq].executed == false,\"trxSeq has executed\");\n        require(exchangeTrx[_trxSeq].signers.length >= requestSigners);\n        require(from == msg.sender|| isSigner[msg.sender]);\n        require(value <= balances[address(this)]);\n        _burn(address(this), value);\n        exchangeLock[from] = exchangeLock[from].sub(value);\n        exchangeTrx[_trxSeq].executed = true;\n        AbcInterface(AbcInstance).tokenFallback(from,value,bytes(\"\"));\n        emit TokenExchange(exchangeTrx[_trxSeq].from,exchangeTrx[_trxSeq].value,false);\n    }\n\n    /**\n     * @dev exchange Abc token to BDR token,only AbcInstance can invoke this function\n     */\n    function tokenFallback(address _from, uint _value, bytes memory) public {\n        require(msg.sender == AbcInstance);\n        require(_from != address(0));\n        require(_value > 0);\n        uint256 exchangeAmount = _value.mul(10**uint256(decimals)).div(10**uint256(AbcInterface(AbcInstance).decimals()));\n        _mint(_from, exchangeAmount);\n        emit Transfer(address(0x00),_from,exchangeAmount);\n        emit TokenExchange(_from,_value,true);\n    }\n\n    /**\n     * @dev mint BDR token\n     */\n    function _mint(address target, uint256 value ) internal {\n        balances[target] = balances[target].add(value);\n        totalSupply = totalSupply.add(value);\n        emit Mint(target,value);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signers\",\"type\":\"address[]\"},{\"name\":\"_addSigner\",\"type\":\"bool\"}],\"name\":\"setSigners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"applyCounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_abc\",\"type\":\"address\"}],\"name\":\"setAbcInstance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exchangeTrx\",\"outputs\":[{\"name\":\"executed\",\"type\":\"bool\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trxSeq\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getConfirmerOfTrx\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestSigners\",\"type\":\"uint256\"}],\"name\":\"setrequestSigners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trxSeq\",\"type\":\"uint256\"}],\"name\":\"getConfirmersLengthOfTrx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"applyExchangeToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AbcInstance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestSigners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trxSeq\",\"type\":\"uint256\"}],\"name\":\"cancleExchangeRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trxSeq\",\"type\":\"uint256\"},{\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"isConfirmer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trxSeq\",\"type\":\"uint256\"}],\"name\":\"executeExchangeTrx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"exchangeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trxSeq\",\"type\":\"uint256\"}],\"name\":\"cancelConfirm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trxSeq\",\"type\":\"uint256\"}],\"name\":\"confirmExchangeTrx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isSigner\",\"type\":\"bool\"}],\"name\":\"SetSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"trxSeq\",\"type\":\"uint256\"}],\"name\":\"ApplyExchangeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"trxSeq\",\"type\":\"uint256\"}],\"name\":\"ConfirmTrx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"trxSeq\",\"type\":\"uint256\"}],\"name\":\"CancleConfirmTrx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"trxSeq\",\"type\":\"uint256\"}],\"name\":\"CancleExchangeRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"AbcExchangeBDR\",\"type\":\"bool\"}],\"name\":\"TokenExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040526003805460a060020a60ff02191690556002600a556000600b553480156200002b57600080fd5b506040516200284138038062002841833981018060405260608110156200005157600080fd5b8101908080516401000000008111156200006a57600080fd5b820160208101848111156200007e57600080fd5b81516401000000008111828201871017156200009957600080fd5b50509291906020018051640100000000811115620000b657600080fd5b82016020810184811115620000ca57600080fd5b8151640100000000811182820187101715620000e557600080fd5b505060209182015160038054600160a060020a03191633179055855191945092508491849184916200011d9160049186019062000154565b5081516200013390600590602085019062000154565b506006805460ff191660ff9290921691909117905550620001f99350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019757805160ff1916838001178555620001c7565b82800160010185558215620001c7579182015b82811115620001c7578251825591602001919060010190620001aa565b50620001d5929150620001d9565b5090565b620001f691905b80821115620001d55760008155600101620001e0565b90565b61263880620002096000396000f3fe608060405234801561001057600080fd5b5060043610610239576000357c0100000000000000000000000000000000000000000000000000000000900480637df73e2711610142578063d169dc6b116100ca578063dd78195411610099578063dd7819541461079c578063de482239146107b9578063f0e97390146107df578063f2fde38b146107fc578063f519a1441461082257610239565b8063d169dc6b146106f9578063d4761b0b14610716578063d73dd62314610742578063dd62ed3e1461076e57610239565b806395d89b411161011157806395d89b41146105fa578063a9059cbb14610602578063c0ee0b8a1461062e578063cb0c515a146106e9578063d05df8ae146106f157610239565b80637df73e27146105a75780638456cb59146105cd5780638da5cb5b146105d5578063925834ef146105dd57610239565b806342966c68116101c5578063661884631161019457806366188463146104ef5780636b9e80261461051b57806370a082311461053857806379cc67901461055e57806379e0ea501461058a57610239565b806342966c681461044657806344225d7f1461046357806350b01bda146104a85780635c975abb146104e757610239565b806323b872dd1161020c57806323b872dd146103bc57806324d7252c146103f2578063295f5442146103fa578063313ce567146104205780633f4ba83a1461043e57610239565b806306fdde031461023e578063095ea7b3146102bb578063135aa6fd146102fb57806318160ddd146103a2575b600080fd5b61024661083f565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610280578181015183820152602001610268565b50505050905090810190601f1680156102ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102e7600480360360408110156102d157600080fd5b50600160a060020a0381351690602001356108cd565b604080519115158252519081900360200190f35b6103a06004803603604081101561031157600080fd5b81019060208101813564010000000081111561032c57600080fd5b82018360208201111561033e57600080fd5b8035906020019184602083028401116401000000008311171561036057600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050505035151590506108fa565b005b6103aa6109fa565b60408051918252519081900360200190f35b6102e7600480360360608110156103d257600080fd5b50600160a060020a03813581169160208101359091169060400135610a00565b6103aa610a66565b6103a06004803603602081101561041057600080fd5b5035600160a060020a0316610a6c565b610428610ac7565b6040805160ff9092168252519081900360200190f35b6103a0610ad0565b6103a06004803603602081101561045c57600080fd5b5035610b48565b6104806004803603602081101561047957600080fd5b5035610b55565b604080519315158452600160a060020a03909216602084015282820152519081900360600190f35b6104cb600480360360408110156104be57600080fd5b5080359060200135610b82565b60408051600160a060020a039092168252519081900360200190f35b6102e7610c1c565b6102e76004803603604081101561050557600080fd5b50600160a060020a038135169060200135610c2c565b6103a06004803603602081101561053157600080fd5b5035610c50565b6103aa6004803603602081101561054e57600080fd5b5035600160a060020a0316610c78565b6103a06004803603604081101561057457600080fd5b50600160a060020a038135169060200135610c93565b6103aa600480360360208110156105a057600080fd5b5035610ca1565b6102e7600480360360208110156105bd57600080fd5b5035600160a060020a0316610cb6565b6103a0610ccb565b6104cb610d48565b6103aa600480360360208110156105f357600080fd5b5035610d57565b610246610fa6565b6102e76004803603604081101561061857600080fd5b50600160a060020a038135169060200135611001565b6103a06004803603606081101561064457600080fd5b600160a060020a038235169160208101359181019060608101604082013564010000000081111561067457600080fd5b82018360208201111561068657600080fd5b803590602001918460018302840111640100000000831117156106a857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061105e945050505050565b6104cb6111e5565b6103aa6111f4565b6103a06004803603602081101561070f57600080fd5b50356111fa565b6102e76004803603604081101561072c57600080fd5b5080359060200135600160a060020a03166114c5565b6102e76004803603604081101561075857600080fd5b50600160a060020a0381351690602001356115b4565b6103aa6004803603604081101561078457600080fd5b50600160a060020a03813581169160200135166115d8565b6103a0600480360360208110156107b257600080fd5b5035611603565b6103aa600480360360208110156107cf57600080fd5b5035600160a060020a0316611929565b6103a0600480360360208110156107f557600080fd5b503561193b565b6103a06004803603602081101561081257600080fd5b5035600160a060020a0316611be6565b6103a06004803603602081101561083857600080fd5b5035611c06565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108c55780601f1061089a576101008083540402835291602001916108c5565b820191906000526020600020905b8154815290600101906020018083116108a857829003601f168201915b505050505081565b60035460009060a060020a900460ff16156108e757600080fd5b6108f18383611e36565b90505b92915050565b600354600160a060020a0316331461091157600080fd5b60005b82518110156109f557825160009084908390811061092e57fe5b60209081029091010151600160a060020a0316141561094c57600080fd5b8160076000858481518110151561095f57fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff1916911515919091179055825183908290811061099f57fe5b90602001906020020151600160a060020a03167f5fcbb78b58c04f459e28fba113b7b7248255a48fc71eca69650310daea63045183604051808215151515815260200191505060405180910390a2600101610914565b505050565b60025481565b600954600090600160a060020a0384811691161415610a535760405160e560020a62461bcd02815260040180806020018281038252602f815260200180612593602f913960400191505060405180910390fd5b610a5e848484611e9c565b949350505050565b600b5481565b600354600160a060020a03163314610a8357600080fd5b600160a060020a0381161515610a9857600080fd5b6009805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60065460ff1681565b600354600160a060020a03163314610ae757600080fd5b60035460a060020a900460ff161515610aff57600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b610b523382611ec1565b50565b6008602052600090815260409020805460019091015460ff8216916101009004600160a060020a03169083565b6000610b8d83610ca1565b8210610be3576040805160e560020a62461bcd02815260206004820152600c60248201527f6f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b6000838152600860205260409020600201805483908110610c0057fe5b600091825260209091200154600160a060020a03169392505050565b60035460a060020a900460ff1681565b60035460009060a060020a900460ff1615610c4657600080fd5b6108f18383611f58565b600354600160a060020a03163314610c6757600080fd5b801515610c7357600080fd5b600a55565b600160a060020a031660009081526020819052604090205490565b610c9d8282612047565b5050565b60009081526008602052604090206002015490565b60076020526000908152604090205460ff1681565b600354600160a060020a03163314610ce257600080fd5b60035460a060020a900460ff1615610cf957600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b60035460009060a060020a900460ff1615610d7157600080fd5b600b546000818152600860205260409020546101009004600160a060020a031615610de6576040805160e560020a62461bcd02815260206004820152601460248201527f74727853657120616c7265616479206578697374000000000000000000000000604482015290519081900360640190fd5b33600090815260208190526040902054831115610e0257600080fd5b6000818152600860205260409020805474ffffffffffffffffffffffffffffffffffffffffff191661010033021781556001908101849055600b54610e46916120a9565b600b5530600090815260208190526040902054610e69908463ffffffff6120a916565b306000908152602081815260408083209390935583825260088152828220546101009004600160a060020a031682528190522054610ead908463ffffffff6120c316565b60008281526008602090815260408083208054600160a060020a036101009182900481168652858552838620969096559054049093168252600c90522054610efb908463ffffffff6120a916565b60008281526008602081815260408084208054600160a060020a036101009182900481168752600c8552838720979097559487905292825282546001909301548151908152918201869052805193909204909316927f0d6395d68f2be6d031c8d9fb4808936534aa889710bbe57ef570d9c1c8f656f9929081900390910190a2604080518481529051309133916000805160206125c28339815191529181900360200190a392915050565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108c55780601f1061089a576101008083540402835291602001916108c5565b600954600090600160a060020a03848116911614156110545760405160e560020a62461bcd02815260040180806020018281038252602b8152602001806125e2602b913960400191505060405180910390fd5b6108f183836120d8565b600954600160a060020a0316331461107557600080fd5b600160a060020a038316151561108a57600080fd5b6000821161109757600080fd5b6000611161600960009054906101000a9004600160a060020a0316600160a060020a031663313ce5676040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561110657600080fd5b505afa15801561111a573d6000803e3d6000fd5b505050506040513d602081101561113057600080fd5b505160065460ff918216600a90810a926111559288929116900a63ffffffff6120fc16565b9063ffffffff61212c16565b905061116d848261214d565b604080518281529051600160a060020a038616916000916000805160206125c28339815191529181900360200190a360408051848152600160208201528151600160a060020a038716927f7d3799764c16f58d28ad04f3ef5f27c8010bbdc67768bfc7b3b6701ae0e53903928290030190a250505050565b600954600160a060020a031681565b600a5481565b6000818152600860205260409020546101009004600160a060020a0316151561126d576040805160e560020a62461bcd02815260206004820152601160248201527f5f747278536571206e6f74206578697374000000000000000000000000000000604482015290519081900360640190fd5b60008181526008602052604090205460ff16156112d4576040805160e560020a62461bcd02815260206004820152601460248201527f74727820616c7265616479206578656375746564000000000000000000000000604482015290519081900360640190fd5b3360009081526007602052604090205460ff168061130d57506000818152600860205260409020546101009004600160a060020a031633145b151561131857600080fd5b60008181526008602090815260408083206001015430845291839052909120546113479163ffffffff6120c316565b306000908152602081815260408083209390935583825260088152828220600181015490546101009004600160a060020a0316835290829052919020546113939163ffffffff6120a916565b60008281526008602090815260408083208054600160a060020a0361010091829004811686528585528386209690965560018201549154049094168352600c9091529020546113e79163ffffffff6120c316565b600082815260086020818152604080842080546101009004600160a060020a03168552600c83529084209490945584835252815474ffffffffffffffffffffffffffffffffffffffffff19168255600182018190556114496002830182612533565b5050604051819033907f36dae67a6b2662fa6156a4fdb499b74c51e3ea6d9de9ccc86b23d2e2fe085b6c90600090a3600081815260086020908152604091829020805460019091015483519081529251610100909104600160a060020a03169230926000805160206125c283398151915292918290030190a350565b6000828152600860205260408120546101009004600160a060020a03161515611538576040805160e560020a62461bcd02815260206004820152601060248201527f747278536571206e6f7420657869737400000000000000000000000000000000604482015290519081900360640190fd5b60005b6000848152600860205260409020600201548110156115aa5760008481526008602052604090206002018054600160a060020a03851691908390811061157d57fe5b600091825260209091200154600160a060020a031614156115a25760019150506108f4565b60010161153b565b5060009392505050565b60035460009060a060020a900460ff16156115ce57600080fd5b6108f183836121e8565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b60035460a060020a900460ff161561161a57600080fd5b60008181526008602052604090208054600190910154610100909104600160a060020a031690811515611697576040805160e560020a62461bcd02815260206004820152601060248201527f747278536571206e6f7420657869737400000000000000000000000000000000604482015290519081900360640190fd5b60008381526008602052604090205460ff16156116fe576040805160e560020a62461bcd02815260206004820152601360248201527f7472785365712068617320657865637574656400000000000000000000000000604482015290519081900360640190fd5b600a54600084815260086020526040902060020154101561171e57600080fd5b600160a060020a03821633148061174457503360009081526007602052604090205460ff165b151561174f57600080fd5b3060009081526020819052604090205481111561176b57600080fd5b6117753082611ec1565b600160a060020a0382166000908152600c602052604090205461179e908263ffffffff6120c316565b600160a060020a038084166000818152600c602090815260408083209590955587825260088152848220805460ff19166001179055600954855191820180875283835295517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081526004810194855260248101889052606060448201908152835160648301528351929096169663c0ee0b8a968a968a96909491936084019291908190849084905b8381101561185e578181015183820152602001611846565b50505050905090810190601f16801561188b5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156118ac57600080fd5b505af11580156118c0573d6000803e3d6000fd5b505050600084815260086020908152604080832080546001909101548251908152928301939093528051610100909304600160a060020a031693507f7d3799764c16f58d28ad04f3ef5f27c8010bbdc67768bfc7b3b6701ae0e5390392918290030190a2505050565b600c6020526000908152604090205481565b3360009081526007602052604090205460ff16151561195957600080fd5b6000818152600860205260409020546101009004600160a060020a031615156119cc576040805160e560020a62461bcd02815260206004820152601160248201527f5f747278536571206e6f74206578697374000000000000000000000000000000604482015290519081900360640190fd5b6119d681336114c5565b1515611a2c576040805160e560020a62461bcd02815260206004820152601560248201527f5369676e6572206469646e277420636f6e6669726d0000000000000000000000604482015290519081900360640190fd5b60008181526008602052604090205460ff1615611a93576040805160e560020a62461bcd02815260206004820152601460248201527f74727820616c7265616479206578656375746564000000000000000000000000604482015290519081900360640190fd5b600081815260086020526040812060020154905b81811015611bb4576000838152600860205260409020600201805433919083908110611acf57fe5b600091825260209091200154600160a060020a03161415611bac576000838152600860205260409020600201611b0c83600163ffffffff6120c316565b81548110611b1657fe5b6000918252602080832090910154858352600890915260409091206002018054600160a060020a039092169183908110611b4c57fe5b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039490941693909317909255848152600890915260409020600201805490611ba6906000198301612551565b50611bb4565b600101611aa7565b50604051829033907fdc2bfd080c3790dca6b377550e4f31b952c6a0fb6153080dd81677e219ec99c890600090a35050565b600354600160a060020a03163314611bfd57600080fd5b610b5281612281565b3360009081526007602052604090205460ff161515611c2457600080fd5b6000818152600860205260409020546101009004600160a060020a03161515611c97576040805160e560020a62461bcd02815260206004820152601160248201527f5f747278536571206e6f74206578697374000000000000000000000000000000604482015290519081900360640190fd5b600a5460008281526008602052604090206002015410611d01576040805160e560020a62461bcd02815260206004820152601e60248201527f74727820616c72656164792068617320656e6f756768207369676e6572730000604482015290519081900360640190fd5b60008181526008602052604090205460ff1615611d68576040805160e560020a62461bcd02815260206004820152601460248201527f74727820616c7265616479206578656375746564000000000000000000000000604482015290519081900360640190fd5b611d7281336114c5565b15611dc7576040805160e560020a62461bcd02815260206004820152601860248201527f7369676e657220616c726561647920636f6e6669726d65640000000000000000604482015290519081900360640190fd5b60008181526008602090815260408083206002018054600181018255908452918320909101805473ffffffffffffffffffffffffffffffffffffffff191633908117909155905183927f8c6087d792119c81c59c5de009a30bb0f1e1feffd604ab5bb0975478e785e06e91a350565b336000818152600160209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60035460009060a060020a900460ff1615611eb657600080fd5b610a5e8484846122ff565b600160a060020a0382161515611ed657600080fd5b600254611ee9908263ffffffff6120c316565b600255600160a060020a038216600090815260208190526040902054611f15908263ffffffff6120c316565b600160a060020a038316600081815260208181526040808320949094558351858152935191936000805160206125c2833981519152929081900390910190a35050565b336000908152600160209081526040808320600160a060020a0386168452909152812054808310611fac57336000908152600160209081526040808320600160a060020a0388168452909152812055611fe1565b611fbc818463ffffffff6120c316565b336000908152600160209081526040808320600160a060020a03891684529091529020555b336000818152600160209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a038216600090815260016020908152604080832033845290915290205461207b908263ffffffff6120c316565b600160a060020a0383166000908152600160209081526040808320338452909152902055610c9d8282611ec1565b6000818360001903101515156120be57600080fd5b500190565b6000828211156120d257600080fd5b50900390565b60035460009060a060020a900460ff16156120f257600080fd5b6108f18383612464565b600082151561210d575060006108f4565b818360001981151561211b57fe5b04101561212757600080fd5b500290565b600081151561213a57600080fd5b818381151561214557fe5b049392505050565b600160a060020a038216600090815260208190526040902054612176908263ffffffff6120a916565b600160a060020a0383166000908152602081905260409020556002546121a2908263ffffffff6120a916565b600255604080518281529051600160a060020a038416917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885919081900360200190a25050565b336000908152600160209081526040808320600160a060020a038616845290915281205461221c908363ffffffff6120a916565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a038116151561229657600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a038316151561231657600080fd5b600160a060020a03841660009081526020819052604090205482111561233b57600080fd5b600160a060020a038416600090815260016020908152604080832033845290915290205482111561236b57600080fd5b600160a060020a038416600090815260208190526040902054612394908363ffffffff6120c316565b600160a060020a0380861660009081526020819052604080822093909355908516815220546123c9908363ffffffff6120a916565b600160a060020a0380851660009081526020818152604080832094909455918716815260018252828120338252909152205461240b908363ffffffff6120c316565b600160a060020a03808616600081815260016020908152604080832033845282529182902094909455805186815290519287169391926000805160206125c2833981519152929181900390910190a35060019392505050565b6000600160a060020a038316151561247b57600080fd5b3360009081526020819052604090205482111561249757600080fd5b336000908152602081905260409020546124b7908363ffffffff6120c316565b3360009081526020819052604080822092909255600160a060020a038516815220546124e9908363ffffffff6120a916565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233926000805160206125c28339815191529281900390910190a350600192915050565b5080546000825590600052602060002090810190610b529190612571565b8154818355818111156109f5576000838152602090206109f59181019083015b61258f91905b8082111561258b5760008155600101612577565b5090565b9056fe63616e2774207472616e7366657246726f6d20746f20416263546f6b656e2061646472657373206469726563746c79ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef63616e2774207472616e7366657220746f20416263546f6b656e2061646472657373206469726563746c79a165627a7a72305820d7619d1e4b90e245b671c3f7c84ee2bb01ba601d7228a48303452dff8524e8560029000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000c42495457495245532e424452000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044249545700000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000c42495457495245532e424452000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044249545700000000000000000000000000000000000000000000000000000000"
}