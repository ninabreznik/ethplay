{
  "address": "0x54a4654f625f7b760ecbac5a640b8b916ee1a0ea",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Rento",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-23\n*/\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\npragma solidity ^0.4.24;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20Basic _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n\n  function safeTransferFrom(\n    ERC20 _token,\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transferFrom(_from, _to, _value));\n  }\n\n  function safeApprove(\n    ERC20 _token,\n    address _spender,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.approve(_spender, _value));\n  }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\npragma solidity ^0.4.24;\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\npragma solidity ^0.4.24;\n\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/Burnable.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract Burnable is StandardToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n\n}\n\n// File: contracts/Ownable.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable is Burnable {\n\n  address public owner;\n  address public ownerCandidate;\n\n  /**\n   * @dev Fired whenever ownership is successfully transferred.\n   */\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a new owner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a new owner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    ownerCandidate = _newOwner;\n  }\n\n  /**\n   * @dev New ownerschip Confirmation.\n   */\n  function acceptOwnership() public {\n    _acceptOwnership();\n  }\n\n  /**\n   * @dev New ownerschip confirmation internal.\n   */\n  function _acceptOwnership() internal {\n    require(msg.sender == ownerCandidate);\n    emit OwnershipTransferred(owner, ownerCandidate);\n    owner = ownerCandidate;\n    ownerCandidate = address(0);\n  }\n\n  /**\n   * @dev Transfers the current balance to the owner and terminates the contract.\n   * In case stuff goes bad.\n   */\n  function destroy() public onlyOwner {\n    selfdestruct(owner);\n  }\n\n  function destroyAndSend(address _recipient) public onlyOwner {\n    selfdestruct(_recipient);\n  }\n\n}\n\n// File: contracts/Administrable.sol\n\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title Ownable\n * @dev The authentication manager details user accounts that have access to certain priviledges.\n */\ncontract Administrable is Ownable {\n\n  using SafeERC20 for ERC20Basic;\n  \n  /**\n   * @dev Map addresses to admins.\n   */\n  mapping (address => bool) admins;\n\n  /**\n   * @dev All admins that have ever existed.\n   */\n  address[] adminAudit;\n\n  /**\n   * @dev Globally enable or disable admin access.\n   */\n  bool allowAdmins = true;\n\n   /**\n   * @dev Fired whenever an admin is added to the contract.\n   */\n  event AdminAdded(address addedBy, address admin);\n\n  /**\n   * @dev Fired whenever an admin is removed from the contracts.\n   */\n  event AdminRemoved(address removedBy, address admin);\n\n  /**\n   * @dev Throws if called by any account other than the active admin or owner.\n   */\n  modifier onlyAdmin {\n    require(isCurrentAciveAdmin(msg.sender));\n    _;\n  }\n\n  /**\n   * @dev Turn on admin role\n   */\n  function enableAdmins() public onlyOwner {\n    require(allowAdmins == false);\n    allowAdmins = true;\n  }\n\n  /**\n   * @dev Turn off admin role\n   */\n  function disableAdmins() public onlyOwner {\n    require(allowAdmins);\n    allowAdmins = false;\n  }\n\n  /**\n   * @dev Gets whether or not the specified address is currently an admin.\n   */\n  function isCurrentAdmin(address _address) public view returns (bool) {\n    if(_address == owner)\n      return true;\n    else\n      return admins[_address];\n  }\n\n  /**\n   * @dev Gets whether or not the specified address is currently an active admin.\n   */\n  function isCurrentAciveAdmin(address _address) public view returns (bool) {\n    if(_address == owner)\n      return true;\n    else\n      return allowAdmins && admins[_address];\n  }\n\n  /**\n   * @dev Gets whether or not the specified address has ever been an admin.\n   */\n  function isCurrentOrPastAdmin(address _address) public view returns (bool) {\n    for (uint256 i = 0; i < adminAudit.length; i++)\n      if (adminAudit[i] == _address)\n        return true;\n    return false;\n  }\n\n  /**\n   * @dev Adds a user to our list of admins.\n   */\n  function addAdmin(address _address) public onlyOwner {\n    require(admins[_address] == false);\n    admins[_address] = true;\n    emit AdminAdded(msg.sender, _address);\n    adminAudit.length++;\n    adminAudit[adminAudit.length - 1] = _address;\n  }\n\n  /**\n   * @dev Removes a user from our list of admins but keeps them in the history.\n   */\n  function removeAdmin(address _address) public onlyOwner {\n    require(_address != msg.sender);\n    require(admins[_address]);\n    admins[_address] = false;\n    emit AdminRemoved(msg.sender, _address);\n  }\n\n  /**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param _token ERC20Basic The address of the token contract\n   */\n  function reclaimToken(ERC20Basic _token) external onlyAdmin {\n    uint256 balance = _token.balanceOf(this);\n    _token.safeTransfer(msg.sender, balance);\n  }\n\n}\n\n// File: contracts/Pausable.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Administrable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyAdmin whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyAdmin whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n\n}\n\n// File: contracts/Rento.sol\n\npragma solidity ^0.4.24;\n\n\ncontract Rento is Pausable {\n\n  using SafeMath for uint256;\n\n  string public name = \"Rento\";\n  string public symbol = \"RTO\";\n  uint8 public decimals = 8;\n\n  /**\n   * @dev representing 1.0.\n   */\n  uint256 public constant UNIT      = 100000000;\n\n  uint256 constant INITIAL_SUPPLY   = 600000000 * UNIT;\n\n  uint256 constant SALE_SUPPLY      = 264000000 * UNIT;\n  uint256 internal SALE_SENT        = 0;\n\n  uint256 constant OWNER_SUPPLY     = 305000000 * UNIT;\n  uint256 internal OWNER_SENT       = 0;\n\n  uint256 constant BOUNTY_SUPPLY    = 6000000 * UNIT;\n  uint256 internal BOUNTY_SENT      = 0;\n\n  uint256 constant ADVISORS_SUPPLY  = 25000000 * UNIT;\n  uint256 internal ADVISORS_SENT    = 0;\n\n  struct Stage {\n     uint8 cents;\n     uint256 limit;\n  } \n\n  Stage[] stages;\n\n  /**\n   * @dev Stages prices in cents\n   */\n  mapping(uint => uint256) rates;\n\n  constructor() public {\n    totalSupply_ = INITIAL_SUPPLY;\n    stages.push(Stage( 2, 0));\n    stages.push(Stage( 6, 26400000 * UNIT));\n    stages.push(Stage( 6, 52800000 * UNIT));\n    stages.push(Stage(12, 158400000 * UNIT));\n    stages.push(Stage(12, SALE_SUPPLY));\n  }\n\n\n  /**\n   * @dev Sell tokens to address based on USD cents value.\n   * @param _to Buyer address.\n   * @param _value USC cents value.\n   */\n  function sellWithCents(address _to, uint256 _value) public\n    onlyAdmin whenNotPaused\n    returns (bool success) {\n      return _sellWithCents(_to, _value);\n  }\n\n  /**\n   * @dev Sell tokens to address array based on USD cents array values.\n   */\n  function sellWithCentsArray(address[] _dests, uint256[] _values) public\n    onlyAdmin whenNotPaused\n    returns (bool success) {\n      require(_dests.length == _values.length);\n      for (uint32 i = 0; i < _dests.length; i++)\n        if(!_sellWithCents(_dests[i], _values[i])) {\n          revert();\n          return false;\n        }\n      return true;\n  }\n\n  /**\n   * @dev Sell tokens to address based on USD cents value.\n   * @param _to Buyer address.\n   * @param _value USC cents value.\n   */\n  function _sellWithCents(address _to, uint256 _value) internal\n    onlyAdmin whenNotPaused\n    returns (bool) {\n      require(_to != address(0) && _value > 0);\n      uint256 tokens_left = 0;\n      uint256 tokens_right = 0;\n      uint256 price_left = 0;\n      uint256 price_right = 0;\n      uint256 tokens;\n      uint256 i_r = 0;\n      uint256 i = 0;\n      while (i < stages.length) {\n        if(SALE_SENT >= stages[i].limit) {\n          if(i == stages.length-1) {\n            i_r = i;\n          } else {\n            i_r = i + 1;\n          }\n          price_left = uint(stages[i].cents);\n          price_right = uint(stages[i_r].cents);\n        }\n        i += 1;\n      }\n      if(price_left <= 0) {\n        revert();\n        return false;\n      }\n      tokens_left = _value.mul(UNIT).div(price_left);\n      if(SALE_SENT.add(tokens_left) <= stages[i_r].limit) {\n        tokens = tokens_left;\n      } else {\n        tokens_left = stages[i_r].limit.sub(SALE_SENT);\n        tokens_right = UNIT.mul(_value.sub((tokens_left.mul(price_left)).div(UNIT))).div(price_right);\n      }\n      tokens = tokens_left.add(tokens_right);\n      if(SALE_SENT.add(tokens) > SALE_SUPPLY) {\n        revert();\n        return false;\n      }\n      balances[_to] = balances[_to].add(tokens);\n      SALE_SENT = SALE_SENT.add(tokens);\n      emit Transfer(this, _to, tokens);\n      return true;\n  }\n\n  /**\n   * @dev Transfer tokens from contract directy to address.\n   * @param _to Buyer address.\n   * @param _value Tokens value.\n   */\n  function sellDirect(address _to, uint256 _value) public\n    onlyAdmin whenNotPaused\n      returns (bool success) {\n        require(_to != address(0) && _value > 0 && SALE_SENT.add(_value) <= SALE_SUPPLY);\n        balances[_to] = balances[_to].add(_value);\n        SALE_SENT = SALE_SENT.add(_value);\n        emit Transfer(this, _to, _value);\n        return true;\n  }\n\n  /**\n   * @dev Sell tokens to address array based on USD cents array values.\n   */\n  function sellDirectArray(address[] _dests, uint256[] _values) public\n    onlyAdmin whenNotPaused returns (bool success) {\n      require(_dests.length == _values.length);\n      for (uint32 i = 0; i < _dests.length; i++) {\n         if(_values[i] <= 0 || !sellDirect(_dests[i], _values[i])) {\n            revert();\n            return false;\n         }\n      }\n      return true;\n  }\n\n\n  /**\n   * @dev Transfer tokens from contract directy to owner.\n   * @param _value Tokens value.\n   */\n  function transferOwnerTokens(uint256 _value) public\n    onlyAdmin whenNotPaused returns (bool success) {\n      require(_value > 0 && OWNER_SENT.add(_value) <= OWNER_SUPPLY);\n      balances[owner] = balances[owner].add(_value);\n      OWNER_SENT = OWNER_SENT.add(_value);\n      emit Transfer(this, owner, _value);\n      return true;\n  }\n\n  /**\n   * @dev Transfer Bounty Tokens from contract.\n   * @param _to Bounty recipient address.\n   * @param _value Tokens value.\n   */\n  function transferBountyTokens(address _to, uint256 _value) public\n    onlyAdmin whenNotPaused returns (bool success) {\n      require(_to != address(0) && _value > 0 && BOUNTY_SENT.add(_value) <= BOUNTY_SUPPLY);\n      balances[_to] = balances[_to].add(_value);\n      BOUNTY_SENT = BOUNTY_SENT.add(_value);\n      emit Transfer(this, _to, _value);\n      return true;\n  }\n\n  /**\n   * @dev Transfer Bounty Tokens from contract to multiple recipients ant once.\n   * @param _to Bounty recipient addresses.\n   * @param _values Tokens values.\n   */\n  function transferBountyTokensArray(address[] _to, uint256[] _values) public\n    onlyAdmin whenNotPaused returns (bool success) {\n      require(_to.length == _values.length);\n      for (uint32 i = 0; i < _to.length; i++)\n        if(!transferBountyTokens(_to[i], _values[i])) {\n          revert();\n          return false;\n        }\n      return true;\n  }\n    \n  /**\n   * @dev Transfer Advisors Tokens from contract.\n   * @param _to Advisors recipient address.\n   * @param _value Tokens value.\n   */\n  function transferAdvisorsTokens(address _to, uint256 _value) public\n    onlyAdmin whenNotPaused returns (bool success) {\n      require(_to != address(0) && _value > 0 && ADVISORS_SENT.add(_value) <= ADVISORS_SUPPLY);\n      balances[_to] = balances[_to].add(_value);\n      ADVISORS_SENT = ADVISORS_SENT.add(_value);\n      emit Transfer(this, _to, _value);\n      return true;\n  }\n    \n  /**\n   * @dev Transfer Advisors Tokens from contract for multiple advisors.\n   * @param _to Advisors recipient addresses.\n   * @param _values Tokens valuees.\n   */\n  function transferAdvisorsTokensArray(address[] _to, uint256[] _values) public\n    onlyAdmin whenNotPaused returns (bool success) {\n      require(_to.length == _values.length);\n      for (uint32 i = 0; i < _to.length; i++)\n        if(!transferAdvisorsTokens(_to[i], _values[i])) {\n          revert();\n          return false;\n        }\n      return true;\n  }\n\n  /**\n   * @dev Current Sale states methods.\n   */\n  function soldTokensSent() external view returns (uint256) {\n    return SALE_SENT;\n  }\n  function soldTokensAvailable() external view returns (uint256) {\n    return SALE_SUPPLY.sub(SALE_SENT);\n  }\n\n  function ownerTokensSent() external view returns (uint256) {\n    return OWNER_SENT;\n  }\n  function ownerTokensAvailable() external view returns (uint256) {\n    return OWNER_SUPPLY.sub(OWNER_SENT);\n  }\n\n  function bountyTokensSent() external view returns (uint256) {\n    return BOUNTY_SENT;\n  }\n  function bountyTokensAvailable() external view returns (uint256) {\n    return BOUNTY_SUPPLY.sub(BOUNTY_SENT);\n  }\n\n  function advisorsTokensSent() external view returns (uint256) {\n    return ADVISORS_SENT;\n  }\n  function advisorsTokensAvailable() external view returns (uint256) {\n    return ADVISORS_SUPPLY.sub(ADVISORS_SENT);\n  }\n\n  /**\n   * @dev Transfer tokens from msg.sender account directy to address array with values array.\n   * param _dests  recipients.\n   * @param _values Tokens values.\n   */\n  function transferArray(address[] _dests, uint256[] _values) public returns (bool success) {\n      require(_dests.length == _values.length);\n      for (uint32 i = 0; i < _dests.length; i++) {\n        if(_values[i] > balances[msg.sender] || msg.sender == _dests[i] || _dests[i] == address(0)) {\n          revert();\n          return false;\n        }\n        balances[msg.sender] = balances[msg.sender].sub(_values[i]);\n        balances[_dests[i]] = balances[_dests[i]].add(_values[i]);\n        emit Transfer(msg.sender, _dests[i], _values[i]);\n      }\n      return true;\n  }\n\n}",
  "bytecode": ""
}