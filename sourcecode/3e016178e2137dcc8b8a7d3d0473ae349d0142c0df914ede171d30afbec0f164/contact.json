{
  "address": "0x405d44c9ed3d2d80e375b2360ed0713b71c6b811",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Criplos",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-17\n*/\n\n/*\nÂ© Copyright 2019. All rights reserved https://criplos.com\n*/\npragma solidity ^0.4.25;\n\ncontract Criplos {\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n\n    using SafeMath for uint;\n    using ToAddress for bytes;\n\n    string constant public symbol = \"CRL\";\n    string constant public name = \"CRipLos\";\n    uint8 constant public decimals = 18;\n\t\n\taddress owner;\n\taddress public advance;\n\taddress[] recordAccts;\n\n\tuint public priceTokens;\n\tuint public minMining;\n\tuint public minRemining;\n\tuint public minWithdraw;\n\tuint public minTransfer;\n\n\tuint totalTokens_;\n\tuint totalMining_;\n\tuint totalMiners_;\n\tuint techBuff_;\n\n\tstruct Record {\n\tuint balance;\n\tuint volume;\n\tuint level;\n    address master;\n\t}\n\t\n    mapping(address => Record) info;\n\t\n    constructor() public {\n\t\n\t\towner = msg.sender;\n\t\tadvance = 0xDD044b47A3f02F527B28e3b1C6877051f6E38694;\n\n\t\tpriceTokens = 1e3;\n\t\tminMining = 1e17;\n\t\tminRemining = 1e19;\n\t\tminWithdraw = 1e19;\n\t\tminTransfer = 1e18;\n\n\t\ttotalTokens_ = 0;\n\t\ttotalMining_ = 0;\n\t\ttotalMiners_ = 0;\n\t\ttechBuff_ = 0;\n    }\n\n    function totalSupply() public view returns (uint) {\n        return totalTokens_;\n    }\n\n    function totalMining() public view returns (uint) {\n        return totalMining_.add(techBuff_);\n    }\n\n    function totalMiners() public view returns (uint) {\n        return totalMiners_;\n    }\n\n    function techBuff() public view returns (uint) {\n        return techBuff_;\n    }\t\n\n    function balanceOf(address member) public view returns (uint balance) {\n        return info[member].balance;\n    }\n\n    function infoMining(address member) public view returns (uint volume, uint level, address master) {\n        return (info[member].volume, info[member].level, info[member].master);\n    }\t\n\n    function transfer(address to, uint tokens) public returns (bool success) {\n\t\trequire(tokens >= minTransfer && tokens <= info[msg.sender].balance);\t\t\n        info[msg.sender].balance = info[msg.sender].balance.sub(tokens);\n        info[to].balance = info[to].balance.add(tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n    function() public payable {\n        process(msg.data.toAddr());\n    }\n\n    function process(address master) private {\n\t\trequire(msg.value >= minMining);\t\n        uint tokens = msg.value.mul(priceTokens);\n\t\ttotalTokens_ = totalTokens_.add(tokens);\n\t\tprocess2(tokens, msg.sender, master);\n    }\n\n    function process2(uint tokens, address memeber, address master) private {\n\t\t\n\t\tuint mine = tokens.mul(6).div(5);\n\t\ttotalMining_ = totalMining_.add(mine);\n\n\t\tif (techBuff_ > 0) {\n\t\ttokens = tokens.add(techBuff_);\n\t\ttechBuff_ = 0;\t\n\t\t}\n\n\t\tif (info[msg.sender].level == 0) {\n\t\t\ttotalMiners_ ++;\n\t\t\trecordAccts.push(msg.sender) -1;\n\n\t\t\tif (info[master].level > 0) {\n\t\t\t\tinfo[msg.sender].master = master;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tinfo[msg.sender].master = advance;\n\t\t\t} \n\t\t}\n\t\n\t\tif (info[memeber].level == 1) info[memeber].level = 0;\n\t\tinfo[memeber].volume = info[memeber].volume.add(mine);\n\t\tinfo[memeber].level = info[memeber].level.add(mine);\n\t\t\n\t\tuint publicTokens = tokens.mul(21).div(25);\n\t\tuint advanceTokens = tokens.mul(9).div(100);\n\t\tuint masterTokens = tokens.mul(7).div(100);\n\t\tuint checkTokens;\n\n\t\tfor (uint i = 0; i < totalMiners_; i++) {\n\t\t\tif (info[recordAccts[i]].level > 1) {\n\t\t\t\n\t\t\t\tcheckTokens = publicTokens.mul(info[recordAccts[i]].level).div(totalMining_);\n\t\t\t\t\n\t\t\t\tif (checkTokens < info[recordAccts[i]].volume) {\n\t\t\t\t\tinfo[recordAccts[i]].volume = info[recordAccts[i]].volume.sub(checkTokens);\n\t\t\t\t\tinfo[recordAccts[i]].balance = info[recordAccts[i]].balance.add(checkTokens);\n\t\t\t\t\temit Transfer(owner, recordAccts[i], checkTokens);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tinfo[recordAccts[i]].balance = info[recordAccts[i]].balance.add(info[recordAccts[i]].volume);\n\t\t\t\t\temit Transfer(owner, recordAccts[i], info[recordAccts[i]].volume);\n\t\t\t\t\ttechBuff_ = techBuff_.add(checkTokens.sub(info[recordAccts[i]].volume));\n\t\t\t\t\tinfo[recordAccts[i]].volume = 0;\n\t\t\t\t\tinfo[recordAccts[i]].level = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tinfo[advance].balance = info[advance].balance.add(advanceTokens);\n        emit Transfer(owner, advance, advanceTokens);\n\n        info[info[memeber].master].balance = info[info[memeber].master].balance.add(masterTokens);\n        emit Transfer(owner, info[memeber].master, masterTokens);\n\t\t\n\t}\n\n\tfunction remining(uint tokens) public returns (bool success) {\n\t\trequire(tokens >= minRemining && tokens <= info[msg.sender].balance);\n\t\tinfo[msg.sender].balance = info[msg.sender].balance.sub(tokens);\n\t\temit Transfer(msg.sender, owner, tokens);\n\t\tprocess2(tokens, msg.sender, 0x0);\n\t\treturn true;\n    }\n\n\tfunction withdraw(uint tokens) public returns (bool success) {\n\t\trequire(tokens >= minWithdraw && tokens <= info[msg.sender].balance);\n\t\tinfo[msg.sender].balance = info[msg.sender].balance.sub(tokens);\n\t\ttotalTokens_ = totalTokens_.sub(tokens);\n\t\temit Transfer(msg.sender, owner, tokens);\n\t\tmsg.sender.transfer(tokens.div(priceTokens));\n\t\treturn true;\n    }\t\n}\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers\n    */\n    function mul(uint a, uint b) internal pure returns (uint) {\n        if (a == 0) {\n            return 0;\n        }\n        uint c = a * b;\n        require(c / a == b, \"mul failed\");\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers\n    */\n    function sub(uint a, uint b) internal pure returns (uint) {\n        require(b <= a, \"sub failed\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers\n    */\n    function add(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        require(c >= a, \"add failed\");\n        return c;\n    }\n\t\n    /**\n    * @dev Divided two numbers\n    */\n    function div(uint a, uint b) internal pure returns (uint) {\n        uint c = a / b;\n        require(b > 0, \"div failed\");\n        return c;\n    }\t\n}\n\nlibrary ToAddress {\n\n    /*\n    * @dev Transforms bytes to address\n    */\n    function toAddr(bytes source) internal pure returns (address addr) {\n        assembly {\n            addr := mload(add(source, 0x14))\n        }\n        return addr;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a0319908116331782556001805490911673dd044b47a3f02f527b28e3b1c6877051f6e386941790556103e860035567016345785d8a0000600455678ac7230489e800006005819055600655670de0b6b3a764000060075560088190556009819055600a819055600b5561116f806100946000396000f3006080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461013f57806315a8ac0b146101c957806318160ddd146101f05780632bc0fe34146102055780632e1a7d4d1461024d578063313ce5671461027957806366f82cb9146102a45780636841fd27146102b95780636ad5aff0146102d157806370a08231146102e6578063764fe7d11461030757806395d89b411461031c578063a4f35b6514610331578063a9059cbb14610346578063b94c34511461036a578063cc3d27211461037f578063d2cd967314610394578063ea105ac7146103a9575b61013d6101386000368080601f016020809104026020016040519081016040528093929190818152602001838380828437506103da945050505050565b6103e1565b005b34801561014b57600080fd5b5061015461042f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018e578181015183820152602001610176565b50505050905090810190601f1680156101bb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101d557600080fd5b506101de610466565b60408051918252519081900360200190f35b3480156101fc57600080fd5b506101de61046c565b34801561021157600080fd5b50610226600160a060020a0360043516610472565b604080519384526020840192909252600160a060020a031682820152519081900360600190f35b34801561025957600080fd5b506102656004356104a3565b604080519115158252519081900360200190f35b34801561028557600080fd5b5061028e610595565b6040805160ff9092168252519081900360200190f35b3480156102b057600080fd5b506101de61059a565b3480156102c557600080fd5b506102656004356105a0565b3480156102dd57600080fd5b506101de610644565b3480156102f257600080fd5b506101de600160a060020a036004351661064a565b34801561031357600080fd5b506101de610665565b34801561032857600080fd5b5061015461066b565b34801561033d57600080fd5b506101de6106a2565b34801561035257600080fd5b50610265600160a060020a03600435166024356106a8565b34801561037657600080fd5b506101de610774565b34801561038b57600080fd5b506101de61077a565b3480156103a057600080fd5b506101de610780565b3480156103b557600080fd5b506103be61079e565b60408051600160a060020a039092168252519081900360200190f35b6014015190565b6004546000903410156103f357600080fd5b60035461040790349063ffffffff6107ad16565b60085490915061041d908263ffffffff61083116565b60085561042b81338461088e565b5050565b60408051808201909152600781527f435269704c6f7300000000000000000000000000000000000000000000000000602082015281565b60055481565b60085490565b600160a060020a039081166000908152600c6020526040902060018101546002820154600390920154909391921690565b600060065482101580156104c65750336000908152600c60205260409020548211155b15156104d157600080fd5b336000908152600c60205260409020546104f1908363ffffffff61105a16565b336000908152600c6020526040902055600854610514908363ffffffff61105a16565b600855600054604080518481529051600160a060020a03909216913391600080516020611124833981519152919081900360200190a360035433906108fc9061056490859063ffffffff6110ba16565b6040518115909202916000818181858888f1935050505015801561058c573d6000803e3d6000fd5b50600192915050565b601281565b60035481565b600060055482101580156105c35750336000908152600c60205260409020548211155b15156105ce57600080fd5b336000908152600c60205260409020546105ee908363ffffffff61105a16565b336000818152600c6020908152604080832094909455905483518681529351600160a060020a039091169360008051602061112483398151915292908290030190a361063c8233600061088e565b506001919050565b60045481565b600160a060020a03166000908152600c602052604090205490565b600a5490565b60408051808201909152600381527f43524c0000000000000000000000000000000000000000000000000000000000602082015281565b60075481565b600060075482101580156106cb5750336000908152600c60205260409020548211155b15156106d657600080fd5b336000908152600c60205260409020546106f6908363ffffffff61105a16565b336000908152600c602052604080822092909255600160a060020a03851681522054610728908363ffffffff61083116565b600160a060020a0384166000818152600c60209081526040918290209390935580518581529051919233926000805160206111248339815191529281900390910190a350600192915050565b600b5490565b60065481565b6000610799600b5460095461083190919063ffffffff16565b905090565b600154600160a060020a031681565b6000808315156107c0576000915061082a565b508282028284828115156107d057fe5b0414610826576040805160e560020a62461bcd02815260206004820152600a60248201527f6d756c206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd5b8091505b5092915050565b600082820183811015610826576040805160e560020a62461bcd02815260206004820152600a60248201527f616464206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd5b600080808080806108b760056108ab8b600663ffffffff6107ad16565b9063ffffffff6110ba16565b6009549096506108cd908763ffffffff61083116565b600955600b54600010156108f757600b546108ef908a9063ffffffff61083116565b6000600b5598505b336000908152600c60205260409020600201541515610a0557600a805460019081019091556002805491820181557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace909101805473ffffffffffffffffffffffffffffffffffffffff191633179055600160a060020a0388166000908152600c602052604081209091015411156109c557336000908152600c60205260409020600301805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038916179055610a05565b600154336000908152600c60205260409020600301805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039092169190911790555b600160a060020a0388166000908152600c602052604090206002015460011415610a4657600160a060020a0388166000908152600c60205260408120600201555b600160a060020a0388166000908152600c6020526040902060010154610a72908763ffffffff61083116565b600160a060020a0389166000908152600c60205260409020600181019190915560020154610aa6908763ffffffff61083116565b600160a060020a0389166000908152600c6020526040902060020155610ad860196108ab8b601563ffffffff6107ad16565b9450610af060646108ab8b600963ffffffff6107ad16565b9350610b0860646108ab8b600763ffffffff6107ad16565b9250600090505b600a54811015610f4c576001600c6000600284815481101515610b2e57fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020600201541115610f4457610bad6009546108ab600c6000600286815481101515610b7857fe5b6000918252602080832090910154600160a060020a03168352820192909252604001902060020154889063ffffffff6107ad16565b9150600c6000600283815481101515610bc257fe5b6000918252602080832090910154600160a060020a03168352820192909252604001902060010154821015610d4e57610c3c82600c6000600285815481101515610c0857fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020600101549063ffffffff61105a16565b600c6000600284815481101515610c4f57fe5b6000918252602080832090910154600160a060020a0316835282019290925260400181206001019190915560028054610cc2928592600c9286908110610c9157fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020549063ffffffff61083116565b600c6000600284815481101515610cd557fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020556002805482908110610d0857fe5b60009182526020808320909101549154604080518681529051600160a060020a0394851694929092169260008051602061112483398151915292918290030190a3610f44565b610da2600c6000600284815481101515610d6457fe5b6000918252602080832090910154600160a060020a03168352820192909252604001812060010154600280549192600c9290919086908110610c9157fe5b600c6000600284815481101515610db557fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020556002805482908110610de857fe5b6000918252602082200154815460028054600160a060020a0393841694939092169260008051602061112483398151915292600c929087908110610e2857fe5b6000918252602080832090910154600160a060020a03168352828101939093526040918201902060010154815190815290519081900390910190a3610ec0610eb1600c6000600285815481101515610e7c57fe5b6000918252602080832090910154600160a060020a03168352820192909252604001902060010154849063ffffffff61105a16565b600b549063ffffffff61083116565b600b819055506000600c6000600284815481101515610edb57fe5b6000918252602080832090910154600160a060020a03168352820192909252604001812060019081019290925560028054600c92919085908110610f1b57fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020600201555b600101610b0f565b600154600160a060020a03166000908152600c6020526040902054610f77908563ffffffff61083116565b60018054600160a060020a039081166000908152600c6020908152604080832095909555925490548451898152945191831694921692600080516020611124833981519152928290030190a3600160a060020a038089166000908152600c60205260408082206003015490921681522054610ff8908463ffffffff61083116565b600160a060020a03808a166000818152600c6020908152604080832060030180548616845281842096909655928252935490548251888152925191841694931692600080516020611124833981519152928290030190a3505050505050505050565b6000828211156110b4576040805160e560020a62461bcd02815260206004820152600a60248201527f737562206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd5b50900390565b60008082848115156110c857fe5b04905060008311610826576040805160e560020a62461bcd02815260206004820152600a60248201527f646976206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd00ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820622b6a0dee092afec14806fe7c1c385e07991c5e5f590ef834c0fb34683ebd520029"
}