{
  "address": "0x3bef6e4b3177d1c8c128013d0ae3540f331e43c3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Custodian",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-03\n*/\n\npragma solidity ^0.4.21;\n\n\ncontract Custodian {\n\n \n    struct Request {\n        bytes32 lockId;\n        bytes4 callbackSelector; // bytes4 and address can be packed into 1 word\n        address callbackAddress;\n        uint256 idx;\n        uint256 timestamp;\n        bool extended;\n    }\n\n\n    event Requested(\n        bytes32 _zamokId,\n        address _callbackAddress,\n        bytes4  _callbackSelector,\n        uint256 _nonce,\n        address _whitelistedAddress,\n        bytes32 _requestMsgHash,\n        uint256 _timeLockExpiry\n    );\n\n    event TimeLocked(\n        uint256 _timeLockExpiry,\n        bytes32 _requestMsgHash\n    );\n\n    event Completed(\n        bytes32 _zamokId,\n        bytes32 _requestMsgHash,\n        address _signer1,\n        address _signer2\n    );\n\n    event Failed(\n        bytes32 _zamokId,\n        bytes32 _requestMsgHash,\n        address _signer1,\n        address _signer2\n    );\n\n    event TimeLockExtended(\n        uint256 _timeLockExpiry,\n        bytes32 _requestMsgHash\n    );\n\n    uint256 public requestCount;\n\n    mapping (address => bool) public signerSet;\n\n    mapping (bytes32 => Request) public requestMap;\n\n    mapping (address => mapping (bytes4 => uint256)) public lastCompletedIdxs;\n\n    uint256 public defaultTimeLock;\n\n    uint256 public extendedTimeLock;\n\n    address public primary;\n\n    // CONSTRUCTOR\n    function Custodian(\n        address[] _signers,\n        uint256 _defaultTimeLock,\n        uint256 _extendedTimeLock,\n        address _primary\n    )\n        public\n    {\n        // check for at least two `_signers`\n        require(_signers.length >= 2);\n\n        // validate time lock params\n        require(_defaultTimeLock <= _extendedTimeLock);\n        defaultTimeLock = _defaultTimeLock;\n        extendedTimeLock = _extendedTimeLock;\n\n        primary = _primary;\n\n        // explicitly initialize `requestCount` to zero\n        requestCount = 0;\n        // turn the array into a set\n        for (uint i = 0; i < _signers.length; i++) {\n            // no zero addresses or duplicates\n            require(_signers[i] != address(0) && !signerSet[_signers[i]]);\n            signerSet[_signers[i]] = true;\n        }\n    }\n\n    // MODIFIERS\n    modifier onlyPrimary {\n        require(msg.sender == primary);\n        _;\n    }\n\n    // METHODS\n    function requestUnlock(\n        bytes32 _zamokId,\n        address _callbackAddress,\n        bytes4 _callbackSelector,\n        address _whitelistedAddress\n    )\n        public\n        payable\n        returns (bytes32 requestMsgHash)\n    {\n        require(msg.sender == primary || msg.value >= 1 ether);\n\n        // disallow using a zero value for the callback address\n        require(_callbackAddress != address(0));\n\n        uint256 requestIdx = ++requestCount;\n        // compute a nonce value\n        // - the blockhash prevents prediction of future nonces\n        // - the address of this contract prevents conflicts with co-operating contracts using this scheme\n        // - the counter prevents conflicts arising from multiple txs within the same block\n        uint256 nonce = uint256(keccak256(block.blockhash(block.number - 1), address(this), requestIdx));\n\n        requestMsgHash = keccak256(nonce, _whitelistedAddress, uint256(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\n\n        requestMap[requestMsgHash] = Request({\n            lockId: _zamokId,\n            callbackSelector: _callbackSelector,\n            callbackAddress: _callbackAddress,\n            idx: requestIdx,\n            timestamp: block.timestamp,\n            extended: false\n        });\n\n        // compute the expiry time\n        uint256 timeLockExpiry = block.timestamp;\n        if (msg.sender == primary) {\n            timeLockExpiry += defaultTimeLock;\n        } else {\n            timeLockExpiry += extendedTimeLock;\n\n            // any sender that is not the creator will get the extended time lock\n            requestMap[requestMsgHash].extended = true;\n        }\n\n        emit Requested(_zamokId, _callbackAddress, _callbackSelector, nonce, _whitelistedAddress, requestMsgHash, timeLockExpiry);\n    }\n\n    function completeUnlock(\n        bytes32 _requestMsgHash,\n        uint8 _recoveryByte1, bytes32 _ecdsaR1, bytes32 _ecdsaS1,\n        uint8 _recoveryByte2, bytes32 _ecdsaR2, bytes32 _ecdsaS2\n    )\n        public\n        returns (bool success)\n    {\n        Request storage request = requestMap[_requestMsgHash];\n\n        // copy storage to locals before `delete`\n        bytes32 lockId = request.lockId;\n        address callbackAddress = request.callbackAddress;\n        bytes4 callbackSelector = request.callbackSelector;\n\n        // failing case of the lookup if the callback address is zero\n        require(callbackAddress != address(0));\n\n        // reject confirms of earlier withdrawals buried under later confirmed withdrawals\n        require(request.idx > lastCompletedIdxs[callbackAddress][callbackSelector]);\n\n        address signer1 = ecrecover(_requestMsgHash, _recoveryByte1, _ecdsaR1, _ecdsaS1);\n        require(signerSet[signer1]);\n\n        address signer2 = ecrecover(_requestMsgHash, _recoveryByte2, _ecdsaR2, _ecdsaS2);\n        require(signerSet[signer2]);\n        require(signer1 != signer2);\n\n        if (request.extended && ((block.timestamp - request.timestamp) < extendedTimeLock)) {\n            emit TimeLocked(request.timestamp + extendedTimeLock, _requestMsgHash);\n            return false;\n        } else if ((block.timestamp - request.timestamp) < defaultTimeLock) {\n            emit TimeLocked(request.timestamp + defaultTimeLock, _requestMsgHash);\n            return false;\n        } else {\n            if (address(this).balance > 0) {\n                // reward sender with anti-spam payments\n                // ignore send success (assign to `success` but this will be overwritten)\n                success = msg.sender.send(address(this).balance);\n            }\n\n            // raise the waterline for the last completed unlocking\n            lastCompletedIdxs[callbackAddress][callbackSelector] = request.idx;\n            // and delete the request\n            delete requestMap[_requestMsgHash];\n\n            // invoke callback\n            success = callbackAddress.call(callbackSelector, lockId);\n\n            if (success) {\n                emit Completed(lockId, _requestMsgHash, signer1, signer2);\n            } else {\n                emit Failed(lockId, _requestMsgHash, signer1, signer2);\n            }\n        }\n    }\n\n    function deleteUncompletableRequest(bytes32 _requestMsgHash) public {\n        Request storage request = requestMap[_requestMsgHash];\n\n        uint256 idx = request.idx;\n\n        require(0 < idx && idx < lastCompletedIdxs[request.callbackAddress][request.callbackSelector]);\n\n        delete requestMap[_requestMsgHash];\n    }\n\n    function extendRequestTimeLock(bytes32 _requestMsgHash) public onlyPrimary {\n        Request storage request = requestMap[_requestMsgHash];\n\n        // reject ‘null’ results from the map lookup\n        // this can only be the case if an unknown `_requestMsgHash` is received\n        require(request.callbackAddress != address(0));\n\n        // `extendRequestTimeLock` must be idempotent\n        require(request.extended != true);\n\n        // set the `extended` flag; note that this is never unset\n        request.extended = true;\n\n        emit TimeLockExtended(request.timestamp + extendedTimeLock, _requestMsgHash);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"signerSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestMsgHash\",\"type\":\"bytes32\"},{\"name\":\"_recoveryByte1\",\"type\":\"uint8\"},{\"name\":\"_ecdsaR1\",\"type\":\"bytes32\"},{\"name\":\"_ecdsaS1\",\"type\":\"bytes32\"},{\"name\":\"_recoveryByte2\",\"type\":\"uint8\"},{\"name\":\"_ecdsaR2\",\"type\":\"bytes32\"},{\"name\":\"_ecdsaS2\",\"type\":\"bytes32\"}],\"name\":\"completeUnlock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestMsgHash\",\"type\":\"bytes32\"}],\"name\":\"extendRequestTimeLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_zamokId\",\"type\":\"bytes32\"},{\"name\":\"_callbackAddress\",\"type\":\"address\"},{\"name\":\"_callbackSelector\",\"type\":\"bytes4\"},{\"name\":\"_whitelistedAddress\",\"type\":\"address\"}],\"name\":\"requestUnlock\",\"outputs\":[{\"name\":\"requestMsgHash\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"primary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"extendedTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestMap\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"},{\"name\":\"callbackSelector\",\"type\":\"bytes4\"},{\"name\":\"callbackAddress\",\"type\":\"address\"},{\"name\":\"idx\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"extended\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"lastCompletedIdxs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestMsgHash\",\"type\":\"bytes32\"}],\"name\":\"deleteUncompletableRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_signers\",\"type\":\"address[]\"},{\"name\":\"_defaultTimeLock\",\"type\":\"uint256\"},{\"name\":\"_extendedTimeLock\",\"type\":\"uint256\"},{\"name\":\"_primary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_zamokId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_callbackAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_callbackSelector\",\"type\":\"bytes4\"},{\"indexed\":false,\"name\":\"_nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_whitelistedAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_requestMsgHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_timeLockExpiry\",\"type\":\"uint256\"}],\"name\":\"Requested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timeLockExpiry\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_requestMsgHash\",\"type\":\"bytes32\"}],\"name\":\"TimeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_zamokId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_requestMsgHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_signer1\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_signer2\",\"type\":\"address\"}],\"name\":\"Completed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_zamokId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_requestMsgHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_signer1\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_signer2\",\"type\":\"address\"}],\"name\":\"Failed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timeLockExpiry\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_requestMsgHash\",\"type\":\"bytes32\"}],\"name\":\"TimeLockExtended\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b6040516117a83803806117a8833981016040528080518201919060200180519060200190919080519060200190919080519060200190919050506000600285511015151561005c57600080fd5b82841115151561006b57600080fd5b836004819055508260058190555081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008081905550600090505b845181101561020a57600073ffffffffffffffffffffffffffffffffffffffff1685828151811015156100f557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1614158015610184575060016000868381518110151561013057fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b151561018f57600080fd5b600180600087848151811015156101a257fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806001019150506100c6565b505050505061158a8061021e6000396000f3006060604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631d972d41146100b45780633b3d5b88146101055780635badbe4c146101905780639c36e141146101b9578063a5ee79d3146101e2578063a706a2e214610209578063c6dbdf61146102a7578063c8ccaebc146102fc578063d4ecba4f14610325578063da4b6672146103f9578063ea21d12d1461046e575b600080fd5b34156100bf57600080fd5b6100eb600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610495565b604051808215151515815260200191505060405180910390f35b341561011057600080fd5b61017660048080356000191690602001909190803560ff16906020019091908035600019169060200190919080356000191690602001909190803560ff1690602001909190803560001916906020019091908035600019169060200190919050506104b5565b604051808215151515815260200191505060405180910390f35b341561019b57600080fd5b6101a3610c8b565b6040518082815260200191505060405180910390f35b34156101c457600080fd5b6101cc610c91565b6040518082815260200191505060405180910390f35b34156101ed57600080fd5b610207600480803560001916906020019091905050610c97565b005b61028960048080356000191690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e07565b60405180826000191660001916815260200191505060405180910390f35b34156102b257600080fd5b6102ba6112ce565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561030757600080fd5b61030f6112f4565b6040518082815260200191505060405180910390f35b341561033057600080fd5b61034a6004808035600019169060200190919050506112fa565b604051808760001916600019168152602001867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182151515158152602001965050505050505060405180910390f35b341561040457600080fd5b610458600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909190505061138c565b6040518082815260200191505060405180910390f35b341561047957600080fd5b6104936004808035600019169060200190919050506113b1565b005b60016020528060005260406000206000915054906101000a900460ff1681565b6000806000806000806000600260008f600019166000191681526020019081526020016000209550856000015494508560010160049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693508560010160009054906101000a90047c0100000000000000000000000000000000000000000000000000000000029250600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561057757600080fd5b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002054866002015411151561061757600080fd5b60018e8e8e8e604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af1151561068857600080fd5b5050602060405103519150600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156106eb57600080fd5b60018e8b8b8b604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af1151561075c57600080fd5b5050602060405103519050600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156107bf57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156107fa57600080fd5b8560040160009054906101000a900460ff16801561081f575060055486600301544203105b1561087c577f3799203e067f005a6c8f34114ec2a3c13028f7059ad4e15694497a8428eddfc06005548760030154018f6040518083815260200182600019166000191681526020019250505060405180910390a160009650610c7a565b6004548660030154420310156108e4577f3799203e067f005a6c8f34114ec2a3c13028f7059ad4e15694497a8428eddfc06004548760030154018f6040518083815260200182600019166000191681526020019250505060405180910390a160009650610c7a565b60003073ffffffffffffffffffffffffffffffffffffffff16311115610953573373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505096505b8560020154600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002081905550600260008f600019166000191681526020019081526020016000206000808201600090556001820160006101000a81549063ffffffff02191690556001820160046101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000905560038201600090556004820160006101000a81549060ff021916905550508373ffffffffffffffffffffffffffffffffffffffff16837c01000000000000000000000000000000000000000000000000000000009004866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600019166000191681526020019150506000604051808303816000875af19250505096508615610bc1577ffae6acb39f0117c0632c99c9482d4544ed4214f354d09c2956893a90860eb00a858f848460405180856000191660001916815260200184600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390a1610c79565b7f217d7e370a35a14c4eb12c5cc1c1505bf1ccd7eede103f3d249c0fabeabd7616858f848460405180856000191660001916815260200184600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390a15b5b505050505050979650505050505050565b60005481565b60045481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610cf557600080fd5b6002600083600019166000191681526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160010160049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610d7257600080fd5b600115158160040160009054906101000a900460ff16151514151515610d9757600080fd5b60018160040160006101000a81548160ff0219169083151502179055507f2ffc130c50080124976e8b843579a923e16e0bef4c5adfda2dde3e94c288ba2c600554826003015401836040518083815260200182600019166000191681526020019250505060405180910390a15050565b600080600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610e715750670de0b6b3a76400003410155b1515610e7c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614151515610eb857600080fd5b60008081546001019190508190559250600143034030846040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018281526020019350505050604051809103902060019004915081857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182815260200193505050506040518091039020935060c06040519081016040528089600019168152602001877bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018873ffffffffffffffffffffffffffffffffffffffff168152602001848152602001428152602001600015158152506002600086600019166000191681526020019081526020016000206000820151816000019060001916905560208201518160010160006101000a81548163ffffffff02191690837c01000000000000000000000000000000000000000000000000000000009004021790555060408201518160010160046101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600201556080820151816003015560a08201518160040160006101000a81548160ff021916908315150217905550905050429050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561117757600454810190506111b6565b60055481019050600160026000866000191660001916815260200190815260200160002060040160006101000a81548160ff0219169083151502179055505b7fdb7266ce4b13a685194a86c2cb74e34d93b88ba3a4966cf3efdf1abc8ad1cbec888888858989876040518088600019166000191681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001836000191660001916815260200182815260200197505050505050505060405180910390a1505050949350505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b60026020528060005260406000206000915090508060000154908060010160009054906101000a90047c010000000000000000000000000000000000000000000000000000000002908060010160049054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040160009054906101000a900460ff16905086565b6003602052816000526040600020602052806000526040600020600091509150505481565b6000806002600084600019166000191681526020019081526020016000209150816002015490508060001080156114c65750600360008360010160049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360010160009054906101000a90047c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205481105b15156114d157600080fd5b6002600084600019166000191681526020019081526020016000206000808201600090556001820160006101000a81549063ffffffff02191690556001820160046101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000905560038201600090556004820160006101000a81549060ff021916905550505050505600a165627a7a72305820a68aa95187230882ff436105b443c78c3fd1c28f3a9d9fded605c55e0880aa670029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000000093a80000000000000000000000000c0380379ca1ef6b1a0d6aadb5c12ea3d30329936000000000000000000000000000000000000000000000000000000000000000200000000000000000000000087ff2993dfe4b817830f5bbc7045ac3953195fb9000000000000000000000000c0380379ca1ef6b1a0d6aadb5c12ea3d30329936",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000000093a80000000000000000000000000c0380379ca1ef6b1a0d6aadb5c12ea3d30329936000000000000000000000000000000000000000000000000000000000000000200000000000000000000000087ff2993dfe4b817830f5bbc7045ac3953195fb9000000000000000000000000c0380379ca1ef6b1a0d6aadb5c12ea3d30329936"
}