{
  "address": "0x4f416e928a2cf93d90772c9d8e070a8b1f5b3f36",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SignatureChallenge",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-27\n*/\n\n/**\n * SignatureChallenge.sol\n\n * The links below will provide more information about the MtPelerin's Bridge protocol:\n * https://www.mtpelerin.com\n * https://github.com/MtPelerin/MtPelerin-protocol\n\n * The unflattened code is available through this github tag:\n * https://github.com/MtPelerin/MtPelerin-protocol/tree/etherscan-verify-batch-3\n\n * @notice Copyright © 2016 - 2019 Mt Pelerin Group SA - All Rights Reserved\n\n * @notice All matters regarding the intellectual property of this code \n * @notice or software are subject to Swiss Law without reference to its \n * @notice conflicts of law rules.\n\n * @notice License for each contract is available in the respective file\n * @notice or in the LICENSE.md file.\n * @notice https://github.com/MtPelerin/\n\n * @notice Code by OpenZeppelin is copyrighted and licensed on their repository:\n * @notice https://github.com/OpenZeppelin/openzeppelin-solidity\n */\n\npragma solidity ^0.4.24;\n\n// File: contracts/zeppelin/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts/SignatureChallenge.sol\n\n/**\n * @title SignatureChallenge\n * @dev SignatureChallenge accept anyone to send a transaction with a challenge in it.\n * Any Oracle which creates a challenge, may use it to assess that someone does really\n * own a given address.\n *\n * @notice Copyright © 2016 - 2019 Mt Pelerin Group SA - All Rights Reserved\n * @notice This content cannot be used, copied or reproduced in part or in whole\n * @notice without the express and written permission of Mt Pelerin Group SA.\n * @notice Written by *Mt Pelerin Group SA*, <[email protected]>\n * @notice All matters regarding the intellectual property of this code or software\n * @notice are subjects to Swiss Law without reference to its conflicts of law rules.\n *\n * Error messages\n * SC01: No ETH must be provided for the challenge\n * SC02: Target must not be null\n * SC03: Execution call must be successful\n * SC04: Challenges are not active\n * SC05: Challenge must not be longer than challengeBytes\n *\n * @author Cyril Lapinte - <[email protected]>\n */\ncontract SignatureChallenge is Ownable {\n\n  bool public active = true;\n  uint8 public challengeBytes = 2;\n\n  function () external payable {\n    require(msg.value == 0, \"SC01\");\n    acceptCode(msg.data);\n  }\n\n  /**\n   * @dev Update Challenge\n   */\n  function updateChallenge(\n    bool _active,\n    uint8 _challengeBytes,\n    bytes _testCode) public onlyOwner\n  {\n    if(!signChallengeWhenValid()) {\n      active = _active;\n      challengeBytes = _challengeBytes;\n      emit ChallengeUpdated(_active, _challengeBytes);\n\n      if (active) {\n        acceptCode(_testCode);\n      }\n    }\n  }\n\n  /**\n   * @dev execute\n   */\n  function execute(address _target, bytes _data)\n    public payable\n  {\n    if (!signChallengeWhenValid()) {\n      executeOwnerRestricted(_target, _data);\n    }\n  }\n\n  /**\n   * @dev Makes sure to accept the code even it matches a valid function signature.\n   */\n  function signChallengeWhenValid() private returns (bool)\n  {\n    // Prevent any loophole against the default function\n    // SignatureChallenge may be set inactive to bypass this feature\n    if (active && msg.data.length == challengeBytes) {\n      require(msg.value == 0, \"SC01\");\n      acceptCode(msg.data);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @dev execute restricted to owner\n   */\n  function executeOwnerRestricted(address _target, bytes _data)\n    private onlyOwner\n  {\n    require(_target != address(0), \"SC02\");\n    // solium-disable-next-line security/no-call-value\n    require(_target.call.value(msg.value)(_data), \"SC03\");\n  }\n\n  /**\n   * @dev accept code\n   */\n  function acceptCode(bytes _code) private {\n    require(active, \"SC04\");\n    require(_code.length == challengeBytes, \"SC05\");\n    emit ChallengeSigned(msg.sender, _code);\n  }\n\n  event ChallengeUpdated(bool active, uint8 length);\n  event ChallengeSigned(address indexed signer, bytes code);\n}",
  "bytecode": "608060405260008054337401000000000000000000000000000000000000000060a060020a60ff02199092169190911760a860020a60ff021916750200000000000000000000000000000000000000000017600160a060020a0319161781556108ac90819061006e90396000f3006080604052600436106100825763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302fb0c5e81146101165780631cff79cd1461013f578063715018a6146101995780637944662a146101ae5780638da5cb5b14610213578063e1fadc4b14610244578063f2fde38b1461026f575b34156100da576040805160e560020a62461bcd028152602060048083019190915260248201527f5343303100000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6101146000368080601f01602080910402602001604051908101604052809392919081815260200183838082843750610290945050505050565b005b34801561012257600080fd5b5061012b61040a565b604080519115158252519081900360200190f35b60408051602060046024803582810135601f8101859004850286018501909652858552610114958335600160a060020a031695369560449491939091019190819084018382808284375094975061041a9650505050505050565b3480156101a557600080fd5b50610114610436565b3480156101ba57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101149482351515946024803560ff16953695946064949201919081908401838280828437509497506104a29650505050505050565b34801561021f57600080fd5b50610228610589565b60408051600160a060020a039092168252519081900360200190f35b34801561025057600080fd5b50610259610598565b6040805160ff9092168252519081900360200190f35b34801561027b57600080fd5b50610114600160a060020a03600435166105ba565b60005460a060020a900460ff1615156102f5576040805160e560020a62461bcd028152602060048083019190915260248201527f5343303400000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000548151750100000000000000000000000000000000000000000090910460ff161461036e576040805160e560020a62461bcd028152602060048083019190915260248201527f5343303500000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b604080516020808252835181830152835133937f428f379c059659aeed80fe8f1aaa0e12d1bc519c8b1233a4ab6853a4696b49409386939092839283019185019080838360005b838110156103cd5781810151838201526020016103b5565b50505050905090810190601f1680156103fa5780820380516001836020036101000a031916815260200191505b509250505060405180910390a250565b60005460a060020a900460ff1681565b6104226105dd565b15156104325761043282826106ba565b5050565b600054600160a060020a0316331461044d57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031633146104b957600080fd5b6104c16105dd565b1515610584576000805460ff84167501000000000000000000000000000000000000000000810275ff0000000000000000000000000000000000000000001987151560a060020a810274ff00000000000000000000000000000000000000001990951694909417161790925560408051918252602082019290925281517f4dde0099e8b905911a150bc10734deab87cd89fc13729cb13a486b48e4bdf147929181900390910190a160005460a060020a900460ff16156105845761058481610290565b505050565b600054600160a060020a031681565b6000547501000000000000000000000000000000000000000000900460ff1681565b600054600160a060020a031633146105d157600080fd5b6105da81610803565b50565b6000805460a060020a900460ff16801561061457506000547501000000000000000000000000000000000000000000900460ff1636145b156106b3573415610671576040805160e560020a62461bcd028152602060048083019190915260248201527f5343303100000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6106ab6000368080601f01602080910402602001604051908101604052809392919081815260200183838082843750610290945050505050565b5060016106b7565b5060005b90565b600054600160a060020a031633146106d157600080fd5b600160a060020a0382161515610733576040805160e560020a62461bcd028152602060048083019190915260248201527f5343303200000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b81600160a060020a0316348260405180828051906020019080838360005b83811015610769578181015183820152602001610751565b50505050905090810190601f1680156107965780820380516001836020036101000a031916815260200191505b5091505060006040518083038185875af1925050501515610432576040805160e560020a62461bcd028152602060048083019190915260248201527f5343303300000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a038116151561081857600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058208b3fcc3f9cfe74a220cf6d8b0a4a39d1c6dda796ab4cefae741e7a4db177f0f10029"
}