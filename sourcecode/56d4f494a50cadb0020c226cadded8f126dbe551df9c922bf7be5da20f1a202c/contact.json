{
  "address": "0xd0a6e6c54dbc68db5db3a091b171a77407ff7ccf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "EOS: Token Sale",
  "contractName": "EOSSale",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-06-26\n*/\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n\tuint\t \t  wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\ncontract ERC20 {\n    function totalSupply() constant returns (uint supply);\n    function balanceOf( address who ) constant returns (uint value);\n    function allowance( address owner, address spender ) constant returns (uint _allowance);\n\n    function transfer( address to, uint value) returns (bool ok);\n    function transferFrom( address from, address to, uint value) returns (bool ok);\n    function approve( address spender, uint value ) returns (bool ok);\n\n    event Transfer( address indexed from, address indexed to, uint value);\n    event Approval( address indexed owner, address indexed spender, uint value);\n}\n\ncontract DSAuthority {\n    function canCall(\n        address src, address dst, bytes4 sig\n    ) constant returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    function DSAuth() {\n        owner = msg.sender;\n        LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        auth\n    {\n        owner = owner_;\n        LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        auth\n    {\n        authority = authority_;\n        LogSetAuthority(authority);\n    }\n\n    modifier auth {\n        assert(isAuthorized(msg.sender, msg.sig));\n        _;\n    }\n\n    modifier authorized(bytes4 sig) {\n        assert(isAuthorized(msg.sender, sig));\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, this, sig);\n        }\n    }\n\n    function assert(bool x) internal {\n        if (!x) throw;\n    }\n}\n\ncontract DSExec {\n    function tryExec( address target, bytes calldata, uint value)\n             internal\n             returns (bool call_ret)\n    {\n        return target.call.value(value)(calldata);\n    }\n    function exec( address target, bytes calldata, uint value)\n             internal\n    {\n        if(!tryExec(target, calldata, value)) {\n            throw;\n        }\n    }\n\n    // Convenience aliases\n    function exec( address t, bytes c )\n        internal\n    {\n        exec(t, c, 0);\n    }\n    function exec( address t, uint256 v )\n        internal\n    {\n        bytes memory c; exec(t, c, v);\n    }\n    function tryExec( address t, bytes c )\n        internal\n        returns (bool)\n    {\n        return tryExec(t, c, 0);\n    }\n    function tryExec( address t, uint256 v )\n        internal\n        returns (bool)\n    {\n        bytes memory c; return tryExec(t, c, v);\n    }\n}\n\ncontract DSMath {\n    \n    /*\n    standard uint256 functions\n     */\n\n    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        assert((z = x + y) >= x);\n    }\n\n    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        assert((z = x - y) <= x);\n    }\n\n    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        assert((z = x * y) >= x);\n    }\n\n    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        z = x / y;\n    }\n\n    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        return x <= y ? x : y;\n    }\n    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        return x >= y ? x : y;\n    }\n\n    /*\n    uint128 functions (h is for half)\n     */\n\n\n    function hadd(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        assert((z = x + y) >= x);\n    }\n\n    function hsub(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        assert((z = x - y) <= x);\n    }\n\n    function hmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        assert((z = x * y) >= x);\n    }\n\n    function hdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        z = x / y;\n    }\n\n    function hmin(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        return x <= y ? x : y;\n    }\n    function hmax(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        return x >= y ? x : y;\n    }\n\n\n    /*\n    int256 functions\n     */\n\n    function imin(int256 x, int256 y) constant internal returns (int256 z) {\n        return x <= y ? x : y;\n    }\n    function imax(int256 x, int256 y) constant internal returns (int256 z) {\n        return x >= y ? x : y;\n    }\n\n    /*\n    WAD math\n     */\n\n    uint128 constant WAD = 10 ** 18;\n\n    function wadd(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hadd(x, y);\n    }\n\n    function wsub(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hsub(x, y);\n    }\n\n    function wmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        z = cast((uint256(x) * y + WAD / 2) / WAD);\n    }\n\n    function wdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        z = cast((uint256(x) * WAD + y / 2) / y);\n    }\n\n    function wmin(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hmin(x, y);\n    }\n    function wmax(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hmax(x, y);\n    }\n\n    /*\n    RAY math\n     */\n\n    uint128 constant RAY = 10 ** 27;\n\n    function radd(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hadd(x, y);\n    }\n\n    function rsub(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hsub(x, y);\n    }\n\n    function rmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        z = cast((uint256(x) * y + RAY / 2) / RAY);\n    }\n\n    function rdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        z = cast((uint256(x) * RAY + y / 2) / y);\n    }\n\n    function rpow(uint128 x, uint64 n) constant internal returns (uint128 z) {\n        // This famous algorithm is called \"exponentiation by squaring\"\n        // and calculates x^n with x as fixed-point and n as regular unsigned.\n        //\n        // It's O(log n), instead of O(n) for naive repeated multiplication.\n        //\n        // These facts are why it works:\n        //\n        //  If n is even, then x^n = (x^2)^(n/2).\n        //  If n is odd,  then x^n = x * x^(n-1),\n        //   and applying the equation for even x gives\n        //    x^n = x * (x^2)^((n-1) / 2).\n        //\n        //  Also, EVM division is flooring and\n        //    floor[(n-1) / 2] = floor[n / 2].\n\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n\n    function rmin(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hmin(x, y);\n    }\n    function rmax(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hmax(x, y);\n    }\n\n    function cast(uint256 x) constant internal returns (uint128 z) {\n        assert((z = uint128(x)) == x);\n    }\n\n}\n\ncontract DSStop is DSAuth, DSNote {\n\n    bool public stopped;\n\n    modifier stoppable {\n        assert (!stopped);\n        _;\n    }\n    function stop() auth note {\n        stopped = true;\n    }\n    function start() auth note {\n        stopped = false;\n    }\n\n}\n\ncontract DSTokenBase is ERC20, DSMath {\n    uint256                                            _supply;\n    mapping (address => uint256)                       _balances;\n    mapping (address => mapping (address => uint256))  _approvals;\n    \n    function DSTokenBase(uint256 supply) {\n        _balances[msg.sender] = supply;\n        _supply = supply;\n    }\n    \n    function totalSupply() constant returns (uint256) {\n        return _supply;\n    }\n    function balanceOf(address src) constant returns (uint256) {\n        return _balances[src];\n    }\n    function allowance(address src, address guy) constant returns (uint256) {\n        return _approvals[src][guy];\n    }\n    \n    function transfer(address dst, uint wad) returns (bool) {\n        assert(_balances[msg.sender] >= wad);\n        \n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n        _balances[dst] = add(_balances[dst], wad);\n        \n        Transfer(msg.sender, dst, wad);\n        \n        return true;\n    }\n    \n    function transferFrom(address src, address dst, uint wad) returns (bool) {\n        assert(_balances[src] >= wad);\n        assert(_approvals[src][msg.sender] >= wad);\n        \n        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n        _balances[src] = sub(_balances[src], wad);\n        _balances[dst] = add(_balances[dst], wad);\n        \n        Transfer(src, dst, wad);\n        \n        return true;\n    }\n    \n    function approve(address guy, uint256 wad) returns (bool) {\n        _approvals[msg.sender][guy] = wad;\n        \n        Approval(msg.sender, guy, wad);\n        \n        return true;\n    }\n\n}\n\ncontract DSToken is DSTokenBase(0), DSStop {\n\n    bytes32  public  symbol;\n    uint256  public  decimals = 18; // standard token precision. override to customize\n\n    function DSToken(bytes32 symbol_) {\n        symbol = symbol_;\n    }\n\n    function transfer(address dst, uint wad) stoppable note returns (bool) {\n        return super.transfer(dst, wad);\n    }\n    function transferFrom(\n        address src, address dst, uint wad\n    ) stoppable note returns (bool) {\n        return super.transferFrom(src, dst, wad);\n    }\n    function approve(address guy, uint wad) stoppable note returns (bool) {\n        return super.approve(guy, wad);\n    }\n\n    function push(address dst, uint128 wad) returns (bool) {\n        return transfer(dst, wad);\n    }\n    function pull(address src, uint128 wad) returns (bool) {\n        return transferFrom(src, msg.sender, wad);\n    }\n\n    function mint(uint128 wad) auth stoppable note {\n        _balances[msg.sender] = add(_balances[msg.sender], wad);\n        _supply = add(_supply, wad);\n    }\n    function burn(uint128 wad) auth stoppable note {\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n        _supply = sub(_supply, wad);\n    }\n\n    // Optional token name\n\n    bytes32   public  name = \"\";\n    \n    function setName(bytes32 name_) auth {\n        name = name_;\n    }\n\n}\n\ncontract EOSSale is DSAuth, DSExec, DSMath {\n    DSToken  public  EOS;                  // The EOS token itself\n    uint128  public  totalSupply;          // Total EOS amount created\n    uint128  public  foundersAllocation;   // Amount given to founders\n    string   public  foundersKey;          // Public key of founders\n\n    uint     public  openTime;             // Time of window 0 opening\n    uint     public  createFirstDay;       // Tokens sold in window 0\n\n    uint     public  startTime;            // Time of window 1 opening\n    uint     public  numberOfDays;         // Number of windows after 0\n    uint     public  createPerDay;         // Tokens sold in each window\n\n    mapping (uint => uint)                       public  dailyTotals;\n    mapping (uint => mapping (address => uint))  public  userBuys;\n    mapping (uint => mapping (address => bool))  public  claimed;\n    mapping (address => string)                  public  keys;\n\n    event LogBuy      (uint window, address user, uint amount);\n    event LogClaim    (uint window, address user, uint amount);\n    event LogRegister (address user, string key);\n    event LogCollect  (uint amount);\n    event LogFreeze   ();\n\n    function EOSSale(\n        uint     _numberOfDays,\n        uint128  _totalSupply,\n        uint     _openTime,\n        uint     _startTime,\n        uint128  _foundersAllocation,\n        string   _foundersKey\n    ) {\n        numberOfDays       = _numberOfDays;\n        totalSupply        = _totalSupply;\n        openTime           = _openTime;\n        startTime          = _startTime;\n        foundersAllocation = _foundersAllocation;\n        foundersKey        = _foundersKey;\n\n        createFirstDay = wmul(totalSupply, 0.2 ether);\n        createPerDay = div(\n            sub(sub(totalSupply, foundersAllocation), createFirstDay),\n            numberOfDays\n        );\n\n        assert(numberOfDays > 0);\n        assert(totalSupply > foundersAllocation);\n        assert(openTime < startTime);\n    }\n\n    function initialize(DSToken eos) auth {\n        assert(address(EOS) == address(0));\n        assert(eos.owner() == address(this));\n        assert(eos.authority() == DSAuthority(0));\n        assert(eos.totalSupply() == 0);\n\n        EOS = eos;\n        EOS.mint(totalSupply);\n\n        // Address 0xb1 is provably non-transferrable\n        EOS.push(0xb1, foundersAllocation);\n        keys[0xb1] = foundersKey;\n        LogRegister(0xb1, foundersKey);\n    }\n\n    function time() constant returns (uint) {\n        return block.timestamp;\n    }\n\n    function today() constant returns (uint) {\n        return dayFor(time());\n    }\n\n    // Each window is 23 hours long so that end-of-window rotates\n    // around the clock for all timezones.\n    function dayFor(uint timestamp) constant returns (uint) {\n        return timestamp < startTime\n            ? 0\n            : sub(timestamp, startTime) / 23 hours + 1;\n    }\n\n    function createOnDay(uint day) constant returns (uint) {\n        return day == 0 ? createFirstDay : createPerDay;\n    }\n\n    // This method provides the buyer some protections regarding which\n    // day the buy order is submitted and the maximum price prior to\n    // applying this payment that will be allowed.\n    function buyWithLimit(uint day, uint limit) payable {\n        assert(time() >= openTime && today() <= numberOfDays);\n        assert(msg.value >= 0.01 ether);\n\n        assert(day >= today());\n        assert(day <= numberOfDays);\n\n        userBuys[day][msg.sender] += msg.value;\n        dailyTotals[day] += msg.value;\n\n        if (limit != 0) {\n            assert(dailyTotals[day] <= limit);\n        }\n\n        LogBuy(day, msg.sender, msg.value);\n    }\n\n    function buy() payable {\n       buyWithLimit(today(), 0);\n    }\n\n    function () payable {\n       buy();\n    }\n\n    function claim(uint day) {\n        assert(today() > day);\n\n        if (claimed[day][msg.sender] || dailyTotals[day] == 0) {\n            return;\n        }\n\n        // This will have small rounding errors, but the token is\n        // going to be truncated to 8 decimal places or less anyway\n        // when launched on its own chain.\n\n        var dailyTotal = cast(dailyTotals[day]);\n        var userTotal  = cast(userBuys[day][msg.sender]);\n        var price      = wdiv(cast(createOnDay(day)), dailyTotal);\n        var reward     = wmul(price, userTotal);\n\n        claimed[day][msg.sender] = true;\n        EOS.push(msg.sender, reward);\n\n        LogClaim(day, msg.sender, reward);\n    }\n\n    function claimAll() {\n        for (uint i = 0; i < today(); i++) {\n            claim(i);\n        }\n    }\n\n    // Value should be a public key.  Read full key import policy.\n    // Manually registering requires a base58\n    // encoded using the STEEM, BTS, or EOS public key format.\n    function register(string key) {\n        assert(today() <=  numberOfDays + 1);\n        assert(bytes(key).length <= 64);\n\n        keys[msg.sender] = key;\n\n        LogRegister(msg.sender, key);\n    }\n\n    // Crowdsale owners can collect ETH any number of times\n    function collect() auth {\n        assert(today() > 0); // Prevent recycling during window 0\n        exec(msg.sender, this.balance);\n        LogCollect(this.balance);\n    }\n\n    // Anyone can freeze the token 1 day after the sale ends\n    function freeze() {\n        assert(today() > numberOfDays + 1);\n        EOS.stop();\n        LogFreeze();\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersKey\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBuys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"createOnDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"keys\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dailyTotals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EOS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"today\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eos\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createFirstDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"dayFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"day\",\"type\":\"uint256\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"buyWithLimit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_numberOfDays\",\"type\":\"uint256\"},{\"name\":\"_totalSupply\",\"type\":\"uint128\"},{\"name\":\"_openTime\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_foundersAllocation\",\"type\":\"uint128\"},{\"name\":\"_foundersKey\",\"type\":\"string\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"window\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"window\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"key\",\"type\":\"string\"}],\"name\":\"LogRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogCollect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]",
  "bytecode": "606060405234156200000d57fe5b6040516200268238038062002682833981016040528080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919080518201919050505b5b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405180905060405180910390a25b8560088190555084600360006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550836005819055508260078190555081600360106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055508060049080519060200190620001819291906200049e565b50620001c8600360009054906101000a90046fffffffffffffffffffffffffffffffff166702c68af0bb1400006200037f6401000000000262001e13176401000000009004565b6fffffffffffffffffffffffffffffffff16600681905550620002a26200028562000268600360009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16600360109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16620004306401000000000262001eac176401000000009004565b600654620004306401000000000262001eac176401000000009004565b6008546200044b64010000000002620020e2176401000000009004565b600981905550620002cc600060085411620004636401000000000262001d49176401000000009004565b6200034d600360109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16600360009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1611620004636401000000000262001d49176401000000009004565b6200037260075460055410620004636401000000000262001d49176401000000009004565b5b5050505050506200054d565b600062000427670de0b6b3a76400006fffffffffffffffffffffffffffffffff166002670de0b6b3a76400006fffffffffffffffffffffffffffffffff16811515620003c757fe5b046fffffffffffffffffffffffffffffffff16846fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff1602018115156200040c57fe5b04620004756401000000000262001d5a176401000000009004565b90505b92915050565b600082828403915081111515156200044457fe5b5b92915050565b600081838115156200045957fe5b0490505b92915050565b801515620004715760006000fd5b5b50565b600081829150816fffffffffffffffffffffffffffffffff161415156200049857fe5b5b919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620004e157805160ff191683800117855562000512565b8280016001018555821562000512579182015b8281111562000511578251825591602001919060010190620004f4565b5b50905062000521919062000525565b5090565b6200054a91905b80821115620005465760008160009055506001016200052c565b5090565b90565b612125806200055d6000396000f30060606040523615610173576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063120aa8771461018457806313af4035146101db57806316ada5471461021157806318160ddd146102375780631db580fa14610281578063379607f5146102cb578063389ae4d1146102eb5780633904e1bf146103845780635ca81139146103d757806362a5af3b1461040b578063670d14b21461041d57806378e97925146104da5780637a9e5e4b146105005780637d34f5ac146105365780638da5cb5b1461056a578063a6f2ae3a146105bc578063b4256888146105c6578063b6834572146105ec578063b74e452b1461063e578063bf7e214f14610664578063c4d66de8146106b6578063cfae52e1146106ec578063d1058e5914610712578063d90c175914610724578063e0cb3aa014610758578063e522538114610779578063e9f6bd0b1461078b578063f2c298be146107b1578063f96512cc1461080b575b6101825b61017f610831565b5b565b005b341561018c57fe5b6101c1600480803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610846565b604051808215151515815260200191505060405180910390f35b34156101e357fe5b61020f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610875565b005b341561021957fe5b610221610959565b6040518082815260200191505060405180910390f35b341561023f57fe5b610247610962565b60405180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561028957fe5b610291610984565b60405180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102d357fe5b6102e960048080359060200190919050506109a6565b005b34156102f357fe5b6102fb610ce4565b604051808060200182810382528381815181526020019150805190602001908083836000831461034a575b80518252602083111561034a57602082019150602081019050602083039250610326565b505050905090810190601f1680156103765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561038c57fe5b6103c1600480803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d82565b6040518082815260200191505060405180910390f35b34156103df57fe5b6103f56004808035906020019091905050610da7565b6040518082815260200191505060405180910390f35b341561041357fe5b61041b610dc5565b005b341561042557fe5b610451600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ea4565b60405180806020018281038252838181518152602001915080519060200190808383600083146104a0575b8051825260208311156104a05760208201915060208101905060208303925061047c565b505050905090810190601f1680156104cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104e257fe5b6104ea610f54565b6040518082815260200191505060405180910390f35b341561050857fe5b610534600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f5a565b005b341561053e57fe5b610554600480803590602001909190505061103e565b6040518082815260200191505060405180910390f35b341561057257fe5b61057a611056565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105c4610831565b005b34156105ce57fe5b6105d661107c565b6040518082815260200191505060405180910390f35b34156105f457fe5b6105fc611082565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561064657fe5b61064e6110a8565b6040518082815260200191505060405180910390f35b341561066c57fe5b6106746110c0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106be57fe5b6106ea600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506110e6565b005b34156106f457fe5b6106fc6116d5565b6040518082815260200191505060405180910390f35b341561071a57fe5b6107226116db565b005b341561072c57fe5b610742600480803590602001909190505061170c565b6040518082815260200191505060405180910390f35b6107776004808035906020019091908035906020019091905050611744565b005b341561078157fe5b6107896118c3565b005b341561079357fe5b61079b61197f565b6040518082815260200191505060405180910390f35b34156107b957fe5b610809600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611985565b005b341561081357fe5b61081b611ae1565b6040518082815260200191505060405180910390f35b61084361083c6110a8565b6000611744565b5b565b600c6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6108ab6108a6336000357fffffffff0000000000000000000000000000000000000000000000000000000016611ae7565b611d49565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405180905060405180910390a25b5b50565b60004290505b90565b600360009054906101000a90046fffffffffffffffffffffffffffffffff1681565b600360109054906101000a90046fffffffffffffffffffffffffffffffff1681565b60006000600060006109c0856109ba6110a8565b11611d49565b600c600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680610a3c57506000600a600087815260200190815260200160002054145b15610a4657610cdd565b610a62600a600087815260200190815260200160002054611d5a565b9350610abd600b600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d5a565b9250610ad9610ad3610ace87610da7565b611d5a565b85611d82565b9150610ae58284611e13565b90506001600c600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633452f51d33836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1515610c3e57fe5b6102c65a03f11515610c4c57fe5b50505060405180519050507f51223fdc0a25891366fb358b4af9fe3c381b1566e287c61a29d01c8a173fe4f4853383604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001826fffffffffffffffffffffffffffffffff168152602001935050505060405180910390a15b5050505050565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d7a5780601f10610d4f57610100808354040283529160200191610d7a565b820191906000526020600020905b815481529060010190602001808311610d5d57829003601f168201915b505050505081565b600b602052816000526040600020602052806000526040600020600091509150505481565b600060008214610db957600954610dbd565b6006545b90505b919050565b610ddc600160085401610dd66110a8565b11611d49565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166307da68f56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050600060405180830381600087803b1515610e6157fe5b6102c65a03f11515610e6f57fe5b5050507fad487f3c412409f5b36d6b5ae6f3bb9c34e15234b3e9f101bb6ef0d584593c6160405180905060405180910390a15b565b600d6020528060005260406000206000915090508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f4c5780601f10610f2157610100808354040283529160200191610f4c565b820191906000526020600020905b815481529060010190602001808311610f2f57829003601f168201915b505050505081565b60075481565b610f90610f8b336000357fffffffff0000000000000000000000000000000000000000000000000000000016611ae7565b611d49565b80600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405180905060405180910390a25b5b50565b600a6020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006110ba6110b5610959565b61170c565b90505b90565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61111c611117336000357fffffffff0000000000000000000000000000000000000000000000000000000016611ae7565b611d49565b611176600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611d49565b6112303073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b15156111fc57fe5b6102c65a03f1151561120a57fe5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff1614611d49565b6112eb600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1663bf7e214f6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b15156112b757fe5b6102c65a03f115156112c557fe5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff1614611d49565b61137a60008273ffffffffffffffffffffffffffffffffffffffff166318160ddd6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b151561135c57fe5b6102c65a03f1151561136a57fe5b5050506040518051905014611d49565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166369d3e20e600360009054906101000a90046fffffffffffffffffffffffffffffffff166040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b151561148a57fe5b6102c65a03f1151561149857fe5b505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633452f51d60b1600360109054906101000a90046fffffffffffffffffffffffffffffffff166000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff168152602001826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b151561159257fe5b6102c65a03f115156115a057fe5b50505060405180519050506004600d600060b173ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090805460018160011615610100020316600290046115f6929190611fa2565b507fd80364ba2cbb1e827ab8adac9651cdfc27fb7b61c0a95663cb80b82d7636ad2260b16004604051808373ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252838181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156116c15780601f10611696576101008083540402835291602001916116c1565b820191906000526020600020905b8154815290600101906020018083116116a457829003601f168201915b5050935050505060405180910390a15b5b50565b60065481565b6000600090505b6116ea6110a8565b811015611708576116fa816109a6565b5b80806001019150506116e2565b5b50565b600060075482106117395760016201437061172984600754611eac565b81151561173257fe5b040161173c565b60005b90505b919050565b61176e600554611752610959565b1015801561176957506008546117666110a8565b11155b611d49565b611781662386f26fc10000341015611d49565b61179461178c6110a8565b831015611d49565b6117a2600854831115611d49565b34600b600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555034600a60008481526020019081526020016000206000828254019250508190555060008114151561184b5761184a81600a6000858152602001908152602001600020541115611d49565b5b7fe054057d0479c6218d6ec87be73f88230a7e4e1f064cee6e7504e2c4cd9d6150823334604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15b5050565b6118f96118f4336000357fffffffff0000000000000000000000000000000000000000000000000000000016611ae7565b611d49565b61190c60006119066110a8565b11611d49565b61192d333073ffffffffffffffffffffffffffffffffffffffff1631611ec6565b7f4ceba015d961d93f1d6825703b730a8ba05619c005dfd8073aee773dc6725fbb3073ffffffffffffffffffffffffffffffffffffffff16316040518082815260200191505060405180910390a15b5b565b60085481565b61199d6001600854016119966110a8565b1115611d49565b6119ab604082511115611d49565b80600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090805190602001906119fe929190612029565b507fd80364ba2cbb1e827ab8adac9651cdfc27fb7b61c0a95663cb80b82d7636ad223382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360008314611aa3575b805182526020831115611aa357602082019150602081019050602083039250611a7f565b505050905090810190601f168015611acf5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15b50565b60095481565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611b265760019050611d43565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611b855760019050611d43565b600073ffffffffffffffffffffffffffffffffffffffff16600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611be55760009050611d43565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b70096138430856000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019350505050602060405180830381600087803b1515611d2157fe5b6102c65a03f11515611d2f57fe5b505050604051805190509050611d43565b5b5b5b92915050565b801515611d565760006000fd5b5b50565b600081829150816fffffffffffffffffffffffffffffffff16141515611d7c57fe5b5b919050565b6000611e0a826fffffffffffffffffffffffffffffffff166002846fffffffffffffffffffffffffffffffff16811515611db857fe5b046fffffffffffffffffffffffffffffffff16670de0b6b3a76400006fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff160201811515611e0457fe5b04611d5a565b90505b92915050565b6000611ea3670de0b6b3a76400006fffffffffffffffffffffffffffffffff166002670de0b6b3a76400006fffffffffffffffffffffffffffffffff16811515611e5957fe5b046fffffffffffffffffffffffffffffffff16846fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff160201811515611e9d57fe5b04611d5a565b90505b92915050565b60008282840391508111151515611ebf57fe5b5b92915050565b611ece6120a9565b611ed9838284611edf565b5b505050565b611eea838383611efc565b1515611ef65760006000fd5b5b505050565b60008373ffffffffffffffffffffffffffffffffffffffff16828460405180828051906020019080838360008314611f53575b805182526020831115611f5357602082019150602081019050602083039250611f2f565b505050905090810190601f168015611f7f5780820380516001836020036101000a031916815260200191505b5091505060006040518083038185876187965a03f19250505090505b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611fdb5780548555612018565b8280016001018555821561201857600052602060002091601f016020900482015b82811115612017578254825591600101919060010190611ffc565b5b50905061202591906120bd565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061206a57805160ff1916838001178555612098565b82800160010185558215612098579182015b8281111561209757825182559160200191906001019061207c565b5b5090506120a591906120bd565b5090565b602060405190810160405280600081525090565b6120df91905b808211156120db5760008160009055506001016120c3565b5090565b90565b600081838115156120ef57fe5b0490505b929150505600a165627a7a723058201fe2e7b57da9c285767eb5350b4a1706caa7601d6a539191fae0ab14fce0141e0029000000000000000000000000000000000000000000000000000000000000015e0000000000000000000000000000000000000000033b2e3c9fd0803ce800000000000000000000000000000000000000000000000000000000000000595105500000000000000000000000000000000000000000000000000000000059579cd000000000000000000000000000000000000000000052b7d2dcc80cd2e400000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000006a3435346635333335363337353661346534383437346435393561356133323734363734323739373934653435353536313666353034633436363835613536366434373538363235613633333934323463346136353531366234623561343637313437353934353639353100000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000015e0000000000000000000000000000000000000000033b2e3c9fd0803ce800000000000000000000000000000000000000000000000000000000000000595105500000000000000000000000000000000000000000000000000000000059579cd000000000000000000000000000000000000000000052b7d2dcc80cd2e400000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000006a3435346635333335363337353661346534383437346435393561356133323734363734323739373934653435353536313666353034633436363835613536366434373538363235613633333934323463346136353531366234623561343637313437353934353639353100000000000000000000000000000000000000000000"
}