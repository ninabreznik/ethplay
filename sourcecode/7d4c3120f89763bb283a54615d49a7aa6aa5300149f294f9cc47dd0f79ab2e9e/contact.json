{
  "address": "0x7602ecd2f8ec584c23fc882f1ab572df828445a9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MarketplaceV2",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-25\n*/\n\npragma solidity ^0.4.19;\n\ncontract DigixConstants {\n  /// general constants\n  uint256 constant SECONDS_IN_A_DAY = 24 * 60 * 60;\n\n  /// asset events\n  uint256 constant ASSET_EVENT_CREATED_VENDOR_ORDER = 1;\n  uint256 constant ASSET_EVENT_CREATED_TRANSFER_ORDER = 2;\n  uint256 constant ASSET_EVENT_CREATED_REPLACEMENT_ORDER = 3;\n  uint256 constant ASSET_EVENT_FULFILLED_VENDOR_ORDER = 4;\n  uint256 constant ASSET_EVENT_FULFILLED_TRANSFER_ORDER = 5;\n  uint256 constant ASSET_EVENT_FULFILLED_REPLACEMENT_ORDER = 6;\n  uint256 constant ASSET_EVENT_MINTED = 7;\n  uint256 constant ASSET_EVENT_MINTED_REPLACEMENT = 8;\n  uint256 constant ASSET_EVENT_RECASTED = 9;\n  uint256 constant ASSET_EVENT_REDEEMED = 10;\n  uint256 constant ASSET_EVENT_FAILED_AUDIT = 11;\n  uint256 constant ASSET_EVENT_ADMIN_FAILED = 12;\n  uint256 constant ASSET_EVENT_REMINTED = 13;\n\n  /// roles\n  uint256 constant ROLE_ZERO_ANYONE = 0;\n  uint256 constant ROLE_ROOT = 1;\n  uint256 constant ROLE_VENDOR = 2;\n  uint256 constant ROLE_XFERAUTH = 3;\n  uint256 constant ROLE_POPADMIN = 4;\n  uint256 constant ROLE_CUSTODIAN = 5;\n  uint256 constant ROLE_AUDITOR = 6;\n  uint256 constant ROLE_MARKETPLACE_ADMIN = 7;\n  uint256 constant ROLE_KYC_ADMIN = 8;\n  uint256 constant ROLE_FEES_ADMIN = 9;\n  uint256 constant ROLE_DOCS_UPLOADER = 10;\n  uint256 constant ROLE_KYC_RECASTER = 11;\n  uint256 constant ROLE_FEES_DISTRIBUTION_ADMIN = 12;\n\n  /// states\n  uint256 constant STATE_ZERO_UNDEFINED = 0;\n  uint256 constant STATE_CREATED = 1;\n  uint256 constant STATE_VENDOR_ORDER = 2;\n  uint256 constant STATE_TRANSFER = 3;\n  uint256 constant STATE_CUSTODIAN_DELIVERY = 4;\n  uint256 constant STATE_MINTED = 5;\n  uint256 constant STATE_AUDIT_FAILURE = 6;\n  uint256 constant STATE_REPLACEMENT_ORDER = 7;\n  uint256 constant STATE_REPLACEMENT_DELIVERY = 8;\n  uint256 constant STATE_RECASTED = 9;\n  uint256 constant STATE_REDEEMED = 10;\n  uint256 constant STATE_ADMIN_FAILURE = 11;\n\n  /// interactive contracts\n  bytes32 constant CONTRACT_INTERACTIVE_ASSETS_EXPLORER = \"i:asset:explorer\";\n  bytes32 constant CONTRACT_INTERACTIVE_DIGIX_DIRECTORY = \"i:directory\";\n  bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE = \"i:mp\";\n  bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_ADMIN = \"i:mpadmin\";\n  bytes32 constant CONTRACT_INTERACTIVE_POPADMIN = \"i:popadmin\";\n  bytes32 constant CONTRACT_INTERACTIVE_PRODUCTS_LIST = \"i:products\";\n  bytes32 constant CONTRACT_INTERACTIVE_TOKEN = \"i:token\";\n  bytes32 constant CONTRACT_INTERACTIVE_BULK_WRAPPER = \"i:bulk-wrapper\";\n  bytes32 constant CONTRACT_INTERACTIVE_TOKEN_CONFIG = \"i:token:config\";\n  bytes32 constant CONTRACT_INTERACTIVE_TOKEN_INFORMATION = \"i:token:information\";\n  bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_INFORMATION = \"i:mp:information\";\n  bytes32 constant CONTRACT_INTERACTIVE_IDENTITY = \"i:identity\";\n\n  /// controller contracts\n  bytes32 constant CONTRACT_CONTROLLER_ASSETS = \"c:asset\";\n  bytes32 constant CONTRACT_CONTROLLER_ASSETS_RECAST = \"c:asset:recast\";\n  bytes32 constant CONTRACT_CONTROLLER_ASSETS_EXPLORER = \"c:explorer\";\n  bytes32 constant CONTRACT_CONTROLLER_DIGIX_DIRECTORY = \"c:directory\";\n  bytes32 constant CONTRACT_CONTROLLER_MARKETPLACE = \"c:mp\";\n  bytes32 constant CONTRACT_CONTROLLER_MARKETPLACE_ADMIN = \"c:mpadmin\";\n  bytes32 constant CONTRACT_CONTROLLER_PRODUCTS_LIST = \"c:products\";\n\n  bytes32 constant CONTRACT_CONTROLLER_TOKEN_APPROVAL = \"c:token:approval\";\n  bytes32 constant CONTRACT_CONTROLLER_TOKEN_CONFIG = \"c:token:config\";\n  bytes32 constant CONTRACT_CONTROLLER_TOKEN_INFO = \"c:token:info\";\n  bytes32 constant CONTRACT_CONTROLLER_TOKEN_TRANSFER = \"c:token:transfer\";\n\n  bytes32 constant CONTRACT_CONTROLLER_JOB_ID = \"c:jobid\";\n  bytes32 constant CONTRACT_CONTROLLER_IDENTITY = \"c:identity\";\n\n  /// storage contracts\n  bytes32 constant CONTRACT_STORAGE_ASSETS = \"s:asset\";\n  bytes32 constant CONTRACT_STORAGE_ASSET_EVENTS = \"s:asset:events\";\n  bytes32 constant CONTRACT_STORAGE_DIGIX_DIRECTORY = \"s:directory\";\n  bytes32 constant CONTRACT_STORAGE_MARKETPLACE = \"s:mp\";\n  bytes32 constant CONTRACT_STORAGE_PRODUCTS_LIST = \"s:products\";\n  bytes32 constant CONTRACT_STORAGE_GOLD_TOKEN = \"s:goldtoken\";\n  bytes32 constant CONTRACT_STORAGE_JOB_ID = \"s:jobid\";\n  bytes32 constant CONTRACT_STORAGE_IDENTITY = \"s:identity\";\n\n  /// service contracts\n  bytes32 constant CONTRACT_SERVICE_TOKEN_DEMURRAGE = \"sv:tdemurrage\";\n  bytes32 constant CONTRACT_SERVICE_MARKETPLACE = \"sv:mp\";\n  bytes32 constant CONTRACT_SERVICE_DIRECTORY = \"sv:directory\";\n\n  /// fees distributors\n  bytes32 constant CONTRACT_DEMURRAGE_FEES_DISTRIBUTOR = \"fees:distributor:demurrage\";\n  bytes32 constant CONTRACT_RECAST_FEES_DISTRIBUTOR = \"fees:distributor:recast\";\n  bytes32 constant CONTRACT_TRANSFER_FEES_DISTRIBUTOR = \"fees:distributor:transfer\";\n}\n\ncontract ContractResolver {\n  address public owner;\n  bool public locked;\n  function init_register_contract(bytes32 _key, address _contract_address) public returns (bool _success);\n  function unregister_contract(bytes32 _key) public returns (bool _success);\n  function get_contract(bytes32 _key) public constant returns (address _contract);\n}\n\ncontract ResolverClient {\n\n  /// The address of the resolver contract for this project\n  address public resolver;\n  /// The key to identify this contract\n  bytes32 public key;\n\n  /// Make our own address available to us as a constant\n  address public CONTRACT_ADDRESS;\n\n  /// Function modifier to check if msg.sender corresponds to the resolved address of a given key\n  /// @param _contract The resolver key\n  modifier if_sender_is(bytes32 _contract) {\n    require(msg.sender == ContractResolver(resolver).get_contract(_contract));\n    _;\n  }\n\n  /// Function modifier to check resolver's locking status.\n  modifier unless_resolver_is_locked() {\n    require(is_locked() == false);\n    _;\n  }\n\n  /// @dev Initialize new contract\n  /// @param _key the resolver key for this contract\n  /// @return _success if the initialization is successful\n  function init(bytes32 _key, address _resolver)\n           internal\n           returns (bool _success)\n  {\n    bool _is_locked = ContractResolver(_resolver).locked();\n    if (_is_locked == false) {\n      CONTRACT_ADDRESS = address(this);\n      resolver = _resolver;\n      key = _key;\n      require(ContractResolver(resolver).init_register_contract(key, CONTRACT_ADDRESS));\n      _success = true;\n    }  else {\n      _success = false;\n    }\n  }\n\n  /// @dev Destroy the contract and unregister self from the ContractResolver\n  /// @dev Can only be called by the owner of ContractResolver\n  function destroy()\n           public\n           returns (bool _success)\n  {\n    bool _is_locked = ContractResolver(resolver).locked();\n    require(!_is_locked);\n\n    address _owner_of_contract_resolver = ContractResolver(resolver).owner();\n    require(msg.sender == _owner_of_contract_resolver);\n\n    _success = ContractResolver(resolver).unregister_contract(key);\n    require(_success);\n\n    selfdestruct(_owner_of_contract_resolver);\n  }\n\n  /// @dev Check if resolver is locked\n  /// @return _locked if the resolver is currently locked\n  function is_locked()\n           private\n           constant\n           returns (bool _locked)\n  {\n    _locked = ContractResolver(resolver).locked();\n  }\n\n  /// @dev Get the address of a contract\n  /// @param _key the resolver key to look up\n  /// @return _contract the address of the contract\n  function get_contract(bytes32 _key)\n           public\n           constant\n           returns (address _contract)\n  {\n    _contract = ContractResolver(resolver).get_contract(_key);\n  }\n}\n\ncontract Constants {\n  address constant NULL_ADDRESS = address(0x0);\n  uint256 constant ZERO = uint256(0);\n  bytes32 constant EMPTY = bytes32(0x0);\n}\n\ncontract ACConditions is Constants {\n\n  modifier not_null_address(address _item) {\n    require(_item != NULL_ADDRESS);\n    _;\n  }\n\n  modifier if_null_address(address _item) {\n    require(_item == NULL_ADDRESS);\n    _;\n  }\n\n  modifier not_null_uint(uint256 _item) {\n    require(_item != ZERO);\n    _;\n  }\n\n  modifier if_null_uint(uint256 _item) {\n    require(_item == ZERO);\n    _;\n  }\n\n  modifier not_empty_bytes(bytes32 _item) {\n    require(_item != EMPTY);\n    _;\n  }\n\n  modifier if_empty_bytes(bytes32 _item) {\n    require(_item == EMPTY);\n    _;\n  }\n\n  modifier not_null_string(string _item) {\n    bytes memory _i = bytes(_item);\n    require(_i.length > 0);\n    _;\n  }\n\n  modifier if_null_string(string _item) {\n    bytes memory _i = bytes(_item);\n    require(_i.length == 0);\n    _;\n  }\n\n  modifier require_gas(uint256 _requiredgas) {\n    require(msg.gas  >= (_requiredgas - 22000));\n    _;\n  }\n\n  function is_contract(address _contract)\n           public\n           constant\n           returns (bool _is_contract)\n  {\n    uint32 _code_length;\n\n    assembly {\n      _code_length := extcodesize(_contract)\n    }\n\n    if(_code_length > 1) {\n      _is_contract = true;\n    } else {\n      _is_contract = false;\n    }\n  }\n\n  modifier if_contract(address _contract) {\n    require(is_contract(_contract) == true);\n    _;\n  }\n\n  modifier unless_contract(address _contract) {\n    require(is_contract(_contract) == false);\n    _;\n  }\n}\n\ncontract MarketplaceStorage {\n}\n\ncontract MarketplaceControllerCommon {\n}\n\ncontract MarketplaceController {\n}\n\ncontract MarketplaceAdminController {\n}\n\ncontract MarketplaceCommon is ResolverClient, ACConditions, DigixConstants {\n\n  function marketplace_admin_controller()\n           internal\n           constant\n           returns (MarketplaceAdminController _contract)\n  {\n    _contract = MarketplaceAdminController(get_contract(CONTRACT_CONTROLLER_MARKETPLACE_ADMIN));\n  }\n\n  function marketplace_storage()\n           internal\n           constant\n           returns (MarketplaceStorage _contract)\n  {\n    _contract = MarketplaceStorage(get_contract(CONTRACT_STORAGE_MARKETPLACE));\n  }\n\n  function marketplace_controller()\n           internal\n           constant\n           returns (MarketplaceController _contract)\n  {\n    _contract = MarketplaceController(get_contract(CONTRACT_CONTROLLER_MARKETPLACE));\n  }\n}\n\ncontract DigixConstantsExtras {\n    /// storage contracts\n    bytes32 constant CONTRACT_STORAGE_MARKETPLACE_EXTRAS = \"s:mp:extras\";\n    bytes32 constant CONTRACT_CONTROLLER_MARKETPLACE_ADMIN_EXTRAS = \"c:mpadmin:extras\";\n    bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_V2 = \"i:mp:v2\";\n    bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_ADMIN_EXTRAS = \"i:mpadmin:extras\";\n}\n\ncontract MarketplaceControllerV2 {\n  function purchase_with_eth(\n    uint256 _wei_sent,\n    address _buyer,\n    uint256 _block_number,\n    uint256 _nonce,\n    uint256 _wei_per_dgx_mg,\n    address _signer,\n    bytes _signature\n  ) payable public returns (bool _success, uint256 _purchased_amount);\n\n  function purchase_with_dai(\n    uint256 _dai_sent,\n    address _buyer,\n    uint256 _block_number,\n    uint256 _nonce,\n    uint256 _dai_per_ton,\n    address _signer,\n    bytes _signature\n  ) public returns (bool _success, uint256 _purchased_amount);\n}\n\n/// @title Digix's Marketplace\n/// @author Digix Holdings Pte Ltd\n/// @notice This contract is for KYC-approved users to purchase DGX using ETH\ncontract MarketplaceV2 is MarketplaceCommon, DigixConstantsExtras {\n\n  function MarketplaceV2(address _resolver) public\n  {\n    require(init(CONTRACT_INTERACTIVE_MARKETPLACE_V2, _resolver));\n  }\n\n  function marketplace_controller_v2()\n           internal\n           constant\n           returns (MarketplaceControllerV2 _contract)\n  {\n    _contract = MarketplaceControllerV2(get_contract(CONTRACT_CONTROLLER_MARKETPLACE));\n  }\n\n  /// @dev purchase DGX gold using ETH\n  /// @param _block_number Block number from DTPO (Digix Trusted Price Oracle)\n  /// @param _nonce Nonce from DTPO\n  /// @param _wei_per_dgx_mg Price in wei for one milligram of DGX\n  /// @param _signer Address of the DTPO signer\n  /// @param _signature Signature of the payload\n  /// @return {\n  ///   \"_success\": \"returns true if operation is successful\",\n  ///   \"_purchased_amount\": \"DGX nanograms received\"\n  /// }\n  function purchaseWithEth(uint256 _block_number, uint256 _nonce, uint256 _wei_per_dgx_mg, address _signer, bytes _signature)\n           payable\n           public\n           returns (bool _success, uint256 _purchased_amount)\n  {\n    address _sender = msg.sender;\n\n    (_success, _purchased_amount) =\n      marketplace_controller_v2().purchase_with_eth.value(msg.value).gas(600000)(msg.value, _sender, _block_number,\n                                                                             _nonce, _wei_per_dgx_mg, _signer, _signature);\n    require(_success);\n  }\n\n  /// @dev purchase DGX gold using DAI\n  /// @param _dai_sent amount of DAI sent\n  /// @param _block_number Block number from DTPO (Digix Trusted Price Oracle)\n  /// @param _nonce Nonce from DTPO\n  /// @param _dai_per_ton Despite the variable name, this is actually the price in DAI for 1000 tonnes of DGXs\n  /// @param _signer Address of the DTPO signer\n  /// @param _signature Signature of the payload\n  /// @return {\n  ///   \"_success\": \"returns true if operation is successful\",\n  ///   \"_purchased_amount\": \"DGX nanograms received\"\n  /// }\n  function purchaseWithDai(uint256 _dai_sent, uint256 _block_number, uint256 _nonce, uint256 _dai_per_ton, address _signer, bytes _signature)\n           public\n           returns (bool _success, uint256 _purchased_amount)\n  {\n    address _sender = msg.sender;\n\n    (_success, _purchased_amount) =\n      marketplace_controller_v2().purchase_with_dai.gas(800000)(_dai_sent, _sender, _block_number,\n                                                                             _nonce, _dai_per_ton, _signer, _signature);\n    require(_success);\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"key\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"get_contract\",\"outputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"is_contract\",\"outputs\":[{\"name\":\"_is_contract\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_block_number\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_wei_per_dgx_mg\",\"type\":\"uint256\"},{\"name\":\"_signer\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"purchaseWithEth\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"},{\"name\":\"_purchased_amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dai_sent\",\"type\":\"uint256\"},{\"name\":\"_block_number\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_dai_per_ton\",\"type\":\"uint256\"},{\"name\":\"_signer\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"purchaseWithDai\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"},{\"name\":\"_purchased_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]",
  "bytecode": "6060604052341561000f57600080fd5b60405160208061106b833981016040528080519060200190919050506100687f693a6d703a7632000000000000000000000000000000000000000000000000008261007964010000000002610b07176401000000009004565b151561007357600080fd5b506102d1565b6000808273ffffffffffffffffffffffffffffffffffffffff1663cf3090126000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156100e857600080fd5b6102c65a03f115156100f957600080fd5b5050506040518051905090506000151581151514156102c55730600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600181600019169055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0f6ef4a600154600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b151561029657600080fd5b6102c65a03f115156102a757600080fd5b5050506040518051905015156102bc57600080fd5b600191506102ca565b600091505b5092915050565b610d8b806102e06000396000f30060606040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806304f3bcec146100935780633943380c146100e85780633f83acff14610119578063649c07d51461018057806383197ef0146101d1578063d9c263f8146101fe578063db4ecbc1146102a9578063f9676db4146102fe575b600080fd5b341561009e57600080fd5b6100a66103bd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100f357600080fd5b6100fb6103e2565b60405180826000191660001916815260200191505060405180910390f35b341561012457600080fd5b61013e6004808035600019169060200190919050506103e8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561018b57600080fd5b6101b7600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506104ac565b604051808215151515815260200191505060405180910390f35b34156101dc57600080fd5b6101e46104d6565b604051808215151515815260200191505060405180910390f35b610288600480803590602001909190803590602001909190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061075a565b60405180831515151581526020018281526020019250505060405180910390f35b34156102b457600080fd5b6102bc610906565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561030957600080fd5b61039c600480803590602001909190803590602001909190803590602001909190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061092c565b60405180831515151581526020018281526020019250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633f83acff836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b151561048a57600080fd5b6102c65a03f1151561049b57600080fd5b505050604051805190509050919050565b600080823b905060018163ffffffff1611156104cb57600191506104d0565b600091505b50919050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cf3090126000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561056857600080fd5b6102c65a03f1151561057957600080fd5b5050506040518051905091508115151561059257600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561061f57600080fd5b6102c65a03f1151561063057600080fd5b5050506040518051905090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561067657600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c8b56bda6001546000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b151561071857600080fd5b6102c65a03f1151561072957600080fd5b50505060405180519050925082151561074157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16ff5b600080600033905061076a610ad7565b73ffffffffffffffffffffffffffffffffffffffff1663cd2a0c2934620927c09034858d8d8d8d8d6040518a63ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561087957808201518184015260208101905061085e565b50505050905090810190601f1680156108a65780820380516001836020036101000a031916815260200191505b509850505050505050505060408051808303818589803b15156108c857600080fd5b88f115156108d557600080fd5b50505050506040518051906020018051905080935081945050508215156108fb57600080fd5b509550959350505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600033905061093c610ad7565b73ffffffffffffffffffffffffffffffffffffffff16635cc3c951620c35008b848c8c8c8c8c6040518963ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a49578082015181840152602081019050610a2e565b50505050905090810190601f168015610a765780820380516001836020036101000a031916815260200191505b50985050505050505050506040805180830381600088803b1515610a9957600080fd5b87f11515610aa657600080fd5b50505050604051805190602001805190508093508194505050821515610acb57600080fd5b50965096945050505050565b6000610b027f633a6d70000000000000000000000000000000000000000000000000000000006103e8565b905090565b6000808273ffffffffffffffffffffffffffffffffffffffff1663cf3090126000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515610b7657600080fd5b6102c65a03f11515610b8757600080fd5b505050604051805190509050600015158115151415610d535730600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600181600019169055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0f6ef4a600154600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1515610d2457600080fd5b6102c65a03f11515610d3557600080fd5b505050604051805190501515610d4a57600080fd5b60019150610d58565b600091505b50929150505600a165627a7a723058200f12a98496226f41f085ef9d82a7c016ec91ad3016ca4185f976c978be06f2550029000000000000000000000000db2ddb220b8a55e0e4412130e6ae74d136c04ba2",
  "constructorArguments": "000000000000000000000000db2ddb220b8a55e0e4412130e6ae74d136c04ba2"
}