{
  "address": "0x6d2e76213615925c5fc436565b5ee788ee0e86dc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AngelCardData",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-29\n*/\n\npragma solidity ^0.4.17;\n\ncontract AccessControl {\n    address public creatorAddress;\n    uint16 public totalSeraphims = 0;\n    mapping (address => bool) public seraphims;\n\n    bool public isMaintenanceMode = true;\n \n    modifier onlyCREATOR() {\n        require(msg.sender == creatorAddress);\n        _;\n    }\n\n    modifier onlySERAPHIM() {\n        require(seraphims[msg.sender] == true);\n        _;\n    }\n    \n    modifier isContractActive {\n        require(!isMaintenanceMode);\n        _;\n    }\n    \n    // Constructor\n    function AccessControl() public {\n        creatorAddress = msg.sender;\n    }\n    \n\n    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\n        if (seraphims[_newSeraphim] == false) {\n            seraphims[_newSeraphim] = true;\n            totalSeraphims += 1;\n        }\n    }\n    \n    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\n        if (seraphims[_oldSeraphim] == true) {\n            seraphims[_oldSeraphim] = false;\n            totalSeraphims -= 1;\n        }\n    }\n\n    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\n        isMaintenanceMode = _isMaintaining;\n    }\n\n  \n} \ncontract SafeMath {\n    function safeAdd(uint x, uint y) pure internal returns(uint) {\n      uint z = x + y;\n      assert((z >= x) && (z >= y));\n      return z;\n    }\n\n    function safeSubtract(uint x, uint y) pure internal returns(uint) {\n      assert(x >= y);\n      uint z = x - y;\n      return z;\n    }\n\n    function safeMult(uint x, uint y) pure internal returns(uint) {\n      uint z = x * y;\n      assert((x == 0)||(z/x == y));\n      return z;\n    }\n\n    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) constant public returns(uint8) {\n        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\n        return uint8(genNum % (maxRandom - min + 1)+min);\n    }\n}\n\ncontract Enums {\n    enum ResultCode {\n        SUCCESS,\n        ERROR_CLASS_NOT_FOUND,\n        ERROR_LOW_BALANCE,\n        ERROR_SEND_FAIL,\n        ERROR_NOT_OWNER,\n        ERROR_NOT_ENOUGH_MONEY,\n        ERROR_INVALID_AMOUNT\n    }\n\n    enum AngelAura { \n        Blue, \n        Yellow, \n        Purple, \n        Orange, \n        Red, \n        Green \n    }\n}\n\ncontract IAngelCardData is AccessControl, Enums {\n    uint8 public totalAngelCardSeries;\n    uint64 public totalAngels;\n\n    \n    // write\n    // angels\n    function createAngelCardSeries(uint8 _angelCardSeriesId, uint _basePrice,  uint64 _maxTotal, uint8 _baseAura, uint16 _baseBattlePower, uint64 _liveTime) onlyCREATOR external returns(uint8);\n    function updateAngelCardSeries(uint8 _angelCardSeriesId, uint64 _newPrice, uint64 _newMaxTotal) onlyCREATOR external;\n    function setAngel(uint8 _angelCardSeriesId, address _owner, uint _price, uint16 _battlePower) onlySERAPHIM external returns(uint64);\n    function addToAngelExperienceLevel(uint64 _angelId, uint _value) onlySERAPHIM external;\n    function setAngelLastBattleTime(uint64 _angelId) onlySERAPHIM external;\n    function setAngelLastVsBattleTime(uint64 _angelId) onlySERAPHIM external;\n    function setLastBattleResult(uint64 _angelId, uint16 _value) onlySERAPHIM external;\n    function addAngelIdMapping(address _owner, uint64 _angelId) private;\n    function transferAngel(address _from, address _to, uint64 _angelId) onlySERAPHIM public returns(ResultCode);\n    function ownerAngelTransfer (address _to, uint64 _angelId)  public;\n    function updateAngelLock (uint64 _angelId, bool newValue) public;\n    function removeCreator() onlyCREATOR external;\n\n    // read\n    function getAngelCardSeries(uint8 _angelCardSeriesId) constant public returns(uint8 angelCardSeriesId, uint64 currentAngelTotal, uint basePrice, uint64 maxAngelTotal, uint8 baseAura, uint baseBattlePower, uint64 lastSellTime, uint64 liveTime);\n    function getAngel(uint64 _angelId) constant public returns(uint64 angelId, uint8 angelCardSeriesId, uint16 battlePower, uint8 aura, uint16 experience, uint price, uint64 createdTime, uint64 lastBattleTime, uint64 lastVsBattleTime, uint16 lastBattleResult, address owner);\n    function getOwnerAngelCount(address _owner) constant public returns(uint);\n    function getAngelByIndex(address _owner, uint _index) constant public returns(uint64);\n    function getTotalAngelCardSeries() constant public returns (uint8);\n    function getTotalAngels() constant public returns (uint64);\n    function getAngelLockStatus(uint64 _angelId) constant public returns (bool);\n}\n\ncontract AngelCardData is IAngelCardData, SafeMath {\n    /*** EVENTS ***/\n    event CreatedAngel(uint64 angelId);\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /*** DATA TYPES ***/\n    struct AngelCardSeries {\n        uint8 angelCardSeriesId;\n        uint basePrice; \n        uint64 currentAngelTotal;\n        uint64 maxAngelTotal;\n        AngelAura baseAura;\n        uint baseBattlePower;\n        uint64 lastSellTime;\n        uint64 liveTime;\n    }\n\n    struct Angel {\n        uint64 angelId;\n        uint8 angelCardSeriesId;\n        address owner;\n        uint16 battlePower;\n        AngelAura aura;\n        uint16 experience;\n        uint price;\n        uint64 createdTime;\n        uint64 lastBattleTime;\n        uint64 lastVsBattleTime;\n        uint16 lastBattleResult;\n        bool ownerLock;\n    }\n\n    /*** STORAGE ***/\n\n    mapping(uint8 => AngelCardSeries) public angelCardSeriesCollection;\n    mapping(uint64 => Angel) public angelCollection;\n    mapping(address => uint64[]) public ownerAngelCollection;\n    uint256 public prevSeriesSelloutHours;\n    \n    /*** FUNCTIONS ***/\n    //*** Write Access ***//\n    function AngelCardData() public {\n        \n    }\n  \n\n    function createAngelCardSeries(uint8 _angelCardSeriesId, uint _basePrice,  uint64 _maxTotal, uint8 _baseAura, uint16 _baseBattlePower, uint64 _liveTime) onlyCREATOR external returns(uint8) {\n         if ((now > 1517189201) || (totalAngelCardSeries >= 24)) {revert();}\n        //This confirms that no one, even the develoopers, can create any angel series after JAN/29/2018 @ 1:26 am (UTC) or more than the original 24 series.\n\n        AngelCardSeries storage angelCardSeries = angelCardSeriesCollection[_angelCardSeriesId];\n        angelCardSeries.angelCardSeriesId = _angelCardSeriesId;\n        angelCardSeries.basePrice = _basePrice; \n        angelCardSeries.maxAngelTotal = _maxTotal;\n        angelCardSeries.baseAura = AngelAura(_baseAura);\n        angelCardSeries.baseBattlePower = _baseBattlePower;\n        angelCardSeries.lastSellTime = 0;\n        angelCardSeries.liveTime = _liveTime;\n\n        totalAngelCardSeries += 1;\n        return totalAngelCardSeries;\n    }\n\n  // This is called every 5 days to set the basePrice and maxAngelTotal for the angel series based on buy pressure of the last card\n    function updateAngelCardSeries(uint8 _angelCardSeriesId, uint64 _newPrice, uint64 _newMaxTotal) onlyCREATOR external {\n        // Require that the series is above the Arel card\n        if (_angelCardSeriesId < 4) {revert();}\n        //(The orginal, powerful series can't be altered. \n        if ((_newMaxTotal <45) || (_newMaxTotal >450)) {revert();}\n       //series can only be adjusted within a certain narrow range. \n        AngelCardSeries storage seriesStorage = angelCardSeriesCollection[_angelCardSeriesId];\n        seriesStorage.maxAngelTotal = _newMaxTotal;\n       seriesStorage.basePrice = _newPrice;\n        seriesStorage.lastSellTime = uint64(now);\n    }\n\n\n\n    function setAngel(uint8 _angelCardSeriesId, address _owner, uint _price, uint16 _battlePower) onlySERAPHIM external returns(uint64) {\n        AngelCardSeries storage series = angelCardSeriesCollection[_angelCardSeriesId];\n    \n        if (series.currentAngelTotal >= series.maxAngelTotal) {\n            revert();\n        }\n       else { \n        totalAngels += 1;\n        Angel storage angel = angelCollection[totalAngels];\n        series.currentAngelTotal += 1;\n        series.lastSellTime = uint64(now);\n        angel.angelId = totalAngels;\n        angel.angelCardSeriesId = _angelCardSeriesId;\n        angel.owner = _owner;\n        angel.battlePower = _battlePower; \n        angel.aura = series.baseAura;\n        angel.experience = 0;\n        angel.price = _price;\n        angel.createdTime = uint64(now);\n        angel.lastBattleTime = 0;\n        angel.lastVsBattleTime = 0;\n        angel.lastBattleResult = 0;\n        addAngelIdMapping(_owner, angel.angelId);\n        angel.ownerLock = true;\n        return angel.angelId;\n       }\n    }\n     \n    function addToAngelExperienceLevel(uint64 _angelId, uint _value) onlySERAPHIM external {\n        Angel storage angel = angelCollection[_angelId];\n        if (angel.angelId == _angelId) {\n            angel.experience = uint16(safeAdd(angel.experience, _value));\n        }\n    }\n\n    function setAngelLastBattleTime(uint64 _angelId) onlySERAPHIM external {\n        Angel storage angel = angelCollection[_angelId];\n        if (angel.angelId == _angelId) {\n            angel.lastBattleTime = uint64(now);\n        }\n    }\n\n    function setAngelLastVsBattleTime(uint64 _angelId) onlySERAPHIM external {\n        Angel storage angel = angelCollection[_angelId];\n        if (angel.angelId == _angelId) {\n            angel.lastVsBattleTime = uint64(now);\n        }\n    }\n\n    function setLastBattleResult(uint64 _angelId, uint16 _value) onlySERAPHIM external {\n        Angel storage angel = angelCollection[_angelId];\n        if (angel.angelId == _angelId) {\n            angel.lastBattleResult = _value;\n        }\n    }\n    \n    function addAngelIdMapping(address _owner, uint64 _angelId) private {\n            uint64[] storage owners = ownerAngelCollection[_owner];\n            owners.push(_angelId);\n            Angel storage angel = angelCollection[_angelId];\n            angel.owner = _owner;\n    }\n//Anyone can transfer their own angel by sending a transaction with the address to transfer to from the address that owns it. \n    function ownerAngelTransfer (address _to, uint64 _angelId)  public  {\n        \n       if ((_angelId > totalAngels) || (_angelId == 0)) {revert();}\n       Angel storage angel = angelCollection[_angelId];\n        if (msg.sender == _to) {revert();}\n        if (angel.owner != msg.sender) {\n            revert();\n        }\n        else {\n        angel.owner = _to;\n        addAngelIdMapping(_to, _angelId);\n        }\n    }\n    function transferAngel(address _from, address _to, uint64 _angelId) onlySERAPHIM public returns(ResultCode) {\n        Angel storage angel = angelCollection[_angelId];\n        if (_from == _to) {revert();}\n        if (angel.ownerLock == true) {revert();} //must be unlocked before transfering. \n        if (angel.owner != _from) {\n            return ResultCode.ERROR_NOT_OWNER;\n        }\n        angel.owner = _to;\n        addAngelIdMapping(_to, _angelId);\n        angel.ownerLock = true;\n        return ResultCode.SUCCESS;\n    }\n\n      function updateAngelLock (uint64 _angelId, bool newValue) public {\n        if ((_angelId > totalAngels) || (_angelId == 0)) {revert();}\n        Angel storage angel = angelCollection[_angelId];\n        if (angel.owner != msg.sender) { revert();}\n        angel.ownerLock = newValue;\n    }\n    \n    function removeCreator() onlyCREATOR external {\n        //this function is meant to be called once all modules for the game are in place. It will remove our ability to add any new modules and make the game fully decentralized. \n        creatorAddress = address(0);\n    }\n   \n    //*** Read Access ***//\n    function getAngelCardSeries(uint8 _angelCardSeriesId) constant public returns(uint8 angelCardSeriesId, uint64 currentAngelTotal, uint basePrice, uint64 maxAngelTotal, uint8 baseAura, uint baseBattlePower, uint64 lastSellTime, uint64 liveTime) {\n        AngelCardSeries memory series = angelCardSeriesCollection[_angelCardSeriesId];\n        angelCardSeriesId = series.angelCardSeriesId;\n        currentAngelTotal = series.currentAngelTotal;\n        basePrice = series.basePrice;\n        maxAngelTotal = series.maxAngelTotal;\n        baseAura = uint8(series.baseAura);\n        baseBattlePower = series.baseBattlePower;\n        lastSellTime = series.lastSellTime;\n        liveTime = series.liveTime;\n    }\n\n\n    function getAngel(uint64 _angelId) constant public returns(uint64 angelId, uint8 angelCardSeriesId, uint16 battlePower, uint8 aura, uint16 experience, uint price, uint64 createdTime, uint64 lastBattleTime, uint64 lastVsBattleTime, uint16 lastBattleResult, address owner) {\n        Angel memory angel = angelCollection[_angelId];\n        angelId = angel.angelId;\n        angelCardSeriesId = angel.angelCardSeriesId;\n        battlePower = angel.battlePower;\n        aura = uint8(angel.aura);\n        experience = angel.experience;\n        price = angel.price;\n        createdTime = angel.createdTime;\n        lastBattleTime = angel.lastBattleTime;\n        lastVsBattleTime = angel.lastVsBattleTime;\n        lastBattleResult = angel.lastBattleResult;\n        owner = angel.owner;\n    }\n\n    function getOwnerAngelCount(address _owner) constant public returns(uint) {\n        return ownerAngelCollection[_owner].length;\n    }\n    \n    function getAngelLockStatus(uint64 _angelId) constant public returns (bool) {\n        if ((_angelId > totalAngels) || (_angelId == 0)) {revert();}\n       Angel storage angel = angelCollection[_angelId];\n       return angel.ownerLock;\n    }\n    \n\n    function getAngelByIndex(address _owner, uint _index) constant public returns(uint64) {\n        if (_index >= ownerAngelCollection[_owner].length) {\n            return 0; }\n        return ownerAngelCollection[_owner][_index];\n    }\n\n    function getTotalAngelCardSeries() constant public returns (uint8) {\n        return totalAngelCardSeries;\n    }\n\n    function getTotalAngels() constant public returns (uint64) {\n        return totalAngels;\n    }\n}",
  "bytecode": "606060405260008060146101000a81548161ffff021916908361ffff1602179055506001600260006101000a81548160ff021916908315150217905550341561004757600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612bd9806100966000396000f300606060405260043610610196576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063047408aa1461019b5780630cba58531461020557806327380c2c1461033f5780632e448f4b1461038b5780632ef0a28d146104185780633f2266c214610469578063408760b8146104d357806343fce81814610500578063454ccc2f1461058857806345e26105146105c557806362161235146105ea57806363eda29d146106565780636b6cc2391461067f5780637123691e146106ac5780637f26fc7d146106e557806386237e7b146106fa5780638e5152d61461077d578063920dce19146107b3578063974fd2f31461087a5780639d069353146108b4578063a3ff428e146109db578063a4a4c22414610aaa578063a6c1d61114610ad7578063b1c32b2b14610b1c578063b38260fe14610b54578063bbc878c414610b83578063bd63925914610bb4578063d356a28b14610c01578063db3d842114610c3a578063e1baa2a014610c69578063e927fc5c14610cb5578063fdf8e11c14610d0a575b600080fd5b34156101a657600080fd5b6101db600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d47565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b341561021057600080fd5b610230600480803567ffffffffffffffff16906020019091905050610e1c565b604051808d67ffffffffffffffff1667ffffffffffffffff1681526020018c60ff1660ff1681526020018b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018a61ffff1661ffff1681526020018960058111156102a657fe5b60ff1681526020018861ffff1661ffff1681526020018781526020018667ffffffffffffffff1667ffffffffffffffff1681526020018567ffffffffffffffff1667ffffffffffffffff1681526020018467ffffffffffffffff1667ffffffffffffffff1681526020018361ffff1661ffff168152602001821515151581526020019c5050505050505050505050505060405180910390f35b341561034a57600080fd5b610389600480803560ff1690602001909190803567ffffffffffffffff1690602001909190803567ffffffffffffffff16906020019091905050610f3d565b005b341561039657600080fd5b6103f4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803567ffffffffffffffff16906020019091905050611063565b6040518082600681111561040457fe5b60ff16815260200191505060405180910390f35b341561042357600080fd5b61044f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611223565b604051808215151515815260200191505060405180910390f35b341561047457600080fd5b6104a9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611243565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b34156104de57600080fd5b6104fe600480803567ffffffffffffffff1690602001909190505061128f565b005b341561050b57600080fd5b61056c600480803560ff1690602001909190803590602001909190803567ffffffffffffffff1690602001909190803560ff1690602001909190803561ffff1690602001909190803567ffffffffffffffff1690602001909190505061137d565b604051808260ff1660ff16815260200191505060405180910390f35b341561059357600080fd5b61059b611558565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b34156105d057600080fd5b6105e860048080351515906020019091905050611571565b005b34156105f557600080fd5b61063a600480803561ffff1690602001909190803560ff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506115e9565b604051808260ff1660ff16815260200191505060405180910390f35b341561066157600080fd5b610669611636565b6040518082815260200191505060405180910390f35b341561068a57600080fd5b61069261163c565b604051808215151515815260200191505060405180910390f35b34156106b757600080fd5b6106e3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061164f565b005b34156106f057600080fd5b6106f8611790565b005b341561070557600080fd5b610753600480803560ff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803561ffff1690602001909190505061182e565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b341561078857600080fd5b6107b1600480803567ffffffffffffffff16906020019091908035906020019091905050611c14565b005b34156107be57600080fd5b6107d7600480803560ff16906020019091905050611d16565b604051808960ff1660ff1681526020018867ffffffffffffffff1667ffffffffffffffff1681526020018781526020018667ffffffffffffffff1667ffffffffffffffff1681526020018560ff1660ff1681526020018481526020018367ffffffffffffffff1667ffffffffffffffff1681526020018267ffffffffffffffff1667ffffffffffffffff1681526020019850505050505050505060405180910390f35b341561088557600080fd5b6108b2600480803567ffffffffffffffff1690602001909190803561ffff16906020019091905050611ec7565b005b34156108bf57600080fd5b6108df600480803567ffffffffffffffff16906020019091905050611faa565b604051808c67ffffffffffffffff1667ffffffffffffffff1681526020018b60ff1660ff1681526020018a61ffff1661ffff1681526020018960ff1660ff1681526020018861ffff1661ffff1681526020018781526020018667ffffffffffffffff1667ffffffffffffffff1681526020018567ffffffffffffffff1667ffffffffffffffff1681526020018467ffffffffffffffff1667ffffffffffffffff1681526020018361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019b50505050505050505050505060405180910390f35b34156109e657600080fd5b6109ff600480803560ff16906020019091905050612251565b604051808960ff1660ff1681526020018881526020018767ffffffffffffffff1667ffffffffffffffff1681526020018667ffffffffffffffff1667ffffffffffffffff168152602001856005811115610a5557fe5b60ff1681526020018481526020018367ffffffffffffffff1667ffffffffffffffff1681526020018267ffffffffffffffff1667ffffffffffffffff1681526020019850505050505050505060405180910390f35b3415610ab557600080fd5b610ad5600480803567ffffffffffffffff16906020019091905050612303565b005b3415610ae257600080fd5b610b02600480803567ffffffffffffffff169060200190919050506123f1565b604051808215151515815260200191505060405180910390f35b3415610b2757600080fd5b610b52600480803567ffffffffffffffff169060200190919080351515906020019091905050612482565b005b3415610b5f57600080fd5b610b67612577565b604051808260ff1660ff16815260200191505060405180910390f35b3415610b8e57600080fd5b610b9661258a565b604051808261ffff1661ffff16815260200191505060405180910390f35b3415610bbf57600080fd5b610beb600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061259e565b6040518082815260200191505060405180910390f35b3415610c0c57600080fd5b610c38600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506125ea565b005b3415610c4557600080fd5b610c4d61272a565b604051808260ff1660ff16815260200191505060405180910390f35b3415610c7457600080fd5b610cb3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803567ffffffffffffffff16906020019091905050612741565b005b3415610cc057600080fd5b610cc86128a0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610d1557600080fd5b610d1d6128c5565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905082101515610d9d5760009050610e16565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515610de957fe5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1690505b92915050565b60046020528060005260406000206000915090508060000160009054906101000a900467ffffffffffffffff16908060000160089054906101000a900460ff16908060000160099054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600001601d9054906101000a900461ffff169080600001601f9054906101000a900460ff16908060010160009054906101000a900461ffff16908060020154908060030160009054906101000a900467ffffffffffffffff16908060030160089054906101000a900467ffffffffffffffff16908060030160109054906101000a900467ffffffffffffffff16908060030160189054906101000a900461ffff169080600301601a9054906101000a900460ff1690508c565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f9a57600080fd5b60048460ff161015610fab57600080fd5b602d8267ffffffffffffffff161080610fcf57506101c28267ffffffffffffffff16115b15610fd957600080fd5b600360008560ff1660ff1681526020019081526020016000209050818160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508267ffffffffffffffff168160010181905550428160040160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050505050565b60008060011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156110c557600080fd5b600460008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002090508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561112757600080fd5b6001151581600301601a9054906101000a900460ff161515141561114a57600080fd5b8473ffffffffffffffffffffffffffffffffffffffff168160000160099054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156111ac576004915061121b565b838160000160096101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506111f984846128e2565b600181600301601a6101000a81548160ff021916908315150217905550600091505b509392505050565b60016020528060005260406000206000915054906101000a900460ff1681565b60056020528160005260406000208181548110151561125e57fe5b9060005260206000209060049182820401919006600802915091509054906101000a900467ffffffffffffffff1681565b600060011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156112f057600080fd5b600460008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002090508167ffffffffffffffff168160000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16141561137957428160030160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b5050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113db57600080fd5b635a6e785142118061140057506018600260019054906101000a900460ff1660ff1610155b1561140a57600080fd5b600360008960ff1660ff1681526020019081526020016000209050878160000160006101000a81548160ff021916908360ff160217905550868160010181905550858160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508460ff16600581111561148557fe5b8160020160106101000a81548160ff021916908360058111156114a457fe5b02179055508361ffff16816003018190555060008160040160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550828160040160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001600260018282829054906101000a900460ff160192506101000a81548160ff021916908360ff160217905550600260019054906101000a900460ff169150509695505050505050565b6002809054906101000a900467ffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115cc57600080fd5b80600260006101000a81548160ff02191690831515021790555050565b6000808273ffffffffffffffffffffffffffffffffffffffff166001430340600190040190508360ff1660018560ff1687030161ffff168281151561162a57fe5b06019150509392505050565b60065481565b600260009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116aa57600080fd5b60011515600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141561178d576000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600060148282829054906101000a900461ffff160392506101000a81548161ffff021916908361ffff1602179055505b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117eb57600080fd5b60008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600080600060011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561189257600080fd5b600360008860ff1660ff16815260200190815260200160002091508160020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff168260020160009054906101000a900467ffffffffffffffff1667ffffffffffffffff161015156118ff57600080fd5b60016002808282829054906101000a900467ffffffffffffffff160192506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600460006002809054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020905060018260020160008282829054906101000a900467ffffffffffffffff160192506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550428260040160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506002809054906101000a900467ffffffffffffffff168160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550868160000160086101000a81548160ff021916908360ff160217905550858160000160096101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508381600001601d6101000a81548161ffff021916908361ffff1602179055508160020160109054906101000a900460ff1681600001601f6101000a81548160ff02191690836005811115611adf57fe5b021790555060008160010160006101000a81548161ffff021916908361ffff160217905550848160020181905550428160030160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060008160030160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060008160030160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060008160030160186101000a81548161ffff021916908361ffff160217905550611bd2868260000160009054906101000a900467ffffffffffffffff166128e2565b600181600301601a6101000a81548160ff0219169083151502179055508060000160009054906101000a900467ffffffffffffffff1692505050949350505050565b600060011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611c7557600080fd5b600460008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002090508267ffffffffffffffff168160000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff161415611d1157611cf28160010160009054906101000a900461ffff1661ffff16836129ec565b8160010160006101000a81548161ffff021916908361ffff1602179055505b505050565b600080600080600080600080611d2a612a16565b600360008b60ff1660ff16815260200190815260200160002061010060405190810160405290816000820160009054906101000a900460ff1660ff1660ff168152602001600182015481526020016002820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160109054906101000a900460ff166005811115611df957fe5b6005811115611e0457fe5b8152602001600382015481526020016004820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016004820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152505090508060000151985080604001519750806020015196508060600151955080608001516005811115611ea457fe5b94508060a0015193508060c0015192508060e00151915050919395975091939597565b600060011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611f2857600080fd5b600460008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002090508267ffffffffffffffff168160000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff161415611fa557818160030160186101000a81548161ffff021916908361ffff1602179055505b505050565b6000806000806000806000806000806000611fc3612a92565b600460008e67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002061018060405190810160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900460ff1660ff1660ff1681526020016000820160099054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160008201601d9054906101000a900461ffff1661ffff1661ffff16815260200160008201601f9054906101000a900460ff1660058111156120da57fe5b60058111156120e557fe5b81526020016001820160009054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016003820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016003820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016003820160189054906101000a900461ffff1661ffff1661ffff16815260200160038201601a9054906101000a900460ff161515151581525050905080600001519b5080602001519a50806060015199508060800151600581111561220b57fe5b98508060a0015197508060c0015196508060e001519550806101000151945080610120015193508061014001519250806040015191505091939597999b90929496989a50565b60036020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020160009054906101000a900467ffffffffffffffff16908060020160089054906101000a900467ffffffffffffffff16908060020160109054906101000a900460ff16908060030154908060040160009054906101000a900467ffffffffffffffff16908060040160089054906101000a900467ffffffffffffffff16905088565b600060011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561236457600080fd5b600460008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002090508167ffffffffffffffff168160000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1614156123ed57428160030160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b5050565b6000806002809054906101000a900467ffffffffffffffff1667ffffffffffffffff168367ffffffffffffffff161180612435575060008367ffffffffffffffff16145b1561243f57600080fd5b600460008467ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020905080600301601a9054906101000a900460ff16915050919050565b60006002809054906101000a900467ffffffffffffffff1667ffffffffffffffff168367ffffffffffffffff1611806124c5575060008367ffffffffffffffff16145b156124cf57600080fd5b600460008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160000160099054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561255657600080fd5b8181600301601a6101000a81548160ff021916908315150217905550505050565b600260019054906101000a900460ff1681565b600060149054906101000a900461ffff1681565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561264557600080fd5b60001515600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514156127275760018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600060148282829054906101000a900461ffff160192506101000a81548161ffff021916908361ffff1602179055505b50565b6000600260019054906101000a900460ff16905090565b60006002809054906101000a900467ffffffffffffffff1667ffffffffffffffff168267ffffffffffffffff161180612784575060008267ffffffffffffffff16145b1561278e57600080fd5b600460008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002090508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156127f057600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168160000160099054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561284e57600080fd5b828160000160096101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061289b83836128e2565b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006002809054906101000a900467ffffffffffffffff16905090565b600080600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508180548060010182816129399190612b4e565b916000526020600020906004918282040191900660080285909190916101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050600460008467ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000209050838160000160096101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6000808284019050838110158015612a045750828110155b1515612a0c57fe5b8091505092915050565b61010060405190810160405280600060ff16815260200160008152602001600067ffffffffffffffff168152602001600067ffffffffffffffff16815260200160006005811115612a6357fe5b815260200160008152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681525090565b61018060405190810160405280600067ffffffffffffffff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600061ffff16815260200160006005811115612aef57fe5b8152602001600061ffff16815260200160008152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600061ffff1681526020016000151581525090565b815481835581811511612b83576003016004900481600301600490048360005260206000209182019101612b829190612b88565b5b505050565b612baa91905b80821115612ba6576000816000905550600101612b8e565b5090565b905600a165627a7a7230582015717bcf3fa31bf2be21ecb02081dfcf4cb586e801544bd791c7d5bcccf960400029"
}