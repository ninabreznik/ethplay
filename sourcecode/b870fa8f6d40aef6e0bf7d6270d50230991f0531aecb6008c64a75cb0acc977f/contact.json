{
  "address": "0x309dfe127881922c356fe8f571846150768c551e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ChessLotto",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-14\n*/\n\npragma solidity ^0.4.19;\ncontract ChessLotto {\n \n    //CONSTANT\n    uint256 private maxTickets;\n    uint256 public ticketPrice; \n     \n    //LOTTO REGISTER\n    uint256 public lottoIndex;\n    uint256 lastTicketTime;\n    \n    //LOTTO VARIABLES\n\tuint8 _direction;\n    uint256 numtickets;\n    uint256 totalBounty;\n    \n    address worldOwner;   \n     \n    event NewTicket(address indexed fromAddress, bool success);\n    event LottoComplete(address indexed fromAddress, uint indexed lottoIndex, uint256 reward);\n    \n    /// Create a new Lotto\n    function ChessLotto() public \n    {\n        worldOwner = msg.sender; \n        \n        ticketPrice = 0.00064 * 10**18;\n        maxTickets = 32;\n        \n\t\t_direction = 0;\n        lottoIndex = 1;\n        lastTicketTime = 0;\n        \n        numtickets = 0;\n        totalBounty = 0;\n    }\n\n    \n    function getBalance() public view returns (uint256 balance)\n    {\n        balance = 0;\n        \n        if(worldOwner == msg.sender) balance = this.balance;\n        \n        return balance;\n    }\n    \n    \n\tfunction withdraw() public \n    {\n        require(worldOwner == msg.sender);  \n        \n\t\t//reset values\n        lottoIndex += 1;\n        numtickets = 0;\n        totalBounty = 0;\n\t\t\n\t\tworldOwner.transfer(this.balance); \n    }\n    \n    \n    function getLastTicketTime() public view returns (uint256 time)\n    {\n        time = lastTicketTime; \n        return time;\n    }\n    \n\t\n    function AddTicket() public payable \n    {\n        require(msg.value == ticketPrice); \n        require(numtickets < maxTickets);\n        \n\t\t//update bif\n\t\tlastTicketTime = now;\n        numtickets += 1;\n        totalBounty += ticketPrice;\n        bool success = numtickets == maxTickets;\n\t\t\n        NewTicket(msg.sender, success);\n        \n\t\t//check if winner\n        if(success) \n        {\n            PayWinner(msg.sender);\n        } \n    }\n    \n    \n    function PayWinner( address winner ) private \n    { \n        require(numtickets == maxTickets);\n        \n\t\t//calc reward\n        uint ownerTax = totalBounty / 1000;\n        uint winnerPrice = totalBounty - ownerTax;\n        \n        LottoComplete(msg.sender, lottoIndex, winnerPrice);\n         \n\t\t//reset values\n        lottoIndex += 1;\n        numtickets = 0;\n        totalBounty = 0;\n\t\t\n\t\t//change max tickets to give unpredictability\n\t\tif(_direction == 0 && maxTickets < 64) maxTickets += 1;\n\t\tif(_direction == 1 && maxTickets > 32) maxTickets -= 1;\n\t\t\n\t\tif(_direction == 0 && maxTickets == 64) _direction = 1;\n\t\tif(_direction == 1 && maxTickets == 32) _direction = 0;\n         \n\t\t//give real money\n        worldOwner.transfer(ownerTax);\n        winner.transfer(winnerPrice); \n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060078054600160a060020a03191633179055660246139ca800006001908155602060009081556004805460ff191690556002919091556003819055600581905560065561040b806100636000396000f3006080604052600436106100775763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166312065fe0811461007c5780631209b1f6146100a357806319c97154146100b85780633ccfd60b146100cd5780637a15eb8d146100e4578063b204bb5d146100f9575b600080fd5b34801561008857600080fd5b50610091610101565b60408051918252519081900360200190f35b3480156100af57600080fd5b5061009161012b565b3480156100c457600080fd5b50610091610131565b3480156100d957600080fd5b506100e2610137565b005b3480156100f057600080fd5b506100916101ba565b6100e26101c0565b60075460009073ffffffffffffffffffffffffffffffffffffffff16331415610128575030315b90565b60015481565b60035490565b60075473ffffffffffffffffffffffffffffffffffffffff16331461015b57600080fd5b60028054600101905560006005819055600681905560075460405173ffffffffffffffffffffffffffffffffffffffff90911691303180156108fc02929091818181858888f193505050501580156101b7573d6000803e3d6000fd5b50565b60025481565b60015460009034146101d157600080fd5b600054600554106101e157600080fd5b504260035560058054600190810191829055546006805490910190556000546040805191909214808252915133917f23de19158786940de5dda06fd0b7b6cb38f4a275de8e5aa97841291762e9892c919081900360200190a280156101b7576101b7336000805460055482911461025757600080fd5b5050600654600254604080516103e8840493849003808252915191929133917fdc5dff36369474a27c3e9316fd6e5682d3eed3a3c023aa2a2ebcb553c954d387919081900360200190a36002805460010190556000600581905560065560045460ff161580156102c957506040600054105b156102d8576000805460010190555b60045460ff1660011480156102ef57506020600054115b156102ff57600080546000190190555b60045460ff1615801561031457506000546040145b15610327576004805460ff191660011790555b60045460ff16600114801561033e57506000546020145b1561034e576004805460ff191690555b60075460405173ffffffffffffffffffffffffffffffffffffffff9091169083156108fc029084906000818181858888f19350505050158015610395573d6000803e3d6000fd5b5060405173ffffffffffffffffffffffffffffffffffffffff84169082156108fc029083906000818181858888f193505050501580156103d9573d6000803e3d6000fd5b505050505600a165627a7a72305820b5a8e37e5249bb6df373e5b5e6a6387636ab1e4f9db40d0075b946dc1d2446ff0029"
}