{
  "address": "0xc70be5b7c19529ef642d16c10dfe91c58b5c3bf0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Mythereum: Card",
  "contractName": "CardToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-02\n*/\n\npragma solidity ^0.4.21;\n\n/**\n * @title Maths\n * A library to make working with numbers in Solidity hurt your brain less.\n */\nlibrary Maths {\n  /**\n   * @dev Adds two addends together, returns the sum\n   * @param addendA the first addend\n   * @param addendB the second addend\n   * @return sum the sum of the equation (e.g. addendA + addendB)\n   */\n  function plus(\n    uint256 addendA,\n    uint256 addendB\n  ) public pure returns (uint256 sum) {\n    sum = addendA + addendB;\n  }\n\n  /**\n   * @dev Subtracts the minuend from the subtrahend, returns the difference\n   * @param minuend the minuend\n   * @param subtrahend the subtrahend\n   * @return difference the difference (e.g. minuend - subtrahend)\n   */\n  function minus(\n    uint256 minuend,\n    uint256 subtrahend\n  ) public pure returns (uint256 difference) {\n    assert(minuend >= subtrahend);\n    difference = minuend - subtrahend;\n  }\n\n  /**\n   * @dev Multiplies two factors, returns the product\n   * @param factorA the first factor\n   * @param factorB the second factor\n   * @return product the product of the equation (e.g. factorA * factorB)\n   */\n  function mul(\n    uint256 factorA,\n    uint256 factorB\n  ) public pure returns (uint256 product) {\n    if (factorA == 0 || factorB == 0) return 0;\n    product = factorA * factorB;\n    assert(product / factorA == factorB);\n  }\n\n  /**\n   * @dev Multiplies two factors, returns the product\n   * @param factorA the first factor\n   * @param factorB the second factor\n   * @return product the product of the equation (e.g. factorA * factorB)\n   */\n  function times(\n    uint256 factorA,\n    uint256 factorB\n  ) public pure returns (uint256 product) {\n    return mul(factorA, factorB);\n  }\n\n  /**\n   * @dev Divides the dividend by divisor, returns the truncated quotient\n   * @param dividend the dividend\n   * @param divisor the divisor\n   * @return quotient the quotient of the equation (e.g. dividend / divisor)\n   */\n  function div(\n    uint256 dividend,\n    uint256 divisor\n  ) public pure returns (uint256 quotient) {\n    quotient = dividend / divisor;\n    assert(quotient * divisor == dividend);\n  }\n\n  /**\n   * @dev Divides the dividend by divisor, returns the truncated quotient\n   * @param dividend the dividend\n   * @param divisor the divisor\n   * @return quotient the quotient of the equation (e.g. dividend / divisor)\n   */\n  function dividedBy(\n    uint256 dividend,\n    uint256 divisor\n  ) public pure returns (uint256 quotient) {\n    return div(dividend, divisor);\n  }\n\n  /**\n   * @dev Divides the dividend by divisor, returns the quotient and remainder\n   * @param dividend the dividend\n   * @param divisor the divisor\n   * @return quotient the quotient of the equation (e.g. dividend / divisor)\n   * @return remainder the remainder of the equation (e.g. dividend % divisor)\n   */\n  function divideSafely(\n    uint256 dividend,\n    uint256 divisor\n  ) public pure returns (uint256 quotient, uint256 remainder) {\n    quotient = div(dividend, divisor);\n    remainder = dividend % divisor;\n  }\n\n  /**\n   * @dev Returns the lesser of two values.\n   * @param a the first value\n   * @param b the second value\n   * @return result the lesser of the two values\n   */\n  function min(\n    uint256 a,\n    uint256 b\n  ) public pure returns (uint256 result) {\n    result = a <= b ? a : b;\n  }\n\n  /**\n   * @dev Returns the greater of two values.\n   * @param a the first value\n   * @param b the second value\n   * @return result the greater of the two values\n   */\n  function max(\n    uint256 a,\n    uint256 b\n  ) public pure returns (uint256 result) {\n    result = a >= b ? a : b;\n  }\n\n  /**\n   * @dev Determines whether a value is less than another.\n   * @param a the first value\n   * @param b the second value\n   * @return isTrue whether a is less than b\n   */\n  function isLessThan(uint256 a, uint256 b) public pure returns (bool isTrue) {\n    isTrue = a < b;\n  }\n\n  /**\n   * @dev Determines whether a value is equal to or less than another.\n   * @param a the first value\n   * @param b the second value\n   * @return isTrue whether a is less than or equal to b\n   */\n  function isAtMost(uint256 a, uint256 b) public pure returns (bool isTrue) {\n    isTrue = a <= b;\n  }\n\n  /**\n   * @dev Determines whether a value is greater than another.\n   * @param a the first value\n   * @param b the second value\n   * @return isTrue whether a is greater than b\n   */\n  function isGreaterThan(uint256 a, uint256 b) public pure returns (bool isTrue) {\n    isTrue = a > b;\n  }\n\n  /**\n   * @dev Determines whether a value is equal to or greater than another.\n   * @param a the first value\n   * @param b the second value\n   * @return isTrue whether a is less than b\n   */\n  function isAtLeast(uint256 a, uint256 b) public pure returns (bool isTrue) {\n    isTrue = a >= b;\n  }\n}\n\n/**\n * @title Manageable\n */\ncontract Manageable {\n  address public owner;\n  address public manager;\n\n  event OwnershipChanged(address indexed previousOwner, address indexed newOwner);\n  event ManagementChanged(address indexed previousManager, address indexed newManager);\n\n  /**\n   * @dev The Manageable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Manageable() public {\n    owner = msg.sender;\n    manager = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner or manager.\n   */\n  modifier onlyManagement() {\n    require(msg.sender == owner || msg.sender == manager);\n    _;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipChanged(owner, newOwner);\n    owner = newOwner;\n  }\n\n  /**\n   * @dev Allows the owner or manager to replace the current manager\n   * @param newManager The address to give contract management rights.\n   */\n  function replaceManager(address newManager) public onlyManagement {\n    require(newManager != address(0));\n    emit ManagementChanged(manager, newManager);\n    manager = newManager;\n  }\n}\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic {\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId) public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  ) public;\n}\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC721Basic {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\n  function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n  function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n *  from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   *  after a `safetransfer`. This function MAY throw to revert and reject the\n   *  transfer. This function MUST use 50,000 gas or less. Return of other\n   *  than the magic value MUST result in the transaction being reverted.\n   *  Note: the contract address is always the message sender.\n   * @param _from The sending address\n   * @param _tokenId The NFT identifier which is being transfered\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n   */\n  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\n}\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721BasicToken is ERC721Basic {\n  using Maths for uint256;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) internal tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) internal ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  /**\n   * @dev Guarantees msg.sender is owner of the given token\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n   */\n  modifier onlyOwnerOf(uint256 _tokenId) {\n    require(ownerOf(_tokenId) == msg.sender);\n    _;\n  }\n\n  /**\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n   * @param _tokenId uint256 ID of the token to validate\n   */\n  modifier canTransfer(uint256 _tokenId) {\n    require(isApprovedOrOwner(msg.sender, _tokenId));\n    _;\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(_owner != address(0));\n    return ownedTokensCount[_owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address holder = tokenOwner[_tokenId];\n    require(holder != address(0));\n    return holder;\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param _tokenId uint256 ID of the token to query the existance of\n   * @return whether the token exists\n   */\n  function exists(uint256 _tokenId) public view returns (bool) {\n    address holder = tokenOwner[_tokenId];\n    return holder != address(0);\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * @dev The zero address indicates there is no approved address.\n   * @dev There can only be one approved address per token at a given time.\n   * @dev Can only be called by the token owner or an approved operator.\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId) public {\n    address holder = ownerOf(_tokenId);\n    require(_to != holder);\n    require(msg.sender == holder || isApprovedForAll(holder, msg.sender));\n\n    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n      tokenApprovals[_tokenId] = _to;\n      emit Approval(holder, _to, _tokenId);\n    }\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for a the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param _to operator address to set the approval\n   * @param _approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address _to, bool _approved) public {\n    require(_to != msg.sender);\n    operatorApprovals[msg.sender][_to] = _approved;\n    emit ApprovalForAll(msg.sender, _to, _approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n    return operatorApprovals[_owner][_operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * @dev Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\n    require(_from != address(0));\n    require(_to != address(0));\n\n    clearApproval(_from, _tokenId);\n    removeTokenFrom(_from, _tokenId);\n    addTokenTo(_to, _tokenId);\n\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\n   *  which is called upon a safe transfer, and return the magic value\n   *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\n   *  the transfer is reverted.\n   * @dev Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\n   *  which is called upon a safe transfer, and return the magic value\n   *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\n   *  the transfer is reverted.\n   * @dev Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    transferFrom(_from, _to, _tokenId);\n    // solium-disable-next-line arg-overflow\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\n    address holder = ownerOf(_tokenId);\n    return _spender == holder || getApproved(_tokenId) == _spender || isApprovedForAll(holder, _spender);\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * @dev Reverts if the given token ID already exists\n   * @param _to The address that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addTokenTo(_to, _tokenId);\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * @dev Reverts if the token does not exist\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    clearApproval(_owner, _tokenId);\n    removeTokenFrom(_owner, _tokenId);\n    emit Transfer(_owner, address(0), _tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * @dev Reverts if the given address is not indeed the owner of the token\n   * @param _owner owner of the token\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function clearApproval(address _owner, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _owner);\n    if (tokenApprovals[_tokenId] != address(0)) {\n      tokenApprovals[_tokenId] = address(0);\n      emit Approval(_owner, address(0), _tokenId);\n    }\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    ownedTokensCount[_to] = ownedTokensCount[_to].plus(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _from);\n    ownedTokensCount[_from] = ownedTokensCount[_from].minus(1);\n    tokenOwner[_tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * @dev The call is not executed if the target address is not a contract\n   * @param _from address representing the previous owner of the given token ID\n   * @param _to target address that will receive the tokens\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallSafeTransfer(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!isContract(_to)) {\n      return true;\n    }\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\n    return (retval == ERC721_RECEIVED);\n  }\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   *  as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\n    return size > 0;\n  }\n}\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Token is ERC721, ERC721BasicToken {\n  // Mapping from owner to list of owned token IDs\n  mapping (address => uint256[]) internal ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) internal ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] internal allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) internal allTokensIndex;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) internal tokenURIs;\n\n  /**\n   * @dev Constructor function\n   */\n  function ERC721Token() public { }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * @dev Throws if the token ID does not exist. May return an empty string.\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string) {\n    require(exists(_tokenId));\n    return tokenURIs[_tokenId];\n  }\n\n  /**\n   * @dev Gets a list of token IDs owned by the requested address\n   * @param _owner address owning the tokens list to be accessed\n   * @return uint256[] list of token IDs owned by the requested address\n   */\n  function tokensOf(address _owner) public view returns (uint256[]) {\n    return ownedTokens[_owner];\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param _owner address owning the tokens list to be accessed\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\n    require(_index < balanceOf(_owner));\n    return ownedTokens[_owner][_index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * @dev Reverts if the index is greater or equal to the total number of tokens\n   * @param _index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\n    require(_index < totalSupply());\n    return allTokens[_index];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * @dev Reverts if the token ID does not exist\n   * @param _tokenId uint256 ID of the token to set its URI\n   * @param _uri string URI to assign\n   */\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n    require(exists(_tokenId));\n    tokenURIs[_tokenId] = _uri;\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    super.addTokenTo(_to, _tokenId);\n    uint256 length = ownedTokens[_to].length;\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    super.removeTokenFrom(_from, _tokenId);\n\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = ownedTokens[_from].length.minus(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n    ownedTokens[_from][lastTokenIndex] = 0;\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokens[_from].length--;\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * @dev Reverts if the given token ID already exists\n   * @param _to address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    super._mint(_to, _tokenId);\n\n    allTokensIndex[_tokenId] = allTokens.length;\n    allTokens.push(_tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * @dev Reverts if the token does not exist\n   * @param _owner owner of the token to burn\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    super._burn(_owner, _tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\n      delete tokenURIs[_tokenId];\n    }\n\n    // Reorg all tokens array\n    uint256 tokenIndex = allTokensIndex[_tokenId];\n    uint256 lastTokenIndex = allTokens.length.minus(1);\n    uint256 lastToken = allTokens[lastTokenIndex];\n\n    allTokens[tokenIndex] = lastToken;\n    allTokens[lastTokenIndex] = 0;\n\n    allTokens.length--;\n    allTokensIndex[_tokenId] = 0;\n    allTokensIndex[lastToken] = tokenIndex;\n  }\n\n}\n\ncontract CardToken is ERC721Token, Manageable {\n  string public constant name = \"Mythereum Card\";\n  string public constant symbol = \"CARD\";\n\n  mapping (uint8 => string) public className;\n  mapping (uint8 => Card[]) public cardsInEdition;\n  uint8 public latestEditionReleased;\n\n  struct Card {\n    string    name;\n    uint8     class;\n    uint8     classVariant;\n    uint256   damagePoints;\n    uint256   shieldPoints;\n    uint256   abilityId;\n  }\n\n  struct Ability {\n    string  name;\n    bool    canBeBlocked;\n    uint8   blackMagicCost;\n    uint8   grayMagicCost;\n    uint8   whiteMagicCost;\n    uint256 addedDamage;\n    uint256 addedShield;\n  }\n\n  Card[] public cards;\n  Ability[] public abilities;\n\n  function isEditionAvailable(uint8 _editionNumber) public view returns (bool) {\n    return _editionNumber <= latestEditionReleased;\n  }\n\n  function mintRandomCards(\n    address _owner,\n    uint8 _editionNumber,\n    uint8 _numCards\n  ) public onlyManagement returns (bool) {\n    require(isEditionAvailable(_editionNumber));\n    for(uint8 i = 0; i < _numCards; i++) {\n      Card storage card = cardsInEdition[_editionNumber][\n        uint256(keccak256(now, _owner, _editionNumber, _numCards, i)) % cardsInEdition[_editionNumber].length\n      ];\n\n      _cloneCard(card, _owner);\n    }\n    return true;\n  }\n\n  function mintSpecificCard(\n    address _owner,\n    uint8   _editionNumber,\n    uint256 _cardIndex\n  ) public onlyManagement returns (bool) {\n    require(isEditionAvailable(_editionNumber));\n    require(_cardIndex < cardsInEdition[_editionNumber].length);\n    _cloneCard(cardsInEdition[_editionNumber][_cardIndex], _owner);\n  }\n\n  function mintSpecificCards(\n    address   _owner,\n    uint8     _editionNumber,\n    uint256[] _cardIndexes\n  ) public onlyManagement returns (bool) {\n    require(isEditionAvailable(_editionNumber));\n    require(_cardIndexes.length > 0 && _cardIndexes.length <= 10);\n\n    for(uint8 i = 0; i < _cardIndexes.length; i++) {\n      require(_cardIndexes[i] < cardsInEdition[_editionNumber].length);\n      _cloneCard(cardsInEdition[_editionNumber][_cardIndexes[i]], _owner);\n    }\n  }\n\n  function improveCard(\n    uint256 _tokenId,\n    uint256 _addedDamage,\n    uint256 _addedShield\n  ) public onlyManagement returns (bool) {\n    require(exists(_tokenId));\n    Card storage card = cards[_tokenId];\n    card.damagePoints = card.damagePoints.plus(_addedDamage);\n    card.shieldPoints = card.shieldPoints.plus(_addedShield);\n    return true;\n  }\n\n  function destroyCard(uint256 _tokenId) public onlyManagement returns (bool) {\n    require(exists(_tokenId));\n    _burn(ownerOf(_tokenId), _tokenId);\n    return true;\n  }\n\n  function setLatestEdition(uint8 _editionNumber) public onlyManagement {\n    require(cardsInEdition[_editionNumber].length.isAtLeast(1));\n    latestEditionReleased = _editionNumber;\n  }\n\n  function setTokenURI(uint256 _tokenId, string _uri) public onlyManagement {\n    require(exists(_tokenId));\n    tokenURIs[_tokenId] = _uri;\n  }\n\n  function addAbility(\n    string  _name,\n    bool    _canBeBlocked,\n    uint8   _blackMagicCost,\n    uint8   _grayMagicCost,\n    uint8   _whiteMagicCost,\n    uint256 _addedDamage,\n    uint256 _addedShield\n  ) public onlyManagement {\n    abilities.push(\n      Ability(\n        _name,\n        _canBeBlocked,\n        _blackMagicCost,\n        _grayMagicCost,\n        _whiteMagicCost,\n        _addedDamage,\n        _addedShield\n      )\n    );\n  }\n\n  function replaceAbility(\n    uint256 _abilityId,\n    string  _name,\n    bool    _canBeBlocked,\n    uint8   _blackMagicCost,\n    uint8   _grayMagicCost,\n    uint8   _whiteMagicCost,\n    uint256 _addedDamage,\n    uint256 _addedShield\n  ) public onlyManagement {\n    require(_abilityId.isLessThan(abilities.length));\n    abilities[_abilityId].name           = _name;\n    abilities[_abilityId].canBeBlocked   = _canBeBlocked;\n    abilities[_abilityId].blackMagicCost = _blackMagicCost;\n    abilities[_abilityId].grayMagicCost  = _grayMagicCost;\n    abilities[_abilityId].whiteMagicCost = _whiteMagicCost;\n    abilities[_abilityId].addedDamage    = _addedDamage;\n    abilities[_abilityId].addedShield    = _addedShield;\n  }\n\n  function addCardToEdition(\n    uint8   _editionNumber,\n    string  _name,\n    uint8   _classId,\n    uint8   _classVariant,\n    uint256 _damagePoints,\n    uint256 _shieldPoints,\n    uint256 _abilityId\n  ) public onlyManagement {\n    require(_abilityId.isLessThan(abilities.length));\n\n    cardsInEdition[_editionNumber].push(\n      Card({\n        name:         _name,\n        class:        _classId,\n        classVariant: _classVariant,\n        damagePoints: _damagePoints,\n        shieldPoints: _shieldPoints,\n        abilityId:    _abilityId\n      })\n    );\n  }\n\n  function setClassName(uint8 _classId, string _name) public onlyManagement {\n    className[_classId] = _name;\n  }\n\n  function _cloneCard(Card storage card, address owner) internal {\n    require(card.damagePoints > 0 || card.shieldPoints > 0);\n    uint256 tokenId = cards.length;\n    cards.push(card);\n    _mint(owner, tokenId);\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_editionNumber\",\"type\":\"uint8\"},{\"name\":\"_numCards\",\"type\":\"uint8\"}],\"name\":\"mintRandomCards\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"replaceManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint8\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setClassName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"destroyCard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardsInEdition\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"class\",\"type\":\"uint8\"},{\"name\":\"classVariant\",\"type\":\"uint8\"},{\"name\":\"damagePoints\",\"type\":\"uint256\"},{\"name\":\"shieldPoints\",\"type\":\"uint256\"},{\"name\":\"abilityId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint8\"}],\"name\":\"setLatestEdition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_editionNumber\",\"type\":\"uint8\"},{\"name\":\"_cardIndexes\",\"type\":\"uint256[]\"}],\"name\":\"mintSpecificCards\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cards\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"class\",\"type\":\"uint8\"},{\"name\":\"classVariant\",\"type\":\"uint8\"},{\"name\":\"damagePoints\",\"type\":\"uint256\"},{\"name\":\"shieldPoints\",\"type\":\"uint256\"},{\"name\":\"abilityId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint8\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_classId\",\"type\":\"uint8\"},{\"name\":\"_classVariant\",\"type\":\"uint8\"},{\"name\":\"_damagePoints\",\"type\":\"uint256\"},{\"name\":\"_shieldPoints\",\"type\":\"uint256\"},{\"name\":\"_abilityId\",\"type\":\"uint256\"}],\"name\":\"addCardToEdition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestEditionReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_abilityId\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_canBeBlocked\",\"type\":\"bool\"},{\"name\":\"_blackMagicCost\",\"type\":\"uint8\"},{\"name\":\"_grayMagicCost\",\"type\":\"uint8\"},{\"name\":\"_whiteMagicCost\",\"type\":\"uint8\"},{\"name\":\"_addedDamage\",\"type\":\"uint256\"},{\"name\":\"_addedShield\",\"type\":\"uint256\"}],\"name\":\"replaceAbility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"abilities\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"canBeBlocked\",\"type\":\"bool\"},{\"name\":\"blackMagicCost\",\"type\":\"uint8\"},{\"name\":\"grayMagicCost\",\"type\":\"uint8\"},{\"name\":\"whiteMagicCost\",\"type\":\"uint8\"},{\"name\":\"addedDamage\",\"type\":\"uint256\"},{\"name\":\"addedShield\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_addedDamage\",\"type\":\"uint256\"},{\"name\":\"_addedShield\",\"type\":\"uint256\"}],\"name\":\"improveCard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_canBeBlocked\",\"type\":\"bool\"},{\"name\":\"_blackMagicCost\",\"type\":\"uint8\"},{\"name\":\"_grayMagicCost\",\"type\":\"uint8\"},{\"name\":\"_whiteMagicCost\",\"type\":\"uint8\"},{\"name\":\"_addedDamage\",\"type\":\"uint256\"},{\"name\":\"_addedShield\",\"type\":\"uint256\"}],\"name\":\"addAbility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_editionNumber\",\"type\":\"uint8\"},{\"name\":\"_cardIndex\",\"type\":\"uint256\"}],\"name\":\"mintSpecificCard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"className\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint8\"}],\"name\":\"isEditionAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagementChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]",
  "bytecode": "606060405233600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061481a806100956000396000f3006060604052600436106101d8576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063051cb630146101dd57806306fdde0314610246578063081812fc146102d4578063095ea7b314610337578063162094c41461037957806318160ddd146103df578063234479821461040857806323b872dd146104415780632f745c59146104a2578063345da007146104f857806335d1f6061461056157806336e7367d1461059c57806342842e0e14610673578063481c6a75146106d45780634f558e79146107295780634f6ccce7146107645780635a3f26721461079b5780636352211e146108295780636aa5cdfa1461088c57806370a08231146108b257806372388f7c146108ff5780638da5cb5b1461099c5780638dc10768146109f157806395d89b4114610abc578063a22cb46514610b4a578063a587686d14610b8e578063a9c3847614610c2a578063aaab302514610c59578063b88d4fde14610d00578063c87b56dd14610da4578063cae0d33514610e40578063d54c2a6314610f1c578063db0dd71e14610f69578063e985e9c514611007578063ea8f669114611077578063f2fde38b146110dd578063f319428d14611116578063fd19368a146111b5575b600080fd5b34156101e857600080fd5b61022c600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803560ff1690602001909190803560ff169060200190919050506111f3565b604051808215151515815260200191505060405180910390f35b341561025157600080fd5b610259611440565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561029957808201518184015260208101905061027e565b50505050905090810190601f1680156102c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102df57600080fd5b6102f56004808035906020019091905050611479565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561034257600080fd5b610377600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506114b6565b005b341561038457600080fd5b6103dd600480803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061167c565b005b34156103ea57600080fd5b6103f2611770565b6040518082815260200191505060405180910390f35b341561041357600080fd5b61043f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061177d565b005b341561044c57600080fd5b6104a0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061192d565b005b34156104ad57600080fd5b6104e2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611a44565b6040518082815260200191505060405180910390f35b341561050357600080fd5b61055f600480803560ff1690602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611abc565b005b341561056c57600080fd5b6105826004808035906020019091905050611ba2565b604051808215151515815260200191505060405180910390f35b34156105a757600080fd5b6105c9600480803560ff16906020019091908035906020019091905050611c87565b60405180806020018760ff1660ff1681526020018660ff1660ff168152602001858152602001848152602001838152602001828103825288818151815260200191508051906020019080838360005b83811015610633578082015181840152602081019050610618565b50505050905090810190601f1680156106605780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b341561067e57600080fd5b6106d2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611d91565b005b34156106df57600080fd5b6106e7611dc9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561073457600080fd5b61074a6004808035906020019091905050611def565b604051808215151515815260200191505060405180910390f35b341561076f57600080fd5b6107856004808035906020019091905050611e60565b6040518082815260200191505060405180910390f35b34156107a657600080fd5b6107d2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611e99565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156108155780820151818401526020810190506107fa565b505050509050019250505060405180910390f35b341561083457600080fd5b61084a6004808035906020019091905050611f36565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561089757600080fd5b6108b0600480803560ff16906020019091905050611fb3565b005b34156108bd57600080fd5b6108e9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612138565b6040518082815260200191505060405180910390f35b341561090a57600080fd5b610982600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803560ff16906020019091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506121bc565b604051808215151515815260200191505060405180910390f35b34156109a757600080fd5b6109af612366565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156109fc57600080fd5b610a12600480803590602001909190505061238c565b60405180806020018760ff1660ff1681526020018660ff1660ff168152602001858152602001848152602001838152602001828103825288818151815260200191508051906020019080838360005b83811015610a7c578082015181840152602081019050610a61565b50505050905090810190601f168015610aa95780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b3415610ac757600080fd5b610acf612489565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b0f578082015181840152602081019050610af4565b50505050905090810190601f168015610b3c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610b5557600080fd5b610b8c600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803515159060200190919050506124c2565b005b3415610b9957600080fd5b610c28600480803560ff1690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803560ff1690602001909190803560ff169060200190919080359060200190919080359060200190919080359060200190919050506125fe565b005b3415610c3557600080fd5b610c3d61284a565b604051808260ff1660ff16815260200191505060405180910390f35b3415610c6457600080fd5b610cfe600480803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035151590602001909190803560ff1690602001909190803560ff1690602001909190803560ff1690602001909190803590602001909190803590602001909190505061285d565b005b3415610d0b57600080fd5b610da2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050612b18565b005b3415610daf57600080fd5b610dc56004808035906020019091905050612b57565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e05578082015181840152602081019050610dea565b50505050905090810190601f168015610e325780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610e4b57600080fd5b610e616004808035906020019091905050612c26565b6040518080602001881515151581526020018760ff1660ff1681526020018660ff1660ff1681526020018560ff1660ff168152602001848152602001838152602001828103825289818151815260200191508051906020019080838360005b83811015610edb578082015181840152602081019050610ec0565b50505050905090810190601f168015610f085780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3415610f2757600080fd5b610f4f6004808035906020019091908035906020019091908035906020019091905050612d43565b604051808215151515815260200191505060405180910390f35b3415610f7457600080fd5b611005600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035151590602001909190803560ff1690602001909190803560ff1690602001909190803560ff16906020019091908035906020019091908035906020019091905050612f67565b005b341561101257600080fd5b61105d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050613143565b604051808215151515815260200191505060405180910390f35b341561108257600080fd5b6110c3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803560ff169060200190919080359060200190919050506131d7565b604051808215151515815260200191505060405180910390f35b34156110e857600080fd5b611114600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061330f565b005b341561112157600080fd5b61113a600480803560ff16906020019091905050613467565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561117a57808201518184015260208101905061115f565b50505050905090810190601f1680156111a75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156111c057600080fd5b6111d9600480803560ff16906020019091905050613517565b604051808215151515815260200191505060405180910390f35b6000806000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806112a15750600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156112ac57600080fd5b6112b585613517565b15156112c057600080fd5b600091505b8360ff168260ff16101561143357600c60008660ff1660ff168152602001908152602001600020600c60008760ff1660ff168152602001908152602001600020805490504288888887604051808681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018460ff1660ff167f01000000000000000000000000000000000000000000000000000000000000000281526001018360ff1660ff167f01000000000000000000000000000000000000000000000000000000000000000281526001018260ff1660ff167f0100000000000000000000000000000000000000000000000000000000000000028152600101955050505050506040518091039020600190048115156113ff57fe5b0681548110151561140c57fe5b906000526020600020906005020190506114268187613539565b81806001019250506112c5565b6001925050509392505050565b6040805190810160405280600e81526020017f4d797468657265756d204361726400000000000000000000000000000000000081525081565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006114c182611f36565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156114fe57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061153e575061153d8133613143565b5b151561154957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff1661156a83611479565b73ffffffffffffffffffffffffffffffffffffffff161415806115ba5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b1561167757826001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a35b505050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806117255750600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561173057600080fd5b61173982611def565b151561174457600080fd5b8060086000848152602001908152602001600020908051906020019061176b929190614418565b505050565b6000600680549050905090565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806118265750600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561183157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561186d57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fc6a1baebe57160c2d8aaa4affd797ada64a54753248acc4887748a2d99f5233260405160405180910390a380600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b806119383382613642565b151561194357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561197f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156119bb57600080fd5b6119c584836136d7565b6119cf8483613840565b6119d98383613ad3565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050565b6000611a4f83612138565b82101515611a5c57600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515611aa857fe5b906000526020600020900154905092915050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611b655750600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611b7057600080fd5b80600b60008460ff1660ff1681526020019081526020016000209080519060200190611b9d929190614418565b505050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611c4d5750600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611c5857600080fd5b611c6182611def565b1515611c6c57600080fd5b611c7e611c7883611f36565b83613ba7565b60019050919050565b600c60205281600052604060002081815481101515611ca257fe5b906000526020600020906005020160009150915050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d4f5780601f10611d2457610100808354040283529160200191611d4f565b820191906000526020600020905b815481529060010190602001808311611d3257829003601f168201915b5050505050908060010160009054906101000a900460ff16908060010160019054906101000a900460ff16908060020154908060030154908060040154905086565b80611d9c3382613642565b1515611da757600080fd5b611dc38484846020604051908101604052806000815250612b18565b50505050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b6000611e6a611770565b82101515611e7757600080fd5b600682815481101515611e8657fe5b9060005260206000209001549050919050565b611ea1614498565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611f2a57602002820191906000526020600020905b815481526020019060010190808311611f16575b50505050509050919050565b60008060008084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611faa57600080fd5b80915050919050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061205c5750600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561206757600080fd5b600c60008260ff1660ff1681526020019081526020016000208054905073b5f1efa8a3267cce1aea000dd2cc7a0778aa829963a6bdcc17909160016040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060206040518083038186803b15156120f857600080fd5b5af4151561210557600080fd5b50505060405180519050151561211a57600080fd5b80600d60006101000a81548160ff021916908360ff16021790555050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561217557600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806122685750600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561227357600080fd5b61227c84613517565b151561228757600080fd5b6000835111801561229a5750600a835111155b15156122a557600080fd5b600090505b82518160ff16101561235e57600c60008560ff1660ff16815260200190815260200160002080549050838260ff168151811015156122e457fe5b906020019060200201511015156122fa57600080fd5b612351600c60008660ff1660ff168152602001908152602001600020848360ff1681518110151561232757fe5b9060200190602002015181548110151561233d57fe5b906000526020600020906005020186613539565b80806001019150506122aa565b509392505050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e8181548110151561239b57fe5b9060005260206000209060050201600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124475780601f1061241c57610100808354040283529160200191612447565b820191906000526020600020905b81548152906001019060200180831161242a57829003601f168201915b5050505050908060010160009054906101000a900460ff16908060010160019054906101000a900460ff16908060020154908060030154908060040154905086565b6040805190810160405280600481526020017f434152440000000000000000000000000000000000000000000000000000000081525081565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156124fd57600080fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806126a75750600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156126b257600080fd5b8073b5f1efa8a3267cce1aea000dd2cc7a0778aa829963e9970b6c9091600f805490506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060206040518083038186803b151561272b57600080fd5b5af4151561273857600080fd5b50505060405180519050151561274d57600080fd5b600c60008860ff1660ff168152602001908152602001600020805480600101828161277891906144ac565b9160005260206000209060050201600060c0604051908101604052808a81526020018960ff1681526020018860ff16815260200187815260200186815260200185815250909190915060008201518160000190805190602001906127dd9291906144de565b5060208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160010160016101000a81548160ff021916908360ff160217905550606082015181600201556080820151816003015560a0820151816004015550505050505050505050565b600d60009054906101000a900460ff1681565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806129065750600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561291157600080fd5b8773b5f1efa8a3267cce1aea000dd2cc7a0778aa829963e9970b6c9091600f805490506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060206040518083038186803b151561298a57600080fd5b5af4151561299757600080fd5b5050506040518051905015156129ac57600080fd5b86600f898154811015156129bc57fe5b906000526020600020906004020160000190805190602001906129e0929190614418565b5085600f898154811015156129f157fe5b906000526020600020906004020160010160006101000a81548160ff02191690831515021790555084600f89815481101515612a2957fe5b906000526020600020906004020160010160016101000a81548160ff021916908360ff16021790555083600f89815481101515612a6257fe5b906000526020600020906004020160010160026101000a81548160ff021916908360ff16021790555082600f89815481101515612a9b57fe5b906000526020600020906004020160010160036101000a81548160ff021916908360ff16021790555081600f89815481101515612ad457fe5b90600052602060002090600402016002018190555080600f89815481101515612af957fe5b9060005260206000209060040201600301819055505050505050505050565b81612b233382613642565b1515612b2e57600080fd5b612b3985858561192d565b612b4585858585613d5a565b1515612b5057600080fd5b5050505050565b612b5f61455e565b612b6882611def565b1515612b7357600080fd5b600860008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c1a5780601f10612bef57610100808354040283529160200191612c1a565b820191906000526020600020905b815481529060010190602001808311612bfd57829003601f168201915b50505050509050919050565b600f81815481101515612c3557fe5b9060005260206000209060040201600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612ce15780601f10612cb657610100808354040283529160200191612ce1565b820191906000526020600020905b815481529060010190602001808311612cc457829003601f168201915b5050505050908060010160009054906101000a900460ff16908060010160019054906101000a900460ff16908060010160029054906101000a900460ff16908060010160039054906101000a900460ff16908060020154908060030154905087565b600080600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612def5750600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515612dfa57600080fd5b612e0385611def565b1515612e0e57600080fd5b600e85815481101515612e1d57fe5b90600052602060002090600502019050806002015473b5f1efa8a3267cce1aea000dd2cc7a0778aa82996366098d4f9091866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060206040518083038186803b1515612ea557600080fd5b5af41515612eb257600080fd5b505050604051805190508160020181905550806003015473b5f1efa8a3267cce1aea000dd2cc7a0778aa82996366098d4f9091856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060206040518083038186803b1515612f3c57600080fd5b5af41515612f4957600080fd5b50505060405180519050816003018190555060019150509392505050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806130105750600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561301b57600080fd5b600f805480600101828161302f9190614572565b9160005260206000209060040201600060e0604051908101604052808b81526020018a151581526020018960ff1681526020018860ff1681526020018760ff168152602001868152602001858152509091909150600082015181600001908051906020019061309f9291906144de565b5060208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a81548160ff021916908360ff16021790555060608201518160010160026101000a81548160ff021916908360ff16021790555060808201518160010160036101000a81548160ff021916908360ff16021790555060a0820151816002015560c0820151816003015550505050505050505050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806132825750600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561328d57600080fd5b61329683613517565b15156132a157600080fd5b600c60008460ff1660ff16815260200190815260200160002080549050821015156132cb57600080fd5b613308600c60008560ff1660ff168152602001908152602001600020838154811015156132f457fe5b906000526020600020906005020185613539565b9392505050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561336b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156133a757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f0384899bd253d83b23daa4d29aaa2efe0563d1132b43101e9ad667235aeb951b60405160405180910390a380600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600b6020528060005260406000206000915090508054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561350f5780601f106134e45761010080835404028352916020019161350f565b820191906000526020600020905b8154815290600101906020018083116134f257829003601f168201915b505050505081565b6000600d60009054906101000a900460ff1660ff168260ff1611159050919050565b60008083600201541180613551575060008360030154115b151561355c57600080fd5b600e805490509050600e805480600101828161357891906144ac565b91600052602060002090600502016000859091909150600082018160000190805460018160011615610100020316600290046135b59291906145a4565b506001820160009054906101000a900460ff168160010160006101000a81548160ff021916908360ff1602179055506001820160019054906101000a900460ff168160010160016101000a81548160ff021916908360ff16021790555060028201548160020155600382015481600301556004820154816004015550505061363d8282613f0d565b505050565b60008061364e83611f36565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806136bd57508373ffffffffffffffffffffffffffffffffffffffff166136a584611479565b73ffffffffffffffffffffffffffffffffffffffff16145b806136ce57506136cd8185613143565b5b91505092915050565b8173ffffffffffffffffffffffffffffffffffffffff166136f782611f36565b73ffffffffffffffffffffffffffffffffffffffff1614151561371957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561383c5760006001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b600080600061384f8585613f61565b60056000858152602001908152602001600020549250600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905073b5f1efa8a3267cce1aea000dd2cc7a0778aa829963f4f3bdc1909160016040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060206040518083038186803b151561391c57600080fd5b5af4151561392957600080fd5b505050604051805190509150600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561398157fe5b906000526020600020900154905080600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848154811015156139dc57fe5b9060005260206000209001819055506000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481101515613a3957fe5b906000526020600020900181905550600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480919060019003613a9a919061462b565b50600060056000868152602001908152602001600020819055508260056000838152602001908152602001600020819055505050505050565b6000613adf8383614107565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806001018281613b759190614657565b916000526020600020900160008490919091505550806005600084815260200190815260200160002081905550505050565b6000806000613bb685856142d7565b600060086000868152602001908152602001600020805460018160011615610100020316600290049050141515613c0757600860008581526020019081526020016000206000613c069190614683565b5b6007600085815260200190815260200160002054925060068054905073b5f1efa8a3267cce1aea000dd2cc7a0778aa829963f4f3bdc1909160016040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060206040518083038186803b1515613c9757600080fd5b5af41515613ca457600080fd5b505050604051805190509150600682815481101515613cbf57fe5b906000526020600020900154905080600684815481101515613cdd57fe5b9060005260206000209001819055506000600683815481101515613cfd57fe5b9060005260206000209001819055506006805480919060019003613d21919061462b565b50600060076000868152602001908152602001600020819055508260076000838152602001908152602001600020819055505050505050565b600080613d6685614355565b1515613d755760019150613f04565b8473ffffffffffffffffffffffffffffffffffffffff1663f0b9e5ba8786866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613e37578082015181840152602081019050613e1c565b50505050905090810190601f168015613e645780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b1515613e8457600080fd5b5af11515613e9157600080fd5b50505060405180519050905063f0b9e5ba7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505b50949350505050565b613f178282614368565b600680549050600760008381526020019081526020016000208190555060068054806001018281613f489190614657565b9160005260206000209001600083909190915055505050565b8173ffffffffffffffffffffffffffffffffffffffff16613f8182611f36565b73ffffffffffffffffffffffffffffffffffffffff16141515613fa357600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205473b5f1efa8a3267cce1aea000dd2cc7a0778aa829963f4f3bdc1909160016040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060206040518083038186803b151561405757600080fd5b5af4151561406457600080fd5b50505060405180519050600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600080600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600073ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561417457600080fd5b8160008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205473b5f1efa8a3267cce1aea000dd2cc7a0778aa82996366098d4f909160016040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060206040518083038186803b151561427957600080fd5b5af4151561428657600080fd5b50505060405180519050600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6142e182826136d7565b6142eb8282613840565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156143a457600080fd5b6143ae8282613ad3565b8173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061445957805160ff1916838001178555614487565b82800160010185558215614487579182015b8281111561448657825182559160200191906001019061446b565b5b50905061449491906146cb565b5090565b602060405190810160405280600081525090565b8154818355818115116144d9576005028160050283600052602060002091820191016144d891906146f0565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061451f57805160ff191683800117855561454d565b8280016001018555821561454d579182015b8281111561454c578251825591602001919060010190614531565b5b50905061455a91906146cb565b5090565b602060405190810160405280600081525090565b81548183558181151161459f5760040281600402836000526020600020918201910161459e919061475f565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106145dd578054855561461a565b8280016001018555821561461a57600052602060002091601f016020900482015b828111156146195782548255916001019190600101906145fe565b5b50905061462791906146cb565b5090565b8154818355818115116146525781836000526020600020918201910161465191906146cb565b5b505050565b81548183558181151161467e5781836000526020600020918201910161467d91906146cb565b5b505050565b50805460018160011615610100020316600290046000825580601f106146a957506146c8565b601f0160209004906000526020600020908101906146c791906146cb565b5b50565b6146ed91905b808211156146e95760008160009055506001016146d1565b5090565b90565b61475c91905b80821115614758576000808201600061470f9190614683565b6001820160006101000a81549060ff02191690556001820160016101000a81549060ff0219169055600282016000905560038201600090556004820160009055506005016146f6565b5090565b90565b6147eb91905b808211156147e7576000808201600061477e9190614683565b6001820160006101000a81549060ff02191690556001820160016101000a81549060ff02191690556001820160026101000a81549060ff02191690556001820160036101000a81549060ff02191690556002820160009055600382016000905550600401614765565b5090565b905600a165627a7a723058204d3bae27ec5d0a87c1c8d8af9403c2c2ea3af5b1d9a8ef6f0cabebc1bdda1d1b0029"
}