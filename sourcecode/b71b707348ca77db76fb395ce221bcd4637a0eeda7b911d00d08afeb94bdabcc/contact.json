{
  "address": "0x7a617a3a486e8c415fe7ebfae02466674f6fb697",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HKMCToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-13\n*/\n\npragma solidity ^0.4.12;\n \ncontract IMigrationContract {\n    function migrate(address addr, uint256 nas) returns (bool success);\n}\n \n/* taking ideas from FirstBlood token */\ncontract SafeMath {\n    /* function assert(bool assertion) internal { */\n    /*   if (!assertion) { */\n    /*     throw; */\n    /*   } */\n    /* }      // assert no longer needed once solidity is on 0.4.10 */\n \n \n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n        uint256 z = x + y;\n        assert((z >= x) && (z >= y));\n        return z;\n    }\n \n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n        assert(x >= y);\n        uint256 z = x - y;\n        return z;\n    }\n \n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n        uint256 z = x * y;\n        assert((x == 0)||(z/x == y));\n        return z;\n    }\n \n}\n \ncontract Token {\n    uint256 public totalSupply;\n    function balanceOf(address _owner) constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n    function approve(address _spender, uint256 _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n \n \n/*  ERC 20 token */\ncontract StandardToken is Token {\n \n    function transfer(address _to, uint256 _value) returns (bool success) {\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n \n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n \n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n \n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n \n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n \n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n}\n \ncontract HKMCToken is StandardToken, SafeMath {\n \n    // metadata\n    string  public constant name = \"HKMCOIN\";\n    string  public constant symbol = \"HKMC\";\n    uint256 public constant decimals = 18;\n    string  public version = \"1.0\";\n \n    // contracts\n    address public ethFundDeposit;          // deposit address for ETH for Nebulas Team.\n    address public newContractAddr;         // the new contract for nebulas token updates;\n \n    // crowdsale parameters\n    bool    public isFunding;                // switched to true in operational state\n    uint256 public fundingStartBlock;\n    uint256 public fundingStopBlock;\n \n    uint256 public currentSupply;           // current supply tokens for sell\n    uint256 public tokenRaised = 0;         // the number of total sold token\n    uint256 public tokenMigrated = 0;      // the number of total transferted token\n    uint256 public tokenExchangeRate = 625;              // 625 NAS tokens per 1 ETH\n \n    // events\n    event AllocateToken(address indexed _to, uint256 _value);    // allocate token for private sale;\n    event IssueToken(address indexed _to, uint256 _value);      // issue token for public sale;\n    event IncreaseSupply(uint256 _value);\n    event DecreaseSupply(uint256 _value);\n    event Migrate(address indexed _to, uint256 _value);\n \n    \n    function formatDecimals(uint256 _value) internal returns (uint256 ) {\n        return _value * 10 ** decimals;\n    }\n \n    // constructor\n    function HKMCToken(\n        address _ethFundDeposit,\n        uint256 _currentSupply)\n    {\n        ethFundDeposit = _ethFundDeposit;\n \n        isFunding = false;                          //controls pre through crowdsale state\n        fundingStartBlock = 0;\n        fundingStopBlock = 0;\n \n        currentSupply = formatDecimals(_currentSupply);\n        totalSupply = formatDecimals(2000000000);\n        balances[msg.sender] = totalSupply;\n        if(currentSupply > totalSupply) throw;\n    }\n \n    modifier isOwner()  { require(msg.sender == ethFundDeposit); _; }\n \n    /// @dev set the token's tokenExchangeRate,\n    function setTokenExchangeRate(uint256 _tokenExchangeRate) isOwner external {\n        if (_tokenExchangeRate == 0) throw;\n        if (_tokenExchangeRate == tokenExchangeRate) throw;\n \n        tokenExchangeRate = _tokenExchangeRate;\n    }\n \n \n    /// @dev decrease the token's supply\n    function decreaseSupply (uint256 _value) isOwner external {\n        uint256 value = formatDecimals(_value);\n        if (value + tokenRaised > currentSupply) throw;\n \n        currentSupply = safeSubtract(currentSupply, value);\n        DecreaseSupply(value);\n    }\n \n   /// @dev turn on the funding state\n    function startFunding (uint256 _fundingStartBlock, uint256 _fundingStopBlock) isOwner external {\n        if (isFunding) throw;\n        if (_fundingStartBlock >= _fundingStopBlock) throw;\n        if (block.number >= _fundingStartBlock) throw;\n \n        fundingStartBlock = _fundingStartBlock;\n        fundingStopBlock = _fundingStopBlock;\n        isFunding = true;\n    }\n \n   /// @dev turn off the funding state\n    function stopFunding() isOwner external {\n        if (!isFunding) throw;\n        isFunding = false;\n    }\n \n     /// @dev set a new contract for recieve the tokens (for update contract)\n    function setMigrateContract(address _newContractAddr) isOwner external {\n        if (_newContractAddr == newContractAddr) throw;\n        newContractAddr = _newContractAddr;\n    }\n \n    /// @dev set a new owner.\n    function changeOwner(address _newFundDeposit) isOwner() external {\n        if (_newFundDeposit == address(0x0)) throw;\n        ethFundDeposit = _newFundDeposit;\n    }\n \n    /// sends the tokens to new contract\n    function migrate() external {\n        if(isFunding) throw;\n        if(newContractAddr == address(0x0)) throw;\n \n        uint256 tokens = balances[msg.sender];\n        if (tokens == 0) throw;\n \n        balances[msg.sender] = 0;\n        tokenMigrated = safeAdd(tokenMigrated, tokens);\n \n        IMigrationContract newContract = IMigrationContract(newContractAddr);\n        if (!newContract.migrate(msg.sender, tokens)) throw;\n \n        Migrate(msg.sender, tokens);               // log it\n    }\n \n    /// @dev sends ETH to Nebulas team\n    function transferETH() isOwner external {\n        if (this.balance == 0) throw;\n        if (!ethFundDeposit.send(this.balance)) throw;\n    }\n \n    /// @dev allocates NAS tokens to pre-sell address.\n    function allocateToken (address _addr, uint256 _eth) isOwner external {\n        if (_eth == 0) throw;\n        if (_addr == address(0x0)) throw;\n \n        uint256 tokens = safeMult(formatDecimals(_eth), tokenExchangeRate);\n        if (tokens + tokenRaised > currentSupply) throw;\n \n        tokenRaised = safeAdd(tokenRaised, tokens);\n        balances[_addr] += tokens;\n \n        AllocateToken(_addr, tokens);  \n    }\n \n    /// buys the tokens\n    function () payable {\n        if (!isFunding) throw;\n        if (msg.value == 0) throw;\n \n        if (block.number < fundingStartBlock) throw;\n        if (block.number > fundingStopBlock) throw;\n \n        uint256 tokens = safeMult(msg.value, tokenExchangeRate);\n        if (tokens + tokenRaised > currentSupply) throw;\n \n        tokenRaised = safeAdd(tokenRaised, tokens);\n        balances[msg.sender] += tokens;\n \n        IssueToken(msg.sender, tokens);  \n    }\n}",
  "bytecode": "60606040526040805190810160405280600381526020017f312e3000000000000000000000000000000000000000000000000000000000008152506003908051906020019062000051929190620001be565b5060006009556000600a55610271600b5534156200006e57600080fd5b60405160408062001d5d8339810160405280805190602001909190805190602001909190505081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600560146101000a81548160ff021916908315150217905550600060068190555060006007819055506200011f81620001ae6401000000000262001a86176401000000009004565b600881905550620001486377359400620001ae6401000000000262001a86176401000000009004565b600081905550600054600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000546008541115620001a657600080fd5b50506200026d565b60006012600a0a82029050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020157805160ff191683800117855562000232565b8280016001018555821562000232579182015b828111156200023157825182559160200191906001019062000214565b5b50905062000241919062000245565b5090565b6200026a91905b80821115620002665760008160009055506001016200024c565b5090565b90565b611ae0806200027d6000396000f30060606040526004361061016a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610284578063095ea7b3146103125780630a9ffdb71461036c57806313b53153146103ae57806318160ddd146103db57806323b872dd1461040457806326a215751461047d578063313ce567146104a657806332513ce5146104cf5780634172d080146105245780634477c5da1461054d5780634a36df251461056257806354fd4d501461059b5780636fe3a5671461062957806370a0823114610652578063771282f61461069f578063775c46cd146106c85780638fd3ab80146106f457806395d89b411461070957806398e52f9a14610797578063a6f9dae1146107ba578063a81c3bdf146107f3578063a9059cbb14610848578063cb7b8673146108a2578063d648a647146108c5578063dd62ed3e146108ee578063e28d717b1461095a578063ff29507d1461096f575b6000600560149054906101000a900460ff16151561018757600080fd5b600034141561019557600080fd5b6006544310156101a457600080fd5b6007544311156101b357600080fd5b6101bf34600b54610998565b9050600854600954820111156101d457600080fd5b6101e0600954826109cb565b60098190555080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167f7ba26a0f068612fb882b3272004674d21fed286c2c8c795cf653044690b32db4826040518082815260200191505060405180910390a250005b341561028f57600080fd5b6102976109f5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102d75780820151818401526020810190506102bc565b50505050905090810190601f1680156103045780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561031d57600080fd5b610352600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a2e565b604051808215151515815260200191505060405180910390f35b341561037757600080fd5b6103ac600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b20565b005b34156103b957600080fd5b6103c1610ca1565b604051808215151515815260200191505060405180910390f35b34156103e657600080fd5b6103ee610cb4565b6040518082815260200191505060405180910390f35b341561040f57600080fd5b610463600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610cba565b604051808215151515815260200191505060405180910390f35b341561048857600080fd5b610490610f36565b6040518082815260200191505060405180910390f35b34156104b157600080fd5b6104b9610f3c565b6040518082815260200191505060405180910390f35b34156104da57600080fd5b6104e2610f41565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561052f57600080fd5b610537610f67565b6040518082815260200191505060405180910390f35b341561055857600080fd5b610560610f6d565b005b341561056d57600080fd5b610599600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611001565b005b34156105a657600080fd5b6105ae6110fc565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105ee5780820151818401526020810190506105d3565b50505050905090810190601f16801561061b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561063457600080fd5b61063c61119a565b6040518082815260200191505060405180910390f35b341561065d57600080fd5b610689600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111a0565b6040518082815260200191505060405180910390f35b34156106aa57600080fd5b6106b26111e9565b6040518082815260200191505060405180910390f35b34156106d357600080fd5b6106f260048080359060200190919080359060200190919050506111ef565b005b34156106ff57600080fd5b6107076112ae565b005b341561071457600080fd5b61071c611509565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561075c578082015181840152602081019050610741565b50505050905090810190601f1680156107895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156107a257600080fd5b6107b86004808035906020019091905050611542565b005b34156107c557600080fd5b6107f1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061160b565b005b34156107fe57600080fd5b6108066116e5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561085357600080fd5b610888600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061170b565b604051808215151515815260200191505060405180910390f35b34156108ad57600080fd5b6108c36004808035906020019091905050611874565b005b34156108d057600080fd5b6108d86118f7565b6040518082815260200191505060405180910390f35b34156108f957600080fd5b610944600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506118fd565b6040518082815260200191505060405180910390f35b341561096557600080fd5b61096d611984565b005b341561097a57600080fd5b610982611a80565b6040518082815260200191505060405180910390f35b600080828402905060008414806109b957508284828115156109b657fe5b04145b15156109c157fe5b8091505092915050565b60008082840190508381101580156109e35750828110155b15156109eb57fe5b8091505092915050565b6040805190810160405280600781526020017f484b4d434f494e0000000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b7e57600080fd5b6000821415610b8c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610bc657600080fd5b610bda610bd283611a86565b600b54610998565b905060085460095482011115610bef57600080fd5b610bfb600954826109cb565b60098190555080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff167f1aee3ddc9eba03c98b273cd914e999b78162e1ddd1c022045394f635a469e105826040518082815260200191505060405180910390a2505050565b600560149054906101000a900460ff1681565b60005481565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610d87575081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610d935750600082115b15610f2a5781600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610f2f565b600090505b9392505050565b60095481565b601281565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b5481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fc957600080fd5b600560149054906101000a900460ff161515610fe457600080fd5b6000600560146101000a81548160ff021916908315150217905550565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561105d57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110b857600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111925780601f1061116757610100808354040283529160200191611192565b820191906000526020600020905b81548152906001019060200180831161117557829003601f168201915b505050505081565b600a5481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60085481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561124b57600080fd5b600560149054906101000a900460ff161561126557600080fd5b808210151561127357600080fd5b814310151561128157600080fd5b81600681905550806007819055506001600560146101000a81548160ff0219169083151502179055505050565b600080600560149054906101000a900460ff16156112cb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561132757600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150600082141561137757600080fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113c8600a54836109cb565b600a81905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663ad68ebf733846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561149557600080fd5b5af115156114a257600080fd5b5050506040518051905015156114b757600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167fa59785389b00cbd19745afbe8d59b28e3161395c6b1e3525861a2b0dede0b90d836040518082815260200191505060405180910390a25050565b6040805190810160405280600481526020017f484b4d430000000000000000000000000000000000000000000000000000000081525081565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115a057600080fd5b6115a982611a86565b9050600854600954820111156115be57600080fd5b6115ca60085482611a96565b6008819055507f9ecdebfa921d6ab8cecf7259ef30327664ad0d45d32fa3641089b00b533f2eee816040518082815260200191505060405180910390a15050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561166757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156116a157600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561175c5750600082115b156118695781600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905061186e565b600090505b92915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118d057600080fd5b60008114156118de57600080fd5b600b548114156118ed57600080fd5b80600b8190555050565b60065481565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119e057600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff16311415611a0557600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515611a7e57600080fd5b565b60075481565b60006012600a0a82029050919050565b600080828410151515611aa557fe5b828403905080915050929150505600a165627a7a72305820650dc501cedd71775f0d250f35aeecd0b34d0c84c1d112c684768e8aed64eb2b0029000000000000000000000000a6ee3730d680c07bddea1b9bf10dc80a05fcf50a0000000000000000000000000000000000000000000000000000000077359400",
  "constructorArguments": "000000000000000000000000a6ee3730d680c07bddea1b9bf10dc80a05fcf50a0000000000000000000000000000000000000000000000000000000077359400"
}