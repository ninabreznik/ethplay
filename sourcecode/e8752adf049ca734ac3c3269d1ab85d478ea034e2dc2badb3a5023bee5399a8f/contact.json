{
  "address": "0x20b2ec1fe89c6977f6c1f9e5b7d5475f588186bd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BitGuildTrade",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-25\n*/\n\npragma solidity ^0.4.18;\n/* ==================================================================== */\n/* Copyright (c) 2018 The MagicAcademy Project.  All rights reserved.\n/* \n/* https://www.magicacademy.io One of the world's first idle strategy games of blockchain \n/*  \n/* authors [email protected]/[email protected]\n/*                 \n/* ==================================================================== */\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /*\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\ncontract AccessAdmin is Ownable {\n\n  /// @dev Admin Address\n  mapping (address => bool) adminContracts;\n\n  /// @dev Trust contract\n  mapping (address => bool) actionContracts;\n\n  function setAdminContract(address _addr, bool _useful) public onlyOwner {\n    require(_addr != address(0));\n    adminContracts[_addr] = _useful;\n  }\n\n  modifier onlyAdmin {\n    require(adminContracts[msg.sender]); \n    _;\n  }\n\n  function setActionContract(address _actionAddr, bool _useful) public onlyAdmin {\n    actionContracts[_actionAddr] = _useful;\n  }\n\n  modifier onlyAccess() {\n    require(actionContracts[msg.sender]);\n    _;\n  }\n}\n\n\ninterface BitGuildTokenInterface { // implements ERC20Interface\n  function totalSupply() public constant returns (uint);\n  function balanceOf(address tokenOwner) public constant returns (uint balance);\n  function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n  function transfer(address to, uint tokens) public returns (bool success);\n  function approve(address spender, uint tokens) public returns (bool success);\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n  event Transfer(address indexed from, address indexed to, uint tokens);\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ninterface CardsInterface {\n  function getGameStarted() external constant returns (bool);\n  function getOwnedCount(address player, uint256 cardId) external view returns (uint256);\n  function getMaxCap(address _addr,uint256 _cardId) external view returns (uint256);\n  function upgradeUnitMultipliers(address player, uint256 upgradeClass, uint256 unitId, uint256 upgradeValue) external;\n  function removeUnitMultipliers(address player, uint256 upgradeClass, uint256 unitId, uint256 upgradeValue) external;\n  function balanceOf(address player) public constant returns(uint256);\n  function coinBalanceOf(address player,uint8 itype) external constant returns(uint256);\n  function updatePlayersCoinByPurchase(address player, uint256 purchaseCost) external;\n  function getUnitsProduction(address player, uint256 unitId, uint256 amount) external constant returns (uint256);\n  function increasePlayersJadeProduction(address player, uint256 increase) public;\n  function setUintCoinProduction(address _address, uint256 cardId, uint256 iValue, bool iflag) external;\n  function getUintsOwnerCount(address _address) external view returns (uint256);\n  function AddPlayers(address _address) external;\n  function setUintsOwnerCount(address _address, uint256 amount, bool iflag) external;\n  function setOwnedCount(address player, uint256 cardId, uint256 amount, bool iflag) external;\n  function setCoinBalance(address player, uint256 eth, uint8 itype, bool iflag) external;\n  function setTotalEtherPool(uint256 inEth, uint8 itype, bool iflag) external;\n  function getUpgradesOwned(address player, uint256 upgradeId) external view returns (uint256);\n  function setUpgradesOwned(address player, uint256 upgradeId) external;\n  function updatePlayersCoinByOut(address player) external;\n  function balanceOfUnclaimed(address player) public constant returns (uint256);\n  function setLastJadeSaveTime(address player) external;\n  function setRoughSupply(uint256 iroughSupply) external;\n  function setJadeCoin(address player, uint256 coin, bool iflag) external;\n  function getUnitsInProduction(address player, uint256 unitId, uint256 amount) external constant returns (uint256);\n  function reducePlayersJadeProduction(address player, uint256 decrease) public;\n}\ninterface GameConfigInterface {\n  function unitCoinProduction(uint256 cardId) external constant returns (uint256);\n  function unitPLATCost(uint256 cardId) external constant returns (uint256);\n  function getCostForCards(uint256 cardId, uint256 existing, uint256 amount) external constant returns (uint256);\n  function getCostForBattleCards(uint256 cardId, uint256 existing, uint256 amount) external constant returns (uint256);\n  function unitBattlePLATCost(uint256 cardId) external constant returns (uint256);\n  function getUpgradeCardsInfo(uint256 upgradecardId,uint256 existing) external constant returns (\n    uint256 coinCost, \n    uint256 ethCost, \n    uint256 upgradeClass, \n    uint256 cardId, \n    uint256 upgradeValue,\n    uint256 platCost\n  );\n function getCardInfo(uint256 cardId, uint256 existing, uint256 amount) external constant returns (uint256, uint256, uint256, uint256, bool);\n function getBattleCardInfo(uint256 cardId, uint256 existing, uint256 amount) external constant returns (uint256, uint256, uint256, bool);\n\n}\ninterface RareInterface {\n  function getRareItemsOwner(uint256 rareId) external view returns (address);\n  function getRareItemsPrice(uint256 rareId) external view returns (uint256);\n  function getRareItemsPLATPrice(uint256 rareId) external view returns (uint256);\n   function getRarePLATInfo(uint256 _tokenId) external view returns (\n    uint256 sellingPrice,\n    address owner,\n    uint256 nextPrice,\n    uint256 rareClass,\n    uint256 cardId,\n    uint256 rareValue\n  );\n  function transferToken(address _from, address _to, uint256 _tokenId) external;\n  function setRarePrice(uint256 _rareId, uint256 _price) external;\n}\n/// @notice Purchase on BitGuild\n/// @author rainysiu [email protected]\ncontract BitGuildTrade is AccessAdmin {\n  BitGuildTokenInterface public tokenContract;\n   //data contract\n  CardsInterface public cards ;\n  GameConfigInterface public schema;\n  RareInterface public rare;\n\n  \n  function BitGuildTrade() public {\n    setAdminContract(msg.sender,true);\n    setActionContract(msg.sender,true);\n  }\n\n  event UnitBought(address player, uint256 unitId, uint256 amount);\n  event UpgradeCardBought(address player, uint256 upgradeId);\n  event BuyRareCard(address player, address previous, uint256 rareId,uint256 iPrice);\n  event UnitSold(address player, uint256 unitId, uint256 amount);\n\n \n  function() external payable {\n    revert();\n  }\n  function setBitGuildToken(address _tokenContract) external onlyOwner {\n    tokenContract = BitGuildTokenInterface(_tokenContract);\n  } \n\n  function setCardsAddress(address _address) external onlyOwner {\n    cards = CardsInterface(_address);\n  }\n\n   //normal cards\n  function setConfigAddress(address _address) external onlyOwner {\n    schema = GameConfigInterface(_address);\n  }\n\n  //rare cards\n  function setRareAddress(address _address) external onlyOwner {\n    rare = RareInterface(_address);\n  }\n  function kill() public onlyOwner {\n    tokenContract.transferFrom(this, msg.sender, tokenContract.balanceOf(this));\n    selfdestruct(msg.sender); //end execution, destroy current contract and send funds to a\n  }  \n  /// @notice Returns all the relevant information about a specific tokenId.\n  /// val1:flag,val2:id,val3:amount\n  function _getExtraParam(bytes _extraData) private pure returns(uint256 val1,uint256 val2,uint256 val3) {\n    if (_extraData.length == 2) {\n      val1 = uint256(_extraData[0]);\n      val2 = uint256(_extraData[1]);\n      val3 = 1; \n    } else if (_extraData.length == 3) {\n      val1 = uint256(_extraData[0]);\n      val2 = uint256(_extraData[1]);\n      val3 = uint256(_extraData[2]);\n    }  \n  }\n  \n  function receiveApproval(address _player, uint256 _value, address _tokenContractAddr, bytes _extraData) external {\n    require(msg.sender == _tokenContractAddr);\n    require(_extraData.length >=1);\n    require(tokenContract.transferFrom(_player, address(this), _value));\n    uint256 flag;\n    uint256 unitId;\n    uint256 amount;\n    (flag,unitId,amount) = _getExtraParam(_extraData);\n\n    if (flag==1) {\n      buyPLATCards(_player, _value, unitId, amount);  // 1-39\n    } else if (flag==3) {\n      buyUpgradeCard(_player, _value, unitId);  // >=1\n    } else if (flag==4) {\n      buyRareItem(_player, _value, unitId); //rarecard\n    } \n  } \n\n  /// buy normal cards via jade\n  function buyBasicCards(uint256 unitId, uint256 amount) external {\n    require(cards.getGameStarted());\n    require(amount>=1);\n    uint256 existing = cards.getOwnedCount(msg.sender,unitId);\n    uint256 total = SafeMath.add(existing, amount);\n    if (total > 99) { // Default unit limit\n      require(total <= cards.getMaxCap(msg.sender,unitId)); // Housing upgrades (allow more units)\n    }\n\n    uint256 coinProduction;\n    uint256 coinCost;\n    uint256 ethCost;\n    if (unitId>=1 && unitId<=39) {    \n      (, coinProduction, coinCost, ethCost,) = schema.getCardInfo(unitId, existing, amount);\n    } else if (unitId>=40) {\n      (, coinCost, ethCost,) = schema.getBattleCardInfo(unitId, existing, amount);\n    }\n    require(cards.balanceOf(msg.sender) >= coinCost);\n    require(ethCost == 0); // Free ether unit\n        \n    // Update players jade \n    cards.updatePlayersCoinByPurchase(msg.sender, coinCost);\n    ///****increase production***/\n    if (coinProduction > 0) {\n      cards.increasePlayersJadeProduction(msg.sender,cards.getUnitsProduction(msg.sender, unitId, amount)); \n      cards.setUintCoinProduction(msg.sender,unitId,cards.getUnitsProduction(msg.sender, unitId, amount),true); \n    }\n    //players\n    if (cards.getUintsOwnerCount(msg.sender)<=0) {\n      cards.AddPlayers(msg.sender);\n    }\n    cards.setUintsOwnerCount(msg.sender,amount,true);\n    cards.setOwnedCount(msg.sender,unitId,amount,true);\n    \n    UnitBought(msg.sender, unitId, amount);\n  }\n\n  function buyBasicCards_Migrate(address _addr, uint256 _unitId, uint256 _amount) external onlyAdmin {\n    require(cards.getGameStarted());\n    require(_amount>=1);\n    uint256 existing = cards.getOwnedCount(_addr,_unitId);\n    uint256 total = SafeMath.add(existing, _amount);\n    if (total > 99) { // Default unit limit\n      require(total <= cards.getMaxCap(_addr,_unitId)); // Housing upgrades (allow more units)\n    }\n    require (_unitId == 41);\n    uint256 coinCost;\n    uint256 ethCost;\n    (, coinCost, ethCost,) = schema.getBattleCardInfo(_unitId, existing, _amount);\n    //players\n    if (cards.getUintsOwnerCount(_addr)<=0) {\n      cards.AddPlayers(_addr);\n    }\n    cards.setUintsOwnerCount(_addr,_amount,true);\n    cards.setOwnedCount(_addr,_unitId,_amount,true);\n    \n    UnitBought(_addr, _unitId, _amount);\n  }\n\n  function buyPLATCards(address _player, uint256 _platValue, uint256 _cardId, uint256 _amount) internal {\n    require(cards.getGameStarted());\n    require(_amount>=1);\n    uint256 existing = cards.getOwnedCount(_player,_cardId);\n    uint256 total = SafeMath.add(existing, _amount);\n    if (total > 99) { // Default unit limit\n      require(total <= cards.getMaxCap(_player,_cardId)); // Housing upgrades (allow more units)\n    }\n\n    uint256 coinProduction;\n    uint256 coinCost;\n    uint256 ethCost;\n\n    if (_cardId>=1 && _cardId<=39) {\n      coinProduction = schema.unitCoinProduction(_cardId);\n      coinCost = schema.getCostForCards(_cardId, existing, _amount);\n      ethCost = SafeMath.mul(schema.unitPLATCost(_cardId),_amount);  // get platprice\n    } else if (_cardId>=40) {\n      coinCost = schema.getCostForBattleCards(_cardId, existing, _amount);\n      ethCost = SafeMath.mul(schema.unitBattlePLATCost(_cardId),_amount);  // get platprice\n    }\n\n    require(ethCost>0);\n    require(SafeMath.add(cards.coinBalanceOf(_player,1),_platValue) >= ethCost);\n    require(cards.balanceOf(_player) >= coinCost);   \n\n    // Update players jade  \n    cards.updatePlayersCoinByPurchase(_player, coinCost);\n\n    if (ethCost > _platValue) {\n      cards.setCoinBalance(_player,SafeMath.sub(ethCost,_platValue),1,false);\n    } else if (_platValue > ethCost) {\n      // Store overbid in their balance\n      cards.setCoinBalance(_player,SafeMath.sub(_platValue,ethCost),1,true);\n    } \n\n    uint256 devFund = uint256(SafeMath.div(ethCost,20)); // 5% fee\n    cards.setTotalEtherPool(uint256(SafeMath.div(ethCost,4)),1,true);  // 20% to pool\n    cards.setCoinBalance(owner,devFund,1,true);  \n    \n    if (coinProduction > 0) {\n      cards.increasePlayersJadeProduction(_player, cards.getUnitsProduction(_player, _cardId, _amount)); \n      cards.setUintCoinProduction(_player,_cardId,cards.getUnitsProduction(_player, _cardId, _amount),true); \n    }\n    \n    if (cards.getUintsOwnerCount(_player)<=0) {\n      cards.AddPlayers(_player);\n    }\n    cards.setUintsOwnerCount(_player,_amount, true);\n    cards.setOwnedCount(_player,_cardId,_amount,true);\n    //event\n    UnitBought(_player, _cardId, _amount);\n  }\n\n  /// buy upgrade cards with ether/Jade\n  function buyUpgradeCard(uint256 upgradeId) external payable {\n    require(cards.getGameStarted());\n    require(upgradeId>=1);\n    uint256 existing = cards.getUpgradesOwned(msg.sender,upgradeId);\n    \n    uint256 coinCost;\n    uint256 ethCost;\n    uint256 upgradeClass;\n    uint256 unitId;\n    uint256 upgradeValue;\n    (coinCost, ethCost, upgradeClass, unitId, upgradeValue,) = schema.getUpgradeCardsInfo(upgradeId,existing);\n    if (upgradeClass<8) {\n      require(existing<=5); \n    } else {\n      require(existing<=2); \n    }\n    require (coinCost>0 && ethCost==0);\n    require(cards.balanceOf(msg.sender) >= coinCost);  \n    cards.updatePlayersCoinByPurchase(msg.sender, coinCost);\n\n    cards.upgradeUnitMultipliers(msg.sender, upgradeClass, unitId, upgradeValue);  \n    cards.setUpgradesOwned(msg.sender,upgradeId); //upgrade cards level\n\n    UpgradeCardBought(msg.sender, upgradeId);\n  }\n\n  /// upgrade cards-- jade + plat\n  function buyUpgradeCard(address _player, uint256 _platValue,uint256 _upgradeId) internal {\n    require(cards.getGameStarted());\n    require(_upgradeId>=1);\n    uint256 existing = cards.getUpgradesOwned(_player,_upgradeId);\n    require(existing<=5);  // v1 - v6\n    uint256 coinCost;\n    uint256 ethCost;\n    uint256 upgradeClass;\n    uint256 unitId;\n    uint256 upgradeValue;\n    uint256 platCost;\n    (coinCost, ethCost, upgradeClass, unitId, upgradeValue,platCost) = schema.getUpgradeCardsInfo(_upgradeId,existing);\n\n    require(platCost>0);\n    if (platCost > 0) {\n      require(SafeMath.add(cards.coinBalanceOf(_player,1),_platValue) >= platCost); \n\n      if (platCost > _platValue) { // They can use their balance instead\n        cards.setCoinBalance(_player, SafeMath.sub(platCost,_platValue),1,false);\n      } else if (platCost < _platValue) {  \n        cards.setCoinBalance(_player,SafeMath.sub(_platValue,platCost),1,true);\n    } \n      // defund 5%，upgrade card can not be sold，\n      uint256 devFund = uint256(SafeMath.div(platCost, 20)); // 5% fee on purchases (marketing, gameplay & maintenance)\n      cards.setTotalEtherPool(SafeMath.sub(platCost,devFund),1,true); // Rest goes to div pool (Can't sell upgrades)\n      cards.setCoinBalance(owner,devFund,1,true);  \n    }\n        \n     // Update \n    require(cards.balanceOf(_player) >= coinCost);  \n    cards.updatePlayersCoinByPurchase(_player, coinCost);\n    \n    //add weight\n    cards.upgradeUnitMultipliers(_player, upgradeClass, unitId, upgradeValue);  \n    cards.setUpgradesOwned(_player,_upgradeId); // upgrade level up\n\n     //add user to userlist\n    if (cards.getUintsOwnerCount(_player)<=0) {\n      cards.AddPlayers(_player);\n    }\n \n    UpgradeCardBought(_player, _upgradeId);\n  }\n\n\n  // Allows someone to send ether and obtain the token\n  function buyRareItem(address _player, uint256 _platValue,uint256 _rareId) internal {\n    require(cards.getGameStarted());        \n    address previousOwner = rare.getRareItemsOwner(_rareId);  // rare card\n    require(previousOwner != 0);\n    require(_player!=previousOwner);  // can not buy from itself\n    \n    uint256 ethCost = rare.getRareItemsPLATPrice(_rareId); // get plat cost\n    uint256 totalCost = SafeMath.add(cards.coinBalanceOf(_player,1),_platValue);\n    require(totalCost >= ethCost); \n    // We have to claim buyer/sellder's goo before updating their production values \n    cards.updatePlayersCoinByOut(_player);\n    cards.updatePlayersCoinByOut(previousOwner);\n\n    uint256 upgradeClass;\n    uint256 unitId;\n    uint256 upgradeValue;\n    (,,,,upgradeClass, unitId, upgradeValue) = rare.getRarePLATInfo(_rareId);\n    \n    // modify weight\n    cards.upgradeUnitMultipliers(_player, upgradeClass, unitId, upgradeValue); \n    cards.removeUnitMultipliers(previousOwner, upgradeClass, unitId, upgradeValue); \n\n    // Splitbid/Overbid\n    if (ethCost > _platValue) {\n      cards.setCoinBalance(_player,SafeMath.sub(ethCost,_platValue),1,false);\n    } else if (_platValue > ethCost) {\n      // Store overbid in their balance\n      cards.setCoinBalance(_player,SafeMath.sub(_platValue,ethCost),1,true);\n    }  \n    // Distribute ethCost  uint256 devFund = ethCost / 50; \n    uint256 devFund = uint256(SafeMath.div(ethCost, 20)); // 5% fee on purchases (marketing, gameplay & maintenance)  抽成2%\n    uint256 dividends = uint256(SafeMath.div(ethCost,20)); // 5% goes to pool \n\n    cards.setTotalEtherPool(dividends,1,true);  // 5% to pool\n    cards.setCoinBalance(owner,devFund,1,true);  // 5% fee\n        \n    // Transfer / update rare item\n    rare.transferToken(previousOwner,_player,_rareId); \n    rare.setRarePrice(_rareId,SafeMath.div(SafeMath.mul(rare.getRareItemsPrice(_rareId),5),4));\n    \n    cards.setCoinBalance(previousOwner,SafeMath.sub(ethCost,SafeMath.add(dividends,devFund)),1,true);\n    \n    if (cards.getUintsOwnerCount(_player)<=0) {\n      cards.AddPlayers(_player);\n    }\n   \n    cards.setUintsOwnerCount(_player,1,true);\n    cards.setUintsOwnerCount(previousOwner,1,true);\n\n    //tell the world\n    BuyRareCard(_player, previousOwner, _rareId, ethCost);\n  }\n\n  /// refunds 75% since no transfer between bitguild and player,no need to call approveAndCall\n  function sellCards( uint256 _unitId, uint256 _amount) external {\n    require(cards.getGameStarted());\n    uint256 existing = cards.getOwnedCount(msg.sender,_unitId);\n    require(existing >= _amount && _amount>0); \n    existing = SafeMath.sub(existing,_amount);\n    uint256 coinChange;\n    uint256 decreaseCoin;\n    uint256 schemaUnitId;\n    uint256 coinProduction;\n    uint256 coinCost;\n    uint256 ethCost;\n    bool sellable;\n    if (_unitId>=40) { // upgrade card\n      (schemaUnitId,coinCost,, sellable) = schema.getBattleCardInfo(_unitId, existing, _amount);\n      ethCost = SafeMath.mul(schema.unitBattlePLATCost(_unitId),_amount);\n    } else {\n      (schemaUnitId, coinProduction, coinCost, , sellable) = schema.getCardInfo(_unitId, existing, _amount);\n      ethCost = SafeMath.mul(schema.unitPLATCost(_unitId),_amount); // plat \n    }\n    require(sellable);  // can be refunded\n    if (coinCost>0) {\n      coinChange = SafeMath.add(cards.balanceOfUnclaimed(msg.sender), SafeMath.div(SafeMath.mul(coinCost,70),100)); // Claim unsaved goo whilst here\n    } else {\n      coinChange = cards.balanceOfUnclaimed(msg.sender); \n    }\n\n    cards.setLastJadeSaveTime(msg.sender); \n    cards.setRoughSupply(coinChange);  \n    cards.setJadeCoin(msg.sender, coinChange, true); // refund 75% Jadecoin to player \n\n    decreaseCoin = cards.getUnitsInProduction(msg.sender, _unitId, _amount);\n  \n    if (coinProduction > 0) { \n      cards.reducePlayersJadeProduction(msg.sender, decreaseCoin);\n      //update the speed of jade minning\n      cards.setUintCoinProduction(msg.sender,_unitId,decreaseCoin,false); \n    }\n\n    if (ethCost > 0) { // Premium units sell for 75% of buy cost\n      cards.setCoinBalance(msg.sender,SafeMath.div(SafeMath.mul(ethCost,70),100),1,true);\n    }\n\n    cards.setOwnedCount(msg.sender,_unitId,_amount,false); \n    cards.setUintsOwnerCount(msg.sender,_amount,false);\n\n    //tell the world\n    UnitSold(msg.sender, _unitId, _amount);\n  }\n\n  //@notice for player withdraw\n  function withdrawEtherFromTrade(uint256 amount) external {\n    require(amount <= cards.coinBalanceOf(msg.sender,1));\n    cards.setCoinBalance(msg.sender,amount,1,false);\n    tokenContract.transfer(msg.sender,amount);\n  } \n\n  //@notice withraw all PLAT by dev\n  function withdrawToken(uint256 amount) external onlyOwner {\n    uint256 balance = tokenContract.balanceOf(this);\n    require(balance > 0 && balance >= amount);\n    tokenContract.transfer(msg.sender, amount);\n  }\n\n}\n\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": "606060405234156200001057600080fd5b60008054600160a060020a03191633600160a060020a038116919091179091556200004b9060016401000000006200006c8102620003341704565b6200006633600164010000000062000ef1620000c982021704565b6200011c565b60005433600160a060020a039081169116146200008857600080fd5b600160a060020a03821615156200009e57600080fd5b600160a060020a03919091166000908152600160205260409020805460ff1916911515919091179055565b600160a060020a03331660009081526001602052604090205460ff161515620000f157600080fd5b600160a060020a03919091166000908152600260205260409020805460ff1916911515919091179055565b614072806200012c6000396000f3006060604052600436106100f85763ffffffff60e060020a6000350416630865dadc81146100fd5780633702ab031461012357806341c0e1b51461013c57806350baa6221461014f57806355a373d61461016557806358a4903f1461019457806363c78e87146101a75780636bb7b7a4146101bd5780636cdb1b75146101d05780636fb642de146101ef578063727b42761461021357806376f2ccb91461023257806383a12de914610251578063845b6aca146102705780638da5cb5b146102955780638f4ffcb1146102a85780639a5c0abc146102de578063c3059c63146102f7578063f2fde38b14610302578063f8895cc814610321575b600080fd5b341561010857600080fd5b610121600160a060020a03600435166024351515610334565b005b341561012e57600080fd5b61012160043560243561038f565b341561014757600080fd5b610121610b04565b341561015a57600080fd5b610121600435610c00565b341561017057600080fd5b610178610d10565b604051600160a060020a03909116815260200160405180910390f35b341561019f57600080fd5b610178610d1f565b34156101b257600080fd5b610121600435610d2e565b34156101c857600080fd5b610178610e98565b34156101db57600080fd5b610121600160a060020a0360043516610ea7565b34156101fa57600080fd5b610121600160a060020a03600435166024351515610ef1565b341561021e57600080fd5b610121600160a060020a0360043516610f43565b341561023d57600080fd5b610121600160a060020a0360043516610f8d565b341561025c57600080fd5b610121600160a060020a0360043516610fd7565b341561027b57600080fd5b610121600160a060020a0360043516602435604435611021565b34156102a057600080fd5b61017861146c565b34156102b357600080fd5b61012160048035600160a060020a03908116916024803592604435169160643591820191013561147b565b34156102e957600080fd5b6101216004356024356115be565b610121600435611e24565b341561030d57600080fd5b610121600160a060020a03600435166121e9565b341561032c57600080fd5b610178612284565b60005433600160a060020a0390811691161461034f57600080fd5b600160a060020a038216151561036457600080fd5b600160a060020a03919091166000908152600160205260409020805460ff1916911515919091179055565b6004546000908190819081908190600160a060020a0316639267b2916040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156103d957600080fd5b5af115156103e657600080fd5b5050506040518051905015156103fb57600080fd5b600186101561040957600080fd5b600454600160a060020a031663196ecd25338960405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561045f57600080fd5b5af1151561046c57600080fd5b5050506040518051905094506104828587612293565b9350606384111561050657600454600160a060020a031663969ddd71338960405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156104e357600080fd5b5af115156104f057600080fd5b5050506040518051851115905061050657600080fd5b60018710158015610518575060278711155b156105b257600554600160a060020a031663ee4827ea88878960405160e060020a63ffffffff861602815260048101939093526024830191909152604482015260640160a060405180830381600087803b151561057457600080fd5b5af1151561058157600080fd5b5050506040518051906020018051906020018051906020018051906020018051509296509094509250610641915050565b6028871061064157600554600160a060020a031663b2570b1c88878960405160e060020a63ffffffff8616028152600481019390935260248301919091526044820152606401608060405180830381600087803b151561061157600080fd5b5af1151561061e57600080fd5b505050604051805190602001805190602001805190602001805150919450925050505b6004548290600160a060020a03166370a082313360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561069357600080fd5b5af115156106a057600080fd5b50505060405180519050101515156106b757600080fd5b80156106c257600080fd5b600454600160a060020a031663a1c90a11338460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b151561071857600080fd5b5af1151561072557600080fd5b50505060008311156108e557600454600160a060020a03166379c310a63382632d171243828c8c60405160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091526044820152606401602060405180830381600087803b151561079757600080fd5b5af115156107a457600080fd5b5050506040518051905060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b15156107f157600080fd5b5af115156107fe57600080fd5b5050600454600160a060020a0316905063ce29555f338983632d17124383838d60405160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091526044820152606401602060405180830381600087803b151561086957600080fd5b5af1151561087657600080fd5b50505060405180519050600160405160e060020a63ffffffff8716028152600160a060020a0390941660048501526024840192909252604483015215156064820152608401600060405180830381600087803b15156108d457600080fd5b5af115156108e157600080fd5b5050505b600454600090600160a060020a031663a436e33b3360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561093857600080fd5b5af1151561094557600080fd5b505050604051805190501115156109b757600454600160a060020a031663f7fb0a4b3360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b15156109a657600080fd5b5af115156109b357600080fd5b5050505b600454600160a060020a031663fc4756df3388600160405160e060020a63ffffffff8616028152600160a060020a039093166004840152602483019190915215156044820152606401600060405180830381600087803b1515610a1957600080fd5b5af11515610a2657600080fd5b5050600454600160a060020a0316905063e7001b84338989600160405160e060020a63ffffffff8716028152600160a060020a0390941660048501526024840192909252604483015215156064820152608401600060405180830381600087803b1515610a9257600080fd5b5af11515610a9f57600080fd5b5050507fb6d35f558a34938047f09ebf800fa2e15ec407c357a8eab97a5dd67b4d015b5b3388886040518084600160a060020a0316600160a060020a03168152602001838152602001828152602001935050505060405180910390a150505050505050565b60005433600160a060020a03908116911614610b1f57600080fd5b600354600160a060020a03166323b872dd3033836370a082318360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610b7757600080fd5b5af11515610b8457600080fd5b5050506040518051905060405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515610bdd57600080fd5b5af11515610bea57600080fd5b50505060405180515050600160a060020a033316ff5b6000805433600160a060020a03908116911614610c1c57600080fd5b600354600160a060020a03166370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610c6c57600080fd5b5af11515610c7957600080fd5b5050506040518051915050600081118015610c945750818110155b1515610c9f57600080fd5b600354600160a060020a031663a9059cbb338460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610cf557600080fd5b5af11515610d0257600080fd5b505050604051805150505050565b600354600160a060020a031681565b600454600160a060020a031681565b600454600160a060020a031663e8d320e633600160405160e060020a63ffffffff8516028152600160a060020a03909216600483015260ff166024820152604401602060405180830381600087803b1515610d8857600080fd5b5af11515610d9557600080fd5b50505060405180518211159050610dab57600080fd5b600454600160a060020a0316635460554933836001600060405160e060020a63ffffffff8716028152600160a060020a039094166004850152602484019290925260ff16604483015215156064820152608401600060405180830381600087803b1515610e1757600080fd5b5af11515610e2457600080fd5b5050600354600160a060020a0316905063a9059cbb338360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610e7e57600080fd5b5af11515610e8b57600080fd5b5050506040518051505050565b600654600160a060020a031681565b60005433600160a060020a03908116911614610ec257600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03331660009081526001602052604090205460ff161515610f1857600080fd5b600160a060020a03919091166000908152600260205260409020805460ff1916911515919091179055565b60005433600160a060020a03908116911614610f5e57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60005433600160a060020a03908116911614610fa857600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60005433600160a060020a03908116911614610ff257600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03331660009081526001602052604081205481908190819060ff16151561104e57600080fd5b600454600160a060020a0316639267b2916040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561108d57600080fd5b5af1151561109a57600080fd5b5050506040518051905015156110af57600080fd5b60018510156110bd57600080fd5b600454600160a060020a031663196ecd25888860405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561111357600080fd5b5af1151561112057600080fd5b5050506040518051905093506111368486612293565b925060638311156111ba57600454600160a060020a031663969ddd71888860405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561119757600080fd5b5af115156111a457600080fd5b505050604051805184111590506111ba57600080fd5b602986146111c757600080fd5b600554600160a060020a031663b2570b1c87868860405160e060020a63ffffffff8616028152600481019390935260248301919091526044820152606401608060405180830381600087803b151561121e57600080fd5b5af1151561122b57600080fd5b50505060405180519060200180519060200180519060200180515050600454919450925060009150600160a060020a031663a436e33b8960405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156112a057600080fd5b5af115156112ad57600080fd5b5050506040518051905011151561131f57600454600160a060020a031663f7fb0a4b8860405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b151561130e57600080fd5b5af1151561131b57600080fd5b5050505b600454600160a060020a031663fc4756df8887600160405160e060020a63ffffffff8616028152600160a060020a039093166004840152602483019190915215156044820152606401600060405180830381600087803b151561138157600080fd5b5af1151561138e57600080fd5b5050600454600160a060020a0316905063e7001b84888888600160405160e060020a63ffffffff8716028152600160a060020a0390941660048501526024840192909252604483015215156064820152608401600060405180830381600087803b15156113fa57600080fd5b5af1151561140757600080fd5b5050507fb6d35f558a34938047f09ebf800fa2e15ec407c357a8eab97a5dd67b4d015b5b8787876040518084600160a060020a0316600160a060020a03168152602001838152602001828152602001935050505060405180910390a150505050505050565b600054600160a060020a031681565b600080600085600160a060020a031633600160a060020a03161415156114a057600080fd5b60018410156114ae57600080fd5b600354600160a060020a03166323b872dd89308a60405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561151157600080fd5b5af1151561151e57600080fd5b50505060405180519050151561153357600080fd5b61156b85858080601f0160208091040260200160405190810160405281815292919060208401838380828437506122ad945050505050565b91945092509050600183141561158c576115878888848461239f565b6115b4565b82600314156115a057611587888884612eb2565b82600414156115b4576115b48888846135df565b5050505050505050565b6004546000908190819081908190819081908190600160a060020a0316639267b2916040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561160e57600080fd5b5af1151561161b57600080fd5b50505060405180519050151561163057600080fd5b600454600160a060020a031663196ecd25338c60405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561168657600080fd5b5af1151561169357600080fd5b50505060405180519850508888108015906116ae5750600089115b15156116b957600080fd5b6116c3888a613ff2565b975060288a106117c857600554600160a060020a031663b2570b1c8b8a8c60405160e060020a63ffffffff8616028152600481019390935260248301919091526044820152606401608060405180830381600087803b151561172457600080fd5b5af1151561173157600080fd5b50505060405180519060200180519060200180519060200180516005549499509296509193506117c192600160a060020a0316915063b6206e6790508c60405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156117a457600080fd5b5af115156117b157600080fd5b505050604051805190508a614004565b91506118ab565b600554600160a060020a031663ee4827ea8b8a8c60405160e060020a63ffffffff861602815260048101939093526024830191909152604482015260640160a060405180830381600087803b151561181f57600080fd5b5af1151561182c57600080fd5b5050506040518051906020018051906020018051906020018051906020018051600554959a509398509196509193506118a892600160a060020a0316915063fbe45b4890508c60405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156117a457600080fd5b91505b8015156118b757600080fd5b600083111561194c5760045461194590600160a060020a0316634676b8973360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561191457600080fd5b5af1151561192157600080fd5b50505060405180519050611940611939866046614004565b606461402f565b612293565b96506119b5565b600454600160a060020a0316634676b8973360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561199c57600080fd5b5af115156119a957600080fd5b50505060405180519750505b600454600160a060020a031663176854f63360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1515611a0557600080fd5b5af11515611a1257600080fd5b5050600454600160a060020a0316905063448a0ceb8860405160e060020a63ffffffff84160281526004810191909152602401600060405180830381600087803b1515611a5e57600080fd5b5af11515611a6b57600080fd5b5050600454600160a060020a0316905063a6678b603389600160405160e060020a63ffffffff8616028152600160a060020a039093166004840152602483019190915215156044820152606401600060405180830381600087803b1515611ad157600080fd5b5af11515611ade57600080fd5b5050600454600160a060020a031690506397ce3a4b338c8c60405160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091526044820152606401602060405180830381600087803b1515611b4157600080fd5b5af11515611b4e57600080fd5b50505060405180519650506000841115611c4257600454600160a060020a031663396e70e0338860405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515611bb857600080fd5b5af11515611bc557600080fd5b5050600454600160a060020a0316905063ce29555f338c89600060405160e060020a63ffffffff8716028152600160a060020a0390941660048501526024840192909252604483015215156064820152608401600060405180830381600087803b1515611c3157600080fd5b5af11515611c3e57600080fd5b5050505b6000821115611cd457600454600160a060020a0316635460554933611c6b611939866046614004565b60018060405160e060020a63ffffffff8716028152600160a060020a039094166004850152602484019290925260ff16604483015215156064820152608401600060405180830381600087803b1515611cc357600080fd5b5af11515611cd057600080fd5b5050505b600454600160a060020a031663e7001b84338c8c600060405160e060020a63ffffffff8716028152600160a060020a0390941660048501526024840192909252604483015215156064820152608401600060405180830381600087803b1515611d3c57600080fd5b5af11515611d4957600080fd5b5050600454600160a060020a0316905063fc4756df338b600060405160e060020a63ffffffff8616028152600160a060020a039093166004840152602483019190915215156044820152606401600060405180830381600087803b1515611daf57600080fd5b5af11515611dbc57600080fd5b5050507f9c8076df639d56f1ef3ca3d4d8dc6ed089f8c4756bc5bf5d574f1cec4ef13c54338b8b6040518084600160a060020a0316600160a060020a03168152602001838152602001828152602001935050505060405180910390a150505050505050505050565b60045460009081908190819081908190600160a060020a0316639267b2916040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611e7057600080fd5b5af11515611e7d57600080fd5b505050604051805190501515611e9257600080fd5b6001871015611ea057600080fd5b600454600160a060020a031663e946ad4a338960405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515611ef657600080fd5b5af11515611f0357600080fd5b5050506040518051600554909750600160a060020a031690506373f9421d888860405160e060020a63ffffffff85160281526004810192909252602482015260440160c060405180830381600087803b1515611f5e57600080fd5b5af11515611f6b57600080fd5b50505060405180519060200180519060200180519060200180519060200180519060200180515094995092975090955093509150506008831015611fbc576005861115611fb757600080fd5b611fca565b6002861115611fca57600080fd5b600085118015611fd8575083155b1515611fe357600080fd5b6004548590600160a060020a03166370a082313360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561203557600080fd5b5af1151561204257600080fd5b505050604051805190501015151561205957600080fd5b600454600160a060020a031663a1c90a11338760405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b15156120af57600080fd5b5af115156120bc57600080fd5b5050600454600160a060020a03169050635edc9bff3385858560405160e060020a63ffffffff8716028152600160a060020a039094166004850152602484019290925260448301526064820152608401600060405180830381600087803b151561212557600080fd5b5af1151561213257600080fd5b5050600454600160a060020a03169050632a288272338960405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b151561218c57600080fd5b5af1151561219957600080fd5b5050507f5923958ad0a0f9e2754b81ea1c7483dcdd7481e51b34ee4846bdaa6d5403c3453388604051600160a060020a03909216825260208201526040908101905180910390a150505050505050565b60005433600160a060020a0390811691161461220457600080fd5b600160a060020a038116151561221957600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600554600160a060020a031681565b6000828201838110156122a257fe5b8091505b5092915050565b600080600083516002141561231557836000815181106122c957fe5b016020015160f860020a900460f860020a0260f860020a90049250836001815181106122f157fe5b016020015160f860020a900460f860020a0260f860020a9004915060019050612398565b835160031415612398578360008151811061232c57fe5b016020015160f860020a900460f860020a0260f860020a900492508360018151811061235457fe5b016020015160f860020a900460f860020a0260f860020a900491508360028151811061237c57fe5b016020015160f860020a900460f860020a0260f860020a900490505b9193909250565b60045460009081908190819081908190600160a060020a0316639267b2916040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156123eb57600080fd5b5af115156123f857600080fd5b50505060405180519050151561240d57600080fd5b600187101561241b57600080fd5b600454600160a060020a031663196ecd258b8a60405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561247157600080fd5b5af1151561247e57600080fd5b5050506040518051905095506124948688612293565b9450606385111561251857600454600160a060020a031663969ddd718b8a60405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156124f557600080fd5b5af1151561250257600080fd5b5050506040518051861115905061251857600080fd5b6001881015801561252a575060278811155b1561267157600554600160a060020a031663702123ae8960405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561257757600080fd5b5af1151561258457600080fd5b5050506040518051600554909550600160a060020a0316905063320cffcd89888a60405160e060020a63ffffffff8616028152600481019390935260248301919091526044820152606401602060405180830381600087803b15156125e857600080fd5b5af115156125f557600080fd5b505050604051805160055490945061266a9150600160a060020a031663fbe45b488a60405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561264d57600080fd5b5af1151561265a57600080fd5b5050506040518051905088614004565b9150612738565b6028881061273857600554600160a060020a031663a8aeecd989888a60405160e060020a63ffffffff8616028152600481019390935260248301919091526044820152606401602060405180830381600087803b15156126d057600080fd5b5af115156126dd57600080fd5b50505060405180516005549094506127359150600160a060020a031663b6206e678a60405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561264d57600080fd5b91505b6000821161274557600080fd5b60045482906127c290600160a060020a031663e8d320e68d600160405160e060020a63ffffffff8516028152600160a060020a03909216600483015260ff166024820152604401602060405180830381600087803b15156127a557600080fd5b5af115156127b257600080fd5b505050604051805190508b612293565b10156127cd57600080fd5b6004548390600160a060020a03166370a082318c60405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561281f57600080fd5b5af1151561282c57600080fd5b505050604051805190501015151561284357600080fd5b600454600160a060020a031663a1c90a118b8560405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b151561289957600080fd5b5af115156128a657600080fd5b5050508882111561293b57600454600160a060020a031663546055498b6128cd858d613ff2565b6001600060405160e060020a63ffffffff8716028152600160a060020a039094166004850152602484019290925260ff16604483015215156064820152608401600060405180830381600087803b151561292657600080fd5b5af1151561293357600080fd5b5050506129c8565b818911156129c857600454600160a060020a031663546055498b61295f8c86613ff2565b60018060405160e060020a63ffffffff8716028152600160a060020a039094166004850152602484019290925260ff16604483015215156064820152608401600060405180830381600087803b15156129b757600080fd5b5af115156129c457600080fd5b5050505b6129d382601461402f565b60048054919250600160a060020a039091169063358cfa25906129f790859061402f565b60018060405160e060020a63ffffffff8616028152600481019390935260ff909116602483015215156044820152606401600060405180830381600087803b1515612a4157600080fd5b5af11515612a4e57600080fd5b5050600454600054600160a060020a039182169250635460554991168360018060405160e060020a63ffffffff8716028152600160a060020a039094166004850152602484019290925260ff16604483015215156064820152608401600060405180830381600087803b1515612ac357600080fd5b5af11515612ad057600080fd5b5050506000841115612c9057600454600160a060020a03166379c310a68b82632d171243828d8d60405160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091526044820152606401602060405180830381600087803b1515612b4257600080fd5b5af11515612b4f57600080fd5b5050506040518051905060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515612b9c57600080fd5b5af11515612ba957600080fd5b5050600454600160a060020a0316905063ce29555f8b8a83632d17124383838e60405160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091526044820152606401602060405180830381600087803b1515612c1457600080fd5b5af11515612c2157600080fd5b50505060405180519050600160405160e060020a63ffffffff8716028152600160a060020a0390941660048501526024840192909252604483015215156064820152608401600060405180830381600087803b1515612c7f57600080fd5b5af11515612c8c57600080fd5b5050505b600454600090600160a060020a031663a436e33b8c60405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515612ce357600080fd5b5af11515612cf057600080fd5b50505060405180519050111515612d6257600454600160a060020a031663f7fb0a4b8b60405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1515612d5157600080fd5b5af11515612d5e57600080fd5b5050505b600454600160a060020a031663fc4756df8b89600160405160e060020a63ffffffff8616028152600160a060020a039093166004840152602483019190915215156044820152606401600060405180830381600087803b1515612dc457600080fd5b5af11515612dd157600080fd5b5050600454600160a060020a0316905063e7001b848b8a8a600160405160e060020a63ffffffff8716028152600160a060020a0390941660048501526024840192909252604483015215156064820152608401600060405180830381600087803b1515612e3d57600080fd5b5af11515612e4a57600080fd5b5050507fb6d35f558a34938047f09ebf800fa2e15ec407c357a8eab97a5dd67b4d015b5b8a89896040518084600160a060020a0316600160a060020a03168152602001838152602001828152602001935050505060405180910390a150505050505050505050565b6004546000908190819081908190819081908190600160a060020a0316639267b2916040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515612f0257600080fd5b5af11515612f0f57600080fd5b505050604051805190501515612f2457600080fd5b6001891015612f3257600080fd5b600454600160a060020a031663e946ad4a8c8b60405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515612f8857600080fd5b5af11515612f9557600080fd5b50505060405180519850506005881115612fae57600080fd5b600554600160a060020a03166373f9421d8a8a60405160e060020a63ffffffff85160281526004810192909252602482015260440160c060405180830381600087803b1515612ffc57600080fd5b5af1151561300957600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051959c50939a5091985096509450909250506000821161304d57600080fd5b60008211156133035760045482906130d390600160a060020a031663e8d320e68e600160405160e060020a63ffffffff8516028152600160a060020a03909216600483015260ff166024820152604401602060405180830381600087803b15156130b657600080fd5b5af115156130c357600080fd5b505050604051805190508c612293565b10156130de57600080fd5b8982111561317057600454600160a060020a031663546055498c613102858e613ff2565b6001600060405160e060020a63ffffffff8716028152600160a060020a039094166004850152602484019290925260ff16604483015215156064820152608401600060405180830381600087803b151561315b57600080fd5b5af1151561316857600080fd5b5050506131fd565b898210156131fd57600454600160a060020a031663546055498c6131948d86613ff2565b60018060405160e060020a63ffffffff8716028152600160a060020a039094166004850152602484019290925260ff16604483015215156064820152608401600060405180830381600087803b15156131ec57600080fd5b5af115156131f957600080fd5b5050505b61320882601461402f565b600454909150600160a060020a031663358cfa256132268484613ff2565b60018060405160e060020a63ffffffff8616028152600481019390935260ff909116602483015215156044820152606401600060405180830381600087803b151561327057600080fd5b5af1151561327d57600080fd5b5050600454600054600160a060020a039182169250635460554991168360018060405160e060020a63ffffffff8716028152600160a060020a039094166004850152602484019290925260ff16604483015215156064820152608401600060405180830381600087803b15156132f257600080fd5b5af115156132ff57600080fd5b5050505b6004548790600160a060020a03166370a082318d60405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561335557600080fd5b5af1151561336257600080fd5b505050604051805190501015151561337957600080fd5b600454600160a060020a031663a1c90a118c8960405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b15156133cf57600080fd5b5af115156133dc57600080fd5b5050600454600160a060020a03169050635edc9bff8c87878760405160e060020a63ffffffff8716028152600160a060020a039094166004850152602484019290925260448301526064820152608401600060405180830381600087803b151561344557600080fd5b5af1151561345257600080fd5b5050600454600160a060020a03169050632a2882728c8b60405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b15156134ac57600080fd5b5af115156134b957600080fd5b505060045460009150600160a060020a031663a436e33b8d60405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561350f57600080fd5b5af1151561351c57600080fd5b5050506040518051905011151561358e57600454600160a060020a031663f7fb0a4b8c60405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b151561357d57600080fd5b5af1151561358a57600080fd5b5050505b7f5923958ad0a0f9e2754b81ea1c7483dcdd7481e51b34ee4846bdaa6d5403c3458b8a604051600160a060020a03909216825260208201526040908101905180910390a15050505050505050505050565b6004546000908190819081908190819081908190600160a060020a0316639267b2916040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561362f57600080fd5b5af1151561363c57600080fd5b50505060405180519050151561365157600080fd5b600654600160a060020a03166372eefb8a8a60405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561369957600080fd5b5af115156136a657600080fd5b5050506040518051985050600160a060020a03881615156136c657600080fd5b600160a060020a038b811690891614156136df57600080fd5b600654600160a060020a031663104a5e758a60405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561372757600080fd5b5af1151561373457600080fd5b505050604051805160045490985061379e9150600160a060020a031663e8d320e68d600160405160e060020a63ffffffff8516028152600160a060020a03909216600483015260ff166024820152604401602060405180830381600087803b15156127a557600080fd5b9550868610156137ad57600080fd5b600454600160a060020a031663e3cbe7448c60405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b15156137fd57600080fd5b5af1151561380a57600080fd5b5050600454600160a060020a0316905063e3cbe7448960405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b151561385e57600080fd5b5af1151561386b57600080fd5b5050600654600160a060020a031690506382a86cda8a60405160e060020a63ffffffff8416028152600481019190915260240160c060405180830381600087803b15156138b757600080fd5b5af115156138c457600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051600454939b5091995090975050600160a060020a03169250635edc9bff91508d905087878760405160e060020a63ffffffff8716028152600160a060020a039094166004850152602484019290925260448301526064820152608401600060405180830381600087803b151561395f57600080fd5b5af1151561396c57600080fd5b5050600454600160a060020a031690506352d214a78987878760405160e060020a63ffffffff8716028152600160a060020a039094166004850152602484019290925260448301526064820152608401600060405180830381600087803b15156139d557600080fd5b5af115156139e257600080fd5b50505089871115613a7757600454600160a060020a031663546055498c613a098a8e613ff2565b6001600060405160e060020a63ffffffff8716028152600160a060020a039094166004850152602484019290925260ff16604483015215156064820152608401600060405180830381600087803b1515613a6257600080fd5b5af11515613a6f57600080fd5b505050613b04565b868a1115613b0457600454600160a060020a031663546055498c613a9b8d8b613ff2565b60018060405160e060020a63ffffffff8716028152600160a060020a039094166004850152602484019290925260ff16604483015215156064820152608401600060405180830381600087803b1515613af357600080fd5b5af11515613b0057600080fd5b5050505b613b0f87601461402f565b9150613b1c87601461402f565b600454909150600160a060020a031663358cfa258260018060405160e060020a63ffffffff8616028152600481019390935260ff909116602483015215156044820152606401600060405180830381600087803b1515613b7b57600080fd5b5af11515613b8857600080fd5b5050600454600054600160a060020a039182169250635460554991168460018060405160e060020a63ffffffff8716028152600160a060020a039094166004850152602484019290925260ff16604483015215156064820152608401600060405180830381600087803b1515613bfd57600080fd5b5af11515613c0a57600080fd5b5050600654600160a060020a0316905063f5537ede898d8c60405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b1515613c7157600080fd5b5af11515613c7e57600080fd5b5050600654600160a060020a031690506373a553898a613cfc613cf58463103d26ac8460405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515613cd757600080fd5b5af11515613ce457600080fd5b505050604051805190506005614004565b600461402f565b60405160e060020a63ffffffff851602815260048101929092526024820152604401600060405180830381600087803b1515613d3757600080fd5b5af11515613d4457600080fd5b5050600454600160a060020a03169050635460554989613d6d8a613d688688612293565b613ff2565b60018060405160e060020a63ffffffff8716028152600160a060020a039094166004850152602484019290925260ff16604483015215156064820152608401600060405180830381600087803b1515613dc557600080fd5b5af11515613dd257600080fd5b505060045460009150600160a060020a031663a436e33b8d60405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515613e2857600080fd5b5af11515613e3557600080fd5b50505060405180519050111515613ea757600454600160a060020a031663f7fb0a4b8c60405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1515613e9657600080fd5b5af11515613ea357600080fd5b5050505b600454600160a060020a031663fc4756df8c60018060405160e060020a63ffffffff8616028152600160a060020a039093166004840152602483019190915215156044820152606401600060405180830381600087803b1515613f0957600080fd5b5af11515613f1657600080fd5b5050600454600160a060020a0316905063fc4756df8960018060405160e060020a63ffffffff8616028152600160a060020a039093166004840152602483019190915215156044820152606401600060405180830381600087803b1515613f7c57600080fd5b5af11515613f8957600080fd5b5050507f384a5203a72a9d3dc8f2dd0c78e393c368a78a6dfda91fc33f89bb8609a918d38b898b8a604051600160a060020a0394851681529290931660208301526040808301919091526060820192909252608001905180910390a15050505050505050505050565b600082821115613ffe57fe5b50900390565b60008083151561401757600091506122a6565b5082820282848281151561402757fe5b04146122a257fe5b600080828481151561403d57fe5b049493505050505600a165627a7a7230582037c00b155f0144ea9b3c4f2e04a5f7d5d9adf79618f9026c91eeda8e28ff1fe20029"
}