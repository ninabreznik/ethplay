{
  "address": "0x72b44cc5efa2de3f4ddd6294e415e47c7876dfce",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ETOVotes",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-29\n*/\n\npragma solidity ^0.5.8;\npragma experimental ABIEncoderV2;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\ncontract ETORoles {\n        using Roles for Roles.Role;\n\n        constructor() internal {\n                _addAuditWriter(msg.sender);\n                _addAssetSeizer(msg.sender);\n                _addKycProvider(msg.sender);\n                _addAssetFreezer(msg.sender);\n                _addUserManager(msg.sender);\n                _addOwner(msg.sender);\n        }\n\n        /*\n         * Audit Writer functions\n         */\n        event AuditWriterAdded(address indexed account);\n        event AuditWriterRemoved(address indexed account);\n\n        Roles.Role private _auditWriters;\n\n        modifier onlyAuditWriter() {\n                require(isAuditWriter(msg.sender));\n                _;\n        }\n\n        function isAuditWriter(address account) public view returns (bool) {\n                return _auditWriters.has(account);\n        }\n\n        function addAuditWriter(address account) public onlyUserManager {\n                _addAuditWriter(account);\n        }\n\n        function renounceAuditWriter() public {\n                _removeAuditWriter(msg.sender);\n        }\n\n        function _addAuditWriter(address account) internal {\n                _auditWriters.add(account);\n                emit AuditWriterAdded(account);\n        }\n\n        function _removeAuditWriter(address account) internal {\n                _auditWriters.remove(account);\n                emit AuditWriterRemoved(account);\n        }\n\n        /*\n         * KYC Provider functions\n         */\n        event KycProviderAdded(address indexed account);\n        event KycProviderRemoved(address indexed account);\n\n        Roles.Role private _kycProviders;\n\n        modifier onlyKycProvider() {\n                require(isKycProvider(msg.sender));\n                _;\n        }\n\n        function isKycProvider(address account) public view returns (bool) {\n                return _kycProviders.has(account);\n        }\n\n        function addKycProvider(address account) public onlyUserManager {\n                _addKycProvider(account);\n        }\n\n        function renounceKycProvider() public {\n                _removeKycProvider(msg.sender);\n        }\n\n        function _addKycProvider(address account) internal {\n                _kycProviders.add(account);\n                emit KycProviderAdded(account);\n        }\n\n        function _removeKycProvider(address account) internal {\n                _kycProviders.remove(account);\n                emit KycProviderRemoved(account);\n        }\n\n        /*\n         * Asset Seizer functions\n         */\n        event AssetSeizerAdded(address indexed account);\n        event AssetSeizerRemoved(address indexed account);\n\n        Roles.Role private _assetSeizers;\n\n        modifier onlyAssetSeizer() {\n                require(isAssetSeizer(msg.sender));\n                _;\n        }\n\n        function isAssetSeizer(address account) public view returns (bool) {\n                return _assetSeizers.has(account);\n        }\n\n        function addAssetSeizer(address account) public onlyUserManager {\n                _addAssetSeizer(account);\n        }\n\n        function renounceAssetSeizer() public {\n                _removeAssetSeizer(msg.sender);\n        }\n\n        function _addAssetSeizer(address account) internal {\n                _assetSeizers.add(account);\n                emit AssetSeizerAdded(account);\n        }\n\n        function _removeAssetSeizer(address account) internal {\n                _assetSeizers.remove(account);\n                emit AssetSeizerRemoved(account);\n        }\n\n        /*\n         * Asset Freezer functions\n         */\n        event AssetFreezerAdded(address indexed account);\n        event AssetFreezerRemoved(address indexed account);\n\n        Roles.Role private _assetFreezers;\n\n        modifier onlyAssetFreezer() {\n                require(isAssetFreezer(msg.sender));\n                _;\n        }\n\n        function isAssetFreezer(address account) public view returns (bool) {\n                return _assetFreezers.has(account);\n        }\n\n        function addAssetFreezer(address account) public onlyUserManager {\n                _addAssetFreezer(account);\n        }\n\n        function renounceAssetFreezer() public {\n                _removeAssetFreezer(msg.sender);\n        }\n\n        function _addAssetFreezer(address account) internal {\n                _assetFreezers.add(account);\n                emit AssetFreezerAdded(account);\n        }\n\n        function _removeAssetFreezer(address account) internal {\n                _assetFreezers.remove(account);\n                emit AssetFreezerRemoved(account);\n        }\n\n        /*\n         * User Manager functions\n         */\n        event UserManagerAdded(address indexed account);\n        event UserManagerRemoved(address indexed account);\n\n        Roles.Role private _userManagers;\n\n        modifier onlyUserManager() {\n                require(isUserManager(msg.sender));\n                _;\n        }\n\n        function isUserManager(address account) public view returns (bool) {\n                return _userManagers.has(account);\n        }\n\n        function addUserManager(address account) public onlyUserManager {\n                _addUserManager(account);\n        }\n\n        function renounceUserManager() public {\n                _removeUserManager(msg.sender);\n        }\n\n        function _addUserManager(address account) internal {\n                _userManagers.add(account);\n                emit UserManagerAdded(account);\n        }\n\n        function _removeUserManager(address account) internal {\n                _userManagers.remove(account);\n                emit UserManagerRemoved(account);\n        }\n        \n        /*\n         * Owner functions\n         */\n        event OwnerAdded(address indexed account);\n        event OwnerRemoved(address indexed account);\n\n        Roles.Role private _owners;\n\n        modifier onlyOwner() {\n                require(isOwner(msg.sender));\n                _;\n        }\n\n        function isOwner(address account) public view returns (bool) {\n                return _owners.has(account);\n        }\n\n        function addOwner(address account) public onlyUserManager {\n                _addOwner(account);\n        }\n\n        function renounceOwner() public {\n                _removeOwner(msg.sender);\n        }\n\n        function _addOwner(address account) internal {\n                _owners.add(account);\n                emit OwnerAdded(account);\n        }\n\n        function _removeOwner(address account) internal {\n                _owners.remove(account);\n                emit OwnerRemoved(account);\n        }\n        \n}\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}\n\n\ncontract ETOToken is ERC20Mintable, ETORoles {\n    enum AssetStatuses {ACTIVE, FROZEN, ISSUED, LISTED, INESCROW}\n    enum CompanyStatuses {ININCORPORATION, ACTIVE, INLIQUIDATION}\n    struct TokenCapabilities {\n        bool Voting;\n        bool Dividend;\n        string[] CorporateActions;\n    }\n\n    /* ETO investors */\n    mapping(address => bool) investorWhitelist;\n    address[] investorWhitelistLUT;\n\n    /* ETO contract parameters */\n    string public constant tokenName = \"ETOToken\";\n    string public constant symbol = \"ETO\";\n    uint8 public constant decimals = 0;\n\n    /* Listing parameters */\n    string public ISIN;\n    string public ITIN;\n    string public ValorNumber;\n    AssetStatuses public AssetStatus;\n    uint256 public LiquidationProceeds;\n    string public TaxDomicile;\n    TokenCapabilities public Capabilities;\n    uint256 public VotePercentage;\n    uint256 public IssuancePrice;\n    string[] public Currencies;\n    uint256 public SalesStart;\n    uint256 public SalesEnd;\n    uint256 public TradeStart;\n    uint256 public IssuanceStart;\n    uint256 public IssuePaymentDate;\n    uint256 public InitialFixingDate;\n    string public MarketMaker;\n    string public MainPayingAgent;\n    uint256 public SmallestTradableDenomination;\n    uint256 public TickSize;\n    uint256 public NextDividendDate;\n    string public DividendType;\n    uint256 public DividendTax;\n    uint256 public PercentageDividend;\n    string public CompanyName;\n    CompanyStatuses public CompanyStatus;\n    string public CompanyLegalForm;\n\n    /* Audit logging */\n    mapping(uint256 => uint256) auditHashes;\n    \n    /* Document hashes */                                                       \n    mapping(uint256 => uint256) documentHashes;\n\n    /* Events in the ETO contract */\n    // Transaction related events\n    event AssetsSeized(address seizee, uint256 amount);\n    event AssetsUnseized(address seizee, uint256 amount);\n    event InvestorWhitelisted(address investor);\n    event InvestorBlacklisted(address investor);\n    event DividendPayout(address receiver, uint256 amount);\n    event TokensGenerated(uint256 amount);\n    event OwnershipUpdated(address newOwner);\n\n    /**\n    * @dev Constructor that defines contract parameters\n    */\n    constructor() public {\n        AssetStatus = AssetStatuses.ACTIVE;\n        TaxDomicile = \"CH\";\n        Capabilities.Voting = true;\n        Capabilities.Dividend = true;\n        CompanyName = \"BlockState\";\n        CompanyStatus = CompanyStatuses.ACTIVE;\n        CompanyLegalForm = \"AG\";\n    }\n\n    /* Variable update events */\n    event ISINUpdated(string newValue);\n    event ITINUpdated(string newValue);\n    event ValorNumberUpdated(string newValue);\n    event AssetStatusUpdated(AssetStatuses newValue);\n    event LiquidationProceedsUpdated(uint256 newValue);\n    event CurrenciesUpdated(string[]  newValue);\n    event TaxDomicileUpdated(string newValue);\n    event CapabilitiesUpdated(TokenCapabilities newValue);\n    event VotePercentageUpdated(uint256 newValue);\n    event IssuancePriceUpdated(uint256 newValue);\n    event SalesStartUpdated(uint256 newValue);\n    event SalesEndUpdated(uint256 newValue);\n    event TradeStartUpdated(uint256 newValue);\n    event IssuanceStartUpdated(uint256 newValue);\n    event IssuePaymentDateUpdated(uint256 newValue);\n    event InitialFixingDateUpdated(uint256 newValue);\n    event MarketMakerUpdated(string newValue);\n    event MainPayingAgentUpdated(string newValue);\n    event SmallestTradableDenominationUpdated(uint256 newValue);\n    event TickSizeUpdated(uint256 newValue);\n    event NextDividendDateUpdated(uint256 newValue);\n    event DividendTypeUpdated(string newValue);\n    event DividendTaxUpdated(uint256 newValue);\n    event PercentageDividendUpdated(uint256 newValue);\n    event CompanyNameUpdated(string newValue);\n    event CompanyStatusUpdated(CompanyStatuses newValue);\n    event CompanyLegalFormUpdated(string newValue);\n\n    /* Variable Update Functions */\n    function setISIN(string memory newValue) public onlyOwner {\n        ISIN = newValue;\n        emit ISINUpdated(newValue);\n    }\n    function setITIN(string memory newValue) public onlyOwner {\n        ITIN = newValue;\n        emit ITINUpdated(newValue);\n    }\n    function setValorNumber(string memory newValue) public onlyOwner {\n        ValorNumber = newValue;\n        emit ValorNumberUpdated(newValue);\n    }\n        function setAssetStatus(AssetStatuses newValue) public onlyOwner {\n                AssetStatus = newValue;\n                emit AssetStatusUpdated(newValue);\n        }\n        function setLiquidationProceeds(uint256 newValue) public onlyOwner {\n                LiquidationProceeds = newValue;\n                emit LiquidationProceedsUpdated(newValue);\n        }\n        function setTaxDomicile(string memory newValue) public onlyOwner {\n                TaxDomicile= newValue;\n                emit TaxDomicileUpdated(newValue);\n        }\n        function setCapabilities(TokenCapabilities memory newValue) public onlyOwner {\n                Capabilities = newValue;\n                emit CapabilitiesUpdated(newValue);\n        }\n        function setVotePercentage(uint256 newValue) public onlyOwner {\n                VotePercentage = newValue;\n                emit VotePercentageUpdated(newValue);\n        }\n        function setIssuancePrice(uint256 newValue) public onlyOwner {\n                IssuancePrice = newValue;\n                emit IssuancePriceUpdated(newValue);\n        }\n        function setCurrencies(string[] memory newValue) public onlyOwner {\n                Currencies = newValue;\n                emit CurrenciesUpdated(newValue);\n        }\n        function setSalesStart(uint256 newValue) public onlyOwner {\n                SalesStart = newValue;\n                emit SalesStartUpdated(newValue);\n        }\n        function setSalesEnd(uint256 newValue) public onlyOwner {\n                SalesEnd = newValue;\n                emit SalesEndUpdated(newValue);\n        }\n        function setTradeStart(uint256 newValue) public onlyOwner {\n                TradeStart = newValue;\n                emit TradeStartUpdated(newValue);\n        }\n        function setIssuanceStart(uint256 newValue) public onlyOwner {\n                IssuanceStart = newValue;\n                emit IssuanceStartUpdated(newValue);\n        }\n        function setIssuePaymentDate(uint256 newValue) public onlyOwner {\n                IssuePaymentDate = newValue;\n                emit IssuePaymentDateUpdated(newValue);\n        }\n        function setInitialFixingDate(uint256 newValue) public onlyOwner {\n                InitialFixingDate = newValue;\n                emit InitialFixingDateUpdated(newValue);\n        }\n        function setMarketMaker(string memory newValue) public onlyOwner {\n                MarketMaker = newValue;\n                emit MarketMakerUpdated(newValue);\n        }\n        function setMainPayingAgent(string memory newValue) public onlyOwner {\n                MainPayingAgent = newValue;\n                emit MainPayingAgentUpdated(newValue);\n        }\n        function setSmallestTradableDenomination(uint256 newValue) public onlyOwner {\n                SmallestTradableDenomination = newValue;\n                emit SmallestTradableDenominationUpdated(newValue);\n        }\n        function setTickSize(uint256 newValue) public onlyOwner {\n                TickSize = newValue;\n                emit TickSizeUpdated(newValue);\n        }\n        function setNextDividendDate(uint256 newValue) public onlyOwner {\n                NextDividendDate = newValue;\n                emit NextDividendDateUpdated(newValue);\n        }\n        function setDividendType(string memory newValue) public onlyOwner {\n                DividendType = newValue;\n                emit DividendTypeUpdated(newValue);\n        }\n        function setDividendTax(uint256 newValue) public onlyOwner {\n                DividendTax = newValue;\n                emit DividendTaxUpdated(newValue);\n        }\n        function setPercentageDividend(uint256 newValue) public onlyOwner {\n                PercentageDividend = newValue;\n                emit PercentageDividendUpdated(newValue);\n        }\n        function setCompanyName(string memory newValue) public onlyOwner {\n                CompanyName = newValue;\n                emit CompanyNameUpdated(newValue);\n        }\n        function setCompanyStatus(CompanyStatuses newValue) public onlyOwner {\n                CompanyStatus = newValue;\n                emit CompanyStatusUpdated(newValue);\n        }\n        function setCompanyLegalForm(string memory newValue) public onlyOwner {\n                CompanyLegalForm = newValue;\n                emit CompanyLegalFormUpdated(newValue);\n        }\n\n        /* Seize assets */\n        function seizeAssets(address seizee, uint256 seizableAmount) public onlyAssetSeizer {\n                require(balanceOf(seizee) >= seizableAmount);\n                transferFrom(seizee, msg.sender, seizableAmount);\n                emit AssetsSeized(seizee, seizableAmount);\n        }\n\n        /* Release seized assets */\n        function releaseAssets(address seizee, uint256 seizedAmount) public onlyAssetSeizer {\n                require(balanceOf(msg.sender) >= seizedAmount);\n                transferFrom(msg.sender, seizee, seizedAmount);\n                emit AssetsUnseized(seizee, seizedAmount);\n        }\n\n        /* Add investor to the whitelist */\n        function whitelistInvestor(address investor) public onlyKycProvider {\n                investorWhitelist[investor] = true;\n                investorWhitelistLUT.push(investor);\n                emit InvestorWhitelisted(investor);\n        }\n\n        /* Remove investor from the whitelist */\n        function blacklistInvestor(address investor) public onlyKycProvider {\n                investorWhitelist[investor] = false;\n                for (uint i = 0; i < investorWhitelistLUT.length; i++) {\n                        if (investorWhitelistLUT[i] == investor) {\n                                investorWhitelistLUT[i] = investorWhitelistLUT[investorWhitelistLUT.length];\n                                delete investorWhitelistLUT[investorWhitelistLUT.length];\n                                break;\n                        }\n                }\n                emit InvestorBlacklisted(investor);\n        }\n\n        /* Overwrite transfer() to respect the whitelist, tag- and drag along rules */\n        function transfer(address _to, uint256 _value) public returns (bool) {\n                require(investorWhitelist[_to] == true);\n                return super.transfer(_to, _value);\n        }\n\n        /* Generate tokens */\n        function generateTokens(uint256 amount, address assetReceiver) public onlyOwner {\n                _mint(assetReceiver, amount);\n        }\n\n        function initiateDividendPayments(uint amount) public returns (bool) {\n                uint dividendPerToken = amount / totalSupply();\n                for (uint i = 0; i < investorWhitelistLUT.length; i++) {\n                        address currentInvestor = investorWhitelistLUT[i];\n                        uint256 currentInvestorShares = balanceOf(currentInvestor);\n                        uint256 currentInvestorPayout = dividendPerToken * currentInvestorShares;\n                        emit DividendPayout(currentInvestor, currentInvestorPayout);\n                }\n        }\n\n        function addAuditHash(uint256 hash) public onlyAuditWriter {\n                auditHashes[now] = hash;\n        }\n\n        function getAuditHash(uint256 timestamp) public view returns (uint256) {\n                return auditHashes[timestamp];\n        }\n        \n        function addDocumentHash(uint256 hash) public onlyOwner {                      \n            documentHashes[now] = hash;                                                \n        }\n}\n\ncontract ETOVotes is ETOToken {\n    event VoteOpen(uint256 _id, uint _deadline);\n    event VoteFinished(uint256 _id, bool _result);\n\n    // How many blocks should we wait before the vote can be closed\n    mapping (uint256 => Vote) private votes;\n\n    struct Voter {\n        address id;\n        bool vote;\n    }\n\n    struct Vote {\n        uint256 deadline;\n        Voter[] voters;\n        mapping(address => uint) votersIndex;\n        uint256 documentHash;\n    }\n\n    constructor() public {}\n\n    function vote(uint256 _id, bool _vote) public {\n        // Allow changing opinion until vote deadline\n        require (votes[_id].deadline > 0, \"Vote not available\");\n        require(now <= votes[_id].deadline, \"Vote deadline exceeded\");\n        if (didCastVote(_id)) {\n            uint256 currentIndex = votes[_id].votersIndex[msg.sender];\n            Voter memory newVoter = Voter(msg.sender, _vote);\n            votes[_id].voters[currentIndex] = newVoter;\n        } else {\n            votes[_id].voters.push(Voter(msg.sender, _vote));\n            votes[_id].votersIndex[msg.sender] = votes[_id].voters.length;\n        }\n    }\n\n    function openVote(uint256 _id, uint256 documentHash, uint256 voteDuration) external {\n        require(votes[_id].deadline == 0, \"Vote already ongoing\");\n        votes[_id].deadline = now + (voteDuration * 1 seconds);\n        votes[_id].documentHash = documentHash;\n        emit VoteOpen(_id, votes[_id].deadline);\n    }\n\n    /**\n    * @dev Once the deadline is reached this function should be called to get decision.\n    * @param _id data source id.\n    */\n    function triggerDecision(uint256 _id) external {\n        // Maybe we can get rid of a require\n        require(votes[_id].deadline > 0, \"Vote not available\");\n        require(now > votes[_id].deadline, \"Vote deadline not reached\");\n        // prevent method to be called again before its done\n        votes[_id].deadline = 0;\n        uint256 negativeVotes = 0;\n        uint256 positiveVotes = 0;\n        uint totalVoters = votes[_id].voters.length;\n        for (uint i = 0; i < totalVoters; i++){\n            if (votes[_id].voters[i].vote)\n                negativeVotes++;\n            else\n                positiveVotes++;\n        }\n        bool result = (positiveVotes > negativeVotes);\n        emit VoteFinished(_id, result);\n    }\n\n    /**\n    * @dev get vote status.\n    * @param _id data source id.\n    */\n    function isVoteOpen(uint256 _id) external view returns (bool) {\n        return (votes[_id].deadline > 0) && (now <= votes[_id].deadline);\n    }\n\n    /**\n    * @dev check if address voted already.\n    * @param _id data source identifier.\n    */\n    function didCastVote(uint256 _id) public view returns (bool) {\n        return (votes[_id].votersIndex[msg.sender] > 0);\n    }\n        \n    function getOwnVote(uint256 _id) public view returns (bool) {\n        uint voterId = votes[_id].votersIndex[msg.sender];\n        return votes[_id].voters[voterId-1].vote;\n    }\n    \n    function getCurrentPositives(uint256 _id) public view returns (uint256) {\n        uint adder = 0;\n        for (uint256 i = 0; i < votes[_id].voters.length; i++) {\n            if (votes[_id].voters[i].vote == true) {\n                adder += balanceOf(votes[_id].voters[i].id);\n            }\n        }\n        return adder;\n    }\n    \n    function getCurrentNegatives(uint256 _id) public view returns (uint256) {\n        uint adder = 0;\n        for (uint256 i = 0; i < votes[_id].voters.length; i++) {\n            if (votes[_id].voters[i].vote == false) {\n                adder += balanceOf(votes[_id].voters[i].id);\n            }\n        }\n        return adder;\n    }\n}",
  "bytecode": "",
  "constructorArguments": "0046000825580601f106145fd575061461c565b601f01602090049060005260206000209081019061461b9190614506565b5b50565b60008135905061462e816153ba565b92915050565b600082601f83011261464557600080fd5b813561465861465382615162565b615135565b9150818183526020840193506020810190508360005b8381101561469e5781358601614684888261475b565b84526020840193506020830192505060018101905061466e565b5050505092915050565b600082601f8301126146b957600080fd5b81356146cc6146c78261518a565b615135565b9150818183526020840193506020810190508360005b8381101561471257813586016146f8888261475b565b8452602084019350602083019250506001810190506146e2565b5050505092915050565b60008135905061472b816153d1565b92915050565b600081359050614740816153e8565b92915050565b600081359050614755816153f8565b92915050565b600082601f83011261476c57600080fd5b813561477f61477a826151b2565b615135565b9150808252602083016020830185838301111561479b57600080fd5b6147a683828461534d565b50505092915050565b600082601f8301126147c057600080fd5b81356147d36147ce826151de565b615135565b915080825260208301602083018583830111156147ef57600080fd5b6147fa83828461534d565b50505092915050565b60006060828403121561481557600080fd5b61481f6060615135565b9050600061482f8482850161471c565b60008301525060206148438482850161471c565b602083015250604082013567ffffffffffffffff81111561486357600080fd5b61486f84828501614634565b60408301525092915050565b60008135905061488a81615408565b92915050565b6000602082840312156148a257600080fd5b60006148b08482850161461f565b91505092915050565b600080604083850312156148cc57600080fd5b60006148da8582860161461f565b92505060206148eb8582860161461f565b9150509250929050565b60008060006060848603121561490a57600080fd5b60006149188682870161461f565b93505060206149298682870161461f565b925050604061493a8682870161487b565b9150509250925092565b6000806040838503121561495757600080fd5b60006149658582860161461f565b92505060206149768582860161487b565b9150509250929050565b60006020828403121561499257600080fd5b600082013567ffffffffffffffff8111156149ac57600080fd5b6149b8848285016146a8565b91505092915050565b6000602082840312156149d357600080fd5b60006149e184828501614731565b91505092915050565b6000602082840312156149fc57600080fd5b6000614a0a84828501614746565b91505092915050565b600060208284031215614a2557600080fd5b600082013567ffffffffffffffff811115614a3f57600080fd5b614a4b848285016147af565b91505092915050565b600060208284031215614a6657600080fd5b600082013567ffffffffffffffff811115614a8057600080fd5b614a8c84828501614803565b91505092915050565b600060208284031215614aa757600080fd5b6000614ab58482850161487b565b91505092915050565b60008060408385031215614ad157600080fd5b6000614adf8582860161487b565b9250506020614af08582860161461f565b9150509250929050565b60008060408385031215614b0d57600080fd5b6000614b1b8582860161487b565b9250506020614b2c8582860161471c565b9150509250929050565b600080600060608486031215614b4b57600080fd5b6000614b598682870161487b565b9350506020614b6a8682870161487b565b9250506040614b7b8682870161487b565b9150509250925092565b6000614b918383614d07565b905092915050565b614ba2816152ae565b82525050565b6000614bb38261522f565b614bbd818561527b565b935083602082028501614bcf85615217565b8060005b85811015614c0b5784840389528151614bec8582614b85565b9450614bf78361525d565b925060208a01995050600181019050614bd3565b50829750879550505050505092915050565b6000614c2882615224565b614c32818561526a565b935083602082028501614c448561520a565b8060005b85811015614c805784840389528151614c618582614b85565b9450614c6c83615250565b925060208a01995050600181019050614c48565b50829750879550505050505092915050565b614c9b816152c0565b82525050565b614caa816152c0565b82525050565b614cb981615329565b82525050565b614cc88161533b565b82525050565b6000614cd982615245565b614ce3818561529d565b9350614cf381856020860161535c565b614cfc8161538f565b840191505092915050565b6000614d128261523a565b614d1c818561528c565b9350614d2c81856020860161535c565b614d358161538f565b840191505092915050565b6000614d4b8261523a565b614d55818561529d565b9350614d6581856020860161535c565b614d6e8161538f565b840191505092915050565b6000614d8660168361529d565b91507f566f746520646561646c696e65206578636565646564000000000000000000006000830152602082019050919050565b6000614dc660128361529d565b91507f566f7465206e6f7420617661696c61626c6500000000000000000000000000006000830152602082019050919050565b6000614e0660148361529d565b91507f566f746520616c7265616479206f6e676f696e670000000000000000000000006000830152602082019050919050565b6000614e4660198361529d565b91507f566f746520646561646c696e65206e6f742072656163686564000000000000006000830152602082019050919050565b6000606083016000830151614e916000860182614c92565b506020830151614ea46020860182614c92565b5060408301518482036040860152614ebc8282614c1d565b9150508091505092915050565b614ed281615312565b82525050565b614ee18161531c565b82525050565b6000602082019050614efc6000830184614b99565b92915050565b6000604082019050614f176000830185614b99565b614f246020830184614ec9565b9392505050565b60006020820190508181036000830152614f458184614ba8565b905092915050565b6000602082019050614f626000830184614ca1565b92915050565b6000604082019050614f7d6000830185614ca1565b614f8a6020830184614ca1565b9392505050565b6000602082019050614fa66000830184614cb0565b92915050565b6000602082019050614fc16000830184614cbf565b92915050565b60006020820190508181036000830152614fe18184614d40565b905092915050565b600060208201905081810360008301526150038184614cce565b905092915050565b6000602082019050818103600083015261502481614d79565b9050919050565b6000602082019050818103600083015261504481614db9565b9050919050565b6000602082019050818103600083015261506481614df9565b9050919050565b6000602082019050818103600083015261508481614e39565b9050919050565b600060208201905081810360008301526150a58184614e79565b905092915050565b60006020820190506150c26000830184614ec9565b92915050565b60006040820190506150dd6000830185614ec9565b6150ea6020830184614ca1565b9392505050565b60006040820190506151066000830185614ec9565b6151136020830184614ec9565b9392505050565b600060208201905061512f6000830184614ed8565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561515857600080fd5b8060405250919050565b600067ffffffffffffffff82111561517957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156151a157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156151c957600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156151f557600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006152b9826152f2565b9050919050565b60008115159050919050565b60008190506152da826153a0565b919050565b60008190506152ed826153ad565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000615334826152cc565b9050919050565b6000615346826152df565b9050919050565b82818337600083830152505050565b60005b8381101561537a57808201518184015260208101905061535f565b83811115615389576000848401525b50505050565b6000601f19601f8301169050919050565b600581106153aa57fe5b50565b600381106153b757fe5b50565b6153c3816152ae565b81146153ce57600080fd5b50565b6153da816152c0565b81146153e557600080fd5b50565b600581106153f557600080fd5b50565b6003811061540557600080fd5b50565b61541181615312565b811461541c57600080fd5b5056fea265627a7a72305820b118c2530560ec040c478498c4745c3420fb942dc568a35eb15fc809a2da30f26c6578706572696d656e74616cf50037"
}