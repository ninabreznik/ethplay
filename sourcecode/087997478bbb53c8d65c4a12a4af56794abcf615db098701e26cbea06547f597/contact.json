{
  "address": "0xfb2f26f266fb2805a387230f2aa0a331b4d96fba",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "DADI",
  "contractName": "DadiToken",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-02\n*/\n\npragma solidity ^0.4.11;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\npragma solidity ^0.4.11;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\npragma solidity ^0.4.11;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\npragma solidity ^0.4.11;\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\npragma solidity ^0.4.11;\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\npragma solidity ^0.4.11;\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    uint256 _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue)\n    returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue)\n    returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\npragma solidity ^0.4.11;\n\n\n/*****\n* @title The ICO Contract\n*/\ncontract DadiToken is StandardToken, Ownable {\n    using SafeMath for uint256;\n\n    /* Public variables of the token */\n    string public name = \"DADI\";\n    string public symbol = \"DADI\";\n    uint8 public decimals = 18;\n    string public version = \"H1.0\";\n\n    address public owner;\n\n    uint256 public hundredPercent = 1000;\n    uint256 public foundersPercentOfTotal = 200;\n    uint256 public referralPercentOfTotal = 50;\n    uint256 public ecosystemPercentOfTotal = 25;\n    uint256 public operationsPercentOfTotal = 25;\n\n    uint256 public investorCount = 0;\n    uint256 public totalRaised; // total ether raised (in wei)\n    uint256 public preSaleRaised = 0; // ether raised (in wei)\n    uint256 public publicSaleRaised = 0; // ether raised (in wei)\n\n    // PartnerSale variables\n    uint256 public partnerSaleTokensAvailable;\n    uint256 public partnerSaleTokensPurchased = 0;\n    mapping(address => uint256) public purchasedTokens;\n    mapping(address => uint256) public partnerSaleWei;\n\n    // PreSale variables\n    uint256 public preSaleTokensAvailable;\n    uint256 public preSaleTokensPurchased = 0;\n\n    // PublicSale variables\n    uint256 public publicSaleTokensAvailable;\n    uint256 public publicSaleTokensPurchased = 0;\n\n    // Price data\n    uint256 public partnerSaleTokenPrice = 125;     // USD$0.125\n    uint256 public partnerSaleTokenValue;\n    uint256 public preSaleTokenPrice = 250;         // USD$0.25\n    uint256 public publicSaleTokenPrice = 500;       // USD$0.50\n\n    // ETH to USD Rate, set by owner: 1 ETH = ethRate USD\n    uint256 public ethRate;\n\n    // Address which will receive raised funds and owns the total supply of tokens\n    address public fundsWallet;\n    address public ecosystemWallet;\n    address public operationsWallet;\n    address public referralProgrammeWallet;\n    address[] public foundingTeamWallets;\n    \n    address[] public partnerSaleWallets;\n    address[] public preSaleWallets;\n    address[] public publicSaleWallets;\n   \n    /*****\n    * State machine\n    *  0 - Preparing:            All contract initialization calls\n    *  1 - PartnerSale:          Contract is in the invite-only PartnerSale Period\n    *  6 - PartnerSaleFinalized: PartnerSale has completed\n    *  2 - PreSale:              Contract is in the PreSale Period\n    *  7 - PreSaleFinalized:     PreSale has completed\n    *  3 - PublicSale:           The public sale of tokens, follows PreSale\n    *  8 - PublicSaleFinalized:  The PublicSale has completed\n    *  4 - Success:              ICO Successful\n    *  5 - Failure:              Minimum funding goal not reached\n    *  9 - Refunding:            Owner can transfer refunds\n    * 10 - Closed:               ICO has finished, all tokens must have been claimed\n    */\n    enum SaleState { Preparing, PartnerSale, PreSale, PublicSale, Success, Failure, PartnerSaleFinalized, PreSaleFinalized, PublicSaleFinalized, Refunding, Closed }\n    SaleState public state = SaleState.Preparing;\n\n    /**\n    * event for token purchase logging\n    * @param purchaser who paid for the tokens\n    * @param beneficiary who got the tokens\n    * @param value weis paid for purchase\n    * @param tokens amount of tokens purchased\n    */\n    event LogTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 tokens);\n    event LogRedistributeTokens(address recipient, SaleState state, uint256 tokens);\n    event LogRefundProcessed(address recipient, uint256 value);\n    event LogRefundFailed(address recipient, uint256 value);\n    event LogClaimTokens(address recipient, uint256 tokens);\n    event LogFundTransfer(address wallet, uint256 value);\n\n    /*****\n    * @dev Modifier to check that amount transferred is not 0\n    */\n    modifier nonZero() {\n        require(msg.value != 0);\n        _;\n    }\n\n    /*****\n    * @dev The constructor function to initialize the token related properties\n    * @param _wallet                        address     Specifies the address of the funding wallet\n    * @param _operationalWallets            address[]   Specifies an array of addresses for [0] ecosystem, [1] operations, [2] referral programme\n    * @param _foundingTeamWallets           address[]   Specifies an array of addresses of the founding team wallets\n    * @param _initialSupply                 uint256     Specifies the total number of tokens available\n    * @param _tokensAvailable               uint256[]   Specifies an array of tokens available for each phase, [0] PartnerSale, [1] PreSale, [2] PublicSale\n    */\n    function DadiToken (\n        address _wallet,\n        address[] _operationalWallets,\n        address[] _foundingTeamWallets,\n        uint256 _initialSupply,\n        uint256[] _tokensAvailable\n    ) public {\n        require(_wallet != address(0));\n\n        owner = msg.sender;\n \n        // Token distribution per sale phase\n        partnerSaleTokensAvailable = _tokensAvailable[0];\n        preSaleTokensAvailable = _tokensAvailable[1];\n        publicSaleTokensAvailable = _tokensAvailable[2];\n\n        // Determine the actual supply using token amount * decimals\n        totalSupply = _initialSupply * (uint256(10) ** decimals);\n\n        // Give all the initial tokens to the contract owner\n        balances[owner] = totalSupply;\n        Transfer(0x0, owner, totalSupply);\n\n        // Distribute tokens to the supporting operational wallets\n        ecosystemWallet = _operationalWallets[0];\n        operationsWallet = _operationalWallets[1];\n        referralProgrammeWallet = _operationalWallets[2];\n        foundingTeamWallets = _foundingTeamWallets;\n        fundsWallet = _wallet;\n        \n        // Set a base ETHUSD rate\n        updateEthRate(300000);\n    }\n\n    /*****\n    * @dev Fallback Function to buy the tokens\n    */\n    function () payable {\n        require(\n            state == SaleState.PartnerSale || \n            state == SaleState.PreSale || \n            state == SaleState.PublicSale\n        );\n\n        buyTokens(msg.sender, msg.value);\n    }\n\n    /*****\n    * @dev Allows transfer of tokens to a recipient who has purchased offline, during the PartnerSale\n    * @param _recipient     address     The address of the recipient of the tokens\n    * @param _tokens        uint256     The number of tokens purchased by the recipient\n    * @return success       bool        Returns true if executed successfully\n    */\n    function offlineTransaction (address _recipient, uint256 _tokens) public onlyOwner returns (bool) {\n        require(state == SaleState.PartnerSale);\n        require(_tokens > 0);\n\n        // Convert to a token with decimals \n        uint256 tokens = _tokens * (uint256(10) ** decimals);\n\n        purchasedTokens[_recipient] = purchasedTokens[_recipient].add(tokens);\n\n        // Use original _token argument to increase the count of tokens purchased in the PartnerSale\n        partnerSaleTokensPurchased = partnerSaleTokensPurchased.add(_tokens);\n\n        // Finalize the PartnerSale if necessary\n        if (partnerSaleTokensPurchased >= partnerSaleTokensAvailable) {\n            state = SaleState.PartnerSaleFinalized;\n        }\n\n        LogTokenPurchase(msg.sender, _recipient, 0, tokens);\n\n        return true;\n    }\n\n    /*****\n    * @dev Allow updating the ETH USD exchange rate\n    * @param rate   uint256  the current ETH USD rate, multiplied by 1000\n    * @return bool  Return true if the contract is in PartnerSale Period\n    */\n    function updateEthRate (uint256 rate) public onlyOwner returns (bool) {\n        require(rate >= 100000);\n        \n        ethRate = rate;\n        return true;\n    }\n\n    /*****\n    * @dev Allows the contract owner to add a new PartnerSale wallet, used to hold funds safely\n    *      Can only be performed in the Preparing state\n    * @param _wallet        address     The address of the wallet\n    * @return success       bool        Returns true if executed successfully\n    */\n    function addPartnerSaleWallet (address _wallet) public onlyOwner returns (bool) {\n        require(state < SaleState.PartnerSaleFinalized);\n        require(_wallet != address(0));\n        partnerSaleWallets.push(_wallet);\n        return true;\n    }\n\n    /*****\n    * @dev Allows the contract owner to add a new PreSale wallet, used to hold funds safely\n    *      Can not be performed in the PreSale state\n    * @param _wallet        address     The address of the wallet\n    * @return success       bool        Returns true if executed successfully\n    */\n    function addPreSaleWallet (address _wallet) public onlyOwner returns (bool) {\n        require(state != SaleState.PreSale);\n        require(_wallet != address(0));\n        preSaleWallets.push(_wallet);\n        return true;\n    }\n\n    /*****\n    * @dev Allows the contract owner to add a new PublicSale wallet, used to hold funds safely\n    *      Can not be performed in the PublicSale state\n    * @param _wallet        address     The address of the wallet\n    * @return success       bool        Returns true if executed successfully\n    */\n    function addPublicSaleWallet (address _wallet) public onlyOwner returns (bool) {\n        require(state != SaleState.PublicSale);\n        require(_wallet != address(0));\n        publicSaleWallets.push(_wallet);\n        return true;\n    }\n\n    /*****\n    * @dev Calculates the number of tokens that can be bought for the amount of Wei transferred\n    * @param _amount    uint256     The amount of money invested by the investor\n    * @return tokens    uint256     The number of tokens purchased for the amount invested\n    */\n    function calculateTokens (uint256 _amount) public returns (uint256 tokens) {\n        if (isStatePartnerSale()) {\n            tokens = _amount * ethRate / partnerSaleTokenPrice;\n        } else if (isStatePreSale()) {\n            tokens = _amount * ethRate / preSaleTokenPrice;\n        } else if (isStatePublicSale()) {\n            tokens = _amount * ethRate / publicSaleTokenPrice;\n        } else {\n            tokens = 0;\n        }\n\n        return tokens;\n    }\n\n    /*****\n    * @dev Called by the owner of the contract to open the Partner/Pre/Crowd Sale periods\n    */\n    function setPhase (uint256 phase) public onlyOwner {\n        state = SaleState(uint(phase));\n    }\n\n    /*****\n    * @dev Called by the owner of the contract to start the Partner Sale\n    * @param rate   uint256  the current ETH USD rate, multiplied by 1000\n    */\n    function startPartnerSale (uint256 rate) public onlyOwner {\n        state = SaleState.PartnerSale;\n        updateEthRate(rate);\n    }\n\n    /*****\n    * @dev Called by the owner of the contract to start the Pre Sale\n    * @param rate   uint256  the current ETH USD rate, multiplied by 1000\n    */\n    function startPreSale (uint256 rate) public onlyOwner {\n        state = SaleState.PreSale;\n        updateEthRate(rate);\n    }\n\n    /*****\n    * @dev Called by the owner of the contract to start the Public Sale\n    * @param rate   uint256  the current ETH USD rate, multiplied by 1000\n    */\n    function startPublicSale (uint256 rate) public onlyOwner {\n        state = SaleState.PublicSale;\n        updateEthRate(rate);\n    }\n\n    /*****\n    * @dev Called by the owner of the contract to close the Partner Sale\n    */\n    function finalizePartnerSale () public onlyOwner {\n        require(state == SaleState.PartnerSale);\n        \n        state = SaleState.PartnerSaleFinalized;\n    }\n\n    /*****\n    * @dev Called by the owner of the contract to close the Pre Sale\n    */\n    function finalizePreSale () public onlyOwner {\n        require(state == SaleState.PreSale);\n        \n        state = SaleState.PreSaleFinalized;\n    }\n\n    /*****\n    * @dev Called by the owner of the contract to close the Public Sale\n    */\n    function finalizePublicSale () public onlyOwner {\n        require(state == SaleState.PublicSale);\n        \n        state = SaleState.PublicSaleFinalized;\n    }\n\n    /*****\n    * @dev Called by the owner of the contract to finalize the ICO\n    *      and redistribute funds and unsold tokens\n    */\n    function finalizeIco () public onlyOwner {\n        require(state == SaleState.PublicSaleFinalized);\n\n        state = SaleState.Success;\n\n        // 2.5% of total goes to DADI ecosystem\n        distribute(ecosystemWallet, ecosystemPercentOfTotal);\n\n        // 2.5% of total goes to DADI+ operations\n        distribute(operationsWallet, operationsPercentOfTotal);\n\n        // 5% of total goes to referral programme\n        distribute(referralProgrammeWallet, referralPercentOfTotal);\n        \n        // 20% of total goes to the founding team wallets\n        distributeFoundingTeamTokens(foundingTeamWallets);\n\n        // redistribute unsold tokens to DADI ecosystem\n        uint256 remainingPreSaleTokens = getPreSaleTokensAvailable();\n        preSaleTokensAvailable = 0;\n        \n        uint256 remainingPublicSaleTokens = getPublicSaleTokensAvailable();\n        publicSaleTokensAvailable = 0;\n\n        // we need to represent the tokens with included decimals\n        // `2640 ** (10 ^ 18)` not `2640`\n        if (remainingPreSaleTokens > 0) {\n            remainingPreSaleTokens = remainingPreSaleTokens * (uint256(10) ** decimals);\n            balances[owner] = balances[owner].sub(remainingPreSaleTokens);\n            balances[ecosystemWallet] = balances[ecosystemWallet].add(remainingPreSaleTokens);\n            Transfer(0, ecosystemWallet, remainingPreSaleTokens);\n        }\n\n        if (remainingPublicSaleTokens > 0) {\n            remainingPublicSaleTokens = remainingPublicSaleTokens * (uint256(10) ** decimals);\n            balances[owner] = balances[owner].sub(remainingPublicSaleTokens);\n            balances[ecosystemWallet] = balances[ecosystemWallet].add(remainingPublicSaleTokens);\n            Transfer(0, ecosystemWallet, remainingPublicSaleTokens);\n        }\n\n        // Transfer ETH to the funding wallet.\n        if (!fundsWallet.send(this.balance)) {\n            revert();\n        }\n    }\n\n    /*****\n    * @dev Called by the owner of the contract to close the ICO\n    *      and unsold tokens to the ecosystem wallet. No more tokens \n    *      may be claimed\n    */\n    function closeIco () public onlyOwner {\n        state = SaleState.Closed;\n    }\n    \n\n    /*****\n    * @dev Allow investors to claim their tokens after the ICO is finalized & successful\n    * @return   bool  Return true, if executed successfully\n    */\n    function claimTokens () public returns (bool) {\n        require(state == SaleState.Success);\n        \n        // get the tokens available for the sender\n        uint256 tokens = purchasedTokens[msg.sender];\n        require(tokens > 0);\n\n        purchasedTokens[msg.sender] = 0;\n\n        balances[owner] = balances[owner].sub(tokens);\n        balances[msg.sender] = balances[msg.sender].add(tokens);\n      \n        LogClaimTokens(msg.sender, tokens);\n        Transfer(owner, msg.sender, tokens);\n        return true;\n    }\n\n    /*****\n    * @dev Allow investors to take their money back after a failure in the ICO\n    * @param _recipient     address     The caller of the function who is looking for refund\n    * @return               bool        Return true, if executed successfully\n    */\n    function refund (address _recipient) public onlyOwner returns (bool) {\n        require(state == SaleState.Refunding);\n\n        uint256 value = partnerSaleWei[_recipient];\n        \n        require(value > 0);\n\n        partnerSaleWei[_recipient] = 0;\n\n        if(!_recipient.send(value)) {\n            partnerSaleWei[_recipient] = value;\n            LogRefundFailed(_recipient, value);\n        }\n\n        LogRefundProcessed(_recipient, value);\n        return true;\n    }\n\n    /*****\n    * @dev Allows owner to withdraw funds from the contract balance for marketing purposes\n    * @param _address       address     The recipient address for the ether\n    * @return               bool        Return true, if executed successfully\n    */\n    function withdrawFunds (address _address, uint256 _amount) public onlyOwner {\n        _address.transfer(_amount);\n    }\n\n    /*****\n    * @dev Generates a random number from 1 to max based on the last block hash\n    * @param max     uint  the maximum value \n    * @return a random number\n    */\n    function getRandom(uint max) public constant returns (uint randomNumber) {\n        return (uint(sha3(block.blockhash(block.number - 1))) % max) + 1;\n    }\n\n    /*****\n    * @dev Called by the owner of the contract to set the state to Refunding\n    */\n    function setRefunding () public onlyOwner {\n        require(state == SaleState.PartnerSaleFinalized);\n        \n        state = SaleState.Refunding;\n    }\n\n    /*****\n    * @dev Get the overall success state of the ICO\n    * @return bool whether the state is successful, or not\n    */\n    function isSuccessful () public constant returns (bool) {\n        return state == SaleState.Success;\n    }\n\n    /*****\n    * @dev Get the amount of PreSale tokens left for purchase\n    * @return uint256 the count of tokens available\n    */\n    function getPreSaleTokensAvailable () public constant returns (uint256) {\n        if (preSaleTokensAvailable == 0) {\n            return 0;\n        }\n\n        return preSaleTokensAvailable - preSaleTokensPurchased;\n    }\n\n    /*****\n    * @dev Get the amount of PublicSale tokens left for purchase\n    * @return uint256 the count of tokens available\n    */\n    function getPublicSaleTokensAvailable () public constant returns (uint256) {\n        if (publicSaleTokensAvailable == 0) {\n            return 0;\n        }\n\n        return publicSaleTokensAvailable - publicSaleTokensPurchased;\n    }\n\n    /*****\n    * @dev Get the total count of tokens purchased in all the Sale periods\n    * @return uint256 the count of tokens purchased\n    */\n    function getTokensPurchased () public constant returns (uint256) {\n        return partnerSaleTokensPurchased + preSaleTokensPurchased + publicSaleTokensPurchased;\n    }\n\n    /*****\n    * @dev Get the total amount raised in the PreSale and PublicSale periods\n    * @return uint256 the amount raised, in Wei\n    */\n    function getTotalRaised () public constant returns (uint256) {\n        return preSaleRaised + publicSaleRaised;\n    }\n\n    /*****\n    * @dev Get the balance sent to the contract\n    * @return uint256 the amount sent to this contract, in Wei\n    */\n    function getBalance () public constant returns (uint256) {\n        return this.balance;\n    }\n\n    /*****\n    * @dev Get the balance of the funds wallet used to transfer the final balance\n    * @return uint256 the amount sent to the funds wallet at the end of the ICO, in Wei\n    */\n    function getFundsWalletBalance () public constant onlyOwner returns (uint256) {\n        return fundsWallet.balance;\n    }\n\n    /*****\n    * @dev Get the count of unique investors\n    * @return uint256 the total number of unique investors\n    */\n    function getInvestorCount () public constant returns (uint256) {\n        return investorCount;\n    }\n\n    /*****\n    * @dev Send ether to the fund collection wallets\n    */\n    function forwardFunds (uint256 _value) internal {\n        // if (isStatePartnerSale()) {\n        //     // move funds to a partnerSaleWallet\n        //     if (partnerSaleWallets.length > 0) {\n        //         // Transfer ETH to a random wallet\n        //         uint accountNumber = getRandom(partnerSaleWallets.length) - 1;\n        //         address account = partnerSaleWallets[accountNumber];\n        //         account.transfer(_value);\n        //         LogFundTransfer(account, _value);\n        //     }\n        // }\n\n        uint accountNumber;\n        address account;\n\n        if (isStatePreSale()) {\n            // move funds to a preSaleWallet\n            if (preSaleWallets.length > 0) {\n                // Transfer ETH to a random wallet\n                accountNumber = getRandom(preSaleWallets.length) - 1;\n                account = preSaleWallets[accountNumber];\n                account.transfer(_value);\n                LogFundTransfer(account, _value);\n            }\n        } else if (isStatePublicSale()) {\n            // move funds to a publicSaleWallet\n            if (publicSaleWallets.length > 0) {\n                // Transfer ETH to a random wallet\n                accountNumber = getRandom(publicSaleWallets.length) - 1;\n                account = publicSaleWallets[accountNumber];\n                account.transfer(_value);\n                LogFundTransfer(account, _value);\n            }\n        }\n    }\n\n    /*****\n    * @dev Internal function to execute the token transfer to the recipient\n    *      In the PartnerSale period, token balances are stored in a separate mapping, to\n    *      await the PartnerSaleFinalized state, when investors may call claimTokens\n    * @param _recipient     address     The address of the recipient of the tokens\n    * @param _value         uint256     The amount invested by the recipient\n    * @return success       bool        Returns true if executed successfully\n    */\n    function buyTokens (address _recipient, uint256 _value) internal returns (bool) {\n        uint256 boughtTokens = calculateTokens(_value);\n        require(boughtTokens != 0);\n\n        if (isStatePartnerSale()) {\n            // assign tokens to separate mapping\n            purchasedTokens[_recipient] = purchasedTokens[_recipient].add(boughtTokens);\n            partnerSaleWei[_recipient] = partnerSaleWei[_recipient].add(_value);\n        } else {\n            // increment the unique investor count\n            if (purchasedTokens[_recipient] == 0) {\n                investorCount++;\n            }\n\n            // assign tokens to separate mapping, that is not \"balances\"\n            purchasedTokens[_recipient] = purchasedTokens[_recipient].add(boughtTokens);\n        }\n\n       \n        LogTokenPurchase(msg.sender, _recipient, _value, boughtTokens);\n\n        forwardFunds(_value);\n\n        updateSaleParameters(_value, boughtTokens);\n\n        return true;\n    }\n\n    /*****\n    * @dev Internal function to modify parameters based on tokens bought\n    * @param _value         uint256     The amount invested in exchange for the tokens\n    * @param _tokens        uint256     The number of tokens purchased\n    * @return success       bool        Returns true if executed successfully\n    */\n    function updateSaleParameters (uint256 _value, uint256 _tokens) internal returns (bool) {\n        // we need to represent the integer value of tokens here\n        // tokensPurchased = `2640`, not `2640 ** (10 ^ 18)`\n        uint256 tokens = _tokens / (uint256(10) ** decimals);\n\n        if (isStatePartnerSale()) {\n            partnerSaleTokensPurchased = partnerSaleTokensPurchased.add(tokens);\n\n            // No PartnerSale tokens remaining\n            if (partnerSaleTokensPurchased >= partnerSaleTokensAvailable) {\n                state = SaleState.PartnerSaleFinalized;\n            }\n        } else if (isStatePreSale()) {\n            preSaleTokensPurchased = preSaleTokensPurchased.add(tokens);\n\n            preSaleRaised = preSaleRaised.add(_value);\n\n            // No PreSale tokens remaining\n            if (preSaleTokensPurchased >= preSaleTokensAvailable) {\n                state = SaleState.PreSaleFinalized;\n            }\n        } else if (isStatePublicSale()) {\n            publicSaleTokensPurchased = publicSaleTokensPurchased.add(tokens);\n\n            publicSaleRaised = publicSaleRaised.add(_value);\n\n            // No PublicSale tokens remaining\n            if (publicSaleTokensPurchased >= publicSaleTokensAvailable) {\n                state = SaleState.PublicSaleFinalized;\n            }\n        }\n    }\n\n    /*****\n    * @dev Internal calculation for the amount of Wei the specified tokens are worth\n    * @param _tokens    uint256     The number of tokens purchased by the investor\n    * @return amount    uint256     The amount the tokens are worth\n    */\n    function calculateValueFromTokens (uint256 _tokens) internal returns (uint256) {\n        uint256 amount = _tokens.div(ethRate.div(partnerSaleTokenPrice));\n        return amount;\n    }\n\n    /*****\n    * @dev Private function to distribute tokens evenly amongst the founding team wallet addresses\n    * @param _recipients    address[]   An array of founding team wallet addresses\n    * @return success       bool        Returns true if executed successfully\n    */\n    function distributeFoundingTeamTokens (address[] _recipients) private returns (bool) {\n        // determine the split between wallets\n        // to arrive at a valid percentage we start the percentage the founding team has\n        // available, which is 20% of the total supply. The percentage to distribute then is the\n        // total percentage divided by the number of founding team wallets (likely 4).\n        uint percentage = foundersPercentOfTotal / _recipients.length;\n\n        for (uint i = 0; i < _recipients.length; i++) {\n            distribute(_recipients[i], percentage);\n        }\n    }\n\n    /*****\n    * @dev Private function to move tokens to the specified wallet address\n    * @param _recipient     address     The address of the wallet to move tokens to\n    * @param percentage     uint        The percentage of the total supply of tokens to move\n    * @return success       bool        Returns true if executed successfully\n    */\n    function distribute (address _recipient, uint percentage) private returns (bool) {\n        uint256 tokens = totalSupply / (hundredPercent / percentage);\n\n        balances[owner] = balances[owner].sub(tokens);\n        balances[_recipient] = balances[_recipient].add(tokens);\n        Transfer(0, _recipient, tokens);\n    }\n\n    /*****\n    * @dev Check the PartnerSale state of the contract\n    * @return bool  Return true if the contract is in the PartnerSale state\n    */\n    function isStatePartnerSale () private constant returns (bool) {\n        return state == SaleState.PartnerSale;\n    }\n\n    /*****\n    * @dev Check the PreSale state of the contract\n    * @return bool  Return true if the contract is in the PreSale state\n    */\n    function isStatePreSale () private constant returns (bool) {\n        return state == SaleState.PreSale;\n    }\n\n    /*****\n    * @dev Check the PublicSale state of the contract\n    * @return bool  Return true if the contract is in the PublicSale state\n    */\n    function isStatePublicSale () private constant returns (bool) {\n        return state == SaleState.PublicSale;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"phase\",\"type\":\"uint256\"}],\"name\":\"setPhase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFundsWalletBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicSaleRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicSaleTokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerSaleTokenValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"updateEthRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"publicSaleWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecosystemWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setRefunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchasedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"partnerSaleWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralProgrammeWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"startPreSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleTokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralPercentOfTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateTokens\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizePreSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizePublicSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"startPartnerSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"startPublicSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicSaleTokensPurchased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hundredPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensPurchased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operationsPercentOfTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"foundingTeamWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizePartnerSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerSaleTokensPurchased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerSaleTokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPublicSaleTokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersPercentOfTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"preSaleWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicSaleTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecosystemPercentOfTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"getRandom\",\"outputs\":[{\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleTokensPurchased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"addPartnerSaleWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"addPublicSaleWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"addPreSaleWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPreSaleTokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"partnerSaleWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerSaleTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSuccessful\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"offlineTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operationsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_operationalWallets\",\"type\":\"address[]\"},{\"name\":\"_foundingTeamWallets\",\"type\":\"address[]\"},{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_tokensAvailable\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"LogTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"LogRedistributeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogRefundProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogRefundFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"LogClaimTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogFundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000000284b6f8c908d13bd7938b0835ef03cfd11ee73b00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000ddbaef9a11e01978b09a7b4f68333d2004b9837a00000000000000000000000084afeae595b14dfbee3da278fab7f078bac6848e000000000000000000000000542a78ea69cb13f79d95e2e5c83c9c2307c209a0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000091770ab877fba3ccb00940b2c1a68f623b55f413000000000000000000000000be3c70ea15c978156b6019a25fdb1a1fa9d4d8e6000000000000000000000000948af657a8d5cd0c94886729ef332795102b9a00000000000000000000000000b7ec5a63f316522faa671a6f0643976eeb3743460000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000000000002faf080"
}