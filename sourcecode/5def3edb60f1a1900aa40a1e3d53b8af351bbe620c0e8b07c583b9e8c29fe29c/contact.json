{
  "address": "0x25dd328e9226f9157269213bc07c19aa2589b6bf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TCSCCoin",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-01\n*/\n\npragma solidity ^0.4.16;\n\n\ncontract Ownable {\n    address public owner;\n\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner()  {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n\n}\n\ncontract SafeMath {\n    function safeSub(uint a, uint b) pure internal returns (uint) {\n        sAssert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint a, uint b) pure internal returns (uint) {\n        uint c = a + b;\n        sAssert(c>=a && c>=b);\n        return c;\n    }\n\n    function sAssert(bool assertion) internal pure {\n        if (!assertion) {\n            revert();\n        }\n    }\n}\n\n\ncontract ERC20 {\n    uint public totalSupply;\n    function balanceOf(address who) public constant returns (uint);\n    function allowance(address owner, address spender) public constant returns (uint);\n\n    function transfer(address toAcct, uint value) public returns (bool ok);\n    function transferFrom(address fromAcct, address toAcct, uint value) public returns (bool ok);\n    function approve(address spender, uint value) public returns (bool ok);\n    event Transfer(address indexed fromAcct, address indexed toAcct, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\ncontract StandardToken is ERC20, SafeMath {\n\n    mapping(address => uint) balances;\n    mapping (address => mapping (address => uint)) allowed;\n    mapping (address => bool) public frozenAccount;\n    event FrozenFunds(address target, bool frozen);\n    event Burn(address indexed fromAcct, uint256 value);\n\n    function transfer(address _toAcct, uint _value) public returns (bool success) {\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n        balances[_toAcct] = safeAdd(balances[_toAcct], _value);\n        Transfer(msg.sender, _toAcct, _value);\n        return true;\n    }\n\n    function transferFrom(address _fromAcct, address _toAcct, uint _value) public returns (bool success) {\n        var _allowance = allowed[_fromAcct][msg.sender];\n        balances[_toAcct] = safeAdd(balances[_toAcct], _value);\n        balances[_fromAcct] = safeSub(balances[_fromAcct], _value);\n        allowed[_fromAcct][msg.sender] = safeSub(_allowance, _value);\n        Transfer(_fromAcct, _toAcct, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public constant returns (uint balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint _value) public  returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n    \n    function burn(uint256 _value) public returns (bool success) {\n        balances[msg.sender] = safeSub(balances[msg.sender], _value); // Subtract from the sender\n        totalSupply = safeSub(totalSupply,_value); // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n    \n    \n\n}\n\ncontract TCSCCoin is Ownable, StandardToken {\n\n    string public name;\n    string public symbol;\n    uint public decimals;                  \n    uint public totalSupply;  \n\n\n    /// @notice Initializes the contract and allocates all initial tokens to the owner and agreement account\n    function TCSCCoin() public {\n    totalSupply = 100 * (10**6) * (10**6);\n        balances[msg.sender] = totalSupply;\n        name = \"TCSC\";\n        symbol = \"TCSC\";\n        decimals = 6;\n    }\n\n    function () payable public{\n    }\n\n    /// @notice To transfer token contract ownership\n    /// @param _newOwner The address of the new owner of this contract\n    function transferOwnership(address _newOwner) public onlyOwner {\n        balances[_newOwner] = safeAdd(balances[owner], balances[_newOwner]);\n        balances[owner] = 0;\n        Ownable.transferOwnership(_newOwner);\n    }\n\n    // Owner can transfer out any ERC20 tokens sent in by mistake\n    function transferAnyERC20Token(address tokenAddress, uint amount) public onlyOwner returns (bool success)\n    {\n        return ERC20(tokenAddress).transfer(owner, amount);\n    }\n    \n    function freezeAccount(address target, bool freeze) public onlyOwner  {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n    \n    function mintToken(address _toAcct, uint256 _value) public onlyOwner  {\n        balances[_toAcct] = safeAdd(balances[_toAcct], _value);\n        totalSupply = safeAdd(totalSupply, _value);\n        Transfer(0, this, _value);\n        Transfer(this, _toAcct, _value);\n    }\n\n}",
  "bytecode": "6060604052341561000f57600080fd5b60008054600160a060020a03191633600160a060020a03169081178255655af3107a400060088190559082526002602052604091829020558051908101604052600481527f54435343000000000000000000000000000000000000000000000000000000006020820152600590805161008c9291602001906100df565b5060408051908101604052600481527f5443534300000000000000000000000000000000000000000000000000000000602082015260069080516100d49291602001906100df565b50600660075561017a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012057805160ff191683800117855561014d565b8280016001018555821561014d579182015b8281111561014d578251825591602001919060010190610132565b5061015992915061015d565b5090565b61017791905b808211156101595760008155600101610163565b90565b610af2806101896000396000f3006060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100e7578063095ea7b31461017157806318160ddd146101a757806323b872dd146101cc578063313ce567146101f457806342966c681461020757806370a082311461021d57806379c650681461023c5780638da5cb5b1461025e57806395d89b411461028d578063a9059cbb146102a0578063b414d4b6146102c2578063dc39d06d146102e1578063dd62ed3e14610303578063e724529c14610328578063f2fde38b1461034c575b005b34156100f257600080fd5b6100fa61036b565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561013657808201518382015260200161011e565b50505050905090810190601f1680156101635780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017c57600080fd5b610193600160a060020a0360043516602435610409565b604051901515815260200160405180910390f35b34156101b257600080fd5b6101ba610475565b60405190815260200160405180910390f35b34156101d757600080fd5b610193600160a060020a036004358116906024351660443561047b565b34156101ff57600080fd5b6101ba61056a565b341561021257600080fd5b610193600435610570565b341561022857600080fd5b6101ba600160a060020a0360043516610601565b341561024757600080fd5b6100e5600160a060020a036004351660243561061c565b341561026957600080fd5b6102716106e9565b604051600160a060020a03909116815260200160405180910390f35b341561029857600080fd5b6100fa6106f8565b34156102ab57600080fd5b610193600160a060020a0360043516602435610763565b34156102cd57600080fd5b610193600160a060020a0360043516610804565b34156102ec57600080fd5b610193600160a060020a0360043516602435610819565b341561030e57600080fd5b6101ba600160a060020a03600435811690602435166108d5565b341561033357600080fd5b6100e5600160a060020a03600435166024351515610900565b341561035757600080fd5b6100e5600160a060020a036004351661098c565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104015780601f106103d657610100808354040283529160200191610401565b820191906000526020600020905b8154815290600101906020018083116103e457829003601f168201915b505050505081565b600160a060020a03338116600081815260036020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60085481565b600160a060020a0380841660009081526003602090815260408083203385168452825280832054938616835260029091528120549091906104bc9084610a0b565b600160a060020a0380861660009081526002602052604080822093909355908716815220546104eb9084610a2f565b600160a060020a03861660009081526002602052604090205561050e8184610a2f565b600160a060020a0380871660008181526003602090815260408083203386168452909152908190209390935590861691600080516020610aa78339815191529086905190815260200160405180910390a3506001949350505050565b60075481565b600160a060020a0333166000908152600260205260408120546105939083610a2f565b600160a060020a0333166000908152600260205260409020556001546105b99083610a2f565b600155600160a060020a0333167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a2506001919050565b600160a060020a031660009081526002602052604090205490565b60005433600160a060020a0390811691161461063757600080fd5b600160a060020a03821660009081526002602052604090205461065a9082610a0b565b600160a060020a0383166000908152600260205260409020556008546106809082610a0b565b600855600160a060020a0330166000600080516020610aa78339815191528360405190815260200160405180910390a381600160a060020a031630600160a060020a0316600080516020610aa78339815191528360405190815260200160405180910390a35050565b600054600160a060020a031681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104015780601f106103d657610100808354040283529160200191610401565b600160a060020a0333166000908152600260205260408120546107869083610a2f565b600160a060020a0333811660009081526002602052604080822093909355908516815220546107b59083610a0b565b600160a060020a038085166000818152600260205260409081902093909355913390911690600080516020610aa78339815191529085905190815260200160405180910390a350600192915050565b60046020526000908152604090205460ff1681565b6000805433600160a060020a0390811691161461083557600080fd5b60008054600160a060020a038086169263a9059cbb92909116908590604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156108b457600080fd5b6102c65a03f115156108c557600080fd5b5050506040518051949350505050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60005433600160a060020a0390811691161461091b57600080fd5b600160a060020a03821660009081526004602052604090819020805460ff19168315151790557f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b60005433600160a060020a039081169116146109a757600080fd5b60008054600160a060020a03908116825260026020526040808320549184168352909120546109d69190610a0b565b600160a060020a03808316600090815260026020526040808220939093558054909116815290812055610a0881610a43565b50565b6000828201610a28848210801590610a235750838210155b610a9a565b9392505050565b6000610a3d83831115610a9a565b50900390565b60005433600160a060020a03908116911614610a5e57600080fd5b600160a060020a03811615610a085760008054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff1990911617905550565b801515610a0857600080fd00ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820344b633c5d5f0a1c468c671c7d87444ec091ff5ee5821644fb882dc700cf59420029"
}