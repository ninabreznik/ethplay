{
  "address": "0x3e7168dd709e8f22a88fb9cd8bbbeacd1040433c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "JumboBumpToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-19\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract HasNoEther is Ownable {\n\n  function HasNoEther() public payable {\n    require(msg.value == 0);\n  }\n\n  function() external {\n  }\n\n  function reclaimEther() external onlyOwner {\n    assert(owner.send(this.balance));\n  }\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract BurnableToken is StandardToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    function burn(uint256 _value) public {\n        require(_value > 0);\n        require(_value <= balances[msg.sender]);\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n\n}\n\ncontract JumboBumpToken is BurnableToken, HasNoEther {\n\n    string public constant name = \"JumboBumpToken\";\n    string public constant symbol = \"JBT\";\n    uint8 public constant decimals = 18;\n    uint256 constant INITIAL_SUPPLY = 10000000 * (10 ** uint256(decimals));\n\n    function JumboBumpToken() public {\n        totalSupply = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        Transfer(address(0), msg.sender, totalSupply);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function multiTransfer(address[] recipients, uint256[] amounts) public {\n        require(recipients.length == amounts.length);\n        for (uint i = 0; i < recipients.length; i++) {\n            transfer(recipients[i], amounts[i]);\n        }\n    }\n\n    function mintToken(uint256 mintedAmount) public onlyOwner {\n\t\t\ttotalSupply += mintedAmount;\n\t\t\tbalances[owner] += mintedAmount;\n\t\t\tTransfer(address(0), owner, mintedAmount);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060038054600160a060020a03191633179055341561002e57600080fd5b6a084595161401484a00000060008181553380825260016020908152604080842085905580519485525191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3610c39806100946000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ff578063095ea7b31461018957806318160ddd146101c15780631e89d545146101e857806323b872dd14610278578063313ce567146102a257806342966c68146102cd57806366188463146102e557806370a08231146103095780638da5cb5b1461032a57806395d89b411461035b5780639f727c2714610370578063a9059cbb14610385578063c634d032146103a9578063d73dd623146103c1578063dd62ed3e146103e5578063f2fde38b1461040c575b3480156100fc57600080fd5b50005b34801561010b57600080fd5b5061011461042d565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014e578181015183820152602001610136565b50505050905090810190601f16801561017b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019557600080fd5b506101ad600160a060020a0360043516602435610464565b604080519115158252519081900360200190f35b3480156101cd57600080fd5b506101d66104ca565b60408051918252519081900360200190f35b3480156101f457600080fd5b506040805160206004803580820135838102808601850190965280855261027695369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506104d09650505050505050565b005b34801561028457600080fd5b506101ad600160a060020a0360043581169060243516604435610534565b3480156102ae57600080fd5b506102b7610549565b6040805160ff9092168252519081900360200190f35b3480156102d957600080fd5b5061027660043561054e565b3480156102f157600080fd5b506101ad600160a060020a036004351660243561060c565b34801561031557600080fd5b506101d6600160a060020a03600435166106fc565b34801561033657600080fd5b5061033f610717565b60408051600160a060020a039092168252519081900360200190f35b34801561036757600080fd5b50610114610726565b34801561037c57600080fd5b5061027661075d565b34801561039157600080fd5b506101ad600160a060020a03600435166024356107a7565b3480156103b557600080fd5b506102766004356107ba565b3480156103cd57600080fd5b506101ad600160a060020a0360043516602435610837565b3480156103f157600080fd5b506101d6600160a060020a03600435811690602435166108d0565b34801561041857600080fd5b50610276600160a060020a03600435166108fb565b60408051808201909152600e81527f4a756d626f42756d70546f6b656e000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60005481565b80518251600091146104e157600080fd5b5060005b825181101561052f5761052683828151811015156104ff57fe5b90602001906020020151838381518110151561051757fe5b906020019060200201516107a7565b506001016104e5565b505050565b6000610541848484610990565b949350505050565b601281565b600080821161055c57600080fd5b3360009081526001602052604090205482111561057857600080fd5b5033600081815260016020526040902054610599908363ffffffff610b0916565b600160a060020a038216600090815260016020526040812091909155546105c6908363ffffffff610b0916565b600055604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b336000908152600260209081526040808320600160a060020a03861684529091528120548083111561066157336000908152600260209081526040808320600160a060020a0388168452909152812055610696565b610671818463ffffffff610b0916565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526001602052604090205490565b600354600160a060020a031681565b60408051808201909152600381527f4a42540000000000000000000000000000000000000000000000000000000000602082015281565b600354600160a060020a0316331461077457600080fd5b600354604051600160a060020a0390911690303180156108fc02916000818181858888f1935050505015156107a557fe5b565b60006107b38383610b1b565b9392505050565b600354600160a060020a031633146107d157600080fd5b600080548201815560038054600160a060020a039081168352600160209081526040808520805487019055925483518681529351921693927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a350565b336000908152600260209081526040808320600160a060020a038616845290915281205461086b908363ffffffff610bfe16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a0316331461091257600080fd5b600160a060020a038116151561092757600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a03831615156109a757600080fd5b600160a060020a0384166000908152600160205260409020548211156109cc57600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156109fc57600080fd5b600160a060020a038416600090815260016020526040902054610a25908363ffffffff610b0916565b600160a060020a038086166000908152600160205260408082209390935590851681522054610a5a908363ffffffff610bfe16565b600160a060020a038085166000908152600160209081526040808320949094559187168152600282528281203382529091522054610a9e908363ffffffff610b0916565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600082821115610b1557fe5b50900390565b6000600160a060020a0383161515610b3257600080fd5b33600090815260016020526040902054821115610b4e57600080fd5b33600090815260016020526040902054610b6e908363ffffffff610b0916565b3360009081526001602052604080822092909255600160a060020a03851681522054610ba0908363ffffffff610bfe16565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b6000828201838110156107b357fe00a165627a7a7230582097b55309c5c33601d3d50f3f361aa0afc329b0855679810c8caadae83d5c6a450029"
}