{
  "address": "0x758c5546f5ea74fb52dc73f2f110e46258a92b57",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ProofOfKennyCoin",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-02\n*/\n\npragma solidity ^0.4.20;\n\n/*\n* In dedication of the Poohmaster himself, we Present...\n* ====================================*\n*\n* PROOF OF KENNY COIN                        \n*\n* ====================================*\n* -> What?\n* The original autonomous pooh pyramid, improved:\n* [x] More stable than ever, having withstood severe testnet abuse and attack attempts from our community!.\n* [x] Audited, tested, and approved by known community security specialists.\n* [X] New functionality; you can now perform partial sell orders. If you succumb to weak hands, you don't have to dump all of your bags!\n* [x] New functionality; you can now transfer tokens between wallets. Trading is now possible from within the contract!\n* [x] New Feature: PoS Masternodes! The first implementation of Ethereum Staking in the world! Vitalik is mad.\n* [x] Masternodes: Holding 50 POKC Coins allow you to generate a Masternode link, Masternode links are used as unique entry points to the contract!\n* [x] Masternodes: All players who enter the contract through your Masternode have 30% of their 20% dividends fee rerouted from the master-node, to the node-master!\n*\n* \n* -> Who worked on this project?\n*\n* Trusted face of pooh kenny!\n*\n*/\n\ncontract ProofOfKennyCoin {\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n    // only people with tokens\n    modifier onlyBagholders() {\n        require(myTokens() > 0);\n        _;\n    }\n    \n    // only people with profits\n    modifier onlyStronghands() {\n        require(myDividends(true) > 0);\n        _;\n    }\n    \n    // administrators can:\n    // -> change the name of the contract\n    // -> change the name of the token\n    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\n    // they CANNOT:\n    // -> take funds\n    // -> disable withdrawals\n    // -> kill the contract\n    // -> change the price of tokens\n    modifier onlyAdministrator(){\n        address _customerAddress = msg.sender;\n        require(administrators[_customerAddress]);\n        _;\n    }\n    \n    \n    // ensures that the first tokens in the contract will be equally distributed\n    // meaning, no divine dump will be ever possible\n    // result: healthy longevity.\n    modifier antiEarlyWhale(uint256 _amountOfEthereum){\n        address _customerAddress = msg.sender;\n        \n        // are we still in the vulnerable phase?\n        // if so, enact anti early whale protocol \n        if( onlyAmbassadors && ((totalEthereumBalance() - _amountOfEthereum) <= ambassadorQuota_ )){\n            require(\n                // is the customer in the ambassador list?\n                ambassadors_[_customerAddress] == true &&\n                \n                // does the customer purchase exceed the max ambassador quota?\n                (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfEthereum) <= ambassadorMaxPurchase_\n                \n            );\n            \n            // updated the accumulated quota    \n            ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfEthereum);\n        \n            // execute\n            _;\n        } else {\n            // in case the ether count drops low, the ambassador phase won't reinitiate\n            onlyAmbassadors = true;\n            _;    \n        }\n        \n    }\n    \n    \n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy\n    );\n    \n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned\n    );\n    \n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n    \n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n    \n    // ERC20\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n    \n    \n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n    string public name = \"ProofOfKennyCoin\";\n    string public symbol = \"POKC\";\n    uint8 constant public decimals = 18;\n    uint8 constant internal dividendFee_ = 4; // Look, strong Math\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n    uint256 constant internal magnitude = 2**64;\n    \n    // proof of stake (defaults at 100 tokens)\n    uint256 public stakingRequirement = 50e18;\n    \n    // ambassador program\n    mapping(address => bool) internal ambassadors_;\n    uint256 constant internal ambassadorMaxPurchase_ = 1 ether;\n    uint256 constant internal ambassadorQuota_ = 3 ether;\n    \n    \n    \n   /*================================\n    =            DATASETS            =\n    ================================*/\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n    uint256 internal tokenSupply_ = 0;\n    uint256 internal profitPerShare_;\n    \n    // administrator list (see above on what they can do)\n    mapping(address => bool) public administrators;\n    \n    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n    bool public onlyAmbassadors = false;\n    \n\n\n    /*=======================================\n    =            PUBLIC FUNCTIONS            =\n    =======================================*/\n    /*\n    * -- APPLICATION ENTRY POINTS --  \n    */\n    function ProofOfKennyCoin()\n        public\n    {\n        // add administrators here\n        administrators[0xCd39c70f9DF2A0D216c3A52C5A475914485a0625] = true;\n    }\n     \n    /**\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n     */\n    function buy(address _referredBy)\n        public\n        payable\n        returns(uint256)\n    {\n        purchaseTokens(msg.value, _referredBy);\n    }\n    \n    /**\n     * Fallback function to handle ethereum that was send straight to the contract\n     * Unfortunately we cannot use a referral address this way.\n     */\n    function()\n        payable\n        public\n    {\n        purchaseTokens(msg.value, 0x0);\n    }\n    \n    /**\n     * Converts all of caller's dividends to tokens.\n    */\n    function reinvest()\n        onlyStronghands()\n        public\n    {\n        // fetch dividends\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n        \n        // pay out the dividends virtually\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        \n        // retrieve ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        \n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n        \n        // fire event\n        onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n    \n    /**\n     * Alias of sell() and withdraw().\n     */\n    function exit()\n        public\n    {\n        // get token count for caller & sell them all\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if(_tokens > 0) sell(_tokens);\n        \n        // lambo delivery service\n        withdraw();\n    }\n\n    /**\n     * Withdraws all of the callers earnings.\n     */\n    function withdraw()\n        onlyStronghands()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n        \n        // update dividend tracker\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        \n        // add ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        \n        // lambo delivery service\n        _customerAddress.transfer(_dividends);\n        \n        // fire event\n        onWithdraw(_customerAddress, _dividends);\n    }\n    \n    /**\n     * Liquifies tokens to ethereum.\n     */\n    function sell(uint256 _amountOfTokens)\n        onlyBagholders()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        // russian hackers BTFO\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        \n        // burn the sold tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n        \n        // update dividends tracker\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;       \n        \n        // dividing by zero is a bad idea\n        if (tokenSupply_ > 0) {\n            // update the amount of dividends per token\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n        \n        // fire event\n        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n    }\n    \n    \n    /**\n     * Transfer tokens from the caller to a new holder.\n     * Remember, there's a 10% fee here as well.\n     */\n    function transfer(address _toAddress, uint256 _amountOfTokens)\n        onlyBagholders()\n        public\n        returns(bool)\n    {\n        // setup\n        address _customerAddress = msg.sender;\n        \n        // make sure we have the requested tokens\n        // also disables transfers until ambassador phase is over\n        // ( we dont want whale premines )\n        require(!onlyAmbassadors && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        \n        // withdraw all outstanding dividends first\n        if(myDividends(true) > 0) withdraw();\n        \n        // liquify 10% of the tokens that are transfered\n        // these are dispersed to shareholders\n        uint256 _tokenFee = SafeMath.div(_amountOfTokens, dividendFee_);\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\n  \n        // burn the fee tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n\n        // exchange tokens\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n        \n        // update dividend trackers\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n        \n        // disperse dividends among holders\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        \n        // fire event\n        Transfer(_customerAddress, _toAddress, _taxedTokens);\n        \n        // ERC20\n        return true;\n       \n    }\n    \n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n    /**\n     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\n     */\n    function disableInitialStage()\n        onlyAdministrator()\n        public\n    {\n        onlyAmbassadors = false;\n    }\n    \n    /**\n     * In case one of us dies, we need to replace ourselves.\n     */\n    function setAdministrator(address _identifier, bool _status)\n        onlyAdministrator()\n        public\n    {\n        administrators[_identifier] = _status;\n    }\n    \n    /**\n     * Precautionary measures in case we need to adjust the masternode rate.\n     */\n    function setStakingRequirement(uint256 _amountOfTokens)\n        onlyAdministrator()\n        public\n    {\n        stakingRequirement = _amountOfTokens;\n    }\n    \n    /**\n     * If we want to rebrand, we can.\n     */\n    function setName(string _name)\n        onlyAdministrator()\n        public\n    {\n        name = _name;\n    }\n    \n    /**\n     * If we want to rebrand, we can.\n     */\n    function setSymbol(string _symbol)\n        onlyAdministrator()\n        public\n    {\n        symbol = _symbol;\n    }\n\n    \n    /*----------  HELPERS AND CALCULATORS  ----------*/\n    /**\n     * Method to view the current Ethereum stored in the contract\n     * Example: totalEthereumBalance()\n     */\n    function totalEthereumBalance()\n        public\n        view\n        returns(uint)\n    {\n        return this.balance;\n    }\n    \n    /**\n     * Retrieve the total token supply.\n     */\n    function totalSupply()\n        public\n        view\n        returns(uint256)\n    {\n        return tokenSupply_;\n    }\n    \n    /**\n     * Retrieve the tokens owned by the caller.\n     */\n    function myTokens()\n        public\n        view\n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n    \n    /**\n     * Retrieve the dividends owned by the caller.\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     * But in the internal calculations, we want them separate. \n     */ \n    function myDividends(bool _includeReferralBonus) \n        public \n        view \n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n    \n    /**\n     * Retrieve the token balance of any single address.\n     */\n    function balanceOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n    \n    /**\n     * Retrieve the dividend balance of any single address.\n     */\n    function dividendsOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n    \n    /**\n     * Return the buy price of 1 individual token.\n     */\n    function sellPrice() \n        public \n        view \n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n            return _taxedEthereum;\n        }\n    }\n    \n    /**\n     * Return the sell price of 1 individual token.\n     */\n    function buyPrice() \n        public \n        view \n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n            return _taxedEthereum;\n        }\n    }\n    \n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n     */\n    function calculateTokensReceived(uint256 _ethereumToSpend) \n        public \n        view \n        returns(uint256)\n    {\n        uint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        \n        return _amountOfTokens;\n    }\n    \n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n     */\n    function calculateEthereumReceived(uint256 _tokensToSell) \n        public \n        view \n        returns(uint256)\n    {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _taxedEthereum;\n    }\n    \n    \n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n        antiEarlyWhale(_incomingEthereum)\n        internal\n        returns(uint256)\n    {\n        // data setup\n        address _customerAddress = msg.sender;\n        uint256 _undividedDividends = SafeMath.div(_incomingEthereum, dividendFee_);\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n \n        // no point in continuing execution if OP is a poorfag russian hacker\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n        // (or hackers)\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n        \n        // is the user referred by a masternode?\n        if(\n            // is this a referred purchase?\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n            // no cheating!\n            _referredBy != _customerAddress &&\n            \n            // does the referrer have at least X whole tokens?\n            // i.e is the referrer a godly chad masternode\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ){\n            // wealth redistribution\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } else {\n            // no ref purchase\n            // add the referral bonus back to the global dividends cake\n            _dividends = SafeMath.add(_dividends, _referralBonus);\n            _fee = _dividends * magnitude;\n        }\n        \n        // we can't give people infinite ethereum\n        if(tokenSupply_ > 0){\n            \n            // add tokens to the pool\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n \n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n            \n            // calculate the amount of tokens the customer receives over his purchase \n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n        \n        } else {\n            // add tokens to the pool\n            tokenSupply_ = _amountOfTokens;\n        }\n        \n        // update circulating supply & the ledger address for the customer\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        \n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n        //really i know you think you do but you don't\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n        \n        // fire event\n        onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy);\n        \n        return _amountOfTokens;\n    }\n\n    /**\n     * Calculate Token price based on an amount of incoming ethereum\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function ethereumToTokens_(uint256 _ethereum)\n        internal\n        view\n        returns(uint256)\n    {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived = \n         (\n            (\n                // underflow attempts BTFO\n                SafeMath.sub(\n                    (sqrt\n                        (\n                            (_tokenPriceInitial**2)\n                            +\n                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n                            +\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n                            +\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n                        )\n                    ), _tokenPriceInitial\n                )\n            )/(tokenPriceIncremental_)\n        )-(tokenSupply_)\n        ;\n  \n        return _tokensReceived;\n    }\n    \n    /**\n     * Calculate token sell value.\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n     function tokensToEthereum_(uint256 _tokens)\n        internal\n        view\n        returns(uint256)\n    {\n\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n        (\n            // underflow attempts BTFO\n            SafeMath.sub(\n                (\n                    (\n                        (\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n                        )-tokenPriceIncremental_\n                    )*(tokens_ - 1e18)\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n            )\n        /1e18);\n        return _etherReceived;\n    }\n    \n    \n    //This is where all your gas goes, sorry\n    //Not sorry, you probably only paid 1 gwei\n    function sqrt(uint x) internal pure returns (uint y) {\n        uint z = (x + 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onlyAmbassadors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"administrators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"setStakingRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableInitialStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumEarned\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "606060405260408051908101604052601081527f50726f6f664f664b656e6e79436f696e00000000000000000000000000000000602082015260009080516200004d9291602001906200010f565b5060408051908101604052600481527f504f4b430000000000000000000000000000000000000000000000000000000060208201526001908051620000979291602001906200010f565b506802b5e3af16b18800006002556000600855600b805460ff191690553415620000c057600080fd5b73cd39c70f9df2a0d216c3a52c5a475914485a0625600052600a6020527fc5d3b82daf4dfd71e738430867ba3a39215ad50cf79c5ec1e46aacf28c90e626805460ff19166001179055620001b4565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200015257805160ff191683800117855562000182565b8280016001018555821562000182579182015b828111156200018257825182559160200191906001019062000165565b506200019092915062000194565b5090565b620001b191905b808211156200019057600081556001016200019b565b90565b6115b680620001c46000396000f30060606040526004361061015d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b811461016b57806306fdde031461019c57806310d0ffdd1461022657806318160ddd1461023c578063226093731461024f57806327defa1f14610265578063313ce5671461028c5780633ccfd60b146102b55780634b750334146102ca57806356d399e8146102dd578063688abbf7146102f05780636b2f46321461030857806370a082311461031b57806376be15851461033a5780638328b610146103595780638620410b1461036f57806387c9505814610382578063949e8acd146103a657806395d89b41146103b9578063a8e04f34146103cc578063a9059cbb146103df578063b84c824614610401578063c47f002714610452578063e4849b32146104a3578063e9fad8ee146104b9578063f088d547146104cc578063fdb5a03e146104e0575b6101683460006104f3565b50005b341561017657600080fd5b61018a600160a060020a0360043516610a99565b60405190815260200160405180910390f35b34156101a757600080fd5b6101af610acf565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101eb5780820151838201526020016101d3565b50505050905090810190601f1680156102185780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561023157600080fd5b61018a600435610b6d565b341561024757600080fd5b61018a610b9d565b341561025a57600080fd5b61018a600435610ba4565b341561027057600080fd5b610278610bdd565b604051901515815260200160405180910390f35b341561029757600080fd5b61029f610be6565b60405160ff909116815260200160405180910390f35b34156102c057600080fd5b6102c8610beb565b005b34156102d557600080fd5b61018a610cb2565b34156102e857600080fd5b61018a610d06565b34156102fb57600080fd5b61018a6004351515610d0c565b341561031357600080fd5b61018a610d4f565b341561032657600080fd5b61018a600160a060020a0360043516610d5d565b341561034557600080fd5b610278600160a060020a0360043516610d78565b341561036457600080fd5b6102c8600435610d8d565b341561037a57600080fd5b61018a610dbb565b341561038d57600080fd5b6102c8600160a060020a03600435166024351515610e03565b34156103b157600080fd5b61018a610e57565b34156103c457600080fd5b6101af610e6a565b34156103d757600080fd5b6102c8610ed5565b34156103ea57600080fd5b610278600160a060020a0360043516602435610f0a565b341561040c57600080fd5b6102c860046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506110bd95505050505050565b341561045d57600080fd5b6102c860046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506110fd95505050505050565b34156104ae57600080fd5b6102c8600435611138565b34156104c457600080fd5b6102c861128b565b61018a600160a060020a03600435166112c2565b34156104eb57600080fd5b6102c86112ce565b60008060008060008060008060008a6000339050600b60009054906101000a900460ff16801561053457506729a2241af62c000082610530610d4f565b0311155b1561082857600160a060020a03811660009081526003602052604090205460ff16151560011480156105895750600160a060020a038116600090815260076020526040902054670de0b6b3a764000090830111155b151561059457600080fd5b600160a060020a0381166000908152600760205260409020546105b79083611384565b600160a060020a0382166000908152600760205260409020553399506105de8d600461139a565b98506105eb89600361139a565b97506105f789896113b1565b96506106038d8a6113b1565b955061060e866113c3565b9450604060020a8702935060008511801561063357506008546106318682611384565b115b151561063e57600080fd5b600160a060020a038c1615801590610668575089600160a060020a03168c600160a060020a031614155b801561068e5750600254600160a060020a038d1660009081526004602052604090205410155b156106d457600160a060020a038c166000908152600560205260409020546106b69089611384565b600160a060020a038d166000908152600560205260409020556106ea565b6106de8789611384565b9650604060020a870293505b600060085411156107445761070160085486611384565b6008819055604060020a880281151561071657fe5b60098054929091049091019055600854604060020a880281151561073657fe5b04850284038403935061074a565b60088590555b600160a060020a038a1660009081526004602052604090205461076d9086611384565b600460008c600160a060020a0316600160a060020a031681526020019081526020016000208190555083856009540203925082600660008c600160a060020a0316600160a060020a03168152602001908152602001600020600082825401925050819055508b600160a060020a03168a600160a060020a03167f022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d58f8860405191825260208201526040908101905180910390a3849a50610a89565b600b805460ff191660011790553399506108438d600461139a565b985061085089600361139a565b975061085c89896113b1565b96506108688d8a6113b1565b9550610873866113c3565b9450604060020a8702935060008511801561089857506008546108968682611384565b115b15156108a357600080fd5b600160a060020a038c16158015906108cd575089600160a060020a03168c600160a060020a031614155b80156108f35750600254600160a060020a038d1660009081526004602052604090205410155b1561093957600160a060020a038c1660009081526005602052604090205461091b9089611384565b600160a060020a038d1660009081526005602052604090205561094f565b6109438789611384565b9650604060020a870293505b600060085411156109a95761096660085486611384565b6008819055604060020a880281151561097b57fe5b60098054929091049091019055600854604060020a880281151561099b57fe5b0485028403840393506109af565b60088590555b600160a060020a038a166000908152600460205260409020546109d29086611384565b600460008c600160a060020a0316600160a060020a031681526020019081526020016000208190555083856009540203925082600660008c600160a060020a0316600160a060020a03168152602001908152602001600020600082825401925050819055508b600160a060020a03168a600160a060020a03167f022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d58f8860405191825260208201526040908101905180910390a3849a505b5050505050505050505092915050565b600160a060020a0316600090815260066020908152604080832054600490925290912054600954604060020a9102919091030490565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b655780601f10610b3a57610100808354040283529160200191610b65565b820191906000526020600020905b815481529060010190602001808311610b4857829003601f168201915b505050505081565b6000808080610b7d85600461139a565b9250610b8985846113b1565b9150610b94826113c3565b95945050505050565b6008545b90565b6000806000806008548511151515610bbb57600080fd5b610bc48561145b565b9250610bd183600461139a565b9150610b9483836113b1565b600b5460ff1681565b601281565b6000806000610bfa6001610d0c565b11610c0457600080fd5b339150610c116000610d0c565b600160a060020a03831660008181526006602090815260408083208054604060020a870201905560059091528082208054929055920192509082156108fc0290839051600060405180830381858888f193505050501515610c7157600080fd5b81600160a060020a03167fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc8260405190815260200160405180910390a25050565b60008060008060085460001415610cd0576414f46b04009350610d00565b610ce1670de0b6b3a764000061145b565b9250610cee83600461139a565b9150610cfa83836113b1565b90508093505b50505090565b60025481565b60003382610d2257610d1d81610a99565b610d46565b600160a060020a038116600090815260056020526040902054610d4482610a99565b015b91505b50919050565b600160a060020a0330163190565b600160a060020a031660009081526004602052604090205490565b600a6020526000908152604090205460ff1681565b33600160a060020a0381166000908152600a602052604090205460ff161515610db557600080fd5b50600255565b60008060008060085460001415610dd95764199c82cc009350610d00565b610dea670de0b6b3a764000061145b565b9250610df783600461139a565b9150610cfa8383611384565b33600160a060020a0381166000908152600a602052604090205460ff161515610e2b57600080fd5b50600160a060020a03919091166000908152600a60205260409020805460ff1916911515919091179055565b600033610e6381610d5d565b91505b5090565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b655780601f10610b3a57610100808354040283529160200191610b65565b33600160a060020a0381166000908152600a602052604090205460ff161515610efd57600080fd5b50600b805460ff19169055565b600080600080600080610f1b610e57565b11610f2557600080fd5b600b5433945060ff16158015610f535750600160a060020a0384166000908152600460205260409020548611155b1515610f5e57600080fd5b6000610f6a6001610d0c565b1115610f7857610f78610beb565b610f8386600461139a565b9250610f8f86846113b1565b9150610f9a8361145b565b9050610fa8600854846113b1565b600855600160a060020a038416600090815260046020526040902054610fce90876113b1565b600160a060020a038086166000908152600460205260408082209390935590891681522054610ffd9083611384565b600160a060020a0388811660008181526004602090815260408083209590955560098054948a16835260069091528482208054948c0290940390935582549181529290922080549285029092019091555460085461106c9190604060020a840281151561106657fe5b04611384565b600955600160a060020a038088169085167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35060019695505050505050565b33600160a060020a0381166000908152600a602052604090205460ff1615156110e557600080fd5b60018280516110f89291602001906114fc565b505050565b33600160a060020a0381166000908152600a602052604090205460ff16151561112557600080fd5b60008280516110f89291602001906114fc565b600080600080600080600061114b610e57565b1161115557600080fd5b33600160a060020a03811660009081526004602052604090205490965087111561117e57600080fd5b86945061118a8561145b565b935061119784600461139a565b92506111a384846113b1565b91506111b1600854866113b1565b600855600160a060020a0386166000908152600460205260409020546111d790866113b1565b600160a060020a03871660009081526004602090815260408083209390935560095460069091529181208054928802604060020a86020192839003905560085491925090111561123e5761123a600954600854604060020a860281151561106657fe5b6009555b85600160a060020a03167fc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a31139868460405191825260208201526040908101905180910390a250505050505050565b33600160a060020a038116600090815260046020526040812054908111156112b6576112b681611138565b6112be610beb565b5050565b6000610d4934836104f3565b6000806000806112de6001610d0c565b116112e857600080fd5b6112f26000610d0c565b33600160a060020a03811660009081526006602090815260408083208054604060020a870201905560059091528120805490829055909201945092506113399084906104f3565b905081600160a060020a03167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458848360405191825260208201526040908101905180910390a2505050565b60008282018381101561139357fe5b9392505050565b60008082848115156113a857fe5b04949350505050565b6000828211156113bd57fe5b50900390565b6008546000906c01431e0fae6d7217caa00000009082906402540be400611448611442730380d4bd8a8678c1bb542c80deb4800000000000880268056bc75e2d631000006002860a02017005e0a1fd2712875988becaad0000000000850201780197d4df19d605767337e9f14d3eec8920e400000000000000016114c7565b856113b1565b81151561145157fe5b0403949350505050565b600854600090670de0b6b3a76400008381019181019083906114b46414f46b04008285046402540be40002018702600283670de0b6b3a763ffff1982890a8b900301046402540be400028115156114ae57fe5b046113b1565b8115156114bd57fe5b0495945050505050565b80600260018201045b81811015610d495780915060028182858115156114e957fe5b04018115156114f457fe5b0490506114d0565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061153d57805160ff191683800117855561156a565b8280016001018555821561156a579182015b8281111561156a57825182559160200191906001019061154f565b50610e6692610ba19250905b80821115610e6657600081556001016115765600a165627a7a72305820952097ac839f6e896f375134fab8807f378cc0681e0681b88c8e09e6fef114050029"
}