{
  "address": "0x635783f8dc5e941fc142235ea44cc3529c17695d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EtherHellFaucet",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-27\n*/\n\npragma solidity ^0.4.20;\n\ncontract EtherHellFaucet {\n    using SafeMath for uint256;\n\n    event Bid(\n        uint _timestamp,\n        address _address,\n        uint _amount,\n        uint _cappedAmount,\n        uint _newRound,\n        uint _newPot\n    );\n\n    event Winner(\n        uint _timestamp,\n        address _address,\n        uint _totalPayout,\n        uint _round,\n        uint _leaderTimestamp\n    );\n\n    event EarningsWithdrawal(\n        uint _timestamp,\n        address _address,\n        uint _amount\n    );\n\n    event DividendsWithdrawal(\n        uint _timestamp,\n        address _address,\n        uint _dividendShares,\n        uint _amount,\n        uint _newTotalDividendShares,\n        uint _newDividendFund\n    );\n\n    // Amount of money distributed per payout as a fraction of the current bid\n    uint public constant PAYOUT_FRAC_TOP = 10;\n    uint public constant PAYOUT_FRAC_BOT = 100;\n\n    // Amount of time between payouts\n    uint public constant PAYOUT_TIME = 5 minutes;\n\n    // Maximum fraction of the pot that can be won in one round\n    uint public constant MAX_PAYOUT_FRAC_TOP = 1;\n    uint public constant MAX_PAYOUT_FRAC_BOT = 10;\n\n    // Maximum bid as a fraction of the pot\n    uint public constant MAX_BID_FRAC_TOP = 1;\n    uint public constant MAX_BID_FRAC_BOT = 100;\n\n    // Fraction of each bid put into the dividend fund\n    uint public constant DIVIDEND_FUND_FRAC_TOP = 1;\n    uint public constant DIVIDEND_FUND_FRAC_BOT = 2;\n\n    // Owner of the contract\n    address owner;\n\n    // Mapping from addresses to amounts earned\n    mapping(address => uint) public earnings;\n\n    // Mapping from addresses to dividend shares\n    mapping(address => uint) public dividendShares;\n\n    // Total number of dividend shares\n    uint public totalDividendShares;\n\n    // Value of the dividend fund\n    uint public dividendFund;\n\n    // Current round number\n    uint public round;\n\n    // Value of the pot\n    uint public pot;\n\n    // Address of the current leader\n    address public leader;\n\n    // Time at which the most recent bid was placed\n    uint public leaderTimestamp;\n\n    // Amount of the most recent bid, capped at the maximum bid\n    uint public leaderBid;\n\n    function EtherHellFaucet() public payable {\n        require(msg.value > 0);\n        owner = msg.sender;\n        totalDividendShares = 0;\n        dividendFund = 0;\n        round = 0;\n        pot = msg.value;\n        leader = owner;\n        leaderTimestamp = now;\n        leaderBid = 0;\n        Bid(now, msg.sender, 0, 0, round, pot);\n    }\n\n    function bid() public payable {\n        uint _maxPayout = pot.mul(MAX_PAYOUT_FRAC_TOP).div(MAX_PAYOUT_FRAC_BOT);\n        uint _numPayoutIntervals = now.sub(leaderTimestamp).div(PAYOUT_TIME);\n        uint _totalPayout = _numPayoutIntervals.mul(leaderBid).mul(PAYOUT_FRAC_TOP).div(PAYOUT_FRAC_BOT);\n        if (_totalPayout > _maxPayout) {\n            _totalPayout = _maxPayout;\n        }\n        earnings[leader] = earnings[leader].add(_totalPayout);\n        pot = pot.sub(_totalPayout);\n\n        Winner(now, leader, _totalPayout, round, leaderTimestamp);\n\n        uint _maxBid = pot.mul(MAX_BID_FRAC_TOP).div(MAX_BID_FRAC_BOT);\n        uint _bidAmountToDividendFund = msg.value.mul(DIVIDEND_FUND_FRAC_TOP).div(DIVIDEND_FUND_FRAC_BOT);\n        uint _bidAmountToPot = msg.value.sub(_bidAmountToDividendFund);\n\n        uint _dividendSharePrice;\n        if (totalDividendShares == 0) {\n            _dividendSharePrice = _maxBid.mul(DIVIDEND_FUND_FRAC_TOP).div(DIVIDEND_FUND_FRAC_BOT);\n        } else {\n            _dividendSharePrice = dividendFund.div(totalDividendShares);\n        }\n\n        dividendFund = dividendFund.add(_bidAmountToDividendFund);\n        pot = pot.add(_bidAmountToPot);\n\n        if (msg.value > _maxBid) {\n            uint _investment = msg.value.sub(_maxBid).mul(DIVIDEND_FUND_FRAC_TOP).div(DIVIDEND_FUND_FRAC_BOT);\n            uint _dividendShares = _investment.div(_dividendSharePrice);\n            dividendShares[msg.sender] = dividendShares[msg.sender].add(_dividendShares);\n            totalDividendShares = totalDividendShares.add(_dividendShares);\n        }\n\n        round++;\n        leader = msg.sender;\n        leaderTimestamp = now;\n        leaderBid = msg.value;\n        if (leaderBid > _maxBid) {\n            leaderBid = _maxBid;\n        }\n\n        Bid(now, msg.sender, msg.value, leaderBid, round, pot);\n    }\n\n    function withdrawEarnings() public {\n        require(earnings[msg.sender] > 0);\n        assert(earnings[msg.sender] <= this.balance);\n        uint _amount = earnings[msg.sender];\n        earnings[msg.sender] = 0;\n        msg.sender.transfer(_amount);\n        EarningsWithdrawal(now, msg.sender, _amount);\n    }\n\n    function withdrawDividends() public {\n        require(dividendShares[msg.sender] > 0);\n        uint _dividendShares = dividendShares[msg.sender];\n        assert(_dividendShares <= totalDividendShares);\n        uint _amount = dividendFund.mul(_dividendShares).div(totalDividendShares);\n        assert(_amount <= this.balance);\n        dividendShares[msg.sender] = 0;\n        totalDividendShares = totalDividendShares.sub(_dividendShares);\n        dividendFund = dividendFund.sub(_amount);\n        msg.sender.transfer(_amount);\n        DividendsWithdrawal(now, msg.sender, _dividendShares, _amount, totalDividendShares, dividendFund);\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"PAYOUT_FRAC_BOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_BID_FRAC_BOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_PAYOUT_FRAC_BOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PAYOUT_FRAC_TOP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"earnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PAYOUT_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_BID_FRAC_TOP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEarnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DIVIDEND_FUND_FRAC_BOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_PAYOUT_FRAC_TOP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leaderBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividendShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DIVIDEND_FUND_FRAC_TOP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leaderTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"dividendShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_cappedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newRound\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newPot\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_totalPayout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_leaderTimestamp\",\"type\":\"uint256\"}],\"name\":\"Winner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EarningsWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_dividendShares\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newTotalDividendShares\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newDividendFund\",\"type\":\"uint256\"}],\"name\":\"DividendsWithdrawal\",\"type\":\"event\"}]",
  "bytecode": "606060405260003411151561001357600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060038190555060006004819055506000600581905550346006819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260088190555060006009819055507f28509951dc993ba7b496b468d64706535c28d1d872d3d452ae7bc9695dd7656f4233600080600554600654604051808781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001838152602001828152602001965050505050505060405180910390a1610f8c806101826000396000f30060606040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806308306af314610122578063146ca5311461014b5780631998aeef146101745780631a06008a1461017e5780631bc44213146101a75780632871587d146101d05780632e92abdd146101f957806340eedabb1461020e57806341c0dc59146102635780634ba2363a1461028c578063543fd313146102b557806384c6f650146103025780638a7ed05c1461032b578063b73c6ce914610354578063b74e825e14610369578063bcc9ed6f14610392578063c395a16b146103bb578063c64fa2e4146103e4578063d90025d11461040d578063e289659814610436578063fc9774c11461045f575b600080fd5b341561012d57600080fd5b6101356104ac565b6040518082815260200191505060405180910390f35b341561015657600080fd5b61015e6104b1565b6040518082815260200191505060405180910390f35b61017c6104b7565b005b341561018957600080fd5b610191610a0b565b6040518082815260200191505060405180910390f35b34156101b257600080fd5b6101ba610a11565b6040518082815260200191505060405180910390f35b34156101db57600080fd5b6101e3610a16565b6040518082815260200191505060405180910390f35b341561020457600080fd5b61020c610a1b565b005b341561021957600080fd5b610221610c58565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561026e57600080fd5b610276610c7e565b6040518082815260200191505060405180910390f35b341561029757600080fd5b61029f610c83565b6040518082815260200191505060405180910390f35b34156102c057600080fd5b6102ec600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c89565b6040518082815260200191505060405180910390f35b341561030d57600080fd5b610315610ca1565b6040518082815260200191505060405180910390f35b341561033657600080fd5b61033e610ca7565b6040518082815260200191505060405180910390f35b341561035f57600080fd5b610367610cac565b005b341561037457600080fd5b61037c610e9a565b6040518082815260200191505060405180910390f35b341561039d57600080fd5b6103a5610e9f565b6040518082815260200191505060405180910390f35b34156103c657600080fd5b6103ce610ea4565b6040518082815260200191505060405180910390f35b34156103ef57600080fd5b6103f7610eaa565b6040518082815260200191505060405180910390f35b341561041857600080fd5b610420610eb0565b6040518082815260200191505060405180910390f35b341561044157600080fd5b610449610eb5565b6040518082815260200191505060405180910390f35b341561046a57600080fd5b610496600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ebb565b6040518082815260200191505060405180910390f35b606481565b60055481565b60008060008060008060008060006104ee600a6104e06001600654610ed390919063ffffffff16565b610f0e90919063ffffffff16565b985061051961012c61050b60085442610f2990919063ffffffff16565b610f0e90919063ffffffff16565b97506105566064610548600a61053a6009548d610ed390919063ffffffff16565b610ed390919063ffffffff16565b610f0e90919063ffffffff16565b965088871115610564578896505b6105d88760016000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f4290919063ffffffff16565b60016000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061065287600654610f2990919063ffffffff16565b6006819055507f4d22c521bcd5982b45759419512fca837125546c4ff15d0b15eb01a62e93e01742600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1689600554600854604051808681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018281526020019550505050505060405180910390a161072a606461071c6001600654610ed390919063ffffffff16565b610f0e90919063ffffffff16565b95506107536002610745600134610ed390919063ffffffff16565b610f0e90919063ffffffff16565b94506107688534610f2990919063ffffffff16565b9350600060035414156107a35761079c600261078e600189610ed390919063ffffffff16565b610f0e90919063ffffffff16565b92506107bd565b6107ba600354600454610f0e90919063ffffffff16565b92505b6107d285600454610f4290919063ffffffff16565b6004819055506107ed84600654610f4290919063ffffffff16565b600681905550853411156108fc57610834600261082660016108188a34610f2990919063ffffffff16565b610ed390919063ffffffff16565b610f0e90919063ffffffff16565b91506108498383610f0e90919063ffffffff16565b905061089d81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f4290919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108f581600354610f4290919063ffffffff16565b6003819055505b60056000815480929190600101919050555033600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426008819055503460098190555085600954111561096f57856009819055505b7f28509951dc993ba7b496b468d64706535c28d1d872d3d452ae7bc9695dd7656f423334600954600554600654604051808781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001838152602001828152602001965050505050505060405180910390a1505050505050505050565b60045481565b606481565b600a81565b6000806000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515610a6c57600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506003548211151515610abc57fe5b610ae5600354610ad784600454610ed390919063ffffffff16565b610f0e90919063ffffffff16565b90503073ffffffffffffffffffffffffffffffffffffffff16318111151515610b0a57fe5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b6482600354610f2990919063ffffffff16565b600381905550610b7f81600454610f2990919063ffffffff16565b6004819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515610bc557600080fd5b7fcce21eda251c851dfe62c325d090fc0ad5c64a451311792b95157a0cc3fa199d42338484600354600454604051808781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001838152602001828152602001965050505050505060405180910390a15050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a81565b60065481565b60016020528060005260406000206000915090505481565b61012c81565b600181565b600080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515610cfb57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff1631600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151515610d5d57fe5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515610e2457600080fd5b7f9722cdc65dd852fc27a66eb73f3075ebafbfe00a914437ce1b7b8c8d9fcde127423383604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a150565b600281565b600181565b60095481565b60035481565b600181565b60085481565b60026020528060005260406000206000915090505481565b6000806000841415610ee85760009150610f07565b8284029050828482811515610ef957fe5b04141515610f0357fe5b8091505b5092915050565b6000808284811515610f1c57fe5b0490508091505092915050565b6000828211151515610f3757fe5b818303905092915050565b6000808284019050838110151515610f5657fe5b80915050929150505600a165627a7a72305820311a9660f8669292a0c012ec98d46ab1b97f354e278afa11e3a2b73966b9fa220029"
}