{
  "address": "0x7976af0ae2124a0771d5287aa16017b3f9dd43a4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BurCoin",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-18\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\ncontract ERC223ReceivingContract { \n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic is Ownable {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n  bool transferable;\n\n  modifier isTransferable() {\n      require(transferable || msg.sender == owner);\n      _;\n  }\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  *//*\n  function transfer(address _to, uint256 _value) isTransferable public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n  */\n  \n  \n  \n  \n  \n  \n// Overridden transfer method with _data param for transaction data\n    function transfer(address _to, uint256 _value, bytes _data) isTransferable public {\n        uint codeLength;\n\n        assembly {\n            codeLength := extcodesize(_to)\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        // Check to see if receiver is contract\n        if(codeLength>0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, _data);\n        }\n        emit Transfer(msg.sender, _to, _value);\n    }\n    \n    // Overridden Backwards compatible transfer method without _data param\n    function transfer(address _to, uint256 _value) isTransferable public returns (bool) {\n        uint codeLength;\n        bytes memory empty;\n\n        assembly {\n            codeLength := extcodesize(_to)\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        // Check to see if receiver is contract\n        if(codeLength>0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, empty);\n        }\n        emit Transfer(msg.sender, _to, _value);\n    }\n  \n  \n  \n  \n  \n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) isTransferable public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) onlyOwner public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n\ncontract BurCoin is BurnableToken {\n\n    string public constant name = \"Buratino Coin\";\n    string public constant symbol = \"BUR\";\n    uint32 public constant decimals = 8;\n    uint256 public INITIAL_SUPPLY = 250000000 * 100000000000;\n\n    constructor() public {\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\n        transferable = false;\n    }\n\n\n\t\n\t\n\t\n    modifier saleIsOn() {\n        require(transferable == false);\n        _;\n    }\n\n    function refund(address _from, uint256 _value) onlyOwner saleIsOn public returns(bool) {\n        balances[_from] = balances[_from].sub(_value);\n        balances[owner] = balances[owner].add(_value);\n        emit Transfer(_from, owner, _value);\n        return true;\n    }\n\n    function stopSale() onlyOwner saleIsOn public returns(bool) {\n        transferable = true;\n        return true;\n    }\n\n}",
  "bytecode": "608060405268015af1d78b58c4000060045534801561001d57600080fd5b5060008054600160a060020a03191633908117825560045460028190558183526001602090815260408085208390558051928352519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a36003805460ff19169055610b3b806100986000396000f3006080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d457806318160ddd1461015e5780632ff2e9dc14610185578063313ce5671461019a578063410085df146101c857806342966c681461020057806370a082311461021a578063715018a61461023b5780638da5cb5b1461025057806395d89b4114610281578063a9059cbb14610296578063be45fd62146102ba578063e36b0b3714610323578063f2fde38b14610338575b600080fd5b3480156100e057600080fd5b506100e9610359565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012357818101518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016a57600080fd5b50610173610390565b60408051918252519081900360200190f35b34801561019157600080fd5b50610173610396565b3480156101a657600080fd5b506101af61039c565b6040805163ffffffff9092168252519081900360200190f35b3480156101d457600080fd5b506101ec600160a060020a03600435166024356103a1565b604080519115158252519081900360200190f35b34801561020c57600080fd5b5061021860043561047a565b005b34801561022657600080fd5b50610173600160a060020a036004351661049e565b34801561024757600080fd5b506102186104b9565b34801561025c57600080fd5b50610265610525565b60408051600160a060020a039092168252519081900360200190f35b34801561028d57600080fd5b506100e9610534565b3480156102a257600080fd5b506101ec600160a060020a036004351660243561056b565b3480156102c657600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610218948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061073a9650505050505050565b34801561032f57600080fd5b506101ec610902565b34801561034457600080fd5b50610218600160a060020a036004351661093e565b60408051808201909152600d81527f4275726174696e6f20436f696e00000000000000000000000000000000000000602082015281565b60025490565b60045481565b600881565b60008054600160a060020a031633146103b957600080fd5b60035460ff16156103c957600080fd5b600160a060020a0383166000908152600160205260409020546103f2908363ffffffff61095e16565b600160a060020a0380851660009081526001602052604080822093909355805490911681522054610429908363ffffffff61097016565b60008054600160a060020a039081168252600160209081526040808420949094559154835186815293519082169391871692600080516020610af0833981519152928290030190a350600192915050565b600054600160a060020a0316331461049157600080fd5b61049b3382610983565b50565b600160a060020a031660009081526001602052604090205490565b600054600160a060020a031633146104d057600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031681565b60408051808201909152600381527f4255520000000000000000000000000000000000000000000000000000000000602082015281565b6003546000908190606090829060ff16806105905750600054600160a060020a031633145b151561059b57600080fd5b33600090815260016020526040902054863b93506105bf908663ffffffff61095e16565b3360009081526001602052604080822092909255600160a060020a038816815220546105f1908663ffffffff61097016565b600160a060020a03871660009081526001602052604081209190915583111561070357506040517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081523360048201818152602483018790526060604484019081528451606485015284518994600160a060020a0386169463c0ee0b8a9490938b93899360840190602085019080838360005b8381101561069c578181015183820152602001610684565b50505050905090810190601f1680156106c95780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156106ea57600080fd5b505af11580156106fe573d6000803e3d6000fd5b505050505b604080518681529051600160a060020a038816913391600080516020610af08339815191529181900360200190a350505092915050565b600354600090819060ff168061075a5750600054600160a060020a031633145b151561076557600080fd5b33600090815260016020526040902054853b9250610789908563ffffffff61095e16565b3360009081526001602052604080822092909255600160a060020a038716815220546107bb908563ffffffff61097016565b600160a060020a0386166000908152600160205260408120919091558211156108cd57506040517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081523360048201818152602483018690526060604484019081528551606485015285518894600160a060020a0386169463c0ee0b8a9490938a938a9360840190602085019080838360005b8381101561086657818101518382015260200161084e565b50505050905090810190601f1680156108935780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156108b457600080fd5b505af11580156108c8573d6000803e3d6000fd5b505050505b604080518581529051600160a060020a038716913391600080516020610af08339815191529181900360200190a35050505050565b60008054600160a060020a0316331461091a57600080fd5b60035460ff161561092a57600080fd5b506003805460ff1916600190811790915590565b600054600160a060020a0316331461095557600080fd5b61049b81610a72565b60008282111561096a57fe5b50900390565b8181018281101561097d57fe5b92915050565b600160a060020a0382166000908152600160205260409020548111156109a857600080fd5b600160a060020a0382166000908152600160205260409020546109d1908263ffffffff61095e16565b600160a060020a0383166000908152600160205260409020556002546109fd908263ffffffff61095e16565b600255604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a03851691600080516020610af08339815191529181900360200190a35050565b600160a060020a0381161515610a8757600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820cf531ba302e6ba3951ea4c0a6a3c8596148ce42d71372d4d8a5e0cb7f713f74e0029"
}