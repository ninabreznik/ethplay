{
  "address": "0x96c9126ee53fe08cc28fb08248915c76af3e3568",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Elisia",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-30\n*/\n\npragma solidity 0.4.25;\n/*\n\n __      __          ___                                          ______                     \n/\\ \\  __/\\ \\        /\\_ \\                                        /\\__  _\\                    \n\\ \\ \\/\\ \\ \\ \\     __\\//\\ \\     ___    ___     ___ ___      __    \\/_/\\ \\/   ___              \n \\ \\ \\ \\ \\ \\ \\  /'__`\\\\ \\ \\   /'___\\ / __`\\ /' __` __`\\  /'__`\\     \\ \\ \\  / __`\\            \n  \\ \\ \\_/ \\_\\ \\/\\  __/ \\_\\ \\_/\\ \\__//\\ \\L\\ \\/\\ \\/\\ \\/\\ \\/\\  __/      \\ \\ \\/\\ \\L\\ \\__  __  __ \n   \\ `\\___x___/\\ \\____\\/\\____\\ \\____\\ \\____/\\ \\_\\ \\_\\ \\_\\ \\____\\      \\ \\_\\ \\____/\\_\\/\\_\\/\\_\\\n    '\\/__//__/  \\/____/\\/____/\\/____/\\/___/  \\/_/\\/_/\\/_/\\/____/       \\/_/\\/___/\\/_/\\/_/\\/_/\n                                                                                             \n                                                                                             \n\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\____        \n _\\/\\\\\\///////////__\\/\\\\\\_______________/\\\\\\/////////\\\\\\___/\\\\\\\\\\\\\\\\\\\\\\\\\\__       \n  _\\/\\\\\\_____________\\/\\\\\\______________\\//\\\\\\______\\///___/\\\\\\/////////\\\\\\_      \n   _\\/\\\\\\\\\\\\\\\\\\\\\\_____\\/\\\\\\_______________\\////\\\\\\_________\\/\\\\\\_______\\/\\\\\\_     \n    _\\/\\\\\\///////______\\/\\\\\\__________________\\////\\\\\\______\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_    \n     _\\/\\\\\\_____________\\/\\\\\\_____________________\\////\\\\\\___\\/\\\\\\/////////\\\\\\_   \n      _\\/\\\\\\_____________\\/\\\\\\______________/\\\\\\______\\//\\\\\\__\\/\\\\\\_______\\/\\\\\\_  \n       _\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\///\\\\\\\\\\\\\\\\\\\\\\/___\\/\\\\\\_______\\/\\\\\\_ \n        _\\///////////////__\\///////////////____\\///////////_____\\///________\\///__\n\n\n\n// ----------------------------------------------------------------------------\n// 'Elisia' contract with following features\n//      => In-built ICO functionality\n//      => ERC20 Compliance\n//      => Higher control of ICO by owner\n//      => selfdestruct functionality\n//      => SafeMath implementation \n//      => Air-drop\n//      => User whitelisting\n//      => Minting new tokens by owner\n//\n// Deployed to : 0x94eE9BdC075ff971207D888a9151970169279C82\n// Symbol      : ELSA\n// Name        : Elisia\n// Total supply: 1,000,000,000  (1 Billion)\n// Reserved coins for ICO: 750,000,000 ELSA (750 Million)\n// Decimals    : 18\n//\n// Copyright (c) 2018 Elisia Inc. (https://Elisia.io)\n// Contract designed by EtherAuthority (https://EtherAuthority.io)\n// ----------------------------------------------------------------------------\n  \n*/ \n\n//*******************************************************************//\n//------------------------ SafeMath Library -------------------------//\n//*******************************************************************//\n    /**\n     * @title SafeMath\n     * @dev Math operations with safety checks that throw on error\n     */\n    library SafeMath {\n      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n          return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n      }\n    \n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n      }\n    \n      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n      }\n    \n      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n      }\n    }\n\n\n//*******************************************************************//\n//------------------ Contract to Manage Ownership -------------------//\n//*******************************************************************//\n    \n    contract owned {\n        address public owner;\n        \n         constructor () public {\n            owner = msg.sender;\n        }\n    \n        modifier onlyOwner {\n            require(msg.sender == owner);\n            _;\n        }\n    \n        function transferOwnership(address newOwner) onlyOwner public {\n            owner = newOwner;\n        }\n    }\n    \n    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\n\n//***************************************************************//\n//------------------ ERC20 Standard Template -------------------//\n//***************************************************************//\n    \n    contract TokenERC20 {\n        // Public variables of the token\n        using SafeMath for uint256;\n        string public name;\n        string public symbol;\n        uint8 public decimals = 18; // 18 decimals is the strongly suggested default, avoid changing it\n        uint256 public totalSupply;\n        uint256 public reservedForICO;\n        bool public safeguard = false;  //putting safeguard on will halt all non-owner functions\n    \n        // This creates an array with all balances\n        mapping (address => uint256) public balanceOf;\n        mapping (address => mapping (address => uint256)) public allowance;\n    \n        // This generates a public event on the blockchain that will notify clients\n        event Transfer(address indexed from, address indexed to, uint256 value);\n    \n        // This notifies clients about the amount burnt\n        event Burn(address indexed from, uint256 value);\n    \n        /**\n         * Constrctor function\n         *\n         * Initializes contract with initial supply tokens to the creator of the contract\n         */\n        constructor (\n            uint256 initialSupply,\n            uint256 allocatedForICO,\n            string tokenName,\n            string tokenSymbol\n        ) public {\n            totalSupply = initialSupply.mul(1 ether);       // Update total supply with the decimal amount\n            reservedForICO = allocatedForICO.mul(1 ether);  // Tokens reserved For ICO\n            balanceOf[this] = reservedForICO;           // 2.5 Billion ELC will remain in the contract\n            balanceOf[msg.sender]=totalSupply.sub(reservedForICO); // Rest of tokens will be sent to owner\n            name = tokenName;                           // Set the name for display purposes\n            symbol = tokenSymbol;                       // Set the symbol for display purposes\n        }\n    \n        /**\n         * Internal transfer, only can be called by this contract\n         */\n        function _transfer(address _from, address _to, uint _value) internal {\n            require(!safeguard);\n            // Prevent transfer to 0x0 address. Use burn() instead\n            require(_to != 0x0);\n            // Check if the sender has enough\n            require(balanceOf[_from] >= _value);\n            // Check for overflows\n            require(balanceOf[_to].add(_value) > balanceOf[_to]);\n            // Save this for an assertion in the future\n            uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n            // Subtract from the sender\n            balanceOf[_from] = balanceOf[_from].sub(_value);\n            // Add the same to the recipient\n            balanceOf[_to] = balanceOf[_to].add(_value);\n            emit Transfer(_from, _to, _value);\n            // Asserts are used to use static analysis to find bugs in your code. They should never fail\n            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n        }\n    \n        /**\n         * Transfer tokens\n         *\n         * Send `_value` tokens to `_to` from your account\n         *\n         * @param _to The address of the recipient\n         * @param _value the amount to send\n         */\n        function transfer(address _to, uint256 _value) public returns (bool success) {\n            _transfer(msg.sender, _to, _value);\n            return true;\n        }\n    \n        /**\n         * Transfer tokens from other address\n         *\n         * Send `_value` tokens to `_to` in behalf of `_from`\n         *\n         * @param _from The address of the sender\n         * @param _to The address of the recipient\n         * @param _value the amount to send\n         */\n        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n            require(!safeguard);\n            require(_value <= allowance[_from][msg.sender]);     // Check allowance\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n            _transfer(_from, _to, _value);\n            return true;\n        }\n    \n        /**\n         * Set allowance for other address\n         *\n         * Allows `_spender` to spend no more than `_value` tokens in your behalf\n         *\n         * @param _spender The address authorized to spend\n         * @param _value the max amount they can spend\n         */\n        function approve(address _spender, uint256 _value) public\n            returns (bool success) {\n            require(!safeguard);\n            allowance[msg.sender][_spender] = _value;\n            return true;\n        }\n    \n        /**\n         * Set allowance for other address and notify\n         *\n         * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n         *\n         * @param _spender The address authorized to spend\n         * @param _value the max amount they can spend\n         * @param _extraData some extra information to send to the approved contract\n         */\n        function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n            public\n            returns (bool success) {\n            require(!safeguard);\n            tokenRecipient spender = tokenRecipient(_spender);\n            if (approve(_spender, _value)) {\n                spender.receiveApproval(msg.sender, _value, this, _extraData);\n                return true;\n            }\n        }\n    \n        /**\n         * Destroy tokens\n         *\n         * Remove `_value` tokens from the system irreversibly\n         *\n         * @param _value the amount of money to burn\n         */\n        function burn(uint256 _value) public returns (bool success) {\n            require(!safeguard);\n            require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\n            totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n            emit Burn(msg.sender, _value);\n            return true;\n        }\n    \n        /**\n         * Destroy tokens from other account\n         *\n         * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n         *\n         * @param _from the address of the sender\n         * @param _value the amount of money to burn\n         */\n        function burnFrom(address _from, uint256 _value) public returns (bool success) {\n            require(!safeguard);\n            require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n            require(_value <= allowance[_from][msg.sender]);    // Check allowance\n            balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\n            totalSupply = totalSupply.sub(_value);                              // Update totalSupply\n            emit  Burn(_from, _value);\n            return true;\n        }\n        \n    }\n    \n//************************************************************************//\n//---------------------  ELISIA MAIN CODE STARTS HERE --------------------//\n//************************************************************************//\n    \n    contract Elisia is owned, TokenERC20 {\n        \n        /*************************************/\n        /*  User whitelisting functionality  */\n        /*************************************/\n        bool public whitelistingStatus = false;\n        mapping (address => bool) public whitelisted;\n        \n        /**\n         * Change whitelisting status on or off\n         *\n         * When whitelisting is true, then crowdsale will only accept investors who are whitelisted.\n         */\n        function changeWhitelistingStatus() onlyOwner public{\n            if (whitelistingStatus == false){\n                whitelistingStatus = true;\n            }\n            else{\n                whitelistingStatus = false;    \n            }\n        }\n        \n        /**\n         * Whitelist any user address - only Owner can do this\n         *\n         * It will add user address in whitelisted mapping\n         */\n        function whitelistUser(address userAddress) onlyOwner public{\n            require(whitelistingStatus == true);\n            require(userAddress != 0x0);\n            whitelisted[userAddress] = true;\n        }\n        \n        /**\n         * Whitelist Many user address at once - only Owner can do this\n         * It will require maximum of 150 addresses to prevent block gas limit max-out and DoS attack\n         * It will add user address in whitelisted mapping\n         */\n        function whitelistManyUsers(address[] userAddresses) onlyOwner public{\n            require(whitelistingStatus == true);\n            uint256 addressCount = userAddresses.length;\n            require(addressCount <= 150);\n            for(uint256 i = 0; i < addressCount; i++){\n                require(userAddresses[i] != 0x0);\n                whitelisted[userAddresses[i]] = true;\n            }\n        }\n        \n        \n        \n        /*********************************/\n        /* Code for the ERC20 ELSA Token */\n        /*********************************/\n    \n        /* Public variables of the token */\n        string private tokenName = \"Elisia\";\n        string private tokenSymbol = \"ELSA\";\n        uint256 private initialSupply = 1000000000;     // 1 Billion\n        uint256 private allocatedForICO = 750000000;    // 750 Million\n        \n        \n        /* Records for the fronzen accounts */\n        mapping (address => bool) public frozenAccount;\n        \n        /* This generates a public event on the blockchain that will notify clients */\n        event FrozenFunds(address target, bool frozen);\n    \n        /* Initializes contract with initial supply tokens to the creator of the contract */\n        constructor () TokenERC20(initialSupply, allocatedForICO, tokenName, tokenSymbol) public {}\n\n        /* Internal transfer, only can be called by this contract */\n        function _transfer(address _from, address _to, uint _value) internal {\n            require(!safeguard);\n            require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n            require (balanceOf[_from] >= _value);               // Check if the sender has enough\n            require (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\n            require(!frozenAccount[_from]);                     // Check if sender is frozen\n            require(!frozenAccount[_to]);                       // Check if recipient is frozen\n            balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\n            balanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\n            emit Transfer(_from, _to, _value);\n        }\n        \n        /// @notice Create `mintedAmount` tokens and send it to `target`\n        /// @param target Address to receive the tokens\n        /// @param mintedAmount the amount of tokens it will receive\n        function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n            balanceOf[target] = balanceOf[target].add(mintedAmount);\n            totalSupply = totalSupply.add(mintedAmount);\n            emit Transfer(0, this, mintedAmount);\n            emit Transfer(this, target, mintedAmount);\n        }\n\n        /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n        /// @param target Address to be frozen\n        /// @param freeze either to freeze it or not\n        function freezeAccount(address target, bool freeze) onlyOwner public {\n                frozenAccount[target] = freeze;\n            emit  FrozenFunds(target, freeze);\n        }\n\n        /*******************************/\n        /* Code for the ELSA Crowdsale */\n        /*******************************/\n        \n        /* TECHNICAL SPECIFICATIONS:\n        \n        => ICO starts           :  November 30th 6.00 GMT\n        => ICO Ends             :  January 25th 23.59 GMT\n        => Token Exchange Rate  :  1 ETH = 10,000 ELSA (which equals to 1 ELSA = 0.0001 ETH)\n        => Bonus Rounds:\n            First 24 hours: 45%\n            Day 2 - Day 7: 35%\n            Day 8 - Day 14: 30%\n            Day 15 - Day 21: 25%\n            Day 22 - Day 28: 20%\n            Day 29 - Day 35: 15%\n            Day 36 - Day 42: 10%\n            Day 43 - Day 49: 5%\n            Day 50 - Day 56: NO BONUS\n        => Coins reserved for ICO : 750,000,000\n        => Contribution Limits  : No minimum or maximum Contribution \n\n        */\n\n        //public variables for the Crowdsale\n        uint256 public icoStartDate = 154355760 ;      // 30 November 2018 06:00:00 - GMT\n        uint256 public icoEndDate   = 1548460740 ;      // 25 January 2019 23:59:00 - GMT\n        uint256 public exchangeRate = 10000;            // 1 ETH = 10000 Tokens \n        uint256 public tokensSold = 0;                  // how many tokens sold through crowdsale\n        \n        //@dev fallback function, only accepts ether if pre-sale or ICO is running or Reject\n        function () payable external {\n            require(!safeguard);\n            require(!frozenAccount[msg.sender]);\n            if(whitelistingStatus == true) { require(whitelisted[msg.sender]); }\n            require(icoStartDate < now && icoEndDate > now);\n            // calculate token amount to be sent\n            uint256 token = msg.value.mul(exchangeRate);                        //weiamount * exchangeRate\n            uint256 finalTokens = token.add(calculatePurchaseBonus(token));     //add bonus if available\n            tokensSold = tokensSold.add(finalTokens);\n            _transfer(this, msg.sender, finalTokens);                           //makes the transfers\n            forwardEherToOwner();                                               //send Ether to owner\n        }\n\n        \n        //calculating purchase bonus\n        //SafeMath library is not used here at some places intentionally, as overflow is impossible here\n        //And thus it saves gas cost if we avoid using SafeMath in such cases\n        function calculatePurchaseBonus(uint256 token) internal view returns(uint256){\n            if(icoStartDate < now && (icoStartDate + 86400) > now ){\n                return token.mul(45).div(100);  //45% bonus in first 24 hours\n            }\n            else if((icoStartDate + 86400) < now && (icoStartDate + (86400*7)) > now){\n                return token.mul(35).div(100);  //Day 2 - Day 7: 35%\n            }\n            else if((icoStartDate + (86400*7)) < now && (icoStartDate + (86400*14)) > now){\n                return token.mul(30).div(100);  //Day 8 - Day 14: 30%\n            }\n            else if((icoStartDate + (86400*14)) < now && (icoStartDate + (86400*21)) > now){\n                return token.mul(25).div(100);  //Day 15 - Day 21: 25%\n            }\n            else if((icoStartDate + (86400*21)) < now && (icoStartDate + (86400*28)) > now){\n                return token.mul(20).div(100);  //Day 22 - Day 28: 20%\n            }\n            else if((icoStartDate + (86400*28)) < now && (icoStartDate + (86400*35)) > now){\n                return token.mul(15).div(100);  //Day 29 - Day 35: 15%\n            }\n            else if((icoStartDate + (86400*35)) < now && (icoStartDate + (86400*42)) > now){\n                return token.mul(10).div(100);  //Day 36 - Day 42: 10%\n            }\n            else if((icoStartDate + (86400*42)) < now && (icoStartDate + (86400*49)) > now){\n                return token.mul(5).div(100);  //Day 43 - Day 49: 5%\n            }\n            else{\n                return 0;                       // Day 50 - Day 56: NO BONUS\n            }\n        }\n\n        //Automatocally forwards ether from smart contract to owner address\n        function forwardEherToOwner() internal {\n            address(owner).transfer(msg.value); \n        }\n\n        //Function to update an ICO parameter.\n        //It requires: timestamp of start and end date, exchange rate (1 ETH = ? Tokens)\n        //Owner need to make sure the contract has enough tokens for ICO. \n        //If not enough, then he needs to transfer some tokens into contract addresss from his wallet\n        //If there are no tokens in smart contract address, then ICO will not work.\n        function updateCrowdsale(uint256 icoStartDateNew, uint256 icoEndDateNew, uint256 exchangeRateNew) onlyOwner public {\n            require(icoStartDateNew < icoEndDateNew);\n            icoStartDate = icoStartDateNew;\n            icoEndDate = icoEndDateNew;\n            exchangeRate = exchangeRateNew;\n        }\n        \n        //Stops an ICO.\n        //It will just set the ICO end date to zero and thus it will stop an ICO\n        function stopICO() onlyOwner public{\n            icoEndDate = 0;\n        }\n        \n        //function to check wheter ICO is running or not. \n        //It will return current state of the crowdsale\n        function icoStatus() public view returns(string){\n            if(icoStartDate < now && icoEndDate > now ){\n                return \"ICO is running\";\n            }else if(icoStartDate > now){\n                return \"ICO will start on November 30th 6.00 GMT\";\n            }else{\n                return \"ICO is over\";\n            }\n        }\n        \n        //Function to set ICO Exchange rate. \n        //1 ETH = How many Tokens ?\n        function setICOExchangeRate(uint256 newExchangeRate) onlyOwner public {\n            exchangeRate=newExchangeRate;\n        }\n        \n        //Just in case, owner wants to transfer Tokens from contract to owner address\n        function manualWithdrawToken(uint256 _amount) onlyOwner public {\n            uint256 tokenAmount = _amount.mul(1 ether);\n            _transfer(this, msg.sender, tokenAmount);\n        }\n          \n        //Just in case, owner wants to transfer Ether from contract to owner address\n        function manualWithdrawEther()onlyOwner public{\n            uint256 amount=address(this).balance;\n            address(owner).transfer(amount);\n        }\n        \n        //selfdestruct function. just in case owner decided to destruct this contract.\n        function destructContract()onlyOwner public{\n            selfdestruct(owner);\n        }\n        \n        /**\n         * Change safeguard status on or off\n         *\n         * When safeguard is true, then all the non-owner functions will stop working.\n         * When safeguard is false, then all the functions will resume working back again!\n         */\n        function changeSafeguardStatus() onlyOwner public{\n            if (safeguard == false){\n                safeguard = true;\n            }\n            else{\n                safeguard = false;    \n            }\n        }\n        \n        \n        /*********************************/\n        /* Code for the Air drop of ELSA */\n        /*********************************/\n        \n        /**\n         * Run an Air-Drop\n         *\n         * It requires an array of all the addresses and amount of tokens to distribute\n         * It will only process first 150 recipients. That limit is fixed to prevent gas limit\n         */\n        function airdrop(address[] recipients,uint tokenAmount) public onlyOwner {\n            uint256 addressCount = recipients.length;\n            require(addressCount <= 150);\n            for(uint i = 0; i < addressCount; i++)\n            {\n                  //This will loop through all the recipients and send them the specified tokens\n                  _transfer(this, recipients[i], tokenAmount.mul(1 ether));\n            }\n        }\n}",
  "bytecode": "6003805460ff1990811660121790915560068054821681556009805490921690915560c060405260808190527f456c69736961000000000000000000000000000000000000000000000000000060a09081526200006091600b91906200032e565b506040805180820190915260048082527f454c5341000000000000000000000000000000000000000000000000000000006020909201918252620000a791600c916200032e565b50633b9aca00600d55632cb41780600e556309334830601055635c4ba2c46011556127106012556000601355348015620000e057600080fd5b50600d54600e54600b805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015620001715780601f10620001455761010080835404028352916020019162000171565b820191906000526020600020905b8154815290600101906020018083116200015357829003601f168201915b5050600c8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815295509193509150830182828015620002035780601f10620001d75761010080835404028352916020019162000203565b820191906000526020600020905b815481529060010190602001808311620001e557829003601f168201915b505060008054600160a060020a03191633179055506200023e9150859050670de0b6b3a764000064010000000062000818620002e182021704565b6004556200026383670de0b6b3a764000064010000000062000818620002e182021704565b60058190553060009081526007602052604090208190556004546200029691640100000000620017c66200031b82021704565b336000908152600760209081526040909120919091558251620002c091600191908501906200032e565b508051620002d69060029060208401906200032e565b5050505050620003d3565b600080831515620002f6576000915062000314565b508282028284828115156200030757fe5b04146200031057fe5b8091505b5092915050565b6000828211156200032857fe5b50900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200037157805160ff1916838001178555620003a1565b82800160010185558215620003a1579182015b82811115620003a157825182559160200191906001019062000384565b50620003af929150620003b3565b5090565b620003d091905b80821115620003af5760008155600101620003ba565b90565b61180480620003e36000396000f3006080604052600436106101cc5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146102a8578063095ea7b31461033257806318160ddd1461036a57806323b872dd146103915780632a62738b146103bb578063313ce567146103d05780633ba0b9a9146103fb57806342966c68146104105780634a4c560d146104285780634bec83351461044b578063518ab2a8146104605780635954c8c5146104755780635d22a3521461048a5780636faadc0d146104a257806370a08231146104c057806375ee1908146104e157806379c650681461053657806379cc67901461055a5780637ec69c501461057e5780638da5cb5b146105935780639499e018146105c457806395d89b41146105d9578063a9059cbb146105ee578063b414d4b614610612578063b57dbdc614610633578063bd694af214610648578063c204642c1461065d578063c8e569a8146106b4578063cae9ca51146106c9578063d73019e914610732578063d936547e14610747578063d96e1f7614610768578063dd62ed3e1461077d578063e724529c146107a4578063f2fde38b146107ca578063f868061e146107eb578063fa3eaa4114610803575b600654600090819060ff16156101e157600080fd5b336000908152600f602052604090205460ff16156101fe57600080fd5b60095460ff1615156001141561022c57336000908152600a602052604090205460ff16151561022c57600080fd5b4260105410801561023e575042601154115b151561024957600080fd5b60125461025d90349063ffffffff61081816565b915061027861026b8361084e565b839063ffffffff610a1f16565b60135490915061028e908263ffffffff610a1f16565b60135561029c303383610a2e565b6102a4610bb2565b5050005b3480156102b457600080fd5b506102bd610bef565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102f75781810151838201526020016102df565b50505050905090810190601f1680156103245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561033e57600080fd5b50610356600160a060020a0360043516602435610c7c565b604080519115158252519081900360200190f35b34801561037657600080fd5b5061037f610cbd565b60408051918252519081900360200190f35b34801561039d57600080fd5b50610356600160a060020a0360043581169060243516604435610cc3565b3480156103c757600080fd5b5061037f610d73565b3480156103dc57600080fd5b506103e5610d79565b6040805160ff9092168252519081900360200190f35b34801561040757600080fd5b5061037f610d82565b34801561041c57600080fd5b50610356600435610d88565b34801561043457600080fd5b50610449600160a060020a0360043516610e3b565b005b34801561045757600080fd5b50610449610e9f565b34801561046c57600080fd5b5061037f610ee1565b34801561048157600080fd5b50610449610ee7565b34801561049657600080fd5b50610449600435610f40565b3480156104ae57600080fd5b50610449600435602435604435610f7d565b3480156104cc57600080fd5b5061037f600160a060020a0360043516610fae565b3480156104ed57600080fd5b506040805160206004803580820135838102808601850190965280855261044995369593946024949385019291829185019084908082843750949750610fc09650505050505050565b34801561054257600080fd5b50610449600160a060020a036004351660243561108b565b34801561056657600080fd5b50610356600160a060020a0360043516602435611176565b34801561058a57600080fd5b506104496112c6565b34801561059f57600080fd5b506105a8611307565b60408051600160a060020a039092168252519081900360200190f35b3480156105d057600080fd5b50610449611316565b3480156105e557600080fd5b506102bd61133b565b3480156105fa57600080fd5b50610356600160a060020a0360043516602435611393565b34801561061e57600080fd5b50610356600160a060020a03600435166113a9565b34801561063f57600080fd5b506103566113be565b34801561065457600080fd5b506103566113c7565b34801561066957600080fd5b50604080516020600480358082013583810280860185019096528085526104499536959394602494938501929182918501908490808284375094975050933594506113d09350505050565b3480156106c057600080fd5b5061044961144f565b3480156106d557600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610356948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061146d9650505050505050565b34801561073e57600080fd5b5061037f61159a565b34801561075357600080fd5b50610356600160a060020a03600435166115a0565b34801561077457600080fd5b506102bd6115b5565b34801561078957600080fd5b5061037f600160a060020a03600435811690602435166116af565b3480156107b057600080fd5b50610449600160a060020a036004351660243515156116cc565b3480156107d657600080fd5b50610449600160a060020a0360043516611747565b3480156107f757600080fd5b5061044960043561178d565b34801561080f57600080fd5b5061037f6117a9565b60008083151561082b5760009150610847565b5082820282848281151561083b57fe5b041461084357fe5b8091505b5092915050565b6000426010541080156108675750426010546201518001115b156108955761088e606461088284602d63ffffffff61081816565b9063ffffffff6117af16565b9050610a1a565b4260105462015180011080156108b157504260105462093a8001115b156108cc5761088e606461088284602363ffffffff61081816565b4260105462093a80011080156108e85750426010546212750001115b156109035761088e606461088284601e63ffffffff61081816565b42601054621275000110801561091f575042601054621baf8001115b1561093a5761088e606461088284601963ffffffff61081816565b42601054621baf80011080156109565750426010546224ea0001115b156109715761088e606461088284601463ffffffff61081816565b426010546224ea000110801561098d575042601054622e248001115b156109a85761088e606461088284600f63ffffffff61081816565b42601054622e2480011080156109c457504260105462375f0001115b156109df5761088e606461088284600a63ffffffff61081816565b4260105462375f00011080156109fb5750426010546240998001115b15610a165761088e606461088284600563ffffffff61081816565b5060005b919050565b60008282018381101561084357fe5b60065460ff1615610a3e57600080fd5b600160a060020a0382161515610a5357600080fd5b600160a060020a038316600090815260076020526040902054811115610a7857600080fd5b600160a060020a038216600090815260076020526040902054610aa1818363ffffffff610a1f16565b1015610aac57600080fd5b600160a060020a0383166000908152600f602052604090205460ff1615610ad257600080fd5b600160a060020a0382166000908152600f602052604090205460ff1615610af857600080fd5b600160a060020a038316600090815260076020526040902054610b21908263ffffffff6117c616565b600160a060020a038085166000908152600760205260408082209390935590841681522054610b56908263ffffffff610a1f16565b600160a060020a0380841660008181526007602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008054604051600160a060020a03909116913480156108fc02929091818181858888f19350505050158015610bec573d6000803e3d6000fd5b50565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610c745780601f10610c4957610100808354040283529160200191610c74565b820191906000526020600020905b815481529060010190602001808311610c5757829003601f168201915b505050505081565b60065460009060ff1615610c8f57600080fd5b50336000908152600860209081526040808320600160a060020a039590951683529390529190912055600190565b60045481565b60065460009060ff1615610cd657600080fd5b600160a060020a0384166000908152600860209081526040808320338452909152902054821115610d0657600080fd5b600160a060020a0384166000908152600860209081526040808320338452909152902054610d3a908363ffffffff6117c616565b600160a060020a0385166000908152600860209081526040808320338452909152902055610d69848484610a2e565b5060019392505050565b60115481565b60035460ff1681565b60125481565b60065460009060ff1615610d9b57600080fd5b33600090815260076020526040902054821115610db757600080fd5b33600090815260076020526040902054610dd7908363ffffffff6117c616565b33600090815260076020526040902055600454610dfa908363ffffffff6117c616565b60045560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2506001919050565b600054600160a060020a03163314610e5257600080fd5b60095460ff161515600114610e6657600080fd5b600160a060020a0381161515610e7b57600080fd5b600160a060020a03166000908152600a60205260409020805460ff19166001179055565b600054600160a060020a03163314610eb657600080fd5b60065460ff161515610ed4576006805460ff19166001179055610edf565b6006805460ff191690555b565b60135481565b60008054600160a060020a03163314610eff57600080fd5b5060008054604051303192600160a060020a03909216916108fc841502918491818181858888f19350505050158015610f3c573d6000803e3d6000fd5b5050565b60008054600160a060020a03163314610f5857600080fd5b610f7082670de0b6b3a764000063ffffffff61081816565b9050610f3c303383610a2e565b600054600160a060020a03163314610f9457600080fd5b818310610fa057600080fd5b601092909255601155601255565b60076020526000908152604090205481565b600080548190600160a060020a03163314610fda57600080fd5b60095460ff161515600114610fee57600080fd5b82519150609682111561100057600080fd5b5060005b8181101561108657828181518110151561101a57fe5b60209081029091010151600160a060020a0316151561103857600080fd5b6001600a6000858481518110151561104c57fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff1916911515919091179055600101611004565b505050565b600054600160a060020a031633146110a257600080fd5b600160a060020a0382166000908152600760205260409020546110cb908263ffffffff610a1f16565b600160a060020a0383166000908152600760205260409020556004546110f7908263ffffffff610a1f16565b60045560408051828152905130916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3604080518281529051600160a060020a0384169130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60065460009060ff161561118957600080fd5b600160a060020a0383166000908152600760205260409020548211156111ae57600080fd5b600160a060020a03831660009081526008602090815260408083203384529091529020548211156111de57600080fd5b600160a060020a038316600090815260076020526040902054611207908363ffffffff6117c616565b600160a060020a0384166000908152600760209081526040808320939093556008815282822033835290522054611244908363ffffffff6117c616565b600160a060020a038416600090815260086020908152604080832033845290915290205560045461127b908363ffffffff6117c616565b600455604080518381529051600160a060020a038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250600192915050565b600054600160a060020a031633146112dd57600080fd5b60095460ff1615156112fb576009805460ff19166001179055610edf565b6009805460ff19169055565b600054600160a060020a031681565b600054600160a060020a0316331461132d57600080fd5b600054600160a060020a0316ff5b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015610c745780601f10610c4957610100808354040283529160200191610c74565b60006113a0338484610a2e565b50600192915050565b600f6020526000908152604090205460ff1681565b60065460ff1681565b60095460ff1681565b600080548190600160a060020a031633146113ea57600080fd5b8351915060968211156113fc57600080fd5b5060005b818110156114495761144130858381518110151561141a57fe5b6020908102909101015161143c86670de0b6b3a764000063ffffffff61081816565b610a2e565b600101611400565b50505050565b600054600160a060020a0316331461146657600080fd5b6000601155565b600654600090819060ff161561148257600080fd5b508361148e8185610c7c565b15611592576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b8381101561152657818101518382015260200161150e565b50505050905090810190601f1680156115535780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561157557600080fd5b505af1158015611589573d6000803e3d6000fd5b50505050600191505b509392505050565b60105481565b600a6020526000908152604090205460ff1681565b6060426010541080156115c9575042601154115b15611608575060408051808201909152600e81527f49434f2069732072756e6e696e6700000000000000000000000000000000000060208201526116ac565b42601054111561167657606060405190810160405280602881526020017f49434f2077696c6c207374617274206f6e204e6f76656d62657220333074682081526020017f362e303020474d5400000000000000000000000000000000000000000000000081525090506116ac565b5060408051808201909152600b81527f49434f206973206f76657200000000000000000000000000000000000000000060208201525b90565b600860209081526000928352604080842090915290825290205481565b600054600160a060020a031633146116e357600080fd5b600160a060020a0382166000818152600f6020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b600054600160a060020a0316331461175e57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031633146117a457600080fd5b601255565b60055481565b60008082848115156117bd57fe5b04949350505050565b6000828211156117d257fe5b509003905600a165627a7a72305820b8a971bdfafa6a4c17b5417dd2d0ce84bf50cd0d3356c60258ddd32770dfaded0029"
}