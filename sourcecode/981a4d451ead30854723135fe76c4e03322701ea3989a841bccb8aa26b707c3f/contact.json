{
  "address": "0x27ce3baa5a759feaa1745bb01c4a1a72e0fbfd42",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MonLockupFund",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-09\n*/\n\npragma solidity 0.4.18;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Ownable {\n    address public owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ncontract ERC20Interface {\n    // Send _value amount of tokens to address _to\n    function transfer(address _to, uint256 _value) returns (bool success);\n    // Get the account balance of another account with address _owner\n    function balanceOf(address _owner) constant returns (uint256 balance);\n}\n\ncontract MonLockupFund is Ownable {\n    using SafeMath for uint256;\n    ERC20Interface token;\n\n    address public constant tokenAddress = 0x6242a2762F5a4DB46ef8132398CB6391519aBe21;\n    address public wallet_A = 0xC7bac67FbE48a8e1A0d37e6d6F0d3e34582be40f;\n    address public wallet_B = 0x2061cAC4460A3DE836728487e4A092b811b2fdA7;\n    address public wallet_C = 0x60aF1A04244868abc812a8C854a62598E7f43Fcd;\n    uint256 public lockupDate = 1557360000;\n    uint256 public initLockupAmt = 150000000e18;\n\n    function MonLockupFund () public {\n        token = ERC20Interface(tokenAddress);\n    }\n\n    function setLockupAmt(uint256 _amt) public onlyOwner {\n        initLockupAmt = _amt;\n    }\n\n    function setLockupDate(uint _date) public onlyOwner {\n        lockupDate = _date;\n    }\n\n    function setWallet(address[] _dest) public onlyOwner {\n        wallet_A = _dest[0];\n        wallet_B = _dest[1];\n        wallet_C = _dest[2];\n    }\n\n    function withdraw() public {\n        uint256 currBalance = token.balanceOf(this);\n        uint256 currLocking = getCurrLocking();\n\n        require(currBalance > currLocking);\n        uint256 available = currBalance.sub(currLocking);\n\n        token.transfer(wallet_A, available.mul(60).div(100));\n        token.transfer(wallet_B, available.mul(30).div(100));\n        token.transfer(wallet_C, available.mul(10).div(100));\n    }\n\n    function getCurrLocking()\n        public\n\t\tview\n        returns (uint256)\n\t{\n        uint256 diff = (now - lockupDate) / 2592000; // month diff\n        uint256 partition = 30;\n\n        if (diff >= partition) \n            return 0;\n        else\n            return initLockupAmt.mul(partition-diff).div(partition);\n    }\n\n    function close() public onlyOwner {\n        selfdestruct(owner);\n    }\n}",
  "bytecode": "606060405273c7bac67fbe48a8e1a0d37e6d6f0d3e34582be40f600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550732061cac4460a3de836728487e4a092b811b2fda7600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507360af1a04244868abc812a8c854a62598e7f43fcd600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550635cd36d806005556a7c13bc4b2c133c56000000600655341561012557600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550736242a2762f5a4db46ef8132398cb6391519abe21600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e74806101c96000396000f3006060604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e2d9627146100d557806323d30ee1146100fe57806337cbafdf146101585780633ccfd60b1461017b57806343d726d614610190578063634f1ed8146101a5578063840d6d18146101fa57806388ce46c51461024f5780638da5cb5b146102785780639d76ea58146102cd578063b5f09a3914610322578063c42c55ed1461034b578063db7cb4c4146103a0578063f2fde38b146103c3575b600080fd5b34156100e057600080fd5b6100e86103fc565b6040518082815260200191505060405180910390f35b341561010957600080fd5b610156600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050610402565b005b341561016357600080fd5b610179600480803590602001909190505061056b565b005b341561018657600080fd5b61018e6105d0565b005b341561019b57600080fd5b6101a3610a7c565b005b34156101b057600080fd5b6101b8610b11565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561020557600080fd5b61020d610b37565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561025a57600080fd5b610262610b5d565b6040518082815260200191505060405180910390f35b341561028357600080fd5b61028b610bbe565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102d857600080fd5b6102e0610be3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561032d57600080fd5b610335610bfb565b6040518082815260200191505060405180910390f35b341561035657600080fd5b61035e610c01565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103ab57600080fd5b6103c16004808035906020019091905050610c27565b005b34156103ce57600080fd5b6103fa600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c8c565b005b60065481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561045d57600080fd5b80600081518110151561046c57fe5b90602001906020020151600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060018151811015156104c557fe5b90602001906020020151600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600281518110151561051e57fe5b90602001906020020151600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105c657600080fd5b8060058190555050565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561069a57600080fd5b6102c65a03f115156106ab57600080fd5b5050506040518051905092506106bf610b5d565b915081831115156106cf57600080fd5b6106e28284610de190919063ffffffff16565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661076c606461075e603c87610dfa90919063ffffffff16565b610e2d90919063ffffffff16565b6000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156107f957600080fd5b6102c65a03f1151561080a57600080fd5b5050506040518051905050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661089d606461088f601e87610dfa90919063ffffffff16565b610e2d90919063ffffffff16565b6000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561092a57600080fd5b6102c65a03f1151561093b57600080fd5b5050506040518051905050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166109ce60646109c0600a87610dfa90919063ffffffff16565b610e2d90919063ffffffff16565b6000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610a5b57600080fd5b6102c65a03f11515610a6c57600080fd5b5050506040518051905050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ad757600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600062278d006005544203811515610b7457fe5b049150601e90508082101515610b8d5760009250610bb9565b610bb681610ba8848403600654610dfa90919063ffffffff16565b610e2d90919063ffffffff16565b92505b505090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b736242a2762f5a4db46ef8132398cb6391519abe2181565b60055481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c8257600080fd5b8060068190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ce757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610d2357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000828211151515610def57fe5b818303905092915050565b60008082840290506000841480610e1b5750828482811515610e1857fe5b04145b1515610e2357fe5b8091505092915050565b6000808284811515610e3b57fe5b04905080915050929150505600a165627a7a723058209e305ca87807667679a955c2212dbe96fa91fc6dfd918ccf92cbc557deca7c4a0029"
}