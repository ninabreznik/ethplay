{
  "address": "0xb0a66227b50810df87ce4b152920d22a716b9b1d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "INHERITANCEToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-13\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() {\n        owner = msg.sender;\n    }\n\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) onlyOwner {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\ncontract usingINHERITANCEConsts {\n    uint constant TOKEN_DECIMALS = 18;\n    uint8 constant TOKEN_DECIMALS_UINT8 = 18;\n    uint constant TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS;\n\n    uint constant TEAM_TOKENS =   250000000 * TOKEN_DECIMAL_MULTIPLIER;\n    uint constant BOUNTY_TOKENS = 250000000 * TOKEN_DECIMAL_MULTIPLIER;\n    uint constant PREICO_TOKENS = 250000000 * TOKEN_DECIMAL_MULTIPLIER;\n    uint constant MINIMAL_PURCHASE = 0.1 ether;\n\n    address constant TEAM_ADDRESS = 0x78cd8f794686ee8f6644447e961ef52776edf0cb;\n    address constant BOUNTY_ADDRESS = 0xff823588500d3ecd7777a1cfa198958df4deea11;\n    address constant PREICO_ADDRESS = 0xff823588500d3ecd7777a1cfa198958df4deea11;\n    address constant COLD_WALLET = 0x439415b03708bde585856b46666f34b65af6a5c3;\n\n    string constant TOKEN_NAME = \"INHERITANCE\";\n    bytes32 constant TOKEN_SYMBOL = \"IEI\";\n}\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) balances;\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) returns (bool) {\n        require(_to != address(0));\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) allowed;\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n        require(_to != address(0));\n\n        var _allowance = allowed[_from][msg.sender];\n\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n        // require (_value <= _allowance);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) returns (bool) {\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval(address _spender, uint _addedValue) returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        }\n        else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n    event Mint(address indexed to, uint256 amount);\n\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Mint(_to, _amount);\n        Transfer(0x0, _to, _amount);\n        return true;\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     * @return True if the operation was successful.\n     */\n    function finishMinting() onlyOwner returns (bool) {\n        mintingFinished = true;\n        MintFinished();\n        return true;\n    }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value > 0);\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n}\n\ncontract INHERITANCEToken is usingINHERITANCEConsts, MintableToken, BurnableToken {\n    /**\n     * @dev Pause token transfer. After successfully finished crowdsale it becomes true.\n     */\n    bool public paused = true;\n    /**\n     * @dev Accounts who can transfer token even if paused. Works only during crowdsale.\n     */\n    mapping(address => bool) excluded;\n\n    function name() constant public returns (string _name) {\n        return TOKEN_NAME;\n    }\n\n    function symbol() constant public returns (bytes32 _symbol) {\n        return TOKEN_SYMBOL;\n    }\n\n    function decimals() constant public returns (uint8 _decimals) {\n        return TOKEN_DECIMALS_UINT8;\n    }\n\n    function crowdsaleFinished() onlyOwner {\n        paused = false;\n        finishMinting();\n    }\n\n    function addExcluded(address _toExclude) onlyOwner {\n        excluded[_toExclude] = true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n        require(!paused || excluded[_from]);\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function transfer(address _to, uint256 _value) returns (bool) {\n        require(!paused || excluded[msg.sender]);\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * @dev Burn tokens from the specified address.\n     * @param _from     address The address which you want to burn tokens from.\n     * @param _value    uint    The amount of tokens to be burned.\n     */\n    function burnFrom(address _from, uint256 _value) returns (bool) {\n        require(_value > 0);\n        var allowance = allowed[_from][msg.sender];\n        balances[_from] = balances[_from].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        allowed[_from][msg.sender] = allowance.sub(_value);\n        Burn(_from, _value);\n        return true;\n    }\n}\ncontract INHERITANCERateProviderI {\n    /**\n     * @dev Calculate actual rate using the specified parameters.\n     * @param buyer     Investor (buyer) address.\n     * @param totalSold Amount of sold tokens.\n     * @param amountWei Amount of wei to purchase.\n     * @return ETH to Token rate.\n     */\n    function getRate(address buyer, uint totalSold, uint amountWei) public constant returns (uint);\n\n    /**\n     * @dev rate scale (or divider), to support not integer rates.\n     * @return Rate divider.\n     */\n    function getRateScale() public constant returns (uint);\n\n    /**\n     * @return Absolute base rate.\n     */\n    function getBaseRate() public constant returns (uint);\n}\n\ncontract INHERITANCERateProvider is usingINHERITANCEConsts, INHERITANCERateProviderI, Ownable {\n    // rate calculate accuracy\n    uint constant RATE_SCALE = 1000000;\n    uint constant STEP_30 = 10000000 * TOKEN_DECIMAL_MULTIPLIER;\n    uint constant STEP_20 = 50000000 * TOKEN_DECIMAL_MULTIPLIER;\n    uint constant STEP_10 = 1000000000 * TOKEN_DECIMAL_MULTIPLIER;\n    uint constant RATE_30 = 130000 * RATE_SCALE;\n    uint constant RATE_20 = 120000 * RATE_SCALE;\n    uint constant RATE_10 = 110000 * RATE_SCALE;\n    uint constant BASE_RATE = 100000 * RATE_SCALE;\n\n    struct ExclusiveRate {\n        // be careful, accuracies this about 15 minutes\n        uint32 workUntil;\n        // exclusive rate or 0\n        uint rate;\n        // rate bonus percent, which will be divided by 1000 or 0\n        uint16 bonusPercent1000;\n        // flag to check, that record exists\n        bool exists;\n    }\n\n    mapping(address => ExclusiveRate) exclusiveRate;\n\n    function getRateScale() public constant returns (uint) {\n        return RATE_SCALE;\n    }\n\n    function getBaseRate() public constant returns (uint) {\n        return BASE_RATE;\n    }\n\n    function getRate(address buyer, uint totalSold, uint amountWei) public constant returns (uint) {\n        uint rate;\n        // apply sale\n        if (totalSold < STEP_30) {\n            rate = RATE_30;\n        }\n        else if (totalSold < STEP_20) {\n            rate = RATE_20;\n        }\n        else if (totalSold < STEP_10) {\n            rate = RATE_10;\n        }\n        else {\n            rate = BASE_RATE;\n        }\n\n        // apply bonus for amount\n        if (amountWei >= 100 ether) {\n            rate += rate * 100 / 100;\n        }\n        else if (amountWei >= 50 ether) {\n            rate += rate * 100 / 100;\n        }\n        else if (amountWei >= 10 ether) {\n            rate += rate * 300 / 100;\n        }\n        else if (amountWei >= 4 ether) {\n            rate += rate * 100 / 100;\n        }\n        else if (amountWei >= 2 ether) {\n            rate += rate * 40 / 100;\n        }\n        else if (amountWei >= 1 ether) {\n            rate += rate * 150 / 1000;\n        }\n\n        ExclusiveRate memory eRate = exclusiveRate[buyer];\n        if (eRate.exists && eRate.workUntil >= now) {\n            if (eRate.rate != 0) {\n                rate = eRate.rate;\n            }\n            rate += rate * eRate.bonusPercent1000 / 1000;\n        }\n        return rate;\n    }\n\n    function setExclusiveRate(address _investor, uint _rate, uint16 _bonusPercent1000, uint32 _workUntil) onlyOwner {\n        exclusiveRate[_investor] = ExclusiveRate(_workUntil, _rate, _bonusPercent1000, true);\n    }\n\n    function removeExclusiveRate(address _investor) onlyOwner {\n        delete exclusiveRate[_investor];\n    }\n}\n/**\n * @title Crowdsale \n * @dev Crowdsale is a base contract for managing a token crowdsale.\n *\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet \n * as they arrive.\n */\ncontract Crowdsale {\n    using SafeMath for uint;\n\n    // The token being sold\n    MintableToken public token;\n\n    // start and end timestamps where investments are allowed (both inclusive)\n    uint32 internal startTime;\n    uint32 internal endTime;\n\n    // address where funds are collected\n    address public wallet;\n\n    // amount of raised money in wei\n    uint public weiRaised;\n\n    /**\n     * @dev Amount of already sold tokens.\n     */\n    uint public soldTokens;\n\n    /**\n     * @dev Maximum amount of tokens to mint.\n     */\n    uint internal hardCap;\n\n    /**\n     * event for token purchase logging\n     * @param purchaser who paid for the tokens\n     * @param beneficiary who got the tokens\n     * @param value weis paid for purchase\n     * @param amount amount of tokens purchased\n     */\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint value, uint amount);\n\n    function Crowdsale(uint _startTime, uint _endTime, uint _hardCap, address _wallet) {\n        require(_endTime >= _startTime);\n        require(_wallet != 0x0);\n        require(_hardCap > 0);\n\n        token = createTokenContract();\n        startTime = uint32(_startTime);\n        endTime = uint32(_endTime);\n        hardCap = _hardCap;\n        wallet = _wallet;\n    }\n\n    // creates the token to be sold.\n    // override this method to have crowdsale of a specific mintable token.\n    function createTokenContract() internal returns (MintableToken) {\n        return new MintableToken();\n    }\n\n    /**\n     * @dev this method might be overridden for implementing any sale logic.\n     * @return Actual rate.\n     */\n    function getRate(uint amount) internal constant returns (uint);\n\n    function getBaseRate() internal constant returns (uint);\n\n    /**\n     * @dev rate scale (or divider), to support not integer rates.\n     * @return Rate divider.\n     */\n    function getRateScale() internal constant returns (uint) {\n        return 1;\n    }\n\n    // fallback function can be used to buy tokens\n    function() payable {\n        buyTokens(msg.sender, msg.value);\n    }\n\n    // low level token purchase function\n    function buyTokens(address beneficiary, uint amountWei) internal {\n        require(beneficiary != 0x0);\n\n        // total minted tokens\n        uint totalSupply = token.totalSupply();\n\n        // actual token minting rate (with considering bonuses and discounts)\n        uint actualRate = getRate(amountWei);\n        uint rateScale = getRateScale();\n\n        require(validPurchase(amountWei, actualRate, totalSupply));\n\n        // calculate token amount to be created\n        uint tokens = amountWei.mul(actualRate).div(rateScale);\n\n        // update state\n        weiRaised = weiRaised.add(amountWei);\n        soldTokens = soldTokens.add(tokens);\n\n        token.mint(beneficiary, tokens);\n        TokenPurchase(msg.sender, beneficiary, amountWei, tokens);\n\n        forwardFunds(amountWei);\n    }\n\n    // send ether to the fund collection wallet\n    // override to create custom fund forwarding mechanisms\n    function forwardFunds(uint amountWei) internal {\n        wallet.transfer(amountWei);\n    }\n\n    /**\n     * @dev Check if the specified purchase is valid.\n     * @return true if the transaction can buy tokens\n     */\n    function validPurchase(uint _amountWei, uint _actualRate, uint _totalSupply) internal constant returns (bool) {\n        bool withinPeriod = now >= startTime && now <= endTime;\n        bool nonZeroPurchase = _amountWei != 0;\n        bool hardCapNotReached = _totalSupply <= hardCap;\n\n        return withinPeriod && nonZeroPurchase && hardCapNotReached;\n    }\n\n    /**\n     * @dev Because of discount hasEnded might be true, but validPurchase returns false.\n     * @return true if crowdsale event has ended\n     */\n    function hasEnded() public constant returns (bool) {\n        return now > endTime || token.totalSupply() > hardCap;\n    }\n\n    /**\n     * @return true if crowdsale event has started\n     */\n    function hasStarted() public constant returns (bool) {\n        return now >= startTime;\n    }\n}\n\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\n    using SafeMath for uint256;\n\n    bool public isFinalized = false;\n\n    event Finalized();\n\n    function FinalizableCrowdsale(uint _startTime, uint _endTime, uint _hardCap, address _wallet)\n            Crowdsale(_startTime, _endTime, _hardCap, _wallet) {\n    }\n\n    /**\n     * @dev Must be called after crowdsale ends, to do some extra finalization\n     * work. Calls the contract's finalization function.\n     */\n    function finalize() onlyOwner notFinalized {\n        require(hasEnded());\n\n        finalization();\n        Finalized();\n\n        isFinalized = true;\n    }\n\n    /**\n     * @dev Can be overriden to add finalization logic. The overriding function\n     * should call super.finalization() to ensure the chain of finalization is\n     * executed entirely.\n     */\n    function finalization() internal {\n    }\n\n    modifier notFinalized() {\n        require(!isFinalized);\n        _;\n    }\n}\n\ncontract INHERITANCECrowdsale is usingINHERITANCEConsts, FinalizableCrowdsale {\n    INHERITANCERateProviderI public rateProvider;\n\n    function INHERITANCECrowdsale(\n            uint _startTime,\n            uint _endTime,\n            uint _hardCapTokens\n    )\n            FinalizableCrowdsale(_startTime, _endTime, _hardCapTokens * TOKEN_DECIMAL_MULTIPLIER, COLD_WALLET) {\n\n        token.mint(TEAM_ADDRESS, TEAM_TOKENS);\n        token.mint(BOUNTY_ADDRESS, BOUNTY_TOKENS);\n        token.mint(PREICO_ADDRESS, PREICO_TOKENS);\n\n        INHERITANCEToken(token).addExcluded(TEAM_ADDRESS);\n        INHERITANCEToken(token).addExcluded(BOUNTY_ADDRESS);\n        INHERITANCEToken(token).addExcluded(PREICO_ADDRESS);\n\n        INHERITANCERateProvider provider = new INHERITANCERateProvider();\n        provider.transferOwnership(owner);\n        rateProvider = provider;\n    }\n\n    /**\n     * @dev override token creation to integrate with MyWill token.\n     */\n    function createTokenContract() internal returns (MintableToken) {\n        return new INHERITANCEToken();\n    }\n\n    /**\n     * @dev override getRate to integrate with rate provider.\n     */\n    function getRate(uint _value) internal constant returns (uint) {\n        return rateProvider.getRate(msg.sender, soldTokens, _value);\n    }\n\n    function getBaseRate() internal constant returns (uint) {\n        return rateProvider.getRate(msg.sender, soldTokens, MINIMAL_PURCHASE);\n    }\n\n    /**\n     * @dev override getRateScale to integrate with rate provider.\n     */\n    function getRateScale() internal constant returns (uint) {\n        return rateProvider.getRateScale();\n    }\n\n    /**\n     * @dev Admin can set new rate provider.\n     * @param _rateProviderAddress New rate provider.\n     */\n    function setRateProvider(address _rateProviderAddress) onlyOwner {\n        require(_rateProviderAddress != 0);\n        rateProvider = INHERITANCERateProviderI(_rateProviderAddress);\n    }\n\n    /**\n     * @dev Admin can move end time.\n     * @param _endTime New end time.\n     */\n    function setEndTime(uint _endTime) onlyOwner notFinalized {\n        require(_endTime > startTime);\n        endTime = uint32(_endTime);\n    }\n\n    function setHardCap(uint _hardCapTokens) onlyOwner notFinalized {\n        require(_hardCapTokens * TOKEN_DECIMAL_MULTIPLIER > hardCap);\n        hardCap = _hardCapTokens * TOKEN_DECIMAL_MULTIPLIER;\n    }\n\n    function setStartTime(uint _startTime) onlyOwner notFinalized {\n        require(_startTime < endTime);\n        startTime = uint32(_startTime);\n    }\n\n    function addExcluded(address _address) onlyOwner notFinalized {\n        INHERITANCEToken(token).addExcluded(_address);\n    }\n\n    function validPurchase(uint _amountWei, uint _actualRate, uint _totalSupply) internal constant returns (bool) {\n        if (_amountWei < MINIMAL_PURCHASE) {\n            return false;\n        }\n        return super.validPurchase(_amountWei, _actualRate, _totalSupply);\n    }\n\n    function finalization() internal {\n        super.finalization();\n        token.finishMinting();\n        INHERITANCEToken(token).crowdsaleFinished();\n        token.transferOwnership(owner);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toExclude\",\"type\":\"address\"}],\"name\":\"addExcluded\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"crowdsaleFinished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "606060405260038054750100000000000000000000000000000000000000000060a060020a61ffff021990911617600160a060020a03191633600160a060020a0316179055610efe806100536000396000f30060606040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461012157806306fdde0314610148578063095ea7b3146101d257806318160ddd146101f457806323b872dd14610219578063313ce5671461024157806340c10f191461026a57806342966c681461028c5780635c975abb146102a457806366188463146102b757806370a08231146102d957806379cc6790146102f85780637d64bcb41461031a5780638da5cb5b1461032d57806395d89b411461035c578063a9059cbb1461036f578063a932157314610391578063d73dd623146103b0578063dd62ed3e146103d2578063ece84fd5146103f7578063f2fde38b1461040a575b600080fd5b341561012c57600080fd5b610134610429565b604051901515815260200160405180910390f35b341561015357600080fd5b61015b61044a565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561019757808201518382015260200161017f565b50505050905090810190601f1680156101c45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101dd57600080fd5b610134600160a060020a036004351660243561048b565b34156101ff57600080fd5b610207610531565b60405190815260200160405180910390f35b341561022457600080fd5b610134600160a060020a0360043581169060243516604435610537565b341561024c57600080fd5b61025461059b565b60405160ff909116815260200160405180910390f35b341561027557600080fd5b610134600160a060020a03600435166024356105a0565b341561029757600080fd5b6102a26004356106be565b005b34156102af57600080fd5b610134610762565b34156102c257600080fd5b610134600160a060020a0360043516602435610784565b34156102e457600080fd5b610207600160a060020a036004351661087e565b341561030357600080fd5b610134600160a060020a0360043516602435610899565b341561032557600080fd5b610134610997565b341561033857600080fd5b610340610a1c565b604051600160a060020a03909116815260200160405180910390f35b341561036757600080fd5b610207610a2b565b341561037a57600080fd5b610134600160a060020a0360043516602435610a4f565b341561039c57600080fd5b6102a2600160a060020a0360043516610ab1565b34156103bb57600080fd5b610134600160a060020a0360043516602435610af0565b34156103dd57600080fd5b610207600160a060020a0360043581169060243516610b94565b341561040257600080fd5b6102a2610bbf565b341561041557600080fd5b6102a2600160a060020a0360043516610c04565b60035474010000000000000000000000000000000000000000900460ff1681565b610452610ec0565b60408051908101604052600b81527f494e4845524954414e43450000000000000000000000000000000000000000006020820152905090565b60008115806104bd5750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b15156104c857600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b6003546000907501000000000000000000000000000000000000000000900460ff16158061057d5750600160a060020a03841660009081526004602052604090205460ff165b151561058857600080fd5b610593848484610c9f565b949350505050565b601290565b60035460009033600160a060020a039081169116146105be57600080fd5b60035474010000000000000000000000000000000000000000900460ff16156105e657600080fd5b6000546105f9908363ffffffff610dc916565b6000908155600160a060020a038416815260016020526040902054610624908363ffffffff610dc916565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a282600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b60008082116106cc57600080fd5b5033600160a060020a0381166000908152600160205260409020546106f19083610dd8565b600160a060020a0382166000908152600160205260408120919091555461071e908363ffffffff610dd816565b600055600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b6003547501000000000000000000000000000000000000000000900460ff1681565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156107e157600160a060020a033381166000908152600260209081526040808320938816835292905290812055610818565b6107f1818463ffffffff610dd816565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b6000808083116108a857600080fd5b50600160a060020a038084166000818152600260209081526040808320339095168352938152838220549282526001905291909120546108ee908463ffffffff610dd816565b600160a060020a0385166000908152600160205260408120919091555461091b908463ffffffff610dd816565b60005561092e818463ffffffff610dd816565b600160a060020a038086166000818152600260209081526040808320339095168352939052829020929092557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59085905190815260200160405180910390a25060019392505050565b60035460009033600160a060020a039081169116146109b557600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600354600160a060020a031681565b7f494549000000000000000000000000000000000000000000000000000000000090565b6003546000907501000000000000000000000000000000000000000000900460ff161580610a955750600160a060020a03331660009081526004602052604090205460ff165b1515610aa057600080fd5b610aaa8383610dea565b9392505050565b60035433600160a060020a03908116911614610acc57600080fd5b600160a060020a03166000908152600460205260409020805460ff19166001179055565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610b28908363ffffffff610dc916565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610bda57600080fd5b6003805475ff00000000000000000000000000000000000000000019169055610c01610997565b50565b60035433600160a060020a03908116911614610c1f57600080fd5b600160a060020a0381161515610c3457600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080600160a060020a0384161515610cb757600080fd5b50600160a060020a03808516600081815260026020908152604080832033909516835293815283822054928252600190529190912054610cfd908463ffffffff610dd816565b600160a060020a038087166000908152600160205260408082209390935590861681522054610d32908463ffffffff610dc916565b600160a060020a038516600090815260016020526040902055610d5b818463ffffffff610dd816565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b600082820183811015610aaa57fe5b600082821115610de457fe5b50900390565b6000600160a060020a0383161515610e0157600080fd5b600160a060020a033316600090815260016020526040902054610e2a908363ffffffff610dd816565b600160a060020a033381166000908152600160205260408082209390935590851681522054610e5f908363ffffffff610dc916565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b602060405190810160405260008152905600a165627a7a72305820c49729a56709343ac47d1061c07734020608b110e3e5876280376c0ce27bf9150029"
}