{
  "address": "0x03f839d3c0857202691f390c2f8723accd738286",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "XgoldCrowdsaleToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-13\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n\n    function balanceOf(address who) public constant returns (uint256);\n\n    function transfer(address to, uint256 value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n    mapping(address => uint256) balances;\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract StandardToken is ERC20, BasicToken {\n    mapping(address => mapping(address => uint256)) allowed;\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        var _allowance = allowed[_from][msg.sender];\n\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n\n\ncontract Ownable {\n    address public owner;\n\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n\n\ncontract MintableToken is StandardToken, Ownable {\n    event Mint(address indexed to, uint256 amount);\n\n    event MintFinished();\n\n\n    bool public mintingFinished = false;\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Mint(_to, _amount);\n        return true;\n    }\n\n    function destroy(uint256 _amount, address destroyer) public onlyOwner {\n        uint256 myBalance = balances[destroyer];\n        if (myBalance > _amount) {\n            totalSupply = totalSupply.sub(_amount);\n            balances[destroyer] = myBalance.sub(_amount);\n        }\n        else {\n            if (myBalance != 0) totalSupply = totalSupply.sub(myBalance);\n            balances[destroyer] = 0;\n        }\n    }\n\n    function finishMinting() public onlyOwner returns (bool) {\n        mintingFinished = true;\n        MintFinished();\n        return true;\n    }\n\n    function getTotalSupply() public constant returns (uint256){\n        return totalSupply;\n    }\n}\n\n\ncontract Crowdsale is Ownable {\n    using SafeMath for uint256;\n    // The token being sold\n    XgoldCrowdsaleToken public token;\n    // address where funds are collected\n    address public wallet;\n    // amount of raised money in wei\n    uint256 public weiRaised;\n\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount, uint mytime);\n\n    function Crowdsale() public {\n        token = createTokenContract();\n        wallet = msg.sender;\n    }\n\n    function setNewWallet(address newWallet) public onlyOwner {\n        require(newWallet != 0x0);\n        wallet = newWallet;\n    }\n\n    function createTokenContract() internal returns (XgoldCrowdsaleToken) {\n        return new XgoldCrowdsaleToken();\n    }\n    // fallback function can be used to buy tokens\n    function() public payable {\n        buyTokens(msg.sender);\n    }\n \n    uint time0 = 1513296000; //  15-Dec-17 00:00:00 UTC\n    uint time1 = 1515369600; // 08-Jan-18 00:00:00 UTC\n    uint time2 = 1517788800; // 05-Feb-18 00:00:00 UTC\n    uint time3 = 1520208000; // 05-Mar-18 00:00:00 UTC\n    uint time4 = 1522627200; //  02-Apr-18 00:00:00 UTC\n    uint time5 = 1525046400; //  30-Apr-18 00:00:00 UTC\n    uint time6 = 1527465600; //   28-May-18 00:00:00 UTC\n    uint time7 = 1544486400; //  11-Dec-18 00:00:00 UTC\n\n\n\n    // low level token purchase function\n    function buyTokens(address beneficiary) internal  {\n        require(beneficiary != 0x0);\n        require(validPurchase());\n        require(!hasEnded());\n        uint256 weiAmount = msg.value;\n        uint256 tokens;\n        // calculate token amount to be created\n\n        if (block.timestamp >= time0 && block.timestamp < time1) tokens = weiAmount.mul(1000).div(65);\n        else if (block.timestamp >= time1 && block.timestamp < time2) tokens = weiAmount.mul(1000).div(70);\n        else if (block.timestamp >= time2 && block.timestamp < time3) tokens = weiAmount.mul(1000).div(75);\n        else if (block.timestamp >= time3 && block.timestamp < time4) tokens = weiAmount.mul(1000).div(80);\n        else if (block.timestamp >= time4 && block.timestamp < time5) tokens = weiAmount.mul(1000).div(85);\n        else if (block.timestamp >= time5 && block.timestamp < time6) tokens = weiAmount.mul(1000).div(90);\n        else if (block.timestamp >= time6 && block.timestamp < time7) tokens = weiAmount.mul(1000).div(95);\n\n        // update state\n        weiRaised = weiRaised.add(weiAmount);\n        token.mint(beneficiary, tokens);\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens, block.timestamp);\n        forwardFunds();\n    }\n\n    function mintTokens(address beneficiary, uint256 tokens) internal   {\n        require(beneficiary != 0x0);\n        uint256 weiAmount;\n        if (block.timestamp >= time0 && block.timestamp < time1) weiAmount = tokens.mul(65).div(1000);\n        else if (block.timestamp >= time1 && block.timestamp < time2) weiAmount = tokens.mul(70).div(1000);\n        else if (block.timestamp >= time2 && block.timestamp < time3) weiAmount = tokens.mul(75).div(1000);\n        else if (block.timestamp >= time3 && block.timestamp < time4) weiAmount = tokens.mul(80).div(1000);\n        else if (block.timestamp >= time4 && block.timestamp < time5) weiAmount = tokens.mul(85).div(1000);\n        else if (block.timestamp >= time5 && block.timestamp < time6) weiAmount = tokens.mul(90).div(1000);\n        else if (block.timestamp >= time6 && block.timestamp < time7) weiAmount = tokens.mul(95).div(1000);\n\n        weiRaised = weiRaised.add(weiAmount);\n        token.mint(beneficiary, tokens);\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens, block.timestamp);\n    }\n\n    // send ether to the fund collection wallet\n    // override to create custom fund forwarding mechanisms\n    function forwardFunds() internal {\n        wallet.transfer(msg.value);\n    }\n    // @return true if the transaction can buy tokens\n    function validPurchase() internal constant returns (bool) {\n        return msg.value != 0;\n    }\n    // @return true if crowdsale event has ended\n    function hasEnded() public constant returns (bool) {\n        uint256 totalSupply = token.getTotalSupply();\n        if ((block.timestamp < time0) || (block.timestamp < time2 && totalSupply > 500000000000000000000000)\n        || (block.timestamp < time4 && totalSupply > 1000000000000000000000000)\n        || (block.timestamp < time7 && totalSupply > 2500000000000000000000000)\n            || (block.timestamp > time7)) return true;\n        else return false;\n    }\n\n}\n\n\ncontract XgoldCrowdsaleToken is MintableToken {\n    string public name;\n\n    string public symbol;\n\n    uint8 public decimals;\n\n    function XgoldCrowdsaleToken() public {\n        name = \"XGOLD COIN\";\n        symbol = \"XGC\";\n        decimals = 18;\n    }\n}\n\n\ncontract XgoldCrowdsale is Crowdsale {\n\n    uint256 public investors;\n\n\n    function XgoldCrowdsale() public\n    Crowdsale()\n    {\n        investors = 0;\n    }\n\n\n    function buyXgoldTokens(address _sender) public payable {\n        investors++;\n        buyTokens(_sender);\n    }\n\n\n    function() public payable {\n        buyXgoldTokens(msg.sender);\n    }\n\n    function sendTokens(address _beneficiary, uint256 _amount) public payable onlyOwner {\n        investors++;\n        mintTokens(_beneficiary, _amount);\n    }\n\n}",
  "bytecode": "60606040526003805460a060020a60ff0219169055341561001f57600080fd5b60038054600160a060020a03191633600160a060020a031617905560408051908101604052600a81527f58474f4c4420434f494e00000000000000000000000000000000000000000000602082015260049080516100819291602001906100dc565b5060408051908101604052600381527f5847430000000000000000000000000000000000000000000000000000000000602082015260059080516100c99291602001906100dc565b506006805460ff19166012179055610177565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011d57805160ff191683800117855561014a565b8280016001018555821561014a579182015b8281111561014a57825182559160200191906001019061012f565b5061015692915061015a565b5090565b61017491905b808211156101565760008155600101610160565b90565b610a40806101866000396000f3006060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146100ea57806306fdde0314610111578063095ea7b31461019b57806318160ddd146101bd57806323b872dd146101e2578063313ce5671461020a57806340c10f191461023357806370a08231146102555780637d64bcb4146102745780638da5cb5b146102875780638dec3daa146102b657806395d89b41146102da578063a9059cbb146102ed578063c4e41b221461030f578063dd62ed3e14610322578063f2fde38b14610347575b600080fd5b34156100f557600080fd5b6100fd610366565b604051901515815260200160405180910390f35b341561011c57600080fd5b610124610387565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610160578082015183820152602001610148565b50505050905090810190601f16801561018d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101a657600080fd5b6100fd600160a060020a0360043516602435610425565b34156101c857600080fd5b6101d06104cb565b60405190815260200160405180910390f35b34156101ed57600080fd5b6100fd600160a060020a03600435811690602435166044356104d1565b341561021557600080fd5b61021d6105e4565b60405160ff909116815260200160405180910390f35b341561023e57600080fd5b6100fd600160a060020a03600435166024356105ed565b341561026057600080fd5b6101d0600160a060020a03600435166106cc565b341561027f57600080fd5b6100fd6106e7565b341561029257600080fd5b61029a61076c565b604051600160a060020a03909116815260200160405180910390f35b34156102c157600080fd5b6102d8600435600160a060020a036024351661077b565b005b34156102e557600080fd5b61012461083b565b34156102f857600080fd5b6100fd600160a060020a03600435166024356108a6565b341561031a57600080fd5b6101d0610965565b341561032d57600080fd5b6101d0600160a060020a036004358116906024351661096b565b341561035257600080fd5b6102d8600160a060020a0360043516610996565b60035474010000000000000000000000000000000000000000900460ff1681565b60048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561041d5780601f106103f25761010080835404028352916020019161041d565b820191906000526020600020905b81548152906001019060200180831161040057829003601f168201915b505050505081565b60008115806104575750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561046257600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b600160a060020a038084166000908152600260209081526040808320338516845282528083205493861683526001909152812054909190610518908463ffffffff6109ec16565b600160a060020a03808616600090815260016020526040808220939093559087168152205461054d908463ffffffff610a0216565b600160a060020a038616600090815260016020526040902055610576818463ffffffff610a0216565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b60065460ff1681565b60035460009033600160a060020a0390811691161461060b57600080fd5b60035474010000000000000000000000000000000000000000900460ff161561063357600080fd5b600054610646908363ffffffff6109ec16565b6000908155600160a060020a038416815260016020526040902054610671908363ffffffff6109ec16565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a250600192915050565b600160a060020a031660009081526001602052604090205490565b60035460009033600160a060020a0390811691161461070557600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600354600160a060020a031681565b60035460009033600160a060020a0390811691161461079957600080fd5b50600160a060020a038116600090815260016020526040902054828111156107ff576000546107ce908463ffffffff610a0216565b6000556107e1818463ffffffff610a0216565b600160a060020a038316600090815260016020526040902055610836565b801561081c57600054610818908263ffffffff610a0216565b6000555b600160a060020a0382166000908152600160205260408120555b505050565b60058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561041d5780601f106103f25761010080835404028352916020019161041d565b600160a060020a0333166000908152600160205260408120546108cf908363ffffffff610a0216565b600160a060020a033381166000908152600160205260408082209390935590851681522054610904908363ffffffff6109ec16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60005490565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a039081169116146109b157600080fd5b600160a060020a038116156109e9576003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b6000828201838110156109fb57fe5b9392505050565b600082821115610a0e57fe5b509003905600a165627a7a7230582035b56ac42a4a1835c272c98028ecef920a5993b327bba999292908720c75e0540029"
}