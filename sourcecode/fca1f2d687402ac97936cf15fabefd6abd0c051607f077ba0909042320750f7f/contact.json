{
  "address": "0xf58ade053207657c1e014f896be86eef306ab430",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MockOracle",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-05\n*/\n\npragma solidity ^0.5.2;\n\n\n// library that we use in this contract for valuation\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0); \n        uint256 c = a / b;\n        assert(a == b * c + a % b); \n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n// interface of your Customize token\ninterface ERC20Interface {\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) external returns(bool); \n    function transferFrom(address _from, address _to, uint256 _value) external returns(bool);\n    function totalSupply() external view returns (uint256);\n    function approve(address _spender, uint256 _value) external returns(bool);\n    function allowance(address _owner, address _spender) external view returns(uint256);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\n// token transfers\n// ----------------------------------------------------------------------------\ncontract ERC20 is ERC20Interface {\n    using SafeMath for uint256;\n\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint256 internal _totalSupply;\n    address owner;\n    \n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n\n    // functions with this modifier can only be executed by the owner\n    modifier onlyOwner() {\n        if (msg.sender != owner) {\n            revert();\n        }\n         _;\n    }\n\n\n    \n\n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply.sub(balances[address(0)]);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public view returns (uint256 balance) {\n        return balances[tokenOwner];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to `to` account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint256 tokens) public returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    //\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces\n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer `tokens` from the `from` account to the `to` account\n    //\n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the `from` account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n\n    // ------------------------------------------------------------------------\n  \n     /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(value);\n        balances[account] = balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _totalSupply = _totalSupply.sub(value);\n        balances[account] = balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n    \n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n    function transferReserveToken(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {\n        return this.transferFrom(owner,tokenAddress, tokens);\n    }\n    \n}\n\n\ncontract GenTech is ERC20{\n  using SafeMath for uint256;\n  \n  OracleInterface oracle;\n  string public constant symbol = \"Gtech\";\n  string public constant name = \"GenTech\";\n  uint8 public constant decimals = 18;\n  uint256 internal _reserveOwnerSupply;\n  address owner;\n  \n  \n  constructor(address oracleAddress) public {\n    oracle = OracleInterface(oracleAddress);\n    _reserveOwnerSupply = 300000000 * 10**uint(decimals); //300 million\n    owner = msg.sender;\n    _mint(owner,_reserveOwnerSupply);\n  }\n\n  function donate() public payable {}\n\n  function flush() public payable {\n    //amount in cents\n    uint256 amount = msg.value.mul(oracle.price());\n    uint256 finalAmount= amount.div(1 ether);\n    _mint(msg.sender,finalAmount* 10**uint(decimals));\n  }\n\n  function getPrice() public view returns (uint256) {\n    return oracle.price();\n  }\n\n  function withdraw(uint256 amountCent) public returns (uint256 amountWei){\n    require(amountCent <= balanceOf(msg.sender));\n    amountWei = (amountCent.mul(1 ether)).div(oracle.price());\n\n    // If we don't have enough Ether in the contract to pay out the full amount\n    // pay an amount proportinal to what we have left.\n    // this way user's net worth will never drop at a rate quicker than\n    // the collateral itself.\n\n    // For Example:\n    // A user deposits 1 Ether when the price of Ether is $300\n    // the price then falls to $150.\n    // If we have enough Ether in the contract we cover ther losses\n    // and pay them back 2 ether (the same amount in USD).\n    // if we don't have enough money to pay them back we pay out\n    // proportonailly to what we have left. In this case they'd\n    // get back their original deposit of 1 Ether.\n    if(balanceOf(msg.sender) <= amountWei) {\n      amountWei = amountWei.mul(balanceOf(msg.sender));\n      amountWei = amountWei.mul(oracle.price());\n      amountWei = amountWei.div(1 ether);\n      amountWei = amountWei.mul(totalSupply());\n    }\n    _burn(msg.sender,amountCent);\n    msg.sender.transfer(amountWei);\n  }\n}\n\ninterface OracleInterface {\n\n  function price() external view returns (uint256);\n\n}\ncontract MockOracle is OracleInterface {\n\n    uint256 public price_;\n    address owner;\n    \n    // functions with this modifier can only be executed by the owner\n    modifier onlyOwner() {\n        if (msg.sender != owner) {\n            revert();\n        }\n         _;\n    }\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function setPrice(uint256 price) public onlyOwner {\n    \n      price_ = price;\n\n    }\n\n    function price() public view returns (uint256){\n\n      return price_;\n\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061016e806100616000396000f3fe608060405234801561001057600080fd5b506004361061005e576000357c01000000000000000000000000000000000000000000000000000000009004806391b7f5ed14610063578063a035b1fe14610091578063ce40b03f146100af575b600080fd5b61008f6004803603602081101561007957600080fd5b81019080803590602001909291905050506100cd565b005b610099610133565b6040518082815260200191505060405180910390f35b6100b761013c565b6040518082815260200191505060405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561012957600080fd5b8060008190555050565b60008054905090565b6000548156fea165627a7a7230582039e90ea2c88b8d42e521f0f30300b7e572b802247cb73a61318a2b27cb68a6d20029"
}