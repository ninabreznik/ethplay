{
  "address": "0x4c29d75cc423e8adaa3839892feb66977e295829",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "POOH",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-07\n*/\n\npragma solidity ^0.4.20;\n\n/*\n* \n* ====================================*\n*  _____   ____   ____  _    _        *\n* |  __ \\ / __ \\ / __ \\| |  | |       *\n* | |__) | |  | | |  | | |__| |       *\n* |  ___/| |  | | |  | |  __  |       *\n* | |    | |__| | |  | | |  | |       *\n* |_|     \\____/ \\____/|_|  |_|       *\n* ====================================*\n* -> What?\n* This source code is copy of Proof of Weak Hands (POWH3D)\n* If POWL can do it, shit, why can't we?\n* Call us shitheads, because we love POOH :)\n*/\n\ncontract POOH {\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n    // only people with tokens\n    modifier onlyBagholders() {\n        require(myTokens() > 0);\n        _;\n    }\n    \n    // only people with profits\n    modifier onlyStronghands() {\n        require(myDividends(true) > 0);\n        _;\n    }\n    \n    // administrators can:\n    // -> change the name of the contract\n    // -> change the name of the token\n    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\n    // they CANNOT:\n    // -> take funds\n    // -> disable withdrawals\n    // -> kill the contract\n    // -> change the price of tokens\n    modifier onlyAdministrator(){\n        address _customerAddress = msg.sender;\n        require(administrators[keccak256(_customerAddress)]);\n        _;\n    }\n    \n    \n    // ensures that the first tokens in the contract will be equally distributed\n    // meaning, no divine dump will be ever possible\n    // result: healthy longevity.\n    modifier antiEarlyWhale(uint256 _amountOfEthereum){\n        address _customerAddress = msg.sender;\n        \n        // are we still in the vulnerable phase?\n        // if so, enact anti early whale protocol \n        if( onlyAmbassadors && ((totalEthereumBalance() - _amountOfEthereum) <= ambassadorQuota_ )){\n            require(\n                // is the customer in the ambassador list?\n                ambassadors_[_customerAddress] == true &&\n                \n                // does the customer purchase exceed the max ambassador quota?\n                (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfEthereum) <= ambassadorMaxPurchase_\n                \n            );\n            \n            // updated the accumulated quota    \n            ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfEthereum);\n        \n            // execute\n            _;\n        } else {\n            // in case the ether count drops low, the ambassador phase won't reinitiate\n            onlyAmbassadors = false;\n            _;    \n        }\n        \n    }\n    \n    \n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy\n    );\n    \n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned\n    );\n    \n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n    \n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n    \n    // ERC20\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n    \n    \n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n    string public name = \"POOH\";\n    string public symbol = \"POOH\";\n    uint8 constant public decimals = 18;\n    uint8 constant internal dividendFee_ = 10;\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n    uint256 constant internal magnitude = 2**64;\n    \n    // proof of stake (defaults at 100 tokens)\n    uint256 public stakingRequirement = 5e18;\n    \n    // ambassador program\n    mapping(address => bool) internal ambassadors_;\n    uint256 constant internal ambassadorMaxPurchase_ = 2 ether;\n    uint256 constant internal ambassadorQuota_ = 3 ether;\n    \n    \n    \n   /*================================\n    =            DATASETS            =\n    ================================*/\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n    uint256 internal tokenSupply_ = 0;\n    uint256 internal profitPerShare_;\n    \n    // administrator list (see above on what they can do)\n    mapping(bytes32 => bool) public administrators;\n    \n    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n    bool public onlyAmbassadors = true;\n    \n\n\n    /*=======================================\n    =            PUBLIC FUNCTIONS            =\n    =======================================*/\n    /*\n    * -- APPLICATION ENTRY POINTS --  \n    */\n    function POOH()\n        public\n    {\n        // add administrators here\n        //fuck admin! Drive it like you stole it!\n        administrators[0xcd93345332dcaccf0b5b19db1714ee83265566d76060294d65956ac78c134882] = true; //K\n\n        // add the ambassadors here. \n        ambassadors_[0x7e474fe5Cfb720804860215f407111183cbc2f85] = true; //K\n        ambassadors_[0x87A7e71D145187eE9aAdc86954d39cf0e9446751] = true; //J\n        ambassadors_[0xe40D29ef2d7a578e70B75D057C78c60Dc95fCb47] = true; //M\n        ambassadors_[0x5138240E96360ad64010C27eB0c685A8b2eDE4F2] = true; //B\n        ambassadors_[0x35F101B9F23dB673B7FdA066F1ae86C14eBEf85D] = true; //J\n\n    }\n    \n     \n    /**\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n     */\n    function buy(address _referredBy)\n        public\n        payable\n        returns(uint256)\n    {\n        purchaseTokens(msg.value, _referredBy);\n    }\n    \n    /**\n     * Fallback function to handle ethereum that was send straight to the contract\n     * Unfortunately we cannot use a referral address this way.\n     */\n    function()\n        payable\n        public\n    {\n        purchaseTokens(msg.value, 0x0);\n    }\n    \n    /**\n     * Converts all of caller's dividends to tokens.\n     */\n    function reinvest()\n        onlyStronghands()\n        public\n    {\n        // fetch dividends\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n        \n        // pay out the dividends virtually\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        \n        // retrieve ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        \n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n        \n        // fire event\n        onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n    \n    /**\n     * Alias of sell() and withdraw().\n     */\n    function exit()\n        public\n    {\n        // get token count for caller & sell them all\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if(_tokens > 0) sell(_tokens);\n        \n        // lambo delivery service\n        withdraw();\n    }\n\n    /**\n     * Withdraws all of the callers earnings.\n     */\n    function withdraw()\n        onlyStronghands()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n        \n        // update dividend tracker\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        \n        // add ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        \n        // lambo delivery service\n        _customerAddress.transfer(_dividends);\n        \n        // fire event\n        onWithdraw(_customerAddress, _dividends);\n    }\n    \n    /**\n     * Liquifies tokens to ethereum.\n     */\n    function sell(uint256 _amountOfTokens)\n        onlyBagholders()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        // russian hackers BTFO\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        \n        // burn the sold tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n        \n        // update dividends tracker\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;       \n        \n        // dividing by zero is a bad idea\n        if (tokenSupply_ > 0) {\n            // update the amount of dividends per token\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n        \n        // fire event\n        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n    }\n    \n    \n    /**\n     * Transfer tokens from the caller to a new holder.\n     * Remember, there's a 10% fee here as well.\n     */\n    function transfer(address _toAddress, uint256 _amountOfTokens)\n        onlyBagholders()\n        public\n        returns(bool)\n    {\n        // setup\n        address _customerAddress = msg.sender;\n        \n        // make sure we have the requested tokens\n        // also disables transfers until ambassador phase is over\n        // ( we dont want whale premines )\n        require(!onlyAmbassadors && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        \n        // withdraw all outstanding dividends first\n        if(myDividends(true) > 0) withdraw();\n        \n        // liquify 10% of the tokens that are transfered\n        // these are dispersed to shareholders\n        uint256 _tokenFee = SafeMath.div(_amountOfTokens, dividendFee_);\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\n  \n        // burn the fee tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n\n        // exchange tokens\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n        \n        // update dividend trackers\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n        \n        // disperse dividends among holders\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        \n        // fire event\n        Transfer(_customerAddress, _toAddress, _taxedTokens);\n        \n        // ERC20\n        return true;\n       \n    }\n    \n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n    /**\n     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\n     */\n    function disableInitialStage()\n        onlyAdministrator()\n        public\n    {\n        onlyAmbassadors = false;\n    }\n    \n    /**\n     * In case one of us dies, we need to replace ourselves.\n     */\n    function setAdministrator(bytes32 _identifier, bool _status)\n        onlyAdministrator()\n        public\n    {\n        administrators[_identifier] = _status;\n    }\n    \n    /**\n     * Precautionary measures in case we need to adjust the masternode rate.\n     */\n    function setStakingRequirement(uint256 _amountOfTokens)\n        onlyAdministrator()\n        public\n    {\n        stakingRequirement = _amountOfTokens;\n    }\n    \n    /**\n     * If we want to rebrand, we can.\n     */\n    function setName(string _name)\n        onlyAdministrator()\n        public\n    {\n        name = _name;\n    }\n    \n    /**\n     * If we want to rebrand, we can.\n     */\n    function setSymbol(string _symbol)\n        onlyAdministrator()\n        public\n    {\n        symbol = _symbol;\n    }\n\n    \n    /*----------  HELPERS AND CALCULATORS  ----------*/\n    /**\n     * Method to view the current Ethereum stored in the contract\n     * Example: totalEthereumBalance()\n     */\n    function totalEthereumBalance()\n        public\n        view\n        returns(uint)\n    {\n        return address (this).balance;\n    }\n    \n    /**\n     * Retrieve the total token supply.\n     */\n    function totalSupply()\n        public\n        view\n        returns(uint256)\n    {\n        return tokenSupply_;\n    }\n    \n    /**\n     * Retrieve the tokens owned by the caller.\n     */\n    function myTokens()\n        public\n        view\n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n    \n    /**\n     * Retrieve the dividends owned by the caller.\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     * But in the internal calculations, we want them separate. \n     */ \n    function myDividends(bool _includeReferralBonus) \n        public \n        view \n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n    \n    /**\n     * Retrieve the token balance of any single address.\n     */\n    function balanceOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n    \n    /**\n     * Retrieve the dividend balance of any single address.\n     */\n    function dividendsOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n    \n    /**\n     * Return the buy price of 1 individual token.\n     */\n    function sellPrice() \n        public \n        view \n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n            return _taxedEthereum;\n        }\n    }\n    \n    /**\n     * Return the sell price of 1 individual token.\n     */\n    function buyPrice() \n        public \n        view \n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n            return _taxedEthereum;\n        }\n    }\n    \n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n     */\n    function calculateTokensReceived(uint256 _ethereumToSpend) \n        public \n        view \n        returns(uint256)\n    {\n        uint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        \n        return _amountOfTokens;\n    }\n    \n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n     */\n    function calculateEthereumReceived(uint256 _tokensToSell) \n        public \n        view \n        returns(uint256)\n    {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _taxedEthereum;\n    }\n    \n    \n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n        antiEarlyWhale(_incomingEthereum)\n        internal\n        returns(uint256)\n    {\n        // data setup\n        address _customerAddress = msg.sender;\n        uint256 _undividedDividends = SafeMath.div(_incomingEthereum, dividendFee_);\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n \n        // no point in continuing execution if OP is a poorfag russian hacker\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n        // (or hackers)\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n        \n        // is the user referred by a masternode?\n        if(\n            // is this a referred purchase?\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n            // no cheating!\n            _referredBy != _customerAddress &&\n            \n            // does the referrer have at least X whole tokens?\n            // i.e is the referrer a godly chad masternode\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ){\n            // wealth redistribution\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } else {\n            // no ref purchase\n            // add the referral bonus back to the global dividends cake\n            _dividends = SafeMath.add(_dividends, _referralBonus);\n            _fee = _dividends * magnitude;\n        }\n        \n        // we can't give people infinite ethereum\n        if(tokenSupply_ > 0){\n            \n            // add tokens to the pool\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n \n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n            \n            // calculate the amount of tokens the customer receives over his purchase \n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n        \n        } else {\n            // add tokens to the pool\n            tokenSupply_ = _amountOfTokens;\n        }\n        \n        // update circulating supply & the ledger address for the customer\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        \n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n        //really i know you think you do but you don't\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n        \n        // fire event\n        onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy);\n        \n        return _amountOfTokens;\n    }\n\n    /**\n     * Calculate Token price based on an amount of incoming ethereum\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function ethereumToTokens_(uint256 _ethereum)\n        internal\n        view\n        returns(uint256)\n    {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived = \n         (\n            (\n                // underflow attempts BTFO\n                SafeMath.sub(\n                    (sqrt\n                        (\n                            (_tokenPriceInitial**2)\n                            +\n                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n                            +\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n                            +\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n                        )\n                    ), _tokenPriceInitial\n                )\n            )/(tokenPriceIncremental_)\n        )-(tokenSupply_)\n        ;\n  \n        return _tokensReceived;\n    }\n    \n    /**\n     * Calculate token sell value.\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n     function tokensToEthereum_(uint256 _tokens)\n        internal\n        view\n        returns(uint256)\n    {\n\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n        (\n            // underflow attempts BTFO\n            SafeMath.sub(\n                (\n                    (\n                        (\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n                        )-tokenPriceIncremental_\n                    )*(tokens_ - 1e18)\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n            )\n        /1e18);\n        return _etherReceived;\n    }\n    \n    \n    //This is where all your gas goes, sorry\n    //Not sorry, you probably only paid 1 gwei\n    function sqrt(uint x) internal pure returns (uint y) {\n        uint z = (x + 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "bytecode": "606060405260408051908101604052600481527f504f4f4800000000000000000000000000000000000000000000000000000000602082015260009080516200004d929160200190620001e4565b5060408051908101604052600481527f504f4f48000000000000000000000000000000000000000000000000000000006020820152600190805162000097929160200190620001e4565b50674563918244f400006002556000600855600b805460ff191660011790553415620000c257600080fd5b7f83f6f2c826ef26ce9ee8b553aba8fc2ccc6b1784bee1d3a0aa07ed3983cd968c8054600160ff19918216811790925560036020527fffe04858ad6a0c6ee82c408cd5d73791e4a0254108d1f3391b76383c9807acff80548216831790557f6ed443a7eac0a053d5326be6d4e0a857c945261de60ec8c14b9f2f2ce6f3313b80548216831790557f8a58a054b757e2baa03349d7b31ae654b0f47236998b5c2f588a8b9731be64b680548216831790557faae10ad2d606620659761d2d8ae001dde8b8eb1fa5e04bc73ca077f77646f55880548216831790557335f101b9f23db673b7fda066f1ae86c14ebef85d6000527f06e72c50b275856552aace44a26ba6a9a1e374823cf54644c5624abbe941d3168054909116909117905562000289565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200022757805160ff191683800117855562000257565b8280016001018555821562000257579182015b82811115620002575782518255916020019190600101906200023a565b506200026592915062000269565b5090565b6200028691905b8082111562000265576000815560010162000270565b90565b6116a980620002996000396000f30060606040526004361061015d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b811461016b57806306fdde031461019c57806310d0ffdd1461022657806318160ddd1461023c578063226093731461024f57806327defa1f14610265578063313ce5671461028c578063392efb52146102b55780633ccfd60b146102cb5780634b750334146102e057806356d399e8146102f3578063688abbf7146103065780636b2f46321461031e57806370a08231146103315780638328b610146103505780638620410b1461036657806389135ae914610379578063949e8acd1461039457806395d89b41146103a7578063a8e04f34146103ba578063a9059cbb146103cd578063b84c8246146103ef578063c47f002714610440578063e4849b3214610491578063e9fad8ee146104a7578063f088d547146104ba578063fdb5a03e146104ce575b6101683460006104e1565b50005b341561017657600080fd5b61018a600160a060020a0360043516610aac565b60405190815260200160405180910390f35b34156101a757600080fd5b6101af610ae7565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101eb5780820151838201526020016101d3565b50505050905090810190601f1680156102185780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561023157600080fd5b61018a600435610b85565b341561024757600080fd5b61018a610bb5565b341561025a57600080fd5b61018a600435610bbc565b341561027057600080fd5b610278610bf5565b604051901515815260200160405180910390f35b341561029757600080fd5b61029f610bfe565b60405160ff909116815260200160405180910390f35b34156102c057600080fd5b610278600435610c03565b34156102d657600080fd5b6102de610c18565b005b34156102eb57600080fd5b61018a610ce4565b34156102fe57600080fd5b61018a610d38565b341561031157600080fd5b61018a6004351515610d3e565b341561032957600080fd5b61018a610d81565b341561033c57600080fd5b61018a600160a060020a0360043516610d8f565b341561035b57600080fd5b6102de600435610daa565b341561037157600080fd5b61018a610e01565b341561038457600080fd5b6102de6004356024351515610e49565b341561039f57600080fd5b61018a610ebb565b34156103b257600080fd5b6101af610ece565b34156103c557600080fd5b6102de610f39565b34156103d857600080fd5b610278600160a060020a0360043516602435610f97565b34156103fa57600080fd5b6102de60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061114f95505050505050565b341561044b57600080fd5b6102de60046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506111b895505050505050565b341561049c57600080fd5b6102de60043561121c565b34156104b257600080fd5b6102de611379565b61018a600160a060020a03600435166113b0565b34156104d957600080fd5b6102de6113bc565b60008060008060008060008060008a6000339050600b60009054906101000a900460ff16801561052257506729a2241af62c00008261051e610d81565b0311155b1561082a57600160a060020a03811660009081526003602052604090205460ff16151560011480156105775750600160a060020a038116600090815260076020526040902054671bc16d674ec8000090830111155b151561058257600080fd5b600160a060020a0381166000908152600760205260409020546105a59083611477565b600160a060020a0382166000908152600760205260409020553399506105cc8d600a61148d565b98506105d989600361148d565b97506105e589896114a4565b96506105f18d8a6114a4565b95506105fc866114b6565b9450680100000000000000008702935060008511801561062657506008546106248682611477565b115b151561063157600080fd5b600160a060020a038c161580159061065b575089600160a060020a03168c600160a060020a031614155b80156106815750600254600160a060020a038d1660009081526004602052604090205410155b156106c757600160a060020a038c166000908152600560205260409020546106a99089611477565b600160a060020a038d166000908152600560205260409020556106e2565b6106d18789611477565b965068010000000000000000870293505b60006008541115610746576106f960085486611477565b600881905568010000000000000000880281151561071357fe5b6009805492909104909101905560085468010000000000000000880281151561073857fe5b04850284038403935061074c565b60088590555b600160a060020a038a1660009081526004602052604090205461076f9086611477565b600460008c600160a060020a0316600160a060020a031681526020019081526020016000208190555083856009540203925082600660008c600160a060020a0316600160a060020a03168152602001908152602001600020600082825401925050819055508b600160a060020a03168a600160a060020a03167f022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d58f8860405191825260208201526040908101905180910390a3849a50610a9c565b600b805460ff191690553399506108428d600a61148d565b985061084f89600361148d565b975061085b89896114a4565b96506108678d8a6114a4565b9550610872866114b6565b9450680100000000000000008702935060008511801561089c575060085461089a8682611477565b115b15156108a757600080fd5b600160a060020a038c16158015906108d1575089600160a060020a03168c600160a060020a031614155b80156108f75750600254600160a060020a038d1660009081526004602052604090205410155b1561093d57600160a060020a038c1660009081526005602052604090205461091f9089611477565b600160a060020a038d16600090815260056020526040902055610958565b6109478789611477565b965068010000000000000000870293505b600060085411156109bc5761096f60085486611477565b600881905568010000000000000000880281151561098957fe5b600980549290910490910190556008546801000000000000000088028115156109ae57fe5b0485028403840393506109c2565b60088590555b600160a060020a038a166000908152600460205260409020546109e59086611477565b600460008c600160a060020a0316600160a060020a031681526020019081526020016000208190555083856009540203925082600660008c600160a060020a0316600160a060020a03168152602001908152602001600020600082825401925050819055508b600160a060020a03168a600160a060020a03167f022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d58f8860405191825260208201526040908101905180910390a3849a505b5050505050505050505092915050565b600160a060020a0316600090815260066020908152604080832054600490925290912054600954680100000000000000009102919091030490565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b7d5780601f10610b5257610100808354040283529160200191610b7d565b820191906000526020600020905b815481529060010190602001808311610b6057829003601f168201915b505050505081565b6000808080610b9585600a61148d565b9250610ba185846114a4565b9150610bac826114b6565b95945050505050565b6008545b90565b6000806000806008548511151515610bd357600080fd5b610bdc8561154e565b9250610be983600a61148d565b9150610bac83836114a4565b600b5460ff1681565b601281565b600a6020526000908152604090205460ff1681565b6000806000610c276001610d3e565b11610c3157600080fd5b339150610c3e6000610d3e565b600160a060020a0383166000818152600660209081526040808320805468010000000000000000870201905560059091528082208054929055920192509082156108fc0290839051600060405180830381858888f193505050501515610ca357600080fd5b81600160a060020a03167fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc8260405190815260200160405180910390a25050565b60008060008060085460001415610d02576414f46b04009350610d32565b610d13670de0b6b3a764000061154e565b9250610d2083600a61148d565b9150610d2c83836114a4565b90508093505b50505090565b60025481565b60003382610d5457610d4f81610aac565b610d78565b600160a060020a038116600090815260056020526040902054610d7682610aac565b015b91505b50919050565b600160a060020a0330163190565b600160a060020a031660009081526004602052604090205490565b33600a600082604051600160a060020a03919091166c01000000000000000000000000028152601401604051908190039020815260208101919091526040016000205460ff161515610dfb57600080fd5b50600255565b60008060008060085460001415610e1f5764199c82cc009350610d32565b610e30670de0b6b3a764000061154e565b9250610e3d83600a61148d565b9150610d2c8383611477565b33600a600082604051600160a060020a03919091166c01000000000000000000000000028152601401604051908190039020815260208101919091526040016000205460ff161515610e9a57600080fd5b506000918252600a6020526040909120805460ff1916911515919091179055565b600033610ec781610d8f565b91505b5090565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b7d5780601f10610b5257610100808354040283529160200191610b7d565b33600a600082604051600160a060020a03919091166c01000000000000000000000000028152601401604051908190039020815260208101919091526040016000205460ff161515610f8a57600080fd5b50600b805460ff19169055565b600080600080600080610fa8610ebb565b11610fb257600080fd5b600b5433945060ff16158015610fe05750600160a060020a0384166000908152600460205260409020548611155b1515610feb57600080fd5b6000610ff76001610d3e565b111561100557611005610c18565b61101086600a61148d565b925061101c86846114a4565b91506110278361154e565b9050611035600854846114a4565b600855600160a060020a03841660009081526004602052604090205461105b90876114a4565b600160a060020a03808616600090815260046020526040808220939093559089168152205461108a9083611477565b600160a060020a0388811660008181526004602090815260408083209590955560098054948a16835260069091528482208054948c029094039093558254918152929092208054928502909201909155546008546110fe91906801000000000000000084028115156110f857fe5b04611477565b600955600160a060020a038088169085167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35060019695505050505050565b33600a600082604051600160a060020a03919091166c01000000000000000000000000028152601401604051908190039020815260208101919091526040016000205460ff1615156111a057600080fd5b60018280516111b39291602001906115ef565b505050565b33600a600082604051600160a060020a03919091166c01000000000000000000000000028152601401604051908190039020815260208101919091526040016000205460ff16151561120957600080fd5b60008280516111b39291602001906115ef565b600080600080600080600061122f610ebb565b1161123957600080fd5b33600160a060020a03811660009081526004602052604090205490965087111561126257600080fd5b86945061126e8561154e565b935061127b84600a61148d565b925061128784846114a4565b9150611295600854866114a4565b600855600160a060020a0386166000908152600460205260409020546112bb90866114a4565b600160a060020a038716600090815260046020908152604080832093909355600954600690915291812080549288026801000000000000000086020192839003905560085491925090111561132c576113286009546008546801000000000000000086028115156110f857fe5b6009555b85600160a060020a03167fc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a31139868460405191825260208201526040908101905180910390a250505050505050565b33600160a060020a038116600090815260046020526040812054908111156113a4576113a48161121c565b6113ac610c18565b5050565b6000610d7b34836104e1565b6000806000806113cc6001610d3e565b116113d657600080fd5b6113e06000610d3e565b33600160a060020a03811660009081526006602090815260408083208054680100000000000000008702019055600590915281208054908290559092019450925061142c9084906104e1565b905081600160a060020a03167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458848360405191825260208201526040908101905180910390a2505050565b60008282018381101561148657fe5b9392505050565b600080828481151561149b57fe5b04949350505050565b6000828211156114b057fe5b50900390565b6008546000906c01431e0fae6d7217caa00000009082906402540be40061153b611535730380d4bd8a8678c1bb542c80deb4800000000000880268056bc75e2d631000006002860a02017005e0a1fd2712875988becaad0000000000850201780197d4df19d605767337e9f14d3eec8920e400000000000000016115ba565b856114a4565b81151561154457fe5b0403949350505050565b600854600090670de0b6b3a76400008381019181019083906115a76414f46b04008285046402540be40002018702600283670de0b6b3a763ffff1982890a8b900301046402540be400028115156115a157fe5b046114a4565b8115156115b057fe5b0495945050505050565b80600260018201045b81811015610d7b5780915060028182858115156115dc57fe5b04018115156115e757fe5b0490506115c3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061163057805160ff191683800117855561165d565b8280016001018555821561165d579182015b8281111561165d578251825591602001919060010190611642565b50610eca92610bb99250905b80821115610eca57600081556001016116695600a165627a7a72305820e2b55ff444e2c6d108900d0fc9bf327dca0b70632ffdc39d34da8d2963231d160029"
}