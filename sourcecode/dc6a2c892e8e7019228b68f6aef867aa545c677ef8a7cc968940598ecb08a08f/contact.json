{
  "address": "0x7cc607ba48f19ea817525c546cbec2bbae8d1499",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MiniMeTokenFactory",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "pragma solidity ^0.4.18;\n\n/*\n    Copyright 2016, Jordi Baylina\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/// @title MiniMeToken Contract\n/// @author Jordi Baylina\n/// @dev This token contract's goal is to make it easy for anyone to clone this\n///  token using the token distribution at a given block, this will allow DAO's\n///  and DApps to upgrade their features in a decentralized manner without\n///  affecting the original token\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\n\nimport \"./Controlled.sol\";\nimport \"./TokenController.sol\";\n\ncontract ApproveAndCallFallBack {\n  function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\n}\n\n/// @dev The actual token contract, the default controller is the msg.sender\n///  that deploys the contract, so usually this token will be deployed by a\n///  token controller contract, which Giveth will call a \"Campaign\"\ncontract MiniMeToken is Controlled {\n\n  string public name;                //The Token's name: e.g. DigixDAO Tokens\n  uint8 public decimals;             //Number of decimals of the smallest unit\n  string public symbol;              //An identifier: e.g. REP\n  string public version = 'MMT_0.2'; //An arbitrary versioning scheme\n\n\n  /// @dev `Checkpoint` is the structure that attaches a block number to a\n  ///  given value, the block number attached is the one that last changed the\n  ///  value\n  struct  Checkpoint {\n\n    // `fromBlock` is the block number that the value was generated from\n    uint128 fromBlock;\n\n    // `value` is the amount of tokens at a specific block number\n    uint128 value;\n  }\n\n  // `parentToken` is the Token address that was cloned to produce this token;\n  //  it will be 0x0 for a token that was not cloned\n  MiniMeToken public parentToken;\n\n  // `parentSnapShotBlock` is the block number from the Parent Token that was\n  //  used to determine the initial distribution of the Clone Token\n  uint public parentSnapShotBlock;\n\n  // `creationBlock` is the block number that the Clone Token was created\n  uint public creationBlock;\n\n  // `balances` is the map that tracks the balance of each address, in this\n  //  contract when the balance changes the block number that the change\n  //  occurred is also included in the map\n  mapping (address => Checkpoint[]) balances;\n\n  // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n  mapping (address => mapping (address => uint256)) allowed;\n\n  // Tracks the history of the `totalSupply` of the token\n  Checkpoint[] totalSupplyHistory;\n\n  // Flag that determines if the token is transferable or not.\n  bool public transfersEnabled;\n\n  // The factory used to create new clone tokens\n  MiniMeTokenFactory public tokenFactory;\n\n  ////////////////\n  // Constructor\n  ////////////////\n\n  /// @notice Constructor to create a MiniMeToken\n  /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n  ///  will create the Clone token contracts, the token factory needs to be\n  ///  deployed first\n  /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n  ///  new token\n  /// @param _parentSnapShotBlock Block of the parent token that will\n  ///  determine the initial distribution of the clone token, set to 0 if it\n  ///  is a new token\n  /// @param _tokenName Name of the new token\n  /// @param _decimalUnits Number of decimals of the new token\n  /// @param _tokenSymbol Token Symbol for the new token\n  /// @param _transfersEnabled If true, tokens will be able to be transferred\n  function MiniMeToken(\n    address _tokenFactory,\n    address _parentToken,\n    uint _parentSnapShotBlock,\n    string _tokenName,\n    uint8 _decimalUnits,\n    string _tokenSymbol,\n    bool _transfersEnabled\n  ) public {\n    tokenFactory = MiniMeTokenFactory(_tokenFactory);\n    name = _tokenName;                                 // Set the name\n    decimals = _decimalUnits;                          // Set the decimals\n    symbol = _tokenSymbol;                             // Set the symbol\n    parentToken = MiniMeToken(_parentToken);\n    parentSnapShotBlock = _parentSnapShotBlock;\n    transfersEnabled = _transfersEnabled;\n    creationBlock = block.number;\n  }\n\n\n  ///////////////////\n  // ERC20 Methods\n  ///////////////////\n\n  /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n  /// @param _to The address of the recipient\n  /// @param _amount The amount of tokens to be transferred\n  /// @return Whether the transfer was successful or not\n  function transfer(address _to, uint256 _amount) public returns (bool success) {\n    require(transfersEnabled);\n    doTransfer(msg.sender, _to, _amount);\n    return true;\n  }\n\n  /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n  ///  is approved by `_from`\n  /// @param _from The address holding the tokens being transferred\n  /// @param _to The address of the recipient\n  /// @param _amount The amount of tokens to be transferred\n  /// @return True if the transfer was successful\n  function transferFrom(address _from, address _to, uint256 _amount\n  ) public returns (bool success) {\n\n    // The controller of this contract can move tokens around at will,\n    //  this is important to recognize! Confirm that you trust the\n    //  controller of this contract, which in most situations should be\n    //  another open source smart contract or 0x0\n    if (msg.sender != controller) {\n      require(transfersEnabled);\n\n      // The standard ERC 20 transferFrom functionality\n      require(allowed[_from][msg.sender] >= _amount);\n      allowed[_from][msg.sender] -= _amount;\n    }\n    doTransfer(_from, _to, _amount);\n    return true;\n  }\n\n  /// @dev This is the actual transfer function in the token contract, it can\n  ///  only be called by other functions in this contract.\n  /// @param _from The address holding the tokens being transferred\n  /// @param _to The address of the recipient\n  /// @param _amount The amount of tokens to be transferred\n  /// @return True if the transfer was successful\n  function doTransfer(address _from, address _to, uint _amount\n  ) internal {\n\n    if (_amount == 0) {\n      Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\n      return;\n    }\n\n    require(parentSnapShotBlock < block.number);\n\n    // Do not allow transfer to 0x0 or the token contract itself\n    require((_to != 0) && (_to != address(this)));\n\n    // If the amount being transfered is more than the balance of the\n    //  account the transfer throws\n    var previousBalanceFrom = balanceOfAt(_from, block.number);\n\n    require(previousBalanceFrom >= _amount);\n\n    // Alerts the token controller of the transfer\n    if (isContract(controller)) {\n      require(TokenController(controller).onTransfer(_from, _to, _amount));\n    }\n\n    // First update the balance array with the new value for the address\n    //  sending the tokens\n    updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n\n    // Then update the balance array with the new value for the address\n    //  receiving the tokens\n    var previousBalanceTo = balanceOfAt(_to, block.number);\n    require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n    updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n\n    // An event to make the transfer easy to find on the blockchain\n    Transfer(_from, _to, _amount);\n\n  }\n\n  /// @param _owner The address that's balance is being requested\n  /// @return The balance of `_owner` at the current block\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balanceOfAt(_owner, block.number);\n  }\n\n  /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n  ///  its behalf. This is a modified version of the ERC20 approve function\n  ///  to be a little bit safer\n  /// @param _spender The address of the account able to transfer the tokens\n  /// @param _amount The amount of tokens to be approved for transfer\n  /// @return True if the approval was successful\n  function approve(address _spender, uint256 _amount) public returns (bool success) {\n    require(transfersEnabled);\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender,0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n    // Alerts the token controller of the approve function call\n    if (isContract(controller)) {\n      require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n    }\n\n    allowed[msg.sender][_spender] = _amount;\n    Approval(msg.sender, _spender, _amount);\n    return true;\n  }\n\n  /// @dev This function makes it easy to read the `allowed[]` map\n  /// @param _owner The address of the account that owns the token\n  /// @param _spender The address of the account able to transfer the tokens\n  /// @return Amount of remaining tokens of _owner that _spender is allowed\n  ///  to spend\n  function allowance(address _owner, address _spender\n  ) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n  ///  its behalf, and then a function is triggered in the contract that is\n  ///  being approved, `_spender`. This allows users to use their tokens to\n  ///  interact with contracts in one function call instead of two\n  /// @param _spender The address of the contract able to transfer the tokens\n  /// @param _amount The amount of tokens to be approved for transfer\n  /// @return True if the function call was successful\n  function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n  ) public returns (bool success) {\n    require(approve(_spender, _amount));\n\n    ApproveAndCallFallBack(_spender).receiveApproval(\n      msg.sender,\n      _amount,\n      this,\n      _extraData\n    );\n\n    return true;\n  }\n\n  /// @dev This function makes it easy to get the total number of tokens\n  /// @return The total number of tokens\n  function totalSupply() public constant returns (uint) {\n    return totalSupplyAt(block.number);\n  }\n\n\n  ////////////////\n  // Query balance and totalSupply in History\n  ////////////////\n\n  /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n  /// @param _owner The address from which the balance will be retrieved\n  /// @param _blockNumber The block number when the balance is queried\n  /// @return The balance at `_blockNumber`\n  function balanceOfAt(address _owner, uint _blockNumber) public constant\n  returns (uint) {\n\n    // These next few lines are used when the balance of the token is\n    //  requested before a check point was ever created for this token, it\n    //  requires that the `parentToken.balanceOfAt` be queried at the\n    //  genesis block for that token as this contains initial balance of\n    //  this token\n    if ((balances[_owner].length == 0)\n      || (balances[_owner][0].fromBlock > _blockNumber)) {\n      if (address(parentToken) != 0) {\n        return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n      } else {\n        // Has no parent\n        return 0;\n      }\n\n      // This will return the expected balance during normal situations\n    } else {\n      return getValueAt(balances[_owner], _blockNumber);\n    }\n  }\n\n  /// @notice Total amount of tokens at a specific `_blockNumber`.\n  /// @param _blockNumber The block number when the totalSupply is queried\n  /// @return The total amount of tokens at `_blockNumber`\n  function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\n\n    // These next few lines are used when the totalSupply of the token is\n    //  requested before a check point was ever created for this token, it\n    //  requires that the `parentToken.totalSupplyAt` be queried at the\n    //  genesis block for this token as that contains totalSupply of this\n    //  token at this block number.\n    if ((totalSupplyHistory.length == 0)\n      || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n      if (address(parentToken) != 0) {\n        return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n      } else {\n        return 0;\n      }\n\n      // This will return the expected totalSupply during normal situations\n    } else {\n      return getValueAt(totalSupplyHistory, _blockNumber);\n    }\n  }\n\n  ////////////////\n  // Clone Token Method\n  ////////////////\n\n  /// @notice Creates a new clone token with the initial distribution being\n  ///  this token at `_snapshotBlock`\n  /// @param _cloneTokenName Name of the clone token\n  /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n  /// @param _cloneTokenSymbol Symbol of the clone token\n  /// @param _snapshotBlock Block when the distribution of the parent token is\n  ///  copied to set the initial distribution of the new clone token;\n  ///  if the block is zero than the actual block, the current block is used\n  /// @param _transfersEnabled True if transfers are allowed in the clone\n  /// @return The address of the new MiniMeToken Contract\n  function createCloneToken(\n    string _cloneTokenName,\n    uint8 _cloneDecimalUnits,\n    string _cloneTokenSymbol,\n    uint _snapshotBlock,\n    bool _transfersEnabled\n  ) public returns(address) {\n    if (_snapshotBlock == 0) _snapshotBlock = block.number;\n    MiniMeToken cloneToken = tokenFactory.createCloneToken(\n      this,\n      _snapshotBlock,\n      _cloneTokenName,\n      _cloneDecimalUnits,\n      _cloneTokenSymbol,\n      _transfersEnabled\n    );\n\n    cloneToken.changeController(msg.sender);\n\n    // An event to make the token easy to find on the blockchain\n    NewCloneToken(address(cloneToken), _snapshotBlock);\n    return address(cloneToken);\n  }\n\n  ////////////////\n  // Generate and destroy tokens\n  ////////////////\n\n  /// @notice Generates `_amount` tokens that are assigned to `_owner`\n  /// @param _owner The address that will be assigned the new tokens\n  /// @param _amount The quantity of tokens generated\n  /// @return True if the tokens are generated correctly\n  function generateTokens(address _owner, uint _amount\n  ) public onlyController returns (bool) {\n    uint curTotalSupply = totalSupply();\n    require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n    uint previousBalanceTo = balanceOf(_owner);\n    require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n    updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n    updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n    Transfer(0, _owner, _amount);\n    return true;\n  }\n\n\n  /// @notice Burns `_amount` tokens from `_owner`\n  /// @param _owner The address that will lose the tokens\n  /// @param _amount The quantity of tokens to burn\n  /// @return True if the tokens are burned correctly\n  function destroyTokens(address _owner, uint _amount\n  ) onlyController public returns (bool) {\n    uint curTotalSupply = totalSupply();\n    require(curTotalSupply >= _amount);\n    uint previousBalanceFrom = balanceOf(_owner);\n    require(previousBalanceFrom >= _amount);\n    updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n    updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n    Transfer(_owner, 0, _amount);\n    return true;\n  }\n\n  ////////////////\n  // Enable tokens transfers\n  ////////////////\n\n\n  /// @notice Enables token holders to transfer their tokens freely if true\n  /// @param _transfersEnabled True if transfers are allowed in the clone\n  function enableTransfers(bool _transfersEnabled) public onlyController {\n    transfersEnabled = _transfersEnabled;\n  }\n\n  ////////////////\n  // Internal helper functions to query and set a value in a snapshot array\n  ////////////////\n\n  /// @dev `getValueAt` retrieves the number of tokens at a given block number\n  /// @param checkpoints The history of values being queried\n  /// @param _block The block number to retrieve the value at\n  /// @return The number of tokens being queried\n  function getValueAt(Checkpoint[] storage checkpoints, uint _block\n  ) constant internal returns (uint) {\n    if (checkpoints.length == 0) return 0;\n\n    // Shortcut for the actual value\n    if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n      return checkpoints[checkpoints.length-1].value;\n    if (_block < checkpoints[0].fromBlock) return 0;\n\n    // Binary search of the value in the array\n    uint min = 0;\n    uint max = checkpoints.length-1;\n    while (max > min) {\n      uint mid = (max + min + 1)/ 2;\n      if (checkpoints[mid].fromBlock<=_block) {\n        min = mid;\n      } else {\n        max = mid-1;\n      }\n    }\n    return checkpoints[min].value;\n  }\n\n  /// @dev `updateValueAtNow` used to update the `balances` map and the\n  ///  `totalSupplyHistory`\n  /// @param checkpoints The history of data being updated\n  /// @param _value The new number of tokens\n  function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n  ) internal  {\n    if ((checkpoints.length == 0)\n      || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n      Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n      newCheckPoint.fromBlock =  uint128(block.number);\n      newCheckPoint.value = uint128(_value);\n    } else {\n      Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n      oldCheckPoint.value = uint128(_value);\n    }\n  }\n\n  /// @dev Internal function to determine if an address is a contract\n  /// @param _addr The address being queried\n  /// @return True if `_addr` is a contract\n  function isContract(address _addr) constant internal returns(bool) {\n    uint size;\n    if (_addr == 0) return false;\n    assembly {\n      size := extcodesize(_addr)\n    }\n    return size>0;\n  }\n\n  /// @dev Helper function to return a min betwen the two uints\n  function min(uint a, uint b) pure internal returns (uint) {\n    return a < b ? a : b;\n  }\n\n  /// @notice The fallback function: If the contract's controller has not been\n  ///  set to 0, then the `proxyPayment` method is called which relays the\n  ///  ether and creates tokens as described in the token controller contract\n  function () public payable {\n    require(isContract(controller));\n    require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n  }\n\n  //////////\n  // Safety Methods\n  //////////\n\n  /// @notice This method can be used by the controller to extract mistakenly\n  ///  sent tokens to this contract.\n  /// @param _token The address of the token contract that you want to recover\n  ///  set to 0 in case you want to extract ether.\n  function claimTokens(address _token) public onlyController {\n    if (_token == 0x0) {\n      controller.transfer(this.balance);\n      return;\n    }\n\n    MiniMeToken token = MiniMeToken(_token);\n    uint balance = token.balanceOf(this);\n    token.transfer(controller, balance);\n    ClaimedTokens(_token, controller, balance);\n  }\n\n  ////////////////\n  // Events\n  ////////////////\n  event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n  event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n  event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n  event Approval(\n    address indexed _owner,\n    address indexed _spender,\n    uint256 _amount\n  );\n\n}\n\n\n////////////////\n// MiniMeTokenFactory\n////////////////\n\n/// @dev This contract is used to generate clone contracts from a contract.\n///  In solidity this is the way to create a contract from a contract of the\n///  same class\ncontract MiniMeTokenFactory {\n\n  /// @notice Update the DApp by creating a new token with new functionalities\n  ///  the msg.sender becomes the controller of this clone token\n  /// @param _parentToken Address of the token being cloned\n  /// @param _snapshotBlock Block of the parent token that will\n  ///  determine the initial distribution of the clone token\n  /// @param _tokenName Name of the new token\n  /// @param _decimalUnits Number of decimals of the new token\n  /// @param _tokenSymbol Token Symbol for the new token\n  /// @param _transfersEnabled If true, tokens will be able to be transferred\n  /// @return The address of the new token contract\n  function createCloneToken(\n    address _parentToken,\n    uint _snapshotBlock,\n    string _tokenName,\n    uint8 _decimalUnits,\n    string _tokenSymbol,\n    bool _transfersEnabled\n  ) public returns (MiniMeToken) {\n    MiniMeToken newToken = new MiniMeToken(\n      this,\n      _parentToken,\n      _snapshotBlock,\n      _tokenName,\n      _decimalUnits,\n      _tokenSymbol,\n      _transfersEnabled\n    );\n\n    newToken.changeController(msg.sender);\n    return newToken;\n  }\n}\n",
  "bytecode": "608060405234801561001057600080fd5b50613338806100206000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680635b7b72c114610046575b600080fd5b34801561005257600080fd5b50610136600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803515159060200190929190505050610178565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000803088888888888861018a6103ca565b808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001868152602001806020018560ff1660ff1681526020018060200184151515158152602001838103835287818151815260200191508051906020019080838360005b8381101561024b578082015181840152602081019050610230565b50505050905090810190601f1680156102785780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156102b1578082015181840152602081019050610296565b50505050905090810190601f1680156102de5780820380516001836020036101000a031916815260200191505b509950505050505050505050604051809103906000f080158015610306573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff16633cebb823336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156103a457600080fd5b505af11580156103b8573d6000803e3d6000fd5b50505050809150509695505050505050565b604051612f32806103db83390190560060806040526040805190810160405280600781526020017f4d4d545f302e3200000000000000000000000000000000000000000000000000815250600490805190602001906200005192919062000207565b503480156200005f57600080fd5b5060405162002f3238038062002f3283398101806040528101908080519060200190929190805190602001909291908051906020019092919080518201929190602001805190602001909291908051820192919060200180519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600b60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600190805190602001906200015c92919062000207565b5082600260006101000a81548160ff021916908360ff16021790555081600390805190602001906200019092919062000207565b5085600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460068190555080600b60006101000a81548160ff0219169083151502179055504360078190555050505050505050620002b6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024a57805160ff19168380011785556200027b565b828001600101855582156200027b579182015b828111156200027a5782518255916020019190600101906200025d565b5b5090506200028a91906200028e565b5090565b620002b391905b80821115620002af57600081600090555060010162000295565b5090565b90565b612c6c80620002c66000396000f300608060405260043610610149576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610283578063095ea7b314610313578063176345141461037857806318160ddd146103a357806323b872dd146103ce578063313ce567146104535780633cebb823146104845780634ee2cd7e146104c757806354fd4d50146105285780636638c087146105b857806370a08231146106ca57806380a5400114610721578063827f32c01461077857806395d89b41146107dd578063981b24d01461086d578063a9059cbb146108ae578063bef97c8714610913578063c5bcc4f114610942578063cae9ca511461096d578063d3ce77fe14610a18578063dd62ed3e14610a7d578063df8de3e714610af4578063e77772fe14610b37578063f41e60c514610b8e578063f77c479114610bbd575b6101736000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610c14565b151561017e57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f48c305434336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506020604051808303818588803b15801561023a57600080fd5b505af115801561024e573d6000803e3d6000fd5b50505050506040513d602081101561026557600080fd5b8101908080519060200190929190505050151561028157600080fd5b005b34801561028f57600080fd5b50610298610c50565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102d85780820151818401526020810190506102bd565b50505050905090810190601f1680156103055780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561031f57600080fd5b5061035e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cee565b604051808215151515815260200191505060405180910390f35b34801561038457600080fd5b5061038d610fff565b6040518082815260200191505060405180910390f35b3480156103af57600080fd5b506103b8611005565b6040518082815260200191505060405180910390f35b3480156103da57600080fd5b50610439600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611015565b604051808215151515815260200191505060405180910390f35b34801561045f57600080fd5b506104686111b4565b604051808260ff1660ff16815260200191505060405180910390f35b34801561049057600080fd5b506104c5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111c7565b005b3480156104d357600080fd5b50610512600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112c8565b6040518082815260200191505060405180910390f35b34801561053457600080fd5b5061053d611554565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561057d578082015181840152602081019050610562565b50505050905090810190601f1680156105aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105c457600080fd5b50610688600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291908035151590602001909291905050506115f2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106d657600080fd5b5061070b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611906565b6040518082815260200191505060405180910390f35b34801561072d57600080fd5b50610736611919565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561078457600080fd5b506107c3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061193f565b604051808215151515815260200191505060405180910390f35b3480156107e957600080fd5b506107f2611a89565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610832578082015181840152602081019050610817565b50505050905090810190601f16801561085f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561087957600080fd5b5061089860048036038101908080359060200190929190505050611b27565b6040518082815260200191505060405180910390f35b3480156108ba57600080fd5b506108f9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611cc7565b604051808215151515815260200191505060405180910390f35b34801561091f57600080fd5b50610928611cf9565b604051808215151515815260200191505060405180910390f35b34801561094e57600080fd5b50610957611d0c565b6040518082815260200191505060405180910390f35b34801561097957600080fd5b506109fe600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611d12565b604051808215151515815260200191505060405180910390f35b348015610a2457600080fd5b50610a63600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611e90565b604051808215151515815260200191505060405180910390f35b348015610a8957600080fd5b50610ade600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611fd6565b6040518082815260200191505060405180910390f35b348015610b0057600080fd5b50610b35600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061205d565b005b348015610b4357600080fd5b50610b4c6123c5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b9a57600080fd5b50610bbb6004803603810190808035151590602001909291905050506123eb565b005b348015610bc957600080fd5b50610bd2612463565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff161415610c3f5760009150610c4a565b823b90506000811191505b50919050565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ce65780601f10610cbb57610100808354040283529160200191610ce6565b820191906000526020600020905b815481529060010190602001808311610cc957829003601f168201915b505050505081565b6000600b60009054906101000a900460ff161515610d0b57600080fd5b6000821480610d9657506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515610da157600080fd5b610dcb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610c14565b15610f0f576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da682aeb3385856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610ec857600080fd5b505af1158015610edc573d6000803e3d6000fd5b505050506040513d6020811015610ef257600080fd5b81019080805190602001909291905050501515610f0e57600080fd5b5b81600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60075481565b600061101043611b27565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561119e57600b60009054906101000a900460ff16151561108857600080fd5b81600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561111357600080fd5b81600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b6111a9848484612488565b600190509392505050565b600260009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561122257600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fe9f803dafbbb3677c472caf36bb0918eca91152ea7aa6591e85e3d7783fdcbdb81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b600080600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905014806113a1575081600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548110151561136357fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b15611503576000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156114fa57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ee2cd7e8461143385600654612813565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156114b857600080fd5b505af11580156114cc573d6000803e3d6000fd5b505050506040513d60208110156114e257600080fd5b8101908080519060200190929190505050905061154e565b6000905061154e565b61154b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208361282c565b90505b92915050565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115ea5780601f106115bf576101008083540402835291602001916115ea565b820191906000526020600020905b8154815290600101906020018083116115cd57829003601f168201915b505050505081565b6000806000841415611602574393505b600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b7b72c130868a8a8a896040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001868152602001806020018560ff1660ff1681526020018060200184151515158152602001838103835287818151815260200191508051906020019080838360005b838110156117035780820151818401526020810190506116e8565b50505050905090810190601f1680156117305780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b8381101561176957808201518184015260208101905061174e565b50505050905090810190601f1680156117965780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b1580156117bb57600080fd5b505af11580156117cf573d6000803e3d6000fd5b505050506040513d60208110156117e557600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff16633cebb823336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561189357600080fd5b505af11580156118a7573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff167f086c875b377f900b07ce03575813022f05dd10ed7640b5282cf6d3c3fc352ade856040518082815260200191505060405180910390a28091505095945050505050565b600061191282436112c8565b9050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561199f57600080fd5b6119a7611005565b915081848301101515156119ba57600080fd5b6119c385611906565b905080848201101515156119d657600080fd5b6119e3600a858401612a3b565b611a2d600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020858301612a3b565b8473ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b1f5780601f10611af457610100808354040283529160200191611b1f565b820191906000526020600020905b815481529060010190602001808311611b0257829003601f168201915b505050505081565b600080600a805490501480611b86575081600a6000815481101515611b4857fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b15611cb4576000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611cab57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663981b24d0611c1784600654612813565b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015611c6957600080fd5b505af1158015611c7d573d6000803e3d6000fd5b505050506040513d6020811015611c9357600080fd5b81019080805190602001909291905050509050611cc2565b60009050611cc2565b611cbf600a8361282c565b90505b919050565b6000600b60009054906101000a900460ff161515611ce457600080fd5b611cef338484612488565b6001905092915050565b600b60009054906101000a900460ff1681565b60065481565b6000611d1e8484610cee565b1515611d2957600080fd5b8373ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611e1e578082015181840152602081019050611e03565b50505050905090810190601f168015611e4b5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015611e6d57600080fd5b505af1158015611e81573d6000803e3d6000fd5b50505050600190509392505050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ef057600080fd5b611ef8611005565b9150838210151515611f0957600080fd5b611f1285611906565b9050838110151515611f2357600080fd5b611f30600a858403612a3b565b611f7a600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020858303612a3b565b60008573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156120bb57600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff16141561215e576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015612158573d6000803e3d6000fd5b506123c0565b8291508173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156121fc57600080fd5b505af1158015612210573d6000803e3d6000fd5b505050506040513d602081101561222657600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156122fd57600080fd5b505af1158015612311573d6000803e3d6000fd5b505050506040513d602081101561232757600080fd5b8101908080519060200190929190505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c836040518082815260200191505060405180910390a35b505050565b600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561244657600080fd5b80600b60006101000a81548160ff02191690831515021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008314156124fe578373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a361280c565b4360065410151561250e57600080fd5b60008473ffffffffffffffffffffffffffffffffffffffff161415801561256157503073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b151561256c57600080fd5b61257685436112c8565b915082821015151561258757600080fd5b6125b16000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610c14565b156126f5576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a3931498686866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156126ae57600080fd5b505af11580156126c2573d6000803e3d6000fd5b505050506040513d60208110156126d857600080fd5b810190808051906020019092919050505015156126f457600080fd5b5b61273f600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848403612a3b565b61274984436112c8565b9050808382011015151561275c57600080fd5b6127a6600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848301612a3b565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b5050505050565b60008183106128225781612824565b825b905092915050565b6000806000806000868054905014156128485760009350612a32565b85600187805490500381548110151561285d57fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16851015156128f9578560018780549050038154811015156128b657fe5b9060005260206000200160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff169350612a32565b85600081548110151561290857fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168510156129545760009350612a32565b60009250600186805490500391505b828211156129e557600260018484010181151561297c57fe5b04905084868281548110151561298e57fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff161115156129d9578092506129e0565b6001810391505b612963565b85838154811015156129f357fe5b9060005260206000200160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1693505b50505092915050565b600080600084805490501480612aa0575043846001868054905003815481101515612a6257fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16105b15612b4c5783848054809190600101612ab99190612baf565b815481101515612ac557fe5b906000526020600020019150438260000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550828260000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550612ba9565b836001858054905003815481101515612b6157fe5b906000526020600020019050828160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b50505050565b815481835581811115612bd657818360005260206000209182019101612bd59190612bdb565b5b505050565b612c3d91905b80821115612c3957600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556000820160106101000a8154906fffffffffffffffffffffffffffffffff021916905550600101612be1565b5090565b905600a165627a7a7230582075154579bba108eb2c842cb606fe83d5d8f4a62a79c69b8f8a03c62c427d218d0029a165627a7a7230582039b19d0d891bde2ce0d552ca4d7c91c81debcbb7ed6a000987a03b33b2f77d960029"
}