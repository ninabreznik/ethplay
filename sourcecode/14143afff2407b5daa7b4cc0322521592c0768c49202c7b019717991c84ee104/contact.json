{
  "address": "0x163af66ae287eb89554bfd2de10f7c3ac9fedf84",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DataEquip",
  "compilerVersion": "v0.4.25-nightly.2018.5.18+commit.4d7b092c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-17\n*/\n\n/* ==================================================================== */\n/* Copyright (c) 2018 The CryptoRacing Project.  All rights reserved.\n/* \n/*   The first idle car race game of blockchain                 \n/* ==================================================================== */\n\npragma solidity ^0.4.20;\n\n/// @title ERC-165 Standard Interface Detection\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\ninterface ERC165 {\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\ncontract ERC721 is ERC165 {\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n    function balanceOf(address _owner) external view returns (uint256);\n    function ownerOf(uint256 _tokenId) external view returns (address);\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external;\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n    function approve(address _approved, uint256 _tokenId) external;\n    function setApprovalForAll(address _operator, bool _approved) external;\n    function getApproved(uint256 _tokenId) external view returns (address);\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard\ninterface ERC721TokenReceiver {\n\tfunction onERC721Received(address _from, uint256 _tokenId, bytes data) external returns(bytes4);\n}\n\ncontract AccessAdmin {\n    bool public isPaused = false;\n    address public addrAdmin;  \n\n    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\n\n    function AccessAdmin() public {\n        addrAdmin = msg.sender;\n    }  \n\n\n    modifier onlyAdmin() {\n        require(msg.sender == addrAdmin);\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(!isPaused);\n        _;\n    }\n\n    modifier whenPaused {\n        require(isPaused);\n        _;\n    }\n\n    function setAdmin(address _newAdmin) external onlyAdmin {\n        require(_newAdmin != address(0));\n        AdminTransferred(addrAdmin, _newAdmin);\n        addrAdmin = _newAdmin;\n    }\n\n    function doPause() external onlyAdmin whenNotPaused {\n        isPaused = true;\n    }\n\n    function doUnpause() external onlyAdmin whenPaused {\n        isPaused = false;\n    }\n}\n\ncontract AccessService is AccessAdmin {\n    address public addrService;\n    address public addrFinance;\n\n    modifier onlyService() {\n        require(msg.sender == addrService);\n        _;\n    }\n\n    modifier onlyFinance() {\n        require(msg.sender == addrFinance);\n        _;\n    }\n\n    function setService(address _newService) external {\n        require(msg.sender == addrService || msg.sender == addrAdmin);\n        require(_newService != address(0));\n        addrService = _newService;\n    }\n\n    function setFinance(address _newFinance) external {\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n        require(_newFinance != address(0));\n        addrFinance = _newFinance;\n    }\n\n    function withdraw(address _target, uint256 _amount) \n        external \n    {\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n        require(_amount > 0);\n        address receiver = _target == address(0) ? addrFinance : _target;\n        uint256 balance = this.balance;\n        if (_amount < balance) {\n            receiver.transfer(_amount);\n        } else {\n            receiver.transfer(this.balance);\n        }      \n    }\n}\n\n\ninterface IDataEquip {\n    function isEquiped(address _target, uint256 _tokenId) external view returns(bool);\n    function isEquipedAny2(address _target, uint256 _tokenId1, uint256 _tokenId2) external view returns(bool);\n    function isEquipedAny3(address _target, uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3) external view returns(bool);\n}\n\n\ninterface IRaceCoin {\n    function addTotalEtherPool(uint256 amount) external;\n    function addPlayerToList(address player) external;\n    function increasePlayersAttribute(address player, uint16[13] param) external;\n    function reducePlayersAttribute(address player, uint16[13] param) external;\n}\n\ncontract Random {\n    uint256 _seed;\n\n    function _rand() internal returns (uint256) {\n        _seed = uint256(keccak256(_seed, block.blockhash(block.number - 1), block.coinbase, block.difficulty));\n        return _seed;\n    }\n\n    function _randBySeed(uint256 _outSeed) internal view returns (uint256) {\n        return uint256(keccak256(_outSeed, block.blockhash(block.number - 1), block.coinbase, block.difficulty));\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract RaceToken is ERC721, AccessAdmin {\n    /// @dev The equipment info\n    struct Fashion {\n        uint16 equipmentId;             // 0  Equipment ID\n        uint16 quality;     \t        // 1  Rarity: 1 Coarse/2 Good/3 Rare/4 Epic/5 Legendary\n        uint16 pos;         \t        // 2  Slots: 1 Engine/2 Turbine/3 BodySystem/4 Pipe/5 Suspension/6 NO2/7 Tyre/8 Transmission/9 Car\n        uint16 production;    \t        // 3  Race bonus productivity\n        uint16 attack;\t                // 4  Attack\n        uint16 defense;                 // 5  Defense\n        uint16 plunder;     \t        // 6  Plunder\n        uint16 productionMultiplier;    // 7  Percent value\n        uint16 attackMultiplier;     \t// 8  Percent value\n        uint16 defenseMultiplier;     \t// 9  Percent value\n        uint16 plunderMultiplier;     \t// 10 Percent value\n        uint16 level;       \t        // 11 level\n        uint16 isPercent;   \t        // 12  Percent value\n    }\n\n    /// @dev All equipments tokenArray (not exceeding 2^32-1)\n    Fashion[] public fashionArray;\n\n    /// @dev Amount of tokens destroyed\n    uint256 destroyFashionCount;\n\n    /// @dev Equipment token ID belong to owner address\n    mapping (uint256 => address) fashionIdToOwner;\n\n    /// @dev Equipments owner by the owner (array)\n    mapping (address => uint256[]) ownerToFashionArray;\n\n    /// @dev Equipment token ID search in owner array\n    mapping (uint256 => uint256) fashionIdToOwnerIndex;\n\n    /// @dev The authorized address for each Race\n    mapping (uint256 => address) fashionIdToApprovals;\n\n    /// @dev The authorized operators for each address\n    mapping (address => mapping (address => bool)) operatorToApprovals;\n\n    /// @dev Trust contract\n    mapping (address => bool) actionContracts;\n\n\t\n    function setActionContract(address _actionAddr, bool _useful) external onlyAdmin {\n        actionContracts[_actionAddr] = _useful;\n    }\n\n    function getActionContract(address _actionAddr) external view onlyAdmin returns(bool) {\n        return actionContracts[_actionAddr];\n    }\n\n    /// @dev This emits when the approved address for an Race is changed or reaffirmed.\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /// @dev This emits when the equipment ownership changed \n    event Transfer(address indexed from, address indexed to, uint256 tokenId);\n\n    /// @dev This emits when the equipment created\n    event CreateFashion(address indexed owner, uint256 tokenId, uint16 equipmentId, uint16 quality, uint16 pos, uint16 level, uint16 createType);\n\n    /// @dev This emits when the equipment's attributes changed\n    event ChangeFashion(address indexed owner, uint256 tokenId, uint16 changeType);\n\n    /// @dev This emits when the equipment destroyed\n    event DeleteFashion(address indexed owner, uint256 tokenId, uint16 deleteType);\n    \n    function RaceToken() public {\n        addrAdmin = msg.sender;\n        fashionArray.length += 1;\n    }\n\n    // modifier\n    /// @dev Check if token ID is valid\n    modifier isValidToken(uint256 _tokenId) {\n        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\n        require(fashionIdToOwner[_tokenId] != address(0)); \n        _;\n    }\n\n    modifier canTransfer(uint256 _tokenId) {\n        address owner = fashionIdToOwner[_tokenId];\n        require(msg.sender == owner || msg.sender == fashionIdToApprovals[_tokenId] || operatorToApprovals[owner][msg.sender]);\n        _;\n    }\n\n    // ERC721\n    function supportsInterface(bytes4 _interfaceId) external view returns(bool) {\n        // ERC165 || ERC721 || ERC165^ERC721\n        return (_interfaceId == 0x01ffc9a7 || _interfaceId == 0x80ac58cd || _interfaceId == 0x8153916a) && (_interfaceId != 0xffffffff);\n    }\n        \n    function name() public pure returns(string) {\n        return \"Race Token\";\n    }\n\n    function symbol() public pure returns(string) {\n        return \"Race\";\n    }\n\n    /// @dev Search for token quantity address\n    /// @param _owner Address that needs to be searched\n    /// @return Returns token quantity\n    function balanceOf(address _owner) external view returns(uint256) {\n        require(_owner != address(0));\n        return ownerToFashionArray[_owner].length;\n    }\n\n    /// @dev Find the owner of an Race\n    /// @param _tokenId The tokenId of Race\n    /// @return Give The address of the owner of this Race\n    function ownerOf(uint256 _tokenId) external view /*isValidToken(_tokenId)*/ returns (address owner) {\n        return fashionIdToOwner[_tokenId];\n    }\n\n    /// @dev Transfers the ownership of an Race from one address to another address\n    /// @param _from The current owner of the Race\n    /// @param _to The new owner\n    /// @param _tokenId The Race to transfer\n    /// @param data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \n        external\n        whenNotPaused\n    {\n        _safeTransferFrom(_from, _to, _tokenId, data);\n    }\n\n    /// @dev Transfers the ownership of an Race from one address to another address\n    /// @param _from The current owner of the Race\n    /// @param _to The new owner\n    /// @param _tokenId The Race to transfer\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) \n        external\n        whenNotPaused\n    {\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\n    }\n\n    /// @dev Transfer ownership of an Race, '_to' must be a vaild address, or the Race will lost\n    /// @param _from The current owner of the Race\n    /// @param _to The new owner\n    /// @param _tokenId The Race to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId)\n        external\n        whenNotPaused\n        isValidToken(_tokenId)\n        canTransfer(_tokenId)\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner == _from);\n        \n        _transfer(_from, _to, _tokenId);\n    }\n\n    /// @dev Set or reaffirm the approved address for an Race\n    /// @param _approved The new approved Race controller\n    /// @param _tokenId The Race to approve\n    function approve(address _approved, uint256 _tokenId)\n        external\n        whenNotPaused\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(msg.sender == owner || operatorToApprovals[owner][msg.sender]);\n\n        fashionIdToApprovals[_tokenId] = _approved;\n        Approval(owner, _approved, _tokenId);\n    }\n\n    /// @dev Enable or disable approval for a third party (\"operator\") to manage all your asset.\n    /// @param _operator Address to add to the set of authorized operators.\n    /// @param _approved True if the operators is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved) \n        external \n        whenNotPaused\n    {\n        operatorToApprovals[msg.sender][_operator] = _approved;\n        ApprovalForAll(msg.sender, _operator, _approved);\n    }\n\n    /// @dev Get the approved address for a single Race\n    /// @param _tokenId The Race to find the approved address for\n    /// @return The approved address for this Race, or the zero address if there is none\n    function getApproved(uint256 _tokenId) external view isValidToken(_tokenId) returns (address) {\n        return fashionIdToApprovals[_tokenId];\n    }\n\n    /// @dev Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the Races\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\n        return operatorToApprovals[_owner][_operator];\n    }\n\n    /// @dev Count Races tracked by this contract\n    /// @return A count of valid Races tracked by this contract, where each one of\n    ///  them has an assigned and queryable owner not equal to the zero address\n    function totalSupply() external view returns (uint256) {\n        return fashionArray.length - destroyFashionCount - 1;\n    }\n\n    /// @dev Do the real transfer with out any condition checking\n    /// @param _from The old owner of this Race(If created: 0x0)\n    /// @param _to The new owner of this Race \n    /// @param _tokenId The tokenId of the Race\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        if (_from != address(0)) {\n            uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\n            uint256[] storage fsArray = ownerToFashionArray[_from];\n            require(fsArray[indexFrom] == _tokenId);\n\n            // If the Race is not the element of array, change it to with the last\n            if (indexFrom != fsArray.length - 1) {\n                uint256 lastTokenId = fsArray[fsArray.length - 1];\n                fsArray[indexFrom] = lastTokenId; \n                fashionIdToOwnerIndex[lastTokenId] = indexFrom;\n            }\n            fsArray.length -= 1; \n            \n            if (fashionIdToApprovals[_tokenId] != address(0)) {\n                delete fashionIdToApprovals[_tokenId];\n            }      \n        }\n\n        // Give the Race to '_to'\n        fashionIdToOwner[_tokenId] = _to;\n        ownerToFashionArray[_to].push(_tokenId);\n        fashionIdToOwnerIndex[_tokenId] = ownerToFashionArray[_to].length - 1;\n        \n        Transfer(_from != address(0) ? _from : this, _to, _tokenId);\n    }\n\n    /// @dev Actually perform the safeTransferFrom\n    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \n        internal\n        isValidToken(_tokenId) \n        canTransfer(_tokenId)\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner == _from);\n        \n        _transfer(_from, _to, _tokenId);\n\n        // Do the callback after everything is done to avoid reentrancy attack\n        uint256 codeSize;\n        assembly { codeSize := extcodesize(_to) }\n        if (codeSize == 0) {\n            return;\n        }\n        bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(_from, _tokenId, data);\n        // bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\")) = 0xf0b9e5ba;\n        require(retval == 0xf0b9e5ba);\n    }\n\n    //----------------------------------------------------------------------------------------------------------\n\n    /// @dev Equipment creation\n    /// @param _owner Owner of the equipment created\n    /// @param _attrs Attributes of the equipment created\n    /// @return Token ID of the equipment created\n    function createFashion(address _owner, uint16[13] _attrs, uint16 _createType) \n        external \n        whenNotPaused\n        returns(uint256)\n    {\n        require(actionContracts[msg.sender]);\n        require(_owner != address(0));\n\n        uint256 newFashionId = fashionArray.length;\n        require(newFashionId < 4294967296);\n\n        fashionArray.length += 1;\n        Fashion storage fs = fashionArray[newFashionId];\n        fs.equipmentId = _attrs[0];\n        fs.quality = _attrs[1];\n        fs.pos = _attrs[2];\n        if (_attrs[3] != 0) {\n            fs.production = _attrs[3];\n        }\n        \n        if (_attrs[4] != 0) {\n            fs.attack = _attrs[4];\n        }\n\t\t\n\t\tif (_attrs[5] != 0) {\n            fs.defense = _attrs[5];\n        }\n       \n        if (_attrs[6] != 0) {\n            fs.plunder = _attrs[6];\n        }\n        \n        if (_attrs[7] != 0) {\n            fs.productionMultiplier = _attrs[7];\n        }\n\n        if (_attrs[8] != 0) {\n            fs.attackMultiplier = _attrs[8];\n        }\n\n        if (_attrs[9] != 0) {\n            fs.defenseMultiplier = _attrs[9];\n        }\n\n        if (_attrs[10] != 0) {\n            fs.plunderMultiplier = _attrs[10];\n        }\n\n        if (_attrs[11] != 0) {\n            fs.level = _attrs[11];\n        }\n\n        if (_attrs[12] != 0) {\n            fs.isPercent = _attrs[12];\n        }\n        \n        _transfer(0, _owner, newFashionId);\n        CreateFashion(_owner, newFashionId, _attrs[0], _attrs[1], _attrs[2], _attrs[11], _createType);\n        return newFashionId;\n    }\n\n    /// @dev One specific attribute of the equipment modified\n    function _changeAttrByIndex(Fashion storage _fs, uint16 _index, uint16 _val) internal {\n        if (_index == 3) {\n            _fs.production = _val;\n        } else if(_index == 4) {\n            _fs.attack = _val;\n        } else if(_index == 5) {\n            _fs.defense = _val;\n        } else if(_index == 6) {\n            _fs.plunder = _val;\n        }else if(_index == 7) {\n            _fs.productionMultiplier = _val;\n        }else if(_index == 8) {\n            _fs.attackMultiplier = _val;\n        }else if(_index == 9) {\n            _fs.defenseMultiplier = _val;\n        }else if(_index == 10) {\n            _fs.plunderMultiplier = _val;\n        } else if(_index == 11) {\n            _fs.level = _val;\n        } \n       \n    }\n\n    /// @dev Equiment attributes modified (max 4 stats modified)\n    /// @param _tokenId Equipment Token ID\n    /// @param _idxArray Stats order that must be modified\n    /// @param _params Stat value that must be modified\n    /// @param _changeType Modification type such as enhance, socket, etc.\n    function changeFashionAttr(uint256 _tokenId, uint16[4] _idxArray, uint16[4] _params, uint16 _changeType) \n        external \n        whenNotPaused\n        isValidToken(_tokenId) \n    {\n        require(actionContracts[msg.sender]);\n\n        Fashion storage fs = fashionArray[_tokenId];\n        if (_idxArray[0] > 0) {\n            _changeAttrByIndex(fs, _idxArray[0], _params[0]);\n        }\n\n        if (_idxArray[1] > 0) {\n            _changeAttrByIndex(fs, _idxArray[1], _params[1]);\n        }\n\n        if (_idxArray[2] > 0) {\n            _changeAttrByIndex(fs, _idxArray[2], _params[2]);\n        }\n\n        if (_idxArray[3] > 0) {\n            _changeAttrByIndex(fs, _idxArray[3], _params[3]);\n        }\n\n        ChangeFashion(fashionIdToOwner[_tokenId], _tokenId, _changeType);\n    }\n\n    /// @dev Equipment destruction\n    /// @param _tokenId Equipment Token ID\n    /// @param _deleteType Destruction type, such as craft\n    function destroyFashion(uint256 _tokenId, uint16 _deleteType)\n        external \n        whenNotPaused\n        isValidToken(_tokenId) \n    {\n        require(actionContracts[msg.sender]);\n\n        address _from = fashionIdToOwner[_tokenId];\n        uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\n        uint256[] storage fsArray = ownerToFashionArray[_from]; \n        require(fsArray[indexFrom] == _tokenId);\n\n        if (indexFrom != fsArray.length - 1) {\n            uint256 lastTokenId = fsArray[fsArray.length - 1];\n            fsArray[indexFrom] = lastTokenId; \n            fashionIdToOwnerIndex[lastTokenId] = indexFrom;\n        }\n        fsArray.length -= 1; \n\n        fashionIdToOwner[_tokenId] = address(0);\n        delete fashionIdToOwnerIndex[_tokenId];\n        destroyFashionCount += 1;\n\n        Transfer(_from, 0, _tokenId);\n\n        DeleteFashion(_from, _tokenId, _deleteType);\n    }\n\n    /// @dev Safe transfer by trust contracts\n    function safeTransferByContract(uint256 _tokenId, address _to) \n        external\n        whenNotPaused\n    {\n        require(actionContracts[msg.sender]);\n\n        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner != _to);\n\n        _transfer(owner, _to, _tokenId);\n    }\n\n    //----------------------------------------------------------------------------------------------------------\n\n    /// @dev Get fashion attrs by tokenId front\n    function getFashionFront(uint256 _tokenId) external view isValidToken(_tokenId) returns (uint256[14] datas) {\n        Fashion storage fs = fashionArray[_tokenId];\n        datas[0] = fs.equipmentId;\n        datas[1] = fs.quality;\n        datas[2] = fs.pos;\n        datas[3] = fs.production;\n        datas[4] = fs.attack;\n        datas[5] = fs.defense;\n        datas[6] = fs.plunder;\n        datas[7] = fs.productionMultiplier;\n        datas[8] = fs.attackMultiplier;\n        datas[9] = fs.defenseMultiplier;\n        datas[10] = fs.plunderMultiplier;\n        datas[11] = fs.level;\n        datas[12] = fs.isPercent; \n        datas[13] = _tokenId;      \n    }\n\n    /// @dev Get fashion attrs by tokenId back\n    function getFashion(uint256 _tokenId) external view isValidToken(_tokenId) returns (uint16[13] datas) {\n        Fashion storage fs = fashionArray[_tokenId];\n        datas[0] = fs.equipmentId;\n        datas[1] = fs.quality;\n        datas[2] = fs.pos;\n        datas[3] = fs.production;\n        datas[4] = fs.attack;\n        datas[5] = fs.defense;\n        datas[6] = fs.plunder;\n        datas[7] = fs.productionMultiplier;\n        datas[8] = fs.attackMultiplier;\n        datas[9] = fs.defenseMultiplier;\n        datas[10] = fs.plunderMultiplier;\n        datas[11] = fs.level;\n        datas[12] = fs.isPercent;      \n    }\n\n\n    /// @dev Get tokenIds and flags by owner\n    function getOwnFashions(address _owner) external view returns(uint256[] tokens, uint32[] flags) {\n        require(_owner != address(0));\n        uint256[] storage fsArray = ownerToFashionArray[_owner];\n        uint256 length = fsArray.length;\n        tokens = new uint256[](length);\n        flags = new uint32[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            tokens[i] = fsArray[i];\n            Fashion storage fs = fashionArray[fsArray[i]];\n            flags[i] = uint32(uint32(fs.equipmentId) * 10000 + uint32(fs.quality) * 100 + fs.pos);\n        }\n    }\n\n\n    /// @dev Race token info returned based on Token ID transfered (64 at most)\n    function getFashionsAttrs(uint256[] _tokens) external view returns(uint256[] attrs) {\n        uint256 length = _tokens.length;\n        attrs = new uint256[](length * 14);\n        uint256 tokenId;\n        uint256 index;\n        for (uint256 i = 0; i < length; ++i) {\n            tokenId = _tokens[i];\n            if (fashionIdToOwner[tokenId] != address(0)) {\n                index = i * 14;\n                Fashion storage fs = fashionArray[tokenId];\n                attrs[index]     = fs.equipmentId;\n\t\t\t\tattrs[index + 1] = fs.quality;\n                attrs[index + 2] = fs.pos;\n                attrs[index + 3] = fs.production;\n                attrs[index + 4] = fs.attack;\n                attrs[index + 5] = fs.defense;\n                attrs[index + 6] = fs.plunder;\n                attrs[index + 7] = fs.productionMultiplier;\n                attrs[index + 8] = fs.attackMultiplier;\n                attrs[index + 9] = fs.defenseMultiplier;\n                attrs[index + 10] = fs.plunderMultiplier;\n                attrs[index + 11] = fs.level;\n                attrs[index + 12] = fs.isPercent; \n                attrs[index + 13] = tokenId;  \n            }   \n        }\n    }\n}\n\n\n\ncontract DataEquip is AccessService, IDataEquip {\n    event EquipChanged(address indexed _target);\n\n\n    /// @dev RaceToken(NFT) contract address\n    RaceToken public tokenContract;\n\n    IRaceCoin public raceCoinContract;\n\n    mapping (address => uint256[]) public slotlist;\n\n    mapping (uint256 => uint256) public carSlot;\n\n    mapping (uint256 => uint256) public slotEngine;\n    mapping (uint256 => uint256) public slotTurbine;\n    mapping (uint256 => uint256) public slotBodySystem;\n    mapping (uint256 => uint256) public slotPipe;\n    mapping (uint256 => uint256) public slotSuspension;\n    mapping (uint256 => uint256) public slotNO2;\n    mapping (uint256 => uint256) public slotTyre;\n    mapping (uint256 => uint256) public slotTransmission;\n \n\n    function DataEquip(address _nftTokenAddr) public {\n        addrAdmin = msg.sender;\n        addrService = msg.sender;\n        addrFinance = msg.sender;\n\n        tokenContract = RaceToken(_nftTokenAddr);\n    }\n\n    //Set up tournament bonus address\n    function setRaceCoin(address _addr) external onlyAdmin {\n        require(_addr != address(0));\n        raceCoinContract = IRaceCoin(_addr);\n    }\n\n\n    function getCarSlotInt(address _owner, uint256 _carTokenId) public view returns(uint256,uint256,uint256,uint256){\n        require(tokenContract.ownerOf(_carTokenId) == _owner);  \n        return ( slotEngine[_carTokenId],\n                 slotTurbine[_carTokenId],\n                 slotBodySystem[_carTokenId],\n                 slotPipe[_carTokenId]\n                );\n    }\n\n\n    function getCarSlotMult(address _owner, uint256 _carTokenId) public view returns(uint256,uint256,uint256,uint256){\n        require(tokenContract.ownerOf(_carTokenId) == _owner);  \n        return ( slotSuspension[_carTokenId],\n                 slotNO2[_carTokenId],\n                 slotTyre[_carTokenId],\n                 slotTransmission[_carTokenId]\n                );\n    }\n\n\n    \n    function _equipUpOne(address _owner, uint256 _carTokenId, uint256 _partsTokenId) private {\n        require(tokenContract.ownerOf(_carTokenId) == _owner);\n        require(tokenContract.ownerOf(_partsTokenId) == _owner);\n        uint16[13] memory attrs = tokenContract.getFashion(_partsTokenId);\n        uint16 pos = attrs[2];\n        bool isEquip = this.isEquiped(_owner, _partsTokenId);\n\n        uint256[] storage sArray =  slotlist[_owner];\n        uint256 i = 0;\n\n        uint16[13] memory attrsOldParts;\n\n        if(!isEquip){\n            if (pos == 1) {\n                if (slotEngine[_carTokenId] != _partsTokenId) {\n\n                    if(slotEngine[_carTokenId] > 0){\n                        attrsOldParts = tokenContract.getFashion(slotEngine[_carTokenId]);\n                        raceCoinContract.reducePlayersAttribute(_owner, attrsOldParts);\n                    }\n \n                    \n\n                    \n                    for( i = 0; i < sArray.length; i++){\n                        if(sArray[i] == slotEngine[_carTokenId]){\n                            delete sArray[i];\n                        }\n                    }\n\n                    if(slotEngine[_carTokenId] > 0){\n\n                    }else{\n                        carSlot[_carTokenId]++;\n                    }\n\n                    slotEngine[_carTokenId] = _partsTokenId;\n                    slotlist[_owner].push(_partsTokenId);\n                    raceCoinContract.increasePlayersAttribute(_owner, attrs);\n                }\n            } else if (pos == 2) {\n                if (slotTurbine[_carTokenId] != _partsTokenId) {\n                    \n                  \n\n                    if(slotTurbine[_carTokenId] > 0){\n                        attrsOldParts = tokenContract.getFashion(slotTurbine[_carTokenId]);\n                        raceCoinContract.reducePlayersAttribute(_owner, attrsOldParts);\n                    }\n                    \n                   \n                    for( i = 0; i < sArray.length; i++){\n                        if(sArray[i] == slotTurbine[_carTokenId]){\n                            delete sArray[i];\n                        }\n                    }\n\n                    if(slotTurbine[_carTokenId] > 0){\n\n                    }else{\n                        carSlot[_carTokenId]++;\n                    }\n\n                    slotTurbine[_carTokenId] = _partsTokenId;\n                    slotlist[_owner].push(_partsTokenId);\n                    raceCoinContract.increasePlayersAttribute(_owner, attrs);\n                }\n            } else if (pos == 3) {\n                if (slotBodySystem[_carTokenId] != _partsTokenId) {\n\n                   \n                   \n\n                    if(slotBodySystem[_carTokenId] > 0){\n                        attrsOldParts = tokenContract.getFashion(slotBodySystem[_carTokenId]);\n                        raceCoinContract.reducePlayersAttribute(_owner, attrsOldParts);\n                    }\n                    \n                    \n                    for( i = 0; i < sArray.length; i++){\n                        if(sArray[i] == slotBodySystem[_carTokenId]){\n                            delete sArray[i];\n                        }\n                    }\n\n                    if(slotBodySystem[_carTokenId] > 0){\n\n                    }else{\n                        carSlot[_carTokenId]++;\n                    }\n\n                    slotBodySystem[_carTokenId] = _partsTokenId;\n                    slotlist[_owner].push(_partsTokenId);\n                    raceCoinContract.increasePlayersAttribute(_owner, attrs);\n                }\n            } else if (pos == 4) {\n                if (slotPipe[_carTokenId] != _partsTokenId) {\n\n                    \n                   \n\n                    if(slotPipe[_carTokenId] > 0){\n                        attrsOldParts = tokenContract.getFashion(slotPipe[_carTokenId]);\n                        raceCoinContract.reducePlayersAttribute(_owner, attrsOldParts);\n                    }\n\n                    \n\n                    for( i = 0; i < sArray.length; i++){\n                        if(sArray[i] == slotPipe[_carTokenId]){\n                            delete sArray[i];\n                        }\n                    }\n\n                    if(slotPipe[_carTokenId] > 0){\n\n                    }else{\n                        carSlot[_carTokenId]++;\n                    }\n\n                    slotPipe[_carTokenId] = _partsTokenId;\n                    slotlist[_owner].push(_partsTokenId);\n                    raceCoinContract.increasePlayersAttribute(_owner, attrs);\n                }\n            } else if (pos == 5) {\n                if (slotSuspension[_carTokenId] != _partsTokenId) {\n\n                   \n                  \n\n                    if(slotSuspension[_carTokenId] > 0){\n                        attrsOldParts = tokenContract.getFashion(slotSuspension[_carTokenId]);\n                        raceCoinContract.reducePlayersAttribute(_owner, attrsOldParts);\n                    }\n\n                    \n\n                    for( i = 0; i < sArray.length; i++){\n                        if(sArray[i] == slotSuspension[_carTokenId]){\n                            delete sArray[i];\n                        }\n                    }\n\n                    if(slotSuspension[_carTokenId] > 0){\n\n                    }else{\n                        carSlot[_carTokenId]++;\n                    }\n\n                    slotSuspension[_carTokenId] = _partsTokenId;\n                    slotlist[_owner].push(_partsTokenId);\n                    raceCoinContract.increasePlayersAttribute(_owner, attrs);\n                }\n            } else if (pos == 6) {\n                if (slotNO2[_carTokenId] != _partsTokenId) {\n\n                   \n                   \n\n                    if(slotNO2[_carTokenId] > 0){\n                        attrsOldParts = tokenContract.getFashion(slotNO2[_carTokenId]);\n                        raceCoinContract.reducePlayersAttribute(_owner, attrsOldParts);\n                    }\n\n                    \n\n                    for( i = 0; i < sArray.length; i++){\n                        if(sArray[i] == slotNO2[_carTokenId]){\n                            delete sArray[i];\n                        }\n                    }\n\n                    if(slotNO2[_carTokenId] > 0){\n\n                    }else{\n                        carSlot[_carTokenId]++;\n                    }\n\n                    slotNO2[_carTokenId] = _partsTokenId;\n                    slotlist[_owner].push(_partsTokenId);\n                    raceCoinContract.increasePlayersAttribute(_owner, attrs);\n                }\n            } else if (pos == 7) {\n                if (slotTyre[_carTokenId] != _partsTokenId) {\n\n                   \n                 \n\n                    if(slotTyre[_carTokenId] > 0){\n                         attrsOldParts = tokenContract.getFashion(slotTyre[_carTokenId]);\n                        raceCoinContract.reducePlayersAttribute(_owner, attrsOldParts);\n                    }\n\n                   \n\n\n                    for( i = 0; i < sArray.length; i++){\n                        if(sArray[i] == slotTyre[_carTokenId]){\n                            delete sArray[i];\n                        }\n                    }\n\n                    if(slotTyre[_carTokenId] > 0){\n\n                    }else{\n                        carSlot[_carTokenId]++;\n                    }\n\n                    slotTyre[_carTokenId] = _partsTokenId;\n                    slotlist[_owner].push(_partsTokenId);\n                    raceCoinContract.increasePlayersAttribute(_owner, attrs);\n                }\n            } else if (pos == 8) {\n                if (slotTransmission[_carTokenId] != _partsTokenId) {\n\n        \n                  \n\n                    if(slotTransmission[_carTokenId] > 0){\n                        attrsOldParts = tokenContract.getFashion(slotTransmission[_carTokenId]);\n                        raceCoinContract.reducePlayersAttribute(_owner, attrsOldParts);\n                    }\n\n                    \n\n\n                    for( i = 0; i < sArray.length; i++){\n                        if(sArray[i] == slotTransmission[_carTokenId]){\n                            delete sArray[i];\n                        }\n                    }\n\n                    if(slotTransmission[_carTokenId] > 0){\n\n                    }else{\n                        carSlot[_carTokenId]++;\n                    }\n\n                    slotTransmission[_carTokenId] = _partsTokenId;\n                    slotlist[_owner].push(_partsTokenId);\n                    raceCoinContract.increasePlayersAttribute(_owner, attrs);\n                }\n            }\n        }   \n    }\n\n    function _equipDownOne(address _owner, uint256 _carTokenId, uint256 _partsTokenId) private {\n        require(tokenContract.ownerOf(_carTokenId) == _owner);\n        uint16[13] memory attrs = tokenContract.getFashion(_partsTokenId);\n        uint16 pos = attrs[2];\n        bool b = false;\n        if (pos == 1) {\n            if (slotEngine[_carTokenId] != 0) {\n                slotEngine[_carTokenId] = 0;\n                b = true;\n                carSlot[_carTokenId]--;\n            }\n        } else if (pos == 2) {\n            if (slotTurbine[_carTokenId] != 0) {\n                slotTurbine[_carTokenId] = 0;\n                b = true;\n                carSlot[_carTokenId]--;\n            }\n        } else if (pos == 3) {\n            if (slotBodySystem[_carTokenId] != 0) {\n                slotBodySystem[_carTokenId] = 0;\n                b = true;\n                carSlot[_carTokenId]--;\n            }\n        } else if (pos == 4) {\n            if (slotPipe[_carTokenId] != 0) {\n                slotPipe[_carTokenId] = 0;\n                b = true;\n                carSlot[_carTokenId]--;\n            }\n        } else if (pos == 5) {\n            if (slotSuspension[_carTokenId] != 0) {\n                slotSuspension[_carTokenId] = 0;\n                b = true;\n                carSlot[_carTokenId]--;\n            }\n        } else if (pos == 6) {\n            if (slotNO2[_carTokenId] != 0) {\n                slotNO2[_carTokenId] = 0;\n                b = true;\n                carSlot[_carTokenId]--;\n            }\n        } else if (pos == 7) {\n            if (slotTyre[_carTokenId] != 0) {\n                slotTyre[_carTokenId] = 0;\n                b = true;\n                carSlot[_carTokenId]--;\n            }\n        } else if (pos == 8) {\n            if (slotTransmission[_carTokenId] != 0) {\n                slotTransmission[_carTokenId] = 0;\n                b = true;\n                carSlot[_carTokenId]--;\n            }\n        }\n\n        if(b){  \n\n            uint256[] storage sArray =  slotlist[_owner];\n\n            for(uint256 i = 0; i < sArray.length; i++){\n                if(sArray[i] == _partsTokenId){\n                    delete sArray[i];\n                }\n            }\n        }\n\n        raceCoinContract.reducePlayersAttribute(_owner, attrs);\n    }\n\n    function equipUp(uint256 _carTokenId, uint256[8] _tokens) \n        external \n        whenNotPaused\n    {\n        for (uint16 i = 0; i < 8; ++i) {\n            if (_tokens[i] > 0) {\n                _equipUpOne(msg.sender,_carTokenId, _tokens[i]);\n            }  \n        }\n        emit EquipChanged(msg.sender);\n    }\n\n    function equipDown(uint256 _carTokenId, uint256[8] _tokens) \n        external\n        whenNotPaused \n    {\n        for (uint16 i = 0; i < 8; ++i) {\n            if (_tokens[i] > 0) {\n                _equipDownOne(msg.sender,_carTokenId, _tokens[i]);\n            }  \n        }\n        emit EquipChanged(msg.sender);\n    }    \n\n    function isEquiped(address _target, uint256 _tokenId) external view returns(bool) {\n        require(_target != address(0));\n        require(_tokenId > 0);\n\n        uint16[13] memory attrs = tokenContract.getFashion(_tokenId);\n        uint16 pos = attrs[2];\n\n        if(pos == 9){\n\n            if(carSlot[_tokenId] > 0){\n                return true;\n            }\n\n        }else{\n\n            uint256[] memory sArray =  slotlist[_target];\n\n            for(uint256 i = 0; i < sArray.length; i++){\n                if(sArray[i] == _tokenId){\n                    return true;\n                }\n            }\n        }\n\n\n        return false;\n    }\n\n    function isEquipedAny2(address _target, uint256 _tokenId1, uint256 _tokenId2) external view returns(bool) {\n        require(_target != address(0));\n        require(_tokenId1 > 0);\n        require(_tokenId2 > 0);\n\n        uint256[] memory sArray =  slotlist[_target];\n\n        for(uint256 i = 0; i < sArray.length; i++){\n            if(sArray[i] == _tokenId1 || sArray[i] == _tokenId2){\n                return true;\n            }\n        }\n          \n        return false;\n    }\n\n    function isEquipedAny3(address _target, uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3) external view returns(bool) {\n        require(_target != address(0));\n        require(_tokenId1 > 0);\n        require(_tokenId2 > 0);\n        require(_tokenId3 > 0);\n        \n        uint256[] memory sArray =  slotlist[_target];\n\n        for(uint256 i = 0; i < sArray.length; i++){\n            if(sArray[i] == _tokenId1 || sArray[i] == _tokenId2 || sArray[i] == _tokenId3){\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    function getEquipTokens(address _target, uint256 _carTokenId) external view returns(uint256[8] tokens) {\n\n        require(tokenContract.ownerOf(_carTokenId) == _target);\n\n        tokens[0] = slotEngine[_carTokenId];\n        tokens[1] = slotTurbine[_carTokenId];\n        tokens[2] = slotBodySystem[_carTokenId];\n        tokens[3] = slotPipe[_carTokenId];\n        tokens[4] = slotSuspension[_carTokenId];\n        tokens[5] = slotNO2[_carTokenId];\n        tokens[6] = slotTyre[_carTokenId];\n        tokens[7] = slotTransmission[_carTokenId];\n    }\n}",
  "bytecode": "608060405260008060006101000a81548160ff02191690831515021790555034801561002a57600080fd5b506040516020806151c08339810180604052810190808051906020019092919050505033600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061501e806101a26000396000f30060806040526004361061018b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063025f95821461019057806312bcf07d146101d157806317859c8114610214578063209d170b1461028a578063259d2edf146102cb57806330efb8d314610303578063386e059d1461031a57806348e063001461035257806355a373d6146103c15780635e3347d51461041857806362b33b551461045957806367d0661d146104b0578063697f7a9a146104c7578063703c9c451461053d578063704b6c02146105c6578063722af9f0146106095780637853e51c1461064a578063786fdddd1461068b57806379a4ae23146106cc5780637a1e8f421461070d57806382cb9df91461074e578063920f566e146107a55780639b8d3064146107e6578063b187bd2614610829578063bf8bdac114610858578063bfae2f0e1461089b578063cdd977e0146108f2578063e1fe93a114610949578063f3fef3a3146109aa578063f761720a146109f7578063f9c71f7914610a5c575b600080fd5b34801561019c57600080fd5b506101bb60048036038101908080359060200190929190505050610ad5565b6040518082815260200191505060405180910390f35b3480156101dd57600080fd5b50610212600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610aed565b005b34801561022057600080fd5b5061025f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bc9565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b34801561029657600080fd5b506102b560048036038101908080359060200190929190505050610d35565b6040518082815260200191505060405180910390f35b3480156102d757600080fd5b50610301600480360381019080803590602001909291908061010001909192919290505050610d4d565b005b34801561030f57600080fd5b50610318610e10565b005b34801561032657600080fd5b50610350600480360381019080803590602001909291908061010001909192919290505050610ea2565b005b34801561035e57600080fd5b506103a7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050610f65565b604051808215151515815260200191505060405180910390f35b3480156103cd57600080fd5b506103d66110c6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561042457600080fd5b50610443600480360381019080803590602001909291905050506110ec565b6040518082815260200191505060405180910390f35b34801561046557600080fd5b5061046e611104565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104bc57600080fd5b506104c561112a565b005b3480156104d357600080fd5b50610512600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111bd565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b34801561054957600080fd5b50610588600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611329565b6040518082600860200280838360005b838110156105b3578082015181840152602081019050610598565b5050505090500191505060405180910390f35b3480156105d257600080fd5b50610607600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061159c565b005b34801561061557600080fd5b50610634600480360381019080803590602001909291905050506116f4565b6040518082815260200191505060405180910390f35b34801561065657600080fd5b506106756004803603810190808035906020019092919050505061170c565b6040518082815260200191505060405180910390f35b34801561069757600080fd5b506106b660048036038101908080359060200190929190505050611724565b6040518082815260200191505060405180910390f35b3480156106d857600080fd5b506106f76004803603810190808035906020019092919050505061173c565b6040518082815260200191505060405180910390f35b34801561071957600080fd5b5061073860048036038101908080359060200190929190505050611754565b6040518082815260200191505060405180910390f35b34801561075a57600080fd5b5061076361176c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107b157600080fd5b506107d060048036038101908080359060200190929190505050611792565b6040518082815260200191505060405180910390f35b3480156107f257600080fd5b50610827600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117aa565b005b34801561083557600080fd5b5061083e6118de565b604051808215151515815260200191505060405180910390f35b34801561086457600080fd5b50610899600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118f0565b005b3480156108a757600080fd5b506108b0611a24565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108fe57600080fd5b50610907611a4a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561095557600080fd5b50610994600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a70565b6040518082815260200191505060405180910390f35b3480156109b657600080fd5b506109f5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611aa0565b005b348015610a0357600080fd5b50610a42600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c99565b604051808215151515815260200191505060405180910390f35b348015610a6857600080fd5b50610abb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050611ef9565b604051808215151515815260200191505060405180910390f35b60086020528060005260406000206000915090505481565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b4957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610b8557600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000808573ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015610c7757600080fd5b505af1158015610c8b573d6000803e3d6000fd5b505050506040513d6020811015610ca157600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16141515610cd457600080fd5b600b600086815260200190815260200160002054600c600087815260200190815260200160002054600d600088815260200190815260200160002054600e600089815260200190815260200160002054935093509350935092959194509250565b60076020528060005260406000206000915090505481565b60008060009054906101000a900460ff16151515610d6a57600080fd5b600090505b60088161ffff161015610dc8576000828261ffff16600881101515610d9057fe5b60200201351115610dbd57610dbc3384848461ffff16600881101515610db257fe5b602002013561208b565b5b806001019050610d6f565b3373ffffffffffffffffffffffffffffffffffffffff167f9ba7335512a89fbb3a04231ee2a99bd9dccbea974d4a36b26868ba8b49db429c60405160405180910390a2505050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e6c57600080fd5b6000809054906101000a900460ff161515610e8657600080fd5b60008060006101000a81548160ff021916908315150217905550565b60008060009054906101000a900460ff16151515610ebf57600080fd5b600090505b60088161ffff161015610f1d576000828261ffff16600881101515610ee557fe5b60200201351115610f1257610f113384848461ffff16600881101515610f0757fe5b60200201356127cb565b5b806001019050610ec4565b3373ffffffffffffffffffffffffffffffffffffffff167f9ba7335512a89fbb3a04231ee2a99bd9dccbea974d4a36b26868ba8b49db429c60405160405180910390a2505050565b6000606060008073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614151515610fa657600080fd5b600085111515610fb557600080fd5b600084111515610fc457600080fd5b600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561104d57602002820191906000526020600020905b815481526020019060010190808311611039575b50505050509150600090505b81518110156110b85784828281518110151561107157fe5b90602001906020020151148061109d575083828281518110151561109157fe5b90602001906020020151145b156110ab57600192506110bd565b8080600101915050611059565b600092505b50509392505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60096020528060005260406000206000915090505481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561118657600080fd5b6000809054906101000a900460ff161515156111a157600080fd5b60016000806101000a81548160ff021916908315150217905550565b6000806000808573ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561126b57600080fd5b505af115801561127f573d6000803e3d6000fd5b505050506040513d602081101561129557600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161415156112c857600080fd5b600760008681526020019081526020016000205460086000878152602001908152602001600020546009600088815260200190815260200160002054600a600089815260200190815260200160002054935093509350935092959194509250565b611331614faa565b8273ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156113d957600080fd5b505af11580156113ed573d6000803e3d6000fd5b505050506040513d602081101561140357600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614151561143657600080fd5b600760008381526020019081526020016000205481600060088110151561145957fe5b602002018181525050600860008381526020019081526020016000205481600160088110151561148557fe5b60200201818152505060096000838152602001908152602001600020548160026008811015156114b157fe5b602002018181525050600a6000838152602001908152602001600020548160036008811015156114dd57fe5b602002018181525050600b60008381526020019081526020016000205481600460088110151561150957fe5b602002018181525050600c60008381526020019081526020016000205481600560088110151561153557fe5b602002018181525050600d60008381526020019081526020016000205481600660088110151561156157fe5b602002018181525050600e60008381526020019081526020016000205481600760088110151561158d57fe5b60200201818152505092915050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115f857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561163457600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec660405160405180910390a380600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60066020528060005260406000206000915090505481565b600d6020528060005260406000206000915090505481565b600c6020528060005260406000206000915090505481565b600a6020528060005260406000206000915090505481565b600e6020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b6020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806118535750600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561185e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561189a57600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806119995750600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156119a457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156119e057600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560205281600052604060002081815481101515611a8b57fe5b90600052602060002001600091509150505481565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611b4c5750600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611b5757600080fd5b600083111515611b6657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611ba05783611bc4565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b91503073ffffffffffffffffffffffffffffffffffffffff1631905080831015611c34578173ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015611c2e573d6000803e3d6000fd5b50611c93565b8173ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015611c91573d6000803e3d6000fd5b505b50505050565b6000611ca3614fce565b6000606060008073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614151515611ce457600080fd5b600086111515611cf357600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663425189e0876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808281526020019150506101a060405180830381600087803b158015611d8557600080fd5b505af1158015611d99573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101a0811015611dbf57600080fd5b81019080919050509350836002600d81101515611dd857fe5b6020020151925060098361ffff161415611e1657600060066000888152602001908152602001600020541115611e115760019450611eef565b611eea565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611e9f57602002820191906000526020600020905b815481526020019060010190808311611e8b575b50505050509150600090505b8151811015611ee957858282815181101515611ec357fe5b906020019060200201511415611edc5760019450611eef565b8080600101915050611eab565b5b600094505b5050505092915050565b6000606060008073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614151515611f3a57600080fd5b600086111515611f4957600080fd5b600085111515611f5857600080fd5b600084111515611f6757600080fd5b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611ff057602002820191906000526020600020905b815481526020019060010190808311611fdc575b50505050509150600090505b815181101561207c5785828281518110151561201457fe5b906020019060200201511480612040575084828281518110151561203457fe5b90602001906020020151145b80612061575083828281518110151561205557fe5b90602001906020020151145b1561206f5760019250612081565b8080600101915050611ffc565b600092505b5050949350505050565b612093614fce565b6000806000808773ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e896040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561214157600080fd5b505af1158015612155573d6000803e3d6000fd5b505050506040513d602081101561216b57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614151561219e57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663425189e0876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808281526020019150506101a060405180830381600087803b15801561223057600080fd5b505af1158015612244573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101a081101561226a57600080fd5b81019080919050509450846002600d8110151561228357fe5b602002015193506000925060018461ffff1614156122ff57600060076000898152602001908152602001600020541415156122fa5760006007600089815260200190815260200160002081905550600192506006600088815260200190815260200160002060008154809291906001900391905055505b612619565b60028461ffff161415612370576000600860008981526020019081526020016000205414151561236b5760006008600089815260200190815260200160002081905550600192506006600088815260200190815260200160002060008154809291906001900391905055505b612618565b60038461ffff1614156123e157600060096000898152602001908152602001600020541415156123dc5760006009600089815260200190815260200160002081905550600192506006600088815260200190815260200160002060008154809291906001900391905055505b612617565b60048461ffff161415612452576000600a60008981526020019081526020016000205414151561244d576000600a600089815260200190815260200160002081905550600192506006600088815260200190815260200160002060008154809291906001900391905055505b612616565b60058461ffff1614156124c3576000600b6000898152602001908152602001600020541415156124be576000600b600089815260200190815260200160002081905550600192506006600088815260200190815260200160002060008154809291906001900391905055505b612615565b60068461ffff161415612534576000600c60008981526020019081526020016000205414151561252f576000600c600089815260200190815260200160002081905550600192506006600088815260200190815260200160002060008154809291906001900391905055505b612614565b60078461ffff1614156125a5576000600d6000898152602001908152602001600020541415156125a0576000600d600089815260200190815260200160002081905550600192506006600088815260200190815260200160002060008154809291906001900391905055505b612613565b60088461ffff161415612612576000600e600089815260200190815260200160002054141515612611576000600e600089815260200190815260200160002081905550600192506006600088815260200190815260200160002060008154809291906001900391905055505b5b5b5b5b5b5b5b5b82156126bc57600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209150600090505b81805490508110156126bb5785828281548110151561268057fe5b906000526020600020015414156126ae57818181548110151561269f57fe5b90600052602060002001600090555b8080600101915050612665565b5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639f8f0ec989876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b83811015612784578082015181840152602081019050612769565b5050505090500192505050600060405180830381600087803b1580156127a957600080fd5b505af11580156127bd573d6000803e3d6000fd5b505050505050505050505050565b6127d3614fce565b6000806000806127e1614fce565b8873ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561288957600080fd5b505af115801561289d573d6000803e3d6000fd5b505050506040513d60208110156128b357600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161415156128e657600080fd5b8873ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e896040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561298e57600080fd5b505af11580156129a2573d6000803e3d6000fd5b505050506040513d60208110156129b857600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161415156129eb57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663425189e0886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808281526020019150506101a060405180830381600087803b158015612a7d57600080fd5b505af1158015612a91573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101a0811015612ab757600080fd5b81019080919050509550856002600d81101515612ad057fe5b602002015194503073ffffffffffffffffffffffffffffffffffffffff1663f761720a8a896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612b7a57600080fd5b505af1158015612b8e573d6000803e3d6000fd5b505050506040513d6020811015612ba457600080fd5b81019080805190602001909291905050509350600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020925060009150831515614f9f5760018561ffff1614156130765786600760008a815260200190815260200160002054141515613071576000600760008a8152602001908152602001600020541115612e3757600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663425189e0600760008b8152602001908152602001600020546040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808281526020019150506101a060405180830381600087803b158015612ced57600080fd5b505af1158015612d01573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101a0811015612d2757600080fd5b81019080919050509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639f8f0ec98a836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b83811015612df9578082015181840152602081019050612dde565b5050505090500192505050600060405180830381600087803b158015612e1e57600080fd5b505af1158015612e32573d6000803e3d6000fd5b505050505b600091505b8280549050821015612ea55760076000898152602001908152602001600020548383815481101515612e6a57fe5b90600052602060002001541415612e98578282815481101515612e8957fe5b90600052602060002001600090555b8180600101925050612e3c565b6000600760008a8152602001908152602001600020541115612ec657612eea565b60066000898152602001908152602001600020600081548092919060010191905055505b86600760008a815260200190815260200160002081905550600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020879080600181540180825580915050906001820390600052602060002001600090919290919091505550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634aab17f98a886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b83811015613033578082015181840152602081019050613018565b5050505090500192505050600060405180830381600087803b15801561305857600080fd5b505af115801561306c573d6000803e3d6000fd5b505050505b614f9e565b60028561ffff1614156134e95786600860008a8152602001908152602001600020541415156134e4576000600860008a81526020019081526020016000205411156132aa57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663425189e0600860008b8152602001908152602001600020546040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808281526020019150506101a060405180830381600087803b15801561316057600080fd5b505af1158015613174573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101a081101561319a57600080fd5b81019080919050509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639f8f0ec98a836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b8381101561326c578082015181840152602081019050613251565b5050505090500192505050600060405180830381600087803b15801561329157600080fd5b505af11580156132a5573d6000803e3d6000fd5b505050505b600091505b828054905082101561331857600860008981526020019081526020016000205483838154811015156132dd57fe5b9060005260206000200154141561330b5782828154811015156132fc57fe5b90600052602060002001600090555b81806001019250506132af565b6000600860008a81526020019081526020016000205411156133395761335d565b60066000898152602001908152602001600020600081548092919060010191905055505b86600860008a815260200190815260200160002081905550600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020879080600181540180825580915050906001820390600052602060002001600090919290919091505550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634aab17f98a886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b838110156134a657808201518184015260208101905061348b565b5050505090500192505050600060405180830381600087803b1580156134cb57600080fd5b505af11580156134df573d6000803e3d6000fd5b505050505b614f9d565b60038561ffff16141561395c5786600960008a815260200190815260200160002054141515613957576000600960008a815260200190815260200160002054111561371d57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663425189e0600960008b8152602001908152602001600020546040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808281526020019150506101a060405180830381600087803b1580156135d357600080fd5b505af11580156135e7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101a081101561360d57600080fd5b81019080919050509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639f8f0ec98a836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b838110156136df5780820151818401526020810190506136c4565b5050505090500192505050600060405180830381600087803b15801561370457600080fd5b505af1158015613718573d6000803e3d6000fd5b505050505b600091505b828054905082101561378b576009600089815260200190815260200160002054838381548110151561375057fe5b9060005260206000200154141561377e57828281548110151561376f57fe5b90600052602060002001600090555b8180600101925050613722565b6000600960008a81526020019081526020016000205411156137ac576137d0565b60066000898152602001908152602001600020600081548092919060010191905055505b86600960008a815260200190815260200160002081905550600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020879080600181540180825580915050906001820390600052602060002001600090919290919091505550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634aab17f98a886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b838110156139195780820151818401526020810190506138fe565b5050505090500192505050600060405180830381600087803b15801561393e57600080fd5b505af1158015613952573d6000803e3d6000fd5b505050505b614f9c565b60048561ffff161415613dcf5786600a60008a815260200190815260200160002054141515613dca576000600a60008a8152602001908152602001600020541115613b9057600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663425189e0600a60008b8152602001908152602001600020546040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808281526020019150506101a060405180830381600087803b158015613a4657600080fd5b505af1158015613a5a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101a0811015613a8057600080fd5b81019080919050509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639f8f0ec98a836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b83811015613b52578082015181840152602081019050613b37565b5050505090500192505050600060405180830381600087803b158015613b7757600080fd5b505af1158015613b8b573d6000803e3d6000fd5b505050505b600091505b8280549050821015613bfe57600a6000898152602001908152602001600020548383815481101515613bc357fe5b90600052602060002001541415613bf1578282815481101515613be257fe5b90600052602060002001600090555b8180600101925050613b95565b6000600a60008a8152602001908152602001600020541115613c1f57613c43565b60066000898152602001908152602001600020600081548092919060010191905055505b86600a60008a815260200190815260200160002081905550600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020879080600181540180825580915050906001820390600052602060002001600090919290919091505550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634aab17f98a886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b83811015613d8c578082015181840152602081019050613d71565b5050505090500192505050600060405180830381600087803b158015613db157600080fd5b505af1158015613dc5573d6000803e3d6000fd5b505050505b614f9b565b60058561ffff1614156142425786600b60008a81526020019081526020016000205414151561423d576000600b60008a815260200190815260200160002054111561400357600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663425189e0600b60008b8152602001908152602001600020546040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808281526020019150506101a060405180830381600087803b158015613eb957600080fd5b505af1158015613ecd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101a0811015613ef357600080fd5b81019080919050509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639f8f0ec98a836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b83811015613fc5578082015181840152602081019050613faa565b5050505090500192505050600060405180830381600087803b158015613fea57600080fd5b505af1158015613ffe573d6000803e3d6000fd5b505050505b600091505b828054905082101561407157600b600089815260200190815260200160002054838381548110151561403657fe5b9060005260206000200154141561406457828281548110151561405557fe5b90600052602060002001600090555b8180600101925050614008565b6000600b60008a8152602001908152602001600020541115614092576140b6565b60066000898152602001908152602001600020600081548092919060010191905055505b86600b60008a815260200190815260200160002081905550600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020879080600181540180825580915050906001820390600052602060002001600090919290919091505550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634aab17f98a886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b838110156141ff5780820151818401526020810190506141e4565b5050505090500192505050600060405180830381600087803b15801561422457600080fd5b505af1158015614238573d6000803e3d6000fd5b505050505b614f9a565b60068561ffff1614156146b55786600c60008a8152602001908152602001600020541415156146b0576000600c60008a815260200190815260200160002054111561447657600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663425189e0600c60008b8152602001908152602001600020546040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808281526020019150506101a060405180830381600087803b15801561432c57600080fd5b505af1158015614340573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101a081101561436657600080fd5b81019080919050509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639f8f0ec98a836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b8381101561443857808201518184015260208101905061441d565b5050505090500192505050600060405180830381600087803b15801561445d57600080fd5b505af1158015614471573d6000803e3d6000fd5b505050505b600091505b82805490508210156144e457600c60008981526020019081526020016000205483838154811015156144a957fe5b906000526020600020015414156144d75782828154811015156144c857fe5b90600052602060002001600090555b818060010192505061447b565b6000600c60008a815260200190815260200160002054111561450557614529565b60066000898152602001908152602001600020600081548092919060010191905055505b86600c60008a815260200190815260200160002081905550600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020879080600181540180825580915050906001820390600052602060002001600090919290919091505550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634aab17f98a886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b83811015614672578082015181840152602081019050614657565b5050505090500192505050600060405180830381600087803b15801561469757600080fd5b505af11580156146ab573d6000803e3d6000fd5b505050505b614f99565b60078561ffff161415614b285786600d60008a815260200190815260200160002054141515614b23576000600d60008a81526020019081526020016000205411156148e957600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663425189e0600d60008b8152602001908152602001600020546040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808281526020019150506101a060405180830381600087803b15801561479f57600080fd5b505af11580156147b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101a08110156147d957600080fd5b81019080919050509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639f8f0ec98a836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b838110156148ab578082015181840152602081019050614890565b5050505090500192505050600060405180830381600087803b1580156148d057600080fd5b505af11580156148e4573d6000803e3d6000fd5b505050505b600091505b828054905082101561495757600d600089815260200190815260200160002054838381548110151561491c57fe5b9060005260206000200154141561494a57828281548110151561493b57fe5b90600052602060002001600090555b81806001019250506148ee565b6000600d60008a81526020019081526020016000205411156149785761499c565b60066000898152602001908152602001600020600081548092919060010191905055505b86600d60008a815260200190815260200160002081905550600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020879080600181540180825580915050906001820390600052602060002001600090919290919091505550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634aab17f98a886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b83811015614ae5578082015181840152602081019050614aca565b5050505090500192505050600060405180830381600087803b158015614b0a57600080fd5b505af1158015614b1e573d6000803e3d6000fd5b505050505b614f98565b60088561ffff161415614f975786600e60008a815260200190815260200160002054141515614f96576000600e60008a8152602001908152602001600020541115614d5c57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663425189e0600e60008b8152602001908152602001600020546040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808281526020019150506101a060405180830381600087803b158015614c1257600080fd5b505af1158015614c26573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101a0811015614c4c57600080fd5b81019080919050509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639f8f0ec98a836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b83811015614d1e578082015181840152602081019050614d03565b5050505090500192505050600060405180830381600087803b158015614d4357600080fd5b505af1158015614d57573d6000803e3d6000fd5b505050505b600091505b8280549050821015614dca57600e6000898152602001908152602001600020548383815481101515614d8f57fe5b90600052602060002001541415614dbd578282815481101515614dae57fe5b90600052602060002001600090555b8180600101925050614d61565b6000600e60008a8152602001908152602001600020541115614deb57614e0f565b60066000898152602001908152602001600020600081548092919060010191905055505b86600e60008a815260200190815260200160002081905550600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020879080600181540180825580915050906001820390600052602060002001600090919290919091505550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634aab17f98a886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600d60200280838360005b83811015614f58578082015181840152602081019050614f3d565b5050505090500192505050600060405180830381600087803b158015614f7d57600080fd5b505af1158015614f91573d6000803e3d6000fd5b505050505b5b5b5b5b5b5b5b5b5b505050505050505050565b61010060405190810160405280600890602082028038833980820191505090505090565b6101a060405190810160405280600d906020820280388339808201915050905050905600a165627a7a72305820c5b73e1ced09d9d80e53b315e7ba9628c8791ca156ef088c1f421ac5c615b9f50029000000000000000000000000df9ca851164984d7665d4db1da0921c77c6105ad",
  "constructorArguments": "000000000000000000000000df9ca851164984d7665d4db1da0921c77c6105ad"
}