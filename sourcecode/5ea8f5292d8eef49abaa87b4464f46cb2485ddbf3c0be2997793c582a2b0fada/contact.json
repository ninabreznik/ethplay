{
  "address": "0xdab8aea5896181210fb7cf1a95b4513b077240f4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Coinflip",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-17\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\ncontract Coinflip {\n    enum WagerState {emptyRoom,wagerMade, wagerAccepted, wagerWon}\n    uint256 minimumBet = 10000000000000000;\n    uint256 idRoom = 100000000;\n    address owner;\n    uint256 percent = 100;\n\n    struct Room {\n        WagerState currentState;\n        uint wager;\n        address payable player1;\n        address payable player2;\n        address winner;\n        uint seedBlockNumber;\n        bool isPlayerOneEagle;\n    }\n    mapping (uint256 => Room) games;\n\n    uint256[] public gamesAccts;\n\n    event roomCreated(uint256 id, bool side, uint256 wager, address player); \n    event endGame(uint256 finishedGame, address winner, address player2); \n    event playerLeave(uint256 leaveGameAddress); \n\n    function add(bool Side) public payable returns (bool) {\n        require(msg.value >= minimumBet);\n        games[idRoom].isPlayerOneEagle = Side;\n        games[idRoom].currentState = WagerState.wagerMade;\n        games[idRoom].wager = msg.value;\n        games[idRoom].player1 = msg.sender;\n        games[idRoom].seedBlockNumber = block.number;\n        gamesAccts.push(idRoom);\n        emit roomCreated(idRoom, Side, msg.value, msg.sender);\n        idRoom++;\n        return true;\n    }\n\n    function acceptWager(uint256 _address) public payable returns (bool) {\n\n        require(games[_address].currentState == WagerState.wagerMade);\n        require(msg.value == games[_address].wager);\n        require(games[_address].player1 != msg.sender);\n        games[_address].player2 = msg.sender;\n        games[_address].seedBlockNumber = block.number;\n        games[_address].currentState = WagerState.wagerAccepted;\n        start(_address);\n        return true;\n    }\n\n    function start(uint256 _address) private {\n        require(games[_address].currentState == WagerState.wagerAccepted);\n        uint8 coinFlip = uint8(uint256(keccak256(abi.encode(block.timestamp, block.difficulty)))%100);\n\n        if(games[_address].isPlayerOneEagle == true && coinFlip <= 49) {\n            games[_address].winner = games[_address].player1;\n            games[_address].player1.transfer(games[_address].wager*2 - ((games[_address].wager*2) * percent) / 1000);\n        }\n\n        else if(games[_address].isPlayerOneEagle == false && coinFlip >= 50) {\n            games[_address].winner = games[_address].player1;\n            games[_address].player1.transfer(games[_address].wager*2 - ((games[_address].wager*2) * percent) / 1000);\n        }\n        else {\n            games[_address].winner = games[_address].player2;\n            games[_address].player2.transfer(games[_address].wager*2 - ((games[_address].wager*2) * percent) / 1000);\n        }\n        games[_address].currentState = WagerState.wagerWon;\n        emit endGame(_address, games[_address].winner, games[_address].player2);\n    }\n\n    function leave(uint256 id) public {\n        require(games[id].currentState == WagerState.wagerMade);\n        require(msg.sender == games[id].player1);\n        games[id].player1.transfer(games[id].wager);\n        emit playerLeave(id); \n        delete games[id];\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner,\"Only owner can call this function.\");\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function withdraw() onlyOwner public {\n    msg.sender.transfer(address(this).balance);\n    }\n    \n    function changePercent(uint256 newPercent) onlyOwner public {\n        percent = newPercent;\n    }\n    \n      function changeMinimumBet(uint256 newMinimumBet) onlyOwner public {\n        minimumBet = newMinimumBet;\n    }\n\n    function countCoinflips() view public returns (uint) {\n        return gamesAccts.length;\n    }\n\n    function getCurrentState(uint256 _address) public view returns(WagerState) {\n        return games[_address].currentState;\n    }\n\n    function getWager(uint256 _address) public view returns(uint) {\n        return games[_address].wager;\n    }\n\n    function getPlayer1(uint256 _address) public view returns(address) {\n        return games[_address].player1;\n    }\n\n    function getPlayer2(uint256 _address) public view returns(address) {\n        return games[_address].player2;\n    }\n\n    function getWinner(uint256 _address) public view returns(address) {\n        return games[_address].winner;\n    }\n\n    function getSide(uint256 _address) public view returns(bool) {\n        return games[_address].isPlayerOneEagle;\n    }\n    \n    function getCoinflips() public view returns(uint256[] memory) {\n        return gamesAccts;\n    }\n    \n    function getPercent() public view returns(uint256) {\n        return percent;\n    }\n    \n    function getMinimumBet() public view returns(uint256){\n        return minimumBet;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"uint256\"}],\"name\":\"getPlayer1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gamesAccts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"uint256\"}],\"name\":\"getWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"uint256\"}],\"name\":\"getCurrentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countCoinflips\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinimumBet\",\"type\":\"uint256\"}],\"name\":\"changeMinimumBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"leave\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Side\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"uint256\"}],\"name\":\"getWager\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"changePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinimumBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"uint256\"}],\"name\":\"getPlayer2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCoinflips\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"uint256\"}],\"name\":\"acceptWager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"uint256\"}],\"name\":\"getSide\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"side\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"wager\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"}],\"name\":\"roomCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"finishedGame\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"player2\",\"type\":\"address\"}],\"name\":\"endGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"leaveGameAddress\",\"type\":\"uint256\"}],\"name\":\"playerLeave\",\"type\":\"event\"}]",
  "bytecode": "6080604052662386f26fc100006000556305f5e100600155606460035534801561002857600080fd5b5060028054600160a060020a03191633179055610d208061004a6000396000f3fe6080604052600436106100ea577c0100000000000000000000000000000000000000000000000000000000600035046313fa59ff81146100ef5780631e2f9835146101355780632a6dd8c9146101715780633ccfd60b146101865780634129b2c91461019d5780635748c130146101c757806357b47ae114610215578063616fbee71461022a57806367dfd4c9146102545780636f29a8531461027e5780637a2756f2146102b1578063812d6c40146102db578063839930ba1461030557806389bc74731461031a57806395b3cacf146103445780639c37d7ea146103a9578063f9a1f17f146103c6575b600080fd5b3480156100fb57600080fd5b506101196004803603602081101561011257600080fd5b50356103f0565b60408051600160a060020a039092168252519081900360200190f35b34801561014157600080fd5b5061015f6004803603602081101561015857600080fd5b503561040e565b60408051918252519081900360200190f35b34801561017d57600080fd5b5061015f61042d565b34801561019257600080fd5b5061019b610433565b005b3480156101a957600080fd5b50610119600480360360208110156101c057600080fd5b5035610502565b3480156101d357600080fd5b506101f1600480360360208110156101ea57600080fd5b5035610521565b6040518082600381111561020157fe5b60ff16815260200191505060405180910390f35b34801561022157600080fd5b5061015f610536565b34801561023657600080fd5b5061019b6004803603602081101561024d57600080fd5b503561053c565b34801561026057600080fd5b5061019b6004803603602081101561027757600080fd5b50356105e0565b61029d6004803603602081101561029457600080fd5b5035151561071f565b604080519115158252519081900360200190f35b3480156102bd57600080fd5b5061015f600480360360208110156102d457600080fd5b5035610830565b3480156102e757600080fd5b5061019b600480360360208110156102fe57600080fd5b5035610845565b34801561031157600080fd5b5061015f6108e9565b34801561032657600080fd5b506101196004803603602081101561033d57600080fd5b50356108ef565b34801561035057600080fd5b5061035961090d565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561039557818101518382015260200161037d565b505050509050019250505060405180910390f35b61029d600480360360208110156103bf57600080fd5b5035610965565b3480156103d257600080fd5b5061029d600480360360208110156103e957600080fd5b5035610a27565b600090815260046020526040902060020154600160a060020a031690565b600580548290811061041c57fe5b600091825260209091200154905081565b60035490565b600254600160a060020a031633146104d257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60448201527f6e2e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6040513390303180156108fc02916000818181858888f193505050501580156104ff573d6000803e3d6000fd5b50565b60009081526004602081905260409091200154600160a060020a031690565b60009081526004602052604090205460ff1690565b60055490565b600254600160a060020a031633146105db57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60448201527f6e2e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600055565b600160008281526004602052604090205460ff1660038111156105ff57fe5b1461060957600080fd5b600081815260046020526040902060020154600160a060020a0316331461062f57600080fd5b60008181526004602052604080822060028101546001909101549151600160a060020a039091169282156108fc02929190818181858888f1935050505015801561067d573d6000803e3d6000fd5b506040805182815290517f559b4b4adfbc9a9ae84e7849b96d930c924c985c1bbd4777298e16e1ac8e048f9181900360200190a160009081526004602081905260408220805460ff1990811682556001820184905560028201805473ffffffffffffffffffffffffffffffffffffffff199081169091556003830180548216905592820180549093169092556005810192909255600690910180549091169055565b6000805434101561072f57600080fd5b600180546000908152600460209081526040808320600601805487151560ff19918216811790925585548552828520805490911686179055845484528184203490860181905585548552828520600201805473ffffffffffffffffffffffffffffffffffffffff191633908117909155865486528386204360059182015587548154988901825596527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090960185905582519485529284015282810191909152606082019290925290517faeb65183d752358f86b82365d5fa6dd2e437ee044ffa5ef74f34fc3c98ae00d19181900360800190a15050600180548101815590565b60009081526004602052604090206001015490565b600254600160a060020a031633146108e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60448201527f6e2e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600355565b60005490565b600090815260046020526040902060030154600160a060020a031690565b6060600580548060200260200160405190810160405280929190818152602001828054801561095b57602002820191906000526020600020905b815481526020019060010190808311610947575b5050505050905090565b6000600160008381526004602052604090205460ff16600381111561098657fe5b1461099057600080fd5b60008281526004602052604090206001015434146109ad57600080fd5b600082815260046020526040902060020154600160a060020a03163314156109d457600080fd5b60008281526004602052604090206003810180543373ffffffffffffffffffffffffffffffffffffffff19909116179055436005820155805460ff19166002179055610a1f82610a3f565b506001919050565b60009081526004602052604090206006015460ff1690565b600260008281526004602052604090205460ff166003811115610a5e57fe5b14610a6857600080fd5b6040805142602080830191909152448284015282518083038401815260609092019092528051910120600090606490600084815260046020526040902060060154919006915060ff1615156001148015610ac6575060318160ff1611155b15610b70576000828152600460208190526040909120600280820154928201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390941693841790556003546001909201546108fc926103e8929102025b046004600086815260200190815260200160002060010154600202039081150290604051600060405180830381858888f19350505050158015610b6a573d6000803e3d6000fd5b50610c7e565b60008281526004602052604090206006015460ff16158015610b96575060328160ff1610155b15610bf7576000828152600460208190526040909120600280820154928201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390941693841790556003546001909201546108fc926103e892910202610b23565b60008281526004602081905260408083206003808201549382018054600160a060020a0390951673ffffffffffffffffffffffffffffffffffffffff199095168517905554600190910154915192936103e86002928402830204919092020380156108fc02929091818181858888f19350505050158015610c7c573d6000803e3d6000fd5b505b600082815260046020818152604092839020805460ff191660039081178255928101549201548351868152600160a060020a0393841692810192909252919091168183015290517f919cd9c4faf663afcd9a1836fda0a5f5ddb20d92146586c4b7968a50be7a02c4916060908290030190a1505056fea165627a7a723058209ef8d65d2c5548e791edcbe4118c3d97918627804ad4b5fde4c84525ca4d3f960029"
}