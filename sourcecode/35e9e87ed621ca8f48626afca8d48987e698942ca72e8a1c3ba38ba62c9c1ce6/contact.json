{
  "address": "0xd97c9b11494722e6212fae4f62e53423fb509810",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LightCrowdsale1",
  "compilerVersion": "v0.5.9+commit.e560f70d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\npragma solidity >=0.4.25 <0.6.0;\n\n/**\n * Minimum recommendation: 10(GWEI) & 121000 Gas \n   Minimum send to this contract = 0.2 eth\n   Approximately 2.5 mill tokens = 10.000 ETH \"hard goal\"\n   Deadline 4/aug/2019  \n    check in site iskra-coin.io\n */\n\ninterface token {\n    function transfer(address receiver, uint amount) external;\n}\n\ncontract ReentrancyGuard {\n    /// @dev counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n\n    constructor () internal {\n        // The counter starts at one to prevent changing it from zero to a non-zero\n        // value, which is a more expensive operation.\n        _guardCounter = 1;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter);\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract LightCrowdsale1 is ReentrancyGuard {\n\n    using SafeMath for uint256;\n    using SafeMath for uint;\n\n    address payable public beneficiary; // wallet to send eth to\n    uint public fundingGoal; // maximum amount to raise\n    uint public amountRaised; // current amount raised\n    uint public minAmountWei; // min amount for crowdsale\n    uint public deadline; // time when crowdsale to close\n    uint public price; // price for token\n    token public tokenReward; // token\n    mapping(address => uint256) public balanceOf;\n    bool fundingGoalReached = false;\n    bool crowdsaleClosed = false;\n\n    event GoalReached(address recipient, uint totalAmountRaised);\n    event FundTransfer(address backer, uint amount, bool isContribution);\n\n    /**\n     * Constructor\n     *\n     * Setup the owner\n     */\n    constructor(\n        address payable ifSuccessfulSendTo,\n        uint fundingGoalInEthers,\n        uint durationInMinutes,\n        uint finneyCostOfEachToken,\n        address addressOfTokenUsedAsReward,\n        uint minAmountFinney\n    ) public {\n        beneficiary = ifSuccessfulSendTo;\n        fundingGoal = fundingGoalInEthers * 1 ether;\n        deadline = now + durationInMinutes * 1 minutes;\n        price = finneyCostOfEachToken * 1 finney;\n        minAmountWei = minAmountFinney * 1 finney;\n        tokenReward = token(addressOfTokenUsedAsReward);\n    }\n\n    /**\n     * Fallback function\n     *\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\n     */\n    function() payable external {\n        buyTokens(msg.sender);\n    }\n\n    function buyTokens(address sender) public nonReentrant payable {\n        checkGoalReached();\n        require(!crowdsaleClosed);\n        require(sender != address(0));\n        uint amount = msg.value;\n        require(balanceOf[sender] >= amount);\n        require(amount != 0);\n        require(amount >= minAmountWei);\n\n        uint senderBalance = balanceOf[sender];\n        balanceOf[sender] = senderBalance.add(amount);\n        amountRaised = amountRaised.add(amount);\n        uint tokenToSend = amount.div(price) * 1 ether;\n        tokenReward.transfer(sender, tokenToSend);\n        emit FundTransfer(sender, amount, true);\n\n        if (beneficiary.send(amount)) {\n            emit FundTransfer(beneficiary, amount, false);\n        }\n\n        checkGoalReached();\n    }\n\n    modifier afterDeadline() {if (now >= deadline) _;}\n\n    /**\n     * Check if goal was reached\n     *\n     * Checks if the goal or time limit has been reached and ends the campaign\n     */\n    function checkGoalReached() public afterDeadline {\n        if (amountRaised >= fundingGoal) {\n            fundingGoalReached = true;\n            crowdsaleClosed = true;\n            emit GoalReached(beneficiary, amountRaised);\n        }\n        if (now > deadline) {\n            crowdsaleClosed = true;\n            emit GoalReached(beneficiary, amountRaised);\n        }\n    }\n}",
  "bytecode": "60806040526009805461ffff1916905534801561001b57600080fd5b50604051610676380380610676833981810160405260c081101561003e57600080fd5b508051602082015160408301516060840151608085015160a0909501516001600081905580546001600160a01b039687166001600160a01b031991821617909155670de0b6b3a764000090940260025542603c9093029290920160055566038d7ea4c6800090810260065502600455600780549290931691161790556105ad806100c96000396000f3fe6080604052600436106100915760003560e01c806370a082311161005957806370a08231146101335780637a3a0e84146101665780637b3e5e7b1461017b578063a035b1fe14610190578063ec8ac4d8146101a557610091565b806301cb3b201461009c57806329dcb0cf146100b157806338af3eed146100d85780633feced03146101095780636e66f6e91461011e575b61009a336101c7565b005b3480156100a857600080fd5b5061009a610410565b3480156100bd57600080fd5b506100c66104ef565b60408051918252519081900360200190f35b3480156100e457600080fd5b506100ed6104f5565b604080516001600160a01b039092168252519081900360200190f35b34801561011557600080fd5b506100c6610504565b34801561012a57600080fd5b506100ed61050a565b34801561013f57600080fd5b506100c66004803603602081101561015657600080fd5b50356001600160a01b0316610519565b34801561017257600080fd5b506100c661052b565b34801561018757600080fd5b506100c6610531565b34801561019c57600080fd5b506100c6610537565b61009a600480360360208110156101bb57600080fd5b50356001600160a01b03165b60008054600101908190556101da610410565b600954610100900460ff16156101ef57600080fd5b6001600160a01b03821661020257600080fd5b6001600160a01b038216600090815260086020526040902054349081111561022957600080fd5b8061023357600080fd5b60045481101561024257600080fd5b6001600160a01b03831660009081526008602052604090205461026b818363ffffffff61053d16565b6001600160a01b038516600090815260086020526040902055600354610297908363ffffffff61053d16565b6003556006546000906102b190849063ffffffff61055616565b6007546040805163a9059cbb60e01b81526001600160a01b038981166004830152670de0b6b3a764000094909402602482018190529151919450929091169163a9059cbb91604480830192600092919082900301818387803b15801561031657600080fd5b505af115801561032a573d6000803e3d6000fd5b5050604080516001600160a01b03891681526020810187905260018183015290517fe842aea7a5f1b01049d752008c53c52890b1a6daf660cf39e8eec506112bbdf69350908190036060019150a16001546040516001600160a01b039091169084156108fc029085906000818181858888f19350505050156103f357600154604080516001600160a01b03909216825260208201859052600082820152517fe842aea7a5f1b01049d752008c53c52890b1a6daf660cf39e8eec506112bbdf69181900360600190a15b6103fb610410565b505050600054811461040c57600080fd5b5050565b60055442106104ed57600254600354106104885760098054610100600160ff19909216821761ff0019161790915554600354604080516001600160a01b039093168352602083019190915280517fec3f991caf7857d61663fd1bba1739e04abd4781238508cde554bb849d790c859281900390910190a15b6005544211156104ed576009805461ff001916610100179055600154600354604080516001600160a01b039093168352602083019190915280517fec3f991caf7857d61663fd1bba1739e04abd4781238508cde554bb849d790c859281900390910190a15b565b60055481565b6001546001600160a01b031681565b60045481565b6007546001600160a01b031681565b60086020526000908152604090205481565b60025481565b60035481565b60065481565b60008282018381101561054f57600080fd5b9392505050565b600080821161056457600080fd5b600082848161056f57fe5b0494935050505056fea265627a7a723058201a602677ce715b6cb02b4a724fa82340b864545e40e0c769dfc78952f0ac3abd64736f6c6343000509003200000000000000000000000013512480dd2c3718e4314046d3156fc334dda3690000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000001531a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000aab80423daa0334aba8f16726677c23619e3877300000000000000000000000000000000000000000000000000000000000000c8",
  "constructorArguments": "00000000000000000000000013512480dd2c3718e4314046d3156fc334dda3690000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000001531a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000aab80423daa0334aba8f16726677c23619e3877300000000000000000000000000000000000000000000000000000000000000c8"
}