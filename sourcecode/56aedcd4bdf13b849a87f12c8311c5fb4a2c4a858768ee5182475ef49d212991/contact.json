{
  "address": "0x9b5dbf69b096a12153def9b8d19c1076a3f40291",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "IMCIssuingRecord",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-19\n*/\n\npragma solidity ^0.4.24;\n\n// ----------------------------------------------------------------------------\n// 'imChat' token contract\n//\n// Symbol      : IMC\n// Name        : IMC\n// Total supply: 1000,000,000.000000000000000000\n// Decimals    : 8\n//\n// imChat Technology Service Limited\n// ----------------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n    \n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        require(c >= _a);\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a);\n        uint256 c = _a - _b;\n\n        return c;\n    }\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = _a / _b;\n        assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address _owner) public constant returns (uint balance);\n    function transfer(address _to, uint _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n    function approve(address _spender, uint _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public constant returns (uint remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n//\n// Borrowed from MiniMeToken\n// ----------------------------------------------------------------------------\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and a\n// fixed supply\n// ----------------------------------------------------------------------------\ncontract IMCToken is ERC20Interface, Owned {\n    using SafeMath for uint;\n\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint _totalSupply;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n\n    address public externalContractAddress;\n\n\n    /**\n     * 构造函数\n     */\n    constructor() public {\n        symbol = \"IMC\";\n        name = \"IMC\";\n        decimals = 8;\n        _totalSupply = 1000000000 * (10 ** uint(decimals));\n        balances[owner] = _totalSupply;\n        \n        emit Transfer(address(0), owner, _totalSupply);\n    }\n\n    /**\n     * 查询代币总发行量\n     * @return unit 余额\n     */\n    function totalSupply() public view returns (uint) {\n        return _totalSupply.sub(balances[address(0)]);\n    }\n\n    /**\n     * 查询代币余额\n     * @param _owner address 查询代币的地址\n     * @return balance 余额\n     */\n    function balanceOf(address _owner) public view returns (uint balance) {\n        return balances[_owner];\n    }\n\n    /**\n     * 私有方法从一个帐户发送给另一个帐户代币\n     * @param _from address 发送代币的地址\n     * @param _to address 接受代币的地址\n     * @param _value uint 接受代币的数量\n     */\n    function _transfer(address _from, address _to, uint _value) internal{\n        // 确保目标地址不为0x0，因为0x0地址代表销毁\n        require(_to != 0x0);\n        // 检查发送者是否拥有足够余额\n        require(balances[_from] >= _value);\n        // 检查是否溢出\n        require(balances[_to] + _value > balances[_to]);\n\n        // 保存数据用于后面的判断\n        uint previousBalance = balances[_from].add(balances[_to]);\n\n        // 从发送者减掉发送额\n        balances[_from] = balances[_from].sub(_value);\n        // 给接收者加上相同的量\n        balances[_to] = balances[_to].add(_value);\n\n        // 通知任何监听该交易的客户端\n        emit Transfer(_from, _to, _value);\n\n        // 判断发送、接收方的数据是否和转换前一致\n        assert(balances[_from].add(balances[_to]) == previousBalance);\n    }\n\n    /**\n     * 从合约调用者发送给别人代币\n     * @param _to address 接受代币的地址\n     * @param _value uint 接受代币的数量\n     * @return success 交易成功\n     */\n    function transfer(address _to, uint _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n\n        return true;\n    }\n\n    /**\n     * 账号之间代币交易转移，调用过程，会检查设置的允许最大交易额\n     * @param _from address 发送者地址\n     * @param _to address 接受者地址\n     * @param _value uint 要转移的代币数量\n     * @return success 交易成功\n     */\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n        \n        if (_from == msg.sender) {\n            // 自己转账时不需要approve，可以直接进行转账\n            _transfer(_from, _to, _value);\n\n        } else {\n            // 授权给第三方时，需检查发送者是否拥有足够余额\n            require(allowed[_from][msg.sender] >= _value);\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n            _transfer(_from, _to, _value);\n\n        }\n\n        return true;\n    }\n\n    /**\n     * 从主帐户合约发行代币\n     * @param _to address 接受代币的地址\n     * @param _value uint 接受代币的数量\n     * @return success 交易成功\n     */\n    function issue(address _to, uint _value) public returns (bool success) {\n        // 外部合约调用，需满足合约调用者和代币合约所设置的外部调用合约地址一致性\n        require(msg.sender == externalContractAddress);\n\n        _transfer(owner, _to, _value);\n\n        return true;\n    }\n\n    /**\n    * 允许帐户授权其他帐户代表他们提取代币\n    * @param _spender 授权帐户地址\n    * @param _value 代币数量\n    * @return success 允许成功\n    */\n    function approve(address _spender, uint _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n\n    /**\n    * 查询被授权帐户的允许提取的代币数\n    * @param _owner 授权者帐户地址\n    * @param _spender 被授权者帐户地址\n    * @return remaining 代币数量\n    */\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * 设置允许一个地址（合约）以我（创建交易者）的名义可最多花费的代币数。\n     * @param _spender 被授权的地址（合约）\n     * @param _value 最大可花费代币数\n     * @param _extraData 发送给合约的附加数据\n     * @return success 设置成功\n     */\n    function approveAndCall(address _spender, uint _value, bytes _extraData) public returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            // 通知合约\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * 设置允许外部合约地址调用当前合约\n     * @param _contractAddress 合约地址\n     * @return success 设置成功\n     */\n    function approveContractCall(address _contractAddress) public onlyOwner returns (bool){\n        externalContractAddress = _contractAddress;\n        \n        return true;\n    }\n\n    /**\n     * 不接收 Ether\n     */\n    function () public payable {\n        revert();\n    }\n}\n\n// ----------------------------------------------------------------------------\n// 发行记录合约\n// ----------------------------------------------------------------------------\ncontract IMCIssuingRecord is Owned{\n    using SafeMath for uint;\n\n    // 发行记录添加日志\n    event IssuingRecordAdd(uint _date, bytes32 _hash, uint _depth, uint _userCount, uint _token, string _fileFormat, uint _stripLen);\n\n    // 定义IMCToken实例\n    IMCToken public imcToken;\n\n    // 平台账户地址\n    address public platformAddr;\n\n    // 执行者地址\n    address public executorAddress;\n\n    // Token发行统计记录\n    struct RecordInfo {\n        uint date;  // 记录日期（解锁ID）\n        bytes32 hash;  // 文件hash\n        uint depth; // 深度\n        uint userCount; // 用户数\n        uint token; // 发行token数量\n        string fileFormat; // 上链存证的文件格式\n        uint stripLen; // 上链存证的文件分区\n    }\n    \n    // 分配记录\n    mapping(uint => RecordInfo) public issuingRecord;\n    \n    // 用户数\n    uint public userCount;\n    \n    // 发行总币数\n    uint public totalIssuingBalance;\n    \n    /**\n     * 构造函数\n     * @param _tokenAddr address ERC20合约地址\n     * @param _platformAddr address 平台帐户地址\n     */\n    constructor(address _tokenAddr, address _platformAddr) public{\n        // 初始化IMCToken实例\n        imcToken = IMCToken(_tokenAddr);\n\n        // 初始化平台账户地址\n        platformAddr = _platformAddr;\n        \n        // 初始化合约执行者\n        executorAddress = msg.sender;\n    }\n    \n    /**\n     * 修改platformAddr，只有owner能够修改\n     * @param _addr address 地址\n     */\n    function modifyPlatformAddr(address _addr) public onlyOwner {\n        platformAddr = _addr;\n    }\n    \n    /**\n     * 修改executorAddress，只有owner能够修改\n     * @param _addr address 地址\n     */\n    function modifyExecutorAddr(address _addr) public onlyOwner {\n        executorAddress = _addr;\n    }\n\n    /**\n     * 转账到中间帐户\n     * @param _tokens uint 币数量\n     * @return success 交易成功\n     */\n    function sendTokenToPlatform(uint _tokens) internal returns (bool) {\n\n        imcToken.issue(platformAddr, _tokens);\n        \n        return true;\n    }\n\n    /**\n     * 发行记录添加\n     * @param _date uint 记录日期（解锁ID）\n     * @param _hash bytes32 文件hash\n     * @param _depth uint 深度\n     * @param _userCount uint 用户数\n     * @param _token uint 发行token数量\n     * @param _fileFormat string 上链存证的文件格式\n     * @param _stripLen uint 上链存证的文件分区\n     * @return success 添加成功\n     */\n    function issuingRecordAdd(uint _date, bytes32 _hash, uint _depth, uint _userCount, uint _token, string _fileFormat, uint _stripLen) public returns (bool) {\n        // 调用者需和Owner设置的执行者地址一致\n        require(msg.sender == executorAddress);\n        // 防止重复记录\n        require(issuingRecord[_date].date != _date);\n\n        // 累计用户数\n        userCount = userCount.add(_userCount);\n\n        // 累计发行币数\n        totalIssuingBalance = totalIssuingBalance.add(_token);\n        \n        // 记录发行信息\n        issuingRecord[_date] = RecordInfo(_date, _hash, _depth, _userCount, _token, _fileFormat, _stripLen);\n\n        // 转账到中间帐户\n        sendTokenToPlatform(_token);\n\n        emit IssuingRecordAdd(_date, _hash, _depth, _userCount, _token, _fileFormat, _stripLen);\n        \n        return true;\n        \n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"userCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"imcToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"modifyExecutorAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint256\"},{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_depth\",\"type\":\"uint256\"},{\"name\":\"_userCount\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"uint256\"},{\"name\":\"_fileFormat\",\"type\":\"string\"},{\"name\":\"_stripLen\",\"type\":\"uint256\"}],\"name\":\"issuingRecordAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"issuingRecord\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"depth\",\"type\":\"uint256\"},{\"name\":\"userCount\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"uint256\"},{\"name\":\"fileFormat\",\"type\":\"string\"},{\"name\":\"stripLen\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"executorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"modifyPlatformAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalIssuingBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"_platformAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_date\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_depth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_userCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_token\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_fileFormat\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_stripLen\",\"type\":\"uint256\"}],\"name\":\"IssuingRecordAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b506040516040806109d683398101604052805160209091015160008054600160a060020a03199081163390811790925560028054600160a060020a0395861690831617905560038054949093169381169390931790915560048054909216179055610956806100806000396000f3006080604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166307973ccf81146100c95780630ac8fc1c146100f05780632d4c80961461012157806333e7fb9714610136578063498a690f1461015957806379ba5097146101db5780638da5cb5b146101f0578063974a97d514610205578063a8e9a539146102c7578063bc30f3f8146102dc578063c9a781ba146102fd578063d4ee1d9014610312578063f2fde38b14610327575b600080fd5b3480156100d557600080fd5b506100de610348565b60408051918252519081900360200190f35b3480156100fc57600080fd5b5061010561034e565b60408051600160a060020a039092168252519081900360200190f35b34801561012d57600080fd5b5061010561035d565b34801561014257600080fd5b50610157600160a060020a036004351661036c565b005b34801561016557600080fd5b50604080516020600460a43581810135601f81018490048402850184019095528484526101c79482359460248035956044359560643595608435953695929460c494920191819084018382808284375094975050933594506103b29350505050565b604080519115158252519081900360200190f35b3480156101e757600080fd5b506101576105ac565b3480156101fc57600080fd5b50610105610634565b34801561021157600080fd5b5061021d600435610643565b60405180888152602001876000191660001916815260200186815260200185815260200184815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561028657818101518382015260200161026e565b50505050905090810190601f1680156102b35780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156102d357600080fd5b5061010561071d565b3480156102e857600080fd5b50610157600160a060020a036004351661072c565b34801561030957600080fd5b506100de610772565b34801561031e57600080fd5b50610105610778565b34801561033357600080fd5b50610157600160a060020a0360043516610787565b60065481565b600254600160a060020a031681565b600354600160a060020a031681565b600054600160a060020a0316331461038357600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600454600090600160a060020a031633146103cc57600080fd5b6000888152600560205260409020548814156103e757600080fd5b6006546103fa908663ffffffff6107cd16565b600655600754610410908563ffffffff6107cd16565b60078190555060e0604051908101604052808981526020018860001916815260200187815260200186815260200185815260200184815260200183815250600560008a8152602001908152602001600020600082015181600001556020820151816001019060001916905560408201518160020155606082015181600301556080820151816004015560a08201518160050190805190602001906104b592919061088f565b5060c082015181600601559050506104cc846107e6565b507f47bc0c8c41b8608da619afd68ffba5094f22ce535953bcc0901721d6e83a18af8888888888888860405180888152602001876000191660001916815260200186815260200185815260200184815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561055e578181015183820152602001610546565b50505050905090810190601f16801561058b5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a1506001979650505050505050565b600154600160a060020a031633146105c357600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031681565b6005602052806000526040600020600091509050806000015490806001015490806002015490806003015490806004015490806005018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561070d5780601f106106e25761010080835404028352916020019161070d565b820191906000526020600020905b8154815290600101906020018083116106f057829003601f168201915b5050505050908060060154905087565b600454600160a060020a031681565b600054600160a060020a0316331461074357600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60075481565b600154600160a060020a031681565b600054600160a060020a0316331461079e57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000828201838110156107df57600080fd5b9392505050565b600254600354604080517f867904b4000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152602481018590529051600093929092169163867904b49160448082019260209290919082900301818787803b15801561085b57600080fd5b505af115801561086f573d6000803e3d6000fd5b505050506040513d602081101561088557600080fd5b5060019392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106108d057805160ff19168380011785556108fd565b828001600101855582156108fd579182015b828111156108fd5782518255916020019190600101906108e2565b5061090992915061090d565b5090565b61092791905b808211156109095760008155600101610913565b905600a165627a7a7230582068b12fc3943734894306e4385e909521623f2903c1f1c40f491ecfba5629840c00290000000000000000000000004bc3a10eaf382c7e8b9be5fa2c7cd9a5560524a50000000000000000000000001f35d3bcdd1212bd5e450c58fd14544da5a6b905",
  "constructorArguments": "0000000000000000000000004bc3a10eaf382c7e8b9be5fa2c7cd9a5560524a50000000000000000000000001f35d3bcdd1212bd5e450c58fd14544da5a6b905"
}