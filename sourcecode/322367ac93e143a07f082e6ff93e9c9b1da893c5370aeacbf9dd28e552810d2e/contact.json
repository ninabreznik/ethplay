{
  "address": "0x607fb630f2ddf7aeb1a207d7cb6ba6ec9f10c308",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WordCoin",
  "compilerVersion": "v0.4.13-nightly.2017.7.6+commit.40d4ee49",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-07\n*/\n\npragma solidity ^0.4.11;\n\ncontract DSNote {\n    event LogNote(\n    bytes4   indexed  sig,\n    address  indexed  guy,\n    bytes32  indexed  foo,\n    bytes32  indexed  bar,\n    uint\t \t  wad,\n    bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n        foo := calldataload(4)\n        bar := calldataload(36)\n        }\n\n        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\ncontract ERC20 {\n    function totalSupply() constant returns (uint supply);\n    function balanceOf( address who ) constant returns (uint value);\n    function allowance( address owner, address spender ) constant returns (uint _allowance);\n\n    function transfer( address to, uint value) returns (bool ok);\n    function transferFrom( address from, address to, uint value) returns (bool ok);\n    function approve( address spender, uint value ) returns (bool ok);\n\n    event Transfer( address indexed from, address indexed to, uint value);\n    event Approval( address indexed owner, address indexed spender, uint value);\n}\n\ncontract DSAuthority {\n    function canCall(\n    address src, address dst, bytes4 sig\n    ) constant returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    function DSAuth() {\n        owner = msg.sender;\n        LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n    auth\n    {\n        owner = owner_;\n        LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n    auth\n    {\n        authority = authority_;\n        LogSetAuthority(authority);\n    }\n\n    modifier auth {\n        assert(isAuthorized(msg.sender, msg.sig));\n        _;\n    }\n\n    modifier authorized(bytes4 sig) {\n        assert(isAuthorized(msg.sender, sig));\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, this, sig);\n        }\n    }\n\n    function assert(bool x) internal {\n        if (!x) revert();\n    }\n}\n\ncontract DSExec {\n    function tryExec( address target, bytes calldata, uint value)\n    internal\n    returns (bool call_ret)\n    {\n        return target.call.value(value)(calldata);\n    }\n    function exec( address target, bytes calldata, uint value)\n    internal\n    {\n        if(!tryExec(target, calldata, value)) {\n            revert();\n        }\n    }\n\n    // Convenience aliases\n    function exec( address t, bytes c )\n    internal\n    {\n        exec(t, c, 0);\n    }\n    function exec( address t, uint256 v )\n    internal\n    {\n        bytes memory c; exec(t, c, v);\n    }\n    function tryExec( address t, bytes c )\n    internal\n    returns (bool)\n    {\n        return tryExec(t, c, 0);\n    }\n    function tryExec( address t, uint256 v )\n    internal\n    returns (bool)\n    {\n        bytes memory c; return tryExec(t, c, v);\n    }\n}\n\ncontract DSMath {\n\n    /*\n    standard uint256 functions\n     */\n\n    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        assert((z = x + y) >= x);\n    }\n\n    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        assert((z = x - y) <= x);\n    }\n\n    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        assert((z = x * y) >= x);\n    }\n\n    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        z = x / y;\n    }\n\n    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        return x <= y ? x : y;\n    }\n    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        return x >= y ? x : y;\n    }\n\n    /*\n    uint128 functions (h is for half)\n     */\n\n\n    function hadd(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        assert((z = x + y) >= x);\n    }\n\n    function hsub(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        assert((z = x - y) <= x);\n    }\n\n    function hmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        assert((z = x * y) >= x);\n    }\n\n    function hdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        z = x / y;\n    }\n\n    function hmin(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        return x <= y ? x : y;\n    }\n    function hmax(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        return x >= y ? x : y;\n    }\n\n\n    /*\n    int256 functions\n     */\n\n    function imin(int256 x, int256 y) constant internal returns (int256 z) {\n        return x <= y ? x : y;\n    }\n    function imax(int256 x, int256 y) constant internal returns (int256 z) {\n        return x >= y ? x : y;\n    }\n\n    /*\n    WAD math\n     */\n\n    uint128 constant WAD = 10 ** 18;\n\n    function wadd(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hadd(x, y);\n    }\n\n    function wsub(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hsub(x, y);\n    }\n\n    function wmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        z = cast((uint256(x) * y + WAD / 2) / WAD);\n    }\n\n    function wdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        z = cast((uint256(x) * WAD + y / 2) / y);\n    }\n\n    function wmin(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hmin(x, y);\n    }\n    function wmax(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hmax(x, y);\n    }\n\n    /*\n    RAY math\n     */\n\n    uint128 constant RAY = 10 ** 27;\n\n    function radd(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hadd(x, y);\n    }\n\n    function rsub(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hsub(x, y);\n    }\n\n    function rmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        z = cast((uint256(x) * y + RAY / 2) / RAY);\n    }\n\n    function rdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        z = cast((uint256(x) * RAY + y / 2) / y);\n    }\n\n    function rpow(uint128 x, uint64 n) constant internal returns (uint128 z) {\n        // This famous algorithm is called \"exponentiation by squaring\"\n        // and calculates x^n with x as fixed-point and n as regular unsigned.\n        //\n        // It's O(log n), instead of O(n) for naive repeated multiplication.\n        //\n        // These facts are why it works:\n        //\n        //  If n is even, then x^n = (x^2)^(n/2).\n        //  If n is odd,  then x^n = x * x^(n-1),\n        //   and applying the equation for even x gives\n        //    x^n = x * (x^2)^((n-1) / 2).\n        //\n        //  Also, EVM division is flooring and\n        //    floor[(n-1) / 2] = floor[n / 2].\n\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n\n    function rmin(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hmin(x, y);\n    }\n    function rmax(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hmax(x, y);\n    }\n\n    function cast(uint256 x) constant internal returns (uint128 z) {\n        assert((z = uint128(x)) == x);\n    }\n\n}\n\ncontract DSStop is DSAuth, DSNote {\n\n    bool public stopped;\n\n    modifier stoppable {\n        assert (!stopped);\n        _;\n    }\n    function stop() auth note {\n        stopped = true;\n    }\n    function start() auth note {\n        stopped = false;\n    }\n\n}\n\ncontract DSTokenBase is ERC20, DSMath {\n    uint256                                            _supply;\n    mapping (address => uint256)                       _balances;\n    mapping (address => mapping (address => uint256))  _approvals;\n\n    function DSTokenBase(uint256 supply) {\n        _balances[msg.sender] = supply;\n        _supply = supply;\n    }\n\n    function totalSupply() constant returns (uint256) {\n        return _supply;\n    }\n    function balanceOf(address src) constant returns (uint256) {\n        return _balances[src];\n    }\n    function allowance(address src, address guy) constant returns (uint256) {\n        return _approvals[src][guy];\n    }\n\n    function transfer(address dst, uint wad) returns (bool) {\n        assert(_balances[msg.sender] >= wad);\n\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n        _balances[dst] = add(_balances[dst], wad);\n\n        Transfer(msg.sender, dst, wad);\n\n        return true;\n    }\n\n    function transferFrom(address src, address dst, uint wad) returns (bool) {\n        assert(_balances[src] >= wad);\n        assert(_approvals[src][msg.sender] >= wad);\n\n        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n        _balances[src] = sub(_balances[src], wad);\n        _balances[dst] = add(_balances[dst], wad);\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n\n    function approve(address guy, uint256 wad) returns (bool) {\n        _approvals[msg.sender][guy] = wad;\n\n        Approval(msg.sender, guy, wad);\n\n        return true;\n    }\n\n}\n\ncontract DSToken is DSTokenBase(0), DSStop {\n\n    string  public  symbol;\n    uint256  public  decimals = 8; // standard token precision. override to customize\n\n    function DSToken(string symbol_) {\n        symbol = symbol_;\n    }\n\n    function transfer(address dst, uint wad) stoppable note returns (bool) {\n        return super.transfer(dst, wad);\n    }\n    function transferFrom(\n    address src, address dst, uint wad\n    ) stoppable note returns (bool) {\n        return super.transferFrom(src, dst, wad);\n    }\n    function approve(address guy, uint wad) stoppable note returns (bool) {\n        return super.approve(guy, wad);\n    }\n\n    function push(address dst, uint128 wad) returns (bool) {\n        return transfer(dst, wad);\n    }\n\n    function pull(address src, uint128 wad) returns (bool) {\n        return transferFrom(src, msg.sender, wad);\n    }\n\n    function mint(uint128 wad) auth stoppable note {\n        _balances[msg.sender] = add(_balances[msg.sender], wad);\n        _supply = add(_supply, wad);\n    }\n    function burn(uint128 wad) auth stoppable note {\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n        _supply = sub(_supply, wad);\n    }\n\n    // Optional token name\n\n    string public  name = \"\";\n\n    function setName(string name_) auth {\n        name = name_;\n    }\n\n}\n\ncontract WordCoin is DSToken('Word'){\n    address public OfferContract;\n\n    uint public tokenSellCost;\n    uint public tokenBuyCost;\n    bool public isSellable;\n    uint public secondsAfter;\n    uint public depositPercents;\n\n    address public ICOContract;\n    address public preICOContract;\n\n    struct Deposit {\n    uint amount;\n    uint time;\n    }\n\n    mapping (address => uint) public reservedCoins;\n    mapping (address => Deposit) public deposits;\n\n    event LogBounty(address user, uint amount, string message);\n    event LogEtherBounty(address user, uint amount, string message);\n    event LogSendReward(address from, address to, string message);\n    event LogBuyCoins(address user, uint value, string message);\n    event LogGetEther(address user, uint value, string message);\n    event LogMakeDeposit(address user, uint value, string message);\n    event LogGetDeposit(address user, uint value, string message);\n\n    function WordCoin(){\n    }\n\n\n    modifier sellable {\n        assert(isSellable);\n        _;\n    }\n\n    modifier onlyOffer {\n        assert(msg.sender == OfferContract);\n        _;\n    }\n\n    modifier onlypreICO {\n        assert(msg.sender == preICOContract);\n        _;\n    }\n\n    modifier onlyICO {\n        assert(msg.sender == ICOContract);\n        _;\n    }\n\n    function setICO(address ICO) auth {\n        ICOContract = ICO;\n    }\n\n    function setPreICO(address preICO) auth {\n        preICOContract = preICO;\n    }\n\n    function preICOmint(uint128 wad) onlypreICO {\n        _balances[msg.sender] = add(_balances[msg.sender], wad);\n        _supply = add(_supply, wad);\n    }\n\n\n    function ICOmint(uint128 wad) onlyICO {\n        _balances[msg.sender] = add(_balances[msg.sender], wad);\n        _supply = add(_supply, wad);\n    }\n\n\n    function bounty(address user, uint amount) auth {\n        assert(_balances[this] >= amount);\n\n        _balances[user] += amount;\n        _balances[this] -= amount;\n        LogBounty(user, amount, \"Sent bounty\");\n    }\n\n\n    function etherBounty(address user, uint amount) auth {\n        assert(this.balance >= amount);\n        user.transfer(amount);\n        LogEtherBounty(user, amount, \"Sent ether bounty\");\n    }\n\n\n    function sendReward(address from, address to, uint value) onlyOffer {\n        reservedCoins[from] -= value;\n        _balances[to] += value;\n        LogSendReward(from, to, \"Sent reward\");\n    }\n\n\n    function reserveCoins(address from, uint value) onlyOffer {\n        _balances[from] -= value;\n        reservedCoins[from] += value;\n    }\n\n\n    function declineCoins(address from, uint value) onlyOffer {\n        _balances[from] += value;\n        reservedCoins[from] -= value;\n    }\n\n\n    function getEther(uint128 amount) sellable {\n        // exchange coins to Ethers with exchange course\n        assert(tokenSellCost > 0);\n        assert(div(mul(_balances[msg.sender], 10), 100) >= amount);\n        super.push(this, amount);\n        msg.sender.transfer(amount * tokenSellCost);\n        LogGetEther(msg.sender, amount * tokenSellCost, \"Got Ether\");\n    }\n\n\n    function makeDeposit(uint amount) {\n        assert(_balances[msg.sender] > amount);\n        assert(deposits[msg.sender].amount == 0);\n\n        deposits[msg.sender].amount = amount;\n        deposits[msg.sender].time = now;\n        _balances[msg.sender] -= amount;\n        _balances[this] += amount;\n        LogMakeDeposit(msg.sender, amount, \"Made deposit\");\n    }\n\n\n    function getDeposit() {\n        assert(deposits[msg.sender].amount != 0);\n        assert(now > (deposits[msg.sender].time + mul(secondsAfter, 1 seconds)));\n        assert(_balances[this] > div(mul(deposits[msg.sender].amount, add(100, depositPercents)), 100));\n\n        uint amount = div(mul(deposits[msg.sender].amount, add(100, depositPercents)), 100);\n        deposits[msg.sender].amount = 0;\n        _balances[msg.sender]  += amount;\n        _balances[this] -= amount;\n        LogGetDeposit(msg.sender, amount, \"Got deposit\");\n    }\n\n\n    function setBuyCourse(uint course) auth {\n        isSellable = false;\n        tokenBuyCost = course;\n    }\n\n    function setSellCourse(uint course) auth {\n        isSellable = false;\n        tokenSellCost = course;\n    }\n\n    function setSellable(bool sellable) auth {\n        isSellable = sellable;\n    }\n\n\n    function setOfferContract(address offerContract) auth {\n        OfferContract = offerContract;\n    }\n\n\n    function setSecondsAfter(uint secondsForDeposit) auth {\n        secondsAfter = secondsForDeposit;\n    }\n\n\n    function setDepositPercents(uint percents) auth {\n        depositPercents = percents;\n    }\n\n\n    function takeEther() payable auth {}\n\n\n    function () payable sellable {\n        uint amount = div(msg.value, tokenBuyCost);\n        _balances[this] -= amount;\n        _balances[msg.sender] += amount;\n        LogBuyCoins(msg.sender, amount, \"Coins bought\");\n    }\n}\n\ncontract preICO is DSAuth, DSExec, DSMath {\n\n    WordCoin  public  coin;\n    address public ICO;\n\n    address[] investorsArray;\n\n    struct Investor {\n    uint amount;\n    uint tokenAmount;\n    bool tokenSent;\n    bool rewardSent;\n    bool largeBonusSent;\n    }\n\n    mapping (address => Investor) public investors;\n\n    uint public deadline;\n    uint public start;\n    uint public countDays;\n\n    bool public autoTokenSent;\n\n    uint public totalDonations;\n    uint public totalDonationsWithBonuses;\n    uint public donationsCount;\n    uint public ethReward;\n\n    uint128 public preICOTokenAmount;\n    uint128 public preICOTokenRemaining;\n\n    uint128 public preICOTokenReward;\n    uint128 public preICOTokenRewardRemaining;\n\n    event LogBounty(address user, uint128 amount, string result);\n    event LogBounty256(address user, uint amount, string result);\n    event LogPush(address user, uint128 amount, string result);\n    event LogTokenSent(address user, bool amount, string result);\n\n    modifier afterDeadline() {\n        assert(now >= deadline);\n        _;\n    }\n\n    event LogDonation(address user, string message);\n    event LogTransferOwnership(address user, string message);\n    event LogSendTokens(address user, uint amount, string message);\n    event LogSendPOSTokens(address user, uint amount, string message);\n\n    function preICO(uint initCountDays){\n        countDays = initCountDays;\n        preICOTokenAmount = 200000000000000;\n        preICOTokenRemaining = 200000000000000;\n        preICOTokenReward = 20000000000000;\n        preICOTokenRewardRemaining = 20000000000000;\n    }\n\n\n    function setCoin(WordCoin initCoin) auth {\n        assert(preICOTokenAmount > 0);\n        start = now;\n        deadline = now + countDays * 1 days;\n        coin = initCoin;\n        coin.preICOmint(uint128(add(uint256(preICOTokenReward),uint256(preICOTokenAmount))));\n    }\n\n\n    function sendTokens() afterDeadline {\n        assert(!investors[msg.sender].tokenSent);\n\n        uint amount = div(mul(investors[msg.sender].amount, preICOTokenAmount), uint256(totalDonationsWithBonuses));\n\n        coin.push(msg.sender, uint128(amount));\n        preICOTokenRemaining -= uint128(amount);\n        investors[msg.sender].tokenSent = true;\n        investors[msg.sender].tokenAmount = amount;\n        LogSendTokens(msg.sender, amount, \"Sent tokens\");\n    }\n\n    function autoSend() afterDeadline {\n        LogDonation(msg.sender, \"START\");\n        assert(!autoTokenSent);\n        for (uint i = 0; i < investorsArray.length; i++) {\n            LogSendTokens(msg.sender, uint256(totalDonationsWithBonuses), \"TOTAL\");\n            uint amount = div(mul(investors[investorsArray[i]].amount, preICOTokenAmount), uint256(totalDonationsWithBonuses));\n            LogSendTokens(msg.sender, amount, \"TOTAL\");\n            if (!investors[investorsArray[i]].tokenSent) {\n                coin.push(investorsArray[i], uint128(amount));\n                LogSendTokens(msg.sender, amount, \"PUSH\");\n                investors[investorsArray[i]].tokenAmount = amount;\n                investors[investorsArray[i]].tokenSent = true;\n            }\n        }\n        autoTokenSent = true;\n    }\n\n    function setICOContract(address ico) auth{\n        ICO = ico;\n    }\n\n\n    function getEthers(uint amount) auth {\n        assert(amount > 0);\n        assert(this.balance - amount >= 0);\n        assert(msg.sender == owner);\n        owner.transfer(amount);\n    }\n\n\n    function getLargeBonus() {\n        assert(investors[msg.sender].amount > 7 ether);\n        assert(!investors[msg.sender].largeBonusSent);\n\n        uint amount = div(mul(investors[msg.sender].tokenAmount,10),100);\n        coin.push(msg.sender, uint128(amount));\n        preICOTokenRewardRemaining -= uint128(amount);\n        investors[msg.sender].largeBonusSent = true;\n\n        LogSendTokens(msg.sender, amount, \"Sent tokens for 7 Eth donate\");\n    }\n\n    function sendICOTokensBack(uint128 amount) afterDeadline auth{\n        assert(coin.balanceOf(this) > amount);\n        coin.push(msg.sender, amount);\n    }\n\n    function part( address who ) public constant returns (uint part) {\n        part = div(mul(investors[who].amount, 1000000), totalDonationsWithBonuses);\n    }\n\n    function rewardWasSent (address who) public constant returns (bool wasSent)  {\n        wasSent = investors[who].rewardSent;\n    }\n\n    function setRewardWasSent (address who) {\n        assert(msg.sender == ICO);\n        investors[who].rewardSent = true;\n    }\n\n    function () payable {\n        assert(now <= deadline);\n        assert(msg.sender !=  address(0));\n        assert(msg.value != 0);\n        assert(preICOTokenRemaining > 0);\n\n        uint percents = 0;\n\n        if (sub(now,start) < 24 hours) {\n            percents = sub(24, div(sub(now,start), 1 hours));\n        }\n\n        uint extraDonation = div(msg.value, 100) * percents;\n\n        investors[msg.sender].tokenSent = false;\n        totalDonationsWithBonuses += add(msg.value, extraDonation);\n        totalDonations += msg.value;\n\n        investors[msg.sender].amount += add(msg.value, extraDonation);\n        donationsCount++;\n\n        investorsArray.push(msg.sender);\n\n        LogDonation(msg.sender, \"Donation was made\");\n    }\n}\n\n\ncontract ICO is DSAuth, DSExec, DSMath {\n    uint128 public ICOAmount;\n    uint128 public ICOReward;\n\n    address[] investorsArray;\n\n    struct preICOInvestor {\n    uint amount;\n    bool tokenSent;\n    bool rewardSent;\n    bool largeBonusSent;\n    }\n\n    mapping (address => preICOInvestor) public investors;\n\n    preICO public preico;\n    WordCoin public coin;\n    bool public canGiveMoneyBack;\n    bool public rewardSent;\n    uint public cost;\n    uint public tokenCost;\n\n    bool public isICOStopped;\n\n    uint public totalDonations;\n\n    uint public totalDonationsWithBonuses;\n\n    modifier allowGetMoneyBack() {\n        assert(canGiveMoneyBack);\n        _;\n    }\n\n    modifier ICOStopped() {\n        assert(isICOStopped);\n        _;\n    }\n\n    event LogSetPreICO(preICO preicoAddress, string message);\n    event LogStartWeek(string message);\n    event LogGetMoneyBack(address user, uint value, string message);\n    event LogMoneyToPreICO(address user, uint value, string message);\n    event LogBuyTokens(address user, uint value, string message);\n    event LogSendPOSTokens(address user, uint value, string message);\n    event LogTransferOwnership(address user, string message);\n    event Log1(uint128 la, string message);\n    event Log2(bool la, string message);\n\n    function ICO(){\n        ICOAmount = 500000000000000;\n        ICOReward = 10000000000000;\n    }\n\n    function setPreICO(preICO initPreICO) auth {\n        assert(initPreICO != address(0));\n        preico = initPreICO;\n    }\n\n    function getEthers(uint amount) auth {\n        assert(amount > 0);\n        assert(this.balance - amount >= 0);\n        assert(msg.sender == owner);\n        owner.transfer(amount);\n    }\n\n    function startWeekOne() auth {\n        assert(preico != address(0));\n        tokenCost = div(preico.totalDonations(), preico.preICOTokenAmount());\n        cost = 100;\n        LogStartWeek(\"First week started\");\n    }\n\n\n    function startWeekTwo() auth {\n        cost = 105;\n        LogStartWeek(\"Second week started\");\n    }\n\n    function startWeekThree() auth {\n        cost = 110;\n        LogStartWeek(\"Third week started\");\n    }\n\n\n    function startWeekFour() auth {\n        cost = 115;\n        LogStartWeek(\"Fourth week started\");\n    }\n\n\n    function startWeekFive() auth {\n        cost = 120;\n        LogStartWeek(\"Last week started\");\n    }\n\n\n    function setCanGetMoneyBack(bool value) auth {\n        canGiveMoneyBack = value;\n    }\n\n\n    function setTokenCost(uint newTokenCost) auth {\n        assert(newTokenCost > 0);\n        tokenCost = newTokenCost;\n    }\n\n\n    function getMoneyBack() allowGetMoneyBack {\n        assert(investors[msg.sender].amount > 0);\n        msg.sender.transfer(investors[msg.sender].amount);\n        investors[msg.sender].amount = 0;\n        LogGetMoneyBack(msg.sender, investors[msg.sender].amount, \"Money returned\");\n    }\n\n\n    function setCoin(WordCoin initCoin) auth {\n        assert(ICOAmount > 0);\n        coin = initCoin;\n        coin.ICOmint(uint128(add(uint256(ICOAmount),uint256(ICOReward))));\n    }\n\n    function sendPOSTokens() ICOStopped {\n        assert(!investors[msg.sender].rewardSent);\n        assert(investors[msg.sender].amount > 0);\n        assert(ICOReward > 0);\n\n        uint amount = div(mul(investors[msg.sender].amount, ICOReward), uint256(totalDonations));\n\n        investors[msg.sender].rewardSent = true;\n\n        coin.push(msg.sender, uint128(amount));\n        ICOReward -= uint128(amount);\n        LogSendPOSTokens(msg.sender, amount, \"Sent prize tokens\");\n    }\n\n    function sendEthForReward() ICOStopped {\n        assert(!preico.rewardWasSent(msg.sender));\n        uint amount = div(mul(totalDonations, 3), 100);\n        uint ethAmountForReward = div(mul(amount,preico.part(msg.sender)), 1000000);\n        preico.setRewardWasSent(msg.sender);\n        msg.sender.transfer(ethAmountForReward);\n    }\n\n    function sendICOTokensBack(uint128 amount) ICOStopped auth{\n        assert(coin.balanceOf(this) > amount);\n        coin.push(msg.sender, amount);\n    }\n\n    function setBigICOStopped(bool stop) auth{\n        isICOStopped = stop;\n    }\n\n    function() payable {\n        assert(msg.sender !=  address(0));\n        assert(msg.value != 0);\n        assert(cost > 0);\n        assert(tokenCost > 0);\n        assert(ICOAmount > 0);\n        assert(!isICOStopped);\n\n        investors[msg.sender].amount += msg.value;\n\n        totalDonations += msg.value;\n        uint amount = div(msg.value, div(mul(tokenCost, cost), 100));\n        if (msg.value > 7 ether) {\n            amount = div(mul(amount, 110),100);\n        }\n        coin.push(msg.sender, uint128(amount));\n        ICOAmount -= uint128(amount);\n\n        investorsArray.push(msg.sender);\n\n        LogBuyTokens(msg.sender, amount, \"Tokens bought\");\n    }\n}",
  "bytecode": ""
}