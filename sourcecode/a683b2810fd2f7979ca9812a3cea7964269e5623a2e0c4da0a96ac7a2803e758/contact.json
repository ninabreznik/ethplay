{
  "address": "0x447ede8c693fc7085ce5fcb84cf5646875abcc7d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DUSDToken",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-06\n*/\n\npragma solidity 0.5.8;\n\n/**\n * @title SafeMath \n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, revert on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, revert on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtract two unsigned integers, revert on underflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Add two unsigned integers, revert on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev See https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Ownable {\n    address internal _owner;\n    address private _pendingOwner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @return The address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @return The address of the pending owner.\n     */\n    function pendingOwner() public view returns (address) {\n        return _pendingOwner;\n    }\n    \n    /**\n     * @dev Revert if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: the caller must be owner\");\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Ownable: cannot transfer control of the contract to the zero address\");\n        _pendingOwner = newOwner;\n    }\n\n    /**\n     * @dev Receive control of the contract.\n     */\n    function receiveOwnership() public {\n        require(msg.sender == _pendingOwner, \"Ownable: the caller must be pending owner\");\n        emit OwnershipTransferred(_owner, _pendingOwner);\n        _owner = _pendingOwner;\n        _pendingOwner = address(0);  \n    }\n}\n\n/**\n * @title Standard ERC20 token\n * @dev Implementation of the basic standard token.\n */\ncontract StandardToken is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) internal _balances;\n    mapping (address => mapping (address => uint256)) internal _allowed;\n\n    uint256 internal _totalSupply;\n    \n    /**\n     * @dev Total number of tokens in existence.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Get the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified address.\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0), \"StandardToken: cannot transfer tokens to the zero address\");\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0), \"StandardToken: cannot approve to the zero address\");\n        require(owner != address(0), \"StandardToken: setter cannot be the zero address\");\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused, \"Pausable: only when the contract is not paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(paused, \"Pausable: only when the contract is paused\");\n        _;\n    }\n\n    /**\n     * @dev Called by the owner to pause, triggers stopped state.\n     */\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n     * @dev Called by the owner to unpause, returns to normal state.\n     */\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n}\n\n/**\n * @title PausableToken\n * @dev Rewrite ERC-20 specification that lets owner Pause all trading.\n */\ncontract PausableToken is StandardToken, Pausable {\n\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseAllowance(address _spender, uint _addedValue) public whenNotPaused returns (bool) {\n        return super.increaseAllowance(_spender, _addedValue);\n    }\n\n    function decreaseAllowance(address _spender, uint _subtractedValue) public whenNotPaused returns (bool) {\n        return super.decreaseAllowance(_spender, _subtractedValue);\n    }\n}\n\n/**\n * @title blackListToken\n * @dev This contract implements some blacklist operations.\n */\ncontract blackListToken is PausableToken {\n    mapping(address=>bool) internal _isBlackList;\n\n    event AddToBlackList(address indexed target);\n    event RemoveFromBlackList(address indexed target);\n\n    /**\n     * @dev Return whether the specified address is on the blacklist.\n     * @param account A specified address.\n     */\n    function isBlackList(address account) public view returns(bool) {\n        return _isBlackList[account];\n    }\n\n    /**\n     * @dev Add the specified address to the blacklist.\n     * @param account A specified address.\n     */\n    function addToBlackList(address account) public onlyOwner {\n        _isBlackList[account] = true;\n        emit AddToBlackList(account);\n    }\n\n    /**\n     * @dev Remove the specified address from the blacklist.\n     * @param account A specified address.\n     */\n    function removeFromBlackList(address account) public onlyOwner {\n        _isBlackList[account] = false;\n        emit RemoveFromBlackList(account);\n    }\n\n    /**\n     * @dev Rewrite the transfer function to check if the address is on the blacklist.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(!_isBlackList[msg.sender], \"blackListToken: msg.sender is on the blacklist\");\n        require(!_isBlackList[_to], \"blackListToken: the target address is on the blacklist\");\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * @dev Rewrite the transferFrom function to check if the address is on the blacklist.\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(!_isBlackList[msg.sender], \"blackListToken: msg.sender is on the blacklist\");\n        require(!_isBlackList[_from], \"blackListToken: the source address is on the blacklist\");\n        require(!_isBlackList[_to], \"blackListToken: the target address is on the blacklist\");\n        return super.transferFrom(_from, _to, _value);\n    }   \n}\n\n/**\n * @title BurnableToken\n * @dev Implement the function of ERC20 token burning.\n */\ncontract BurnableToken is PausableToken, blackListToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burn a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public returns (bool) {\n        require(_value <= _balances[msg.sender], \"BurnableToken: not enough token balance\");\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        _balances[msg.sender] = _balances[msg.sender].sub(_value);\n        _totalSupply = _totalSupply.sub(_value);\n        emit Burn(msg.sender, _value);\n        emit Transfer(msg.sender, address(0), _value);\n        return true;\n    }\n}\n\n/**\n * @title MintableToken\n * @dev Implement the function of ERC20 token minting.\n */\ncontract MintableToken is StandardToken, blackListToken {\n\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyOwner returns (bool) {\n        require(to != address(0), \"MintableToken: cannot mint to the zero address\");\n        require(!_isBlackList[to], \"MintableToken: the target address is on the blacklist\");\n        _totalSupply = _totalSupply.add(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(address(0), to, value);\n        return true;\n    }\n}\n\ncontract DUSDToken is BurnableToken, MintableToken {\n\n    string public constant name = \"Digital USD\";\n    string public constant symbol = \"DUSD\";\n    uint8 public constant decimals = 18;\n\n    bool public initialized = false;\n    bool public destructible = false;\n\n    /**\n     * @dev Set '_owner' to a speicified address.\n     * This owner just used for the 'kill' function.\n     */\n    constructor() public {\n        destructible = true;\n        _owner = 0xfe30e619cc2915C905Ca45C1BA8311109A3cBdB1;\n    }\n\n    /**\n     * @dev Set the owner of contract and the initial total of token.\n     *      Contract only can initialized once \n     */\n    function initialize() public {\n        require(!initialized, \"DUSDToken: already initialized\");\n        _owner = 0xfe30e619cc2915C905Ca45C1BA8311109A3cBdB1;\n        _totalSupply = 1e28;\n        _balances[_owner] = _totalSupply;\n        emit Transfer(address(0), _owner, _totalSupply);\n        initialized = true;\n    } \n\n    /**\n     * @dev Owner can call this function to destroy this contract.\n     */\n    function kill() public onlyOwner {\n        require(destructible, \"DUSDToken: only DUSDToken contract can destroy\");\n        selfdestruct(msg.sender);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receiveOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addToBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"destructible\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlackList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddToBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"}],\"name\":\"RemoveFromBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "608060405260048054600160a01b60ff02191690556006805461ffff1916905534801561002b57600080fd5b506006805461ff001916610100179055600380546001600160a01b03191673fe30e619cc2915c905ca45c1ba8311109a3cbdb11790556117ef806100706000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80635c975abb116100f957806395d89b4111610097578063b36d691911610071578063b36d6919146104a9578063dd62ed3e146104cf578063e30c3978146104fd578063f2fde38b14610505576101c4565b806395d89b4114610449578063a457c2d714610451578063a9059cbb1461047d576101c4565b80638129fc1c116100d35780638129fc1c1461040d5780638456cb59146104155780638da5cb5b1461041d5780638f32d59b14610441576101c4565b80635c975abb146103d75780636a74ef0a146103df57806370a08231146103e7576101c4565b80633950935111610166578063417c73a711610140578063417c73a71461036657806341c0e1b51461038c57806342966c68146103945780634a49ac4c146103b1576101c4565b806339509351146103065780633f4ba83a1461033257806340c10f191461033a576101c4565b806318160ddd116101a257806318160ddd1461028e5780631c74a301146102a857806323b872dd146102b2578063313ce567146102e8576101c4565b806306fdde03146101c9578063095ea7b314610246578063158ef93e14610286575b600080fd5b6101d161052b565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561020b5781810151838201526020016101f3565b50505050905090810190601f1680156102385780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102726004803603604081101561025c57600080fd5b506001600160a01b038135169060200135610555565b604080519115158252519081900360200190f35b6102726105b5565b6102966105be565b60408051918252519081900360200190f35b6102b06105c4565b005b610272600480360360608110156102c857600080fd5b506001600160a01b03813581169160208101359091169060400135610676565b6102f0610791565b6040805160ff9092168252519081900360200190f35b6102726004803603604081101561031c57600080fd5b506001600160a01b038135169060200135610796565b6102b06107ef565b6102726004803603604081101561035057600080fd5b506001600160a01b0381351690602001356108bb565b6102b06004803603602081101561037c57600080fd5b50356001600160a01b0316610a2e565b6102b0610ac0565b610272600480360360208110156103aa57600080fd5b5035610b52565b6102b0600480360360208110156103c757600080fd5b50356001600160a01b0316610c4d565b610272610cdc565b610272610cec565b610296600480360360208110156103fd57600080fd5b50356001600160a01b0316610cfa565b6102b0610d15565b6102b0610dfb565b610425610ece565b604080516001600160a01b039092168252519081900360200190f35b610272610edd565b6101d1610eee565b6102726004803603604081101561046757600080fd5b506001600160a01b038135169060200135610f11565b6102726004803603604081101561049357600080fd5b506001600160a01b038135169060200135610f6a565b610272600480360360208110156104bf57600080fd5b50356001600160a01b0316611021565b610296600480360360408110156104e557600080fd5b506001600160a01b038135811691602001351661103f565b61042561106a565b6102b06004803603602081101561051b57600080fd5b50356001600160a01b0316611079565b6040518060400160405280600b8152602001600160aa1b6a111a59da5d185b081554d10281525081565b600454600090600160a01b900460ff16156105a457604051600160e51b62461bcd02815260040180806020018281038252602e8152602001806116f0602e913960400191505060405180910390fd5b6105ae8383611129565b9392505050565b60065460ff1681565b60025490565b6004546001600160a01b0316331461061057604051600160e51b62461bcd0281526004018080602001828103825260298152602001806117746029913960400191505060405180910390fd5b6004546003546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360048054600380546001600160a01b03199081166001600160a01b03841617909155169055565b3360009081526005602052604081205460ff16156106c857604051600160e51b62461bcd02815260040180806020018281038252602e815260200180611500602e913960400191505060405180910390fd5b6001600160a01b03841660009081526005602052604090205460ff161561072357604051600160e51b62461bcd0281526004018080602001828103825260368152602001806115ce6036913960400191505060405180910390fd5b6001600160a01b03831660009081526005602052604090205460ff161561077e57604051600160e51b62461bcd02815260040180806020018281038252603681526020018061155f6036913960400191505060405180910390fd5b61078984848461113f565b949350505050565b601281565b600454600090600160a01b900460ff16156107e557604051600160e51b62461bcd02815260040180806020018281038252602e8152602001806116f0602e913960400191505060405180910390fd5b6105ae8383611199565b6107f7610edd565b61083557604051600160e51b62461bcd0281526004018080602001828103825260218152602001806117536021913960400191505060405180910390fd5b600454600160a01b900460ff1661088057604051600160e51b62461bcd02815260040180806020018281038252602a8152602001806116c6602a913960400191505060405180910390fd5b60048054600160a01b60ff02191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60006108c5610edd565b61090357604051600160e51b62461bcd0281526004018080602001828103825260218152602001806117536021913960400191505060405180910390fd5b6001600160a01b03831661094b57604051600160e51b62461bcd02815260040180806020018281038252602e8152602001806114d2602e913960400191505060405180910390fd5b6001600160a01b03831660009081526005602052604090205460ff16156109a657604051600160e51b62461bcd02815260040180806020018281038252603581526020018061171e6035913960400191505060405180910390fd5b6002546109b9908363ffffffff6111da16565b6002556001600160a01b0383166000908152602081905260409020546109e5908363ffffffff6111da16565b6001600160a01b0384166000818152602081815260408083209490945583518681529351929391926000805160206116348339815191529281900390910190a350600192915050565b610a36610edd565b610a7457604051600160e51b62461bcd0281526004018080602001828103825260218152602001806117536021913960400191505060405180910390fd5b6001600160a01b038116600081815260056020526040808220805460ff19166001179055517f1f4bf51d6d1ab1c0e06bfa705a1e8756ec1e0e9908a2a837fefd6606c27c25669190a250565b610ac8610edd565b610b0657604051600160e51b62461bcd0281526004018080602001828103825260218152602001806117536021913960400191505060405180910390fd5b600654610100900460ff16610b4f57604051600160e51b62461bcd02815260040180806020018281038252602e815260200180611698602e913960400191505060405180910390fd5b33ff5b33600090815260208190526040812054821115610ba357604051600160e51b62461bcd02815260040180806020018281038252602781526020018061179d6027913960400191505060405180910390fd5b33600090815260208190526040902054610bc3908363ffffffff6111ec16565b33600090815260208190526040902055600254610be6908363ffffffff6111ec16565b60025560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a260408051838152905160009133916000805160206116348339815191529181900360200190a3506001919050565b610c55610edd565b610c9357604051600160e51b62461bcd0281526004018080602001828103825260218152602001806117536021913960400191505060405180910390fd5b6001600160a01b038116600081815260056020526040808220805460ff19169055517f33ec73d3d1cf904de5823c0e76ca0d4825c2ff67bfb3a0a5ee7cd28a6f966db69190a250565b600454600160a01b900460ff1681565b600654610100900460ff1681565b6001600160a01b031660009081526020819052604090205490565b60065460ff1615610d705760408051600160e51b62461bcd02815260206004820152601e60248201527f44555344546f6b656e3a20616c726561647920696e697469616c697a65640000604482015290519081900360640190fd5b600380546001600160a01b03191673fe30e619cc2915c905ca45c1ba8311109a3cbdb1178082556b204fce5e3e2502611000000060028190556001600160a01b0391821660009081526020818152604080832084905594548551938452945194909316939092600080516020611634833981519152928290030190a36006805460ff19166001179055565b610e03610edd565b610e4157604051600160e51b62461bcd0281526004018080602001828103825260218152602001806117536021913960400191505060405180910390fd5b600454600160a01b900460ff1615610e8d57604051600160e51b62461bcd02815260040180806020018281038252602e8152602001806116f0602e913960400191505060405180910390fd5b60048054600160a01b60ff021916600160a01b1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b6003546001600160a01b031690565b6003546001600160a01b0316331490565b604051806040016040528060048152602001600160e21b63111554d10281525081565b600454600090600160a01b900460ff1615610f6057604051600160e51b62461bcd02815260040180806020018281038252602e8152602001806116f0602e913960400191505060405180910390fd5b6105ae8383611201565b3360009081526005602052604081205460ff1615610fbc57604051600160e51b62461bcd02815260040180806020018281038252602e815260200180611500602e913960400191505060405180910390fd5b6001600160a01b03831660009081526005602052604090205460ff161561101757604051600160e51b62461bcd02815260040180806020018281038252603681526020018061155f6036913960400191505060405180910390fd5b6105ae838361123d565b6001600160a01b031660009081526005602052604090205460ff1690565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6004546001600160a01b031690565b611081610edd565b6110bf57604051600160e51b62461bcd0281526004018080602001828103825260218152602001806117536021913960400191505060405180910390fd5b6001600160a01b03811661110757604051600160e51b62461bcd0281526004018080602001828103825260448152602001806116546044913960600191505060405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000611136338484611296565b50600192915050565b600454600090600160a01b900460ff161561118e57604051600160e51b62461bcd02815260040180806020018281038252602e8152602001806116f0602e913960400191505060405180910390fd5b610789848484611388565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916111369185906111d5908663ffffffff6111da16565b611296565b6000828201838110156105ae57600080fd5b6000828211156111fb57600080fd5b50900390565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916111369185906111d5908663ffffffff6111ec16565b600454600090600160a01b900460ff161561128c57604051600160e51b62461bcd02815260040180806020018281038252602e8152602001806116f0602e913960400191505060405180910390fd5b6105ae83836113da565b6001600160a01b0382166112de57604051600160e51b62461bcd02815260040180806020018281038252603181526020018061152e6031913960400191505060405180910390fd5b6001600160a01b03831661132657604051600160e51b62461bcd0281526004018080602001828103825260308152602001806116046030913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b60006113958484846113e3565b6001600160a01b0384166000908152600160209081526040808320338085529252909120546113d09186916111d5908663ffffffff6111ec16565b5060019392505050565b60006111363384845b6001600160a01b03821661142b57604051600160e51b62461bcd0281526004018080602001828103825260398152602001806115956039913960400191505060405180910390fd5b6001600160a01b038316600090815260208190526040902054611454908263ffffffff6111ec16565b6001600160a01b038085166000908152602081905260408082209390935590841681522054611489908263ffffffff6111da16565b6001600160a01b0380841660008181526020818152604091829020949094558051858152905191939287169260008051602061163483398151915292918290030190a350505056fe4d696e7461626c65546f6b656e3a2063616e6e6f74206d696e7420746f20746865207a65726f2061646472657373626c61636b4c697374546f6b656e3a206d73672e73656e646572206973206f6e2074686520626c61636b6c6973745374616e64617264546f6b656e3a2063616e6e6f7420617070726f766520746f20746865207a65726f2061646472657373626c61636b4c697374546f6b656e3a20746865207461726765742061646472657373206973206f6e2074686520626c61636b6c6973745374616e64617264546f6b656e3a2063616e6e6f74207472616e7366657220746f6b656e7320746f20746865207a65726f2061646472657373626c61636b4c697374546f6b656e3a2074686520736f757263652061646472657373206973206f6e2074686520626c61636b6c6973745374616e64617264546f6b656e3a207365747465722063616e6e6f7420626520746865207a65726f2061646472657373ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef4f776e61626c653a2063616e6e6f74207472616e7366657220636f6e74726f6c206f662074686520636f6e747261637420746f20746865207a65726f206164647265737344555344546f6b656e3a206f6e6c792044555344546f6b656e20636f6e74726163742063616e2064657374726f795061757361626c653a206f6e6c79207768656e2074686520636f6e7472616374206973207061757365645061757361626c653a206f6e6c79207768656e2074686520636f6e7472616374206973206e6f74207061757365644d696e7461626c65546f6b656e3a20746865207461726765742061646472657373206973206f6e2074686520626c61636b6c6973744f776e61626c653a207468652063616c6c6572206d757374206265206f776e65724f776e61626c653a207468652063616c6c6572206d7573742062652070656e64696e67206f776e65724275726e61626c65546f6b656e3a206e6f7420656e6f75676820746f6b656e2062616c616e6365a165627a7a72305820ac7eb4867c9faad3d930196d52efe70094cf03f7d48bef5a69567509f84daefc0029"
}