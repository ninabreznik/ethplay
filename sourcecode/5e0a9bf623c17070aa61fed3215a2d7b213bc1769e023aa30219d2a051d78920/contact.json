{
  "address": "0xa562dc7657c333cac710175ae658ffa6f9414bbc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BITFRIENDZ",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-08\n*/\n\npragma solidity ^0.5.2;\n\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\ncontract Owned {\n    address public owner;\n    address public newOwner;\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        owner = newOwner;\n    }\n}\n\n\ncontract BITFRIENDZ is IERC20, Owned {\n    using SafeMath for uint256;\n    \n    // Constructor - Sets the token Owner\n    constructor() public {\n        owner = msg.sender;\n        _balances[0x14fBA4aa05AEeC42336CB75bc30bF78dbC6b3f9F] = 2000000000 * 10 ** decimals;\n        emit Transfer(address(0), 0x14fBA4aa05AEeC42336CB75bc30bF78dbC6b3f9F, 2000000000 * 10 ** decimals);\n        _balances[0xdA78d97Fb07d945691916798CFF57324770a6C34] = 2000000000 * 10 ** decimals;\n        emit Transfer(address(0), 0xdA78d97Fb07d945691916798CFF57324770a6C34, 2000000000 * 10 ** decimals);\n        _balances[0xF07e6A0EAbF18A3D8bB10e6E63c2E9e2d101C160] = 1000000000 * 10 ** decimals;\n        emit Transfer(address(0), 0xF07e6A0EAbF18A3D8bB10e6E63c2E9e2d101C160, 1000000000 * 10 ** decimals);\n        _balances[address(this)] = 15000000000 * 10 ** decimals;\n        emit Transfer(address(0), address(this), 15000000000 * 10 ** decimals);\n    }\n    \n    // Events\n    event Error(string err);\n    \n    // Token Setup\n    string public constant name = \"BITFRIENDZ\";\n    string public constant symbol = \"BFRN\";\n    uint256 public constant decimals = 18;\n    uint256 public supply = 20000000000 * 10 ** decimals;\n    \n    uint256 public tokenPrice = 50000000000;\n    \n    // Balances for each account\n    mapping(address => uint256) _balances;\n \n    // Owner of account approves the transfer of an amount to another account\n    mapping(address => mapping (address => uint256)) public _allowed;\n \n    // Get the total supply of tokens\n    function totalSupply() public view returns (uint) {\n        return supply;\n    }\n \n    // Get the token balance for account `tokenOwner`\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return _balances[tokenOwner];\n    }\n \n    // Get the allowance of funds beteen a token holder and a spender\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return _allowed[tokenOwner][spender];\n    }\n \n    // Transfer the balance from owner's account to another account\n    function transfer(address to, uint value) public returns (bool success) {\n        require(_balances[msg.sender] >= value);\n        if (to == address(this) || to == address(0)) {\n            burn(value);\n            return true;\n        } else {\n            _balances[msg.sender] = _balances[msg.sender].sub(value);\n            _balances[to] = _balances[to].add(value);\n            emit Transfer(msg.sender, to, value);\n            return true;\n        }\n    }\n    \n    // Sets how much a sender is allowed to use of an owners funds\n    function approve(address spender, uint value) public returns (bool success) {\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n    \n    // Transfer from function, pulls from allowance\n    function transferFrom(address from, address to, uint value) public returns (bool success) {\n        require(value <= balanceOf(from));\n        require(value <= allowance(from, to));\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        _allowed[from][to] = _allowed[from][to].sub(value);\n        emit Transfer(from, to, value);\n        return true;\n    }\n    \n    function () external payable {\n        require(msg.value >= tokenPrice);\n        uint256 amount = (msg.value * 10 ** decimals) / tokenPrice;\n        uint256 bonus = 0;\n        if (msg.value >= 1 ether && msg.value < 2 ether) {\n            bonus = (((amount * 100) + (amount * 25)) / 100);\n        } else if (msg.value >= 2 ether && msg.value < 4 ether) {\n            bonus = (((amount * 100) + (amount * 50)) / 100);\n        } else if (msg.value >= 4 ether && msg.value < 5 ether) {\n            bonus = (((amount * 10000) + (amount * 5625)) / 10000);\n        } else if (msg.value >= 5 ether) {\n            bonus = (((amount * 100) + (amount * 75)) / 100);\n        }\n        if (_balances[address(this)] < amount + bonus) {\n            revert();\n        }\n        _balances[address(this)] = _balances[address(this)].sub(amount + bonus);\n        _balances[msg.sender] = _balances[msg.sender].add(amount + bonus);\n        emit Transfer(address(this), msg.sender, amount + bonus);\n    }\n    \n    function BuyTokens() public payable {\n        require(msg.value >= tokenPrice);\n        uint256 amount = (msg.value * 10 ** decimals) / tokenPrice;\n        uint256 bonus = 0;\n        if (msg.value >= 1 ether && msg.value < 2 ether) {\n            bonus = (((amount * 100) + (amount * 25)) / 100);\n        } else if (msg.value >= 2 ether && msg.value < 4 ether) {\n            bonus = (((amount * 100) + (amount * 50)) / 100);\n        } else if (msg.value >= 4 ether && msg.value < 5 ether) {\n            bonus = (((amount * 10000) + (amount * 5625)) / 10000);\n        } else if (msg.value >= 5 ether) {\n            bonus = (((amount * 100) + (amount * 75)) / 100);\n        }\n        if (_balances[address(this)] < amount + bonus) {\n            revert();\n        }\n        _balances[address(this)] = _balances[address(this)].sub(amount + bonus);\n        _balances[msg.sender] = _balances[msg.sender].add(amount + bonus);\n        emit Transfer(address(this), msg.sender, amount + bonus);\n    }\n    \n    function endICO() public onlyOwner {\n        _balances[msg.sender] = _balances[msg.sender].sub(_balances[address(this)]);\n        msg.sender.transfer(address(this).balance);\n    }\n    \n    function burn(uint256 amount) public {\n        require(_balances[msg.sender] >= amount);\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n        supply = supply.sub(amount);\n        emit Transfer(msg.sender, address(0), amount);\n    }\n}",
  "bytecode": "60806040526b409f9cbc7c4a04c220000000600255640ba43b740060035534801561002957600080fd5b5060008054600160a060020a031916331781557314fba4aa05aeec42336cb75bc30bf78dbc6b3f9f808252600460209081526b06765c793fa10079d00000007f37a05224b4a33f83b46978292ab5fb761f83a16bcd6706aa942e6d7d2805b69d8190556040805191825251929392600080516020610f29833981519152929181900390910190a373da78d97fb07d945691916798cff57324770a6c346000818152600460209081526b06765c793fa10079d00000007fc3c0c091796ae0f24ea8b0e642e796f655171f58070555faf0ef0b5b9d90f9208190556040805191825251600080516020610f29833981519152929181900390910190a373f07e6a0eabf18a3d8bb10e6e63c2e9e2d101c1606000818152600460209081526b033b2e3c9fd0803ce80000007fe85623e4e4bdb3b83ab175e7c228fd10a56df30fda7890a629d0bdc3b3892efd8190556040805191825251600080516020610f29833981519152929181900390910190a33060008181526004602090815260408083206b3077b58d5d378391980000009081905581519081529051600080516020610f29833981519152929181900390910190a3610d41806101e86000396000f3fe608060405260043610610131576000357c01000000000000000000000000000000000000000000000000000000009004806379ba5097116100bd578063ba0fb86111610081578063ba0fb8611461054d578063d4ee1d9014610588578063d81111ab1461059d578063dd62ed3e146105a5578063f2fde38b146105e057610131565b806379ba5097146104a45780637ff9b596146104b95780638da5cb5b146104ce57806395d89b41146104ff578063a9059cbb1461051457610131565b806323b872dd1161010457806323b872dd146103d8578063313ce5671461041b57806342966c68146104305780634f2484091461045c57806370a082311461047157610131565b8063047fc9aa146102c557806306fdde03146102ec578063095ea7b31461037657806318160ddd146103c3575b60035434101561014057600080fd5b60035460009034670de0b6b3a76400000281151561015a57fe5b0490506000670de0b6b3a7640000341080159061017e5750671bc16d674ec8000034105b1561019657606482810260198402015b04905061021a565b671bc16d674ec8000034101580156101b55750673782dace9d90000034105b156101c9576064828102603284020161018e565b673782dace9d90000034101580156101e85750674563918244f4000034105b156101fe576127108281026115f984020161018e565b674563918244f40000341061021a57506064604b820282820201045b30600090815260046020526040902054828201111561023857600080fd5b3060009081526004602052604090205461025a9083830163ffffffff61061316565b306000908152600460205260408082209290925533815220546102859083830163ffffffff61062d16565b336000818152600460209081526040918290209390935580518585018152905191923092600080516020610cf68339815191529281900390910190a35050005b3480156102d157600080fd5b506102da610646565b60408051918252519081900360200190f35b3480156102f857600080fd5b5061030161064c565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561033b578181015183820152602001610323565b50505050905090810190601f1680156103685780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561038257600080fd5b506103af6004803603604081101561039957600080fd5b50600160a060020a038135169060200135610683565b604080519115158252519081900360200190f35b3480156103cf57600080fd5b506102da6106e9565b3480156103e457600080fd5b506103af600480360360608110156103fb57600080fd5b50600160a060020a038135811691602081013590911690604001356106ef565b34801561042757600080fd5b506102da610818565b34801561043c57600080fd5b5061045a6004803603602081101561045357600080fd5b503561081d565b005b34801561046857600080fd5b5061045a6108a8565b34801561047d57600080fd5b506102da6004803603602081101561049457600080fd5b5035600160a060020a0316610928565b3480156104b057600080fd5b5061045a610943565b3480156104c557600080fd5b506102da61098b565b3480156104da57600080fd5b506104e3610991565b60408051600160a060020a039092168252519081900360200190f35b34801561050b57600080fd5b506103016109a0565b34801561052057600080fd5b506103af6004803603604081101561053757600080fd5b50600160a060020a0381351690602001356109d7565b34801561055957600080fd5b506102da6004803603604081101561057057600080fd5b50600160a060020a0381358116916020013516610ac4565b34801561059457600080fd5b506104e3610ae1565b61045a610af0565b3480156105b157600080fd5b506102da600480360360408110156105c857600080fd5b50600160a060020a0381358116916020013516610c84565b3480156105ec57600080fd5b5061045a6004803603602081101561060357600080fd5b5035600160a060020a0316610caf565b60008282111561062257600080fd5b508082035b92915050565b60008282018381101561063f57600080fd5b9392505050565b60025481565b60408051808201909152600a81527f424954465249454e445a00000000000000000000000000000000000000000000602082015281565b336000818152600560209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60025490565b60006106fa84610928565b82111561070657600080fd5b6107108484610c84565b82111561071c57600080fd5b600160a060020a038416600090815260046020526040902054610745908363ffffffff61061316565b600160a060020a03808616600090815260046020526040808220939093559085168152205461077a908363ffffffff61062d16565b600160a060020a03808516600081815260046020908152604080832095909555928816815260058352838120918152915220546107bd908363ffffffff61061316565b600160a060020a03808616600081815260056020908152604080832094891680845294825291829020949094558051868152905192939192600080516020610cf6833981519152929181900390910190a35060019392505050565b601281565b3360009081526004602052604090205481111561083957600080fd5b33600090815260046020526040902054610859908263ffffffff61061316565b3360009081526004602052604090205560025461087c908263ffffffff61061316565b6002556040805182815290516000913391600080516020610cf68339815191529181900360200190a350565b600054600160a060020a031633146108bf57600080fd5b30600090815260046020526040808220543383529120546108e59163ffffffff61061316565b336000818152600460205260408082209390935591519091303180156108fc02929091818181858888f19350505050158015610925573d6000803e3d6000fd5b50565b600160a060020a031660009081526004602052604090205490565b600154600160a060020a0316331461095a57600080fd5b6001546000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055565b60035481565b600054600160a060020a031681565b60408051808201909152600481527f4246524e00000000000000000000000000000000000000000000000000000000602082015281565b336000908152600460205260408120548211156109f357600080fd5b600160a060020a038316301480610a115750600160a060020a038316155b15610a2757610a1f8261081d565b506001610627565b33600090815260046020526040902054610a47908363ffffffff61061316565b3360009081526004602052604080822092909255600160a060020a03851681522054610a79908363ffffffff61062d16565b600160a060020a038416600081815260046020908152604091829020939093558051858152905191923392600080516020610cf68339815191529281900390910190a3506001610627565b600560209081526000928352604080842090915290825290205481565b600154600160a060020a031681565b600354341015610aff57600080fd5b60035460009034670de0b6b3a764000002811515610b1957fe5b0490506000670de0b6b3a76400003410801590610b3d5750671bc16d674ec8000034105b15610b5557606482810260198402015b049050610bd9565b671bc16d674ec800003410158015610b745750673782dace9d90000034105b15610b885760648281026032840201610b4d565b673782dace9d9000003410158015610ba75750674563918244f4000034105b15610bbd576127108281026115f9840201610b4d565b674563918244f400003410610bd957506064604b820282820201045b306000908152600460205260409020548282011115610bf757600080fd5b30600090815260046020526040902054610c199083830163ffffffff61061316565b30600090815260046020526040808220929092553381522054610c449083830163ffffffff61062d16565b336000818152600460209081526040918290209390935580518585018152905191923092600080516020610cf68339815191529281900390910190a35050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b600054600160a060020a03163314610cc657600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820fea6b7c46eb39688a544a430c99621142e0ed82485e5cf7e6f23560db595c57b0029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
  "constructorArguments": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
}