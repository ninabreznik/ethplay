{
  "address": "0x8d0222d8384357c0770cd8db569785a0dfed49d4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HamsterMarketplaceToken",
  "compilerVersion": "v0.4.24-nightly.2018.4.20+commit.f328431",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-23\n*/\n\npragma solidity ^0.4.13;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev modifier to allow actions only when the contract IS paused\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev modifier to allow actions only when the contract IS NOT paused\n   */\n  modifier whenPaused {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused returns (bool) {\n    paused = true;\n    Pause();\n    return true;\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused returns (bool) {\n    paused = false;\n    Unpause();\n    return true;\n  }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken {\n \n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint _value) public {\n    require(_value > 0);\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply = totalSupply.sub(_value);\n    Burn(burner, _value);\n  }\n \n  event Burn(address indexed burner, uint indexed value);\n \n}\n\n/**\n * @title Hamster Marketplace Token Network Token\n * @dev ERC20 Hamster Marketplace Token Network Token (HMT)\n *\n * HMT Tokens are divisible by 1e8 (100,000,000) base\n * units referred to as 'Grains'.\n *\n * HMT are displayed using 8 decimal places of precision.\n *\n * 1 HMT is equivalent to:\n *   100000000 == 1 * 10**8 == 1e8 == One Hundred Million Grains\n *\n * 10 Million HMT (total supply) is equivalent to:\n *   1000000000000000 == 10000000 * 10**8 == 1e15 == One Quadrillion Grains\n *\n * All initial HMT Grains are assigned to the creator of\n * this contract.\n *\n */\ncontract HamsterMarketplaceToken is BurnableToken, Pausable {\n\n  string public constant name = 'Hamster Marketplace Token';                   // Set the token name for display\n  string public constant symbol = 'HMT';                                       // Set the token symbol for display\n  uint8 public constant decimals = 8;                                          // Set the number of decimals for display\n  uint256 constant INITIAL_SUPPLY = 10000000 * 10**uint256(decimals);          // 10 Million HMT specified in Grains\n  uint256 public sellPrice;\n  mapping(address => uint256) bonuses;\n  uint8 public freezingPercentage;\n  uint32 public constant unfreezingTimestamp = 1550534400;                     // 2019, February, 19, 00:00:00 UTC\n\n  /**\n   * @dev HamsterMarketplaceToken Constructor\n   * Runs only on initial contract creation.\n   */\n  function HamsterMarketplaceToken() {\n    totalSupply = INITIAL_SUPPLY;                                              // Set the total supply\n    balances[msg.sender] = INITIAL_SUPPLY;                                     // Creator address is assigned all\n    sellPrice = 0;\n    freezingPercentage = 100;\n  }\n\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return super.balanceOf(_owner) - bonuses[_owner] * freezingPercentage / 100;\n  }\n\n  /**\n   * @dev Transfer token for a specified address when not paused\n   * @param _to The address to transfer to.\n   * @param _value The amount to be transferred.\n   */\n  function transfer(address _to, uint256 _value) whenNotPaused returns (bool) {\n    require(_to != address(0));\n    require(balances[msg.sender] - bonuses[msg.sender] * freezingPercentage / 100 >= _value);\n    return super.transfer(_to, _value);\n  }\n\n  /**\n   * @dev Transfer tokens and bonus tokens to a specified address\n   * @param _to The address to transfer to.\n   * @param _value The amount to be transferred.\n   * @param _bonus The bonus amount.\n   */\n  function transferWithBonuses(address _to, uint256 _value, uint256 _bonus) onlyOwner returns (bool) {\n    require(_to != address(0));\n    require(balances[msg.sender] - bonuses[msg.sender] * freezingPercentage / 100 >= _value + _bonus);\n    bonuses[_to] = bonuses[_to].add(_bonus);\n    return super.transfer(_to, _value + _bonus);\n  }\n\n  /**\n   * @dev Check the frozen bonus balance\n   * @param _owner The address to check the balance of.\n   */\n  function bonusesOf(address _owner) constant returns (uint256 balance) {\n    return bonuses[_owner] * freezingPercentage / 100;\n  }\n\n  /**\n   * @dev Unfreezing part of bonus tokens by owner\n   * @param _percentage uint8 Percentage of bonus tokens to be left frozen\n   */\n  function setFreezingPercentage(uint8 _percentage) onlyOwner returns (bool) {\n    require(_percentage < freezingPercentage);\n    require(now < unfreezingTimestamp);\n    freezingPercentage = _percentage;\n    return true;\n  }\n\n  /**\n   * @dev Unfreeze all bonus tokens\n   */\n  function unfreezeBonuses() returns (bool) {\n    require(now >= unfreezingTimestamp);\n    freezingPercentage = 0;\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another when not paused\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) whenNotPaused returns (bool) {\n    require(_to != address(0));\n    require(balances[_from] - bonuses[_from] * freezingPercentage / 100 >= _value);\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender when not paused.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n /**\n  * @dev Gets the purchase price of tokens by contract\n  */\n  function getPrice() constant returns (uint256 _sellPrice) {\n      return sellPrice;\n  }\n\n  /**\n  * @dev Sets the purchase price of tokens by contract\n  * @param newSellPrice New purchase price\n  */\n  function setPrice(uint256 newSellPrice) external onlyOwner returns (bool success) {\n      require(newSellPrice > 0);\n      sellPrice = newSellPrice;\n      return true;\n  }\n\n  /**\n    * @dev Buying ethereum for tokens\n    * @param amount Number of tokens\n    */\n  function sell(uint256 amount) external returns (uint256 revenue){\n      require(balances[msg.sender] - bonuses[msg.sender] * freezingPercentage / 100 >= amount);           // Checks if the sender has enough to sell\n      balances[this] = balances[this].add(amount);                                                        // Adds the amount to owner's balance\n      balances[msg.sender] = balances[msg.sender].sub(amount);                                            // Subtracts the amount from seller's balance\n      revenue = amount.mul(sellPrice);                                                                    // Calculate the seller reward\n      msg.sender.transfer(revenue);                                                                       // Sends ether to the seller: it's important to do this last to prevent recursion attacks\n      Transfer(msg.sender, this, amount);                                                                 // Executes an event reflecting on the change\n      return revenue;                                                                                     // Ends function and returns\n  }\n\n  /**\n  * @dev Allows you to get tokens from the contract\n  * @param amount Number of tokens\n  */\n  function getTokens(uint256 amount) onlyOwner external returns (bool success) {\n      require(balances[this] >= amount);\n      balances[msg.sender] = balances[msg.sender].add(amount);\n      balances[this] = balances[this].sub(amount);\n      Transfer(this, msg.sender, amount);\n      return true;\n  }\n\n  /**\n  * @dev Allows you to put Ethereum to the smart contract\n  */\n  function sendEther() payable onlyOwner external returns (bool success) {\n      return true;\n  }\n\n  /**\n  * @dev Allows you to get ethereum from the contract\n  * @param amount Number of tokens\n  */\n  function getEther(uint256 amount) onlyOwner external returns (bool success) {\n      require(amount > 0);\n      msg.sender.transfer(amount);\n      return true;\n  }\n}",
  "bytecode": "60806040526000600360146101000a81548160ff02191690831515021790555034801561002b57600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860ff16600a0a6298968002600081905550600860ff16600a0a6298968002600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006004819055506064600660006101000a81548160ff021916908360ff1602179055506121d0806101036000396000f30060806040526004361061016a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461016f578063095ea7b3146101ff5780630e29df221461026457806318160ddd14610286578063194fe9a4146102b157806323b872dd14610320578063313ce567146103a55780633f4ba83a146103d657806342966c68146104055780634b750334146104325780635c975abb1461045d5780636bad8ed81461048c57806370a08231146104bd578063752dd0dc1461051457806379a410a7146105435780638456cb591461059a5780638da5cb5b146105c957806391b7f5ed1461062057806395d89b411461066557806398d5fdca146106f5578063a9059cbb14610720578063d3c9cc2614610785578063d6481502146107ca578063dd62ed3e14610812578063de2994c414610889578063e4849b32146108c0578063f04961ba14610901578063f2fde38b14610946575b600080fd5b34801561017b57600080fd5b50610184610989565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101c45780820151818401526020810190506101a9565b50505050905090810190601f1680156101f15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020b57600080fd5b5061024a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109c2565b604051808215151515815260200191505060405180910390f35b61026c6109f2565b604051808215151515815260200191505060405180910390f35b34801561029257600080fd5b5061029b610a57565b6040518082815260200191505060405180910390f35b3480156102bd57600080fd5b50610306600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050610a5d565b604051808215151515815260200191505060405180910390f35b34801561032c57600080fd5b5061038b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c52565b604051808215151515815260200191505060405180910390f35b3480156103b157600080fd5b506103ba610d6f565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103e257600080fd5b506103eb610d74565b604051808215151515815260200191505060405180910390f35b34801561041157600080fd5b5061043060048036038101908080359060200190929190505050610e3b565b005b34801561043e57600080fd5b50610447610f46565b6040518082815260200191505060405180910390f35b34801561046957600080fd5b50610472610f4c565b604051808215151515815260200191505060405180910390f35b34801561049857600080fd5b506104a1610f5f565b604051808260ff1660ff16815260200191505060405180910390f35b3480156104c957600080fd5b506104fe600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f72565b6040518082815260200191505060405180910390f35b34801561052057600080fd5b50610529610fe5565b604051808215151515815260200191505060405180910390f35b34801561054f57600080fd5b50610584600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611023565b6040518082815260200191505060405180910390f35b3480156105a657600080fd5b506105af61108c565b604051808215151515815260200191505060405180910390f35b3480156105d557600080fd5b506105de611154565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561062c57600080fd5b5061064b6004803603810190808035906020019092919050505061117a565b604051808215151515815260200191505060405180910390f35b34801561067157600080fd5b5061067a6111f7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106ba57808201518184015260208101905061069f565b50505050905090810190601f1680156106e75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561070157600080fd5b5061070a611230565b6040518082815260200191505060405180910390f35b34801561072c57600080fd5b5061076b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061123a565b604051808215151515815260200191505060405180910390f35b34801561079157600080fd5b506107b060048036038101908080359060200190929190505050611355565b604051808215151515815260200191505060405180910390f35b3480156107d657600080fd5b506107f8600480360381019080803560ff169060200190929190505050611599565b604051808215151515815260200191505060405180910390f35b34801561081e57600080fd5b50610873600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611656565b6040518082815260200191505060405180910390f35b34801561089557600080fd5b5061089e6116dd565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b3480156108cc57600080fd5b506108eb600480360381019080803590602001909291905050506116e5565b6040518082815260200191505060405180910390f35b34801561090d57600080fd5b5061092c6004803603810190808035906020019092919050505061198b565b604051808215151515815260200191505060405180910390f35b34801561095257600080fd5b50610987600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a48565b005b6040805190810160405280601981526020017f48616d73746572204d61726b6574706c61636520546f6b656e0000000000000081525081565b6000600360149054906101000a900460ff161515156109e057600080fd5b6109ea8383611b1f565b905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a5057600080fd5b6001905090565b60005481565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610abb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515610af757600080fd5b8183016064600660009054906101000a900460ff1660ff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205402811515610b5957fe5b04600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540310151515610ba857600080fd5b610bfa82600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ca690919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c4984838501611cc4565b90509392505050565b6000600360149054906101000a900460ff16151515610c7057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610cac57600080fd5b816064600660009054906101000a900460ff1660ff16600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205402811515610d0c57fe5b04600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540310151515610d5b57600080fd5b610d66848484611e5f565b90509392505050565b600881565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610dd257600080fd5b600360149054906101000a900460ff161515610ded57600080fd5b6000600360146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a16001905090565b60008082111515610e4b57600080fd5b339050610ea082600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461210f90919063ffffffff16565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ef88260005461210f90919063ffffffff16565b600081905550818173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca560405160405180910390a35050565b60045481565b600360149054906101000a900460ff1681565b600660009054906101000a900460ff1681565b60006064600660009054906101000a900460ff1660ff16600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205402811515610fd357fe5b04610fdd83612128565b039050919050565b6000635c6b470063ffffffff16421015151561100057600080fd5b6000600660006101000a81548160ff021916908360ff1602179055506001905090565b60006064600660009054906101000a900460ff1660ff16600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540281151561108457fe5b049050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110ea57600080fd5b600360149054906101000a900460ff1615151561110657600080fd5b6001600360146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a16001905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111d857600080fd5b6000821115156111e757600080fd5b8160048190555060019050919050565b6040805190810160405280600381526020017f484d54000000000000000000000000000000000000000000000000000000000081525081565b6000600454905090565b6000600360149054906101000a900460ff1615151561125857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561129457600080fd5b816064600660009054906101000a900460ff1660ff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054028115156112f457fe5b04600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054031015151561134357600080fd5b61134d8383611cc4565b905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113b357600080fd5b81600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561140157600080fd5b61145382600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ca690919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506114e882600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461210f90919063ffffffff16565b600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115f757600080fd5b600660009054906101000a900460ff1660ff168260ff1610151561161a57600080fd5b635c6b470063ffffffff164210151561163257600080fd5b81600660006101000a81548160ff021916908360ff16021790555060019050919050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b635c6b470081565b6000816064600660009054906101000a900460ff1660ff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540281151561174757fe5b04600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054031015151561179657600080fd5b6117e882600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ca690919063ffffffff16565b600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061187d82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461210f90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118d56004548361217190919063ffffffff16565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561191d573d6000803e3d6000fd5b503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3809050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119e957600080fd5b6000821115156119f857600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611a3e573d6000803e3d6000fd5b5060019050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611aa457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515611b1c5780600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600080821480611bab57506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515611bb657600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000808284019050838110151515611cba57fe5b8091505092915050565b6000611d1882600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461210f90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611dad82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ca690919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050611f3383600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ca690919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611fc883600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461210f90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061201e838261210f90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b600082821115151561211d57fe5b818303905092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008082840290506000841480612192575082848281151561218f57fe5b04145b151561219a57fe5b80915050929150505600a165627a7a7230582006f217c894908a07403ddb786c01dc0a62b4ecb914cda62364e3ff3595ff94010029"
}