{
  "address": "0x9764257026ed1238f6e349b751e7f1ceb185898e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "F2KToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-18\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n  uint256 public totalSupply;\n\n  /**\n   * @param _owner The address from which the balance will be retrieved\n   * @return The balance\n   */\n  function balanceOf(address _owner) public constant returns (uint256 balance);\n\n  /**\n   * @notice send `_value` token to `_to` from `msg.sender`\n   * @param _to The address of the recipient\n   * @param _value The amount of token to be transferred\n   * @return Whether the transfer was successful or not\n   */\n  function transfer(address _to, uint256 _value) public returns (bool success);\n\n  /**\n   * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n   * @param _from The address of the sender\n   * @param _to The address of the recipient\n   * @param _value The amount of token to be transferred\n   * @return Whether the transfer was successful or not\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n  /**\n   * @notice `msg.sender` approves `_spender` to spend `_value` tokens\n   * @param _spender The address of the account able to transfer the tokens\n   * @param _value The amount of tokens to be approved for transfer\n   * @return Whether the approval was successful or not\n   */\n  function approve(address _spender, uint256 _value) public returns (bool success);\n\n  /**\n   * @param _owner The address of the account owning tokens\n   * @param _spender The address of the account able to transfer the tokens\n   * @return Amount of remaining tokens allowed to spent\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n  /**\n   * MUST trigger when tokens are transferred, including zero value transfers.\n   */\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n  /**\n   * MUST trigger on any successful call to approve(address _spender, uint256 _value)\n   */\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\nlibrary SafeMath {\n\t/**\n\t* @notice Adds two numbers, throws on overflow.\n\t*/\n\tfunction add(\n\t\tuint256 a,\n\t\tuint256 b\n\t)\n\t\tinternal pure returns (uint256 c)\n\t{\n\t\tc = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n\n\t/**\n\t* @notice Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n\t*/\n\tfunction sub(\n\t\tuint256 a,\n\t\tuint256 b\n\t)\n\t\tinternal pure returns (uint256)\n\t{\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\n\t/**\n\t* @notice Multiplies two numbers, throws on overflow.\n\t*/\n\tfunction mul(\n\t\tuint256 a,\n\t\tuint256 b\n\t)\n\t\tinternal pure returns (uint256 c)\n\t{\n\t\tif (a == 0) {\n\t\t\t\treturn 0;\n\t\t}\n\t\tc = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\t/**\n\t* @dev Integer division of two numbers, truncating the quotient.\n\t*/\n\tfunction div(\n\t\tuint256 a,\n\t\tuint256 b\n\t)\n\t\tinternal pure returns (uint256)\n\t{\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\t// uint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn a / b;\n\t}\n}\n\ncontract F2KToken is ERC20, Ownable {\n\t// Adding safe calculation methods to uint256\n\tusing SafeMath for uint256;\n\n\t// Defining balances mapping (ERC20)\n\tmapping(address => uint256) balances;\n\n\t// Defining allowances mapping (ERC20)\n\tmapping(address => mapping(address => uint256)) allowed;\n\n\t// Defining addresses allowed to bypass global freeze\n\tmapping(address => bool) public freezeBypassing;\n\n\t// Defining addresses that have custom lockups periods\n\tmapping(address => uint256) public lockupExpirations;\n\n\t// Token Symbol\n\tstring public constant symbol = \"F2K\";\n\n\t// Token Name\n\tstring public constant name = \"Farm2Kitchen Token\";\n\n\t// Token Decimals\n\tuint8 public constant decimals = 2;\n\n\t// global freeze one-way toggle\n\tbool public tradingLive;\n\n\t// Total supply of token\n\tuint256 public totalSupply;\n\n    constructor() public {\n        totalSupply = 280000000 * (10 ** uint256(decimals));\n        balances[owner] = totalSupply;\n        emit Transfer(address(0), owner, totalSupply);\n    }\n\n\t/**\n\t * @notice Event for Lockup period applied to address\n\t * @param owner Specific lockup address target\n\t * @param until Timestamp when lockup end (seconds since epoch)\n\t */\n\tevent LockupApplied(\n\t\taddress indexed owner,\n\t\tuint256 until\n\t);\n\t\n\t/**\n\t * @notice distribute tokens to an address\n\t * @param to Who will receive the token\n\t * @param tokenAmount How much token will be sent\n\t */\n\tfunction distribute(\n\t\t\taddress to,\n\t\t\tuint256 tokenAmount\n\t)\n\t\t\tpublic onlyOwner\n\t{\n\t\t\trequire(tokenAmount > 0);\n\t\t\trequire(tokenAmount <= balances[msg.sender]);\n\n\t\t\tbalances[msg.sender] = balances[msg.sender].sub(tokenAmount);\n\t\t\tbalances[to] = balances[to].add(tokenAmount);\n\n\t\t\temit Transfer(owner, to, tokenAmount);\n\t}\n\n\t/**\n\t * @notice Prevents the given wallet to transfer its token for the given duration.\n\t *      This methods resets the lock duration if one is already in place.\n\t * @param wallet The wallet address to lock\n\t * @param duration How much time is the token locked from now (in sec)\n\t */\n\tfunction lockup(\n\t\t\taddress wallet,\n\t\t\tuint256 duration\n\t)\n\t\t\tpublic onlyOwner\n\t{\n\t\t\tuint256 lockupExpiration = duration.add(now);\n\t\t\tlockupExpirations[wallet] = lockupExpiration;\n\t\t\temit LockupApplied(wallet, lockupExpiration);\n\t}\n\n\t/**\n\t * @notice choose if an address is allowed to bypass the global freeze\n\t * @param to Target of the freeze bypass status update\n\t * @param status New status (if true will bypass)\n\t */\n\tfunction setBypassStatus(\n\t\t\taddress to,\n\t\t\tbool status\n\t)\n\t\t\tpublic onlyOwner\n\t{\n\t\t\tfreezeBypassing[to] = status;\n\t}\n\n\t/**\n\t * @notice One-way toggle to allow trading (remove global freeze)\n\t * @param status New status (if true will bypass)\n\t */\n\tfunction setTrading(\n\t\t\tbool status\n\t) \n\t\tpublic onlyOwner \n\t{\n\t\t\ttradingLive = status;\n\t}\n\n\t/**\n\t * @notice Modifier that checks if the conditions are met for a token to be\n\t * tradable. To be so, it must :\n\t *  - Global Freeze must be removed, or, \"from\" must be allowed to bypass it\n\t *  - \"from\" must not be in a custom lockup period\n\t * @param from Who to check the status\n\t */\n\tmodifier tradable(address from) {\n\t\t\trequire(\n\t\t\t\t\t(tradingLive || freezeBypassing[from]) && //solium-disable-line indentation\n\t\t\t\t\t(lockupExpirations[from] <= now)\n\t\t\t);\n\t\t\t_;\n\t}\n\n\t/**\n\t * @notice Return the total supply of the token\n\t * @dev This function is part of the ERC20 standard \n\t * @return {\"totalSupply\": \"The token supply\"}\n\t */\n\tfunction totalSupply() public view returns (uint256 supply) {\n\t\t\treturn totalSupply;\n\t}\n\n\t/**\n\t * @notice Get the token balance of `owner`\n\t * @dev This function is part of the ERC20 standard\n\t * @param owner The wallet to get the balance of\n\t * @return {\"balance\": \"The balance of `owner`\"}\n\t */\n\tfunction balanceOf(\n\t\t\taddress owner\n\t)\n\t\t\tpublic view returns (uint256 balance)\n\t{\n\t\t\treturn balances[owner];\n\t}\n\n\t/**\n\t * @notice Transfers `amount` from msg.sender to `destination`\n\t * @dev This function is part of the ERC20 standard\n\t * @param to The address that receives the tokens\n\t * @param tokenAmount Token amount to transfer\n\t * @return {\"success\": \"If the operation completed successfuly\"}\n\t */\n\tfunction transfer(\n\t\t\taddress to,\n\t\t\tuint256 tokenAmount\n\t)\n\t\t\tpublic tradable(msg.sender) returns (bool success)\n\t{\n\t\t\trequire(tokenAmount > 0);\n\t\t\trequire(tokenAmount <= balances[msg.sender]);\n\n\t\t\tbalances[msg.sender] = balances[msg.sender].sub(tokenAmount);\n\t\t\tbalances[to] = balances[to].add(tokenAmount);\n\t\t\temit Transfer(msg.sender, to, tokenAmount);\n\t\t\treturn true;\n\t}\n\n\t/**\n\t * @notice Transfer tokens from an address to another one\n\t * through an allowance made before\n\t * @dev This function is part of the ERC20 standard\n\t * @param from The address that sends the tokens\n\t * @param to The address that receives the tokens\n\t * @param tokenAmount Token amount to transfer\n\t * @return {\"success\": \"If the operation completed successfuly\"}\n\t */\n\tfunction transferFrom(\n\t\t\taddress from,\n\t\t\taddress to,\n\t\t\tuint256 tokenAmount\n\t)\n\t\t\tpublic tradable(from) returns (bool success)\n\t{\n\t\t\trequire(tokenAmount > 0);\n\t\t\trequire(tokenAmount <= balances[from]);\n\t\t\trequire(tokenAmount <= allowed[from][msg.sender]);\n\t\t\t\n\t\t\tbalances[from] = balances[from].sub(tokenAmount);\n\t\t\tallowed[from][msg.sender] = allowed[from][msg.sender].sub(tokenAmount);\n\t\t\tbalances[to] = balances[to].add(tokenAmount);\n\t\t\t\n\t\t\temit Transfer(from, to, tokenAmount);\n\t\t\treturn true;\n\t}\n\t\n\t/**\n\t * @notice Approve an address to send `tokenAmount` tokens to `msg.sender` (make an allowance)\n\t * @dev This function is part of the ERC20 standard\n\t * @param spender The allowed address\n\t * @param tokenAmount The maximum amount allowed to spend\n\t * @return {\"success\": \"If the operation completed successfuly\"}\n\t */\n\tfunction approve(\n\t\t\taddress spender,\n\t\t\tuint256 tokenAmount\n\t)\n\t\t\tpublic returns (bool success)\n\t{\n\t\t\tallowed[msg.sender][spender] = tokenAmount;\n\t\t\temit Approval(msg.sender, spender, tokenAmount);\n\t\t\treturn true;\n\t}\n\n\t/**\n\t* @notice Increase the amount of tokens that an owner allowed to a spender.\n\t* To increment allowed value it is better to use this function to avoid double withdrawal attack. \n\t* @param spender The address which will spend the funds.\n\t* @param tokenAmount The amount of tokens to increase the allowance by.\n\t*/\n\tfunction increaseApproval(\n\t\t\taddress spender,\n\t\t\tuint tokenAmount\n\t)\n\t\t\tpublic returns (bool)\n\t{\n\t\t\tallowed[msg.sender][spender] = (allowed[msg.sender][spender].add(tokenAmount));\n\t\t\temit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n\t\t\t\n\t\t\treturn true;\n\t}\n\n\t/**\n\t* @notice Decrease the amount of tokens that an owner allowed to a spender.\n\t* To decrease the allowed value it is better to use this function to avoid double withdrawal attack. \n\t* @param spender The address which will spend the funds.\n\t* @param tokenAmount The amount of tokens to decrease the allowance by.\n\t*/\n\tfunction decreaseApproval(\n\t\t\taddress spender,\n\t\t\tuint tokenAmount\n\t)\n\t\t\tpublic returns (bool)\n\t{\n\t\t\tuint oldValue = allowed[msg.sender][spender];\n\t\t\tif (tokenAmount > oldValue) {\n\t\t\t\tallowed[msg.sender][spender] = 0;\n\t\t\t} else {\n\t\t\t\tallowed[msg.sender][spender] = oldValue.sub(tokenAmount);\n\t\t\t}\n\t\t\temit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n\t\t\t\n\t\t\treturn true;\n\t}\n\t\n\t/**\n\t * @notice Get the remaining allowance for a spender on a given address\n\t * @dev This function is part of the ERC20 standard\n\t * @param tokenOwner The address that owns the tokens\n\t * @param spender The spender\n\t * @return {\"remaining\": \"The amount of tokens remaining in the allowance\"}\n\t */\n\tfunction allowance(\n\t\t\taddress tokenOwner,\n\t\t\taddress spender\n\t)\n\t\t\tpublic view returns (uint256 remaining)\n\t{\n\t\t\treturn allowed[tokenOwner][spender];\n\t}\n\n\tfunction burn(\n\t\t\tuint tokenAmount\n\t) \n\t\t\tpublic onlyOwner returns (bool)\n\t{\n\t\trequire(balances[msg.sender] >= tokenAmount);\n\t\tbalances[msg.sender] = balances[msg.sender].sub(tokenAmount);\n\t\ttotalSupply = totalSupply.sub(tokenAmount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @notice Permits to withdraw any ERC20 tokens that have been mistakingly sent to this contract\n\t * @param tokenAddress The received ERC20 token address\n\t * @param tokenAmount The amount of ERC20 tokens to withdraw from this contract\n\t * @return {\"success\": \"If the operation completed successfuly\"}\n\t */\n\tfunction withdrawERC20Token(\n\t\t\taddress tokenAddress,\n\t\t\tuint256 tokenAmount\n\t)\n\t\t\tpublic onlyOwner returns (bool success)\n\t{\n\t\t\treturn ERC20(tokenAddress).transfer(owner, tokenAmount);\n\t}\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5060018054600160a060020a0319163317808255640684ee18006007819055600160a060020a039182166000908152600260209081526040808320849055945485519384529451949093169390927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a3610e97806100956000396000f3006080604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461012c578063095ea7b3146101b657806311704f52146101ee57806318160ddd1461020357806323b872dd1461022a578063313ce5671461025457806342966c681461027f5780634fa88720146102975780635312ebba146102bf57806366188463146102e057806370a08231146103045780638c564ebf146103255780638da5cb5b146103465780638f70ccf714610377578063928d81c11461039157806395d89b41146103b5578063a7b86824146103ca578063a9059cbb146103ee578063d73dd62314610412578063dd62ed3e14610436578063f2fde38b1461045d578063fb9321081461047e575b600080fd5b34801561013857600080fd5b506101416104a2565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017b578181015183820152602001610163565b50505050905090810190601f1680156101a85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101c257600080fd5b506101da600160a060020a03600435166024356104d9565b604080519115158252519081900360200190f35b3480156101fa57600080fd5b506101da61053f565b34801561020f57600080fd5b50610218610548565b60408051918252519081900360200190f35b34801561023657600080fd5b506101da600160a060020a036004358116906024351660443561054e565b34801561026057600080fd5b50610269610719565b6040805160ff9092168252519081900360200190f35b34801561028b57600080fd5b506101da60043561071e565b3480156102a357600080fd5b506102bd600160a060020a036004351660243515156107a2565b005b3480156102cb57600080fd5b50610218600160a060020a03600435166107e4565b3480156102ec57600080fd5b506101da600160a060020a03600435166024356107f6565b34801561031057600080fd5b50610218600160a060020a03600435166108e6565b34801561033157600080fd5b506101da600160a060020a0360043516610901565b34801561035257600080fd5b5061035b610916565b60408051600160a060020a039092168252519081900360200190f35b34801561038357600080fd5b506102bd6004351515610925565b34801561039d57600080fd5b506101da600160a060020a036004351660243561094f565b3480156103c157600080fd5b50610141610a0b565b3480156103d657600080fd5b506102bd600160a060020a0360043516602435610a42565b3480156103fa57600080fd5b506101da600160a060020a0360043516602435610ac7565b34801561041e57600080fd5b506101da600160a060020a0360043516602435610bfe565b34801561044257600080fd5b50610218600160a060020a0360043581169060243516610c97565b34801561046957600080fd5b506102bd600160a060020a0360043516610cc2565b34801561048a57600080fd5b506102bd600160a060020a0360043516602435610d57565b60408051808201909152601281527f4661726d324b69746368656e20546f6b656e0000000000000000000000000000602082015281565b336000818152600360209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60065460ff1681565b60075490565b600654600090849060ff168061057c5750600160a060020a03811660009081526004602052604090205460ff165b80156105a05750600160a060020a0381166000908152600560205260409020544210155b15156105ab57600080fd5b600083116105b857600080fd5b600160a060020a0385166000908152600260205260409020548311156105dd57600080fd5b600160a060020a038516600090815260036020908152604080832033845290915290205483111561060d57600080fd5b600160a060020a038516600090815260026020526040902054610636908463ffffffff610e4616565b600160a060020a0386166000908152600260209081526040808320939093556003815282822033835290522054610673908463ffffffff610e4616565b600160a060020a0380871660009081526003602090815260408083203384528252808320949094559187168152600290915220546106b7908463ffffffff610e5816565b600160a060020a0380861660008181526002602090815260409182902094909455805187815290519193928916927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3506001949350505050565b600281565b600154600090600160a060020a0316331461073857600080fd5b3360009081526002602052604090205482111561075457600080fd5b33600090815260026020526040902054610774908363ffffffff610e4616565b33600090815260026020526040902055600754610797908363ffffffff610e4616565b600755506001919050565b600154600160a060020a031633146107b957600080fd5b600160a060020a03919091166000908152600460205260409020805460ff1916911515919091179055565b60056020526000908152604090205481565b336000908152600360209081526040808320600160a060020a03861684529091528120548083111561084b57336000908152600360209081526040808320600160a060020a0388168452909152812055610880565b61085b818463ffffffff610e4616565b336000908152600360209081526040808320600160a060020a03891684529091529020555b336000818152600360209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526002602052604090205490565b60046020526000908152604090205460ff1681565b600154600160a060020a031681565b600154600160a060020a0316331461093c57600080fd5b6006805460ff1916911515919091179055565b600154600090600160a060020a0316331461096957600080fd5b600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810185905290519185169163a9059cbb916044808201926020929091908290030181600087803b1580156109d857600080fd5b505af11580156109ec573d6000803e3d6000fd5b505050506040513d6020811015610a0257600080fd5b50519392505050565b60408051808201909152600381527f46324b0000000000000000000000000000000000000000000000000000000000602082015281565b600154600090600160a060020a03163314610a5c57600080fd5b610a6c824263ffffffff610e5816565b600160a060020a0384166000818152600560209081526040918290208490558151848152915193945091927ffc68ae6ba1c8c61f8cdf25d2aa55a31aa76f57de5d34ec1b61eaa803d5c1d8a1929181900390910190a2505050565b600654600090339060ff1680610af55750600160a060020a03811660009081526004602052604090205460ff165b8015610b195750600160a060020a0381166000908152600560205260409020544210155b1515610b2457600080fd5b60008311610b3157600080fd5b33600090815260026020526040902054831115610b4d57600080fd5b33600090815260026020526040902054610b6d908463ffffffff610e4616565b3360009081526002602052604080822092909255600160a060020a03861681522054610b9f908463ffffffff610e5816565b600160a060020a0385166000818152600260209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b336000908152600360209081526040808320600160a060020a0386168452909152812054610c32908363ffffffff610e5816565b336000818152600360209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b600154600160a060020a03163314610cd957600080fd5b600160a060020a0381161515610cee57600080fd5b600154604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600154600160a060020a03163314610d6e57600080fd5b60008111610d7b57600080fd5b33600090815260026020526040902054811115610d9757600080fd5b33600090815260026020526040902054610db7908263ffffffff610e4616565b3360009081526002602052604080822092909255600160a060020a03841681522054610de9908263ffffffff610e5816565b600160a060020a03808416600081815260026020908152604091829020949094556001548151868152915192949316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35050565b600082821115610e5257fe5b50900390565b81810182811015610e6557fe5b929150505600a165627a7a7230582078a9d0c807035dfc71acba655128b56f3c6bb97b72ca4369080391f90561e0200029"
}