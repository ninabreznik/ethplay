{
  "address": "0x2d07d53c82978fdce1dae5d5dee38923f520dd63",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ZazToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-26\n*/\n\npragma solidity ^0.4.16;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract ZazToken {\n    // Public variables of the token\n    string public name = \"ZAZ TOKEN\";\n    string public symbol = \"ZTZ\";\n    uint8 public decimals = 0;\n    // 18 decimals is the strongly suggested default\n    uint256 public totalSupply;\n    uint256 public zazSupply = 20000000;\n    uint256 public price ;\n    address public creator;\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event FundTransfer(address backer, uint amount, bool isContribution);\n    \n    \n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function ZazToken() public {\n        totalSupply = zazSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;    // Give ZazToken Mint the total created tokens\n        creator = msg.sender;\n    }\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n      \n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    \n    \n    /// @notice Buy tokens from contract by sending ether\n    function () payable internal {\n        \n        if (price >= 0 ether && price < 0.005 ether){\n        uint ammount = 500;                  // calculates the amount, made it so you can get many ZazMinth but to get MANY ZazToken you have to spend ETH and not WEI\n        uint ammountRaised;                                     \n        amountRaised += msg.value;                            //many thanks Zaz, couldnt do it without r/me_irl\n        require(balanceOf[creator] >= ammount);               // checks if it has enough to sell\n        require(msg.value < 0.1 ether);                        // so any person who wants to put more then 0.1 ETH has time to think about what they are doing\n        balanceOf[msg.sender] += ammount;                  // adds the amount to buyer's balance\n        balanceOf[creator] -= ammount;                        // sends ETH to ZazMinth\n        Transfer(creator, msg.sender, ammount);               // execute an event reflecting the change\n        creator.transfer(ammountRaised);\n        }\n        if (price >= 0.005 ether && price < 0.03 ether){\n        uint amount = 2000;                  // calculates the amount, made it so you can get many ZazToken but to get MANY ZazToken you have to spend ETH and not WEI\n        uint amountRaised;                                     \n        amountRaised += msg.value;                            //many thanks zaz, couldnt do it without r/me_irl\n        require(balanceOf[creator] >= amount);               // checks if it has enough to sell\n        require(msg.value < 0.1 ether);                        // so any person who wants to put more then 0.1 ETH has time to think about what they are doing\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\n        balanceOf[creator] -= amount;                        // sends ETH to ZazMinth\n        Transfer(creator, msg.sender, amount);               // execute an event reflecting the change\n        creator.transfer(amountRaised);\n        }\n         if (price >= 0.03 ether){\n        uint amnount = 10000;                  // calculates the amount, made it so you can get many ZazToken but to get MANY  you have to spend ETH and not WEI\n        uint amnountRaised;                                     \n        amountRaised += msg.value;                            //many thanks Zaz, couldnt do it without r/me_irl\n        require(balanceOf[creator] >= amnount);               // checks if it has enough to sell\n        require(msg.value < 0.1 ether);                        // so any person who wants to put more then 0.1 ETH has time to think about what they are doing\n        balanceOf[msg.sender] += amnount;                  // adds the amount to buyer's balance\n        balanceOf[creator] -= amnount;                        // sends ETH to ZazMinth\n        Transfer(creator, msg.sender, amnount);               // execute an event reflecting the change\n        creator.transfer(amnountRaised);\n        }\n    }\n\n }",
  "bytecode": "60606040526040805190810160405280600981526020017f5a415a20544f4b454e00000000000000000000000000000000000000000000008152506000908051906020019061004f929190610177565b506040805190810160405280600381526020017f5a545a00000000000000000000000000000000000000000000000000000000008152506001908051906020019061009b929190610177565b506000600260006101000a81548160ff021916908360ff1602179055506301312d0060045534156100cb57600080fd5b600260009054906101000a900460ff1660ff16600a0a60045402600381905550600354600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061021c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101b857805160ff19168380011785556101e6565b828001600101855582156101e6579182015b828111156101e55782518255916020019190600101906101ca565b5b5090506101f391906101f7565b5090565b61021991905b808211156102155760008160009055506001016101fd565b5090565b90565b610ecb8061022b6000396000f3006060604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302d05d3f146107af57806306fdde031461080457806318160ddd14610892578063313ce567146108bb57806368ef7946146108ea57806370a082311461091357806395d89b4114610960578063a035b1fe146109ee578063a9059cbb14610a17578063dd62ed3e14610a59575b6000806000806000806000600554101580156100c857506611c37937e08000600554105b15610303576101f4955034830192508560076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561014757600080fd5b67016345785d8a00003410151561015d57600080fd5b85600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508560076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef886040518082815260200191505060405180910390a3600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050151561030257600080fd5b5b6611c37937e08000600554101580156103245750666a94d74f430000600554105b1561055f576107d0935034830192508360076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156103a357600080fd5b67016345785d8a0000341015156103b957600080fd5b83600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508360076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050151561055e57600080fd5b5b666a94d74f4300006005541015156107a757612710915034830192508160076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156105eb57600080fd5b67016345785d8a00003410151561060157600080fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508160076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015156107a657600080fd5b5b505050505050005b34156107ba57600080fd5b6107c2610ac5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561080f57600080fd5b610817610aeb565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561085757808201518184015260208101905061083c565b50505050905090810190601f1680156108845780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561089d57600080fd5b6108a5610b89565b6040518082815260200191505060405180910390f35b34156108c657600080fd5b6108ce610b8f565b604051808260ff1660ff16815260200191505060405180910390f35b34156108f557600080fd5b6108fd610ba2565b6040518082815260200191505060405180910390f35b341561091e57600080fd5b61094a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ba8565b6040518082815260200191505060405180910390f35b341561096b57600080fd5b610973610bc0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109b3578082015181840152602081019050610998565b50505050905090810190601f1680156109e05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156109f957600080fd5b610a01610c5e565b6040518082815260200191505060405180910390f35b3415610a2257600080fd5b610a57600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c64565b005b3415610a6457600080fd5b610aaf600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c73565b6040518082815260200191505060405180910390f35b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b815780601f10610b5657610100808354040283529160200191610b81565b820191906000526020600020905b815481529060010190602001808311610b6457829003601f168201915b505050505081565b60035481565b600260009054906101000a900460ff1681565b60045481565b60076020528060005260406000206000915090505481565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c565780601f10610c2b57610100808354040283529160200191610c56565b820191906000526020600020905b815481529060010190602001808311610c3957829003601f168201915b505050505081565b60055481565b610c6f338383610c98565b5050565b6008602052816000526040600020602052806000526040600020600091509150505481565b60008273ffffffffffffffffffffffffffffffffffffffff1614151515610cbe57600080fd5b80600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610d0c57600080fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110151515610d9b57600080fd5b80600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050505600a165627a7a72305820b08a015c483cfa6293adde99123d9d763c1a7c8c820c04a7425a14403ab175fa0029"
}