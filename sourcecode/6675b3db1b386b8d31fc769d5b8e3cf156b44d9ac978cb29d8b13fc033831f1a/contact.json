{
  "address": "0xc15727c2acC9Dd4c63bC6Dc45cd7ff200Df48F72",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TeamLocker",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-22\n*/\n\n// File: contracts/locker/Ownerable.sol\n\npragma solidity ^0.4.25;\n\ncontract Ownerable {\n    /// @notice The address of the owner is the only address that can call\n    ///  a function with this modifier\n    modifier onlyOwner { require(msg.sender == owner); _; }\n\n    address public owner;\n\n    constructor() public { owner = msg.sender;}\n\n    /// @notice Changes the owner of the contract\n    /// @param _newOwner The new owner of the contract\n    function setOwner(address _newOwner) public onlyOwner {\n        owner = _newOwner;\n    }\n}\n\n// File: contracts/math/SafeMath.sol\n\npragma solidity ^0.4.25;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\ncontract SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\n// File: contracts/token/ERC20Basic.sol\n\npragma solidity ^0.4.25;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts/token/ERC20.sol\n\npragma solidity ^0.4.25;\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/token/SafeERC20.sol\n\npragma solidity ^0.4.25;\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\n// File: contracts/locker/TeamLocker.sol\n\npragma solidity ^0.4.25;\n\n\n\n\n\ncontract TeamLocker is Ownerable, SafeMath {\n  using SafeERC20 for ERC20Basic;\n\n  ERC20Basic public token;\n  address[] public beneficiaries;\n  uint256 public baiastm;\n  uint256 public releasedAmt;\n\n  constructor (address _token, address[] _beneficiaries, uint256 _baias) public {\n    require(_token != 0x00);\n    require(_baias != 0x00);\n\n    for (uint i = 0; i < _beneficiaries.length; i++) {\n      require(_beneficiaries[i] != 0x00);\n    }\n\n    token = ERC20Basic(_token);\n    beneficiaries = _beneficiaries;\n    baiastm = _baias;\n  }\n\n  function release() public {\n    require(beneficiaries.length != 0x0);\n\n    uint256 balance = token.balanceOf(address(this));\n    uint256 total = add(balance, releasedAmt);\n\n    uint256 lockTime1 = add(baiastm, 183 days); // 6 months\n    uint256 lockTime2 = add(baiastm, 365 days); // 12 months(1 year)\n    uint256 lockTime3 = add(baiastm, 548 days); // 18 months\n    uint256 lockTime4 = add(baiastm, 730 days); // 24 months\n\n    uint256 currentRatio = 0;\n    if (now >= lockTime1) {\n      currentRatio = 20;  //+20\n    }\n    if (now >= lockTime2) {\n      currentRatio = 50;  //+30\n    }\n    if (now >= lockTime3) {\n      currentRatio = 70;  //+20\n    }\n    if (now >= lockTime4) {\n      currentRatio = 100;  //+50\n    }\n    require(currentRatio > 0);\n\n    uint256 totalReleaseAmt = div(mul(total, currentRatio), 100);\n    uint256 grantAmt = sub(totalReleaseAmt, releasedAmt);\n    require(grantAmt > 0);\n\n    uint256 grantAmountForEach = div(grantAmt, beneficiaries.length);\n    for (uint i = 0; i < beneficiaries.length; i++) {\n        token.safeTransfer(beneficiaries[i], grantAmountForEach);\n    }\n    releasedAmt = add(releasedAmt, grantAmt);\n  }\n\n  function setBaias(uint256 _baias) public onlyOwner {\n    require(_baias != 0x00);\n    baiastm = _baias;\n  }\n\n  function setToken(address newToken) public onlyOwner {\n    require(newToken != 0x00);\n    token = ERC20Basic(newToken);\n  }\n\n  function getBeneficiaryCount() public view returns(uint256) {\n    return beneficiaries.length;\n  }\n\n  function setBeneficiary(uint256 _i, address _addr) public onlyOwner {\n    require(_i < beneficiaries.length);\n    beneficiaries[_i] = _addr;\n  }\n\n  function claimTokens(address _token) public onlyOwner {\n      if (_token == 0x0) {\n          owner.transfer( address(this).balance);\n          return;\n      }\n\n      ERC20Basic __token = ERC20Basic(_token);\n      uint balance = __token.balanceOf(address(this));\n      __token.transfer(owner, balance);\n  }\n\n  function destruct(address to) public onlyOwner returns(bool) {\n      selfdestruct(to);\n      return true;\n  }\n}",
  "bytecode": "60806040523480156200001157600080fd5b506040516200118d3803806200118d8339810180604052810190808051906020019092919080518201929190602001805190602001909291905050506000336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008473ffffffffffffffffffffffffffffffffffffffff1614151515620000b657600080fd5b60008214151515620000c757600080fd5b600090505b8251811015620001235760008382815181101515620000e757fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16141515156200011557600080fd5b8080600101915050620000cc565b83600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600290805190602001906200017c9291906200018e565b50816003819055505050505062000263565b8280548282559060005260206000209081019282156200020a579160200282015b82811115620002095782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190620001af565b5b5090506200021991906200021d565b5090565b6200026091905b808211156200025c57600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555060010162000224565b5090565b90565b610f1a80620002736000396000f3006080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313af4035146100ca578063144fa6d71461010d5780631beb2615146101505780631c846d59146101ab57806384b0d470146101f857806386d1a69f146102255780638da5cb5b1461023c5780639a6e7fd114610293578063ba493d52146102be578063bd25f3a7146102e9578063df8de3e714610314578063efeb5e5814610357578063fc0c546a146103c4575b600080fd5b3480156100d657600080fd5b5061010b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061041b565b005b34801561011957600080fd5b5061014e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104b9565b005b34801561015c57600080fd5b50610191600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061057e565b604051808215151515815260200191505060405180910390f35b3480156101b757600080fd5b506101f660048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105f4565b005b34801561020457600080fd5b50610223600480360381019080803590602001909291905050506106be565b005b34801561023157600080fd5b5061023a610733565b005b34801561024857600080fd5b506102516109fa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561029f57600080fd5b506102a8610a1f565b6040518082815260200191505060405180910390f35b3480156102ca57600080fd5b506102d3610a2c565b6040518082815260200191505060405180910390f35b3480156102f557600080fd5b506102fe610a32565b6040518082815260200191505060405180910390f35b34801561032057600080fd5b50610355600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a38565b005b34801561036357600080fd5b5061038260048036038101908080359060200190929190505050610d1a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103d057600080fd5b506103d9610d58565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561047657600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561051457600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff161415151561053a57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105db57600080fd5b8173ffffffffffffffffffffffffffffffffffffffff16ff5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561064f57600080fd5b6002805490508210151561066257600080fd5b8060028381548110151561067257fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561071957600080fd5b6000811415151561072957600080fd5b8060038190555050565b6000806000806000806000806000806000806002805490501415151561075857600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561081557600080fd5b505af1158015610829573d6000803e3d6000fd5b505050506040513d602081101561083f57600080fd5b81019080805190602001909291905050509a5061085e8b600454610d7e565b995061086f60035462f14280610d7e565b98506108816003546301e13380610d7e565b97506108936003546302d27600610d7e565b96506108a56003546303c26700610d7e565b95506000945088421015156108b957601494505b87421015156108c757603294505b86421015156108d557604694505b85421015156108e357606494505b6000851115156108f257600080fd5b6109066108ff8b87610d9c565b6064610dcf565b935061091484600454610dea565b925060008311151561092557600080fd5b61093483600280549050610dcf565b9150600090505b6002805490508110156109db576109ce60028281548110151561095a57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610e039092919063ffffffff16565b808060010191505061093b565b6109e760045484610d7e565b6004819055505050505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600280549050905090565b60045481565b60035481565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a9657600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff161415610b39576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610b33573d6000803e3d6000fd5b50610d15565b8291508173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610bd757600080fd5b505af1158015610beb573d6000803e3d6000fd5b505050506040513d6020811015610c0157600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610cd857600080fd5b505af1158015610cec573d6000803e3d6000fd5b505050506040513d6020811015610d0257600080fd5b8101908080519060200190929190505050505b505050565b600281815481101515610d2957fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808284019050838110151515610d9257fe5b8091505092915050565b60008082840290506000841480610dbd5750828482811515610dba57fe5b04145b1515610dc557fe5b8091505092915050565b6000808284811515610ddd57fe5b0490508091505092915050565b6000828211151515610df857fe5b818303905092915050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610ea657600080fd5b505af1158015610eba573d6000803e3d6000fd5b505050506040513d6020811015610ed057600080fd5b81019080805190602001909291905050501515610ee957fe5b5050505600a165627a7a72305820e8a6ce4c048614ff384465a81e526576d33920d0e6ae04fd95039811aba920d600290000000000000000000000007c60538c2c5307152669993b8cdab82bfb4c33b50000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000005cddf9800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b713586a7b6d5a115829b351c54b18a73626bf6c",
  "constructorArguments": "0000000000000000000000007c60538c2c5307152669993b8cdab82bfb4c33b50000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000005cddf9800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b713586a7b6d5a115829b351c54b18a73626bf6c"
}