{
  "address": "0x667088b212ce3d06a1b553a7221e1fd19000d9af",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "WingsDAO Token",
  "contractName": "Token",
  "compilerVersion": "v0.4.8+commit.60cc1668",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-04-26\n*/\n\ncontract Ownable {\n  address public owner;\n\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    if (msg.sender == owner)\n      _;\n  }\n\n  function transferOwner(address newOwner) onlyOwner {\n    if (newOwner != address(0)) owner = newOwner;\n  }\n\n}\n\ncontract ERC20 {\n  uint public totalSupply;\n  function balanceOf(address who) constant returns (uint);\n  function allowance(address owner, address spender) constant returns (uint);\n\n  function transfer(address to, uint value) returns (bool ok);\n  function transferFrom(address from, address to, uint value) returns (bool ok);\n  function approve(address spender, uint value) returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\ncontract SafeMath {\n  function safeMul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeSub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) throw;\n  }\n}\n\ncontract StandardToken is ERC20, SafeMath {\n\n  mapping(address => uint) balances;\n  mapping (address => mapping (address => uint)) allowed;\n\n  function transfer(address _to, uint _value) returns (bool success) {\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n    balances[_to] = safeAdd(balances[_to], _value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n    var _allowance = allowed[_from][msg.sender];\n    \n    balances[_to] = safeAdd(balances[_to], _value);\n    balances[_from] = safeSub(balances[_from], _value);\n    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) constant returns (uint balance) {\n    return balances[_owner];\n  }\n\n  function approve(address _spender, uint _value) returns (bool success) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n/*\n  Wings ERC20 Token.\n  Added allocation for users who participiated in Wings Campaign.\n\n  Important!\n  We have to run pre-mine allocation first.\n  And only then rest of users.\n  Or it's not going to work due to whenAllocation logic.\n*/\ncontract Token is StandardToken, Ownable {\n  // Account allocation event\n  event ALLOCATION(address indexed account, uint amount);\n\n  /*\n    Premine events\n  */\n  event PREMINER_ADDED(address indexed owner, address account, uint amount);\n  event PREMINE_ALLOCATION_ADDED(address indexed account, uint time);\n  event PREMINE_RELEASE(address indexed account, uint timestamp, uint amount);\n  event PREMINER_CHANGED(address indexed oldPreminer, address newPreminer, address newRecipient);\n\n  /*\n    Premine structure\n  */\n  struct Preminer {\n    address account;\n    uint monthlyPayment;\n    uint latestAllocation;\n    bool disabled;\n\n    uint allocationsCount;\n    mapping(uint => uint) allocations;\n  }\n\n  /*\n    List of preminers\n  */\n  mapping(address => Preminer) preminers;\n\n  /*\n    Token Name & Token Symbol & Decimals\n  */\n  string public name = \"WINGS\";\n  string public symbol = \"WINGS\";\n  uint public decimals = 18;\n\n  /*\n    Total supply\n  */\n  uint public totalSupply = 10**26;//100000000000000000000000000;\n\n  /*\n    Premine allocation interval\n  */\n  uint public DAYS_28 = 2419200;\n  uint public DAYS_31 = 2678400;\n\n  /*\n    Maximum premine allocations count\n  */\n  uint public MAX_ALLOCATIONS_COUNT = 26;\n\n  /*\n    How many accounts allocated?\n  */\n  uint public accountsToAllocate;\n\n  /*\n    Multisignature\n  */\n  address public multisignature;\n\n  /*\n    Only multisignature\n  */\n  modifier onlyMultisignature() {\n    if (msg.sender != multisignature) {\n      throw;\n    }\n\n    _;\n  }\n\n  /*\n    When preminer is not disabled\n  */\n  modifier whenPreminerIsntDisabled(address _account) {\n    if (preminers[_account].disabled == true) {\n      throw;\n    }\n\n    _;\n  }\n\n  /*\n    Modifier for checking is allocation completed.\n    Maybe we should add here pre-mine accounts too.\n  */\n  modifier whenAllocation(bool value) {\n    if ((accountsToAllocate > 0) == value) {\n      _;\n    } else {\n      throw;\n    }\n  }\n\n  /*\n    Check if user already allocated\n  */\n  modifier whenAccountHasntAllocated(address user) {\n    if (balances[user] == 0) {\n      _;\n    } else {\n      throw;\n    }\n  }\n\n  /*\n    Check if preminer already added\n  */\n  modifier whenPremineHasntAllocated(address preminer) {\n    if (preminers[preminer].account == address(0)) {\n      _;\n    } else {\n      throw;\n    }\n  }\n\n  function Token(uint _accountsToAllocate, address _multisignature) {\n    /*\n      Maybe we should calculate it in allocation and pre-mine.\n      I mean total supply\n    */\n    owner = msg.sender;\n    accountsToAllocate = _accountsToAllocate;\n    multisignature = _multisignature;\n  }\n\n  /*\n    Allocate tokens for users.\n    Only owner and only while allocation active.\n\n    Should check if user allocated already (no double allocations)\n  */\n  function allocate(address user, uint balance) onlyOwner() whenAllocation(true) whenAccountHasntAllocated(user) {\n    balances[user] = balance;\n\n    accountsToAllocate--;\n    ALLOCATION(user, balance);\n  }\n\n  /*\n    Standard Token functional\n  */\n  function transfer(address _to, uint _value) whenAllocation(false) returns (bool success) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint _value) whenAllocation(false) returns (bool success) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint _value) whenAllocation(false) returns (bool success) {\n    return super.approve(_spender, _value);\n  }\n\n  /*\n    Premine functionality\n  */\n\n  /*\n    Add pre-mine account\n  */\n  function addPreminer(address preminer, address recipient, uint initialBalance, uint monthlyPayment) onlyOwner() whenAllocation(true) whenPremineHasntAllocated(preminer) {\n    var premine = Preminer(\n        recipient,\n        monthlyPayment,\n        0,\n        false,\n        0\n      );\n\n\n    balances[recipient] = safeAdd(balances[recipient], initialBalance);\n    preminers[preminer] = premine;\n    accountsToAllocate--;\n    PREMINER_ADDED(preminer, premine.account, initialBalance);\n  }\n\n  /*\n    Disable pre-miner\n  */\n  function disablePreminer(address _preminer, address _newPreminer, address _newRecipient) onlyMultisignature() whenPreminerIsntDisabled(_preminer) {\n    var oldPreminer = preminers[_preminer];\n\n    if (oldPreminer.account == address(0) || preminers[_newPreminer].account != address(0)) {\n      throw;\n    }\n\n    preminers[_newPreminer] = oldPreminer;\n    preminers[_newPreminer].account = _newRecipient;\n    oldPreminer.disabled = true;\n\n    if(preminers[_newPreminer].disabled == true) {\n      throw;\n    }\n\n    for (uint i = 0; i < preminers[_newPreminer].allocationsCount; i++) {\n      preminers[_newPreminer].allocations[i] = oldPreminer.allocations[i];\n    }\n\n    PREMINER_CHANGED(_preminer, _newPreminer, _newRecipient);\n  }\n\n  /*\n    Add pre-mine allocation\n  */\n  function addPremineAllocation(address _preminer, uint _time) onlyOwner() whenAllocation(true) whenPreminerIsntDisabled(_preminer) {\n    var preminer = preminers[_preminer];\n\n    if (preminer.account == address(0) ||  _time == 0 || preminer.allocationsCount == MAX_ALLOCATIONS_COUNT) {\n      throw;\n    }\n\n    if (preminer.allocationsCount > 0) {\n      var previousAllocation = preminer.allocations[preminer.allocationsCount-1];\n\n      if (previousAllocation > _time) {\n        throw;\n      }\n\n      if (previousAllocation + DAYS_28 > _time) {\n        throw;\n      }\n\n      if (previousAllocation + DAYS_31 < _time) {\n        throw;\n      }\n    }\n\n    preminer.allocations[preminer.allocationsCount++] = _time;\n    PREMINE_ALLOCATION_ADDED(_preminer, _time);\n  }\n\n  /*\n    Get preminer\n  */\n  function getPreminer(address _preminer) constant returns (address, bool, uint, uint, uint) {\n    var preminer = preminers[_preminer];\n\n    return (preminer.account, preminer.disabled, preminer.monthlyPayment, preminer.latestAllocation, preminer.allocationsCount);\n  }\n\n  /*\n    Get preminer allocation time by index\n  */\n  function getPreminerAllocation(address _preminer, uint _index) constant returns (uint) {\n    return preminers[_preminer].allocations[_index];\n  }\n\n  /*\n    Release premine when preminer asking\n    Gas usage: 0x5786 or 22406 GAS.\n    Maximum is 26 months of pre-mine in case of Wings. So should be enough to execute it.\n  */\n  function releasePremine() whenAllocation(false) whenPreminerIsntDisabled(msg.sender) {\n    var preminer = preminers[msg.sender];\n\n    if (preminer.account == address(0)) {\n      throw;\n    }\n\n    for (uint i = preminer.latestAllocation; i < preminer.allocationsCount; i++) {\n      if (preminer.allocations[i] < block.timestamp) {\n        if (preminer.allocations[i] == 0) {\n          continue;\n        }\n\n        balances[preminer.account] = safeAdd(balances[preminer.account], preminer.monthlyPayment);\n        preminer.latestAllocation = i;\n\n        PREMINE_RELEASE(preminer.account, preminer.allocations[i], preminer.monthlyPayment);\n        preminer.allocations[i] = 0;\n      } else {\n        break;\n      }\n    }\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ALLOCATIONS_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releasePremine\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAYS_28\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountsToAllocate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_preminer\",\"type\":\"address\"},{\"name\":\"_newPreminer\",\"type\":\"address\"},{\"name\":\"_newRecipient\",\"type\":\"address\"}],\"name\":\"disablePreminer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_preminer\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"addPremineAllocation\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_preminer\",\"type\":\"address\"}],\"name\":\"getPreminer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"allocate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisignature\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_preminer\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPreminerAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAYS_31\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"preminer\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"name\":\"monthlyPayment\",\"type\":\"uint256\"}],\"name\":\"addPreminer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_accountsToAllocate\",\"type\":\"uint256\"},{\"name\":\"_multisignature\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ALLOCATION\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PREMINER_ADDED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"PREMINE_ALLOCATION_ADDED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PREMINE_RELEASE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldPreminer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newPreminer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"PREMINER_CHANGED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000001657000000000000000000000000f64b584972fe6055a770477670208d737fff282f"
}