{
  "address": "0x30f938fed5de6e06a9a7cd2ac3517131c317b1e7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GivethBridge",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-29\n*/\n\n///File: giveth-common-contracts/contracts/ERC20.sol\n\npragma solidity ^0.4.19;\n\n\n/**\n * @title ERC20\n * @dev A standard interface for tokens.\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n */\ncontract ERC20 {\n  \n    /// @dev Returns the total token supply\n    function totalSupply() public constant returns (uint256 supply);\n\n    /// @dev Returns the account balance of the account with address _owner\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n\n    /// @dev Transfers _value number of tokens to address _to\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    /// @dev Transfers _value number of tokens from address _from to address _to\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    /// @dev Allows _spender to withdraw from the msg.sender's account up to the _value amount\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    /// @dev Returns the amount which _spender is still allowed to withdraw from _owner\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\n\n\n///File: giveth-common-contracts/contracts/Owned.sol\n\npragma solidity ^0.4.19;\n\n\n/// @title Owned\n/// @author Adrià Massanet <[email protected]>\n/// @notice The Owned contract has an owner address, and provides basic \n///  authorization control functions, this simplifies & the implementation of\n///  user permissions; this contract has three work flows for a change in\n///  ownership, the first requires the new owner to validate that they have the\n///  ability to accept ownership, the second allows the ownership to be\n///  directly transfered without requiring acceptance, and the third allows for\n///  the ownership to be removed to allow for decentralization \ncontract Owned {\n\n    address public owner;\n    address public newOwnerCandidate;\n\n    event OwnershipRequested(address indexed by, address indexed to);\n    event OwnershipTransferred(address indexed from, address indexed to);\n    event OwnershipRemoved();\n\n    /// @dev The constructor sets the `msg.sender` as the`owner` of the contract\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    /// @dev `owner` is the only address that can call a function with this\n    /// modifier\n    modifier onlyOwner() {\n        require (msg.sender == owner);\n        _;\n    }\n    \n    /// @dev In this 1st option for ownership transfer `proposeOwnership()` must\n    ///  be called first by the current `owner` then `acceptOwnership()` must be\n    ///  called by the `newOwnerCandidate`\n    /// @notice `onlyOwner` Proposes to transfer control of the contract to a\n    ///  new owner\n    /// @param _newOwnerCandidate The address being proposed as the new owner\n    function proposeOwnership(address _newOwnerCandidate) public onlyOwner {\n        newOwnerCandidate = _newOwnerCandidate;\n        OwnershipRequested(msg.sender, newOwnerCandidate);\n    }\n\n    /// @notice Can only be called by the `newOwnerCandidate`, accepts the\n    ///  transfer of ownership\n    function acceptOwnership() public {\n        require(msg.sender == newOwnerCandidate);\n\n        address oldOwner = owner;\n        owner = newOwnerCandidate;\n        newOwnerCandidate = 0x0;\n\n        OwnershipTransferred(oldOwner, owner);\n    }\n\n    /// @dev In this 2nd option for ownership transfer `changeOwnership()` can\n    ///  be called and it will immediately assign ownership to the `newOwner`\n    /// @notice `owner` can step down and assign some other address to this role\n    /// @param _newOwner The address of the new owner\n    function changeOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != 0x0);\n\n        address oldOwner = owner;\n        owner = _newOwner;\n        newOwnerCandidate = 0x0;\n\n        OwnershipTransferred(oldOwner, owner);\n    }\n\n    /// @dev In this 3rd option for ownership transfer `removeOwnership()` can\n    ///  be called and it will immediately assign ownership to the 0x0 address;\n    ///  it requires a 0xdece be input as a parameter to prevent accidental use\n    /// @notice Decentralizes the contract, this operation cannot be undone \n    /// @param _dac `0xdac` has to be entered for this function to work\n    function removeOwnership(address _dac) public onlyOwner {\n        require(_dac == 0xdac);\n        owner = 0x0;\n        newOwnerCandidate = 0x0;\n        OwnershipRemoved();     \n    }\n} \n\n\n///File: giveth-common-contracts/contracts/Escapable.sol\n\npragma solidity ^0.4.19;\n/*\n    Copyright 2016, Jordi Baylina\n    Contributor: Adrià Massanet <[email protected]>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\n\n\n\n/// @dev `Escapable` is a base level contract built off of the `Owned`\n///  contract; it creates an escape hatch function that can be called in an\n///  emergency that will allow designated addresses to send any ether or tokens\n///  held in the contract to an `escapeHatchDestination` as long as they were\n///  not blacklisted\ncontract Escapable is Owned {\n    address public escapeHatchCaller;\n    address public escapeHatchDestination;\n    mapping (address=>bool) private escapeBlacklist; // Token contract addresses\n\n    /// @notice The Constructor assigns the `escapeHatchDestination` and the\n    ///  `escapeHatchCaller`\n    /// @param _escapeHatchCaller The address of a trusted account or contract\n    ///  to call `escapeHatch()` to send the ether in this contract to the\n    ///  `escapeHatchDestination` it would be ideal that `escapeHatchCaller`\n    ///  cannot move funds out of `escapeHatchDestination`\n    /// @param _escapeHatchDestination The address of a safe location (usu a\n    ///  Multisig) to send the ether held in this contract; if a neutral address\n    ///  is required, the WHG Multisig is an option:\n    ///  0x8Ff920020c8AD673661c8117f2855C384758C572 \n    function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) public {\n        escapeHatchCaller = _escapeHatchCaller;\n        escapeHatchDestination = _escapeHatchDestination;\n    }\n\n    /// @dev The addresses preassigned as `escapeHatchCaller` or `owner`\n    ///  are the only addresses that can call a function with this modifier\n    modifier onlyEscapeHatchCallerOrOwner {\n        require ((msg.sender == escapeHatchCaller)||(msg.sender == owner));\n        _;\n    }\n\n    /// @notice Creates the blacklist of tokens that are not able to be taken\n    ///  out of the contract; can only be done at the deployment, and the logic\n    ///  to add to the blacklist will be in the constructor of a child contract\n    /// @param _token the token contract address that is to be blacklisted \n    function blacklistEscapeToken(address _token) internal {\n        escapeBlacklist[_token] = true;\n        EscapeHatchBlackistedToken(_token);\n    }\n\n    /// @notice Checks to see if `_token` is in the blacklist of tokens\n    /// @param _token the token address being queried\n    /// @return False if `_token` is in the blacklist and can't be taken out of\n    ///  the contract via the `escapeHatch()`\n    function isTokenEscapable(address _token) view public returns (bool) {\n        return !escapeBlacklist[_token];\n    }\n\n    /// @notice The `escapeHatch()` should only be called as a last resort if a\n    /// security issue is uncovered or something unexpected happened\n    /// @param _token to transfer, use 0x0 for ether\n    function escapeHatch(address _token) public onlyEscapeHatchCallerOrOwner {   \n        require(escapeBlacklist[_token]==false);\n\n        uint256 balance;\n\n        /// @dev Logic for ether\n        if (_token == 0x0) {\n            balance = this.balance;\n            escapeHatchDestination.transfer(balance);\n            EscapeHatchCalled(_token, balance);\n            return;\n        }\n        /// @dev Logic for tokens\n        ERC20 token = ERC20(_token);\n        balance = token.balanceOf(this);\n        require(token.transfer(escapeHatchDestination, balance));\n        EscapeHatchCalled(_token, balance);\n    }\n\n    /// @notice Changes the address assigned to call `escapeHatch()`\n    /// @param _newEscapeHatchCaller The address of a trusted account or\n    ///  contract to call `escapeHatch()` to send the value in this contract to\n    ///  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`\n    ///  cannot move funds out of `escapeHatchDestination`\n    function changeHatchEscapeCaller(address _newEscapeHatchCaller) public onlyEscapeHatchCallerOrOwner {\n        escapeHatchCaller = _newEscapeHatchCaller;\n    }\n\n    event EscapeHatchBlackistedToken(address token);\n    event EscapeHatchCalled(address token, uint amount);\n}\n\n\n///File: ./contracts/lib/Pausable.sol\n\npragma solidity ^0.4.21;\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Owned {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}\n\n///File: ./contracts/lib/Vault.sol\n\npragma solidity ^0.4.21;\n\n/*\n    Copyright 2018, Jordi Baylina, RJ Ewing\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/// @title Vault Contract\n/// @author Jordi Baylina, RJ Ewing\n/// @notice This contract holds funds for Campaigns and automates payments. For\n///  this iteration the funds will come straight from the Giveth Multisig as a\n///  safety precaution, but once fully tested and optimized this contract will\n///  be a safe place to store funds equipped with optional variable time delays\n///  to allow for an optional escape hatch\n\n\n\n\n/// @dev `Vault` is a higher level contract built off of the `Escapable`\n///  contract that holds funds for Campaigns and automates payments.\ncontract Vault is Escapable, Pausable {\n\n    /// @dev `Payment` is a public structure that describes the details of\n    ///  each payment making it easy to track the movement of funds\n    ///  transparently\n    struct Payment {\n        string name;              // What is the purpose of this payment\n        bytes32 reference;        // Reference of the payment.\n        address spender;          // Who is sending the funds\n        uint earliestPayTime;     // The earliest a payment can be made (Unix Time)\n        bool canceled;            // If True then the payment has been canceled\n        bool paid;                // If True then the payment has been paid\n        address recipient;        // Who is receiving the funds\n        address token;            // Token this payment represents\n        uint amount;              // The amount of wei sent in the payment\n        uint securityGuardDelay;  // The seconds `securityGuard` can delay payment\n    }\n\n    Payment[] public authorizedPayments;\n\n    address public securityGuard;\n    uint public absoluteMinTimeLock;\n    uint public timeLock;\n    uint public maxSecurityGuardDelay;\n    bool public allowDisbursePaymentWhenPaused;\n\n    /// @dev The white list of approved addresses allowed to set up && receive\n    ///  payments from this vault\n    mapping (address => bool) public allowedSpenders;\n\n    // @dev Events to make the payment movements easy to find on the blockchain\n    event PaymentAuthorized(uint indexed idPayment, address indexed recipient, uint amount, address token, bytes32 reference);\n    event PaymentExecuted(uint indexed idPayment, address indexed recipient, uint amount, address token);\n    event PaymentCanceled(uint indexed idPayment);\n    event SpenderAuthorization(address indexed spender, bool authorized);\n\n    /// @dev The address assigned the role of `securityGuard` is the only\n    ///  addresses that can call a function with this modifier\n    modifier onlySecurityGuard { \n        require(msg.sender == securityGuard);\n        _;\n    }\n\n    /// By default, we dis-allow payment disburements if the contract is paused.\n    /// However, to facilitate a migration of the bridge, we can allow\n    /// disbursements when paused if explicitly set\n    modifier disbursementsAllowed {\n        require(!paused || allowDisbursePaymentWhenPaused);\n        _;\n    }\n\n    /// @notice The Constructor creates the Vault on the blockchain\n    /// @param _escapeHatchCaller The address of a trusted account or contract to\n    ///  call `escapeHatch()` to send the ether in this contract to the\n    ///  `escapeHatchDestination` it would be ideal if `escapeHatchCaller` cannot move\n    ///  funds out of `escapeHatchDestination`\n    /// @param _escapeHatchDestination The address of a safe location (usu a\n    ///  Multisig) to send the ether held in this contract in an emergency\n    /// @param _absoluteMinTimeLock The minimum number of seconds `timelock` can\n    ///  be set to, if set to 0 the `owner` can remove the `timeLock` completely\n    /// @param _timeLock Initial number of seconds that payments are delayed\n    ///  after they are authorized (a security precaution)\n    /// @param _securityGuard Address that will be able to delay the payments\n    ///  beyond the initial timelock requirements; can be set to 0x0 to remove\n    ///  the `securityGuard` functionality\n    /// @param _maxSecurityGuardDelay The maximum number of seconds in total\n    ///   that `securityGuard` can delay a payment so that the owner can cancel\n    ///   the payment if needed\n    function Vault(\n        address _escapeHatchCaller,\n        address _escapeHatchDestination,\n        uint _absoluteMinTimeLock,\n        uint _timeLock,\n        address _securityGuard,\n        uint _maxSecurityGuardDelay\n    ) Escapable(_escapeHatchCaller, _escapeHatchDestination) public\n    {\n        absoluteMinTimeLock = _absoluteMinTimeLock;\n        timeLock = _timeLock;\n        securityGuard = _securityGuard;\n        maxSecurityGuardDelay = _maxSecurityGuardDelay;\n    }\n\n/////////\n// Helper functions\n/////////\n\n    /// @notice States the total number of authorized payments in this contract\n    /// @return The number of payments ever authorized even if they were canceled\n    function numberOfAuthorizedPayments() public view returns (uint) {\n        return authorizedPayments.length;\n    }\n\n////////\n// Spender Interface\n////////\n\n    /// @notice only `allowedSpenders[]` Creates a new `Payment`\n    /// @param _name Brief description of the payment that is authorized\n    /// @param _reference External reference of the payment\n    /// @param _recipient Destination of the payment\n    /// @param _amount Amount to be paid in wei\n    /// @param _paymentDelay Number of seconds the payment is to be delayed, if\n    ///  this value is below `timeLock` then the `timeLock` determines the delay\n    /// @return The Payment ID number for the new authorized payment\n    function authorizePayment(\n        string _name,\n        bytes32 _reference,\n        address _recipient,\n        address _token,\n        uint _amount,\n        uint _paymentDelay\n    ) whenNotPaused external returns(uint) {\n\n        // Fail if you arent on the `allowedSpenders` white list\n        require(allowedSpenders[msg.sender]);\n        uint idPayment = authorizedPayments.length;       // Unique Payment ID\n        authorizedPayments.length++;\n\n        // The following lines fill out the payment struct\n        Payment storage p = authorizedPayments[idPayment];\n        p.spender = msg.sender;\n\n        // Overflow protection\n        require(_paymentDelay <= 10**18);\n\n        // Determines the earliest the recipient can receive payment (Unix time)\n        p.earliestPayTime = _paymentDelay >= timeLock ?\n                                _getTime() + _paymentDelay :\n                                _getTime() + timeLock;\n        p.recipient = _recipient;\n        p.amount = _amount;\n        p.name = _name;\n        p.reference = _reference;\n        p.token = _token;\n        emit PaymentAuthorized(idPayment, p.recipient, p.amount, p.token, p.reference);\n        return idPayment;\n    }\n\n    /// Anyone can call this function to disburse the payment to \n    ///  the recipient after `earliestPayTime` has passed\n    /// @param _idPayment The payment ID to be executed\n    function disburseAuthorizedPayment(uint _idPayment) disbursementsAllowed public {\n        // Check that the `_idPayment` has been added to the payments struct\n        require(_idPayment < authorizedPayments.length);\n\n        Payment storage p = authorizedPayments[_idPayment];\n\n        // Checking for reasons not to execute the payment\n        require(allowedSpenders[p.spender]);\n        require(_getTime() >= p.earliestPayTime);\n        require(!p.canceled);\n        require(!p.paid);\n\n        p.paid = true; // Set the payment to being paid\n\n        // Make the payment\n        if (p.token == 0) {\n            p.recipient.transfer(p.amount);\n        } else {\n            require(ERC20(p.token).transfer(p.recipient, p.amount));\n        }\n\n        emit PaymentExecuted(_idPayment, p.recipient, p.amount, p.token);\n    }\n\n    /// convience function to disburse multiple payments in a single tx\n    function disburseAuthorizedPayments(uint[] _idPayments) public {\n        for (uint i = 0; i < _idPayments.length; i++) {\n            uint _idPayment = _idPayments[i];\n            disburseAuthorizedPayment(_idPayment);\n        }\n    }\n\n/////////\n// SecurityGuard Interface\n/////////\n\n    /// @notice `onlySecurityGuard` Delays a payment for a set number of seconds\n    /// @param _idPayment ID of the payment to be delayed\n    /// @param _delay The number of seconds to delay the payment\n    function delayPayment(uint _idPayment, uint _delay) onlySecurityGuard external {\n        require(_idPayment < authorizedPayments.length);\n\n        // Overflow test\n        require(_delay <= 10**18);\n\n        Payment storage p = authorizedPayments[_idPayment];\n\n        require(p.securityGuardDelay + _delay <= maxSecurityGuardDelay);\n        require(!p.paid);\n        require(!p.canceled);\n\n        p.securityGuardDelay += _delay;\n        p.earliestPayTime += _delay;\n    }\n\n////////\n// Owner Interface\n///////\n\n    /// @notice `onlyOwner` Cancel a payment all together\n    /// @param _idPayment ID of the payment to be canceled.\n    function cancelPayment(uint _idPayment) onlyOwner external {\n        require(_idPayment < authorizedPayments.length);\n\n        Payment storage p = authorizedPayments[_idPayment];\n\n        require(!p.canceled);\n        require(!p.paid);\n\n        p.canceled = true;\n        emit PaymentCanceled(_idPayment);\n    }\n\n    /// @notice `onlyOwner` Adds a spender to the `allowedSpenders[]` white list\n    /// @param _spender The address of the contract being authorized/unauthorized\n    /// @param _authorize `true` if authorizing and `false` if unauthorizing\n    function authorizeSpender(address _spender, bool _authorize) onlyOwner external {\n        allowedSpenders[_spender] = _authorize;\n        emit SpenderAuthorization(_spender, _authorize);\n    }\n\n    /// @notice `onlyOwner` Sets the address of `securityGuard`\n    /// @param _newSecurityGuard Address of the new security guard\n    function setSecurityGuard(address _newSecurityGuard) onlyOwner external {\n        securityGuard = _newSecurityGuard;\n    }\n\n    /// @notice `onlyOwner` Changes `timeLock`; the new `timeLock` cannot be\n    ///  lower than `absoluteMinTimeLock`\n    /// @param _newTimeLock Sets the new minimum default `timeLock` in seconds;\n    ///  pending payments maintain their `earliestPayTime`\n    function setTimelock(uint _newTimeLock) onlyOwner external {\n        require(_newTimeLock >= absoluteMinTimeLock);\n        timeLock = _newTimeLock;\n    }\n\n    /// @notice `onlyOwner` Changes the maximum number of seconds\n    /// `securityGuard` can delay a payment\n    /// @param _maxSecurityGuardDelay The new maximum delay in seconds that\n    ///  `securityGuard` can delay the payment's execution in total\n    function setMaxSecurityGuardDelay(uint _maxSecurityGuardDelay) onlyOwner external {\n        maxSecurityGuardDelay = _maxSecurityGuardDelay;\n    }\n\n    /// @dev called by the owner to pause the contract. Triggers a stopped state \n    ///  and resets allowDisbursePaymentWhenPaused to false\n    function pause() onlyOwner whenNotPaused public {\n        allowDisbursePaymentWhenPaused = false;\n        super.pause();\n    }\n\n    /// Owner can allow payment disbursement when the contract is paused. This is so the\n    /// bridge can be upgraded without having to migrate any existing authorizedPayments\n    /// @dev only callable whenPaused b/c pausing the contract will reset `allowDisbursePaymentWhenPaused` to false\n    /// @param allowed `true` if allowing payments to be disbursed when paused, otherwise 'false'\n    function setAllowDisbursePaymentWhenPaused(bool allowed) onlyOwner whenPaused public {\n        allowDisbursePaymentWhenPaused = allowed;\n    }\n\n    // for overidding during testing\n    function _getTime() internal view returns (uint) {\n        return now;\n    }\n\n}\n\n///File: ./contracts/lib/FailClosedVault.sol\n\npragma solidity ^0.4.21;\n\n/*\n    Copyright 2018, RJ Ewing\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\n\n/**\n* @dev `FailClosedVault` is a version of the vault that requires\n*  the securityGuard to \"see\" each payment before it can be collected\n*/\ncontract FailClosedVault is Vault {\n    uint public securityGuardLastCheckin;\n\n    /**\n    * @param _absoluteMinTimeLock For this version of the vault, it is recommended\n    *   that this value is > 24hrs. If not, it will require the securityGuard to checkIn\n    *   multiple times a day. Also consider that `securityGuardLastCheckin >= payment.earliestPayTime - timelock + 30mins);`\n    *   is the condition to allow payments to be payed. The additional 30 mins is to reduce (not eliminate)\n    *   the risk of front-running\n    */\n    function FailClosedVault(\n        address _escapeHatchCaller,\n        address _escapeHatchDestination,\n        uint _absoluteMinTimeLock,\n        uint _timeLock,\n        address _securityGuard,\n        uint _maxSecurityGuardDelay\n    ) Vault(\n        _escapeHatchCaller,\n        _escapeHatchDestination, \n        _absoluteMinTimeLock,\n        _timeLock,\n        _securityGuard,\n        _maxSecurityGuardDelay\n    ) public {\n    }\n\n/////////////////////\n// Spender Interface\n/////////////////////\n\n    /**\n    * Disburse an authorizedPayment to the recipient if all checks pass.\n    *\n    * @param _idPayment The payment ID to be disbursed\n    */\n    function disburseAuthorizedPayment(uint _idPayment) disbursementsAllowed public {\n        // Check that the `_idPayment` has been added to the payments struct\n        require(_idPayment < authorizedPayments.length);\n\n        Payment storage p = authorizedPayments[_idPayment];\n        // The current minimum delay for a payment is `timeLock`. Thus the following ensuress\n        // that the `securityGuard` has checked in after the payment was created\n        // @notice earliestPayTime is updated when a payment is delayed. Which may require\n        // another checkIn before the payment can be collected.\n        // @notice We add 30 mins to this to reduce (not eliminate) the risk of front-running\n        require(securityGuardLastCheckin >= p.earliestPayTime - timeLock + 30 minutes);\n\n        super.disburseAuthorizedPayment(_idPayment);\n    }\n\n///////////////////////////\n// SecurityGuard Interface\n///////////////////////////\n\n    /**\n    * @notice `onlySecurityGuard` can checkin. If they fail to checkin,\n    * payments will not be allowed to be disbursed, unless the payment has\n    * an `earliestPayTime` <= `securityGuardLastCheckin`.\n    * @notice To reduce the risk of a front-running attack on payments, it\n    * is important that this is called with a resonable gasPrice set for the\n    * current network congestion. If this tx is not mined, within 30 mins\n    * of being sent, it is possible that a payment can be authorized w/o the\n    * securityGuard's knowledge\n    */\n    function checkIn() onlySecurityGuard external {\n        securityGuardLastCheckin = _getTime();\n    }\n}\n\n///File: ./contracts/GivethBridge.sol\n\npragma solidity ^0.4.21;\n\n/*\n    Copyright 2017, RJ Ewing <[email protected]>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\n\n\n\n/**\n* @notice It is not recommened to call this function outside of the giveth dapp (giveth.io)\n* this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\n* will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\n* will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\n* the dapp\n*/\ncontract GivethBridge is FailClosedVault {\n\n    mapping(address => bool) tokenWhitelist;\n\n    event Donate(uint64 giverId, uint64 receiverId, address token, uint amount);\n    event DonateAndCreateGiver(address giver, uint64 receiverId, address token, uint amount);\n    event EscapeFundsCalled(address token, uint amount);\n\n    //== constructor\n\n    /**\n    * @param _escapeHatchCaller The address of a trusted account or contract to\n    *  call `escapeHatch()` to send the ether in this contract to the\n    *  `escapeHatchDestination` in the case on an emergency. it would be ideal \n    *  if `escapeHatchCaller` cannot move funds out of `escapeHatchDestination`\n    * @param _escapeHatchDestination The address of a safe location (usually a\n    *  Multisig) to send the ether held in this contract in the case of an emergency\n    * @param _absoluteMinTimeLock The minimum number of seconds `timelock` can\n    *  be set to, if set to 0 the `owner` can remove the `timeLock` completely\n    * @param _timeLock Minimum number of seconds that payments are delayed\n    *  after they are authorized (a security precaution)\n    * @param _securityGuard Address that will be able to delay the payments\n    *  beyond the initial timelock requirements; can be set to 0x0 to remove\n    *  the `securityGuard` functionality\n    * @param _maxSecurityGuardDelay The maximum number of seconds in total\n    *   that `securityGuard` can delay a payment so that the owner can cancel\n    *   the payment if needed\n    */\n    function GivethBridge(\n        address _escapeHatchCaller,\n        address _escapeHatchDestination,\n        uint _absoluteMinTimeLock,\n        uint _timeLock,\n        address _securityGuard,\n        uint _maxSecurityGuardDelay\n    ) FailClosedVault(\n        _escapeHatchCaller,\n        _escapeHatchDestination,\n        _absoluteMinTimeLock,\n        _timeLock,\n        _securityGuard,\n        _maxSecurityGuardDelay\n    ) public\n    {\n        tokenWhitelist[0] = true; // enable eth transfers\n    }\n\n    //== public methods\n\n    /**\n    * @notice It is not recommened to call this function outside of the giveth dapp (giveth.io)\n    * this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\n    * will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\n    * will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\n    * the dapp\n    *\n    * @param giver The address to create a 'giver' pledge admin for in the liquidPledging contract\n    * @param receiverId The adminId of the liquidPledging pledge admin receiving the donation\n    */\n    function donateAndCreateGiver(address giver, uint64 receiverId) payable external {\n        donateAndCreateGiver(giver, receiverId, 0, 0);\n    }\n\n    /**\n    * @notice It is not recommened to call this function outside of the giveth dapp (giveth.io)\n    * this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\n    * will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\n    * will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\n    * the dapp\n    *\n    * @param giver The address to create a 'giver' pledge admin for in the liquidPledging contract\n    * @param receiverId The adminId of the liquidPledging pledge admin receiving the donation\n    * @param token The token to donate. If donating ETH, then 0x0. Note: the token must be whitelisted\n    * @param _amount The amount of the token to donate. If donating ETH, then 0x0 as the msg.value will be used instead.\n    */\n    function donateAndCreateGiver(address giver, uint64 receiverId, address token, uint _amount) whenNotPaused payable public {\n        require(giver != 0);\n        require(receiverId != 0);\n        uint amount = _receiveDonation(token, _amount);\n        emit DonateAndCreateGiver(giver, receiverId, token, amount);\n    }\n\n    /**\n    * @notice It is not recommened to call this function outside of the giveth dapp (giveth.io)\n    * this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\n    * will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\n    * will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\n    * the dapp\n    *\n    * @param giverId The adminId of the liquidPledging pledge admin who is donating\n    * @param receiverId The adminId of the liquidPledging pledge admin receiving the donation\n    */\n    function donate(uint64 giverId, uint64 receiverId) payable external {\n        donate(giverId, receiverId, 0, 0);\n    }\n\n    /**\n    * @notice It is not recommened to call this function outside of the giveth dapp (giveth.io)\n    * this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\n    * will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\n    * will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\n    * the dapp\n    *\n    * @param giverId The adminId of the liquidPledging pledge admin who is donating\n    * @param receiverId The adminId of the liquidPledging pledge admin receiving the donation\n    * @param token The token to donate. If donating ETH, then 0x0. Note: the token must be whitelisted\n    * @param _amount The amount of the token to donate. If donating ETH, then 0x0 as the msg.value will be used instead.\n    */\n    function donate(uint64 giverId, uint64 receiverId, address token, uint _amount) whenNotPaused payable public {\n        require(giverId != 0);\n        require(receiverId != 0);\n        uint amount = _receiveDonation(token, _amount);\n        emit Donate(giverId, receiverId, token, amount);\n    }\n\n    /**\n    * The `owner` can call this function to add/remove a token from the whitelist\n    *\n    * @param token The address of the token to update\n    * @param accepted Wether or not to accept this token for donations\n    */\n    function whitelistToken(address token, bool accepted) whenNotPaused onlyOwner external {\n        tokenWhitelist[token] = accepted;\n    }\n\n    /**\n    * Transfer tokens/eth to the escapeHatchDestination.\n    * Used as a safety mechanism to prevent the bridge from holding too much value\n    *\n    * before being thoroughly battle-tested.\n    * @param _token the token to transfer. 0x0 for ETH\n    * @param _amount the amount to transfer\n    */\n    function escapeFunds(address _token, uint _amount) external onlyEscapeHatchCallerOrOwner {\n        // @dev Logic for ether\n        if (_token == 0) {\n            escapeHatchDestination.transfer(_amount);\n        // @dev Logic for tokens\n        } else {\n            ERC20 token = ERC20(_token);\n            require(token.transfer(escapeHatchDestination, _amount));\n        }\n        emit EscapeFundsCalled(_token, _amount);\n    }\n\n    /**\n    * Allow the escapeHatchDestination to deposit eth into this contract w/o calling donate method\n    */\n    function depositEscapedFunds() external payable {\n        require(msg.sender == escapeHatchDestination);\n    }\n\n    //== internal methods\n\n    /**\n    * @dev used to actually receive the donation. Will transfer the token to to this contract\n    */\n    function _receiveDonation(address token, uint _amount) internal returns(uint amount) {\n        require(tokenWhitelist[token]);\n        amount = _amount;\n\n        // eth donation\n        if (token == 0) {\n            amount = msg.value;\n        }\n\n        require(amount > 0);\n\n        if (token != 0) {\n            require(ERC20(token).transferFrom(msg.sender, this, amount));\n        }\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"maxSecurityGuardDelay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"accepted\",\"type\":\"bool\"}],\"name\":\"whitelistToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"giver\",\"type\":\"address\"},{\"name\":\"receiverId\",\"type\":\"uint64\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donateAndCreateGiver\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"escapeFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTimeLock\",\"type\":\"uint256\"}],\"name\":\"setTimelock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escapeHatchCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityGuardLastCheckin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"giverId\",\"type\":\"uint64\"},{\"name\":\"receiverId\",\"type\":\"uint64\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPayment\",\"type\":\"uint256\"}],\"name\":\"disburseAuthorizedPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dac\",\"type\":\"address\"}],\"name\":\"removeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setAllowDisbursePaymentWhenPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfAuthorizedPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"proposeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_authorize\",\"type\":\"bool\"}],\"name\":\"authorizeSpender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPayment\",\"type\":\"uint256\"}],\"name\":\"cancelPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPayment\",\"type\":\"uint256\"},{\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"delayPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowDisbursePaymentWhenPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPayments\",\"type\":\"uint256[]\"}],\"name\":\"disburseAuthorizedPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenEscapable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"giver\",\"type\":\"address\"},{\"name\":\"receiverId\",\"type\":\"uint64\"}],\"name\":\"donateAndCreateGiver\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authorizedPayments\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"reference\",\"type\":\"bytes32\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"earliestPayTime\",\"type\":\"uint256\"},{\"name\":\"canceled\",\"type\":\"bool\"},{\"name\":\"paid\",\"type\":\"bool\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"securityGuardDelay\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"escapeHatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityGuard\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSecurityGuard\",\"type\":\"address\"}],\"name\":\"setSecurityGuard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEscapedFunds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"giverId\",\"type\":\"uint64\"},{\"name\":\"receiverId\",\"type\":\"uint64\"}],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwnerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEscapeHatchCaller\",\"type\":\"address\"}],\"name\":\"changeHatchEscapeCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedSpenders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxSecurityGuardDelay\",\"type\":\"uint256\"}],\"name\":\"setMaxSecurityGuardDelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"absoluteMinTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_reference\",\"type\":\"bytes32\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_paymentDelay\",\"type\":\"uint256\"}],\"name\":\"authorizePayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escapeHatchDestination\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_escapeHatchCaller\",\"type\":\"address\"},{\"name\":\"_escapeHatchDestination\",\"type\":\"address\"},{\"name\":\"_absoluteMinTimeLock\",\"type\":\"uint256\"},{\"name\":\"_timeLock\",\"type\":\"uint256\"},{\"name\":\"_securityGuard\",\"type\":\"address\"},{\"name\":\"_maxSecurityGuardDelay\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"giverId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"receiverId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Donate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"giver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiverId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DonateAndCreateGiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscapeFundsCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPayment\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reference\",\"type\":\"bytes32\"}],\"name\":\"PaymentAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPayment\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PaymentExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPayment\",\"type\":\"uint256\"}],\"name\":\"PaymentCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"SpenderAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"EscapeHatchBlackistedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscapeHatchCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OwnershipRemoved\",\"type\":\"event\"}]",
  "bytecode": "60606040526005805460ff19169055341561001957600080fd5b60405160c080611cc283398101604052808051919060200180519190602001805191906020018051919060200180519190602001805160008054600160a060020a03338116600160a060020a0319928316178355600280549b82169b83169b909b17909a5560038054998b1699821699909917909855600896909655600994909455505060078054959091169490931693909317909155600a919091558052600e6020527fe710864318d4a32f37d6ce54cb3fadbef648dd12d8dbdf53973564d56b7f881c805460ff19166001179055611bca806100f86000396000f3006060604052600436106101df5763ffffffff60e060020a6000350416630b2e742381146101e45780630ffb1d8b14610209578063183ff0851461022f5780631870c10f146102425780631b28591c1461026d5780631e891c0a1461028f5780631f6eb6e7146102a55780632af4c31e146102d45780633f487b8b146102f35780633f4ba83a146103065780634c4316c71461031957806352892478146103435780635c975abb14610359578063666a342714610380578063672f412c1461039f57806368b8c5a1146103b7578063710bf322146103ca578063793c0fd4146103e957806379ba50971461040d5780638422927d146104205780638456cb5914610436578063846a5dde14610449578063859bcc7114610462578063863da00014610475578063892db057146104c45780638da5cb5b146104e357806391f5c3a8146104f6578063a0927a6a14610517578063a142d608146105fb578063b2ca3ec41461061a578063bb2a51d11461062d578063bd541ad01461064c578063bde60ac914610654578063d085835a1461066f578063d091b55014610682578063d836fbe814610695578063d8528af0146106b4578063da4793ac146106d3578063ea8a66c7146106e9578063f37b74ca146106fc578063f5b6123014610736575b600080fd5b34156101ef57600080fd5b6101f7610749565b60405190815260200160405180910390f35b341561021457600080fd5b61022d600160a060020a0360043516602435151561074f565b005b341561023a57600080fd5b61022d6107a5565b61022d600160a060020a0360043581169067ffffffffffffffff6024351690604435166064356107cd565b341561027857600080fd5b61022d600160a060020a0360043516602435610881565b341561029a57600080fd5b61022d6004356109ca565b34156102b057600080fd5b6102b86109f9565b604051600160a060020a03909116815260200160405180910390f35b34156102df57600080fd5b61022d600160a060020a0360043516610a08565b34156102fe57600080fd5b6101f7610a9c565b341561031157600080fd5b61022d610aa2565b61022d67ffffffffffffffff60043581169060243516600160a060020a0360443516606435610b06565b341561034e57600080fd5b61022d600435610bbb565b341561036457600080fd5b61036c610c33565b604051901515815260200160405180910390f35b341561038b57600080fd5b61022d600160a060020a0360043516610c3c565b34156103aa57600080fd5b61022d6004351515610cb9565b34156103c257600080fd5b6101f7610cf8565b34156103d557600080fd5b61022d600160a060020a0360043516610cff565b34156103f457600080fd5b61022d600160a060020a03600435166024351515610d70565b341561041857600080fd5b61022d610dea565b341561042b57600080fd5b61022d600435610e6a565b341561044157600080fd5b61022d610f1e565b341561045457600080fd5b61022d600435602435610f5d565b341561046d57600080fd5b61036c611013565b341561048057600080fd5b61022d600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965061101c95505050505050565b34156104cf57600080fd5b61036c600160a060020a036004351661105a565b34156104ee57600080fd5b6102b8611079565b61022d600160a060020a036004351667ffffffffffffffff60243516611088565b341561052257600080fd5b61052d600435611095565b604051602081018a9052600160a060020a03808a16604083015260608201899052871515608083015286151560a083015285811660c0830152841660e082015261010081018390526101208101829052610140808252819081018c818151815260200191508051906020019080838360005b838110156105b757808201518382015260200161059f565b50505050905090810190601f1680156105e45780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b341561060657600080fd5b61022d600160a060020a03600435166111a9565b341561062557600080fd5b6102b86113ca565b341561063857600080fd5b61022d600160a060020a03600435166113d9565b61022d611416565b61022d67ffffffffffffffff60043581169060243516611431565b341561067a57600080fd5b6101f761143e565b341561068d57600080fd5b6102b8611444565b34156106a057600080fd5b61022d600160a060020a0360043516611453565b34156106bf57600080fd5b61036c600160a060020a03600435166114ab565b34156106de57600080fd5b61022d6004356114c0565b34156106f457600080fd5b6101f76114e0565b341561070757600080fd5b6101f7602460048035828101929101359035600160a060020a036044358116906064351660843560a4356114e6565b341561074157600080fd5b6102b8611698565b600a5481565b60055460ff161561075f57600080fd5b60005433600160a060020a0390811691161461077a57600080fd5b600160a060020a03919091166000908152600e60205260409020805460ff1916911515919091179055565b60075433600160a060020a039081169116146107c057600080fd5b6107c86116a7565b600d55565b60055460009060ff16156107e057600080fd5b600160a060020a03851615156107f557600080fd5b67ffffffffffffffff8416151561080b57600080fd5b61081583836116ab565b90507f300ed237d4114d1c2df9984e698721646d6c45633d6c1c5430450cdecf61571d85858584604051600160a060020a03948516815267ffffffffffffffff909316602084015292166040808301919091526060820192909252608001905180910390a15050505050565b60025460009033600160a060020a03908116911614806108af575060005433600160a060020a039081169116145b15156108ba57600080fd5b600160a060020a038316151561090257600354600160a060020a031682156108fc0283604051600060405180830381858888f1935050505015156108fd57600080fd5b610981565b506003548290600160a060020a038083169163a9059cbb91168460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561095f57600080fd5b5af1151561096c57600080fd5b50505060405180519050151561098157600080fd5b7f4ccddcd1a4e33721aee316370fb3e014294985be0755a68c88009b31e1dc4ae38383604051600160a060020a03909216825260208201526040908101905180910390a1505050565b60005433600160a060020a039081169116146109e557600080fd5b6008548110156109f457600080fd5b600955565b600254600160a060020a031681565b6000805433600160a060020a03908116911614610a2457600080fd5b600160a060020a0382161515610a3957600080fd5b5060008054600160a060020a03838116600160a060020a031980841691909117938490556001805490911690559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600d5481565b60005433600160a060020a03908116911614610abd57600080fd5b60055460ff161515610ace57600080fd5b6005805460ff191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60055460009060ff1615610b1957600080fd5b67ffffffffffffffff85161515610b2f57600080fd5b67ffffffffffffffff84161515610b4557600080fd5b610b4f83836116ab565b90507fc77b8feedf86922981aed41179f4a071d80467c7f17c5c13837269e363ac545b8585858460405167ffffffffffffffff9485168152929093166020830152600160a060020a03166040808301919091526060820192909252608001905180910390a15050505050565b60055460009060ff161580610bd25750600b5460ff165b1515610bdd57600080fd5b6006548210610beb57600080fd5b6006805483908110610bf957fe5b9060005260206000209060080201905060095481600301540361070801600d5410151515610c2657600080fd5b610c2f8261178c565b5050565b60055460ff1681565b60005433600160a060020a03908116911614610c5757600080fd5b610dac600160a060020a03821614610c6e57600080fd5b60008054600160a060020a03199081169091556001805490911690557f94e8b32e01b9eedfddd778ffbd051a7718cdc14781702884561162dca6f74dbb60405160405180910390a150565b60005433600160a060020a03908116911614610cd457600080fd5b60055460ff161515610ce557600080fd5b600b805460ff1916911515919091179055565b6006545b90565b60005433600160a060020a03908116911614610d1a57600080fd5b60018054600160a060020a031916600160a060020a0383811691909117918290559081169033167f13a4b3bc0d5234dd3d87c9f1557d8faefa37986da62c36ba49309e2fb2c9aec460405160405180910390a350565b60005433600160a060020a03908116911614610d8b57600080fd5b600160a060020a0382166000818152600c602052604090819020805460ff19168415151790557f801f568efbc3346a6ae3d0c3eb335a30d64e0d3cf08f1c39626d62cd5c82728190839051901515815260200160405180910390a25050565b60015460009033600160a060020a03908116911614610e0857600080fd5b506000805460018054600160a060020a0319808416600160a060020a03838116919091179586905591169091559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000805433600160a060020a03908116911614610e8657600080fd5b6006548210610e9457600080fd5b6006805483908110610ea257fe5b60009182526020909120600890910201600481015490915060ff1615610ec757600080fd5b6004810154610100900460ff1615610ede57600080fd5b60048101805460ff19166001179055817ffdf197ed54809861dafe0b4d391843652730ac67274c1e9e46db7687dccaa30160405160405180910390a25050565b60005433600160a060020a03908116911614610f3957600080fd5b60055460ff1615610f4957600080fd5b600b805460ff19169055610f5b6119ad565b565b60075460009033600160a060020a03908116911614610f7b57600080fd5b6006548310610f8957600080fd5b670de0b6b3a7640000821115610f9e57600080fd5b6006805484908110610fac57fe5b90600052602060002090600802019050600a548282600701540111151515610fd357600080fd5b6004810154610100900460ff1615610fea57600080fd5b600481015460ff1615610ffc57600080fd5b600781018054830190556003018054909101905550565b600b5460ff1681565b6000805b82518210156110555782828151811061103557fe5b90602001906020020151905061104a81610bbb565b600190910190611020565b505050565b600160a060020a031660009081526004602052604090205460ff161590565b600054600160a060020a031681565b610c2f82826000806107cd565b60068054829081106110a357fe5b9060005260206000209060080201600091509050806000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561114f5780601f106111245761010080835404028352916020019161114f565b820191906000526020600020905b81548152906001019060200180831161113257829003601f168201915b5050505060018301546002840154600385015460048601546005870154600688015460079098015496979496600160a060020a039485169650929460ff80841695610100850490911694620100009094048116939216918a565b600254600090819033600160a060020a03908116911614806111d9575060005433600160a060020a039081169116145b15156111e457600080fd5b600160a060020a03831660009081526004602052604090205460ff161561120a57600080fd5b600160a060020a038316151561129c57600354600160a060020a033081163193501682156108fc0283604051600060405180830381858888f19350505050151561125357600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a1611055565b5081600160a060020a0381166370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156112ec57600080fd5b5af115156112f957600080fd5b5050506040518051600354909350600160a060020a03808416925063a9059cbb91168460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561135f57600080fd5b5af1151561136c57600080fd5b50505060405180519050151561138157600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a1505050565b600754600160a060020a031681565b60005433600160a060020a039081169116146113f457600080fd5b60078054600160a060020a031916600160a060020a0392909216919091179055565b60035433600160a060020a03908116911614610f5b57600080fd5b610c2f8282600080610b06565b60095481565b600154600160a060020a031681565b60025433600160a060020a039081169116148061147e575060005433600160a060020a039081169116145b151561148957600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600c6020526000908152604090205460ff1681565b60005433600160a060020a039081169116146114db57600080fd5b600a55565b60085481565b6005546000908190819060ff16156114fd57600080fd5b600160a060020a0333166000908152600c602052604090205460ff16151561152457600080fd5b60068054925082906115399060018301611a13565b50600680548390811061154857fe5b60009182526020909120600890910201600281018054600160a060020a03191633600160a060020a03161790559050670de0b6b3a764000084111561158c57600080fd5b6009548410156115a7576009546115a16116a7565b016115b2565b836115b06116a7565b015b600382015560048101805475ffffffffffffffffffffffffffffffffffffffff0000191662010000600160a060020a038a1602179055600681018590556115fa818b8b611a3f565b5060018101889055600581018054600160a060020a031916600160a060020a038881169190911791829055600483015460068401546201000090910482169285927fd11935115aa93b9f1f616d0d7702f4593572daa610390123241b3785430281c49291168c604051928352600160a060020a0390911660208301526040808301919091526060909101905180910390a35098975050505050505050565b600354600160a060020a031681565b4290565b600160a060020a0382166000908152600e602052604081205460ff1615156116d257600080fd5b5080600160a060020a03831615156116e75750345b600081116116f457600080fd5b600160a060020a038316156117865782600160a060020a03166323b872dd33308460405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561176457600080fd5b5af1151561177157600080fd5b50505060405180519050151561178657600080fd5b92915050565b60055460009060ff1615806117a35750600b5460ff165b15156117ae57600080fd5b60065482106117bc57600080fd5b60068054839081106117ca57fe5b60009182526020808320600260089093020191820154600160a060020a03168352600c905260409091205490915060ff16151561180657600080fd5b80600301546118136116a7565b101561181e57600080fd5b600481015460ff161561183057600080fd5b6004810154610100900460ff161561184757600080fd5b60048101805461ff0019166101001790556005810154600160a060020a031615156118b3576004810154600682015462010000909104600160a060020a0316906108fc81150290604051600060405180830381858888f1935050505015156118ae57600080fd5b611941565b600581015460048201546006830154600160a060020a039283169263a9059cbb92620100009004169060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561191f57600080fd5b5af1151561192c57600080fd5b50505060405180519050151561194157600080fd5b600481015460068201546005830154600160a060020a036201000090930483169285927f354f3c0c8efabe1a1a07cf222842b008ef284ac185e63bdf8245be8cd2d97f5192909116604051918252600160a060020a031660208201526040908101905180910390a35050565b60005433600160a060020a039081169116146119c857600080fd5b60055460ff16156119d857600080fd5b6005805460ff191660011790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b815481835581811511611055576008028160080283600052602060002091820191016110559190611abd565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611a805782800160ff19823516178555611aad565b82800160010185558215611aad579182015b82811115611aad578235825591602001919060010190611a92565b50611ab9929150611b3d565b5090565b610cfc91905b80821115611ab9576000611ad78282611b57565b50600060018201819055600282018054600160a060020a03199081169091556003830182905560048301805475ffffffffffffffffffffffffffffffffffffffffffff191690556005830180549091169055600682018190556007820155600801611ac3565b610cfc91905b80821115611ab95760008155600101611b43565b50805460018160011615610100020316600290046000825580601f10611b7d5750611b9b565b601f016020900490600052602060002090810190611b9b9190611b3d565b505600a165627a7a723058202c93896a99ed00f70c3be01dbfcc817d0371f619dedcd25175f540c4e980677a00290000000000000000000000001e9f6746147e937e8e1c29180e15af0bd5fd64bb00000000000000000000000016fda2fcc887dd7ac65c46be144473067cff86540000000000000000000000000000000000000000000000000000000000015f90000000000000000000000000000000000000000000000000000000000002a300000000000000000000000000daa172456f5815256831aee19c8a370a835228710000000000000000000000000000000000000000000000000000000000278d00",
  "constructorArguments": "0000000000000000000000001e9f6746147e937e8e1c29180e15af0bd5fd64bb00000000000000000000000016fda2fcc887dd7ac65c46be144473067cff86540000000000000000000000000000000000000000000000000000000000015f90000000000000000000000000000000000000000000000000000000000002a300000000000000000000000000daa172456f5815256831aee19c8a370a835228710000000000000000000000000000000000000000000000000000000000278d00"
}