{
  "address": "0x57a8383b045e6965e453f9f0d35a28d12cc8a06e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LockToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-11\n*/\n\npragma solidity ^0.4.25;\n\nlibrary SafeMath {\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  struct restrict {\n        uint amount;\n        uint restrictTime;\n  } \n\n  mapping(address => uint256) balances;\n  mapping (address => restrict) restricts;\n\n  function getrestrict(address _owner) public view  returns (uint){\n      uint restrictAmount = 0;\n\n      if(restricts[_owner].amount != 0){\n        if(restricts[_owner].restrictTime <= now){\n            uint diffmonth = (now - restricts[_owner].restrictTime) / (10 minutes);\n            if(diffmonth < 4){\n                diffmonth = 4 - diffmonth;\n                restrictAmount = (diffmonth * restricts[_owner].amount)/4;\n            }\n        }else{\n            restrictAmount = restricts[_owner].amount;\n        }\n      }\n\n      return restrictAmount;\n  }\n\n  function getrestrictTime(address _owner) public view returns (uint){\n      return restricts[_owner].restrictTime;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n  \n    require(_to != address(0));\n    \n    uint restrictAmount =  getrestrict(msg.sender);\n    \n    require((_value + restrictAmount) <= balances[msg.sender]);\n    \n    /* if send address is AB, restrict token */ \n    if(msg.sender == address(0xFA3aA02539d1217fe6Af1599913ddb1A852f1934)){\n        require(0 == restricts[_to].amount);\n        restricts[_to].restrictTime = now + (10 minutes);\n        restricts[_to].amount = _value;\n    } else if(msg.sender == address(0xD5345443886e2188e63609E77EA73d1df44Ea4BC)){\n        require(0 == restricts[_to].amount);\n        restricts[_to].restrictTime = now + (10 minutes);\n        restricts[_to].amount = _value;\n    } \n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract LockToken is BasicToken {\n\n  string public constant name = \"Lock Token\";\n  string public constant symbol = \"LKT\";\n  uint8 public constant decimals = 18;\n\n  uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\n  \n  constructor() public {\n    totalSupply = INITIAL_SUPPLY;\n    balances[0xFA3aA02539d1217fe6Af1599913ddb1A852f1934] = 100000000 * (10 ** uint256(decimals));\n    balances[0xD5345443886e2188e63609E77EA73d1df44Ea4BC] = 800000000 * (10 ** uint256(decimals));\n    balances[0x617eC39184E1527e847449A5d8a252FfD7C29DDf] = 100000000 * (10 ** uint256(decimals));\n    \n    emit Transfer(msg.sender, 0xFA3aA02539d1217fe6Af1599913ddb1A852f1934, 100000000 * (10 ** uint256(decimals)));\n    emit Transfer(msg.sender, 0xD5345443886e2188e63609E77EA73d1df44Ea4BC, 800000000 * (10 ** uint256(decimals)));\n    emit Transfer(msg.sender, 0x617eC39184E1527e847449A5d8a252FfD7C29DDf, 100000000 * (10 ** uint256(decimals)));\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b506b033b2e3c9fd0803ce80000006000908155600160209081526a52b7d2dcc80cd2e40000007fdfa7105dbee7270cfe26e16d9d3d681f1c2d2d8e8aa4fb0460c4dcaf117253ed8190556b0295be96e6406697200000007f4bddaf7cdfcac77b09614c481ab1de2e2479a9f7786b326a6ada1c96817d811a5573617ec39184e1527e847449a5d8a252ffd7c29ddf9092527f4f2684e4948a5da48ada9e5ef30c6b6e9b3beffe4119418899e0dbcc24501226829055604080519283525173fa3aa02539d1217fe6af1599913ddb1a852f193492339260008051602061076983398151915292918290030190a3604080516b0295be96e6406697200000008152905173d5345443886e2188e63609e77ea73d1df44ea4bc9133916000805160206107698339815191529181900360200190a3604080516a52b7d2dcc80cd2e40000008152905173617ec39184e1527e847449a5d8a252ffd7c29ddf9133916000805160206107698339815191529181900360200190a36105d5806101946000396000f3006080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461009d5780630a16e2251461012757806318160ddd1461015a5780632ff2e9dc1461016f578063313ce56714610184578063583ba757146101af57806370a08231146101d057806395d89b41146101f1578063a9059cbb14610206575b600080fd5b3480156100a957600080fd5b506100b261023e565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100ec5781810151838201526020016100d4565b50505050905090810190601f1680156101195780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013357600080fd5b50610148600160a060020a0360043516610275565b60408051918252519081900360200190f35b34801561016657600080fd5b50610148610335565b34801561017b57600080fd5b5061014861033b565b34801561019057600080fd5b5061019961034b565b6040805160ff9092168252519081900360200190f35b3480156101bb57600080fd5b50610148600160a060020a0360043516610350565b3480156101dc57600080fd5b50610148600160a060020a036004351661036e565b3480156101fd57600080fd5b506100b2610389565b34801561021257600080fd5b5061022a600160a060020a03600435166024356103c0565b604080519115158252519081900360200190f35b60408051808201909152600a81527f4c6f636b20546f6b656e00000000000000000000000000000000000000000000602082015281565b600160a060020a038116600090815260026020526040812054819081901561032e57600160a060020a038416600090815260026020526040902060010154421061031257600160a060020a038416600090815260026020526040902060010154610258904203049050600481101561030d57600160a060020a0384166000908152600260205260409020546004918203919082020491505b61032e565b600160a060020a03841660009081526002602052604090205491505b5092915050565b60005481565b6b033b2e3c9fd0803ce800000081565b601281565b600160a060020a031660009081526002602052604090206001015490565b600160a060020a031660009081526001602052604090205490565b60408051808201909152600381527f4c4b540000000000000000000000000000000000000000000000000000000000602082015281565b600080600160a060020a03841615156103d857600080fd5b6103e133610275565b33600090815260016020526040902054909150838201111561040257600080fd5b3373fa3aa02539d1217fe6af1599913ddb1a852f1934141561046b57600160a060020a0384166000908152600260205260409020541561044157600080fd5b600160a060020a0384166000908152600260205260409020610258420160018201558390556104d0565b3373d5345443886e2188e63609e77ea73d1df44ea4bc14156104d057600160a060020a038416600090815260026020526040902054156104aa57600080fd5b600160a060020a0384166000908152600260205260409020610258420160018201558390555b336000908152600160205260409020546104f0908463ffffffff61058116565b3360009081526001602052604080822092909255600160a060020a03861681522054610522908463ffffffff61059316565b600160a060020a0385166000818152600160209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b60008282111561058d57fe5b50900390565b6000828201838110156105a257fe5b93925050505600a165627a7a723058200070b4b2fbc616d1d9ad3333b1c16c23ba5b4924df3989d62185cdfa97a0125c0029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
  "constructorArguments": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
}