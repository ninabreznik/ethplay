{
  "address": "0x9eb07bc1eb736d6eb14c5d549174a6fcf492f5e9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TestToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-08\n*/\n\npragma solidity ^0.4.18;\n\n// File: contracts/mockContracts/TestToken.sol\n\n/* all this file is based on code from open zepplin\n * https://github.com/OpenZeppelin/zeppelin-solidity/tree/master/contracts/token */\n\n\n/**\n * Standard ERC20 token\n *\n * Based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\n\n\n/**\n * Math operations with safety checks\n */\nlibrary SafeMath {\n    function mul(uint a, uint b) internal pure returns (uint) {\n        uint c = a * b;\n        require(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint a, uint b) internal pure returns (uint) {\n        require(b > 0);\n        uint c = a / b;\n        require(a == b * c + a % b);\n        return c;\n    }\n\n    function sub(uint a, uint b) internal pure returns (uint) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n\n/*\n * ERC20Basic\n * Simpler version of ERC20 interface\n * see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20Basic {\n    uint public totalSupply;\n    function balanceOf(address who) public view returns (uint);\n    function transfer(address to, uint value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint value);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/*\n * ERC20 interface\n * see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint);\n    function transferFrom(address from, address to, uint value) public returns (bool);\n    function approve(address spender, uint value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/*\n * Basic token\n * Basic version of StandardToken, with no allowances\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint;\n\n    mapping(address => uint) balances;\n\n    /*\n     * Fix for the ERC20 short address attack\n     */\n    modifier onlyPayloadSize(uint size) {\n        if (msg.data.length < size + 4) {\n         revert();\n        }\n        _;\n    }\n\n    function transfer(address _to, uint _value)  public onlyPayloadSize(2 * 32) returns (bool) {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint balance) {\n        return balances[_owner];\n    }\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Standard ERC20 token\n *\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is BasicToken, ERC20 {\n\n    mapping (address => mapping (address => uint)) allowed;\n\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n\n        var _allowance = allowed[_from][msg.sender];\n\n        // Check is not needed because sub(_allowance, _value) will already revert if this condition is not met\n        if (_value > _allowance) revert();\n\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/*\n * SimpleToken\n *\n * Very simple ERC20 Token example, where all tokens are pre-assigned\n * to the creator. Note they can later distribute these tokens\n * as they wish using `transfer` and other `StandardToken` functions.\n */\ncontract TestToken is StandardToken {\n\n    string public name = \"Test\";\n    string public symbol = \"TST\";\n    uint public decimals = 18;\n    uint public INITIAL_SUPPLY = 10**(50+18);\n\n    function TestToken(string _name, string _symbol, uint _decimals) public {\n        totalSupply = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    event Burn(address indexed _burner, uint _value);\n\n    function burn(uint _value) public returns (bool) {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(msg.sender, _value);\n        Transfer(msg.sender, address(0x0), _value);\n        return true;\n    }\n\n    // save some gas by making only one contract call\n    function burnFrom(address _from, uint256 _value) public returns (bool) {\n        transferFrom( _from, msg.sender, _value );\n        return burn(_value);\n    }\n}",
  "bytecode": "606060405260408051908101604052600481527f54657374000000000000000000000000000000000000000000000000000000006020820152600390805161004b929160200190610142565b5060408051908101604052600381527f545354000000000000000000000000000000000000000000000000000000000060208201526004908051610093929160200190610142565b5060126005557c03b58e88c75313ec9d329eaaa18fb92f75215b1710000000000000000060065534156100c557600080fd5b6040516109a63803806109a6833981016040528080518201919060200180518201919060200180516006546000818155600160a060020a033316815260016020526040902055915060039050838051610122929160200190610142565b506004828051610136929160200190610142565b50600555506101dd9050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061018357805160ff19168380011785556101b0565b828001600101855582156101b0579182015b828111156101b0578251825591602001919060010190610195565b506101bc9291506101c0565b5090565b6101da91905b808211156101bc57600081556001016101c6565b90565b6107ba806101ec6000396000f3006060604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100be578063095ea7b31461014857806318160ddd1461017e57806323b872dd146101a35780632ff2e9dc146101cb578063313ce567146101de57806342966c68146101f157806370a082311461020757806379cc67901461022657806395d89b4114610248578063a9059cbb1461025b578063dd62ed3e1461027d575b600080fd5b34156100c957600080fd5b6100d16102a2565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561010d5780820151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015357600080fd5b61016a600160a060020a0360043516602435610340565b604051901515815260200160405180910390f35b341561018957600080fd5b6101916103ac565b60405190815260200160405180910390f35b34156101ae57600080fd5b61016a600160a060020a03600435811690602435166044356103b2565b34156101d657600080fd5b6101916104dd565b34156101e957600080fd5b6101916104e3565b34156101fc57600080fd5b61016a6004356104e9565b341561021257600080fd5b610191600160a060020a03600435166105c6565b341561023157600080fd5b61016a600160a060020a03600435166024356105e1565b341561025357600080fd5b6100d16105ff565b341561026657600080fd5b61016a600160a060020a036004351660243561066a565b341561028857600080fd5b610191600160a060020a036004358116906024351661073c565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103385780601f1061030d57610100808354040283529160200191610338565b820191906000526020600020905b81548152906001019060200180831161031b57829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b600160a060020a03808416600090815260026020908152604080832033909416835292905290812054808311156103e857600080fd5b600160a060020a038416600090815260016020526040902054610411908463ffffffff61076716565b600160a060020a038086166000908152600160205260408082209390935590871681522054610446908463ffffffff61077916565b600160a060020a03861660009081526001602052604090205561046f818463ffffffff61077916565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b60065481565b60055481565b600160a060020a033316600090815260016020526040812054610512908363ffffffff61077916565b600160a060020a0333166000908152600160205260408120919091555461053f908363ffffffff61077916565b600055600160a060020a0333167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a2600033600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a3506001919050565b600160a060020a031660009081526001602052604090205490565b60006105ee8333846103b2565b506105f8826104e9565b9392505050565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103385780601f1061030d57610100808354040283529160200191610338565b60006040604436101561067c57600080fd5b600160a060020a0333166000908152600160205260409020546106a5908463ffffffff61077916565b600160a060020a0333811660009081526001602052604080822093909355908616815220546106da908463ffffffff61076716565b600160a060020a0380861660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a35060019392505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6000828201838110156105f857600080fd5b60008282111561078857600080fd5b509003905600a165627a7a723058207e2ffd1c5397eb1388449dd07f9bfb0f3d905fb577ac306e73472c02e7d639670029000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000013000000000000000000000000000000000000000000000000000000000000000256550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006566963746f720000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000013000000000000000000000000000000000000000000000000000000000000000256550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006566963746f720000000000000000000000000000000000000000000000000000"
}