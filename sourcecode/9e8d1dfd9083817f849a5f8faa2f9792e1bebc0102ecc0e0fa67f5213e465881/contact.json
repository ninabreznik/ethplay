{
  "address": "0xda80b20038bdf968c7307bb5907a469482cf6251",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "BrokerNeko Network Token",
  "contractName": "BrokerNekoNetwork",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-15\n*/\n\npragma solidity ^0.4.21;\n\nlibrary SafeMath\n{\n    function mul(uint a, uint b) internal returns (uint)\n    {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint a, uint b) internal returns (uint)\n    {\nassert(b > 0);       \n        uint c = a / b;\n        return c;\n    }\n\n    function sub(uint a, uint b) internal returns (uint)\n    {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint a, uint b) internal returns (uint)\n    {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal constant returns (uint64)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal constant returns (uint64)\n    {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal constant returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal constant returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function assert(bool assertion) internal\n    {\n        if (!assertion)\n        {\n            throw;\n        }\n    }\n}\n\ncontract ERC20Basic\n{\n    uint public totalSupply;\n    function balanceOf(address who) constant returns (uint);\n    function transfer(address to, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n}\n\ncontract ERC20 is ERC20Basic\n{\n    function allowance(address owner, address spender) constant returns (uint);\n    function transferFrom(address from, address to, uint value);\n    function approve(address spender, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\ncontract BasicToken is ERC20Basic\n{\n    using SafeMath for uint;\n    mapping(address => uint) balances;\n\n    modifier onlyPayloadSize(uint size)\n    {\n        if(msg.data.length < size + 4)\n        {\n            throw;\n        }\n        _;\n    }\n\n    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32)\n    {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n    }\n\n    function balanceOf(address _owner) constant returns (uint balance)\n    {\n        return balances[_owner];\n    }\n}\n\ncontract StandardToken is BasicToken, ERC20\n{\n    mapping (address => mapping (address => uint)) allowed;\n\n    function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32)\n    {\n        uint _allowance = allowed[_from][msg.sender];\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint _value)\n    {\n\n        \n        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint remaining)\n    {\n        return allowed[_owner][_spender];\n    }\n}\n\ncontract BrokerNekoNetwork is StandardToken\n{\n    string public name = \"BrokerNekoNetwork\";\n    string public symbol = \"BNN\";\n    uint public decimals = 8 ;\n\n   \n    uint public INITIAL_SUPPLY =  1680000000000000000;\n\n\n    \n    uint public constant ALLOCATION_LOCK_END_TIMESTAMP = 1559347200;\n\n    address public constant BNN = 0xF009D60DF560F10E94f2ee397Fcb57d00130704C;\n    uint public constant    BNN_ALLOCATION = 1000000000000000000; \n\n   \n    function BrokerNekoNetwork()\n    {\n        \n        totalSupply = INITIAL_SUPPLY;\n\n       \n        balances[msg.sender] = totalSupply;\n\n       \n        balances[msg.sender] -= BNN_ALLOCATION;\n       \n\n        balances[BNN]   = BNN_ALLOCATION;\n      \n    }\n\n    function isAllocationLocked(address _spender) constant returns (bool)\n    {\n        return inAllocationLockPeriod() && isTeamMember(_spender);\n    }\n\n    function inAllocationLockPeriod() constant returns (bool)\n    {\n        return (block.timestamp < ALLOCATION_LOCK_END_TIMESTAMP);\n    }\n\n    function isTeamMember(address _spender) constant returns (bool)\n    {\n        return _spender == BNN  ;\n    }\n\n        function approve(address spender, uint tokens)\n    {\n        if (isAllocationLocked(spender))\n        {\n            throw;\n        }\n        else\n        {\n            super.approve(spender, tokens);\n        }\n    }\n\n    function transfer(address to, uint tokens) onlyPayloadSize(2 * 32)\n    {\n        if (isAllocationLocked(to))\n        {\n            throw;\n        }\n        else\n        {\n            super.transfer(to, tokens);\n        }\n    }\n\n    function transferFrom(address from, address to, uint tokens) onlyPayloadSize(3 * 32)\n    {\n        if (isAllocationLocked(from) || isAllocationLocked(to))\n        {\n            throw;\n        }\n        else\n        {\n            super.transferFrom(from, to, tokens);\n        }\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"isAllocationLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BNN_ALLOCATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ALLOCATION_LOCK_END_TIMESTAMP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BNN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"isTeamMember\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inAllocationLockPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526040805190810160405280601181526020017f42726f6b65724e656b6f4e6574776f726b0000000000000000000000000000008152506003908051906020019062000051929190620001c7565b506040805190810160405280600381526020017f424e4e0000000000000000000000000000000000000000000000000000000000815250600490805190602001906200009f929190620001c7565b5060086005556717508f1956a800006006553415620000bd57600080fd5b600654600081905550600054600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550670de0b6b3a7640000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550670de0b6b3a76400006001600073f009d60df560f10e94f2ee397fcb57d00130704c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062000276565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020a57805160ff19168380011785556200023b565b828001600101855582156200023b579182015b828111156200023a5782518255916020019190600101906200021d565b5b5090506200024a91906200024e565b5090565b6200027391905b808211156200026f57600081600090555060010162000255565b5090565b90565b610f5d80620002866000396000f3006060604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100eb578063095ea7b3146101795780630fb7657f146101bb57806318160ddd1461020c57806323b872dd146102355780632ff2e9dc14610296578063313ce567146102bf578063579f0789146102e85780636b194a4a1461031157806370a082311461033a57806395d89b41146103875780639bf97e7414610415578063a9059cbb1461046a578063bbe9f99d146104ac578063caabe889146104fd578063dd62ed3e1461052a575b600080fd5b34156100f657600080fd5b6100fe610596565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013e578082015181840152602081019050610123565b50505050905090810190601f16801561016b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018457600080fd5b6101b9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610634565b005b34156101c657600080fd5b6101f2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610655565b604051808215151515815260200191505060405180910390f35b341561021757600080fd5b61021f610677565b6040518082815260200191505060405180910390f35b341561024057600080fd5b610294600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061067d565b005b34156102a157600080fd5b6102a96106c7565b6040518082815260200191505060405180910390f35b34156102ca57600080fd5b6102d26106cd565b6040518082815260200191505060405180910390f35b34156102f357600080fd5b6102fb6106d3565b6040518082815260200191505060405180910390f35b341561031c57600080fd5b6103246106df565b6040518082815260200191505060405180910390f35b341561034557600080fd5b610371600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506106e7565b6040518082815260200191505060405180910390f35b341561039257600080fd5b61039a610730565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103da5780820151818401526020810190506103bf565b50505050905090810190601f1680156104075780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561042057600080fd5b6104286107ce565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561047557600080fd5b6104aa600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506107e6565b005b34156104b757600080fd5b6104e3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061081e565b604051808215151515815260200191505060405180910390f35b341561050857600080fd5b61051061086a565b604051808215151515815260200191505060405180910390f35b341561053557600080fd5b610580600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610878565b6040518082815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561062c5780601f106106015761010080835404028352916020019161062c565b820191906000526020600020905b81548152906001019060200180831161060f57829003601f168201915b505050505081565b61063d82610655565b1561064757600080fd5b61065182826108ff565b5050565b600061065f61086a565b8015610670575061066f8261081e565b5b9050919050565b60005481565b6060600481016000369050101561069357600080fd5b61069c84610655565b806106ac57506106ab83610655565b5b156106b657600080fd5b6106c1848484610a81565b50505050565b60065481565b60055481565b670de0b6b3a764000081565b635cf1c00081565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107c65780601f1061079b576101008083540402835291602001916107c6565b820191906000526020600020905b8154815290600101906020018083116107a957829003601f168201915b505050505081565b73f009d60df560f10e94f2ee397fcb57d00130704c81565b604060048101600036905010156107fc57600080fd5b61080583610655565b1561080f57600080fd5b6108198383610d41565b505050565b600073f009d60df560f10e94f2ee397fcb57d00130704c73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000635cf1c0004210905090565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000811415801561098d57506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b1561099757600080fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35050565b600060606004810160003690501015610a9957600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150610b6a83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610eeb90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bff83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f0990919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c558383610f0990919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35050505050565b60406004810160003690501015610d5757600080fd5b610da982600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f0990919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e3e82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610eeb90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3505050565b6000808284019050610eff84821015610f22565b8091505092915050565b6000610f1783831115610f22565b818303905092915050565b801515610f2e57600080fd5b505600a165627a7a723058206d4b73205cc06511bbda927a66ad77457d068cb5862a57f8a672346d4a06ecf60029"
}