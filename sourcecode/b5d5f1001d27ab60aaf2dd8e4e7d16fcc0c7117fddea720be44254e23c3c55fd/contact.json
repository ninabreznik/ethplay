{
  "address": "0xa2979531480d746c1378355269130b4729de2d4d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenBank",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-29\n*/\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\n/**\n * @title Math\n * @dev Assorted math operations\n */\nlibrary Math {\n    /**\n    * @dev Returns the largest of two numbers.\n    */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n    * @dev Returns the smallest of two numbers.\n    */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n    * @dev Calculates the average of two numbers. Since these are integers,\n    * averages of an even and odd number cannot be represented, and will be\n    * rounded down.\n    */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\n\ncontract DepositorRole {\n  using Roles for Roles.Role;\n\n  event DepositorAdded(address indexed account);\n  event DepositorRemoved(address indexed account);\n\n  Roles.Role private depositors;\n\n  constructor() internal {\n    _addDepositor(msg.sender);\n  }\n\n  modifier onlyDepositor() {\n    require(isDepositor(msg.sender));\n    _;\n  }\n\n  function isDepositor(address account) public view returns (bool) {\n    return depositors.has(account);\n  }\n\n  function addDepositor(address account) public onlyDepositor {\n    _addDepositor(account);\n  }\n\n  function renounceDepositor() public {\n    _removeDepositor(msg.sender);\n  }\n\n  function _addDepositor(address account) internal {\n    depositors.add(account);\n    emit DepositorAdded(account);\n  }\n\n  function _removeDepositor(address account) internal {\n    depositors.remove(account);\n    emit DepositorRemoved(account);\n  }\n}\n\n\ncontract TraderRole {\n  using Roles for Roles.Role;\n\n  event TraderAdded(address indexed account);\n  event TraderRemoved(address indexed account);\n\n  Roles.Role private traders;\n\n  constructor() internal {\n    _addTrader(msg.sender);\n  }\n\n  modifier onlyTrader() {\n    require(isTrader(msg.sender));\n    _;\n  }\n\n  function isTrader(address account) public view returns (bool) {\n    return traders.has(account);\n  }\n\n  function addTrader(address account) public onlyTrader {\n    _addTrader(account);\n  }\n\n  function renounceTrader() public {\n    _removeTrader(msg.sender);\n  }\n\n  function _addTrader(address account) internal {\n    traders.add(account);\n    emit TraderAdded(account);\n  }\n\n  function _removeTrader(address account) internal {\n    traders.remove(account);\n    emit TraderRemoved(account);\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        require(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n        require(token.approve(spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        require(token.approve(spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        require(token.approve(spender, newAllowance));\n    }\n}\n\n\n/**\n * @notice Token bank contract\n * @dev To use Token Bank, mint ERC20 tokens for this contract\n */\ncontract TokenBank is Ownable, DepositorRole, TraderRole {\n    using Math for uint256;\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // this token bank contract will use this binded ERC20 token\n    IERC20 public bindedToken;\n\n    // use deposited[user] to get the deposited ERC20 tokens\n    mapping(address => uint256) public deposited;\n\n    // address of fee collector\n    address public feeCollector;\n   \n    event TokenBinded(\n        address indexed binder,\n        address indexed previousToken,\n        address indexed newToken\n    );\n\n    event FeeCollectorSet(\n        address indexed setter,\n        address indexed previousFeeCollector,\n        address indexed newFeeCollector\n    );\n\n    event FeeCollected(\n        address indexed collector,\n        address indexed collectTo,\n        uint256 amount\n    );\n\n    event Deposited(\n        address indexed depositor,\n        address indexed receiver,\n        uint256 amount,\n        uint256 balance\n    );\n\n    event BulkDeposited(\n        address indexed trader,\n        uint256 totalAmount,\n        uint256 requestNum\n    );\n\n    event Withdrawn(\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        uint256 fee,\n        uint256 balance\n    );\n\n    event BulkWithdrawn(\n        address indexed trader,\n        uint256 requestNum\n    );\n\n    event Transferred(\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        uint256 fee,\n        uint256 balance\n    );\n\n    event BulkTransferred(\n        address indexed trader,\n        uint256 requestNum\n    );\n\n    /**\n     * @param addrs addrs[0]: ERC20; addrs[1]: fee collector\n     */\n    constructor(\n        address[] memory addrs\n    )\n        public\n    {\n        bindedToken = IERC20(addrs[0]);\n        feeCollector = addrs[1];\n    }\n\n    /**\n     * @param token Address of ERC20 token to bind for bank\n     */\n    function bindToken(address token) external onlyOwner {\n        emit TokenBinded(msg.sender, address(bindedToken), token);\n        bindedToken = IERC20(token);\n    }\n\n    /**\n     * @param collector New fee collector\n     */\n    function setFeeCollector(address collector) external onlyOwner {\n        emit FeeCollectorSet(msg.sender, feeCollector, collector);\n        feeCollector = collector;\n    }\n\n    /**\n     * @dev Collect fee from Token Bank to ERC20 token\n     */\n    function collectFee() external onlyOwner {\n        uint256 amount = deposited[feeCollector];\n        deposited[feeCollector] = 0;\n        emit FeeCollected(msg.sender, feeCollector, amount);\n        bindedToken.safeTransfer(feeCollector, amount);\n    }\n\n    /**\n     * @notice Deposit ERC20 token to receiver address\n     * @param receiver Address of who will receive the deposited tokens\n     * @param amount Amount of ERC20 token to deposit\n     */\n    function depositTo(address receiver, uint256 amount) external onlyDepositor {\n        deposited[receiver] = deposited[receiver].add(amount);\n        emit Deposited(msg.sender, receiver, amount, deposited[receiver]);\n        bindedToken.safeTransferFrom(msg.sender, address(this), amount);\n    }\n\n    /**\n     * @notice Bulk deposit tokens to multiple receivers\n     * @param receivers Addresses of receivers\n     * @param amounts Individual amounts to deposit for receivers\n     */\n    function bulkDeposit(\n        address[] calldata receivers,\n        uint256[] calldata amounts\n    )\n        external\n        onlyDepositor\n    {\n        require(\n            receivers.length == amounts.length,\n            \"Failed to bulk deposit due to illegal arguments.\"\n        );\n\n        uint256 totalAmount = 0;\n        for (uint256 i = 0; i < amounts.length; i = i.add(1)) {\n            // accumulate total amount of tokens to transfer in token bank\n            totalAmount = totalAmount.add(amounts[i]);\n            // deposit tokens to token bank accounts\n            deposited[receivers[i]] = deposited[receivers[i]].add(amounts[i]);\n            emit Deposited(\n                msg.sender, \n                receivers[i], \n                amounts[i],\n                deposited[receivers[i]]\n            );\n        }\n        emit BulkDeposited(msg.sender, totalAmount, receivers.length);\n\n        // if transfer fails, deposits will revert accordingly \n        bindedToken.safeTransferFrom(msg.sender, address(this), totalAmount);  \n    }\n\n    /**\n     * @notice withdraw tokens from token bank to specific receiver\n     * @param from Token will withdraw from this address\n     * @param to Withdrawn token transfer to this address\n     * @param amount Amount of ERC20 token to withdraw\n     * @param fee Withdraw fee\n     */\n    function _withdraw(address from, address to, uint256 amount, uint256 fee) private {\n        deposited[feeCollector] = deposited[feeCollector].add(fee);\n        uint256 total = amount.add(fee);\n        deposited[from] = deposited[from].sub(total);\n        emit Withdrawn(from, to, amount, fee, deposited[from]);\n        bindedToken.safeTransfer(to, amount);\n    }\n\n    /**\n     * @notice Bulk withdraw tokens from token bank\n     * @dev Withdraw request will handle by off-chain API\n     * @dev Arguments must merge into arrays due to \"Stack too deep\" error\n     * @param nums See ./docs/nums.bulkWithdraw.param\n     * @param addrs See ./docs/addrs.bulkWithdraw.param\n     * @param rsSigParams See ./docs/rsSigParams.bulkWithdraw.param\n     */\n    function bulkWithdraw(\n        uint256[] calldata nums,\n        address[] calldata addrs,\n        bytes32[] calldata rsSigParams\n    )\n        external\n        onlyTrader\n    {\n        // length of nums = 4 * withdraw requests\n        uint256 total = nums.length.div(4);\n        require(\n            (total > 0) \n            && (total.mul(4) == nums.length)\n            && (total.mul(2) == addrs.length)\n            && (total.mul(2) == rsSigParams.length),\n            \"Failed to bulk withdraw due to illegal arguments.\"\n        );\n\n        // handle withdraw requests one after another\n        for (uint256 i = 0; i < total; i = i.add(1)) {\n            _verifyWithdrawSigner(\n                addrs[i.mul(2)],               // withdraw from (also signder)\n                addrs[(i.mul(2)).add(1)],      // withdraw to\n                nums[i.mul(4)],                // withdraw amount\n                nums[(i.mul(4)).add(1)],       // withdraw fee\n                nums[(i.mul(4)).add(2)],       // withdraw timestamp\n                nums[(i.mul(4)).add(3)],       // signature param: v\n                rsSigParams[i.mul(2)],         // signature param: r\n                rsSigParams[(i.mul(2)).add(1)] // signature param: s\n            );\n\n            _withdraw(\n                addrs[i.mul(2)],          // withdraw from\n                addrs[(i.mul(2)).add(1)], // withdraw to\n                nums[i.mul(4)],           // withdraw amount\n                nums[(i.mul(4)).add(1)]   // withdraw fee\n            );\n        }\n        emit BulkWithdrawn(msg.sender, total);\n    }\n\n    /**\n     * @notice Verify withdraw request signer\n     * @dev Request signer must be owner of deposit account\n     * @param from Token will withdraw from this address\n     * @param to Token will withdraw into this address\n     * @param amount Amount of token to withdraw\n     * @param fee Withdraw fee\n     * @param timestamp Withdraw request timestamp\n     * @param v Signature parameter: v\n     * @param r Signature parameter: r\n     * @param s Signature parameter: s\n     */\n    function _verifyWithdrawSigner(\n        address from,\n        address to,\n        uint256 amount,\n        uint256 fee,\n        uint256 timestamp,\n        uint256 v,\n        bytes32 r,\n        bytes32 s\n    )\n        private\n        view\n    {\n        bytes32 hashed = keccak256(\n            abi.encodePacked(\n                \"\\x19Ethereum Signed Message:\\n32\", \n                keccak256(\n                    abi.encodePacked(\n                        address(this), \n                        from, \n                        to, \n                        amount,\n                        fee,\n                        timestamp\n                    )\n                )\n            )\n        );\n\n        require(\n            ecrecover(hashed, uint8(v), r, s) == from,\n            \"Failed to withdraw due to request was not signed by singer.\"\n        );\n    }\n\n    /**\n     * @notice Bulk transfer tokens in token bank\n     * @dev Transfer request will handle by off-chain API\n     * @dev Arguments must merge into arrays due to \"Stack too deep\" error\n     * @param nums See ./docs/nums.bulkTransfer.param\n     * @param addrs See ./docs/addrs.bulkTransfer.param\n     * @param rsSigParams See ./docs/rsSigParams.bulkTransfer.param\n     */\n    function bulkTransfer(\n        uint256[] calldata nums,\n        address[] calldata addrs,\n        bytes32[] calldata rsSigParams\n    )\n        external\n        onlyTrader\n    {\n        // length of nums = 4 * transfer requests\n        uint256 total = nums.length.div(4);\n        require(\n            (total > 0) \n            && (total.mul(4) == nums.length)\n            && (total.mul(2) == addrs.length)\n            && (total.mul(2) == rsSigParams.length),\n            \"Failed to bulk transfer due to illegal arguments.\"\n        );\n\n        // handle transfer requests one after another\n        for (uint256 i = 0; i < total; i = i.add(1)) {\n            _verifyTransferSigner(\n                addrs[i.mul(2)],               // transfer from (also signder)\n                addrs[(i.mul(2)).add(1)],      // transfer to\n                nums[i.mul(4)],                // transfer amount\n                nums[(i.mul(4)).add(1)],       // transfer fee\n                nums[(i.mul(4)).add(2)],       // transfer timestamp\n                nums[(i.mul(4)).add(3)],       // signature param: v\n                rsSigParams[i.mul(2)],         // signature param: r\n                rsSigParams[(i.mul(2)).add(1)] // signature param: s\n            );\n\n            _transfer(\n                addrs[i.mul(2)],          // transfer from\n                addrs[(i.mul(2)).add(1)], // transfer to\n                nums[i.mul(4)],           // transfer amount\n                nums[(i.mul(4)).add(1)]   // transfer fee\n            );\n        }\n        emit BulkTransferred(msg.sender, total);\n    }\n\n    /**\n     * @dev Admin function: Transfer token in token bank\n     * @param from Token transfer from this address\n     * @param to Token transfer to this address\n     * @param amount Amount of token to transfer\n     * @param fee Transfer fee\n     */\n    function transfer(\n        address from,\n        address to,\n        uint256 amount,\n        uint256 fee\n    )\n        external\n        onlyOwner\n    {\n        _transfer(from, to, amount, fee);\n    }\n\n    /**\n     * @dev Transfer token in token bank\n     * @param from Token transfer from this address\n     * @param to Token transfer to this address\n     * @param amount Amount of token to transfer\n     * @param fee Transfer fee\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount,\n        uint256 fee\n    )\n        private\n    {\n        require(to != address(0));\n        uint256 total = amount.add(fee);\n        require(total <= deposited[from]);\n        deposited[from] = deposited[from].sub(total);\n        deposited[feeCollector] = deposited[feeCollector].add(fee);\n        deposited[to] = deposited[to].add(amount);\n        emit Transferred(from, to, amount, fee, deposited[from]);\n    }\n\n    /**\n     * @notice Verify transfer request signer\n     * @dev Request signer must be owner of deposit account\n     * @param from Token will transfer from this address\n     * @param to Token will transfer into this address\n     * @param amount Amount of token to transfer\n     * @param fee Transfer fee\n     * @param timestamp Transfer request timestamp\n     * @param v Signature parameter: v\n     * @param r Signature parameter: r\n     * @param s Signature parameter: s\n     */\n    function _verifyTransferSigner(\n        address from,\n        address to,\n        uint256 amount,\n        uint256 fee,\n        uint256 timestamp,\n        uint256 v,\n        bytes32 r,\n        bytes32 s\n    )\n        private\n        view\n    {\n        bytes32 hashed = keccak256(\n            abi.encodePacked(\n                \"\\x19Ethereum Signed Message:\\n32\", \n                keccak256(\n                    abi.encodePacked(\n                        address(this), \n                        from, \n                        to, \n                        amount,\n                        fee,\n                        timestamp\n                    )\n                )\n            )\n        );\n\n        require(\n            ecrecover(hashed, uint8(v), r, s) == from,\n            \"Failed to transfer due to request was not signed by singer.\"\n        );\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b506040516200215f3803806200215f833981018060405260208110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b820160208101848111156200006457600080fd5b81518560208202830111640100000000821117156200008257600080fd5b505060008054600160a060020a0319163317808255604051929550600160a060020a0316935091507f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3620000e33364010000000062000172810204565b620000f733640100000000620001c4810204565b8060008151811015156200010757fe5b602090810291909101015160038054600160a060020a031916600160a060020a039092169190911790558051819060019081106200014157fe5b602090810291909101015160058054600160a060020a031916600160a060020a0390921691909117905550620002a9565b6200018d60018264010000000062001de06200021682021704565b604051600160a060020a038216907f5eea62661ac9a33be3f9320ecd60878cd5e92025ffec0f2e9969d2448b497eda90600090a250565b620001df60028264010000000062001de06200021682021704565b604051600160a060020a038216907f1d9b23fc2a9694437cfc15213a0fa0d4035454b424550798c01928db9dc6049890600090a250565b600160a060020a03811615156200022c57600080fd5b62000241828264010000000062000271810204565b156200024c57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a03821615156200028957600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b611ea680620002b96000396000f3fe608060405260043610610116577c010000000000000000000000000000000000000000000000000000000060003504630411b252811461011b5780632f70d1ba146101665780633a8260dc146101ad5780633ff5aa02146102ce5780634039ad0d146103015780635a335c59146103345780635d428e081461040357806366ffd60914610436578063715018a61461044b5780638da5cb5b146104605780638f32d59b14610491578063a42dce80146104a6578063bc4727cc146104d9578063c415b95c146105fa578063cb13cddb1461060f578063d4d5d32a14610654578063ed27460914610669578063ee50c8e31461067e578063f2fde38b14610693578063fc8acba2146106c6578063ffaad6a5146106f9575b600080fd5b34801561012757600080fd5b506101646004803603608081101561013e57600080fd5b50600160a060020a03813581169160208101359091169060408101359060600135610732565b005b34801561017257600080fd5b506101996004803603602081101561018957600080fd5b5035600160a060020a0316610757565b604080519115158252519081900360200190f35b3480156101b957600080fd5b50610164600480360360608110156101d057600080fd5b8101906020810181356401000000008111156101eb57600080fd5b8201836020820111156101fd57600080fd5b8035906020019184602083028401116401000000008311171561021f57600080fd5b91939092909160208101903564010000000081111561023d57600080fd5b82018360208201111561024f57600080fd5b8035906020019184602083028401116401000000008311171561027157600080fd5b91939092909160208101903564010000000081111561028f57600080fd5b8201836020820111156102a157600080fd5b803590602001918460208302840111640100000000831117156102c357600080fd5b509092509050610770565b3480156102da57600080fd5b50610164600480360360208110156102f157600080fd5b5035600160a060020a0316610af2565b34801561030d57600080fd5b506101996004803603602081101561032457600080fd5b5035600160a060020a0316610b70565b34801561034057600080fd5b506101646004803603604081101561035757600080fd5b81019060208101813564010000000081111561037257600080fd5b82018360208201111561038457600080fd5b803590602001918460208302840111640100000000831117156103a657600080fd5b9193909290916020810190356401000000008111156103c457600080fd5b8201836020820111156103d657600080fd5b803590602001918460208302840111640100000000831117156103f857600080fd5b509092509050610b83565b34801561040f57600080fd5b506101646004803603602081101561042657600080fd5b5035600160a060020a0316610e1d565b34801561044257600080fd5b50610164610e3d565b34801561045757600080fd5b50610164610e48565b34801561046c57600080fd5b50610475610eb2565b60408051600160a060020a039092168252519081900360200190f35b34801561049d57600080fd5b50610199610ec1565b3480156104b257600080fd5b50610164600480360360208110156104c957600080fd5b5035600160a060020a0316610ed2565b3480156104e557600080fd5b50610164600480360360608110156104fc57600080fd5b81019060208101813564010000000081111561051757600080fd5b82018360208201111561052957600080fd5b8035906020019184602083028401116401000000008311171561054b57600080fd5b91939092909160208101903564010000000081111561056957600080fd5b82018360208201111561057b57600080fd5b8035906020019184602083028401116401000000008311171561059d57600080fd5b9193909290916020810190356401000000008111156105bb57600080fd5b8201836020820111156105cd57600080fd5b803590602001918460208302840111640100000000831117156105ef57600080fd5b509092509050610f50565b34801561060657600080fd5b506104756112c6565b34801561061b57600080fd5b506106426004803603602081101561063257600080fd5b5035600160a060020a03166112d5565b60408051918252519081900360200190f35b34801561066057600080fd5b506101646112e7565b34801561067557600080fd5b5061047561137d565b34801561068a57600080fd5b5061016461138c565b34801561069f57600080fd5b50610164600480360360208110156106b657600080fd5b5035600160a060020a0316611395565b3480156106d257600080fd5b50610164600480360360208110156106e957600080fd5b5035600160a060020a03166113b1565b34801561070557600080fd5b506101646004803603604081101561071c57600080fd5b50600160a060020a0381351690602001356113ce565b61073a610ec1565b151561074557600080fd5b61075184848484611489565b50505050565b600061076a60018363ffffffff6115e216565b92915050565b61077933610b70565b151561078457600080fd5b600061079786600463ffffffff61161916565b90506000811180156107b85750856107b682600463ffffffff61163d16565b145b80156107d35750836107d182600263ffffffff61163d16565b145b80156107ee5750816107ec82600263ffffffff61163d16565b145b151561086a576040805160e560020a62461bcd02815260206004820152603160248201527f4661696c656420746f2062756c6b207472616e736665722064756520746f206960448201527f6c6c6567616c20617267756d656e74732e000000000000000000000000000000606482015290519081900360840190fd5b60005b81811015610ab2576109e1868661088b84600263ffffffff61163d16565b81811061089457fe5b90506020020135600160a060020a031687876108cb60016108bf60028861163d90919063ffffffff16565b9063ffffffff61166f16565b8181106108d457fe5b90506020020135600160a060020a03168a8a6108fa60048761163d90919063ffffffff16565b81811061090357fe5b905060200201358b8b61092560016108bf60048a61163d90919063ffffffff16565b81811061092e57fe5b905060200201358c8c61095060026108bf60048b61163d90919063ffffffff16565b81811061095957fe5b905060200201358d8d61097b60036108bf60048c61163d90919063ffffffff16565b81811061098457fe5b905060200201358a8a6109a160028b61163d90919063ffffffff16565b8181106109aa57fe5b905060200201358b8b6109cc60016108bf60028e61163d90919063ffffffff16565b8181106109d557fe5b90506020020135611681565b610a9a86866109f784600263ffffffff61163d16565b818110610a0057fe5b90506020020135600160a060020a03168787610a2b60016108bf60028861163d90919063ffffffff16565b818110610a3457fe5b90506020020135600160a060020a03168a8a610a5a60048761163d90919063ffffffff16565b818110610a6357fe5b905060200201358b8b610a8560016108bf60048a61163d90919063ffffffff16565b818110610a8e57fe5b90506020020135611489565b610aab81600163ffffffff61166f16565b905061086d565b5060408051828152905133917f21c0e1e4ba1288a84b826d897f10dd4ce393ac8157605fc56eb11728fc082340919081900360200190a250505050505050565b610afa610ec1565b1515610b0557600080fd5b600354604051600160a060020a0380841692169033907fef11c2592c7012389af6c787444e1435f03f0daab63930dcd5829db75825e48890600090a46003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600061076a60028363ffffffff6115e216565b610b8c33610757565b1515610b9757600080fd5b828114610c14576040805160e560020a62461bcd02815260206004820152603060248201527f4661696c656420746f2062756c6b206465706f7369742064756520746f20696c60448201527f6c6567616c20617267756d656e74732e00000000000000000000000000000000606482015290519081900360840190fd5b6000805b82811015610dbd57610c45848483818110610c2f57fe5b905060200201358361166f90919063ffffffff16565b9150610cae848483818110610c5657fe5b90506020020135600460008989868181101515610c6f57fe5b90506020020135600160a060020a0316600160a060020a0316600160a060020a031681526020019081526020016000205461166f90919063ffffffff16565b60046000888885818110610cbe57fe5b60209081029290920135600160a060020a031683525081019190915260400160002055858582818110610ced57fe5b90506020020135600160a060020a0316600160a060020a031633600160a060020a03167ff5681f9d0db1b911ac18ee83d515a1cf1051853a9eae418316a2fdf7dea427c58686858181101515610d3f57fe5b90506020020135600460008b8b888181101515610d5857fe5b90506020020135600160a060020a0316600160a060020a0316600160a060020a0316815260200190815260200160002054604051808381526020018281526020019250505060405180910390a3610db681600163ffffffff61166f16565b9050610c18565b506040805182815260208101869052815133927ffab48c7b795d1ee6f4abba6c27ae92bc8644fe4759d2b2410682045f208a0553928290030190a2600354610e1690600160a060020a031633308463ffffffff61182916565b5050505050565b610e2633610b70565b1515610e3157600080fd5b610e3a816118d4565b50565b610e463361191c565b565b610e50610ec1565b1515610e5b57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031690565b600054600160a060020a0316331490565b610eda610ec1565b1515610ee557600080fd5b600554604051600160a060020a0380841692169033907ff5092bc06dfd1ec68c6716896b2981b5e18e7d14667d1841907b921e2f6b37d590600090a46005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b610f5933610b70565b1515610f6457600080fd5b6000610f7786600463ffffffff61161916565b9050600081118015610f98575085610f9682600463ffffffff61163d16565b145b8015610fb3575083610fb182600263ffffffff61163d16565b145b8015610fce575081610fcc82600263ffffffff61163d16565b145b151561104a576040805160e560020a62461bcd02815260206004820152603160248201527f4661696c656420746f2062756c6b2077697468647261772064756520746f206960448201527f6c6c6567616c20617267756d656e74732e000000000000000000000000000000606482015290519081900360840190fd5b60005b81811015611286576111b5868661106b84600263ffffffff61163d16565b81811061107457fe5b90506020020135600160a060020a0316878761109f60016108bf60028861163d90919063ffffffff16565b8181106110a857fe5b90506020020135600160a060020a03168a8a6110ce60048761163d90919063ffffffff16565b8181106110d757fe5b905060200201358b8b6110f960016108bf60048a61163d90919063ffffffff16565b81811061110257fe5b905060200201358c8c61112460026108bf60048b61163d90919063ffffffff16565b81811061112d57fe5b905060200201358d8d61114f60036108bf60048c61163d90919063ffffffff16565b81811061115857fe5b905060200201358a8a61117560028b61163d90919063ffffffff16565b81811061117e57fe5b905060200201358b8b6111a060016108bf60028e61163d90919063ffffffff16565b8181106111a957fe5b90506020020135611964565b61126e86866111cb84600263ffffffff61163d16565b8181106111d457fe5b90506020020135600160a060020a031687876111ff60016108bf60028861163d90919063ffffffff16565b81811061120857fe5b90506020020135600160a060020a03168a8a61122e60048761163d90919063ffffffff16565b81811061123757fe5b905060200201358b8b61125960016108bf60048a61163d90919063ffffffff16565b81811061126257fe5b90506020020135611b01565b61127f81600163ffffffff61166f16565b905061104d565b5060408051828152905133917f7b8d581c9da8cf4ba18d796262db3dd28a5883183eda2473d247ef6bf239550c919081900360200190a250505050505050565b600554600160a060020a031681565b60046020526000908152604090205481565b6112ef610ec1565b15156112fa57600080fd5b60058054600160a060020a0390811660009081526004602090815260408083208054939055935484518381529451929493169233927ff228de527fc1b9843baac03b9a04565473a263375950e63435d4138464386f46929181900390910190a3600554600354610e3a91600160a060020a0391821691168363ffffffff611c0616565b600354600160a060020a031681565b610e4633611cbe565b61139d610ec1565b15156113a857600080fd5b610e3a81611d06565b6113ba33610757565b15156113c557600080fd5b610e3a81611d83565b6113d733610757565b15156113e257600080fd5b600160a060020a03821660009081526004602052604090205461140b908263ffffffff61166f16565b600160a060020a0383166000818152600460209081526040918290208490558151858152908101939093528051919233927ff5681f9d0db1b911ac18ee83d515a1cf1051853a9eae418316a2fdf7dea427c5929181900390910190a360035461148590600160a060020a031633308463ffffffff61182916565b5050565b600160a060020a038316151561149e57600080fd5b60006114b0838363ffffffff61166f16565b600160a060020a0386166000908152600460205260409020549091508111156114d857600080fd5b600160a060020a038516600090815260046020526040902054611501908263ffffffff611dcb16565b600160a060020a038087166000908152600460205260408082209390935560055490911681522054611539908363ffffffff61166f16565b600554600160a060020a039081166000908152600460205260408082209390935590861681522054611571908463ffffffff61166f16565b600160a060020a03808616600081815260046020908152604080832095909555928916808252908490205484518881529384018790528385015292519092917f719f07acaada4d190eb2be1296b8da03dcd2ea312d0c8d1e16f58768a7a9aa12919081900360600190a35050505050565b6000600160a060020a03821615156115f957600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b600080821161162757600080fd5b6000828481151561163457fe5b04949350505050565b600082151561164e5750600061076a565b82820282848281151561165d57fe5b041461166857600080fd5b9392505050565b60008282018381101561166857600080fd5b604080516c01000000000000000000000000308102602080840191909152600160a060020a03808d168084026034860152908c169092026048840152605c83018a9052607c8301899052609c8084018990528451808503909101815260bc840185528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060dc85015260f8808501919091528451808503909101815261011884018086528151918301919091206000909152610138840180865281905260ff881661015885015261017884018790526101988401869052935191926001926101b88083019392601f198301929081900390910190855afa15801561178e573d6000803e3d6000fd5b50505060206040510351600160a060020a031614151561181e576040805160e560020a62461bcd02815260206004820152603b60248201527f4661696c656420746f207472616e736665722064756520746f2072657175657360448201527f7420776173206e6f74207369676e65642062792073696e6765722e0000000000606482015290519081900360840190fd5b505050505050505050565b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301528481166024830152604482018490529151918616916323b872dd916064808201926020929091908290030181600087803b15801561189d57600080fd5b505af11580156118b1573d6000803e3d6000fd5b505050506040513d60208110156118c757600080fd5b5051151561075157600080fd5b6118e560028263ffffffff611de016565b604051600160a060020a038216907f1d9b23fc2a9694437cfc15213a0fa0d4035454b424550798c01928db9dc6049890600090a250565b61192d60018263ffffffff611e2e16565b604051600160a060020a038216907fbc12c224e0d437ba41f0b1d746dea5cb82c6d3808b990d3780eacbd3adcad0eb90600090a250565b604080516c01000000000000000000000000308102602080840191909152600160a060020a03808d168084026034860152908c169092026048840152605c83018a9052607c8301899052609c8084018990528451808503909101815260bc840185528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060dc85015260f8808501919091528451808503909101815261011884018086528151918301919091206000909152610138840180865281905260ff881661015885015261017884018790526101988401869052935191926001926101b88083019392601f198301929081900390910190855afa158015611a71573d6000803e3d6000fd5b50505060206040510351600160a060020a031614151561181e576040805160e560020a62461bcd02815260206004820152603b60248201527f4661696c656420746f2077697468647261772064756520746f2072657175657360448201527f7420776173206e6f74207369676e65642062792073696e6765722e0000000000606482015290519081900360840190fd5b600554600160a060020a0316600090815260046020526040902054611b2c908263ffffffff61166f16565b600554600160a060020a0316600090815260046020526040812091909155611b5a838363ffffffff61166f16565b600160a060020a038616600090815260046020526040902054909150611b86908263ffffffff611dcb16565b600160a060020a03808716600081815260046020908152604091829020859055815188815290810187905280820194909452519187169290917f3cae9923fd3c2f468aa25a8ef687923e37f957459557c0380fd06526c0b8cdbc9181900360600190a3600354610e1690600160a060020a0316858563ffffffff611c0616565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015611c8257600080fd5b505af1158015611c96573d6000803e3d6000fd5b505050506040513d6020811015611cac57600080fd5b50511515611cb957600080fd5b505050565b611ccf60028263ffffffff611e2e16565b604051600160a060020a038216907f75db1c3d0ec52718796b33ea74926fde51d3cb248fea0e85e0230cdc2a0b904790600090a250565b600160a060020a0381161515611d1b57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b611d9460018263ffffffff611de016565b604051600160a060020a038216907f5eea62661ac9a33be3f9320ecd60878cd5e92025ffec0f2e9969d2448b497eda90600090a250565b600082821115611dda57600080fd5b50900390565b600160a060020a0381161515611df557600080fd5b611dff82826115e2565b15611e0957600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a0381161515611e4357600080fd5b611e4d82826115e2565b1515611e5857600080fd5b600160a060020a0316600090815260209190915260409020805460ff1916905556fea165627a7a72305820b7cc3d7f483616b611b4cbb224666404a66614b96d1673e7935114b2be8b0c560029000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000b54c811cd4fd4d27c2ff0061c3831427d89b73c00000000000000000000000092e1bc8ff6cb4178b2aa4517c62f1a9efe4f5614",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000b54c811cd4fd4d27c2ff0061c3831427d89b73c00000000000000000000000092e1bc8ff6cb4178b2aa4517c62f1a9efe4f5614"
}