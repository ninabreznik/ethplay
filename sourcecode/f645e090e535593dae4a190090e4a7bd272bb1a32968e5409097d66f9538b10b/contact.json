{
  "address": "0x0f602b35998185ec2b159036539d6acbc6069836",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SkyvToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-15\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b)  internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b)  internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b)  internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b)  internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    \n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    \n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n}\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) allowed;\n\n\n   \n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n\n        uint256 _allowance = allowed[_from][msg.sender];\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    \n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    \n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    \n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\ncontract SkyvToken is StandardToken {\n    string public name = \"Skyv Token\";\n    string public symbol = \"SKV\";\n    uint public decimals = 18;\n    uint public INIT_SUPPLY = 2100000000 * (10 ** decimals);\n\n    constructor() public {\n        totalSupply = INIT_SUPPLY;\n        balances[msg.sender] = INIT_SUPPLY;\n        emit Transfer(0x0, msg.sender, INIT_SUPPLY);\n    }\n    \n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n        require(_spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData));\n        return true;\n    }\n}",
  "bytecode": "60c0604052600a60808190527f536b797620546f6b656e0000000000000000000000000000000000000000000060a090815261003e91600391906100f9565b506040805180820190915260038082527f534b5600000000000000000000000000000000000000000000000000000000006020909201918252610083916004916100f9565b5060126005556b06c9144c1c690d4cb40000006006553480156100a557600080fd5b5060065460008181553380825260016020908152604080842085905580519485525191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3610194565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061013a57805160ff1916838001178555610167565b82800160010185558215610167579182015b8281111561016757825182559160200191906001019061014c565b50610173929150610177565b5090565b61019191905b80821115610173576000815560010161017d565b90565b6109ff806101a36000396000f3006080604052600436106100ab5763ffffffff60e060020a60003504166306fdde0381146100b0578063095ea7b31461013a57806318160ddd1461017257806323b872dd14610199578063313ce567146101c357806366188463146101d857806370a08231146101fc578063956cc8591461021d57806395d89b4114610232578063a9059cbb14610247578063cae9ca511461026b578063d73dd623146102d4578063dd62ed3e146102f8575b600080fd5b3480156100bc57600080fd5b506100c561031f565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100ff5781810151838201526020016100e7565b50505050905090810190601f16801561012c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014657600080fd5b5061015e600160a060020a03600435166024356103ad565b604080519115158252519081900360200190f35b34801561017e57600080fd5b50610187610401565b60408051918252519081900360200190f35b3480156101a557600080fd5b5061015e600160a060020a0360043581169060243516604435610407565b3480156101cf57600080fd5b50610187610529565b3480156101e457600080fd5b5061015e600160a060020a036004351660243561052f565b34801561020857600080fd5b50610187600160a060020a036004351661060d565b34801561022957600080fd5b50610187610628565b34801561023e57600080fd5b506100c561062e565b34801561025357600080fd5b5061015e600160a060020a0360043516602435610689565b34801561027757600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261015e948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506107509650505050505050565b3480156102e057600080fd5b5061015e600160a060020a03600435166024356108d9565b34801561030457600080fd5b50610187600160a060020a0360043581169060243516610960565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103a55780601f1061037a576101008083540402835291602001916103a5565b820191906000526020600020905b81548152906001019060200180831161038857829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390926000805160206109b4833981519152928290030190a350600192915050565b60005481565b600080600160a060020a038416151561041f57600080fd5b50600160a060020a0384166000818152600260209081526040808320338452825280832054938352600190915290205461045f908463ffffffff61098b16565b600160a060020a038087166000908152600160205260408082209390935590861681522054610494908463ffffffff61099d16565b600160a060020a0385166000908152600160205260409020556104bd818463ffffffff61098b16565b600160a060020a03808716600081815260026020908152604080832033845282529182902094909455805187815290519288169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3506001949350505050565b60055481565b336000908152600260209081526040808320600160a060020a03861684529091528120548083111561058457336000908152600260209081526040808320600160a060020a03881684529091528120556105b9565b610594818463ffffffff61098b16565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293926000805160206109b4833981519152929181900390910190a35060019392505050565b600160a060020a031660009081526001602052604090205490565b60065481565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103a55780601f1061037a576101008083540402835291602001916103a5565b6000600160a060020a03831615156106a057600080fd5b336000908152600160205260409020546106c0908363ffffffff61098b16565b3360009081526001602052604080822092909255600160a060020a038516815220546106f2908363ffffffff61099d16565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000818152600260209081526040808320600160a060020a038816808552908352818420879055815187815291519394909390926000805160206109b4833981519152928290030190a383600160a060020a031660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e019050604051809103902060e060020a9004338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a03168152602001828051906020019080838360005b8381101561087e578181015183820152602001610866565b50505050905090810190601f1680156108ab5780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000875af19250505015156108cf57600080fd5b5060019392505050565b336000908152600260209081526040808320600160a060020a038616845290915281205461090d908363ffffffff61099d16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191936000805160206109b4833981519152929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60008282111561099757fe5b50900390565b6000828201838110156109ac57fe5b939250505056008c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a165627a7a7230582049bd6db63115fb5f671275c2e5adb31fbc722bb65712634682cb95e4e08dfeb20029"
}