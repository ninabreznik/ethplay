{
  "address": "0x68acdb77078a40ae90b9aac4bda363c801afaf64",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SPO8",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-29\n*/\n\npragma solidity >=0.4.24;\n\n/**\n * @title -Security PO8 Token\n * SPO8 contract records the core attributes of SPO8 Token\n * \n * ███████╗██████╗  ██████╗  █████╗     ████████╗ ██████╗ ██╗  ██╗███████╗███╗   ██╗\n * ██╔════╝██╔══██╗██╔═══██╗██╔══██╗    ╚══██╔══╝██╔═══██╗██║ ██╔╝██╔════╝████╗  ██║\n * ███████╗██████╔╝██║   ██║╚█████╔╝       ██║   ██║   ██║█████╔╝ █████╗  ██╔██╗ ██║\n * ╚════██║██╔═══╝ ██║   ██║██╔══██╗       ██║   ██║   ██║██╔═██╗ ██╔══╝  ██║╚██╗██║\n * ███████║██║     ╚██████╔╝╚█████╔╝       ██║   ╚██████╔╝██║  ██╗███████╗██║ ╚████║\n * ╚══════╝╚═╝      ╚═════╝  ╚════╝        ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═╝  ╚═══╝\n * ---\n * POWERED BY\n *  __    ___   _     ___  _____  ___     _     ___\n * / /`  | |_) \\ \\_/ | |_)  | |  / / \\   | |\\ |  ) )\n * \\_\\_, |_| \\  |_|  |_|    |_|  \\_\\_/   |_| \\| _)_)\n * Company Info at https://po8.io\n * code at https://github.com/crypn3\n */\n\ncontract SPO8 {\n    using SafeMath for uint256;\n    \n    /* All props and event of Company */\n    // Company informations\n    string public companyName;\n    string public companyLicenseID;\n    string public companyTaxID;\n    string public companySecurityID;\n    string public companyURL;\n    address public CEO;\n    string public CEOName;\n    address public CFO;\n    string public CFOName;\n    address public BOD; // Board of directer\n    \n    event CEOTransferred(address indexed previousCEO, address indexed newCEO);\n    event CEOSuccession(string previousCEO, string newCEO);\n    event CFOTransferred(address indexed previousCFO, address indexed newCFO);\n    event CFOSuccession(string previousCFO, string newCFO);\n    event BODTransferred(address indexed previousBOD, address indexed newBOD);\n    \n    // Threshold\n    uint256 public threshold;\n    /* End Company */\n    \n    /* All props and event of user */\n    \n    address[] internal whiteListUser; // List of User\n    \n    // Struct of User Information\n    struct Infor{\n        string userName;\n        string phone;\n        string certificate;\n    }\n    \n    mapping(address => Infor) internal userInfor;\n    \n    mapping(address => uint256) internal userPurchasingTime; // The date when user purchases tokens from Sale contract.\n    \n    uint256 public transferLimitationTime = 31536000000; // 1 year\n    \n    event UserInforUpdated(address indexed user, string name, string phone, string certificate);\n    event NewUserAdded(address indexed newUser);\n    event UserRemoved(address indexed user);\n    event UserUnlocked(address indexed user);\n    event UserLocked(address indexed user);\n    event LimitationTimeSet(uint256 time);\n    event TokenUnlocked(uint256 time);\n    /* End user */\n    \n    /* Sale token Contracts address */\n    address[] internal saleContracts;\n    \n    event NewSaleContractAdded(address _saleContractAddress);\n    event SaleContractRemoved(address _saleContractAddress);\n    /* End Sale Contract */\n    \n    /* All props and event of SPO8 token */\n    // Token informations\n    string public name;\n    string public symbol;\n    uint256 internal _totalSupply;\n\n    mapping (address => uint256) internal balances;\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event BODBudgetApproval(address indexed owner, address indexed spender, uint256 value, address indexed to);\n    event AllowanceCanceled(address indexed from, address indexed to, uint256 value);\n    event Mint(address indexed from, address indexed to, uint256 totalMint);\n    /* End Token */\n    \n    // Boss's power\n    modifier onlyBoss() {\n        require(msg.sender == CEO || msg.sender == CFO);\n        _;\n    }\n    \n    // BOD's power\n    modifier onlyBOD {\n        require(msg.sender == BOD);\n        _;\n    }\n    \n    // Change CEO and CFO and BOD address or name\n    function changeCEO(address newCEO) public onlyBoss {\n        require(newCEO != address(0));\n        emit CEOTransferred(CEO, newCEO);\n        CEO = newCEO;\n    }\n    \n    function changeCEOName(string newName) public onlyBoss {\n        emit CEOSuccession(CEOName, newName);\n        CEOName = newName;\n    }\n    \n    function changeCFO(address newCFO) public onlyBoss {\n        require(newCFO != address(0));\n        emit CEOTransferred(CFO, newCFO);\n        CFO = newCFO;\n    }\n    \n    function changeCFOName(string newName) public onlyBoss {\n        emit CFOSuccession(CFOName, newName);\n        CFOName = newName;\n    }\n    \n    function changeBODAddress(address newBOD) public onlyBoss {\n        require(newBOD != address(0));\n        emit BODTransferred(BOD, newBOD);\n        BOD = newBOD;\n    }\n    \n    // Informations of special Transfer\n    /**\n     * @dev: TransferState is a state of special transation. (sender have balance more than 10% total supply) \n     * State: Fail - 0.\n     * State: Success - 1.\n     * State: Pending - 2 - default state.\n    */\n    enum TransactionState {\n        Fail,\n        Success,\n        Pending\n    }\n        \n    /**\n     * @dev Struct of one special transaction.\n     * from The sender of transaction.\n     * to The receiver of transaction.\n     * value Total tokens is sended.\n     * state State of transaction.\n     * date The date when transaction is made.\n    */\n    struct Transaction {\n        address from;\n        address to;\n        uint256 value;\n        TransactionState state;\n        uint256 date;\n        address bod;\n    }\n    \n     \n    Transaction[] internal specialTransactions; // An array where is used to save special transactions\n    \n    // Contract's constructor\n    constructor (uint256 totalSupply_,\n                address _CEO, \n                string _CEOName, \n                address _CFO, \n                string _CFOName,\n                address _BOD) public {\n        name = \"Security PO8 Token\";\n        symbol = \"SPO8\";\n        _totalSupply = totalSupply_;\n        companyName = \"PO8 Ltd\";\n        companyTaxID = \"IBC\";\n        companyLicenseID = \"No. 203231 B\";\n        companySecurityID = \"qKkFiGP4235d\";\n        companyURL = \"https://po8.io\";\n        CEO = _CEO;\n        CEOName = _CEOName; // Mathew Arnett\n        CFO = _CFO;\n        CFOName = _CFOName; // Raul Vasquez\n        BOD = _BOD;\n        threshold = (totalSupply_.mul(10)).div(100); // threshold = 10% of totalSupply\n        balances[CEO] = totalSupply_;\n    }\n    \n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n    \n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return balances[owner];\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param owner address The address which owns the funds.\n    * @param spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return allowed[owner][spender];\n    }\n    \n    /**\n     * @dev Mint more tokens\n     * @param _totalMint total token will be minted and transfer to CEO wallet.\n    */\n    function mint(uint256 _totalMint) external onlyBoss returns (bool) {\n        balances[CEO] += _totalMint;\n        _totalSupply += _totalMint;\n        threshold = (_totalSupply.mul(10)).div(100);\n        \n        emit Mint(address(0), CEO, _totalMint);\n        \n        return true;\n    }\n    \n    /**\n    * @dev Transfer token for a specified address (utilities function)\n    * @param _from address The address which you want to send tokens from\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function _transfer(address _from, address _to, uint256 _value) internal {\n        require(_to != address(0));\n        require(balances[_from] >= _value);\n        require(balances[_to].add(_value) > balances[_to]);\n        require(checkWhiteList(_from));\n        require(checkWhiteList(_to));\n        require(!checkLockedUser(_from));\n        \n        if(balances[_from] < threshold || msg.sender == CEO || msg.sender == CFO || msg.sender == BOD) {\n            uint256 previousBalances = balances[_from].add(balances[_to]);\n            balances[_from] = balances[_from].sub(_value);\n            balances[_to] = balances[_to].add(_value);\n            emit Transfer(_from, _to, _value);\n    \n            assert(balances[_from].add(balances[_to]) == previousBalances);\n        }\n        \n        else {\n            specialTransfer(_from, _to, _value); // waiting for acceptance from board of directer\n            emit Transfer(_from, _to, 0);\n        }\n    }\n    \n    /**\n    * @dev Transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        _transfer(msg.sender, _to, _value);\n\t\treturn true;\n    }\n    \n    /**\n    * @dev Special Transfer token for a specified address, but waiting for acceptance from BOD, and push transaction infor to specialTransactions array\n    * @param _from The address transfer from.\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function specialTransfer(address _from, address _to, uint256 _value) internal returns (bool) {\n        specialTransactions.push(Transaction({from: _from, to: _to, value: _value, state: TransactionState.Pending, date: now.mul(1000), bod: BOD}));\n        approveToBOD(_value, _to);\n        return true;\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        require(_spender != address(0));\n        require(_spender != BOD);\n\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    /**\n    * @dev The approval to BOD address who will transfer the funds from msg.sender to address _to.  \n    * @param _value The amount of tokens to be spent.\n    * @param _to The address which will receive the funds from msg.sender.\n    */\n    function approveToBOD(uint256 _value, address _to) internal returns (bool) {\n        if(allowed[msg.sender][BOD] > 0)\n            allowed[msg.sender][BOD] = (allowed[msg.sender][BOD].add(_value));\n        else\n            allowed[msg.sender][BOD] = _value;\n        emit BODBudgetApproval(msg.sender, BOD, _value, _to);\n        return true;\n    }\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_value <= allowed[_from][msg.sender]);     // Check allowance\n        require(msg.sender != BOD);\n        \n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n    \n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed_[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _addedValue The amount of tokens to increase the allowance by.\n    */\n    function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {\n        require(_spender != address(0));\n        require(_spender != BOD);\n\n        allowed[msg.sender][_spender] = (\n            allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed_[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n    */\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {\n        require(_spender != address(0));\n        require(_spender != BOD);\n\n        allowed[msg.sender][_spender] = (\n            allowed[msg.sender][_spender].sub(_subtractedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n    \n    /**\n     * @dev Cancel allowance of address from to BOD\n     * @param _from The address of whom approve tokens to BOD for spend.\n     * @param _value Total tokens are canceled.\n     */\n    function cancelAllowance(address _from, uint256 _value) internal onlyBOD {\n        require(_from != address(0));\n        \n        allowed[_from][BOD] = allowed[_from][BOD].sub(_value);\n        emit AllowanceCanceled(_from, BOD, _value);\n    }\n    \n    /**\n    * @dev Only CEO or CFO can add new users.\n    * @param _newUser The address which will add to whiteListUser array.\n    */\n    function addUser(address _newUser) external onlyBoss returns (bool) {\n        require (!checkWhiteList(_newUser));\n        whiteListUser.push(_newUser);\n        emit NewUserAdded(_newUser);\n        return true;\n    }\n    \n    /**\n    * @dev Only CEO or CFO can add new users.\n    * @param _newUsers The address array which will add to whiteListUser array.\n    */\n    function addUsers(address[] _newUsers) external onlyBoss returns (bool) {\n        for(uint i = 0; i < _newUsers.length; i++)\n        {\n            whiteListUser.push(_newUsers[i]);\n            emit NewUserAdded(_newUsers[i]);\n        }\n        return true;\n    }\n    \n    /**\n    * @dev Return total users in white list array.\n    */\n    function totalUsers() public view returns (uint256 users) {\n        return whiteListUser.length;\n    }\n    \n    /**\n    * @dev Checking the user address whether in WhiteList or not.\n    * @param _user The address which will be checked.\n    */\n    function checkWhiteList(address _user) public view returns (bool) {\n        uint256 length = whiteListUser.length;\n        for(uint i = 0; i < length; i++)\n            if(_user == whiteListUser[i])\n                return true;\n        \n        return false;\n    }\n    \n     /**\n    * @dev Delete the user address in WhiteList.\n    * @param _user The address which will be delete.\n    * After the function excuted, address in the end of list will be moved to postion of deleted user.\n    */\n    function deleteUser(address _user) external onlyBoss returns (bool) {\n        require(checkWhiteList(_user));\n        \n        uint256 i;\n        uint256 length = whiteListUser.length;\n        \n        for(i = 0; i < length; i++)\n        {\n            if (_user == whiteListUser[i])\n                break;\n        }\n        \n        whiteListUser[i] = whiteListUser[length - 1];\n        delete whiteListUser[length - 1];\n        whiteListUser.length--;\n        \n        emit UserRemoved(_user);\n        return true;\n    }\n    \n    /**\n    * @dev User or CEO or CFO can update user address informations.\n    * @param _user The address which will be checked.\n    * @param _name The new name\n    * @param _phone The new phone number\n    */\n    function updateUserInfor(address _user, string _name, string _phone, string _certificate) external onlyBoss returns (bool) {\n        require(checkWhiteList(_user));\n        \n        userInfor[_user].userName = _name;\n        userInfor[_user].phone = _phone;\n        userInfor[_user].certificate = _certificate;\n        emit UserInforUpdated(_user, _name, _phone, _certificate);\n        \n        return true;\n    }\n    \n    /**\n    * @dev User can get address informations.\n    * @param _user The address which will be checked.\n    */\n    function getUserInfor(address _user) public view returns (string, string) {\n        require(msg.sender == _user);\n        require(checkWhiteList(_user));\n        \n        Infor memory infor = userInfor[_user];\n        \n        return (infor.userName, infor.phone);\n    }\n    \n    /**\n    * @dev CEO and CFO can lock user address, prevent them from transfer token action. If users buy token from any sale contracts, user address also will be locked in 1 year.\n    * @param _user The address which will be locked.\n    */\n    function lockUser(address _user) external returns (bool) {\n        require(checkSaleContracts(msg.sender) || msg.sender == CEO || msg.sender == CFO);\n        \n        userPurchasingTime[_user] = now.mul(1000);\n        emit UserLocked(_user);\n        \n        return true;\n    }\n    \n    /**\n    * @dev CEO and CFO can unlock user address. That address can do transfer token action.\n    * @param _user The address which will be unlocked.\n    */\n    function unlockUser(address _user) external onlyBoss returns (bool) {\n        userPurchasingTime[_user] = 0;\n        emit UserUnlocked(_user);\n        \n        return true;\n    }\n    \n    /**\n    * @dev The function check the user address whether locked or not.\n    * @param _user The address which will be checked.\n    * if now sub User Purchasing Time < 1 year => Address is locked. In contrast, the address is unlocked.\n    * @return true The address is locked.\n    * @return false The address is unlock.\n    */\n    function checkLockedUser(address _user) public view returns (bool) {\n        if ((now.mul(1000)).sub(userPurchasingTime[_user]) < transferLimitationTime)\n            return true;\n        return false;\n    }\n    \n    /**\n    * @dev CEO or CFO can set transferLimitationTime.\n    * @param _time The new time will be set.\n    */\n    function setLimitationTime(uint256 _time) external onlyBoss returns (bool) {\n        transferLimitationTime = _time;\n        emit LimitationTimeSet(_time);\n        \n        return true;\n    }\n    \n    /**\n    * @dev CEO or CFO can unlock tokens.\n    * transferLimitationTime = 0;\n    */\n    function unlockToken() external onlyBoss returns (bool) {\n        transferLimitationTime = 0;\n        emit TokenUnlocked(now.mul(1000)); \n        return true;\n    }\n    \n    /**\n    * @dev Get special transaction informations\n    * @param _index The index of special transaction which user want to know about.\n    */\n    function getSpecialTxInfor(uint256 _index) public view returns (address from, \n                                                                            address to,\n                                                                            uint256 value, \n                                                                            TransactionState state, \n                                                                            uint256 date, \n                                                                            address bod) {\n        Transaction storage txInfor = specialTransactions[_index];\n        return (txInfor.from, txInfor.to, txInfor.value, txInfor.state, txInfor.date, txInfor.bod);\n    }\n    \n    /**\n    * @dev Get total special pending transaction\n    */\n    function getTotalPendingTxs() internal view returns (uint32) {\n        uint32 count;\n        TransactionState txState = TransactionState.Pending;\n        for(uint256 i = 0; i < specialTransactions.length; i++) {\n            if(specialTransactions[i].state == txState)\n                count++;\n        }\n        return count;\n    }\n    \n    /**\n     * @dev Get pending transation IDs from Special Transactions array\n     */\n    function getPendingTxIDs() public view returns (uint[]) {\n        uint32 totalPendingTxs = getTotalPendingTxs();\n        uint[] memory pendingTxIDs = new uint[](totalPendingTxs);\n        uint32 id = 0;\n        TransactionState txState = TransactionState.Pending;\n        for(uint256 i = 0; i < specialTransactions.length; i++) {\n            if(specialTransactions[i].state == txState) {\n                pendingTxIDs[id] = i;\n                id++;\n            }\n        }\n        return pendingTxIDs;\n    }\n    \n    /**\n     * @dev The function handle pending special transaction. Only BOD can use it.\n     * @param _index The id of pending transaction is in specialTransactions array.\n     * @param _decision The decision of BOD to handle pending Transaction (true or false).\n     * If true: transfer tokens from address txInfo.from to address txInfo.to and set state of that tx to Success.\n     * If false: cancel allowance from address txInfo.from to BOD and set state of that tx to Fail.\n     */\n    function handlePendingTx(uint256 _index, bool _decision) public onlyBOD returns (bool) {\n        Transaction storage txInfo = specialTransactions[_index];\n        require(txInfo.state == TransactionState.Pending);\n        require(txInfo.bod == BOD);\n        \n        if(_decision) {\n            require(txInfo.value <= allowed[txInfo.from][BOD]);\n            \n            allowed[txInfo.from][BOD] = allowed[txInfo.from][BOD].sub(txInfo.value);\n            _transfer(txInfo.from, txInfo.to, txInfo.value);\n            txInfo.state = TransactionState.Success;\n        }\n        else {\n            txInfo.state = TransactionState.Fail;\n            cancelAllowance(txInfo.from, txInfo.value);\n        }\n        return true;\n    }\n    \n    /**\n     * @dev The function check an address whether in saleContracts array or not.\n     * @param _saleContract The address will be checked.\n     */\n    function checkSaleContracts(address _saleContract) public view returns (bool) {\n        uint256 length = saleContracts.length;\n        for(uint i = 0; i < length; i++) {\n            if(saleContracts[i] == _saleContract)\n                return true;\n        }\n        return false;\n    }\n    \n    /**\n     * @dev The function adds new sale contract address to saleContracts array.\n     * @param _newSaleContract The address will be added.\n     */\n    function addNewSaleContract(address _newSaleContract) external onlyBoss returns (bool) {\n        require(!checkSaleContracts(_newSaleContract));\n        \n        saleContracts.push(_newSaleContract);\n        emit NewSaleContractAdded(_newSaleContract);\n        \n        return true;\n    }\n    \n    /**\n     * @dev The function remove sale contract address from saleContracts array.\n     * @param _saleContract The address will be removed.\n     */\n    function removeSaleContract(address _saleContract) external onlyBoss returns (bool) {\n        require(checkSaleContracts(_saleContract));\n        \n        uint256 length = saleContracts.length;\n        uint256 i;\n        for(i = 0; i < length; i++) {\n            if(saleContracts[i] == _saleContract)\n                break;\n        }\n        \n        saleContracts[i] = saleContracts[length - 1];\n        delete saleContracts[length - 1];\n        saleContracts.length--;\n        emit SaleContractRemoved(_saleContract);\n        \n        return true;\n    }\n    \n    // Contract does not accept Ether\n    function () public payable {\n        revert();\n    }\n}\n\n/**\n * @title SafeMath library\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n    \n        uint256 c = a * b;\n        require(c / a == b);\n    \n        return c;\n    }\n    \n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        require(a == b * c);\n    \n        return c;\n    }\n    \n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n    \n        return c;\n    }\n    \n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n    \n        return c;\n    }\n    \n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCEO\",\"type\":\"address\"}],\"name\":\"changeCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyLicenseID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CFO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_phone\",\"type\":\"string\"},{\"name\":\"_certificate\",\"type\":\"string\"}],\"name\":\"updateUserInfor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingTxIDs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUser\",\"type\":\"address\"}],\"name\":\"addUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkLockedUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"deleteUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBOD\",\"type\":\"address\"}],\"name\":\"changeBODAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_saleContract\",\"type\":\"address\"}],\"name\":\"removeSaleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUsers\",\"type\":\"address[]\"}],\"name\":\"addUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyURL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyTaxID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"changeCFOName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCFO\",\"type\":\"address\"}],\"name\":\"changeCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CFOName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_totalMint\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CEO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CEOName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setLimitationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getSpecialTxInfor\",\"outputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"bod\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unlockUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOD\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"name\":\"users\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_saleContract\",\"type\":\"address\"}],\"name\":\"checkSaleContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfor\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"changeCEOName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companySecurityID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"lockUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSaleContract\",\"type\":\"address\"}],\"name\":\"addNewSaleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferLimitationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_decision\",\"type\":\"bool\"}],\"name\":\"handlePendingTx\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"name\":\"_CEO\",\"type\":\"address\"},{\"name\":\"_CEOName\",\"type\":\"string\"},{\"name\":\"_CFO\",\"type\":\"address\"},{\"name\":\"_CFOName\",\"type\":\"string\"},{\"name\":\"_BOD\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousCEO\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newCEO\",\"type\":\"address\"}],\"name\":\"CEOTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousCEO\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newCEO\",\"type\":\"string\"}],\"name\":\"CEOSuccession\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousCFO\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newCFO\",\"type\":\"address\"}],\"name\":\"CFOTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousCFO\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newCFO\",\"type\":\"string\"}],\"name\":\"CFOSuccession\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousBOD\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newBOD\",\"type\":\"address\"}],\"name\":\"BODTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"phone\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"certificate\",\"type\":\"string\"}],\"name\":\"UserInforUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newUser\",\"type\":\"address\"}],\"name\":\"NewUserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UserUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UserLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LimitationTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_saleContractAddress\",\"type\":\"address\"}],\"name\":\"NewSaleContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_saleContractAddress\",\"type\":\"address\"}],\"name\":\"SaleContractRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"BODBudgetApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AllowanceCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalMint\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"}]",
  "bytecode": "6080604052640757b12c00600e553480156200001a57600080fd5b506040516200626b3803806200626b8339810180604052810190808051906020019092919080519060200190929190805182019291906020018051906020019092919080518201929190602001805190602001909291905050506040805190810160405280601281526020017f536563757269747920504f3820546f6b656e000000000000000000000000000081525060109080519060200190620000c1929190620004d0565b506040805190810160405280600481526020017f53504f3800000000000000000000000000000000000000000000000000000000815250601190805190602001906200010f929190620004d0565b50856012819055506040805190810160405280600781526020017f504f38204c7464000000000000000000000000000000000000000000000000008152506000908051906020019062000164929190620004d0565b506040805190810160405280600381526020017f494243000000000000000000000000000000000000000000000000000000000081525060029080519060200190620001b2929190620004d0565b506040805190810160405280600c81526020017f4e6f2e20323033323331204200000000000000000000000000000000000000008152506001908051906020019062000200929190620004d0565b506040805190810160405280600c81526020017f714b6b4669475034323335640000000000000000000000000000000000000000815250600390805190602001906200024e929190620004d0565b506040805190810160405280600e81526020017f68747470733a2f2f706f382e696f000000000000000000000000000000000000815250600490805190602001906200029c929190620004d0565b5084600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360069080519060200190620002f6929190620004d0565b5082600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816008908051906020019062000350929190620004d0565b5080600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620003d96064620003bc600a89620004516401000000000262004c3e179091906401000000009004565b620004936401000000000262005336179091906401000000009004565b600a819055508560136000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505050506200057f565b60008060008414156200046857600091506200048c565b82840290508284828115156200047a57fe5b041415156200048857600080fd5b8091505b5092915050565b600080600083111515620004a657600080fd5b8284811515620004b257fe5b04905080830284141515620004c657600080fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200051357805160ff191683800117855562000544565b8280016001018555821562000544579182015b828111156200054357825182559160200191906001019062000526565b5b50905062000553919062000557565b5090565b6200057c91905b80821115620005785760008160009055506001016200055e565b5090565b90565b615cdc806200058f6000396000f300608060405260043610610230576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610235578063095ea7b3146102c5578063109471641461032a57806318160ddd1461036d57806318a24b5b146103985780631c790e9c146103c757806323b872dd1461045757806330d500bf146104dc57806332d671651461053357806339509351146105d6578063400e6eb51461063b578063421b2d8b146106a757806342cde4e814610702578063509699ba1461072d5780635c60f226146107885780636369fa0a146107e35780636461ac6f14610826578063700c94741461088157806370a08231146108d4578063738497351461092b57806376ff023b146109bb578063862dff2d14610a4b5780639483b03f14610ab457806395d89b4114610af757806399130b8b14610b875780639cce37c614610c17578063a0712d6814610c72578063a108857114610cb7578063a457c2d714610d0e578063a9059cbb14610d73578063ae204be114610dd8578063ae93f96914610e68578063b3686d2314610ead578063bd1870a314610fa3578063bf1179ad14610ffe578063bff1f9e114611055578063c31b2d2714611080578063cc8076f7146110db578063d026370b14611203578063d351b7c21461126c578063d7972580146112fc578063dbfa963014611357578063dd62ed3e146113b2578063e7ccd0ec14611429578063f33c11ab14611454578063f5ec2eed146114a5575b600080fd5b34801561024157600080fd5b5061024a611535565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561028a57808201518184015260208101905061026f565b50505050905090810190601f1680156102b75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102d157600080fd5b50610310600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115d3565b604051808215151515815260200191505060405180910390f35b34801561033657600080fd5b5061036b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061175d565b005b34801561037957600080fd5b5061038261190d565b6040518082815260200191505060405180910390f35b3480156103a457600080fd5b506103ad611917565b604051808215151515815260200191505060405180910390f35b3480156103d357600080fd5b506103dc611a27565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561041c578082015181840152602081019050610401565b50505050905090810190601f1680156104495780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561046357600080fd5b506104c2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611ac5565b604051808215151515815260200191505060405180910390f35b3480156104e857600080fd5b506104f1611cd4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561053f57600080fd5b506105bc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390505050611cfa565b604051808215151515815260200191505060405180910390f35b3480156105e257600080fd5b50610621600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611f75565b604051808215151515815260200191505060405180910390f35b34801561064757600080fd5b50610650612209565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610693578082015181840152602081019050610678565b505050509050019250505060405180910390f35b3480156106b357600080fd5b506106e8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506122ff565b604051808215151515815260200191505060405180910390f35b34801561070e57600080fd5b5061071761247c565b6040518082815260200191505060405180910390f35b34801561073957600080fd5b5061076e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612482565b604051808215151515815260200191505060405180910390f35b34801561079457600080fd5b506107c9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612506565b604051808215151515815260200191505060405180910390f35b3480156107ef57600080fd5b50610824600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061279e565b005b34801561083257600080fd5b50610867600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061294e565b604051808215151515815260200191505060405180910390f35b34801561088d57600080fd5b506108ba600480360381019080803590602001908201803590602001919091929391929390505050612c06565b604051808215151515815260200191505060405180910390f35b3480156108e057600080fd5b50610915600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612de2565b6040518082815260200191505060405180910390f35b34801561093757600080fd5b50610940612e2b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610980578082015181840152602081019050610965565b50505050905090810190601f1680156109ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156109c757600080fd5b506109d0612ec9565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a105780820151818401526020810190506109f5565b50505050905090810190601f168015610a3d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610a5757600080fd5b50610ab2600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612f67565b005b348015610ac057600080fd5b50610af5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061315c565b005b348015610b0357600080fd5b50610b0c61330c565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b4c578082015181840152602081019050610b31565b50505050905090810190601f168015610b795780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610b9357600080fd5b50610b9c6133aa565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610bdc578082015181840152602081019050610bc1565b50505050905090810190601f168015610c095780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610c2357600080fd5b50610c58600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613448565b604051808215151515815260200191505060405180910390f35b348015610c7e57600080fd5b50610c9d600480360381019080803590602001909291905050506134f1565b604051808215151515815260200191505060405180910390f35b348015610cc357600080fd5b50610ccc6136e6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610d1a57600080fd5b50610d59600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061370c565b604051808215151515815260200191505060405180910390f35b348015610d7f57600080fd5b50610dbe600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506139a0565b604051808215151515815260200191505060405180910390f35b348015610de457600080fd5b50610ded6139b7565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e2d578082015181840152602081019050610e12565b50505050905090810190601f168015610e5a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610e7457600080fd5b50610e9360048036038101908080359060200190929190505050613a55565b604051808215151515815260200191505060405180910390f35b348015610eb957600080fd5b50610ed860048036038101908080359060200190929190505050613b52565b604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001846002811115610f5257fe5b60ff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001965050505050505060405180910390f35b348015610faf57600080fd5b50610fe4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613c1d565b604051808215151515815260200191505060405180910390f35b34801561100a57600080fd5b50611013613d64565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561106157600080fd5b5061106a613d8a565b6040518082815260200191505060405180910390f35b34801561108c57600080fd5b506110c1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613d97565b604051808215151515815260200191505060405180910390f35b3480156110e757600080fd5b5061111c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613e40565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015611160578082015181840152602081019050611145565b50505050905090810190601f16801561118d5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156111c65780820151818401526020810190506111ab565b50505050905090810190601f1680156111f35780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561120f57600080fd5b5061126a600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506140e6565b005b34801561127857600080fd5b506112816142db565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156112c15780820151818401526020810190506112a6565b50505050905090810190601f1680156112ee5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561130857600080fd5b5061133d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614379565b604051808215151515815260200191505060405180910390f35b34801561136357600080fd5b50611398600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506144e3565b604051808215151515815260200191505060405180910390f35b3480156113be57600080fd5b50611413600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614680565b6040518082815260200191505060405180910390f35b34801561143557600080fd5b5061143e614707565b6040518082815260200191505060405180910390f35b34801561146057600080fd5b5061148b6004803603810190808035906020019092919080351515906020019092919050505061470d565b604051808215151515815260200191505060405180910390f35b3480156114b157600080fd5b506114ba614ba0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156114fa5780820151818401526020810190506114df565b50505050905090810190601f1680156115275780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60108054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115cb5780601f106115a0576101008083540402835291602001916115cb565b820191906000526020600020905b8154815290600101906020018083116115ae57829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561161057600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561166d57600080fd5b81601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806118065750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561181157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561184d57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f9d05f170f1d545b1aa21c4a4f79f17ff737f5f020ea1b333d88f29f0bbfa9fc660405160405180910390a380600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000601254905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806119c25750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156119cd57600080fd5b6000600e819055507f7ff05c79c2a3d239576a86d8af5c623d17e7a676e424313ca21481b15047783f611a0b6103e842614c3e90919063ffffffff16565b6040518082815260200191505060405180910390a16001905090565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611abd5780601f10611a9257610100808354040283529160200191611abd565b820191906000526020600020905b815481529060010190602001808311611aa057829003601f168201915b505050505081565b6000601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611b5257600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515611baf57600080fd5b611c3e82601460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614c7c90919063ffffffff16565b601460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611cc9848484614c9d565b600190509392505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611da55750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611db057600080fd5b611db988613448565b1515611dc457600080fd5b8686600c60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000019190611e15929190615b3d565b508484600c60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019190611e67929190615b3d565b508282600c60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002019190611eb9929190615b3d565b508773ffffffffffffffffffffffffffffffffffffffff167f0318a300373b599e7793838c1531689db3a3e432078965e4c8f12781c7c5454f8888888888886040518080602001806020018060200184810384528a8a8281815260200192508082843782019150508481038352888882818152602001925080828437820191505084810382528686828181526020019250808284378201915050995050505050505050505060405180910390a260019050979650505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611fb257600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561200f57600080fd5b61209e82601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461528f90919063ffffffff16565b601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b606060006060600080600061221c6152b0565b94508463ffffffff166040519080825280602002602001820160405280156122535781602001602082028038833980820191505090505b5093506000925060029150600090505b6015805490508110156122f45781600281111561227c57fe5b60158281548110151561228b57fe5b906000526020600020906006020160030160009054906101000a900460ff1660028111156122b557fe5b14156122e75780848463ffffffff168151811015156122d057fe5b906020019060200201818152505082806001019350505b8080600101915050612263565b839550505050505090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806123aa5750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156123b557600080fd5b6123be82613448565b1515156123ca57600080fd5b600b8290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508173ffffffffffffffffffffffffffffffffffffffff167f57b45623eead159b4d5a18dcf9ce1c13cf721528a7e263621a542e698f7926eb60405160405180910390a260019050919050565b600a5481565b6000600e546124ed600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124df6103e842614c3e90919063ffffffff16565b614c7c90919063ffffffff16565b10156124fc5760019050612501565b600090505b919050565b6000806000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806125b45750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156125bf57600080fd5b6125c884613448565b15156125d357600080fd5b600b805490509050600091505b8082101561266757600b828154811015156125f757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561265a57612667565b81806001019250506125e0565b600b6001820381548110151561267957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600b838154811015156126b357fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600b6001820381548110151561270d57fe5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600b80548091906001900361274f9190615bbd565b508373ffffffffffffffffffffffffffffffffffffffff167fe9dce8c992623ce791725b21e857e33248d1f190a25b5168313420eebdaae99d60405160405180910390a2600192505050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806128475750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561285257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561288e57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8f9afb42c4e80bce8f6d30d86d656ebd2e0ff939ef043dc239257fa2d4a1a61e60405160405180910390a380600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806129fc5750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515612a0757600080fd5b612a1084613d97565b1515612a1b57600080fd5b600f805490509150600090505b81811015612aaf578373ffffffffffffffffffffffffffffffffffffffff16600f82815481101515612a5657fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612aa257612aaf565b8080600101915050612a28565b600f60018303815481101515612ac157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600f82815481101515612afb57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600f60018303815481101515612b5557fe5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600f805480919060019003612b979190615bbd565b507f468a5c1c3dc3776bdb891192ec62ae5f44481b97f06e665ff84e4f7f46b902cf84604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1600192505050919050565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612cb25750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515612cbd57600080fd5b600090505b83839050811015612dd757600b8484838181101515612cdd57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508383828181101515612d6b57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f57b45623eead159b4d5a18dcf9ce1c13cf721528a7e263621a542e698f7926eb60405160405180910390a28080600101915050612cc2565b600191505092915050565b6000601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612ec15780601f10612e9657610100808354040283529160200191612ec1565b820191906000526020600020905b815481529060010190602001808311612ea457829003601f168201915b505050505081565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612f5f5780601f10612f3457610100808354040283529160200191612f5f565b820191906000526020600020905b815481529060010190602001808311612f4257829003601f168201915b505050505081565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806130105750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561301b57600080fd5b7f32bbd4fd22717f89d688d171a7787d5cefe15da32f28a41b0f5cbc72b536480f6008826040518080602001806020018381038352858181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156130cc5780601f106130a1576101008083540402835291602001916130cc565b820191906000526020600020905b8154815290600101906020018083116130af57829003601f168201915b5050838103825284818151815260200191508051906020019080838360005b838110156131065780820151818401526020810190506130eb565b50505050905090810190601f1680156131335780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18060089080519060200190613158929190615be9565b5050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806132055750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561321057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561324c57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f9d05f170f1d545b1aa21c4a4f79f17ff737f5f020ea1b333d88f29f0bbfa9fc660405160405180910390a380600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60118054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156133a25780601f10613377576101008083540402835291602001916133a2565b820191906000526020600020905b81548152906001019060200180831161338557829003601f168201915b505050505081565b60088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156134405780601f1061341557610100808354040283529160200191613440565b820191906000526020600020905b81548152906001019060200180831161342357829003601f168201915b505050505081565b6000806000600b805490509150600090505b818110156134e557600b8181548110151561347157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156134d857600192506134ea565b808060010191505061345a565b600092505b5050919050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061359c5750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156135a757600080fd5b8160136000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508160126000828254019250508190555061364f6064613641600a601254614c3e90919063ffffffff16565b61533690919063ffffffff16565b600a81905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f8846040518082815260200191505060405180910390a360019050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561374957600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156137a657600080fd5b61383582601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614c7c90919063ffffffff16565b601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60006139ad338484614c9d565b6001905092915050565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613a4d5780601f10613a2257610100808354040283529160200191613a4d565b820191906000526020600020905b815481529060010190602001808311613a3057829003601f168201915b505050505081565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480613b005750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515613b0b57600080fd5b81600e819055507f954e9aa24965e0865f59fcdb2e1d427d7ac6acf3534959d10a971f7cf4fc7ab6826040518082815260200191505060405180910390a160019050919050565b6000806000806000806000601588815481101515613b6c57fe5b906000526020600020906006020190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600201548360030160009054906101000a900460ff1684600401548560050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169650965096509650965096505091939550919395565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480613cc85750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515613cd357600080fd5b6000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167ff7702fc899ce884b88b98fdb4da936a552943962c818893f3b446ee5596df39260405160405180910390a260019050919050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600b80549050905090565b6000806000600f805490509150600090505b81811015613e34578373ffffffffffffffffffffffffffffffffffffffff16600f82815481101515613dd757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613e275760019250613e39565b8080600101915050613da9565b600092505b5050919050565b606080613e4b615c69565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613e8557600080fd5b613e8e84613448565b1515613e9957600080fd5b600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060606040519081016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613f7d5780601f10613f5257610100808354040283529160200191613f7d565b820191906000526020600020905b815481529060010190602001808311613f6057829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561401f5780601f10613ff45761010080835404028352916020019161401f565b820191906000526020600020905b81548152906001019060200180831161400257829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156140c15780601f10614096576101008083540402835291602001916140c1565b820191906000526020600020905b8154815290600101906020018083116140a457829003601f168201915b5050505050815250509050806000015181602001518191508090509250925050915091565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061418f5750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561419a57600080fd5b7f8c0300a4686899cd69da4f263dad98bd460c39df0845ebcf6977ce2ace17a41a60068260405180806020018060200183810383528581815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561424b5780601f106142205761010080835404028352916020019161424b565b820191906000526020600020905b81548152906001019060200180831161422e57829003601f168201915b5050838103825284818151815260200191508051906020019080838360005b8381101561428557808201518184015260208101905061426a565b50505050905090810190601f1680156142b25780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a180600690805190602001906142d7929190615be9565b5050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156143715780601f1061434657610100808354040283529160200191614371565b820191906000526020600020905b81548152906001019060200180831161435457829003601f168201915b505050505081565b600061438433613d97565b806143dc5750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806144345750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561443f57600080fd5b6144546103e842614c3e90919063ffffffff16565b600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167fc365f2076d26c20bf7019fce7bfab33cc5b1892c9f7a7bd518f527b82eca104760405160405180910390a260019050919050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061458e5750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561459957600080fd5b6145a282613d97565b1515156145ae57600080fd5b600f8290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550507f9f70989af57e35589b1b590c8d2bbc9536dba57b6a06f038eeb6d7b9db8b398982604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a160019050919050565b6000601460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600e5481565b600080600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561476c57600080fd5b60158481548110151561477b57fe5b9060005260206000209060060201905060028081111561479757fe5b8160030160009054906101000a900460ff1660028111156147b457fe5b1415156147c057600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561484057600080fd5b8215614b3c57601460008260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600201541115151561491b57600080fd5b6149f48160020154601460008460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614c7c90919063ffffffff16565b601460008360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550614b118160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360020154614c9d565b60018160030160006101000a81548160ff02191690836002811115614b3257fe5b0217905550614b95565b60008160030160006101000a81548160ff02191690836002811115614b5d57fe5b0217905550614b948160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260020154615370565b5b600191505092915050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614c365780601f10614c0b57610100808354040283529160200191614c36565b820191906000526020600020905b815481529060010190602001808311614c1957829003601f168201915b505050505081565b6000806000841415614c535760009150614c75565b8284029050828482811515614c6457fe5b04141515614c7157600080fd5b8091505b5092915050565b600080838311151515614c8e57600080fd5b82840390508091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515614cda57600080fd5b81601360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515614d2857600080fd5b601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614dba83601360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461528f90919063ffffffff16565b111515614dc657600080fd5b614dcf84613448565b1515614dda57600080fd5b614de383613448565b1515614dee57600080fd5b614df784612482565b151515614e0357600080fd5b600a54601360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541080614e9f5750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80614ef75750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80614f4f5750600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1561521657614fe5601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461528f90919063ffffffff16565b905061503982601360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614c7c90919063ffffffff16565b601360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506150ce82601360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461528f90919063ffffffff16565b601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a380615208601360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461528f90919063ffffffff16565b14151561521157fe5b615289565b6152218484846155e6565b508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60006040518082815260200191505060405180910390a35b50505050565b60008082840190508381101515156152a657600080fd5b8091505092915050565b60008060008060029150600090505b60158054905081101561532d578160028111156152d857fe5b6015828154811015156152e757fe5b906000526020600020906006020160030160009054906101000a900460ff16600281111561531157fe5b14156153205782806001019350505b80806001019150506152bf565b82935050505090565b60008060008311151561534857600080fd5b828481151561535357fe5b0490508083028414151561536657600080fd5b8091505092915050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156153cc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561540857600080fd5b6154b981601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614c7c90919063ffffffff16565b601460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f6538ba7790f3dc24bf985bfcbbd58192566d234e81cc878ef1584b2f0c307298836040518082815260200191505060405180910390a35050565b6000601560c0604051908101604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200160028081111561564057fe5b815260200161565a6103e842614c3e90919063ffffffff16565b8152602001600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152509080600181540180825580915050906001820390600052602060002090600602016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548160ff0219169083600281111561578257fe5b02179055506080820151816004015560a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506157e582846157f1565b50600190509392505050565b600080601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156159f15761594a83601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461528f90919063ffffffff16565b601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550615a95565b82601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8173ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fa34ea2d29ea8f52f79389ac8e4c6130608df941e6821d442b5729885501a48cf866040518082815260200191505060405180910390a46001905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615b7e57803560ff1916838001178555615bac565b82800160010185558215615bac579182015b82811115615bab578235825591602001919060010190615b90565b5b509050615bb99190615c8b565b5090565b815481835581811115615be457818360005260206000209182019101615be39190615c8b565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615c2a57805160ff1916838001178555615c58565b82800160010185558215615c58579182015b82811115615c57578251825591602001919060010190615c3c565b5b509050615c659190615c8b565b5090565b6060604051908101604052806060815260200160608152602001606081525090565b615cad91905b80821115615ca9576000816000905550600101615c91565b5090565b905600a165627a7a7230582077179877aaece9105dca22ee4c322973e220d78dea0bc491a3ecae90ce0f1a6800290000000000000000000000000000000000000000000000000000000000989680000000000000000000000000c9b073c8fa75ad698627c240e168d0d8b6658b8c00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000002ea7cb2400e885492ed775af0ca109ff7931a2200000000000000000000000000000000000000000000000000000000000001000000000000000000000000002887246c08577556d6ee4c6444412b58a06c6c42000000000000000000000000000000000000000000000000000000000000000d4d61746865772041726e65747400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c5261756c205661737175657a0000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000989680000000000000000000000000c9b073c8fa75ad698627c240e168d0d8b6658b8c00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000002ea7cb2400e885492ed775af0ca109ff7931a2200000000000000000000000000000000000000000000000000000000000001000000000000000000000000002887246c08577556d6ee4c6444412b58a06c6c42000000000000000000000000000000000000000000000000000000000000000d4d61746865772041726e65747400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c5261756c205661737175657a0000000000000000000000000000000000000000"
}