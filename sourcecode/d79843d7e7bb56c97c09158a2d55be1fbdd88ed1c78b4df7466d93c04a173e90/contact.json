{
  "address": "0xbf799a2f71d020a4a8c10e7406e2bf970b3d734b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "W12.io Token",
  "contractName": "W12Token",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-20\n*/\n\npragma solidity 0.4.24;\n\ncontract ReentrancyGuard {\n    /**\n    * @dev We use a single lock for the whole contract.\n    */\n    bool private reentrancyLock = false;\n\n    /**\n    * @dev Prevents a contract from calling itself, directly or indirectly.\n    * @notice If you mark a function `nonReentrant`, you should also\n    * mark it `external`. Calling one nonReentrant function from\n    * another is not supported. Instead, you can implement a\n    * `private` function doing the actual work, and a `external`\n    * wrapper marked as `nonReentrant`.\n    */\n    modifier nonReentrant() {\n        require(!reentrancyLock);\n        reentrancyLock = true;\n        _;\n        reentrancyLock = false;\n    }\n}\n\nlibrary SafeERC20 {\n    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n        assert(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 value\n    )\n        internal\n    {\n        assert(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n        assert(token.approve(spender, value));\n    }\n}\n\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n    \n    mapping (address=>bool) private whiteList;\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused || whiteList[msg.sender]);\n\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused || whiteList[msg.sender]);\n\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n\n        emit Unpause();\n    }\n\n    function addToWhiteList(address[] _whiteList) external onlyOwner {\n        require(_whiteList.length > 0);\n\n        for(uint8 i = 0; i < _whiteList.length; i++) {\n            assert(_whiteList[i] != address(0));\n\n            whiteList[_whiteList[i]] = true;\n        }\n    }\n\n    function removeFromWhiteList(address[] _blackList) external onlyOwner {\n        require(_blackList.length > 0);\n\n        for(uint8 i = 0; i < _blackList.length; i++) {\n            assert(_blackList[i] != address(0));\n\n            whiteList[_blackList[i]] = true;\n        }\n    }\n}\n\ncontract W12TokenDistributor is Ownable {\n    W12Token public token;\n\n    mapping(uint32 => bool) public processedTransactions;\n\n    constructor() public {\n        token = new W12Token();\n    }\n\n    function isTransactionSuccessful(uint32 id) external view returns (bool) {\n        return processedTransactions[id];\n    }\n\n    modifier validateInput(uint32[] _payment_ids, address[] _receivers, uint256[] _amounts) {\n        require(_receivers.length == _amounts.length);\n        require(_receivers.length == _payment_ids.length);\n\n        _;\n    }\n\n    function transferTokenOwnership() external onlyOwner {\n        token.transferOwnership(owner);\n    }\n}\n\ncontract TokenTimelock {\n    using SafeERC20 for ERC20Basic;\n\n    // ERC20 basic token contract being held\n    ERC20Basic public token;\n\n    // beneficiary of tokens after they are released\n    address public beneficiary;\n\n    // timestamp when token release is enabled\n    uint256 public releaseTime;\n\n    constructor (ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n        // solium-disable-next-line security/no-block-members\n        require(_releaseTime > block.timestamp);\n        token = _token;\n        beneficiary = _beneficiary;\n        releaseTime = _releaseTime;\n    }\n\n    /**\n    * @notice Transfers tokens held by timelock to beneficiary.\n    */\n    function release() public {\n        // solium-disable-next-line security/no-block-members\n        require(block.timestamp >= releaseTime);\n\n        uint256 amount = token.balanceOf(this);\n        require(amount > 0);\n\n        token.safeTransfer(beneficiary, amount);\n    }\n}\n\ncontract W12Crowdsale is W12TokenDistributor, ReentrancyGuard {\n    uint public presaleStartDate = 1526817600;\n    uint public presaleEndDate = 1532088000;\n    uint public crowdsaleStartDate = 1532692800;\n    uint public crowdsaleEndDate = 1538049600;\n\n    uint public presaleTokenBalance = 20 * (10 ** 24);\n    uint public crowdsaleTokenBalance = 80 * (10 ** 24);\n\n    address public crowdsaleFundsWallet;\n\n    enum Stage { Inactive, FlashSale, Presale, Crowdsale }\n\n    event LockCreated(address indexed wallet, address timeLock1, address timeLock2, address timeLock3);\n\n    constructor(address _crowdsaleFundsWallet) public {\n        require(_crowdsaleFundsWallet != address(0));\n\n        // Wallet to hold collected Ether\n        crowdsaleFundsWallet = address(_crowdsaleFundsWallet);\n    }\n    \n    function setUpCrowdsale() external onlyOwner {\n        uint tokenDecimalsMultiplicator = 10 ** 18;\n\n        // Tokens to sell during the first two phases of ICO\n        token.mint(address(this), presaleTokenBalance + crowdsaleTokenBalance);\n        // Partners\n        token.mint(address(0xDbdCEa0B020D4769D7EA0aF47Df8848d478D67d1),  8 * (10 ** 6) * tokenDecimalsMultiplicator);\n        // Bounty and support of ecosystem\n        token.mint(address(0x1309Bb4DBBB6F8B3DE1822b4Cf22570d44f79cde),  8 * (10 ** 6) * tokenDecimalsMultiplicator);\n        // Airdrop\n        token.mint(address(0x0B2F4A122c34c4ccACf4EBecE15dE571d67b4D0a),  4 * (10 ** 6) * tokenDecimalsMultiplicator);\n        \n        address[] storage whiteList;\n\n        whiteList.push(address(this));\n        whiteList.push(address(0xDbdCEa0B020D4769D7EA0aF47Df8848d478D67d1));\n        whiteList.push(address(0x1309Bb4DBBB6F8B3DE1822b4Cf22570d44f79cde));\n        whiteList.push(address(0x0B2F4A122c34c4ccACf4EBecE15dE571d67b4D0a));\n        whiteList.push(address(0xd13B531160Cfe6CC2f9a5615524CA636A0A94D88));\n        whiteList.push(address(0x3BAF5A51E6212d311Bc567b60bE84Fc180d39805));\n\n        token.addToWhiteList(whiteList);\n    }\n\n    function lockSeedInvestors() external onlyOwner {\n        uint tokenDecimalsMultiplicator = 10 ** 18;\n\n        // Seed investors\n\n        address contributor1 = address(0xA0473967Bf75a9D6cA84A58975D26b6Fd3eecB32);\n        TokenTimelock t1c1 = new TokenTimelock(token, contributor1, 1541030400);\n        TokenTimelock t2c1 = new TokenTimelock(token, contributor1, 1572566400);\n        TokenTimelock t3c1 = new TokenTimelock(token, contributor1, 1604188800);\n\n        token.mint(t1c1, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\n        token.mint(t2c1, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\n        token.mint(t3c1, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\n\n        emit LockCreated(contributor1, t1c1, t2c1, t3c1);\n\n        address contributor2 = address(0x7ff9837FebAACbD1d1d91066F9DC5bbE1Bf1C023);\n        TokenTimelock t1c2 = new TokenTimelock(token, contributor2, 1541030400);\n        TokenTimelock t2c2 = new TokenTimelock(token, contributor2, 1572566400);\n        TokenTimelock t3c2 = new TokenTimelock(token, contributor2, 1604188800);\n\n        token.mint(t1c2, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\n        token.mint(t2c2, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\n        token.mint(t3c2, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\n\n        emit LockCreated(contributor2, t1c2, t2c2, t3c2);\n\n        address contributor3 = address(0xe4a7d4f7C358A56eA191Bb0aC3D8074327504Ac4);\n        TokenTimelock t1c3 = new TokenTimelock(token, contributor3, 1541030400);\n        TokenTimelock t2c3 = new TokenTimelock(token, contributor3, 1572566400);\n        TokenTimelock t3c3 = new TokenTimelock(token, contributor3, 1604188800);\n\n        token.mint(t1c3, 25 * (10 ** 5) * tokenDecimalsMultiplicator);\n        token.mint(t2c3, 25 * (10 ** 5) * tokenDecimalsMultiplicator);\n        token.mint(t3c3, 3 * (10 ** 6) * tokenDecimalsMultiplicator);\n\n        emit LockCreated(contributor2, t1c3, t2c3, t3c3);\n    }\n\n    function lockTeamAndReserve() external onlyOwner {\n        uint tokenDecimalsMultiplicator = 10 ** 18;\n\n        // Team lockup\n\n        address team = address(0x17abe2BA2Af3559A45C016F02EA5677017AA3362);\n        TokenTimelock t1c1 = new TokenTimelock(token, team, 1541030400);\n        TokenTimelock t2c1 = new TokenTimelock(token, team, 1572566400);\n        TokenTimelock t3c1 = new TokenTimelock(token, team, 1604188800);\n\n        token.mint(t1c1, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\n        token.mint(t2c1, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\n        token.mint(t3c1, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\n\n        emit LockCreated(team, t1c1, t2c1, t3c1);\n\n        // Reserve lockup\n\n        address reserve = address(0xE8bE756Ddd148dA0e2B440876A0Dc2FAC8BBE7A7);\n        TokenTimelock t1c2 = new TokenTimelock(token, reserve, 1541030400);\n        TokenTimelock t2c2 = new TokenTimelock(token, reserve, 1572566400);\n        TokenTimelock t3c2 = new TokenTimelock(token, reserve, 1604188800);\n\n        token.mint(t1c2, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\n        token.mint(t2c2, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\n        token.mint(t3c2, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\n\n        emit LockCreated(reserve, t1c2, t2c2, t3c2);\n    }\n\n    function () payable external {\n        Stage currentStage = getStage();\n\n        require(currentStage != Stage.Inactive);\n\n        uint currentRate = getCurrentRate();\n        uint tokensBought = msg.value * (10 ** 18) / currentRate;\n\n        token.transfer(msg.sender, tokensBought);\n        advanceStage(tokensBought, currentStage);\n    }\n\n    function getCurrentRate() public view returns (uint) {\n        uint currentSaleTime;\n        Stage currentStage = getStage();\n\n        if(currentStage == Stage.Presale) {\n            currentSaleTime = now - presaleStartDate;\n            uint presaleCoef = currentSaleTime * 100 / (presaleEndDate - presaleStartDate);\n            \n            return 262500000000000 + 35000000000000 * presaleCoef / 100;\n        }\n        \n        if(currentStage == Stage.Crowdsale) {\n            currentSaleTime = now - crowdsaleStartDate;\n            uint crowdsaleCoef = currentSaleTime * 100 / (crowdsaleEndDate - crowdsaleStartDate);\n\n            return 315000000000000 + 35000000000000 * crowdsaleCoef / 100;\n        }\n\n        if(currentStage == Stage.FlashSale) {\n            return 234500000000000;\n        }\n\n        revert();\n    }\n\n    function getStage() public view returns (Stage) {\n        if(now >= crowdsaleStartDate && now < crowdsaleEndDate) {\n            return Stage.Crowdsale;\n        }\n\n        if(now >= presaleStartDate) {\n            if(now < presaleStartDate + 1 days)\n                return Stage.FlashSale;\n\n            if(now < presaleEndDate)\n                return Stage.Presale;\n        }\n\n        return Stage.Inactive;\n    }\n\n    function bulkTransfer(uint32[] _payment_ids, address[] _receivers, uint256[] _amounts)\n        external onlyOwner validateInput(_payment_ids, _receivers, _amounts) {\n\n        bool success = false;\n\n        for (uint i = 0; i < _receivers.length; i++) {\n            if (!processedTransactions[_payment_ids[i]]) {\n                success = token.transfer(_receivers[i], _amounts[i]);\n                processedTransactions[_payment_ids[i]] = success;\n\n                if (!success)\n                    break;\n\n                advanceStage(_amounts[i], getStage());\n            }\n        }\n    }\n\n    function transferTokensToOwner() external onlyOwner {\n        token.transfer(owner, token.balanceOf(address(this)));\n    }\n\n    function advanceStage(uint tokensBought, Stage currentStage) internal {\n        if(currentStage == Stage.Presale || currentStage == Stage.FlashSale) {\n            if(tokensBought <= presaleTokenBalance)\n            {\n                presaleTokenBalance -= tokensBought;\n                return;\n            }\n        }\n        \n        if(currentStage == Stage.Crowdsale) {\n            if(tokensBought <= crowdsaleTokenBalance)\n            {\n                crowdsaleTokenBalance -= tokensBought;\n                return;\n            }\n        }\n\n        revert();\n    }\n\n    function withdrawFunds() external nonReentrant {\n        require(crowdsaleFundsWallet == msg.sender);\n\n        crowdsaleFundsWallet.transfer(address(this).balance);\n    }\n\n    function setPresaleStartDate(uint32 _presaleStartDate) external onlyOwner {\n        presaleStartDate = _presaleStartDate;\n    }\n\n    function setPresaleEndDate(uint32 _presaleEndDate) external onlyOwner {\n        presaleEndDate = _presaleEndDate;\n    }\n\n    function setCrowdsaleStartDate(uint32 _crowdsaleStartDate) external onlyOwner {\n        crowdsaleStartDate = _crowdsaleStartDate;\n    }\n\n    function setCrowdsaleEndDate(uint32 _crowdsaleEndDate) external onlyOwner {\n        crowdsaleEndDate = _crowdsaleEndDate;\n    }\n}\n\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n\n    mapping(address => uint256) balances;\n\n    uint256 totalSupply_;\n\n    /**\n    * @dev total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender] - _value;\n        balances[_to] = balances[_to] + _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from] - _value;\n        balances[_to] = balances[_to] + _value;\n        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    *\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    *\n    * approve should be called when allowed[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _addedValue The amount of tokens to increase the allowance by.\n    */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender] + _addedValue;\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n    }\n\n    /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    *\n    * approve should be called when allowed[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n    */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue >= oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue - _subtractedValue;\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n    }\n\n}\n\ncontract MintableToken is StandardToken, Ownable {\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n\n    modifier canMint() {\n        require(!mintingFinished);\n\n        _;\n    }\n\n    /**\n    * @dev Function to mint tokens\n    * @param _to The address that will receive the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n        totalSupply_ = totalSupply_ + _amount;\n        balances[_to] = balances[_to] + _amount;\n\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n\n        return true;\n    }\n\n    /**\n    * @dev Function to stop minting new tokens.\n    * @return True if the operation was successful.\n    */\n    function finishMinting() onlyOwner canMint public returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n\n        return true;\n    }\n}\n\ncontract DetailedERC20 is ERC20 {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    constructor (string _name, string _symbol, uint8 _decimals) public {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n}\n\ncontract PausableToken is StandardToken, Pausable {\n\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n}\n\ncontract CappedToken is MintableToken {\n\n    uint256 public cap;\n\n    constructor(uint256 _cap) public {\n        require(_cap > 0);\n\n        cap = _cap;\n    }\n\n    /**\n    * @dev Function to mint tokens\n    * @param _to The address that will receive the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n        require(totalSupply_ + _amount <= cap);\n\n        return super.mint(_to, _amount);\n    }\n}\n\ncontract BurnableToken is BasicToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n    * @dev Burns a specific amount of tokens.\n    * @param _value The amount of token to be burned.\n    */\n    function burn(uint256 _value) public {\n        _burn(msg.sender, _value);\n    }\n\n    function _burn(address _who, uint256 _value) internal {\n        require(_value <= balances[_who]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        balances[_who] = balances[_who] - _value;\n        totalSupply_ = totalSupply_ - _value;\n        emit Burn(_who, _value);\n        emit Transfer(_who, address(0), _value);\n    }\n}\n\ncontract StandardBurnableToken is BurnableToken, StandardToken {\n\n    /**\n    * @dev Burns a specific amount of tokens from the target address and decrements allowance\n    * @param _from address The address which you want to send tokens from\n    * @param _value uint256 The amount of token to be burned\n    */\n    function burnFrom(address _from, uint256 _value) public {\n        require(_value <= allowed[_from][msg.sender]);\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n        // this function needs to emit an event with the updated approval.\n        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\n        _burn(_from, _value);\n    }\n}\n\ncontract W12Token is StandardBurnableToken, CappedToken, DetailedERC20, PausableToken  {\n    constructor() CappedToken(400*(10**24)) DetailedERC20(\"W12 Token\", \"W12\", 18) public { }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whiteList\",\"type\":\"address[]\"}],\"name\":\"addToWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blackList\",\"type\":\"address[]\"}],\"name\":\"removeFromWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600360146101000a81548160ff0219169083151502179055506000600760016101000a81548160ff0219169083151502179055503480156200004757600080fd5b506040805190810160405280600981526020017f57313220546f6b656e00000000000000000000000000000000000000000000008152506040805190810160405280600381526020017f573132000000000000000000000000000000000000000000000000000000000081525060126b014adf4b7320334b9000000033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000811115156200011457600080fd5b806004819055505082600590805190602001906200013492919062000172565b5081600690805190602001906200014d92919062000172565b5080600760006101000a81548160ff021916908360ff16021790555050505062000221565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001b557805160ff1916838001178555620001e6565b82800160010185558215620001e6579182015b82811115620001e5578251825591602001919060010190620001c8565b5b509050620001f59190620001f9565b5090565b6200021e91905b808211156200021a57600081600090555060010162000200565b5090565b90565b61258880620002316000396000f30060806040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b1461014357806306fdde0314610172578063095ea7b31461020257806318160ddd1461026757806323b872dd14610292578063313ce56714610317578063355274ea146103485780633f4ba83a1461037357806340c10f191461038a57806342966c68146103ef5780635c975abb1461041c578063661884631461044b57806370a08231146104b0578063740d73f31461050757806379cc6790146105425780637d64bcb41461058f5780638456cb59146105be5780638da5cb5b146105d557806395d89b411461062c578063a9059cbb146106bc578063b11560c514610721578063d73dd6231461075c578063dd62ed3e146107c1578063f2fde38b14610838575b600080fd5b34801561014f57600080fd5b5061015861087b565b604051808215151515815260200191505060405180910390f35b34801561017e57600080fd5b5061018761088e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101c75780820151818401526020810190506101ac565b50505050905090810190601f1680156101f45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020e57600080fd5b5061024d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061092c565b604051808215151515815260200191505060405180910390f35b34801561027357600080fd5b5061027c6109b0565b6040518082815260200191505060405180910390f35b34801561029e57600080fd5b506102fd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109ba565b604051808215151515815260200191505060405180910390f35b34801561032357600080fd5b5061032c610a40565b604051808260ff1660ff16815260200191505060405180910390f35b34801561035457600080fd5b5061035d610a53565b6040518082815260200191505060405180910390f35b34801561037f57600080fd5b50610388610a59565b005b34801561039657600080fd5b506103d5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b6d565b604051808215151515815260200191505060405180910390f35b3480156103fb57600080fd5b5061041a60048036038101908080359060200190929190505050610c0e565b005b34801561042857600080fd5b50610431610c1b565b604051808215151515815260200191505060405180910390f35b34801561045757600080fd5b50610496600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c2e565b604051808215151515815260200191505060405180910390f35b3480156104bc57600080fd5b506104f1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cb2565b6040518082815260200191505060405180910390f35b34801561051357600080fd5b50610540600480360381019080803590602001908201803590602001919091929391929390505050610cfa565b005b34801561054e57600080fd5b5061058d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e7a565b005b34801561059b57600080fd5b506105a4611012565b604051808215151515815260200191505060405180910390f35b3480156105ca57600080fd5b506105d36110da565b005b3480156105e157600080fd5b506105ea6111ef565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561063857600080fd5b50610641611215565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610681578082015181840152602081019050610666565b50505050905090810190601f1680156106ae5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106c857600080fd5b50610707600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112b3565b604051808215151515815260200191505060405180910390f35b34801561072d57600080fd5b5061075a600480360381019080803590602001908201803590602001919091929391929390505050611337565b005b34801561076857600080fd5b506107a7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114b7565b604051808215151515815260200191505060405180910390f35b3480156107cd57600080fd5b50610822600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061153b565b6040518082815260200191505060405180910390f35b34801561084457600080fd5b50610879600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115c2565b005b600360149054906101000a900460ff1681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109245780601f106108f957610100808354040283529160200191610924565b820191906000526020600020905b81548152906001019060200180831161090757829003601f168201915b505050505081565b6000600760019054906101000a900460ff1615806109935750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b151561099e57600080fd5b6109a8838361171a565b905092915050565b6000600154905090565b6000600760019054906101000a900460ff161580610a215750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515610a2c57600080fd5b610a3784848461180c565b90509392505050565b600760009054906101000a900460ff1681565b60045481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ab557600080fd5b600760019054906101000a900460ff1680610b195750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515610b2457600080fd5b6000600760016101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bcb57600080fd5b600360149054906101000a900460ff16151515610be757600080fd5b600454826001540111151515610bfc57600080fd5b610c068383611b96565b905092915050565b610c183382611d5c565b50565b600760019054906101000a900460ff1681565b6000600760019054906101000a900460ff161580610c955750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515610ca057600080fd5b610caa8383611eef565b905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d5857600080fd5b600083839050111515610d6a57600080fd5b600090505b828290508160ff161015610e7557600073ffffffffffffffffffffffffffffffffffffffff1683838360ff168181101515610da657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610de357fe5b60016008600085858560ff168181101515610dfa57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050610d6f565b505050565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515610f0557600080fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061100e8282611d5c565b5050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561107057600080fd5b600360149054906101000a900460ff1615151561108c57600080fd5b6001600360146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561113657600080fd5b600760019054906101000a900460ff16158061119b5750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15156111a657600080fd5b6001600760016101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112ab5780601f10611280576101008083540402835291602001916112ab565b820191906000526020600020905b81548152906001019060200180831161128e57829003601f168201915b505050505081565b6000600760019054906101000a900460ff16158061131a5750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b151561132557600080fd5b61132f8383612171565b905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561139557600080fd5b6000838390501115156113a757600080fd5b600090505b828290508160ff1610156114b257600073ffffffffffffffffffffffffffffffffffffffff1683838360ff1681811015156113e357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561142057fe5b60016008600085858560ff16818110151561143757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806001019150506113ac565b505050565b6000600760019054906101000a900460ff16158061151e5750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b151561152957600080fd5b6115338383612370565b905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561161e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561165a57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561184957600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561189657600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561192157600080fd5b816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054016000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bf457600080fd5b600360149054906101000a900460ff16151515611c1057600080fd5b8160015401600181905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054016000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515611da957600080fd5b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054036000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600154036001819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083101515612001576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612085565b828103600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156121ae57600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156121fb57600080fd5b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054036000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054016000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a360019050929150505600a165627a7a72305820697589d1487c45d450972cdf1bd2042ce2365fa0293ebe76d186ec6c82cc54120029"
}