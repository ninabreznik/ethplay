{
  "address": "0x0fcdc5d43bd644aa1948e632a133f9debd53ff5b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HashedTimelock",
  "compilerVersion": "v0.5.3+commit.10d17f24",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-24\n*/\n\n//                                               __                __                                                            \n//                                              |  \\              |  \\                                                           \n//   _______  __   __   __   ______    ______  _| $$_     ______  | $$   __   ______   _______       ______    ______    ______  \n//  /       \\|  \\ |  \\ |  \\ |      \\  /      \\|   $$ \\   /      \\ | $$  /  \\ /      \\ |       \\     |      \\  /      \\  /      \\ \n// |  $$$$$$$| $$ | $$ | $$  \\$$$$$$\\|  $$$$$$\\\\$$$$$$  |  $$$$$$\\| $$_/  $$|  $$$$$$\\| $$$$$$$\\     \\$$$$$$\\|  $$$$$$\\|  $$$$$$\\\n//  \\$$    \\ | $$ | $$ | $$ /      $$| $$  | $$ | $$ __ | $$  | $$| $$   $$ | $$    $$| $$  | $$    /      $$| $$  | $$| $$  | $$\n//  _\\$$$$$$\\| $$_/ $$_/ $$|  $$$$$$$| $$__/ $$ | $$|  \\| $$__/ $$| $$$$$$\\ | $$$$$$$$| $$  | $$ __|  $$$$$$$| $$__/ $$| $$__/ $$\n// |       $$ \\$$   $$   $$ \\$$    $$| $$    $$  \\$$  $$ \\$$    $$| $$  \\$$\\ \\$$     \\| $$  | $$|  \\\\$$    $$| $$    $$| $$    $$\n//  \\$$$$$$$   \\$$$$$\\$$$$   \\$$$$$$$| $$$$$$$    \\$$$$   \\$$$$$$  \\$$   \\$$  \\$$$$$$$ \\$$   \\$$ \\$$ \\$$$$$$$| $$$$$$$ | $$$$$$$ \n//                                   | $$                                                                    | $$      | $$      \n//                                   | $$                                                                    | $$      | $$      \n//                                    \\$$                                                                     \\$$       \\$$      \n// https://swaptoken.app\npragma solidity ^0.5.2;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/HashedTimelock.sol\n\npragma solidity 0.5.3;\n\n\n\n/**\n * @title Hashed Timelock Contracts (HTLCs) on Ethereum ETH.\n *\n * This contract provides a way to create and keep HTLCs for ETH.\n *\n *\n * Protocol:\n *\n *  1) newContract(receiver, hashlock, timelock) - a sender calls this to create\n *      a new HTLC and gets back a 32 byte contract id\n *  2) withdraw(contractId, preimage) - once the receiver knows the preimage of\n *      the hashlock hash they can claim the ETH with this function\n *  3) refund() - after timelock has expired and if the receiver did not \n *      withdraw funds the sender / creater of the HTLC can get their ETH \n *      back with this function.\n */\ncontract HashedTimelock {\n\n    using SafeMath for uint256;\n\n    event LogHTLCNew(\n        bytes32 indexed contractId,\n        address indexed sender,\n        address indexed receiver,\n        uint amount,\n        uint timelock\n    );\n    event LogHTLCWithdraw(bytes32 indexed contractId, bytes32 preimage);\n    event LogHTLCRefund(bytes32 indexed contractId);\n\n    struct LockContract {\n        address payable sender;\n        address payable receiver;\n        uint amount;\n        uint timelock; // UNIX timestamp seconds - locked UNTIL this time\n        bool withdrawn;\n        bool refunded;\n        bytes32 preimage;\n    }\n\n    modifier fundsSent() {\n        require(msg.value > 0, \"msg.value must be > 0\");\n        _;\n    }\n    modifier futureTimelock(uint _time) {\n        // only requirement is the timelock time is after the last blocktime (now).\n        // probably want something a bit further in the future then this.\n        // but this is still a useful sanity check:\n        require(_time > now + 1 hours, \"timelock time must be in the future\");\n        _;\n    }\n    modifier contractExists(bytes32 _contractId) {\n        require(haveContract(_contractId), \"contractId does not exist\");\n        _;\n    }\n    modifier hashlockMatches(bytes32 _contractId, bytes32 _x) {\n        require(\n            _contractId == keccak256(abi.encodePacked(_x)),\n            \"hashlock hash does not match\"\n        );\n        _;\n    }\n    modifier withdrawable(bytes32 _contractId) {\n        require(contracts[_contractId].receiver == msg.sender, \"withdrawable: not receiver\");\n        require(contracts[_contractId].withdrawn == false, \"withdrawable: already withdrawn\");\n        _;\n    }\n    modifier refundable(bytes32 _contractId) {\n        require(contracts[_contractId].sender == msg.sender, \"refundable: not sender\");\n        require(contracts[_contractId].refunded == false, \"refundable: already refunded\");\n        require(contracts[_contractId].withdrawn == false, \"refundable: already withdrawn\");\n        require(contracts[_contractId].timelock <= now, \"refundable: timelock not yet passed\");\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"you are not an owner\");\n        _;\n    }\n\n    mapping (bytes32 => LockContract) contracts;\n    uint256 public feePercent; // 5 == 0.05 %\n    uint oneHundredPercent = 10000; // 100 %\n    address payable public owner;\n    uint feeToWithdraw;\n\n    constructor(address payable _owner, uint256 _feePercent) public {\n        feePercent = _feePercent;\n        owner = _owner;\n    }\n\n    function setFeePercent(uint256 _feePercent) external onlyOwner {\n        require(_feePercent < oneHundredPercent.div(2), \"should be less than 50%\");\n        feePercent = _feePercent;\n    }\n    /**\n     * @dev Sender sets up a new hash time lock contract depositing the ETH and \n     * providing the reciever lock terms.\n     *\n     * @param _receiver Receiver of the ETH.\n     * @param _hashlock A keccak256 hash hashlock.\n     * @param _timelock UNIX epoch seconds time that the lock expires at. \n     *                  Refunds can be made after this time.\n     */\n    function newContract(address payable _receiver, bytes32 _hashlock, uint _timelock)\n        external\n        payable\n        fundsSent\n        futureTimelock(_timelock)\n    {\n        uint256 swapValue = msg.value.mul(oneHundredPercent).div(oneHundredPercent.add(feePercent));\n        uint feeValue = msg.value.sub(swapValue);\n        feeToWithdraw = feeValue.add(feeToWithdraw);\n\n        // Reject if a contract already exists with the same parameters. The\n        // sender must change one of these parameters to create a new distinct \n        // contract.\n        if (haveContract(_hashlock)) {\n            revert(\"contract exist\");\n        }\n\n        contracts[_hashlock] = LockContract(\n            msg.sender,\n            _receiver,\n            swapValue,\n            _timelock,\n            false,\n            false,\n            0x0\n        );\n\n        emit LogHTLCNew(\n            _hashlock,\n            msg.sender,\n            _receiver,\n            swapValue,\n            _timelock\n        );\n    }\n\n    /**\n     * @dev Called by the receiver once they know the preimage of the hashlock.\n     * This will transfer the locked funds to their address.\n     *\n     * @param _contractId Id of the HTLC.\n     * @param _preimage keccak256(_preimage) should equal the contract hashlock.\n     * @return bool true on success\n     */\n    function withdraw(bytes32 _contractId, bytes32 _preimage)\n        external\n        contractExists(_contractId)\n        hashlockMatches(_contractId, _preimage)\n        withdrawable(_contractId)\n        returns (bool)\n    {\n        LockContract storage c = contracts[_contractId];\n        c.preimage = _preimage;\n        c.withdrawn = true;\n        c.receiver.transfer(c.amount);\n        emit LogHTLCWithdraw(_contractId, _preimage);\n        return true;\n    }\n\n    /**\n     * @dev Called by the sender if there was no withdraw AND the time lock has\n     * expired. This will refund the contract amount.\n     *\n     * @param _contractId Id of HTLC to refund from.\n     * @return bool true on success\n     */\n    function refund(bytes32 _contractId)\n        external\n        contractExists(_contractId)\n        refundable(_contractId)\n        returns (bool)\n    {\n        LockContract storage c = contracts[_contractId];\n        c.refunded = true;\n        c.sender.transfer(c.amount);\n        emit LogHTLCRefund(_contractId);\n        return true;\n    }\n\n    function claimTokens(address _token) external onlyOwner {\n        if (_token == address(0)) {\n            owner.transfer(feeToWithdraw);\n            return;\n        }\n        IERC20 erc20token = IERC20(_token);\n        uint256 balance = erc20token.balanceOf(address(this));\n        erc20token.transfer(owner, balance);\n    }\n\n    /**\n     * @dev Get contract details.\n     * @param _contractId HTLC contract id\n     * @return All parameters in struct LockContract for _contractId HTLC\n     */\n    function getContract(bytes32 _contractId)\n        public\n        view\n        returns (\n            address sender,\n            address receiver,\n            uint amount,\n            uint timelock,\n            bool withdrawn,\n            bool refunded,\n            bytes32 preimage\n        )\n    {\n        if (haveContract(_contractId) == false)\n            return (address(0), address(0), 0, 0, false, false, 0);\n        LockContract storage c = contracts[_contractId];\n        return (c.sender, c.receiver, c.amount, c.timelock,\n            c.withdrawn, c.refunded, c.preimage);\n    }\n\n    /**\n     * @dev Is there a contract with id _contractId.\n     * @param _contractId Id into contracts mapping.\n     */\n    function haveContract(bytes32 _contractId)\n        public\n        view\n        returns (bool exists)\n    {\n        exists = (contracts[_contractId].sender != address(0));\n    }\n\n}",
  "bytecode": "608060405261271060025534801561001657600080fd5b50604051604080610f4c8339810180604052604081101561003657600080fd5b50805160209091015160015560038054600160a060020a031916600160a060020a03909216919091179055610edc806100706000396000f3fe6080604052600436106100a3576000357c0100000000000000000000000000000000000000000000000000000000900480637ce3489b116100765780637ce3489b146101745780637fd6f15c1461019e5780638da5cb5b146101c5578063df8de3e7146101f6578063e16c7d9814610229576100a3565b8063335ef5bd146100a85780635c2d49b3146100dc578063636151491461011a5780637249fbb61461014a575b600080fd5b6100da600480360360608110156100be57600080fd5b50600160a060020a03813516906020810135906040013561029b565b005b3480156100e857600080fd5b50610106600480360360208110156100ff57600080fd5b503561057a565b604080519115158252519081900360200190f35b34801561012657600080fd5b506101066004803603604081101561013d57600080fd5b5080359060200135610597565b34801561015657600080fd5b506101066004803603602081101561016d57600080fd5b50356107fb565b34801561018057600080fd5b506100da6004803603602081101561019757600080fd5b5035610a8d565b3480156101aa57600080fd5b506101b3610b5d565b60408051918252519081900360200190f35b3480156101d157600080fd5b506101da610b63565b60408051600160a060020a039092168252519081900360200190f35b34801561020257600080fd5b506100da6004803603602081101561021957600080fd5b5035600160a060020a0316610b72565b34801561023557600080fd5b506102536004803603602081101561024c57600080fd5b5035610d5a565b60408051600160a060020a03988916815296909716602087015285870194909452606085019290925215156080840152151560a083015260c082015290519081900360e00190f35b600034116102f3576040805160e560020a62461bcd02815260206004820152601560248201527f6d73672e76616c7565206d757374206265203e20300000000000000000000000604482015290519081900360640190fd5b80610e10420181116103395760405160e560020a62461bcd028152600401808060200182810382526023815260200180610e6b6023913960400191505060405180910390fd5b6000610375610355600154600254610deb90919063ffffffff16565b60025461036990349063ffffffff610e0616565b9063ffffffff610e3116565b90506000610389348363ffffffff610e5516565b90506103a060045482610deb90919063ffffffff16565b6004556103ac8561057a565b15610401576040805160e560020a62461bcd02815260206004820152600e60248201527f636f6e7472616374206578697374000000000000000000000000000000000000604482015290519081900360640190fd5b60e06040519081016040528033600160a060020a0316815260200187600160a060020a03168152602001838152602001858152602001600015158152602001600015158152602001600060010281525060008087815260200190815260200160002060008201518160000160006101000a815481600160a060020a030219169083600160a060020a0316021790555060208201518160010160006101000a815481600160a060020a030219169083600160a060020a03160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548160ff02191690831515021790555060a08201518160040160016101000a81548160ff02191690831515021790555060c0820151816005015590505085600160a060020a031633600160a060020a0316867f48fd19eaec334cec3896d53ffd50824c1c09539f75bd6a09693f56d534baa5678588604051808381526020018281526020019250505060405180910390a4505050505050565b600090815260208190526040902054600160a060020a0316151590565b6000826105a38161057a565b15156105f9576040805160e560020a62461bcd02815260206004820152601960248201527f636f6e7472616374496420646f6573206e6f7420657869737400000000000000604482015290519081900360640190fd5b6040805160208082018690528251808303820181529183019092528051910120849084908214610673576040805160e560020a62461bcd02815260206004820152601c60248201527f686173686c6f636b206861736820646f6573206e6f74206d6174636800000000604482015290519081900360640190fd5b6000868152602081905260409020600101548690600160a060020a031633146106e6576040805160e560020a62461bcd02815260206004820152601a60248201527f776974686472617761626c653a206e6f74207265636569766572000000000000604482015290519081900360640190fd5b60008181526020819052604090206004015460ff1615610750576040805160e560020a62461bcd02815260206004820152601f60248201527f776974686472617761626c653a20616c72656164792077697468647261776e00604482015290519081900360640190fd5b6000878152602081905260408082206005810189905560048101805460ff19166001908117909155810154600282015492519193600160a060020a039091169280156108fc02929091818181858888f193505050501580156107b6573d6000803e3d6000fd5b5060408051888152905189917fee09f9188d5bb576cd8db4a9a84abb94a4e83139c07af55b2e81920752b8253a919081900360200190a2506001979650505050505050565b6000816108078161057a565b151561085d576040805160e560020a62461bcd02815260206004820152601960248201527f636f6e7472616374496420646f6573206e6f7420657869737400000000000000604482015290519081900360640190fd5b6000838152602081905260409020548390600160a060020a031633146108cd576040805160e560020a62461bcd02815260206004820152601660248201527f726566756e6461626c653a206e6f742073656e64657200000000000000000000604482015290519081900360640190fd5b600081815260208190526040902060040154610100900460ff161561093c576040805160e560020a62461bcd02815260206004820152601c60248201527f726566756e6461626c653a20616c726561647920726566756e64656400000000604482015290519081900360640190fd5b60008181526020819052604090206004015460ff16156109a6576040805160e560020a62461bcd02815260206004820152601d60248201527f726566756e6461626c653a20616c72656164792077697468647261776e000000604482015290519081900360640190fd5b6000818152602081905260409020600301544210156109f95760405160e560020a62461bcd028152600401808060200182810382526023815260200180610e8e6023913960400191505060405180910390fd5b60008481526020819052604080822060048101805461ff0019166101001790558054600282015492519193600160a060020a039091169280156108fc02929091818181858888f19350505050158015610a56573d6000803e3d6000fd5b5060405185907f989b3a845197c9aec15f8982bbb30b5da714050e662a7a287bb1a94c81e2e70e90600090a2506001949350505050565b600354600160a060020a03163314610aef576040805160e560020a62461bcd02815260206004820152601460248201527f796f7520617265206e6f7420616e206f776e6572000000000000000000000000604482015290519081900360640190fd5b60028054610b029163ffffffff610e3116565b8110610b58576040805160e560020a62461bcd02815260206004820152601760248201527f73686f756c64206265206c657373207468616e20353025000000000000000000604482015290519081900360640190fd5b600155565b60015481565b600354600160a060020a031681565b600354600160a060020a03163314610bd4576040805160e560020a62461bcd02815260206004820152601460248201527f796f7520617265206e6f7420616e206f776e6572000000000000000000000000604482015290519081900360640190fd5b600160a060020a0381161515610c2657600354600454604051600160a060020a039092169181156108fc0291906000818181858888f19350505050158015610c20573d6000803e3d6000fd5b50610d57565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290518291600091600160a060020a038416916370a08231916024808301926020929190829003018186803b158015610c8a57600080fd5b505afa158015610c9e573d6000803e3d6000fd5b505050506040513d6020811015610cb457600080fd5b5051600354604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810184905290519293509084169163a9059cbb916044808201926020929091908290030181600087803b158015610d2857600080fd5b505af1158015610d3c573d6000803e3d6000fd5b505050506040513d6020811015610d5257600080fd5b505050505b50565b6000806000806000806000610d6e8861057a565b1515610d8e57506000955085945084935083925082915081905080610de0565b505050600085815260208190526040902080546001820154600283015460038401546004850154600590950154600160a060020a0394851699509390921696509450925060ff80831692610100900416905b919395979092949650565b600082820183811015610dfd57600080fd5b90505b92915050565b6000821515610e1757506000610e00565b828202828482811515610e2657fe5b0414610dfd57600080fd5b6000808211610e3f57600080fd5b60008284811515610e4c57fe5b04949350505050565b600082821115610e6457600080fd5b5090039056fe74696d656c6f636b2074696d65206d75737420626520696e2074686520667574757265726566756e6461626c653a2074696d656c6f636b206e6f742079657420706173736564a165627a7a72305820d73c4edb6c8195479619d3d699680e0582b0a3e67790d8b440573821d85c98a100290000000000000000000000000039f22efb07a647557c7c5d17854cfd6d489ef3000000000000000000000000000000000000000000000000000000000000000a",
  "constructorArguments": "0000000000000000000000000039f22efb07a647557c7c5d17854cfd6d489ef3000000000000000000000000000000000000000000000000000000000000000a"
}