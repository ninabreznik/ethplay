{
  "address": "0x8f57f10c71093b624351efd82d88a19b63ec2403",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MultiBeneficiariesTokenTimelock",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-01\n*/\n\npragma solidity ^0.5.4;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n}\n\n/**\n * @title MultiBeneficiariesTokenTimelock\n * @dev MultiBeneficiariesTokenTimelock is a token holder contract that will allow a\n * beneficiaries to extract the tokens after a given release time\n */\ncontract MultiBeneficiariesTokenTimelock {\n    using SafeERC20 for IERC20;\n\n    // ERC20 basic token contract being held\n    IERC20 public token;\n\n    // beneficiary of tokens after they are released\n    address[] public beneficiaries;\n    \n    // token amounts of beneficiaries to be released\n    uint256[] public tokenValues;\n\n    // timestamp when token release is enabled\n    uint256 public releaseTime;\n    \n    //Whether tokens have been distributed\n    bool public distributed;\n\n    constructor(\n        IERC20 _token,\n        address[] memory _beneficiaries,\n        uint256[] memory _tokenValues,\n        uint256 _releaseTime\n    )\n    public\n    {\n        require(_releaseTime > block.timestamp);\n        releaseTime = _releaseTime;\n        require(_beneficiaries.length == _tokenValues.length);\n        beneficiaries = _beneficiaries;\n        tokenValues = _tokenValues;\n        token = _token;\n        distributed = false;\n    }\n\n    /**\n     * @notice Transfers tokens held by timelock to beneficiaries.\n     */\n    function release() public {\n        require(block.timestamp >= releaseTime);\n        require(!distributed);\n\n        for (uint256 i = 0; i < beneficiaries.length; i++) {\n            address beneficiary = beneficiaries[i];\n            uint256 amount = tokenValues[i];\n            require(amount > 0);\n            token.safeTransfer(beneficiary, amount);\n        }\n        \n        distributed = true;\n    }\n    \n    /**\n     * Returns the time remaining until release\n     */\n    function getTimeLeft() public view returns (uint256 timeLeft){\n        if (releaseTime > block.timestamp) {\n            return releaseTime - block.timestamp;\n        }\n        return 0;\n    }\n    \n    /**\n     * Reject ETH \n     */\n    function() external payable {\n        revert();\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405161083d38038061083d8339810180604052608081101561003357600080fd5b8101908080519060200190929190805164010000000081111561005557600080fd5b8281019050602081018481111561006b57600080fd5b815185602082028301116401000000008211171561008857600080fd5b505092919060200180516401000000008111156100a457600080fd5b828101905060208101848111156100ba57600080fd5b81518560208202830111640100000000821117156100d757600080fd5b50509291906020018051906020019092919050505042811115156100fa57600080fd5b806003819055508151835114151561011157600080fd5b82600190805190602001906101279291906101a3565b50816002908051906020019061013e92919061022d565b50836000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600460006101000a81548160ff021916908315150217905550505050506102e2565b82805482825590600052602060002090810192821561021c579160200282015b8281111561021b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906101c3565b5b509050610229919061027a565b5090565b828054828255906000526020600020908101928215610269579160200282015b8281111561026857825182559160200191906001019061024d565b5b50905061027691906102bd565b5090565b6102ba91905b808211156102b657600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101610280565b5090565b90565b6102df91905b808211156102db5760008160009055506001016102c3565b5090565b90565b61054c806102f16000396000f3fe60806040526004361061008d576000357c010000000000000000000000000000000000000000000000000000000090048063c7e284b81161006b578063c7e284b814610123578063efeb5e581461014e578063f84b903e146101c9578063fc0c546a146101f85761008d565b80636b225fe41461009257806386d1a69f146100e1578063b91d4001146100f8575b600080fd5b34801561009e57600080fd5b506100cb600480360360208110156100b557600080fd5b810190808035906020019092919050505061024f565b6040518082815260200191505060405180910390f35b3480156100ed57600080fd5b506100f6610272565b005b34801561010457600080fd5b5061010d610396565b6040518082815260200191505060405180910390f35b34801561012f57600080fd5b5061013861039c565b6040518082815260200191505060405180910390f35b34801561015a57600080fd5b506101876004803603602081101561017157600080fd5b81019080803590602001909291905050506103bc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101d557600080fd5b506101de6103fa565b604051808215151515815260200191505060405180910390f35b34801561020457600080fd5b5061020d61040d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60028181548110151561025e57fe5b906000526020600020016000915090505481565b600354421015151561028357600080fd5b600460009054906101000a900460ff1615151561029f57600080fd5b60008090505b6001805490508110156103785760006001828154811015156102c357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060028381548110151561030157fe5b9060005260206000200154905060008111151561031d57600080fd5b61036982826000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166104329092919063ffffffff16565b505080806001019150506102a5565b506001600460006101000a81548160ff021916908315150217905550565b60035481565b60004260035411156103b457426003540390506103b9565b600090505b90565b6001818154811015156103cb57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156104d557600080fd5b505af11580156104e9573d6000803e3d6000fd5b505050506040513d60208110156104ff57600080fd5b8101908080519060200190929190505050151561051b57600080fd5b50505056fea165627a7a72305820b227f1d2ef7786f347b9bb76268a8f51808816725eea7d68d0076d5830e8eb3e002900000000000000000000000006a6fc23e6ec8a2b2aeeefd70d772dc3d6b4501000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000005e5afb0000000000000000000000000000000000000000000000000000000000000000070000000000000000000000008820b8ae2ddc8bd4f577a9dfbf6da95932c99c7e00000000000000000000000092d12b7b970e709c3d07494108f29317c949ef3c00000000000000000000000060bda7f3aa3e4de3ca4de7384147d6b7eef6bb94000000000000000000000000ddd9fa0c91d7b64d4800285b76af19bf0ab117b5000000000000000000000000946737a488c2eb610329440e656499efa98831200000000000000000000000004f27bc3be1be4703c848ba33c4fce746ef91bcfb0000000000000000000000005a4a3edc96059785780870d6c4acf600fedd27cf0000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000063b897292cb8008180000000000000000000000000000000000000000000000063b897292cb8008180000000000000000000000000000000000000000000000063b897292cb8008180000000000000000000000000000000000000000000000063b897292cb8008180000000000000000000000000000000000000000000000063b897292cb8008180000000000000000000000000000000000000000000000063b897292cb8008180000000000000000000000000000000000000000000000031dc4b94965c0040c0000",
  "constructorArguments": "00000000000000000000000006a6fc23e6ec8a2b2aeeefd70d772dc3d6b4501000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000005e5afb0000000000000000000000000000000000000000000000000000000000000000070000000000000000000000008820b8ae2ddc8bd4f577a9dfbf6da95932c99c7e00000000000000000000000092d12b7b970e709c3d07494108f29317c949ef3c00000000000000000000000060bda7f3aa3e4de3ca4de7384147d6b7eef6bb94000000000000000000000000ddd9fa0c91d7b64d4800285b76af19bf0ab117b5000000000000000000000000946737a488c2eb610329440e656499efa98831200000000000000000000000004f27bc3be1be4703c848ba33c4fce746ef91bcfb0000000000000000000000005a4a3edc96059785780870d6c4acf600fedd27cf0000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000063b897292cb8008180000000000000000000000000000000000000000000000063b897292cb8008180000000000000000000000000000000000000000000000063b897292cb8008180000000000000000000000000000000000000000000000063b897292cb8008180000000000000000000000000000000000000000000000063b897292cb8008180000000000000000000000000000000000000000000000063b897292cb8008180000000000000000000000000000000000000000000000031dc4b94965c0040c0000"
}