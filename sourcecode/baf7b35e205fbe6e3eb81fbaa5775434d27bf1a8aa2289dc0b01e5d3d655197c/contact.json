{
  "address": "0xa40106134c5bf4c41411554e6db99b95a15ed9d8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Rock",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-13\n*/\n\npragma solidity ^0.4.20;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    uint256 totalSupply_;\n\n    /**\n    * @dev total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    event Pause();\n\n    event Unpause();\n\n    bool public paused = false;\n\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        Unpause();\n    }\n}\n\n\ncontract MintableToken is StandardToken, Ownable, Pausable {\n\n    event Mint(address indexed to, uint256 amount);\n\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n    uint256 public maxTokensToMint = 25000000 ether;\n\n    uint8 public currentRound = 1;\n\n    struct Round {\n    uint256 total;\n    bool finished;\n    bool active;\n    uint256 issuedTokens;\n    uint256 startMinimumTime;\n    }\n\n    Round[] rounds;\n\n    modifier canMint() {\n        require(!mintingFinished);\n        require(rounds[currentRound-1].active);\n        _;\n    }\n\n    /**\n    * @dev Function to mint tokens\n    * @param _to The address that will recieve the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mint(address _to, uint256 _amount) whenNotPaused onlyOwner returns (bool) {\n        require(mintInternal(_to, _amount));\n        return true;\n    }\n\n    /**\n    * @dev Function to stop minting new tokens.\n    * @return True if the operation was successful.\n    */\n    function finishMinting() whenNotPaused onlyOwner returns (bool) {\n        mintingFinished = true;\n        MintFinished();\n        return true;\n    }\n\n    function mintInternal(address _to, uint256 _amount) internal canMint returns (bool) {\n        require(rounds[currentRound-1].issuedTokens.add(_amount) <= rounds[currentRound-1].total);\n        require(totalSupply_.add(_amount) <= maxTokensToMint);\n        totalSupply_ = totalSupply_.add(_amount);\n        rounds[currentRound-1].issuedTokens = rounds[currentRound-1].issuedTokens.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Mint(_to, _amount);\n        Transfer(address(0), _to, _amount);\n        return true;\n    }\n}\n\n\ncontract Rock is MintableToken {\n\n    string public constant name = \"Rocket Token\";\n\n    string public constant symbol = \"ROCK\";\n\n    bool public transferEnabled = false;\n\n    uint8 public constant decimals = 18;\n\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 amount);\n\n    function Rock(){\n        Round memory roundone = Round({total : 4170000 ether, active: true, finished: false, issuedTokens : 0, startMinimumTime: 0});\n        Round memory roundtwo = Round({total : 6945000 ether, active: false, finished: false, issuedTokens : 0, startMinimumTime: 1534291200 });\n        Round memory roundthree = Round({total : 13885000 ether, active: false, finished: false, issuedTokens : 0, startMinimumTime: 0});\n        rounds.push(roundone);\n        rounds.push(roundtwo);\n        rounds.push(roundthree);\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint _value) whenNotPaused canTransfer returns (bool) {\n        require(_to != address(this));\n        return super.transfer(_to, _value);\n    }\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amout of tokens to be transfered\n    */\n    function transferFrom(address _from, address _to, uint _value) whenNotPaused canTransfer returns (bool) {\n        require(_to != address(this));\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) whenNotPaused returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the transfer is enabled.\n     */\n    modifier canTransfer() {\n        require(transferEnabled);\n        _;\n    }\n\n    /**\n    * @dev Function to start transfering tokens.\n    * @return True if the operation was successful.\n    */\n    function enableTransfer() onlyOwner returns (bool) {\n        transferEnabled = true;\n        return true;\n    }\n\n    /**\n    * @dev Function to stop current round.\n    * @return True if the operation was successful.\n    */\n    function finishRound() onlyOwner returns (bool) {\n        require(currentRound - 1 < 3);\n        require(rounds[currentRound-1].active);\n\n        uint256 tokensToBurn = rounds[currentRound-1].total.sub(rounds[currentRound-1].issuedTokens);\n\n        rounds[currentRound-1].active = false;\n        rounds[currentRound-1].finished = true;\n        maxTokensToMint = maxTokensToMint.sub(tokensToBurn);\n\n        return true;\n    }\n\n    /**\n    * @dev Function to start new round.\n    * @return True if the operation was successful.\n    */\n    function startRound() onlyOwner returns (bool) {\n        require(currentRound - 1 < 2);\n        require(rounds[currentRound-1].finished);\n        if(rounds[currentRound].startMinimumTime > 0){\n            require(block.timestamp >= rounds[currentRound].startMinimumTime);\n        }\n\n        currentRound ++;\n        rounds[currentRound-1].active = true;\n\n        return true;\n    }\n\n    function getCurrentRoundTotal() constant returns (uint256 total) {\n        return rounds[currentRound-1].total;\n    }\n\n    function getCurrentRoundIsFinished() constant returns (bool) {\n        return rounds[currentRound-1].finished;\n    }\n\n    function getCurrentRoundIsActive() constant returns (bool) {\n        return rounds[currentRound-1].active;\n    }\n\n    function getCurrentRoundMinimumTime() constant returns (uint256) {\n        return rounds[currentRound-1].startMinimumTime;\n    }\n\n    function getCurrentRoundIssued() constant returns (uint256 issued) {\n        return rounds[currentRound-1].issuedTokens;\n    }\n\n}",
  "bytecode": "60606040526000600360146101000a81548160ff0219169083151502179055506000600360156101000a81548160ff0219169083151502179055506a14adf4b7320334b90000006004556001600560006101000a81548160ff021916908360ff1602179055506000600760006101000a81548160ff02191690831515021790555034156200008c57600080fd5b6200009662000355565b620000a062000355565b620000aa62000355565b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0604051908101604052806a0373082728991c5a4000008152602001600015158152602001600115158152602001600081526020016000815250925060a0604051908101604052806a05bea9345344fc92a00000815260200160001515815260200160001515815260200160008152602001635b736d00815250915060a0604051908101604052806a0b7c435bb6251bcc2000008152602001600015158152602001600015158152602001600081526020016000815250905060068054806001018281620001bb919062000389565b916000526020600020906004020160008590919091506000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a81548160ff02191690831515021790555060608201518160020155608082015181600301555050506006805480600101828162000248919062000389565b916000526020600020906004020160008490919091506000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a81548160ff021916908315150217905550606082015181600201556080820151816003015550505060068054806001018281620002d5919062000389565b916000526020600020906004020160008390919091506000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a81548160ff021916908315150217905550606082015181600201556080820151816003015550505050505062000420565b60a0604051908101604052806000815260200160001515815260200160001515815260200160008152602001600081525090565b815481835581811511620003b957600402816004028360005260206000209182019101620003b89190620003be565b5b505050565b6200041d91905b8082111562000419576000808201600090556001820160006101000a81549060ff02191690556001820160016101000a81549060ff02191690556002820160009055600382016000905550600401620003c5565b5090565b90565b6124bf80620004306000396000f300606060405260043610610180576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b1461018557806306fdde03146101b2578063095ea7b31461024057806318160ddd1461029a57806323b872dd146102c3578063313ce5671461033c57806337d054341461036b5780633f4ba83a1461039457806340c10f19146103a95780634cd412d514610403578063547916ea1461043057806355e3f0861461045d5780635c975abb1461048a57806366188463146104b757806370a082311461051157806371b397cf1461055e5780637b6f5a4c1461058b5780637d64bcb4146105b45780638456cb59146105e15780638a19c8bc146105f65780638da5cb5b14610625578063908358481461067a57806395d89b41146106a3578063a9059cbb14610731578063ad381cb71461078b578063d73dd623146107b8578063dd62ed3e14610812578063f1b50c1d1461087e578063f2fde38b146108ab578063f669052a146108e4575b600080fd5b341561019057600080fd5b61019861090d565b604051808215151515815260200191505060405180910390f35b34156101bd57600080fd5b6101c5610920565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102055780820151818401526020810190506101ea565b50505050905090810190601f1680156102325780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561024b57600080fd5b610280600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610959565b604051808215151515815260200191505060405180910390f35b34156102a557600080fd5b6102ad610989565b6040518082815260200191505060405180910390f35b34156102ce57600080fd5b610322600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610993565b604051808215151515815260200191505060405180910390f35b341561034757600080fd5b61034f610a1b565b604051808260ff1660ff16815260200191505060405180910390f35b341561037657600080fd5b61037e610a20565b6040518082815260200191505060405180910390f35b341561039f57600080fd5b6103a7610a5d565b005b34156103b457600080fd5b6103e9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b1d565b604051808215151515815260200191505060405180910390f35b341561040e57600080fd5b610416610bb6565b604051808215151515815260200191505060405180910390f35b341561043b57600080fd5b610443610bc9565b604051808215151515815260200191505060405180910390f35b341561046857600080fd5b610470610dd8565b604051808215151515815260200191505060405180910390f35b341561049557600080fd5b61049d610fac565b604051808215151515815260200191505060405180910390f35b34156104c257600080fd5b6104f7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610fbf565b604051808215151515815260200191505060405180910390f35b341561051c57600080fd5b610548600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611250565b6040518082815260200191505060405180910390f35b341561056957600080fd5b610571611298565b604051808215151515815260200191505060405180910390f35b341561059657600080fd5b61059e6112e2565b6040518082815260200191505060405180910390f35b34156105bf57600080fd5b6105c761131f565b604051808215151515815260200191505060405180910390f35b34156105ec57600080fd5b6105f46113e7565b005b341561060157600080fd5b6106096114a8565b604051808260ff1660ff16815260200191505060405180910390f35b341561063057600080fd5b6106386114bb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561068557600080fd5b61068d6114e1565b6040518082815260200191505060405180910390f35b34156106ae57600080fd5b6106b661151e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106f65780820151818401526020810190506106db565b50505050905090810190601f1680156107235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561073c57600080fd5b610771600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611557565b604051808215151515815260200191505060405180910390f35b341561079657600080fd5b61079e6115dd565b604051808215151515815260200191505060405180910390f35b34156107c357600080fd5b6107f8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611627565b604051808215151515815260200191505060405180910390f35b341561081d57600080fd5b610868600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611823565b6040518082815260200191505060405180910390f35b341561088957600080fd5b6108916118aa565b604051808215151515815260200191505060405180910390f35b34156108b657600080fd5b6108e2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061192a565b005b34156108ef57600080fd5b6108f7611a82565b6040518082815260200191505060405180910390f35b600360159054906101000a900460ff1681565b6040805190810160405280600c81526020017f526f636b657420546f6b656e000000000000000000000000000000000000000081525081565b6000600360149054906101000a900460ff1615151561097757600080fd5b6109818383611a88565b905092915050565b6000600154905090565b6000600360149054906101000a900460ff161515156109b157600080fd5b600760009054906101000a900460ff1615156109cc57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610a0757600080fd5b610a12848484611b7a565b90509392505050565b601281565b600060066001600560009054906101000a900460ff160360ff16815481101515610a4657fe5b906000526020600020906004020160020154905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ab957600080fd5b600360149054906101000a900460ff161515610ad457600080fd5b6000600360146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b6000600360149054906101000a900460ff16151515610b3b57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b9757600080fd5b610ba18383611f34565b1515610bac57600080fd5b6001905092915050565b600760009054906101000a900460ff1681565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c2857600080fd5b60036001600560009054906101000a900460ff160360ff16101515610c4c57600080fd5b60066001600560009054906101000a900460ff160360ff16815481101515610c7057fe5b906000526020600020906004020160010160019054906101000a900460ff161515610c9a57600080fd5b610d1760066001600560009054906101000a900460ff160360ff16815481101515610cc157fe5b90600052602060002090600402016002015460066001600560009054906101000a900460ff160360ff16815481101515610cf757fe5b90600052602060002090600402016000015461223d90919063ffffffff16565b9050600060066001600560009054906101000a900460ff160360ff16815481101515610d3f57fe5b906000526020600020906004020160010160016101000a81548160ff021916908315150217905550600160066001600560009054906101000a900460ff160360ff16815481101515610d8d57fe5b906000526020600020906004020160010160006101000a81548160ff021916908315150217905550610dca8160045461223d90919063ffffffff16565b600481905550600191505090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e3657600080fd5b60026001600560009054906101000a900460ff160360ff16101515610e5a57600080fd5b60066001600560009054906101000a900460ff160360ff16815481101515610e7e57fe5b906000526020600020906004020160010160009054906101000a900460ff161515610ea857600080fd5b60006006600560009054906101000a900460ff1660ff16815481101515610ecb57fe5b9060005260206000209060040201600301541115610f25576006600560009054906101000a900460ff1660ff16815481101515610f0457fe5b9060005260206000209060040201600301544210151515610f2457600080fd5b5b6005600081819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff16021790555050600160066001600560009054906101000a900460ff160360ff16815481101515610f7d57fe5b906000526020600020906004020160010160016101000a81548160ff0219169083151502179055506001905090565b600360149054906101000a900460ff1681565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156110d0576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611164565b6110e3838261223d90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600060066001600560009054906101000a900460ff160360ff168154811015156112be57fe5b906000526020600020906004020160010160009054906101000a900460ff16905090565b600060066001600560009054906101000a900460ff160360ff1681548110151561130857fe5b906000526020600020906004020160030154905090565b6000600360149054906101000a900460ff1615151561133d57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561139957600080fd5b6001600360156101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561144357600080fd5b600360149054906101000a900460ff1615151561145f57600080fd5b6001600360146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600560009054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060066001600560009054906101000a900460ff160360ff1681548110151561150757fe5b906000526020600020906004020160000154905090565b6040805190810160405280600481526020017f524f434b0000000000000000000000000000000000000000000000000000000081525081565b6000600360149054906101000a900460ff1615151561157557600080fd5b600760009054906101000a900460ff16151561159057600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156115cb57600080fd5b6115d58383612256565b905092915050565b600060066001600560009054906101000a900460ff160360ff1681548110151561160357fe5b906000526020600020906004020160010160019054906101000a900460ff16905090565b60006116b882600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461247590919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561190857600080fd5b6001600760006101000a81548160ff0219169083151502179055506001905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561198657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156119c257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60045481565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611bb757600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611c0457600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611c8f57600080fd5b611ce0826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461223d90919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d73826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461247590919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e4482600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461223d90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000600360159054906101000a900460ff16151515611f5257600080fd5b60066001600560009054906101000a900460ff160360ff16815481101515611f7657fe5b906000526020600020906004020160010160019054906101000a900460ff161515611fa057600080fd5b60066001600560009054906101000a900460ff160360ff16815481101515611fc457fe5b90600052602060002090600402016000015461201e8360066001600560009054906101000a900460ff160360ff16815481101515611ffe57fe5b90600052602060002090600402016002015461247590919063ffffffff16565b1115151561202b57600080fd5b6004546120438360015461247590919063ffffffff16565b1115151561205057600080fd5b6120658260015461247590919063ffffffff16565b6001819055506120b38260066001600560009054906101000a900460ff160360ff1681548110151561209357fe5b90600052602060002090600402016002015461247590919063ffffffff16565b60066001600560009054906101000a900460ff160360ff168154811015156120d757fe5b90600052602060002090600402016002018190555061213d826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461247590919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600082821115151561224b57fe5b818303905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561229357600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156122e057600080fd5b612331826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461223d90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506123c4826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461247590919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600080828401905083811015151561248957fe5b80915050929150505600a165627a7a72305820c0f3ab2eba3666f0d8b84b43ae6524dc31dccb0cbec34c6b8fbd8d282d03ed650029"
}