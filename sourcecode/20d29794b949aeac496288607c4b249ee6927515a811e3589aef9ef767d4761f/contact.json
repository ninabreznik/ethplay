{
  "address": "0xbcb87a9a085369fa926aff5b67f668a790dec748",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Rydbergtoken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-01\n*/\n\npragma solidity ^0.4.18;\n \n/* \n  Â© Rydberg\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n \n/*\n   ERC20 interface\n  see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n \n/*  SafeMath - the lowest gas library\n  Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    \n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n \n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n \n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n \n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n  \n}\n \n/*\nBasic token\n Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n    \n  using SafeMath for uint256;\n \n  mapping(address => uint256) balances;\n \n function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n \n  /*\n  Gets the balance of the specified address.\n   param _owner The address to query the the balance of. \n   return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n \n}\n \n/* Implementation of the basic standard token.\n  https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is ERC20, BasicToken {\n \n  mapping (address => mapping (address => uint256)) allowed;\n \n  /*\n    Transfer tokens from one address to another\n    param _from address The address which you want to send tokens from\n    param _to address The address which you want to transfer to\n    param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n \n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n \n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n \n  /*\n  Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   param _spender The address which will spend the funds.\n   param _value The amount of Roman Lanskoj's tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n \n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n \n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n \n  /*\n  Function to check the amount of tokens that an owner allowed to a spender.\n  param _owner address The address which owns the funds.\n  param _spender address The address which will spend the funds.\n  return A uint256 specifing the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n}\n}\n \n/*\nThe Ownable contract has an owner address, and provides basic authorization control\n functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    \n  address public owner;\n \n \n  function Ownable() {\n    owner = 0x74aa529e3C2DC8b49c53bA2baDB49B50c64964eE;\n  }\n \n  /*\n  Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(0x74aa529e3C2DC8b49c53bA2baDB49B50c64964eE == owner);\n    _;\n  }\n \n  /*\n  Allows the current owner to transfer control of the contract to a newOwner.\n  param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    require(newOwner != address(0));      \n    owner = newOwner;\n  }\n}\n\n    \ncontract Rydbergtoken is StandardToken, Ownable {\n  string public constant name = \"Rydberg\";\n  string public constant symbol = \"RYD\";\n  uint public constant decimals = 11;\n  uint256 public initialSupply;\n    \n  function Rydbergtoken () { \n     totalSupply = 100000000 * 10 ** decimals;\n      balances[0x74aa529e3C2DC8b49c53bA2baDB49B50c64964eE] = totalSupply;\n      initialSupply = totalSupply; \n        Transfer(0, this, totalSupply);\n        Transfer(this, 0x74aa529e3C2DC8b49c53bA2baDB49B50c64964eE, totalSupply);\n  }\n function distribute55M(address[] addresses) onlyOwner {\n    // 6986.7886 * (10**11)\n    for (uint i = 0; i < addresses.length; i++) {\n      balances[owner] -= 698678861788617;\n      balances[addresses[i]] += 698678861788617;\n      Transfer(owner, addresses[i], 698678861788617);\n    }\n  }\n}",
  "bytecode": "6060604052341561000f57600080fd5b7374aa529e3c2dc8b49c53ba2badb49b50c64964ee600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600b600a0a6305f5e10002600081905550600054600160007374aa529e3c2dc8b49c53ba2badb49b50c64964ee73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000546004819055503073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000546040518082815260200191505060405180910390a37374aa529e3c2dc8b49c53ba2badb49b50c64964ee73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000546040518082815260200191505060405180910390a3610fe4806101b46000396000f3006060604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100ca578063095ea7b3146101585780631233f543146101b257806318160ddd1461020c57806323b872dd14610235578063313ce567146102ae578063378dc3dc146102d757806370a08231146103005780638da5cb5b1461034d57806395d89b41146103a2578063a9059cbb14610430578063dd62ed3e1461048a578063f2fde38b146104f6575b600080fd5b34156100d557600080fd5b6100dd61052f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561011d578082015181840152602081019050610102565b50505050905090810190601f16801561014a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016357600080fd5b610198600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610568565b604051808215151515815260200191505060405180910390f35b34156101bd57600080fd5b61020a6004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506106ef565b005b341561021757600080fd5b61021f610906565b6040518082815260200191505060405180910390f35b341561024057600080fd5b610294600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061090c565b604051808215151515815260200191505060405180910390f35b34156102b957600080fd5b6102c1610bbc565b6040518082815260200191505060405180910390f35b34156102e257600080fd5b6102ea610bc1565b6040518082815260200191505060405180910390f35b341561030b57600080fd5b610337600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610bc7565b6040518082815260200191505060405180910390f35b341561035857600080fd5b610360610c10565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103ad57600080fd5b6103b5610c36565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103f55780820151818401526020810190506103da565b50505050905090810190601f1680156104225780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561043b57600080fd5b610470600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c6f565b604051808215151515815260200191505060405180910390f35b341561049557600080fd5b6104e0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e0a565b6040518082815260200191505060405180910390f35b341561050157600080fd5b61052d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e91565b005b6040805190810160405280600781526020017f527964626572670000000000000000000000000000000000000000000000000081525081565b6000808214806105f457506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156105ff57600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167374aa529e3c2dc8b49c53ba2badb49b50c64964ee73ffffffffffffffffffffffffffffffffffffffff1614151561076157600080fd5b600090505b81518110156109025766027b71d95e75c960016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555066027b71d95e75c96001600084848151811015156107ff57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550818181518110151561085e57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef66027b71d95e75c96040518082815260200191505060405180910390a38080600101915050610766565b5050565b60005481565b600080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506109e083600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f8190919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a7583600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f9f90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610acb8382610f9f90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b600b81565b60045481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f525944000000000000000000000000000000000000000000000000000000000081525081565b6000610cc382600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f9f90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d5882600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f8190919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167374aa529e3c2dc8b49c53ba2badb49b50c64964ee73ffffffffffffffffffffffffffffffffffffffff16141515610f0157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610f3d57600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808284019050838110151515610f9557fe5b8091505092915050565b6000828211151515610fad57fe5b8183039050929150505600a165627a7a72305820b6354765d3dcbb2428479901b15c8dc541ab9f253376f0c4f81388ab439413780029"
}