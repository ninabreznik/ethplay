{
  "address": "0x766f28c22028b55b0bc6d7c56ad006a10403847b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BuckySalary",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-27\n*/\n\npragma solidity ^0.4.18;\n\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n\n\n\n\ncontract BuckySalary is Ownable {\n\n    address[] public staff;\n    mapping(address => uint) public eth;\n\n    \n    function BuckySalary() public {\n\n    }\n\n\n    function getTotal() internal view returns (uint) {\n        uint total = 0;\n        for (uint i = 0; i < staff.length; i++) {\n            total += eth[staff[i]];    \n        }\n\n        return total;\n    }\n\n    event Transfer(address a, uint v);\n\n    function () public payable {\n        uint total = getTotal();\n        require(msg.value >= total);\n\n        for (uint i = 0; i < staff.length; i++) {\n            \n            address s = staff[i];\n            uint value = eth[s];\n            if (value > 0) {\n                s.transfer(value);\n                Transfer(s, value);\n            }\n        }\n\n        if (msg.value > total) {\n            msg.sender.transfer(msg.value - total);\n        }\n    }\n\n\n    function setETH(address addr, uint value) public onlyOwner {\n        if (eth[addr] == 0) {\n            staff.push(addr);\n        }\n\n        eth[addr] = value;\n    }\n\n    function setMultiETH(address[] addr, uint[] value) public onlyOwner {\n        require(addr.length == value.length);\n        for (uint i = 0; i < addr.length; i++) {\n            setETH(addr[i], value[i]);\n        }\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a0319163317905561057c806100326000396000f3006080604052600436106100765763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662ed015b81146101a657806377312cdc146101cc5780638a021f1d1461025a5780638da5cb5b1461028e578063c61795b2146102a3578063f2fde38b146102d6575b6000806000806100846102f7565b93503484111561009357600080fd5b600092505b6001548310156101675760018054849081106100b057fe5b6000918252602080832090910154600160a060020a031680835260029091526040822054909350915081111561015c57604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610116573d6000803e3d6000fd5b5060408051600160a060020a03841681526020810183905281517f69ca02dd4edd7bf0a4abb9ed3b7af3f14778db5d61921c7dc7cd545266326de2929181900390910190a15b600190920191610098565b833411156101a05760405133903486900380156108fc02916000818181858888f1935050505015801561019e573d6000803e3d6000fd5b505b50505050005b3480156101b257600080fd5b506101ca600160a060020a0360043516602435610351565b005b3480156101d857600080fd5b50604080516020600480358082013583810280860185019096528085526101ca95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506103fb9650505050505050565b34801561026657600080fd5b50610272600435610473565b60408051600160a060020a039092168252519081900360200190f35b34801561029a57600080fd5b5061027261049b565b3480156102af57600080fd5b506102c4600160a060020a03600435166104aa565b60408051918252519081900360200190f35b3480156102e257600080fd5b506101ca600160a060020a03600435166104bc565b600080805b60015481101561034b576002600060018381548110151561031957fe5b6000918252602080832090910154600160a060020a0316835282019290925260400190205491909101906001016102fc565b50919050565b600054600160a060020a0316331461036857600080fd5b600160a060020a03821660009081526002602052604090205415156103df576001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384161790555b600160a060020a03909116600090815260026020526040902055565b60008054600160a060020a0316331461041357600080fd5b815183511461042157600080fd5b5060005b825181101561046e57610466838281518110151561043f57fe5b90602001906020020151838381518110151561045757fe5b90602001906020020151610351565b600101610425565b505050565b600180548290811061048157fe5b600091825260209091200154600160a060020a0316905081565b600054600160a060020a031681565b60026020526000908152604090205481565b600054600160a060020a031633146104d357600080fd5b600160a060020a03811615156104e857600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820721cc87bd612e41b1947c00d00153ccc59b8aa928c7458d45f15b436b025ff8f0029"
}