{
  "address": "0x16ccd65639a61fd80bb6517b6cff5906898aa001",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthicHubUser",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-20\n*/\n\npragma solidity ^0.4.13;\n\ncontract EthicHubStorageInterface {\n\n    //modifier for access in sets and deletes\n    modifier onlyEthicHubContracts() {_;}\n\n    // Setters\n    function setAddress(bytes32 _key, address _value) external;\n    function setUint(bytes32 _key, uint _value) external;\n    function setString(bytes32 _key, string _value) external;\n    function setBytes(bytes32 _key, bytes _value) external;\n    function setBool(bytes32 _key, bool _value) external;\n    function setInt(bytes32 _key, int _value) external;\n    // Deleters\n    function deleteAddress(bytes32 _key) external;\n    function deleteUint(bytes32 _key) external;\n    function deleteString(bytes32 _key) external;\n    function deleteBytes(bytes32 _key) external;\n    function deleteBool(bytes32 _key) external;\n    function deleteInt(bytes32 _key) external;\n\n    // Getters\n    function getAddress(bytes32 _key) external view returns (address);\n    function getUint(bytes32 _key) external view returns (uint);\n    function getString(bytes32 _key) external view returns (string);\n    function getBytes(bytes32 _key) external view returns (bytes);\n    function getBool(bytes32 _key) external view returns (bool);\n    function getInt(bytes32 _key) external view returns (int);\n}\n\ncontract EthicHubBase {\n\n    uint8 public version;\n\n    EthicHubStorageInterface public ethicHubStorage = EthicHubStorageInterface(0);\n\n    constructor(address _storageAddress) public {\n        require(_storageAddress != address(0));\n        ethicHubStorage = EthicHubStorageInterface(_storageAddress);\n    }\n\n}\n\ncontract EthicHubReputationInterface {\n    modifier onlyUsersContract(){_;}\n    modifier onlyLendingContract(){_;}\n    function burnReputation(uint delayDays)  external;\n    function incrementReputation(uint completedProjectsByTier)  external;\n    function initLocalNodeReputation(address localNode)  external;\n    function initCommunityReputation(address community)  external;\n    function getCommunityReputation(address target) public view returns(uint256);\n    function getLocalNodeReputation(address target) public view returns(uint256);\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\ncontract EthicHubUser is Ownable, EthicHubBase {\n\n\n    event UserStatusChanged(address target, string profile, bool isRegistered);\n\n    constructor(address _storageAddress)\n        EthicHubBase(_storageAddress)\n        public\n    {\n        // Version\n        version = 4;\n    }\n\n    /**\n     * @dev Changes registration status of an address for participation.\n     * @param target Address that will be registered/deregistered.\n     * @param profile profile of user.\n     * @param isRegistered New registration status of address.\n     */\n    function changeUserStatus(address target, string profile, bool isRegistered)\n        internal\n        onlyOwner\n    {\n        require(target != address(0));\n        require(bytes(profile).length != 0);\n        ethicHubStorage.setBool(keccak256(abi.encodePacked(\"user\", profile, target)), isRegistered);\n        emit UserStatusChanged(target, profile, isRegistered);\n    }\n\n\n    /**\n     * @dev delete an address for participation.\n     * @param target Address that will be deleted.\n     * @param profile profile of user.\n     */\n    function deleteUserStatus(address target, string profile)\n        internal\n        onlyOwner\n    {\n        require(target != address(0));\n        require(bytes(profile).length != 0);\n        ethicHubStorage.deleteBool(keccak256(abi.encodePacked(\"user\", profile, target)));\n        emit UserStatusChanged(target, profile, false);\n    }\n\n\n    /**\n     * @dev View registration status of an address for participation.\n     * @return isRegistered boolean registration status of address for a specific profile.\n     */\n    function viewRegistrationStatus(address target, string profile)\n        view public\n        returns(bool isRegistered)\n    {\n        require(target != address(0));\n        require(bytes(profile).length != 0);\n        isRegistered = ethicHubStorage.getBool(keccak256(abi.encodePacked(\"user\", profile, target)));\n    }\n\n    /**\n     * @dev register a localNode address.\n     */\n    function registerLocalNode(address target)\n        external\n        onlyOwner\n    {\n        require(target != address(0));\n        bool isRegistered = ethicHubStorage.getBool(keccak256(abi.encodePacked(\"user\", \"localNode\", target)));\n        if (!isRegistered) {\n            changeUserStatus(target, \"localNode\", true);\n            EthicHubReputationInterface rep = EthicHubReputationInterface (ethicHubStorage.getAddress(keccak256(abi.encodePacked(\"contract.name\", \"reputation\"))));\n            rep.initLocalNodeReputation(target);\n        }\n    }\n\n    /**\n     * @dev unregister a localNode address.\n     */\n    function unregisterLocalNode(address target)\n        external\n        onlyOwner\n    {\n        require(target != address(0));\n        bool isRegistered = ethicHubStorage.getBool(keccak256(abi.encodePacked(\"user\", \"localNode\", target)));\n        if (isRegistered) {\n            deleteUserStatus(target, \"localNode\");\n        }\n    }\n\n    /**\n     * @dev register a community address.\n     */\n    function registerCommunity(address target)\n        external\n        onlyOwner\n    {\n        require(target != address(0));\n        bool isRegistered = ethicHubStorage.getBool(keccak256(abi.encodePacked(\"user\", \"community\", target)));\n        if (!isRegistered) {\n            changeUserStatus(target, \"community\", true);\n            EthicHubReputationInterface rep = EthicHubReputationInterface(ethicHubStorage.getAddress(keccak256(abi.encodePacked(\"contract.name\", \"reputation\"))));\n            rep.initCommunityReputation(target);\n        }\n    }\n\n    /**\n     * @dev unregister a community address.\n     */\n    function unregisterCommunity(address target)\n        external\n        onlyOwner\n    {\n        require(target != address(0));\n        bool isRegistered = ethicHubStorage.getBool(keccak256(abi.encodePacked(\"user\", \"community\", target)));\n        if (isRegistered) {\n            deleteUserStatus(target, \"community\");\n        }\n    }\n\n\n\n    /**\n     * @dev register a invertor address.\n     */\n    function registerInvestor(address target)\n        external\n        onlyOwner\n    {\n        require(target != address(0));\n        changeUserStatus(target, \"investor\", true);\n    }\n\n    /**\n     * @dev unregister a investor address.\n     */\n    function unregisterInvestor(address target)\n        external\n        onlyOwner\n    {\n        require(target != address(0));\n        bool isRegistered = ethicHubStorage.getBool(keccak256(abi.encodePacked(\"user\", \"investor\", target)));\n        if (isRegistered) {\n            deleteUserStatus(target, \"investor\");\n        }\n    }\n\n    /**\n     * @dev register a community representative address.\n     */\n    function registerRepresentative(address target)\n        external\n        onlyOwner\n    {\n        require(target != address(0));\n        changeUserStatus(target, \"representative\", true);\n    }\n\n    /**\n     * @dev unregister a representative address.\n     */\n    function unregisterRepresentative(address target)\n        external\n        onlyOwner\n    {\n        require(target != address(0));\n        bool isRegistered = ethicHubStorage.getBool(keccak256(abi.encodePacked(\"user\", \"representative\", target)));\n        if (isRegistered) {\n            deleteUserStatus(target, \"representative\");\n        }\n    }\n\n    /**\n     * @dev register a paymentGateway address.\n     */\n    function registerPaymentGateway(address target)\n        external\n        onlyOwner\n    {\n        require(target != address(0));\n        changeUserStatus(target, \"paymentGateway\", true);\n    }\n\n    /**\n     * @dev unregister a paymentGateway address.\n     */\n    function unregisterPaymentGateway(address target)\n        external\n        onlyOwner\n    {\n        require(target != address(0));\n        bool isRegistered = ethicHubStorage.getBool(keccak256(abi.encodePacked(\"user\", \"paymentGateway\", target)));\n        if (isRegistered) {\n            deleteUserStatus(target, \"paymentGateway\");\n        }\n    }\n\n}",
  "bytecode": "60806040526000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005257600080fd5b50604051602080612da78339810180604052810190808051906020019092919050505080336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156100f257600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506004600060146101000a81548160ff021916908360ff16021790555050612c47806101606000396000f3006080604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630d2b34fe146100eb578063287a4f6b1461012e57806348392b961461017157806354fd4d50146101b457806367453969146101e5578063691c94841461023c57806369e6e8821461027f578063715018a6146103205780637f7e0d36146103375780638d4cce081461037a5780638da5cb5b146103bd578063917bd62b14610414578063a605809414610457578063b37d9c341461049a578063f2fde38b146104dd578063fce78a4314610520575b600080fd5b3480156100f757600080fd5b5061012c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610563565b005b34801561013a57600080fd5b5061016f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610828565b005b34801561017d57600080fd5b506101b2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610aed565b005b3480156101c057600080fd5b506101c9611009565b604051808260ff1660ff16815260200191505060405180910390f35b3480156101f157600080fd5b506101fa61101c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561024857600080fd5b5061027d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611042565b005b34801561028b57600080fd5b50610306600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061111d565b604051808215151515815260200191505060405180910390f35b34801561032c57600080fd5b50610335611380565b005b34801561034357600080fd5b50610378600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611482565b005b34801561038657600080fd5b506103bb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611747565b005b3480156103c957600080fd5b506103d2611a0c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561042057600080fd5b50610455600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a31565b005b34801561046357600080fd5b50610498600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f4d565b005b3480156104a657600080fd5b506104db600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612028565b005b3480156104e957600080fd5b5061051e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612103565b005b34801561052c57600080fd5b50610561600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061216a565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105c057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156105fc57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ae1cfca8360405160200180807f7573657200000000000000000000000000000000000000000000000000000000815250600401807f696e766573746f720000000000000000000000000000000000000000000000008152506008018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019150506040516020818303038152906040526040518082805190602001908083835b60208310151561071a57805182526020820191506020810190506020830392506106f5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156107a157600080fd5b505af11580156107b5573d6000803e3d6000fd5b505050506040513d60208110156107cb57600080fd5b81019080805190602001909291905050509050801561082457610823826040805190810160405280600881526020017f696e766573746f7200000000000000000000000000000000000000000000000081525061242f565b5b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561088557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156108c157600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ae1cfca8360405160200180807f7573657200000000000000000000000000000000000000000000000000000000815250600401807f6c6f63616c4e6f646500000000000000000000000000000000000000000000008152506009018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019150506040516020818303038152906040526040518082805190602001908083835b6020831015156109df57805182526020820191506020810190506020830392506109ba565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015610a6657600080fd5b505af1158015610a7a573d6000803e3d6000fd5b505050506040513d6020811015610a9057600080fd5b810190808051906020019092919050505090508015610ae957610ae8826040805190810160405280600981526020017f6c6f63616c4e6f6465000000000000000000000000000000000000000000000081525061242f565b5b5050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b4b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610b8757600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ae1cfca8460405160200180807f7573657200000000000000000000000000000000000000000000000000000000815250600401807f6c6f63616c4e6f646500000000000000000000000000000000000000000000008152506009018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019150506040516020818303038152906040526040518082805190602001908083835b602083101515610ca55780518252602082019150602081019050602083039250610c80565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015610d2c57600080fd5b505af1158015610d40573d6000803e3d6000fd5b505050506040513d6020811015610d5657600080fd5b8101908080519060200190929190505050915081151561100457610db1836040805190810160405280600981526020017f6c6f63616c4e6f6465000000000000000000000000000000000000000000000081525060016127a2565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200180807f636f6e74726163742e6e616d6500000000000000000000000000000000000000815250600d01807f72657075746174696f6e00000000000000000000000000000000000000000000815250600a0190506040516020818303038152906040526040518082805190602001908083835b602083101515610e8c5780518252602082019150602081019050602083039250610e67565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015610f1357600080fd5b505af1158015610f27573d6000803e3d6000fd5b505050506040513d6020811015610f3d57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff16633ccb4ae4846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015610feb57600080fd5b505af1158015610fff573d6000803e3d6000fd5b505050505b505050565b600060149054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561109d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156110d957600080fd5b61111a816040805190810160405280600881526020017f696e766573746f7200000000000000000000000000000000000000000000000081525060016127a2565b50565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561115a57600080fd5b600082511415151561116b57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ae1cfca838560405160200180807f757365720000000000000000000000000000000000000000000000000000000081525060040183805190602001908083835b60208310151561120b57805182526020820191506020810190506020830392506111e6565b6001836020036101000a0380198251168184511680821785525050505050509050018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401925050506040516020818303038152906040526040518082805190602001908083835b6020831015156112b65780518252602082019150602081019050602083039250611291565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561133d57600080fd5b505af1158015611351573d6000803e3d6000fd5b505050506040513d602081101561136757600080fd5b8101908080519060200190929190505050905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113db57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114df57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561151b57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ae1cfca8360405160200180807f7573657200000000000000000000000000000000000000000000000000000000815250600401807f636f6d6d756e69747900000000000000000000000000000000000000000000008152506009018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019150506040516020818303038152906040526040518082805190602001908083835b6020831015156116395780518252602082019150602081019050602083039250611614565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156116c057600080fd5b505af11580156116d4573d6000803e3d6000fd5b505050506040513d60208110156116ea57600080fd5b81019080805190602001909291905050509050801561174357611742826040805190810160405280600981526020017f636f6d6d756e697479000000000000000000000000000000000000000000000081525061242f565b5b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117a457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156117e057600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ae1cfca8360405160200180807f7573657200000000000000000000000000000000000000000000000000000000815250600401807f726570726573656e746174697665000000000000000000000000000000000000815250600e018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019150506040516020818303038152906040526040518082805190602001908083835b6020831015156118fe57805182526020820191506020810190506020830392506118d9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561198557600080fd5b505af1158015611999573d6000803e3d6000fd5b505050506040513d60208110156119af57600080fd5b810190808051906020019092919050505090508015611a0857611a07826040805190810160405280600e81526020017f726570726573656e74617469766500000000000000000000000000000000000081525061242f565b5b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a8f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611acb57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ae1cfca8460405160200180807f7573657200000000000000000000000000000000000000000000000000000000815250600401807f636f6d6d756e69747900000000000000000000000000000000000000000000008152506009018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019150506040516020818303038152906040526040518082805190602001908083835b602083101515611be95780518252602082019150602081019050602083039250611bc4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015611c7057600080fd5b505af1158015611c84573d6000803e3d6000fd5b505050506040513d6020811015611c9a57600080fd5b81019080805190602001909291905050509150811515611f4857611cf5836040805190810160405280600981526020017f636f6d6d756e697479000000000000000000000000000000000000000000000081525060016127a2565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200180807f636f6e74726163742e6e616d6500000000000000000000000000000000000000815250600d01807f72657075746174696f6e00000000000000000000000000000000000000000000815250600a0190506040516020818303038152906040526040518082805190602001908083835b602083101515611dd05780518252602082019150602081019050602083039250611dab565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015611e5757600080fd5b505af1158015611e6b573d6000803e3d6000fd5b505050506040513d6020811015611e8157600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff166332d8a3bd846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611f2f57600080fd5b505af1158015611f43573d6000803e3d6000fd5b505050505b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611fa857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611fe457600080fd5b612025816040805190810160405280600e81526020017f7061796d656e744761746577617900000000000000000000000000000000000081525060016127a2565b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561208357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156120bf57600080fd5b612100816040805190810160405280600e81526020017f726570726573656e74617469766500000000000000000000000000000000000081525060016127a2565b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561215e57600080fd5b61216781612b21565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121c757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561220357600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ae1cfca8360405160200180807f7573657200000000000000000000000000000000000000000000000000000000815250600401807f7061796d656e7447617465776179000000000000000000000000000000000000815250600e018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019150506040516020818303038152906040526040518082805190602001908083835b60208310151561232157805182526020820191506020810190506020830392506122fc565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156123a857600080fd5b505af11580156123bc573d6000803e3d6000fd5b505050506040513d60208110156123d257600080fd5b81019080805190602001909291905050509050801561242b5761242a826040805190810160405280600e81526020017f7061796d656e744761746577617900000000000000000000000000000000000081525061242f565b5b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561248a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156124c657600080fd5b60008151141515156124d757600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c62ff2d828460405160200180807f757365720000000000000000000000000000000000000000000000000000000081525060040183805190602001908083835b6020831015156125775780518252602082019150602081019050602083039250612552565b6001836020036101000a0380198251168184511680821785525050505050509050018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401925050506040516020818303038152906040526040518082805190602001908083835b60208310151561262257805182526020820191506020810190506020830392506125fd565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b1580156126a957600080fd5b505af11580156126bd573d6000803e3d6000fd5b505050507ff3db12150a004c4a8b7b1f06b791ebfd24480c37ae8f667e25cc89aff60e131382826000604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200183151515158152602001828103825284818151815260200191508051906020019080838360005b83811015612762578082015181840152602081019050612747565b50505050905090810190601f16801561278f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156127fd57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561283957600080fd5b600082511415151561284a57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663abfdcced838560405160200180807f757365720000000000000000000000000000000000000000000000000000000081525060040183805190602001908083835b6020831015156128ea57805182526020820191506020810190506020830392506128c5565b6001836020036101000a0380198251168184511680821785525050505050509050018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401925050506040516020818303038152906040526040518082805190602001908083835b6020831015156129955780518252602082019150602081019050602083039250612970565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018215151515815260200192505050600060405180830381600087803b158015612a2857600080fd5b505af1158015612a3c573d6000803e3d6000fd5b505050507ff3db12150a004c4a8b7b1f06b791ebfd24480c37ae8f667e25cc89aff60e1313838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200183151515158152602001828103825284818151815260200191508051906020019080838360005b83811015612ae0578082015181840152602081019050612ac5565b50505050905090810190601f168015612b0d5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612b5d57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820ec31e267e014576d46399c07c5cf50c8f178e0ad98b76f49073dcecf8aa8180c00290000000000000000000000006b79b0baed86a69f146c9256ecd268ebaa81bfca",
  "constructorArguments": "0000000000000000000000006b79b0baed86a69f146c9256ecd268ebaa81bfca"
}