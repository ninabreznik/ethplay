{
  "address": "0x88d94bb541257000fe7f01989a58cb70ba06d7ac",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HireGoCrowdsale",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-19\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n}\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value > 0);\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Mint(_to, _amount);\n        Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     * @return True if the operation was successful.\n     */\n    function finishMinting() onlyOwner canMint public returns (bool) {\n        mintingFinished = true;\n        MintFinished();\n        return true;\n    }\n}\n\n\n\ncontract HireGoToken is MintableToken, BurnableToken {\n\n    string public constant name = \"HireGo\";\n    string public constant symbol = \"HGO\";\n    uint32 public constant decimals = 18;\n\n    function HireGoToken() public {\n        totalSupply = 100000000E18;  //100m\n        balances[owner] = totalSupply; // Add all tokens to issuer balance (crowdsale in this case)\n    }\n\n}\n\n\n\n\n/*\n * ICO Start time - 1520164800 - March 4, 2018 12:00:00 PM\n * Default ICO End time - 1527379199 - May 26, 2018 11:59:59 AM\n*/\ncontract HireGoCrowdsale is Ownable {\n\n    using SafeMath for uint;\n\n    HireGoToken public token = new HireGoToken();\n    uint totalSupply = token.totalSupply();\n\n    bool public isRefundAllowed;\n\n    uint public presaleStartTime;\n    uint public presaleEndTime;\n    uint public icoStartTime;\n    uint public icoEndTime;\n\n    uint public totalWeiRaised;\n    uint internal weiRaised;\n    uint public hardCap; // amount of ETH collected, which marks end of crowd sale\n    uint public tokensDistributed; // amount of bought tokens\n    uint public foundersTokensUnlockTime;\n\n\n    /*         Bonus variables          */\n    uint internal presaleBonus = 135;\n    /* * * * * * * * * * * * * * * * * * */\n\n    uint public rate; // how many token units a buyer gets per wei\n    uint private icoMinPurchase; // In ETH\n\n    address[] public investors_number;\n    address private wallet; // address where funds are collected\n\n    mapping (address => uint) public orderedTokens;\n    mapping (address => uint) contributors;\n\n    event FundsWithdrawn(address _who, uint256 _amount);\n\n    modifier hardCapNotReached() {\n        require(totalWeiRaised < hardCap);\n        _;\n    }\n\n    modifier crowdsaleEnded() {\n        require(now > icoEndTime);\n        _;\n    }\n\n    modifier foundersTokensUnlocked() {\n        require(now > foundersTokensUnlockTime);\n        _;\n    }\n\n    modifier crowdsaleInProgress() {\n        bool withinPeriod = ((now >= presaleStartTime && now <=presaleEndTime) || (now >= icoStartTime && now <= icoEndTime));\n        require(withinPeriod);\n        _;\n    }\n\n    function HireGoCrowdsale(uint _presaleStartTime,  address _wallet) public {\n        require (\n          _presaleStartTime > now\n        );\n\n        presaleStartTime = _presaleStartTime;\n        presaleEndTime = presaleStartTime.add(4 weeks);\n        icoStartTime = presaleEndTime.add(1 minutes);\n        setIcoEndTime();\n\n        wallet = _wallet;\n\n        rate = 250 szabo; // wei per 1 token (0.00025ETH)\n\n        hardCap = 15000 ether;\n        icoMinPurchase = 50 finney; // 0.05 ETH\n        isRefundAllowed = false;\n    }\n\n    function setIcoEndTime() internal {\n          icoEndTime = icoStartTime.add(6 weeks);\n          foundersTokensUnlockTime = icoEndTime.add(180 days);\n    }\n\n    // fallback function can be used to buy tokens\n    function() public payable {\n        buyTokens();\n    }\n\n    // low level token purchase function\n    function buyTokens() public payable crowdsaleInProgress hardCapNotReached {\n        require(msg.value > 0);\n\n        // check if the buyer exceeded the funding goal\n        calculatePurchaseAndBonuses(msg.sender, msg.value);\n    }\n\n    // Returns number of investors\n    function getInvestorCount() public view returns (uint) {\n        return investors_number.length;\n    }\n\n    // Owner can allow or disallow refunds even if soft cap is reached. Should be used in case KYC is not passed.\n    // WARNING: owner should transfer collected ETH back to contract before allowing to refund, if he already withdrawn ETH.\n    function toggleRefunds() public onlyOwner {\n        isRefundAllowed = !isRefundAllowed;\n    }\n\n    // Sends ordered tokens to investors after ICO end if soft cap is reached\n    // tokens can be send only if ico has ended\n    function sendOrderedTokens() public onlyOwner crowdsaleEnded {\n        address investor;\n        uint tokensCount;\n        for(uint i = 0; i < investors_number.length; i++) {\n            investor = investors_number[i];\n            tokensCount = orderedTokens[investor];\n            assert(tokensCount > 0);\n            orderedTokens[investor] = 0;\n            token.transfer(investor, tokensCount);\n        }\n    }\n\n    // Owner can send back collected ETH if soft cap is not reached or KYC is not passed\n    // WARNING: crowdsale contract should have all received funds to return them.\n    // If you have already withdrawn them, send them back to crowdsale contract\n    function refundInvestors() public onlyOwner {\n        require(now >= icoEndTime);\n        require(isRefundAllowed);\n        require(msg.sender.balance > 0);\n\n        address investor;\n        uint contributedWei;\n        uint tokens;\n        for(uint i = 0; i < investors_number.length; i++) {\n            investor = investors_number[i];\n            contributedWei = contributors[investor];\n            tokens = orderedTokens[investor];\n            if(contributedWei > 0) {\n                totalWeiRaised = totalWeiRaised.sub(contributedWei);\n                weiRaised = weiRaised.sub(contributedWei);\n                if(weiRaised<0){\n                  weiRaised = 0;\n                }\n                contributors[investor] = 0;\n                orderedTokens[investor] = 0;\n                tokensDistributed = tokensDistributed.sub(tokens);\n                investor.transfer(contributedWei); // return funds back to contributor\n            }\n        }\n    }\n\n    // Owner of contract can withdraw collected ETH by calling this function\n    function withdraw() public onlyOwner {\n        uint to_send = weiRaised;\n        weiRaised = 0;\n        FundsWithdrawn(msg.sender, to_send);\n        wallet.transfer(to_send);\n    }\n\n    function burnUnsold() public onlyOwner crowdsaleEnded {\n        uint tokensLeft = totalSupply.sub(tokensDistributed);\n        token.burn(tokensLeft);\n    }\n\n    function finishIco() public onlyOwner {\n        icoEndTime = now;\n        foundersTokensUnlockTime = icoEndTime.add(180 days);\n    }\n\n    function finishPresale() public onlyOwner {\n        presaleEndTime = now;\n    }\n\n    function distributeForFoundersAndTeam() public onlyOwner foundersTokensUnlocked {\n        uint to_send = 25000000E18; //25m\n        checkAndMint(to_send);\n        token.transfer(wallet, to_send);\n    }\n\n    function distributeForBountiesAndAdvisors() public onlyOwner {\n        uint to_send = 15000000E18; //15m\n        checkAndMint(to_send);\n        token.transfer(wallet, to_send);\n    }\n\n    // Used to delay start of ICO\n    function updateIcoStartTime(uint _startTime) public onlyOwner {\n      require (\n        icoStartTime > now &&\n        _startTime > now &&\n        presaleEndTime < _startTime\n      );\n\n      icoStartTime = _startTime;\n      setIcoEndTime();\n    }\n\n    // After pre-sale made need to reduced hard cap depending on tokens sold\n    function updateHardCap(uint _newHardCap) public onlyOwner hardCapNotReached {\n        require (\n          _newHardCap < hardCap\n        );\n\n        hardCap = _newHardCap;\n    }\n\n    function transferOwnershipToken(address _to) public onlyOwner {\n        token.transferOwnership(_to);\n    }\n\n    /***************************\n    **  Internal functions    **\n    ***************************/\n\n    // Calculates purchase conditions and token bonuses\n    function calculatePurchaseAndBonuses(address _beneficiary, uint _weiAmount) internal {\n        if (now >= icoStartTime && now < icoEndTime) require(_weiAmount >= icoMinPurchase);\n\n        uint cleanWei; // amount of wei to use for purchase excluding change and hardcap overflows\n        uint change;\n        uint _tokens;\n\n        //check for hardcap overflow\n        if (_weiAmount.add(totalWeiRaised) > hardCap) {\n            cleanWei = hardCap.sub(totalWeiRaised);\n            change = _weiAmount.sub(cleanWei);\n        }\n        else cleanWei = _weiAmount;\n\n        assert(cleanWei > 4); // 4 wei is a price of minimal fracture of token\n\n        _tokens = cleanWei.div(rate).mul(1 ether);\n\n        if (contributors[_beneficiary] == 0) investors_number.push(_beneficiary);\n\n        _tokens = calculateBonus(_tokens);\n        checkAndMint(_tokens);\n\n        contributors[_beneficiary] = contributors[_beneficiary].add(cleanWei);\n        weiRaised = weiRaised.add(cleanWei);\n        totalWeiRaised = totalWeiRaised.add(cleanWei);\n        tokensDistributed = tokensDistributed.add(_tokens);\n        orderedTokens[_beneficiary] = orderedTokens[_beneficiary].add(_tokens);\n\n        if (change > 0) _beneficiary.transfer(change);\n    }\n\n    // Calculates bonuses based on current stage\n    function calculateBonus(uint _baseAmount) internal returns (uint) {\n        require(_baseAmount > 0);\n\n        if (now >= presaleStartTime && now < presaleEndTime) {\n            return _baseAmount.mul(presaleBonus).div(100);\n        }\n        else return _baseAmount;\n    }\n\n    // Checks if more tokens should be minted based on amount of sold tokens, required additional tokens and total supply.\n    // If there are not enough tokens, mint missing tokens\n    function checkAndMint(uint _amount) internal {\n        uint required = tokensDistributed.add(_amount);\n        if(required > totalSupply) token.mint(this, required.sub(totalSupply));\n    }\n}",
  "bytecode": "60606040526200000e6200021e565b604051809103906000f08015156200002557600080fd5b60018054600160a060020a031916600160a060020a039283161790819055166318160ddd6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200009a57600080fd5b6102c65a03f11515620000ac57600080fd5b5050506040518051600255506087600d553415620000c957600080fd5b60405160408062001f09833981016040528080519190602001805160008054600160a060020a03191633600160a060020a03161790559150504282116200010f57600080fd5b600482905562000131826224ea0064010000000062000ee9620001c082021704565b60058190556200015190603c64010000000062000ee9620001c082021704565b6006556200016c64010000000062000df0620001d782021704565b60118054600160a060020a031916600160a060020a03929092169190911790555065e35fa931a000600e5569032d26d12e980b600000600a5566b1a2bc2ec50000600f556003805460ff191690556200022f565b600082820183811015620001d057fe5b9392505050565b600654620001f79062375f0064010000000062000ee9620001c082021704565b6007819055620002199062ed4e0064010000000062000ee9620001c082021704565b600c55565b604051610cc1806200124883390190565b611009806200023f6000396000f30060606040526004361061015b5763ffffffff60e060020a600035041663152e84a78114610165578063249b7c191461018a5780632c4e722e1461019d578063376ff7f0146101b05780633ccfd60b146101d7578063446b512e146101ea57806353f4db01146102095780635c97efd61461021c57806366a908a514610232578063703df7931461024557806375b466d11461025b5780637e1055b61461026e57806380c399f4146102815780638da5cb5b14610294578063926a9af0146102c3578063960524e3146102d6578063974654c6146102e95780639ae6892b146102fc5780639dfb64fd1461031b578063a7c3d71b1461032e578063a82524b214610341578063b52a585114610354578063bfd4d72014610367578063d0febe4c1461015b578063ec42f82f1461037d578063ed1f222914610390578063f2fde38b146103a3578063fb86a404146103c2578063fc0c546a146103d5575b6101636103e8565b005b341561017057600080fd5b610178610450565b60405190815260200160405180910390f35b341561019557600080fd5b610178610456565b34156101a857600080fd5b61017861045c565b34156101bb57600080fd5b6101c3610462565b604051901515815260200160405180910390f35b34156101e257600080fd5b61016361046b565b34156101f557600080fd5b610178600160a060020a0360043516610508565b341561021457600080fd5b61017861051a565b341561022757600080fd5b610163600435610520565b341561023d57600080fd5b610178610570565b341561025057600080fd5b610163600435610576565b341561026657600080fd5b6101636105b4565b341561027957600080fd5b6101786106ce565b341561028c57600080fd5b6101636106d4565b341561029f57600080fd5b6102a761083c565b604051600160a060020a03909116815260200160405180910390f35b34156102ce57600080fd5b61016361084b565b34156102e157600080fd5b61017861090f565b34156102f457600080fd5b610163610916565b341561030757600080fd5b610163600160a060020a0360043516610937565b341561032657600080fd5b6101636109b3565b341561033957600080fd5b6101786109e2565b341561034c57600080fd5b6101786109e8565b341561035f57600080fd5b6101636109ee565b341561037257600080fd5b6102a7600435610a78565b341561038857600080fd5b610163610aa0565b341561039b57600080fd5b610163610ad9565b34156103ae57600080fd5b610163600160a060020a0360043516610b0b565b34156103cd57600080fd5b610178610ba6565b34156103e057600080fd5b6102a7610bac565b600060045442101580156103fe57506005544211155b806104185750600654421015801561041857506007544211155b905080151561042657600080fd5b600a546008541061043657600080fd5b6000341161044357600080fd5b61044d3334610bbb565b50565b600b5481565b60055481565b600e5481565b60035460ff1681565b6000805433600160a060020a0390811691161461048757600080fd5b506009805460009091557feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d3382604051600160a060020a03909216825260208201526040908101905180910390a1601154600160a060020a031681156108fc0282604051600060405180830381858888f19350505050151561044d57600080fd5b60126020526000908152604090205481565b60085481565b60005433600160a060020a0390811691161461053b57600080fd5b4260065411801561054b57504281115b8015610558575080600554105b151561056357600080fd5b600681905561044d610df0565b600c5481565b60005433600160a060020a0390811691161461059157600080fd5b600a54600854106105a157600080fd5b600a5481106105af57600080fd5b600a55565b600080548190819033600160a060020a039081169116146105d457600080fd5b60075442116105e257600080fd5b5060005b6010548110156106c95760108054829081106105fe57fe5b6000918252602080832090910154600160a060020a0316808352601290915260408220549094509250821161062f57fe5b600160a060020a038084166000908152601260205260408082208290556001549092169163a9059cbb918691869190516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156106a657600080fd5b6102c65a03f115156106b757600080fd5b505050604051805150506001016105e6565b505050565b60075481565b6000805481908190819033600160a060020a039081169116146106f657600080fd5b60075442101561070557600080fd5b60035460ff16151561071657600080fd5b6000600160a060020a033316311161072d57600080fd5b5060005b60105481101561083657601080548290811061074957fe5b6000918252602080832090910154600160a060020a0316808352601382526040808420546012909352832054909650909450925083111561082e57600854610797908463ffffffff610e1e16565b6008556009546107ad908463ffffffff610e1e16565b600981905560009010156107c15760006009555b600160a060020a03841660009081526013602090815260408083208390556012909152812055600b546107fa908363ffffffff610e1e16565b600b55600160a060020a03841683156108fc0284604051600060405180830381858888f19350505050151561082e57600080fd5b600101610731565b50505050565b600054600160a060020a031681565b6000805433600160a060020a0390811691161461086757600080fd5b600c54421161087557600080fd5b506a14adf4b7320334b900000061088b81610e30565b600154601154600160a060020a039182169163a9059cbb91168360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156108f157600080fd5b6102c65a03f1151561090257600080fd5b5050506040518051505050565b6010545b90565b60005433600160a060020a0390811691161461093157600080fd5b42600555565b60005433600160a060020a0390811691161461095257600080fd5b600154600160a060020a031663f2fde38b8260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b15156109a257600080fd5b6102c65a03f1151561083657600080fd5b60005433600160a060020a039081169116146109ce57600080fd5b6003805460ff19811660ff90911615179055565b60065481565b60045481565b6000805433600160a060020a03908116911614610a0a57600080fd5b6007544211610a1857600080fd5b600b54600254610a2d9163ffffffff610e1e16565b600154909150600160a060020a03166342966c688260405160e060020a63ffffffff84160281526004810191909152602401600060405180830381600087803b15156109a257600080fd5b6010805482908110610a8657fe5b600091825260209091200154600160a060020a0316905081565b60005433600160a060020a03908116911614610abb57600080fd5b426007819055610ad49062ed4e0063ffffffff610ee916565b600c55565b6000805433600160a060020a03908116911614610af557600080fd5b506a0c685fa11e01ec6f00000061088b81610e30565b60005433600160a060020a03908116911614610b2657600080fd5b600160a060020a0381161515610b3b57600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600a5481565b600154600160a060020a031681565b60008060006006544210158015610bd3575060075442105b15610be757600f54841015610be757600080fd5b600a54600854610bfe90869063ffffffff610ee916565b1115610c3257600854600a54610c199163ffffffff610e1e16565b9250610c2b848463ffffffff610e1e16565b9150610c36565b8392505b60048311610c4057fe5b610c6d670de0b6b3a7640000610c61600e5486610f0390919063ffffffff16565b9063ffffffff610f1a16565b600160a060020a0386166000908152601360205260409020549091501515610cd4576010805460018101610ca18382610fa0565b506000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387161790555b610cdd81610f45565b9050610ce881610e30565b600160a060020a038516600090815260136020526040902054610d11908463ffffffff610ee916565b600160a060020a038616600090815260136020526040902055600954610d3d908463ffffffff610ee916565b600955600854610d53908463ffffffff610ee916565b600855600b54610d69908263ffffffff610ee916565b600b55600160a060020a038516600090815260126020526040902054610d95908263ffffffff610ee916565b600160a060020a038616600090815260126020526040812091909155821115610de957600160a060020a03851682156108fc0283604051600060405180830381858888f193505050501515610de957600080fd5b5050505050565b600654610e069062375f0063ffffffff610ee916565b6007819055610ad49062ed4e0063ffffffff610ee916565b600082821115610e2a57fe5b50900390565b600b54600090610e46908363ffffffff610ee916565b9050600254811115610ee557600154600254600160a060020a03909116906340c10f19903090610e7d90859063ffffffff610e1e16565b60006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610ec957600080fd5b6102c65a03f11515610eda57600080fd5b505050604051805150505b5050565b600082820183811015610ef857fe5b8091505b5092915050565b6000808284811515610f1157fe5b04949350505050565b600080831515610f2d5760009150610efc565b50828202828482811515610f3d57fe5b0414610ef857fe5b6000808211610f5357600080fd5b6004544210158015610f66575060055442105b15610f9857610f916064610f85600d5485610f1a90919063ffffffff16565b9063ffffffff610f0316565b9050610f9b565b50805b919050565b8154818355818115116106c9576000838152602090206106c991810190830161091391905b80821115610fd95760008155600101610fc5565b50905600a165627a7a72305820de4d87e438fe076f4c76a64e37b7439be4ff6dba10980964a4048232b3c4da2e002960606040526003805460a060020a60ff0219169055341561001f57600080fd5b60038054600160a060020a03338116600160a060020a031990921691909117918290556a52b7d2dcc80cd2e400000060008181559290911682526001602052604090912055610c4e806100736000396000f3006060604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146100f557806306fdde031461011c578063095ea7b3146101a657806318160ddd146101c857806323b872dd146101ed578063313ce5671461021557806340c10f191461024157806342966c6814610263578063661884631461027b57806370a082311461029d5780637d64bcb4146102bc5780638da5cb5b146102cf57806395d89b41146102fe578063a9059cbb14610311578063d73dd62314610333578063dd62ed3e14610355578063f2fde38b1461037a575b600080fd5b341561010057600080fd5b610108610399565b604051901515815260200160405180910390f35b341561012757600080fd5b61012f6103a9565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561016b578082015183820152602001610153565b50505050905090810190601f1680156101985780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101b157600080fd5b610108600160a060020a03600435166024356103e0565b34156101d357600080fd5b6101db61044c565b60405190815260200160405180910390f35b34156101f857600080fd5b610108600160a060020a0360043581169060243516604435610452565b341561022057600080fd5b6102286105d4565b60405163ffffffff909116815260200160405180910390f35b341561024c57600080fd5b610108600160a060020a03600435166024356105d9565b341561026e57600080fd5b6102796004356106e6565b005b341561028657600080fd5b610108600160a060020a03600435166024356107af565b34156102a857600080fd5b6101db600160a060020a03600435166108a9565b34156102c757600080fd5b6101086108c4565b34156102da57600080fd5b6102e261094f565b604051600160a060020a03909116815260200160405180910390f35b341561030957600080fd5b61012f61095e565b341561031c57600080fd5b610108600160a060020a0360043516602435610995565b341561033e57600080fd5b610108600160a060020a0360043516602435610a90565b341561036057600080fd5b6101db600160a060020a0360043581169060243516610b34565b341561038557600080fd5b610279600160a060020a0360043516610b5f565b60035460a060020a900460ff1681565b60408051908101604052600681527f48697265476f0000000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b6000600160a060020a038316151561046957600080fd5b600160a060020a03841660009081526001602052604090205482111561048e57600080fd5b600160a060020a03808516600090815260026020908152604080832033909416835292905220548211156104c157600080fd5b600160a060020a0384166000908152600160205260409020546104ea908363ffffffff610bfa16565b600160a060020a03808616600090815260016020526040808220939093559085168152205461051f908363ffffffff610c0c16565b600160a060020a03808516600090815260016020908152604080832094909455878316825260028152838220339093168252919091522054610567908363ffffffff610bfa16565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b601281565b60035460009033600160a060020a039081169116146105f757600080fd5b60035460a060020a900460ff161561060e57600080fd5b600054610621908363ffffffff610c0c16565b6000908155600160a060020a03841681526001602052604090205461064c908363ffffffff610c0c16565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a03831660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b60008082116106f457600080fd5b600160a060020a03331660009081526001602052604090205482111561071957600080fd5b5033600160a060020a03811660009081526001602052604090205461073e9083610bfa565b600160a060020a0382166000908152600160205260408120919091555461076b908363ffffffff610bfa16565b600055600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561080c57600160a060020a033381166000908152600260209081526040808320938816835292905290812055610843565b61081c818463ffffffff610bfa16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b60035460009033600160a060020a039081169116146108e257600080fd5b60035460a060020a900460ff16156108f957600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600354600160a060020a031681565b60408051908101604052600381527f48474f0000000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a03831615156109ac57600080fd5b600160a060020a0333166000908152600160205260409020548211156109d157600080fd5b600160a060020a0333166000908152600160205260409020546109fa908363ffffffff610bfa16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610a2f908363ffffffff610c0c16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610ac8908363ffffffff610c0c16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610b7a57600080fd5b600160a060020a0381161515610b8f57600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610c0657fe5b50900390565b600082820183811015610c1b57fe5b93925050505600a165627a7a723058202b9bc36848cd36f767bb0a0dd00e160e75a6ae0fd290ee266feb0d0e557d4dee0029000000000000000000000000000000000000000000000000000000005ae7ae000000000000000000000000002ce8a025f3a547d75d69bb9f6a55b279638e4b2e",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000005ae7ae000000000000000000000000002ce8a025f3a547d75d69bb9f6a55b279638e4b2e"
}