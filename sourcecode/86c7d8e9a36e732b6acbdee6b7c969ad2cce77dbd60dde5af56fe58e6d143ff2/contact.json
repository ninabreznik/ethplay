{
  "address": "0x7c32db0645a259fae61353c1f891151a2e7f8c1e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "POTENTIAM",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-09\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n  \n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n/**\n * @title Destructible\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n */\ncontract Destructible is Ownable {\n\n  function Destructible() public payable { }\n\n  /**\n   * @dev Transfers the current balance to the owner and terminates the contract.\n   */\n  function destroy() onlyOwner public {\n    selfdestruct(owner);\n  }\n\n  function destroyAndSend(address _recipient) onlyOwner public {\n    selfdestruct(_recipient);\n  }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n */\ncontract ERC20Basic  {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic, Pausable {\n  using SafeMath for uint256;\n  uint256 public etherRaised;\n  mapping(address => uint256) balances;\n  address companyReserve;\n  uint256 deployTime;\n  modifier isUserAbleToTransferCheck(uint256 _value) {\n  if(msg.sender == companyReserve){\n          uint256 balanceRemaining = balanceOf(companyReserve);\n          uint256 timeDiff = now - deployTime;\n          uint256 totalMonths = timeDiff / 30 days;\n          if(totalMonths == 0){\n              totalMonths  = 1;\n          }\n          uint256 percentToWitdraw = totalMonths * 5;\n          uint256 tokensToWithdraw = ((25000000 * (10**18)) * percentToWitdraw)/100;\n          uint256 spentTokens = (25000000 * (10**18)) - balanceRemaining;\n          if(spentTokens + _value <= tokensToWithdraw){\n              _;\n          }\n          else{\n              revert();\n          }\n        }else{\n           _;\n        }\n    }\n    \n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public  isUserAbleToTransferCheck(_value) returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n    \n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\ncontract BurnableToken is BasicToken {\n    using SafeMath for uint256;\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    require(_value <= balances[msg.sender]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply= totalSupply.sub(_value);\n    Burn(burner, _value);\n  }\n}\ncontract StandardToken is ERC20, BurnableToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  \n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public isUserAbleToTransferCheck(_value) returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\ncontract POTENTIAM is StandardToken, Destructible {\n    string public constant name = \"POTENTIAM\";\n    using SafeMath for uint256;\n    uint public constant decimals = 18;\n    string public constant symbol = \"PTM\";\n    uint public priceOfToken=250000000000000;//1 eth = 4000 PTM\n    address[] allParticipants;\n   \n    uint tokenSales=0;\n    uint256 public firstWeekPreICOBonusEstimate;\n    uint256  public secondWeekPreICOBonusEstimate;\n    uint256  public firstWeekMainICOBonusEstimate;\n    uint256 public secondWeekMainICOBonusEstimate;\n    uint256 public thirdWeekMainICOBonusEstimate;\n    uint256 public forthWeekMainICOBonusEstimate;\n    uint256 public firstWeekPreICOBonusRate;\n    uint256 secondWeekPreICOBonusRate;\n    uint256 firstWeekMainICOBonusRate;\n    uint256 secondWeekMainICOBonusRate;\n    uint256 thirdWeekMainICOBonusRate;\n    uint256 forthWeekMainICOBonusRate;\n    uint256 totalWeiRaised = 0;\n    function POTENTIAM()  public {\n       totalSupply = 100000000 * (10**decimals);  // \n       owner = msg.sender;\n       companyReserve =   0xd311cB7D961B46428d766df0eaE7FE83Fc8B7B5c;\n       balances[msg.sender] += 75000000 * (10 **decimals);\n       balances[companyReserve]  += 25000000 * (10**decimals);\n       firstWeekPreICOBonusEstimate = now + 7 days;\n       deployTime = now;\n       secondWeekPreICOBonusEstimate = firstWeekPreICOBonusEstimate + 7 days;\n       firstWeekMainICOBonusEstimate = firstWeekPreICOBonusEstimate + 14 days;\n       secondWeekMainICOBonusEstimate = firstWeekPreICOBonusEstimate + 21 days;\n       thirdWeekMainICOBonusEstimate = firstWeekPreICOBonusEstimate + 28 days;\n       forthWeekMainICOBonusEstimate = firstWeekPreICOBonusEstimate + 35 days;\n       firstWeekPreICOBonusRate = 20;\n       secondWeekPreICOBonusRate = 18;\n       firstWeekMainICOBonusRate = 12;\n       secondWeekMainICOBonusRate = 8;\n       thirdWeekMainICOBonusRate = 4;\n       forthWeekMainICOBonusRate = 0;\n    }\n\n    function()  public whenNotPaused payable {\n        require(msg.value>0);\n        require(now<=forthWeekMainICOBonusEstimate);\n        require(tokenSales < (60000000 * (10 **decimals)));\n        uint256 bonus = 0;\n        if(now<=firstWeekPreICOBonusEstimate && totalWeiRaised < 3000 ether){\n            bonus = firstWeekPreICOBonusRate;\n        }else if(now <=secondWeekPreICOBonusEstimate && totalWeiRaised < 5000 ether){\n            bonus = secondWeekPreICOBonusRate;\n        }else if(now<=firstWeekMainICOBonusEstimate && totalWeiRaised < 9000 ether){\n            bonus = firstWeekMainICOBonusRate;\n        }else if(now<=secondWeekMainICOBonusEstimate && totalWeiRaised < 12000 ether){\n            bonus = secondWeekMainICOBonusRate;\n        }\n        else if(now<=thirdWeekMainICOBonusEstimate && totalWeiRaised <14000 ether){\n            bonus = thirdWeekMainICOBonusRate;\n        }\n        uint256 tokens = (msg.value * (10 ** decimals)) / priceOfToken;\n        uint256 bonusTokens = ((tokens * bonus) /100); \n        tokens +=bonusTokens;\n          if(balances[owner] <tokens) //check etiher owner can have token otherwise reject transaction and ether\n        {\n           revert();\n        }\n        allowed[owner][msg.sender] += tokens;\n        bool transferRes=transferFrom(owner, msg.sender, tokens);\n        if (!transferRes) {\n            revert();\n        }\n        else{\n            tokenSales += tokens;\n            etherRaised += msg.value;\n            totalWeiRaised +=msg.value;\n        }\n    }//end of fallback\n    /**\n    * Transfer entire balance to any account (by owner and admin only)\n    **/\n    function transferFundToAccount(address _accountByOwner) public onlyOwner {\n        require(etherRaised > 0);\n        _accountByOwner.transfer(etherRaised);\n        etherRaised = 0;\n    }\n\n    function resetTokenOfAddress(address _userAddr, uint256 _tokens) public onlyOwner returns (uint256){\n       require(_userAddr !=0); \n       require(balanceOf(_userAddr)>=_tokens);\n        balances[_userAddr] = balances[_userAddr].sub(_tokens);\n        balances[owner] = balances[owner].add(_tokens);\n        return balances[_userAddr];\n    }\n   \n    /**\n    * Transfer part of balance to any account (by owner and admin only)\n    **/\n    function transferLimitedFundToAccount(address _accountByOwner, uint256 balanceToTransfer) public onlyOwner   {\n        require(etherRaised > balanceToTransfer);\n        _accountByOwner.transfer(balanceToTransfer);\n        etherRaised -= balanceToTransfer;\n    }\n  \n}",
  "bytecode": "60606040526000600160146101000a81548160ff02191690831515021790555065e35fa931a00060075560006009556000601655341561003e57600080fd5b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506012600a0a6305f5e1000260008190555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073d311cb7d961b46428d766df0eae7fe83fc8b7b5c600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506012600a0a63047868c002600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506012600a0a63017d78400260036000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555062093a804201600a819055504260058190555062093a80600a5401600b8190555062127500600a5401600c81905550621baf80600a5401600d819055506224ea00600a5401600e81905550622e2480600a5401600f8190555060146010819055506012601181905550600c601281905550600860138190555060046014819055506000601581905550612a858061028e6000396000f30060606040526004361061018a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168062d30eb91461047c57806306fdde03146104a5578063095ea7b31461053357806318160ddd1461058d5780631b9cbdfb146105b657806323b872dd146105df578063313ce567146106585780633f4ba83a14610681578063424983891461069657806342966c68146106d8578063527942ac146106fb5780635c7b35f8146107245780635c975abb1461077a57806366188463146107a75780636ca100fb1461080157806370a082311461082a57806383197ef0146108775780638456cb591461088c578063895a8cfb146108a15780638da5cb5b146108ca57806395d89b411461091f57806399bcb1a1146109ad578063a9059cbb146109d6578063b2bbac1614610a30578063c789151414610a59578063cd72ab6914610a82578063d73dd62314610aab578063dd62ed3e14610b05578063ea8d103f14610b71578063f2fde38b14610baa578063f5074f4114610be3575b600080600080600160149054906101000a900460ff161515156101ac57600080fd5b6000341115156101bb57600080fd5b600f5442111515156101cc57600080fd5b6012600a0a6303938700026009541015156101e657600080fd5b60009350600a544211158015610206575068a2a15d09519be00000601654105b156102155760105493506102c5565b600b544211158015610232575069010f0cf064dd59200000601654105b156102415760115493506102c4565b600c54421115801561025e57506901e7e4171bf4d3a00000601654105b1561026d5760125493506102c3565b600d54421115801561028a575069028a857425466f800000601654105b156102995760135493506102c2565b600e5442111580156102b657506902f6f10780d22cc00000601654105b156102c15760145493505b5b5b5b5b6007546012600a0a34028115156102d857fe5b04925060648484028115156102e957fe5b04915081830192508260036000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561035f57600080fd5b8260066000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550610438600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163385610c1c565b905080151561044657600080fd5b82600960008282540192505081905550346002600082825401925050819055503460166000828254019250508190555050505050005b341561048757600080fd5b61048f61149a565b6040518082815260200191505060405180910390f35b34156104b057600080fd5b6104b86114a0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104f85780820151818401526020810190506104dd565b50505050905090810190601f1680156105255780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561053e57600080fd5b610573600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506114d9565b604051808215151515815260200191505060405180910390f35b341561059857600080fd5b6105a06115cb565b6040518082815260200191505060405180910390f35b34156105c157600080fd5b6105c96115d1565b6040518082815260200191505060405180910390f35b34156105ea57600080fd5b61063e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c1c565b604051808215151515815260200191505060405180910390f35b341561066357600080fd5b61066b6115d7565b6040518082815260200191505060405180910390f35b341561068c57600080fd5b6106946115dc565b005b34156106a157600080fd5b6106d6600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061169c565b005b34156106e357600080fd5b6106f9600480803590602001909190505061175c565b005b341561070657600080fd5b61070e6118b1565b6040518082815260200191505060405180910390f35b341561072f57600080fd5b610764600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506118b7565b6040518082815260200191505060405180910390f35b341561078557600080fd5b61078d611b08565b604051808215151515815260200191505060405180910390f35b34156107b257600080fd5b6107e7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611b1b565b604051808215151515815260200191505060405180910390f35b341561080c57600080fd5b610814611dac565b6040518082815260200191505060405180910390f35b341561083557600080fd5b610861600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611db2565b6040518082815260200191505060405180910390f35b341561088257600080fd5b61088a611dfb565b005b341561089757600080fd5b61089f611e92565b005b34156108ac57600080fd5b6108b4611f52565b6040518082815260200191505060405180910390f35b34156108d557600080fd5b6108dd611f58565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561092a57600080fd5b610932611f7e565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610972578082015181840152602081019050610957565b50505050905090810190601f16801561099f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156109b857600080fd5b6109c0611fb7565b6040518082815260200191505060405180910390f35b34156109e157600080fd5b610a16600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611fbd565b604051808215151515815260200191505060405180910390f35b3415610a3b57600080fd5b610a43612506565b6040518082815260200191505060405180910390f35b3415610a6457600080fd5b610a6c61250c565b6040518082815260200191505060405180910390f35b3415610a8d57600080fd5b610a95612512565b6040518082815260200191505060405180910390f35b3415610ab657600080fd5b610aeb600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612518565b604051808215151515815260200191505060405180910390f35b3415610b1057600080fd5b610b5b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612714565b6040518082815260200191505060405180910390f35b3415610b7c57600080fd5b610ba8600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061279b565b005b3415610bb557600080fd5b610be1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612855565b005b3415610bee57600080fd5b610c1a600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506129ad565b005b600081600080600080600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156110d457610ca9600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611db2565b95506005544203945062278d0085811515610cc057fe5b0493506000841415610cd157600193505b6005840292506064836a14adf4b7320334b900000002811515610cf057fe5b049150856a14adf4b7320334b9000000039050818782011115156110ca57600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614151515610d4a57600080fd5b600360008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548911151515610d9857600080fd5b600660008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548911151515610e2357600080fd5b610e7589600360008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a2290919063ffffffff16565b600360008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f0a89600360008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a3b90919063ffffffff16565b600360008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fdc89600660008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a2290919063ffffffff16565b600660008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508973ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8b6040518082815260200191505060405180910390a3600197506110cf565b600080fd5b61148c565b600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff161415151561111057600080fd5b600360008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054891115151561115e57600080fd5b600660008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205489111515156111e957600080fd5b61123b89600360008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a2290919063ffffffff16565b600360008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112d089600360008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a3b90919063ffffffff16565b600360008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113a289600660008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a2290919063ffffffff16565b600660008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508973ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8b6040518082815260200191505060405180910390a3600197505b505050505050509392505050565b60105481565b6040805190810160405280600981526020017f504f54454e5449414d000000000000000000000000000000000000000000000081525081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b60075481565b601281565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561163857600080fd5b600160149054906101000a900460ff16151561165357600080fd5b6000600160146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116f857600080fd5b8060025411151561170857600080fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561174857600080fd5b806002600082825403925050819055505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156117ac57600080fd5b33905061180182600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a2290919063ffffffff16565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061185982600054612a2290919063ffffffff16565b6000819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b600b5481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561191557600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff161415151561193b57600080fd5b8161194584611db2565b1015151561195257600080fd5b6119a482600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a2290919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a5b8260036000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a3b90919063ffffffff16565b60036000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600160149054906101000a900460ff1681565b600080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115611c2c576000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611cc0565b611c3f8382612a2290919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600c5481565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e5757600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611eee57600080fd5b600160149054906101000a900460ff16151515611f0a57600080fd5b60018060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600d5481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f50544d000000000000000000000000000000000000000000000000000000000081525081565b600e5481565b600081600080600080600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156122db5761204a600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611db2565b95506005544203945062278d008581151561206157fe5b049350600084141561207257600193505b6005840292506064836a14adf4b7320334b90000000281151561209157fe5b049150856a14adf4b7320334b9000000039050818782011115156122d157600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16141515156120eb57600080fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054891115151561213957600080fd5b61218b89600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a2290919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061222089600360008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a3b90919063ffffffff16565b600360008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8b6040518082815260200191505060405180910390a3600197506122d6565b600080fd5b6124f9565b600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff161415151561231757600080fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054891115151561236557600080fd5b6123b789600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a2290919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061244c89600360008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a3b90919063ffffffff16565b600360008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8b6040518082815260200191505060405180910390a3600197505b5050505050505092915050565b600a5481565b600f5481565b60025481565b60006125a982600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a3b90919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156127f757600080fd5b600060025411151561280857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc6002549081150290604051600060405180830381858888f19350505050151561284a57600080fd5b600060028190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156128b157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156128ed57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612a0957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16ff5b6000828211151515612a3057fe5b818303905092915050565b6000808284019050838110151515612a4f57fe5b80915050929150505600a165627a7a72305820b7da2c0ee1b9c9627f2fa75268203ed421497f723571995e0d7e473408d1f2d80029"
}