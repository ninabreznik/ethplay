{
  "address": "0xfc543ba94943da77236d38d1cbe6bd9c7b945dfc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GanaTokenPublicSale",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-27\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\ncontract Releasable is Ownable {\n\n  event Release();\n\n  bool public released = false;\n\n  modifier afterReleased() {\n    require(released);\n    _;\n  }\n\n  function release() onlyOwner public {\n    require(!released);\n    released = true;\n    Release();\n  }\n\n}\n\n\ncontract Managed is Releasable {\n\n  mapping (address => bool) public manager;\n  event SetManager(address _addr);\n  event UnsetManager(address _addr);\n\n  function Managed() public {\n    manager[msg.sender] = true;\n  }\n\n  modifier onlyManager() {\n    require(manager[msg.sender]);\n    _;\n  }\n\n  function setManager(address _addr) public onlyOwner {\n    require(_addr != address(0) && manager[_addr] == false);\n    manager[_addr] = true;\n\n    SetManager(_addr);\n  }\n\n  function unsetManager(address _addr) public onlyOwner {\n    require(_addr != address(0) && manager[_addr] == true);\n    manager[_addr] = false;\n\n    UnsetManager(_addr);\n  }\n\n}\n\n\ncontract ReleasableToken is StandardToken, Managed {\n\n  function transfer(address _to, uint256 _value) public afterReleased returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function saleTransfer(address _to, uint256 _value) public onlyManager returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public afterReleased returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public afterReleased returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public afterReleased returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public afterReleased returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n\n}\n\n\ncontract BurnableToken is ReleasableToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) onlyManager public {\n        require(_value > 0);\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= tota0lSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n\n}\n\n\n/**\n  *  GanaToken\n  */\ncontract GanaToken is BurnableToken {\n\n  string public constant name = \"GANA\";\n  string public constant symbol = \"GANA\";\n  uint8 public constant decimals = 18;\n\n  event ClaimedTokens(address manager, address _token, uint256 claimedBalance);\n\n  function GanaToken() public {\n    totalSupply = 2400000000 * 1 ether;\n    balances[msg.sender] = totalSupply;\n  }\n\n  function claimTokens(address _token, uint256 _claimedBalance) public onlyManager afterReleased {\n    ERC20Basic token = ERC20Basic(_token);\n    uint256 tokenBalance = token.balanceOf(this);\n    require(tokenBalance >= _claimedBalance);\n\n    address manager = msg.sender;\n    token.transfer(manager, _claimedBalance);\n    ClaimedTokens(manager, _token, _claimedBalance);\n  }\n\n}\n\n\n/**\n  *  Whitelist contract\n  */\ncontract Whitelist is Ownable {\n\n   mapping (address => bool) public whitelist;\n   event Registered(address indexed _addr);\n   event Unregistered(address indexed _addr);\n\n   modifier onlyWhitelisted(address _addr) {\n     require(whitelist[_addr]);\n     _;\n   }\n\n   function isWhitelist(address _addr) public view returns (bool listed) {\n     return whitelist[_addr];\n   }\n\n   function registerAddress(address _addr) public onlyOwner {\n     require(_addr != address(0) && whitelist[_addr] == false);\n     whitelist[_addr] = true;\n     Registered(_addr);\n   }\n\n   function registerAddresses(address[] _addrs) public onlyOwner {\n     for(uint256 i = 0; i < _addrs.length; i++) {\n       require(_addrs[i] != address(0) && whitelist[_addrs[i]] == false);\n       whitelist[_addrs[i]] = true;\n       Registered(_addrs[i]);\n     }\n   }\n\n   function unregisterAddress(address _addr) public onlyOwner onlyWhitelisted(_addr) {\n       whitelist[_addr] = false;\n       Unregistered(_addr);\n   }\n\n   function unregisterAddresses(address[] _addrs) public onlyOwner {\n     for(uint256 i = 0; i < _addrs.length; i++) {\n       require(whitelist[_addrs[i]]);\n       whitelist[_addrs[i]] = false;\n       Unregistered(_addrs[i]);\n     }\n   }\n\n}\n\n\n/**\n  *  GanaToken PUBLIC-SALE\n  */\ncontract GanaTokenPublicSale is Ownable {\n  using SafeMath for uint256;\n\n  GanaToken public gana;\n  Whitelist public whitelist;\n  address public wallet;\n  uint256 public hardCap   = 50000 ether; //publicsale cap\n  uint256 public weiRaised = 0;\n  uint256 public defaultRate = 20000;\n  uint256 public startTime;\n  uint256 public endTime;\n\n  event TokenPurchase(address indexed sender, address indexed buyer, uint256 weiAmount, uint256 ganaAmount);\n  event Refund(address indexed buyer, uint256 weiAmount);\n  event TransferToSafe();\n  event BurnAndReturnAfterEnded(uint256 burnAmount, uint256 returnAmount);\n\n  function GanaTokenPublicSale(address _gana, address _wallet, address _whitelist, uint256 _startTime, uint256 _endTime) public {\n    require(_wallet != address(0));\n    gana = GanaToken(_gana);\n    whitelist = Whitelist(_whitelist);\n    wallet = _wallet;\n    startTime = _startTime;\n    endTime = _endTime;\n  }\n\n  modifier onlyWhitelisted() {\n    require(whitelist.isWhitelist(msg.sender));\n    _;\n  }\n\n  // fallback function can be used to buy tokens\n  function () external payable {\n    buyGana(msg.sender);\n  }\n\n  function buyGana(address buyer) public onlyWhitelisted payable {\n    require(!hasEnded());\n    require(afterStart());\n    require(buyer != address(0));\n    require(msg.value > 0);\n    require(buyer == msg.sender);\n\n    uint256 weiAmount = msg.value;\n    //pre-calculate wei raise after buying\n    uint256 preCalWeiRaised = weiRaised.add(weiAmount);\n    uint256 ganaAmount;\n    uint256 rate = getRate();\n\n    if(preCalWeiRaised <= hardCap){\n      //the pre-calculate wei raise is less than the hard cap\n      ganaAmount = weiAmount.mul(rate);\n      gana.saleTransfer(buyer, ganaAmount);\n      weiRaised = preCalWeiRaised;\n      TokenPurchase(msg.sender, buyer, weiAmount, ganaAmount);\n    }else{\n      //the pre-calculate weiRaised is more than the hard cap\n      uint256 refundWeiAmount = preCalWeiRaised.sub(hardCap);\n      uint256 fundWeiAmount =  weiAmount.sub(refundWeiAmount);\n      ganaAmount = fundWeiAmount.mul(rate);\n      gana.saleTransfer(buyer, ganaAmount);\n      weiRaised = weiRaised.add(fundWeiAmount);\n      TokenPurchase(msg.sender, buyer, fundWeiAmount, ganaAmount);\n      buyer.transfer(refundWeiAmount);\n      Refund(buyer,refundWeiAmount);\n    }\n  }\n\n  function getRate() public view returns (uint256) {\n    if(weiRaised < 15000 ether){\n      return 22000;\n    }else if(weiRaised < 30000 ether){\n      return 21000;\n    }else if(weiRaised < 45000 ether){\n      return 20500;\n    }else{\n      return 20000;\n    }\n  }\n\n  //Was it sold out or sale overdue\n  function hasEnded() public view returns (bool) {\n    bool hardCapReached = weiRaised >= hardCap; // valid cap\n    return hardCapReached || afterEnded();\n  }\n\n  function afterEnded() internal constant returns (bool) {\n    return now > endTime;\n  }\n\n  function afterStart() internal constant returns (bool) {\n    return now >= startTime;\n  }\n\n  function transferToSafe() onlyOwner public {\n    require(hasEnded());\n    wallet.transfer(this.balance);\n    TransferToSafe();\n  }\n\n  /**\n  * @dev burn unsold token and return bonus token\n  * @param reserveWallet reserve pool address\n  */\n  function burnAndReturnAfterEnded(address reserveWallet) onlyOwner public {\n    require(reserveWallet != address(0));\n    require(hasEnded());\n    uint256 unsoldWei = hardCap.sub(weiRaised);\n    uint256 ganaBalance = gana.balanceOf(this);\n    require(ganaBalance > 0);\n\n    if(unsoldWei > 0){\n      //Burn unsold and return bonus\n      uint256 unsoldGanaAmount = ganaBalance;\n      uint256 burnGanaAmount = unsoldWei.mul(defaultRate);\n      uint256 bonusGanaAmount = unsoldGanaAmount.sub(burnGanaAmount);\n      gana.burn(burnGanaAmount);\n      gana.saleTransfer(reserveWallet, bonusGanaAmount);\n      BurnAndReturnAfterEnded(burnGanaAmount, bonusGanaAmount);\n    }else{\n      //All tokens were sold. return bonus\n      gana.saleTransfer(reserveWallet, ganaBalance);\n      BurnAndReturnAfterEnded(0, ganaBalance);\n    }\n  }\n\n  /**\n  * @dev emergency function before sale\n  * @param returnAddress return token address\n  */\n  function returnGanaBeforeSale(address returnAddress) onlyOwner public {\n    require(returnAddress != address(0));\n    require(weiRaised == 0);\n    uint256 returnGana = gana.balanceOf(this);\n    gana.saleTransfer(returnAddress, returnGana);\n  }\n\n}",
  "bytecode": "6060604052690a968163f0a57b4000006004556000600555614e20600655341561002857600080fd5b60405160a080610d99833981016040528080519190602001805191906020018051919060200180519190602001805160008054600160a060020a03191633600160a060020a039081169190911790915590925085161515905061008a57600080fd5b60018054600160a060020a0319908116600160a060020a0397881617909155600280548216948716949094179093556003805490931693909416929092179055600755600855610cba806100df6000396000f3006060604052600436106100cc5763ffffffff60e060020a600035041663075deb9581146100d757806315d3e0a3146100eb5780632616501d146100fe5780633197cbb6146101235780634042b66f146101365780634eb259aa14610149578063521eb27314610168578063679aefce1461019757806378e97925146101aa5780638da5cb5b146101bd57806393e59dc1146101d0578063a78cdfed146101e3578063ecb70fb7146101f6578063f2fde38b1461021d578063f80f96f61461023c578063fb86a4041461025b575b6100d53361026e565b005b6100d5600160a060020a036004351661026e565b34156100f657600080fd5b6100d56105f6565b341561010957600080fd5b61011161068b565b60405190815260200160405180910390f35b341561012e57600080fd5b610111610691565b341561014157600080fd5b610111610697565b341561015457600080fd5b6100d5600160a060020a036004351661069d565b341561017357600080fd5b61017b61098e565b604051600160a060020a03909116815260200160405180910390f35b34156101a257600080fd5b61011161099d565b34156101b557600080fd5b6101116109fe565b34156101c857600080fd5b61017b610a04565b34156101db57600080fd5b61017b610a13565b34156101ee57600080fd5b61017b610a22565b341561020157600080fd5b610209610a31565b604051901515815260200160405180910390f35b341561022857600080fd5b6100d5600160a060020a0360043516610a52565b341561024757600080fd5b6100d5600160a060020a0360043516610aed565b341561026657600080fd5b610111610c20565b60025460009081908190819081908190600160a060020a031663c683630d33836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156102d357600080fd5b6102c65a03f115156102e457600080fd5b5050506040518051905015156102f957600080fd5b610301610a31565b1561030b57600080fd5b610313610c26565b151561031e57600080fd5b600160a060020a038716151561033357600080fd5b6000341161034057600080fd5b33600160a060020a031687600160a060020a031614151561036057600080fd5b600554349650610376908763ffffffff610c2f16565b945061038061099d565b600454909350851161046b5761039c868463ffffffff610c4916565b600154909450600160a060020a031663a51a8682888660006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156103fe57600080fd5b6102c65a03f1151561040f57600080fd5b505050604051805150506005859055600160a060020a038088169033167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18888760405191825260208201526040908101905180910390a36105ed565b60045461047f90869063ffffffff610c7416565b9150610491868363ffffffff610c7416565b90506104a3818463ffffffff610c4916565b600154909450600160a060020a031663a51a8682888660006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561050557600080fd5b6102c65a03f1151561051657600080fd5b50505060405180515050600554610533908263ffffffff610c2f16565b600555600160a060020a038088169033167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18838760405191825260208201526040908101905180910390a3600160a060020a03871682156108fc0283604051600060405180830381858888f1935050505015156105af57600080fd5b86600160a060020a03167fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d8360405190815260200160405180910390a25b50505050505050565b60005433600160a060020a0390811691161461061157600080fd5b610619610a31565b151561062457600080fd5b600354600160a060020a039081169030163180156108fc0290604051600060405180830381858888f19350505050151561065d57600080fd5b7fd199affd05325a27b0e0712711930c851835f6f9ea725c80b75aaa5022930b9760405160405180910390a1565b60065481565b60085481565b60055481565b60008054819081908190819033600160a060020a039081169116146106c157600080fd5b600160a060020a03861615156106d657600080fd5b6106de610a31565b15156106e957600080fd5b6005546004546106fe9163ffffffff610c7416565b600154909550600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561075a57600080fd5b6102c65a03f1151561076b57600080fd5b50505060405180519450506000841161078357600080fd5b60008511156108cf576006548493506107a390869063ffffffff610c4916565b91506107b5838363ffffffff610c7416565b600154909150600160a060020a03166342966c688360405160e060020a63ffffffff84160281526004810191909152602401600060405180830381600087803b151561080057600080fd5b6102c65a03f1151561081157600080fd5b5050600154600160a060020a0316905063a51a8682878360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561087457600080fd5b6102c65a03f1151561088557600080fd5b50505060405180519050507f011ce8bfb61c9db9fd6bd20bfadf06bf5ccb2d1c694752bf7aa91ce195fdae7b828260405191825260208201526040908101905180910390a1610986565b600154600160a060020a031663a51a8682878660006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561092e57600080fd5b6102c65a03f1151561093f57600080fd5b50505060405180519050507f011ce8bfb61c9db9fd6bd20bfadf06bf5ccb2d1c694752bf7aa91ce195fdae7b60008560405191825260208201526040908101905180910390a15b505050505050565b600354600160a060020a031681565b600069032d26d12e980b60000060055410156109bc57506155f06109fb565b69065a4da25d3016c0000060055410156109d957506152086109fb565b69098774738bc82220000060055410156109f657506150146109fb565b50614e205b90565b60075481565b600054600160a060020a031681565b600254600160a060020a031681565b600154600160a060020a031681565b6004546005546000919010158080610a4c5750610a4c610c86565b91505090565b60005433600160a060020a03908116911614610a6d57600080fd5b600160a060020a0381161515610a8257600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000805433600160a060020a03908116911614610b0957600080fd5b600160a060020a0382161515610b1e57600080fd5b60055415610b2b57600080fd5b600154600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610b8457600080fd5b6102c65a03f11515610b9557600080fd5b5050506040518051600154909250600160a060020a0316905063a51a8682838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610c0157600080fd5b6102c65a03f11515610c1257600080fd5b505050604051805150505050565b60045481565b60075442101590565b600082820183811015610c3e57fe5b8091505b5092915050565b600080831515610c5c5760009150610c42565b50828202828482811515610c6c57fe5b0414610c3e57fe5b600082821115610c8057fe5b50900390565b6008544211905600a165627a7a72305820c8a13df064917c7e8424105bfccc9011bb4d2d617a14feaae5ba8355ba9998230029000000000000000000000000c0ea6306f6360fe7dcab65d16bf1a3af92c79aa2000000000000000000000000d6746c99cf43ad52777c4e26d9a9e957b992582e000000000000000000000000d99c17fc653176a32734031be3000bc82f261eb0000000000000000000000000000000000000000000000000000000005b02ed00000000000000000000000000000000000000000000000000000000005b535880",
  "constructorArguments": "000000000000000000000000c0ea6306f6360fe7dcab65d16bf1a3af92c79aa2000000000000000000000000d6746c99cf43ad52777c4e26d9a9e957b992582e000000000000000000000000d99c17fc653176a32734031be3000bc82f261eb0000000000000000000000000000000000000000000000000000000005b02ed00000000000000000000000000000000000000000000000000000000005b535880"
}