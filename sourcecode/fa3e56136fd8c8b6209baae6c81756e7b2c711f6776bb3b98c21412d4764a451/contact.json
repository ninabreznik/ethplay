{
  "address": "0xb60524d00de642355eb7992184788fa151e862f8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "StarRocket",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-06\n*/\n\npragma solidity 0.4.24;\n\ncontract StarRocket\n{\n    using SafeMath for *;\n\n    address public master;\n\n    mapping(uint256 => mapping(uint256 => uint256)) results;\n\n    bool public paused = false;\n\n    constructor() public {\n        master = msg.sender;\n    }\n\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    modifier onlyMaster() {\n        require(msg.sender == master);\n        _;\n    }\n\n    function pause() public whenNotPaused onlyMaster {\n        paused = true;\n    }\n\n    function unpause() public whenPaused onlyMaster {\n        paused = false;\n    }\n\n    function makeRandomResult(uint256 guessType, uint256 period, uint256 seed, uint256 maxNumber) onlyMaster\n    public returns (bool)  {\n        require(guessType > 0);\n        require(period > 0);\n        require(seed >= 0);\n        require(maxNumber > 0);\n        require(results[guessType][period] <= 0);\n        require(maxNumber <= 1000000);\n        uint256 random = (uint256(keccak256(abi.encodePacked(\n                (block.timestamp).add\n                (block.difficulty).add\n                (guessType).add\n                (period).add\n                (seed)))) % maxNumber) + 1;\n        results[guessType][period] = random;\n        return true;\n    }\n\n    function getResult(uint256 guessType, uint256 period)\n    public view returns (uint256){\n        require(guessType > 0);\n        require(period > 0);\n        require(results[guessType][period] > 0);\n        return results[guessType][period];\n    }\n}\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        require(c >= a);\n        return c;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"guessType\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"getResult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guessType\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"seed\",\"type\":\"uint256\"},{\"name\":\"maxNumber\",\"type\":\"uint256\"}],\"name\":\"makeRandomResult\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]",
  "bytecode": "60806040526002805460ff1916905534801561001a57600080fd5b5060008054600160a060020a0319163317905561040a8061003c6000396000f3006080604052600436106100775763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633f4ba83a811461007c5780635c975abb146100935780638456cb59146100bc578063949f80c5146100d15780639732b33a146100fe578063ee97f7f31461011f575b600080fd5b34801561008857600080fd5b5061009161015d565b005b34801561009f57600080fd5b506100a861019e565b604080519115158252519081900360200190f35b3480156100c857600080fd5b506100916101a7565b3480156100dd57600080fd5b506100ec6004356024356101ea565b60408051918252519081900360200190f35b34801561010a57600080fd5b506100a8600435602435604435606435610247565b34801561012b57600080fd5b506101346103ac565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60025460ff16151561016e57600080fd5b60005473ffffffffffffffffffffffffffffffffffffffff16331461019257600080fd5b6002805460ff19169055565b60025460ff1681565b60025460ff16156101b757600080fd5b60005473ffffffffffffffffffffffffffffffffffffffff1633146101db57600080fd5b6002805460ff19166001179055565b60008083116101f857600080fd5b6000821161020557600080fd5b60008381526001602090815260408083208584529091528120541161022957600080fd5b50600091825260016020908152604080842092845291905290205490565b60008054819073ffffffffffffffffffffffffffffffffffffffff16331461026e57600080fd5b6000861161027b57600080fd5b6000851161028857600080fd5b600084101561029657600080fd5b600083116102a357600080fd5b600086815260016020908152604080832088845290915281205411156102c857600080fd5b620f42408311156102d857600080fd5b826102fd856102f188818b81424463ffffffff6103c816565b9063ffffffff6103c816565b604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b6020831061034b5780518252601f19909201916020918201910161032c565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209250505081151561038157fe5b6000978852600160208181526040808b20998b52989052969097209606850190955550919392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b818101828110156103d857600080fd5b929150505600a165627a7a72305820883c7302fba5257416129abbe8f58671973dd769d0ed2169faf749a6851f36ae0029"
}