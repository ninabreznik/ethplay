{
  "address": "0xee86bec58087512a591ddde8f5bc324be3a257ab",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BNTE",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-13\n*/\n\npragma solidity 0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20 {\n  function totalSupply()public view returns (uint256 total_Supply);\n  function balanceOf(address who)public view returns (uint256);\n  function allowance(address owner, address spender)public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value)public returns (bool ok);\n  function approve(address spender, uint256 value)public returns (bool ok);\n  function transfer(address to, uint256 value)public returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BNTE is ERC20 { \n    using SafeMath for uint256;\n    //--- Token configurations ----// \n    string public constant name = \"Bountie\";\n    string public constant symbol = \"BNTE\";\n    uint8 public constant decimals = 18;\n    uint256 public constant basePrice = 6500;\n    uint public maxCap = 20000 ether;\n    \n    //--- Token allocations -------//\n    uint256 public _totalsupply;\n    uint256 public mintedTokens;\n    uint256 public ETHcollected;\n\n    //--- Address -----------------//\n    address public owner;\n    address public ethFundMain;\n    address public novumAddress;\n   \n    //--- Milestones --------------//\n    uint256 public presale1_startdate = 1537675200; // 23-9-2018\n    uint256 public presale2_startdate = 1538712000; // 5-10-2018\n    uint256 public presale3_startdate = 1539662400; // 16-10-2018\n    uint256 public ico_startdate = 1540612800; // 27-10-2018\n    uint256 public ico_enddate = 1541563200; // 7-11-2018\n    \n    //--- Variables ---------------//\n    bool public lockstatus = true;\n    bool public stopped = false;\n    \n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n    event Mint(address indexed from, address indexed to, uint256 amount);\n    event Burn(address indexed from, uint256 amount);\n    \n    //ok\n    modifier onlyOwner() {\n        require (msg.sender == owner);\n        _;\n    }\n\n    //ok\n    modifier onlyManual() {\n        require(now < ico_enddate);\n        _;\n    }\n\n    //ok\n    modifier onlyICO() {\n        require(now >= presale1_startdate && now < ico_enddate);\n        _;\n    }\n\n    //ok\n    modifier onlyFinishedICO() {\n        require(now >= ico_enddate);\n        _;\n    }\n    \n    //ok\n    constructor() public\n    {\n        owner = msg.sender;\n        ethFundMain = 0xDEe3a6b14ef8E21B9df09a059186292C9472045D;\n        novumAddress = 0xDEe3a6b14ef8E21B9df09a059186292C9472045D;\n    }\n\n    //ok\n    function totalSupply() public view returns (uint256 total_Supply) {\n        total_Supply = _totalsupply;\n    }\n    \n    //ok\n    function balanceOf(address _owner)public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    //ok\n    function transferFrom( address _from, address _to, uint256 _amount ) public onlyFinishedICO returns (bool success)  {\n        require( _to != 0x0);\n        require(!lockstatus);\n        require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\n        balances[_from] = (balances[_from]).sub(_amount);\n        allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\n        balances[_to] = (balances[_to]).add(_amount);\n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n    \n    //ok\n    function approve(address _spender, uint256 _amount)public onlyFinishedICO returns (bool success)  {\n        require(!lockstatus);\n        require( _spender != 0x0);\n        allowed[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n  \n    //ok\n    function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\n        require( _owner != 0x0 && _spender !=0x0);\n        return allowed[_owner][_spender];\n    }\n\n    //ok\n    function transfer(address _to, uint256 _amount)public onlyFinishedICO returns (bool success) {\n        require(!lockstatus);\n        require( _to != 0x0);\n        require(balances[msg.sender] >= _amount && _amount >= 0);\n        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\n        balances[_to] = (balances[_to]).add(_amount);\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n    //ok\n    function burn(uint256 value) public onlyOwner returns (bool success) {\n        uint256 _value = value * 10 ** 18;\n        require(balances[msg.sender] >= _value);   \n        balances[msg.sender] = (balances[msg.sender]).sub(_value);            \n        _totalsupply = _totalsupply.sub(_value);                     \n        emit Burn(msg.sender, _value);\n        return true;\n    }\n    //ok\n    // function burnFrom(address _from, uint256 value) public onlyOwner returns (bool success) {\n    //     uint256 _value = value * 10 ** 18;\n    //     require(balances[_from] >= _value);                \n    //     require(_value <= allowed[_from][msg.sender]);    \n    //     balances[_from] = (balances[_from]).sub(_value);                         \n    //     allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_value);             \n    //     _totalsupply = _totalsupply.sub(_value);                             \n    //     emit Burn(_from, _value);\n    //     return true;\n    // }\n\n    //ok\n    function stopTransferToken() external onlyOwner onlyFinishedICO {\n        require(!lockstatus);\n        lockstatus = true;\n    }\n\n    //ok\n    function startTransferToken() external onlyOwner onlyFinishedICO {\n        require(lockstatus);\n        lockstatus = false;\n    }\n\n    //ok\n    function manualMint(address receiver, uint256 _tokenQuantity) external onlyOwner onlyManual {\n        uint256 tokenQuantity = _tokenQuantity * 10 ** 18;\n        uint256 tokenPrice = calculatePrice();\n        uint256 ethAmount = tokenQuantity.div(tokenPrice);\n        ETHcollected = ETHcollected.add(ethAmount);\n        require(ETHcollected <= maxCap);\n        mintContract(owner, receiver, tokenQuantity);\n    }\n\n    //ok\n    function () public payable onlyICO {\n        require(msg.value != 0 && msg.sender != 0x0);\n        require(!stopped && msg.sender != owner);\n        uint256 tokenPrice = calculatePrice();\n        uint256 tokenQuantity = (msg.value).mul(tokenPrice);\n        ETHcollected = ETHcollected.add(msg.value);\n        require(ETHcollected <= maxCap);\n        mintContract(address(this), msg.sender, tokenQuantity);\n    }\n\n    //ok\n    function mintContract(address from, address receiver, uint256 tokenQuantity) private {\n        require(tokenQuantity > 0);\n        mintedTokens = mintedTokens.add(tokenQuantity);\n        uint256 novumShare = tokenQuantity * 4 / 65;\n        uint256 userManagement = tokenQuantity * 31 / 65;\n        balances[novumAddress] = balances[novumAddress].add(novumShare);\n        balances[owner] = balances[owner].add(userManagement);\n        _totalsupply = _totalsupply.add(tokenQuantity * 100 / 65);\n        balances[receiver] = balances[receiver].add(tokenQuantity);\n        emit Mint(from, receiver, tokenQuantity);\n        emit Transfer(0, receiver, tokenQuantity);\n        emit Mint(from, novumAddress, novumShare);\n        emit Transfer(0, novumAddress, novumShare);\n        emit Mint(from, owner, userManagement);\n        emit Transfer(0, owner, userManagement);\n    }\n    \n    //ok\n    function calculatePrice() private view returns (uint256){\n        uint256 price_token = basePrice;\n         \n        if(now < presale1_startdate) {\n            require(ETHcollected < 10000 ether);\n            price_token = basePrice * 6 / 5;   \n        }\n        else  if (now < presale2_startdate) {\n            require(ETHcollected < 11739 ether);\n            price_token = basePrice * 23 / 20;   \n        }\n        else if (now < presale3_startdate) {\n            require(ETHcollected < 13557 ether);\n            price_token = basePrice * 11 / 10;\n        }\n        else if (now < ico_startdate) {\n            require(ETHcollected < 15462 ether);\n            price_token = basePrice * 21 / 20;\n        }\n        else {\n            require(ETHcollected < maxCap);\n            price_token = basePrice;\n        }\n        return price_token;\n    }\n    \n    //ok\n    function CrowdSale_Halt() external onlyOwner onlyICO {\n        require(!stopped);\n        stopped = true;\n    }\n\n    //ok\n    function CrowdSale_Resume() external onlyOwner onlyICO {\n        require(stopped);\n        stopped = false;\n    }\n    //ok\n    function CrowdSale_Change_ReceiveWallet(address New_Wallet_Address) external onlyOwner {\n        require(New_Wallet_Address != 0x0);\n        ethFundMain = New_Wallet_Address;\n    }\n\n    //ok\n\tfunction CrowdSale_AssignOwnership(address newOwner) public onlyOwner {\n\t    require(newOwner != 0x0);\n\t    balances[newOwner] = (balances[newOwner]).add(balances[owner]);\n\t    balances[owner] = 0;\n\t    owner = newOwner;\n\t    emit Transfer(msg.sender, newOwner, balances[newOwner]);\n\t}\n\n    //ok\n    function forwardFunds() external onlyOwner { \n        address myAddress = this;\n        ethFundMain.transfer(myAddress.balance);\n    }\n\n    //ok\n    // function increaseMaxCap(uint256 value) public onlyOwner returns(bool) {\n    //     maxCap = maxCap.add(value * 10 ** 18);\n    //     return true;\n    // }\n    \n    //ok\n    function modify_NovumAddress(address newAddress) public onlyOwner returns(bool) {\n        require(newAddress != 0x0 && novumAddress != newAddress);\n        uint256 novumBalance = balances[novumAddress];\n        address oldAddress = novumAddress;\n        balances[newAddress] = (balances[newAddress]).add(novumBalance);\n        balances[novumAddress] = 0;\n        novumAddress = newAddress;\n        emit Transfer(oldAddress, newAddress, novumBalance);\n        return true;\n    }\n    //ok\n    // function modify_Presale1StartDate(uint256 newDate) public onlyOwner returns(bool) {\n    //     presale1_startdate = newDate;\n    //     return true;\n    // }\n    // //ok\n    // function modify_Presale2StartDate(uint256 newDate) public onlyOwner returns(bool) {\n    //     presale2_startdate = newDate;\n    //     return true;\n    // }\n    // //ok\n    // function modify_Presale3StartDate(uint256 newDate) public onlyOwner returns(bool) {\n    //     presale3_startdate = newDate;\n    //     return true;\n    // }\n    // //ok\n    // function modify_ICOStartDate(uint256 newDate) public onlyOwner returns(bool) {\n    //     ico_startdate = newDate;\n    //     return true;\n    // }\n    // //ok\n    // function modify_ICOEndDate(uint256 newDate) public onlyOwner returns(bool) {\n    //     ico_enddate = newDate;\n    //     return true;\n    // }\n}",
  "bytecode": "608060405269043c33c1937564800000600055635ba70fc0600755635bb6e1c0600855635bc56240600955635bd3e2c0600a55635be26340600b556001600c60006101000a81548160ff0219169083151502179055506000600c60016101000a81548160ff02191690831515021790555034801561007c57600080fd5b5033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073dee3a6b14ef8e21b9df09a059186292c9472045d600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073dee3a6b14ef8e21b9df09a059186292c9472045d600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061297e806101776000396000f3006080604052600436106101ac576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146102d2578063095ea7b31461036257806318160ddd146103c7578063203a318f146103f257806321424e7d1461041d57806323548b8b1461044857806323b872dd1461047357806326843251146104f8578063313ce5671461052357806342966c68146105545780634f6c33721461059957806355f413c9146105b057806355f6a412146105db578063658f2ad6146106365780636bf82d741461064d57806370a08231146106a457806375f12b21146106fb5780637d4d31281461072a57806386f7313d146107415780638d75fe051461076c5780638da5cb5b1461079757806395d89b41146107ee5780639d7352861461087e5780639f62e20214610895578063a393dc44146108d8578063a9059cbb14610903578063b1432cc314610968578063c35c3265146109ab578063c7876ea414610a02578063d344e01b14610a2d578063dd62ed3e14610a44578063e4c5ff4614610abb578063e754a4e514610b08578063f094768014610b33575b60008060075442101580156101c25750600b5442105b15156101cd57600080fd5b600034141580156101f5575060003373ffffffffffffffffffffffffffffffffffffffff1614155b151561020057600080fd5b600c60019054906101000a900460ff1615801561026b5750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b151561027657600080fd5b61027e610b62565b91506102938234610c8090919063ffffffff16565b90506102aa34600354610cbb90919063ffffffff16565b600381905550600054600354111515156102c357600080fd5b6102ce303383610cd9565b5050005b3480156102de57600080fd5b506102e7611249565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561032757808201518184015260208101905061030c565b50505050905090810190601f1680156103545780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561036e57600080fd5b506103ad600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611282565b604051808215151515815260200191505060405180910390f35b3480156103d357600080fd5b506103dc6113c7565b6040518082815260200191505060405180910390f35b3480156103fe57600080fd5b506104076113d1565b6040518082815260200191505060405180910390f35b34801561042957600080fd5b506104326113d7565b6040518082815260200191505060405180910390f35b34801561045457600080fd5b5061045d6113dd565b6040518082815260200191505060405180910390f35b34801561047f57600080fd5b506104de600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113e3565b604051808215151515815260200191505060405180910390f35b34801561050457600080fd5b5061050d6117c4565b6040518082815260200191505060405180910390f35b34801561052f57600080fd5b506105386117ca565b604051808260ff1660ff16815260200191505060405180910390f35b34801561056057600080fd5b5061057f600480360381019080803590602001909291905050506117cf565b604051808215151515815260200191505060405180910390f35b3480156105a557600080fd5b506105ae611991565b005b3480156105bc57600080fd5b506105c5611a44565b6040518082815260200191505060405180910390f35b3480156105e757600080fd5b5061061c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a4a565b604051808215151515815260200191505060405180910390f35b34801561064257600080fd5b5061064b611d61565b005b34801561065957600080fd5b50610662611e13565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106b057600080fd5b506106e5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e39565b6040518082815260200191505060405180910390f35b34801561070757600080fd5b50610710611e82565b604051808215151515815260200191505060405180910390f35b34801561073657600080fd5b5061073f611e95565b005b34801561074d57600080fd5b50610756611f3a565b6040518082815260200191505060405180910390f35b34801561077857600080fd5b50610781611f40565b6040518082815260200191505060405180910390f35b3480156107a357600080fd5b506107ac611f46565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107fa57600080fd5b50610803611f6c565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610843578082015181840152602081019050610828565b50505050905090810190601f1680156108705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561088a57600080fd5b50610893611fa5565b005b3480156108a157600080fd5b506108d6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612089565b005b3480156108e457600080fd5b506108ed612350565b6040518082815260200191505060405180910390f35b34801561090f57600080fd5b5061094e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612356565b604051808215151515815260200191505060405180910390f35b34801561097457600080fd5b506109a9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061259f565b005b3480156109b757600080fd5b506109c0612665565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a0e57600080fd5b50610a1761268b565b6040518082815260200191505060405180910390f35b348015610a3957600080fd5b50610a42612691565b005b348015610a5057600080fd5b50610aa5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612737565b6040518082815260200191505060405180910390f35b348015610ac757600080fd5b50610b06600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612806565b005b348015610b1457600080fd5b50610b1d612905565b6040518082815260200191505060405180910390f35b348015610b3f57600080fd5b50610b4861290b565b604051808215151515815260200191505060405180910390f35b6000806119649050600754421015610ba75769021e19e0c9bab2400000600354101515610b8e57600080fd5b6005600661196402811515610b9f57fe5b049050610c79565b600854421015610be45769027c5f59e01cc68c0000600354101515610bcb57600080fd5b6014601761196402811515610bdc57fe5b049050610c78565b600954421015610c21576902deed2b57ef82b40000600354101515610c0857600080fd5b600a600b61196402811515610c1957fe5b049050610c77565b600a54421015610c5e57690346325ae6d021d80000600354101515610c4557600080fd5b6014601561196402811515610c5657fe5b049050610c76565b600054600354101515610c7057600080fd5b61196490505b5b5b5b8091505090565b6000806000841415610c955760009150610cb4565b8284029050828482811515610ca657fe5b04141515610cb057fe5b8091505b5092915050565b6000808284019050838110151515610ccf57fe5b8091505092915050565b600080600083111515610ceb57600080fd5b610d0083600254610cbb90919063ffffffff16565b600281905550604160048402811515610d1557fe5b0491506041601f8402811515610d2757fe5b049050610d9e82600d6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610cbb90919063ffffffff16565b600d6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e7781600d6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610cbb90919063ffffffff16565b600d6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f00604160648502811515610eee57fe5b04600154610cbb90919063ffffffff16565b600181905550610f5883600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610cbb90919063ffffffff16565b600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f8856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f8846040518082815260200191505060405180910390a3600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f8836040518082815260200191505060405180910390a3600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050505050565b6040805190810160405280600781526020017f426f756e7469650000000000000000000000000000000000000000000000000081525081565b6000600b54421015151561129557600080fd5b600c60009054906101000a900460ff161515156112b157600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff16141515156112d757600080fd5b81600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600154905090565b600a5481565b60035481565b60005481565b6000600b5442101515156113f657600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff161415151561141c57600080fd5b600c60009054906101000a900460ff1615151561143857600080fd5b81600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015611503575081600e60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015611510575060008210155b151561151b57600080fd5b61156d82600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461291e90919063ffffffff16565b600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061163f82600e60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461291e90919063ffffffff16565b600e60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061171182600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610cbb90919063ffffffff16565b600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60075481565b601281565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561182e57600080fd5b670de0b6b3a76400008302905080600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561188957600080fd5b6118db81600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461291e90919063ffffffff16565b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506119338160015461291e90919063ffffffff16565b6001819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a26001915050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119ed57600080fd5b6007544210158015611a005750600b5442105b1515611a0b57600080fd5b600c60019054906101000a900460ff16151515611a2757600080fd5b6001600c60016101000a81548160ff021916908315150217905550565b60095481565b6000806000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611aab57600080fd5b60008473ffffffffffffffffffffffffffffffffffffffff1614158015611b2057508373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1515611b2b57600080fd5b600d6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050611c0682600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610cbb90919063ffffffff16565b600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600d6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555083600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600192505050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611dbd57600080fd5b6007544210158015611dd05750600b5442105b1515611ddb57600080fd5b600c60019054906101000a900460ff161515611df657600080fd5b6000600c60016101000a81548160ff021916908315150217905550565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600c60019054906101000a900460ff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ef157600080fd5b600b544210151515611f0257600080fd5b600c60009054906101000a900460ff161515611f1d57600080fd5b6000600c60006101000a81548160ff021916908315150217905550565b600b5481565b60025481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600481526020017f424e54450000000000000000000000000000000000000000000000000000000081525081565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561200357600080fd5b309050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc8273ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015612085573d6000803e3d6000fd5b5050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156120e557600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff161415151561210b57600080fd5b6121be600d6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610cbb90919063ffffffff16565b600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600d6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a350565b60015481565b6000600b54421015151561236957600080fd5b600c60009054906101000a900460ff1615151561238557600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff16141515156123ab57600080fd5b81600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156123fb575060008210155b151561240657600080fd5b61245882600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461291e90919063ffffffff16565b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506124ed82600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610cbb90919063ffffffff16565b600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156125fb57600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff161415151561262157600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61196481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156126ed57600080fd5b600b5442101515156126fe57600080fd5b600c60009054906101000a900460ff1615151561271a57600080fd5b6001600c60006101000a81548160ff021916908315150217905550565b6000808373ffffffffffffffffffffffffffffffffffffffff1614158015612776575060008273ffffffffffffffffffffffffffffffffffffffff1614155b151561278157600080fd5b600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561286757600080fd5b600b544210151561287757600080fd5b670de0b6b3a76400008402925061288c610b62565b91506128a1828461293790919063ffffffff16565b90506128b881600354610cbb90919063ffffffff16565b600381905550600054600354111515156128d157600080fd5b6128fe600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168685610cd9565b5050505050565b60085481565b600c60009054906101000a900460ff1681565b600082821115151561292c57fe5b818303905092915050565b600080828481151561294557fe5b04905080915050929150505600a165627a7a72305820793667bd6498be2bc025b42eb3d1505c2a1d5545b587149f9771efb7f93cc6590029"
}