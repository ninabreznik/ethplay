{
  "address": "0x912b8f85e28b9ec196b48228159e2f13546836e6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ADXExchange",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-23\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract Drainable is Ownable {\n\tfunction withdrawToken(address tokenaddr) \n\t\tonlyOwner\n\t\tpublic\n\t{\n\t\tERC20 token = ERC20(tokenaddr);\n\t\tuint bal = token.balanceOf(address(this));\n\t\ttoken.transfer(msg.sender, bal);\n\t}\n\n\tfunction withdrawEther() \n\t\tonlyOwner\n\t\tpublic\n\t{\n\t    require(msg.sender.send(this.balance));\n\t}\n}\n\ncontract ADXExchangeInterface {\n\t// events\n\tevent LogBidAccepted(bytes32 bidId, address advertiser, bytes32 adunit, address publisher, bytes32 adslot, uint acceptedTime);\n\tevent LogBidCanceled(bytes32 bidId);\n\tevent LogBidExpired(bytes32 bidId);\n\tevent LogBidConfirmed(bytes32 bidId, address advertiserOrPublisher, bytes32 report);\n\tevent LogBidCompleted(bytes32 bidId, bytes32 advReport, bytes32 pubReport);\n\n\tevent LogDeposit(address _user, uint _amnt);\n\tevent LogWithdrawal(address _user, uint _amnt);\n\n\tfunction acceptBid(address _advertiser, bytes32 _adunit, uint _opened, uint _target, uint _rewardAmount, uint _timeout, bytes32 _adslot, uint8 v, bytes32 r, bytes32 s, uint8 sigMode) public;\n\tfunction cancelBid(bytes32 _adunit, uint _opened, uint _target, uint _rewardAmount, uint _timeout, uint8 v, bytes32 r, bytes32 s, uint8 sigMode) public;\n\tfunction giveupBid(bytes32 _bidId) public;\n\tfunction refundBid(bytes32 _bidId) public;\n\tfunction verifyBid(bytes32 _bidId, bytes32 _report) public;\n\n\tfunction deposit(uint _amount) public;\n\tfunction withdraw(uint _amount) public;\n\n\t// constants \n\tfunction getBid(bytes32 _bidId) \n\t\tconstant external \n\t\treturns (\n\t\t\tuint, uint, uint, uint, uint, \n\t\t\t// advertiser (advertiser, ad unit, confiration)\n\t\t\taddress, bytes32, bytes32,\n\t\t\t// publisher (publisher, ad slot, confirmation)\n\t\t\taddress, bytes32, bytes32\n\t\t);\n\n\tfunction getBalance(address _user)\n\t\tconstant\n\t\texternal\n\t\treturns (uint, uint);\n\n\tfunction getBidID(address _advertiser, bytes32 _adunit, uint _opened, uint _target, uint _amount, uint _timeout)\n\t\tconstant\n\t\tpublic\n\t\treturns (bytes32);\n}\n\n\ncontract ADXExchange is ADXExchangeInterface, Drainable {\n\tstring public name = \"AdEx Exchange\";\n\n\tERC20 public token;\n\n\tuint public maxTimeout = 365 days;\n\n \tmapping (address => uint) balances;\n\n \t// escrowed on bids\n \tmapping (address => uint) onBids; \n\n \t// bid info\n\tmapping (bytes32 => Bid) bids;\n\tmapping (bytes32 => BidState) bidStates;\n\n\n\tenum BidState { \n\t\tDoesNotExist, // default state\n\n\t\t// There is no 'Open' state - the Open state is just a signed message that you're willing to place such a bid\n\t\tAccepted, // in progress\n\n\t\t// the following states MUST unlock the ADX amount (return to advertiser)\n\t\t// fail states\n\t\tCanceled,\n\t\tExpired,\n\n\t\t// success states\n\t\tCompleted\n\t}\n\n\tstruct Bid {\n\t\t// Links on advertiser side\n\t\taddress advertiser;\n\t\tbytes32 adUnit;\n\n\t\t// Links on publisher side\n\t\taddress publisher;\n\t\tbytes32 adSlot;\n\n\t\t// when was it accepted by a publisher\n\t\tuint acceptedTime;\n\n\t\t// Token reward amount\n\t\tuint amount;\n\n\t\t// Requirements\n\t\tuint target; // how many impressions/clicks/conversions have to be done\n\t\tuint timeout; // the time to execute\n\n\t\t// Confirmations from both sides; any value other than 0 is vconsidered as confirm, but this should usually be an IPFS hash to a final report\n\t\tbytes32 publisherConfirmation;\n\t\tbytes32 advertiserConfirmation;\n\t}\n\n\t// Schema hash \n\t// keccak256(_advertiser, _adunit, _opened, _target, _amount, _timeout, this)\n\tbytes32 constant public SCHEMA_HASH = keccak256(\n\t\t\"address Advertiser\",\n\t\t\"bytes32 Ad Unit ID\",\n\t\t\"uint Opened\",\n\t\t\"uint Target\",\n\t\t\"uint Amount\",\n\t\t\"uint Timeout\",\n\t\t\"address Exchange\"\n\t);\n\n\t//\n\t// MODIFIERS\n\t//\n\tmodifier onlyBidAdvertiser(bytes32 _bidId) {\n\t\trequire(msg.sender == bids[_bidId].advertiser);\n\t\t_;\n\t}\n\n\tmodifier onlyBidPublisher(bytes32 _bidId) {\n\t\trequire(msg.sender == bids[_bidId].publisher);\n\t\t_;\n\t}\n\n\tmodifier onlyBidState(bytes32 _bidId, BidState _state) {\n\t\trequire(bidStates[_bidId] == _state);\n\t\t_;\n\t}\n\n\t// Functions\n\n\tfunction ADXExchange(address _token)\n\t\tpublic\n\t{\n\t\ttoken = ERC20(_token);\n\t}\n\n\t//\n\t// Bid actions\n\t// \n\n\t// the bid is accepted by the publisher\n\tfunction acceptBid(address _advertiser, bytes32 _adunit, uint _opened, uint _target, uint _amount, uint _timeout, bytes32 _adslot, uint8 v, bytes32 r, bytes32 s, uint8 sigMode)\n\t\tpublic\n\t{\n\t\trequire(_amount > 0);\n\n\t\t// It can be proven that onBids will never exceed balances which means this can't underflow\n\t\t// SafeMath can't be used here because of the stack depth\n\t\trequire(_amount <= (balances[_advertiser] - onBids[_advertiser]));\n\n\t\t// _opened acts as a nonce here\n\t\tbytes32 bidId = getBidID(_advertiser, _adunit, _opened, _target, _amount, _timeout);\n\n\t\trequire(bidStates[bidId] == BidState.DoesNotExist);\n\n\t\trequire(didSign(_advertiser, bidId, v, r, s, sigMode));\n\t\t\n\t\t// advertier and publisher cannot be the same\n\t\trequire(_advertiser != msg.sender);\n\n\t\tBid storage bid = bids[bidId];\n\n\t\tbid.target = _target;\n\t\tbid.amount = _amount;\n\n\t\t// it is pretty much mandatory for a bid to have a timeout, else tokens can be stuck forever\n\t\tbid.timeout = _timeout > 0 ? _timeout : maxTimeout;\n\t\trequire(bid.timeout <= maxTimeout);\n\n\t\tbid.advertiser = _advertiser;\n\t\tbid.adUnit = _adunit;\n\n\t\tbid.publisher = msg.sender;\n\t\tbid.adSlot = _adslot;\n\n\t\tbid.acceptedTime = now;\n\n\t\tbidStates[bidId] = BidState.Accepted;\n\n\t\tonBids[_advertiser] += _amount;\n\n\t\t// static analysis?\n\t\t// require(onBids[_advertiser] <= balances[advertiser]);\n\n\t\tLogBidAccepted(bidId, _advertiser, _adunit, msg.sender, _adslot, bid.acceptedTime);\n\t}\n\n\t// The bid is canceled by the advertiser\n\tfunction cancelBid(bytes32 _adunit, uint _opened, uint _target, uint _amount, uint _timeout, uint8 v, bytes32 r, bytes32 s, uint8 sigMode)\n\t\tpublic\n\t{\n\t\t// _opened acts as a nonce here\n\t\tbytes32 bidId = getBidID(msg.sender, _adunit, _opened, _target, _amount, _timeout);\n\n\t\trequire(bidStates[bidId] == BidState.DoesNotExist);\n\n\t\trequire(didSign(msg.sender, bidId, v, r, s, sigMode));\n\n\t\tbidStates[bidId] = BidState.Canceled;\n\n\t\tLogBidCanceled(bidId);\n\t}\n\n\t// The bid is canceled by the publisher\n\tfunction giveupBid(bytes32 _bidId)\n\t\tpublic\n\t\tonlyBidPublisher(_bidId)\n\t\tonlyBidState(_bidId, BidState.Accepted)\n\t{\n\t\tBid storage bid = bids[_bidId];\n\n\t\tbidStates[_bidId] = BidState.Canceled;\n\n\t\tonBids[bid.advertiser] -= bid.amount;\n\t\n\t\tLogBidCanceled(_bidId);\n\t}\n\n\n\t// This can be done if a bid is accepted, but expired\n\t// This is essentially the protection from never settling on verification, or from publisher not executing the bid within a reasonable time\n\tfunction refundBid(bytes32 _bidId)\n\t\tpublic\n\t\tonlyBidAdvertiser(_bidId)\n\t\tonlyBidState(_bidId, BidState.Accepted)\n\t{\n\t\tBid storage bid = bids[_bidId];\n\n \t\t// require that we're past the point of expiry\n\t\trequire(now > SafeMath.add(bid.acceptedTime, bid.timeout));\n\n\t\tbidStates[_bidId] = BidState.Expired;\n\n\t\tonBids[bid.advertiser] -= bid.amount;\n\n\t\tLogBidExpired(_bidId);\n\t}\n\n\n\t// both publisher and advertiser have to call this for a bid to be considered verified\n\tfunction verifyBid(bytes32 _bidId, bytes32 _report)\n\t\tpublic\n\t\tonlyBidState(_bidId, BidState.Accepted)\n\t{\n\t\tBid storage bid = bids[_bidId];\n\n\t\trequire(_report != 0);\n\t\trequire(bid.publisher == msg.sender || bid.advertiser == msg.sender);\n\n\t\tif (bid.publisher == msg.sender) {\n\t\t\trequire(bid.publisherConfirmation == 0);\n\t\t\tbid.publisherConfirmation = _report;\n\t\t}\n\n\t\tif (bid.advertiser == msg.sender) {\n\t\t\trequire(bid.advertiserConfirmation == 0);\n\t\t\tbid.advertiserConfirmation = _report;\n\t\t}\n\n\t\tLogBidConfirmed(_bidId, msg.sender, _report);\n\n\t\tif (bid.advertiserConfirmation != 0 && bid.publisherConfirmation != 0) {\n\t\t\tbidStates[_bidId] = BidState.Completed;\n\n\t\t\tonBids[bid.advertiser] = SafeMath.sub(onBids[bid.advertiser], bid.amount);\n\t\t\tbalances[bid.advertiser] = SafeMath.sub(balances[bid.advertiser], bid.amount);\n\t\t\tbalances[bid.publisher] = SafeMath.add(balances[bid.publisher], bid.amount);\n\n\t\t\tLogBidCompleted(_bidId, bid.advertiserConfirmation, bid.publisherConfirmation);\n\t\t}\n\t}\n\n\t// Deposit and withdraw\n\tfunction deposit(uint _amount)\n\t\tpublic\n\t{\n\t\tbalances[msg.sender] = SafeMath.add(balances[msg.sender], _amount);\n\t\trequire(token.transferFrom(msg.sender, address(this), _amount));\n\n\t\tLogDeposit(msg.sender, _amount);\n\t}\n\n\tfunction withdraw(uint _amount)\n\t\tpublic\n\t{\n\t\tuint available = SafeMath.sub(balances[msg.sender], onBids[msg.sender]);\n\t\trequire(_amount <= available);\n\n\t\tbalances[msg.sender] = SafeMath.sub(balances[msg.sender], _amount);\n\t\trequire(token.transfer(msg.sender, _amount));\n\n\t\tLogWithdrawal(msg.sender, _amount);\n\t}\n\n\tfunction didSign(address addr, bytes32 hash, uint8 v, bytes32 r, bytes32 s, uint8 mode)\n\t\tpublic\n\t\tpure\n\t\treturns (bool)\n\t{\n\t\tbytes32 message = hash;\n\t\t\n\t\tif (mode == 1) {\n\t\t\t// Geth mode\n\t\t\tmessage = keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash);\n\t\t} else if (mode == 2) {\n\t\t\t// Trezor mode\n\t\t\tmessage = keccak256(\"\\x19Ethereum Signed Message:\\n\\x20\", hash);\n\t\t}\n\n\t\treturn ecrecover(message, v, r, s) == addr;\n\t}\n\n\t//\n\t// Public constant functions\n\t//\n\tfunction getBid(bytes32 _bidId) \n\t\tconstant\n\t\texternal\n\t\treturns (\n\t\t\tuint, uint, uint, uint, uint, \n\t\t\t// advertiser (advertiser, ad unit, confiration)\n\t\t\taddress, bytes32, bytes32,\n\t\t\t// publisher (publisher, ad slot, confirmation)\n\t\t\taddress, bytes32, bytes32\n\t\t)\n\t{\n\t\tBid storage bid = bids[_bidId];\n\t\treturn (\n\t\t\tuint(bidStates[_bidId]), bid.target, bid.timeout, bid.amount, bid.acceptedTime,\n\t\t\tbid.advertiser, bid.adUnit, bid.advertiserConfirmation,\n\t\t\tbid.publisher, bid.adSlot, bid.publisherConfirmation\n\t\t);\n\t}\n\n\tfunction getBalance(address _user)\n\t\tconstant\n\t\texternal\n\t\treturns (uint, uint)\n\t{\n\t\treturn (balances[_user], onBids[_user]);\n\t}\n\n\tfunction getBidID(address _advertiser, bytes32 _adunit, uint _opened, uint _target, uint _amount, uint _timeout)\n\t\tconstant\n\t\tpublic\n\t\treturns (bytes32)\n\t{\n\t\treturn keccak256(\n\t\t\tSCHEMA_HASH,\n\t\t\tkeccak256(_advertiser, _adunit, _opened, _target, _amount, _timeout, this)\n\t\t);\n\t}\n}",
  "bytecode": "60606040526040805190810160405280600d81526020017f416445782045786368616e67650000000000000000000000000000000000000081525060019080519060200190620000519291906200010b565b506301e1338060035534156200006657600080fd5b6040516020806200284083398101604052808051906020019091905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001ba565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200014e57805160ff19168380011785556200017f565b828001600101855582156200017f579182015b828111156200017e57825182559160200191906001019062000161565b5b5090506200018e919062000192565b5090565b620001b791905b80821115620001b357600081600090555060010162000199565b5090565b90565b61267680620001ca6000396000f300606060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461010c57806319c55cea1461019a5780632398b8fc146102175780632e1a7d4d1461024857806335bb03981461026b578063427163dc146102fb578063617747041461032257806368b85aa5146103565780637362377b1461037f578063804fe7ac14610394578063894760691461043d5780638da5cb5b1461047657806391704e1e146104cb578063b03f75a5146105c4578063b6b55f25146105eb578063c2427f761461060e578063f2fde38b14610694578063f8b2cb4f146106cd578063fc0c546a14610721575b600080fd5b341561011757600080fd5b61011f610776565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015f578082015181840152602081019050610144565b50505050905090810190601f16801561018c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101a557600080fd5b61021560048080356000191690602001909190803590602001909190803590602001909190803590602001909190803590602001909190803560ff16906020019091908035600019169060200190919080356000191690602001909190803560ff16906020019091905050610814565b005b341561022257600080fd5b61022a610914565b60405180826000191660001916815260200191505060405180910390f35b341561025357600080fd5b6102696004808035906020019091905050610a3d565b005b341561027657600080fd5b6102e1600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080356000191690602001909190803560ff16906020019091908035600019169060200190919080356000191690602001909190803560ff16906020019091905050610cc6565b604051808215151515815260200191505060405180910390f35b341561030657600080fd5b610320600480803560001916906020019091905050610e3d565b005b341561032d57600080fd5b6103546004808035600019169060200190919080356000191690602001909190505061103b565b005b341561036157600080fd5b61036961165c565b6040518082815260200191505060405180910390f35b341561038a57600080fd5b610392611662565b005b341561039f57600080fd5b61043b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035600019169060200190919080359060200190919080359060200190919080359060200190919080359060200190919080356000191690602001909190803560ff16906020019091908035600019169060200190919080356000191690602001909190803560ff16906020019091905050611716565b005b341561044857600080fd5b610474600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611adb565b005b341561048157600080fd5b610489611cc8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104d657600080fd5b6104f0600480803560001916906020019091905050611ced565b604051808c81526020018b81526020018a81526020018981526020018881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001866000191660001916815260200185600019166000191681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001836000191660001916815260200182600019166000191681526020019b50505050505050505050505060405180910390f35b34156105cf57600080fd5b6105e9600480803560001916906020019091905050611de8565b005b34156105f657600080fd5b61060c6004808035906020019091905050611fc7565b005b341561061957600080fd5b610676600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035600019169060200190919080359060200190919080359060200190919080359060200190919080359060200190919050506121e8565b60405180826000191660001916815260200191505060405180910390f35b341561069f57600080fd5b6106cb600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061240c565b005b34156106d857600080fd5b610704600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612561565b604051808381526020018281526020019250505060405180910390f35b341561072c57600080fd5b6107346125ed565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561080c5780601f106107e15761010080835404028352916020019161080c565b820191906000526020600020905b8154815290600101906020018083116107ef57829003601f168201915b505050505081565b6000610824338b8b8b8b8b6121e8565b90506000600481111561083357fe5b60076000836000191660001916815260200190815260200160002060009054906101000a900460ff16600481111561086757fe5b14151561087357600080fd5b610881338287878787610cc6565b151561088c57600080fd5b600260076000836000191660001916815260200190815260200160002060006101000a81548160ff021916908360048111156108c457fe5b02179055507fcea198c8b3f6e209829948ae10260045612e4695284ac241780afe54f155baaf8160405180826000191660001916815260200191505060405180910390a150505050505050505050565b60405180807f6164647265737320416476657274697365720000000000000000000000000000815250601201807f6279746573333220416420556e69742049440000000000000000000000000000815250601201807f75696e74204f70656e6564000000000000000000000000000000000000000000815250600b01807f75696e7420546172676574000000000000000000000000000000000000000000815250600b01807f75696e7420416d6f756e74000000000000000000000000000000000000000000815250600b01807f75696e742054696d656f75740000000000000000000000000000000000000000815250600c01807f616464726573732045786368616e6765000000000000000000000000000000008152506010019050604051809103902081565b6000610ac7600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612613565b9050808211151515610ad857600080fd5b610b21600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612613565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610c3157600080fd5b6102c65a03f11515610c4257600080fd5b505050604051805190501515610c5757600080fd5b7fb4214c8c54fc7442f36d3682f59aebaf09358a4431835b30efb29d52cf9e1e913383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b60008086905060018360ff161415610d25578660405180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01826000191660001916815260200191505060405180910390209050610d7b565b60028360ff161415610d7a578660405180807f19457468657265756d205369676e6564204d6573736167653a0a200000000000815250601b018260001916600019168152602001915050604051809103902090505b5b8773ffffffffffffffffffffffffffffffffffffffff16600182888888604051600081526020016040526000604051602001526040518085600019166000191681526020018460ff1660ff16815260200183600019166000191681526020018260001916600019168152602001945050505050602060405160208103908084039060008661646e5a03f11515610e1057600080fd5b50506020604051035173ffffffffffffffffffffffffffffffffffffffff16149150509695505050505050565b60008160066000826000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610eb857600080fd5b826001806004811115610ec757fe5b60076000846000191660001916815260200190815260200160002060009054906101000a900460ff166004811115610efb57fe5b141515610f0757600080fd5b6006600086600019166000191681526020019081526020016000209350610f368460040154856007015461262c565b42111515610f4357600080fd5b600360076000876000191660001916815260200190815260200160002060006101000a81548160ff02191690836004811115610f7b57fe5b02179055508360050154600560008660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055507fd466a04676ef962b3f19270997af97009651e30f053a6bfa17bf68141a46bc008560405180826000191660001916815260200191505060405180910390a15050505050565b600082600180600481111561104c57fe5b60076000846000191660001916815260200190815260200160002060009054906101000a900460ff16600481111561108057fe5b14151561108c57600080fd5b600660008660001916600019168152602001908152602001600020925060006001028460001916141515156110c057600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061116d57503373ffffffffffffffffffffffffffffffffffffffff168360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b151561117857600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156111f85760006001028360080154600019161415156111ea57600080fd5b838360080181600019169055505b3373ffffffffffffffffffffffffffffffffffffffff168360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561127857600060010283600901546000191614151561126a57600080fd5b838360090181600019169055505b7f562328ec203489eb76992d980fce0e00de4085661f23e7461e301d3ce07d746b8533866040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260001916600019168152602001935050505060405180910390a16000600102836009015460001916141580156113235750600060010283600801546000191614155b1561165557600460076000876000191660001916815260200190815260200160002060006101000a81548160ff0219169083600481111561136057fe5b02179055506113d6600560008560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548460050154612613565b600560008560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506114ae600460008560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548460050154612613565b600460008560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611586600460008560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846005015461262c565b600460008560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f59830bf4a37dc0e23eb81b13f7b79e59e3bdc31c5797b590baa7e16360983466858460090154856008015460405180846000191660001916815260200183600019166000191681526020018260001916600019168152602001935050505060405180910390a15b5050505050565b60035481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116bd57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561171457600080fd5b565b60008060008911151561172857600080fd5b600560008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540389111515156117b757600080fd5b6117c58d8d8d8d8d8d6121e8565b9150600060048111156117d457fe5b60076000846000191660001916815260200190815260200160002060009054906101000a900460ff16600481111561180857fe5b14151561181457600080fd5b6118228d8388888888610cc6565b151561182d57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff161415151561186857600080fd5b6006600083600019166000191681526020019081526020016000209050898160060181905550888160050181905550600088116118a7576003546118a9565b875b81600701819055506003548160070154111515156118c657600080fd5b8c8160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508b816001018160001916905550338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086816003018160001916905550428160040181905550600160076000846000191660001916815260200190815260200160002060006101000a81548160ff021916908360048111156119a757fe5b021790555088600560008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507fba7607bfc80a9f9b722cc2275ac9dcd8578ce60c42b34bb7f435a020692f6741828e8e338b86600401546040518087600019166000191681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200185600019166000191681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018360001916600019168152602001828152602001965050505050505060405180910390a150505050505050505050505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b3957600080fd5b8291508173ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515611bdf57600080fd5b6102c65a03f11515611bf057600080fd5b5050506040518051905090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515611ca757600080fd5b6102c65a03f11515611cb857600080fd5b5050506040518051905050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080600080600080600080600080600660008e600019166000191681526020019081526020016000209050600760008e6000191660001916815260200190815260200160002060009054906101000a900460ff166004811115611d5057fe5b81600601548260070154836005015484600401548560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866001015487600901548860020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1689600301548a600801549b509b509b509b509b509b509b509b509b509b509b505091939597999b90929496989a50565b60008160066000826000191660001916815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e6357600080fd5b826001806004811115611e7257fe5b60076000846000191660001916815260200190815260200160002060009054906101000a900460ff166004811115611ea657fe5b141515611eb257600080fd5b6006600086600019166000191681526020019081526020016000209350600260076000876000191660001916815260200190815260200160002060006101000a81548160ff02191690836004811115611f0757fe5b02179055508360050154600560008660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055507fcea198c8b3f6e209829948ae10260045612e4695284ac241780afe54f155baaf8560405180826000191660001916815260200191505060405180910390a15050505050565b612010600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261262c565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b151561215457600080fd5b6102c65a03f1151561216557600080fd5b50505060405180519050151561217a57600080fd5b7f1b851e1031ef35a238e6c67d0c7991162390df915f70eaf9098dbf0b175a61983382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150565b600060405180807f6164647265737320416476657274697365720000000000000000000000000000815250601201807f6279746573333220416420556e69742049440000000000000000000000000000815250601201807f75696e74204f70656e6564000000000000000000000000000000000000000000815250600b01807f75696e7420546172676574000000000000000000000000000000000000000000815250600b01807f75696e7420416d6f756e74000000000000000000000000000000000000000000815250600b01807f75696e742054696d656f75740000000000000000000000000000000000000000815250600c01807f616464726573732045786368616e6765000000000000000000000000000000008152506010019050604051809103902087878787878730604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140187600019166000191681526020018681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019750505050505050506040518091039020604051808360001916600019168152602001826000191660001916815260200192505050604051809103902090509695505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561246757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156124a357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491509150915091565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600082821115151561262157fe5b818303905092915050565b600080828401905083811015151561264057fe5b80915050929150505600a165627a7a72305820138093af8d02cda89628de2004a445a562ebd86a76aa008e5301e6810fd23aa400290000000000000000000000004470bb87d77b963a013db939be332f927f2b992e",
  "constructorArguments": "0000000000000000000000004470bb87d77b963a013db939be332f927f2b992e"
}