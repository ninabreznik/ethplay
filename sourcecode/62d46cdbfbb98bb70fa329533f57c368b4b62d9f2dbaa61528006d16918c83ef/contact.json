{
  "address": "0x68b994a350fef095b7a988987b8b3c122c04cb3e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PausableToken",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\n// this code is basic token with pausable\n    pragma solidity ^0.5.0;\n    \n    /**\n     * @title ERC20Basic\n     * @dev Simpler version of ERC20 interface\n     * @dev see https://github.com/ethereum/EIPs/issues/179\n     */\n    contract ERC20Basic {\n      function totalSupply() public view returns (uint256);\n      function balanceOf(address who) public view returns (uint256);\n      function transfer(address to, uint256 value) public returns (bool);\n      event Transfer(address indexed from, address indexed to, uint256 value);\n    }\n    \n    /**\n     * @title ERC20 interface\n     * @dev see https://github.com/ethereum/EIPs/issues/20\n     */\n    contract ERC20 is ERC20Basic {\n      function allowance(address owner, address spender) public view returns (uint256);\n      function transferFrom(address from, address to, uint256 value) public returns (bool);\n      function approve(address spender, uint256 value) public returns (bool);\n      event Approval(address indexed owner, address indexed spender, uint256 value);\n    }\n    \n    /**\n     * @title SafeMath\n     * @dev Math operations with safety checks that throw on error\n     * @notice https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n     */\n    library SafeMath {\n    \t/**\n    \t * SafeMath mul function\n    \t * @dev function for safe multiply, throws on overflow.\n    \t **/\n    \tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    \t\tuint256 c = a * b;\n    \t\tassert(a == 0 || c / a == b);\n    \t\treturn c;\n    \t}\n    \n    \t/**\n    \t * SafeMath div funciotn\n    \t * @dev function for safe devide, throws on overflow.\n    \t **/\n    \tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n    \t\tuint256 c = a / b;\n    \t\treturn c;\n    \t}\n    \n    \t/**\n    \t * SafeMath sub function\n    \t * @dev function for safe subtraction, throws on overflow.\n    \t **/\n    \tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    \t\tassert(b <= a);\n    \t\treturn a - b;\n    \t}\n    \t\n    \t/**\n    \t * SafeMath add function\n    \t * @dev Adds two numbers, throws on overflow.\n    \t */\n    \tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    \t\tc = a + b;\n    \t\tassert(c >= a);\n    \t\treturn c;\n    \t}\n    }\n    \n    /**\n     * @title Basic token\n     * @dev Basic version of StandardToken, with no allowances.\n     */\n    contract BasicToken is ERC20Basic {\n      using SafeMath for uint256;\n    \n      mapping(address => uint256) balances;\n    \n      uint256 totalSupply_;\n    \n      /**\n      * @dev total number of tokens in existence\n      */\n      function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n      }\n    \n      /**\n      * @dev transfer token for a specified address\n      * @param _to The address to transfer to.\n      * @param _value The amount to be transferred.\n      */\n      function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n    \n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n      }\n    \n      /**\n      * @dev Gets the balance of the specified address.\n      * @param _owner The address to query the the balance of.\n      * @return An uint256 representing the amount owned by the passed address.\n      */\n      function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n      }\n    \n    }\n    \n    /**\n     * @title Standard ERC20 token\n     *\n     * @dev Implementation of the basic standard token.\n     * @dev https://github.com/ethereum/EIPs/issues/20\n     * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n     */\n    contract StandardToken is ERC20, BasicToken {\n    \n      mapping (address => mapping (address => uint256)) internal allowed;\n    \n      /**\n       * @dev Transfer tokens from one address to another\n       * @param _from address The address which you want to send tokens from\n       * @param _to address The address which you want to transfer to\n       * @param _value uint256 the amount of tokens to be transferred\n       */\n      function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n    \n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n      }\n    \n      /**\n       * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n       *\n       * Beware that changing an allowance with this method brings the risk that someone may use both the old\n       * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n       * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n       * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n       * @param _spender The address which will spend the funds.\n       * @param _value The amount of tokens to be spent.\n       */\n      function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n      }\n    \n      /**\n       * @dev Function to check the amount of tokens that an owner allowed to a spender.\n       * @param _owner address The address which owns the funds.\n       * @param _spender address The address which will spend the funds.\n       * @return A uint256 specifying the amount of tokens still available for the spender.\n       */\n      function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n      }\n    \n      /**\n       * @dev Increase the amount of tokens that an owner allowed to a spender.\n       *\n       * approve should be called when allowed[_spender] == 0. To increment\n       * allowed value is better to use this function to avoid 2 calls (and wait until\n       * the first transaction is mined)\n       * From MonolithDAO Token.sol\n       * @param _spender The address which will spend the funds.\n       * @param _addedValue The amount of tokens to increase the allowance by.\n       */\n      function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = (\n          allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n      }\n    \n      /**\n       * @dev Decrease the amount of tokens that an owner allowed to a spender.\n       *\n       * approve should be called when allowed[_spender] == 0. To decrement\n       * allowed value is better to use this function to avoid 2 calls (and wait until\n       * the first transaction is mined)\n       * From MonolithDAO Token.sol\n       * @param _spender The address which will spend the funds.\n       * @param _subtractedValue The amount of tokens to decrease the allowance by.\n       */\n      function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        \n        if (_subtractedValue > oldValue) {\n          allowed[msg.sender][_spender] = 0;\n        } else {\n          allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        \n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n      }\n    \n    }\n    \n    /**\n     * @title Ownable\n     * @dev The Ownable contract has an owner address, and provides basic authorization control\n     * functions, this simplifies the implementation of \"user permissions\".\n     */\n    contract Ownable {\n      address public owner;\n    \n    \n      event OwnershipRenounced(address indexed previousOwner);\n      event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n    \n      /**\n       * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n       * account.\n       */\n      constructor() public {\n        owner = msg.sender;\n      }\n    \n      /**\n       * @dev Throws if called by any account other than the owner.\n       */\n      modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n      }\n    \n      /**\n       * @dev Allows the current owner to transfer control of the contract to a newOwner.\n       * @param newOwner The address to transfer ownership to.\n       */\n      function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n      }\n    \n      /**\n       * @dev Allows the current owner to relinquish control of the contract.\n       */\n      function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n      }\n    }\n    \n    /**\n     * @title Pausable\n     * @dev Base contract which allows children to implement an emergency stop mechanism.\n     */\n    contract Pausable is Ownable {\n      event Pause();\n      event Unpause();\n      event NotPausable();\n    \n      bool public paused = false;\n      bool public canPause = true;\n    \n      /**\n       * @dev Modifier to make a function callable only when the contract is not paused.\n       */\n      modifier whenNotPaused() {\n        require(!paused || msg.sender == owner);\n        _;\n      }\n    \n      /**\n       * @dev Modifier to make a function callable only when the contract is paused.\n       */\n      modifier whenPaused() {\n        require(paused);\n        _;\n      }\n    \n      /**\n         * @dev called by the owner to pause, triggers stopped state\n         **/\n        function pause() onlyOwner whenNotPaused public {\n            require(canPause == true);\n            paused = true;\n            emit Pause();\n        }\n    \n      /**\n       * @dev called by the owner to unpause, returns to normal state\n       */\n      function unpause() onlyOwner whenPaused public {\n        require(paused == true);\n        paused = false;\n        emit Unpause();\n      }\n      \n      /**\n         * @dev Prevent the token from ever being paused again\n         **/\n        function notPausable() onlyOwner public{\n            paused = false;\n            canPause = false;\n            emit NotPausable();\n        }\n    }\n    \n    /**\n     * @title Pausable token\n     * @dev StandardToken modified with pausable transfers.\n     **/\n    contract PausableToken is StandardToken, Pausable {\n        string public constant NAME = \"castweet\";\n        string public constant SYMBOL = \"CTT\";\n        uint256 public constant DECIMALS = 18;\n        uint256 public constant INITIAL_SUPPLY = 2000000000 * 10**18;\n    \n        /**\n         * @dev Transfer tokens when not paused\n         **/\n        function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n            return super.transfer(_to, _value);\n        }\n        \n        /**\n         * @dev transferFrom function to tansfer tokens when token is not paused\n         **/\n        function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n            return super.transferFrom(_from, _to, _value);\n        }\n        \n        /**\n         * @dev approve spender when not paused\n         **/\n        function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n            return super.approve(_spender, _value);\n        }\n        \n        /**\n         * @dev increaseApproval of spender when not paused\n         **/\n        function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n            return super.increaseApproval(_spender, _addedValue);\n        }\n        \n        /**\n         * @dev decreaseApproval of spender when not paused\n         **/\n        function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n            return super.decreaseApproval(_spender, _subtractedValue);\n        }\n        \n        /**\n       * Pausable Token Constructor\n       * @dev Create and issue tokens to msg.sender.\n       */\n      constructor() public {\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n      } \n    }",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canPause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"notPausable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NotPausable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600360146101000a81548160ff0219169083151502179055506001600360156101000a81548160ff02191690831515021790555034801561004657600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506b06765c793fa10079d00000006001819055506b06765c793fa10079d00000006000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ca6806100f96000396000f3fe60806040526004361061010c576000357c010000000000000000000000000000000000000000000000000000000090048063095ea7b31461011157806318160ddd1461018457806323b872dd146101af5780632e0f2625146102425780632ff2e9dc1461026d578063323be1c5146102985780633f4ba83a146102c75780634be8b05e146102de5780635c975abb146102f5578063661884631461032457806370a0823114610397578063715018a6146103fc5780638456cb59146104135780638da5cb5b1461042a578063a3f4df7e14610481578063a9059cbb14610511578063d73dd62314610584578063dd62ed3e146105f7578063f2fde38b1461067c578063f76f8d78146106cd575b600080fd5b34801561011d57600080fd5b5061016a6004803603604081101561013457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061075d565b604051808215151515815260200191505060405180910390f35b34801561019057600080fd5b506101996107e5565b6040518082815260200191505060405180910390f35b3480156101bb57600080fd5b50610228600480360360608110156101d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107ef565b604051808215151515815260200191505060405180910390f35b34801561024e57600080fd5b50610257610879565b6040518082815260200191505060405180910390f35b34801561027957600080fd5b5061028261087e565b6040518082815260200191505060405180910390f35b3480156102a457600080fd5b506102ad61088e565b604051808215151515815260200191505060405180910390f35b3480156102d357600080fd5b506102dc6108a1565b005b3480156102ea57600080fd5b506102f3610983565b005b34801561030157600080fd5b5061030a610a43565b604051808215151515815260200191505060405180910390f35b34801561033057600080fd5b5061037d6004803603604081101561034757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a56565b604051808215151515815260200191505060405180910390f35b3480156103a357600080fd5b506103e6600480360360208110156103ba57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ade565b6040518082815260200191505060405180910390f35b34801561040857600080fd5b50610411610b26565b005b34801561041f57600080fd5b50610428610c2b565b005b34801561043657600080fd5b5061043f610d66565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561048d57600080fd5b50610496610d8c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104d65780820151818401526020810190506104bb565b50505050905090810190601f1680156105035780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561051d57600080fd5b5061056a6004803603604081101561053457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610dc5565b604051808215151515815260200191505060405180910390f35b34801561059057600080fd5b506105dd600480360360408110156105a757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e4d565b604051808215151515815260200191505060405180910390f35b34801561060357600080fd5b506106666004803603604081101561061a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ed5565b6040518082815260200191505060405180910390f35b34801561068857600080fd5b506106cb6004803603602081101561069f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f5c565b005b3480156106d957600080fd5b506106e26110b4565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610722578082015181840152602081019050610707565b50505050905090810190601f16801561074f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000600360149054906101000a900460ff1615806107c85750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156107d357600080fd5b6107dd83836110ed565b905092915050565b6000600154905090565b6000600360149054906101000a900460ff16158061085a5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561086557600080fd5b6108708484846111df565b90509392505050565b601281565b6b06765c793fa10079d000000081565b600360159054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108fd57600080fd5b600360149054906101000a900460ff16151561091857600080fd5b60011515600360149054906101000a900460ff16151514151561093a57600080fd5b6000600360146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109df57600080fd5b6000600360146101000a81548160ff0219169083151502179055506000600360156101000a81548160ff0219169083151502179055507faff39f66825d4448497d384dee3f4a3adf00a622960add00806503ae4ccee01c60405160405180910390a1565b600360149054906101000a900460ff1681565b6000600360149054906101000a900460ff161580610ac15750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610acc57600080fd5b610ad68383611599565b905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b8257600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a26000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c8757600080fd5b600360149054906101000a900460ff161580610cf05750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610cfb57600080fd5b60011515600360159054906101000a900460ff161515141515610d1d57600080fd5b6001600360146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600881526020017f636173747765657400000000000000000000000000000000000000000000000081525081565b6000600360149054906101000a900460ff161580610e305750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610e3b57600080fd5b610e45838361182a565b905092915050565b6000600360149054906101000a900460ff161580610eb85750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610ec357600080fd5b610ecd8383611a49565b905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fb857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610ff457600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6040805190810160405280600381526020017f435454000000000000000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561121c57600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561126957600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156112f457600080fd5b611345826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c4590919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113d8826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c5e90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506114a982600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c4590919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156116aa576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061173e565b6116bd8382611c4590919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561186757600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156118b457600080fd5b611905826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c4590919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611998826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c5e90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000611ada82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c5e90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000828211151515611c5357fe5b818303905092915050565b60008183019050828110151515611c7157fe5b8090509291505056fea165627a7a72305820ce79b3491f896723c9562fca937f06a6688b9dcc8a3e78db69a1740caf9d2d280029"
}