{
  "address": "0x4bc3a10eaf382c7e8b9be5fa2c7cd9a5560524a5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "IMCToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-19\n*/\n\npragma solidity ^0.4.24;\n\n// ----------------------------------------------------------------------------\n// 'imChat' token contract\n//\n// Symbol      : IMC\n// Name        : IMC\n// Total supply: 1000,000,000.000000000000000000\n// Decimals    : 8\n//\n// imChat Technology Service Limited\n// ----------------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n    \n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        require(c >= _a);\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a);\n        uint256 c = _a - _b;\n\n        return c;\n    }\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = _a / _b;\n        assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address _owner) public constant returns (uint balance);\n    function transfer(address _to, uint _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n    function approve(address _spender, uint _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public constant returns (uint remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n//\n// Borrowed from MiniMeToken\n// ----------------------------------------------------------------------------\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and a\n// fixed supply\n// ----------------------------------------------------------------------------\ncontract IMCToken is ERC20Interface, Owned {\n    using SafeMath for uint;\n\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint _totalSupply;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n\n    address public externalContractAddress;\n\n\n    /**\n     * 构造函数\n     */\n    constructor() public {\n        symbol = \"IMC\";\n        name = \"IMC\";\n        decimals = 8;\n        _totalSupply = 1000000000 * (10 ** uint(decimals));\n        balances[owner] = _totalSupply;\n        \n        emit Transfer(address(0), owner, _totalSupply);\n    }\n\n    /**\n     * 查询代币总发行量\n     * @return unit 余额\n     */\n    function totalSupply() public view returns (uint) {\n        return _totalSupply.sub(balances[address(0)]);\n    }\n\n    /**\n     * 查询代币余额\n     * @param _owner address 查询代币的地址\n     * @return balance 余额\n     */\n    function balanceOf(address _owner) public view returns (uint balance) {\n        return balances[_owner];\n    }\n\n    /**\n     * 私有方法从一个帐户发送给另一个帐户代币\n     * @param _from address 发送代币的地址\n     * @param _to address 接受代币的地址\n     * @param _value uint 接受代币的数量\n     */\n    function _transfer(address _from, address _to, uint _value) internal{\n        // 确保目标地址不为0x0，因为0x0地址代表销毁\n        require(_to != 0x0);\n        // 检查发送者是否拥有足够余额\n        require(balances[_from] >= _value);\n        // 检查是否溢出\n        require(balances[_to] + _value > balances[_to]);\n\n        // 保存数据用于后面的判断\n        uint previousBalance = balances[_from].add(balances[_to]);\n\n        // 从发送者减掉发送额\n        balances[_from] = balances[_from].sub(_value);\n        // 给接收者加上相同的量\n        balances[_to] = balances[_to].add(_value);\n\n        // 通知任何监听该交易的客户端\n        emit Transfer(_from, _to, _value);\n\n        // 判断发送、接收方的数据是否和转换前一致\n        assert(balances[_from].add(balances[_to]) == previousBalance);\n    }\n\n    /**\n     * 从合约调用者发送给别人代币\n     * @param _to address 接受代币的地址\n     * @param _value uint 接受代币的数量\n     * @return success 交易成功\n     */\n    function transfer(address _to, uint _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n\n        return true;\n    }\n\n    /**\n     * 账号之间代币交易转移，调用过程，会检查设置的允许最大交易额\n     * @param _from address 发送者地址\n     * @param _to address 接受者地址\n     * @param _value uint 要转移的代币数量\n     * @return success 交易成功\n     */\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n        \n        if (_from == msg.sender) {\n            // 自己转账时不需要approve，可以直接进行转账\n            _transfer(_from, _to, _value);\n\n        } else {\n            // 授权给第三方时，需检查发送者是否拥有足够余额\n            require(allowed[_from][msg.sender] >= _value);\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n            _transfer(_from, _to, _value);\n\n        }\n\n        return true;\n    }\n\n    /**\n     * 从主帐户合约发行代币\n     * @param _to address 接受代币的地址\n     * @param _value uint 接受代币的数量\n     * @return success 交易成功\n     */\n    function issue(address _to, uint _value) public returns (bool success) {\n        // 外部合约调用，需满足合约调用者和代币合约所设置的外部调用合约地址一致性\n        require(msg.sender == externalContractAddress);\n\n        _transfer(owner, _to, _value);\n\n        return true;\n    }\n\n    /**\n    * 允许帐户授权其他帐户代表他们提取代币\n    * @param _spender 授权帐户地址\n    * @param _value 代币数量\n    * @return success 允许成功\n    */\n    function approve(address _spender, uint _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n\n    /**\n    * 查询被授权帐户的允许提取的代币数\n    * @param _owner 授权者帐户地址\n    * @param _spender 被授权者帐户地址\n    * @return remaining 代币数量\n    */\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * 设置允许一个地址（合约）以我（创建交易者）的名义可最多花费的代币数。\n     * @param _spender 被授权的地址（合约）\n     * @param _value 最大可花费代币数\n     * @param _extraData 发送给合约的附加数据\n     * @return success 设置成功\n     */\n    function approveAndCall(address _spender, uint _value, bytes _extraData) public returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            // 通知合约\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * 设置允许外部合约地址调用当前合约\n     * @param _contractAddress 合约地址\n     * @return success 设置成功\n     */\n    function approveContractCall(address _contractAddress) public onlyOwner returns (bool){\n        externalContractAddress = _contractAddress;\n        \n        return true;\n    }\n\n    /**\n     * 不接收 Ether\n     */\n    function () public payable {\n        revert();\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a031916331790556040805180820190915260038082527f494d430000000000000000000000000000000000000000000000000000000000602090920191825261006791600291610129565b506040805180820190915260038082527f494d43000000000000000000000000000000000000000000000000000000000060209092019182526100aa9181610129565b5060048054600860ff19909116179081905560ff16600a0a633b9aca0002600581905560008054600160a060020a0390811682526006602090815260408084208590558354815195865290519216937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a36101c4565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061016a57805160ff1916838001178555610197565b82800160010185558215610197579182015b8281111561019757825182559160200191906001019061017c565b506101a39291506101a7565b5090565b6101c191905b808211156101a357600081556001016101ad565b90565b610b22806101d36000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f57806318160ddd146101b75780632176d50a146101de57806323b872dd1461020f578063313ce5671461023957806334d5751a1461026457806370a082311461028557806379ba5097146102a6578063867904b4146102bd5780638da5cb5b146102e157806395d89b41146102f6578063a9059cbb1461030b578063cae9ca511461032f578063d4ee1d9014610398578063dd62ed3e146103ad578063f2fde38b146103d4575b600080fd5b34801561010157600080fd5b5061010a6103f5565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014457818101518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018b57600080fd5b506101a3600160a060020a0360043516602435610483565b604080519115158252519081900360200190f35b3480156101c357600080fd5b506101cc6104e9565b60408051918252519081900360200190f35b3480156101ea57600080fd5b506101f361052c565b60408051600160a060020a039092168252519081900360200190f35b34801561021b57600080fd5b506101a3600160a060020a036004358116906024351660443561053b565b34801561024557600080fd5b5061024e6105fb565b6040805160ff9092168252519081900360200190f35b34801561027057600080fd5b506101a3600160a060020a0360043516610604565b34801561029157600080fd5b506101cc600160a060020a036004351661064e565b3480156102b257600080fd5b506102bb610669565b005b3480156102c957600080fd5b506101a3600160a060020a03600435166024356106f1565b3480156102ed57600080fd5b506101f361072b565b34801561030257600080fd5b5061010a61073a565b34801561031757600080fd5b506101a3600160a060020a0360043516602435610792565b34801561033b57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101a3948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061079f9650505050505050565b3480156103a457600080fd5b506101f36108b8565b3480156103b957600080fd5b506101cc600160a060020a03600435811690602435166108c7565b3480156103e057600080fd5b506102bb600160a060020a03600435166108f2565b6003805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561047b5780601f106104505761010080835404028352916020019161047b565b820191906000526020600020905b81548152906001019060200180831161045e57829003601f168201915b505050505081565b336000818152600760209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600080805260066020527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8546005546105279163ffffffff61093816565b905090565b600854600160a060020a031681565b6000600160a060020a03841633141561055e5761055984848461094f565b6105f1565b600160a060020a038416600090815260076020908152604080832033845290915290205482111561058e57600080fd5b600160a060020a03841660009081526007602090815260408083203384529091529020546105c2908363ffffffff61093816565b600160a060020a03851660009081526007602090815260408083203384529091529020556105f184848461094f565b5060019392505050565b60045460ff1681565b60008054600160a060020a0316331461061c57600080fd5b5060088054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b600160a060020a031660009081526006602052604090205490565b600154600160a060020a0316331461068057600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600854600090600160a060020a0316331461070b57600080fd5b60005461072290600160a060020a0316848461094f565b50600192915050565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152929183018282801561047b5780601f106104505761010080835404028352916020019161047b565b600061072233848461094f565b6000836107ac8185610483565b156108b0576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b8381101561084457818101518382015260200161082c565b50505050905090810190601f1680156108715780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561089357600080fd5b505af11580156108a7573d6000803e3d6000fd5b50505050600191505b509392505050565b600154600160a060020a031681565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b600054600160a060020a0316331461090957600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000808383111561094857600080fd5b5050900390565b6000600160a060020a038316151561096657600080fd5b600160a060020a03841660009081526006602052604090205482111561098b57600080fd5b600160a060020a038316600090815260066020526040902054828101116109b157600080fd5b600160a060020a038084166000908152600660205260408082205492871682529020546109e39163ffffffff610add16565b600160a060020a038516600090815260066020526040902054909150610a0f908363ffffffff61093816565b600160a060020a038086166000908152600660205260408082209390935590851681522054610a44908363ffffffff610add16565b600160a060020a0380851660008181526006602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3600160a060020a038084166000908152600660205260408082205492871682529020548291610ad0919063ffffffff610add16565b14610ad757fe5b50505050565b600082820183811015610aef57600080fd5b93925050505600a165627a7a72305820aefd0833f7cc3f1c12447c558e7b6faea64417af64fb4305114fa4df5dcd57ca0029"
}