{
  "address": "0x834e26427dc74bf4107ccd18dec4a84ae362a23d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TengRiCashCoin",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "500",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-12\n*/\n\npragma solidity ^0.4.24;\n\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\ncontract PauserRole {\n  using Roles for Roles.Role;\n\n  event PauserAdded(address indexed account);\n  event PauserRemoved(address indexed account);\n\n  Roles.Role private pausers;\n\n  constructor() internal {\n    _addPauser(msg.sender);\n  }\n\n  modifier onlyPauser() {\n    require(isPauser(msg.sender));\n    _;\n  }\n\n  function isPauser(address account) public view returns (bool) {\n    return pausers.has(account);\n  }\n\n  function addPauser(address account) public onlyPauser {\n    _addPauser(account);\n  }\n\n  function renouncePauser() public {\n    _removePauser(msg.sender);\n  }\n\n  function _addPauser(address account) internal {\n    pausers.add(account);\n    emit PauserAdded(account);\n  }\n\n  function _removePauser(address account) internal {\n    pausers.remove(account);\n    emit PauserRemoved(account);\n  }\n}\n\ncontract Pausable is PauserRole {\n  event Paused(address account);\n  event Unpaused(address account);\n\n  bool private _paused;\n\n  constructor() internal {\n    _paused = false;\n  }\n\n  /**\n   * @return true if the contract is paused, false otherwise.\n   */\n  function paused() public view returns(bool) {\n    return _paused;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!_paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(_paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyPauser whenNotPaused {\n    _paused = true;\n    emit Paused(msg.sender);\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyPauser whenPaused {\n    _paused = false;\n    emit Unpaused(msg.sender);\n  }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\ncontract ERC20Pausable is ERC20, Pausable {\n\n  function transfer(\n    address to,\n    uint256 value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(to, value);\n  }\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(from, to, value);\n  }\n\n  function approve(\n    address spender,\n    uint256 value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(spender, value);\n  }\n\n  function increaseAllowance(\n    address spender,\n    uint addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseAllowance(spender, addedValue);\n  }\n\n  function decreaseAllowance(\n    address spender,\n    uint subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseAllowance(spender, subtractedValue);\n  }\n}\n\ncontract IndividualLockableToken is ERC20Pausable, Ownable{\n  using SafeMath for uint256;\n\n  event LockTimeSetted(address indexed holder, uint256 old_release_time, uint256 new_release_time);\n  event Locked(address indexed holder, uint256 locked_balance_change, uint256 total_locked_balance, uint256 release_time);\n\n  struct lockState {\n    uint256 locked_balance;\n    uint256 release_time;\n  }\n\n  // default lock period\n  uint256 public lock_period = 24 weeks;\n\n  mapping(address => lockState) internal userLock;\n\n  // Specify the time that a particular person's lock will be released\n  function setReleaseTime(address _holder, uint256 _release_time)\n    public\n    onlyOwner\n    returns (bool)\n  {\n    require(_holder != address(0));\n\trequire(_release_time >= block.timestamp);\n\n\tuint256 old_release_time = userLock[_holder].release_time;\n\n\tuserLock[_holder].release_time = _release_time;\n\temit LockTimeSetted(_holder, old_release_time, userLock[_holder].release_time);\n\treturn true;\n  }\n  \n  // Returns the point at which token holder's lock is released\n  function getReleaseTime(address _holder)\n    public\n    view\n    returns (uint256)\n  {\n    require(_holder != address(0));\n\n\treturn userLock[_holder].release_time;\n  }\n\n  // Unlock a specific person. Free trading even with a lock balance\n  function clearReleaseTime(address _holder)\n    public\n    onlyOwner\n    returns (bool)\n  {\n    require(_holder != address(0));\n    require(userLock[_holder].release_time > 0);\n\n\tuint256 old_release_time = userLock[_holder].release_time;\n\n\tuserLock[_holder].release_time = 0;\n\temit LockTimeSetted(_holder, old_release_time, userLock[_holder].release_time);\n\treturn true;\n  }\n\n  // Increase the lock balance of a specific person.\n  // If you only want to increase the balance, the release_time must be specified in advance.\n  function increaseLockBalance(address _holder, uint256 _value)\n    public\n    onlyOwner\n    returns (bool)\n  {\n\trequire(_holder != address(0));\n\trequire(_value > 0);\n\trequire(balanceOf(_holder) >= _value);\n\t\n\tif (userLock[_holder].release_time == 0) {\n\t\tuserLock[_holder].release_time = block.timestamp + lock_period;\n\t}\n\t\n\tuserLock[_holder].locked_balance = (userLock[_holder].locked_balance).add(_value);\n\temit Locked(_holder, _value, userLock[_holder].locked_balance, userLock[_holder].release_time);\n\treturn true;\n  }\n\n  // Decrease the lock balance of a specific person.\n  function decreaseLockBalance(address _holder, uint256 _value)\n    public\n    onlyOwner\n    returns (bool)\n  {\n\trequire(_holder != address(0));\n\trequire(_value > 0);\n\trequire(userLock[_holder].locked_balance >= _value);\n\n\tuserLock[_holder].locked_balance = (userLock[_holder].locked_balance).sub(_value);\n\temit Locked(_holder, _value, userLock[_holder].locked_balance, userLock[_holder].release_time);\n\treturn true;\n  }\n\n  // Clear the lock.\n  function clearLock(address _holder)\n    public\n    onlyOwner\n    returns (bool)\n  {\n\trequire(_holder != address(0));\n\trequire(userLock[_holder].release_time > 0);\n\n\tuserLock[_holder].locked_balance = 0;\n\tuserLock[_holder].release_time = 0;\n\temit Locked(_holder, 0, userLock[_holder].locked_balance, userLock[_holder].release_time);\n\treturn true;\n  }\n\n  // Check the amount of the lock\n  function getLockedBalance(address _holder)\n    public\n    view\n    returns (uint256)\n  {\n    if(block.timestamp >= userLock[_holder].release_time) return uint256(0);\n    return userLock[_holder].locked_balance;\n  }\n\n  // Check your remaining balance\n  function getFreeBalance(address _holder)\n    public\n    view\n    returns (uint256)\n  {\n    if(block.timestamp >= userLock[_holder].release_time) return balanceOf(_holder);\n    return balanceOf(_holder).sub(userLock[_holder].locked_balance);\n  }\n\n  // transfer overrride\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(getFreeBalance(msg.sender) >= _value);\n    return super.transfer(_to, _value);\n  }\n\n  // transferFrom overrride\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(getFreeBalance(_from) >= _value);\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  // approve overrride\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(getFreeBalance(msg.sender) >= _value);\n    return super.approve(_spender, _value);\n  }\n\n  // increaseAllowance overrride\n  function increaseAllowance(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool success)\n  {\n    require(getFreeBalance(msg.sender) >= allowance(msg.sender, _spender).add(_addedValue));\n    return super.increaseAllowance(_spender, _addedValue);\n  }\n  \n  // decreaseAllowance overrride\n  function decreaseAllowance(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool success)\n  {\n\tuint256 oldValue = allowance(msg.sender, _spender);\n\t\n    if (_subtractedValue < oldValue) {\n      require(getFreeBalance(msg.sender) >= oldValue.sub(_subtractedValue));\t  \n    }    \n    return super.decreaseAllowance(_spender, _subtractedValue);\n  }\n}\n\ncontract TengRiCashCoin is IndividualLockableToken {\n  using SafeMath for uint256;\n\n  string public constant name = \"TengRi Cash Coin\";\n  string public constant symbol = \"TERI\";\n  uint8  public constant decimals = 18;\n\n  // 33,300,000,000 \n  uint256 public constant INITIAL_SUPPLY = 33300000000 * (10 ** uint256(decimals));\n\n  constructor()\n    public\n  {\n\t_mint(msg.sender, INITIAL_SUPPLY);\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getReleaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_release_time\",\"type\":\"uint256\"}],\"name\":\"setReleaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseLockBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getFreeBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"clearLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"clearReleaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getLockedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseLockBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lock_period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"old_release_time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"new_release_time\",\"type\":\"uint256\"}],\"name\":\"LockTimeSetted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locked_balance_change\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total_locked_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"release_time\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "608060405262dd7c006005553480156200001857600080fd5b506200002d33640100000000620000a9810204565b60048054600160a860020a0319166101003381029190911791829055604051600160a060020a039190920416906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3620000a3336b6b991d493038ae5294000000640100000000620000fb810204565b62000267565b620000c460038264010000000062001242620001ba82021704565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600160a060020a03821615156200011157600080fd5b6002546200012e908264010000000062000e5b6200021582021704565b600255600160a060020a03821660009081526020819052604090205462000164908264010000000062000e5b6200021582021704565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a0381161515620001d057600080fd5b620001e582826401000000006200022f810204565b15620001f057600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000828201838110156200022857600080fd5b9392505050565b6000600160a060020a03821615156200024757600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b61140f80620002776000396000f30060806040526004361061018a5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461018f578063095ea7b3146102195780630cb7eb4c1461025157806318160ddd1461028457806323b872dd146102995780632ff2e9dc146102c3578063313ce567146102d857806339509351146103035780633f4ba83a1461032757806346fbf68e1461033e578063476fe9191461035f5780635c975abb146103835780636c4e5c86146103985780636ef8d66d146103bc57806370a08231146103d1578063715018a6146103f257806382dc1ec4146104075780638456cb59146104285780638870985b1461043d5780638da5cb5b1461045e5780638dc735211461048f5780638f32d59b146104b057806395d89b41146104c5578063a31052e8146104da578063a457c2d7146104fb578063a9059cbb1461051f578063c408689314610543578063dd62ed3e14610564578063e6108fc91461058b578063f2fde38b146105af578063f83e9a20146105d0575b600080fd5b34801561019b57600080fd5b506101a46105e5565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101de5781810151838201526020016101c6565b50505050905090810190601f16801561020b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022557600080fd5b5061023d600160a060020a036004351660243561061c565b604080519115158252519081900360200190f35b34801561025d57600080fd5b50610272600160a060020a0360043516610644565b60408051918252519081900360200190f35b34801561029057600080fd5b5061027261067e565b3480156102a557600080fd5b5061023d600160a060020a0360043581169060243516604435610684565b3480156102cf57600080fd5b506102726106ae565b3480156102e457600080fd5b506102ed6106be565b6040805160ff9092168252519081900360200190f35b34801561030f57600080fd5b5061023d600160a060020a03600435166024356106c3565b34801561033357600080fd5b5061033c6106fd565b005b34801561034a57600080fd5b5061023d600160a060020a0360043516610761565b34801561036b57600080fd5b5061023d600160a060020a036004351660243561077a565b34801561038f57600080fd5b5061023d61081a565b3480156103a457600080fd5b5061023d600160a060020a0360043516602435610823565b3480156103c857600080fd5b5061033c610915565b3480156103dd57600080fd5b50610272600160a060020a0360043516610920565b3480156103fe57600080fd5b5061033c61093b565b34801561041357600080fd5b5061033c600160a060020a03600435166109ab565b34801561043457600080fd5b5061033c6109cb565b34801561044957600080fd5b50610272600160a060020a0360043516610a31565b34801561046a57600080fd5b50610473610a95565b60408051600160a060020a039092168252519081900360200190f35b34801561049b57600080fd5b5061023d600160a060020a0360043516610aa9565b3480156104bc57600080fd5b5061023d610b63565b3480156104d157600080fd5b506101a4610b79565b3480156104e657600080fd5b5061023d600160a060020a0360043516610bb0565b34801561050757600080fd5b5061023d600160a060020a0360043516602435610c6a565b34801561052b57600080fd5b5061023d600160a060020a0360043516602435610caf565b34801561054f57600080fd5b50610272600160a060020a0360043516610cd0565b34801561057057600080fd5b50610272600160a060020a0360043581169060243516610d16565b34801561059757600080fd5b5061023d600160a060020a0360043516602435610d41565b3480156105bb57600080fd5b5061033c600160a060020a0360043516610dfe565b3480156105dc57600080fd5b50610272610e1a565b60408051808201909152601081527f54656e675269204361736820436f696e00000000000000000000000000000000602082015281565b60008161062833610a31565b101561063357600080fd5b61063d8383610e20565b9392505050565b6000600160a060020a038216151561065b57600080fd5b50600160a060020a0381166000908152600660205260409020600101545b919050565b60025490565b60008161069085610a31565b101561069b57600080fd5b6106a6848484610e3d565b949350505050565b6b6b991d493038ae529400000081565b601281565b60006106df826106d33386610d16565b9063ffffffff610e5b16565b6106e833610a31565b10156106f357600080fd5b61063d8383610e6d565b61070633610761565b151561071157600080fd5b60045460ff16151561072257600080fd5b6004805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b600061077460038363ffffffff610e8a16565b92915050565b600080610785610b63565b151561079057600080fd5b600160a060020a03841615156107a557600080fd5b428310156107b257600080fd5b50600160a060020a038316600081815260066020908152604091829020600101805490869055825181815291820186905282519093927f014515183d12c0df4c26d74864371ebfe412e000f1f0a252af66950035ff42fe928290030190a25060019392505050565b60045460ff1690565b600061082d610b63565b151561083857600080fd5b600160a060020a038316151561084d57600080fd5b6000821161085a57600080fd5b600160a060020a03831660009081526006602052604090205482111561087f57600080fd5b600160a060020a0383166000908152600660205260409020546108a8908363ffffffff610ec116565b600160a060020a03841660008181526006602090815260409182902084815560010154825187815291820194909452808201939093525190917f44cebfefa4561bee5b61d675ccfd8dc9969fff9cc15e7a4eccccd62af94f9c11919081900360600190a250600192915050565b61091e33610ed8565b565b600160a060020a031660009081526020819052604090205490565b610943610b63565b151561094e57600080fd5b6004546040516000916101009004600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36004805474ffffffffffffffffffffffffffffffffffffffff0019169055565b6109b433610761565b15156109bf57600080fd5b6109c881610f20565b50565b6109d433610761565b15156109df57600080fd5b60045460ff16156109ef57600080fd5b6004805460ff191660011790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b600160a060020a0381166000908152600660205260408120600101544210610a6357610a5c82610920565b9050610679565b600160a060020a03821660009081526006602052604090205461077490610a8984610920565b9063ffffffff610ec116565b6004546101009004600160a060020a031690565b6000610ab3610b63565b1515610abe57600080fd5b600160a060020a0382161515610ad357600080fd5b600160a060020a03821660009081526006602052604081206001015411610af957600080fd5b600160a060020a038216600081815260066020908152604080832083815560010183905580518381529182018390528181019290925290517f44cebfefa4561bee5b61d675ccfd8dc9969fff9cc15e7a4eccccd62af94f9c119181900360600190a2506001919050565b6004546101009004600160a060020a0316331490565b60408051808201909152600481527f5445524900000000000000000000000000000000000000000000000000000000602082015281565b600080610bbb610b63565b1515610bc657600080fd5b600160a060020a0383161515610bdb57600080fd5b600160a060020a03831660009081526006602052604081206001015411610c0157600080fd5b50600160a060020a038216600081815260066020908152604080832060010180549084905581518181529283019390935280519293927f014515183d12c0df4c26d74864371ebfe412e000f1f0a252af66950035ff42fe9281900390910190a250600192915050565b600080610c773385610d16565b905080831015610ca557610c91818463ffffffff610ec116565b610c9a33610a31565b1015610ca557600080fd5b6106a68484610f68565b600081610cbb33610a31565b1015610cc657600080fd5b61063d8383610f85565b600160a060020a0381166000908152600660205260408120600101544210610cfa57506000610679565b50600160a060020a031660009081526006602052604090205490565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6000610d4b610b63565b1515610d5657600080fd5b600160a060020a0383161515610d6b57600080fd5b60008211610d7857600080fd5b81610d8284610920565b1015610d8d57600080fd5b600160a060020a0383166000908152600660205260409020600101541515610dd557600554600160a060020a0384166000908152600660205260409020429091016001909101555b600160a060020a0383166000908152600660205260409020546108a8908363ffffffff610e5b16565b610e06610b63565b1515610e1157600080fd5b6109c881610fa2565b60055481565b60045460009060ff1615610e3357600080fd5b61063d838361102b565b60045460009060ff1615610e5057600080fd5b6106a68484846110a9565b60008282018381101561063d57600080fd5b60045460009060ff1615610e8057600080fd5b61063d8383611146565b6000600160a060020a0382161515610ea157600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b60008083831115610ed157600080fd5b5050900390565b610ee960038263ffffffff6111f616565b604051600160a060020a038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b610f3160038263ffffffff61124216565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b60045460009060ff1615610f7b57600080fd5b61063d8383611290565b60045460009060ff1615610f9857600080fd5b61063d83836112db565b600160a060020a0381161515610fb757600080fd5b600454604051600160a060020a0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360048054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b6000600160a060020a038316151561104257600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600160a060020a03831660009081526001602090815260408083203384529091528120548211156110d957600080fd5b600160a060020a038416600090815260016020908152604080832033845290915290205461110d908363ffffffff610ec116565b600160a060020a038516600090815260016020908152604080832033845290915290205561113c8484846112f1565b5060019392505050565b6000600160a060020a038316151561115d57600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054611191908363ffffffff610e5b16565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a038116151561120b57600080fd5b6112158282610e8a565b151561122057600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a038116151561125757600080fd5b6112618282610e8a565b1561126b57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a03831615156112a757600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054611191908363ffffffff610ec116565b60006112e83384846112f1565b50600192915050565b600160a060020a03831660009081526020819052604090205481111561131657600080fd5b600160a060020a038216151561132b57600080fd5b600160a060020a038316600090815260208190526040902054611354908263ffffffff610ec116565b600160a060020a038085166000908152602081905260408082209390935590841681522054611389908263ffffffff610e5b16565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35050505600a165627a7a723058203f1739610f96f01786c4c214bbcab0af6d1a3419394c0dac2305f0b8d601bf470029"
}