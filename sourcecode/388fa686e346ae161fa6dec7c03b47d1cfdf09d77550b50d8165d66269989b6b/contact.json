{
  "address": "0x0bbb5a54767166b21e4a74d30500248a05ed985f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "StarambaToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "0",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-03\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title The STT Token contract.\n * \n * By Nikita Fuchs\n * Credit: Taking ideas from BAT token, NET token and Nimiq token.\n */\n\n/**\n * @title Safe math operations that throw error on overflow.\n *\n * Credit: Taking ideas from FirstBlood token\n */\nlibrary SafeMath {\n\n    /** \n     * @dev Safely add two numbers.\n     *\n     * @param x First operant.\n     * @param y Second operant.\n     * @return The result of x+y.\n     */\n    function add(uint256 x, uint256 y)\n    internal pure\n    returns(uint256) {\n        uint256 z = x + y;\n        assert((z >= x) && (z >= y));\n        return z;\n    }\n\n    /** \n     * @dev Safely substract two numbers.\n     *\n     * @param x First operant.\n     * @param y Second operant.\n     * @return The result of x-y.\n     */\n    function sub(uint256 x, uint256 y)\n    internal pure\n    returns(uint256) {\n        assert(x >= y);\n        uint256 z = x - y;\n        return z;\n    }\n\n    /** \n     * @dev Safely multiply two numbers.\n     *\n     * @param x First operant.\n     * @param y Second operant.\n     * @return The result of x*y.\n     */\n    function mul(uint256 x, uint256 y)\n    internal pure\n    returns(uint256) {\n        uint256 z = x * y;\n        assert((x == 0) || (z/x == y));\n        return z;\n    }\n}\n\n/**\n * @title The abstract ERC-20 Token Standard definition.\n *\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n */\ncontract Token {\n    /// @dev Returns the total token supply.\n    uint256 public totalSupply;\n\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n    /// @dev MUST trigger when tokens are transferred, including zero value transfers.\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    /// @dev MUST trigger on any successful call to approve(address _spender, uint256 _value).\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n/**\n * @title Default implementation of the ERC-20 Token Standard.\n */\ncontract StandardToken is Token {\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    /**\n     * @dev Transfers _value amount of tokens to address _to, and MUST fire the Transfer event. \n     * @dev The function SHOULD throw if the _from account balance does not have enough tokens to spend.\n     *\n     * @dev A token contract which creates new tokens SHOULD trigger a Transfer event with the _from address set to 0x0 when tokens are created.\n     *\n     * Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n     *\n     * @param _to The receiver of the tokens.\n     * @param _value The amount of tokens to send.\n     * @return True on success, false otherwise.\n     */\n    function transfer(address _to, uint256 _value)\n    public\n    returns (bool success) {\n        if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n            balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n            balances[_to] = SafeMath.add(balances[_to], _value);\n            emit Transfer(msg.sender, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event.\n     *\n     * @dev The transferFrom method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf. \n     * @dev This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in \n     * @dev sub-currencies. The function SHOULD throw unless the _from account has deliberately authorized the sender of \n     * @dev the message via some mechanism.\n     *\n     * Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n     *\n     * @param _from The sender of the tokens.\n     * @param _to The receiver of the tokens.\n     * @param _value The amount of tokens to send.\n     * @return True on success, false otherwise.\n     */\n    function transferFrom(address _from, address _to, uint256 _value)\n    public\n    returns (bool success) {\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n            balances[_to] = SafeMath.add(balances[_to], _value);\n            balances[_from] = SafeMath.sub(balances[_from], _value);\n            allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n            emit Transfer(_from, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns the account balance of another account with address _owner.\n     *\n     * @param _owner The address of the account to check.\n     * @return The account balance.\n     */\n    function balanceOf(address _owner)\n    public view\n    returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /**\n     * @dev Allows _spender to withdraw from your account multiple times, up to the _value amount. \n     * @dev If this function is called again it overwrites the current allowance with _value.\n     *\n     * @dev NOTE: To prevent attack vectors like the one described in [1] and discussed in [2], clients \n     * @dev SHOULD make sure to create user interfaces in such a way that they set the allowance first \n     * @dev to 0 before setting it to another value for the same spender. THOUGH The contract itself \n     * @dev shouldn't enforce it, to allow backwards compatilibilty with contracts deployed before.\n     * @dev [1] https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/\n     * @dev [2] https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     * @return True on success, false otherwise.\n     */\n    function approve(address _spender, uint256 _value)\n    public\n    returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Returns the amount which _spender is still allowed to withdraw from _owner.\n     *\n     * @param _owner The address of the sender.\n     * @param _spender The address of the receiver.\n     * @return The allowed withdrawal amount.\n     */\n    function allowance(address _owner, address _spender)\n    public view\n    returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n\ncontract RelocationToken {\n    // function of possible new contract to recieve tokenbalance to relocate - to be protected by msg.sender == StarambaToken\n    function recieveRelocation(address _creditor, uint _balance) external returns (bool);\n}\n\n\n\n /*is StandardToken */\ncontract StarambaToken is StandardToken {\n\n    // Token metadata\n    string public constant name = \"STARAMBA.Token\";\n    string public constant symbol = \"STT\";\n    uint256 public constant decimals = 18;\n    string public constant version = \"1\";\n\n    uint256 public TOKEN_CREATION_CAP = 1000 * (10**6) * 10**decimals; // 1000 million STTs\n    uint256 public constant TOKEN_MIN = 1 * 10**decimals;              // 1 STT\n\n    address public STTadmin1;      // First administrator for multi-sig mechanism\n    address public STTadmin2;      // Second administrator for multi-sig mechanism\n\n    // Contracts current state (transactions still paused during sale or already publicly available)\n    bool public transactionsActive;\n\n    // Indicate if the token is in relocation mode\n    bool public relocationActive;\n    address public newTokenContractAddress;\n\n    // How often was the supply adjusted ? (See STT Whitepaper Version 1.0 from 23. May 2018 )\n    uint8 supplyAdjustmentCount = 0;\n\n    // Keep track of holders and icoBuyers\n    mapping (address => bool) public isHolder; // track if a user is a known token holder to the smart contract - important for payouts later\n    address[] public holders;                  // array of all known holders - important for payouts later\n\n    // Store the hashes of admins' msg.data\n    mapping (address => bytes32) private multiSigHashes;\n\n    // Declare vendor keys\n    mapping (address => bool) public vendors;\n\n    // Count amount of vendors for easier verification of correct contract deployment\n    uint8 public vendorCount;\n\n    // Events used for logging\n    event LogDeliverSTT(address indexed _to, uint256 _value);\n    //event Log\n\n    modifier onlyVendor() {\n        require(vendors[msg.sender] == true);\n        _;\n    }\n\n    modifier isTransferable() {\n        require (transactionsActive == true);\n        _;\n    }\n\n    modifier onlyOwner() {\n        // check if transaction sender is admin.\n        require (msg.sender == STTadmin1 || msg.sender == STTadmin2);\n        // if yes, store his msg.data. \n        multiSigHashes[msg.sender] = keccak256(msg.data);\n        // check if his stored msg.data hash equals to the one of the other admin\n        if ((multiSigHashes[STTadmin1]) == (multiSigHashes[STTadmin2])) {\n            // if yes, both admins agreed - continue.\n            _;\n\n            // Reset hashes after successful execution\n            multiSigHashes[STTadmin1] = 0x0;\n            multiSigHashes[STTadmin2] = 0x0;\n        } else {\n            // if not (yet), return.\n            return;\n        }\n    }\n\n    /**\n     * @dev Create a new STTToken contract.\n     *\n     *  _admin1 The first admin account that owns this contract.\n     *  _admin2 The second admin account that owns this contract.\n     *  _vendors List of exactly 10 addresses that are allowed to deliver tokens.\n     */\n    constructor(address _admin1, address _admin2, address[] _vendors)\n    public\n    {\n        // Check if the parameters make sense\n\n        // admin1 and admin2 address must be set and must be different\n        require (_admin1 != 0x0);\n        require (_admin2 != 0x0);\n        require (_admin1 != _admin2);\n\n        // 10 vendor instances for delivering token purchases\n        require (_vendors.length == 10);\n\n        totalSupply = 0;\n\n        // define state\n        STTadmin1 = _admin1;\n        STTadmin2 = _admin2;\n\n        for (uint8 i = 0; i < _vendors.length; i++){\n            vendors[_vendors[i]] = true;\n            vendorCount++;\n        }\n    }\n\n    // Overridden method to check for end of fundraising before allowing transfer of tokens\n    function transfer(address _to, uint256 _value)\n    public\n    isTransferable // Only allow token transfer after the fundraising has ended\n    returns (bool success)\n    {\n        bool result = super.transfer(_to, _value);\n        if (result) {\n            trackHolder(_to); // track the owner for later payouts\n        }\n        return result;\n    }\n\n    // Overridden method to check for end of fundraising before allowing transfer of tokens\n    function transferFrom(address _from, address _to, uint256 _value)\n    public\n    isTransferable // Only allow token transfer after the fundraising has ended\n    returns (bool success)\n    {\n        bool result = super.transferFrom(_from, _to, _value);\n        if (result) {\n            trackHolder(_to); // track the owner for later payouts\n        }\n        return result;\n    }\n\n    // Allow for easier balance checking\n    function getBalanceOf(address _owner)\n    public\n    view\n    returns (uint256 _balance)\n    {\n        return balances[_owner];\n    }\n\n    // Perform an atomic swap between two token contracts \n    function relocate()\n    external \n    {\n        // Check if relocation was activated\n        require (relocationActive == true);\n        \n        // Define new token contract is\n        RelocationToken newSTT = RelocationToken(newTokenContractAddress);\n\n        // Burn the old balance\n        uint256 balance = balances[msg.sender];\n        balances[msg.sender] = 0;\n\n        // Perform the relocation of balances to new contract\n        require(newSTT.recieveRelocation(msg.sender, balance));\n    }\n\n    // Allows to figure out the amount of known token holders\n    function getHolderCount()\n    public\n    view\n    returns (uint256 _holderCount)\n    {\n        return holders.length;\n    }\n\n    // Allows for easier retrieval of holder by array index\n    function getHolder(uint256 _index)\n    public\n    view\n    returns (address _holder)\n    {\n        return holders[_index];\n    }\n\n    function trackHolder(address _to)\n    private\n    returns (bool success)\n    {\n        // Check if the recipient is a known token holder\n        if (isHolder[_to] == false) {\n            // if not, add him to the holders array and mark him as a known holder\n            holders.push(_to);\n            isHolder[_to] = true;\n        }\n        return true;\n    }\n\n\n    /// @dev delivers STT tokens from Leondra (Leondrino Exchange Germany)\n    function deliverTokens(address _buyer, uint256 _amount)\n    external\n    onlyVendor\n    {\n        require(_amount >= TOKEN_MIN);\n\n        uint256 checkedSupply = SafeMath.add(totalSupply, _amount);\n        require(checkedSupply <= TOKEN_CREATION_CAP);\n\n        // Adjust the balance\n        uint256 oldBalance = balances[_buyer];\n        balances[_buyer] = SafeMath.add(oldBalance, _amount);\n        totalSupply = checkedSupply;\n\n        trackHolder(_buyer);\n\n        // Log the creation of these tokens\n        emit LogDeliverSTT(_buyer, _amount);\n    }\n\n    /// @dev Creates new STT tokens\n    function deliverTokensBatch(address[] _buyer, uint256[] _amount)\n    external\n    onlyVendor\n    {\n        require(_buyer.length == _amount.length);\n\n        for (uint8 i = 0 ; i < _buyer.length; i++) {\n            require(_amount[i] >= TOKEN_MIN);\n            require(_buyer[i] != 0x0);\n\n            uint256 checkedSupply = SafeMath.add(totalSupply, _amount[i]);\n            require(checkedSupply <= TOKEN_CREATION_CAP);\n\n            // Adjust the balance\n            uint256 oldBalance = balances[_buyer[i]];\n            balances[_buyer[i]] = SafeMath.add(oldBalance, _amount[i]);\n            totalSupply = checkedSupply;\n\n            trackHolder(_buyer[i]);\n\n            // Log the creation of these tokens\n            emit LogDeliverSTT(_buyer[i], _amount[i]);\n        }\n    }\n\n    // Allow / Deny transfer of tokens\n    function transactionSwitch(bool _transactionsActive) \n    external \n    onlyOwner\n    {\n        transactionsActive = _transactionsActive;\n    }\n\n    // For eventual later moving to another token contract\n    function relocationSwitch(bool _relocationActive, address _newTokenContractAddress) \n    external \n    onlyOwner\n    {\n        if (_relocationActive) {\n            require(_newTokenContractAddress != 0x0);\n        } else {\n            require(_newTokenContractAddress == 0x0);\n        }\n        relocationActive = _relocationActive;\n        newTokenContractAddress = _newTokenContractAddress;\n    }\n\n    // Adjust the cap according to the white paper terms (See STT Whitepaper Version 1.0 from 23. May 2018 )\n    function adjustCap()\n    external\n    onlyOwner\n    {\n        require (supplyAdjustmentCount < 4);\n        TOKEN_CREATION_CAP = SafeMath.add(TOKEN_CREATION_CAP, 50 * (10**6) * 10**decimals); // 50 million STTs\n        supplyAdjustmentCount++;\n    }\n\n    // Burn function - name indicating the burn of ALL owner's tokens\n    function burnWholeBalance()\n    external\n    {\n        require(balances[msg.sender] > 0);\n        totalSupply = SafeMath.sub(totalSupply, balances[msg.sender]);\n        balances[msg.sender] = 0;\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newTokenContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vendors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deliverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STTadmin2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"adjustCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STTadmin1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHolderCount\",\"outputs\":[{\"name\":\"_holderCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionsActive\",\"type\":\"bool\"}],\"name\":\"transactionSwitch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vendorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getBalanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_relocationActive\",\"type\":\"bool\"},{\"name\":\"_newTokenContractAddress\",\"type\":\"address\"}],\"name\":\"relocationSwitch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"relocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnWholeBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionsActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"deliverTokensBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"relocationActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getHolder\",\"outputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_CREATION_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin1\",\"type\":\"address\"},{\"name\":\"_admin2\",\"type\":\"address\"},{\"name\":\"_vendors\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogDeliverSTT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040526012600a0a633b9aca00026003556000600660146101000a81548160ff021916908360ff1602179055503480156200003b57600080fd5b5060405162002b8238038062002b828339810180604052810190808051906020019092919080519060200190929190805182019291905050506000808473ffffffffffffffffffffffffffffffffffffffff16141515156200009c57600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff1614151515620000c357600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515620000ff57600080fd5b600a82511415156200011057600080fd5b6000808190555083600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600090505b81518160ff1610156200025e576001600a6000848460ff16815181101515620001c357fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600b600081819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff1602179055505080806001019150506200019e565b5050505061291080620002726000396000f30060806040526004361061018b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610190578063095ea7b31461022057806318160ddd146102855780631aa359ff146102b057806323b872dd1461030757806327e30c361461038c5780632a11ced0146103e7578063313ce567146104545780634dd49e081461047f57806351ec8433146104cc57806354fd4d501461052357806367de698d146105b35780636a5c44a9146105ca57806370a08231146106215780637136982b1461067857806382401f06146106a35780638858287b146106d257806395d89b41146107035780639b96eece14610793578063a9059cbb146107ea578063a906f8371461084f578063b73afe4f1461089e578063bbe2b727146108b5578063c69e06db146108cc578063cf72085f146108fb578063d4d7b19a1461094e578063dd62ed3e146109a9578063de25577814610a20578063e74799b414610a4f578063e8a96b4614610a7a578063f9fae4f714610ae7575b600080fd5b34801561019c57600080fd5b506101a5610b12565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101e55780820151818401526020810190506101ca565b50505050905090810190601f1680156102125780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022c57600080fd5b5061026b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b4b565b604051808215151515815260200191505060405180910390f35b34801561029157600080fd5b5061029a610c3d565b6040518082815260200191505060405180910390f35b3480156102bc57600080fd5b506102c5610c43565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561031357600080fd5b50610372600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c69565b604051808215151515815260200191505060405180910390f35b34801561039857600080fd5b506103cd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cb7565b604051808215151515815260200191505060405180910390f35b3480156103f357600080fd5b5061041260048036038101908080359060200190929190505050610cd7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561046057600080fd5b50610469610d15565b6040518082815260200191505060405180910390f35b34801561048b57600080fd5b506104ca600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d1a565b005b3480156104d857600080fd5b506104e1610ea5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561052f57600080fd5b50610538610ecb565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561057857808201518184015260208101905061055d565b50505050905090810190601f1680156105a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105bf57600080fd5b506105c8610f04565b005b3480156105d657600080fd5b506105df611247565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561062d57600080fd5b50610662600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061126d565b6040518082815260200191505060405180910390f35b34801561068457600080fd5b5061068d6112b6565b6040518082815260200191505060405180910390f35b3480156106af57600080fd5b506106d06004803603810190808035151590602001909291905050506112c3565b005b3480156106de57600080fd5b506106e76115b2565b604051808260ff1660ff16815260200191505060405180910390f35b34801561070f57600080fd5b506107186115c5565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561075857808201518184015260208101905061073d565b50505050905090810190601f1680156107855780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561079f57600080fd5b506107d4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115fe565b6040518082815260200191505060405180910390f35b3480156107f657600080fd5b50610835600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611647565b604051808215151515815260200191505060405180910390f35b34801561085b57600080fd5b5061089c600480360381019080803515159060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611693565b005b3480156108aa57600080fd5b506108b3611a1b565b005b3480156108c157600080fd5b506108ca611bd9565b005b3480156108d857600080fd5b506108e1611cbf565b604051808215151515815260200191505060405180910390f35b34801561090757600080fd5b5061094c600480360381019080803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390505050611cd2565b005b34801561095a57600080fd5b5061098f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ff9565b604051808215151515815260200191505060405180910390f35b3480156109b557600080fd5b50610a0a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612019565b6040518082815260200191505060405180910390f35b348015610a2c57600080fd5b50610a356120a0565b604051808215151515815260200191505060405180910390f35b348015610a5b57600080fd5b50610a646120b3565b6040518082815260200191505060405180910390f35b348015610a8657600080fd5b50610aa5600480360381019080803590602001909291905050506120be565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610af357600080fd5b50610afc612101565b6040518082815260200191505060405180910390f35b6040805190810160405280600e81526020017f53544152414d42412e546f6b656e00000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060011515600560149054906101000a900460ff161515141515610c8e57600080fd5b610c99858585612107565b90508015610cac57610caa84612508565b505b809150509392505050565b600a6020528060005260406000206000915054906101000a900460ff1681565b600881815481101515610ce657fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601281565b60008060011515600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610d7c57600080fd5b6012600a0a6001028310151515610d9257600080fd5b610d9e6000548461262a565b91506003548211151515610db157600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610dfd818461262a565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600081905550610e5084612508565b508373ffffffffffffffffffffffffffffffffffffffff167f06f56047b1254ca76de671227d293f8bac23fe1a2c4d3e4a455de259bfa04ee2846040518082815260200191505060405180910390a250505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610fad5750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610fb857600080fd5b600036604051808383808284378201915050925050506040518091039020600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020816000191690555060096000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000191660096000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460001916141561123f576004600660149054906101000a900460ff1660ff1610151561111057600080fd5b6111266003546012600a0a6302faf0800261262a565b6003819055506006601481819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff16021790555050600060010260096000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208160001916905550600060010260096000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208160001916905550611244565b611245565b5b565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600880549050905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061136c5750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561137757600080fd5b600036604051808383808284378201915050925050506040518091039020600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020816000191690555060096000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000191660096000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000191614156115a95780600560146101000a81548160ff021916908315150217905550600060010260096000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208160001916905550600060010260096000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081600019169055506115ae565b6115af565b5b50565b600b60009054906101000a900460ff1681565b6040805190810160405280600381526020017f535454000000000000000000000000000000000000000000000000000000000081525081565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060011515600560149054906101000a900460ff16151514151561166c57600080fd5b6116768484612654565b905080156116895761168784612508565b505b8091505092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061173c5750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561174757600080fd5b600036604051808383808284378201915050925050506040518091039020600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020816000191690555060096000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000191660096000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600019161415611a115781156118af5760008173ffffffffffffffffffffffffffffffffffffffff16141515156118aa57600080fd5b6118d5565b60008173ffffffffffffffffffffffffffffffffffffffff161415156118d457600080fd5b5b81600560156101000a81548160ff02191690831515021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060010260096000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208160001916905550600060010260096000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208160001916905550611a16565b611a17565b5b5050565b60008060011515600560159054906101000a900460ff161515141515611a4057600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16636c464c3d33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611b8f57600080fd5b505af1158015611ba3573d6000803e3d6000fd5b505050506040513d6020811015611bb957600080fd5b81019080805190602001909291905050501515611bd557600080fd5b5050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515611c2757600080fd5b611c72600054600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546128c6565b6000819055506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600560149054906101000a900460ff1681565b600080600060011515600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611d3657600080fd5b8484905087879050141515611d4a57600080fd5b600092505b868690508360ff161015611ff0576012600a0a60010285858560ff168181101515611d7657fe5b9050602002013510151515611d8a57600080fd5b600087878560ff168181101515611d9d57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611ddd57600080fd5b611e0060005486868660ff168181101515611df457fe5b9050602002013561262a565b91506003548211151515611e1357600080fd5b6001600088888660ff168181101515611e2857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050611ea38186868660ff168181101515611e9757fe5b9050602002013561262a565b6001600089898760ff168181101515611eb857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600081905550611f5087878560ff168181101515611f2e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16612508565b5086868460ff168181101515611f6257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f06f56047b1254ca76de671227d293f8bac23fe1a2c4d3e4a455de259bfa04ee286868660ff168181101515611fc757fe5b905060200201356040518082815260200191505060405180910390a28280600101935050611d4f565b50505050505050565b60076020528060005260406000206000915054906101000a900460ff1681565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600560159054906101000a900460ff1681565b6012600a0a60010281565b60006008828154811015156120cf57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60035481565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156121d4575081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156121e05750600082115b801561226b5750600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b156124fc576122b9600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361262a565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612345600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836128c6565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061240e600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836128c6565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050612501565b600090505b9392505050565b6000801515600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514156126215760088290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b60019050919050565b60008082840190508381101580156126425750828110155b151561264a57fe5b8091505092915050565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156126a55750600082115b80156127305750600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b156128bb5761277e600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836128c6565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061280a600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361262a565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190506128c0565b600090505b92915050565b6000808284101515156128d557fe5b828403905080915050929150505600a165627a7a72305820a047beec369da1f69fb0c5f39d5354cec3724c45ef7497aa136ba4cfb66204b800290000000000000000000000000ec4cc1dc980d2d371c53011f6c408f6a0f3c3dd000000000000000000000000e9a96dc46ecb3ba736f8108078d34268ca0edd070000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000001fc69c9b0cebebcb4de3f92df92c8f6b3fb040660000000000000000000000009a2b856605bf9846c1bbe9558a85dfdca03d9d0c0000000000000000000000008fbb5457dbcf5dea20b15161bfa7899a2fd06cf40000000000000000000000009490f343d4ec38542b1f287cfa03ab7e82b3d9190000000000000000000000006c83ecdf51f3fd621377ba902a9f341c4794ee93000000000000000000000000e8c9a5395b2927c9a8d30f9c828d65ee5f9e38190000000000000000000000009aadfd9cbaf52f9bd63bf4d543f216c91e5805a5000000000000000000000000334f7945d402f2f34081535d064c02898a6b3ef8000000000000000000000000084afecf0468483ef768763dbbb1b7b800699c3b000000000000000000000000dc82c9f87e77c7700188e03e3deff26c3112adbb",
  "constructorArguments": "0000000000000000000000000ec4cc1dc980d2d371c53011f6c408f6a0f3c3dd000000000000000000000000e9a96dc46ecb3ba736f8108078d34268ca0edd070000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000001fc69c9b0cebebcb4de3f92df92c8f6b3fb040660000000000000000000000009a2b856605bf9846c1bbe9558a85dfdca03d9d0c0000000000000000000000008fbb5457dbcf5dea20b15161bfa7899a2fd06cf40000000000000000000000009490f343d4ec38542b1f287cfa03ab7e82b3d9190000000000000000000000006c83ecdf51f3fd621377ba902a9f341c4794ee93000000000000000000000000e8c9a5395b2927c9a8d30f9c828d65ee5f9e38190000000000000000000000009aadfd9cbaf52f9bd63bf4d543f216c91e5805a5000000000000000000000000334f7945d402f2f34081535d064c02898a6b3ef8000000000000000000000000084afecf0468483ef768763dbbb1b7b800699c3b000000000000000000000000dc82c9f87e77c7700188e03e3deff26c3112adbb"
}