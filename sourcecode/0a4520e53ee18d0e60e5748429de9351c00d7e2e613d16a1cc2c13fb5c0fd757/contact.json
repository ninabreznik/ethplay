{
  "address": "0xcbf433ba16ba27579762dffb19dac10b024c721f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Grand",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-26\n*/\n\npragma solidity >=0.4.23 <0.6.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Calculates the average of two numbers. Since these are integers,\n     * averages of an even and odd number cannot be represented, and will be\n     * rounded down.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n/*** @title ERC20 interface */\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address _owner) public view returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n    function approve(address _spender, uint256 _value) public returns (bool);\n    function allowance(address _owner, address _spender) public view returns (uint256);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n/*** @title ERC223 interface */\ncontract ERC223ReceivingContract {\n    function tokenFallback(address _from, uint _value, bytes memory _data) public;\n}\n\ncontract ERC223 {\n    function balanceOf(address who) public view returns (uint);\n    function transfer(address to, uint value) public returns (bool);\n    function transfer(address to, uint value, bytes memory data) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint value); //ERC 20 style\n    //event Transfer(address indexed from, address indexed to, uint value, bytes data);\n}\n\n/*** @title ERC223 token */\ncontract ERC223Token is ERC223 {\n    using SafeMath for uint;\n\n    mapping(address => uint256) balances;\n\n    function transfer(address _to, uint _value) public returns (bool) {\n        uint codeLength;\n        bytes memory empty;\n\n        assembly {\n            // Retrieve the size of the code on target address, this needs assembly .\n            codeLength := extcodesize(_to)\n        }\n\n        require(_value > 0);\n        require(balances[msg.sender] >= _value);\n        require(balances[_to] + _value > 0);\n        require(msg.sender != _to);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        if (codeLength > 0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, empty);\n            return false;\n        }\n\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transfer(address _to, uint _value, bytes memory _data) public returns (bool) {\n        // Standard function transfer similar to ERC20 transfer with no _data .\n        // Added due to backwards compatibility reasons .\n        uint codeLength;\n        assembly {\n            // Retrieve the size of the code on target address, this needs assembly .\n            codeLength := extcodesize(_to)\n        }\n\n        require(_value > 0);\n        require(balances[msg.sender] >= _value);\n        require(balances[_to] + _value > 0);\n        require(msg.sender != _to);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        if (codeLength > 0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, _data);\n            return false;\n        }\n\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n}\n\n//////////////////////////////////////////////////////////////////////////\n//////////////////////// [Grand Coin] MAIN ////////////////////////\n//////////////////////////////////////////////////////////////////////////\n/*** @title Owned */\ncontract Owned {\n    address public owner;\n\n    constructor() internal {\n        owner = msg.sender;\n        owner = 0x800A4B210B920020bE22668d28afd7ddef5c6243\n;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n}\n\n/*** @title Grand Token */\ncontract Grand is ERC223Token, Owned {\n    string public constant name = \"Grand Coin\";\n    string public constant symbol = \"GRAND\";\n    uint8 public constant decimals = 18;\n\n    uint256 public tokenRemained = 2 * (10 ** 9) * (10 ** uint(decimals)); // 2 billion Grand, decimals set to 18\n    uint256 public totalSupply = 2 * (10 ** 9) * (10 ** uint(decimals));\n\n    bool public pause = false;\n\n    mapping(address => bool) lockAddresses;\n\n    // constructor\n    constructor () public {\n        //allocate to ______\n        balances[0x96F7F180C6B53e9313Dc26589739FDC8200a699f] = totalSupply;\n    }\n\n    // change the contract owner\n    function changeOwner(address _new) public onlyOwner {\n    \trequire(_new != address(0));\n        owner = _new;\n    }\n\n    // pause all the g on the contract\n    function pauseContract() public onlyOwner {\n        pause = true;\n    }\n\n    function resumeContract() public onlyOwner {\n        pause = false;\n    }\n\n    function is_contract_paused() public view returns (bool) {\n        return pause;\n    }\n\n    // lock one's wallet\n    function lock(address _addr) public onlyOwner {\n        lockAddresses[_addr] = true;\n    }\n\n    function unlock(address _addr) public onlyOwner {\n        lockAddresses[_addr] = false;\n    }\n\n    function am_I_locked(address _addr) public view returns (bool) {\n        return lockAddresses[_addr];\n    }\n\n    // contract can receive eth\n    function() external payable {}\n\n    // extract ether sent to the contract\n    function getETH(uint256 _amount) public onlyOwner {\n        msg.sender.transfer(_amount);\n    }\n\n    /////////////////////////////////////////////////////////////////////\n    ///////////////// ERC223 Standard functions /////////////////////////\n    /////////////////////////////////////////////////////////////////////\n    modifier transferable(address _addr) {\n        require(!pause);\n        require(!lockAddresses[_addr]);\n        _;\n    }\n\n    function transfer(address _to, uint _value, bytes memory _data) public transferable(msg.sender) returns (bool) {\n        return super.transfer(_to, _value, _data);\n    }\n\n    function transfer(address _to, uint _value) public transferable(msg.sender) returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    /////////////////////////////////////////////////////////////////////\n    ///////////////////  Rescue functions  //////////////////////////////\n    /////////////////////////////////////////////////////////////////////\n    function transferAnyERC20Token(address _tokenAddress, uint256 _value) public onlyOwner returns (bool) {\n        return ERC20(_tokenAddress).transfer(owner, _value);\n    }\n}",
  "bytecode": "60806040526b06765c793fa10079d000000060028190556003556004805460ff1916905534801561002f57600080fd5b50600180546001600160a01b031990811633171673800a4b210b920020be22668d28afd7ddef5c62431790556003547396f7f180c6b53e9313dc26589739fdc8200a699f60009081526020527f0d2b64cdc0aa9002b2d23aa5efb4fff4f1151345a380bc196a9c4822aedfeb1055610cc0806100ac6000396000f3fe6080604052600436106101145760003560e01c806395d89b41116100a0578063be45fd6211610064578063be45fd62146103ba578063c4bc5da514610482578063dc39d06d14610497578063f435f5a7146104d0578063f73770e71461050357610114565b806395d89b41146102f15780639851a5f214610306578063a6f9dae11461031b578063a9059cbb1461034e578063b8901a411461038757610114565b8063313ce567116100e7578063313ce56714610224578063439766ce1461024f57806370a08231146102645780638456cb59146102975780638da5cb5b146102c057610114565b806306fdde031461011657806318160ddd146101a05780632835b45c146101c75780632f6c493c146101f1575b005b34801561012257600080fd5b5061012b610518565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016557818101518382015260200161014d565b50505050905090810190601f1680156101925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ac57600080fd5b506101b5610541565b60408051918252519081900360200190f35b3480156101d357600080fd5b50610114600480360360208110156101ea57600080fd5b5035610547565b3480156101fd57600080fd5b506101146004803603602081101561021457600080fd5b50356001600160a01b031661058f565b34801561023057600080fd5b506102396105c7565b6040805160ff9092168252519081900360200190f35b34801561025b57600080fd5b506101146105cc565b34801561027057600080fd5b506101b56004803603602081101561028757600080fd5b50356001600160a01b03166105f2565b3480156102a357600080fd5b506102ac61060d565b604080519115158252519081900360200190f35b3480156102cc57600080fd5b506102d5610616565b604080516001600160a01b039092168252519081900360200190f35b3480156102fd57600080fd5b5061012b610625565b34801561031257600080fd5b506101b5610649565b34801561032757600080fd5b506101146004803603602081101561033e57600080fd5b50356001600160a01b031661064f565b34801561035a57600080fd5b506102ac6004803603604081101561037157600080fd5b506001600160a01b03813516906020013561069b565b34801561039357600080fd5b506102ac600480360360208110156103aa57600080fd5b50356001600160a01b03166106e8565b3480156103c657600080fd5b506102ac600480360360608110156103dd57600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561040d57600080fd5b82018360208201111561041f57600080fd5b8035906020019184600183028401116401000000008311171561044157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610706945050505050565b34801561048e57600080fd5b50610114610755565b3480156104a357600080fd5b506102ac600480360360408110156104ba57600080fd5b506001600160a01b038135169060200135610778565b3480156104dc57600080fd5b50610114600480360360208110156104f357600080fd5b50356001600160a01b0316610820565b34801561050f57600080fd5b506102ac61085b565b6040518060400160405280600a8152602001600160b11b6923b930b7321021b7b4b70281525081565b60035481565b6001546001600160a01b0316331461055e57600080fd5b604051339082156108fc029083906000818181858888f1935050505015801561058b573d6000803e3d6000fd5b5050565b6001546001600160a01b031633146105a657600080fd5b6001600160a01b03166000908152600560205260409020805460ff19169055565b601281565b6001546001600160a01b031633146105e357600080fd5b6004805460ff19166001179055565b6001600160a01b031660009081526020819052604090205490565b60045460ff1681565b6001546001600160a01b031681565b604051806040016040528060058152602001600160da1b6411d49053910281525081565b60025481565b6001546001600160a01b0316331461066657600080fd5b6001600160a01b03811661067957600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600454600090339060ff16156106b057600080fd5b6001600160a01b03811660009081526005602052604090205460ff16156106d657600080fd5b6106e08484610864565b949350505050565b6001600160a01b031660009081526005602052604090205460ff1690565b600454600090339060ff161561071b57600080fd5b6001600160a01b03811660009081526005602052604090205460ff161561074157600080fd5b61074c858585610a69565b95945050505050565b6001546001600160a01b0316331461076c57600080fd5b6004805460ff19169055565b6001546000906001600160a01b0316331461079257600080fd5b60015460408051600160e01b63a9059cbb0281526001600160a01b0392831660048201526024810185905290519185169163a9059cbb916044808201926020929091908290030181600087803b1580156107eb57600080fd5b505af11580156107ff573d6000803e3d6000fd5b505050506040513d602081101561081557600080fd5b505190505b92915050565b6001546001600160a01b0316331461083757600080fd5b6001600160a01b03166000908152600560205260409020805460ff19166001179055565b60045460ff1690565b6000823b60608361087457600080fd5b3360009081526020819052604090205484111561089057600080fd5b6001600160a01b03851660009081526020819052604090205484016108b457600080fd5b336001600160a01b03861614156108ca57600080fd5b336000908152602081905260409020546108ea908563ffffffff610c6d16565b33600090815260208190526040808220929092556001600160a01b0387168152205461091c908563ffffffff610c8216565b6001600160a01b0386166000908152602081905260409020558115610a1e57604051600160e11b63607705c502815233600482018181526024830187905260606044840190815284516064850152845189946001600160a01b0386169463c0ee0b8a9490938b93899360840190602085019080838360005b838110156109ac578181015183820152602001610994565b50505050905090810190601f1680156109d95780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156109fa57600080fd5b505af1158015610a0e573d6000803e3d6000fd5b505050506000935050505061081a565b6040805185815290516001600160a01b0387169133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3506001949350505050565b6000833b83610a7757600080fd5b33600090815260208190526040902054841115610a9357600080fd5b6001600160a01b0385166000908152602081905260409020548401610ab757600080fd5b336001600160a01b0386161415610acd57600080fd5b33600090815260208190526040902054610aed908563ffffffff610c6d16565b33600090815260208190526040808220929092556001600160a01b03871681522054610b1f908563ffffffff610c8216565b6001600160a01b0386166000908152602081905260409020558015610c2057604051600160e11b63607705c502815233600482018181526024830187905260606044840190815286516064850152865189946001600160a01b0386169463c0ee0b8a9490938b938b9360840190602085019080838360005b83811015610baf578181015183820152602001610b97565b50505050905090810190601f168015610bdc5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610bfd57600080fd5b505af1158015610c11573d6000803e3d6000fd5b50505050600092505050610c66565b6040805185815290516001600160a01b0387169133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a360019150505b9392505050565b600082821115610c7c57600080fd5b50900390565b600082820183811015610c6657600080fdfea165627a7a72305820be63b08f85575b47b9282734efae157a5d923be41eb0568b19968f08b12eff570029"
}