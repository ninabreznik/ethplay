{
  "address": "0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NewLRCToken",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-08\n*/\n\npragma solidity 0.5.7;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed burner, uint256 value);\n}\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n    /**\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    /**\n     * @dev Adds two numbers, throws on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n    mapping(address => uint256) balances;\n    uint256 totalSupply_;\n    uint256 burnedTotalNum_;\n\n    /**\n     * @dev total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n     * @dev total number of tokens already burned\n     */\n    function totalBurned() public view returns (uint256) {\n        return burnedTotalNum_;\n    }\n\n    function burn(uint256 _value) public returns (bool) {\n        require(_value <= balances[msg.sender]);\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        burnedTotalNum_ = burnedTotalNum_.add(_value);\n\n        emit Burn(burner, _value);\n        return true;\n    }\n\n    /**\n     * @dev transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        // if _to is address(0), invoke burn function.\n        if (_to == address(0)) {\n            return burn(_value);\n        }\n\n        require(_value <= balances[msg.sender]);\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n}\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n    uint public constant MAX_UINT = 2**256 - 1;\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    function burnFrom(address _owner, uint256 _value) public returns (bool) {\n        require(_owner != address(0));\n        require(_value <= balances[_owner]);\n        require(_value <= allowed[_owner][msg.sender]);\n\n        balances[_owner] = balances[_owner].sub(_value);\n        if (allowed[_owner][msg.sender] < MAX_UINT) {\n            allowed[_owner][msg.sender] = allowed[_owner][msg.sender].sub(_value);\n        }\n        totalSupply_ = totalSupply_.sub(_value);\n        burnedTotalNum_ = burnedTotalNum_.add(_value);\n\n        emit Burn(_owner, _value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        if (_to == address(0)) {\n            return burnFrom(_from, _value);\n        }\n\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        /// an allowance of MAX_UINT represents an unlimited allowance.\n        /// @dev see https://github.com/ethereum/EIPs/issues/717\n        if (allowed[_from][msg.sender] < MAX_UINT) {\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        }\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\ncontract NewLRCToken is StandardToken {\n    using SafeMath for uint256;\n\n    string     public name = \"LoopringCoin V2\";\n    string     public symbol = \"LRC\";\n    uint8      public decimals = 18;\n\n    constructor() public {\n        // @See https://etherscan.io/address/0xEF68e7C694F40c8202821eDF525dE3782458639f#readContract\n        totalSupply_ = 1395076054523857892274603100;\n\n        balances[msg.sender] = totalSupply_;\n    }\n\n    function batchTransfer(address[] calldata accounts, uint256[] calldata amounts)\n        external\n        returns (bool)\n    {\n        require(accounts.length == amounts.length);\n        for (uint i = 0; i < accounts.length; i++) {\n            require(transfer(accounts[i], amounts[i]), \"transfer failed\");\n        }\n        return true;\n    }\n\n    function () payable external {\n        revert();\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]",
  "bytecode": "60c0604052600f60808190527f4c6f6f7072696e67436f696e205632000000000000000000000000000000000060a090815261003e91600491906100c5565b506040805180820190915260038082527f4c524300000000000000000000000000000000000000000000000000000000006020909201918252610083916005916100c5565b506006805460ff1916601217905534801561009d57600080fd5b506b0481fad87471f181f768045c600181905533600090815260208190526040902055610160565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010657805160ff1916838001178555610133565b82800160010185558215610133579182015b82811115610133578251825591602001919060010190610118565b5061013f929150610143565b5090565b61015d91905b8082111561013f5760008155600101610149565b90565b610e328061016f6000396000f3fe6080604052600436106100f35760003560e01c806379cc67901161008a578063d73dd62311610059578063d73dd62314610450578063d89135cd14610489578063dd62ed3e1461049e578063e5b5019a146104d9576100f3565b806379cc6790146102fa57806388d695b21461033357806395d89b4114610402578063a9059cbb14610417576100f3565b8063313ce567116100c6578063313ce5671461023957806342966c6814610264578063661884631461028e57806370a08231146102c7576100f3565b806306fdde03146100f8578063095ea7b31461018257806318160ddd146101cf57806323b872dd146101f6575b600080fd5b34801561010457600080fd5b5061010d6104ee565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014757818101518382015260200161012f565b50505050905090810190601f1680156101745780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018e57600080fd5b506101bb600480360360408110156101a557600080fd5b506001600160a01b03813516906020013561057c565b604080519115158252519081900360200190f35b3480156101db57600080fd5b506101e46105e3565b60408051918252519081900360200190f35b34801561020257600080fd5b506101bb6004803603606081101561021957600080fd5b506001600160a01b038135811691602081013590911690604001356105e9565b34801561024557600080fd5b5061024e6107a7565b6040805160ff9092168252519081900360200190f35b34801561027057600080fd5b506101bb6004803603602081101561028757600080fd5b50356107b0565b34801561029a57600080fd5b506101bb600480360360408110156102b157600080fd5b506001600160a01b038135169060200135610879565b3480156102d357600080fd5b506101e4600480360360208110156102ea57600080fd5b50356001600160a01b0316610969565b34801561030657600080fd5b506101bb6004803603604081101561031d57600080fd5b506001600160a01b038135169060200135610984565b34801561033f57600080fd5b506101bb6004803603604081101561035657600080fd5b81019060208101813564010000000081111561037157600080fd5b82018360208201111561038357600080fd5b803590602001918460208302840111640100000000831117156103a557600080fd5b9193909290916020810190356401000000008111156103c357600080fd5b8201836020820111156103d557600080fd5b803590602001918460208302840111640100000000831117156103f757600080fd5b509092509050610b18565b34801561040e57600080fd5b5061010d610bd0565b34801561042357600080fd5b506101bb6004803603604081101561043a57600080fd5b506001600160a01b038135169060200135610c2b565b34801561045c57600080fd5b506101bb6004803603604081101561047357600080fd5b506001600160a01b038135169060200135610d15565b34801561049557600080fd5b506101e4610dae565b3480156104aa57600080fd5b506101e4600480360360408110156104c157600080fd5b506001600160a01b0381358116916020013516610db4565b3480156104e557600080fd5b506101e4610ddf565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105745780601f1061054957610100808354040283529160200191610574565b820191906000526020600020905b81548152906001019060200180831161055757829003601f168201915b505050505081565b3360008181526003602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b60015490565b60006001600160a01b03831661060a576106038483610984565b90506107a0565b6001600160a01b03841660009081526020819052604090205482111561062f57600080fd5b6001600160a01b038416600090815260036020908152604080832033845290915290205482111561065f57600080fd5b6001600160a01b038416600090815260208190526040902054610688908363ffffffff610de516565b6001600160a01b0380861660009081526020819052604080822093909355908516815220546106bd908363ffffffff610df716565b6001600160a01b038085166000908152602081815260408083209490945591871681526003825282812033825290915220546000191115610751576001600160a01b038416600090815260036020908152604080832033845290915290205461072c908363ffffffff610de516565b6001600160a01b03851660009081526003602090815260408083203384529091529020555b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35060015b9392505050565b60065460ff1681565b336000908152602081905260408120548211156107cc57600080fd5b336000818152602081905260409020546107ec908463ffffffff610de516565b6001600160a01b038216600090815260208190526040902055600154610818908463ffffffff610de516565b60015560025461082e908463ffffffff610df716565b6002556040805184815290516001600160a01b038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250600192915050565b3360009081526003602090815260408083206001600160a01b0386168452909152812054808311156108ce573360009081526003602090815260408083206001600160a01b0388168452909152812055610903565b6108de818463ffffffff610de516565b3360009081526003602090815260408083206001600160a01b03891684529091529020555b3360008181526003602090815260408083206001600160a01b0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6001600160a01b031660009081526020819052604090205490565b60006001600160a01b03831661099957600080fd5b6001600160a01b0383166000908152602081905260409020548211156109be57600080fd5b6001600160a01b03831660009081526003602090815260408083203384529091529020548211156109ee57600080fd5b6001600160a01b038316600090815260208190526040902054610a17908363ffffffff610de516565b6001600160a01b0384166000908152602081815260408083209390935560038152828220338352905220546000191115610aa4576001600160a01b0383166000908152600360209081526040808320338452909152902054610a7f908363ffffffff610de516565b6001600160a01b03841660009081526003602090815260408083203384529091529020555b600154610ab7908363ffffffff610de516565b600155600254610acd908363ffffffff610df716565b6002556040805183815290516001600160a01b038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250600192915050565b6000838214610b2657600080fd5b60005b84811015610bc457610b68868683818110610b4057fe5b905060200201356001600160a01b0316858584818110610b5c57fe5b90506020020135610c2b565b610bbc5760408051600160e51b62461bcd02815260206004820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b600101610b29565b50600195945050505050565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105745780601f1061054957610100808354040283529160200191610574565b60006001600160a01b038316610c4b57610c44826107b0565b90506105dd565b33600090815260208190526040902054821115610c6757600080fd5b33600090815260208190526040902054610c87908363ffffffff610de516565b33600090815260208190526040808220929092556001600160a01b03851681522054610cb9908363ffffffff610df716565b6001600160a01b038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b3360009081526003602090815260408083206001600160a01b0386168452909152812054610d49908363ffffffff610df716565b3360008181526003602090815260408083206001600160a01b0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b60025490565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b60001981565b600082821115610df157fe5b50900390565b6000828201838110156107a057fefea165627a7a723058201c405aebe4a246d2ab77066119efda4b4c9bd2c83e542bc33cb5c8521644b5df0029"
}