{
  "address": "0xe947ce8712c9481ca762afb36adecae2f33c7116",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DataKyc",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-27\n*/\n\n// Abstract contract for the full ERC 20 Token standard\n// https://github.com/ethereum/EIPs/issues/20\npragma solidity ^0.4.16;\n\n\npragma solidity ^0.4.16;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Ownable {\n    address public owner;\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() {\n        owner = msg.sender;\n    }\n\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n\n}\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) constant returns (uint256);\n    function transfer(address to, uint256 value) returns (bool);\n\n    // KYBER-NOTE! code changed to comply with ERC20 standard\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    //event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) returns (bool) {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) returns (bool);\n    function approve(address spender, uint256 value) returns (bool);\n\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) allowed;\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amout of tokens to be transfered\n     */\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n        var _allowance = allowed[_from][msg.sender];\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) returns (bool) {\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifing the amount of tokens still avaible for the spender.\n     */\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n}\n\ncontract DataKyc is StandardToken, Ownable {\n    \n    string public constant name = \"Data Know Your Customer\";                   //fancy name: eg Simon Bucks\n    uint8 public constant decimals = 18;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n    string public constant symbol = \"DKYC\";                 //An identifier: eg SBX\n    string public constant version = 'v0.2';       //dkyc 0.1 standard. Just an arbitrary versioning scheme.\n\n\n    bool public transferEnabled = true;\n\n\n    modifier validDestination( address to ) {\n        require(to != address(0x0));\n        require(to != address(this) );\n        _;\n    }\n\n    function DataKyc() {\n        // Mint all tokens. Then disable minting forever.\n        totalSupply = 100000000 * 10 ** uint256(decimals);\n        balances[msg.sender] = totalSupply;\n        Transfer(address(0x0), msg.sender, totalSupply);\n        transferOwnership(msg.sender); // admin could drain tokens that were sent here by mistake\n    }\n\n    function transfer(address _to, uint _value)\n    validDestination(_to)\n    returns (bool) {\n        require(transferEnabled == true);\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint _value)\n    validDestination(_to)\n    returns (bool) {\n        require(transferEnabled == true);\n        return super.transferFrom(_from, _to, _value);\n    }\n\n\n    function emergencyERC20Drain( ERC20 token, uint amount ) onlyOwner {\n        token.transfer( owner, amount );\n    }\n\n    function setTransferEnable(bool enable) onlyOwner {\n        transferEnabled = enable;\n    }\n}",
  "bytecode": "60806040526003805460a060020a60ff0219167401000000000000000000000000000000000000000017905534801561003757600080fd5b5060038054600160a060020a031916339081179091556a52b7d2dcc80cd2e4000000600081815582815260016020908152604080832084905580519384525191927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a36100b5336401000000006100ba810204565b6100ff565b600354600160a060020a031633146100d157600080fd5b600160a060020a038116156100fc5760038054600160a060020a031916600160a060020a0383161790555b50565b61096b8061010e6000396000f3006080604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100df578063095ea7b31461016957806318160ddd146101a157806323b872dd146101c8578063313ce567146101f25780634cd412d51461021d57806354fd4d501461023257806370a08231146102475780638da5cb5b1461026857806395d89b4114610299578063a9059cbb146102ae578063ce1ffcd9146102d2578063db0e16f1146102ee578063dd62ed3e14610312578063f2fde38b14610339575b600080fd5b3480156100eb57600080fd5b506100f461035a565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012e578181015183820152602001610116565b50505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017557600080fd5b5061018d600160a060020a0360043516602435610391565b604080519115158252519081900360200190f35b3480156101ad57600080fd5b506101b6610433565b60408051918252519081900360200190f35b3480156101d457600080fd5b5061018d600160a060020a0360043581169060243516604435610439565b3480156101fe57600080fd5b506102076104a7565b6040805160ff9092168252519081900360200190f35b34801561022957600080fd5b5061018d6104ac565b34801561023e57600080fd5b506100f46104cd565b34801561025357600080fd5b506101b6600160a060020a0360043516610504565b34801561027457600080fd5b5061027d61051f565b60408051600160a060020a039092168252519081900360200190f35b3480156102a557600080fd5b506100f461052e565b3480156102ba57600080fd5b5061018d600160a060020a0360043516602435610565565b3480156102de57600080fd5b506102ec60043515156105d1565b005b3480156102fa57600080fd5b506102ec600160a060020a0360043516602435610628565b34801561031e57600080fd5b506101b6600160a060020a03600435811690602435166106de565b34801561034557600080fd5b506102ec600160a060020a0360043516610709565b60408051808201909152601781527f44617461204b6e6f7720596f757220437573746f6d6572000000000000000000602082015281565b60008115806103c15750336000908152600260209081526040808320600160a060020a0387168452909152902054155b15156103cc57600080fd5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60005481565b600082600160a060020a038116151561045157600080fd5b600160a060020a03811630141561046757600080fd5b60035474010000000000000000000000000000000000000000900460ff16151560011461049357600080fd5b61049e85858561075b565b95945050505050565b601281565b60035474010000000000000000000000000000000000000000900460ff1681565b60408051808201909152600481527f76302e3200000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a031660009081526001602052604090205490565b600354600160a060020a031681565b60408051808201909152600481527f444b594300000000000000000000000000000000000000000000000000000000602082015281565b600082600160a060020a038116151561057d57600080fd5b600160a060020a03811630141561059357600080fd5b60035474010000000000000000000000000000000000000000900460ff1615156001146105bf57600080fd5b6105c98484610867565b949350505050565b600354600160a060020a031633146105e857600080fd5b60038054911515740100000000000000000000000000000000000000000274ff000000000000000000000000000000000000000019909216919091179055565b600354600160a060020a0316331461063f57600080fd5b600354604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810184905290519184169163a9059cbb916044808201926020929091908290030181600087803b1580156106ae57600080fd5b505af11580156106c2573d6000803e3d6000fd5b505050506040513d60208110156106d857600080fd5b50505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a0316331461072057600080fd5b600160a060020a03811615610758576003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b600160a060020a0383166000818152600260209081526040808320338452825280832054938352600190915281205490919061079d908463ffffffff61091716565b600160a060020a0380871660009081526001602052604080822093909355908616815220546107d2908463ffffffff61092916565b600160a060020a0385166000908152600160205260409020556107fb818463ffffffff61091716565b600160a060020a03808716600081815260026020908152604080832033845282529182902094909455805187815290519288169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3506001949350505050565b33600090815260016020526040812054610887908363ffffffff61091716565b3360009081526001602052604080822092909255600160a060020a038516815220546108b9908363ffffffff61092916565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b60008282111561092357fe5b50900390565b60008282018381101561093857fe5b93925050505600a165627a7a7230582037c3997d4d5f724d3de544efda5de760e3a46135455ce47d175daba782e50cf00029"
}