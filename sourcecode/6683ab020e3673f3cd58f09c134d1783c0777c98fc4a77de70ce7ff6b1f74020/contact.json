{
  "address": "0xaae7ba823679889b12f71d1f18beecbc69e62237",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KyberWrapper",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-13\n*/\n\npragma solidity ^0.5.0;\n\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint supply);\n    function balanceOf(address _owner) external view returns (uint balance);\n    function transfer(address _to, uint _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n    function approve(address _spender, uint _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\n    function decimals() external view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ncontract KyberNetworkProxyInterface {\n    function maxGasPrice() external view returns(uint);\n    function getUserCapInWei(address user) external view returns(uint);\n    function getUserCapInTokenWei(address user, ERC20 token) external view returns(uint);\n    function enabled() external view returns(bool);\n    function info(bytes32 id) external view returns(uint);\n\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) public\n        returns (uint expectedRate, uint slippageRate);\n\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\n        uint minConversionRate, address walletId, bytes memory hint) public payable returns(uint);\n\n    function trade(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\n        uint minConversionRate, address walletId) public payable returns(uint);\n\n    function swapEtherToToken(ERC20 token, uint minConversionRate) external payable returns(uint);\n    function swapTokenToEther(ERC20 token, uint tokenQty, uint minRate) external payable returns(uint);\n    function swapTokenToToken(ERC20 src, uint srcAmount, ERC20 dest, uint minConversionRate) public returns(uint);\n}\n\ninterface ExchangeInterface {\n    function swapEtherToToken (uint _ethAmount, address _tokenAddress, uint _maxAmount) payable external returns(uint, uint);\n    function swapTokenToEther (address _tokenAddress, uint _amount, uint _maxAmount) external returns(uint);\n\n    function getExpectedRate(address src, address dest, uint srcQty) external\n        returns (uint expectedRate, uint slippageRate);\n}\n\ncontract KyberWrapper is ExchangeInterface {\n\n    // Kovan\n    // address constant KYBER_INTERFACE = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\n    // address constant ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    \n    // Mainnet\n    address constant KYBER_INTERFACE = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\n    address constant ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    address constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\n\n    function swapEtherToToken (uint _ethAmount, address _tokenAddress, uint _maxAmount) external payable returns(uint, uint) {\n        uint minRate;\n        ERC20 ETH_TOKEN_ADDRESS = ERC20(ETHER_ADDRESS);\n        ERC20 token = ERC20(_tokenAddress);\n\n        KyberNetworkProxyInterface _kyberNetworkProxy = KyberNetworkProxyInterface(KYBER_INTERFACE);\n\n        (, minRate) = _kyberNetworkProxy.getExpectedRate(ETH_TOKEN_ADDRESS, token, _ethAmount);\n\n        uint destAmount = _kyberNetworkProxy.trade.value(_ethAmount)(\n            ETH_TOKEN_ADDRESS,\n            _ethAmount,\n            token,\n            msg.sender,\n            _maxAmount,\n            minRate,\n            WALLET_ID\n        );\n\n        uint balance = address(this).balance;\n\n        msg.sender.transfer(balance);\n\n        return (destAmount, balance);\n    }\n    \n    function swapTokenToEther (address _tokenAddress, uint _amount, uint _maxAmount) external returns(uint) {\n        uint minRate;\n        ERC20 ETH_TOKEN_ADDRESS = ERC20(ETHER_ADDRESS);\n        ERC20 token = ERC20(_tokenAddress);\n        \n        KyberNetworkProxyInterface _kyberNetworkProxy = KyberNetworkProxyInterface(KYBER_INTERFACE);\n        \n        (, minRate) = _kyberNetworkProxy.getExpectedRate(token, ETH_TOKEN_ADDRESS, _amount);\n\n        // Mitigate ERC20 Approve front-running attack, by initially setting, allowance to 0\n        require(token.approve(address(_kyberNetworkProxy), 0));\n\n        // Approve tokens so network can take them during the swap\n        token.approve(address(_kyberNetworkProxy), _amount);\n\n        uint destAmount = _kyberNetworkProxy.trade(\n            token,\n            _amount,\n            ETH_TOKEN_ADDRESS,\n            msg.sender,\n            _maxAmount,\n            minRate,\n            WALLET_ID\n        );\n\n        return destAmount;\n    }\n\n    function getExpectedRate(address _src, address _dest, uint _srcQty) public returns (uint, uint) {\n        return KyberNetworkProxyInterface(KYBER_INTERFACE).getExpectedRate(ERC20(_src), ERC20(_dest), _srcQty);\n    }\n\n    function() payable external {\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50610b8a806100206000396000f3fe608060405260043610610051576000357c0100000000000000000000000000000000000000000000000000000000900480633bba21dc1461005357806343ac1dc6146100cc578063809a9e551461013f575b005b34801561005f57600080fd5b506100b66004803603606081101561007657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506101d5565b6040518082815260200191505060405180910390f35b610122600480360360608110156100e257600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106aa565b604051808381526020018281526020019250505060405180910390f35b34801561014b57600080fd5b506101b86004803603606081101561016257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a20565b604051808381526020018281526020019250505060405180910390f35b600080600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee90506000869050600073818e6fecd516ecc3849daf6845e3ec868087b75590508073ffffffffffffffffffffffffffffffffffffffff1663809a9e5583858a6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200193505050506040805180830381600087803b1580156102e557600080fd5b505af11580156102f9573d6000803e3d6000fd5b505050506040513d604081101561030f57600080fd5b8101908080519060200190929190805190602001909291905050509050809450508173ffffffffffffffffffffffffffffffffffffffff1663095ea7b38260006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156103d457600080fd5b505af11580156103e8573d6000803e3d6000fd5b505050506040513d60208110156103fe57600080fd5b8101908080519060200190929190505050151561041a57600080fd5b8173ffffffffffffffffffffffffffffffffffffffff1663095ea7b382896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156104bd57600080fd5b505af11580156104d1573d6000803e3d6000fd5b505050506040513d60208110156104e757600080fd5b81019080805190602001909291905050505060008173ffffffffffffffffffffffffffffffffffffffff1663cb3c28c7848a87338c8b73322d58b9e75a6918f7e7849aee0ff09369977e086040518863ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001975050505050505050602060405180830381600087803b15801561065e57600080fd5b505af1158015610672573d6000803e3d6000fd5b505050506040513d602081101561068857600080fd5b8101908080519060200190929190505050905080955050505050509392505050565b60008060008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee90506000869050600073818e6fecd516ecc3849daf6845e3ec868087b75590508073ffffffffffffffffffffffffffffffffffffffff1663809a9e5584848c6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200193505050506040805180830381600087803b1580156107bb57600080fd5b505af11580156107cf573d6000803e3d6000fd5b505050506040513d60408110156107e557600080fd5b81019080805190602001909291908051906020019092919050505090508094505060008173ffffffffffffffffffffffffffffffffffffffff1663cb3c28c78b868d87338e8c73322d58b9e75a6918f7e7849aee0ff09369977e086040518963ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019750505050505050506020604051808303818588803b15801561096b57600080fd5b505af115801561097f573d6000803e3d6000fd5b50505050506040513d602081101561099657600080fd5b8101908080519060200190929190505050905060003073ffffffffffffffffffffffffffffffffffffffff163190503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a0b573d6000803e3d6000fd5b50818197509750505050505050935093915050565b60008073818e6fecd516ecc3849daf6845e3ec868087b75573ffffffffffffffffffffffffffffffffffffffff1663809a9e558686866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200193505050506040805180830381600087803b158015610b0d57600080fd5b505af1158015610b21573d6000803e3d6000fd5b505050506040513d6040811015610b3757600080fd5b8101908080519060200190929190805190602001909291905050509150915093509391505056fea165627a7a7230582071f4db19fc9c613755502c504b9b32c36487990b6d89ba676c124554bb75c38e0029"
}