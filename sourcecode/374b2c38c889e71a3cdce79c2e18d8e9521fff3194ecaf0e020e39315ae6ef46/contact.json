{
  "address": "0x13f11c9905a08ca76e3e853be63d4f0944326c72",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Divi Exchange Token",
  "contractName": "DIVXToken",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-19\n*/\n\npragma solidity 0.4.11;\n\ncontract SafeMath {\n\n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n      uint256 z = x + y;\n      assert((z >= x));\n      return z;\n    }\n\n    function safeSubtract(uint256 x, uint256 y) internal constant returns(uint256) {\n      assert(x >= y);\n      return x - y;\n    }\n\n    function safeMult(uint256 x, uint256 y) internal constant returns(uint256) {\n      uint256 z = x * y;\n      assert((x == 0)||(z/x == y));\n      return z;\n    }\n\n    function safeDiv(uint256 x, uint256 y) internal constant returns (uint256) {\n      uint256 z = x / y;\n      return z;\n    }\n\n}\n\ncontract Token {\n    uint256 public totalSupply;\n    function balanceOf(address _owner) constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n    function approve(address _spender, uint256 _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n/*  ERC 20 token */\ncontract StandardToken is Token {\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n      if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n}\n\ncontract DIVXToken is StandardToken, SafeMath {\n\n    // metadata\n    string public constant name = \"Divi Exchange Token\";\n    string public constant symbol = \"DIVX\";\n    uint256 public constant decimals = 18;\n    string public version = \"1.0\";\n\n    // owner address\n    address public fundDeposit;      // deposit address for ETH and DIVX for the project\n\n    // crowdsale parameters\n    bool public isPaused;\n    bool public isRedeeming;\n    uint256 public fundingStartBlock;\n    uint256 public firstXRChangeBlock;\n    uint256 public secondXRChangeBlock;\n    uint256 public thirdXRChangeBlock;\n    uint256 public fundingEndBlock;\n\n    // Since we have different exchange rates at different stages, we need to keep track\n    // of how much ether (in units of Wei) each address contributed in case that we need\n    // to issue a refund\n    mapping (address => uint256) private weiBalances;\n\n    // We need to keep track of how much ether (in units of Wei) has been contributed\n    uint256 public totalReceivedWei;\n\n    uint256 public constant privateExchangeRate  = 1000; // 1000 DIVX tokens per 1 ETH\n    uint256 public constant firstExchangeRate    =  650; //  650 DIVX tokens per 1 ETH\n    uint256 public constant secondExchangeRate   =  575; //  575 DIVX tokens per 1 ETH\n    uint256 public constant thirdExchangeRate    =  500; //  500 DIVX tokens per 1 ETH\n\n    uint256 public constant receivedWeiCap =  100 * (10**3) * 10**decimals;\n    uint256 public constant receivedWeiMin =    5 * (10**3) * 10**decimals;\n\n    // events\n    event LogCreate(address indexed _to, uint256 _value, uint256 _tokenValue);\n    event LogRefund(address indexed _to, uint256 _value, uint256 _tokenValue);\n    event LogRedeem(address indexed _to, uint256 _value, bytes32 _diviAddress);\n\n    // modifiers\n    modifier onlyOwner() {\n      require(msg.sender == fundDeposit);\n      _;\n    }\n\n    modifier isNotPaused() {\n      require(isPaused == false);\n      _;\n    }\n\n    // constructor\n    function DIVXToken(\n        address _fundDeposit,\n        uint256 _fundingStartBlock,\n        uint256 _firstXRChangeBlock,\n        uint256 _secondXRChangeBlock,\n        uint256 _thirdXRChangeBlock,\n        uint256 _fundingEndBlock) {\n\n      isPaused    = false;\n      isRedeeming = false;\n\n      totalSupply      = 0;\n      totalReceivedWei = 0;\n\n      fundDeposit = _fundDeposit;\n\n      fundingStartBlock   = _fundingStartBlock;\n      firstXRChangeBlock  = _firstXRChangeBlock;\n      secondXRChangeBlock = _secondXRChangeBlock;\n      thirdXRChangeBlock  = _thirdXRChangeBlock;\n      fundingEndBlock     = _fundingEndBlock;\n    }\n\n    // overriden methods\n\n    // Overridden method to check that the minimum was reached (no refund is possible\n    // after that, so transfer of tokens shouldn't be a problem)\n    function transfer(address _to, uint256 _value) returns (bool success) {\n      require(totalReceivedWei >= receivedWeiMin);\n      return super.transfer(_to, _value);\n    }\n\n    // Overridden method to check that the minimum was reached (no refund is possible\n    // after that, so transfer of tokens shouldn't be a problem)\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n      require(totalReceivedWei >= receivedWeiMin);\n      return super.transferFrom(_from, _to, _value);\n    }\n\n    /// @dev Accepts ether and creates new DIVX tokens.\n    function createTokens() payable external isNotPaused {\n      require(block.number >= fundingStartBlock);\n      require(block.number <= fundingEndBlock);\n      require(msg.value > 0);\n\n      // Check that this transaction wouldn't exceed the ETH cap\n      uint256 checkedReceivedWei = safeAdd(totalReceivedWei, msg.value);\n      require(checkedReceivedWei <= receivedWeiCap);\n\n      // Calculate how many tokens (in units of Wei) should be awarded\n      // on this transaction\n      uint256 tokens = safeMult(msg.value, getCurrentTokenPrice());\n\n      // Calculate how many tokens (in units of Wei) should be awarded to the project (20%)\n      uint256 projectTokens = safeDiv(tokens, 5);\n\n      // Increment the total received ETH\n      totalReceivedWei = checkedReceivedWei;\n\n      // Only update our accounting of how much ETH this contributor has sent us if\n      // we're already on the public sale (since private sale contributions are going\n      // to be used before the end of end of the sale period, they don't get a refund)\n      if (block.number >= firstXRChangeBlock) weiBalances[msg.sender] += msg.value;\n\n      // Increment the total supply of tokens and then deposit the tokens\n      // to the contributor\n      totalSupply = safeAdd(totalSupply, tokens);\n      balances[msg.sender] += tokens;\n\n      // Increment the total supply of tokens and then deposit the tokens\n      // to the project\n      totalSupply = safeAdd(totalSupply, projectTokens);\n      balances[fundDeposit] += projectTokens;\n\n      LogCreate(msg.sender, msg.value, tokens);  // logs token creation\n    }\n\n    /// @dev Allows to transfer ether from the contract to the multisig wallet\n    function withdrawWei(uint256 _value) external onlyOwner isNotPaused {\n      require(_value <= this.balance);\n\n      // Allow withdrawal during the private sale, but after that, only allow\n      // withdrawal if we already met the minimum\n      require((block.number < firstXRChangeBlock) || (totalReceivedWei >= receivedWeiMin));\n\n      // send the eth to the project multisig wallet\n      fundDeposit.transfer(_value);\n    }\n\n    /// @dev Pauses the contract\n    function pause() external onlyOwner isNotPaused {\n      // Move the contract to Paused state\n      isPaused = true;\n    }\n\n    /// @dev Resume the contract\n    function resume() external onlyOwner {\n      // Move the contract out of the Paused state\n      isPaused = false;\n    }\n\n    /// @dev Starts the redeeming phase of the contract\n    function startRedeeming() external onlyOwner isNotPaused {\n      // Move the contract to Redeeming state\n      isRedeeming = true;\n    }\n\n    /// @dev Stops the redeeming phase of the contract\n    function stopRedeeming() external onlyOwner isNotPaused {\n      // Move the contract out of the Redeeming state\n      isRedeeming = false;\n    }\n\n    /// @dev Allows contributors to recover their ether in the case of a failed funding campaign\n    function refund() external {\n      // prevents refund until sale period is over\n      require(block.number > fundingEndBlock);\n      // Refunds are only available if the minimum was not reached\n      require(totalReceivedWei < receivedWeiMin);\n\n      // Retrieve how much DIVX (in units of Wei) this account has\n       uint256 divxVal = balances[msg.sender];\n       require(divxVal > 0);\n\n      // Retrieve how much ETH (in units of Wei) this account contributed\n      uint256 weiVal = weiBalances[msg.sender];\n      require(weiVal > 0);\n\n      // Destroy this contributor's tokens and reduce the total supply\n      balances[msg.sender] = 0;\n      totalSupply = safeSubtract(totalSupply, divxVal);\n\n      // Log this refund operation\n      LogRefund(msg.sender, weiVal, divxVal);\n\n      // Send the money back\n      msg.sender.transfer(weiVal);\n    }\n\n    /// @dev Redeems tokens and records the address that the sender created in the new blockchain\n    function redeem(bytes32 diviAddress) external {\n      // Only allow this function to be called when on the redeeming state\n      require(isRedeeming);\n\n      // Retrieve how much DIVX (in units of Wei) this account has\n      uint256 divxVal = balances[msg.sender];\n       require(divxVal > 0);\n\n      // Move the tokens of the caller to the project's address\n      assert(super.transfer(fundDeposit, divxVal));\n\n      // Log the redeeming of this tokens\n      LogRedeem(msg.sender, divxVal, diviAddress);\n    }\n\n    /// @dev Returns the current token price\n    function getCurrentTokenPrice() private constant returns (uint256 currentPrice) {\n      if (block.number < firstXRChangeBlock) {\n        return privateExchangeRate;\n      } else if (block.number < secondXRChangeBlock) {\n        return firstExchangeRate;\n      } else if (block.number < thirdXRChangeBlock) {\n        return secondExchangeRate;\n      } else {\n        return thirdExchangeRate;\n      }\n    }\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000005bc79fbbce4e5d6c3de7bd1a252ef3f58a66b09c0000000000000000000000000000000000000000000000000000000000411810000000000000000000000000000000000000000000000000000000000043bb100000000000000000000000000000000000000000000000000000000000449c100000000000000000000000000000000000000000000000000000000000457d100000000000000000000000000000000000000000000000000000000000465e10"
}