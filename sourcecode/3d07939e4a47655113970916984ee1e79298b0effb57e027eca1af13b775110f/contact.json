{
  "address": "0x47333a2dfc39ca1802c4220d8fc8db830abea5b6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SATTToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-06\n*/\n\npragma solidity ^0.4.16;\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n    \n   \n}\n\ninterface ERC223 {\n \n  function transfer(address to, uint256 value) public returns (bool ok);\n  function transfer(address to, uint value, bytes data) public  returns (bool ok);\n  \n  \n}\n\n\ninterface ERC223Receiver {\n    function tokenFallback(address _from, uint _value, bytes _data) public ;\n}\n\ncontract TokenERC20 {\n    // Public variables of the token\n    \n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n    string public symbol = \"SATT\";\n    string public name = \"Smart Advertisement Transaction Token\";\n    \n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n   event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n                                      // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value,bytes _data) internal {\n       \n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value,_data);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n   \n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n         bytes memory empty;\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value,empty);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n   \n    \n}\n\n/******************************************/\n/*       ADVANCED TOKEN STARTS HERE       */\n/******************************************/\n\ncontract SATTToken is owned, TokenERC20,ERC223 {\n\n    uint256 public sellPrice = 0;\n    uint256 public buyPrice = 1500;\n    \n\n    /* This generates a public event on the blockchain that will notify clients */\n  \n    event Buy(address a,uint256 v);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function SATTToken() TokenERC20(420000000) public {    }\n    \n     function isContract(address _addr) private view returns (bool is_contract) {\n      uint length;\n      assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n      }\n      return (length>0);\n    }\n    \n     function transfer(address to, uint256 value) public returns (bool success) {\n          bytes memory empty;\n        _transfer(msg.sender, to, value,empty);\n        return true;\n    }\n    \n     function transfer(address to, uint256 value,bytes data) public returns (bool success) {\n        _transfer(msg.sender, to, value,data);\n        return true;\n    }\n    \n    function _transfer(address _from, address _to, uint _value,bytes _data) internal {\n       \n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        \n        if(isContract(_to))\n        {\n            ERC223Receiver receiver = ERC223Receiver(_to);\n            receiver.tokenFallback(msg.sender, _value, _data);\n        }\n        \n        Transfer(_from, _to, _value,_data);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n   \n\n    /// @notice Create `mintedAmount` tokens and send it to `target`\n    /// @param target Address to receive the tokens\n    /// @param givenAmount the amount of tokens it will receive\n    function giveToken(address target, uint256 givenAmount) onlyOwner public {\n         bytes memory empty;\n         balanceOf[owner] -= givenAmount;\n        balanceOf[target] += givenAmount;\n        Transfer(owner, target, givenAmount,empty);\n\n\n    }\n    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n    /// @param newSellPrice Price the users can sell to the contract\n    /// @param newBuyPrice Price users can buy from the contract\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n    \n     function withdraw() onlyOwner public {\n        owner.transfer(this.balance);\n    }\n    \n\n     function() public payable  {\n         require(buyPrice >0);\n          bytes memory empty;\n        // Buy(msg.sender, msg.value);\n       // uint amount = msg.value * buyPrice; \n       // balanceOf[msg.sender] +=( msg.value * buyPrice);                         // Subtract from the sender\n        //balanceOf[owner] -= -msg.value * buyPrice;// calculates the amount\n        _transfer(owner, msg.sender, msg.value * buyPrice,empty);\n       //owner.transfer(msg.value);\n        \n    }\n\n    /// @notice Sell `amount` tokens to contract\n    /// @param amount amount of tokens to be sold\n    function sell(uint256 amount) public {\n        require(sellPrice >0);\n         bytes memory empty;\n        require(this.balance >= amount / sellPrice);      // checks if the contract has enough ether to buy\n        _transfer(msg.sender, owner, amount,empty);              // makes the transfers\n        //msg.sender.transfer(amount / sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n    }\n    \n    \n}",
  "bytecode": "60606040526012600060146101000a81548160ff021916908360ff1602179055506040805190810160405280600481526020017f5341545400000000000000000000000000000000000000000000000000000000815250600290805190602001906200006d929190620001aa565b50606060405190810160405280602581526020017f536d617274204164766572746973656d656e74205472616e73616374696f6e2081526020017f546f6b656e00000000000000000000000000000000000000000000000000000081525060039080519060200190620000e2929190620001aa565b5060006006556105dc6007553415620000fa57600080fd5b631908b100336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060149054906101000a900460ff1660ff16600a0a8102600181905550600154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505062000259565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001ed57805160ff19168380011785556200021e565b828001600101855582156200021e579182015b828111156200021d57825182559160200191906001019062000200565b5b5090506200022d919062000231565b5090565b6200025691905b808211156200025257600081600090555060010162000238565b5090565b90565b6113f580620002696000396000f3006060604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305fefda71461014957806306fdde0314610175578063095ea7b31461020357806318160ddd1461025d578063193f974c1461028657806323b872dd146102c8578063313ce567146103415780633ccfd60b146103705780634b7503341461038557806370a08231146103ae5780638620410b146103fb5780638da5cb5b1461042457806395d89b4114610479578063a9059cbb14610507578063be45fd6214610561578063dd62ed3e146105fe578063e4849b321461066a578063f2fde38b1461068d575b6101046113b5565b600060075411151561011557600080fd5b6101466000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336007543402846106c6565b50005b341561015457600080fd5b6101736004808035906020019091908035906020019091905050610b78565b005b341561018057600080fd5b610188610be5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101c85780820151818401526020810190506101ad565b50505050905090810190601f1680156101f55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561020e57600080fd5b610243600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c83565b604051808215151515815260200191505060405180910390f35b341561026857600080fd5b610270610d10565b6040518082815260200191505060405180910390f35b341561029157600080fd5b6102c6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d16565b005b34156102d357600080fd5b610327600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f22565b604051808215151515815260200191505060405180910390f35b341561034c57600080fd5b610354611059565b604051808260ff1660ff16815260200191505060405180910390f35b341561037b57600080fd5b61038361106c565b005b341561039057600080fd5b610398611141565b6040518082815260200191505060405180910390f35b34156103b957600080fd5b6103e5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611147565b6040518082815260200191505060405180910390f35b341561040657600080fd5b61040e61115f565b6040518082815260200191505060405180910390f35b341561042f57600080fd5b610437611165565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561048457600080fd5b61048c61118a565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104cc5780820151818401526020810190506104b1565b50505050905090810190601f1680156104f95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561051257600080fd5b610547600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611228565b604051808215151515815260200191505060405180910390f35b341561056c57600080fd5b6105e4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611249565b604051808215151515815260200191505060405180910390f35b341561060957600080fd5b610654600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611262565b6040518082815260200191505060405180910390f35b341561067557600080fd5b61068b6004808035906020019091905050611287565b005b341561069857600080fd5b6106c4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611304565b005b60008060008573ffffffffffffffffffffffffffffffffffffffff16141515156106ef57600080fd5b83600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561073d57600080fd5b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011115156107cb57600080fd5b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401915083600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555083600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506108f1856113a2565b15610a1d578490508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3386866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156109bb5780820151818401526020810190506109a0565b50505050905090810190601f1680156109e85780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1515610a0857600080fd5b6102c65a03f11515610a1957600080fd5b5050505b826040518082805190602001908083835b602083101515610a535780518252602082019150602081019050602083039250610a2e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16876040518082815260200191505060405180910390a481600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401141515610b7057fe5b505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd357600080fd5b81600681905550806007819055505050565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c7b5780601f10610c5057610100808354040283529160200191610c7b565b820191906000526020600020905b815481529060010190602001808311610c5e57829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b60015481565b610d1e6113b5565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d7957600080fd5b81600460008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806040518082805190602001908083835b602083101515610e6a5780518252602082019150602081019050602083039250610e45565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16856040518082815260200191505060405180910390a4505050565b6000610f2c6113b5565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515610fb757600080fd5b82600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555061104d858585846106c6565b60019150509392505050565b600060149054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110c757600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561113f57600080fd5b565b60065481565b60046020528060005260406000206000915090505481565b60075481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112205780601f106111f557610100808354040283529160200191611220565b820191906000526020600020905b81548152906001019060200180831161120357829003601f168201915b505050505081565b60006112326113b5565b61123e338585846106c6565b600191505092915050565b6000611257338585856106c6565b600190509392505050565b6005602052816000526040600020602052806000526040600020600091509150505481565b61128f6113b5565b60006006541115156112a057600080fd5b600654828115156112ad57fe5b043073ffffffffffffffffffffffffffffffffffffffff1631101515156112d357600080fd5b611300336000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684846106c6565b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561135f57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080823b905060008111915050919050565b6020604051908101604052806000815250905600a165627a7a7230582094b32ec9bff918eda132f3fe6d782bc23361a0c016817a588c5cdd416cd1fa210029"
}