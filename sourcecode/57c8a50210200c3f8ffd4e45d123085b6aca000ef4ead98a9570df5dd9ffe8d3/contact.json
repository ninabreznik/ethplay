{
  "address": "0xfd51a502593481d83812f41c6a5165c9252dc9a7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Cyle",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-29\n*/\n\npragma solidity ^0.5.7;\n\n/*\n................&..,&&&&&&.......%&&&%..........&....................\n................#&&&&&...&&&&&&&&&&&&&&&&&&&&&.......................\n..............&&&&&..&&&&&&&&&&&&&&&&&&&&&&&&&&&&&...................\n..........%.&&&&&.&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&................\n..........&&&&&.&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&..............\n.........&&&&.&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&............\n........&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&..........\n.......&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&.........\n......&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&........\n.....&&&&&&&&&&&&&&&&&&&&(&&&&&&&&&&&&&&&&&/&&&&&&&&&&&&&&&&&&.......\n....#&&&&&&&&&&&&&&,&&&&&&&.&&&&&&&&&&&&&.&&&&&&&(.&&&&&&&&&&&&......\n....&&&&&&&&&&&&&&&&&.&&&&&&&..&&&&&&&..&&&&&&&*...&&&&&&&&&&&&&.....\n....&&&&&&&&&&&&&&&&&&&/#&&&&&&&..&..&&&&&&&&......&&&&&&&&&&&&&.....\n....&&&&&&&&&&&&&&.&&&&&&&.&&&&&&&.&&&&&&&%.......&&&&&&&&&&&&&&&....\n...*&&&&&&&&&&&&&&&&.%&&&&&&.(&&&&&&&&&&........&&&&&&&&&&&&&&&&&....\n....&&&&&&&&&&&&&&&&&&.*&&&&&&&.&&&&&%.......,&&&&&&&&&&&&&&&&&&&....\n....&&&&&&&&&&&&&&&&&&&&..&&&&&&&.(........#&&&&&&&&&&&&&&&&&&&&&....\n....&&&&&&&&&&&&&&&&&&&&&&../&&&&&/......&&&&&&&&&&&&&&&&&&&&&&&&....\n....&&&&&&&&&&&&&&&&&&&&&&&&(.,&&&/....&&&&&&&&&&&&&&&&&&&&&&&&&&....\n.....&&&&&&&&&&&&&&&&&&&&&&&&,,&&&/....&&&&&&&&&&&&&&&&&&&&&&&&&%....\n......&&&&&&&&&&&&&&&&&&&&&&&*,&&&/....&&&&&&&&&&&&&&&&&&&&&&&&&.....\n.......&&&&&&&&&&&&&&&&&&&&&&%,&&&*....&&&&&&&&&&&&&&&&&&&&&&&&*.....\n....,...&&&&&&&&&&&&&&&&&&&&&&,&&&*....&&&&&&&&&&&&&&&&&&&&&&&&......\n.........&&&&&&&&&&&&&&&&&&&&&,&&&*...,&&&&&&&&&&&&&&&&&&&&&&&.......\n..........&&&&&&&&&&&&&&&&&&&&,&&&*.../&&&&&&&&&&&&&&&&&,&&&&........\n............&&&&&&&&&&&&&&&&&&,&&&*...&&&&&&&&&&&&&&&&(&&&&%.........\n..............&&&&&&&&&&&&&&&&&&&&*...&&&&&&&&&&&&&&(&&&&&...........\n...........&....&&&&&&&&&&&&&&&&&&*...&&&&&&&&&&&&.&&&&&.............\n...................%&&&&&&&&&&&&&&*..%&&&&&&&&&..&&&&&...............\n................&(......&&&&&&&&&&/&&&&&&&(...&&&&.................\n*/\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\n\ncontract Cyle {\n\n    string name;\n    string symbol;\n    uint8 decimals = 18;\n    uint256 totalSupply;\n\n    uint256 cyleGenesisBlock;\n    uint256 lastBlock;\n\n    uint256 miningReward;\n    uint256 publicMineSupply;\n    uint256 masternodeSupply;\n    uint256 smallReward = 0;\n    uint256 bigReward = 0;\n    uint256 masternodeRateNumerator;\n    uint256 masternodeRateDenominator;\n\n    uint256 staticFinney = 1 finney;\n    uint256 requiredAmountForMasternode = 100* 10 ** uint256(decimals);\n    uint256 public maxAmountForMasternode = 10000* 10 ** uint256(decimals);\n\n    uint256 blocksBetweenReward;\n\n    address owner;\n\n    address cyle = 0x0bAFb154b0E48BC9C483B92A0Cf00Cfb3d132EC7;\n\n    uint256 blacklistedAmountOfBlocks = 5760;\n    \n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (uint256 => bool) public blockHasBeenMined;\n\n    mapping (address => bool) public masternodeCheck;\n\n    mapping (address => uint256) public registeredAtBlock;\n    mapping (address => uint256) public lastTimeRewarded;\n\n    mapping (address => bool) public addressHasParkedToken;\n    mapping (address => uint256) public lockedAmount;\n\n    mapping (address => uint256) public blacklistedTillBlock;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Burn(address indexed from, uint256 value);\n    event ValueCheck(uint256 value);\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyMasterNode {\n        require(masternodeCheck[msg.sender]);\n        _;\n    }\n\n    modifier remainingNodeSupplyChecky{\n        require(masternodeSupply > 0);\n        _;\n    }\n\n    modifier remainingMineSupplyCheck{\n        require(publicMineSupply > miningReward);\n        _;\n    }\n\n    modifier nodePotentialCheck{\n        require(!masternodeCheck[msg.sender]);\n        require(balanceOf[msg.sender] > requiredAmountForMasternode);\n        _;\n    }\n\n    modifier checkForMiningBlacklisting{\n        require(getCurrentCyleBlock() > blacklistedTillBlock[msg.sender]);\n        _;\n    }\n\n    constructor() public {\n        totalSupply = 450000000 * 10 ** uint256(decimals);  \n        balanceOf[address(this)] = totalSupply;             \n        name = \"Cyle\";                                   \n        symbol = \"CYLE\";                               \n        cyleGenesisBlock = block.number;\n        lastBlock = block.number;\n        publicMineSupply = SafeMath.div(totalSupply,2);\n        masternodeSupply = SafeMath.sub(totalSupply, publicMineSupply);\n        owner = msg.sender;\n        masternodeRateNumerator = 6081;\n        masternodeRateDenominator = 500000;\n        miningReward = 50 * 10 ** uint256(decimals);\n        blocksBetweenReward = 40320;\n    }\n\n    function getStaticFinney() public view returns (uint){\n        return staticFinney;\n    }\n\n    function calcSmallReward(uint256 _miningReward) private pure returns(uint256 _reward){\n        _reward=SafeMath.div(SafeMath.mul(_miningReward, 20),100);\n        return _reward;\n    }\n\n     function calcBigReward(uint256 _miningReward) private pure returns(uint256 _reward){\n        _reward=SafeMath.div(SafeMath.mul(_miningReward, 80),100);\n        return _reward;\n    }\n\n    function publicMine() public payable remainingMineSupplyCheck checkForMiningBlacklisting{\n        require(!blockHasBeenMined[getCurrentCyleBlock()]);\n        miningReward = getCurrentMiningReward();\n        smallReward = calcSmallReward(miningReward);\n        bigReward = calcBigReward(miningReward);\n        this.transfer(msg.sender, bigReward);\n        this.transfer(cyle, smallReward);\n        publicMineSupply = SafeMath.sub(publicMineSupply,miningReward);\n        blockHasBeenMined[getCurrentCyleBlock()] = true;\n        blacklistedTillBlock[msg.sender] = SafeMath.add(getCurrentCyleBlock(), blacklistedAmountOfBlocks);\n    }\n    \n    function getRemainingPublicMineSupply() public view returns (uint256 _amount){\n        return publicMineSupply;\n    }\n\n    function getRemainingMasternodeSupply() public view returns (uint256 _amount){\n        return masternodeSupply;\n    }\n\n    function getBlacklistblockForUser() public view returns(uint256){\n        return blacklistedTillBlock[msg.sender];\n    }\n\n    function registerMasternode() public nodePotentialCheck{\n        require(!masternodeCheck[msg.sender]);\n        uint256 currentCyleBlock = getCurrentCyleBlock();\n        masternodeCheck[msg.sender] = true;\n        registeredAtBlock[msg.sender] = currentCyleBlock;\n        lastTimeRewarded[msg.sender] = currentCyleBlock;\n    }\n\n    function lockAmountForMasternode(uint256 _amount) public onlyMasterNode{\n\n        require(SafeMath.sub(balanceOf[msg.sender], lockedAmount[msg.sender]) >= _amount);\n        require(_amount <= maxAmountForMasternode && SafeMath.add(lockedAmount[msg.sender],_amount)<= maxAmountForMasternode);\n        addressHasParkedToken[msg.sender] = true;\n        if(lockedAmount[msg.sender] == 0){\n            lastTimeRewarded[msg.sender] = getCurrentCyleBlock();\n        }\n        lockedAmount[msg.sender] = SafeMath.add(lockedAmount[msg.sender],_amount);\n\n    }\n\n    function unlockAmountFromMasterNode() public onlyMasterNode returns(bool){\n\n        addressHasParkedToken[msg.sender] = false;\n        lockedAmount[msg.sender] = 0;\n        return true;\n\n    }\n\n    function claimMasternodeReward() public onlyMasterNode remainingNodeSupplyChecky{\n\n        require(addressHasParkedToken[msg.sender]);\n        uint256 interest = interestToClaim(msg.sender);\n        this.transfer(msg.sender, calcBigReward(interest));\n        this.transfer(cyle, calcSmallReward(interest));\n        lastTimeRewarded[msg.sender] = getCurrentCyleBlock();\n        masternodeSupply = SafeMath.sub(masternodeSupply, interest);\n\n    }\n\n    function interestToClaim(address _owner) public view returns(uint256 _amountToClaim){\n\n        uint256 blockstopay = SafeMath.div(SafeMath.sub(getCurrentCyleBlock(),lastTimeRewarded[_owner]), blocksBetweenReward);\n        _amountToClaim = SafeMath.mul((SafeMath.div(SafeMath.mul(getCurrentMasternodeNumerator(), lockedAmount[_owner]), getCurrentMasternodeDenominator())), blockstopay);\n        return _amountToClaim;\n    }\n\n    function getCurrentPossibleAmountOfAddress(address _owner) public view returns(uint256 _amount){\n\n         if(!addressHasParkedToken[_owner]){\n            _amount = 0;\n        } else {\n           _amount = SafeMath.add(lockedAmount[_owner], interestToClaim(_owner));\n           return _amount;\n        }\n    }\n\n    function getLastTimeRewarded(address _owner) public view returns (uint256 _block){\n        return lastTimeRewarded[_owner];\n\n    }\n\n    function checkForMasterNode(address _owner) public view returns (bool _state){\n       _state = masternodeCheck[_owner];\n       return _state;\n    }\n\n    function adjustBlocksBetweenReward(uint256 _newBlocksBetweenReward) public onlyOwner {\n        blocksBetweenReward = _newBlocksBetweenReward;\n    }\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != address(0x0));\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n            return true;\n        }\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n}\n\n    function getCurrentEthBlock() private view returns (uint256 blockAmount){\n        return block.number;\n    }\n\n    function getCurrentCyleBlock() public view returns (uint256){\n        uint256 eth = getCurrentEthBlock();\n        uint256 cyleBlock = SafeMath.sub(eth, cyleGenesisBlock);\n        return cyleBlock;\n    }\n\n    function getCurrentMiningReward() public view returns(uint256 _miningReward){\n        return miningReward;\n    }\n\n     function getCurrentMasterNodeReward() public view returns(uint256 _miningReward){\n        return SafeMath.mul(SafeMath.div(masternodeRateNumerator,masternodeRateDenominator),100);\n    }\n\n    function getCurrentMasternodeNumerator() public view returns(uint256 _numerator){\n        return masternodeRateNumerator;    \n    }\n \n    function getCurrentMasternodeDenominator() public view returns(uint256 _denominator){\n        return masternodeRateDenominator;    \n    }\n\n    function getTotalSupply() public view returns (uint256 _totalSupply){\n        return totalSupply;\n    }\n\n    function getCurrentLockedAmount() public view returns (uint256 _amount){\n        return lockedAmount[msg.sender];\n    }\n\n    function getCurrentUnlockedAmount() public view returns (uint256 _unlockedAmount){\n        return SafeMath.sub(balanceOf[msg.sender], lockedAmount[msg.sender]);\n    }\n\n    function getMasternodeRequiredAmount() public view returns(uint256 _reqAmount){\n        return requiredAmountForMasternode;\n    }\n\n    function adjustMiningRewards() public{\n\n        uint256 _remainingMiningSupply = getRemainingPublicMineSupply();\n\n        if(_remainingMiningSupply < 175000000000000000000000000 && _remainingMiningSupply > 131250000000000000000000000){\n            miningReward = 25000000000000000000;\n        }\n\n        if(_remainingMiningSupply < 131250000000000000000000000 && _remainingMiningSupply > 93750000000000000000000000){\n            miningReward = 12500000000000000000;\n        }\n\n        if(_remainingMiningSupply < 93750000000000000000000000 && _remainingMiningSupply > 62500000000000000000000000){\n            miningReward = 6250000000000000000;\n        }\n\n        if(_remainingMiningSupply < 62500000000000000000000000 && _remainingMiningSupply > 37500000000000000000000000){\n            miningReward = 3125000000000000000;\n        }\n\n        if(_remainingMiningSupply < 37500000000000000000000000 && _remainingMiningSupply > 18750000000000000000000000){\n            miningReward = 1562500000000000000;\n        }\n\n        if(_remainingMiningSupply < 18750000000000000000000000 && _remainingMiningSupply > 12500000000000000000000000){\n            miningReward = 800000000000000000;\n        }\n\n        if(_remainingMiningSupply < 12500000000000000000000000 && _remainingMiningSupply > 6250000000000000000000000){\n            miningReward = 400000000000000000;\n        }\n\n        if(_remainingMiningSupply < 6250000000000000000000000){\n            miningReward = 200000000000000000;\n        }\n\n    }\n\n    function adjustMasternodeRewards() public{\n\n        uint256 _remainingStakeSupply = getRemainingMasternodeSupply();\n\n        if(_remainingStakeSupply < 218750000000000000000000000 && _remainingStakeSupply > 206250000000000000000000000){\n           masternodeRateNumerator=5410;\n           masternodeRateDenominator=500000;\n        }\n\n        if(_remainingStakeSupply < 206250000000000000000000000 && _remainingStakeSupply > 187500000000000000000000000){\n           masternodeRateNumerator=469;\n           masternodeRateDenominator=50000;\n        }\n\n        if(_remainingStakeSupply < 187500000000000000000000000 && _remainingStakeSupply > 162500000000000000000000000){\n           masternodeRateNumerator=783;\n           masternodeRateDenominator=100000;\n        }\n\n        if(_remainingStakeSupply < 162500000000000000000000000 && _remainingStakeSupply > 131250000000000000000000000){\n           masternodeRateNumerator=307;\n           masternodeRateDenominator=50000;\n        }\n\n        if(_remainingStakeSupply < 131250000000000000000000000 && _remainingStakeSupply > 93750000000000000000000000){\n           masternodeRateNumerator=43;\n           masternodeRateDenominator=10000;\n        }\n\n        if(_remainingStakeSupply < 93750000000000000000000000 && _remainingStakeSupply > 50000000000000000000000000){\n           masternodeRateNumerator=269;\n           masternodeRateDenominator=100000;\n        }\n\n        if(_remainingStakeSupply < 50000000000000000000000000){\n           masternodeRateNumerator=183;\n           masternodeRateDenominator=100000;\n        }\n    }\n    \n}\n\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"claimMasternodeReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentMiningReward\",\"outputs\":[{\"name\":\"_miningReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentLockedAmount\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"checkForMasterNode\",\"outputs\":[{\"name\":\"_state\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlacklistblockForUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"interestToClaim\",\"outputs\":[{\"name\":\"_amountToClaim\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"adjustMiningRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentMasterNodeReward\",\"outputs\":[{\"name\":\"_miningReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRemainingPublicMineSupply\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMasternodeRequiredAmount\",\"outputs\":[{\"name\":\"_reqAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStaticFinney\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredAtBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAmountForMasternode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentMasternodeDenominator\",\"outputs\":[{\"name\":\"_denominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockAmountFromMasterNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"publicMine\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"adjustMasternodeRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"masternodeCheck\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentMasternodeNumerator\",\"outputs\":[{\"name\":\"_numerator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressHasParkedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklistedTillBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerMasternode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockHasBeenMined\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentUnlockedAmount\",\"outputs\":[{\"name\":\"_unlockedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lockAmountForMasternode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTimeRewarded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentCyleBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBlocksBetweenReward\",\"type\":\"uint256\"}],\"name\":\"adjustBlocksBetweenReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRemainingMasternodeSupply\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getLastTimeRewarded\",\"outputs\":[{\"name\":\"_block\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getCurrentPossibleAmountOfAddress\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ValueCheck\",\"type\":\"event\"}]",
  "bytecode": "60806040526002805460ff191660129081179182905560006009819055600a90815566038d7ea4c68000600d55606460ff93909316900a918202600e55612710909102600f5580546001600160a01b031916730bafb154b0e48bc9c483b92a0cf00cfb3d132ec71790556116806013553480156200007c57600080fd5b5060025460ff16600a0a631ad2748002600381905530600090815260146020908152604080832093909355825180840190935260048084527f43796c650000000000000000000000000000000000000000000000000000000093909101928352620000e89290620001e1565b506040805180820190915260048082527f43594c450000000000000000000000000000000000000000000000000000000060209092019182526200012f91600191620001e1565b504360048190555043600581905550620001586003546002620001b860201b620018641760201c565b60078190555062000179600354600754620001ce60201b6200174f1760201c565b600855601180546001600160a01b031916331790556117c1600b556207a120600c55600254603260ff909116600a0a02600655619d8060105562000286565b600080828481620001c557fe5b04949350505050565b600082821115620001db57fe5b50900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200022457805160ff191683800117855562000254565b8280016001018555821562000254579182015b828111156200025457825182559160200191906001019062000237565b506200026292915062000266565b5090565b6200028391905b808211156200026257600081556001016200026d565b90565b6118dc80620002966000396000f3fe6080604052600436106102465760003560e01c80639e4d1b2b11610139578063c4e41b22116100b6578063d4f9674b1161007a578063d4f9674b146107df578063dd62ed3e146107f4578063e79bafa11461082f578063f12389f514610859578063f31ac5201461086e578063f7db31f1146108a157610246565b8063c4e41b2214610690578063cae811e2146106a5578063cae9ca51146106ba578063cc5e6c5014610782578063d018458e146107ac57610246565b8063a941c122116100fd578063a941c122146105d6578063aea1eeef146105eb578063b15006821461061e578063b1a4904e14610651578063b61a125e1461066657610246565b80639e4d1b2b1461051a5780639e85ef4114610522578063a153e70814610537578063a3f43d241461056a578063a9059cbb1461059d57610246565b8063617459e5116101c75780637cd55bd91161018b5780637cd55bd9146104935780637ec3fbfa146104a85780638f89a447146104db57806396058e9b146104f05780639696ccf21461050557610246565b8063617459e5146103e857806368c64689146103fd5780636efcbe041461041257806370a082311461042757806379cc67901461045a57610246565b806326f00c4d1161020e57806326f00c4d1461032e5780632e2a31011461036157806335823e801461037657806342966c68146103a957806347392ce4146103d357610246565b806304cdc5421461024b578063095ea7b3146102625780630ad61b5f146102af57806323b872dd146102d6578063257476df14610319575b600080fd5b34801561025757600080fd5b506102606108d4565b005b34801561026e57600080fd5b5061029b6004803603604081101561028557600080fd5b506001600160a01b038135169060200135610a77565b604080519115158252519081900360200190f35b3480156102bb57600080fd5b506102c4610ade565b60408051918252519081900360200190f35b3480156102e257600080fd5b5061029b600480360360608110156102f957600080fd5b506001600160a01b03813581169160208101359091169060400135610ae4565b34801561032557600080fd5b506102c4610b54565b34801561033a57600080fd5b5061029b6004803603602081101561035157600080fd5b50356001600160a01b0316610b67565b34801561036d57600080fd5b506102c4610b89565b34801561038257600080fd5b506102c46004803603602081101561039957600080fd5b50356001600160a01b0316610b9c565b3480156103b557600080fd5b5061029b600480360360208110156103cc57600080fd5b5035610c17565b3480156103df57600080fd5b50610260610c8f565b3480156103f457600080fd5b506102c4610e39565b34801561040957600080fd5b506102c4610e58565b34801561041e57600080fd5b506102c4610e5e565b34801561043357600080fd5b506102c46004803603602081101561044a57600080fd5b50356001600160a01b0316610e64565b34801561046657600080fd5b5061029b6004803603604081101561047d57600080fd5b506001600160a01b038135169060200135610e76565b34801561049f57600080fd5b506102c4610f47565b3480156104b457600080fd5b506102c4600480360360208110156104cb57600080fd5b50356001600160a01b0316610f4d565b3480156104e757600080fd5b506102c4610f5f565b3480156104fc57600080fd5b506102c4610f65565b34801561051157600080fd5b5061029b610f6b565b610260610faf565b34801561052e57600080fd5b50610260611194565b34801561054357600080fd5b506102c46004803603602081101561055a57600080fd5b50356001600160a01b0316611308565b34801561057657600080fd5b5061029b6004803603602081101561058d57600080fd5b50356001600160a01b031661131a565b3480156105a957600080fd5b5061029b600480360360408110156105c057600080fd5b506001600160a01b03813516906020013561132f565b3480156105e257600080fd5b506102c4611345565b3480156105f757600080fd5b5061029b6004803603602081101561060e57600080fd5b50356001600160a01b031661134b565b34801561062a57600080fd5b506102c46004803603602081101561064157600080fd5b50356001600160a01b0316611360565b34801561065d57600080fd5b50610260611372565b34801561067257600080fd5b5061029b6004803603602081101561068957600080fd5b5035611405565b34801561069c57600080fd5b506102c461141a565b3480156106b157600080fd5b506102c4611420565b3480156106c657600080fd5b5061029b600480360360608110156106dd57600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561070d57600080fd5b82018360208201111561071f57600080fd5b8035906020019184600183028401116401000000008311171561074157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611445945050505050565b34801561078e57600080fd5b50610260600480360360208110156107a557600080fd5b503561154d565b3480156107b857600080fd5b506102c4600480360360208110156107cf57600080fd5b50356001600160a01b0316611640565b3480156107eb57600080fd5b506102c4611652565b34801561080057600080fd5b506102c46004803603604081101561081757600080fd5b506001600160a01b0381358116916020013516611674565b34801561083b57600080fd5b506102606004803603602081101561085257600080fd5b5035611691565b34801561086557600080fd5b506102c46116ad565b34801561087a57600080fd5b506102c46004803603602081101561089157600080fd5b50356001600160a01b03166116b3565b3480156108ad57600080fd5b506102c4600480360360208110156108c457600080fd5b50356001600160a01b03166116ce565b3360009081526017602052604090205460ff166108f057600080fd5b6000600854116108ff57600080fd5b336000908152601a602052604090205460ff1661091b57600080fd5b600061092633610b9c565b90503063a9059cbb3361093884611728565b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561098757600080fd5b505af115801561099b573d6000803e3d6000fd5b505050506040513d60208110156109b157600080fd5b5050601254309063a9059cbb906001600160a01b03166109d08461173f565b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610a1f57600080fd5b505af1158015610a33573d6000803e3d6000fd5b505050506040513d6020811015610a4957600080fd5b50610a549050611652565b33600090815260196020526040902055600854610a71908261174f565b60085550565b3360008181526015602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b60065490565b6001600160a01b0383166000908152601560209081526040808320338452909152812054821115610b1457600080fd5b6001600160a01b0384166000908152601560209081526040808320338452909152902080548390039055610b49848484611761565b5060015b9392505050565b336000908152601b602052604090205490565b6001600160a01b03811660009081526017602052604090205460ff165b919050565b336000908152601c602052604090205490565b600080610bd3610bcb610bad611652565b6001600160a01b03861660009081526019602052604090205461174f565b601054611864565b9050610b4d610c11610c04610be6611345565b6001600160a01b0387166000908152601b6020526040902054611879565b610c0c610f65565b611864565b82611879565b33600090815260146020526040812054821115610c3357600080fd5b3360008181526014602090815260409182902080548690039055600380548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b6000610c99610e58565b90506a90c1b1025e16710f00000081108015610cbf57506a6c9144c1c690d4cb40000081115b15610cd25768015af1d78b58c400006006555b6a6c9144c1c690d4cb40000081108015610cf657506a4d8c55aefb8c05b5c0000081115b15610d085767ad78ebc5ac6200006006555b6a4d8c55aefb8c05b5c0000081108015610d2c57506a33b2e3c9fd0803ce80000081115b15610d3e576756bc75e2d63100006006555b6a33b2e3c9fd0803ce80000081108015610d6257506a1f04ef12cb04cf1580000081115b15610d7457672b5e3af16b1880006006555b6a1f04ef12cb04cf1580000081108015610d9857506a0f8277896582678ac0000081115b15610daa576715af1d78b58c40006006555b6a0f8277896582678ac0000081108015610dce57506a0a56fa5b99019a5c80000081115b15610de057670b1a2bc2ec5000006006555b6a0a56fa5b99019a5c80000081108015610e0457506a052b7d2dcc80cd2e40000081115b15610e165767058d15e1762800006006555b6a052b7d2dcc80cd2e400000811015610e36576702c68af0bb1400006006555b50565b6000610e53610e4c600b54600c54611864565b6064611879565b905090565b60075490565b600e5490565b60146020526000908152604090205481565b6001600160a01b038216600090815260146020526040812054821115610e9b57600080fd5b6001600160a01b0383166000908152601560209081526040808320338452909152902054821115610ecb57600080fd5b6001600160a01b0383166000818152601460209081526040808320805487900390556015825280832033845282529182902080548690039055600380548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a250600192915050565b600d5490565b60186020526000908152604090205481565b600f5481565b600c5490565b3360009081526017602052604081205460ff16610f8757600080fd5b50336000908152601a60209081526040808320805460ff19169055601b909152812055600190565b60065460075411610fbf57600080fd5b336000908152601c6020526040902054610fd7611652565b11610fe157600080fd5b60166000610fed611652565b815260208101919091526040016000205460ff161561100b57600080fd5b611013610ade565b60068190556110219061173f565b60095560065461103090611728565b600a81905560408051600160e01b63a9059cbb028152336004820152602481019290925251309163a9059cbb9160448083019260209291908290030181600087803b15801561107e57600080fd5b505af1158015611092573d6000803e3d6000fd5b505050506040513d60208110156110a857600080fd5b505060125460095460408051600160e01b63a9059cbb0281526001600160a01b039093166004840152602483019190915251309163a9059cbb9160448083019260209291908290030181600087803b15801561110357600080fd5b505af1158015611117573d6000803e3d6000fd5b505050506040513d602081101561112d57600080fd5b505060075460065461113f919061174f565b600755600160166000611150611652565b81526020810191909152604001600020805460ff191691151591909117905561118261117a611652565b60135461189d565b336000908152601c6020526040902055565b600061119e6116ad565b90506ab4f21d42f59c0d52c00000811080156111c457506aaa9b22e75c9a72f640000081115b156111d757611522600b556207a120600c555b6aaa9b22e75c9a72f6400000811080156111fb57506a9b18ab5df7180b6b80000081115b1561120d576101d5600b5561c350600c555b6a9b18ab5df7180b6b8000008110801561123157506a866ab6a6c514d6b280000081115b156112445761030f600b55620186a0600c555b6a866ab6a6c514d6b28000008110801561126857506a6c9144c1c690d4cb40000081115b1561127a57610133600b5561c350600c555b6a6c9144c1c690d4cb4000008110801561129e57506a4d8c55aefb8c05b5c0000081115b156112af57602b600b55612710600c555b6a4d8c55aefb8c05b5c00000811080156112d357506a295be96e6406697200000081115b156112e65761010d600b55620186a0600c555b6a295be96e64066972000000811015610e365760b7600b55620186a0600c5550565b601b6020526000908152604090205481565b60176020526000908152604090205460ff1681565b600061133c338484611761565b50600192915050565b600b5490565b601a6020526000908152604090205460ff1681565b601c6020526000908152604090205481565b3360009081526017602052604090205460ff161561138f57600080fd5b600e5433600090815260146020526040902054116113ac57600080fd5b3360009081526017602052604090205460ff16156113c957600080fd5b60006113d3611652565b336000908152601760209081526040808320805460ff1916600117905560188252808320849055601990915290205550565b60166020526000908152604090205460ff1681565b60035490565b33600090815260146020908152604080832054601b909252822054610e53919061174f565b6000836114528185610a77565b1561154557604051600160e01b638f4ffcb102815233600482018181526024830187905230604484018190526080606485019081528751608486015287516001600160a01b03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b838110156114d45781810151838201526020016114bc565b50505050905090810190601f1680156115015780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561152357600080fd5b505af1158015611537573d6000803e3d6000fd5b505050506001915050610b4d565b509392505050565b3360009081526017602052604090205460ff1661156957600080fd5b33600090815260146020908152604080832054601b9092529091205482916115909161174f565b101561159b57600080fd5b600f5481111580156115c85750600f54336000908152601b60205260409020546115c5908361189d565b11155b6115d157600080fd5b336000908152601a60209081526040808320805460ff19166001179055601b90915290205461161357611602611652565b336000908152601960205260409020555b336000908152601b602052604090205461162d908261189d565b336000908152601b602052604090205550565b60196020526000908152604090205481565b60008061165d6118ac565b9050600061166d8260045461174f565b9250505090565b601560209081526000928352604080842090915290825290205481565b6011546001600160a01b031633146116a857600080fd5b601055565b60085490565b6001600160a01b031660009081526019602052604090205490565b6001600160a01b0381166000908152601a602052604081205460ff166116f657506000610b84565b6001600160a01b0382166000908152601b60205260409020546117219061171c84610b9c565b61189d565b9050610b84565b6000610ad8611738836050611879565b6064611864565b6000610ad8611738836014611879565b60008282111561175b57fe5b50900390565b6001600160a01b03821661177457600080fd5b6001600160a01b03831660009081526014602052604090205481111561179957600080fd5b6001600160a01b03821660009081526014602052604090205481810110156117c057600080fd5b6001600160a01b038083166000818152601460209081526040808320805495891680855282852080548981039091559486905281548801909155815187815291519390950194927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a36001600160a01b0380841660009081526014602052604080822054928716825290205401811461185e57fe5b50505050565b60008082848161187057fe5b04949350505050565b60008261188857506000610ad8565b8282028284828161189557fe5b0414610b4d57fe5b600082820183811015610b4d57fe5b439056fea165627a7a72305820f345157612119c5c7d836fe02804b7fe06a124fd2f8e4576e12d6ecc6522330d0029"
}