{
  "address": "0xe2492f8d2a2618d8709ca99b1d8d75713bd84089",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "HeartBout: Old Token 1",
  "contractName": "HeartBoutToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-23\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a); \n    return a - b; \n  } \n  \n  function add(uint256 a, uint256 b) internal pure returns (uint256) { \n    uint256 c = a + b; assert(c >= a);\n    return c;\n  }\n\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]); \n    // SafeMath.sub will throw if there is not enough balance. \n    balances[msg.sender] = balances[msg.sender].sub(_value); \n    balances[_to] = balances[_to].add(_value); \n    Transfer(msg.sender, _to, _value); \n    \n    return true; \n  } \n\n  /** \n   * @dev Gets the balance of the specified address. \n   * @param _owner The address to query the the balance of. \n   * @return An uint256 representing the amount owned by the passed address. \n   */ \n  function balanceOf(address _owner) public constant returns (uint256 balance) { \n    return balances[_owner]; \n  } \n} \n\n/** \n * @title Standard ERC20 token \n * \n * @dev Implementation of the basic standard token. \n * @dev https://github.com/ethereum/EIPs/issues/20 \n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol \n */ \ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]); \n    balances[_from] = balances[_from].sub(_value); \n    balances[_to] = balances[_to].add(_value); \n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); \n    Transfer(_from, _to, _value); \n    \n    return true; \n  } \n\n /** \n  * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. \n  * \n  * Beware that changing an allowance with this method brings the risk that someone may use both the old \n  * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this \n  * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: \n  * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 \n  * @param _spender The address which will spend the funds. \n  * @param _value The amount of tokens to be spent. \n  */ \n  function approve(address _spender, uint256 _value) public returns (bool) { \n    allowed[msg.sender][_spender] = _value; \n    Approval(msg.sender, _spender, _value); \n    return true; \n  }\n\n /** \n  * @dev Function to check the amount of tokens that an owner allowed to a spender. \n  * @param _owner address The address which owns the funds. \n  * @param _spender address The address which will spend the funds. \n  * @return A uint256 specifying the amount of tokens still available for the spender. \n  */ \n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) { \n    return allowed[_owner][_spender]; \n  } \n\n /** \n  * approve should be called when allowed[_spender] == 0. To increment \n  * allowed value is better to use this function to avoid 2 calls (and wait until \n  * the first transaction is mined) * From MonolithDAO Token.sol \n  */ \n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]); \n    return true; \n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender]; \n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function () public payable {\n    revert();\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n  address public agent;\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n  \n  modifier onlyAgentOrOwner() {\n      require(msg.sender == owner || msg.sender == agent);\n      _;\n  }\n\n  function setSaleAgent(address addr) public onlyOwner {\n      agent = addr;\n  }\n  \n}\n\ncontract HeartBoutToken is StandardToken, Ownable {\n    \n    string public constant name = \"HeartBout\";\n    string public constant symbol = \"HB\";\n    uint32 public constant decimals = 18;\n    \n    uint256 public constant totalSupply         = 63695267 * (10 ** 18);\n    \n    uint256 public constant Sale                = totalSupply * 785 / 1000;  // 78.5%\n    uint256 constant FirstInvestment            = totalSupply * 5 / 100;    // 5%\n    uint256 constant DevelopmentTeam            = totalSupply * 6 / 100;   // 6%\n    uint256 constant Bounty                     = totalSupply * 4 / 100;  // 4%\n    uint256 constant Advisers                   = totalSupply * 5 / 100; // 5%\n    uint256 constant Marketing                  = totalSupply * 15 / 1000; // 1.5%\n    \n    function HeartBoutToken() public {\n        address contractAddress = address(this);\n        balances[contractAddress] = totalSupply;\n        Transfer(0x0, contractAddress, totalSupply);\n    }\n    \n    function SaleCount() public pure returns (uint256) {\n        return Sale;\n    }\n    \n    function transferTokents(address addr, uint256 tokens) public onlyAgentOrOwner {\n        require(addr != address(0));\n        require(balances[address(this)] >= tokens);\n        \n        balances[addr] = balances[addr].add(tokens);\n        balances[address(this)] = balances[address(this)].sub(tokens);\n        Transfer(address(this), addr, tokens);\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b60038054600160a060020a03191633600160a060020a0390811691909117909155309081166000818152600160205260408082206a34afff57c9c00998ac0000908190557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef915190815260200160405180910390a350610ae9806100946000396000f3006060604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f57806314133a7c146101b557806317135b7b146101d657806318160ddd146101f857806323b872dd1461021d578063313ce56714610245578063661884631461027157806370a08231146102935780638da5cb5b146102b257806395d89b41146102e1578063967b2692146102f4578063a9059cbb14610307578063b78f9de714610329578063d73dd6231461033c578063dd62ed3e1461035e578063f5ff5c7614610383575b600080fd5b341561010057600080fd5b610108610396565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561014457808201518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018a57600080fd5b6101a1600160a060020a03600435166024356103cd565b604051901515815260200160405180910390f35b34156101c057600080fd5b6101d4600160a060020a0360043516610439565b005b34156101e157600080fd5b6101d4600160a060020a0360043516602435610483565b341561020357600080fd5b61020b6105ad565b60405190815260200160405180910390f35b341561022857600080fd5b6101a1600160a060020a03600435811690602435166044356105bc565b341561025057600080fd5b61025861073e565b60405163ffffffff909116815260200160405180910390f35b341561027c57600080fd5b6101a1600160a060020a0360043516602435610743565b341561029e57600080fd5b61020b600160a060020a036004351661083d565b34156102bd57600080fd5b6102c5610858565b604051600160a060020a03909116815260200160405180910390f35b34156102ec57600080fd5b610108610867565b34156102ff57600080fd5b61020b61089e565b341561031257600080fd5b6101a1600160a060020a03600435166024356108ad565b341561033457600080fd5b61020b6109a8565b341561034757600080fd5b6101a1600160a060020a03600435166024356109b7565b341561036957600080fd5b61020b600160a060020a0360043581169060243516610a5b565b341561038e57600080fd5b6102c5610a86565b60408051908101604052600981527f4865617274426f75740000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60035433600160a060020a0390811691161461045457600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60035433600160a060020a03908116911614806104ae575060045433600160a060020a039081169116145b15156104b957600080fd5b600160a060020a03821615156104ce57600080fd5b600160a060020a033016600090815260016020526040902054819010156104f457600080fd5b600160a060020a03821660009081526001602052604090205461051d908263ffffffff610a9516565b600160a060020a03808416600090815260016020526040808220939093553090911681522054610553908263ffffffff610aab16565b600160a060020a033081166000818152600160205260409081902093909355908416917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35050565b6a34afff57c9c00998ac000081565b6000600160a060020a03831615156105d357600080fd5b600160a060020a0384166000908152600160205260409020548211156105f857600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561062b57600080fd5b600160a060020a038416600090815260016020526040902054610654908363ffffffff610aab16565b600160a060020a038086166000908152600160205260408082209390935590851681522054610689908363ffffffff610a9516565b600160a060020a038085166000908152600160209081526040808320949094558783168252600281528382203390931682529190915220546106d1908363ffffffff610aab16565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b601281565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156107a057600160a060020a0333811660009081526002602090815260408083209388168352929052908120556107d7565b6107b0818463ffffffff610aab16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b600354600160a060020a031681565b60408051908101604052600281527f4842000000000000000000000000000000000000000000000000000000000000602082015281565b6a295c13f6d569f30d9b800090565b6000600160a060020a03831615156108c457600080fd5b600160a060020a0333166000908152600160205260409020548211156108e957600080fd5b600160a060020a033316600090815260016020526040902054610912908363ffffffff610aab16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610947908363ffffffff610a9516565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b6a295c13f6d569f30d9b800081565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120546109ef908363ffffffff610a9516565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600454600160a060020a031681565b600082820183811015610aa457fe5b9392505050565b600082821115610ab757fe5b509003905600a165627a7a72305820636ad2458eb1383875920414c09013fc0e88a84c6960292cc59164ae54ffff5f0029"
}