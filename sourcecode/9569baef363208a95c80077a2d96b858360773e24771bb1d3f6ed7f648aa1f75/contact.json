{
  "address": "0x1da015ea4ad2d3e5586e54b9fb0682ca3ca8a17a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DragonToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-02\n*/\n\npragma solidity ^0.4.15;\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    require(newOwner != address(0));      \n    owner = newOwner;\n  }\n}\nlibrary DateTime {\n        /*\n         *  Date and Time utilities for ethereum contracts\n         *\n         */\n        struct MyDateTime {\n                uint16 year;\n                uint8 month;\n                uint8 day;\n                uint8 hour;\n                uint8 minute;\n                uint8 second;\n                uint8 weekday;\n        }\n        uint constant DAY_IN_SECONDS = 86400;\n        uint constant YEAR_IN_SECONDS = 31536000;\n        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n        uint constant HOUR_IN_SECONDS = 3600;\n        uint constant MINUTE_IN_SECONDS = 60;\n        uint16 constant ORIGIN_YEAR = 1970;\n        function isLeapYear(uint16 year) constant returns (bool) {\n                if (year % 4 != 0) {\n                        return false;\n                }\n                if (year % 100 != 0) {\n                        return true;\n                }\n                if (year % 400 != 0) {\n                        return false;\n                }\n                return true;\n        }\n        function leapYearsBefore(uint year) constant returns (uint) {\n                year -= 1;\n                return year / 4 - year / 100 + year / 400;\n        }\n        function getDaysInMonth(uint8 month, uint16 year) constant returns (uint8) {\n                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                        return 31;\n                }\n                else if (month == 4 || month == 6 || month == 9 || month == 11) {\n                        return 30;\n                }\n                else if (isLeapYear(year)) {\n                        return 29;\n                }\n                else {\n                        return 28;\n                }\n        }\n        function parseTimestamp(uint timestamp) internal returns (MyDateTime dt) {\n                uint secondsAccountedFor = 0;\n                uint buf;\n                uint8 i;\n                // Year\n                dt.year = getYear(timestamp);\n                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n                // Month\n                uint secondsInMonth;\n                for (i = 1; i <= 12; i++) {\n                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n                        if (secondsInMonth + secondsAccountedFor > timestamp) {\n                                dt.month = i;\n                                break;\n                        }\n                        secondsAccountedFor += secondsInMonth;\n                }\n                // Day\n                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n                        if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n                                dt.day = i;\n                                break;\n                        }\n                        secondsAccountedFor += DAY_IN_SECONDS;\n                }\n                // Hour\n                dt.hour = 0;//getHour(timestamp);\n                // Minute\n                dt.minute = 0;//getMinute(timestamp);\n                // Second\n                dt.second = 0;//getSecond(timestamp);\n                // Day of week.\n                dt.weekday = 0;//getWeekday(timestamp);\n        }\n        function getYear(uint timestamp) constant returns (uint16) {\n                uint secondsAccountedFor = 0;\n                uint16 year;\n                uint numLeapYears;\n                // Year\n                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n                while (secondsAccountedFor > timestamp) {\n                        if (isLeapYear(uint16(year - 1))) {\n                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n                        }\n                        else {\n                                secondsAccountedFor -= YEAR_IN_SECONDS;\n                        }\n                        year -= 1;\n                }\n                return year;\n        }\n        function getMonth(uint timestamp) constant returns (uint8) {\n                return parseTimestamp(timestamp).month;\n        }\n        function getDay(uint timestamp) constant returns (uint8) {\n                return parseTimestamp(timestamp).day;\n        }\n        function getHour(uint timestamp) constant returns (uint8) {\n                return uint8((timestamp / 60 / 60) % 24);\n        }\n        function getMinute(uint timestamp) constant returns (uint8) {\n                return uint8((timestamp / 60) % 60);\n        }\n        function getSecond(uint timestamp) constant returns (uint8) {\n                return uint8(timestamp % 60);\n        }\n        function toTimestamp(uint16 year, uint8 month, uint8 day) constant returns (uint timestamp) {\n                return toTimestamp(year, month, day, 0, 0, 0);\n        }\n\n        function toDay(uint256 timestamp) internal returns (uint256) {\n                MyDateTime memory d = parseTimestamp(timestamp);\n                return uint256(d.year) * 10000 + uint256(d.month) * 100 + uint256(d.day);\n        }\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) constant returns (uint timestamp) {\n                uint16 i;\n                // Year\n                for (i = ORIGIN_YEAR; i < year; i++) {\n                        if (isLeapYear(i)) {\n                                timestamp += LEAP_YEAR_IN_SECONDS;\n                        }\n                        else {\n                                timestamp += YEAR_IN_SECONDS;\n                        }\n                }\n                // Month\n                uint8[12] memory monthDayCounts;\n                monthDayCounts[0] = 31;\n                if (isLeapYear(year)) {\n                        monthDayCounts[1] = 29;\n                }\n                else {\n                        monthDayCounts[1] = 28;\n                }\n                monthDayCounts[2] = 31;\n                monthDayCounts[3] = 30;\n                monthDayCounts[4] = 31;\n                monthDayCounts[5] = 30;\n                monthDayCounts[6] = 31;\n                monthDayCounts[7] = 31;\n                monthDayCounts[8] = 30;\n                monthDayCounts[9] = 31;\n                monthDayCounts[10] = 30;\n                monthDayCounts[11] = 31;\n                for (i = 1; i < month; i++) {\n                        timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n                }\n                // Day\n                timestamp += DAY_IN_SECONDS * (day - 1);\n                // Hour\n                timestamp += HOUR_IN_SECONDS * (hour);\n                // Minute\n                timestamp += MINUTE_IN_SECONDS * (minute);\n                // Second\n                timestamp += second;\n                return timestamp;\n        }\n}\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    pendingOwner = newOwner;\n  }\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner {\n    owner = pendingOwner;\n    pendingOwner = 0x0;\n  }\n}\ncontract Operational is Claimable {\n    address public operator;\n    function Operational(address _operator) {\n      operator = _operator;\n    }\n    modifier onlyOperator() {\n      require(msg.sender == operator);\n      _;\n    }\n    function transferOperator(address newOperator) onlyOwner {\n      require(newOperator != address(0));\n      operator = newOperator;\n    }\n}\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n  mapping(address => uint256) balances;\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n  mapping (address => mapping (address => uint256)) allowed;\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n/**\n * @title Helps contracts guard agains rentrancy attacks.\n * @author Remco Bloemen <[email protected]π.com>\n * @notice If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n  /**\n   * @dev We use a single lock for the whole contract.\n   */\n  bool private rentrancy_lock = false;\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * @notice If you mark a function `nonReentrant`, you should also\n   * mark it `external`. Calling one nonReentrant function from\n   * another is not supported. Instead, you can implement a\n   * `private` function doing the actual work, and a `external`\n   * wrapper marked as `nonReentrant`.\n   */\n  modifier nonReentrant() {\n    require(!rentrancy_lock);\n    rentrancy_lock = true;\n    _;\n    rentrancy_lock = false;\n  }\n}\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken {\n    event Burn(address indexed burner, uint256 value);\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public returns (bool) {\n        require(_value > 0);\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n        return true;\n    }\n}\ncontract FrozenableToken is Operational, BurnableToken, ReentrancyGuard {\n            using DateTime for uint256;\n    uint256 public createTime;\n    uint256 public frozenForever;\n    uint256 public frozenAnnually;\n\n    struct FrozenRecord {\n        uint256 value;\n        uint256 day;\n    }\n    mapping (uint256 => FrozenRecord) public frozenBalances;\n\n    event FreezeForOwner(address indexed owner, uint256 value, uint256 unFrozenTime);\n    event Unfreeze(address indexed owner, uint256 value);\n    // freeze _value token to _unFrozenTime\n\n    function freezeForOwner(uint256 _value, uint256 _unFrozenTime) onlyOperator returns(bool) {\n        require(balances[owner] >= _value);\n        require(_unFrozenTime > createTime);\n        require(_unFrozenTime > now);  \n        if (_unFrozenTime.parseTimestamp().year - createTime.parseTimestamp().year > 10 ){\n                balances[owner] = balances[owner].sub(_value);\n                frozenForever = frozenForever.add(_value);\n                FreezeForOwner(owner, _value, _unFrozenTime);\n        } else {\n                uint256 day = _unFrozenTime.toDay();\n                if (frozenBalances[day].day == day) {\n                        revert();\n                }\n                balances[owner] = balances[owner].sub(_value);\n                frozenAnnually = frozenAnnually.add(_value);\n                frozenBalances[day] = FrozenRecord( _value, day);\n                FreezeForOwner(owner, _value, _unFrozenTime);\n        }\n\n        return true;\n    }\n\n    // unfreeze frozen amount\n    function unfreeze(uint256 _unFrozenTime) onlyOperator returns (bool) {\n        require(_unFrozenTime < block.timestamp);\n        uint256 day = _unFrozenTime.toDay();\n        uint256 _value = frozenBalances[day].value;\n        if (_value>0) {\n                frozenBalances[day].value = 0;\n                frozenAnnually = frozenAnnually.sub(_value);\n                balances[owner] = balances[owner].add(_value);\n                Unfreeze(owner, _value);\n        }\n        return true;\n    }\n\n}\ncontract DragonReleaseableToken is FrozenableToken {\n    using SafeMath for uint;\n    using DateTime for uint256;\n    uint256 standardDecimals = 100000000; // match decimals\n    uint256 public award = standardDecimals.mul(51200); // award per day\n    event ReleaseSupply(address indexed receiver, uint256 value, uint256 releaseTime);\n    struct ReleaseRecord {\n        uint256 amount; // release amount\n        uint256 releasedDay;\n    }\n    mapping (uint256 => ReleaseRecord) public releasedRecords;\n    function DragonReleaseableToken(\n                    address operator\n                ) Operational(operator) {\n        createTime = 1509580800;\n    }\n    function releaseSupply(uint256 timestamp) onlyOperator returns(uint256 _actualRelease) {\n        require(timestamp >= createTime && timestamp <= now);\n        require(!judgeReleaseRecordExist(timestamp));\n        updateAward(timestamp);\n        balances[owner] = balances[owner].add(award);\n        totalSupply = totalSupply.add(award);\n        uint256 releasedDay = timestamp.toDay();\n        releasedRecords[releasedDay] = ReleaseRecord(award, releasedDay);\n        ReleaseSupply(owner, award, timestamp);\n        return award;\n    }\n    function judgeReleaseRecordExist(uint256 timestamp) internal returns(bool _exist) {\n        bool exist = false;\n        uint256 day = timestamp.toDay();\n        if (releasedRecords[day].releasedDay == day){\n            exist = true;\n        }\n        return exist;\n    }\n    function updateAward(uint256 timestamp) internal {\n        if (timestamp < createTime.add(1 years)) {\n            award = standardDecimals.mul(51200);\n        } else if (timestamp < createTime.add(2 years)) {\n            award = standardDecimals.mul(25600);\n        } else if (timestamp < createTime.add(3 years)) {\n            award = standardDecimals.mul(12800);\n        } else if (timestamp < createTime.add(4 years)) {\n            award = standardDecimals.mul(6400);\n        } else if (timestamp < createTime.add(5 years)) {\n            award = standardDecimals.mul(3200);\n        } else if (timestamp < createTime.add(6 years)) {\n            award = standardDecimals.mul(1600);\n        } else if (timestamp < createTime.add(7 years)) {\n            award = standardDecimals.mul(800);\n        } else if (timestamp < createTime.add(8 years)) {\n            award = standardDecimals.mul(400);\n        } else if (timestamp < createTime.add(9 years)) {\n            award = standardDecimals.mul(200);\n        } else if (timestamp < createTime.add(10 years)) {\n            award = standardDecimals.mul(100);\n        } else {\n            award = 0;\n        }\n    }\n}\ncontract DragonToken is DragonReleaseableToken {\n    string public standard = '2017111504';\n    string public name = 'DragonToken';\n    string public symbol = 'DT';\n    uint8 public decimals = 8;\n    function DragonToken(\n                     address operator\n                     ) DragonReleaseableToken(operator) {}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_unFrozenTime\",\"type\":\"uint256\"}],\"name\":\"freezeForOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenAnnually\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"award\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenForever\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unFrozenTime\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"frozenBalances\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"day\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"releasedRecords\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"releasedDay\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"releaseSupply\",\"outputs\":[{\"name\":\"_actualRelease\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"ReleaseSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unFrozenTime\",\"type\":\"uint256\"}],\"name\":\"FreezeForOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526006805460ff191690556305f5e100600b819055620000349061c800640100000000620018996200019682021704565b600c5560408051908101604052600a81527f32303137313131353034000000000000000000000000000000000000000000006020820152600e90805162000080929160200190620001c8565b5060408051908101604052600b81527f447261676f6e546f6b656e0000000000000000000000000000000000000000006020820152600f908051620000ca929160200190620001c8565b5060408051908101604052600281527f44540000000000000000000000000000000000000000000000000000000000006020820152601090805162000114929160200190620001c8565b506011805460ff1916600817905534156200012e57600080fd5b60405160208062001c0c833981016040528080519150505b805b805b5b60008054600160a060020a03191633600160a060020a03161790555b60028054600160a060020a031916600160a060020a0383161790555b506359fa60006007555b505b5062000272565b6000828202831580620001b45750828482811515620001b157fe5b04145b1515620001bd57fe5b8091505b5092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020b57805160ff19168380011785556200023b565b828001600101855582156200023b579182015b828111156200023b5782518255916020019190600101906200021e565b5b506200024a9291506200024e565b5090565b6200026f91905b808211156200024a576000815560010162000255565b5090565b90565b61198a80620002826000396000f300606060405236156101515763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610156578063095ea7b3146101e157806318160ddd1461021757806319216e8d1461023c57806323b872dd1461026957806329605e77146102a5578063313ce567146102c6578063360c97dd146102ef57806341a494c51461031457806342966c68146103395780634e71e0c814610363578063570ca735146103785780635a3b7e42146103a7578063612acecc1461043257806361dcd7ab146104575780636623fc461461047c57806370a08231146104a65780637c210708146104d75780637ed1f267146105055780638da5cb5b1461053357806395d89b41146105625780639fc3587a146105ed578063a9059cbb14610615578063dd62ed3e1461064b578063e30c397814610682578063f2fde38b146106b1575b600080fd5b341561016157600080fd5b6101696106d2565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101a65780820151818401525b60200161018d565b50505050905090810190601f1680156101d35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101ec57600080fd5b610203600160a060020a0360043516602435610770565b604051901515815260200160405180910390f35b341561022257600080fd5b61022a610817565b60405190815260200160405180910390f35b341561024757600080fd5b61020360043560243561081d565b604051901515815260200160405180910390f35b341561027457600080fd5b610203600160a060020a0360043581169060243516604435610a4b565b604051901515815260200160405180910390f35b34156102b057600080fd5b6102c4600160a060020a0360043516610bce565b005b34156102d157600080fd5b6102d9610c2b565b60405160ff909116815260200160405180910390f35b34156102fa57600080fd5b61022a610c34565b60405190815260200160405180910390f35b341561031f57600080fd5b61022a610c3a565b60405190815260200160405180910390f35b341561034457600080fd5b610203600435610c40565b604051901515815260200160405180910390f35b341561036e57600080fd5b6102c4610d10565b005b341561038357600080fd5b61038b610d61565b604051600160a060020a03909116815260200160405180910390f35b34156103b257600080fd5b610169610d70565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101a65780820151818401525b60200161018d565b50505050905090810190601f1680156101d35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561043d57600080fd5b61022a610e0e565b60405190815260200160405180910390f35b341561046257600080fd5b61022a610e14565b60405190815260200160405180910390f35b341561048757600080fd5b610203600435610e1a565b604051901515815260200160405180910390f35b34156104b157600080fd5b61022a600160a060020a0360043516610f1f565b60405190815260200160405180910390f35b34156104e257600080fd5b6104ed600435610f3e565b60405191825260208201526040908101905180910390f35b341561051057600080fd5b6104ed600435610f57565b60405191825260208201526040908101905180910390f35b341561053e57600080fd5b61038b610f70565b604051600160a060020a03909116815260200160405180910390f35b341561056d57600080fd5b610169610f7f565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101a65780820151818401525b60200161018d565b50505050905090810190601f1680156101d35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105f857600080fd5b61022a60043561101d565b60405190815260200160405180910390f35b341561062057600080fd5b610203600160a060020a036004351660243561116a565b604051901515815260200160405180910390f35b341561065657600080fd5b61022a600160a060020a0360043581169060243516611266565b60405190815260200160405180910390f35b341561068d57600080fd5b61038b611293565b604051600160a060020a03909116815260200160405180910390f35b34156106bc57600080fd5b6102c4600160a060020a03600435166112a2565b005b600f8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107685780601f1061073d57610100808354040283529160200191610768565b820191906000526020600020905b81548152906001019060200180831161074b57829003601f168201915b505050505081565b60008115806107a25750600160a060020a03338116600090815260056020908152604080832093871683529290522054155b15156107ad57600080fd5b600160a060020a03338116600081815260056020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60035481565b600254600090819033600160a060020a0390811691161461083d57600080fd5b60008054600160a060020a03168152600460205260409020548490101561086357600080fd5b600754831161087157600080fd5b42831161087d57600080fd5b600a61088a6007546112ea565b51610894856112ea565b510361ffff1611156109435760008054600160a060020a03168152600460205260409020546108c9908563ffffffff61140a16565b60008054600160a060020a03168152600460205260409020556008546108f5908563ffffffff61142116565b600855600054600160a060020a03167fac9167f433f5e47fbe8c8fb53cb2a94ad3b606a1325351fcdffc02371a459f25858560405191825260208201526040908101905180910390a2610a3e565b61094c8361143b565b6000818152600a602052604090206001015490915081141561096d57600080fd5b60008054600160a060020a0316815260046020526040902054610996908563ffffffff61140a16565b60008054600160a060020a03168152600460205260409020556009546109c2908563ffffffff61142116565b60095560408051908101604090815285825260208083018490526000848152600a9091522081518155602082015160019091015550600054600160a060020a03167fac9167f433f5e47fbe8c8fb53cb2a94ad3b606a1325351fcdffc02371a459f25858560405191825260208201526040908101905180910390a25b600191505b5b5092915050565b6000600160a060020a0383161515610a6257600080fd5b600160a060020a038416600090815260046020526040902054821115610a8757600080fd5b600160a060020a0380851660009081526005602090815260408083203390941683529290522054821115610aba57600080fd5b600160a060020a038416600090815260046020526040902054610ae3908363ffffffff61140a16565b600160a060020a038086166000908152600460205260408082209390935590851681522054610b18908363ffffffff61142116565b600160a060020a03808516600090815260046020908152604080832094909455878316825260058152838220339093168252919091522054610b60908363ffffffff61140a16565b600160a060020a03808616600081815260056020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b9392505050565b60005433600160a060020a03908116911614610be957600080fd5b600160a060020a0381161515610bfe57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b60115460ff1681565b60095481565b600c5481565b600080808311610c4f57600080fd5b600160a060020a033316600090815260046020526040902054831115610c7457600080fd5b5033600160a060020a038116600090815260046020526040902054610c99908461140a565b600160a060020a038216600090815260046020526040902055600354610cc5908463ffffffff61140a16565b600355600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58460405190815260200160405180910390a2600191505b50919050565b60015433600160a060020a03908116911614610d2b57600080fd5b600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a038416179091551690555b5b565b600254600160a060020a031681565b600e8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107685780601f1061073d57610100808354040283529160200191610768565b820191906000526020600020905b81548152906001019060200180831161074b57829003601f168201915b505050505081565b60085481565b60075481565b6002546000908190819033600160a060020a03908116911614610e3c57600080fd5b428410610e4857600080fd5b610e518461143b565b6000818152600a6020526040812054919350909150811115610f12576000828152600a6020526040812055600954610e8f908263ffffffff61140a16565b60095560008054600160a060020a0316815260046020526040902054610ebb908263ffffffff61142116565b60008054600160a060020a0390811682526004602052604080832093909355905416907f2cfce4af01bcb9d6cf6c84ee1b7c491100b8695368264146a94d71e10a63083f9083905190815260200160405180910390a25b600192505b5b5050919050565b600160a060020a0381166000908152600460205260409020545b919050565b600a602052600090815260409020805460019091015482565b600d602052600090815260409020805460019091015482565b600054600160a060020a031681565b60108054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107685780601f1061073d57610100808354040283529160200191610768565b820191906000526020600020905b81548152906001019060200180831161074b57829003601f168201915b505050505081565b600254600090819033600160a060020a0390811691161461103d57600080fd5b600754831015801561104f5750428311155b151561105a57600080fd5b6110638361147b565b1561106d57600080fd5b611076836114b4565b600c5460008054600160a060020a03168152600460205260409020546110a19163ffffffff61142116565b60008054600160a060020a0316815260046020526040902055600c546003546110cf9163ffffffff61142116565b6003556110db8361143b565b9050604080519081016040908152600c54825260208083018490526000848152600d9091522081518155602082015160019091015550600054600c54600160a060020a03909116907f3f9e3494cddacfc8ffad423303d89b42edd68c349155fc54854d5d6dbe0a5e39908560405191825260208201526040908101905180910390a2600c5491505b5b50919050565b6000600160a060020a038316151561118157600080fd5b600160a060020a0333166000908152600460205260409020548211156111a657600080fd5b600160a060020a0333166000908152600460205260409020546111cf908363ffffffff61140a16565b600160a060020a033381166000908152600460205260408082209390935590851681522054611204908363ffffffff61142116565b600160a060020a0380851660008181526004602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600160a060020a038083166000908152600560209081526040808320938516835292905220545b92915050565b600154600160a060020a031681565b60005433600160a060020a039081169116146112bd57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b6112f2611922565b600080808061130086611713565b61ffff1685526113116107b26117aa565b61131f865161ffff166117aa565b039250826301e285000284019350826107b286600001510361ffff16036301e133800284019350600191505b600c60ff831611611393576113618286516117ca565b60ff16620151800290508584820111156113835760ff82166020860152611393565b928301925b60019091019061134b565b600191505b6113a7856020015186516117ca565b60ff168260ff161115156113e4578584620151800111156113d05760ff821660408601526113e4565b62015180840193505b600190910190611398565b6000606086018190526080860181905260a0860181905260c08601525b50505050919050565b60008282111561141657fe5b508082035b92915050565b60008282018381101561143057fe5b8091505b5092915050565b6000611445611922565b61144e836112ea565b9050806040015160ff16816020015160ff16606402826000015161ffff1661271002010191505b50919050565b600080806114888461143b565b6000818152600d60205260409020600101549091508114156114a957600191505b8192505b5050919050565b6007546114cb906301e1338063ffffffff61142116565b8110156114ef57600b546114e79061c80063ffffffff61189916565b600c55610c27565b600754611506906303c2670063ffffffff61142116565b81101561152a57600b546114e79061640063ffffffff61189916565b600c55610c27565b600754611541906305a39a8063ffffffff61142116565b81101561156557600b546114e79061320063ffffffff61189916565b600c55610c27565b60075461157c90630784ce0063ffffffff61142116565b8110156115a057600b546114e79061190063ffffffff61189916565b600c55610c27565b6007546115b790630966018063ffffffff61142116565b8110156115db57600b546114e790610c8063ffffffff61189916565b600c55610c27565b6007546115f290630b47350063ffffffff61142116565b81101561161657600b546114e79061064063ffffffff61189916565b600c55610c27565b60075461162d90630d28688063ffffffff61142116565b81101561165157600b546114e79061032063ffffffff61189916565b600c55610c27565b60075461166890630f099c0063ffffffff61142116565b81101561168c57600b546114e79061019063ffffffff61189916565b600c55610c27565b6007546116a3906310eacf8063ffffffff61142116565b8110156116c657600b546114e79060c863ffffffff61189916565b600c55610c27565b6007546116dd906312cc030063ffffffff61142116565b81101561170057600b546114e790606463ffffffff61189916565b600c55610c27565b6000600c555b5b5b5b5b5b5b5b5b5b5b50565b60008080806301e13380855b046107b29081019250611731906117aa565b61173e8361ffff166117aa565b039050806301e285000283019250806107b2830361ffff16036301e1338002830192505b8483111561179e57611776600183036118c8565b15611789576301e2850083039250611793565b6301e13380830392505b600182039150611762565b8193505b505050919050565b600019016000610190825b046064835b046004845b04030190505b919050565b60008260ff16600114806117e157508260ff166003145b806117ef57508260ff166005145b806117fd57508260ff166007145b8061180b57508260ff166008145b8061181957508260ff16600a145b8061182757508260ff16600c145b156118345750601f610811565b8260ff166004148061184957508260ff166006145b8061185757508260ff166009145b8061186557508260ff16600b145b156118725750601e610811565b61187b826118c8565b156118885750601d610811565b50601c610811565b5b5b5b92915050565b60008282028315806118b557508284828115156118b257fe5b04145b151561143057fe5b8091505b5092915050565b6000600461ffff83165b0661ffff16156118e457506000610f39565b606461ffff83165b0661ffff16156118fe57506001610f39565b61019061ffff83165b0661ffff161561191957506000610f39565b5060015b919050565b60e06040519081016040908152600080835260208301819052908201819052606082018190526080820181905260a0820181905260c0820152905600a165627a7a72305820e1741458854619a7c0a051c01c7184662161a3464d4398d8d2688b320822b3ca0029000000000000000000000000e557f1b9ed9fc508993bb7e168ce035ab9e5bee1",
  "constructorArguments": "000000000000000000000000e557f1b9ed9fc508993bb7e168ce035ab9e5bee1"
}