{
  "address": "0x3c159c0b03974f4b2befdde6f9f4ef09fd8d697b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CulturalCoinToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-26\n*/\n\npragma solidity ^0.4.18;\n\n/// @title Ownable contract\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n}\n\n/// @title Ownable contract\ncontract Ownable {\n  \n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /// @dev Change ownership\n  /// @param newOwner Address of the new owner\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/// @title Pausable contract\ncontract Pausable is Ownable {\n\n  /// Used to pause transfers\n  bool public transferPaused;\n  address public crowdsale;\n  \n  function Pausable() public {\n    transferPaused = false;\n    crowdsale = msg.sender; // or address(0)\n  }\n\n  /// Crowdsale is the only one allowed to do transfers if transfer is paused\n  modifier onlyCrowdsaleIfPaused() {\n    if (transferPaused) {\n      require(msg.sender == crowdsale);\n    }\n    _;\n  }\n\n  /// @dev Change crowdsale address reference\n  /// @param newCrowdsale Address of the new crowdsale\n  function changeCrowdsale(address newCrowdsale) onlyOwner public {\n    require(newCrowdsale != address(0));\n    CrowdsaleChanged(crowdsale, newCrowdsale);\n    crowdsale = newCrowdsale;\n  }\n\n   /// @dev Pause token transfer\n  function pause() public onlyOwner {\n      transferPaused = true;\n      Pause();\n  }\n\n  /// @dev Unpause token transfer\n  function unpause() public onlyOwner {\n      transferPaused = false;\n      Unpause();\n  }\n\n  event Pause();\n  event Unpause();\n  event CrowdsaleChanged(address indexed previousCrowdsale, address indexed newCrowdsale);\n\n}\n\n/// @title ERC20 contract\n/// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\ncontract ERC20 {\n  uint public totalSupply;\n  function balanceOf(address who) public constant returns (uint);\n  function transfer(address to, uint value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint value);\n  \n  function allowance(address owner, address spender) public constant returns (uint);\n  function transferFrom(address from, address to, uint value) public returns (bool);\n  function approve(address spender, uint value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n/// @title ExtendedToken contract\ncontract ExtendedToken is ERC20, Pausable {\n  using SafeMath for uint;\n\n  /// Mapping for balances\n  mapping (address => uint) public balances;\n  /// Mapping for allowance\n  mapping (address => mapping (address => uint)) internal allowed;\n\n  /// @dev Any unsold tokens from ICO will be sent to owner address and burned\n  /// @param _amount Amount of tokens to be burned from owner address\n  /// @return True if successfully burned\n  function burn(uint _amount) public onlyOwner returns (bool) {\n\t  require(balances[msg.sender] >= _amount);     \n    balances[msg.sender] = balances[msg.sender].sub(_amount);\n    totalSupply = totalSupply.sub(_amount);\n    Burn(msg.sender, _amount);\n    return true;\n  }\n\n  /// @dev Used by transfer function\n  function _transfer(address _from, address _to, uint _value) internal onlyCrowdsaleIfPaused {\n    require(_to != address(0));\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(_from, _to, _value);\n  }\n  \n  /// @dev Transfer tokens\n  /// @param _to Address to receive the tokens\n  /// @param _value Amount of tokens to be sent\n  /// @return True if successful\n  function transfer(address _to, uint _value) public returns (bool) {\n    _transfer(msg.sender, _to, _value);\n    return true;\n  }\n  \n  function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n    require(_value <= allowed[_from][msg.sender]);\n    _transfer(_from, _to, _value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    return true;\n  }\n\n  /// @dev Check balance of an address\n  /// @param _owner Address to be checked\n  /// @return Number of tokens\n  function balanceOf(address _owner) public constant returns (uint balance) {\n    return balances[_owner];\n  }\n\n  function approve(address _spender, uint _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /// @dev Don't accept ether\n  function () public payable {\n    revert();\n  }\n\n  /// @dev Claim tokens that have been sent to contract mistakenly\n  /// @param _token Token address that we want to claim\n  function claimTokens(address _token) public onlyOwner {\n    if (_token == address(0)) {\n         owner.transfer(this.balance);\n         return;\n    }\n\n    ERC20 token = ERC20(_token);\n    uint balance = token.balanceOf(this);\n    token.transfer(owner, balance);\n    ClaimedTokens(_token, owner, balance);\n  }\n\n  /// Events\n  event Burn(address _from, uint _amount);\n  event ClaimedTokens(address indexed _token, address indexed _owner, uint _amount);\n\n}\n\n/// @title Cultural Coin Token contract\ncontract CulturalCoinToken is ExtendedToken {\n  string public constant name = \"Cultural Coin Token\";\n  string public constant symbol = \"CC\";\n  uint8 public constant decimals = 18;\n  string public constant version = \"v1\";\n\n  function CulturalCoinToken() public { \n    totalSupply = 1500 * 10**24;    // 1500m tokens\n    balances[owner] = totalSupply;  // Tokens will be initially set to the owner account. From there 900m will be sent to Crowdsale\n  }\n\n}",
  "bytecode": "6060604052341561000f57600080fd5b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690831515021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506b04d8c55aefb8c05b5c00000060008190555060005460036000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611cfb806101366000396000f300606060405260043610610128576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461012d578063095ea7b3146101bb57806318160ddd1461021557806323b872dd1461023e57806327e235e3146102b7578063313ce567146103045780633f4ba83a1461033357806342966c681461034857806354fd4d5014610383578063661884631461041157806370a082311461046b5780638456cb59146104b85780638da5cb5b146104cd57806395d89b41146105225780639c1e03a0146105b0578063a9059cbb14610605578063ad2b14d11461065f578063d73dd62314610698578063dd62ed3e146106f2578063df8de3e71461075e578063f2fde38b14610797578063fb2cb34e146107d0575b600080fd5b341561013857600080fd5b6101406107fd565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610180578082015181840152602081019050610165565b50505050905090810190601f1680156101ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101c657600080fd5b6101fb600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610836565b604051808215151515815260200191505060405180910390f35b341561022057600080fd5b610228610928565b6040518082815260200191505060405180910390f35b341561024957600080fd5b61029d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061092e565b604051808215151515815260200191505060405180910390f35b34156102c257600080fd5b6102ee600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ae0565b6040518082815260200191505060405180910390f35b341561030f57600080fd5b610317610af8565b604051808260ff1660ff16815260200191505060405180910390f35b341561033e57600080fd5b610346610afd565b005b341561035357600080fd5b6103696004808035906020019091905050610ba2565b604051808215151515815260200191505060405180910390f35b341561038e57600080fd5b610396610d72565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103d65780820151818401526020810190506103bb565b50505050905090810190601f1680156104035780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561041c57600080fd5b610451600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610dab565b604051808215151515815260200191505060405180910390f35b341561047657600080fd5b6104a2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061103c565b6040518082815260200191505060405180910390f35b34156104c357600080fd5b6104cb611085565b005b34156104d857600080fd5b6104e0611129565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561052d57600080fd5b61053561114f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561057557808201518184015260208101905061055a565b50505050905090810190601f1680156105a25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105bb57600080fd5b6105c3611188565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561061057600080fd5b610645600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506111ae565b604051808215151515815260200191505060405180910390f35b341561066a57600080fd5b610696600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111c5565b005b34156106a357600080fd5b6106d8600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061131d565b604051808215151515815260200191505060405180910390f35b34156106fd57600080fd5b610748600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611519565b6040518082815260200191505060405180910390f35b341561076957600080fd5b610795600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506115a0565b005b34156107a257600080fd5b6107ce600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506118eb565b005b34156107db57600080fd5b6107e3611a43565b604051808215151515815260200191505060405180910390f35b6040805190810160405280601381526020017f43756c747572616c20436f696e20546f6b656e0000000000000000000000000081525081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b6000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156109bb57600080fd5b6109c6848484611a56565b610a5582600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c9890919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600190509392505050565b60036020528060005260406000206000915090505481565b601281565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b5957600080fd5b6000600160146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c0057600080fd5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610c4e57600080fd5b610ca082600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c9890919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cf882600054611c9890919063ffffffff16565b6000819055507fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca53383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a160019050919050565b6040805190810160405280600281526020017f763100000000000000000000000000000000000000000000000000000000000081525081565b600080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610ebc576000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f50565b610ecf8382611c9890919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110e157600080fd5b60018060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600281526020017f434300000000000000000000000000000000000000000000000000000000000081525081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006111bb338484611a56565b6001905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561122157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561125d57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f6c6d2653b73c25ceb5793671ce16631654833faec652ed39fd3d11400ea4be7060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006113ae82600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cb190919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115ff57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156116b257600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015156116ad57600080fd5b6118e6565b8291508173ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561175857600080fd5b6102c65a03f1151561176957600080fd5b5050506040518051905090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561184257600080fd5b6102c65a03f1151561185357600080fd5b5050506040518051905050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c836040518082815260200191505060405180910390a35b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561194757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561198357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160149054906101000a900460ff1681565b600160149054906101000a900460ff1615611ac857600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ac757600080fd5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611b0457600080fd5b611b5681600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c9890919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611beb81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cb190919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000828211151515611ca657fe5b818303905092915050565b6000808284019050838110151515611cc557fe5b80915050929150505600a165627a7a7230582086d63b0c199cb4f9d5750d10eeb1fe3b4b7bf46a6db5c754a3e0d4bdd626c8c00029"
}