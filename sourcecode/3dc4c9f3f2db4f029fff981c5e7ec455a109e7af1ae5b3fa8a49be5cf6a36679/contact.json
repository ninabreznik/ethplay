{
  "address": "0x0f614b754ead8c3a6c34267ccfd0eb04548aeb04",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PausedCAD",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "20000",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-27\n*/\n\npragma solidity ^0.4.23;\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: registry/contracts/Registry.sol\n\ninterface RegistryClone {\n    function syncAttributeValue(address _who, bytes32 _attribute, uint256 _value) external;\n}\n\ncontract Registry {\n    struct AttributeData {\n        uint256 value;\n        bytes32 notes;\n        address adminAddr;\n        uint256 timestamp;\n    }\n    \n    // never remove any storage variables\n    address public owner;\n    address public pendingOwner;\n    bool initialized;\n\n    // Stores arbitrary attributes for users. An example use case is an ERC20\n    // token that requires its users to go through a KYC/AML check - in this case\n    // a validator can set an account's \"hasPassedKYC/AML\" attribute to 1 to indicate\n    // that account can use the token. This mapping stores that value (1, in the\n    // example) as well as which validator last set the value and at what time,\n    // so that e.g. the check can be renewed at appropriate intervals.\n    mapping(address => mapping(bytes32 => AttributeData)) attributes;\n    // The logic governing who is allowed to set what attributes is abstracted as\n    // this accessManager, so that it may be replaced by the owner as needed\n    bytes32 constant WRITE_PERMISSION = keccak256(\"canWriteTo-\");\n    mapping(bytes32 => RegistryClone[]) subscribers;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n    event SetAttribute(address indexed who, bytes32 attribute, uint256 value, bytes32 notes, address indexed adminAddr);\n    event SetManager(address indexed oldManager, address indexed newManager);\n    event StartSubscription(bytes32 indexed attribute, RegistryClone indexed subscriber);\n    event StopSubscription(bytes32 indexed attribute, RegistryClone indexed subscriber);\n\n    // Allows a write if either a) the writer is that Registry's owner, or\n    // b) the writer is writing to attribute foo and that writer already has\n    // the canWriteTo-foo attribute set (in that same Registry)\n    function confirmWrite(bytes32 _attribute, address _admin) internal view returns (bool) {\n        return (_admin == owner || hasAttribute(_admin, keccak256(WRITE_PERMISSION ^ _attribute)));\n    }\n\n    // Writes are allowed only if the accessManager approves\n    function setAttribute(address _who, bytes32 _attribute, uint256 _value, bytes32 _notes) public {\n        require(confirmWrite(_attribute, msg.sender));\n        attributes[_who][_attribute] = AttributeData(_value, _notes, msg.sender, block.timestamp);\n        emit SetAttribute(_who, _attribute, _value, _notes, msg.sender);\n\n        RegistryClone[] storage targets = subscribers[_attribute];\n        uint256 index = targets.length;\n        while (index --> 0) {\n            targets[index].syncAttributeValue(_who, _attribute, _value);\n        }\n    }\n\n    function subscribe(bytes32 _attribute, RegistryClone _syncer) external onlyOwner {\n        subscribers[_attribute].push(_syncer);\n        emit StartSubscription(_attribute, _syncer);\n    }\n\n    function unsubscribe(bytes32 _attribute, uint256 _index) external onlyOwner {\n        uint256 length = subscribers[_attribute].length;\n        require(_index < length);\n        emit StopSubscription(_attribute, subscribers[_attribute][_index]);\n        subscribers[_attribute][_index] = subscribers[_attribute][length - 1];\n        subscribers[_attribute].length = length - 1;\n    }\n\n    function subscriberCount(bytes32 _attribute) public view returns (uint256) {\n        return subscribers[_attribute].length;\n    }\n\n    function setAttributeValue(address _who, bytes32 _attribute, uint256 _value) public {\n        require(confirmWrite(_attribute, msg.sender));\n        attributes[_who][_attribute] = AttributeData(_value, \"\", msg.sender, block.timestamp);\n        emit SetAttribute(_who, _attribute, _value, \"\", msg.sender);\n        RegistryClone[] storage targets = subscribers[_attribute];\n        uint256 index = targets.length;\n        while (index --> 0) {\n            targets[index].syncAttributeValue(_who, _attribute, _value);\n        }\n    }\n\n    // Returns true if the uint256 value stored for this attribute is non-zero\n    function hasAttribute(address _who, bytes32 _attribute) public view returns (bool) {\n        return attributes[_who][_attribute].value != 0;\n    }\n\n\n    // Returns the exact value of the attribute, as well as its metadata\n    function getAttribute(address _who, bytes32 _attribute) public view returns (uint256, bytes32, address, uint256) {\n        AttributeData memory data = attributes[_who][_attribute];\n        return (data.value, data.notes, data.adminAddr, data.timestamp);\n    }\n\n    function getAttributeValue(address _who, bytes32 _attribute) public view returns (uint256) {\n        return attributes[_who][_attribute].value;\n    }\n\n    function getAttributeAdminAddr(address _who, bytes32 _attribute) public view returns (address) {\n        return attributes[_who][_attribute].adminAddr;\n    }\n\n    function getAttributeTimestamp(address _who, bytes32 _attribute) public view returns (uint256) {\n        return attributes[_who][_attribute].timestamp;\n    }\n\n    function syncAttribute(bytes32 _attribute, uint256 _startIndex, address[] _addresses) external {\n        RegistryClone[] storage targets = subscribers[_attribute];\n        uint256 index = targets.length;\n        while (index --> _startIndex) {\n            RegistryClone target = targets[index];\n            for (uint256 i = _addresses.length; i --> 0; ) {\n                address who = _addresses[i];\n                target.syncAttributeValue(who, _attribute, attributes[who][_attribute].value);\n            }\n        }\n    }\n\n    function reclaimEther(address _to) external onlyOwner {\n        _to.transfer(address(this).balance);\n    }\n\n    function reclaimToken(ERC20 token, address _to) external onlyOwner {\n        uint256 balance = token.balanceOf(this);\n        token.transfer(_to, balance);\n    }\n\n   /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"only Owner\");\n        _;\n    }\n\n    /**\n    * @dev Modifier throws if called by any account other than the pendingOwner.\n    */\n    modifier onlyPendingOwner() {\n        require(msg.sender == pendingOwner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to set the pendingOwner address.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        pendingOwner = newOwner;\n    }\n\n    /**\n    * @dev Allows the pendingOwner address to finalize the transfer.\n    */\n    function claimOwnership() public onlyPendingOwner {\n        emit OwnershipTransferred(owner, pendingOwner);\n        owner = pendingOwner;\n        pendingOwner = address(0);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Claimable.sol\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner public {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/modularERC20/BalanceSheet.sol\n\n// A wrapper around the balanceOf mapping.\ncontract BalanceSheet is Claimable {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) public balanceOf;\n\n    function addBalance(address _addr, uint256 _value) public onlyOwner {\n        balanceOf[_addr] = balanceOf[_addr].add(_value);\n    }\n\n    function subBalance(address _addr, uint256 _value) public onlyOwner {\n        balanceOf[_addr] = balanceOf[_addr].sub(_value);\n    }\n\n    function setBalance(address _addr, uint256 _value) public onlyOwner {\n        balanceOf[_addr] = _value;\n    }\n}\n\n// File: contracts/modularERC20/AllowanceSheet.sol\n\n// A wrapper around the allowanceOf mapping.\ncontract AllowanceSheet is Claimable {\n    using SafeMath for uint256;\n\n    mapping (address => mapping (address => uint256)) public allowanceOf;\n\n    function addAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\n        allowanceOf[_tokenHolder][_spender] = allowanceOf[_tokenHolder][_spender].add(_value);\n    }\n\n    function subAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\n        allowanceOf[_tokenHolder][_spender] = allowanceOf[_tokenHolder][_spender].sub(_value);\n    }\n\n    function setAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\n        allowanceOf[_tokenHolder][_spender] = _value;\n    }\n}\n\n// File: contracts/ProxyStorage.sol\n\n/*\nDefines the storage layout of the token implementaiton contract. Any newly declared\nstate variables in future upgrades should be appened to the bottom. Never remove state variables\nfrom this list\n */\ncontract ProxyStorage {\n    address public owner;\n    address public pendingOwner;\n\n    bool initialized;\n    \n    BalanceSheet balances_Deprecated;\n    AllowanceSheet allowances_Deprecated;\n\n    uint256 totalSupply_;\n    \n    bool private paused_Deprecated = false;\n    address private globalPause_Deprecated;\n\n    uint256 public burnMin = 0;\n    uint256 public burnMax = 0;\n\n    Registry public registry;\n\n    string name_Deprecated;\n    string symbol_Deprecated;\n\n    uint[] gasRefundPool_Deprecated;\n    uint256 private redemptionAddressCount_Deprecated;\n    uint256 public minimumGasPriceForFutureRefunds;\n\n    mapping (address => uint256) _balanceOf;\n    mapping (address => mapping (address => uint256)) _allowance;\n    mapping (bytes32 => mapping (address => uint256)) attributes;\n\n\n    /* Additionally, we have several keccak-based storage locations.\n     * If you add more keccak-based storage mappings, such as mappings, you must document them here.\n     * If the length of the keccak input is the same as an existing mapping, it is possible there could be a preimage collision.\n     * A preimage collision can be used to attack the contract by treating one storage location as another,\n     * which would always be a critical issue.\n     * Carefully examine future keccak-based storage to ensure there can be no preimage collisions.\n     *******************************************************************************************************\n     ** length     input                                                         usage\n     *******************************************************************************************************\n     ** 19         \"trueXXX.proxy.owner\"                                         Proxy Owner\n     ** 27         \"trueXXX.pending.proxy.owner\"                                 Pending Proxy Owner\n     ** 28         \"trueXXX.proxy.implementation\"                                Proxy Implementation\n     ** 32         uint256(11)                                                   gasRefundPool_Deprecated\n     ** 64         uint256(address),uint256(14)                                  balanceOf\n     ** 64         uint256(address),keccak256(uint256(address),uint256(15))      allowance\n     ** 64         uint256(address),keccak256(bytes32,uint256(16))               attributes\n    **/\n}\n\n// File: contracts/HasOwner.sol\n\n/**\n * @title HasOwner\n * @dev The HasOwner contract is a copy of Claimable Contract by Zeppelin. \n and provides basic authorization control functions. Inherits storage layout of \n ProxyStorage.\n */\ncontract HasOwner is ProxyStorage {\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n    * @dev sets the original `owner` of the contract to the sender\n    * at construction. Must then be reinitialized \n    */\n    constructor() public {\n        owner = msg.sender;\n        emit OwnershipTransferred(address(0), owner);\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"only Owner\");\n        _;\n    }\n\n    /**\n    * @dev Modifier throws if called by any account other than the pendingOwner.\n    */\n    modifier onlyPendingOwner() {\n        require(msg.sender == pendingOwner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to set the pendingOwner address.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        pendingOwner = newOwner;\n    }\n\n    /**\n    * @dev Allows the pendingOwner address to finalize the transfer.\n    */\n    function claimOwnership() public onlyPendingOwner {\n        emit OwnershipTransferred(owner, pendingOwner);\n        owner = pendingOwner;\n        pendingOwner = address(0);\n    }\n}\n\n// File: contracts/utilities/PausedToken.sol\n\ncontract PausedToken is HasOwner, RegistryClone {\n    using SafeMath for uint256;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event AllowanceSheetSet(address indexed sheet);\n    event BalanceSheetSet(address indexed sheet);\n    uint8 constant DECIMALS = 18;\n    uint8 constant ROUNDING = 2;\n\n    event WipeBlacklistedAccount(address indexed account, uint256 balance);\n    event SetRegistry(address indexed registry);\n\n    function decimals() public pure returns (uint8) {\n        return DECIMALS;\n    }\n\n    function rounding() public pure returns (uint8) {\n        return ROUNDING;\n    }\n\n    /**  \n    *@dev send all eth balance in the TrueUSD contract to another address\n    */\n    function reclaimEther(address _to) external onlyOwner {\n        _to.transfer(address(this).balance);\n    }\n\n    /**  \n    *@dev send all token balance of an arbitary erc20 token\n    in the TrueUSD contract to another address\n    */\n    function reclaimToken(ERC20 token, address _to) external onlyOwner {\n        uint256 balance = token.balanceOf(this);\n        token.transfer(_to, balance);\n    }\n\n    /**  \n    *@dev allows owner of TrueUSD to gain ownership of any contract that TrueUSD currently owns\n    */\n    function reclaimContract(Ownable _ownable) external onlyOwner {\n        _ownable.transferOwnership(owner);\n    }\n\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**  \n    *@dev Return the remaining sponsored gas slots\n    */\n    function remainingGasRefundPool() public view returns (uint length) {\n        assembly {\n            length := sload(0xfffff)\n        }\n    }\n\n    function sponsorGas() external {\n        uint256 refundPrice = minimumGasPriceForFutureRefunds;\n        require(refundPrice > 0);\n        assembly {\n            let offset := sload(0xfffff)\n            let result := add(offset, 9)\n            sstore(0xfffff, result)\n            let position := add(offset, 0x100000)\n            sstore(position, refundPrice)\n            position := add(position, 1)\n            sstore(position, refundPrice)\n            position := add(position, 1)\n            sstore(position, refundPrice)\n            position := add(position, 1)\n            sstore(position, refundPrice)\n            position := add(position, 1)\n            sstore(position, refundPrice)\n            position := add(position, 1)\n            sstore(position, refundPrice)\n            position := add(position, 1)\n            sstore(position, refundPrice)\n            position := add(position, 1)\n            sstore(position, refundPrice)\n            position := add(position, 1)\n            sstore(position, refundPrice)\n        }\n    }\n\n    bytes32 constant CAN_SET_FUTURE_REFUND_MIN_GAS_PRICE = \"canSetFutureRefundMinGasPrice\";\n\n    function setMinimumGasPriceForFutureRefunds(uint256 _minimumGasPriceForFutureRefunds) public {\n        require(registry.hasAttribute(msg.sender, CAN_SET_FUTURE_REFUND_MIN_GAS_PRICE));\n        minimumGasPriceForFutureRefunds = _minimumGasPriceForFutureRefunds;\n    }\n\n    function balanceOf(address _who) public view returns (uint256) {\n        return _getBalance(_who);\n    }\n    function _getBalance(address _who) internal view returns (uint256 value) {\n        return _balanceOf[_who];\n    }\n    function _setBalance(address _who, uint256 _value) internal {\n        _balanceOf[_who] = _value;\n    }\n    function allowance(address _who, address _spender) public view returns (uint256) {\n        return _getAllowance(_who, _spender);\n    }\n    function _getAllowance(address _who, address _spender) internal view returns (uint256 value) {\n        return _allowance[_who][_spender];\n    }\n    function transfer(address /*_to*/, uint256 /*_value*/) public returns (bool) {\n        revert(\"Token Paused\");\n    }\n\n    function transferFrom(address /*_from*/, address /*_to*/, uint256 /*_value*/) public returns (bool) {\n        revert(\"Token Paused\");\n    }\n\n    function burn(uint256 /*_value*/) public {\n        revert(\"Token Paused\");\n    }\n\n    function mint(address /*_to*/, uint256 /*_value*/) public onlyOwner {\n        revert(\"Token Paused\");\n    }\n    \n    function approve(address /*_spender*/, uint256 /*_value*/) public returns (bool) {\n        revert(\"Token Paused\");\n    }\n\n    function increaseApproval(address /*_spender*/, uint /*_addedValue*/) public returns (bool) {\n        revert(\"Token Paused\");\n    }\n    function decreaseApproval(address /*_spender*/, uint /*_subtractedValue*/) public returns (bool) {\n        revert(\"Token Paused\");\n    }\n    function paused() public pure returns (bool) {\n        return true;\n    }\n    function setRegistry(Registry _registry) public onlyOwner {\n        registry = _registry;\n        emit SetRegistry(registry);\n    }\n\n    modifier onlyRegistry {\n      require(msg.sender == address(registry));\n      _;\n    }\n\n    function syncAttributeValue(address _who, bytes32 _attribute, uint256 _value) public onlyRegistry {\n        attributes[_attribute][_who] = _value;\n    }\n\n    bytes32 constant IS_BLACKLISTED = \"isBlacklisted\";\n    function wipeBlacklistedAccount(address _account) public onlyOwner {\n        require(attributes[IS_BLACKLISTED][_account] != 0, \"_account is not blacklisted\");\n        uint256 oldValue = _getBalance(_account);\n        _setBalance(_account, 0);\n        totalSupply_ = totalSupply_.sub(oldValue);\n        emit WipeBlacklistedAccount(_account, oldValue);\n        emit Transfer(_account, address(0), oldValue);\n    }\n\n}\n\n/** @title PausedDelegateERC20\nAccept forwarding delegation calls from the old TrueUSD (V1) contract. This way the all the ERC20\nfunctions in the old contract still works (except Burn). \n*/\ncontract PausedDelegateERC20 is PausedToken {\n\n    address public constant DELEGATE_FROM = 0x8dd5fbCe2F6a956C3022bA3663759011Dd51e73E;\n    \n    modifier onlyDelegateFrom() {\n        require(msg.sender == DELEGATE_FROM);\n        _;\n    }\n\n    function delegateTotalSupply() public view returns (uint256) {\n        return totalSupply();\n    }\n\n    function delegateBalanceOf(address who) public view returns (uint256) {\n        return balanceOf(who);\n    }\n\n    function delegateTransfer(address /*to*/, uint256 /*value*/, address /*origSender*/) public onlyDelegateFrom returns (bool) {\n        revert(\"Token Paused\");\n    }\n\n    function delegateAllowance(address owner, address spender) public view returns (uint256) {\n        return _getAllowance(owner, spender);\n    }\n\n    function delegateTransferFrom(address /*from*/, address /*to*/, uint256 /*value*/, address /*origSender*/) public onlyDelegateFrom returns (bool) {\n        revert(\"Token Paused\");\n    }\n\n    function delegateApprove(address /*spender*/, uint256 /*value*/, address /*origSender*/) public onlyDelegateFrom returns (bool) {\n        revert(\"Token Paused\");\n    }\n\n    function delegateIncreaseApproval(address /*spender*/, uint /*addedValue*/, address /*origSender*/) public onlyDelegateFrom returns (bool) {\n        revert(\"Token Paused\");\n    }\n\n    function delegateDecreaseApproval(address /*spender*/, uint /*subtractedValue*/, address /*origSender*/) public onlyDelegateFrom returns (bool) {\n        revert(\"Token Paused\");\n    }\n}\n\n// File: contracts/utilities/PausedCurrencies.sol\n\ncontract PausedTrueUSD is PausedDelegateERC20 {\n    function name() public pure returns (string) {\n        return \"TrueUSD\";\n    }\n\n    function symbol() public pure returns (string) {\n        return \"TUSD\";\n    }\n}\n\ncontract PausedAUD is PausedToken {\n    function name() public pure returns (string) {\n        return \"TrueAUD\";\n    }\n\n    function symbol() public pure returns (string) {\n        return \"TAUD\";\n    }\n}\n\ncontract PausedGBP is PausedToken {\n    function name() public pure returns (string) {\n        return \"TrueGBP\";\n    }\n\n    function symbol() public pure returns (string) {\n        return \"TGBP\";\n    }\n}\n\ncontract PausedCAD is PausedToken {\n    function name() public pure returns (string) {\n        return \"TrueCAD\";\n    }\n\n    function symbol() public pure returns (string) {\n        return \"TCAD\";\n    }\n}",
  "bytecode": ""
}