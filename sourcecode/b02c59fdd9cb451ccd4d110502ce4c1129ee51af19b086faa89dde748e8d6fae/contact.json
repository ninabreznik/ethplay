{
  "address": "0x9554efa1669014c25070bc23c2df262825704228",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ReplaySafeSplit",
  "compilerVersion": "v0.3.5-2016-07-19-427deb4",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2016-07-21\n*/\n\ncontract AmIOnTheFork {\n    bool public forked = false;\n    address constant darkDAO = 0x304a554a310c7e546dfe434669c62820b7d83490;\n    // Check the fork condition during creation of the contract.\n    // This function should be called between block 1920000 and 1921200.\n    // Approximately between 2016-07-20 12:00:00 UTC and 2016-07-20 17:00:00 UTC.\n    // After that the status will be locked in.\n    function update() {\n        if (block.number >= 1920000 && block.number <= 1921200) {\n            forked = darkDAO.balance < 3600000 ether;\n        }\n    }\n    function() {\n        throw;\n    }\n}\ncontract ReplaySafeSplit {\n    // Fork oracle to use\n    AmIOnTheFork amIOnTheFork = AmIOnTheFork(0x2bd2326c993dfaef84f696526064ff22eba5b362);\n\n    // Splits the funds into 2 addresses\n    function split(address targetFork, address targetNoFork) returns(bool) {\n        if (amIOnTheFork.forked() && targetFork.send(msg.value)) {\n            return true;\n        } else if (!amIOnTheFork.forked() && targetNoFork.send(msg.value)) {\n            return true;\n        }\n        throw;\n    }\n\n    // Reject value transfers.\n    function() {\n        throw;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"targetFork\",\"type\":\"address\"},{\"name\":\"targetNoFork\",\"type\":\"address\"}],\"name\":\"split\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"}]",
  "bytecode": "6060604052732bd2326c993dfaef84f696526064ff22eba5b362600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff0219169083021790555061023e806100516000396000f36060604052361561003d576000357c0100000000000000000000000000000000000000000000000000000000900480630f2c93291461004a5761003d565b6100485b610002565b565b005b6100696004808035906020019091908035906020019091905050610081565b60405180821515815260200191505060405180910390f35b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166316c72721604051817c01000000000000000000000000000000000000000000000000000000000281526004018090506020604051808303816000876161da5a03f1156100025750505060405180519060200150801561014a57508273ffffffffffffffffffffffffffffffffffffffff16600034604051809050600060405180830381858888f193505050505b1561015c576001905061023856610233565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166316c72721604051817c01000000000000000000000000000000000000000000000000000000000281526004018090506020604051808303816000876161da5a03f115610002575050506040518051906020015015801561022457508173ffffffffffffffffffffffffffffffffffffffff16600034604051809050600060405180830381858888f193505050505b156102325760019050610238565b5b610002565b9291505056"
}