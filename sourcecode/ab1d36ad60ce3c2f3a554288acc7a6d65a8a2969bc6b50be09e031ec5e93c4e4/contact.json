{
  "address": "0xa8b60c9b7054782f46931e35e7012037a574ecee",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GeneralTransferManagerFactory",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-01\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title Transfer Manager module for core transfer validation functionality\n */\ncontract GeneralTransferManagerStorage {\n\n    //Address from which issuances come\n    address public issuanceAddress = address(0);\n\n    //Address which can sign whitelist changes\n    address public signingAddress = address(0);\n\n    bytes32 public constant WHITELIST = \"WHITELIST\";\n    bytes32 public constant FLAGS = \"FLAGS\";\n\n    //from and to timestamps that an investor can send / receive tokens respectively\n    struct TimeRestriction {\n        //the moment when the sale lockup period ends and the investor can freely sell or transfer away their tokens\n        uint64 canSendAfter;\n        //the moment when the purchase lockup period ends and the investor can freely purchase or receive from others\n        uint64 canReceiveAfter;\n        uint64 expiryTime;\n        uint8 canBuyFromSTO;\n        uint8 added;\n    }\n\n    // Allows all TimeRestrictions to be offset\n    struct Defaults {\n        uint64 canSendAfter;\n        uint64 canReceiveAfter;\n    }\n\n    // Offset to be applied to all timings (except KYC expiry)\n    Defaults public defaults;\n\n    // List of all addresses that have been added to the GTM at some point\n    address[] public investors;\n\n    // An address can only send / receive tokens once their corresponding uint256 > block.number\n    // (unless allowAllTransfers == true or allowAllWhitelistTransfers == true)\n    mapping (address => TimeRestriction) public whitelist;\n    // Map of used nonces by customer\n    mapping(address => mapping(uint256 => bool)) public nonceMap;\n\n    //If true, there are no transfer restrictions, for any addresses\n    bool public allowAllTransfers = false;\n    //If true, time lock is ignored for transfers (address must still be on whitelist)\n    bool public allowAllWhitelistTransfers = false;\n    //If true, time lock is ignored for issuances (address must still be on whitelist)\n    bool public allowAllWhitelistIssuances = true;\n    //If true, time lock is ignored for burn transactions\n    bool public allowAllBurnTransfers = false;\n\n}\n\n/**\n * @title Proxy\n * @dev Gives the possibility to delegate any call to a foreign implementation.\n */\ncontract Proxy {\n\n    /**\n    * @dev Tells the address of the implementation where every call will be delegated.\n    * @return address of the implementation to which it will be delegated\n    */\n    function _implementation() internal view returns (address);\n\n    /**\n    * @dev Fallback function.\n    * Implemented entirely in `_fallback`.\n    */\n    function _fallback() internal {\n        _delegate(_implementation());\n    }\n\n    /**\n    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\n    * This function will return whatever the implementation call returns\n    */\n    function _delegate(address implementation) internal {\n        /*solium-disable-next-line security/no-inline-assembly*/\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize)\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize)\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 { revert(0, returndatasize) }\n            default { return(0, returndatasize) }\n        }\n    }\n\n    function () public payable {\n        _fallback();\n    }\n}\n\n/**\n * @title OwnedProxy\n * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\n */\ncontract OwnedProxy is Proxy {\n\n    // Owner of the contract\n    address private __owner;\n\n    // Address of the current implementation\n    address internal __implementation;\n\n    /**\n    * @dev Event to show ownership has been transferred\n    * @param _previousOwner representing the address of the previous owner\n    * @param _newOwner representing the address of the new owner\n    */\n    event ProxyOwnershipTransferred(address _previousOwner, address _newOwner);\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier ifOwner() {\n        if (msg.sender == _owner()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n    * @dev the constructor sets the original owner of the contract to the sender account.\n    */\n    constructor() public {\n        _setOwner(msg.sender);\n    }\n\n    /**\n    * @dev Tells the address of the owner\n    * @return the address of the owner\n    */\n    function _owner() internal view returns (address) {\n        return __owner;\n    }\n\n    /**\n    * @dev Sets the address of the owner\n    */\n    function _setOwner(address _newOwner) internal {\n        require(_newOwner != address(0), \"Address should not be 0x\");\n        __owner = _newOwner;\n    }\n\n    /**\n    * @notice Internal function to provide the address of the implementation contract\n    */\n    function _implementation() internal view returns (address) {\n        return __implementation;\n    }\n\n    /**\n    * @dev Tells the address of the proxy owner\n    * @return the address of the proxy owner\n    */\n    function proxyOwner() external ifOwner returns (address) {\n        return _owner();\n    }\n\n    /**\n    * @dev Tells the address of the current implementation\n    * @return address of the current implementation\n    */\n    function implementation() external ifOwner returns (address) {\n        return _implementation();\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param _newOwner The address to transfer ownership to.\n    */\n    function transferProxyOwnership(address _newOwner) external ifOwner {\n        require(_newOwner != address(0), \"Address should not be 0x\");\n        emit ProxyOwnershipTransferred(_owner(), _newOwner);\n        _setOwner(_newOwner);\n    }\n\n}\n\n/**\n * @title Utility contract to allow pausing and unpausing of certain functions\n */\ncontract Pausable {\n\n    event Pause(uint256 _timestammp);\n    event Unpause(uint256 _timestamp);\n\n    bool public paused = false;\n\n    /**\n    * @notice Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused, \"Contract is paused\");\n        _;\n    }\n\n    /**\n    * @notice Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused, \"Contract is not paused\");\n        _;\n    }\n\n   /**\n    * @notice Called by the owner to pause, triggers stopped state\n    */\n    function _pause() internal whenNotPaused {\n        paused = true;\n        /*solium-disable-next-line security/no-block-members*/\n        emit Pause(now);\n    }\n\n    /**\n    * @notice Called by the owner to unpause, returns to normal state\n    */\n    function _unpause() internal whenPaused {\n        paused = false;\n        /*solium-disable-next-line security/no-block-members*/\n        emit Unpause(now);\n    }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n    function transfer(address _to, uint256 _value) external returns (bool);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n    function approve(address _spender, uint256 _value) external returns (bool);\n    function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool);\n    function increaseApproval(address _spender, uint _addedValue) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Storage for Module contract\n * @notice Contract is abstract\n */\ncontract ModuleStorage {\n\n    /**\n     * @notice Constructor\n     * @param _securityToken Address of the security token\n     * @param _polyAddress Address of the polytoken\n     */\n    constructor (address _securityToken, address _polyAddress) public {\n        securityToken = _securityToken;\n        factory = msg.sender;\n        polyToken = IERC20(_polyAddress);\n    }\n    \n    address public factory;\n\n    address public securityToken;\n\n    bytes32 public constant FEE_ADMIN = \"FEE_ADMIN\";\n\n    IERC20 public polyToken;\n\n}\n\n/**\n * @title Transfer Manager module for core transfer validation functionality\n */\ncontract GeneralTransferManagerProxy is GeneralTransferManagerStorage, ModuleStorage, Pausable, OwnedProxy {\n\n    /**\n    * @notice Constructor\n    * @param _securityToken Address of the security token\n    * @param _polyAddress Address of the polytoken\n    * @param _implementation representing the address of the new implementation to be set\n    */\n    constructor (address _securityToken, address _polyAddress, address _implementation)\n    public\n    ModuleStorage(_securityToken, _polyAddress)\n    {\n        require(\n            _implementation != address(0),\n            \"Implementation address should not be 0x\"\n        );\n        __implementation = _implementation;\n    }\n\n}\n\n/**\n * @title Interface that every module factory contract should implement\n */\ninterface IModuleFactory {\n\n    event ChangeFactorySetupFee(uint256 _oldSetupCost, uint256 _newSetupCost, address _moduleFactory);\n    event ChangeFactoryUsageFee(uint256 _oldUsageCost, uint256 _newUsageCost, address _moduleFactory);\n    event ChangeFactorySubscriptionFee(uint256 _oldSubscriptionCost, uint256 _newMonthlySubscriptionCost, address _moduleFactory);\n    event GenerateModuleFromFactory(\n        address _module,\n        bytes32 indexed _moduleName,\n        address indexed _moduleFactory,\n        address _creator,\n        uint256 _setupCost,\n        uint256 _timestamp\n    );\n    event ChangeSTVersionBound(string _boundType, uint8 _major, uint8 _minor, uint8 _patch);\n\n    //Should create an instance of the Module, or throw\n    function deploy(bytes _data) external returns(address);\n\n    /**\n     * @notice Type of the Module factory\n     */\n    function getTypes() external view returns(uint8[]);\n\n    /**\n     * @notice Get the name of the Module\n     */\n    function getName() external view returns(bytes32);\n\n    /**\n     * @notice Returns the instructions associated with the module\n     */\n    function getInstructions() external view returns (string);\n\n    /**\n     * @notice Get the tags related to the module factory\n     */\n    function getTags() external view returns (bytes32[]);\n\n    /**\n     * @notice Used to change the setup fee\n     * @param _newSetupCost New setup fee\n     */\n    function changeFactorySetupFee(uint256 _newSetupCost) external;\n\n    /**\n     * @notice Used to change the usage fee\n     * @param _newUsageCost New usage fee\n     */\n    function changeFactoryUsageFee(uint256 _newUsageCost) external;\n\n    /**\n     * @notice Used to change the subscription fee\n     * @param _newSubscriptionCost New subscription fee\n     */\n    function changeFactorySubscriptionFee(uint256 _newSubscriptionCost) external;\n\n    /**\n     * @notice Function use to change the lower and upper bound of the compatible version st\n     * @param _boundType Type of bound\n     * @param _newVersion New version array\n     */\n    function changeSTVersionBounds(string _boundType, uint8[] _newVersion) external;\n\n   /**\n     * @notice Get the setup cost of the module\n     */\n    function getSetupCost() external view returns (uint256);\n\n    /**\n     * @notice Used to get the lower bound\n     * @return Lower bound\n     */\n    function getLowerSTVersionBounds() external view returns(uint8[]);\n\n     /**\n     * @notice Used to get the upper bound\n     * @return Upper bound\n     */\n    function getUpperSTVersionBounds() external view returns(uint8[]);\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title Helper library use to compare or validate the semantic versions\n */\n\nlibrary VersionUtils {\n\n    /**\n     * @notice This function is used to validate the version submitted\n     * @param _current Array holds the present version of ST\n     * @param _new Array holds the latest version of the ST\n     * @return bool\n     */\n    function isValidVersion(uint8[] _current, uint8[] _new) internal pure returns(bool) {\n        bool[] memory _temp = new bool[](_current.length);\n        uint8 counter = 0;\n        for (uint8 i = 0; i < _current.length; i++) {\n            if (_current[i] < _new[i])\n                _temp[i] = true;\n            else\n                _temp[i] = false;\n        }\n\n        for (i = 0; i < _current.length; i++) {\n            if (i == 0) {\n                if (_current[i] <= _new[i])\n                    if(_temp[0]) {\n                        counter = counter + 3;\n                        break;\n                    } else\n                        counter++;\n                else\n                    return false;\n            } else {\n                if (_temp[i-1])\n                    counter++;\n                else if (_current[i] <= _new[i])\n                    counter++;\n                else\n                    return false;\n            }\n        }\n        if (counter == _current.length)\n            return true;\n    }\n\n    /**\n     * @notice Used to compare the lower bound with the latest version\n     * @param _version1 Array holds the lower bound of the version\n     * @param _version2 Array holds the latest version of the ST\n     * @return bool\n     */\n    function compareLowerBound(uint8[] _version1, uint8[] _version2) internal pure returns(bool) {\n        require(_version1.length == _version2.length, \"Input length mismatch\");\n        uint counter = 0;\n        for (uint8 j = 0; j < _version1.length; j++) {\n            if (_version1[j] == 0)\n                counter ++;\n        }\n        if (counter != _version1.length) {\n            counter = 0;\n            for (uint8 i = 0; i < _version1.length; i++) {\n                if (_version2[i] > _version1[i])\n                    return true;\n                else if (_version2[i] < _version1[i])\n                    return false;\n                else\n                    counter++;\n            }\n            if (counter == _version1.length - 1)\n                return true;\n            else\n                return false;\n        } else\n            return true;\n    }\n\n    /**\n     * @notice Used to compare the upper bound with the latest version\n     * @param _version1 Array holds the upper bound of the version\n     * @param _version2 Array holds the latest version of the ST\n     * @return bool\n     */\n    function compareUpperBound(uint8[] _version1, uint8[] _version2) internal pure returns(bool) {\n        require(_version1.length == _version2.length, \"Input length mismatch\");\n        uint counter = 0;\n        for (uint8 j = 0; j < _version1.length; j++) {\n            if (_version1[j] == 0)\n                counter ++;\n        }\n        if (counter != _version1.length) {\n            counter = 0;\n            for (uint8 i = 0; i < _version1.length; i++) {\n                if (_version1[i] > _version2[i])\n                    return true;\n                else if (_version1[i] < _version2[i])\n                    return false;\n                else\n                    counter++;\n            }\n            if (counter == _version1.length - 1)\n                return true;\n            else\n                return false;\n        } else\n            return true;\n    }\n\n\n    /**\n     * @notice Used to pack the uint8[] array data into uint24 value\n     * @param _major Major version\n     * @param _minor Minor version\n     * @param _patch Patch version\n     */\n    function pack(uint8 _major, uint8 _minor, uint8 _patch) internal pure returns(uint24) {\n        return (uint24(_major) << 16) | (uint24(_minor) << 8) | uint24(_patch);\n    }\n\n    /**\n     * @notice Used to convert packed data into uint8 array\n     * @param _packedVersion Packed data\n     */\n    function unpack(uint24 _packedVersion) internal pure returns (uint8[]) {\n        uint8[] memory _unpackVersion = new uint8[](3);\n        _unpackVersion[0] = uint8(_packedVersion >> 16);\n        _unpackVersion[1] = uint8(_packedVersion >> 8);\n        _unpackVersion[2] = uint8(_packedVersion);\n        return _unpackVersion;\n    }\n\n\n}\n\n/**\n * @title Interface that any module factory contract should implement\n * @notice Contract is abstract\n */\ncontract ModuleFactory is IModuleFactory, Ownable {\n\n    IERC20 public polyToken;\n    uint256 public usageCost;\n    uint256 public monthlySubscriptionCost;\n\n    uint256 public setupCost;\n    string public description;\n    string public version;\n    bytes32 public name;\n    string public title;\n\n    // @notice Allow only two variables to be stored\n    // 1. lowerBound \n    // 2. upperBound\n    // @dev (0.0.0 will act as the wildcard) \n    // @dev uint24 consists packed value of uint8 _major, uint8 _minor, uint8 _patch\n    mapping(string => uint24) compatibleSTVersionRange;\n\n    /**\n     * @notice Constructor\n     * @param _polyAddress Address of the polytoken\n     */\n    constructor (address _polyAddress, uint256 _setupCost, uint256 _usageCost, uint256 _subscriptionCost) public {\n        polyToken = IERC20(_polyAddress);\n        setupCost = _setupCost;\n        usageCost = _usageCost;\n        monthlySubscriptionCost = _subscriptionCost;\n    }\n\n    /**\n     * @notice Used to change the fee of the setup cost\n     * @param _newSetupCost new setup cost\n     */\n    function changeFactorySetupFee(uint256 _newSetupCost) public onlyOwner {\n        emit ChangeFactorySetupFee(setupCost, _newSetupCost, address(this));\n        setupCost = _newSetupCost;\n    }\n\n    /**\n     * @notice Used to change the fee of the usage cost\n     * @param _newUsageCost new usage cost\n     */\n    function changeFactoryUsageFee(uint256 _newUsageCost) public onlyOwner {\n        emit ChangeFactoryUsageFee(usageCost, _newUsageCost, address(this));\n        usageCost = _newUsageCost;\n    }\n\n    /**\n     * @notice Used to change the fee of the subscription cost\n     * @param _newSubscriptionCost new subscription cost\n     */\n    function changeFactorySubscriptionFee(uint256 _newSubscriptionCost) public onlyOwner {\n        emit ChangeFactorySubscriptionFee(monthlySubscriptionCost, _newSubscriptionCost, address(this));\n        monthlySubscriptionCost = _newSubscriptionCost;\n\n    }\n\n    /**\n     * @notice Updates the title of the ModuleFactory\n     * @param _newTitle New Title that will replace the old one.\n     */\n    function changeTitle(string _newTitle) public onlyOwner {\n        require(bytes(_newTitle).length > 0, \"Invalid title\");\n        title = _newTitle;\n    }\n\n    /**\n     * @notice Updates the description of the ModuleFactory\n     * @param _newDesc New description that will replace the old one.\n     */\n    function changeDescription(string _newDesc) public onlyOwner {\n        require(bytes(_newDesc).length > 0, \"Invalid description\");\n        description = _newDesc;\n    }\n\n    /**\n     * @notice Updates the name of the ModuleFactory\n     * @param _newName New name that will replace the old one.\n     */\n    function changeName(bytes32 _newName) public onlyOwner {\n        require(_newName != bytes32(0),\"Invalid name\");\n        name = _newName;\n    }\n\n    /**\n     * @notice Updates the version of the ModuleFactory\n     * @param _newVersion New name that will replace the old one.\n     */\n    function changeVersion(string _newVersion) public onlyOwner {\n        require(bytes(_newVersion).length > 0, \"Invalid version\");\n        version = _newVersion;\n    }\n\n    /**\n     * @notice Function use to change the lower and upper bound of the compatible version st\n     * @param _boundType Type of bound\n     * @param _newVersion new version array\n     */\n    function changeSTVersionBounds(string _boundType, uint8[] _newVersion) external onlyOwner {\n        require(\n            keccak256(abi.encodePacked(_boundType)) == keccak256(abi.encodePacked(\"lowerBound\")) ||\n            keccak256(abi.encodePacked(_boundType)) == keccak256(abi.encodePacked(\"upperBound\")),\n            \"Must be a valid bound type\"\n        );\n        require(_newVersion.length == 3);\n        if (compatibleSTVersionRange[_boundType] != uint24(0)) { \n            uint8[] memory _currentVersion = VersionUtils.unpack(compatibleSTVersionRange[_boundType]);\n            require(VersionUtils.isValidVersion(_currentVersion, _newVersion), \"Failed because of in-valid version\");\n        }\n        compatibleSTVersionRange[_boundType] = VersionUtils.pack(_newVersion[0], _newVersion[1], _newVersion[2]);\n        emit ChangeSTVersionBound(_boundType, _newVersion[0], _newVersion[1], _newVersion[2]);\n    }\n\n    /**\n     * @notice Used to get the lower bound\n     * @return lower bound\n     */\n    function getLowerSTVersionBounds() external view returns(uint8[]) {\n        return VersionUtils.unpack(compatibleSTVersionRange[\"lowerBound\"]);\n    }\n\n    /**\n     * @notice Used to get the upper bound\n     * @return upper bound\n     */\n    function getUpperSTVersionBounds() external view returns(uint8[]) {\n        return VersionUtils.unpack(compatibleSTVersionRange[\"upperBound\"]);\n    }\n\n    /**\n     * @notice Get the setup cost of the module\n     */\n    function getSetupCost() external view returns (uint256) {\n        return setupCost;\n    }\n\n   /**\n    * @notice Get the name of the Module\n    */\n    function getName() public view returns(bytes32) {\n        return name;\n    }\n\n}\n\n/**\n * @title Factory for deploying GeneralTransferManager module\n */\ncontract GeneralTransferManagerFactory is ModuleFactory {\n\n    address public logicContract;\n\n    /**\n     * @notice Constructor\n     * @param _polyAddress Address of the polytoken\n     * @param _setupCost Setup cost of the module\n     * @param _usageCost Usage cost of the module\n     * @param _subscriptionCost Subscription cost of the module\n     * @param _logicContract Contract address that contains the logic related to `description`\n     */\n    constructor (address _polyAddress, uint256 _setupCost, uint256 _usageCost, uint256 _subscriptionCost, address _logicContract) public\n    ModuleFactory(_polyAddress, _setupCost, _usageCost, _subscriptionCost)\n    {\n        require(_logicContract != address(0), \"Invalid logic contract\");\n        version = \"2.1.0\";\n        name = \"GeneralTransferManager\";\n        title = \"General Transfer Manager\";\n        description = \"Manage transfers using a time based whitelist\";\n        compatibleSTVersionRange[\"lowerBound\"] = VersionUtils.pack(uint8(0), uint8(0), uint8(0));\n        compatibleSTVersionRange[\"upperBound\"] = VersionUtils.pack(uint8(0), uint8(0), uint8(0));\n        logicContract = _logicContract;\n    }\n\n\n     /**\n     * @notice Used to launch the Module with the help of factory\n     * @return address Contract address of the Module\n     */\n    function deploy(bytes /* _data */) external returns(address) {\n        if (setupCost > 0)\n            require(polyToken.transferFrom(msg.sender, owner, setupCost), \"Failed transferFrom because of sufficent Allowance is not provided\");\n        address generalTransferManager = new GeneralTransferManagerProxy(msg.sender, address(polyToken), logicContract);\n        /*solium-disable-next-line security/no-block-members*/\n        emit GenerateModuleFromFactory(address(generalTransferManager), getName(), address(this), msg.sender, setupCost, now);\n        return address(generalTransferManager);\n    }\n\n\n    /**\n     * @notice Type of the Module factory\n     */\n    function getTypes() external view returns(uint8[]) {\n        uint8[] memory res = new uint8[](1);\n        res[0] = 2;\n        return res;\n    }\n\n    /**\n     * @notice Returns the instructions associated with the module\n     */\n    function getInstructions() external view returns(string) {\n        /*solium-disable-next-line max-len*/\n        return \"Allows an issuer to maintain a time based whitelist of authorised token holders.Addresses are added via modifyWhitelist and take a fromTime (the time from which they can send tokens) and a toTime (the time from which they can receive tokens). There are additional flags, allowAllWhitelistIssuances, allowAllWhitelistTransfers & allowAllTransfers which allow you to set corresponding contract level behaviour. Init function takes no parameters.\";\n    }\n\n    /**\n     * @notice Get the tags related to the module factory\n     */\n    function getTags() public view returns(bytes32[]) {\n        bytes32[] memory availableTags = new bytes32[](2);\n        availableTags[0] = \"General\";\n        availableTags[1] = \"Transfer Restriction\";\n        return availableTags;\n    }\n\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monthlySubscriptionCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTitle\",\"type\":\"string\"}],\"name\":\"changeTitle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSubscriptionCost\",\"type\":\"uint256\"}],\"name\":\"changeFactorySubscriptionFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"title\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSetupCost\",\"type\":\"uint256\"}],\"name\":\"changeFactorySetupFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newVersion\",\"type\":\"string\"}],\"name\":\"changeVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"polyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"setupCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLowerSTVersionBounds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newName\",\"type\":\"bytes32\"}],\"name\":\"changeName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTags\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSetupCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUsageCost\",\"type\":\"uint256\"}],\"name\":\"changeFactoryUsageFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"logicContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usageCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInstructions\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDesc\",\"type\":\"string\"}],\"name\":\"changeDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpperSTVersionBounds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_boundType\",\"type\":\"string\"},{\"name\":\"_newVersion\",\"type\":\"uint8[]\"}],\"name\":\"changeSTVersionBounds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_polyAddress\",\"type\":\"address\"},{\"name\":\"_setupCost\",\"type\":\"uint256\"},{\"name\":\"_usageCost\",\"type\":\"uint256\"},{\"name\":\"_subscriptionCost\",\"type\":\"uint256\"},{\"name\":\"_logicContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldSetupCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newSetupCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_moduleFactory\",\"type\":\"address\"}],\"name\":\"ChangeFactorySetupFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldUsageCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newUsageCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_moduleFactory\",\"type\":\"address\"}],\"name\":\"ChangeFactoryUsageFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldSubscriptionCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newMonthlySubscriptionCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_moduleFactory\",\"type\":\"address\"}],\"name\":\"ChangeFactorySubscriptionFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_module\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_moduleName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_moduleFactory\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_setupCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"GenerateModuleFromFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_boundType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_major\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_minor\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_patch\",\"type\":\"uint8\"}],\"name\":\"ChangeSTVersionBound\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b5060405160a080620029128339810160409081528151602083015191830151606084015160809094015160008054600160a060020a0319908116331790915560018054600160a060020a03808716919093161790556004859055600283905560038690559294919281161515620000e957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e76616c6964206c6f67696320636f6e747261637400000000000000000000604482015290519081900360640190fd5b6040805180820190915260058082527f322e312e3000000000000000000000000000000000000000000000000000000060209092019182526200012f916006916200032e565b507f47656e6572616c5472616e736665724d616e61676572000000000000000000006007556040805180820190915260188082527f47656e6572616c205472616e73666572204d616e61676572000000000000000060209092019182526200019a916008916200032e565b5060408051606081018252602d8082527f4d616e616765207472616e7366657273207573696e6720612074696d65206261602083019081527f7365642077686974656c69737400000000000000000000000000000000000000929093019190915262000209916005916200032e565b5062000226600080806401000000006200180f6200031382021704565b604080517f6c6f776572426f756e640000000000000000000000000000000000000000000081526009600a820152905190819003602a019020805462ffffff9290921662ffffff1990921691909117905562000293600080806401000000006200180f6200031382021704565b604080517f7570706572426f756e640000000000000000000000000000000000000000000081526009600a80830191909152915190819003602a019020805462ffffff9390931662ffffff19909316929092179091558054600160a060020a03909216600160a060020a031990921691909117905550620003d392505050565b60ff9081169181166101000292166201000002919091171790565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200037157805160ff1916838001178555620003a1565b82800160010185558215620003a1579182015b82811115620003a157825182559160200191906001019062000384565b50620003af929150620003b3565b5090565b620003d091905b80821115620003af5760008155600101620003ba565b90565b61252f80620003e36000396000f300608060405260043610620001855763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166277436081146200018a57806306184a2514620001c957806306fdde0314620001f357806317d7de7c146200020b5780632dbe07c714620002235780633ae192bd14620002815780634a79d50c146200029c57806354fd4d50146200032c57806358a191c3146200034457806364bb432c146200035f5780636faa22a514620003bb578063715018a614620003d35780637284e41614620003eb5780637e363ffa14620004035780638677768f146200041b578063898855ed14620004855780638da5cb5b14620004a0578063995d9ab714620004b8578063a5e9d7c914620004d0578063aac67b0514620004e8578063b4579d601462000503578063cc0e97c9146200051b578063d54c47261462000533578063e0d54970146200054b578063e61204131462000563578063f2fde38b14620005bf578063f786299914620005e3578063fb97245614620005fb575b600080fd5b3480156200019757600080fd5b50620001ad60048035602481019101356200062a565b60408051600160a060020a039092168252519081900360200190f35b348015620001d657600080fd5b50620001e162000852565b60408051918252519081900360200190f35b3480156200020057600080fd5b50620001e162000858565b3480156200021857600080fd5b50620001e16200085e565b3480156200023057600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526200027f943694929360249392840191908190840183828082843750949750620008659650505050505050565b005b3480156200028e57600080fd5b506200027f600435620008f0565b348015620002a957600080fd5b50620002b46200094e565b6040805160208082528351818301528351919283929083019185019080838360005b83811015620002f0578181015183820152602001620002d6565b50505050905090810190601f1680156200031e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156200033957600080fd5b50620002b4620009e0565b3480156200035157600080fd5b506200027f60043562000a3e565b3480156200036c57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526200027f94369492936024939284019190819084018382808284375094975062000a9c9650505050505050565b348015620003c857600080fd5b50620001ad62000b23565b348015620003e057600080fd5b506200027f62000b32565b348015620003f857600080fd5b50620002b462000b9f565b3480156200041057600080fd5b50620001e162000bfd565b3480156200042857600080fd5b506200043362000c03565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156200047157818101518382015260200162000457565b505050509050019250505060405180910390f35b3480156200049257600080fd5b506200027f60043562000c55565b348015620004ad57600080fd5b50620001ad62000cca565b348015620004c557600080fd5b506200043362000cd9565b348015620004dd57600080fd5b50620001e162000d7c565b348015620004f557600080fd5b506200027f60043562000d82565b3480156200051057600080fd5b506200043362000de0565b3480156200052857600080fd5b50620001ad62000e2d565b3480156200054057600080fd5b50620001e162000e3c565b3480156200055857600080fd5b50620002b462000e42565b3480156200057057600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526200027f94369492936024939284019190819084018382808284375094975062000e679650505050505050565b348015620005cc57600080fd5b506200027f600160a060020a036004351662000eee565b348015620005f057600080fd5b506200043362000f14565b3480156200060857600080fd5b506200027f602460048035828101929082013591813591820191013562000f61565b600080600060045411156200078d576001546000805460048054604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523393810193909352600160a060020a03938416602484015260448301919091525191909316926323b872dd9260648083019360209390929083900390910190829087803b158015620006bc57600080fd5b505af1158015620006d1573d6000803e3d6000fd5b505050506040513d6020811015620006e857600080fd5b505115156200078d576040805160e560020a62461bcd02815260206004820152604260248201527f4661696c6564207472616e7366657246726f6d2062656361757365206f66207360448201527f7566666963656e7420416c6c6f77616e6365206973206e6f742070726f76696460648201527f6564000000000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600154600a543391600160a060020a039081169116620007ac6200182a565b600160a060020a03938416815291831660208301529091166040808301919091525190819003606001906000f080158015620007ec573d6000803e3d6000fd5b50905030620007fa6200085e565b60045460408051600160a060020a038616815233602082015280820192909252426060830152517fb68b4973fbce93f056103272c1f3f53b607527138d7e323b7b94f7ac169ebf779181900360800190a39392505050565b60035481565b60075481565b6007545b90565b600054600160a060020a031633146200087d57600080fd5b8051600010620008d7576040805160e560020a62461bcd02815260206004820152600d60248201527f496e76616c6964207469746c6500000000000000000000000000000000000000604482015290519081900360640190fd5b8051620008ec9060089060208401906200183b565b5050565b600054600160a060020a031633146200090857600080fd5b60035460408051918252602082018390523082820152517fb14468ff50b0c356f5373be0ef0791de71449aaf8ac5ca096049b7ac79d0b1139181900360600190a1600355565b6008805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015620009d85780601f10620009ac57610100808354040283529160200191620009d8565b820191906000526020600020905b815481529060010190602001808311620009ba57829003601f168201915b505050505081565b6006805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015620009d85780601f10620009ac57610100808354040283529160200191620009d8565b600054600160a060020a0316331462000a5657600080fd5b60045460408051918252602082018390523082820152517f9672983540fb671cd7c0c946255b4dc769a3e557a25ef91ca7c98995c8d694b69181900360600190a1600455565b600054600160a060020a0316331462000ab457600080fd5b805160001062000b0e576040805160e560020a62461bcd02815260206004820152600f60248201527f496e76616c69642076657273696f6e0000000000000000000000000000000000604482015290519081900360640190fd5b8051620008ec9060069060208401906200183b565b600154600160a060020a031681565b600054600160a060020a0316331462000b4a57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6005805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015620009d85780601f10620009ac57610100808354040283529160200191620009d8565b60045481565b604080517f6c6f776572426f756e640000000000000000000000000000000000000000000081526009600a820152905190819003602a0190205460609062000c509062ffffff16620014ba565b905090565b600054600160a060020a0316331462000c6d57600080fd5b80151562000cc5576040805160e560020a62461bcd02815260206004820152600c60248201527f496e76616c6964206e616d650000000000000000000000000000000000000000604482015290519081900360640190fd5b600755565b600054600160a060020a031681565b6040805160028082526060808301845292839291906020830190803883390190505090507f47656e6572616c0000000000000000000000000000000000000000000000000081600081518110151562000d2e57fe5b6020908102909101015280517f5472616e73666572205265737472696374696f6e000000000000000000000000908290600190811062000d6a57fe5b602090810290910101529050805b5090565b60045490565b600054600160a060020a0316331462000d9a57600080fd5b60025460408051918252602082018390523082820152517fc39ec4e85127e00b5b203f9c40814616d5977d8de85e6e0717e5ca4b0896206c9181900360600190a1600255565b60408051600180825281830190925260609182919060208083019080388339019050509050600281600081518110151562000e1757fe5b60ff909216602092830290910190910152905090565b600a54600160a060020a031681565b60025481565b60606101e0604051908101604052806101bb8152602001620023496101bb9139905090565b600054600160a060020a0316331462000e7f57600080fd5b805160001062000ed9576040805160e560020a62461bcd02815260206004820152601360248201527f496e76616c6964206465736372697074696f6e00000000000000000000000000604482015290519081900360640190fd5b8051620008ec9060059060208401906200183b565b600054600160a060020a0316331462000f0657600080fd5b62000f118162001562565b50565b604080517f7570706572426f756e640000000000000000000000000000000000000000000081526009600a820152905190819003602a0190205460609062000c509062ffffff16620014ba565b600054606090600160a060020a0316331462000f7c57600080fd5b60405160200180807f6c6f776572426f756e6400000000000000000000000000000000000000000000815250600a0190506040516020818303038152906040526040518082805190602001908083835b6020831062000fed5780518252601f19909201916020918201910162000fcc565b51815160209384036101000a600019018019909216911617905260405191909301819003812094508993508892019050808383808284378201915050925050506040516020818303038152906040526040518082805190602001908083835b602083106200106d5780518252601f1990920191602091820191016200104c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161480620011ca575060405160200180807f7570706572426f756e6400000000000000000000000000000000000000000000815250600a0190506040516020818303038152906040526040518082805190602001908083835b60208310620011175780518252601f199092019160209182019101620010f6565b51815160209384036101000a600019018019909216911617905260405191909301819003812094508993508892019050808383808284378201915050925050506040516020818303038152906040526040518082805190602001908083835b60208310620011975780518252601f19909201916020918201910162001176565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916145b151562001221576040805160e560020a62461bcd02815260206004820152601a60248201527f4d75737420626520612076616c696420626f756e642074797065000000000000604482015290519081900360640190fd5b600382146200122f57600080fd5b600062ffffff1660098686604051808383808284379091019485525050604051928390036020019092205462ffffff169290921491506200135b905057620012a360098686604051808383808284379091019485525050604051928390036020019092205462ffffff169150620014ba9050565b9050620012de8184848080602002602001604051908101604052809392919081815260200183836020028082843750620015e0945050505050565b15156200135b576040805160e560020a62461bcd02815260206004820152602260248201527f4661696c65642062656361757365206f6620696e2d76616c696420766572736960448201527f6f6e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b620013b1838360008181106200136d57fe5b9050602002013560ff168484600181811015156200138757fe5b9050602002013560ff16858560028181101515620013a157fe5b9050602002013560ff166200180f565b6009868660405180838380828437909101948552505060405192839003602001909220805462ffffff9490941662ffffff1990941693909317909255507f5b67e16edaf7fc70c8d065ea6e70b97ed944d98fe593b04d682216615a3b04db90508585858560008181106200142157fe5b9050602002013560ff168686600181811015156200143b57fe5b9050602002013560ff168787600281811015156200145557fe5b9050602002013560ff1660405180806020018560ff1660ff1681526020018460ff1660ff1681526020018360ff1660ff168152602001828103825287878281815260200192508082843760405192018290039850909650505050505050a15050505050565b6040805160038082526080820190925260609182919060208201838038833950508151919250506201000062ffffff8516049082906000908110620014fb57fe5b60ff909216602092830290910190910152805161010062ffffff85160490829060019081106200152757fe5b60ff90921660209283029091019091015280518390829060029081106200154a57fe5b60ff9092166020928302909101909101529050919050565b600160a060020a03811615156200157857600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60006060600080855160405190808252806020026020018201604052801562001613578160200160208202803883390190505b50925060009150600090505b85518160ff161015620016c757848160ff168151811015156200163e57fe5b9060200190602002015160ff16868260ff168151811015156200165d57fe5b9060200190602002015160ff1610156200169a576001838260ff168151811015156200168557fe5b911515602092830290910190910152620016be565b6000838260ff16815181101515620016ae57fe5b9115156020928302909101909101525b6001016200161f565b5060005b85518160ff161015620017f45760ff811615156200176f57848160ff16815181101515620016f557fe5b9060200190602002015160ff16868260ff168151811015156200171457fe5b6020908102909101015160ff16116200175f578260008151811015156200173757fe5b90602001906020020151156200175357816003019150620017f4565b60019091019062001769565b6000935062001806565b620017eb565b826001820360ff168151811015156200178457fe5b9060200190602002015115620017a057600190910190620017eb565b848160ff16815181101515620017b257fe5b9060200190602002015160ff16868260ff16815181101515620017d157fe5b6020908102909101015160ff16116200175f576001909101905b600101620016cb565b85518260ff1614156200180657600193505b50505092915050565b60ff9081169181166101000292166201000002919091171790565b604051610a7680620018d383390190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200187e57805160ff1916838001178555620018ae565b82800160010185558215620018ae579182015b82811115620018ae57825182559160200191906001019062001891565b5062000d7892620008629250905b8082111562000d785760008155600101620018bc5600608060405260008054600160a060020a03199081169091556001805490911690556006805463ff0000001962ffffff1990911662010000171690556008805460a060020a60ff021916905534801561005657600080fd5b50604051606080610a7683398101604090815281516020830151919092015160078054600160a060020a0319908116600160a060020a0380871691909117909255600680547fffffffffffffffff0000000000000000000000000000000000000000ffffffff16336401000000008181029290921790925560088054909316938616939093179091556100eb916101b0810204565b600160a060020a038116151561018857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f496d706c656d656e746174696f6e20616464726573732073686f756c64206e6f60448201527f7420626520307800000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600a8054600160a060020a031916600160a060020a0392909216919091179055506102499050565b600160a060020a038116151561022757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f416464726573732073686f756c64206e6f742062652030780000000000000000604482015290519081900360640190fd5b60098054600160a060020a031916600160a060020a0392909216919091179055565b61081e806102586000396000f3006080604052600436106101115763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663025313a2811461011b578063144b8afa1461014c5780631bb7cc99146101755780632909a80e1461019c5780633feb5f2b146101b15780635c60da1b146101c95780635c975abb146101de5780636faa22a5146101f35780639728538f146102085780639b19251a1461021d5780639ba0b7c01461027f578063b1dd8111146102a3578063b3e82dc9146102b8578063b3fac8ce146102cd578063b84dfbd2146102e2578063c45a0155146102f7578063d70afa961461030c578063e55d0f8b14610321578063edb7a6fa14610336578063f1739cae14610372575b610119610393565b005b34801561012757600080fd5b506101306103a5565b60408051600160a060020a039092168252519081900360200190f35b34801561015857600080fd5b506101616103e2565b604080519115158252519081900360200190f35b34801561018157600080fd5b5061018a6103f2565b60408051918252519081900360200190f35b3480156101a857600080fd5b50610161610416565b3480156101bd57600080fd5b50610130600435610424565b3480156101d557600080fd5b5061013061044c565b3480156101ea57600080fd5b50610161610477565b3480156101ff57600080fd5b50610130610498565b34801561021457600080fd5b5061018a6104a7565b34801561022957600080fd5b5061023e600160a060020a03600435166104cb565b6040805167ffffffffffffffff96871681529486166020860152929094168383015260ff908116606084015292909216608082015290519081900360a00190f35b34801561028b57600080fd5b50610161600160a060020a036004351660243561054e565b3480156102af57600080fd5b5061016161056e565b3480156102c457600080fd5b50610130610577565b3480156102d957600080fd5b50610130610586565b3480156102ee57600080fd5b50610130610595565b34801561030357600080fd5b506101306105a4565b34801561031857600080fd5b5061018a6105bb565b34801561032d57600080fd5b506101616105df565b34801561034257600080fd5b5061034b6105ee565b6040805167ffffffffffffffff938416815291909216602082015281519081900390910190f35b34801561037e57600080fd5b50610119600160a060020a036004351661060e565b6103a361039e61070a565b610719565b565b60006103af61073d565b600160a060020a031633600160a060020a031614156103d7576103d061073d565b90506103df565b6103df610393565b90565b6006546301000000900460ff1681565b7f57484954454c495354000000000000000000000000000000000000000000000081565b600654610100900460ff1681565b600380548290811061043257fe5b600091825260209091200154600160a060020a0316905081565b600061045661073d565b600160a060020a031633600160a060020a031614156103d7576103d061070a565b60085474010000000000000000000000000000000000000000900460ff1681565b600854600160a060020a031681565b7f464c41475300000000000000000000000000000000000000000000000000000081565b60046020526000908152604090205467ffffffffffffffff808216916801000000000000000081048216917001000000000000000000000000000000008204169060ff7801000000000000000000000000000000000000000000000000820481169179010000000000000000000000000000000000000000000000000090041685565b600560209081526000928352604080842090915290825290205460ff1681565b60065460ff1681565b600154600160a060020a031681565b600054600160a060020a031681565b600754600160a060020a031681565b6006546401000000009004600160a060020a031681565b7f4645455f41444d494e000000000000000000000000000000000000000000000081565b60065462010000900460ff1681565b60025467ffffffffffffffff808216916801000000000000000090041682565b61061661073d565b600160a060020a031633600160a060020a031614156106ff57600160a060020a03811615156106a657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f416464726573732073686f756c64206e6f742062652030780000000000000000604482015290519081900360640190fd5b7f5a3e66efaa1e445ebd894728a69d6959842ea1e97bd79b892797106e270efcd96106cf61073d565b60408051600160a060020a03928316815291841660208301528051918290030190a16106fa8161074c565b610707565b610707610393565b50565b600a54600160a060020a031690565b3660008037600080366000845af43d6000803e808015610738573d6000f35b3d6000fd5b600954600160a060020a031690565b600160a060020a03811615156107c357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f416464726573732073686f756c64206e6f742062652030780000000000000000604482015290519081900360640190fd5b6009805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820f09d04caca627ce03bc51881664dbf6313e7245ec0fc4503273a35e5a126fc790029416c6c6f777320616e2069737375657220746f206d61696e7461696e20612074696d652062617365642077686974656c697374206f6620617574686f726973656420746f6b656e20686f6c646572732e4164647265737365732061726520616464656420766961206d6f6469667957686974656c69737420616e642074616b6520612066726f6d54696d6520287468652074696d652066726f6d20776869636820746865792063616e2073656e6420746f6b656e732920616e64206120746f54696d6520287468652074696d652066726f6d20776869636820746865792063616e207265636569766520746f6b656e73292e20546865726520617265206164646974696f6e616c20666c6167732c20616c6c6f77416c6c57686974656c69737449737375616e6365732c20616c6c6f77416c6c57686974656c6973745472616e7366657273202620616c6c6f77416c6c5472616e736665727320776869636820616c6c6f7720796f7520746f2073657420636f72726573706f6e64696e6720636f6e7472616374206c6576656c206265686176696f75722e20496e69742066756e6374696f6e2074616b6573206e6f20706172616d65746572732ea165627a7a7230582001b2fc90b1b526d5669f1c755d0dde22e2307c716a73203056552f2ec650c6e800290000000000000000000000009992ec3cf6a55b00978cddf2b27bc6882d88d1ec000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fd78b2da4fbc45b0be4179a4025ee92b90c6305b",
  "constructorArguments": "0000000000000000000000009992ec3cf6a55b00978cddf2b27bc6882d88d1ec000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fd78b2da4fbc45b0be4179a4025ee92b90c6305b"
}