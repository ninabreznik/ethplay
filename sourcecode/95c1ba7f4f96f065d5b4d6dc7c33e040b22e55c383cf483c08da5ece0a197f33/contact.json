{
  "address": "0x2b4395084e1068877502ead1ae004094f5a0b88f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "P2PToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-04\n*/\n\npragma solidity ^0.4.24;\n\n/*\n * Creator: Peer 2 Peer Global Network (P2P) \n */\n\n/*\n * Abstract Token Smart Contract\n *\n */\n\n \n /*\n * Safe Math Smart Contract. \n * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n */\n\ncontract SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n\n/**\n * ERC-20 standard token interface, as defined\n * <a href=\"http://github.com/ethereum/EIPs/issues/20\">here</a>.\n */\ncontract Token {\n  \n  function totalSupply() public view returns (uint256 supply);\n  function balanceOf(address _owner)public view returns (uint256 balance);\n  function transfer(address _to, uint256 _value)public returns (bool success);\n  function transferFrom(address _from, address _to, uint256 _value)public returns (bool success);\n  function approve(address _spender, uint256 _value)public returns (bool success);\n  function allowance(address _owner, address _spender)public view returns (uint256 remaining);\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n\n/**\n * Abstract Token Smart Contract that could be used as a base contract for\n * ERC-20 token contracts.\n */\ncontract AbstractToken is Token, SafeMath {\n  /**\n   * Create new Abstract Token contract.\n   */\n constructor() public{\n    // Do nothing\n  }\n  \n  /**\n   * Get number of tokens currently belonging to given owner.\n   *\n   * @param _owner address to get number of tokens currently belonging to the\n   *        owner of\n   * @return number of tokens currently belonging to the owner of given address\n   */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return accounts [_owner];\n  }\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   * accounts [_to] + _value > accounts [_to] for overflow check\n   * which is already in safeMath\n   */\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n    require(_to != address(0));\n    if (accounts [msg.sender] < _value) return false;\n    if (_value > 0 && msg.sender != _to) {\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    emit Transfer (msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   * accounts [_to] + _value > accounts [_to] for overflow check\n   * which is already in safeMath\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public\n  returns (bool success) {\n    require(_to != address(0));\n    if (allowances [_from][msg.sender] < _value) return false;\n    if (accounts [_from] < _value) return false; \n\n    if (_value > 0 && _from != _to) {\n\t  allowances [_from][msg.sender] = safeSub (allowances [_from][msg.sender], _value);\n      accounts [_from] = safeSub (accounts [_from], _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * Allow given spender to transfer given number of tokens from message sender.\n   * @param _spender address to allow the owner of to transfer tokens from message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n   function approve (address _spender, uint256 _value) public returns (bool success) {\n    allowances [msg.sender][_spender] = _value;\n    emit Approval (msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * Tell how many tokens given spender is currently allowed to transfer from\n   * given owner.\n   *\n   * @param _owner address to get number of tokens allowed to be transferred\n   *        from the owner of\n   * @param _spender address to get number of tokens allowed to be transferred\n   *        by the owner of\n   * @return number of tokens given spender is currently allowed to transfer\n   *         from given owner\n   */\n  function allowance(address _owner, address _spender) public view\n  returns (uint256 remaining) {\n    return allowances [_owner][_spender];\n  }\n\n  /**\n   * Mapping from addresses of token holders to the numbers of tokens belonging\n   * to these token holders.\n   */\n  mapping (address => uint256) accounts;\n\n  /**\n   * Mapping from addresses of token holders to the mapping of addresses of\n   * spenders to the allowances set by these token holders to these spenders.\n   */\n  mapping (address => mapping (address => uint256)) private allowances;\n  \n}\n\n\n/**\n * Peer 2 Peer Global Network Smart Contract.\n */\ncontract P2PToken is AbstractToken {\n  /**\n   * Maximum allowed number of tokens in circulation.\n   * tokenSupply = tokensIActuallyWant * (10 ^ decimals)\n   */\n   \n   \n  uint256 constant MAX_TOKEN_COUNT = 100000000 * (10**18);\n   \n  /**\n   * Address of the owner of this smart contract.\n   */\n  address private owner;\n  \n  /**\n   * Burning account list holder\n   */\n  \n  mapping (address => bool) private burningAccount;\n  \n \n  /**\n   * Current number of tokens in circulation.\n   */\n  uint256 tokenCount = 0;\n  \n \n  /**\n   * Create new token smart contract and make msg.sender the\n   * owner of this smart contract.\n   */\n  constructor() public{\n    owner = msg.sender;\n  }\n\n  /**\n   * Get total number of tokens in circulation.\n   *\n   * @return total number of tokens in circulation\n   */\n  function totalSupply() public view returns (uint256 supply) {\n    return tokenCount;\n  }\n\n  string constant public name = \"Peer 2 Peer Global Network\";\n  string constant public symbol = \"P2P\";\n  uint8 constant public decimals = 18;\n  \n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n     return AbstractToken.transfer (_to, _value);\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public\n    returns (bool success) {\n    return AbstractToken.transferFrom (_from, _to, _value);\n  }\n\n   /**\n   * Change how many tokens given spender is allowed to transfer from message\n   * spender.  In order to prevent double spending of allowance,\n   * To change the approve amount you first have to reduce the addresses`\n   * allowance to zero by calling `approve(_spender, 0)` if it is not\n   * already 0 to mitigate the race condition described here:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender address to allow the owner of to transfer tokens from\n   *        message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n  function approve (address _spender, uint256 _value) public\n    returns (bool success) {\n\trequire(allowance (msg.sender, _spender) == 0 || _value == 0);\n    return AbstractToken.approve (_spender, _value);\n  }\n\n  /**\n   * Create _value new tokens and give new created tokens to msg.sender.\n   * Only be called by smart contract owner.\n   *\n   * @param _value number of tokens to create\n   * @return true if tokens were created successfully, false otherwise\n   */\n  function createTokens(uint256 _value) public\n    returns (bool success) {\n    require (msg.sender == owner);\n\n    if (_value > 0) {\n      if (_value > safeSub (MAX_TOKEN_COUNT, tokenCount)) return false;\n\t  \n      accounts [msg.sender] = safeAdd (accounts [msg.sender], _value);\n      tokenCount = safeAdd (tokenCount, _value);\n\t  \n\t  // adding transfer event and _from address as null address\n\t  emit Transfer(address(0), msg.sender, _value);\n\t  \n\t  return true;\n    }\n\t\n\t  return false;\n    \n  }\n  \n  /**\n   * Burning capable account\n   * Only be called by smart contract owner.\n   */\n  function burningCapableAccount(address[] _target) public {\n  \n      require (msg.sender == owner);\n\t  \n\t  for (uint i = 0; i < _target.length; i++) {\n\t\t\tburningAccount[_target[i]] = true;\n        }\n }\n  \n  /**\n   * Burn intended tokens.\n   * Only be called by by burnable addresses.\n   *\n   * @param _value number of tokens to burn\n   * @return true if burnt successfully, false otherwise\n   */\n  \n  function burn(uint256 _value) public returns (bool success) {\n  \n        require(accounts[msg.sender] >= _value); \n\t\t\n\t\trequire(burningAccount[msg.sender]);\n\t\t\n\t\taccounts [msg.sender] = safeSub (accounts [msg.sender], _value);\n\t\t\n        tokenCount = safeSub (tokenCount, _value);\t\n\t\t\n        emit Burn(msg.sender, _value);\n\t\t\n        return true;\n    }\n  \n\n  \n  \n  \n  /**\n   * Set new owner for the smart contract.\n   * Only be called by smart contract owner.\n   *\n   * @param _newOwner address of new owner of the smart contract\n   */\n  function setOwner(address _newOwner) public{\n    require (msg.sender == owner);\n\n    owner = _newOwner;\n  }\n  \n  \n  /*A user is able to unintentionally send tokens to a contract \n  * and if the contract is not prepared to refund them they will get stuck in the contract. \n  * The same issue used to happen for Ether too but new Solidity versions added the payable modifier to\n  * prevent unintended Ether transfers. However, there’s no such mechanism for token transfers.\n  * so the below function is created\n  */\n  \n  function refundTokens(address _token, address _refund, uint256 _value) public {\n    require (msg.sender == owner);\n    require(_token != address(this));\n    AbstractToken token = AbstractToken(_token);\n    token.transfer(_refund, _value);\n    emit RefundTokens(_token, _refund, _value);\n  }\n  \n   /**\n   * Logged when a token is burnt.\n   */  \n  \n  event Burn(address target,uint256 _value);\n\n\n  \n  /**\n   * when accidentally send other tokens are refunded\n   */\n  \n  event RefundTokens(address _token, address _refund, uint256 _value);\n}",
  "bytecode": "6080604052600060045534801561001557600080fd5b5060028054600160a060020a03191633179055610b25806100376000396000f3006080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d4578063095ea7b31461015e57806313af40351461019657806318160ddd146101b957806323b872dd146101e0578063313ce5671461020a57806342966c681461023557806370a082311461024d5780637e1f2bb81461026e57806389519c501461028657806395d89b41146102b0578063a9059cbb146102c5578063dd62ed3e146102e9578063ed361c1714610310575b600080fd5b3480156100e057600080fd5b506100e9610365565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012357818101518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016a57600080fd5b50610182600160a060020a036004351660243561039c565b604080519115158252519081900360200190f35b3480156101a257600080fd5b506101b7600160a060020a03600435166103d0565b005b3480156101c557600080fd5b506101ce610416565b60408051918252519081900360200190f35b3480156101ec57600080fd5b50610182600160a060020a036004358116906024351660443561041c565b34801561021657600080fd5b5061021f610433565b6040805160ff9092168252519081900360200190f35b34801561024157600080fd5b50610182600435610438565b34801561025957600080fd5b506101ce600160a060020a03600435166104f0565b34801561027a57600080fd5b5061018260043561050b565b34801561029257600080fd5b506101b7600160a060020a03600435811690602435166044356105d6565b3480156102bc57600080fd5b506100e96106ef565b3480156102d157600080fd5b50610182600160a060020a0360043516602435610726565b3480156102f557600080fd5b506101ce600160a060020a0360043581169060243516610732565b34801561031c57600080fd5b50604080516020600480358082013583810280860185019096528085526101b79536959394602494938501929182918501908490808284375094975061075d9650505050505050565b60408051808201909152601a81527f506565722032205065657220476c6f62616c204e6574776f726b000000000000602082015281565b60006103a83384610732565b15806103b2575081155b15156103bd57600080fd5b6103c783836107d6565b90505b92915050565b600254600160a060020a031633146103e757600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60045490565b600061042984848461083c565b90505b9392505050565b601281565b3360009081526020819052604081205482111561045457600080fd5b3360009081526003602052604090205460ff16151561047257600080fd5b3360009081526020819052604090205461048c90836109db565b336000908152602081905260409020556004546104a990836109db565b600455604080513381526020810184905281517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5929181900390910190a15060015b919050565b600160a060020a031660009081526020819052604090205490565b600254600090600160a060020a0316331461052557600080fd5b60008211156105ce576105456a52b7d2dcc80cd2e40000006004546109db565b821115610554575060006104eb565b3360009081526020819052604090205461056e90836109ed565b3360009081526020819052604090205560045461058b90836109ed565b60045560408051838152905133916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35060016104eb565b506000919050565b600254600090600160a060020a031633146105f057600080fd5b600160a060020a03841630141561060657600080fd5b50604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152602482018490529151859283169163a9059cbb9160448083019260209291908290030181600087803b15801561067357600080fd5b505af1158015610687573d6000803e3d6000fd5b505050506040513d602081101561069d57600080fd5b505060408051600160a060020a0380871682528516602082015280820184905290517ffab5e7a27e02736e52f60776d307340051d8bc15aee0ef211c7a4aa2a8cdc1549181900360600190a150505050565b60408051808201909152600381527f5032500000000000000000000000000000000000000000000000000000000000602082015281565b60006103c783836109fc565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600254600090600160a060020a0316331461077757600080fd5b5060005b81518110156107d257600160036000848481518110151561079857fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff191691151591909117905560010161077b565b5050565b336000818152600160209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6000600160a060020a038316151561085357600080fd5b600160a060020a03841660009081526001602090815260408083203384529091529020548211156108865750600061042c565b600160a060020a0384166000908152602081905260409020548211156108ae5750600061042c565b6000821180156108d0575082600160a060020a031684600160a060020a031614155b1561098657600160a060020a038416600090815260016020908152604080832033845290915290205461090390836109db565b600160a060020a038516600081815260016020908152604080832033845282528083209490945591815290819052205461093d90836109db565b600160a060020a03808616600090815260208190526040808220939093559085168152205461096c90836109ed565b600160a060020a0384166000908152602081905260409020555b82600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35060019392505050565b6000828211156109e757fe5b50900390565b60008282018381101561042c57fe5b6000600160a060020a0383161515610a1357600080fd5b33600090815260208190526040902054821115610a32575060006103ca565b600082118015610a4b575033600160a060020a03841614155b15610ab05733600090815260208190526040902054610a6a90836109db565b3360009081526020819052604080822092909255600160a060020a03851681522054610a9690836109ed565b600160a060020a0384166000908152602081905260409020555b604080518381529051600160a060020a0385169133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3506001929150505600a165627a7a723058205724a4de48c64d72a3fd5248ef2f3261d5d0daaecda9a1be3fb9b33b5555292f0029"
}