{
  "address": "0xe7729d6aa77f8987d0646ae2b208e624eb577672",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenERC20",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-16\n*/\n\npragma solidity ^0.4.19;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract TokenERC20 is ERC20, Ownable {\n    using SafeMath for uint;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply_;\n    mapping(address => uint256) public balances;\n    mapping(address => mapping(address => uint256)) internal allowed;\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Burn(address indexed holder, uint256 tokens);\n\n    function TokenERC20(\n        string _name,\n        string _symbol,\n        uint8 _decimals,\n        address _supplyReceiver,\n        uint256 _initialSupply\n    ) public {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply_ = _initialSupply;\n\n        balances[_supplyReceiver] = totalSupply_;\n\n        Transfer(0, _supplyReceiver, totalSupply_);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function burn(uint256 _amount) public returns (bool) {\n        require(balances[msg.sender] >= _amount);\n\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        totalSupply_ = totalSupply_.sub(_amount);\n\n        Burn(msg.sender, _amount);\n        Transfer(msg.sender, address(0), _amount);\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b604051610b1a380380610b1a83398101604052808051820191906020018051820191906020018051919060200180519190602001805160008054600160a060020a03191633600160a060020a03161790559150600190508580516100779291602001906100f9565b50600284805161008b9291602001906100f9565b506003805460ff191660ff85161790556004819055600160a060020a0382166000818152600560205260408082208490557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35050505050610194565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061013a57805160ff1916838001178555610167565b82800160010185558215610167579182015b8281111561016757825182559160200191906001019061014c565b50610173929150610177565b5090565b61019191905b80821115610173576000815560010161017d565b90565b610977806101a36000396000f3006060604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d4578063095ea7b31461015e57806318160ddd1461019457806323b872dd146101b957806327e235e3146101e1578063313ce56714610200578063324536eb1461022957806342966c681461023c57806370a08231146102525780638da5cb5b1461027157806395d89b41146102a0578063a9059cbb146102b3578063dd62ed3e146102d5578063f2fde38b146102fa575b600080fd5b34156100df57600080fd5b6100e761031b565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561012357808201518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016957600080fd5b610180600160a060020a03600435166024356103b9565b604051901515815260200160405180910390f35b341561019f57600080fd5b6101a7610425565b60405190815260200160405180910390f35b34156101c457600080fd5b610180600160a060020a036004358116906024351660443561042b565b34156101ec57600080fd5b6101a7600160a060020a03600435166105ad565b341561020b57600080fd5b6102136105bf565b60405160ff909116815260200160405180910390f35b341561023457600080fd5b6101a76105c8565b341561024757600080fd5b6101806004356105ce565b341561025d57600080fd5b6101a7600160a060020a03600435166106cd565b341561027c57600080fd5b6102846106e8565b604051600160a060020a03909116815260200160405180910390f35b34156102ab57600080fd5b6100e76106f7565b34156102be57600080fd5b610180600160a060020a0360043516602435610762565b34156102e057600080fd5b6101a7600160a060020a036004358116906024351661085d565b341561030557600080fd5b610319600160a060020a0360043516610888565b005b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103b15780601f10610386576101008083540402835291602001916103b1565b820191906000526020600020905b81548152906001019060200180831161039457829003601f168201915b505050505081565b600160a060020a03338116600081815260066020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60045490565b6000600160a060020a038316151561044257600080fd5b600160a060020a03841660009081526005602052604090205482111561046757600080fd5b600160a060020a038085166000908152600660209081526040808320339094168352929052205482111561049a57600080fd5b600160a060020a0384166000908152600560205260409020546104c3908363ffffffff61092316565b600160a060020a0380861660009081526005602052604080822093909355908516815220546104f8908363ffffffff61093516565b600160a060020a03808516600090815260056020908152604080832094909455878316825260068152838220339093168252919091522054610540908363ffffffff61092316565b600160a060020a03808616600081815260066020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60056020526000908152604090205481565b60035460ff1681565b60045481565b600160a060020a033316600090815260056020526040812054829010156105f457600080fd5b600160a060020a03331660009081526005602052604090205461061d908363ffffffff61092316565b600160a060020a033316600090815260056020526040902055600454610649908363ffffffff61092316565b600455600160a060020a0333167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a2600033600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a3919050565b600160a060020a031660009081526005602052604090205490565b600054600160a060020a031681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103b15780601f10610386576101008083540402835291602001916103b1565b6000600160a060020a038316151561077957600080fd5b600160a060020a03331660009081526005602052604090205482111561079e57600080fd5b600160a060020a0333166000908152600560205260409020546107c7908363ffffffff61092316565b600160a060020a0333811660009081526005602052604080822093909355908516815220546107fc908363ffffffff61093516565b600160a060020a0380851660008181526005602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260066020908152604080832093909416825291909152205490565b60005433600160a060020a039081169116146108a357600080fd5b600160a060020a03811615156108b857600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282111561092f57fe5b50900390565b60008282018381101561094457fe5b93925050505600a165627a7a723058205b7dfecbecc1e99e5085d2633dad761ca98968c1b1350f464bbe46d8a9e5bd61002900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000019b6b04211da651d6c3f51a500647c4c8ddd1e0f0000000000000000000000000000000000000000000fb768105935a2f3000000000000000000000000000000000000000000000000000000000000000000000d4567616d62656c20546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034547420000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000019b6b04211da651d6c3f51a500647c4c8ddd1e0f0000000000000000000000000000000000000000000fb768105935a2f3000000000000000000000000000000000000000000000000000000000000000000000d4567616d62656c20546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034547420000000000000000000000000000000000000000000000000000000000"
}