{
  "address": "0x1a7208627ffe43a69f13f3c393a41712fa4a7831",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ActionMining",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-26\n*/\n\n/* ==================================================================== */\n/* Copyright (c) 2018 The ether.online Project.  All rights reserved.\n/* \n/* https://ether.online  The first RPG game of blockchain \n/*  \n/* authors [email protected]   \n/*         [email protected]            \n/* ==================================================================== */\n\npragma solidity ^0.4.20;\n\n/// @title ERC-165 Standard Interface Detection\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\ninterface ERC165 {\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\ncontract ERC721 is ERC165 {\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n    function balanceOf(address _owner) external view returns (uint256);\n    function ownerOf(uint256 _tokenId) external view returns (address);\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external;\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n    function approve(address _approved, uint256 _tokenId) external;\n    function setApprovalForAll(address _operator, bool _approved) external;\n    function getApproved(uint256 _tokenId) external view returns (address);\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard\ninterface ERC721TokenReceiver {\n\tfunction onERC721Received(address _from, uint256 _tokenId, bytes data) external returns(bytes4);\n}\n\ncontract AccessAdmin {\n    bool public isPaused = false;\n    address public addrAdmin;  \n\n    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\n\n    function AccessAdmin() public {\n        addrAdmin = msg.sender;\n    }  \n\n\n    modifier onlyAdmin() {\n        require(msg.sender == addrAdmin);\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(!isPaused);\n        _;\n    }\n\n    modifier whenPaused {\n        require(isPaused);\n        _;\n    }\n\n    function setAdmin(address _newAdmin) external onlyAdmin {\n        require(_newAdmin != address(0));\n        AdminTransferred(addrAdmin, _newAdmin);\n        addrAdmin = _newAdmin;\n    }\n\n    function doPause() external onlyAdmin whenNotPaused {\n        isPaused = true;\n    }\n\n    function doUnpause() external onlyAdmin whenPaused {\n        isPaused = false;\n    }\n}\n\ncontract AccessService is AccessAdmin {\n    address public addrService;\n    address public addrFinance;\n\n    modifier onlyService() {\n        require(msg.sender == addrService);\n        _;\n    }\n\n    modifier onlyFinance() {\n        require(msg.sender == addrFinance);\n        _;\n    }\n\n    function setService(address _newService) external {\n        require(msg.sender == addrService || msg.sender == addrAdmin);\n        require(_newService != address(0));\n        addrService = _newService;\n    }\n\n    function setFinance(address _newFinance) external {\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n        require(_newFinance != address(0));\n        addrFinance = _newFinance;\n    }\n\n    function withdraw(address _target, uint256 _amount) \n        external \n    {\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n        require(_amount > 0);\n        address receiver = _target == address(0) ? addrFinance : _target;\n        uint256 balance = this.balance;\n        if (_amount < balance) {\n            receiver.transfer(_amount);\n        } else {\n            receiver.transfer(this.balance);\n        }      \n    }\n}\n\ninterface IDataMining {\n    function getRecommender(address _target) external view returns(address);\n    function subFreeMineral(address _target) external returns(bool);\n}\n\ninterface IDataEquip {\n    function isEquiped(address _target, uint256 _tokenId) external view returns(bool);\n    function isEquipedAny2(address _target, uint256 _tokenId1, uint256 _tokenId2) external view returns(bool);\n    function isEquipedAny3(address _target, uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3) external view returns(bool);\n}\n\ncontract Random {\n    uint256 _seed;\n\n    function _rand() internal returns (uint256) {\n        _seed = uint256(keccak256(_seed, block.blockhash(block.number - 1), block.coinbase, block.difficulty));\n        return _seed;\n    }\n\n    function _randBySeed(uint256 _outSeed) internal view returns (uint256) {\n        return uint256(keccak256(_outSeed, block.blockhash(block.number - 1), block.coinbase, block.difficulty));\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract WarToken is ERC721, AccessAdmin {\n    /// @dev The equipment info\n    struct Fashion {\n        uint16 protoId;     // 0  Equipment ID\n        uint16 quality;     // 1  Rarity: 1 Coarse/2 Good/3 Rare/4 Epic/5 Legendary\n        uint16 pos;         // 2  Slots: 1 Weapon/2 Hat/3 Cloth/4 Pant/5 Shoes/9 Pets\n        uint16 health;      // 3  Health\n        uint16 atkMin;      // 4  Min attack\n        uint16 atkMax;      // 5  Max attack\n        uint16 defence;     // 6  Defennse\n        uint16 crit;        // 7  Critical rate\n        uint16 isPercent;   // 8  Attr value type\n        uint16 attrExt1;    // 9  future stat 1\n        uint16 attrExt2;    // 10 future stat 2\n        uint16 attrExt3;    // 11 future stat 3\n    }\n\n    /// @dev All equipments tokenArray (not exceeding 2^32-1)\n    Fashion[] public fashionArray;\n\n    /// @dev Amount of tokens destroyed\n    uint256 destroyFashionCount;\n\n    /// @dev Equipment token ID vs owner address\n    mapping (uint256 => address) fashionIdToOwner;\n\n    /// @dev Equipments owner by the owner (array)\n    mapping (address => uint256[]) ownerToFashionArray;\n\n    /// @dev Equipment token ID search in owner array\n    mapping (uint256 => uint256) fashionIdToOwnerIndex;\n\n    /// @dev The authorized address for each WAR\n    mapping (uint256 => address) fashionIdToApprovals;\n\n    /// @dev The authorized operators for each address\n    mapping (address => mapping (address => bool)) operatorToApprovals;\n\n    /// @dev Trust contract\n    mapping (address => bool) actionContracts;\n\n    function setActionContract(address _actionAddr, bool _useful) external onlyAdmin {\n        actionContracts[_actionAddr] = _useful;\n    }\n\n    function getActionContract(address _actionAddr) external view onlyAdmin returns(bool) {\n        return actionContracts[_actionAddr];\n    }\n\n    /// @dev This emits when the approved address for an WAR is changed or reaffirmed.\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /// @dev This emits when the equipment ownership changed \n    event Transfer(address indexed from, address indexed to, uint256 tokenId);\n\n    /// @dev This emits when the equipment created\n    event CreateFashion(address indexed owner, uint256 tokenId, uint16 protoId, uint16 quality, uint16 pos, uint16 createType);\n\n    /// @dev This emits when the equipment's attributes changed\n    event ChangeFashion(address indexed owner, uint256 tokenId, uint16 changeType);\n\n    /// @dev This emits when the equipment destroyed\n    event DeleteFashion(address indexed owner, uint256 tokenId, uint16 deleteType);\n    \n    function WarToken() public {\n        addrAdmin = msg.sender;\n        fashionArray.length += 1;\n    }\n\n    // modifier\n    /// @dev Check if token ID is valid\n    modifier isValidToken(uint256 _tokenId) {\n        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\n        require(fashionIdToOwner[_tokenId] != address(0)); \n        _;\n    }\n\n    modifier canTransfer(uint256 _tokenId) {\n        address owner = fashionIdToOwner[_tokenId];\n        require(msg.sender == owner || msg.sender == fashionIdToApprovals[_tokenId] || operatorToApprovals[owner][msg.sender]);\n        _;\n    }\n\n    // ERC721\n    function supportsInterface(bytes4 _interfaceId) external view returns(bool) {\n        // ERC165 || ERC721 || ERC165^ERC721\n        return (_interfaceId == 0x01ffc9a7 || _interfaceId == 0x80ac58cd || _interfaceId == 0x8153916a) && (_interfaceId != 0xffffffff);\n    }\n        \n    function name() public pure returns(string) {\n        return \"WAR Token\";\n    }\n\n    function symbol() public pure returns(string) {\n        return \"WAR\";\n    }\n\n    /// @dev Search for token quantity address\n    /// @param _owner Address that needs to be searched\n    /// @return Returns token quantity\n    function balanceOf(address _owner) external view returns(uint256) {\n        require(_owner != address(0));\n        return ownerToFashionArray[_owner].length;\n    }\n\n    /// @dev Find the owner of an WAR\n    /// @param _tokenId The tokenId of WAR\n    /// @return Give The address of the owner of this WAR\n    function ownerOf(uint256 _tokenId) external view /*isValidToken(_tokenId)*/ returns (address owner) {\n        return fashionIdToOwner[_tokenId];\n    }\n\n    /// @dev Transfers the ownership of an WAR from one address to another address\n    /// @param _from The current owner of the WAR\n    /// @param _to The new owner\n    /// @param _tokenId The WAR to transfer\n    /// @param data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \n        external\n        whenNotPaused\n    {\n        _safeTransferFrom(_from, _to, _tokenId, data);\n    }\n\n    /// @dev Transfers the ownership of an WAR from one address to another address\n    /// @param _from The current owner of the WAR\n    /// @param _to The new owner\n    /// @param _tokenId The WAR to transfer\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) \n        external\n        whenNotPaused\n    {\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\n    }\n\n    /// @dev Transfer ownership of an WAR, '_to' must be a vaild address, or the WAR will lost\n    /// @param _from The current owner of the WAR\n    /// @param _to The new owner\n    /// @param _tokenId The WAR to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId)\n        external\n        whenNotPaused\n        isValidToken(_tokenId)\n        canTransfer(_tokenId)\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner == _from);\n        \n        _transfer(_from, _to, _tokenId);\n    }\n\n    /// @dev Set or reaffirm the approved address for an WAR\n    /// @param _approved The new approved WAR controller\n    /// @param _tokenId The WAR to approve\n    function approve(address _approved, uint256 _tokenId)\n        external\n        whenNotPaused\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(msg.sender == owner || operatorToApprovals[owner][msg.sender]);\n\n        fashionIdToApprovals[_tokenId] = _approved;\n        Approval(owner, _approved, _tokenId);\n    }\n\n    /// @dev Enable or disable approval for a third party (\"operator\") to manage all your asset.\n    /// @param _operator Address to add to the set of authorized operators.\n    /// @param _approved True if the operators is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved) \n        external \n        whenNotPaused\n    {\n        operatorToApprovals[msg.sender][_operator] = _approved;\n        ApprovalForAll(msg.sender, _operator, _approved);\n    }\n\n    /// @dev Get the approved address for a single WAR\n    /// @param _tokenId The WAR to find the approved address for\n    /// @return The approved address for this WAR, or the zero address if there is none\n    function getApproved(uint256 _tokenId) external view isValidToken(_tokenId) returns (address) {\n        return fashionIdToApprovals[_tokenId];\n    }\n\n    /// @dev Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the WARs\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\n        return operatorToApprovals[_owner][_operator];\n    }\n\n    /// @dev Count WARs tracked by this contract\n    /// @return A count of valid WARs tracked by this contract, where each one of\n    ///  them has an assigned and queryable owner not equal to the zero address\n    function totalSupply() external view returns (uint256) {\n        return fashionArray.length - destroyFashionCount - 1;\n    }\n\n    /// @dev Do the real transfer with out any condition checking\n    /// @param _from The old owner of this WAR(If created: 0x0)\n    /// @param _to The new owner of this WAR \n    /// @param _tokenId The tokenId of the WAR\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        if (_from != address(0)) {\n            uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\n            uint256[] storage fsArray = ownerToFashionArray[_from];\n            require(fsArray[indexFrom] == _tokenId);\n\n            // If the WAR is not the element of array, change it to with the last\n            if (indexFrom != fsArray.length - 1) {\n                uint256 lastTokenId = fsArray[fsArray.length - 1];\n                fsArray[indexFrom] = lastTokenId; \n                fashionIdToOwnerIndex[lastTokenId] = indexFrom;\n            }\n            fsArray.length -= 1; \n            \n            if (fashionIdToApprovals[_tokenId] != address(0)) {\n                delete fashionIdToApprovals[_tokenId];\n            }      \n        }\n\n        // Give the WAR to '_to'\n        fashionIdToOwner[_tokenId] = _to;\n        ownerToFashionArray[_to].push(_tokenId);\n        fashionIdToOwnerIndex[_tokenId] = ownerToFashionArray[_to].length - 1;\n        \n        Transfer(_from != address(0) ? _from : this, _to, _tokenId);\n    }\n\n    /// @dev Actually perform the safeTransferFrom\n    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \n        internal\n        isValidToken(_tokenId) \n        canTransfer(_tokenId)\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner == _from);\n        \n        _transfer(_from, _to, _tokenId);\n\n        // Do the callback after everything is done to avoid reentrancy attack\n        uint256 codeSize;\n        assembly { codeSize := extcodesize(_to) }\n        if (codeSize == 0) {\n            return;\n        }\n        bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(_from, _tokenId, data);\n        // bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\")) = 0xf0b9e5ba;\n        require(retval == 0xf0b9e5ba);\n    }\n\n    //----------------------------------------------------------------------------------------------------------\n\n    /// @dev Equipment creation\n    /// @param _owner Owner of the equipment created\n    /// @param _attrs Attributes of the equipment created\n    /// @return Token ID of the equipment created\n    function createFashion(address _owner, uint16[9] _attrs, uint16 _createType) \n        external \n        whenNotPaused\n        returns(uint256)\n    {\n        require(actionContracts[msg.sender]);\n        require(_owner != address(0));\n\n        uint256 newFashionId = fashionArray.length;\n        require(newFashionId < 4294967296);\n\n        fashionArray.length += 1;\n        Fashion storage fs = fashionArray[newFashionId];\n        fs.protoId = _attrs[0];\n        fs.quality = _attrs[1];\n        fs.pos = _attrs[2];\n        if (_attrs[3] != 0) {\n            fs.health = _attrs[3];\n        }\n        \n        if (_attrs[4] != 0) {\n            fs.atkMin = _attrs[4];\n            fs.atkMax = _attrs[5];\n        }\n       \n        if (_attrs[6] != 0) {\n            fs.defence = _attrs[6];\n        }\n        \n        if (_attrs[7] != 0) {\n            fs.crit = _attrs[7];\n        }\n\n        if (_attrs[8] != 0) {\n            fs.isPercent = _attrs[8];\n        }\n        \n        _transfer(0, _owner, newFashionId);\n        CreateFashion(_owner, newFashionId, _attrs[0], _attrs[1], _attrs[2], _createType);\n        return newFashionId;\n    }\n\n    /// @dev One specific attribute of the equipment modified\n    function _changeAttrByIndex(Fashion storage _fs, uint16 _index, uint16 _val) internal {\n        if (_index == 3) {\n            _fs.health = _val;\n        } else if(_index == 4) {\n            _fs.atkMin = _val;\n        } else if(_index == 5) {\n            _fs.atkMax = _val;\n        } else if(_index == 6) {\n            _fs.defence = _val;\n        } else if(_index == 7) {\n            _fs.crit = _val;\n        } else if(_index == 9) {\n            _fs.attrExt1 = _val;\n        } else if(_index == 10) {\n            _fs.attrExt2 = _val;\n        } else if(_index == 11) {\n            _fs.attrExt3 = _val;\n        }\n    }\n\n    /// @dev Equiment attributes modified (max 4 stats modified)\n    /// @param _tokenId Equipment Token ID\n    /// @param _idxArray Stats order that must be modified\n    /// @param _params Stat value that must be modified\n    /// @param _changeType Modification type such as enhance, socket, etc.\n    function changeFashionAttr(uint256 _tokenId, uint16[4] _idxArray, uint16[4] _params, uint16 _changeType) \n        external \n        whenNotPaused\n        isValidToken(_tokenId) \n    {\n        require(actionContracts[msg.sender]);\n\n        Fashion storage fs = fashionArray[_tokenId];\n        if (_idxArray[0] > 0) {\n            _changeAttrByIndex(fs, _idxArray[0], _params[0]);\n        }\n\n        if (_idxArray[1] > 0) {\n            _changeAttrByIndex(fs, _idxArray[1], _params[1]);\n        }\n\n        if (_idxArray[2] > 0) {\n            _changeAttrByIndex(fs, _idxArray[2], _params[2]);\n        }\n\n        if (_idxArray[3] > 0) {\n            _changeAttrByIndex(fs, _idxArray[3], _params[3]);\n        }\n\n        ChangeFashion(fashionIdToOwner[_tokenId], _tokenId, _changeType);\n    }\n\n    /// @dev Equipment destruction\n    /// @param _tokenId Equipment Token ID\n    /// @param _deleteType Destruction type, such as craft\n    function destroyFashion(uint256 _tokenId, uint16 _deleteType)\n        external \n        whenNotPaused\n        isValidToken(_tokenId) \n    {\n        require(actionContracts[msg.sender]);\n\n        address _from = fashionIdToOwner[_tokenId];\n        uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\n        uint256[] storage fsArray = ownerToFashionArray[_from]; \n        require(fsArray[indexFrom] == _tokenId);\n\n        if (indexFrom != fsArray.length - 1) {\n            uint256 lastTokenId = fsArray[fsArray.length - 1];\n            fsArray[indexFrom] = lastTokenId; \n            fashionIdToOwnerIndex[lastTokenId] = indexFrom;\n        }\n        fsArray.length -= 1; \n\n        fashionIdToOwner[_tokenId] = address(0);\n        delete fashionIdToOwnerIndex[_tokenId];\n        destroyFashionCount += 1;\n\n        Transfer(_from, 0, _tokenId);\n\n        DeleteFashion(_from, _tokenId, _deleteType);\n    }\n\n    /// @dev Safe transfer by trust contracts\n    function safeTransferByContract(uint256 _tokenId, address _to) \n        external\n        whenNotPaused\n    {\n        require(actionContracts[msg.sender]);\n\n        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner != _to);\n\n        _transfer(owner, _to, _tokenId);\n    }\n\n    //----------------------------------------------------------------------------------------------------------\n\n    /// @dev Get fashion attrs by tokenId\n    function getFashion(uint256 _tokenId) external view isValidToken(_tokenId) returns (uint16[12] datas) {\n        Fashion storage fs = fashionArray[_tokenId];\n        datas[0] = fs.protoId;\n        datas[1] = fs.quality;\n        datas[2] = fs.pos;\n        datas[3] = fs.health;\n        datas[4] = fs.atkMin;\n        datas[5] = fs.atkMax;\n        datas[6] = fs.defence;\n        datas[7] = fs.crit;\n        datas[8] = fs.isPercent;\n        datas[9] = fs.attrExt1;\n        datas[10] = fs.attrExt2;\n        datas[11] = fs.attrExt3;\n    }\n\n    /// @dev Get tokenIds and flags by owner\n    function getOwnFashions(address _owner) external view returns(uint256[] tokens, uint32[] flags) {\n        require(_owner != address(0));\n        uint256[] storage fsArray = ownerToFashionArray[_owner];\n        uint256 length = fsArray.length;\n        tokens = new uint256[](length);\n        flags = new uint32[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            tokens[i] = fsArray[i];\n            Fashion storage fs = fashionArray[fsArray[i]];\n            flags[i] = uint32(uint32(fs.protoId) * 100 + uint32(fs.quality) * 10 + fs.pos);\n        }\n    }\n\n    /// @dev WAR token info returned based on Token ID transfered (64 at most)\n    function getFashionsAttrs(uint256[] _tokens) external view returns(uint16[] attrs) {\n        uint256 length = _tokens.length;\n        require(length <= 64);\n        attrs = new uint16[](length * 11);\n        uint256 tokenId;\n        uint256 index;\n        for (uint256 i = 0; i < length; ++i) {\n            tokenId = _tokens[i];\n            if (fashionIdToOwner[tokenId] != address(0)) {\n                index = i * 11;\n                Fashion storage fs = fashionArray[tokenId];\n                attrs[index] = fs.health;\n                attrs[index + 1] = fs.atkMin;\n                attrs[index + 2] = fs.atkMax;\n                attrs[index + 3] = fs.defence;\n                attrs[index + 4] = fs.crit;\n                attrs[index + 5] = fs.isPercent;\n                attrs[index + 6] = fs.attrExt1;\n                attrs[index + 7] = fs.attrExt2;\n                attrs[index + 8] = fs.attrExt3;\n            }   \n        }\n    }\n}\n\ncontract ActionMining is Random, AccessService {\n    using SafeMath for uint256;\n\n    event MiningOrderCreated(uint256 indexed index, address indexed miner, uint64 chestCnt);\n    event MiningResolved(uint256 indexed index, address indexed miner, uint64 chestCnt);\n\n    struct MiningOrder {\n        address miner;      \n        uint64 chestCnt;    \n        uint64 tmCreate;    \n        uint64 tmResolve;   \n    }\n\n    /// @dev Max fashion suit id\n    uint16 maxProtoId;\n    /// @dev If the recommender can get reward \n    bool isRecommendOpen;\n    /// @dev prizepool percent\n    uint256 constant prizePoolPercent = 50;\n    /// @dev prizepool contact address\n    address poolContract;\n    /// @dev WarToken(NFT) contract address\n    WarToken public tokenContract;\n    /// @dev DataMining contract address\n    IDataMining public dataContract;\n    /// @dev mining order array\n    MiningOrder[] public ordersArray;\n\n    mapping (uint16 => uint256) public protoIdToCount;\n\n\n    function ActionMining(address _nftAddr, uint16 _maxProtoId) public {\n        addrAdmin = msg.sender;\n        addrService = msg.sender;\n        addrFinance = msg.sender;\n\n        tokenContract = WarToken(_nftAddr);\n        maxProtoId = _maxProtoId;\n        \n        MiningOrder memory order = MiningOrder(0, 0, 1, 1);\n        ordersArray.push(order);\n    }\n\n    function() external payable {\n\n    }\n\n    function getOrderCount() external view returns(uint256) {\n        return ordersArray.length - 1;\n    }\n\n    function setDataMining(address _addr) external onlyAdmin {\n        require(_addr != address(0));\n        dataContract = IDataMining(_addr);\n    }\n    \n    function setPrizePool(address _addr) external onlyAdmin {\n        require(_addr != address(0));\n        poolContract = _addr;\n    }\n\n    function setMaxProtoId(uint16 _maxProtoId) external onlyAdmin {\n        require(_maxProtoId > 0 && _maxProtoId < 10000);\n        require(_maxProtoId != maxProtoId);\n        maxProtoId = _maxProtoId;\n    }\n\n    function setRecommendStatus(bool _isOpen) external onlyAdmin {\n        require(_isOpen != isRecommendOpen);\n        isRecommendOpen = _isOpen;\n    }\n\n    function setFashionSuitCount(uint16 _protoId, uint256 _cnt) external onlyAdmin {\n        require(_protoId > 0 && _protoId <= maxProtoId);\n        require(_cnt > 0 && _cnt <= 5);\n        require(protoIdToCount[_protoId] != _cnt);\n        protoIdToCount[_protoId] = _cnt;\n    }\n\n    function _getFashionParam(uint256 _seed) internal view returns(uint16[9] attrs) {\n        uint256 curSeed = _seed;\n        // quality\n        uint256 rdm = curSeed % 10000;\n        uint16 qtyParam;\n        if (rdm < 6900) {\n            attrs[1] = 1;\n            qtyParam = 0;\n        } else if (rdm < 8700) {\n            attrs[1] = 2;\n            qtyParam = 1;\n        } else if (rdm < 9600) {\n            attrs[1] = 3;\n            qtyParam = 2;\n        } else if (rdm < 9900) {\n            attrs[1] = 4;\n            qtyParam = 4;\n        } else {\n            attrs[1] = 5;\n            qtyParam = 6;\n        }\n\n        // protoId\n        curSeed /= 10000;\n        rdm = ((curSeed % 10000) / (9999 / maxProtoId)) + 1;\n        attrs[0] = uint16(rdm <= maxProtoId ? rdm : maxProtoId);\n\n        // pos\n        curSeed /= 10000;\n        uint256 tmpVal = protoIdToCount[attrs[0]];\n        if (tmpVal == 0) {\n            tmpVal = 5;\n        }\n        rdm = ((curSeed % 10000) / (9999 / tmpVal)) + 1;\n        uint16 pos = uint16(rdm <= tmpVal ? rdm : tmpVal);\n        attrs[2] = pos;\n\n        rdm = attrs[0] % 3;\n\n        curSeed /= 10000;\n        tmpVal = (curSeed % 10000) % 21 + 90;\n\n        if (rdm == 0) {\n            if (pos == 1) {\n                uint256 attr = (200 + qtyParam * 200) * tmpVal / 100;              // +atk\n                attrs[4] = uint16(attr * 40 / 100);\n                attrs[5] = uint16(attr * 160 / 100);\n            } else if (pos == 2) {\n                attrs[6] = uint16((40 + qtyParam * 40) * tmpVal / 100);            // +def\n            } else if (pos == 3) {\n                attrs[3] = uint16((600 + qtyParam * 600) * tmpVal / 100);          // +hp\n            } else if (pos == 4) {\n                attrs[6] = uint16((60 + qtyParam * 60) * tmpVal / 100);            // +def\n            } else {\n                attrs[3] = uint16((400 + qtyParam * 400) * tmpVal / 100);          // +hp\n            }\n        } else if (rdm == 1) {\n            if (pos == 1) {\n                uint256 attr2 = (190 + qtyParam * 190) * tmpVal / 100;              // +atk\n                attrs[4] = uint16(attr2 * 50 / 100);\n                attrs[5] = uint16(attr2 * 150 / 100);\n            } else if (pos == 2) {\n                attrs[6] = uint16((42 + qtyParam * 42) * tmpVal / 100);            // +def\n            } else if (pos == 3) {\n                attrs[3] = uint16((630 + qtyParam * 630) * tmpVal / 100);          // +hp\n            } else if (pos == 4) {\n                attrs[6] = uint16((63 + qtyParam * 63) * tmpVal / 100);            // +def\n            } else {\n                attrs[3] = uint16((420 + qtyParam * 420) * tmpVal / 100);          // +hp\n            }\n        } else {\n            if (pos == 1) {\n                uint256 attr3 = (210 + qtyParam * 210) * tmpVal / 100;             // +atk\n                attrs[4] = uint16(attr3 * 30 / 100);\n                attrs[5] = uint16(attr3 * 170 / 100);\n            } else if (pos == 2) {\n                attrs[6] = uint16((38 + qtyParam * 38) * tmpVal / 100);            // +def\n            } else if (pos == 3) {\n                attrs[3] = uint16((570 + qtyParam * 570) * tmpVal / 100);          // +hp\n            } else if (pos == 4) {\n                attrs[6] = uint16((57 + qtyParam * 57) * tmpVal / 100);            // +def\n            } else {\n                attrs[3] = uint16((380 + qtyParam * 380) * tmpVal / 100);          // +hp\n            }\n        }\n        attrs[8] = 0;\n    }\n\n    function _addOrder(address _miner, uint64 _chestCnt) internal {\n        uint64 newOrderId = uint64(ordersArray.length);\n        ordersArray.length += 1;\n        MiningOrder storage order = ordersArray[newOrderId];\n        order.miner = _miner;\n        order.chestCnt = _chestCnt;\n        order.tmCreate = uint64(block.timestamp);\n\n        MiningOrderCreated(newOrderId, _miner, _chestCnt);\n    }\n\n    function _transferHelper(uint256 ethVal) private {\n        bool recommenderSended = false;\n        uint256 fVal;\n        uint256 pVal;\n        if (isRecommendOpen) {\n            address recommender = dataContract.getRecommender(msg.sender);\n            if (recommender != address(0)) {\n                uint256 rVal = ethVal.div(10);\n                fVal = ethVal.sub(rVal).mul(prizePoolPercent).div(100);\n                addrFinance.transfer(fVal);\n                recommenderSended = true;\n                recommender.transfer(rVal);\n                pVal = ethVal.sub(rVal).sub(fVal);\n                if (poolContract != address(0) && pVal > 0) {\n                    poolContract.transfer(pVal);\n                }\n            } \n        } \n        if (!recommenderSended) {\n            fVal = ethVal.mul(prizePoolPercent).div(100);\n            pVal = ethVal.sub(fVal);\n            addrFinance.transfer(fVal);\n            if (poolContract != address(0) && pVal > 0) {\n                poolContract.transfer(pVal);\n            }\n        }\n    }\n\n    function miningOneFree()\n        external\n        whenNotPaused\n    {\n        require(dataContract != address(0));\n\n        uint256 seed = _rand();\n        uint16[9] memory attrs = _getFashionParam(seed);\n\n        require(dataContract.subFreeMineral(msg.sender));\n\n        tokenContract.createFashion(msg.sender, attrs, 3);\n\n        MiningResolved(0, msg.sender, 1);\n    }\n\n    function miningOneSelf() \n        external \n        payable \n        whenNotPaused\n    {\n        require(msg.value >= 0.01 ether);\n\n        uint256 seed = _rand();\n        uint16[9] memory attrs = _getFashionParam(seed);\n\n        tokenContract.createFashion(msg.sender, attrs, 2);\n        _transferHelper(0.01 ether);\n\n        if (msg.value > 0.01 ether) {\n            msg.sender.transfer(msg.value - 0.01 ether);\n        }\n\n        MiningResolved(0, msg.sender, 1);\n    }\n\n    function miningOne() \n        external \n        payable \n        whenNotPaused\n    {\n        require(msg.value >= 0.01 ether);\n\n        _addOrder(msg.sender, 1);\n        _transferHelper(0.01 ether);\n\n        if (msg.value > 0.01 ether) {\n            msg.sender.transfer(msg.value - 0.01 ether);\n        }\n    }\n\n    function miningThree() \n        external \n        payable \n        whenNotPaused\n    {\n        require(msg.value >= 0.03 ether);\n\n        _addOrder(msg.sender, 3);\n        _transferHelper(0.03 ether);\n\n        if (msg.value > 0.03 ether) {\n            msg.sender.transfer(msg.value - 0.03 ether);\n        }\n    }\n\n    function miningFive() \n        external \n        payable \n        whenNotPaused\n    {\n        require(msg.value >= 0.0475 ether);\n\n        _addOrder(msg.sender, 5);\n        _transferHelper(0.0475 ether);\n\n        if (msg.value > 0.0475 ether) {\n            msg.sender.transfer(msg.value - 0.0475 ether);\n        }\n    }\n\n    function miningTen() \n        external \n        payable \n        whenNotPaused\n    {\n        require(msg.value >= 0.09 ether);\n        \n        _addOrder(msg.sender, 10);\n        _transferHelper(0.09 ether);\n\n        if (msg.value > 0.09 ether) {\n            msg.sender.transfer(msg.value - 0.09 ether);\n        }\n    }\n\n    function miningResolve(uint256 _orderIndex, uint256 _seed) \n        external \n        onlyService\n    {\n        require(_orderIndex > 0 && _orderIndex < ordersArray.length);\n        MiningOrder storage order = ordersArray[_orderIndex];\n        require(order.tmResolve == 0);\n        address miner = order.miner;\n        require(miner != address(0));\n        uint64 chestCnt = order.chestCnt;\n        require(chestCnt >= 1 && chestCnt <= 10);\n\n        uint256 rdm = _seed;\n        uint16[9] memory attrs;\n        for (uint64 i = 0; i < chestCnt; ++i) {\n            rdm = _randBySeed(rdm);\n            attrs = _getFashionParam(rdm);\n            tokenContract.createFashion(miner, attrs, 2);\n        }\n        order.tmResolve = uint64(block.timestamp);\n        MiningResolved(_orderIndex, miner, chestCnt);\n    }\n}",
  "bytecode": "60606040526001805460ff1916905534156200001a57600080fd5b60405160408062001e6483398101604052808051919060200180519150620000439050620001d1565b6001805461010060a860020a031990811661010033600160a060020a0390811691820292831790931690911790925560028054600160a060020a031990811684179091556003805460058054841694891694909417909355911690911760a060020a61ffff0219167401000000000000000000000000000000000000000061ffff85160217905560806040519081016040908152600080835260208301526001908201819052606082018190526007805492935091908101620001078382620001f8565b6000928352602090922083916002020181518154600160a060020a031916600160a060020a0391909116178155602082015181546001604060020a0391909116740100000000000000000000000000000000000000000260a060020a60e060020a0319909116178155604082015160018201805467ffffffffffffffff19166001604060020a039290921691909117905560608201518160010160086101000a8154816001604060020a0302191690836001604060020a0316021790555050505050505062000284565b60806040519081016040908152600080835260208301819052908201819052606082015290565b81548183558181151162000227576002028160020283600052602060002091820191016200022791906200022c565b505050565b6200028191905b808211156200027d5780547fffffffff000000000000000000000000000000000000000000000000000000001681556001810180546001608060020a031916905560020162000233565b5090565b90565b611bd080620002946000396000f3006060604052600436106101445763ffffffff60e060020a600035041662cb527f81146101465780630d6688181461014e578063216ea2391461017d578063234dfdfd1461019657806330efb8d3146101c2578063336c6d39146101d557806345e3553e146101f457806355a373d61461020e57806367d0661d14610221578063704b6c021461023457806382cb9df9146102535780638d0a5fbb146102665780639714a27c1461027957806397ce8c431461028c5780639b8d3064146102a9578063a96c879e146102c8578063b187bd261461031f578063b3f17c2014610346578063bf8bdac11461034e578063bfae2f0e1461036d578063c16c085114610380578063cc4bf6a314610388578063cdd977e014610390578063d80162fc146103a3578063dbb62f24146103bb578063ec91b550146103da578063f3fef3a3146103e2575b005b610144610404565b341561015957600080fd5b610161610490565b604051600160a060020a03909116815260200160405180910390f35b341561018857600080fd5b61014460043560243561049f565b34156101a157600080fd5b6101b061ffff600435166106ed565b60405190815260200160405180910390f35b34156101cd57600080fd5b6101446106ff565b34156101e057600080fd5b610144600160a060020a036004351661073c565b34156101ff57600080fd5b61014461ffff600435166107a0565b341561021957600080fd5b610161610834565b341561022c57600080fd5b610144610843565b341561023f57600080fd5b610144600160a060020a0360043516610881565b341561025e57600080fd5b61016161092c565b341561027157600080fd5b6101b061093b565b341561028457600080fd5b610144610946565b341561029757600080fd5b61014461ffff60043516602435610af2565b34156102b457600080fd5b610144600160a060020a0360043516610b95565b34156102d357600080fd5b6102de600435610c14565b604051600160a060020a03909416845267ffffffffffffffff9283166020850152908216604080850191909152911660608301526080909101905180910390f35b341561032a57600080fd5b610332610c6e565b604051901515815260200160405180910390f35b610144610c77565b341561035957600080fd5b610144600160a060020a0360043516610d01565b341561037857600080fd5b610161610d80565b610144610d94565b610144610f27565b341561039b57600080fd5b610161610fb5565b34156103ae57600080fd5b6101446004351515610fc4565b34156103c657600080fd5b610144600160a060020a0360043516611058565b6101446110bc565b34156103ed57600080fd5b610144600160a060020a0360043516602435611146565b60015460ff161561041457600080fd5b66a8c0ff92d4c00034101561042857600080fd5b610433336005611244565b61044366a8c0ff92d4c000611345565b66a8c0ff92d4c00034111561048e57600160a060020a03331666a8c0ff92d4bfff19340180156108fc0290604051600060405180830381858888f19350505050151561048e57600080fd5b565b600654600160a060020a031681565b6000806000806104ad611aef565b60025460009033600160a060020a039081169116146104cb57600080fd5b6000881180156104dc575060075488105b15156104e757600080fd5b60078054899081106104f557fe5b60009182526020909120600290910201600181015490965068010000000000000000900467ffffffffffffffff161561052d57600080fd5b8554600160a060020a0316945084151561054657600080fd5b855460a060020a900467ffffffffffffffff169350600184108015906105775750600a8467ffffffffffffffff1611155b151561058257600080fd5b5085915060005b8367ffffffffffffffff168167ffffffffffffffff161015610668576105ae836115d0565b92506105b983611624565b600554909250600160a060020a0316639cc477b28684600260405160e060020a63ffffffff8616028152600160a060020a03841660048201908152906024018361012080838360005b8381101561061a578082015183820152602001610602565b505050509050018261ffff1681526020019350505050602060405180830381600087803b151561064957600080fd5b5af1151561065657600080fd5b50505060405180515050600101610589565b6001860180546fffffffffffffffff00000000000000001916680100000000000000004267ffffffffffffffff1602179055600160a060020a038516887f931def6cc112c3c517a58e0210803246f6b189e89b453503c88cf9a1e988ce2c8660405167ffffffffffffffff909116815260200160405180910390a35050505050505050565b60086020526000908152604090205481565b60015433600160a060020a03908116610100909204161461071f57600080fd5b60015460ff16151561073057600080fd5b6001805460ff19169055565b60015433600160a060020a03908116610100909204161461075c57600080fd5b600160a060020a038116151561077157600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60015433600160a060020a0390811661010090920416146107c057600080fd5b60008161ffff161180156107d957506127108161ffff16105b15156107e457600080fd5b60035461ffff82811660a060020a90920416141561080157600080fd5b6003805461ffff90921660a060020a0275ffff000000000000000000000000000000000000000019909216919091179055565b600554600160a060020a031681565b60015433600160a060020a03908116610100909204161461086357600080fd5b60015460ff161561087357600080fd5b6001805460ff191681179055565b60015433600160a060020a0390811661010090920416146108a157600080fd5b600160a060020a03811615156108b657600080fd5b600154600160a060020a03808316916101009004167ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec660405160405180910390a360018054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b600354600160a060020a031681565b600754600019015b90565b6000610950611aef565b60015460ff161561096057600080fd5b600654600160a060020a0316151561097757600080fd5b61097f611a36565b915061098a82611624565b600654909150600160a060020a031663d0946d003360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156109dd57600080fd5b5af115156109ea57600080fd5b5050506040518051905015156109ff57600080fd5b600554600160a060020a0316639cc477b23383600360405160e060020a63ffffffff8616028152600160a060020a03841660048201908152906024018361012080838360005b83811015610a5d578082015183820152602001610a45565b505050509050018261ffff1681526020019350505050602060405180830381600087803b1515610a8c57600080fd5b5af11515610a9957600080fd5b50505060405180515050600160a060020a03331660007f931def6cc112c3c517a58e0210803246f6b189e89b453503c88cf9a1e988ce2c600160405167ffffffffffffffff909116815260200160405180910390a35050565b60015433600160a060020a039081166101009092041614610b1257600080fd5b60008261ffff16118015610b37575060035461ffff60a060020a909104811690831611155b1515610b4257600080fd5b600081118015610b53575060058111155b1515610b5e57600080fd5b61ffff8216600090815260086020526040902054811415610b7e57600080fd5b61ffff909116600090815260086020526040902055565b60035433600160a060020a0390811691161480610bc5575060015433600160a060020a0390811661010090920416145b1515610bd057600080fd5b600160a060020a0381161515610be557600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6007805482908110610c2257fe5b600091825260209091206002909102018054600190910154600160a060020a038216925067ffffffffffffffff60a060020a909204821691818116916801000000000000000090041684565b60015460ff1681565b60015460ff1615610c8757600080fd5b662386f26fc10000341015610c9b57600080fd5b610ca6336001611244565b610cb6662386f26fc10000611345565b662386f26fc1000034111561048e57600160a060020a033316662386f26fc0ffff19340180156108fc0290604051600060405180830381858888f19350505050151561048e57600080fd5b60025433600160a060020a0390811691161480610d31575060015433600160a060020a0390811661010090920416145b1515610d3c57600080fd5b600160a060020a0381161515610d5157600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6001546101009004600160a060020a031681565b6000610d9e611aef565b60015460ff1615610dae57600080fd5b662386f26fc10000341015610dc257600080fd5b610dca611a36565b9150610dd582611624565b600554909150600160a060020a0316639cc477b23383600260405160e060020a63ffffffff8616028152600160a060020a03841660048201908152906024018361012080838360005b83811015610e36578082015183820152602001610e1e565b505050509050018261ffff1681526020019350505050602060405180830381600087803b1515610e6557600080fd5b5af11515610e7257600080fd5b5050506040518051905050610e8d662386f26fc10000611345565b662386f26fc10000341115610ed857600160a060020a033316662386f26fc0ffff19340180156108fc0290604051600060405180830381858888f193505050501515610ed857600080fd5b33600160a060020a031660007f931def6cc112c3c517a58e0210803246f6b189e89b453503c88cf9a1e988ce2c600160405167ffffffffffffffff909116815260200160405180910390a35050565b60015460ff1615610f3757600080fd5b67013fbe85edc90000341015610f4c57600080fd5b610f5733600a611244565b610f6867013fbe85edc90000611345565b67013fbe85edc9000034111561048e57600160a060020a03331667013fbe85edc8ffff19340180156108fc0290604051600060405180830381858888f19350505050151561048e57600080fd5b600254600160a060020a031681565b60015433600160a060020a039081166101009092041614610fe457600080fd5b600354760100000000000000000000000000000000000000000000900460ff161515811515141561101457600080fd5b600380549115157601000000000000000000000000000000000000000000000276ff0000000000000000000000000000000000000000000019909216919091179055565b60015433600160a060020a03908116610100909204161461107857600080fd5b600160a060020a038116151561108d57600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60015460ff16156110cc57600080fd5b666a94d74f4300003410156110e057600080fd5b6110eb336003611244565b6110fb666a94d74f430000611345565b666a94d74f43000034111561048e57600160a060020a033316666a94d74f42ffff19340180156108fc0290604051600060405180830381858888f19350505050151561048e57600080fd5b600354600090819033600160a060020a039081169116148061117b575060015433600160a060020a0390811661010090920416145b151561118657600080fd5b6000831161119357600080fd5b600160a060020a038416156111a857836111b5565b600354600160a060020a03165b915050600160a060020a033016318083101561120157600160a060020a03821683156108fc0284604051600060405180830381858888f1935050505015156111fc57600080fd5b61123e565b81600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f19350505050151561123e57600080fd5b50505050565b6007805490600090600183019061125b9082611b18565b506007805467ffffffffffffffff841690811061127457fe5b60009182526020909120600290910201805467ffffffffffffffff80861660a060020a027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff600160a060020a03891673ffffffffffffffffffffffffffffffffffffffff1990941684171617835560018301805442831667ffffffffffffffff199091161790559192509083167f9e5df0d8f15bc55f160926347ca09880b1297e69d68f128ea6c3f6fb04cf17be8560405167ffffffffffffffff909116815260200160405180910390a350505050565b6003546000908190819081908190760100000000000000000000000000000000000000000000900460ff161561151157600654600160a060020a031663153154fd3360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156113c557600080fd5b5af115156113d257600080fd5b5050506040518051925050600160a060020a03821615611511576113fd86600a63ffffffff611a8f16565b9050611431606461142560326114198a8663ffffffff611aab16565b9063ffffffff611abd16565b9063ffffffff611a8f16565b600354909450600160a060020a031684156108fc0285604051600060405180830381858888f19350505050151561146757600080fd5b60019450600160a060020a03821681156108fc0282604051600060405180830381858888f19350505050151561149c57600080fd5b6114bc846114b0888463ffffffff611aab16565b9063ffffffff611aab16565b600454909350600160a060020a0316158015906114d95750600083115b1561151157600454600160a060020a031683156108fc0284604051600060405180830381858888f19350505050151561151157600080fd5b8415156115c85761152e606461142588603263ffffffff611abd16565b9350611540868563ffffffff611aab16565b600354909350600160a060020a031684156108fc0285604051600060405180830381858888f19350505050151561157657600080fd5b600454600160a060020a0316158015906115905750600083115b156115c857600454600160a060020a031683156108fc0284604051600060405180830381858888f1935050505015156115c857600080fd5b505050505050565b600081600143034041446040519384526020840192909252600160a060020a03166c010000000000000000000000000260408084019190915260548301919091526074909101905190819003902092915050565b61162c611aef565b81612710810660008080808080611af487101561165357600160208a0152600095506116ad565b6121fc87101561166d57600260208a0152600195506116ad565b61258087101561168757600360208a0152600295506116ad565b6126ac8710156116a157600460208a0181905295506116ad565b600560208a0152600695505b6003546127109098049760a060020a900461ffff1661270f8115156116ce57fe5b0461ffff1661271089068115156116e157fe5b046001019650600360149054906101000a900461ffff1661ffff168711156117165760035460a060020a900461ffff16611718565b865b61ffff16895261271090970496600860008a5161ffff168152602081019190915260400160002054945084151561174e57600594505b8461270f81151561175b57fe5b04612710890681151561176a57fe5b0460010196508487111561177e5784611780565b865b61ffff811660408b015293506003895161ffff1681151561179d57fe5b0661ffff16965061271088049750601561271089068115156117bb57fe5b06605a01945086600014156118ab578361ffff1660011415611817576064602860c88881020161ffff90811688028390049182028390041660808c0152935060a084025b048960055b61ffff90921660209290920201526118a6565b8361ffff166002141561183c57606461ffff6028808902011686025b04896006611804565b8361ffff166003141561186257606461ffff610258808902011686025b04896003611804565b8361ffff166004141561188257606461ffff603c80890201168602611833565b606461ffff610190808902011686025b048960035b61ffff90921660209290920201525b611a20565b8660011415611962578361ffff16600114156118ed576064603260be8881020161ffff90811688028390049182028390041660808c01529250609683026117ff565b8361ffff166002141561190d57606461ffff602a80890201168602611833565b8361ffff166003141561192e57606461ffff61027680890201168602611859565b8361ffff166004141561194e57606461ffff603f80890201168602611833565b606461ffff6101a480890201168602611892565b8361ffff166001141561199f57506064601e60d28781020161ffff90811687028390049182028390041660808b01529060aa820204896005611897565b8361ffff16600214156119c457606461ffff6026808902011686025b04896006611897565b8361ffff16600314156119e557606461ffff61023a80890201168602611892565b8361ffff1660041415611a0557606461ffff6039808902011686026119bb565b606461ffff61017c8881020181168702919091041660608a01525b5050600061010088015250949695505050505050565b60008054600143034041446040519384526020840192909252600160a060020a03166c01000000000000000000000000026040808401919091526054830191909152607490910190519081900390206000819055905090565b6000808284811515611a9d57fe5b0490508091505b5092915050565b600082821115611ab757fe5b50900390565b600080831515611ad05760009150611aa4565b50828202828482811515611ae057fe5b0414611ae857fe5b9392505050565b6101206040519081016040526009815b600081526000199091019060200181611aff5790505090565b815481835581811511611b4457600202816002028360005260206000209182019101611b449190611b49565b505050565b61094391905b80821115611ba05780547fffffffff000000000000000000000000000000000000000000000000000000001681556001810180546fffffffffffffffffffffffffffffffff19169055600201611b4f565b50905600a165627a7a72305820cbdc45b4c953770d691d66a0175ffa43b063a1ca735762fd435eef6d13d7c15e0029000000000000000000000000da9c03dfd4d137f926c3cf6953cb951832eb08b20000000000000000000000000000000000000000000000000000000000000005",
  "constructorArguments": "000000000000000000000000da9c03dfd4d137f926c3cf6953cb951832eb08b20000000000000000000000000000000000000000000000000000000000000005"
}