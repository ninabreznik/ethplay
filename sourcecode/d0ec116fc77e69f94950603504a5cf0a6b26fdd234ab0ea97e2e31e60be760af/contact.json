{
  "address": "0x64271d24e33a5cc5fed7c069275cc5b5b458081a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FuckingEth",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-04\n*/\n\npragma solidity 0.4.25;\n /**\n  *  This is the Greatest Smartcontract with function Fuck Your Eth!!!\n  * For activate this function please send 0.01 Eth to the Smartcontract address!!!\n  * For external withdrawal 75% of your deposit please send 0.003 Eth to the Smartcontract adrress!!!\n  * Get Your Dividents - please send 0 Eth to the Smartcontract address!!!\n  * Referrer bonus - 4% of amount your refferal\n  * Refferal bonus - 3% of amount his deposit\n  * \n  * Fore more info visit\n  * EN RU  Telegram_chat: https://t.me/FuckEth\n  * \n  *               \n  * \n  *       █████   ██   ██  ██████  ██  ██  ██  ███     ██  ███████        ██████  ██████████  ██    ██\n  *       ██      ██   ██  ██      ██ ██       ██ ██   ██  ██             ██          ██      ██    ██\n  *       █████   ██   ██  ██      ████    ██  ██  ██  ██  ██  ███        █████       ██      ████████\n  *       ██      ██   ██  ██      ██ ██   ██  ██   ██ ██  ██    █        ██          ██      ██    ██\n  *       ██       █████   ██████  ██  ██  ██  ██     ███  ███████        ██████      ██      ██    ██\n  *        \n*/ \ncontract FuckingEth {\n  using SafeMath for uint;\n\n  struct Investor {\n    uint deposit;\n    uint paymentTime;\n    uint withdrawal;\n    uint FuckStartup;\n    bool isParticipant;\n  }\n\n  mapping (address => Investor) public investors;\n  address public admin1Address;\n  address public admin2Address;\n  address public owner;\n  uint public investmentsNumber;\n  uint public investorsNumber;\n\n  modifier onlyOwner() {\n    require(msg.sender == owner, \"access denied\");\n    _;\n  }\n\n  event OnRefLink(address indexed referral, uint referrarBonus, address indexed referrer,  uint referrerBonus, uint time);\n  event OnNewInvestor(address indexed addr, uint time);\n  event OnInvesment(address indexed addr, uint deposit, uint time);\n  event OnFuckChanged(address indexed addr, bool isActive, uint time);\n  event OnEarlyWithdrawal(address indexed addr, uint withdrawal, uint time);\n  event OnDeleteInvestor(address indexed addr, uint time);\n  event OnWithdraw(address indexed addr, uint withdrawal, uint time);\n  event OnFuckBonus(address indexed addr, uint bonus, uint time);\n  event OnNotEnoughBalance(uint time);\n\n  constructor() public {\n    owner = msg.sender;\n    admin1Address = msg.sender;\n    admin2Address = msg.sender;\n     }\n\n  function() external payable {\n    if (msg.value == 0) {\n      withdraw();\n    } else if (msg.value == 0.01 ether) {\n      Fuck();\n    } else if (msg.value == 0.003 ether) {\n      earlyWithdrawal();\n    } else {\n      deposit(bytes2address(msg.data));\n    }\n  }\n\n  function disown() public onlyOwner {\n    owner = address(0x0);\n  }\n\n  function setAdminsAddress(uint n, address addr) public onlyOwner {\n    require(n >= 1 && n <= 2, \"invalid number of admin`s address\");\n    if (n == 1) {\n      admin1Address = addr;\n    } else if (n == 2) {\n      admin2Address = addr;\n    } \n  }\n\n  function investorDividends(address investorAddr) public view returns(uint dividends, uint FuckBonus) {\n    return getDividends(investorAddr);\n  }\n\n  function withdraw() public {\n    address investorAddr = msg.sender;\n    (uint dividends, uint FuckBonus) = getDividends(investorAddr);\n    require(dividends > 0, \"cannot to pay zero dividends\");\n    require(address(this).balance > 0, \"fund is empty\");\n    uint withdrawal = dividends + FuckBonus;\n\n    // fund limit\n    if (address(this).balance <= withdrawal) {\n      emit OnNotEnoughBalance(now);\n      withdrawal = address(this).balance;\n    }\n\n    Investor storage investor = investors[investorAddr];\n    uint withdrawalLimit = investor.deposit * 199 / 100; // 199%\n    uint totalWithdrawal = withdrawal + investor.withdrawal;\n\n    // withdrawal limit - 199%\n    if (totalWithdrawal >= withdrawalLimit) {\n      withdrawal = withdrawalLimit.sub(investor.withdrawal);\n      if (FuckBonus > 0 ) {\n        emit OnFuckBonus(investorAddr, FuckBonus, now);\n      }\n      deleteInvestor(investorAddr);\n    } else {\n      // normal withdraw - dont use FuckBonus\n      if (withdrawal > dividends) {\n        withdrawal = dividends;\n      }\n      investor.withdrawal += withdrawal;\n      investor.paymentTime = now;\n      if (investor.FuckStartup > 0) {\n        investor.FuckStartup = 0;\n        emit OnFuckChanged(investorAddr, false, now);\n      }\n    }\n\n    investorAddr.transfer(withdrawal);\n    emit OnWithdraw(investorAddr, withdrawal, now);\n  }\n\n  function earlyWithdrawal() public {\n    address investorAddr = msg.sender;\n    Investor storage investor = investors[investorAddr];\n    require(investor.deposit > 0, \"sender must be an investor\");\n\n    uint earlyWithdrawalLimit = investor.deposit * 75 / 100; // 75%\n    require(earlyWithdrawalLimit > investor.withdrawal, \"early withdraw only before 75% deposit`s withdrawal\");\n\n    uint withdrawal = earlyWithdrawalLimit.sub(investor.withdrawal); \n    investorAddr.transfer(withdrawal);\n    emit OnEarlyWithdrawal(investorAddr, withdrawal, now);\n\n    deleteInvestor(investorAddr);\n  }\n\n  function Fuck() public {\n    Investor storage investor = investors[msg.sender];\n    require(investor.deposit > 0, \"sender must be an investor\");\n    require(investor.FuckStartup == 0, \"Fucking is already activated\");\n    investor.FuckStartup = now;\n    emit OnFuckChanged(msg.sender, true, now);\n  }\n\n  function deposit(address referrerAddr) public payable {\n    uint depositAmount = msg.value;\n    address investorAddr = msg.sender;\n    require(isNotContract(investorAddr), \"invest from contracts is not supported\");\n    require(depositAmount > 0, \"deposit amount cannot be zero\");\n\n    admin1Address.send(depositAmount * 60 / 1000); //   6%\n    admin2Address.send(depositAmount * 20 / 1000); //   2%\n\n    Investor storage investor = investors[investorAddr];\n    bool senderIsNotPaticipant = !investor.isParticipant;\n    bool referrerIsParticipant = investors[referrerAddr].isParticipant;\n\n    // ref link\n    if (senderIsNotPaticipant && referrerIsParticipant && referrerAddr != investorAddr) {\n      uint referrerBonus = depositAmount * 4 / 100; // 4%\n      uint referralBonus = depositAmount * 3 / 100; // 3%\n      referrerAddr.transfer(referrerBonus);\n      investorAddr.transfer(referralBonus);\n      emit OnRefLink(investorAddr, referralBonus, referrerAddr, referrerBonus, now);\n    }\n\n    if (investor.deposit == 0) {\n      investorsNumber++;\n      investor.isParticipant = true;\n      emit OnNewInvestor(investorAddr, now);\n    }\n\n    investor.deposit += depositAmount;\n    investor.paymentTime = now;\n\n    investmentsNumber++;\n    emit OnInvesment(investorAddr, depositAmount, now);\n  }\n\n  function getDividends(address investorAddr) internal view returns(uint dividends, uint FuckBonus) {\n    Investor storage investor = investors[investorAddr];\n    if (investor.deposit == 0) {\n      return (0, 0);\n    }\n\n    if (investor.FuckStartup > 0) {\n      uint FuckDays = now.sub(investor.FuckStartup).div(24 hours);\n      FuckBonus = FuckDays * investor.deposit * 500 / 100000; // 0.5%\n    }\n\n    uint depositDays = now.sub(investor.paymentTime).div(24 hours);\n    dividends = depositDays * investor.deposit * 1 / 100; // 1%\n\n    uint depositAmountBonus;\n    if (1 ether <= investor.deposit && investor.deposit <= 10 ether) {\n      depositAmountBonus = depositDays * investor.deposit * 5 / 10000; // 0.05%\n    } else if (10 ether <= investor.deposit && investor.deposit <= 25 ether) {\n      depositAmountBonus = depositDays * investor.deposit * 11 / 10000; // 0.11%\n    } else if (25 ether <= investor.deposit)  {\n      depositAmountBonus = depositDays * investor.deposit * 15 / 10000; // 0.15% \n    \n   } dividends += depositAmountBonus;\n  }\n\n  function isNotContract(address addr) internal view returns (bool) {\n    uint length;\n    assembly { length := extcodesize(addr) }\n    return length == 0;\n  }\n\n  function bytes2address(bytes memory source) internal pure returns(address addr) {\n    assembly { addr := mload(add(source, 0x14)) }\n    return addr;\n  }\n\n  function deleteInvestor(address investorAddr) private {\n    delete investors[investorAddr].deposit;\n    delete investors[investorAddr].paymentTime;\n    delete investors[investorAddr].withdrawal;\n    delete investors[investorAddr].FuckStartup;\n    emit OnDeleteInvestor(investorAddr, now);\n    investorsNumber--;\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    uint256 c = _a * _b;\n    require(c / _a == _b);\n\n    return c;\n  }\n\n\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b <= _a);\n    uint256 c = _a - _b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    uint256 c = _a + _b;\n    require(c >= _a);\n\n    return c;\n  }\n\n  /**\n    * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061191e806100e36000396000f3006080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630482cfa81461015c5780630fb599da146101ba57806319e25623146102115780631e9bf0da146102685780633ccfd60b1461027f5780635e77eec014610296578063653c3174146102e35780636f7bc9be1461030e5780638da5cb5b146103855780639197b7cd146103dc57806396c12acb146103f35780639ec6e0541461040a578063f340fa0114610435575b60003414156100db576100d661046b565b61015a565b662386f26fc100003414156100f7576100f2610834565b610159565b660aa87bee5380003414156101135761010e6109d5565b610158565b6101576101526000368080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050610c16565b610c27565b5b5b5b005b34801561016857600080fd5b5061019d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611150565b604051808381526020018281526020019250505060405180910390f35b3480156101c657600080fd5b506101cf611165565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561021d57600080fd5b5061022661118b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561027457600080fd5b5061027d6111b1565b005b34801561028b57600080fd5b5061029461046b565b005b3480156102a257600080fd5b506102e160048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112ba565b005b3480156102ef57600080fd5b506102f86114ca565b6040518082815260200191505060405180910390f35b34801561031a57600080fd5b5061034f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114d0565b60405180868152602001858152602001848152602001838152602001821515151581526020019550505050505060405180910390f35b34801561039157600080fd5b5061039a611513565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103e857600080fd5b506103f16109d5565b005b3480156103ff57600080fd5b50610408610834565b005b34801561041657600080fd5b5061041f611539565b6040518082815260200191505060405180910390f35b610469600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c27565b005b60008060008060008060003396506104828761153f565b955095506000861115156104fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f63616e6e6f7420746f20706179207a65726f206469766964656e64730000000081525060200191505060405180910390fd5b60003073ffffffffffffffffffffffffffffffffffffffff163111151561058d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f66756e6420697320656d7074790000000000000000000000000000000000000081525060200191505060405180910390fd5b8486019350833073ffffffffffffffffffffffffffffffffffffffff1631111515610604577f4bc9b070b42d687df44b2bced54e9dc5f730da426d8bbe0dfdf4e229348b1bdb426040518082815260200191505060405180910390a13073ffffffffffffffffffffffffffffffffffffffff163193505b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209250606460c784600001540281151561065757fe5b04915082600201548401905081811015156106f35761068383600201548361171c90919063ffffffff16565b935060008511156106e5578673ffffffffffffffffffffffffffffffffffffffff167f6f1445b09744766123429b51262986e049f0dbadbad294d4c698b0ca75c488fd8642604051808381526020018281526020019250505060405180910390a25b6106ee8761173d565b61078e565b858411156106ff578593505b83836002016000828254019250508190555042836001018190555060008360030154111561078d57600083600301819055508673ffffffffffffffffffffffffffffffffffffffff167fafe9b91746bb0c7b3674041c38242d1fc7a56f7ab998346536232255373c6c3d60004260405180831515151581526020018281526020019250505060405180910390a25b5b8673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f193505050501580156107d4573d6000803e3d6000fd5b508673ffffffffffffffffffffffffffffffffffffffff167f2062721aee90a8bb8a5f4bd9268516248f25c0d9eddeda19278dca76aaea84d38542604051808381526020018281526020019250505060405180910390a250505050505050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541115156108f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f73656e646572206d75737420626520616e20696e766573746f7200000000000081525060200191505060405180910390fd5b6000816003015414151561096e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4675636b696e6720697320616c7265616479206163746976617465640000000081525060200191505060405180910390fd5b4281600301819055503373ffffffffffffffffffffffffffffffffffffffff167fafe9b91746bb0c7b3674041c38242d1fc7a56f7ab998346536232255373c6c3d60014260405180831515151581526020018281526020019250505060405180910390a250565b6000806000803393506000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020925060008360000154111515610a9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f73656e646572206d75737420626520616e20696e766573746f7200000000000081525060200191505060405180910390fd5b6064604b846000015402811515610aad57fe5b049150826002015482111515610b51576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001807f6561726c79207769746864726177206f6e6c79206265666f726520373525206481526020017f65706f7369746073207769746864726177616c0000000000000000000000000081525060400191505060405180910390fd5b610b6883600201548361171c90919063ffffffff16565b90508373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610bb0573d6000803e3d6000fd5b508373ffffffffffffffffffffffffffffffffffffffff167fc2a65ccee1f24869c24110d00effa70494405c116f825f7c4bc9a8c4c61f52e68242604051808381526020018281526020019250505060405180910390a2610c108461173d565b50505050565b600060148201519050809050919050565b6000806000806000806000349650339550610c41866118b5565b1515610cdb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f696e766573742066726f6d20636f6e747261637473206973206e6f742073757081526020017f706f72746564000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600087111515610d53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6465706f73697420616d6f756e742063616e6e6f74206265207a65726f00000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6103e8603c8a02811515610d9f57fe5b049081150290604051600060405180830381858888f1935050505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6103e860148a02811515610e0757fe5b049081150290604051600060405180830381858888f19350505050506000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002094508460040160009054906101000a900460ff161593506000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff169250838015610ed35750825b8015610f0b57508573ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614155b1561103857606460048802811515610f1f57fe5b049150606460038802811515610f3157fe5b0490508773ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610f7a573d6000803e3d6000fd5b508573ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610fc1573d6000803e3d6000fd5b508773ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f3c5c410adfbff31bca41d5057afa8ec961a887f3a3532131567939c5dcb7ceec83854260405180848152602001838152602001828152602001935050505060405180910390a35b6000856000015414156110c35760056000815480929190600101919050555060018560040160006101000a81548160ff0219169083151502179055508573ffffffffffffffffffffffffffffffffffffffff167f1c60e9994717b7a38e90d1375a1b49c38a4c8ce7a75da9a17cb79ac3e79188f2426040518082815260200191505060405180910390a25b8685600001600082825401925050819055504285600101819055506004600081548092919060010191905055508573ffffffffffffffffffffffffffffffffffffffff167fdaa9a18108ac949df27ff6e414406ff7b98cb63e38a8ec8bd8d1f916656381cc8842604051808381526020018281526020019250505060405180910390a25050505050505050565b60008061115c8361153f565b91509150915091565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611276576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6163636573732064656e6965640000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561137f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6163636573732064656e6965640000000000000000000000000000000000000081525060200191505060405180910390fd5b60018210158015611391575060028211155b151561142b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f696e76616c6964206e756d626572206f662061646d696e60732061646472657381526020017f730000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600182141561147a5780600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506114c6565b60028214156114c55780600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5050565b60055481565b60006020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040160009054906101000a900460ff16905085565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b6000806000806000806000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002093506000846000015414156115a75760008081915080905095509550611713565b6000846003015411156115fe576115e0620151806115d286600301544261171c90919063ffffffff16565b6118c890919063ffffffff16565b9250620186a06101f485600001548502028115156115fa57fe5b0494505b61162a6201518061161c86600101544261171c90919063ffffffff16565b6118c890919063ffffffff16565b915060646001856000015484020281151561164157fe5b0495508360000154670de0b6b3a76400001115801561166c5750678ac7230489e80000846000015411155b1561168f576127106005856000015484020281151561168757fe5b04905061170d565b8360000154678ac7230489e80000111580156116b8575068015af1d78b58c40000846000015411155b156116db57612710600b85600001548402028115156116d357fe5b04905061170c565b836000015468015af1d78b58c4000011151561170b57612710600f856000015484020281151561170757fe5b0490505b5b5b80860195505b50505050915091565b60008083831115151561172e57600080fd5b82840390508091505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600090556000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600090556000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600090556000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600090558073ffffffffffffffffffffffffffffffffffffffff167fbc2d26651a09654ddcc793a5a4b05002aabb6680f39189afe97b707223041342426040518082815260200191505060405180910390a26005600081548092919060019003919050555050565b600080823b905060008114915050919050565b6000806000831115156118da57600080fd5b82848115156118e557fe5b04905080915050929150505600a165627a7a72305820a51058a87af3b2b5e0a0d24c75ea566947167eb7433ed0b3e920447e701ab9d20029"
}