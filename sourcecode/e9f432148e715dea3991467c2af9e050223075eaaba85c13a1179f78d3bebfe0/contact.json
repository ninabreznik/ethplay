{
  "address": "0xb55d46cf155c3998979d095081e1ad7a5af7bb0e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HashcoCoin",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-22\n*/\n\npragma solidity ^0.4.11;\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet\n * as they arrive.\n */\n \n \nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract ERC20Interface {\n     function totalSupply() public constant returns (uint);\n     function balanceOf(address tokenOwner) public constant returns (uint balance);\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n     function transfer(address to, uint tokens) public returns (bool success);\n     function approve(address spender, uint tokens) public returns (bool success);\n     function transferFrom(address from, address to, uint tokens) public returns (bool success);\n     event Transfer(address indexed from, address indexed to, uint tokens);\n     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract HashcoCoin is ERC20Interface,Ownable {\n\n   using SafeMath for uint256;\n   \n   string public name;\n   string public symbol;\n   uint256 public decimals;\n\n   uint256 public _totalSupply;\n   mapping(address => uint256) tokenBalances;\n   address ownerWallet;\n   // Owner of account approves the transfer of an amount to another account\n   mapping (address => mapping (address => uint256)) allowed;\n   \n   /**\n   * @dev Contructor that gives msg.sender all of existing tokens.\n   */\n    function HashcoCoin(address wallet) public {\n        owner = msg.sender;\n        ownerWallet = wallet;\n        name  = \"HashcoCoin\";\n        symbol = \"HCC\";\n        decimals = 18;\n        _totalSupply = 60000000 * 10 ** uint(decimals);\n        tokenBalances[wallet] = _totalSupply;   //Since we divided the token into 10^18 parts\n    }\n    \n     // Get the token balance for account `tokenOwner`\n     function balanceOf(address tokenOwner) public constant returns (uint balance) {\n         return tokenBalances[tokenOwner];\n     }\n  \n     // Transfer the balance from owner's account to another account\n     function transfer(address to, uint tokens) public returns (bool success) {\n         require(to != address(0));\n         require(tokens <= tokenBalances[msg.sender]);\n         tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(tokens);\n         tokenBalances[to] = tokenBalances[to].add(tokens);\n         Transfer(msg.sender, to, tokens);\n         return true;\n     }\n  \n     /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= tokenBalances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    tokenBalances[_from] = tokenBalances[_from].sub(_value);\n    tokenBalances[_to] = tokenBalances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n  \n     /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n     // ------------------------------------------------------------------------\n     // Total supply\n     // ------------------------------------------------------------------------\n     function totalSupply() public constant returns (uint) {\n         return _totalSupply  - tokenBalances[address(0)];\n     }\n     \n    \n     \n     // ------------------------------------------------------------------------\n     // Returns the amount of tokens approved by the owner that can be\n     // transferred to the spender's account\n     // ------------------------------------------------------------------------\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n         return allowed[tokenOwner][spender];\n     }\n     \n     /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n     \n     // ------------------------------------------------------------------------\n     // Don't accept ETH\n     // ------------------------------------------------------------------------\n     function () public payable {\n         revert();\n     }\n \n \n     // ------------------------------------------------------------------------\n     // Owner can transfer out any accidentally sent ERC20 tokens\n     // ------------------------------------------------------------------------\n     function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n         return ERC20Interface(tokenAddress).transfer(owner, tokens);\n     }\n     \n     //only to be used by the ICO\n     \n     function mint(address wallet, address buyer, uint256 tokenAmount) public onlyOwner {\n      require(tokenBalances[wallet] >= tokenAmount);               // checks if it has enough to sell\n      tokenBalances[buyer] = tokenBalances[buyer].add(tokenAmount);                  // adds the amount to buyer's balance\n      tokenBalances[wallet] = tokenBalances[wallet].sub(tokenAmount);                        // subtracts amount from seller's balance\n      Transfer(wallet, buyer, tokenAmount); \n      _totalSupply = _totalSupply.sub(tokenAmount);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b604051602080610e1b8339810160405280805160008054600160a060020a03338116600160a060020a0319928316811783161790925560068054928416929091169190911790559150604090508051908101604052600a81527f48617368636f436f696e00000000000000000000000000000000000000000000602082015260019080516100a192916020019061011f565b5060408051908101604052600381527f4843430000000000000000000000000000000000000000000000000000000000602082015260029080516100e992916020019061011f565b5060126003556a31a17e847807b1bc0000006004819055600160a060020a039091166000908152600560205260409020556101ba565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061016057805160ff191683800117855561018d565b8280016001018555821561018d579182015b8281111561018d578251825591602001919060010190610172565b5061019992915061019d565b5090565b6101b791905b8082111561019957600081556001016101a3565b90565b610c52806101c96000396000f3006060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ea578063095ea7b31461017457806318160ddd146101aa57806323b872dd146101cf578063313ce567146101f75780633eaaf86b1461020a578063661884631461021d57806370a082311461023f5780638da5cb5b1461025e57806395d89b411461028d578063a9059cbb146102a0578063c6c3bbe6146102c2578063d73dd623146102ec578063dc39d06d1461030e578063dd62ed3e14610330578063f2fde38b14610355575b600080fd5b34156100f557600080fd5b6100fd610374565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610139578082015183820152602001610121565b50505050905090810190601f1680156101665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017f57600080fd5b610196600160a060020a0360043516602435610412565b604051901515815260200160405180910390f35b34156101b557600080fd5b6101bd61047e565b60405190815260200160405180910390f35b34156101da57600080fd5b610196600160a060020a03600435811690602435166044356104b0565b341561020257600080fd5b6101bd610632565b341561021557600080fd5b6101bd610638565b341561022857600080fd5b610196600160a060020a036004351660243561063e565b341561024a57600080fd5b6101bd600160a060020a0360043516610738565b341561026957600080fd5b610271610753565b604051600160a060020a03909116815260200160405180910390f35b341561029857600080fd5b6100fd610762565b34156102ab57600080fd5b610196600160a060020a03600435166024356107cd565b34156102cd57600080fd5b6102ea600160a060020a03600435811690602435166044356108c8565b005b34156102f757600080fd5b610196600160a060020a03600435166024356109d8565b341561031957600080fd5b610196600160a060020a0360043516602435610a7c565b341561033b57600080fd5b6101bd600160a060020a0360043581169060243516610b38565b341561036057600080fd5b6102ea600160a060020a0360043516610b63565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561040a5780601f106103df5761010080835404028352916020019161040a565b820191906000526020600020905b8154815290600101906020018083116103ed57829003601f168201915b505050505081565b600160a060020a03338116600081815260076020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6000805260056020527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc546004540390565b6000600160a060020a03831615156104c757600080fd5b600160a060020a0384166000908152600560205260409020548211156104ec57600080fd5b600160a060020a038085166000908152600760209081526040808320339094168352929052205482111561051f57600080fd5b600160a060020a038416600090815260056020526040902054610548908363ffffffff610bfe16565b600160a060020a03808616600090815260056020526040808220939093559085168152205461057d908363ffffffff610c1016565b600160a060020a038085166000908152600560209081526040808320949094558783168252600781528382203390931682529190915220546105c5908363ffffffff610bfe16565b600160a060020a03808616600081815260076020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60035481565b60045481565b600160a060020a0333811660009081526007602090815260408083209386168352929052908120548083111561069b57600160a060020a0333811660009081526007602090815260408083209388168352929052908120556106d2565b6106ab818463ffffffff610bfe16565b600160a060020a033381166000908152600760209081526040808320938916835292905220555b600160a060020a0333811660008181526007602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526005602052604090205490565b600054600160a060020a031681565b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561040a5780601f106103df5761010080835404028352916020019161040a565b6000600160a060020a03831615156107e457600080fd5b600160a060020a03331660009081526005602052604090205482111561080957600080fd5b600160a060020a033316600090815260056020526040902054610832908363ffffffff610bfe16565b600160a060020a033381166000908152600560205260408082209390935590851681522054610867908363ffffffff610c1016565b600160a060020a0380851660008181526005602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60005433600160a060020a039081169116146108e357600080fd5b600160a060020a0383166000908152600560205260409020548190101561090957600080fd5b600160a060020a038216600090815260056020526040902054610932908263ffffffff610c1016565b600160a060020a038084166000908152600560205260408082209390935590851681522054610967908263ffffffff610bfe16565b600160a060020a038085166000818152600560205260409081902093909355908416917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a36004546109d0908263ffffffff610bfe16565b600455505050565b600160a060020a033381166000908152600760209081526040808320938616835292905290812054610a10908363ffffffff610c1016565b600160a060020a0333811660008181526007602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b6000805433600160a060020a03908116911614610a9857600080fd5b60008054600160a060020a038086169263a9059cbb92909116908590604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610b1757600080fd5b6102c65a03f11515610b2857600080fd5b5050506040518051949350505050565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b60005433600160a060020a03908116911614610b7e57600080fd5b600160a060020a0381161515610b9357600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610c0a57fe5b50900390565b600082820183811015610c1f57fe5b93925050505600a165627a7a7230582069370ae7fe1518d20e663cf59d3713810581ece56d90b94a67db9dd044b93ec60029000000000000000000000000d2784df945232d3af2f3165e16635b81a12ca963",
  "constructorArguments": "000000000000000000000000d2784df945232d3af2f3165e16635b81a12ca963"
}