{
  "address": "0x4b599012547191f19afc7d9f347ecab0cfdac840",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WhiskyToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-01\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Operated\n * @dev The Operated contract has a list of ops addresses, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Operated {\n    mapping(address => bool) private _ops;\n\n    event OperatorChanged(\n        address indexed operator,\n        bool active\n    );\n\n    /**\n     * @dev The Operated constructor sets the original ops account of the contract to the sender\n     * account.\n     */\n    constructor() internal {\n        _ops[msg.sender] = true;\n        emit OperatorChanged(msg.sender, true);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the operations accounts.\n     */\n    modifier onlyOps() {\n        require(isOps(), \"only operations accounts are allowed to call this function\");\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is an operator.\n     */\n    function isOps() public view returns(bool) {\n        return _ops[msg.sender];\n    }\n\n    /**\n     * @dev Allows the current operations accounts to give control of the contract to new accounts.\n     * @param _account The address of the new account\n     * @param _active Set active (true) or inactive (false)\n     */\n    function setOps(address _account, bool _active) public onlyOps {\n        _ops[_account] = _active;\n        emit OperatorChanged(_account, _active);\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns(address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns(bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title WHISKY TOKEN\n * @author WHYTOKEN GmbH\n * @notice WHISKY TOKEN (WHY) stands for a disruptive new possibility in the crypto currency market\n * due to the combination of High-End Whisky and Blockchain technology.\n * WHY is a german based token, which lets everyone participate in the lucrative crypto market\n * with minimal risk and effort through a high-end whisky portfolio as security.\n */\ncontract WhiskyToken is IERC20, Ownable, Operated {\n    using SafeMath for uint256;\n    using SafeMath for uint64;\n\n    // ERC20 standard variables\n    string public name = \"Whisky Token\";\n    string public symbol = \"WHY\";\n    uint8 public decimals = 18;\n    uint256 public initialSupply = 28100000 * (10 ** uint256(decimals));\n    uint256 public totalSupply;\n\n    // Address of the ICO contract\n    address public crowdSaleContract;\n\n    // The asset value of the whisky in EUR cents\n    uint64 public assetValue;\n\n    // Fee to charge on every transfer (e.g. 15 is 1,5%)\n    uint64 public feeCharge;\n\n    // Global freeze of all transfers\n    bool public freezeTransfer;\n\n    // Flag to make all token available\n    bool private tokenAvailable;\n\n    // Maximum value for feeCharge\n    uint64 private constant feeChargeMax = 20;\n\n    // Address of the account/wallet which should receive the fees\n    address private feeReceiver;\n\n    // Mappings of addresses for balances, allowances and frozen accounts\n    mapping(address => uint256) internal balances;\n    mapping(address => mapping (address => uint256)) internal allowed;\n    mapping(address => bool) public frozenAccount;\n\n    // Event definitions\n    event Fee(address indexed payer, uint256 fee);\n    event FeeCharge(uint64 oldValue, uint64 newValue);\n    event AssetValue(uint64 oldValue, uint64 newValue);\n    event Burn(address indexed burner, uint256 value);\n    event FrozenFunds(address indexed target, bool frozen);\n    event FreezeTransfer(bool frozen);\n\n    // Constructor which gets called once on contract deployment\n    constructor(address _tokenOwner) public {\n        transferOwnership(_tokenOwner);\n        setOps(_tokenOwner, true);\n        crowdSaleContract = msg.sender;\n        feeReceiver = _tokenOwner;\n        totalSupply = initialSupply;\n        balances[msg.sender] = initialSupply;\n        assetValue = 0;\n        feeCharge = 15;\n        freezeTransfer = true;\n        tokenAvailable = true;\n    }\n\n    /**\n     * @notice Returns the total supply of tokens.\n     * @dev The total supply is the amount of tokens which are currently in circulation.\n     * @return Amount of tokens in Sip.\n     */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply;\n    }\n\n    /**\n     * @notice Gets the balance of the specified address.\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount of tokens owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        if (!tokenAvailable) {\n            return 0;\n        }\n        return balances[_owner];\n    }\n\n    /**\n     * @dev Internal transfer, can only be called by this contract.\n     * Will throw an exception to rollback the transaction if anything is wrong.\n     * @param _from The address from which the tokens should be transfered from.\n     * @param _to The address to which the tokens should be transfered to.\n     * @param _value The amount of tokens which should be transfered in Sip.\n     */\n    function _transfer(address _from, address _to, uint256 _value) internal {\n        require(_to != address(0), \"zero address is not allowed\");\n        require(_value >= 1000, \"must transfer more than 1000 sip\");\n        require(!freezeTransfer || isOps(), \"all transfers are currently frozen\");\n        require(!frozenAccount[_from], \"sender address is frozen\");\n        require(!frozenAccount[_to], \"receiver address is frozen\");\n\n        uint256 transferValue = _value;\n        if (msg.sender != owner() && msg.sender != crowdSaleContract) {\n            uint256 fee = _value.div(1000).mul(feeCharge);\n            transferValue = _value.sub(fee);\n            balances[feeReceiver] = balances[feeReceiver].add(fee);\n            emit Fee(msg.sender, fee);\n            emit Transfer(_from, feeReceiver, fee);\n        }\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(transferValue);\n        if (tokenAvailable) {\n            emit Transfer(_from, _to, transferValue);\n        }\n    }\n\n    /**\n     * @notice Transfer tokens to a specified address. The message sender has to pay the fee.\n     * @dev Calls _transfer with message sender address as _from parameter.\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred in Sip.\n     * @return Indicates if the transfer was successful.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @notice Transfer tokens from one address to another. The message sender has to pay the fee.\n     * @dev Calls _transfer with the addresses provided by the transactor.\n     * @param _from The address which you want to send tokens from.\n     * @param _to The address which you want to transfer to.\n     * @param _value The amount of tokens to be transferred in Sip.\n     * @return Indicates if the transfer was successful.\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_value <= allowed[_from][msg.sender], \"requesting more token than allowed\");\n\n        _transfer(_from, _to, _value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        return true;\n    }\n\n    /**\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of the transactor.\n     * @dev Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which is allowed to retrieve the tokens.\n     * @param _value The amount of tokens to be spent in Sip.\n     * @return Indicates if the approval was successful.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        require(!freezeTransfer || isOps(), \"all transfers are currently frozen\");\n        require(_spender != address(0), \"zero address is not allowed\");\n        require(_value >= 1000, \"must approve more than 1000 sip\");\n\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @notice Returns the amount of tokens that the owner allowed to the spender.\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner The address which owns the tokens.\n     * @param _spender The address which is allowed to retrieve the tokens.\n     * @return The amount of tokens still available for the spender in Sip.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @notice Increase the amount of tokens that an owner allowed to a spender.\n     * @dev Approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which is allowed to retrieve the tokens.\n     * @param _addedValue The amount of tokens to increase the allowance by in Sip.\n     * @return Indicates if the approval was successful.\n     */\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n        require(!freezeTransfer || isOps(), \"all transfers are currently frozen\");\n        require(_spender != address(0), \"zero address is not allowed\");\n        require(_addedValue >= 1000, \"must approve more than 1000 sip\");\n        \n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @notice Decrease the amount of tokens that an owner allowed to a spender. \n     * @dev Approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which is allowed to retrieve the tokens.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by in Sip.\n     * @return Indicates if the approval was successful.\n     */\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n        require(!freezeTransfer || isOps(), \"all transfers are currently frozen\");\n        require(_spender != address(0), \"zero address is not allowed\");\n        require(_subtractedValue >= 1000, \"must approve more than 1000 sip\");\n\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    } \n\n    /**\n     * @notice Burns a specific amount of tokens.\n     * @dev Tokens get technically destroyed by this function and are therefore no longer in circulation afterwards.\n     * @param _value The amount of token to be burned in Sip.\n     */\n    function burn(uint256 _value) public {\n        require(!freezeTransfer || isOps(), \"all transfers are currently frozen\");\n        require(_value <= balances[msg.sender], \"address has not enough token to burn\");\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(burner, _value);\n        emit Transfer(burner, address(0), _value);\n    }\n\n    /**\n     * @notice Not for public use!\n     * @dev Modifies the assetValue which represents the monetized value (in EUR) of the whisky baking the token.\n     * @param _value The new value of the asset in EUR cents.\n     */\n    function setAssetValue(uint64 _value) public onlyOwner {\n        uint64 oldValue = assetValue;\n        assetValue = _value;\n        emit AssetValue(oldValue, _value);\n    }\n\n    /**\n     * @notice Not for public use!\n     * @dev Modifies the feeCharge which calculates the fee for each transaction.\n     * @param _value The new value of the feeCharge as fraction of 1000 (e.g. 15 is 1,5%).\n     */\n    function setFeeCharge(uint64 _value) public onlyOwner {\n        require(_value <= feeChargeMax, \"can not increase fee charge over it's limit\");\n        uint64 oldValue = feeCharge;\n        feeCharge = _value;\n        emit FeeCharge(oldValue, _value);\n    }\n\n\n    /**\n     * @notice Not for public use!\n     * @dev Prevents/Allows target from sending & receiving tokens.\n     * @param _target Address to be frozen.\n     * @param _freeze Either to freeze or unfreeze it.\n     */\n    function freezeAccount(address _target, bool _freeze) public onlyOwner {\n        require(_target != address(0), \"zero address is not allowed\");\n\n        frozenAccount[_target] = _freeze;\n        emit FrozenFunds(_target, _freeze);\n    }\n\n    /**\n     * @notice Not for public use!\n     * @dev Globally freeze all transfers for the token.\n     * @param _freeze Freeze or unfreeze every transfer.\n     */\n    function setFreezeTransfer(bool _freeze) public onlyOwner {\n        freezeTransfer = _freeze;\n        emit FreezeTransfer(_freeze);\n    }\n\n    /**\n     * @notice Not for public use!\n     * @dev Allows the owner to set the address which receives the fees.\n     * @param _feeReceiver the address which should receive fees.\n     */\n    function setFeeReceiver(address _feeReceiver) public onlyOwner {\n        require(_feeReceiver != address(0), \"zero address is not allowed\");\n        feeReceiver = _feeReceiver;\n    }\n\n    /**\n     * @notice Not for public use!\n     * @dev Make all tokens available for ERC20 wallets.\n     * @param _available Activate or deactivate all tokens\n     */\n    function setTokenAvailable(bool _available) public onlyOwner {\n        tokenAvailable = _available;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setOps\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"setFreezeTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeCharge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint64\"}],\"name\":\"setAssetValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_available\",\"type\":\"bool\"}],\"name\":\"setTokenAvailable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezeTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOps\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assetValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint64\"}],\"name\":\"setFeeCharge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Fee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"FeeCharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"AssetValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FreezeTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60c0604052600c60808190527f576869736b7920546f6b656e000000000000000000000000000000000000000060a090815262000040916002919062000409565b506040805180820190915260038082527f5748590000000000000000000000000000000000000000000000000000000000602090920191825262000085918162000409565b5060048054601260ff19909116179081905560ff16600a0a6301acc5a002600555348015620000b357600080fd5b5060405160208062001fe2833981016040819052905160008054600160a060020a03191633178082559192600160a060020a03929092169160008051602062001fc2833981519152908290a333600081815260016020818152604092839020805460ff191683179055825191825291517f193de8d500b5cb7b720089b258a39e9c1d0b840019a73ae7c51c3f9101732b02929181900390910190a2620001628164010000000062000244810204565b620001788160016401000000006200027a810204565b60078054600160a060020a03191633908117825560088054600160a060020a03949094166a0100000000000000000000027fffff0000000000000000000000000000000000000000ffffffffffffffffffff909416939093178355600554600681905560009182526009602052604090912055805460a060020a60e060020a03191690558054604860020a60ff0219604060020a60ff021967ffffffffffffffff19909216600f17919091166801000000000000000017166901000000000000000000179055620004ab565b6200025764010000000062000381810204565b15156200026357600080fd5b620002778164010000000062000393810204565b50565b6200028d640100000000620003f3810204565b15156200032157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f6f6e6c79206f7065726174696f6e73206163636f756e74732061726520616c6c60448201527f6f77656420746f2063616c6c20746869732066756e6374696f6e000000000000606482015290519081900360840190fd5b600160a060020a038216600081815260016020908152604091829020805460ff1916851515908117909155825190815291517f193de8d500b5cb7b720089b258a39e9c1d0b840019a73ae7c51c3f9101732b029281900390910190a25050565b600054600160a060020a031633145b90565b600160a060020a0381161515620003a957600080fd5b60008054604051600160a060020a038085169392169160008051602062001fc283398151915291a360008054600160a060020a031916600160a060020a0392909216919091179055565b3360009081526001602052604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200044c57805160ff19168380011785556200047c565b828001600101855582156200047c579182015b828111156200047c5782518255916020019190600101906200045f565b506200048a9291506200048e565b5090565b6200039091905b808211156200048a576000815560010162000495565b611b0780620004bb6000396000f30060806040526004361061017f5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610184578063095ea7b31461020e57806318160ddd14610246578063208322191461026d57806323b872dd14610295578063313ce567146102bf578063378dc3dc146102ea5780633ce276f5146102ff578063422021a71461031957806342966c681461034b57806351aadcdf1461036357806363b75b591461039457806366188463146103b657806370a08231146103da578063715018a6146103fb5780638055935714610410578063875606a11461042a5780638da5cb5b1461043f5780638f32d59b1461045457806395d89b4114610469578063a6b084981461047e578063a71891c314610493578063a9059cbb146104a8578063b414d4b6146104cc578063cb22fd59146104ed578063d73dd6231461050f578063dd62ed3e14610533578063e724529c1461055a578063efdcd97414610580578063f2fde38b146105a1575b600080fd5b34801561019057600080fd5b506101996105c2565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101d35781810151838201526020016101bb565b50505050905090810190601f1680156102005780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021a57600080fd5b50610232600160a060020a036004351660243561064d565b604080519115158252519081900360200190f35b34801561025257600080fd5b5061025b6107d2565b60408051918252519081900360200190f35b34801561027957600080fd5b50610293600160a060020a036004351660243515156107d8565b005b3480156102a157600080fd5b50610232600160a060020a03600435811690602435166044356108bc565b3480156102cb57600080fd5b506102d46109ca565b6040805160ff9092168252519081900360200190f35b3480156102f657600080fd5b5061025b6109d3565b34801561030b57600080fd5b5061029360043515156109d9565b34801561032557600080fd5b5061032e610a49565b6040805167ffffffffffffffff9092168252519081900360200190f35b34801561035757600080fd5b50610293600435610a59565b34801561036f57600080fd5b50610378610c2f565b60408051600160a060020a039092168252519081900360200190f35b3480156103a057600080fd5b5061029367ffffffffffffffff60043516610c3e565b3480156103c257600080fd5b50610232600160a060020a0360043516602435610cec565b3480156103e657600080fd5b5061025b600160a060020a0360043516610eff565b34801561040757600080fd5b50610293610f43565b34801561041c57600080fd5b506102936004351515610fad565b34801561043657600080fd5b50610232610fea565b34801561044b57600080fd5b50610378610fff565b34801561046057600080fd5b5061023261100e565b34801561047557600080fd5b5061019961101f565b34801561048a57600080fd5b5061023261107a565b34801561049f57600080fd5b5061032e611090565b3480156104b457600080fd5b50610232600160a060020a03600435166024356110b8565b3480156104d857600080fd5b50610232600160a060020a03600435166110ce565b3480156104f957600080fd5b5061029367ffffffffffffffff600435166110e3565b34801561051b57600080fd5b50610232600160a060020a03600435166024356111e7565b34801561053f57600080fd5b5061025b600160a060020a036004358116906024351661139e565b34801561056657600080fd5b50610293600160a060020a036004351660243515156113c9565b34801561058c57600080fd5b50610293600160a060020a036004351661148a565b3480156105ad57600080fd5b50610293600160a060020a0360043516611533565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156106455780601f1061061a57610100808354040283529160200191610645565b820191906000526020600020905b81548152906001019060200180831161062857829003601f168201915b505050505081565b60085460009068010000000000000000900460ff161580610671575061067161107a565b15156106c3576040805160e560020a62461bcd0281526020600482015260226024820152600080516020611a9c833981519152604482015260f160020a6132b702606482015290519081900360840190fd5b600160a060020a0383161515610711576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020611abc833981519152604482015290519081900360640190fd5b6103e882101561076b576040805160e560020a62461bcd02815260206004820152601f60248201527f6d75737420617070726f7665206d6f7265207468616e20313030302073697000604482015290519081900360640190fd5b336000818152600a60209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60065490565b6107e061107a565b151561085c576040805160e560020a62461bcd02815260206004820152603a60248201527f6f6e6c79206f7065726174696f6e73206163636f756e74732061726520616c6c60448201527f6f77656420746f2063616c6c20746869732066756e6374696f6e000000000000606482015290519081900360840190fd5b600160a060020a038216600081815260016020908152604091829020805460ff1916851515908117909155825190815291517f193de8d500b5cb7b720089b258a39e9c1d0b840019a73ae7c51c3f9101732b029281900390910190a25050565b600160a060020a0383166000908152600a6020908152604080832033845290915281205482111561095d576040805160e560020a62461bcd02815260206004820152602260248201527f72657175657374696e67206d6f726520746f6b656e207468616e20616c6c6f7760448201527f6564000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b610968848484611552565b600160a060020a0384166000908152600a6020908152604080832033845290915290205461099c908363ffffffff61199d16565b600160a060020a0385166000908152600a602090815260408083203384529091529020555060019392505050565b60045460ff1681565b60055481565b6109e161100e565b15156109ec57600080fd5b6008805482151568010000000000000000810268ff0000000000000000199092169190911790915560408051918252517fe6d5073025a090a43ec37b0b9a174aa63374bc8b24f7569c9d865e5ca8464fd39181900360200190a150565b60085467ffffffffffffffff1681565b60085460009068010000000000000000900460ff161580610a7d5750610a7d61107a565b1515610acf576040805160e560020a62461bcd0281526020600482015260226024820152600080516020611a9c833981519152604482015260f160020a6132b702606482015290519081900360840190fd5b33600090815260096020526040902054821115610b5b576040805160e560020a62461bcd028152602060048201526024808201527f6164647265737320686173206e6f7420656e6f75676820746f6b656e20746f2060448201527f6275726e00000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b5033600081815260096020526040902054610b7c908363ffffffff61199d16565b600160a060020a038216600090815260096020526040902055600654610ba8908363ffffffff61199d16565b600655604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518381529051600091600160a060020a038416917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600754600160a060020a031681565b6000610c4861100e565b1515610c5357600080fd5b506007805467ffffffffffffffff838116740100000000000000000000000000000000000000008181027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff8516179094556040805194909304919091168084526020840191909152815190927f41dad6d9a2e50aa455eec89501bda996a0933a013c922a3a09c44504cfad3cae92908290030190a15050565b600854600090819068010000000000000000900460ff161580610d125750610d1261107a565b1515610d64576040805160e560020a62461bcd0281526020600482015260226024820152600080516020611a9c833981519152604482015260f160020a6132b702606482015290519081900360840190fd5b600160a060020a0384161515610db2576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020611abc833981519152604482015290519081900360640190fd5b6103e8831015610e0c576040805160e560020a62461bcd02815260206004820152601f60248201527f6d75737420617070726f7665206d6f7265207468616e20313030302073697000604482015290519081900360640190fd5b50336000908152600a60209081526040808320600160a060020a038716845290915290205480831115610e6257336000908152600a60209081526040808320600160a060020a0388168452909152812055610e97565b610e72818463ffffffff61199d16565b336000908152600a60209081526040808320600160a060020a03891684529091529020555b336000818152600a60209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a3600191505b5092915050565b6008546000906901000000000000000000900460ff161515610f2357506000610f3e565b50600160a060020a0381166000908152600960205260409020545b919050565b610f4b61100e565b1515610f5657600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b610fb561100e565b1515610fc057600080fd5b6008805491151569010000000000000000000269ff00000000000000000019909216919091179055565b60085468010000000000000000900460ff1681565b600054600160a060020a031690565b600054600160a060020a0316331490565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106455780601f1061061a57610100808354040283529160200191610645565b3360009081526001602052604090205460ff1690565b60075474010000000000000000000000000000000000000000900467ffffffffffffffff1681565b60006110c5338484611552565b50600192915050565b600b6020526000908152604090205460ff1681565b60006110ed61100e565b15156110f857600080fd5b601467ffffffffffffffff83161115611181576040805160e560020a62461bcd02815260206004820152602b60248201527f63616e206e6f7420696e6372656173652066656520636861726765206f76657260448201527f2069742773206c696d6974000000000000000000000000000000000000000000606482015290519081900360840190fd5b506008805467ffffffffffffffff83811667ffffffffffffffff19831681179093556040805191909216808252602082019390935281517fda2d369d22ff121f606851d8825f57696ca24b66b217c1d9e1d957eaf627cfcc929181900390910190a15050565b60085460009068010000000000000000900460ff16158061120b575061120b61107a565b151561125d576040805160e560020a62461bcd0281526020600482015260226024820152600080516020611a9c833981519152604482015260f160020a6132b702606482015290519081900360840190fd5b600160a060020a03831615156112ab576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020611abc833981519152604482015290519081900360640190fd5b6103e8821015611305576040805160e560020a62461bcd02815260206004820152601f60248201527f6d75737420617070726f7665206d6f7265207468616e20313030302073697000604482015290519081900360640190fd5b336000908152600a60209081526040808320600160a060020a0387168452909152902054611339908363ffffffff6119b416565b336000818152600a60209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a039182166000908152600a6020908152604080832093909416825291909152205490565b6113d161100e565b15156113dc57600080fd5b600160a060020a038216151561142a576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020611abc833981519152604482015290519081900360640190fd5b600160a060020a0382166000818152600b6020908152604091829020805460ff1916851515908117909155825190815291517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a25050565b61149261100e565b151561149d57600080fd5b600160a060020a03811615156114eb576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020611abc833981519152604482015290519081900360640190fd5b60088054600160a060020a039092166a0100000000000000000000027fffff0000000000000000000000000000000000000000ffffffffffffffffffff909216919091179055565b61153b61100e565b151561154657600080fd5b61154f816119cd565b50565b600080600160a060020a03841615156115a3576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020611abc833981519152604482015290519081900360640190fd5b6103e88310156115fd576040805160e560020a62461bcd02815260206004820181905260248201527f6d757374207472616e73666572206d6f7265207468616e203130303020736970604482015290519081900360640190fd5b60085468010000000000000000900460ff16158061161e575061161e61107a565b1515611670576040805160e560020a62461bcd0281526020600482015260226024820152600080516020611a9c833981519152604482015260f160020a6132b702606482015290519081900360840190fd5b600160a060020a0385166000908152600b602052604090205460ff16156116e1576040805160e560020a62461bcd02815260206004820152601860248201527f73656e64657220616464726573732069732066726f7a656e0000000000000000604482015290519081900360640190fd5b600160a060020a0384166000908152600b602052604090205460ff1615611752576040805160e560020a62461bcd02815260206004820152601a60248201527f726563656976657220616464726573732069732066726f7a656e000000000000604482015290519081900360640190fd5b82915061175d610fff565b600160a060020a031633600160a060020a0316141580156117895750600754600160a060020a03163314155b156118bb576008546117bd9067ffffffffffffffff166117b1856103e863ffffffff611a4a16565b9063ffffffff611a6d16565b90506117cf838263ffffffff61199d16565b6008546a01000000000000000000009004600160a060020a031660009081526009602052604090205490925061180590826119b4565b6008546a01000000000000000000009004600160a060020a0316600090815260096020908152604091829020929092558051838152905133927f7bd3aa7d673767f759ebf216e7f6c12844986c661ae6e0f1d988cf7eb7394d1d928290030190a2600854604080518381529051600160a060020a036a01000000000000000000009093048316928816917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35b600160a060020a0385166000908152600960205260409020546118e4908463ffffffff61199d16565b600160a060020a038087166000908152600960205260408082209390935590861681522054611919908363ffffffff6119b416565b600160a060020a0385166000908152600960205260409020556008546901000000000000000000900460ff16156119965783600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b5050505050565b600080838311156119ad57600080fd5b5050900390565b6000828201838110156119c657600080fd5b9392505050565b600160a060020a03811615156119e257600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080808311611a5957600080fd5b8284811515611a6457fe5b04949350505050565b600080831515611a805760009150610ef8565b50828202828482811515611a9057fe5b04146119c657600080fd00616c6c207472616e7366657273206172652063757272656e746c792066726f7a7a65726f2061646472657373206973206e6f7420616c6c6f7765640000000000a165627a7a72305820ed10ac8fafe0bf026ec8db551deea291e42de9a1e011026345dfd13efc4f866100298be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0000000000000000000000000c084ab7b789c216407b623546e3fab9414c4dfdb",
  "constructorArguments": "000000000000000000000000c084ab7b789c216407b623546e3fab9414c4dfdb"
}