{
  "address": "0x12eb08e27eec735a16db29b660070cf10808de63",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VestingContract",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-16\n*/\n\npragma solidity ^0.4.15;\n\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    function Owned() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        assert(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != owner);\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = 0x0;\n    }\n\n    event OwnerUpdate(address _prevOwner, address _newOwner);\n}\n\ncontract IERC20Token {\n  function totalSupply() constant returns (uint256 totalSupply);\n  function balanceOf(address _owner) constant returns (uint256 balance) {}\n  function transfer(address _to, uint256 _value) returns (bool success) {}\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n  function approve(address _spender, uint256 _value) returns (bool success) {}\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\ncontract VestingContract is Owned {\n    \n    address public withdrawalAddress;\n    address public tokenAddress;\n    \n    uint public lastBlockClaimed;\n    uint public blockDelay;\n    uint public reward;\n    \n    event ClaimExecuted(uint _amount, uint _blockNumber, address _destination);\n    \n    function VestingContract() {\n        \n        lastBlockClaimed = 4315256;\n        blockDelay = 5082;\n        reward = 5000000000000000000000;\n        \n        tokenAddress = 0x2C974B2d0BA1716E644c1FC59982a89DDD2fF724;\n    }\n    \n    function claimReward() public onlyOwner {\n        require(block.number >= lastBlockClaimed + blockDelay);\n        uint withdrawalAmount;\n        if (IERC20Token(tokenAddress).balanceOf(address(this)) > reward) {\n            withdrawalAmount = reward;\n        }else {\n            withdrawalAmount = IERC20Token(tokenAddress).balanceOf(address(this));\n        }\n        IERC20Token(tokenAddress).transfer(withdrawalAddress, withdrawalAmount);\n        lastBlockClaimed += blockDelay;\n        ClaimExecuted(withdrawalAmount, block.number, withdrawalAddress);\n    }\n    \n    function salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) public onlyOwner {\n        require(_tokenAddress != tokenAddress);\n        \n        IERC20Token(_tokenAddress).transfer(_to, _amount);\n    }\n    \n    //\n    // Setters\n    //\n\n    function setWithdrawalAddress(address _newAddress) public onlyOwner {\n        withdrawalAddress = _newAddress;\n    }\n    \n    function setBlockDelay(uint _newBlockDelay) public onlyOwner {\n        blockDelay = _newBlockDelay;\n    }\n    \n    //\n    // Getters\n    //\n    \n    function getTokenBalance() public constant returns(uint) {\n        return IERC20Token(tokenAddress).balanceOf(address(this));\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506241d8786004819055506113da60058190555069010f0cf064dd59200000600681905550732c974b2d0ba1716e644c1fc59982a89ddd2ff724600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610ef4806100d76000396000f300606060405236156100ce576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806321b8092e146100d3578063228cb7331461010c57806379ba50971461013557806382b2e2571461014a5780638da5cb5b146101735780639d76ea58146101c8578063a0929cda1461021d578063b88a802f1461027e578063d4ee1d9014610293578063d98f6088146102e8578063f2bcd02214610311578063f2fde38b14610366578063f4d218f91461039f578063fa67ae5a146103c8575b600080fd5b34156100de57600080fd5b61010a600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506103eb565b005b341561011757600080fd5b61011f610487565b6040518082815260200191505060405180910390f35b341561014057600080fd5b61014861048d565b005b341561015557600080fd5b61015d610669565b6040518082815260200191505060405180910390f35b341561017e57600080fd5b610186610750565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101d357600080fd5b6101db610775565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561022857600080fd5b61027c600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061079b565b005b341561028957600080fd5b61029161091c565b005b341561029e57600080fd5b6102a6610d16565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102f357600080fd5b6102fb610d3c565b6040518082815260200191505060405180910390f35b341561031c57600080fd5b610324610d42565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561037157600080fd5b61039d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d68565b005b34156103aa57600080fd5b6103b2610e60565b6040518082815260200191505060405180910390f35b34156103d357600080fd5b6103e96004808035906020019091905050610e66565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561044357fe5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60065481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104e957600080fd5b7f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561073057600080fd5b6102c65a03f1151561074157600080fd5b50505060405180519050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f357fe5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561085057600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156108fb57600080fd5b6102c65a03f1151561090c57600080fd5b5050506040518051905050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561097657fe5b60055460045401431015151561098b57600080fd5b600654600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610a5357600080fd5b6102c65a03f11515610a6457600080fd5b505050604051805190501115610a7e576006549050610b61565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610b4357600080fd5b6102c65a03f11515610b5457600080fd5b5050506040518051905090505b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610c5057600080fd5b6102c65a03f11515610c6157600080fd5b50505060405180519050506005546004600082825401925050819055507f1db38da2cfe44b50604674302d346eee06a6b387fd6a5d192c31e221fb0676068143600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610dc057fe5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610e1c57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60045481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ebe57fe5b80600581905550505600a165627a7a723058203c5233dc239d9eb24ac0d3259ed335656318d459b3192d8b62a233b5a1fc14620029"
}