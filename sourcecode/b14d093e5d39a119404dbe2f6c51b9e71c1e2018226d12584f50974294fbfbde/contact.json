{
  "address": "0x275e97e63cb4d0f7b7185301deff99bebf44a223",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HZaddToken",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-23\n*/\n\npragma solidity >= 0.5.4 ;\n\nlibrary SafeMath {\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n  \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n       \n        require(b > 0);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\n\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    \n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    \n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    \n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n   \n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n   \n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n   \n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n\ncontract Pausable is Ownable{\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    \n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    \n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n   \n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    \n    function pause() public onlyOwner whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    \n    function unpause() public onlyOwner whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n\ncontract TokenERC20{\n    using SafeMath for uint256;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    uint256 public totalSupply;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    event Burn(address indexed from, uint256 value);\n\n    \n    constructor(uint256 initialSupply,string memory tokenName,string memory tokenSymbol) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  \n        balanceOf[msg.sender] = totalSupply;                \n        name = tokenName;                                  \n        symbol = tokenSymbol;                              \n    }\n\n    \n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != address(0x0));\n\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n\n        emit Transfer(_from, _to, _value);\n    }\n\n    \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n   \n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n   \n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n   \n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n            return true;\n        }\n    }\n\n   \n    function burn(uint256 _value) public returns (bool success) {\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);             \n        totalSupply = totalSupply.sub(_value);                                 \n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    \n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        balanceOf[_from] = balanceOf[_from].sub(_value);                                        \n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);                \n        totalSupply = totalSupply.sub(_value);                                                  \n        emit Burn(_from, _value);\n        return true;\n    }\n\n}\n\n\ncontract HZaddToken is TokenERC20, Ownable,Pausable{\n\n    mapping (address => bool) public frozenAccount;\n\n    event FrozenFunds(address target, bool frozen);\n\n    constructor() TokenERC20(5000000000,\"HZaddToken\",\"HZadd\") public {\n    }\n\n    function freezeAccount(address account, bool freeze) onlyOwner public {\n        frozenAccount[account] = freeze;\n        emit FrozenFunds(account, freeze);\n    }\n\n    function changeName(string memory newName) public onlyOwner {\n        name = newName;\n    }\n\n    function changeSymbol(string memory newSymbol) public onlyOwner{\n        symbol = newSymbol;\n    }\n\n    \n    function _transfer(address _from, address _to, uint _value) internal whenNotPaused {\n        require(_to != address(0x0));\n\n        require(!frozenAccount[_from]);\n        require(!frozenAccount[_to]);\n\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n\n        emit Transfer(_from, _to, _value);\n    }\n}",
  "bytecode": ""
}