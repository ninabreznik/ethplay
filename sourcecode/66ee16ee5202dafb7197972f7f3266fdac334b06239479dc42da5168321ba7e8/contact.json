{
  "address": "0x88088019a2a235f9e7495124d0b0e90f41a777b0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ETT",
  "compilerVersion": "v0.5.6+commit.b259423e",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-09\n*/\n\npragma solidity 0.5.6;\n\n/**\n *\n * @author Alejandro Diaz <[emailÂ protected]>\n *\n * Overview:\n * This is an implimentation of a multi-dividend-paying token. the token supports income/dividends\n * of Eth and also Dai. A fixed number of tokens are minted in the constructor, and initially owned\n * by the contract owner. Dividends are awarded token holders thusly:\n *\n *   previous_due + [ p(x) * t(x)/N ] + [ p(x+1) * t(x+1)/N ] + ...\n *   where p(x) is the x'th income payment received by the contract\n *         t(x) is the number of tokens held by the token-holder at the time of p(x)\n *         N    is the total number of tokens, which never changes\n *\n * assume that t(x) takes on 3 values, t(a), t(b) and t(c), at times a, b, and c;\n * and that there are multiple payments at times between a and b: x, x+1, x+2...\n * and multiple payments at times between b and c: y, x+y, y+2...\n * and multiple payments at times greater than c: z, z+y, z+2...\n * then factoring:\n *\n *   current_due = { (t(a) * [p(x) + p(x+1)]) ... + (t(a) * [p(x) + p(y-1)]) ... +\n *                   (t(b) * [p(y) + p(y+1)]) ... + (t(b) * [p(y) + p(z-1)]) ... +\n *                   (t(c) * [p(z) + p(z+1)]) ... + (t(c) * [p(z) + p(now)]) } / N\n *\n * or\n *\n *   current_due = { (t(a) * period_a_income) +\n *                   (t(b) * period_b_income) +\n *                   (t(c) * period_c_income) } / N\n *\n * if we designate current_due * N as current-points, then\n *\n *   currentPoints = {  (t(a) * period_a_income) +\n *                      (t(b) * period_b_income) +\n *                      (t(c) * period_c_income) }\n *\n * or more succictly, if we recompute current points before a token-holder's number of\n * tokens, T, is about to change:\n *\n *   currentPoints = previous_points + (T * current-period-income)\n *\n * when we want to do a payout, we'll calculate:\n *  current_due = current-points / N\n *\n * we'll keep track of a token-holder's current-period-points, which is:\n *   T * current-period-income\n * by taking a snapshot of income collected exactly when the current period began; that is, the when the\n * number of tokens last changed. that is, we keep a running count of total income received\n *\n *   totalIncomeReceived = p(x) + p(x+1) + p(x+2)\n *\n * (which happily is the same for all token holders) then, before any token holder changes their number of\n * tokens we compute (for that token holder):\n *\n *  function calcCurPointsForAcct(acct) {\n *    currentPoints[acct] += (totalIncomeReceived - lastSnapshot[acct]) * T[acct]\n *    lastSnapshot[acct] = totalIncomeReceived\n *  }\n *\n * in the withdraw fcn, all we need is:\n *\n *  function withdraw(acct) {\n *    calcCurPointsForAcct(acct);\n *    current_amount_due = currentPoints[acct] / N\n *    currentPoints[acct] = 0;\n *    send(current_amount_due);\n *  }\n *\n */\n//import './SafeMath.sol';\n/*\n    Overflow protected math functions\n*/\ncontract SafeMath {\n    /**\n        constructor\n    */\n    constructor() public {\n    }\n\n    /**\n        @dev returns the sum of _x and _y, asserts if the calculation overflows\n\n        @param _x   value 1\n        @param _y   value 2\n\n        @return sum\n    */\n    function safeAdd(uint256 _x, uint256 _y) pure internal returns (uint256) {\n        uint256 z = _x + _y;\n        assert(z >= _x);\n        return z;\n    }\n\n    /**\n        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\n\n        @param _x   minuend\n        @param _y   subtrahend\n\n        @return difference\n    */\n    function safeSub(uint256 _x, uint256 _y) pure internal returns (uint256) {\n        assert(_x >= _y);\n        return _x - _y;\n    }\n\n    /**\n        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\n\n        @param _x   factor 1\n        @param _y   factor 2\n\n        @return product\n    */\n    function safeMul(uint256 _x, uint256 _y) pure internal returns (uint256) {\n        uint256 z = _x * _y;\n        assert(_x == 0 || z / _x == _y);\n        return z;\n    }\n}\n\n//import './iERC20Token.sol';\n// Token standard API\n// https://github.com/ethereum/EIPs/issues/20\ncontract iERC20Token {\n  function balanceOf( address who ) public view returns (uint value);\n  function allowance( address owner, address spender ) public view returns (uint remaining);\n  function transfer( address to, uint value) public returns (bool ok);\n  function transferFrom( address from, address to, uint value) public returns (bool ok);\n  function approve( address spender, uint value ) public returns (bool ok);\n  event Transfer( address indexed from, address indexed to, uint value);\n  event Approval( address indexed owner, address indexed spender, uint value);\n  //these are implimented via automatic getters\n  //function name() public view returns (string _name);\n  //function symbol() public view returns (string _symbol);\n  //function decimals() public view returns (uint8 _decimals);\n  //function totalSupply() public view returns (uint256 _totalSupply);\n}\n\n//import './iDividendToken.sol';\n// simple interface for withdrawing dividends\ncontract iDividendToken {\n  function checkDividends(address _addr) view public returns(uint _ethAmount, uint _daiAmount);\n  function withdrawEthDividends() public returns (uint _amount);\n  function withdrawDaiDividends() public returns (uint _amount);\n}\n\ncontract ETT is iERC20Token, iDividendToken, SafeMath {\n\n  event Transfer(address indexed from, address indexed to, uint amount);\n  event Approval(address indexed from, address indexed to, uint amount);\n\n  struct tokenHolder {\n    uint tokens;           // num tokens currently held in this acct, aka balance\n    uint currentEthPoints; // updated before token balance changes, or before a withdrawal. credit for owning tokens\n    uint lastEthSnapshot;  // snapshot of global TotalPoints (Eth), last time we updated this acct's currentEthPoints\n    uint currentDaiPoints; // updated before token balance changes, or before a withdrawal. credit for owning tokens\n    uint lastDaiSnapshot;  // snapshot of global TotalPoints (Dai), last time we updated this acct's currentDaiPoints\n  }\n\n  bool    public isLocked;\n  uint8   public decimals;\n  address public daiToken;\n  string  public symbol;\n  string  public name;\n  uint public    totalSupply;                                       // total token supply. never changes\n  uint public    holdoverEthBalance;                                // funds received, but not yet distributed\n  uint public    totalEthReceived;\n  uint public    holdoverDaiBalance;                                // funds received, but not yet distributed\n  uint public    totalDaiReceived;\n\n  mapping (address => mapping (address => uint)) private approvals; //transfer approvals, from -> to -> amount\n  mapping (address => tokenHolder) public tokenHolders;\n\n\n  //\n  //constructor\n  //\n  constructor(address _daiToken, uint256 _tokenSupply, uint8 _decimals, string memory _name, string memory _symbol) public {\n    daiToken = _daiToken;\n    totalSupply = _tokenSupply;\n    decimals = _decimals;\n    name = _name;\n    symbol = _symbol;\n    tokenHolders[msg.sender].tokens = totalSupply;\n    emit Transfer(address(0), msg.sender, totalSupply);\n  }\n\n\n  //\n  // ERC-20\n  //\n\n\n  //\n  // transfer tokens to a specified address\n  // @param to the address to transfer to.\n  // @param value the amount to be transferred.\n  // checks for overflow, sufficient tokens to xfer are in internal _transfer fcn\n  //\n  function transfer(address _to, uint _value) public returns (bool success) {\n    _transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n\n  //\n  // transfer tokens from one address to another.\n  // note that while this function emits an Approval event, this is not required as per the specification,\n  // and other compliant implementations may not emit the event.\n  // @param from address the address which you want to send tokens from\n  // @param to address the address which you want to transfer to\n  // @param value uint256 the amount of tokens to be transferred\n  // checks for overflow, sufficient tokens to xfer are in internal _transfer fcn\n  // check for sufficient approval in in the safeSub\n  //\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    _transfer(_from, _to, _value);\n    _approve(_from, msg.sender, safeSub(approvals[_from][msg.sender], _value));\n    return true;\n  }\n\n\n  //\n  // internal fcn to execute a transfer. no check/modification of approval here\n  // wrap of token balances is prevented in safe{Add,Sub}\n  //\n  function _transfer(address _from, address _to, uint _value) internal {\n    require(_to != address(0));\n    //first credit source acct with points accrued so far.. must do this before number of held tokens changes\n    calcCurPointsForAcct(_from);\n    tokenHolders[_from].tokens = safeSub(tokenHolders[_from].tokens, _value);\n    //if destination is a new tokenholder then we are setting his \"last\" snapshot to the current totalPoints\n    if (tokenHolders[_to].lastEthSnapshot == 0)\n      tokenHolders[_to].lastEthSnapshot = totalEthReceived;\n    if (tokenHolders[_to].lastDaiSnapshot == 0)\n      tokenHolders[_to].lastDaiSnapshot = totalDaiReceived;\n    //credit destination acct with points accrued so far.. must do this before number of held tokens changes\n    calcCurPointsForAcct(_to);\n    tokenHolders[_to].tokens = safeAdd(tokenHolders[_to].tokens, _value);\n    emit Transfer(_from, _to, _value);\n  }\n\n\n  function balanceOf(address _owner) public view returns (uint balance) {\n    balance = tokenHolders[_owner].tokens;\n  }\n\n\n  //\n  // approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n  // beware that changing an allowance with this method brings the risk that someone may use both the old\n  // and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n  // race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n  // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n  // @param _spender the address which will spend the funds.\n  // @param _value the amount of tokens to be spent.\n  //\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    _approve(msg.sender, _spender, _value);\n    return true;\n  }\n\n\n  //\n  // increase the amount of tokens that an owner allows to a spender.\n  // approve should be called when allowed[msg.sender][spender] == 0. to increment\n  // allowed value it is better to use this function to avoid 2 calls (and wait until\n  // the first transaction is mined)\n  // Emits an Approval event.\n  // @param _spender the address which will spend the funds.\n  // @param _addedValue the amount of tokens to increase the allowance by.\n  //\n  function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {\n    _approve(msg.sender, _spender, safeAdd(approvals[msg.sender][_spender], _addedValue));\n    return true;\n  }\n\n  /**\n   * decrease the amount of tokens that an owner allows to a spender.\n   * approve should be called when allowed[msg.sender][spender] == 0. to decrement\n   * allowed value it is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * from MonolithDAO Token.sol\n   * emits an Approval event.\n   * @param _spender the address which will spend the funds.\n   * @param _subtractedValue the amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {\n    _approve(msg.sender, _spender, safeSub(approvals[msg.sender][_spender], _subtractedValue));\n    return true;\n  }\n\n\n  /*\n   * @dev internal fcn to approve an address to spend another addresses' tokens.\n   * @param _owner the address that owns the tokens.\n   * @param _spender the address that will spend the tokens.\n   * @param _value the number of tokens that can be spent.\n   */\n  function _approve(address _owner, address _spender, uint _value) internal {\n    require(_owner != address(0));\n    require(_spender != address(0));\n    approvals[_owner][_spender] = _value;\n    emit Approval(_owner, _spender, _value);\n  }\n\n\n  function allowance(address _owner, address _spender) public view returns (uint remaining) {\n    return approvals[_owner][_spender];\n  }\n\n  //\n  // END ERC20\n  //\n\n  //\n  // calc current points for a token holder; that is, points that are due to this token holder for all dividends\n  // received by the contract during the current \"period\". the period began the last time this fcn was called, at which\n  // time we updated the account's snapshot of the running point count, totalEthReceived. during the period the account's\n  // number of tokens must not have changed. so always call this fcn before changing the number of tokens.\n  //\n  function calcCurPointsForAcct(address _acct) internal {\n    uint256 _newEthPoints = safeMul(safeSub(totalEthReceived, tokenHolders[_acct].lastEthSnapshot), tokenHolders[_acct].tokens);\n    tokenHolders[_acct].currentEthPoints = safeAdd(tokenHolders[_acct].currentEthPoints, _newEthPoints);\n    tokenHolders[_acct].lastEthSnapshot = totalEthReceived;\n    uint256 _newDaiPoints = safeMul(safeSub(totalDaiReceived, tokenHolders[_acct].lastDaiSnapshot), tokenHolders[_acct].tokens);\n    tokenHolders[_acct].currentDaiPoints = safeAdd(tokenHolders[_acct].currentDaiPoints, _newDaiPoints);\n    tokenHolders[_acct].lastDaiSnapshot = totalDaiReceived;\n  }\n\n\n  //\n  // default payable function. funds receieved here become dividends.\n  //\n  function () external payable {\n    holdoverEthBalance = safeAdd(holdoverEthBalance, msg.value);\n    totalEthReceived = safeAdd(totalEthReceived, msg.value);\n  }\n\n\n  //\n  // this payable function is for payment in Dai\n  // caller must have already approved the Dai transfer\n  //\n  function payDai(uint256 _daiAmount) external {\n    require(iERC20Token(daiToken).transferFrom(msg.sender, address(this), _daiAmount), \"failed to transfer dai\");\n    holdoverDaiBalance = safeAdd(holdoverDaiBalance, _daiAmount);\n    totalDaiReceived = safeAdd(totalDaiReceived, _daiAmount);\n  }\n\n\n  //\n  // updateDaiBalance\n  // update the dia holdover balance, in case someone transfers dai directly\n  // to the contract. anyone can call this.\n  //\n  function updateDaiBalance() public {\n    uint256 _actBalance = iERC20Token(daiToken).balanceOf(address(this));\n    uint256 _daiAmount = safeSub(_actBalance, holdoverDaiBalance);\n    holdoverDaiBalance = safeAdd(holdoverDaiBalance, _daiAmount);\n    totalDaiReceived = safeAdd(totalDaiReceived, _daiAmount);\n  }\n\n\n  //\n  // check my dividends\n  //\n  function checkDividends(address _addr) view public returns(uint _ethAmount, uint _daiAmount) {\n    //don't call calcCurPointsForAcct here, cuz this is a constant fcn\n    uint _currentEthPoints = tokenHolders[_addr].currentEthPoints +\n      ((totalEthReceived - tokenHolders[_addr].lastEthSnapshot) * tokenHolders[_addr].tokens);\n    _ethAmount = _currentEthPoints / totalSupply;\n    uint _currentDaiPoints = tokenHolders[_addr].currentDaiPoints +\n      ((totalDaiReceived - tokenHolders[_addr].lastDaiSnapshot) * tokenHolders[_addr].tokens);\n    _daiAmount = _currentDaiPoints / totalSupply;\n  }\n\n\n  //\n  // withdraw my dividends\n  //\n  function withdrawEthDividends() public returns (uint _amount) {\n    calcCurPointsForAcct(msg.sender);\n    _amount = tokenHolders[msg.sender].currentEthPoints / totalSupply;\n    uint _pointsUsed = safeMul(_amount, totalSupply);\n    tokenHolders[msg.sender].currentEthPoints = safeSub(tokenHolders[msg.sender].currentEthPoints, _pointsUsed);\n    holdoverEthBalance = safeSub(holdoverEthBalance, _amount);\n    msg.sender.transfer(_amount);\n  }\n\n  function withdrawDaiDividends() public returns (uint _amount) {\n    calcCurPointsForAcct(msg.sender);\n    _amount = tokenHolders[msg.sender].currentDaiPoints / totalSupply;\n    uint _pointsUsed = safeMul(_amount, totalSupply);\n    tokenHolders[msg.sender].currentDaiPoints = safeSub(tokenHolders[msg.sender].currentDaiPoints, _pointsUsed);\n    holdoverDaiBalance = safeSub(holdoverDaiBalance, _amount);\n    require(iERC20Token(daiToken).transfer(msg.sender, _amount), \"failed to transfer dai\");\n  }\n\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdoverEthBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEthDividends\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkDividends\",\"outputs\":[{\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"name\":\"_daiAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenHolders\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"currentEthPoints\",\"type\":\"uint256\"},{\"name\":\"lastEthSnapshot\",\"type\":\"uint256\"},{\"name\":\"currentDaiPoints\",\"type\":\"uint256\"},{\"name\":\"lastDaiSnapshot\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdoverDaiBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_daiAmount\",\"type\":\"uint256\"}],\"name\":\"payDai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDaiReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateDaiBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDaiDividends\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_daiToken\",\"type\":\"address\"},{\"name\":\"_tokenSupply\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b506040516200125338038062001253833981018060405260a08110156200003757600080fd5b81516020830151604084015160608501805193959294919391830192916401000000008111156200006757600080fd5b820160208101848111156200007b57600080fd5b81516401000000008111828201871017156200009657600080fd5b50509291906020018051640100000000811115620000b357600080fd5b82016020810184811115620000c757600080fd5b8151640100000000811182820187101715620000e257600080fd5b505060008054600389905562010000600160b01b031916620100006001600160a01b038b16021761ff00191661010060ff8916021790558451909350620001339250600291506020850190620001a1565b50805162000149906001906020840190620001a1565b50600354336000818152600960209081526040808320859055805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3505050505062000246565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001e457805160ff191683800117855562000214565b8280016001018555821562000214579182015b8281111562000214578251825591602001919060010190620001f7565b506200022292915062000226565b5090565b6200024391905b808211156200022257600081556001016200022d565b90565b610ffd80620002566000396000f3fe6080604052600436106101405760003560e01c806370a08231116100b6578063a9059cbb1161006f578063a9059cbb146104c6578063a9a18dda146104ff578063aae9e3f914610514578063b57b3b6214610529578063be22f5461461053e578063dd62ed3e1461056f57610140565b806370a08231146103ef57806395d89b41146104225780639876b94c146104375780639b45b66e14610463578063a457c2d714610478578063a4e2d634146104b157610140565b806322f16c8d1161010857806322f16c8d1461028957806323b872dd146102d5578063313ce567146103185780633950935114610343578063638b5e531461037c5780636c3d8558146103da57610140565b806306fdde0314610161578063095ea7b3146101eb5780630f586cc514610238578063133c9dd01461025f57806318160ddd14610274575b61014c600454346105aa565b60045560055461015c90346105aa565b600555005b34801561016d57600080fd5b506101766105c0565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101b0578181015183820152602001610198565b50505050905090810190601f1680156101dd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f757600080fd5b506102246004803603604081101561020e57600080fd5b506001600160a01b03813516906020013561064b565b604080519115158252519081900360200190f35b34801561024457600080fd5b5061024d610661565b60408051918252519081900360200190f35b34801561026b57600080fd5b5061024d610667565b34801561028057600080fd5b5061024d610715565b34801561029557600080fd5b506102bc600480360360208110156102ac57600080fd5b50356001600160a01b031661071b565b6040805192835260208301919091528051918290030190f35b3480156102e157600080fd5b50610224600480360360608110156102f857600080fd5b506001600160a01b038135811691602081013590911690604001356107a5565b34801561032457600080fd5b5061032d6107f6565b6040805160ff9092168252519081900360200190f35b34801561034f57600080fd5b506102246004803603604081101561036657600080fd5b506001600160a01b038135169060200135610804565b34801561038857600080fd5b506103af6004803603602081101561039f57600080fd5b50356001600160a01b031661083a565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b3480156103e657600080fd5b5061024d610869565b3480156103fb57600080fd5b5061024d6004803603602081101561041257600080fd5b50356001600160a01b031661086f565b34801561042e57600080fd5b5061017661088a565b34801561044357600080fd5b506104616004803603602081101561045a57600080fd5b50356108e4565b005b34801561046f57600080fd5b5061024d6109e9565b34801561048457600080fd5b506102246004803603604081101561049b57600080fd5b506001600160a01b0381351690602001356109ef565b3480156104bd57600080fd5b50610224610a25565b3480156104d257600080fd5b50610224600480360360408110156104e957600080fd5b506001600160a01b038135169060200135610a2e565b34801561050b57600080fd5b5061024d610a3b565b34801561052057600080fd5b50610461610a41565b34801561053557600080fd5b5061024d610afa565b34801561054a57600080fd5b50610553610c58565b604080516001600160a01b039092168252519081900360200190f35b34801561057b57600080fd5b5061024d6004803603604081101561059257600080fd5b506001600160a01b0381358116916020013516610c6d565b6000828201838110156105b957fe5b9392505050565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156106435780601f1061061857610100808354040283529160200191610643565b820191906000526020600020905b81548152906001019060200180831161062657829003601f168201915b505050505081565b6000610658338484610c98565b50600192915050565b60045481565b600061067233610d20565b600354336000908152600960205260409020600101548161068f57fe5b04905060006106a082600354610e4c565b336000908152600960205260409020600101549091506106c09082610e6c565b336000908152600960205260409020600101556004546106e09083610e6c565b600455604051339083156108fc029084906000818181858888f19350505050158015610710573d6000803e3d6000fd5b505090565b60035481565b6001600160a01b03811660009081526009602052604081208054600282015460055460019093015460035485949290920390920290910190818161075b57fe5b6001600160a01b03861660009081526009602052604090208054600482015460075460039384015493549590940497509092039091020190818161079b57fe5b0492505050915091565b60006107b2848484610e7e565b6001600160a01b0384166000908152600860209081526040808320338085529252909120546107ec9186916107e79086610e6c565b610c98565b5060019392505050565b600054610100900460ff1681565b3360008181526008602090815260408083206001600160a01b038716845290915281205490916106589185906107e790866105aa565b600960205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b60065481565b6001600160a01b031660009081526009602052604090205490565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106435780601f1061061857610100808354040283529160200191610643565b6000805460408051600160e01b6323b872dd028152336004820152306024820152604481018590529051620100009092046001600160a01b0316926323b872dd926064808401936020939083900390910190829087803b15801561094757600080fd5b505af115801561095b573d6000803e3d6000fd5b505050506040513d602081101561097157600080fd5b50516109c75760408051600160e51b62461bcd02815260206004820152601660248201527f6661696c656420746f207472616e736665722064616900000000000000000000604482015290519081900360640190fd5b6109d3600654826105aa565b6006556007546109e390826105aa565b60075550565b60075481565b3360008181526008602090815260408083206001600160a01b038716845290915281205490916106589185906107e79086610e6c565b60005460ff1681565b6000610658338484610e7e565b60055481565b6000805460408051600160e01b6370a082310281523060048201529051620100009092046001600160a01b0316916370a0823191602480820192602092909190829003018186803b158015610a9557600080fd5b505afa158015610aa9573d6000803e3d6000fd5b505050506040513d6020811015610abf57600080fd5b5051600654909150600090610ad5908390610e6c565b9050610ae3600654826105aa565b600655600754610af390826105aa565b6007555050565b6000610b0533610d20565b600380543360009081526009602052604090209091015481610b2357fe5b0490506000610b3482600354610e4c565b33600090815260096020526040902060030154909150610b549082610e6c565b33600090815260096020526040902060030155600654610b749083610e6c565b6006556000805460408051600160e01b63a9059cbb028152336004820152602481018690529051620100009092046001600160a01b03169263a9059cbb926044808401936020939083900390910190829087803b158015610bd457600080fd5b505af1158015610be8573d6000803e3d6000fd5b505050506040513d6020811015610bfe57600080fd5b5051610c545760408051600160e51b62461bcd02815260206004820152601660248201527f6661696c656420746f207472616e736665722064616900000000000000000000604482015290519081900360640190fd5b5090565b6000546201000090046001600160a01b031681565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b6001600160a01b038316610cab57600080fd5b6001600160a01b038216610cbe57600080fd5b6001600160a01b03808416600081815260086020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6005546001600160a01b0382166000908152600960205260408120600201549091610d6d91610d4f9190610e6c565b6001600160a01b038416600090815260096020526040902054610e4c565b6001600160a01b038316600090815260096020526040902060010154909150610d9690826105aa565b6001600160a01b0383166000908152600960205260408120600181019290925560055460028301556007546004909201549091610df591610dd79190610e6c565b6001600160a01b038516600090815260096020526040902054610e4c565b6001600160a01b038416600090815260096020526040902060030154909150610e1e90826105aa565b6001600160a01b03909316600090815260096020526040902060038101939093555050600754600490910155565b6000828202831580610e66575082848281610e6357fe5b04145b6105b957fe5b600081831015610e7857fe5b50900390565b6001600160a01b038216610e9157600080fd5b610e9a83610d20565b6001600160a01b038316600090815260096020526040902054610ebd9082610e6c565b6001600160a01b038085166000908152600960205260408082209390935590841681522060020154610f09576005546001600160a01b0383166000908152600960205260409020600201555b6001600160a01b038216600090815260096020526040902060040154610f49576007546001600160a01b0383166000908152600960205260409020600401555b610f5282610d20565b6001600160a01b038216600090815260096020526040902054610f7590826105aa565b6001600160a01b0380841660008181526009602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350505056fea165627a7a723058202b15bf1a75eec94377d2e43dfa992171158e555117366ea305a0b312bddb0c47002900000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359000000000000000000000000000000000000000000422ca8b0a00a4250000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000057475726d73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000374726d0000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359000000000000000000000000000000000000000000422ca8b0a00a4250000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000057475726d73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000374726d0000000000000000000000000000000000000000000000000000000000"
}