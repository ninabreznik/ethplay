{
  "address": "0x220b544e43900ce1be26a09d0ea97a47fb7df380",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "UpgradebleStormSender",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-26\n*/\n\n// File: contracts/EternalStorage.sol\n\n// Roman Storm Multi Sender\n// To Use this Dapp: https://rstormsf.github.io/multisender\npragma solidity 0.4.24;\n\n\n/**\n * @title EternalStorage\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\n */\ncontract EternalStorage {\n\n    mapping(bytes32 => uint256) internal uintStorage;\n    mapping(bytes32 => string) internal stringStorage;\n    mapping(bytes32 => address) internal addressStorage;\n    mapping(bytes32 => bytes) internal bytesStorage;\n    mapping(bytes32 => bool) internal boolStorage;\n    mapping(bytes32 => int256) internal intStorage;\n\n}\n\n// File: contracts/UpgradeabilityOwnerStorage.sol\n\n// Roman Storm Multi Sender\n// To Use this Dapp: https://rstormsf.github.io/multisender\n\n\n/**\n * @title UpgradeabilityOwnerStorage\n * @dev This contract keeps track of the upgradeability owner\n */\ncontract UpgradeabilityOwnerStorage {\n  // Owner of the contract\n    address private _upgradeabilityOwner;\n\n    /**\n    * @dev Tells the address of the owner\n    * @return the address of the owner\n    */\n    function upgradeabilityOwner() public view returns (address) {\n        return _upgradeabilityOwner;\n    }\n\n    /**\n    * @dev Sets the address of the owner\n    */\n    function setUpgradeabilityOwner(address newUpgradeabilityOwner) internal {\n        _upgradeabilityOwner = newUpgradeabilityOwner;\n    }\n\n}\n\n// File: contracts/UpgradeabilityStorage.sol\n\n// Roman Storm Multi Sender\n// To Use this Dapp: https://rstormsf.github.io/multisender\n\n\n/**\n * @title UpgradeabilityStorage\n * @dev This contract holds all the necessary state variables to support the upgrade functionality\n */\ncontract UpgradeabilityStorage {\n  // Version name of the current implementation\n    string internal _version;\n\n    // Address of the current implementation\n    address internal _implementation;\n\n    /**\n    * @dev Tells the version name of the current implementation\n    * @return string representing the name of the current version\n    */\n    function version() public view returns (string) {\n        return _version;\n    }\n\n    /**\n    * @dev Tells the address of the current implementation\n    * @return address of the current implementation\n    */\n    function implementation() public view returns (address) {\n        return _implementation;\n    }\n}\n\n// File: contracts/OwnedUpgradeabilityStorage.sol\n\n// Roman Storm Multi Sender\n// To Use this Dapp: https://rstormsf.github.io/multisender\n\n\n\n\n\n/**\n * @title OwnedUpgradeabilityStorage\n * @dev This is the storage necessary to perform upgradeable contracts.\n * This means, required state variables for upgradeability purpose and eternal storage per se.\n */\ncontract OwnedUpgradeabilityStorage is UpgradeabilityOwnerStorage, UpgradeabilityStorage, EternalStorage {}\n\n// File: contracts/SafeMath.sol\n\n// Roman Storm Multi Sender\n// To Use this Dapp: https://rstormsf.github.io/multisender\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/multisender/Ownable.sol\n\n// Roman Storm Multi Sender\n// To Use this Dapp: https://rstormsf.github.io/multisender\n\n\n\n/**\n * @title Ownable\n * @dev This contract has an owner address providing basic authorization control\n */\ncontract Ownable is EternalStorage {\n    /**\n    * @dev Event to show ownership has been transferred\n    * @param previousOwner representing the address of the previous owner\n    * @param newOwner representing the address of the new owner\n    */\n    event OwnershipTransferred(address previousOwner, address newOwner);\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner());\n        _;\n    }\n\n    /**\n    * @dev Tells the address of the owner\n    * @return the address of the owner\n    */\n    function owner() public view returns (address) {\n        return addressStorage[keccak256(\"owner\")];\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner the address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        setOwner(newOwner);\n    }\n\n    /**\n    * @dev Sets a new owner address\n    */\n    function setOwner(address newOwner) internal {\n        emit OwnershipTransferred(owner(), newOwner);\n        addressStorage[keccak256(\"owner\")] = newOwner;\n    }\n}\n\n// File: contracts/multisender/Claimable.sol\n\n// Roman Storm Multi Sender\n// To Use this Dapp: https://rstormsf.github.io/multisender\n\n\n\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is EternalStorage, Ownable {\n    function pendingOwner() public view returns (address) {\n        return addressStorage[keccak256(\"pendingOwner\")];\n    }\n\n    /**\n    * @dev Modifier throws if called by any account other than the pendingOwner.\n    */\n    modifier onlyPendingOwner() {\n        require(msg.sender == pendingOwner());\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to set the pendingOwner address.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        addressStorage[keccak256(\"pendingOwner\")] = newOwner;\n    }\n\n    /**\n    * @dev Allows the pendingOwner address to finalize the transfer.\n    */\n    function claimOwnership() public onlyPendingOwner {\n        emit OwnershipTransferred(owner(), pendingOwner());\n        addressStorage[keccak256(\"owner\")] = addressStorage[keccak256(\"pendingOwner\")];\n        addressStorage[keccak256(\"pendingOwner\")] = address(0);\n    }\n}\n\n// File: contracts/multisender/UpgradebleStormSender.sol\n\n// Roman Storm Multi Sender\n// To Use this Dapp: https://rstormsf.github.io/multisender\n\n\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract UpgradebleStormSender is OwnedUpgradeabilityStorage, Claimable {\n    using SafeMath for uint256;\n\n    event Multisended(uint256 total, address tokenAddress);\n    event ClaimedTokens(address token, address owner, uint256 balance);\n\n    modifier hasFee() {\n        if (currentFee(msg.sender) > 0) {\n            require(msg.value >= currentFee(msg.sender));\n        }\n        _;\n    }\n\n    function() public payable {}\n\n    function initialize(address _owner) public {\n        require(!initialized());\n        setOwner(_owner);\n        setArrayLimit(200);\n        setDiscountStep(0.0005 ether);\n        setFee(0.0005 ether);\n        boolStorage[keccak256(\"rs_multisender_initialized\")] = true;\n    }\n\n    function initialized() public view returns (bool) {\n        return boolStorage[keccak256(\"rs_multisender_initialized\")];\n    }\n \n    function txCount(address customer) public view returns(uint256) {\n        return uintStorage[keccak256(abi.encodePacked(\"txCount\", customer))];\n    }\n\n    function arrayLimit() public view returns(uint256) {\n        return uintStorage[keccak256(abi.encodePacked(\"arrayLimit\"))];\n    }\n\n    function setArrayLimit(uint256 _newLimit) public onlyOwner {\n        require(_newLimit != 0);\n        uintStorage[keccak256(\"arrayLimit\")] = _newLimit;\n    }\n\n    function discountStep() public view returns(uint256) {\n        return uintStorage[keccak256(\"discountStep\")];\n    }\n\n    function setDiscountStep(uint256 _newStep) public onlyOwner {\n        require(_newStep != 0);\n        uintStorage[keccak256(\"discountStep\")] = _newStep;\n    }\n\n    function fee() public view returns(uint256) {\n        return uintStorage[keccak256(\"fee\")];\n    }\n\n    function currentFee(address _customer) public view returns(uint256) {\n        if (fee() > discountRate(msg.sender)) {\n            return fee().sub(discountRate(_customer));\n        } else {\n            return 0;\n        }\n    }\n\n    function setFee(uint256 _newStep) public onlyOwner {\n        require(_newStep != 0);\n        uintStorage[keccak256(\"fee\")] = _newStep;\n    }\n\n    function discountRate(address _customer) public view returns(uint256) {\n        uint256 count = txCount(_customer);\n        return count.mul(discountStep());\n    }\n\n    function multisendToken(address token, address[] _contributors, uint256[] _balances) public hasFee payable {\n        if (token == 0x000000000000000000000000000000000000bEEF){\n            multisendEther(_contributors, _balances);\n        } else {\n            uint256 total = 0;\n            require(_contributors.length <= arrayLimit());\n            ERC20 erc20token = ERC20(token);\n            uint8 i = 0;\n            for (i; i < _contributors.length; i++) {\n                erc20token.transferFrom(msg.sender, _contributors[i], _balances[i]);\n                total += _balances[i];\n            }\n            setTxCount(msg.sender, txCount(msg.sender).add(1));\n            emit Multisended(total, token);\n        }\n    }\n\n    function multisendEther(address[] _contributors, uint256[] _balances) public payable {\n        uint256 total = msg.value;\n        uint256 userfee = currentFee(msg.sender);\n        require(total >= userfee);\n        require(_contributors.length <= arrayLimit());\n        total = total.sub(userfee);\n        uint256 i = 0;\n        for (i; i < _contributors.length; i++) {\n            require(total >= _balances[i]);\n            total = total.sub(_balances[i]);\n            _contributors[i].transfer(_balances[i]);\n        }\n        setTxCount(msg.sender, txCount(msg.sender).add(1));\n        emit Multisended(msg.value, 0x000000000000000000000000000000000000bEEF);\n    }\n\n    function claimTokens(address _token) public onlyOwner {\n        if (_token == 0x0) {\n            owner().transfer(address(this).balance);\n            return;\n        }\n        ERC20 erc20token = ERC20(_token);\n        uint256 balance = erc20token.balanceOf(this);\n        erc20token.transfer(owner(), balance);\n        emit ClaimedTokens(_token, owner(), balance);\n    }\n    \n    function setTxCount(address customer, uint256 _txCount) private {\n        uintStorage[keccak256(abi.encodePacked(\"txCount\", customer))] = _txCount;\n    }\n    \n    function sendEtherToOwner() public onlyOwner {                       \n        owner().transfer(this.balance);\n    }\n    \n    function destroy() public onlyOwner {\n        selfdestruct(owner());\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b50611473806100206000396000f3006080604052600436106101195763ffffffff60e060020a6000350416630b66f3f5811461011b578063158ef93e146101aa5780632f781393146101d35780634e71e0c8146101eb57806354fd4d5014610200578063591552da1461028a5780635c60da1b146102bd57806369fe0e2d146102ee5780636fde82021461030657806383197ef01461031b5780638da5cb5b14610330578063ab883d2814610345578063b4ae641c146103c6578063c1258f69146103db578063c4d66de8146103fc578063ddca3f431461041d578063df8de3e714610432578063e30c397814610453578063e3ffc9a314610468578063e4e1f29b1461047d578063ee8a0a3014610492578063eff8e748146104aa578063f2fde38b146104cb575b005b604080516020600460248035828101358481028087018601909752808652610119968435600160a060020a031696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506104ec9650505050505050565b3480156101b657600080fd5b506101bf6106be565b604080519115158252519081900360200190f35b3480156101df57600080fd5b50610119600435610702565b3480156101f757600080fd5b5061011961076a565b34801561020c57600080fd5b5061021561089d565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561024f578181015183820152602001610237565b50505050905090810190601f16801561027c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029657600080fd5b506102ab600160a060020a0360043516610932565b60408051918252519081900360200190f35b3480156102c957600080fd5b506102d261097b565b60408051600160a060020a039092168252519081900360200190f35b3480156102fa57600080fd5b5061011960043561098a565b34801561031257600080fd5b506102d26109f4565b34801561032757600080fd5b50610119610a03565b34801561033c57600080fd5b506102d2610a32565b6040805160206004803580820135838102808601850190965280855261011995369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610a7e9650505050505050565b3480156103d257600080fd5b506102ab610bdf565b3480156103e757600080fd5b506102ab600160a060020a0360043516610c94565b34801561040857600080fd5b50610119600160a060020a0360043516610d73565b34801561042957600080fd5b506102ab610e03565b34801561043e57600080fd5b50610119600160a060020a0360043516610e46565b34801561045f57600080fd5b506102d261103f565b34801561047457600080fd5b50610119611089565b34801561048957600080fd5b506102ab6110e8565b34801561049e57600080fd5b50610119600435611129565b3480156104b657600080fd5b506102ab600160a060020a0360043516611191565b3480156104d757600080fd5b50610119600160a060020a03600435166111be565b6000806000806104fb33610932565b11156105165761050a33610932565b34101561051657600080fd5b61beef600160a060020a0387161415610538576105338585610a7e565b6106b6565b60009250610544610bdf565b8551111561055157600080fd5b5084905060005b84518160ff16101561064f5781600160a060020a03166323b872dd33878460ff1681518110151561058557fe5b90602001906020020151878560ff168151811015156105a057fe5b60209081029091018101516040805160e060020a63ffffffff8816028152600160a060020a03958616600482015293909416602484015260448301529151606480830193928290030181600087803b1580156105fb57600080fd5b505af115801561060f573d6000803e3d6000fd5b505050506040513d602081101561062557600080fd5b50508351849060ff831690811061063857fe5b602090810290910101519290920191600101610558565b6106723361066d600161066133610c94565b9063ffffffff61125a16565b611274565b60408051848152600160a060020a038816602082015281517f04afd2ce457d973046bd54f5d7d36368546da08b88be1bca8ae50e32b451da17929181900390910190a15b505050505050565b604080517f72735f6d756c746973656e6465725f696e697469616c697a65640000000000008152815190819003601a01902060009081526007602052205460ff1690565b61070a610a32565b600160a060020a0316331461071e57600080fd5b80151561072a57600080fd5b604080517f646973636f756e745374657000000000000000000000000000000000000000008152815190819003600c019020600090815260036020522055565b61077261103f565b600160a060020a0316331461078657600080fd5b7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06107af610a32565b6107b761103f565b60408051600160a060020a03938416815291909216602082015281519081900390910190a1604080517f70656e64696e674f776e657200000000000000000000000000000000000000008082528251600c9281900383018120600090815260056020818152868320547f6f776e657200000000000000000000000000000000000000000000000000000085528751948590038301852084528282528784208054600160a060020a0390921673ffffffffffffffffffffffffffffffffffffffff199283161790559484528651938490039095019092208152925291902080549091169055565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156109285780601f106108fd57610100808354040283529160200191610928565b820191906000526020600020905b81548152906001019060200180831161090b57829003601f168201915b5050505050905090565b600061093d33611191565b610945610e03565b11156109725761096b61095783611191565b61095f610e03565b9063ffffffff61135316565b9050610976565b5060005b919050565b600254600160a060020a031690565b610992610a32565b600160a060020a031633146109a657600080fd5b8015156109b257600080fd5b604080517f6665650000000000000000000000000000000000000000000000000000000000815281516003918190038201902060009081526020919091522055565b600054600160a060020a031690565b610a0b610a32565b600160a060020a03163314610a1f57600080fd5b610a27610a32565b600160a060020a0316ff5b604080517f6f776e6572000000000000000000000000000000000000000000000000000000815281516005918190038201902060009081526020919091522054600160a060020a031690565b34600080610a8b33610932565b915081831015610a9a57600080fd5b610aa2610bdf565b85511115610aaf57600080fd5b610abf838363ffffffff61135316565b9250600090505b8451811015610b8a578381815181101515610add57fe5b60209081029091010151831015610af357600080fd5b610b1b8482815181101515610b0457fe5b60209081029091010151849063ffffffff61135316565b92508481815181101515610b2b57fe5b90602001906020020151600160a060020a03166108fc8583815181101515610b4f57fe5b602090810290910101516040518115909202916000818181858888f19350505050158015610b81573d6000803e3d6000fd5b50600101610ac6565b610b9c3361066d600161066133610c94565b6040805134815261beef602082015281517f04afd2ce457d973046bd54f5d7d36368546da08b88be1bca8ae50e32b451da17929181900390910190a15050505050565b60006003600060405160200180807f61727261794c696d697400000000000000000000000000000000000000000000815250600a0190506040516020818303038152906040526040518082805190602001908083835b60208310610c545780518252601f199092019160209182019101610c35565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912086528501959095529290920160002054949350505050565b6000600360008360405160200180807f7478436f756e740000000000000000000000000000000000000000000000000081525060070182600160a060020a0316600160a060020a03166c010000000000000000000000000281526014019150506040516020818303038152906040526040518082805190602001908083835b60208310610d325780518252601f199092019160209182019101610d13565b51815160209384036101000a600019018019909216911617905260408051929094018290039091208652850195909552929092016000205495945050505050565b610d7b6106be565b15610d8557600080fd5b610d8e81611365565b610d9860c8611129565b610da86601c6bf52634000610702565b610db86601c6bf5263400061098a565b50604080517f72735f6d756c746973656e6465725f696e697469616c697a65640000000000008152815190819003601a0190206000908152600760205220805460ff19166001179055565b604080517f666565000000000000000000000000000000000000000000000000000000000081528151600391819003820190206000908152602091909152205490565b600080610e51610a32565b600160a060020a03163314610e6557600080fd5b600160a060020a0383161515610ebb57610e7d610a32565b604051600160a060020a039190911690303180156108fc02916000818181858888f19350505050158015610eb5573d6000803e3d6000fd5b5061103a565b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051849350600160a060020a038416916370a082319160248083019260209291908290030181600087803b158015610f1f57600080fd5b505af1158015610f33573d6000803e3d6000fd5b505050506040513d6020811015610f4957600080fd5b50519050600160a060020a03821663a9059cbb610f64610a32565b836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610fb757600080fd5b505af1158015610fcb573d6000803e3d6000fd5b505050506040513d6020811015610fe157600080fd5b507ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c90508361100e610a32565b60408051600160a060020a03938416815291909216602082015280820184905290519081900360600190a15b505050565b604080517f70656e64696e674f776e657200000000000000000000000000000000000000008152815190819003600c019020600090815260056020522054600160a060020a031690565b611091610a32565b600160a060020a031633146110a557600080fd5b6110ad610a32565b604051600160a060020a039190911690303180156108fc02916000818181858888f193505050501580156110e5573d6000803e3d6000fd5b50565b604080517f646973636f756e745374657000000000000000000000000000000000000000008152815190819003600c01902060009081526003602052205490565b611131610a32565b600160a060020a0316331461114557600080fd5b80151561115157600080fd5b604080517f61727261794c696d6974000000000000000000000000000000000000000000008152815190819003600a019020600090815260036020522055565b60008061119d83610c94565b90506111b76111aa6110e8565b829063ffffffff61141c16565b9392505050565b6111c6610a32565b600160a060020a031633146111da57600080fd5b600160a060020a03811615156111ef57600080fd5b604080517f70656e64696e674f776e657200000000000000000000000000000000000000008152815190819003600c01902060009081526005602052208054600160a060020a0390921673ffffffffffffffffffffffffffffffffffffffff19909216919091179055565b60008282018381101561126957fe5b8091505b5092915050565b80600360008460405160200180807f7478436f756e740000000000000000000000000000000000000000000000000081525060070182600160a060020a0316600160a060020a03166c010000000000000000000000000281526014019150506040516020818303038152906040526040518082805190602001908083835b602083106113115780518252601f1990920191602091820191016112f2565b51815160209384036101000a60001901801990921691161790526040805192909401829003909120865285019590955292909201600020939093555050505050565b60008282111561135f57fe5b50900390565b7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e061138e610a32565b60408051600160a060020a03928316815291841660208301528051918290030190a1604080517f6f776e65720000000000000000000000000000000000000000000000000000008152815160059181900382019020600090815260209190915220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008083151561142f576000915061126d565b5082820282848281151561143f57fe5b041461126957fe00a165627a7a7230582096beba147a59e131c5b2ecf3a755e2f9f58137677b4c12ba9f71ea5a5572b91c0029"
}