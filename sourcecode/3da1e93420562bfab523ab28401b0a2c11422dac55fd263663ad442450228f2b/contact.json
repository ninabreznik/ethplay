{
  "address": "0x28a40acf39b1d3c932f42dd8068ad00a5ad6448f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Privateers.life",
  "contractName": "LudumToken",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-24\n*/\n\npragma solidity ^0.4.13;\n\n\n\nlibrary SafeMath {\n\n    function mul(uint a, uint b) internal returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint a, uint b) internal returns (uint) {\n        assert(b > 0);\n        uint c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function add(uint a, uint b) internal returns (uint) {\n        uint c = a + b;\n        assert(c >= a && c >= b);\n        return c;\n    }\n\n}\n\n\n\ncontract Token {\n\n\t/// total amount of tokens\n    uint public totalSupply;\n\n\t/// return tokens balance\n    function balanceOf(address _owner) constant returns (uint balance);\n\n\t/// tranfer successful or not\n    function transfer(address _to, uint _value) returns (bool success);\n\n\t/// tranfer successful or not\n    function transferFrom(address _from, address _to, uint _value) returns (bool success);\n\n\t/// approval successful or not\n    function approve(address _spender, uint _value) returns (bool success);\n\n\t/// amount of remaining tokens\n    function allowance(address _owner, address _spender) constant returns (uint remaining);\n\n\t/// events\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n\n}\n\n\n\ncontract StandardToken is Token {\n\n    function transfer(address _to, uint _value) returns (bool success) {\n\t\trequire( msg.data.length >= (2 * 32) + 4 );\n\t\trequire( _value > 0 );\n\t\trequire( balances[msg.sender] >= _value );\n\t\trequire( balances[_to] + _value > balances[_to] );\n\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n\t\trequire( msg.data.length >= (3 * 32) + 4 );\n\t\trequire( _value > 0 );\n\t\trequire( balances[_from] >= _value );\n\t\trequire( allowed[_from][msg.sender] >= _value );\n\t\trequire( balances[_to] + _value > balances[_to] );\n\n        balances[_from] -= _value;\n\t\tallowed[_from][msg.sender] -= _value;\n\t\tbalances[_to] += _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) constant returns (uint balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint _value) returns (bool success) {\n\t\trequire( _value == 0 || allowed[msg.sender][_spender] == 0 );\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    mapping (address => uint) balances;\n    mapping (address => mapping (address => uint)) allowed;\n\n}\n\n\n\ncontract LudumToken is StandardToken {\n\n    using SafeMath for uint;\n\n\tstring public constant name = \"Ludum\"; // Ludum tokens name\n    string public constant symbol = \"LDM\"; // Ludum tokens ticker\n    uint8 public constant decimals = 18; // Ludum tokens decimals\n\tuint public constant maximumSupply =  100000000000000000000000000; // Maximum 100M Ludum tokens can be created\n\n    address public ethDepositAddress;\n    address public teamFundAddress;\n\taddress public operationsFundAddress;\n\taddress public marketingFundAddress;\n\n    bool public isFinalized;\n\tuint public constant crowdsaleStart = 1503921600;\n\tuint public constant crowdsaleEnd = 1506340800;\n\t\n\tuint public constant teamPercent = 10;\n\tuint public constant operationsPercent = 10;\n\tuint public constant marketingPercent = 5;\n\n\n    function ludumTokensPerEther() constant returns(uint) {\n\n\t\tif (now < crowdsaleStart || now > crowdsaleEnd) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tif (now < crowdsaleStart + 1 days) return 15000; // Ludum token sale with 50% bonus\n\t\t\tif (now < crowdsaleStart + 7 days) return 13000; // Ludum token sale with 30% bonus\n\t\t\tif (now < crowdsaleStart + 14 days) return 11000; // Ludum token sale with 10% bonus\n\t\t\treturn 10000; // Ludum token sale\n\t\t}\n\n    }\n\n\n    // events\n    event CreateLudumTokens(address indexed _to, uint _value);\n\n    // Ludum token constructor\n    function LudumToken(\n        address _ethDepositAddress,\n        address _teamFundAddress,\n\t\taddress _operationsFundAddress,\n\t\taddress _marketingFundAddress\n\t)\n    {\n        isFinalized = false;\n        ethDepositAddress = _ethDepositAddress;\n        teamFundAddress = _teamFundAddress;\n\t    operationsFundAddress = _operationsFundAddress;\n\t    marketingFundAddress = _marketingFundAddress;\n    }\n\n\n    function makeTokens() payable  {\n\t\trequire( !isFinalized );\n\t\trequire( now >= crowdsaleStart );\n\t\trequire( now < crowdsaleEnd );\n\t\trequire( msg.value >= 10 finney );\n\n        uint tokens = msg.value.mul(ludumTokensPerEther());\n\t    uint teamTokens = tokens.mul(teamPercent).div(100);\n\t    uint operationsTokens = tokens.mul(operationsPercent).div(100);\n\t    uint marketingTokens = tokens.mul(marketingPercent).div(100);\n\n\t    uint currentSupply = totalSupply.add(tokens).add(teamTokens).add(operationsTokens).add(marketingTokens);\n\n\t\trequire( maximumSupply >= currentSupply );\n\n        totalSupply = currentSupply;\n\n        balances[msg.sender] += tokens;\n        CreateLudumTokens(msg.sender, tokens);\n\t  \n\t    balances[teamFundAddress] += teamTokens;\n        CreateLudumTokens(teamFundAddress, teamTokens);\n\t  \n\t    balances[operationsFundAddress] += operationsTokens;\n        CreateLudumTokens(operationsFundAddress, operationsTokens);\n\t  \n\t    balances[marketingFundAddress] += marketingTokens;\n        CreateLudumTokens(marketingFundAddress, marketingTokens);\n    }\n\n\n    function() payable {\n        makeTokens();\n    }\n\n\n    function finalizeCrowdsale() external {\n\t\trequire( !isFinalized );\n\t\trequire( msg.sender == ethDepositAddress );\n\t\trequire( now >= crowdsaleEnd || totalSupply == maximumSupply );\n\n        isFinalized = true;\n\n\t\trequire( ethDepositAddress.send(this.balance) );\n    }\n\n}",
  "bytecode": "6060604052341561000f57600080fd5b604051608080610ee9833981016040528080519190602001805191906020018051919060200180519150505b6006805460038054600160a060020a03808916600160a060020a031992831617909255600480548884169083161790556005805487841692169190911790558316600160a860020a03199091161790555b505050505b610e49806100a06000396000f300606060405236156101305763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630480e58b811461014157806306fdde0314610166578063095ea7b3146101f15780630bf318a31461022757806318160ddd1461023c57806323b872dd14610261578063313ce5671461029d5780634d9aa424146102c657806370a08231146102eb5780637fdb67201461031c578063887c4f681461034b5780638d4e408314610370578063907be3941461039757806395d89b41146103c6578063a9059cbb14610451578063b420feb214610487578063b7ac5d3b146104b6578063be28f5db146104e5578063cc3bb31a146104ef578063d8020a1814610514578063dd62ed3e14610539578063e164ac5014610570578063f00f087f14610570575b61013f5b61013c6105ba565b5b565b005b341561014c57600080fd5b610154610824565b60405190815260200160405180910390f35b341561017157600080fd5b610179610833565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101b65780820151818401525b60200161019d565b50505050905090810190601f1680156101e35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101fc57600080fd5b610213600160a060020a036004351660243561086a565b604051901515815260200160405180910390f35b341561023257600080fd5b61013f610911565b005b341561024757600080fd5b6101546109ef565b60405190815260200160405180910390f35b341561026c57600080fd5b610213600160a060020a03600435811690602435166044356109f5565b604051901515815260200160405180910390f35b34156102a857600080fd5b6102b0610b1f565b60405160ff909116815260200160405180910390f35b34156102d157600080fd5b610154610b24565b60405190815260200160405180910390f35b34156102f657600080fd5b610154600160a060020a0360043516610b2c565b60405190815260200160405180910390f35b341561032757600080fd5b61032f610b4b565b604051600160a060020a03909116815260200160405180910390f35b341561035657600080fd5b610154610b5a565b60405190815260200160405180910390f35b341561037b57600080fd5b610213610bc6565b604051901515815260200160405180910390f35b34156103a257600080fd5b61032f610be7565b604051600160a060020a03909116815260200160405180910390f35b34156103d157600080fd5b610179610bf6565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101b65780820151818401525b60200161019d565b50505050905090810190601f1680156101e35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561045c57600080fd5b610213600160a060020a0360043516602435610c2d565b604051901515815260200160405180910390f35b341561049257600080fd5b61032f610d05565b604051600160a060020a03909116815260200160405180910390f35b34156104c157600080fd5b61032f610d14565b604051600160a060020a03909116815260200160405180910390f35b61013f6105ba565b005b34156104fa57600080fd5b610154610d23565b60405190815260200160405180910390f35b341561051f57600080fd5b610154610d2b565b60405190815260200160405180910390f35b341561054457600080fd5b610154600160a060020a0360043581169060243516610d30565b60405190815260200160405180910390f35b341561057b57600080fd5b610154610d5d565b60405190815260200160405180910390f35b341561057b57600080fd5b610154610d5d565b60405190815260200160405180910390f35b6000806000806000600660149054906101000a900460ff161515156105de57600080fd5b6359a405c04210156105ef57600080fd5b6359c8efc042106105ff57600080fd5b662386f26fc1000034101561061357600080fd5b61062b61061e610b5a565b349063ffffffff610d6716565b945061064f606461064387600a63ffffffff610d6716565b9063ffffffff610d9616565b9350610673606461064387600a63ffffffff610d6716565b9063ffffffff610d9616565b9250610697606461064387600563ffffffff610d6716565b9063ffffffff610d9616565b91506106de826106ba856106ba886106ba8b600054610dd590919063ffffffff16565b9063ffffffff610dd516565b9063ffffffff610dd516565b9063ffffffff610dd516565b90506a52b7d2dcc80cd2e4000000819010156106f957600080fd5b6000818155600160a060020a033316808252600160205260409182902080548801905590600080516020610dfe8339815191529087905190815260200160405180910390a260048054600160a060020a039081166000908152600160205260409081902080548801905591541690600080516020610dfe8339815191529086905190815260200160405180910390a260058054600160a060020a039081166000908152600160205260409081902080548701905591541690600080516020610dfe8339815191529085905190815260200160405180910390a260068054600160a060020a039081166000908152600160205260409081902080548601905591541690600080516020610dfe8339815191529084905190815260200160405180910390a25b5050505050565b6a52b7d2dcc80cd2e400000081565b60408051908101604052600581527f4c7564756d000000000000000000000000000000000000000000000000000000602082015281565b600081158061089c5750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b15156108a757600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60065474010000000000000000000000000000000000000000900460ff161561093957600080fd5b60035433600160a060020a0390811691161461095457600080fd5b6359c8efc04210158061097357506a52b7d2dcc80cd2e4000000600054145b151561097e57600080fd5b6006805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055600354600160a060020a039081169030163180156108fc0290604051600060405180830381858888f19350505050151561013c57600080fd5b5b565b60005481565b60006064361015610a0557600080fd5b60008211610a1257600080fd5b600160a060020a03841660009081526001602052604090205482901015610a3857600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482901015610a6c57600080fd5b600160a060020a03831660009081526001602052604090205482810111610a9257600080fd5b600160a060020a0380851660008181526001602081815260408084208054899003905560028252808420338716855282528084208054899003905594881680845291905290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b9392505050565b601281565b6359c8efc081565b600160a060020a0381166000908152600160205260409020545b919050565b600454600160a060020a031681565b60006359a405c0421080610b7157506359c8efc042115b15610b7e57506000610bc2565b6359a55740421015610b935750613a98610bc2565b6359ad4040421015610ba857506132c8610bc2565b6359b67ac0421015610bbd5750612af8610bc2565b506127105b5b90565b60065474010000000000000000000000000000000000000000900460ff1681565b600554600160a060020a031681565b60408051908101604052600381527f4c444d0000000000000000000000000000000000000000000000000000000000602082015281565b60006044361015610c3d57600080fd5b60008211610c4a57600080fd5b600160a060020a03331660009081526001602052604090205482901015610c7057600080fd5b600160a060020a03831660009081526001602052604090205482810111610c9657600080fd5b600160a060020a033381166000818152600160205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600354600160a060020a031681565b600654600160a060020a031681565b6359a405c081565b600581565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b600a81565b600a81565b6000828202831580610d835750828482811515610d8057fe5b04145b1515610d8b57fe5b8091505b5092915050565b600080808311610da257fe5b8284811515610dad57fe5b0490508284811515610dbb57fe5b068184020184141515610d8b57fe5b8091505b5092915050565b6000828201838110801590610d835750828110155b1515610d8b57fe5b8091505b509291505056007d3c6da5f1f3bf14d7c1dae3be99a677a914a416aeadeccf865bf967b9ff53bfa165627a7a72305820a65b252191cb11811bdefd0d0ee1685968e2d3aa82a9820c08d8970d12855cef0029000000000000000000000000d8e4fb6cc1bd2a8ef6e086152877e7ba540b5d9b000000000000000000000000b6fcb6ef9b46b4ea0ac403e74b53e3962f6fc41d00000000000000000000000081b9c43a410c86620fbd85509c29e8c93995a8a9000000000000000000000000057ccb6a9061aa61aeae047fdcddecb6511a0865",
  "constructorArguments": "000000000000000000000000d8e4fb6cc1bd2a8ef6e086152877e7ba540b5d9b000000000000000000000000b6fcb6ef9b46b4ea0ac403e74b53e3962f6fc41d00000000000000000000000081b9c43a410c86620fbd85509c29e8c93995a8a9000000000000000000000000057ccb6a9061aa61aeae047fdcddecb6511a0865"
}