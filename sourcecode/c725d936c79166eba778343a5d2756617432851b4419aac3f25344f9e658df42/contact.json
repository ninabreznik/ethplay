{
  "address": "0xc3e0c5fd68510d251c8c38734df2b992754bac87",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoFunding",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-06\n*/\n\npragma solidity ^0.4.10;\ncontract CryptoFunding { // set contract name to token name\n   \nstring public name; \nstring public symbol; \nuint8 public decimals;\nuint256 public totalSupply;\n \n// Balances for each account\nmapping(address => uint256) balances;\naddress devAddress;\n// Events\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\nevent Transfer(address indexed from, address indexed to, uint256 value);\n \n// Owner of account approves the transfer of an amount to another account\nmapping(address => mapping (address => uint256)) allowed;\n// This is the constructor and automatically runs when the smart contract is uploaded\nfunction CryptoFunding() { // Set the constructor to the same name as the contract name\n    name = \"CryptoFunding\"; // set the token name here\n    symbol = \"CFN\"; // set the Symbol here\n    decimals = 18; // set the number of decimals\n    uint initialBalance=200000000000000000000000000; \n    balances[msg.sender]=200000000000000000000000000;\n    totalSupply+=initialBalance; // Set the total suppy\n}\nfunction balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n}\n// Transfer the balance from owner's account to another account\nfunction transfer(address _to, uint256 _amount) returns (bool success) {\n    if (balances[msg.sender] >= _amount \n        && _amount > 0\n        && balances[_to] + _amount > balances[_to]) {\n        balances[msg.sender] -= _amount;\n        balances[_to] += _amount;\n        Transfer(msg.sender, _to, _amount); \n        return true;\n    } else {\n        return false;\n    }\n}\nfunction transferFrom(\n    address _from,\n    address _to,\n    uint256 _amount\n) returns (bool success) {\n    if (balances[_from] >= _amount\n        && allowed[_from][msg.sender] >= _amount\n        && _amount > 0\n        && balances[_to] + _amount > balances[_to]) {\n        balances[_from] -= _amount;\n        allowed[_from][msg.sender] -= _amount;\n        balances[_to] += _amount;\n        return true;\n    } else {\n        return false;\n    }\n}\n// Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n// If this function is called again it overwrites the current allowance with _value.\nfunction approve(address _spender, uint256 _amount) returns (bool success) {\n    allowed[msg.sender][_spender] = _amount;\n    Approval(msg.sender, _spender, _amount);\n    return true;\n}\n\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5060006040805190810160405280600d81526020017f43727970746f46756e64696e67000000000000000000000000000000000000008152506000908051906020019061005e92919061013a565b506040805190810160405280600381526020017f43464e0000000000000000000000000000000000000000000000000000000000815250600190805190602001906100aa92919061013a565b506012600260006101000a81548160ff021916908360ff1602179055506aa56fa5b99019a5c800000090506aa56fa5b99019a5c8000000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600360008282540192505081905550506101df565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061017b57805160ff19168380011785556101a9565b828001600101855582156101a9579182015b828111156101a857825182559160200191906001019061018d565b5b5090506101b691906101ba565b5090565b6101dc91905b808211156101d85760008160009055506001016101c0565b5090565b90565b610b07806101ee6000396000f30060806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610093578063095ea7b31461012357806318160ddd1461018857806323b872dd146101b3578063313ce5671461023857806370a082311461026957806395d89b41146102c0578063a9059cbb14610350575b600080fd5b34801561009f57600080fd5b506100a86103b5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100e85780820151818401526020810190506100cd565b50505050905090810190601f1680156101155780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561012f57600080fd5b5061016e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610453565b604051808215151515815260200191505060405180910390f35b34801561019457600080fd5b5061019d610545565b6040518082815260200191505060405180910390f35b3480156101bf57600080fd5b5061021e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061054b565b604051808215151515815260200191505060405180910390f35b34801561024457600080fd5b5061024d6107ed565b604051808260ff1660ff16815260200191505060405180910390f35b34801561027557600080fd5b506102aa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610800565b6040518082815260200191505060405180910390f35b3480156102cc57600080fd5b506102d5610849565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103155780820151818401526020810190506102fa565b50505050905090810190601f1680156103425780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561035c57600080fd5b5061039b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108e7565b604051808215151515815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561044b5780601f106104205761010080835404028352916020019161044b565b820191906000526020600020905b81548152906001019060200180831161042e57829003601f168201915b505050505081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60035481565b600081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610618575081600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156106245750600082115b80156106af5750600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b156107e15781600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600190506107e6565b600090505b9392505050565b600260009054906101000a900460ff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108df5780601f106108b4576101008083540402835291602001916108df565b820191906000526020600020905b8154815290600101906020018083116108c257829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156109385750600082115b80156109c35750600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15610ad05781600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610ad5565b600090505b929150505600a165627a7a72305820fdfe9322478ba8eb1cf984e57eca23f008e9043254cf8e3a4e13cb2379809f740029"
}