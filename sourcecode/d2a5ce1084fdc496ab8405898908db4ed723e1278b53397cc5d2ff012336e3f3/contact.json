{
  "address": "0x3885a234f24b1a4842f1df0f1ee2f91507876851",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MultiSender",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-01\n*/\n\npragma solidity ^0.4.24;\n\ncontract ERC20 {\n    function transferFrom(address _from, address _to, uint _value) returns (bool success);\n}\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract MultiSender {\n    using SafeMath for uint256;\n\n    function multiSend(address tokenAddress, address[] addresses, uint256[] amounts) public payable {\n        require(addresses.length <= 100);\n        require(addresses.length == amounts.length);\n        if (tokenAddress == 0x000000000000000000000000000000000000bEEF) {\n            multisendEther(addresses, amounts);\n        } else {\n            ERC20 token = ERC20(tokenAddress);\n            //Token address\n            for (uint8 i = 0; i < addresses.length; i++) {\n                address _address = addresses[i];\n                uint256 _amount = amounts[i];\n                token.transferFrom(msg.sender, _address, _amount);\n            }\n        }\n    }\n\n    function multisendEther(address[] addresses, uint256[] amounts) public payable {\n        uint256 total = msg.value;\n        uint256 i = 0;\n        for (i; i < addresses.length; i++) {\n            require(total >= amounts[i]);\n            total = total.sub(amounts[i]);\n            addresses[i].transfer(amounts[i]);\n        }\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiSend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multisendEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]",
  "bytecode": "608060405234801561001057600080fd5b506104c0806100206000396000f30060806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680639ec68f0f14610051578063ab883d281461010d575b600080fd5b61010b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506101a9565b005b6101a7600480360381019080803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929050505061038d565b005b60008060008060648651111515156101c057600080fd5b845186511415156101d057600080fd5b61beef73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16141561021557610210868661038d565b610384565b869350600092505b85518360ff16101561038357858360ff1681518110151561023a57fe5b906020019060200201519150848360ff1681518110151561025757fe5b9060200190602002015190508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561033a57600080fd5b505af115801561034e573d6000803e3d6000fd5b505050506040513d602081101561036457600080fd5b810190808051906020019092919050505050828060010193505061021d565b5b50505050505050565b600080349150600090505b83518110156104755782818151811015156103af57fe5b9060200190602002015182101515156103c757600080fd5b6103f183828151811015156103d857fe5b906020019060200201518361047b90919063ffffffff16565b9150838181518110151561040157fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff166108fc848381518110151561043257fe5b906020019060200201519081150290604051600060405180830381858888f19350505050158015610467573d6000803e3d6000fd5b508080600101915050610398565b50505050565b600082821115151561048957fe5b8183039050929150505600a165627a7a72305820002e368cd658d6a5e485febc9a3c0b00d6e23c6d4b2c0e78a56d86b6837743100029"
}