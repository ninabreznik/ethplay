{
  "address": "0xc0c8e33f861dfa70572bd959d49c9abc4871b4f0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AFSestimate",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-30\n*/\n\n// File: contracts/ignored_contracts/Ownable.sol\n\npragma solidity ^0.4.24;\n\ncontract Ownable {\n\n  address public owner_;\n\n  event TransferApproved(address indexed _previousOwner, address indexed _newOwner);\n  event TransferRequested(address indexed _currentOwner, address indexed _requestedOwner);\n  event RequestRevoked(address indexed _currentOwner, address indexed _requestOwner);\n\n  mapping(bytes32 => bool) public requesters_; // keccak256 hashes of requester addresses\n\n  modifier onlyOwner() {\n    require(msg.sender == owner_);\n    _;\n  }\n\n  modifier hasNotRequested() {\n    require(!requesters_[keccak256(abi.encodePacked(msg.sender))],\n      \"Ownership request already active.\");\n    _;\n  }\n\n  modifier hasRequested(address _newOwner) {\n    require(requesters_[keccak256(abi.encodePacked(_newOwner))], \n      \"Owner request has not been sent.\");\n    _;\n  }\n\n  function requestOwnership() public hasNotRequested {\n    bytes32 hashedAddress = keccak256(abi.encodePacked(msg.sender));\n    requesters_[hashedAddress] = true;\n    emit TransferRequested(owner_, msg.sender);\n  }\n\n  function revokeOwnershipRequest() public hasRequested(msg.sender) {\n    bytes32 hashedAddress = keccak256(abi.encodePacked(msg.sender));\n    requesters_[hashedAddress] = false;\n    emit RequestRevoked(owner_, msg.sender);\n  }\n\n  function approveOwnershipTransfer(address _newOwner) public onlyOwner hasRequested(_newOwner) {\n    owner_ = _newOwner;\n    bytes32 hashedAddress = keccak256(abi.encodePacked(msg.sender));\n    requesters_[hashedAddress] = false;\n  }\n\n}\n\n// File: contracts/SafeMath32.sol\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath32 {\n\n  function mul(uint32 a, uint32 b) internal pure returns (uint32) {\n    if (a == 0) {\n      return 0;\n    }\n\n    uint32 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint32 a, uint32 b) internal pure returns (uint32) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint32 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesnâ€™t hold\n    return c;\n  }\n\n  function sub(uint32 a, uint32 b) internal pure returns (uint32) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint32 a, uint32 b) internal pure returns (uint32) {\n    uint32 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/AraProxy.sol\n\npragma solidity ^0.4.24;\n\n/**\n * @title AraProxy\n * @dev Gives the possibility to delegate any call to a foreign implementation.\n */\ncontract AraProxy {\n\n  bytes32 private constant registryPosition_ = keccak256(\"io.ara.proxy.registry\");\n  bytes32 private constant implementationPosition_ = keccak256(\"io.ara.proxy.implementation\");\n\n  modifier restricted() {\n    bytes32 registryPosition = registryPosition_;\n    address registryAddress;\n    assembly {\n      registryAddress := sload(registryPosition)\n    }\n    require(\n      msg.sender == registryAddress,\n      \"Only the AraRegistry can upgrade this proxy.\"\n    );\n    _;\n  }\n\n  /**\n  * @dev the constructor sets the AraRegistry address\n  */\n  constructor(address _registryAddress, address _implementationAddress) public {\n    bytes32 registryPosition = registryPosition_;\n    bytes32 implementationPosition = implementationPosition_;\n    assembly {\n      sstore(registryPosition, _registryAddress)\n      sstore(implementationPosition, _implementationAddress)\n    }\n  }\n\n  function setImplementation(address _newImplementation) public restricted {\n    require(_newImplementation != address(0));\n    bytes32 implementationPosition = implementationPosition_;\n    assembly {\n      sstore(implementationPosition, _newImplementation)\n    }\n  }\n\n  /**\n  * @dev Fallback function allowing to perform a delegatecall to the given implementation.\n  * This function will return whatever the implementation call returns\n  */\n  function () payable public {\n    bytes32 implementationPosition = implementationPosition_;\n    address _impl;\n    assembly {\n      _impl := sload(implementationPosition)\n    }\n\n    assembly {\n      let ptr := mload(0x40)\n      calldatacopy(ptr, 0, calldatasize)\n      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n      let size := returndatasize\n      returndatacopy(ptr, 0, size)\n\n      switch result\n      case 0 { revert(ptr, size) }\n      default { return(ptr, size) }\n    }\n  }\n}\n\n// File: contracts/ignored_contracts/Registry.sol\n\npragma solidity ^0.4.24;\n\n\ncontract Registry {\n  address public owner_;\n  mapping (bytes32 => address) private proxies_; // contentId (unhashed) => proxy\n  mapping (bytes32 => address) private proxyOwners_; // contentId (unhashed) => owner\n  mapping (string => address) private versions_; // version => implementation\n  mapping (address => string) public proxyImpls_; // proxy => version\n  string public latestVersion_;\n\n  event ProxyDeployed(address indexed _owner, bytes32 indexed _contentId, address _address);\n  event ProxyUpgraded(bytes32 indexed _contentId, string indexed _version);\n  event StandardAdded(string indexed _version, address _address);\n\n  function init(bytes _data) public {\n    require(owner_ == address(0), 'Registry has already been initialized.');\n\n    uint256 btsptr;\n    address ownerAddr;\n    assembly {\n      btsptr := add(_data, 32)\n      ownerAddr := mload(btsptr)\n    }\n    owner_ = ownerAddr;\n  }\n\n  modifier restricted() {\n    require (\n      msg.sender == owner_,\n      \"Sender not authorized.\"\n    );\n    _;\n  }\n\n  modifier onlyProxyOwner(bytes32 _contentId) {\n    require(\n      proxyOwners_[_contentId] == msg.sender,\n      \"Sender not authorized.\"\n    );\n    _;\n  }\n\n  function getProxyAddress(bytes32 _contentId) public view returns (address) {\n    return proxies_[_contentId];\n  }\n\n  function getProxyOwner(bytes32 _contentId) public view returns (address) {\n    return proxyOwners_[_contentId];\n  }\n\n  function getImplementation(string _version) public view returns (address) {\n    return versions_[_version];\n  }\n\n  function getProxyVersion(bytes32 _contentId) public view returns (string) {\n    return proxyImpls_[getProxyAddress(_contentId)];\n  }\n  \n  /**\n   * @dev AFS Proxy Factory\n   * @param _contentId The unhashed methodless content DID\n   * @param _version The implementation version to use with this Proxy\n   * @param _data AFS initialization data\n   * @return address of the newly deployed Proxy\n   */\n  function createAFS(bytes32 _contentId, string _version, bytes _data) public {\n    require(proxies_[_contentId] == address(0), \"Proxy already exists for this content.\");\n    require(versions_[_version] != address(0), \"Version does not exist.\");\n    AraProxy proxy = new AraProxy(address(this), versions_[_version]);\n    proxies_[_contentId] = proxy;\n    proxyOwners_[_contentId] = msg.sender;\n    upgradeProxyAndCall(_contentId, _version, _data);\n    emit ProxyDeployed(msg.sender, _contentId, address(proxy));\n  }\n\n  /**\n   * @dev Upgrades proxy implementation version\n   * @param _contentId The unhashed methodless content DID\n   * @param _version The implementation version to upgrade this Proxy to\n   */\n  function upgradeProxy(bytes32 _contentId, string _version) public onlyProxyOwner(_contentId) {\n    require(versions_[_version] != address(0), \"Version does not exist.\");\n    AraProxy proxy = AraProxy(proxies_[_contentId]);\n    proxy.setImplementation(versions_[_version]);\n    proxyImpls_[proxies_[_contentId]] = _version;\n    emit ProxyUpgraded(_contentId, _version);\n  }\n\n  /**\n   * @dev Upgrades proxy implementation version with initialization\n   * @param _contentId The unhashed methodless content DID\n   * @param _version The implementation version to upgrade this Proxy to\n   * @param _data AFS initialization data\n   */\n  function upgradeProxyAndCall(bytes32 _contentId, string _version, bytes _data) public onlyProxyOwner(_contentId) {\n    require(versions_[_version] != address(0), \"Version does not exist.\");\n    require(keccak256(abi.encodePacked(proxyImpls_[proxy])) != keccak256(abi.encodePacked(_version)), \"Proxy is already on this version.\");\n    AraProxy proxy = AraProxy(proxies_[_contentId]);\n    proxy.setImplementation(versions_[_version]);\n    proxyImpls_[proxy] = _version;\n    require(address(proxy).call(abi.encodeWithSignature(\"init(bytes)\", _data)), \"Init failed.\");\n    emit ProxyUpgraded(_contentId, _version);\n  }\n\n  /**\n   * @dev Adds a new AFS implementation standard\n   * @param _version The implementation version name\n   * @param _address The address of the new AFS implementation\n   */\n  function addStandardVersion(string _version, address _address) public restricted {\n    require(versions_[_version] == address(0), \"Version already exists.\");\n    versions_[_version] = _address;\n    latestVersion_ = _version;\n    emit StandardAdded(_version, _address);\n  }\n}\n\n// File: contracts/ignored_contracts/Library.sol\n\npragma solidity ^0.4.24;\n\n\n\ncontract Library {\n  using SafeMath32 for uint32;\n\n  address public owner_;\n  mapping (bytes32 => Lib) private libraries_; // hashed methodless owner did => library\n  Registry registry_;\n\n  struct Lib {\n    uint32 size;\n    mapping (uint32 => bytes32) content; // index => contentId (unhashed)\n  }\n\n  event AddedToLib(bytes32 indexed _identity, bytes32 indexed _contentId);\n\n  function init(bytes _data) public {\n    require(owner_ == address(0), 'Library has already been initialized.');\n\n    uint256 btsptr;\n    address ownerAddr;\n    address registryAddr;\n    assembly {\n      btsptr := add(_data, 32)\n      ownerAddr := mload(btsptr)\n      btsptr := add(_data, 64)\n      registryAddr := mload(btsptr)\n    }\n    owner_ = ownerAddr;\n    registry_ = Registry(registryAddr);\n  }\n\n  modifier restricted() {\n    require (msg.sender == owner_, \"Sender not authorized.\");\n     _;\n  }\n\n  modifier fromProxy(bytes32 _contentId) {\n    require (msg.sender == registry_.getProxyAddress(_contentId), \"Proxy not authorized.\");\n     _;\n  }\n\n  function getLibrarySize(bytes32 _identity) public view returns (uint32 size) {\n    return libraries_[_identity].size;\n  }\n\n  function getLibraryItem(bytes32 _identity, uint32 _index) public view returns (bytes32 contentId) {\n    require (_index < libraries_[_identity].size, \"Index does not exist.\");\n    return libraries_[_identity].content[_index];\n  }\n\n  function addLibraryItem(bytes32 _identity, bytes32 _contentId) public fromProxy(_contentId) {\n    uint32 libSize = libraries_[_identity].size;\n    assert (libraries_[_identity].content[libSize] == bytes32(0));\n    libraries_[_identity].content[libSize] = _contentId;\n    libraries_[_identity].size++;\n    emit AddedToLib(_identity, _contentId);\n  }\n}\n\n// File: contracts/ignored_contracts/ERC20.sol\n\npragma solidity ^0.4.24;\n\n/**\n * NOTE: This contract will be removed once openzeppelin-solidity releases this code as an official release.\n */\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n  function totalSupply() public view returns (uint256);\n\n  function balanceOf(address _who) public view returns (uint256);\n\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transfer(address _to, uint256 _value) public returns (bool);\n\n  function approve(address _spender, uint256 _value)\n    public returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: contracts/ignored_contracts/StandardToken.sol\n\npragma solidity ^0.4.24;\n\n/**\n * NOTE: This contract will be removed once openzeppelin-solidity releases this code as an official release.\n * -Charles \n */\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private balances_;\n\n  mapping (address => mapping (address => uint256)) private allowed_;\n\n  uint256 private totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances_[_owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed_[_owner][_spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances_[msg.sender]);\n    require(_to != address(0));\n\n    balances_[msg.sender] = balances_[msg.sender].sub(_value);\n    balances_[_to] = balances_[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed_[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances_[_from]);\n    require(_value <= allowed_[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances_[_from] = balances_[_from].sub(_value);\n    balances_[_to] = balances_[_to].add(_value);\n    allowed_[_from][msg.sender] = allowed_[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed_[msg.sender][_spender] = (\n      allowed_[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed_[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed_[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed_[msg.sender][_spender] = 0;\n    } else {\n      allowed_[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed_[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param _account The account that will receive the created tokens.\n   * @param _amount The amount that will be created.\n   */\n  function _mint(address _account, uint256 _amount) internal {\n    require(_account != 0);\n    totalSupply_ = totalSupply_.add(_amount);\n    balances_[_account] = balances_[_account].add(_amount);\n    emit Transfer(address(0), _account, _amount);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param _account The account whose tokens will be burnt.\n   * @param _amount The amount that will be burnt.\n   */\n  function _burn(address _account, uint256 _amount) internal {\n    require(_account != 0);\n    require(_amount <= balances_[_account]);\n\n    totalSupply_ = totalSupply_.sub(_amount);\n    balances_[_account] = balances_[_account].sub(_amount);\n    emit Transfer(_account, address(0), _amount);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal _burn function.\n   * @param _account The account whose tokens will be burnt.\n   * @param _amount The amount that will be burnt.\n   */\n  function _burnFrom(address _account, uint256 _amount) internal {\n    require(_amount <= allowed_[_account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    allowed_[_account][msg.sender] = allowed_[_account][msg.sender].sub(\n      _amount);\n    _burn(_account, _amount);\n  }\n}\n\n// File: contracts/ignored_contracts/AraToken.sol\n\npragma solidity ^0.4.24;\n\n\ncontract AraToken is StandardToken {\n\n  // metadata\n  bool    private initialized;\n  string  public constant name = \"Ara Token\";\n  string  public constant symbol = \"ARA\";\n  uint256 public constant decimals = 18;\n  string  public version = \"1.0\";\n\n\n  mapping (address => uint256) private deposits_;\n\n  event Deposit(address indexed from, uint256 value, uint256 total);\n  event Withdraw(address indexed to, uint256 value, uint256 total);\n\n  function init(bytes _data) public {\n    require(!initialized, 'Ara Token has already been initialized.');\n    initialized = true;\n    \n    uint256 btsptr;\n    address ownerAddr;\n    assembly {\n      btsptr := add(_data, 32)\n      ownerAddr := mload(btsptr)\n    }\n    _mint(ownerAddr, formatDecimals(1000000000)); // 1,000,000,000\n  }\n\n  function formatDecimals(uint256 _value) internal pure returns (uint256) {\n    return _value * 10 ** decimals;\n  }\n\n  function amountDeposited(address _owner) public view returns (uint256) {\n    return deposits_[_owner];\n  }\n\n  function deposit(uint256 _value) external returns (bool) {\n    require(_value <= balanceOf(msg.sender));\n\n    deposits_[msg.sender] = deposits_[msg.sender].add(_value);\n    emit Deposit(msg.sender, _value, deposits_[msg.sender]);\n    return true;\n  }\n\n  function withdraw(uint256 _value) external returns (bool) {\n    require(_value <= deposits_[msg.sender]);\n\n    deposits_[msg.sender] = deposits_[msg.sender].sub(_value);\n    emit Withdraw(msg.sender, _value, deposits_[msg.sender]);\n    return true;\n  }\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(balanceOf(msg.sender) - _value >= deposits_[msg.sender]);\n    return super.transfer(_to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    require(balanceOf(msg.sender) - _value >= deposits_[msg.sender]);\n    return super.approve(_spender, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(balanceOf(_from) - _value >= deposits_[_from]);\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(balanceOf(msg.sender) - (_addedValue + allowance(msg.sender, _spender)) >= deposits_[msg.sender]);\n    return super.increaseApproval(_spender, _addedValue);\n  }\n}\n\n// File: installed_contracts/bytes/contracts/BytesLib.sol\n\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Nick Johnson <[emailÂ protected]>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\n\npragma solidity ^0.4.19;\n\n\nlibrary BytesLib {\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes) {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add \n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(0x40, and(\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n              not(31) // Round down to the nearest 32 bytes.\n            ))\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes_slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes_slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes_slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes_slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                    sc,\n                    add(\n                        and(\n                            fslot,\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                        ),\n                        and(mload(mc), mask)\n                    )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes_slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes_slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n                \n                for { \n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(bytes _bytes, uint _start, uint _length) internal  pure returns (bytes) {\n        require(_bytes.length >= (_start + _length));\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes _bytes, uint _start) internal  pure returns (address) {\n        require(_bytes.length >= (_start + 20));\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint(bytes _bytes, uint _start) internal  pure returns (uint256) {\n        require(_bytes.length >= (_start + 32));\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes _bytes, uint _start) internal  pure returns (bytes32) {\n        require(_bytes.length >= (_start + 32));\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                // the next line is the loop condition:\n                // while(uint(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes_slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes_slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint(mc < end) + cb == 2)\n                        for {} eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n\n// File: contracts/ignored_contracts/AFS_estimate.sol\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n\ncontract AFSestimate is Ownable {\n  using SafeMath for uint256;\n  using BytesLib for bytes;\n\n  string   public version_ = \"1\";\n\n  AraToken public token_;\n  Library  public lib_;\n\n  bytes32  public did_;\n  bool     public listed_;\n  uint256  public price_;\n\n  uint256  public depositRequirement_;\n\n  mapping(bytes32 => Job)     public jobs_; // jobId => job { budget, sender }\n  mapping(bytes32 => uint256) public rewards_;    // farmer => rewards\n  mapping(bytes32 => bool)    public purchasers_; // keccak256 hashes of buyer addresses\n  mapping(uint8 => mapping (uint256 => bytes))   public metadata_;\n\n  struct Job {\n    address sender;\n    uint256 budget;\n  }\n\n  event Commit(bytes32 _did);\n  event Unlisted(bytes32 _did);\n  event PriceSet(uint256 _price);\n  event BudgetSubmitted(address indexed _sender, bytes32 indexed _jobId, uint256 _budget);\n  event RewardsAllocated(address indexed _farmer, bytes32 indexed _jobId, uint256 _allocated, uint256 _remaining);\n  event InsufficientDeposit(address indexed _farmer);\n  event Purchased(bytes32 indexed _purchaser, uint256 _price);\n  event Redeemed(address indexed _sender, uint256 _amount);\n\n  uint8 constant mtBufferSize_ = 40;\n  uint8 constant msBufferSize_ = 64;\n\n  modifier purchaseRequired()\n  {\n    require(\n      purchasers_[keccak256(abi.encodePacked(msg.sender))],\n      \"Content was never purchased.\"\n    );\n    _;\n  }\n\n  modifier budgetSubmitted(bytes32 _jobId)\n  {\n    require(\n      jobs_[_jobId].sender == msg.sender && jobs_[_jobId].budget > 0,\n      \"Job is invalid.\"\n    );\n    _;\n  }\n\n  function init(bytes _data) public {\n    require(owner_ == address(0), 'This AFS standard has already been initialized.');\n  \n    uint256 btsptr;\n    address ownerAddr;\n    address tokenAddr;\n    address libAddr;\n    bytes32 did;\n    /* solium-disable-next-line security/no-inline-assembly */\n    assembly {\n      btsptr := add(_data, 32)\n      ownerAddr := mload(btsptr)\n      btsptr := add(_data, 64)\n      tokenAddr := mload(btsptr)\n      btsptr := add(_data, 96)\n      libAddr := mload(btsptr)\n      btsptr := add(_data, 128)\n      did := mload(btsptr)\n    }\n    owner_    = ownerAddr;\n    token_    = AraToken(tokenAddr);\n    lib_      = Library(libAddr);\n    did_      = did;\n    listed_   = true;\n    price_    = 0;\n    depositRequirement_  = 100 * 10 ** token_.decimals();\n  }\n\n  function setPrice(uint256 _price) external {\n    price_ = _price;\n    emit PriceSet(price_);\n  }\n\n  function submitBudget(bytes32 _jobId, uint256 _budget) public purchaseRequired {\n    uint256 allowance = token_.allowance(msg.sender, address(this));\n    require(_jobId != bytes32(0) && _budget > 0 && allowance >= _budget\n      && (jobs_[_jobId].sender == address(0) || jobs_[_jobId].sender == msg.sender), \"Job submission invalid.\");\n\n    if (token_.transferFrom(msg.sender, address(this), _budget)) {\n      jobs_[_jobId].budget = jobs_[_jobId].budget.add(_budget);\n      jobs_[_jobId].sender = msg.sender;\n      assert(jobs_[_jobId].budget <= token_.balanceOf(address(this)));\n      emit BudgetSubmitted(msg.sender, _jobId, _budget);\n    }\n  }\n\n  function allocateRewards(bytes32 _jobId, address[] _farmers, uint256[] _rewards) public budgetSubmitted(_jobId) {\n    require(_farmers.length > 0, \"Must allocate to at least one farmer.\");\n    require(_farmers.length == _rewards.length, \"Unequal number of farmers and rewards.\");\n    uint256 totalRewards;\n    for (uint256 i = 0; i < _rewards.length; i++) {\n      address farmer = _farmers[i];\n      require(farmer != msg.sender, \"Cannot allocate rewards to job creator.\");\n      require(purchasers_[keccak256(abi.encodePacked(farmer))] || token_.amountDeposited(farmer) >= depositRequirement_, \"Farmer must be a purchaser of this AFS or have sufficient token deposit.\");\n      totalRewards = totalRewards.add(_rewards[i]);\n    }\n    require(totalRewards <= jobs_[_jobId].budget, \"Insufficient budget.\");\n    for (uint256 j = 0; j < _farmers.length; j++) {\n      assert(jobs_[_jobId].budget >= _rewards[j]);\n      bytes32 hashedFarmer = keccak256(abi.encodePacked(_farmers[j]));\n      rewards_[hashedFarmer] = rewards_[hashedFarmer].add(_rewards[j]);\n      jobs_[_jobId].budget = jobs_[_jobId].budget.sub(_rewards[j]);\n      emit RewardsAllocated(_farmers[j], _jobId, _rewards[j], jobs_[_jobId].budget);\n    }\n  }\n\n  function redeemBalance() public {\n    if (msg.sender == owner_ || token_.amountDeposited(msg.sender) >= depositRequirement_ || purchasers_[keccak256(abi.encodePacked(msg.sender))]) {\n      bytes32 hashedAddress = keccak256(abi.encodePacked(msg.sender));\n      require(rewards_[hashedAddress] > 0, \"No balance to redeem.\");\n      if (token_.transfer(msg.sender, rewards_[hashedAddress])) {\n        emit Redeemed(msg.sender, rewards_[hashedAddress]);\n        rewards_[hashedAddress] = 0;\n      }\n    } else {\n      emit InsufficientDeposit(msg.sender);\n    }\n  }\n\n  function getRewardsBalance(address _farmer) public view returns (uint256) {\n    return rewards_[keccak256(abi.encodePacked(_farmer))];\n  }\n\n  function getBudget(bytes32 _jobId) public view returns (uint256) {\n    return jobs_[_jobId].budget;\n  }\n\n  /**\n   * @dev Purchases this AFS and adds it to _purchaser's library. \n   *      If _download is true, deposits any remaining allowance \n   *      as rewards for this purchase\n   * @param _purchaser The hashed methodless did of the purchaser\n   * @param _jobId The jobId of the download, or 0x00000000000000000000000000000000 if N/A\n   * @param _budget The reward budget for jobId, or 0 if N/A\n   */\n  function purchase(bytes32 _purchaser, bytes32 _jobId, uint256 _budget) external {\n    require(listed_, \"Content is not listed for purchase.\");\n    uint256 allowance = token_.allowance(msg.sender, address(this));\n    bytes32 hashedAddress = keccak256(abi.encodePacked(msg.sender));\n    require (!purchasers_[hashedAddress] && allowance >= price_.add(_budget), \"Unable to purchase.\");\n\n    if (token_.transferFrom(msg.sender, owner_, price_)) {\n      purchasers_[hashedAddress] = true;\n      lib_.addLibraryItem(_purchaser, did_);\n      emit Purchased(_purchaser, price_);\n\n      if (_jobId != bytes32(0) && _budget > 0) {\n        submitBudget(_jobId, _budget);\n      }\n    }\n  }\n\n  function append(uint256[] _mtOffsets, uint256[] _msOffsets, bytes _mtBuffer, \n    bytes _msBuffer) external {\n    \n    require(listed_, \"AFS is unlisted.\");\n    \n    uint256 maxOffsetLength = _mtOffsets.length > _msOffsets.length \n      ? _mtOffsets.length \n      : _msOffsets.length;\n\n    for (uint i = 0; i < maxOffsetLength; i++) {\n      // metadata/tree\n      if (i <= _mtOffsets.length - 1) {\n        metadata_[0][_mtOffsets[i]] = _mtBuffer.slice(i * mtBufferSize_, mtBufferSize_);\n      }\n\n      // metadata/signatures\n      if (i <= _msOffsets.length - 1) {\n        metadata_[1][_msOffsets[i]] = _msBuffer.slice(i * msBufferSize_, msBufferSize_);\n      }\n    }\n\n    emit Commit(did_);\n  }\n\n  function write(uint256[] _mtOffsets, uint256[] _msOffsets, bytes _mtBuffer, \n    bytes _msBuffer) public {\n\n    require(listed_, \"AFS is unlisted.\");\n\n    uint256 maxOffsetLength = _mtOffsets.length > _msOffsets.length \n      ? _mtOffsets.length \n      : _msOffsets.length;\n\n    // add headers\n    metadata_[0][0] = _mtBuffer.slice(0, 32);\n    metadata_[1][0] = _msBuffer.slice(0, 32);\n\n    for (uint i = 1; i < maxOffsetLength; i++) {\n      // metadata/tree\n      if (i <= _mtOffsets.length - 1) {\n        metadata_[0][_mtOffsets[i]] = _mtBuffer.slice(_mtOffsets[i], mtBufferSize_);\n      }\n      \n      // metadata/signatures\n      if (i <= _msOffsets.length - 1) {\n        metadata_[1][_msOffsets[i]] = _msBuffer.slice(_msOffsets[i], msBufferSize_);\n      }\n    }\n\n    emit Commit(did_);\n  }\n\n  function read(uint8 _file, uint256 _offset) public view returns (bytes buffer) {\n    if (!listed_) {\n      return \"\"; // empty bytes\n    }\n    return metadata_[_file][_offset];\n  }\n\n  function hasBuffer(uint8 _file, uint256 _offset, bytes _buffer) public view returns (bool exists) {\n    return metadata_[_file][_offset].equal(_buffer);\n  }\n\n  function unlist() public returns (bool success) {\n    listed_ = false;\n    emit Unlisted(did_);\n    return true;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"jobs_\",\"outputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"budget\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listed_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jobId\",\"type\":\"bytes32\"},{\"name\":\"_farmers\",\"type\":\"address[]\"},{\"name\":\"_rewards\",\"type\":\"uint256[]\"}],\"name\":\"allocateRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadata_\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeemBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lib_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"did_\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"approveOwnershipTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_jobId\",\"type\":\"bytes32\"}],\"name\":\"getBudget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"rewards_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositRequirement_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mtOffsets\",\"type\":\"uint256[]\"},{\"name\":\"_msOffsets\",\"type\":\"uint256[]\"},{\"name\":\"_mtBuffer\",\"type\":\"bytes\"},{\"name\":\"_msBuffer\",\"type\":\"bytes\"}],\"name\":\"append\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_farmer\",\"type\":\"address\"}],\"name\":\"getRewardsBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"requestOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requesters_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_file\",\"type\":\"uint8\"},{\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"read\",\"outputs\":[{\"name\":\"buffer\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mtOffsets\",\"type\":\"uint256[]\"},{\"name\":\"_msOffsets\",\"type\":\"uint256[]\"},{\"name\":\"_mtBuffer\",\"type\":\"bytes\"},{\"name\":\"_msBuffer\",\"type\":\"bytes\"}],\"name\":\"write\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version_\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_file\",\"type\":\"uint8\"},{\"name\":\"_offset\",\"type\":\"uint256\"},{\"name\":\"_buffer\",\"type\":\"bytes\"}],\"name\":\"hasBuffer\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_purchaser\",\"type\":\"bytes32\"},{\"name\":\"_jobId\",\"type\":\"bytes32\"},{\"name\":\"_budget\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jobId\",\"type\":\"bytes32\"},{\"name\":\"_budget\",\"type\":\"uint256\"}],\"name\":\"submitBudget\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"purchasers_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"revokeOwnershipRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_did\",\"type\":\"bytes32\"}],\"name\":\"Commit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_did\",\"type\":\"bytes32\"}],\"name\":\"Unlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"PriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_jobId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_budget\",\"type\":\"uint256\"}],\"name\":\"BudgetSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_farmer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_jobId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_allocated\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_remaining\",\"type\":\"uint256\"}],\"name\":\"RewardsAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_farmer\",\"type\":\"address\"}],\"name\":\"InsufficientDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_purchaser\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"TransferApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_currentOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_requestedOwner\",\"type\":\"address\"}],\"name\":\"TransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_currentOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_requestOwner\",\"type\":\"address\"}],\"name\":\"RequestRevoked\",\"type\":\"event\"}]",
  "bytecode": ""
}