{
  "address": "0x162abbc912ddaa3283c9f28af8cfaaa86e68bf6e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ShipCoinStorage",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-30\n*/\n\npragma solidity ^0.4.24;\n\n\n\ncontract IStorage {\n  function processPreSaleBonus(uint minTotalUsdAmountInCents, uint bonusPercent, uint _start, uint _limit) external returns(uint);\n  function checkNeedProcessPreSaleBonus(uint minTotalUsdAmountInCents) external view returns(bool);\n  function getCountNeedProcessPreSaleBonus(uint minTotalUsdAmountInCents, uint start, uint limit) external view returns(uint);\n  function reCountUserPreSaleBonus(uint uId, uint minTotalUsdAmountInCents, uint bonusPercent, uint maxPayTime) external returns(uint, uint);\n  function getContributorIndexes(uint index) external view returns(uint);\n  function checkNeedSendSHPC(bool proc) external view returns(bool);\n  function getCountNeedSendSHPC(uint start, uint limit) external view returns(uint);\n  function checkETHRefund(bool proc) external view returns(bool);\n  function getCountETHRefund(uint start, uint limit) external view returns(uint);\n  function addPayment(address _addr, string pType, uint _value, uint usdAmount, uint currencyUSD, uint tokenWithoutBonus, uint tokenBonus, uint bonusPercent, uint payId) public returns(bool);\n  function addPayment(uint uId, string pType, uint _value, uint usdAmount, uint currencyUSD, uint tokenWithoutBonus, uint tokenBonus, uint bonusPercent, uint payId) public returns(bool);\n  function checkUserIdExists(uint uId) public view returns(bool);\n  function getContributorAddressById(uint uId) public view returns(address);\n  function editPaymentByUserId(uint uId, uint payId, uint _payValue, uint _usdAmount, uint _currencyUSD, uint _totalToken, uint _tokenWithoutBonus, uint _tokenBonus, uint _bonusPercent) public returns(bool);\n  function getUserPaymentById(uint uId, uint payId) public view returns(uint time, bytes32 pType, uint currencyUSD, uint bonusPercent, uint payValue, uint totalToken, uint tokenBonus, uint tokenWithoutBonus, uint usdAbsRaisedInCents, bool refund);\n  function checkWalletExists(address addr) public view returns(bool result);\n  function checkReceivedCoins(address addr) public view returns(bool);\n  function getContributorId(address addr) public view returns(uint);\n  function getTotalCoin(address addr) public view returns(uint);\n  function setReceivedCoin(uint uId) public returns(bool);\n  function checkPreSaleReceivedBonus(address addr) public view returns(bool);\n  function checkRefund(address addr) public view returns(bool);\n  function setRefund(uint uId) public returns(bool);\n  function getEthPaymentContributor(address addr) public view returns(uint);\n  function refundPaymentByUserId(uint uId, uint payId) public returns(bool);\n  function changeSupportChangeMainWallet(bool support) public returns(bool);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title String\n * @dev ConcatenationString, uintToString, stringsEqual, stringToBytes32, bytes32ToString\n */\ncontract String {\n\n  function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string memory) {\n    bytes memory _ba = bytes(_a);\n    bytes memory _bb = bytes(_b);\n    bytes memory _bc = bytes(_c);\n    bytes memory _bd = bytes(_d);\n    bytes memory _be = bytes(_e);\n    bytes memory abcde = bytes(new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length));\n    uint k = 0;\n    uint i;\n    for (i = 0; i < _ba.length; i++) {\n      abcde[k++] = _ba[i];\n    }\n    for (i = 0; i < _bb.length; i++) {\n      abcde[k++] = _bb[i];\n    }\n    for (i = 0; i < _bc.length; i++) {\n      abcde[k++] = _bc[i];\n    }\n    for (i = 0; i < _bd.length; i++) {\n      abcde[k++] = _bd[i];\n    }\n    for (i = 0; i < _be.length; i++) {\n      abcde[k++] = _be[i];\n    }\n    return string(abcde);\n  }\n\n  function strConcat(string _a, string _b, string _c, string _d) internal pure returns(string) {\n    return strConcat(_a, _b, _c, _d, \"\");\n  }\n\n  function strConcat(string _a, string _b, string _c) internal pure returns(string) {\n    return strConcat(_a, _b, _c, \"\", \"\");\n  }\n\n  function strConcat(string _a, string _b) internal pure returns(string) {\n    return strConcat(_a, _b, \"\", \"\", \"\");\n  }\n\n  function uint2str(uint i) internal pure returns(string) {\n    if (i == 0) {\n      return \"0\";\n    }\n    uint j = i;\n    uint length;\n    while (j != 0) {\n      length++;\n      j /= 10;\n    }\n    bytes memory bstr = new bytes(length);\n    uint k = length - 1;\n    while (i != 0) {\n      bstr[k--] = byte(uint8(48 + i % 10));\n      i /= 10;\n    }\n    return string(bstr);\n  }\n\n  function stringsEqual(string memory _a, string memory _b) internal pure returns(bool) {\n    bytes memory a = bytes(_a);\n    bytes memory b = bytes(_b);\n\n    if (a.length != b.length)\n      return false;\n\n    for (uint i = 0; i < a.length; i++) {\n      if (a[i] != b[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function stringToBytes32(string memory source) internal pure returns(bytes32 result) {\n    bytes memory _tmp = bytes(source);\n    if (_tmp.length == 0) {\n      return 0x0;\n    }\n    assembly {\n      result := mload(add(source, 32))\n    }\n  }\n\n  function bytes32ToString(bytes32 x) internal pure returns (string) {\n    bytes memory bytesString = new bytes(32);\n    uint charCount = 0;\n    uint j;\n    for (j = 0; j < 32; j++) {\n      byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n      if (char != 0) {\n        bytesString[charCount] = char;\n        charCount++;\n      }\n    }\n    bytes memory bytesStringTrimmed = new bytes(charCount);\n    for (j = 0; j < charCount; j++) {\n      bytesStringTrimmed[j] = bytesString[j];\n    }\n    return string(bytesStringTrimmed);\n  }\n\n  function inArray(string[] _array, string _value) internal pure returns(bool result) {\n    if (_array.length == 0 || bytes(_value).length == 0) {\n      return false;\n    }\n    result = false;\n    for (uint i = 0; i < _array.length; i++) {\n      if (stringsEqual(_array[i],_value)) {\n        result = true;\n        return true;\n      }\n    }\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor () public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n}\n\n/**\n * @title MultiOwnable\n * @dev The MultiOwnable contract has an owner address[], and provides basic authorization control\n */\ncontract MultiOwnable is Ownable {\n\n  struct Types {\n    mapping (address => bool) access;\n  }\n  mapping (uint => Types) private multiOwnersTypes;\n\n  event AddOwner(uint _type, address addr);\n  event AddOwner(uint[] types, address addr);\n  event RemoveOwner(uint _type, address addr);\n\n  modifier onlyMultiOwnersType(uint _type) {\n    require(multiOwnersTypes[_type].access[msg.sender] || msg.sender == owner, \"403\");\n    _;\n  }\n\n  function onlyMultiOwnerType(uint _type, address _sender) public view returns(bool) {\n    if (multiOwnersTypes[_type].access[_sender] || _sender == owner) {\n      return true;\n    }\n    return false;\n  }\n\n  function addMultiOwnerType(uint _type, address _owner) public onlyOwner returns(bool) {\n    require(_owner != address(0));\n    multiOwnersTypes[_type].access[_owner] = true;\n    emit AddOwner(_type, _owner);\n    return true;\n  }\n  \n  function addMultiOwnerTypes(uint[] types, address _owner) public onlyOwner returns(bool) {\n    require(_owner != address(0));\n    require(types.length > 0);\n    for (uint i = 0; i < types.length; i++) {\n      multiOwnersTypes[types[i]].access[_owner] = true;\n    }\n    emit AddOwner(types, _owner);\n    return true;\n  }\n\n  function removeMultiOwnerType(uint types, address _owner) public onlyOwner returns(bool) {\n    require(_owner != address(0));\n    multiOwnersTypes[types].access[_owner] = false;\n    emit RemoveOwner(types, _owner);\n    return true;\n  }\n}\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n * @dev This simplifies the implementation of \"user permissions\".\n */\ncontract ShipCoinStorage is IStorage, MultiOwnable, String {\n  using SafeMath for uint256;\n\n  /* Events */\n  event WhitelistAddressAdded(address addr);\n  event WhitelistAddressRemoved(address addr);\n  event AddPayment(address addr);\n  event GotPreSaleBonus(address addr);\n  event EditUserPayments(address addr, uint payId);\n  event RefundPayment(address addr, uint payId);\n  event ReceivedCoin(address addr);\n  event Refund(address addr);\n  event ChangeMainWallet(address addr);\n\n  struct PaymentData {\n    uint time;\n    bytes32 pType;\n    uint currencyUSD;\n    uint payValue;\n    uint totalToken;\n    uint tokenWithoutBonus;\n    uint tokenBonus;\n    uint bonusPercent;\n    uint usdAbsRaisedInCents;\n  }\n\n  struct StorageData {\n    bool active;\n    mapping(bytes32 => uint) payInCurrency;\n    uint totalToken;\n    uint tokenWithoutBonus;\n    uint tokenBonus;\n    uint usdAbsRaisedInCents;\n    mapping(uint => PaymentData) paymentInfo;\n    address mainWallet;\n    address[] wallet;\n  }\n  // uId = { }\n  mapping(uint => StorageData) private contributorList;\n  // wallet = uId\n  mapping(address => uint) private contributorIds;\n  // i++ = uId\n  mapping(uint => uint) private contributorIndexes;\n  //uId = payIds\n  mapping(uint => uint[]) private contributorPayIds;\n  uint public nextContributorIndex;\n\n  bytes32[] private currencyTicker;\n  // uId\n  mapping(uint => uint) private receivedPreSaleBonus;\n  // uId\n  mapping(uint => bool) private receivedCoin;\n  //payIds\n  mapping(uint => bool) private payIds;\n  //payIds\n  mapping(uint => bool) private refundPayIds;\n  //uId\n  mapping(uint => bool) private refundUserIds;\n\n  uint private startGenId = 100000;\n\n  bool public supportChangeMainWallet = true;\n\n  /**\n   * @dev Calculate contributors appoint presale bonus\n   */\n  function processPreSaleBonus(uint minTotalUsdAmountInCents, uint bonusPercent, uint _start, uint _limit) external onlyMultiOwnersType(12) returns(uint) {\n    require(minTotalUsdAmountInCents > 10000);\n    require(bonusPercent > 20 && bonusPercent < 50);\n    require(_limit >= 10);\n\n    uint start = _start;\n    uint limit = _limit;\n    uint bonusTokenAll = 0;\n    for (uint i = start; i < limit; i++) {\n      uint uId = contributorIndexes[i];\n      if (contributorList[uId].active && !checkPreSaleReceivedBonus(uId) && contributorList[uId].usdAbsRaisedInCents >= minTotalUsdAmountInCents) {\n        uint bonusToken = contributorList[uId].tokenWithoutBonus.mul(bonusPercent).div(100);\n\n        contributorList[uId].totalToken += bonusToken;\n        contributorList[uId].tokenBonus = bonusToken;\n        receivedPreSaleBonus[uId] = bonusToken;\n        bonusTokenAll += bonusToken;\n        emit GotPreSaleBonus(contributorList[uId].mainWallet);\n      }\n    }\n\n    return bonusTokenAll;\n  }\n\n  /**\n   * @dev Checks contributors who have not received their presale bonuses\n   */\n  function checkNeedProcessPreSaleBonus(uint minTotalUsdAmountInCents) external view returns(bool) {\n    require(minTotalUsdAmountInCents > 10000);\n    bool processed = false;\n    for (uint i = 0; i < nextContributorIndex; i++) {\n      if (processed) {\n        break;\n      }\n      uint uId = contributorIndexes[i];\n      if (contributorList[uId].active && !refundUserIds[uId] && !checkPreSaleReceivedBonus(uId) && contributorList[uId].usdAbsRaisedInCents >= minTotalUsdAmountInCents) {\n        processed = true;\n      }\n    }\n    return processed;\n  }\n\n  /**\n   * @dev Returns the number of contributors who have not received their presale bonuses\n   */\n  function getCountNeedProcessPreSaleBonus(uint minTotalUsdAmountInCents, uint start, uint limit) external view returns(uint) {\n    require(minTotalUsdAmountInCents > 10000);\n    require(start >= 0 && limit >= 10);\n    uint processed = 0;\n    for (uint i = start; i < (limit > nextContributorIndex ? nextContributorIndex : limit); i++) {\n      uint uId = contributorIndexes[i];\n      if (contributorList[uId].active && !refundUserIds[uId] && !checkPreSaleReceivedBonus(uId) && contributorList[uId].usdAbsRaisedInCents >= minTotalUsdAmountInCents) {\n        processed++;\n      }\n    }\n    return processed;\n  }\n\n  /**\n   * @dev Checks contributors who have not received their SHPC\n   */\n  function checkNeedSendSHPC(bool proc) external view returns(bool) {\n    bool processed = false;\n    if (proc) {\n      for (uint i = 0; i < nextContributorIndex; i++) {\n        if (processed) {\n          break;\n        }\n        uint uId = contributorIndexes[i];\n        if (contributorList[uId].active && !refundUserIds[uId] && !checkReceivedCoins(uId) && contributorList[uId].totalToken > 0) {\n          processed = true;\n        }\n      }\n    }\n    return processed;\n  }\n\n  /**\n   * @dev Returns the number of contributors who have not received their SHPC\n   */\n  function getCountNeedSendSHPC(uint start, uint limit) external view returns(uint) {\n    require(start >= 0 && limit >= 10);\n    uint processed = 0;\n    for (uint i = start; i < (limit > nextContributorIndex ? nextContributorIndex : limit); i++) {\n      uint uId = contributorIndexes[i];\n      if (contributorList[uId].active && !refundUserIds[uId] && !checkReceivedCoins(uId) && contributorList[uId].totalToken > 0) {\n        processed++;\n      }\n    }\n    return processed;\n  }\n\n  /**\n   * @dev Checks contributors who have not received their ETH when refund\n   */\n  function checkETHRefund(bool proc) external view returns(bool) {\n    bool processed = false;\n    if (proc) {\n      for (uint i = 0; i < nextContributorIndex; i++) {\n        if (processed) {\n          break;\n        }\n        uint uId = contributorIndexes[i];\n        if (contributorList[uId].active && !refundUserIds[uId] && getEthPaymentContributor(uId) > 0) {\n          processed = true;\n        }\n      }\n    }\n    return processed;\n  }\n\n  /**\n   * @dev Returns the number of contributors who have not received their ETH when refund\n   */\n  function getCountETHRefund(uint start, uint limit) external view returns(uint) {\n    require(start >= 0 && limit >= 10);\n    uint processed = 0;\n    for (uint i = start; i < (limit > nextContributorIndex ? nextContributorIndex : limit); i++) {\n      uint uId = contributorIndexes[i];\n      if (contributorList[uId].active && !refundUserIds[uId] && getEthPaymentContributor(uId) > 0) {\n        processed++;\n      }\n    }\n    return processed;\n  }\n\n  /**\n   * @dev Returns uId by index;\n   */\n  function getContributorIndexes(uint index) external onlyMultiOwnersType(7) view returns(uint) {\n    return contributorIndexes[index];\n  }\n\n  /**\n   * @dev Recalculation contributors presale bonus\n   */\n  function reCountUserPreSaleBonus(uint _uId, uint minTotalUsdAmountInCents, uint bonusPercent, uint maxPayTime) external onlyMultiOwnersType(13) returns(uint, uint) {\n    require(_uId > 0);\n    require(contributorList[_uId].active);\n    require(!refundUserIds[_uId]);\n    require(minTotalUsdAmountInCents > 10000);\n    require(bonusPercent > 20 && bonusPercent < 50);\n    uint bonusToken = 0;\n    uint uId = _uId;\n    uint beforeBonusToken = receivedPreSaleBonus[uId];\n\n    if (beforeBonusToken > 0) {\n      contributorList[uId].totalToken -= beforeBonusToken;\n      contributorList[uId].tokenBonus -= beforeBonusToken;\n      receivedPreSaleBonus[uId] = 0;\n    }\n\n    if (contributorList[uId].usdAbsRaisedInCents >= minTotalUsdAmountInCents) {\n      if (maxPayTime > 0) {\n        for (uint i = 0; i < contributorPayIds[uId].length; i++) {\n          PaymentData memory _payment = contributorList[uId].paymentInfo[contributorPayIds[uId][i]];\n          if (!refundPayIds[contributorPayIds[uId][i]] && _payment.bonusPercent == 0 && _payment.time < maxPayTime) {\n            bonusToken += _payment.tokenWithoutBonus.mul(bonusPercent).div(100);\n          }\n        }\n      } else {\n        bonusToken = contributorList[uId].tokenWithoutBonus.mul(bonusPercent).div(100);\n      }\n\n      if (bonusToken > 0) {\n        contributorList[uId].totalToken += bonusToken;\n        contributorList[uId].tokenBonus += bonusToken;\n        receivedPreSaleBonus[uId] = bonusToken;\n        emit GotPreSaleBonus(contributorList[uId].mainWallet);\n      }\n    }\n    return (beforeBonusToken, bonusToken);\n  }\n\n  /**\n   * @dev add user and wallet to whitelist\n   */\n  function addWhiteList(uint uId, address addr) public onlyMultiOwnersType(1) returns(bool success) {\n    require(addr != address(0), \"1\");\n    require(uId > 0, \"2\");\n    require(!refundUserIds[uId]);\n\n    if (contributorIds[addr] > 0 && contributorIds[addr] != uId) {\n      success = false;\n      revert(\"3\");\n    }\n\n    if (contributorList[uId].active != true) {\n      contributorList[uId].active = true;\n      contributorIndexes[nextContributorIndex] = uId;\n      nextContributorIndex++;\n      contributorList[uId].mainWallet = addr;\n    }\n\n    if (inArray(contributorList[uId].wallet, addr) != true && contributorList[uId].wallet.length < 3) {\n      contributorList[uId].wallet.push(addr);\n      contributorIds[addr] = uId;\n      emit WhitelistAddressAdded(addr);\n      success = true;\n    } else {\n      success = false;\n    }\n  }\n\n  /**\n   * @dev remove user wallet from whitelist\n   */\n  function removeWhiteList(uint uId, address addr) public onlyMultiOwnersType(2) returns(bool success) {\n    require(contributorList[uId].active, \"1\");\n    require(addr != address(0), \"2\");\n    require(uId > 0, \"3\");\n    require(inArray(contributorList[uId].wallet, addr));\n\n    if (contributorPayIds[uId].length > 0 || contributorList[uId].mainWallet == addr) {\n      success = false;\n      revert(\"5\");\n    }\n\n\n    contributorList[uId].wallet = removeValueFromArray(contributorList[uId].wallet, addr);\n    delete contributorIds[addr];\n\n    emit WhitelistAddressRemoved(addr);\n    success = true;\n  }\n\n  /**\n   * @dev Change contributor mainWallet\n   */\n  function changeMainWallet(uint uId, address addr) public onlyMultiOwnersType(3) returns(bool) {\n    require(supportChangeMainWallet);\n    require(addr != address(0));\n    require(uId > 0);\n    require(contributorList[uId].active);\n    require(!refundUserIds[uId]);\n    require(inArray(contributorList[uId].wallet, addr));\n\n    contributorList[uId].mainWallet = addr;\n    emit ChangeMainWallet(addr);\n    return true;\n  }\n\n  /**\n   * @dev Change the right to change mainWallet\n   */\n  function changeSupportChangeMainWallet(bool support) public onlyMultiOwnersType(21) returns(bool) {\n    supportChangeMainWallet = support;\n    return supportChangeMainWallet;\n  }\n\n  /**\n   * @dev Returns all contributor info by uId\n   */\n  function getContributionInfoById(uint _uId) public onlyMultiOwnersType(4) view returns(\n      bool active,\n      string payInCurrency,\n      uint totalToken,\n      uint tokenWithoutBonus,\n      uint tokenBonus,\n      uint usdAbsRaisedInCents,\n      uint[] paymentInfoIds,\n      address mainWallet,\n      address[] wallet,\n      uint preSaleReceivedBonus,\n      bool receivedCoins,\n      bool refund\n    )\n  {\n    uint uId = _uId;\n    return getContributionInfo(contributorList[uId].mainWallet);\n  }\n\n  /**\n   * @dev Returns all contributor info by address\n   */\n  function getContributionInfo(address _addr)\n    public\n    view\n    returns(\n      bool active,\n      string payInCurrency,\n      uint totalToken,\n      uint tokenWithoutBonus,\n      uint tokenBonus,\n      uint usdAbsRaisedInCents,\n      uint[] paymentInfoIds,\n      address mainWallet,\n      address[] wallet,\n      uint preSaleReceivedBonus,\n      bool receivedCoins,\n      bool refund\n    )\n  {\n\n    address addr = _addr;\n    StorageData memory storData = contributorList[contributorIds[addr]];\n\n    (preSaleReceivedBonus, receivedCoins, refund) = getInfoAdditionl(addr);\n\n    return(\n    storData.active,\n    (contributorPayIds[contributorIds[addr]].length > 0 ? getContributorPayInCurrency(contributorIds[addr]) : \"[]\"),\n    storData.totalToken,\n    storData.tokenWithoutBonus,\n    storData.tokenBonus,\n    storData.usdAbsRaisedInCents,\n    contributorPayIds[contributorIds[addr]],\n    storData.mainWallet,\n    storData.wallet,\n    preSaleReceivedBonus,\n    receivedCoins,\n    refund\n    );\n  }\n\n  /**\n   * @dev Returns contributor id by address\n   */\n  function getContributorId(address addr) public onlyMultiOwnersType(5) view returns(uint) {\n    return contributorIds[addr];\n  }\n\n  /**\n   * @dev Returns contributors address by uId\n   */\n  function getContributorAddressById(uint uId) public onlyMultiOwnersType(6) view returns(address) {\n    require(uId > 0);\n    require(contributorList[uId].active);\n    return contributorList[uId].mainWallet;\n  }\n\n  /**\n   * @dev Check wallet exists by address\n   */\n  function checkWalletExists(address addr) public view returns(bool result) {\n    result = false;\n    if (contributorList[contributorIds[addr]].wallet.length > 0) {\n      result = inArray(contributorList[contributorIds[addr]].wallet, addr);\n    }\n  }\n\n  /**\n   * @dev Check userId is exists\n   */\n  function checkUserIdExists(uint uId) public onlyMultiOwnersType(8) view returns(bool) {\n    return contributorList[uId].active;\n  }\n\n  /**\n   * @dev Add payment by address\n   */\n  function addPayment(\n    address _addr,\n    string pType,\n    uint _value,\n    uint usdAmount,\n    uint currencyUSD,\n    uint tokenWithoutBonus,\n    uint tokenBonus,\n    uint bonusPercent,\n    uint payId\n  )\n  public\n  onlyMultiOwnersType(9)\n  returns(bool)\n  {\n    require(_value > 0);\n    require(usdAmount > 0);\n    require(tokenWithoutBonus > 0);\n    require(bytes(pType).length > 0);\n    assert((payId == 0 && stringsEqual(pType, \"ETH\")) || (payId > 0 && !payIds[payId]));\n\n    address addr = _addr;\n    uint uId = contributorIds[addr];\n\n    assert(addr != address(0));\n    assert(checkWalletExists(addr));\n    assert(uId > 0);\n    assert(contributorList[uId].active);\n    assert(!refundUserIds[uId]);\n    assert(!receivedCoin[uId]);\n\n    if (payId == 0) {\n      payId = genId(addr, _value, 0);\n    }\n\n    bytes32 _pType = stringToBytes32(pType);\n    PaymentData memory userPayment;\n    uint totalToken = tokenWithoutBonus.add(tokenBonus);\n\n    //userPayment.payId = payId;\n    userPayment.time = block.timestamp;\n    userPayment.pType = _pType;\n    userPayment.currencyUSD = currencyUSD;\n    userPayment.payValue = _value;\n    userPayment.totalToken = totalToken;\n    userPayment.tokenWithoutBonus = tokenWithoutBonus;\n    userPayment.tokenBonus = tokenBonus;\n    userPayment.bonusPercent = bonusPercent;\n    userPayment.usdAbsRaisedInCents = usdAmount;\n\n    if (!inArray(currencyTicker, _pType)) {\n      currencyTicker.push(_pType);\n    }\n    if (payId > 0) {\n      payIds[payId] = true;\n    }\n\n    contributorList[uId].usdAbsRaisedInCents += usdAmount;\n    contributorList[uId].totalToken += totalToken;\n    contributorList[uId].tokenWithoutBonus += tokenWithoutBonus;\n    contributorList[uId].tokenBonus += tokenBonus;\n\n    contributorList[uId].payInCurrency[_pType] += _value;\n    contributorList[uId].paymentInfo[payId] = userPayment;\n    contributorPayIds[uId].push(payId);\n\n    emit AddPayment(addr);\n    return true;\n  }\n\n  /**\n   * @dev Add payment by uId\n   */\n  function addPayment(\n    uint uId,\n    string pType,\n    uint _value,\n    uint usdAmount,\n    uint currencyUSD,\n    uint tokenWithoutBonus,\n    uint tokenBonus,\n    uint bonusPercent,\n    uint payId\n  )\n  public\n  returns(bool)\n  {\n    require(contributorList[uId].active);\n    require(contributorList[uId].mainWallet != address(0));\n    return addPayment(contributorList[uId].mainWallet, pType, _value, usdAmount, currencyUSD, tokenWithoutBonus, tokenBonus, bonusPercent, payId);\n  }\n\n  /**\n   * @dev Edit user payment info\n   */\n  function editPaymentByUserId(\n    uint uId,\n    uint payId,\n    uint _payValue,\n    uint _usdAmount,\n    uint _currencyUSD,\n    uint _totalToken,\n    uint _tokenWithoutBonus,\n    uint _tokenBonus,\n    uint _bonusPercent\n  )\n  public\n  onlyMultiOwnersType(10)\n  returns(bool)\n  {\n    require(contributorList[uId].active);\n    require(inArray(contributorPayIds[uId], payId));\n    require(!refundPayIds[payId]);\n    require(!refundUserIds[uId]);\n    require(!receivedCoin[uId]);\n\n    PaymentData memory oldPayment = contributorList[uId].paymentInfo[payId];\n\n    contributorList[uId].usdAbsRaisedInCents -= oldPayment.usdAbsRaisedInCents;\n    contributorList[uId].totalToken -= oldPayment.totalToken;\n    contributorList[uId].tokenWithoutBonus -= oldPayment.tokenWithoutBonus;\n    contributorList[uId].tokenBonus -= oldPayment.tokenBonus;\n    contributorList[uId].payInCurrency[oldPayment.pType] -= oldPayment.payValue;\n\n    contributorList[uId].paymentInfo[payId] = PaymentData(\n      oldPayment.time,\n      oldPayment.pType,\n      _currencyUSD,\n      _payValue,\n      _totalToken,\n      _tokenWithoutBonus,\n      _tokenBonus,\n      _bonusPercent,\n      _usdAmount\n    );\n\n    contributorList[uId].usdAbsRaisedInCents += _usdAmount;\n    contributorList[uId].totalToken += _totalToken;\n    contributorList[uId].tokenWithoutBonus += _tokenWithoutBonus;\n    contributorList[uId].tokenBonus += _tokenBonus;\n    contributorList[uId].payInCurrency[oldPayment.pType] += _payValue;\n\n    emit EditUserPayments(contributorList[uId].mainWallet, payId);\n\n    return true;\n  }\n\n  /**\n   * @dev Refund user payment\n   */\n  function refundPaymentByUserId(uint uId, uint payId) public onlyMultiOwnersType(20) returns(bool) {\n    require(contributorList[uId].active);\n    require(inArray(contributorPayIds[uId], payId));\n    require(!refundPayIds[payId]);\n    require(!refundUserIds[uId]);\n    require(!receivedCoin[uId]);\n\n    PaymentData memory oldPayment = contributorList[uId].paymentInfo[payId];\n\n    assert(oldPayment.pType != stringToBytes32(\"ETH\"));\n\n    contributorList[uId].usdAbsRaisedInCents -= oldPayment.usdAbsRaisedInCents;\n    contributorList[uId].totalToken -= oldPayment.totalToken;\n    contributorList[uId].tokenWithoutBonus -= oldPayment.tokenWithoutBonus;\n    contributorList[uId].tokenBonus -= oldPayment.tokenBonus;\n    contributorList[uId].payInCurrency[oldPayment.pType] -= oldPayment.payValue;\n\n    refundPayIds[payId] = true;\n\n    emit RefundPayment(contributorList[uId].mainWallet, payId);\n\n    return true;\n  }\n\n  /**\n   * @dev Reutrns user payment info by uId and paymentId\n   */\n  function getUserPaymentById(uint _uId, uint _payId) public onlyMultiOwnersType(11) view returns(\n    uint time,\n    bytes32 pType,\n    uint currencyUSD,\n    uint bonusPercent,\n    uint payValue,\n    uint totalToken,\n    uint tokenBonus,\n    uint tokenWithoutBonus,\n    uint usdAbsRaisedInCents,\n    bool refund\n  )\n  {\n    uint uId = _uId;\n    uint payId = _payId;\n    require(contributorList[uId].active);\n    require(inArray(contributorPayIds[uId], payId));\n\n    PaymentData memory payment = contributorList[uId].paymentInfo[payId];\n\n    return (\n      payment.time,\n      payment.pType,\n      payment.currencyUSD,\n      payment.bonusPercent,\n      payment.payValue,\n      payment.totalToken,\n      payment.tokenBonus,\n      payment.tokenWithoutBonus,\n      payment.usdAbsRaisedInCents,\n      refundPayIds[payId] ? true : false\n    );\n  }\n\n  /**\n   * @dev Reutrns user payment info by address and payment id\n   */\n  function getUserPayment(address addr, uint _payId) public view returns(\n    uint time,\n    string pType,\n    uint currencyUSD,\n    uint bonusPercent,\n    uint payValue,\n    uint totalToken,\n    uint tokenBonus,\n    uint tokenWithoutBonus,\n    uint usdAbsRaisedInCents,\n    bool refund\n  )\n  {\n    address _addr = addr;\n    require(contributorList[contributorIds[_addr]].active);\n    require(inArray(contributorPayIds[contributorIds[_addr]], _payId));\n\n    uint payId = _payId;\n\n    PaymentData memory payment = contributorList[contributorIds[_addr]].paymentInfo[payId];\n\n    return (\n      payment.time,\n      bytes32ToString(payment.pType),\n      payment.currencyUSD,\n      payment.bonusPercent,\n      payment.payValue,\n      payment.totalToken,\n      payment.tokenBonus,\n      payment.tokenWithoutBonus,\n      payment.usdAbsRaisedInCents,\n      refundPayIds[payId] ? true : false\n    );\n  }\n\n  /**\n   * @dev Returns payment in ETH from address\n   */\n  function getEthPaymentContributor(address addr) public view returns(uint) {\n    return contributorList[contributorIds[addr]].payInCurrency[stringToBytes32(\"ETH\")];\n  }\n\n  /**\n   * @dev Returns SHPC from address\n   */\n  function getTotalCoin(address addr) public view returns(uint) {\n    return contributorList[contributorIds[addr]].totalToken;\n  }\n\n  /**\n   * @dev Check user get pre sale bonus by address\n   */\n  function checkPreSaleReceivedBonus(address addr) public view returns(bool) {\n    return receivedPreSaleBonus[contributorIds[addr]] > 0 ? true : false;\n  }\n\n  /**\n   * @dev Check payment refund by payment id\n   */\n  function checkPaymentRefund(uint payId) public view returns(bool) {\n    return refundPayIds[payId];\n  }\n\n  /**\n   * @dev Check user refund by address\n   */\n  function checkRefund(address addr) public view returns(bool) {\n    return refundUserIds[contributorIds[addr]];\n  }\n\n  /**\n   * @dev Set start number generate payment id when user pay in eth\n   */\n  function setStartGenId(uint startId) public onlyMultiOwnersType(14) {\n    require(startId > 0);\n    startGenId = startId;\n  }\n\n  /**\n   * @dev Set contributer got SHPC\n   */\n  function setReceivedCoin(uint uId) public onlyMultiOwnersType(15) returns(bool) {\n    require(contributorList[uId].active);\n    require(!refundUserIds[uId]);\n    require(!receivedCoin[uId]);\n    receivedCoin[uId] = true;\n    emit ReceivedCoin(contributorList[uId].mainWallet);\n    return true;\n  }\n\n  /**\n   * @dev Set contributer got refund ETH\n   */\n  function setRefund(uint uId) public onlyMultiOwnersType(16) returns(bool) {\n    require(contributorList[uId].active);\n    require(!refundUserIds[uId]);\n    require(!receivedCoin[uId]);\n    refundUserIds[uId] = true;\n    emit Refund(contributorList[uId].mainWallet);\n    return true;\n  }\n\n  /**\n   * @dev Check contributor got SHPC\n   */\n  function checkReceivedCoins(address addr) public view returns(bool) {\n    return receivedCoin[contributorIds[addr]];\n  }\n\n  /**\n   * @dev Check contributor got ETH\n   */\n  function checkReceivedEth(address addr) public view returns(bool) {\n    return refundUserIds[contributorIds[addr]];\n  }\n\n  /**\n   * @dev Returns all contributor currency amount in json\n   */\n  function getContributorPayInCurrency(uint uId) private view returns(string) {\n    require(uId > 0);\n    require(contributorList[uId].active);\n    string memory payInCurrency = \"{\";\n    for (uint i = 0; i < currencyTicker.length; i++) {\n      payInCurrency = strConcat(payInCurrency, strConcat(\"\\\"\", bytes32ToString(currencyTicker[i]), \"\\\":\\\"\"), uint2str(contributorList[uId].payInCurrency[currencyTicker[i]]), (i+1 < currencyTicker.length) ? \"\\\",\" : \"\\\"}\");\n    }\n    return payInCurrency;\n  }\n\n  /**\n   * @dev Check receives presale bonud by uId\n   */\n  function checkPreSaleReceivedBonus(uint uId) private view returns(bool) {\n    return receivedPreSaleBonus[uId] > 0 ? true : false;\n  }\n\n  /**\n   * @dev Check refund by uId\n   */\n  function checkRefund(uint uId) private view returns(bool) {\n    return refundUserIds[uId];\n  }\n\n  /**\n   * @dev  Check received SHPC by uI\n   */\n  function checkReceivedCoins(uint id) private view returns(bool) {\n    return receivedCoin[id];\n  }\n\n  /**\n   * @dev Check received eth by uId\n   */\n  function checkReceivedEth(uint id) private view returns(bool) {\n    return refundUserIds[id];\n  }\n\n  /**\n   * @dev Returns new uniq payment id\n   */\n  function genId(address addr, uint ammount, uint rand) private view returns(uint) {\n    uint id = startGenId + uint8(keccak256(abi.encodePacked(addr, blockhash(block.number), ammount, rand))) + contributorPayIds[contributorIds[addr]].length;\n    if (!payIds[id]) {\n      return id;\n    } else {\n      return genId(addr, ammount, id);\n    }\n  }\n\n  /**\n   * @dev Returns payment in ETH from uid\n   */\n  function getEthPaymentContributor(uint uId) private view returns(uint) {\n    return contributorList[uId].payInCurrency[stringToBytes32(\"ETH\")];\n  }\n\n  /**\n   * @dev Returns adittional info by contributor address\n   */\n  function getInfoAdditionl(address addr) private view returns(uint, bool, bool) {\n    return(receivedPreSaleBonus[contributorIds[addr]], receivedCoin[contributorIds[addr]], refundUserIds[contributorIds[addr]]);\n  }\n\n  /**\n   * @dev Returns payments info by userId in json\n   */\n  function getArrayjsonPaymentInfo(uint uId) private view returns (string) {\n    string memory _array = \"{\";\n    for (uint i = 0; i < contributorPayIds[uId].length; i++) {\n      _array = strConcat(_array, getJsonPaymentInfo(contributorList[uId].paymentInfo[contributorPayIds[uId][i]], contributorPayIds[uId][i]), (i+1 == contributorPayIds[uId].length) ? \"}\" : \",\");\n    }\n    return _array;\n  }\n\n  /**\n   * @dev Returns payment info by payment data in json\n   */\n  function getJsonPaymentInfo(PaymentData memory _obj, uint payId) private view returns (string) {\n    return strConcat(\n      strConcat(\"\\\"\", uint2str(payId), \"\\\":{\", strConcat(\"\\\"\", \"time\", \"\\\":\"), uint2str(_obj.time)),\n      strConcat(\",\\\"pType\\\":\\\"\", bytes32ToString(_obj.pType), \"\\\",\\\"currencyUSD\\\":\", uint2str(_obj.currencyUSD), \",\\\"payValue\\\":\\\"\"),\n      strConcat(uint2str(_obj.payValue), \"\\\",\\\"totalToken\\\":\\\"\", uint2str(_obj.totalToken), \"\\\",\\\"tokenWithoutBonus\\\":\\\"\", uint2str(_obj.tokenWithoutBonus)),\n      strConcat(\"\\\",\\\"tokenBonus\\\":\\\"\", uint2str(_obj.tokenBonus), \"\\\",\\\"bonusPercent\\\":\", uint2str(_obj.bonusPercent)),\n      strConcat(\",\\\"usdAbsRaisedInCents\\\":\\\"\", uint2str(_obj.usdAbsRaisedInCents), \"\\\",\\\"refund\\\":\\\"\", (refundPayIds[payId] ? \"1\" : \"0\"), \"\\\"}\")\n    );\n  }\n\n  /**\n   * @dev Check if value contains array\n   */\n  function inArray(address[] _array, address _value) private pure returns(bool result) {\n    if (_array.length == 0 || _value == address(0)) {\n      return false;\n    }\n    result = false;\n    for (uint i = 0; i < _array.length; i++) {\n      if (_array[i] == _value) {\n        result = true;\n        return true;\n      }\n    }\n  }\n\n  /**\n   * @dev Check if value contains array\n   */\n  function inArray(uint[] _array, uint _value) private pure returns(bool result) {\n    if (_array.length == 0 || _value == 0) {\n      return false;\n    }\n    result = false;\n    for (uint i = 0; i < _array.length; i++) {\n      if (_array[i] == _value) {\n        result = true;\n        return true;\n      }\n    }\n  }\n\n  /**\n   * @dev Check if value contains array\n   */\n  function inArray(bytes32[] _array, bytes32 _value) private pure returns(bool result) {\n    if (_array.length == 0 || _value.length == 0) {\n      return false;\n    }\n    result = false;\n    for (uint i = 0; i < _array.length; i++) {\n      if (_array[i] == _value) {\n        result = true;\n        return true;\n      }\n    }\n  }\n\n  /**\n   * @dev Remove value from arary\n   */\n  function removeValueFromArray(address[] _array, address _value) private pure returns(address[]) {\n    address[] memory arrayNew = new address[](_array.length-1);\n    if (arrayNew.length == 0) {\n      return arrayNew;\n    }\n    uint i1 = 0;\n    for (uint i = 0; i < _array.length; i++) {\n      if (_array[i] != _value) {\n        arrayNew[i1++] = _array[i];\n      }\n    }\n    return arrayNew;\n  }\n\n}",
  "bytecode": "6080604052620186a0600d55600e805460ff1916600117905560008054600160a060020a03191633179055614cc0806100396000396000f3006080604052600436106102195763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630987ef40811461021e5780630cc9df5c1461025157806323e237461461027d57806326b779c3146102a157806327526045146102c257806328e64ab4146102da5780632cdd3ead1461035b5780632e1c31291461037c57806334d060cb146103975780633af70e2f146103b85780633c0e36b5146103d25780634397ca1d146104035780634ba3523e1461041b5780634fac16d8146104355780635135d5ea146104565780635d19d2331461046e5780636044227e14610492578063633fadc2146104b35780636fde77f7146104d7578063715018a6146104f8578063738e6d781461035b5780637fac028a1461050f5780638da5cb5b1461052757806391f1a6cf146105585780639561a038146105765780639672bc4e1461058b57806397b9a947146105a5578063986d611d146105bd5780639caa6f38146105d85780639cf62038146105ed5780639f0f1b4514610677578063a7e7ec701461068f578063acde1ded1461076e578063bf9ae08914610789578063c041dd12146107e9578063ca94720b14610801578063cd78d92c14610822578063cee5d1e11461099e578063cfc244c714610a0b578063e41bea2514610a45578063ec12a04c14610a69578063f2fde38b14610a8d578063f31b3fdb14610aae578063f812d90f14610ad2575b600080fd5b34801561022a57600080fd5b5061023f600160a060020a0360043516610aea565b60408051918252519081900360200190f35b34801561025d57600080fd5b50610269600435610b95565b604080519115158252519081900360200190f35b34801561028957600080fd5b50610269600435600160a060020a0360243516610cdf565b3480156102ad57600080fd5b5061023f600160a060020a0360043516610d7f565b3480156102ce57600080fd5b50610269600435610dae565b3480156102e657600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261026995833595369560449491939091019190819084018382808284375094975050843595505050602083013592604081013592506060810135915060808101359060a08101359060c00135610e69565b34801561036757600080fd5b50610269600160a060020a0360043516610ee6565b34801561038857600080fd5b5061023f600435602435610f11565b3480156103a357600080fd5b50610269600160a060020a0360043516610fe4565b3480156103c457600080fd5b50610269600435151561101f565b3480156103de57600080fd5b5061026960043560243560443560643560843560a43560c43560e435610104356110c3565b34801561040f57600080fd5b506102696004356115e7565b34801561042757600080fd5b5061026960043515156115fc565b34801561044157600080fd5b50610269600160a060020a0360043516611687565b34801561046257600080fd5b506102696004356116b2565b34801561047a57600080fd5b50610269600435600160a060020a03602435166117fc565b34801561049e57600080fd5b5061023f600160a060020a0360043516611850565b3480156104bf57600080fd5b50610269600435600160a060020a03602435166118b9565b3480156104e357600080fd5b5061023f600435602435604435606435611c48565b34801561050457600080fd5b5061050d611e4b565b005b34801561051b57600080fd5b5061050d600435611eaa565b34801561053357600080fd5b5061053c611f46565b60408051600160a060020a039092168252519081900360200190f35b34801561056457600080fd5b5061023f600435602435604435611f55565b34801561058257600080fd5b5061023f612035565b34801561059757600080fd5b50610269600435151561203b565b3480156105b157600080fd5b5061053c6004356120df565b3480156105c957600080fd5b5061023f6004356024356121b2565b3480156105e457600080fd5b5061026961225f565b3480156105f957600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610269958335600160a060020a031695369560449491939091019190819084018382808284375094975050843595505050602083013592604081013592506060810135915060808101359060a08101359060c00135612268565b34801561068357600080fd5b5061023f60043561278a565b34801561069b57600080fd5b506106b3600160a060020a0360043516602435612827565b604051808b8152602001806020018a81526020018981526020018881526020018781526020018681526020018581526020018481526020018315151515815260200182810382528b818151815260200191508051906020019080838360005b8381101561072a578181015183820152602001610712565b50505050905090810190601f1680156107575780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b34801561077a57600080fd5b50610269600435602435612a45565b34801561079557600080fd5b50604080516020600480358082013583810280860185019096528085526102699536959394602494938501929182918501908490808284375094975050509235600160a060020a03169350612d4292505050565b3480156107f557600080fd5b50610269600435612e7f565b34801561080d57600080fd5b50610269600160a060020a0360043516612f1f565b34801561082e57600080fd5b50610843600160a060020a0360043516612fd2565b604051808d151515158152602001806020018c81526020018b81526020018a81526020018981526020018060200188600160a060020a0316600160a060020a0316815260200180602001878152602001861515151581526020018515151515815260200184810384528f818151815260200191508051906020019080838360005b838110156108dc5781810151838201526020016108c4565b50505050905090810190601f1680156109095780820380516001836020036101000a031916815260200191505b5084810383528a5181528a51602091820191808d01910280838360005b8381101561093e578181015183820152602001610926565b50505050905001848103825288818151815260200191508051906020019060200280838360005b8381101561097d578181015183820152602001610965565b505050509050019f5050505050505050505050505050505060405180910390f35b3480156109aa57600080fd5b506109b960043560243561327f565b604080519a8b5260208b0199909952898901979097526060890195909552608088019390935260a087019190915260c086015260e0850152610100840152151561012083015251908190036101400190f35b348015610a1757600080fd5b50610a2c6004356024356044356064356134a5565b6040805192835260208301919091528051918290030190f35b348015610a5157600080fd5b50610269600435600160a060020a0360243516613825565b348015610a7557600080fd5b50610269600435600160a060020a03602435166138c1565b348015610a9957600080fd5b5061050d600160a060020a0360043516613a9a565b348015610aba57600080fd5b50610269600435600160a060020a0360243516613b21565b348015610ade57600080fd5b50610843600435613ec5565b3360009081527fe2689cd4a84e23ad2f564004f1c9013e9589d260bde6380aba3ca7e09e4df40c602052604081205460059060ff1680610b345750600054600160a060020a031633145b1515610b73576040805160e560020a62461bcd028152602060048201526003602482015260e860020a6234303302604482015290519081900360640190fd5b600160a060020a03831660009081526003602052604090205491505b50919050565b3360009081527f755311b9e2cee471a91b161ccc5deed933d844b5af2b885543cc3c04eb640983602052604081205460109060ff1680610bdf5750600054600160a060020a031633145b1515610c1e576040805160e560020a62461bcd028152602060048201526003602482015260e860020a6234303302604482015290519081900360640190fd5b60008381526002602052604090205460ff161515610c3b57600080fd5b6000838152600c602052604090205460ff1615610c5757600080fd5b60008381526009602052604090205460ff1615610c7357600080fd5b6000838152600c60209081526040808320805460ff191660011790556002825291829020600701548251600160a060020a03909116815291517f8fb5d4bce9f90698aa0f0090d8cc6ca4c2d52976816621a1033250b2a43cd9309281900390910190a150600192915050565b60008054600160a060020a03163314610cf757600080fd5b600160a060020a0382161515610d0c57600080fd5b6000838152600160208181526040808420600160a060020a03871680865290835293819020805460ff191690931790925581518681529081019290925280517fd2bcbdce2fd2f33c1c519ac1be432022e2ec506950a3f516f0c432bf8f2c111f9281900390910190a15060015b92915050565b600160a060020a038116600090815260036020908152604080832054835260029182905290912001545b919050565b60008080806127108511610dc157600080fd5b60009250600091505b600654821015610e60578215610ddf57610e60565b5060008181526004602090815260408083205480845260029092529091205460ff168015610e1c57506000818152600c602052604090205460ff16155b8015610e2e5750610e2c81613fb7565b155b8015610e4b57506000818152600260205260409020600501548511155b15610e5557600192505b600190910190610dca565b50909392505050565b60008981526002602052604081205460ff161515610e8657600080fd5b60008a815260026020526040902060070154600160a060020a03161515610eac57600080fd5b60008a815260026020526040902060070154610ed890600160a060020a03168a8a8a8a8a8a8a8a612268565b9a9950505050505050505050565b600160a060020a03166000908152600360209081526040808320548352600c90915290205460ff1690565b60008060008060008610158015610f295750600a8510155b1515610f3457600080fd5b600092508591505b6006548511610f4b5784610f4f565b6006545b821015610fd7575060008181526004602090815260408083205480845260029092529091205460ff168015610f9357506000818152600c602052604090205460ff16155b8015610fa55750610fa381613fd3565b155b8015610fc05750600081815260026020819052604082200154115b15610fcc576001909201915b600190910190610f3c565b8293505b50505092915050565b600160a060020a038116600090815260036020908152604080832054835260089091528120548110611017576000610d79565b600192915050565b60008080808415610e6057600091505b600654821015610e6057821561104457610e60565b5060008181526004602090815260408083205480845260029092529091205460ff16801561108157506000818152600c602052604090205460ff16155b8015611093575061109181613fd3565b155b80156110ae5750600081815260026020819052604082200154115b156110b857600192505b60019091019061102f565b60006110cd614b6f565b3360009081527f2a32391a76c35a36352b711f9152c0d0a340cd686850c8ef25fbb11c71b89e7b6020526040902054600a9060ff16806111175750600054600160a060020a031633145b1515611156576040805160e560020a62461bcd028152602060048201526003602482015260e860020a6234303302604482015290519081900360640190fd5b60008c81526002602052604090205460ff16151561117357600080fd5b60008c81526005602090815260409182902080548351818402810184019094528084526111d593928301828280156111ca57602002820191906000526020600020905b8154815260200190600101908083116111b6575b50505050508c613fe8565b15156111e057600080fd5b60008b8152600b602052604090205460ff16156111fc57600080fd5b60008c8152600c602052604090205460ff161561121857600080fd5b60008c81526009602052604090205460ff161561123457600080fd5b600260008d815260200190815260200160002060060160008c81526020019081526020016000206101206040519081016040529081600082015481526020016001820154600019166000191681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815250509150816101000151600260008e8152602001908152602001600020600501600082825403925050819055508160800151600260008e8152602001908152602001600020600201600082825403925050819055508160a00151600260008e8152602001908152602001600020600301600082825403925050819055508160c00151600260008e8152602001908152602001600020600401600082825403925050819055508160600151600260008e8152602001908152602001600020600101600084602001516000191660001916815260200190815260200160002060008282540392505081905550610120604051908101604052808360000151815260200183602001516000191681526020018981526020018b81526020018881526020018781526020018681526020018581526020018a815250600260008e815260200190815260200160002060060160008d8152602001908152602001600020600082015181600001556020820151816001019060001916905560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070155610100820151816008015590505088600260008e81526020019081526020016000206005016000828254019250508190555086600260008e81526020019081526020016000206002016000828254019250508190555085600260008e81526020019081526020016000206003016000828254019250508190555084600260008e81526020019081526020016000206004016000828254019250508190555089600260008e81526020019081526020016000206001016000846020015160001916600019168152602001908152602001600020600082825401925050819055507f5755f72f64aaa5553ba137297010454c25a6aace631ff780dd5f985f23c90900600260008e815260200190815260200160002060070160009054906101000a9004600160a060020a03168c6040518083600160a060020a0316600160a060020a031681526020018281526020019250505060405180910390a15060019b9a5050505050505050505050565b6000908152600b602052604090205460ff1690565b60008080808415610e6057600091505b600654821015610e6057821561162157610e60565b5060008181526004602090815260408083205480845260029092529091205460ff16801561165e57506000818152600c602052604090205460ff16155b80156116725750600061167082614047565b115b1561167c57600192505b60019091019061160c565b600160a060020a03166000908152600360209081526040808320548352600990915290205460ff1690565b3360009081527f12bd632ff333b55931f9f8bda8b4ed27e86687f88c95871969d72474fb428c146020526040812054600f9060ff16806116fc5750600054600160a060020a031633145b151561173b576040805160e560020a62461bcd028152602060048201526003602482015260e860020a6234303302604482015290519081900360640190fd5b60008381526002602052604090205460ff16151561175857600080fd5b6000838152600c602052604090205460ff161561177457600080fd5b60008381526009602052604090205460ff161561179057600080fd5b6000838152600960209081526040808320805460ff191660011790556002825291829020600701548251600160a060020a03909116815291517f2a680c8c62ed385d40d6820c1e7f4d9df848ee22db8a848fbe14ddb6ba3e67b59281900390910190a150600192915050565b6000828152600160209081526040808320600160a060020a038516845290915281205460ff168061183a5750600054600160a060020a038381169116145b1561184757506001610d79565b50600092915050565b600160a060020a038116600090815260036020818152604080842054845260028252808420815180830190925292815260eb60020a6208aa89029181019190915260019091019082906118a290614084565b815260208101919091526040016000205492915050565b3360009081527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f602052604081205460019060ff16806119035750600054600160a060020a031633145b1515611942576040805160e560020a62461bcd028152602060048201526003602482015260e860020a6234303302604482015290519081900360640190fd5b600160a060020a03831615156119a2576040805160e560020a62461bcd02815260206004820152600160248201527f3100000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600084116119fa576040805160e560020a62461bcd02815260206004820152600160248201527f3200000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000848152600c602052604090205460ff1615611a1657600080fd5b600160a060020a038316600090815260036020526040812054118015611a545750600160a060020a0383166000908152600360205260409020548414155b15611aad576040805160e560020a62461bcd02815260206004820152600160248201527f330000000000000000000000000000000000000000000000000000000000000060448201529051600093509081900360640190fd5b60008481526002602052604090205460ff161515600114611b1f5760008481526002602081815260408084208054600160ff1990911681178255600680548752600485529286208a905582540190915592879052526007018054600160a060020a031916600160a060020a0385161790555b6000848152600260209081526040918290206008018054835181840281018401909452808452611b8e9392830182828015611b8357602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611b65575b5050505050846140a3565b1515600114801590611bb157506000848152600260205260409020600801546003115b15611c3c5760008481526002602090815260408083206008018054600181018255908452828420018054600160a060020a031916600160a060020a03881690811790915580845260038352928190208790558051928352517f7e82e36808082f76da270c3c5e72976b35dd02ffdd5e28dc06990b08c959f7c09281900390910190a160019150611c41565b600091505b5092915050565b3360009081527f23bf72df16f8335be9a3eddfb5ef1c739b12847d13a384ec83f578699d38eb896020526040812054819081908190819081908190600c9060ff1680611c9e5750600054600160a060020a031633145b1515611cdd576040805160e560020a62461bcd028152602060048201526003602482015260e860020a6234303302604482015290519081900360640190fd5b6127108c11611ceb57600080fd5b60148b118015611cfb575060328b105b1515611d0657600080fd5b600a891015611d1457600080fd5b899650889550600094508693505b85841015611e3b5760008481526004602090815260408083205480845260029092529091205490935060ff168015611d605750611d5e83613fb7565b155b8015611d7d57506000838152600260205260409020600501548c11155b15611e3057600083815260026020526040902060030154611db790606490611dab908e63ffffffff61411d16565b9063ffffffff61414616565b60008481526002602081815260408084208084018054870190556004810186905560088352938190208590559181526007909201548151600160a060020a0390911681529051978301979294507fe94148547f0706c8f6fda0fd9e3a81da2ab88977b2547d91adab518693918b89929081900390910190a15b600190930192611d22565b50929a9950505050505050505050565b600054600160a060020a03163314611e6257600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a260008054600160a060020a0319169055565b3360009081527f57aaafa65c4e563d39fff90096a5fa76d42117f53d87ef870784e64d63a8a16b6020526040902054600e9060ff1680611ef45750600054600160a060020a031633145b1515611f33576040805160e560020a62461bcd028152602060048201526003602482015260e860020a6234303302604482015290519081900360640190fd5b60008211611f4057600080fd5b50600d55565b600054600160a060020a031681565b60008080806127108711611f6857600080fd5b60008610158015611f7a5750600a8510155b1515611f8557600080fd5b600092508591505b6006548511611f9c5784611fa0565b6006545b82101561202a575060008181526004602090815260408083205480845260029092529091205460ff168015611fe457506000818152600c602052604090205460ff16155b8015611ff65750611ff481613fb7565b155b801561201357506000818152600260205260409020600501548711155b1561201f576001909201915b600190910190611f8d565b509095945050505050565b60065481565b3360009081527f4e788733fe0bff9af5f3e3a353367490c603293e53707fe7e4e0071b9ed497d6602052604081205460159060ff16806120855750600054600160a060020a031633145b15156120c4576040805160e560020a62461bcd028152602060048201526003602482015260e860020a6234303302604482015290519081900360640190fd5b5050600e805460ff1916911515919091179081905560ff1690565b3360009081527f8f331abe73332f95a25873e8b430885974c0409691f89d643119a11623a7924a602052604081205460069060ff16806121295750600054600160a060020a031633145b1515612168576040805160e560020a62461bcd028152602060048201526003602482015260e860020a6234303302604482015290519081900360640190fd5b6000831161217557600080fd5b60008381526002602052604090205460ff16151561219257600080fd5b5050600090815260026020526040902060070154600160a060020a031690565b600080600080600086101580156121ca5750600a8510155b15156121d557600080fd5b600092508591505b60065485116121ec57846121f0565b6006545b821015610fd7575060008181526004602090815260408083205480845260029092529091205460ff16801561223457506000818152600c602052604090205460ff16155b80156122485750600061224682614047565b115b15612254576001909201915b6001909101906121dd565b600e5460ff1681565b600080600080612276614b6f565b3360009081527f74a5fbcb419ab7dbacbb2c92a4e163730f0da5c72b911deecf4f05a6b327d0a4602052604081205460099060ff16806122c05750600054600160a060020a031633145b15156122ff576040805160e560020a62461bcd028152602060048201526003602482015260e860020a6234303302604482015290519081900360640190fd5b60008e1161230c57600080fd5b60008d1161231957600080fd5b60008b1161232657600080fd5b8e5160001061233457600080fd5b8715801561236557506123658f60408051908101604052806003815260200160eb60020a6208aa890281525061415b565b8061238a575060008811801561238a57506000888152600a602052604090205460ff16155b151561239257fe5b8f95506003600087600160a060020a0316600160a060020a031681526020019081526020016000205494506000600160a060020a031686600160a060020a0316141515156123dc57fe5b6123e586612f1f565b15156123ed57fe5b600085116123f757fe5b60008581526002602052604090205460ff16151561241157fe5b6000858152600c602052604090205460ff161561242a57fe5b60008581526009602052604090205460ff161561244357fe5b87151561245957612456868f6000614210565b97505b6124628f614084565b93506124748b8b63ffffffff61431b16565b91504283600001818152505083836020019060001916908160001916815250508b8360400181815250508d836060018181525050818360800181815250508a8360a0018181525050898360c0018181525050888360e00181815250508c83610100018181525050612536600780548060200260200160405190810160405280929190818152602001828054801561252b57602002820191906000526020600020905b81548152600190910190602001808311612516575b505050505085614328565b151561257257600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688018490555b6000881115612595576000888152600a60205260409020805460ff191660011790555b8c60026000878152602001908152602001600020600501600082825401925050819055508160026000878152602001908152602001600020600201600082825401925050819055508a60026000878152602001908152602001600020600301600082825401925050819055508960026000878152602001908152602001600020600401600082825401925050819055508d600260008781526020019081526020016000206001016000866000191660001916815260200190815260200160002060008282540192505081905550826002600087815260200190815260200160002060060160008a8152602001908152602001600020600082015181600001556020820151816001019060001916905560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155905050600560008681526020019081526020016000208890806001815401808255809150509060018203906000526020600020016000909192909190915055507fd141fb9ca31406b8044946a3f3b37e300878c3f5416d60f2970afd776d610b2b866040518082600160a060020a0316600160a060020a0316815260200191505060405180910390a15060019f9e505050505050505050505050505050565b3360009081527fdc686ec4a0ff239c70e7c7c36e8f853eced3bc8618f48d2b816da2a74311237e602052604081205460079060ff16806127d45750600054600160a060020a031633145b1515612813576040805160e560020a62461bcd028152602060048201526003602482015260e860020a6234303302604482015290519081900360640190fd5b505060009081526004602052604090205490565b60006060600080600080600080600080600080612842614b6f565b600160a060020a038f16600090815260036020908152604080832054835260029091529020548f935060ff16151561287957600080fd5b600160a060020a0383166000908152600360209081526040808320548352600582529182902080548351818402810184019094528084526128ef93928301828280156128e457602002820191906000526020600020905b8154815260200190600101908083116128d0575b50505050508f613fe8565b15156128fa57600080fd5b8d9150600260006003600086600160a060020a0316600160a060020a031681526020019081526020016000205481526020019081526020016000206006016000838152602001908152602001600020610120604051908101604052908160008201548152602001600182015460001916600019168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481525050905080600001516129cc8260200151614388565b82604001518360e00151846060015185608001518660c001518760a00151886101000151600b60008c815260200190815260200160002060009054906101000a900460ff16612a1c576000612a1f565b60015b9c509c509c509c509c509c509c509c509c509c505050509295989b9194979a5092959850565b6000612a4f614b6f565b3360009081527f467a5c61216cad3003bc3395c339807c735d5c3d989ca4bc0ef2a37e14ce2679602052604090205460149060ff1680612a995750600054600160a060020a031633145b1515612ad8576040805160e560020a62461bcd028152602060048201526003602482015260e860020a6234303302604482015290519081900360640190fd5b60008581526002602052604090205460ff161515612af557600080fd5b6000858152600560209081526040918290208054835181840281018401909452808452612b579392830182828015612b4c57602002820191906000526020600020905b815481526020019060010190808311612b38575b505050505085613fe8565b1515612b6257600080fd5b6000848152600b602052604090205460ff1615612b7e57600080fd5b6000858152600c602052604090205460ff1615612b9a57600080fd5b60008581526009602052604090205460ff1615612bb657600080fd5b60008581526002602081815260408084208885526006908101835293819020815161012081018352815481526001820154818501529381015484830152600380820154606086015260048201546080860152600582015460a08601529481015460c0850152600781015460e085015260080154610100840152805180820190915292835260eb60020a6208aa8902908301529250612c5390614084565b60208301511415612c6057fe5b6101008201516000868152600260208181526040808420600581018054969096039095556080870151858401805491909103905560a087015160038601805491909103905560c0870151600486018054919091039055606087015182880151855260018087018452828620805492909203909155898552600b8352818520805460ff19169091179055928990529081526007909201548151600160a060020a03909116815291820186905280517f218afa8974d8cc13d583f6cb05a134b904e76a6abaf8b8932486b8c8be3514189281900390910190a1506001949350505050565b600080548190600160a060020a03163314612d5c57600080fd5b600160a060020a0383161515612d7157600080fd5b8351600010612d7f57600080fd5b5060005b8351811015612de65760018060008684815181101515612d9f57fe5b60209081029190910181015182528181019290925260409081016000908120600160a060020a03881682529092529020805460ff1916911515919091179055600101612d83565b7f9239e51bd209fecea3bda09b9a8a1438065e2d6cd843e46511430bf229085e3c8484604051808060200183600160a060020a0316600160a060020a03168152602001828103825284818151815260200191508051906020019060200280838360005b83811015612e61578181015183820152602001612e49565b50505050905001935050505060405180910390a15060019392505050565b3360009081527f4db623e5c4870b62d3fc9b4e8f893a1a77627d75ab45d9ff7e56ba19564af99b602052604081205460089060ff1680612ec95750600054600160a060020a031633145b1515612f08576040805160e560020a62461bcd028152602060048201526003602482015260e860020a6234303302604482015290519081900360640190fd5b505060009081526002602052604090205460ff1690565b600160a060020a03811660009081526003602090815260408083205483526002909152812060080154811015610da957600160a060020a038216600090815260036020908152604080832054835260028252918290206008018054835181840281018401909452808452610d799392830182828015612fc757602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612fa9575b5050505050836140a3565b60006060600080600080606060006060600080600080612ff0614bbf565b8e9150600260006003600085600160a060020a0316600160a060020a0316815260200190815260200160002054815260200190815260200160002060e060405190810160405290816000820160009054906101000a900460ff16151515158152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016007820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a031681526020016008820180548060200260200160405190810160405280929190818152602001828054801561310257602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116130e4575b5050505050815250509050613116826144ce565b8351600160a060020a0386166000908152600360209081526040808320548352600590915281205494995092975090955091116131865760408051808201909152600281527f5b5d00000000000000000000000000000000000000000000000000000000000060208201526131a8565b600160a060020a0383166000908152600360205260409020546131a890614512565b826020015183604001518460600151856080015160056000600360008b600160a060020a0316600160a060020a031681526020019081526020016000205481526020019081526020016000208760a001518860c001518d8d8d8580548060200260200160405190810160405280929190818152602001828054801561324c57602002820191906000526020600020905b815481526020019060010190808311613238575b505050505095508393509d509d509d509d509d509d509d509d509d509d509d509d50505091939597999b5091939597999b565b600080600080600080600080600080600080613299614b6f565b3360009081527ffc80cd5fe514767bc6e66ec558e68a5429ea70b50fa6caa3b53fc9278e9186326020526040902054600b9060ff16806132e35750600054600160a060020a031633145b1515613322576040805160e560020a62461bcd028152602060048201526003602482015260e860020a6234303302604482015290519081900360640190fd5b8f93508e92506002600085815260200190815260200160002060000160009054906101000a900460ff16151561335757600080fd5b60008481526005602090815260409182902080548351818402810184019094528084526133b993928301828280156133ae57602002820191906000526020600020905b81548152602001906001019080831161339a575b505050505084613fe8565b15156133c457600080fd5b6000848152600260208181526040808420878552600690810183528185208251610120810184528154808252600183015482870181905296830154828601819052600384015460608401819052600485015460808501819052600586015460a086018190529686015460c08601819052600787015460e0870181905260089097015461010087018190528f8d52600b909a5297909a2054939b5091989096939591949093919290919060ff1661347b57600061347e565b60015b9d509d509d509d509d509d509d509d509d509d50505050509295989b9194979a5092959850565b6000806000806000806134b6614b6f565b3360009081527f86b3fa87ee245373978e0d2d334dbde866c9b8b039036b87c5eb2fd89bcb6bab6020526040902054600d9060ff16806135005750600054600160a060020a031633145b151561353f576040805160e560020a62461bcd028152602060048201526003602482015260e860020a6234303302604482015290519081900360640190fd5b60008c1161354c57600080fd5b60008c81526002602052604090205460ff16151561356957600080fd5b60008c8152600c602052604090205460ff161561358557600080fd5b6127108b1161359357600080fd5b60148a1180156135a3575060328a105b15156135ae57600080fd5b60008c8152600860205260408120549096508c95509350858411156135fc57600085815260026020818152604080842092830180548990039055600490920180548890039055600890528120555b6000858152600260205260409020600501548b1161381357600089111561376957600092505b600085815260056020526040902054831015613764576000858152600260209081526040808320600590925282208054600690920192918690811061366357fe5b60009182526020808320909101548352828101939093526040918201812082516101208101845281548152600182015481860152600282015481850152600382015460608201526004820154608082015260058083015460a0830152600683015460c0830152600783015460e083015260089092015461010082015289835293529081208054929450600b92869081106136f957fe5b6000918252602080832090910154835282019290925260400190205460ff16158015613727575060e0820151155b80156137335750815189115b15613759576137546064611dab8c8560a0015161411d90919063ffffffff16565b860195505b600190920191613622565b613795565b60008581526002602052604090206003015461379290606490611dab908d63ffffffff61411d16565b95505b600086111561381357600085815260026020818152604080842080840180548c0190556004810180548c01905560088352938190208a90559181526007909201548151600160a060020a03909116815290517fe94148547f0706c8f6fda0fd9e3a81da2ab88977b2547d91adab518693918b89929181900390910190a15b50919a93995092975050505050505050565b60008054600160a060020a0316331461383d57600080fd5b600160a060020a038216151561385257600080fd5b6000838152600160209081526040808320600160a060020a03861680855290835292819020805460ff1916905580518681529182019290925281517f86d11c3874d08f6dc589a8a45af47c09ceba70c17083b31bfd183ea49bc239cc929181900390910190a150600192915050565b3360009081527f7dfe757ecd65cbd7922a9c0161e935dd7fdbcc0e999689c7d31633896b1fc60b602052604081205460039060ff168061390b5750600054600160a060020a031633145b151561394a576040805160e560020a62461bcd028152602060048201526003602482015260e860020a6234303302604482015290519081900360640190fd5b600e5460ff16151561395b57600080fd5b600160a060020a038316151561397057600080fd5b6000841161397d57600080fd5b60008481526002602052604090205460ff16151561399a57600080fd5b6000848152600c602052604090205460ff16156139b657600080fd5b6000848152600260209081526040918290206008018054835181840281018401909452808452613a239392830182828015611b8357602002820191906000526020600020908154600160a060020a03168152600190910190602001808311611b65575050505050846140a3565b1515613a2e57600080fd5b6000848152600260209081526040918290206007018054600160a060020a031916600160a060020a038716908117909155825190815291517fc571627b1ea79320e366928ecda676d2577fee08691fbddf3fb5c15e3f682c5b9281900390910190a15060019392505050565b600054600160a060020a03163314613ab157600080fd5b600160a060020a0381161515613ac657600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b3360009081527fd9d16d34ffb15ba3a3d852f0d403e2ce1d691fb54de27ac87cd2f993f3ec330f602052604081205460029060ff1680613b6b5750600054600160a060020a031633145b1515613baa576040805160e560020a62461bcd028152602060048201526003602482015260e860020a6234303302604482015290519081900360640190fd5b60008481526002602052604090205460ff161515613c12576040805160e560020a62461bcd02815260206004820152600160248201527f3100000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a0383161515613c72576040805160e560020a62461bcd02815260206004820152600160248201527f3200000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008411613cca576040805160e560020a62461bcd02815260206004820152600160248201527f3300000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000848152600260209081526040918290206008018054835181840281018401909452808452613d379392830182828015611b8357602002820191906000526020600020908154600160a060020a03168152600190910190602001808311611b65575050505050846140a3565b1515613d4257600080fd5b6000848152600560205260408120541180613d795750600084815260026020526040902060070154600160a060020a038481169116145b15613dd2576040805160e560020a62461bcd02815260206004820152600160248201527f350000000000000000000000000000000000000000000000000000000000000060448201529051600093509081900360640190fd5b6000848152600260209081526040918290206008018054835181840281018401909452808452613e419392830182828015613e3657602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311613e18575b5050505050846146ef565b600260008681526020019081526020016000206008019080519060200190613e6a929190614c08565b50600160a060020a038316600081815260036020908152604080832092909255815192835290517f45dcd9ab8c61f0629f2904906111e617d542ed4af59ecb4af2586823382a408c9281900390910190a15060019392505050565b3360009081527fedc95719e9a3b28dd8e80877cb5880a9be7de1a13fc8b05e7999683b6b56764360205260408120546060908290819081908190859082908290829081908190819060049060ff1680613f285750600054600160a060020a031633145b1515613f67576040805160e560020a62461bcd028152602060048201526003602482015260e860020a6234303302604482015290519081900360640190fd5b60008f8152600260205260409020600701548f9250613f8e90600160a060020a0316612fd2565b9d509d509d509d509d509d509d509d509d509d509d509d50505091939597999b5091939597999b565b6000818152600860205260408120548110611017576000610d79565b60009081526009602052604090205460ff1690565b600080835160001480613ff9575082155b156140075760009150611c41565b5060009050805b8351811015611c415782848281518110151561402657fe5b90602001906020020151141561403f5760019150611c41565b60010161400e565b60006002600083815260200190815260200160002060010160006118a260408051908101604052806003815260200160eb60020a6208aa89028152505b80516000908290151561409a5760009150610b8f565b50506020015190565b6000808351600014806140bd5750600160a060020a038316155b156140cb5760009150611c41565b5060009050805b8351811015611c415782600160a060020a031684828151811015156140f357fe5b90602001906020020151600160a060020a031614156141155760019150611c41565b6001016140d2565b600082151561412e57506000610d79565b5081810281838281151561413e57fe5b0414610d7957fe5b6000818381151561415357fe5b049392505050565b80518251600091849184918491146141765760009350610fdb565b5060005b825181101561420457818181518110151561419157fe5b90602001015160f860020a900460f860020a02600160f860020a03191683828151811015156141bc57fe5b60209101015160f860020a90819004027fff0000000000000000000000000000000000000000000000000000000000000016146141fc5760009350610fdb565b60010161417a565b50600195945050505050565b600160a060020a0383166000818152600360209081526040808320548352600582528083205481516c01000000000000000000000000909502858401524340603486015260548501879052607480860187905282518087039091018152609490950191829052845193948594919390929182918401908083835b602083106142a95780518252601f19909201916020918201910161428a565b51815160209384036101000a60001901801990921691161790526040805192909401829003909120600d5460ff91821601969096016000818152600a909252929020549195505090921615159150614305905057809150614313565b614310858583614210565b91505b509392505050565b81810182811015610d7957fe5b600080835160001480614339575060005b156143475760009150611c41565b5060009050805b8351811015611c41578351839085908390811061436757fe5b6020908102909101015114156143805760019150611c41565b60010161434e565b6040805160208082528183019092526060918291600091829182918591908082016104008038833901905050945060009350600092505b6020831015614434576008830260020a870291507fff000000000000000000000000000000000000000000000000000000000000008216156144295781858581518110151561440a57fe5b906020010190600160f860020a031916908160001a9053506001909301925b6001909201916143bf565b836040519080825280601f01601f191660200182016040528015614462578160200160208202803883390190505b509050600092505b838310156144c457848381518110151561448057fe5b90602001015160f860020a900460f860020a0281848151811015156144a157fe5b906020010190600160f860020a031916908160001a90535060019092019161446a565b9695505050505050565b600160a060020a0316600090815260036020908152604080832054835260088252808320546009835281842054600c909352922054919260ff918216929190911690565b606080600080841161452357600080fd5b60008481526002602052604090205460ff16151561454057600080fd5b505060408051808201909152600181527f7b00000000000000000000000000000000000000000000000000000000000000602082015260005b600754811015611c41576146e58261461b6040805190810160405280600181526020017f22000000000000000000000000000000000000000000000000000000000000008152506145e26007868154811015156145d257fe5b9060005260206000200154614388565b60408051808201909152600381527f223a22000000000000000000000000000000000000000000000000000000000060208201526147c1565b61466660026000898152602001908152602001600020600101600060078781548110151561464557fe5b600091825260208083209091015483528201929092526040019020546147f8565b60075460018601106146ab5760408051808201909152600281527f227d00000000000000000000000000000000000000000000000000000000000060208201526146e0565b60408051808201909152600281527f222c00000000000000000000000000000000000000000000000000000000000060208201525b6148eb565b9150600101614579565b6060806000806001865103604051908082528060200260200182016040528015614723578160200160208202803883390190505b50925082516000141561473857829350610fdb565b5060009050805b8551811015610fd75784600160a060020a0316868281518110151561476057fe5b60209081029091010151600160a060020a0316146147b957858181518110151561478657fe5b6020908102909101015183516001840193859181106147a157fe5b600160a060020a039092166020928302909101909101525b60010161473f565b60606147f084848460206040519081016040528060008152506020604051908101604052806000815250614913565b949350505050565b606060008082818515156148415760408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015294506148e2565b8593505b831561485c57600190920191600a84049350614845565b826040519080825280601f01601f19166020018201604052801561488a578160200160208202803883390190505b5091505060001982015b85156148de57815160001982019160f860020a6030600a8a0601029184919081106148bb57fe5b906020010190600160f860020a031916908160001a905350600a86049550614894565b8194505b50505050919050565b606061490a858585856020604051908101604052806000815250614913565b95945050505050565b60608060608060608060606000808d97508c96508b95508a945089935083518551875189518b51010101016040519080825280601f01601f19166020018201604052801561496b578160200160208202803883390190505b50925060009150600090505b87518110156149d557878181518110151561498e57fe5b90602001015160f860020a900460f860020a0283838060010194508151811015156149b557fe5b906020010190600160f860020a031916908160001a905350600101614977565b5060005b8651811015614a375786818151811015156149f057fe5b90602001015160f860020a900460f860020a028383806001019450815181101515614a1757fe5b906020010190600160f860020a031916908160001a9053506001016149d9565b5060005b8551811015614a99578581815181101515614a5257fe5b90602001015160f860020a900460f860020a028383806001019450815181101515614a7957fe5b906020010190600160f860020a031916908160001a905350600101614a3b565b5060005b8451811015614afb578481815181101515614ab457fe5b90602001015160f860020a900460f860020a028383806001019450815181101515614adb57fe5b906020010190600160f860020a031916908160001a905350600101614a9d565b5060005b8351811015614b5d578381815181101515614b1657fe5b90602001015160f860020a900460f860020a028383806001019450815181101515614b3d57fe5b906020010190600160f860020a031916908160001a905350600101614aff565b50909c9b505050505050505050505050565b610120604051908101604052806000815260200160008019168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60e060405190810160405280600015158152602001600081526020016000815260200160008152602001600081526020016000600160a060020a03168152602001606081525090565b828054828255906000526020600020908101928215614c5d579160200282015b82811115614c5d5782518254600160a060020a031916600160a060020a03909116178255602090920191600190910190614c28565b50614c69929150614c6d565b5090565b614c9191905b80821115614c69578054600160a060020a0319168155600101614c73565b905600a165627a7a7230582092896d1ac9935fe7cbfd28405544efbb6be07ce99291eaf24603ce3ee039097c0029"
}