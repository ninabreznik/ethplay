{
  "address": "0x2496a6556e519f0fc1abb060643d95a1e12549de",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TransitSale",
  "compilerVersion": "v0.5.6+commit.b259423e",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-26\n*/\n\npragma solidity ^0.5.0;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}\n\n/**\n * @title WhitelistAdminRole\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\n */\ncontract WhitelistAdminRole {\n    using Roles for Roles.Role;\n\n    event WhitelistAdminAdded(address indexed account);\n    event WhitelistAdminRemoved(address indexed account);\n\n    Roles.Role private _whitelistAdmins;\n\n    constructor () internal {\n        _addWhitelistAdmin(msg.sender);\n    }\n\n    modifier onlyWhitelistAdmin() {\n        require(isWhitelistAdmin(msg.sender));\n        _;\n    }\n\n    function isWhitelistAdmin(address account) public view returns (bool) {\n        return _whitelistAdmins.has(account);\n    }\n\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\n        _addWhitelistAdmin(account);\n    }\n\n    function renounceWhitelistAdmin() public {\n        _removeWhitelistAdmin(msg.sender);\n    }\n\n    function _addWhitelistAdmin(address account) internal {\n        _whitelistAdmins.add(account);\n        emit WhitelistAdminAdded(account);\n    }\n\n    function _removeWhitelistAdmin(address account) internal {\n        _whitelistAdmins.remove(account);\n        emit WhitelistAdminRemoved(account);\n    }\n}\n\ncontract OwnableWhitelistAdminRole is Ownable, WhitelistAdminRole {\n    function addWhitelistAdmin(address account) public onlyOwner {\n        _addWhitelistAdmin(account);\n    }\n\n    function removeWhitelistAdmin(address account) public onlyOwner {\n        _removeWhitelistAdmin(account);\n    }\n}\n\ncontract Whitelist {\n    event WhitelistCreated(address account);\n    event WhitelistChange(address indexed account, bool allowed);\n\n    constructor() public {\n        emit WhitelistCreated(address(this));\n    }\n\n    function isWhitelisted(address account) public view returns (bool);\n}\n\ncontract WhitelistImpl is Ownable, OwnableWhitelistAdminRole, Whitelist {\n    mapping(address => bool) public whitelist;\n\n    function isWhitelisted(address account) public view returns (bool) {\n        return whitelist[account];\n    }\n\n    function addToWhitelist(address[] memory accounts) public onlyWhitelistAdmin {\n        for(uint i = 0; i < accounts.length; i++) {\n            _setWhitelisted(accounts[i], true);\n        }\n    }\n\n    function removeFromWhitelist(address[] memory accounts) public onlyWhitelistAdmin {\n        for(uint i = 0; i < accounts.length; i++) {\n            _setWhitelisted(accounts[i], false);\n        }\n    }\n\n    function setWhitelisted(address account, bool whitelisted) public onlyWhitelistAdmin {\n        _setWhitelisted(account, whitelisted);\n    }\n\n    function _setWhitelisted(address account, bool whitelisted) internal {\n        whitelist[account] = whitelisted;\n        emit WhitelistChange(account, whitelisted);\n    }\n}\n\ncontract TransitSale is Ownable, WhitelistImpl {\n    using SafeMath for uint256;\n\n    struct PoolDescription {\n        /**\n         * @dev maximal amount of tokens in this pool\n         */\n        uint maxAmount;\n        /**\n         * @dev amount of tokens already released\n         */\n        uint releasedAmount;\n        /**\n         * @dev release time\n         */\n        uint releaseTime;\n        /**\n         * @dev release type of the holder (fixed - date is set in seconds since 01.01.1970, floating - date is set in seconds since holder creation, direct - tokens are transferred to beneficiary immediately)\n         */\n        ReleaseType releaseType;\n    }\n\n    enum ReleaseType { Fixed, Floating, Direct }\n\n    event PoolCreatedEvent(string name, uint maxAmount, uint releaseTime, uint vestingInterval, uint value, ReleaseType releaseType);\n    event TokenHolderCreatedEvent(string name, address holder, address beneficiary, uint amount);\n    event ReleasedEvent(address beneficiary, uint amount);\n\n    uint private constant DAY = 86400;\n    uint private constant INTERVAL = 30 * DAY;\n    uint private constant DEFAULT_EXCHANGE_LISTING_TIME = 1559347200;//06/01/2019 @ 12:00am (UTC)\n\n    ERC20Mintable public token;\n    uint private exchangeListingTime;\n    mapping(string => PoolDescription) private pools;\n    mapping(address => uint) public released;\n    mapping(address => uint) public totals;\n\n    constructor(ERC20Mintable _token) public {\n        token = _token;\n\n        registerPool(\"Private\", 516666650 * 10 ** 18, ReleaseType.Fixed);\n        registerPool(\"IEO\", 200000000 * 10 ** 18, ReleaseType.Direct);\n        registerPool(\"Incentives\", 108333350 * 10 ** 18, ReleaseType.Direct);\n        registerPool(\"Team\", 300000000 * 10 ** 18, ReleaseType.Fixed);\n        registerPool(\"Reserve\", 375000000 * 10 ** 18, ReleaseType.Fixed);\n    }\n\n    function registerPool(string memory _name, uint _maxAmount, ReleaseType _releaseType) internal {\n        require(_maxAmount > 0, \"maxAmount should be greater than 0\");\n        require(_releaseType != ReleaseType.Floating, \"ReleaseType.Floating is not supported. use Pools instead\");\n        pools[_name] = PoolDescription(_maxAmount, 0, 0, _releaseType);\n        emit PoolCreatedEvent(_name, _maxAmount, 0, INTERVAL, 20, _releaseType);\n    }\n\n    function createHolder(string memory _name, address _beneficiary, uint _amount) onlyOwner public {\n        require(isWhitelisted(_beneficiary), \"not whitelisted\");\n\n        PoolDescription storage pool = pools[_name];\n        require(pool.maxAmount != 0, \"pool is not defined\");\n        uint newReleasedAmount = _amount.add(pool.releasedAmount);\n        require(newReleasedAmount <= pool.maxAmount, \"pool is depleted\");\n        pool.releasedAmount = newReleasedAmount;\n        if (pool.releaseType == ReleaseType.Direct) {\n            require(token.mint(_beneficiary, _amount));\n        } else {\n            require(token.mint(address(this), _amount));\n            totals[_beneficiary] = totals[_beneficiary].add(_amount);\n            emit TokenHolderCreatedEvent(_name, address(this), _beneficiary, _amount);\n        }\n    }\n\n    function getVestedAmountForAddress(address _beneficiary) view public returns (uint) {\n        uint releaseTime = releaseTime();\n        if (now < releaseTime) {\n            return 0;\n        }\n        uint total = totals[_beneficiary];\n        uint diff = now.sub(releaseTime);\n        uint interval = 1 + diff / INTERVAL;\n        if (interval >= 5) {\n            return total;\n        }\n        return interval.mul(total).div(5);\n    }\n\n    function getVestedAmount() view public returns (uint) {\n        return getVestedAmountForAddress(msg.sender);\n    }\n\n    function getTotalAmount() view public returns (uint) {\n        return totals[msg.sender];\n    }\n\n    function getReleasedAmount() view public returns (uint) {\n        return released[msg.sender];\n    }\n\n    function release() public {\n        uint vested = getVestedAmountForAddress(msg.sender);\n        uint amount = vested.sub(released[msg.sender]);\n        require(amount > 0);\n        released[msg.sender] = vested;\n        require(token.transfer(msg.sender, amount));\n        emit ReleasedEvent(msg.sender, amount);\n    }\n\n    function getTokensLeft(string memory _name) view public returns (uint) {\n        PoolDescription storage pool = pools[_name];\n        require(pool.maxAmount != 0, \"pool is not defined\");\n        return pool.maxAmount.sub(pool.releasedAmount);\n    }\n\n    function setExchangeListingTime(uint _exchangeListingTime) onlyOwner public {\n        require(exchangeListingTime == 0);\n        exchangeListingTime = _exchangeListingTime;\n    }\n\n    function releaseTime() view public returns (uint) {\n        uint listingTime;\n        if (exchangeListingTime == 0) {\n            listingTime = DEFAULT_EXCHANGE_LISTING_TIME;\n        } else {\n            listingTime = exchangeListingTime;\n        }\n        return listingTime.add(90 * DAY);\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b506040516020806200186b833981018060405260208110156200003357600080fd5b5051600080546001600160a01b03191633178082556040516001600160a01b039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36200008f336200029660201b60201c565b6040805130815290517f3aaa159995532a09d71082a9df6247e5c5846856e24e293fd65e164ed48233f49181900360200190a180600360006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200013e6040518060400160405280600781526020017f50726976617465000000000000000000000000000000000000000000000000008152506b01ab606b381307e4b42800006000620002e860201b60201c565b620001926040518060400160405280600381526020017f49454f00000000000000000000000000000000000000000000000000000000008152506aa56fa5b99019a5c80000006002620002e860201b60201c565b620001e66040518060400160405280600a81526020017f496e63656e7469766573000000000000000000000000000000000000000000008152506a599c7aabcf48415cd800006002620002e860201b60201c565b6200023a6040518060400160405280600481526020017f5465616d000000000000000000000000000000000000000000000000000000008152506af8277896582678ac0000006000620002e860201b60201c565b6200028f6040518060400160405280600781526020017f52657365727665000000000000000000000000000000000000000000000000008152506b01363156bbee3016d70000006000620002e860201b60201c565b50620005f8565b620002b18160016200056c60201b620011911790919060201c565b6040516001600160a01b038216907f22380c05984257a1cb900161c713dd71d39e74820f1aea43bd3f1bdd2096129990600090a250565b6000821162000343576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180620018496022913960400191505060405180910390fd5b60018160028111156200035257fe5b1415620003ab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526038815260200180620018116038913960400191505060405180910390fd5b60405180608001604052808381526020016000815260200160008152602001826002811115620003d757fe5b8152506005846040518082805190602001908083835b602083106200040e5780518252601f199092019160209182019101620003ed565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff021916908360028111156200048457fe5b02179055509050507fc312c5a03641b3f804b2e28a939317185c1da2a722759cf67501bd86bd24de9d8383600062015180601e026014866040518080602001878152602001868152602001858152602001848152602001836002811115620004e857fe5b60ff168152602001828103825288818151815260200191508051906020019080838360005b83811015620005275781810151838201526020016200050d565b50505050905090810190601f168015620005555780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a1505050565b6001600160a01b0381166200058057600080fd5b620005928282620005c260201b60201c565b156200059d57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160a01b038216620005d857600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b61120980620006086000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806386d1a69f116100de5780639b19251a11610097578063bb5f747b11610071578063bb5f747b1461054d578063e53a8cf414610573578063f2fde38b14610617578063fc0c546a1461063d57610173565b80639b19251a146105175780639f2d9f2a1461053d578063b91d40011461054557610173565b806386d1a69f146104875780638da5cb5b1461048f5780638f32d59b146104b35780639281aa0b146104bb5780639852595c146104e95780639a5569a71461050f57610173565b80635ac1d2a6116101305780635ac1d2a61461036d57806365ac43411461038a5780636897e97414610392578063715018a6146103b85780637362d9c8146103c05780637f649783146103e657610173565b80631959d43f146101785780632187e6a6146101b05780633af32abf146102645780634c5a628c1461029e5780634ffe34db146102a6578063548db174146102cc575b600080fd5b61019e6004803603602081101561018e57600080fd5b50356001600160a01b0316610645565b60408051918252519081900360200190f35b610262600480360360608110156101c657600080fd5b810190602081018135600160201b8111156101e057600080fd5b8201836020820111156101f257600080fd5b803590602001918460018302840111600160201b8311171561021357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550506001600160a01b0383351693505050602001356106da565b005b61028a6004803603602081101561027a57600080fd5b50356001600160a01b0316610ac1565b604080519115158252519081900360200190f35b610262610adf565b61019e600480360360208110156102bc57600080fd5b50356001600160a01b0316610aea565b610262600480360360208110156102e257600080fd5b810190602081018135600160201b8111156102fc57600080fd5b82018360208201111561030e57600080fd5b803590602001918460208302840111600160201b8311171561032f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610afc945050505050565b6102626004803603602081101561038357600080fd5b5035610b44565b61019e610b67565b610262600480360360208110156103a857600080fd5b50356001600160a01b0316610b7a565b610262610b97565b610262600480360360208110156103d657600080fd5b50356001600160a01b0316610bf2565b610262600480360360208110156103fc57600080fd5b810190602081018135600160201b81111561041657600080fd5b82018360208201111561042857600080fd5b803590602001918460208302840111600160201b8311171561044957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610c0c945050505050565b610262610c50565b610497610d6b565b604080516001600160a01b039092168252519081900360200190f35b61028a610d7a565b610262600480360360408110156104d157600080fd5b506001600160a01b0381351690602001351515610d8b565b61019e600480360360208110156104ff57600080fd5b50356001600160a01b0316610da7565b61019e610db9565b61028a6004803603602081101561052d57600080fd5b50356001600160a01b0316610dcc565b61019e610de1565b61019e610df1565b61028a6004803603602081101561056357600080fd5b50356001600160a01b0316610e28565b61019e6004803603602081101561058957600080fd5b810190602081018135600160201b8111156105a357600080fd5b8201836020820111156105b557600080fd5b803590602001918460018302840111600160201b831117156105d657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610e41945050505050565b6102626004803603602081101561062d57600080fd5b50356001600160a01b0316610f1d565b610497610f37565b600080610650610df1565b9050804210156106645760009150506106d5565b6001600160a01b0383166000908152600760205260408120549061068e428463ffffffff610f4616565b9050600162278d00820401600581106106ad57829450505050506106d5565b6106ce60056106c2838663ffffffff610f5b16565b9063ffffffff610f8216565b9450505050505b919050565b6106e2610d7a565b6106eb57600080fd5b6106f482610ac1565b6107485760408051600160e51b62461bcd02815260206004820152600f60248201527f6e6f742077686974656c69737465640000000000000000000000000000000000604482015290519081900360640190fd5b60006005846040518082805190602001908083835b6020831061077c5780518252601f19909201916020918201910161075d565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922080549093501515915061080690505760408051600160e51b62461bcd02815260206004820152601360248201527f706f6f6c206973206e6f7420646566696e656400000000000000000000000000604482015290519081900360640190fd5b600061081f826001015484610fa490919063ffffffff16565b825490915081111561087b5760408051600160e51b62461bcd02815260206004820152601060248201527f706f6f6c206973206465706c6574656400000000000000000000000000000000604482015290519081900360640190fd5b600182018190556002600383015460ff16600281111561089757fe5b14156109305760035460408051600160e01b6340c10f190281526001600160a01b03878116600483015260248201879052915191909216916340c10f199160448083019260209291908290030181600087803b1580156108f657600080fd5b505af115801561090a573d6000803e3d6000fd5b505050506040513d602081101561092057600080fd5b505161092b57600080fd5b610aba565b60035460408051600160e01b6340c10f190281523060048201526024810186905290516001600160a01b03909216916340c10f19916044808201926020929091908290030181600087803b15801561098757600080fd5b505af115801561099b573d6000803e3d6000fd5b505050506040513d60208110156109b157600080fd5b50516109bc57600080fd5b6001600160a01b0384166000908152600760205260409020546109e5908463ffffffff610fa416565b6001600160a01b0385166000818152600760209081526040808320949094558351308183018190529481019390935260608301879052608080845289519084015288517fe4c57e0be524c9d6fde0beb9de8e1b4dac7eafc338335a4034f2fc12bd553a7f948a9490938a938a93839260a0840192890191908190849084905b83811015610a7c578181015183820152602001610a64565b50505050905090810190601f168015610aa95780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15b5050505050565b6001600160a01b031660009081526002602052604090205460ff1690565b610ae833610fb6565b565b60076020526000908152604090205481565b610b0533610e28565b610b0e57600080fd5b60005b8151811015610b4057610b38828281518110610b2957fe5b60200260200101516000610ffe565b600101610b11565b5050565b610b4c610d7a565b610b5557600080fd5b60045415610b6257600080fd5b600455565b3360009081526007602052604090205490565b610b82610d7a565b610b8b57600080fd5b610b9481610fb6565b50565b610b9f610d7a565b610ba857600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b610bfa610d7a565b610c0357600080fd5b610b948161105e565b610c1533610e28565b610c1e57600080fd5b60005b8151811015610b4057610c48828281518110610c3957fe5b60200260200101516001610ffe565b600101610c21565b6000610c5b33610645565b3360009081526006602052604081205491925090610c8090839063ffffffff610f4616565b905060008111610c8f57600080fd5b3360008181526006602090815260408083208690556003548151600160e01b63a9059cbb02815260048101959095526024850186905290516001600160a01b039091169363a9059cbb9360448083019493928390030190829087803b158015610cf757600080fd5b505af1158015610d0b573d6000803e3d6000fd5b505050506040513d6020811015610d2157600080fd5b5051610d2c57600080fd5b604080513381526020810183905281517f1a035912a6c3114b3ad3f5ec219a7c6c549b9576d29dd24f2ae181197d04aa0a929181900390910190a15050565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b610d9433610e28565b610d9d57600080fd5b610b408282610ffe565b60066020526000908152604090205481565b3360009081526006602052604090205490565b60026020526000908152604090205460ff1681565b6000610dec33610645565b905090565b60008060045460001415610e0a5750635cf1c000610e0f565b506004545b610e22816276a70063ffffffff610fa416565b91505090565b6000610e3b60018363ffffffff6110a616565b92915050565b6000806005836040518082805190602001908083835b60208310610e765780518252601f199092019160209182019101610e57565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805490935015159150610f0090505760408051600160e51b62461bcd02815260206004820152601360248201527f706f6f6c206973206e6f7420646566696e656400000000000000000000000000604482015290519081900360640190fd5b60018101548154610f169163ffffffff610f4616565b9392505050565b610f25610d7a565b610f2e57600080fd5b610b94816110db565b6003546001600160a01b031681565b600082821115610f5557600080fd5b50900390565b600082610f6a57506000610e3b565b82820282848281610f7757fe5b0414610f1657600080fd5b6000808211610f9057600080fd5b6000828481610f9b57fe5b04949350505050565b600082820183811015610f1657600080fd5b610fc760018263ffffffff61114916565b6040516001600160a01b038216907f0a8eb35e5ca14b3d6f28e4abf2f128dbab231a58b56e89beb5d636115001e16590600090a250565b6001600160a01b038216600081815260026020908152604091829020805460ff1916851515908117909155825190815291517f3f50d04114467f3ca25c50f1540e2864f8a852c0380bbbbb603ebfda10b5baf29281900390910190a25050565b61106f60018263ffffffff61119116565b6040516001600160a01b038216907f22380c05984257a1cb900161c713dd71d39e74820f1aea43bd3f1bdd2096129990600090a250565b60006001600160a01b0382166110bb57600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b6001600160a01b0381166110ee57600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03811661115c57600080fd5b61116682826110a6565b61116f57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6001600160a01b0381166111a457600080fd5b6111ae82826110a6565b156111b857600080fd5b6001600160a01b0316600090815260209190915260409020805460ff1916600117905556fea165627a7a723058203eb457f86bbb90f26f2f35dab3cf161d1be19f3edac8104e64ceea0ff7ab47a7002952656c65617365547970652e466c6f6174696e67206973206e6f7420737570706f727465642e2075736520506f6f6c7320696e73746561646d6178416d6f756e742073686f756c642062652067726561746572207468616e203000000000000000000000000028a87d74a120de45425bf00e5008b4259996a767",
  "constructorArguments": "00000000000000000000000028a87d74a120de45425bf00e5008b4259996a767"
}