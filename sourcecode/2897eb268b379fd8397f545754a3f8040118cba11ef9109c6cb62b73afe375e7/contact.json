{
  "address": "0xb2c0782ae4a299f7358758b2d15da9bf29e1dd99",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Etheremon: Asset",
  "contractName": "EtheremonAsset",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-14\n*/\n\npragma solidity ^0.4.18;\n\n// Etheremon ERC721\n\n// copyright [emailÂ protected]\n\ncontract SafeMath {\n\n    /* function assert(bool assertion) internal { */\n    /*   if (!assertion) { */\n    /*     throw; */\n    /*   } */\n    /* }      // assert no longer needed once solidity is on 0.4.10 */\n\n    function safeAdd(uint256 x, uint256 y) pure internal returns(uint256) {\n      uint256 z = x + y;\n      assert((z >= x) && (z >= y));\n      return z;\n    }\n\n    function safeSubtract(uint256 x, uint256 y) pure internal returns(uint256) {\n      assert(x >= y);\n      uint256 z = x - y;\n      return z;\n    }\n\n    function safeMult(uint256 x, uint256 y) pure internal returns(uint256) {\n      uint256 z = x * y;\n      assert((x == 0)||(z/x == y));\n      return z;\n    }\n\n}\n\ncontract BasicAccessControl {\n    address public owner;\n    // address[] public moderators;\n    uint16 public totalModerators = 0;\n    mapping (address => bool) public moderators;\n    bool public isMaintaining = true;\n\n    function BasicAccessControl() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyModerators() {\n        require(moderators[msg.sender] == true);\n        _;\n    }\n\n    modifier isActive {\n        require(!isMaintaining);\n        _;\n    }\n\n    function ChangeOwner(address _newOwner) onlyOwner public {\n        if (_newOwner != address(0)) {\n            owner = _newOwner;\n        }\n    }\n\n    function AddModerator(address _newModerator) onlyOwner public {\n        if (moderators[_newModerator] == false) {\n            moderators[_newModerator] = true;\n            totalModerators += 1;\n        }\n    }\n    \n    function RemoveModerator(address _oldModerator) onlyOwner public {\n        if (moderators[_oldModerator] == true) {\n            moderators[_oldModerator] = false;\n            totalModerators -= 1;\n        }\n    }\n    \n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\n        isMaintaining = _isMaintaining;\n    }\n}\n\n\ncontract EtheremonEnum {\n\n    enum ResultCode {\n        SUCCESS,\n        ERROR_CLASS_NOT_FOUND,\n        ERROR_LOW_BALANCE,\n        ERROR_SEND_FAIL,\n        ERROR_NOT_TRAINER,\n        ERROR_NOT_ENOUGH_MONEY,\n        ERROR_INVALID_AMOUNT\n    }\n    \n    enum ArrayType {\n        CLASS_TYPE,\n        STAT_STEP,\n        STAT_START,\n        STAT_BASE,\n        OBJ_SKILL\n    }\n    \n    enum PropertyType {\n        ANCESTOR,\n        XFACTOR\n    }\n}\n\ncontract EtheremonDataBase is EtheremonEnum, BasicAccessControl, SafeMath {\n    \n    uint64 public totalMonster;\n    uint32 public totalClass;\n    \n    // write\n    function withdrawEther(address _sendTo, uint _amount) onlyOwner public returns(ResultCode);\n    function addElementToArrayType(ArrayType _type, uint64 _id, uint8 _value) onlyModerators public returns(uint);\n    function updateIndexOfArrayType(ArrayType _type, uint64 _id, uint _index, uint8 _value) onlyModerators public returns(uint);\n    function setMonsterClass(uint32 _classId, uint256 _price, uint256 _returnPrice, bool _catchable) onlyModerators public returns(uint32);\n    function addMonsterObj(uint32 _classId, address _trainer, string _name) onlyModerators public returns(uint64);\n    function setMonsterObj(uint64 _objId, string _name, uint32 _exp, uint32 _createIndex, uint32 _lastClaimIndex) onlyModerators public;\n    function increaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\n    function decreaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\n    function removeMonsterIdMapping(address _trainer, uint64 _monsterId) onlyModerators public;\n    function addMonsterIdMapping(address _trainer, uint64 _monsterId) onlyModerators public;\n    function clearMonsterReturnBalance(uint64 _monsterId) onlyModerators public returns(uint256 amount);\n    function collectAllReturnBalance(address _trainer) onlyModerators public returns(uint256 amount);\n    function transferMonster(address _from, address _to, uint64 _monsterId) onlyModerators public returns(ResultCode);\n    function addExtraBalance(address _trainer, uint256 _amount) onlyModerators public returns(uint256);\n    function deductExtraBalance(address _trainer, uint256 _amount) onlyModerators public returns(uint256);\n    function setExtraBalance(address _trainer, uint256 _amount) onlyModerators public;\n    \n    // read\n    function getSizeArrayType(ArrayType _type, uint64 _id) constant public returns(uint);\n    function getElementInArrayType(ArrayType _type, uint64 _id, uint _index) constant public returns(uint8);\n    function getMonsterClass(uint32 _classId) constant public returns(uint32 classId, uint256 price, uint256 returnPrice, uint32 total, bool catchable);\n    function getMonsterObj(uint64 _objId) constant public returns(uint64 objId, uint32 classId, address trainer, uint32 exp, uint32 createIndex, uint32 lastClaimIndex, uint createTime);\n    function getMonsterName(uint64 _objId) constant public returns(string name);\n    function getExtraBalance(address _trainer) constant public returns(uint256);\n    function getMonsterDexSize(address _trainer) constant public returns(uint);\n    function getMonsterObjId(address _trainer, uint index) constant public returns(uint64);\n    function getExpectedBalance(address _trainer) constant public returns(uint256);\n    function getMonsterReturn(uint64 _objId) constant public returns(uint256 current, uint256 total);\n}\n\n\ninterface EtheremonBattle {\n    function isOnBattle(uint64 _objId) constant external returns(bool);\n}\n\ninterface EtheremonTradeInterface {\n    function isOnTrading(uint64 _objId) constant external returns(bool);\n}\n\ncontract ERC721 {\n    // ERC20 compatible functions\n    // function name() constant returns (string name);\n    // function symbol() constant returns (string symbol);\n    function totalSupply() public constant returns (uint256 supply);\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n    // Functions that define ownership\n    function ownerOf(uint256 _tokenId) public constant returns (address owner);\n    function approve(address _to, uint256 _tokenId) external;\n    function takeOwnership(uint256 _tokenId) external;\n    function transfer(address _to, uint256 _tokenId) external;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public constant returns (uint tokenId);\n    // Token metadata\n    //function tokenMetadata(uint256 _tokenId) constant returns (string infoUrl);\n\n    // Events\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n}\n\ncontract EtheremonAsset is BasicAccessControl, ERC721 {\n    string public constant name = \"EtheremonAsset\";\n    string public constant symbol = \"EMONA\";\n    \n    mapping (address => mapping (uint256 => address)) public allowed;\n    \n    // data contract\n    address public dataContract;\n    address public battleContract;\n    address public tradeContract;\n    \n    // helper struct\n    struct MonsterClassAcc {\n        uint32 classId;\n        uint256 price;\n        uint256 returnPrice;\n        uint32 total;\n        bool catchable;\n    }\n\n    struct MonsterObjAcc {\n        uint64 monsterId;\n        uint32 classId;\n        address trainer;\n        string name;\n        uint32 exp;\n        uint32 createIndex;\n        uint32 lastClaimIndex;\n        uint createTime;\n    }\n\n    // modifier\n    \n    modifier requireDataContract {\n        require(dataContract != address(0));\n        _;\n    }\n    \n    modifier requireBattleContract {\n        require(battleContract != address(0));\n        _;\n    }\n    \n    modifier requireTradeContract {\n        require(tradeContract != address(0));\n        _;        \n    }\n    \n    function EtheremonAsset(address _dataContract, address _battleContract, address _tradeContract) public {\n        dataContract = _dataContract;\n        battleContract = _battleContract;\n        tradeContract = _tradeContract;\n    }\n\n    function setContract(address _dataContract, address _battleContract, address _tradeContract) onlyModerators external {\n        dataContract = _dataContract;\n        battleContract = _battleContract;\n        tradeContract = _tradeContract;\n    }\n    \n    \n    // public\n    \n    function totalSupply() public constant requireDataContract returns (uint256 supply){\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\n        return data.totalMonster();\n    }\n    \n    function balanceOf(address _owner) public constant requireDataContract returns (uint balance) {\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\n        return data.getMonsterDexSize(_owner);\n    }\n    \n    function ownerOf(uint256 _tokenId) public constant requireDataContract returns (address owner) {\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\n        MonsterObjAcc memory obj;\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\n        require(obj.monsterId == uint64(_tokenId));\n        return obj.trainer;\n    }\n    \n    function isApprovable(address _owner, uint256 _tokenId) public constant requireDataContract requireBattleContract requireTradeContract returns(bool) {\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\n        MonsterObjAcc memory obj;\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\n        if (obj.monsterId != uint64(_tokenId))\n            return false;\n        if (obj.trainer != _owner)\n            return false;\n        // check battle & trade contract \n        EtheremonBattle battle = EtheremonBattle(battleContract);\n        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\n        return (!battle.isOnBattle(obj.monsterId) && !trade.isOnTrading(obj.monsterId));\n    }\n    \n    function approve(address _to, uint256 _tokenId) requireBattleContract requireTradeContract isActive external {\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\n        MonsterObjAcc memory obj;\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\n        require(obj.monsterId == uint64(_tokenId));\n        require(msg.sender == obj.trainer);\n        require(msg.sender != _to);\n        \n        // check battle & trade contract \n        EtheremonBattle battle = EtheremonBattle(battleContract);\n        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\n        if (battle.isOnBattle(obj.monsterId) || trade.isOnTrading(obj.monsterId))\n            revert();\n        \n        allowed[msg.sender][_tokenId] = _to;\n        Approval(msg.sender, _to, _tokenId);\n    }\n    \n    function takeOwnership(uint256 _tokenId) requireDataContract requireBattleContract requireTradeContract isActive external {\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\n        MonsterObjAcc memory obj;\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\n        \n        require(obj.monsterId == uint64(_tokenId));\n        require(msg.sender != obj.trainer);\n        \n        require(allowed[obj.trainer][_tokenId] == msg.sender);\n        \n        // check battle & trade contract \n        EtheremonBattle battle = EtheremonBattle(battleContract);\n        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\n        if (battle.isOnBattle(obj.monsterId) || trade.isOnTrading(obj.monsterId))\n            revert();\n        \n        // remove allowed\n        allowed[obj.trainer][_tokenId] = address(0);\n\n        // transfer owner\n        data.removeMonsterIdMapping(obj.trainer, obj.monsterId);\n        data.addMonsterIdMapping(msg.sender, obj.monsterId);\n        \n        Transfer(obj.trainer, msg.sender, _tokenId);\n    }\n    \n    function transfer(address _to, uint256 _tokenId) requireDataContract isActive external {\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\n        MonsterObjAcc memory obj;\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\n        \n        require(obj.monsterId == uint64(_tokenId));\n        require(obj.trainer == msg.sender);\n        require(msg.sender != _to);\n        require(_to != address(0));\n        \n        // check battle & trade contract \n        EtheremonBattle battle = EtheremonBattle(battleContract);\n        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\n        if (battle.isOnBattle(obj.monsterId) || trade.isOnTrading(obj.monsterId))\n            revert();\n        \n        // remove allowed\n        allowed[obj.trainer][_tokenId] = address(0);\n        \n        // transfer owner\n        data.removeMonsterIdMapping(obj.trainer, obj.monsterId);\n        data.addMonsterIdMapping(_to, obj.monsterId);\n        \n        Transfer(obj.trainer, _to, _tokenId);\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _tokenId) requireDataContract requireBattleContract requireTradeContract external {\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\n        MonsterObjAcc memory obj;\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\n        \n        require(obj.monsterId == uint64(_tokenId));\n        require(obj.trainer == _from);\n        require(_to != address(0));\n        require(_to != _from);\n        require(allowed[_from][_tokenId] == msg.sender);\n    \n        // check battle & trade contract \n        EtheremonBattle battle = EtheremonBattle(battleContract);\n        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\n        if (battle.isOnBattle(obj.monsterId) || trade.isOnTrading(obj.monsterId))\n            revert();\n        \n        // remove allowed\n        allowed[_from][_tokenId] = address(0);\n\n        // transfer owner\n        data.removeMonsterIdMapping(obj.trainer, obj.monsterId);\n        data.addMonsterIdMapping(_to, obj.monsterId);\n        \n        Transfer(obj.trainer, _to, _tokenId);\n    }\n    \n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public constant requireDataContract returns (uint tokenId) {\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\n        return data.getMonsterObjId(_owner, _index);\n    }\n}",
  "bytecode": "606060405260008060146101000a81548161ffff021916908361ffff1602179055506001600260006101000a81548160ff021916908315150217905550341561004757600080fd5b604051606080613a7e83398101604052808051906020019091908051906020019091908051906020019091905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506138f48061018a6000396000f30060606040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610143578063095ea7b3146101d15780630d6688181461021357806314d0f1ba1461026857806318160ddd146102b957806323b872dd146102e257806329291054146103435780632f745c59146103ba578063423b1ca31461041057806348ef5aa8146104655780634efb023e1461048a5780636352211e146104bb5780636c81fd6d1461051e57806370a0823114610557578063739f660d146105a45780638a0520fb146106265780638da5cb5b1461068057806395d89b41146106d5578063a9059cbb14610763578063b2e6ceeb146107a5578063b85d6275146107c8578063ee4e441614610801578063f28532921461082e578063ffa640d814610867575b600080fd5b341561014e57600080fd5b6101566108bc565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561019657808201518184015260208101905061017b565b50505050905090810190601f1680156101c35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101dc57600080fd5b610211600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108f5565b005b341561021e57600080fd5b610226610ec2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561027357600080fd5b61029f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ee8565b604051808215151515815260200191505060405180910390f35b34156102c457600080fd5b6102cc610f08565b6040518082815260200191505060405180910390f35b34156102ed57600080fd5b610341600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611025565b005b341561034e57600080fd5b6103b8600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506118c0565b005b34156103c557600080fd5b6103fa600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506119e7565b6040518082815260200191505060405180910390f35b341561041b57600080fd5b610423611b46565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561047057600080fd5b61048860048080351515906020019091905050611b6c565b005b341561049557600080fd5b61049d611be4565b604051808261ffff1661ffff16815260200191505060405180910390f35b34156104c657600080fd5b6104dc6004808035906020019091905050611bf8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561052957600080fd5b610555600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611e33565b005b341561056257600080fd5b61058e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611f73565b6040518082815260200191505060405180910390f35b34156105af57600080fd5b6105e4600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506120bf565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561063157600080fd5b610666600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612101565b604051808215151515815260200191505060405180910390f35b341561068b57600080fd5b6106936125e8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106e057600080fd5b6106e861260d565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561072857808201518184015260208101905061070d565b50505050905090810190601f1680156107555780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561076e57600080fd5b6107a3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612646565b005b34156107b057600080fd5b6107c66004808035906020019091905050612d9a565b005b34156107d357600080fd5b6107ff600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506135e1565b005b341561080c57600080fd5b610814613722565b604051808215151515815260200191505060405180910390f35b341561083957600080fd5b610865600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050613735565b005b341561087257600080fd5b61087a61380a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6040805190810160405280600e81526020017f4574686572656d6f6e417373657400000000000000000000000000000000000081525081565b60006108ff613830565b600080600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561096057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156109be57600080fd5b600260009054906101000a900460ff161515156109da57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693508373ffffffffffffffffffffffffffffffffffffffff16630720246086600060405160e001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808267ffffffffffffffff1667ffffffffffffffff16815260200191505060e060405180830381600087803b1515610a8a57600080fd5b6102c65a03f11515610a9b57600080fd5b50505060405180519060200180519060200180519060200180519060200180519060200180519060200180519050896000018a6020018b6040018c6080018d60a0018e60c0018f60e001878152508763ffffffff1663ffffffff168152508763ffffffff1663ffffffff168152508763ffffffff1663ffffffff168152508773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152508763ffffffff1663ffffffff168152508767ffffffffffffffff1667ffffffffffffffff16815250505050505050508467ffffffffffffffff16836000015167ffffffffffffffff16141515610b9e57600080fd5b826040015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bdc57600080fd5b8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610c1757600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff166335f097f384600001516000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808267ffffffffffffffff1667ffffffffffffffff168152602001915050602060405180830381600087803b1515610cf057600080fd5b6102c65a03f11515610d0157600080fd5b5050506040518051905080610dbc57508073ffffffffffffffffffffffffffffffffffffffff1663a847a71c84600001516000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808267ffffffffffffffff1667ffffffffffffffff168152602001915050602060405180830381600087803b1515610da057600080fd5b6102c65a03f11515610db157600080fd5b505050604051805190505b15610dc657600080fd5b85600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925876040518082815260200191505060405180910390a3505050505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915054906101000a900460ff1681565b600080600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610f6957600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16637a09defe6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515610ffa57600080fd5b6102c65a03f1151561100b57600080fd5b5050506040518051905067ffffffffffffffff1691505090565b600061102f613830565b600080600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561109057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156110ee57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561114c57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693508373ffffffffffffffffffffffffffffffffffffffff16630720246086600060405160e001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808267ffffffffffffffff1667ffffffffffffffff16815260200191505060e060405180830381600087803b15156111fc57600080fd5b6102c65a03f1151561120d57600080fd5b50505060405180519060200180519060200180519060200180519060200180519060200180519060200180519050896000018a6020018b6040018c6080018d60a0018e60c0018f60e001878152508763ffffffff1663ffffffff168152508763ffffffff1663ffffffff168152508763ffffffff1663ffffffff168152508773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152508763ffffffff1663ffffffff168152508767ffffffffffffffff1667ffffffffffffffff16815250505050505050508467ffffffffffffffff16836000015167ffffffffffffffff1614151561131057600080fd5b8673ffffffffffffffffffffffffffffffffffffffff16836040015173ffffffffffffffffffffffffffffffffffffffff1614151561134e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415151561138a57600080fd5b8673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141515156113c557600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561146f57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff166335f097f384600001516000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808267ffffffffffffffff1667ffffffffffffffff168152602001915050602060405180830381600087803b151561154857600080fd5b6102c65a03f1151561155957600080fd5b505050604051805190508061161457508073ffffffffffffffffffffffffffffffffffffffff1663a847a71c84600001516000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808267ffffffffffffffff1667ffffffffffffffff168152602001915050602060405180830381600087803b15156115f857600080fd5b6102c65a03f1151561160957600080fd5b505050604051805190505b1561161e57600080fd5b6000600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff166360c6ccb2846040015185600001516040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018267ffffffffffffffff1667ffffffffffffffff16815260200192505050600060405180830381600087803b151561176c57600080fd5b6102c65a03f1151561177d57600080fd5b5050508373ffffffffffffffffffffffffffffffffffffffff16639248019e8785600001516040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018267ffffffffffffffff1667ffffffffffffffff16815260200192505050600060405180830381600087803b151561183a57600080fd5b6102c65a03f1151561184b57600080fd5b5050508573ffffffffffffffffffffffffffffffffffffffff16836040015173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a350505050505050565b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561191f57600080fd5b82600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600080600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611a4857600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166375fe2e3385856000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515611b1857600080fd5b6102c65a03f11515611b2957600080fd5b5050506040518051905067ffffffffffffffff1691505092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bc757600080fd5b80600260006101000a81548160ff02191690831515021790555050565b600060149054906101000a900461ffff1681565b600080611c03613830565b600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611c6157600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508173ffffffffffffffffffffffffffffffffffffffff16630720246085600060405160e001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808267ffffffffffffffff1667ffffffffffffffff16815260200191505060e060405180830381600087803b1515611d1157600080fd5b6102c65a03f11515611d2257600080fd5b505050604051805190602001805190602001805190602001805190602001805190602001805190602001805190508760000188602001896040018a6080018b60a0018c60c0018d60e001878152508763ffffffff1663ffffffff168152508763ffffffff1663ffffffff168152508763ffffffff1663ffffffff168152508773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152508763ffffffff1663ffffffff168152508767ffffffffffffffff1667ffffffffffffffff16815250505050505050508367ffffffffffffffff16816000015167ffffffffffffffff16141515611e2557600080fd5b806040015192505050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e8e57600080fd5b60001515600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415611f705760018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600060148282829054906101000a900461ffff160192506101000a81548161ffff021916908361ffff1602179055505b50565b600080600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611fd457600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166347c17bac846000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561209c57600080fd5b6102c65a03f115156120ad57600080fd5b50505060405180519050915050919050565b60036020528160005260406000206020528060005260406000206000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061210c613830565b600080600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561216d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156121cb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561222957600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693508373ffffffffffffffffffffffffffffffffffffffff16630720246087600060405160e001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808267ffffffffffffffff1667ffffffffffffffff16815260200191505060e060405180830381600087803b15156122d957600080fd5b6102c65a03f115156122ea57600080fd5b50505060405180519060200180519060200180519060200180519060200180519060200180519060200180519050896000018a6020018b6040018c6080018d60a0018e60c0018f60e001878152508763ffffffff1663ffffffff168152508763ffffffff1663ffffffff168152508763ffffffff1663ffffffff168152508773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152508763ffffffff1663ffffffff168152508767ffffffffffffffff1667ffffffffffffffff16815250505050505050508567ffffffffffffffff16836000015167ffffffffffffffff161415156123f157600094506125de565b8673ffffffffffffffffffffffffffffffffffffffff16836040015173ffffffffffffffffffffffffffffffffffffffff1614151561243357600094506125de565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff166335f097f384600001516000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808267ffffffffffffffff1667ffffffffffffffff168152602001915050602060405180830381600087803b151561250c57600080fd5b6102c65a03f1151561251d57600080fd5b505050604051805190501580156125db57508073ffffffffffffffffffffffffffffffffffffffff1663a847a71c84600001516000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808267ffffffffffffffff1667ffffffffffffffff168152602001915050602060405180830381600087803b15156125be57600080fd5b6102c65a03f115156125cf57600080fd5b50505060405180519050155b94505b5050505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600581526020017f454d4f4e4100000000000000000000000000000000000000000000000000000081525081565b6000612650613830565b600080600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156126b157600080fd5b600260009054906101000a900460ff161515156126cd57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693508373ffffffffffffffffffffffffffffffffffffffff16630720246086600060405160e001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808267ffffffffffffffff1667ffffffffffffffff16815260200191505060e060405180830381600087803b151561277d57600080fd5b6102c65a03f1151561278e57600080fd5b50505060405180519060200180519060200180519060200180519060200180519060200180519060200180519050896000018a6020018b6040018c6080018d60a0018e60c0018f60e001878152508763ffffffff1663ffffffff168152508763ffffffff1663ffffffff168152508763ffffffff1663ffffffff168152508773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152508763ffffffff1663ffffffff168152508767ffffffffffffffff1667ffffffffffffffff16815250505050505050508467ffffffffffffffff16836000015167ffffffffffffffff1614151561289157600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16836040015173ffffffffffffffffffffffffffffffffffffffff161415156128cf57600080fd5b8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415151561290a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415151561294657600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff166335f097f384600001516000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808267ffffffffffffffff1667ffffffffffffffff168152602001915050602060405180830381600087803b1515612a1f57600080fd5b6102c65a03f11515612a3057600080fd5b5050506040518051905080612aeb57508073ffffffffffffffffffffffffffffffffffffffff1663a847a71c84600001516000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808267ffffffffffffffff1667ffffffffffffffff168152602001915050602060405180830381600087803b1515612acf57600080fd5b6102c65a03f11515612ae057600080fd5b505050604051805190505b15612af557600080fd5b600060036000856040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff166360c6ccb2846040015185600001516040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018267ffffffffffffffff1667ffffffffffffffff16815260200192505050600060405180830381600087803b1515612c4757600080fd5b6102c65a03f11515612c5857600080fd5b5050508373ffffffffffffffffffffffffffffffffffffffff16639248019e8785600001516040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018267ffffffffffffffff1667ffffffffffffffff16815260200192505050600060405180830381600087803b1515612d1557600080fd5b6102c65a03f11515612d2657600080fd5b5050508573ffffffffffffffffffffffffffffffffffffffff16836040015173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a3505050505050565b6000612da4613830565b600080600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515612e0557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515612e6357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515612ec157600080fd5b600260009054906101000a900460ff16151515612edd57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693508373ffffffffffffffffffffffffffffffffffffffff16630720246086600060405160e001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808267ffffffffffffffff1667ffffffffffffffff16815260200191505060e060405180830381600087803b1515612f8d57600080fd5b6102c65a03f11515612f9e57600080fd5b50505060405180519060200180519060200180519060200180519060200180519060200180519060200180519050896000018a6020018b6040018c6080018d60a0018e60c0018f60e001878152508763ffffffff1663ffffffff168152508763ffffffff1663ffffffff168152508763ffffffff1663ffffffff168152508773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152508763ffffffff1663ffffffff168152508767ffffffffffffffff1667ffffffffffffffff16815250505050505050508467ffffffffffffffff16836000015167ffffffffffffffff161415156130a157600080fd5b826040015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515156130e057600080fd5b3373ffffffffffffffffffffffffffffffffffffffff1660036000856040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561318e57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff166335f097f384600001516000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808267ffffffffffffffff1667ffffffffffffffff168152602001915050602060405180830381600087803b151561326757600080fd5b6102c65a03f1151561327857600080fd5b505050604051805190508061333357508073ffffffffffffffffffffffffffffffffffffffff1663a847a71c84600001516000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808267ffffffffffffffff1667ffffffffffffffff168152602001915050602060405180830381600087803b151561331757600080fd5b6102c65a03f1151561332857600080fd5b505050604051805190505b1561333d57600080fd5b600060036000856040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff166360c6ccb2846040015185600001516040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018267ffffffffffffffff1667ffffffffffffffff16815260200192505050600060405180830381600087803b151561348f57600080fd5b6102c65a03f115156134a057600080fd5b5050508373ffffffffffffffffffffffffffffffffffffffff16639248019e3385600001516040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018267ffffffffffffffff1667ffffffffffffffff16815260200192505050600060405180830381600087803b151561355d57600080fd5b6102c65a03f1151561356e57600080fd5b5050503373ffffffffffffffffffffffffffffffffffffffff16836040015173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a35050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561363c57600080fd5b60011515600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141561371f576000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600060148282829054906101000a900461ffff160392506101000a81548161ffff021916908361ffff1602179055505b50565b600260009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561379057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561380757806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61010060405190810160405280600067ffffffffffffffff168152602001600063ffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016138806138b4565b8152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600081525090565b6020604051908101604052806000815250905600a165627a7a723058205ed7654fd0d5acec6aa8543cf3323a9b0b0b7e5687a409c2378c014dd6886dc90029000000000000000000000000abc1c404424bdf24c19a5cc5ef8f47781d18eb3e000000000000000000000000df6164efd12678bf6a7d5a1ddf73c831493f65740000000000000000000000004ba72f0f8dad13709ee28a992869e79d0fe47030",
  "constructorArguments": "000000000000000000000000abc1c404424bdf24c19a5cc5ef8f47781d18eb3e000000000000000000000000df6164efd12678bf6a7d5a1ddf73c831493f65740000000000000000000000004ba72f0f8dad13709ee28a992869e79d0fe47030"
}