{
  "address": "0xf612773e8e1daf16c65c5ab5e1268ae0ceca0c0e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GNCCrowdsale",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-16\n*/\n\npragma solidity ^0.4.25;\n\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n\n    bool public transfersEnabled;\n\n    function balanceOf(address who) public view returns (uint256);\n\n    function transfer(address to, uint256 value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\ncontract ERC20 {\n    uint256 public totalSupply;\n\n    bool public transfersEnabled;\n\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n    uint8 decimals = 18;\n\n    address public addressFundTeam     = 0xCE4B70066331aF47CBF6b4AA4Fb85B0F3E598Ae8;\n    address public addressFundAdvisors = 0x4386a80917A6367153880C9ee6EC361c660a64EC;\n    uint256 public fundTeam     = 75 * 10**5 * (10 ** uint256(decimals));\n    uint256 public fundAdvisors = 45 * 10**5 * (10 ** uint256(decimals));\n    uint256 endTimeIco   = 1552694399; // Fri, 15 Mar 2019 23:59:59 GMT\n\n    mapping (address => uint256) balances;\n\n    /**\n    * Protection against short address attack\n    */\n    modifier onlyPayloadSize(uint numwords) {\n        assert(msg.data.length == numwords * 32 + 4);\n        _;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public onlyPayloadSize(2) returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        require(transfersEnabled);\n        if (msg.sender == addressFundTeam) {\n            require(checkVesting(_value, now) > 0);\n        }\n        if (msg.sender == addressFundAdvisors) {\n            require(now > (endTimeIco + 26 weeks));\n        }\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function checkVesting(uint256 _value, uint256 _currentTime) public view returns(uint8 period) {\n        period = 0;\n        if ( (endTimeIco + 26 weeks) <= _currentTime && _currentTime < (endTimeIco + 52 weeks) ) {\n            period = 1;\n            require(balances[addressFundTeam].sub(_value) >= fundTeam.mul(75).div(100));\n        }\n        if ( (endTimeIco + 52 weeks) <= _currentTime && _currentTime < (endTimeIco + 78 weeks) ) {\n            period = 2;\n            require(balances[addressFundTeam].sub(_value) >= fundTeam.mul(50).div(100));\n        }\n        if ( (endTimeIco + 78 weeks) <= _currentTime && _currentTime < (endTimeIco + 104 weeks) ) {\n            period = 3;\n            require(balances[addressFundTeam].sub(_value) >= fundTeam.mul(25).div(100));\n        }\n        if ( (endTimeIco + 104 weeks) <= _currentTime ) {\n            period = 4;\n            require(balances[addressFundTeam].sub(_value) >= 0);\n        }\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n\n\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        require(transfersEnabled);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public onlyPayloadSize(2) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        }\n        else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n    address public ownerTwo;\n\n    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner || msg.sender == ownerTwo);\n        _;\n    }\n\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function changeOwner(address _newOwner) onlyOwner internal {\n        require(_newOwner != address(0));\n        emit OwnerChanged(owner, _newOwner);\n        owner = _newOwner;\n    }\n\n}\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n    string public constant name = \"Greencoin\";\n    string public constant symbol = \"GNC\";\n    uint8 public constant decimals = 18;\n    mapping(uint8 => uint8) public approveOwner;\n\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    bool public mintingFinished;\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount, address _owner) canMint internal returns (bool) {\n        balances[_to] = balances[_to].add(_amount);\n        balances[_owner] = balances[_owner].sub(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(_owner, _to, _amount);\n        return true;\n    }\n\n    /**\n     * Peterson's Law Protection\n     * Claim tokens\n     */\n    function claimTokens(address _token) public onlyOwner {\n        if (checkApprove(0) == false) {\n            revert(); // for test's\n        }\n        if (_token == 0x0) {\n            owner.transfer(address(this).balance);\n            return;\n        }\n        MintableToken token = MintableToken(_token);\n        uint256 balance = token.balanceOf(this);\n        token.transfer(owner, balance);\n        emit Transfer(_token, owner, balance);\n    }\n\n    function checkApprove(uint8 _numberFunction) public onlyOwner returns (bool) {\n        uint8 countApprove = approveOwner[_numberFunction];\n        if (msg.sender == owner && (countApprove == 0 || countApprove == 2) ) {\n            approveOwner[_numberFunction] += 1;\n        }\n        if (msg.sender == ownerTwo && (countApprove == 0 || countApprove == 1) ) {\n            approveOwner[_numberFunction] += 2;\n        }\n        if (approveOwner[_numberFunction] == 3) {\n            approveOwner[_numberFunction] == 0;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n}\n\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases. Funds collected are forwarded to a wallet\n * as they arrive.\n */\ncontract Crowdsale is Ownable {\n    using SafeMath for uint256;\n    // address where funds are collected\n    address public wallet;\n\n    // amount of raised money in wei\n    uint256 public weiRaised;\n    uint256 public tokenAllocated;\n\n    constructor(address _wallet) public {\n        require(_wallet != address(0));\n        wallet = _wallet;\n    }\n}\n\n\ncontract GNCCrowdsale is Ownable, Crowdsale, MintableToken {\n    using SafeMath for uint256;\n\n    /**\n    * Price: 1 ETH = 500 token\n    *\n    * 1 Stage  1 ETH = 575  token -- discount 15%\n    * 2 Stage  1 ETH = 550  token -- discount 10%\n    * 3 Stage  1 ETH = 525  token -- discount 5%\n    * 4 Stage  1 ETH = 500  token -- discount 0%\n    *\n    */\n    uint256[] public rates  = [575, 550, 525, 500];\n\n    uint256 public weiMin = 0.1 ether;\n\n    mapping (address => uint256) public deposited;\n    mapping (address => bool) public whitelist;\n    mapping (address => bool) internal isRefferer;\n\n\n    uint256 public constant INITIAL_SUPPLY = 5 * 10**7 * (10 ** uint256(decimals));\n    uint256 public    fundForSale = 3 * 10**7 * (10 ** uint256(decimals));\n\n    address public addressFundReserv   = 0x0B55283caD0cc5372E4D33aD6D3260D8050EccD4;\n    address public addressFundBounty   = 0xfe17aa1cf299038780b8B16F0B89DB8cEcF28a89;\n\n    uint256 public fundReserv   = 75 * 10**5 * (10 ** uint256(decimals));\n    uint256 public fundBounty   =  5 * 10**5 * (10 ** uint256(decimals));\n\n    uint256 limitPreIco = 6 * 10**6 * (10 ** uint256(decimals));\n\n    uint256 startTimePreIco = 1542326400; // Fri, 16 Nov 2018 00:00:00 GMT\n    uint256 endTimePreIco =   1544918399; // Sat, 15 Dec 2018 23:59:59 GMT\n\n    uint256 startTimeIcoStage1 = 1547510400; // Tue, 15 Jan 2019 00:00:00 GMT\n    uint256 endTimeIcoStage1   = 1548806399; // Tue, 29 Jan 2019 23:59:59 GMT\n\n    uint256 startTimeIcoStage2 = 1548806400; // Wed, 30 Jan 2019 00:00:00 GMT\n    uint256 endTimeIcoStage2   = 1550102399; // Wed, 13 Feb 2019 23:59:59 GMT\n\n    uint256 startTimeIcoStage3 = 1550102400; // Thu, 14 Feb 2019 00:00:00 GMT\n    uint256 endTimeIcoStage3   = 1552694399; // Fri, 15 Mar 2019 23:59:59 GMT\n\n    uint256 public countInvestor;\n\n    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n    event TokenLimitReached(address indexed sender, uint256 tokenRaised, uint256 purchasedToken);\n    event MinWeiLimitReached(address indexed sender, uint256 weiAmount);\n    event CurrentPeriod(uint period);\n    event ChangeAddressWallet(address indexed owner, address indexed newAddress, address indexed oldAddress);\n    event ChangeRate(address indexed owner, uint256 newValue, uint256 oldValue);\n\n    constructor(address _owner, address _wallet) public\n    Crowdsale(_wallet)\n    {\n        require(_owner != address(0));\n        owner = _owner;\n        ownerTwo = addressFundReserv;\n        //owner = msg.sender; // for test's\n        transfersEnabled = true;\n        mintingFinished = false;\n        totalSupply = INITIAL_SUPPLY;\n        bool resultMintForOwner = mintForFund(owner);\n        require(resultMintForOwner);\n    }\n\n    // fallback function can be used to buy tokens\n    function() payable public {\n        buyTokens(msg.sender);\n    }\n\n    function buyTokens(address _investor) public payable returns (uint256){\n        require(_investor != address(0));\n        uint256 weiAmount = msg.value;\n        uint256 tokens = validPurchaseTokens(weiAmount);\n        if (tokens == 0) {revert();}\n        weiRaised = weiRaised.add(weiAmount);\n        tokenAllocated = tokenAllocated.add(tokens);\n        mint(_investor, tokens, owner);\n\n        emit TokenPurchase(_investor, weiAmount, tokens);\n        if (deposited[_investor] == 0) {\n            countInvestor = countInvestor.add(1);\n        }\n        deposit(_investor);\n        wallet.transfer(weiAmount);\n        return tokens;\n    }\n\n    function getTotalAmountOfTokens(uint256 _weiAmount) internal returns (uint256) {\n        uint256 currentDate = now;\n        //currentDate = 1543658400; // (01 Dec 2018) // for test's\n        uint currentPeriod = 0;\n        currentPeriod = getPeriod(currentDate);\n        uint256 amountOfTokens = 0;\n        if(currentPeriod > 0){\n            if(currentPeriod == 1){\n                amountOfTokens += _weiAmount.mul(rates[0]);\n                if (tokenAllocated.add(amountOfTokens) > limitPreIco) {\n                    currentPeriod = currentPeriod.add(1);\n                }\n            }\n            if(currentPeriod >= 2){\n                amountOfTokens += _weiAmount.mul(rates[currentPeriod - 1]);\n            }\n            if(whitelist[msg.sender]){\n                amountOfTokens = amountOfTokens.mul(105).div(100);\n            }\n        }\n        emit CurrentPeriod(currentPeriod);\n        return amountOfTokens;\n    }\n\n    function getPeriod(uint256 _currentDate) public view returns (uint) {\n        if(_currentDate < startTimePreIco){\n            return 0;\n        }\n        if( startTimePreIco <= _currentDate && _currentDate <= endTimePreIco){\n            return 1;\n        }\n        if( startTimeIcoStage1 <= _currentDate && _currentDate <= endTimeIcoStage1){\n            return 2;\n        }\n        if( startTimeIcoStage2 <= _currentDate && _currentDate <= endTimeIcoStage2){\n            return 3;\n        }\n        if( startTimeIcoStage3 <= _currentDate && _currentDate <= endTimeIcoStage3){\n            return 4;\n        }\n        return 0;\n    }\n\n    function deposit(address investor) internal {\n        deposited[investor] = deposited[investor].add(msg.value);\n    }\n\n    function mintForFund(address _walletOwner) internal returns (bool result) {\n        result = false;\n        require(_walletOwner != address(0));\n        balances[_walletOwner] = balances[_walletOwner].add(fundForSale);\n\n        balances[addressFundTeam] = balances[addressFundTeam].add(fundTeam);\n        balances[addressFundReserv] = balances[addressFundReserv].add(fundReserv);\n        balances[addressFundAdvisors] = balances[addressFundAdvisors].add(fundAdvisors);\n        balances[addressFundBounty] = balances[addressFundBounty].add(fundBounty);\n\n        result = true;\n    }\n\n    function getDeposited(address _investor) external view returns (uint256){\n        return deposited[_investor];\n    }\n\n    function setWallet(address _newWallet) external onlyOwner {\n        if (checkApprove(1) == false) {\n            revert();\n        }\n        require(_newWallet != address(0));\n        address _oldWallet = wallet;\n        wallet = _newWallet;\n        emit ChangeAddressWallet(msg.sender, _newWallet, _oldWallet);\n    }\n\n    function validPurchaseTokens(uint256 _weiAmount) public returns (uint256) {\n        uint256 addTokens = getTotalAmountOfTokens(_weiAmount);\n        if (_weiAmount < weiMin) {\n            emit MinWeiLimitReached(msg.sender, _weiAmount);\n            return 0;\n        }\n        if (tokenAllocated.add(addTokens) > fundForSale) {\n            emit TokenLimitReached(msg.sender, tokenAllocated, addTokens);\n            return 0;\n        }\n        return addTokens;\n    }\n\n    function getRefferalProfit(address _refferer) external {\n        uint256 balanceRefferal = balances[msg.sender];\n        require(_refferer != address(0));\n        require(balanceRefferal > 0);\n        require(balances[_refferer] > 0);\n\n        if (isRefferer[msg.sender] == false) {\n            isRefferer[msg.sender] = true;\n            balances[msg.sender] = balanceRefferal.mul(105).div(100);\n        }\n    }\n\n    function setWeiMin(uint256 _value) external onlyOwner {\n        if (checkApprove(2) == false) {\n            revert();\n        }\n        require(_value > 0);\n        weiMin = _value;\n    }\n\n    /**\n   * @dev Adds single address to whitelist.\n   * @param _beneficiary Address to be added to the whitelist\n   */\n    function addToWhitelist(address _beneficiary) external onlyOwner {\n        require(_beneficiary != address(0));\n        whitelist[_beneficiary] = true;\n    }\n\n    /**\n     * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n     * @param _beneficiaries Addresses to be added to the whitelist\n     */\n    function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n            whitelist[_beneficiaries[i]] = true;\n        }\n    }\n\n    /**\n     * @dev Removes single address from whitelist.\n     * @param _beneficiary Address to be removed to the whitelist\n     */\n    function removeFromWhitelist(address _beneficiary) external onlyOwner {\n        require(_beneficiary != address(0));\n        whitelist[_beneficiary] = false;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"addressFundBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numberFunction\",\"type\":\"uint8\"}],\"name\":\"checkApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressFundAdvisors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"approveOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_currentDate\",\"type\":\"uint256\"}],\"name\":\"getPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_currentTime\",\"type\":\"uint256\"}],\"name\":\"checkVesting\",\"outputs\":[{\"name\":\"period\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_refferer\",\"type\":\"address\"}],\"name\":\"getRefferalProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundReserv\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressFundTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressFundReserv\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundAdvisors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"addManyToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setWeiMin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"validPurchaseTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenRaised\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"purchasedToken\",\"type\":\"uint256\"}],\"name\":\"TokenLimitReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"MinWeiLimitReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"CurrentPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"ChangeAddressWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"ChangeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000c7be5caa4dc9fd5cbb27a76d828404f85018568f000000000000000000000000b4abbec258fc273505df3729d831008a4b763f8c"
}