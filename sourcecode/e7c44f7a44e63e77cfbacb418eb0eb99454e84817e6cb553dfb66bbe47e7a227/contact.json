{
  "address": "0x41f3d85e9b8497fca552523047bf4dac7beea64a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Etheremon: Adventure Claim",
  "contractName": "EtheremonAdventureClaim",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-02\n*/\n\npragma solidity ^0.4.23;\n\ncontract BasicAccessControl {\n    address public owner;\n    // address[] public moderators;\n    uint16 public totalModerators = 0;\n    mapping (address => bool) public moderators;\n    bool public isMaintaining = false;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyModerators() {\n        require(msg.sender == owner || moderators[msg.sender] == true);\n        _;\n    }\n\n    modifier isActive {\n        require(!isMaintaining);\n        _;\n    }\n\n    function ChangeOwner(address _newOwner) onlyOwner public {\n        if (_newOwner != address(0)) {\n            owner = _newOwner;\n        }\n    }\n\n\n    function AddModerator(address _newModerator) onlyOwner public {\n        if (moderators[_newModerator] == false) {\n            moderators[_newModerator] = true;\n            totalModerators += 1;\n        }\n    }\n    \n    function RemoveModerator(address _oldModerator) onlyOwner public {\n        if (moderators[_oldModerator] == true) {\n            moderators[_oldModerator] = false;\n            totalModerators -= 1;\n        }\n    }\n\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\n        isMaintaining = _isMaintaining;\n    }\n}\n\ncontract EtheremonAdventurePresale {\n    function getBidBySiteIndex(uint8 _siteId, uint _index) constant external returns(address bidder, uint32 bidId, uint8 siteId, uint amount, uint time);\n}\n\ninterface EtheremonAdventureItem {\n    function spawnSite(uint _classId, uint _tokenId, address _owner) external;\n}\n\ncontract EtheremonAdventureClaim is BasicAccessControl {\n    uint constant public MAX_SITE_ID = 108;\n    uint constant public MIN_SITE_ID = 1;\n    \n    struct BiddingInfo {\n        address bidder;\n        uint32 bidId;\n        uint amount;\n        uint time;\n        uint8 siteId;\n    }\n    \n    mapping(uint32 => uint) public bidTokens;\n    \n    address public adventureItem;\n    address public adventurePresale;\n    \n    modifier requireAdventureItem {\n        require(adventureItem != address(0));\n        _;        \n    }\n    \n    modifier requireAdventurePresale {\n        require(adventurePresale != address(0));\n        _;        \n    }\n    \n    function setContract(address _adventureItem, address _adventurePresale) onlyOwner public {\n        adventureItem = _adventureItem;\n        adventurePresale = _adventurePresale;\n    }\n    \n    function claimSiteToken(uint8 _siteId, uint _index) isActive requireAdventureItem requireAdventurePresale public {\n        if (_siteId < MIN_SITE_ID || _siteId > MAX_SITE_ID || _index >= 10) revert();\n        BiddingInfo memory bidInfo;\n        (bidInfo.bidder, bidInfo.bidId, bidInfo.siteId, bidInfo.amount, bidInfo.time) = EtheremonAdventurePresale(adventurePresale).getBidBySiteIndex(_siteId, _index);\n        if (bidInfo.bidId == 0 || bidTokens[bidInfo.bidId] > 0) revert();\n        uint tokenId = (uint(_siteId) - 1) * 10 + _index + 1;\n        bidTokens[bidInfo.bidId] = tokenId;\n        EtheremonAdventureItem(adventureItem).spawnSite(_siteId, tokenId, bidInfo.bidder);\n    }\n    \n    function getTokenByBid(uint32 _bidId) constant public returns(uint) {\n        return bidTokens[_bidId];\n    }\n}",
  "bytecode": "6080604052600080546002805460ff19169055600160b060020a0319163317905561085b8061002f6000396000f3006080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166314d0f1ba81146100ea5780631a5b8f961461011f5780632bf6e0a514610146578063445264db1461016f5780634833c47c146101a057806348ef5aa8146101be5780634efb023e146101d85780636c81fd6d146102045780637138364b146102255780638da5cb5b1461023a578063addb246b1461024f578063b85d627514610264578063c0ee954f14610285578063ee4e4416146102a3578063f2853292146102b8578063fda27af2146102d9575b600080fd5b3480156100f657600080fd5b5061010b600160a060020a03600435166102f7565b604080519115158252519081900360200190f35b34801561012b57600080fd5b5061013461030c565b60408051918252519081900360200190f35b34801561015257600080fd5b5061016d600160a060020a0360043581169060243516610311565b005b34801561017b57600080fd5b50610184610363565b60408051600160a060020a039092168252519081900360200190f35b3480156101ac57600080fd5b5061013463ffffffff60043516610372565b3480156101ca57600080fd5b5061016d600435151561038a565b3480156101e457600080fd5b506101ed6103b4565b6040805161ffff9092168252519081900360200190f35b34801561021057600080fd5b5061016d600160a060020a03600435166103d6565b34801561023157600080fd5b5061018461047c565b34801561024657600080fd5b5061018461048b565b34801561025b57600080fd5b5061013461049a565b34801561027057600080fd5b5061016d600160a060020a036004351661049f565b34801561029157600080fd5b5061013463ffffffff60043516610545565b3480156102af57600080fd5b5061010b610557565b3480156102c457600080fd5b5061016d600160a060020a0360043516610560565b3480156102e557600080fd5b5061016d60ff600435166024356105b3565b60016020526000908152604090205460ff1681565b606c81565b600054600160a060020a0316331461032857600080fd5b60048054600160a060020a0393841673ffffffffffffffffffffffffffffffffffffffff199182161790915560058054929093169116179055565b600554600160a060020a031681565b63ffffffff1660009081526003602052604090205490565b600054600160a060020a031633146103a157600080fd5b6002805460ff1916911515919091179055565b60005474010000000000000000000000000000000000000000900461ffff1681565b600054600160a060020a031633146103ed57600080fd5b600160a060020a03811660009081526001602052604090205460ff16151561047957600160a060020a03811660009081526001602081905260408220805460ff191682179055815461ffff7401000000000000000000000000000000000000000080830482169093011690910275ffff0000000000000000000000000000000000000000199091161790555b50565b600454600160a060020a031681565b600054600160a060020a031681565b600181565b600054600160a060020a031633146104b657600080fd5b600160a060020a03811660009081526001602081905260409091205460ff161515141561047957600160a060020a03166000908152600160205260408120805460ff19169055805475ffff0000000000000000000000000000000000000000198116740100000000000000000000000000000000000000009182900461ffff9081166000190116909102179055565b60036020526000908152604090205481565b60025460ff1681565b600054600160a060020a0316331461057757600080fd5b600160a060020a038116156104795760008054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff1990911617905550565b6105bb610801565b60025460009060ff16156105ce57600080fd5b600454600160a060020a031615156105e557600080fd5b600554600160a060020a031615156105fc57600080fd5b60018460ff1610806106115750606c8460ff16115b8061061d5750600a8310155b1561062757600080fd5b600554604080517f968f0a6a00000000000000000000000000000000000000000000000000000000815260ff87166004820152602481018690529051600160a060020a039092169163968f0a6a9160448082019260a0929091908290030181600087803b15801561069757600080fd5b505af11580156106ab573d6000803e3d6000fd5b505050506040513d60a08110156106c157600080fd5b508051602080830151604080850151606080870151608097880151918a01919091529188019190915260ff169386019390935263ffffffff909216918401829052600160a060020a031683521580610731575060208083015163ffffffff16600090815260039091526040812054115b1561073b57600080fd5b5060208181015163ffffffff16600090815260039091526040808220600160ff87166000198101600a028701919091019182905560048054865185517febf06bcb0000000000000000000000000000000000000000000000000000000081529283019390935260248201849052600160a060020a03928316604483015293519294919093169263ebf06bcb926064808301939282900301818387803b1580156107e357600080fd5b505af11580156107f7573d6000803e3d6000fd5b5050505050505050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152905600a165627a7a723058201f69d61b9fb634e1a643c9713737160197544d248a12ea0a3739cc10d22215cc0029"
}