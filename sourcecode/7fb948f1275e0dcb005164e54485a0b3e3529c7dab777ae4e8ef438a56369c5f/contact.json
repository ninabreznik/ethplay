{
  "address": "0x117c3385bb0f1ddb762d48cc24626f9529c42148",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EurocoinToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-06\n*/\n\npragma solidity ^0.4.25;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n    // ERC20 Token Smart Contract\n    contract EurocoinToken {\n        \n        string public constant name = \"EurocoinToken\";\n        string public constant symbol = \"ECT\";\n        uint8 public constant decimals = 0;\n        uint public _totalSupply = 100000000;\n        uint256 public RATE = 500;\n        bool public isMinting = true;\n        string public constant generatedBy  = \"EurocoinToken -  Token -  Eurocoinpay - Oficial ERC20  \";\n        \n        using SafeMath for uint256;\n        address public owner;\n        \n         // Functions with this modifier can only be executed by the owner\n         modifier onlyOwner() {\n            if (msg.sender != owner) {\n                throw;\n            }\n             _;\n         }\n     \n        // Balances for each account\n        mapping(address => uint256) balances;\n        // Owner of account approves the transfer of an amount to another account\n        mapping(address => mapping(address=>uint256)) allowed;\n\n        // Its a payable function works as a token factory.\n        function () payable{\n            createTokens();\n        }\n\n        // Constructor\n        constructor() public {\n            owner = 0x9f58eea92d1d1c6ec647d933c273830fa1323108; \n            balances[owner] = _totalSupply;\n        }\n\n        //allows owner to burn tokens that are not sold in a crowdsale\n        function burnTokens(uint256 _value) onlyOwner {\n\n             require(balances[msg.sender] >= _value && _value > 0 );\n             _totalSupply = _totalSupply.sub(_value);\n             balances[msg.sender] = balances[msg.sender].sub(_value);\n             \n        }\n\n\n\n        // This function creates Tokens  \n         function createTokens() payable {\n            if(isMinting == true){\n                require(msg.value > 0);\n                uint256  tokens = msg.value.mul(RATE);\n                balances[msg.sender] = balances[msg.sender].add(tokens);\n                _totalSupply = _totalSupply.add(tokens);\n                owner.transfer(msg.value);\n            }\n            else{\n                throw;\n            }\n        }\n\n\n        function endCrowdsale() onlyOwner {\n            isMinting = false;\n        }\n\n        function changeCrowdsaleRate(uint256 _value) onlyOwner {\n            RATE = _value;\n        }\n\n\n        \n        function totalSupply() constant returns(uint256){\n            return _totalSupply;\n        }\n        // What is the balance of a particular account?\n        function balanceOf(address _owner) constant returns(uint256){\n            return balances[_owner];\n        }\n\n         // Transfer the balance from owner's account to another account   \n        function transfer(address _to, uint256 _value)  returns(bool) {\n            require(balances[msg.sender] >= _value && _value > 0 );\n            balances[msg.sender] = balances[msg.sender].sub(_value);\n            balances[_to] = balances[_to].add(_value);\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        \n    // Send _value amount of tokens from address _from to address _to\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n    // fees in sub-currencies; the command should fail unless the _from account has\n    // deliberately authorized the sender of the message via some mechanism; we propose\n    // these standardized APIs for approval:\n    function transferFrom(address _from, address _to, uint256 _value)  returns(bool) {\n        require(allowed[_from][msg.sender] >= _value && balances[_from] >= _value && _value > 0);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    function approve(address _spender, uint256 _value) returns(bool){\n        allowed[msg.sender][_spender] = _value; \n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    // Returns the amount which _spender is still allowed to withdraw from _owner\n    function allowance(address _owner, address _spender) constant returns(uint256){\n        return allowed[_owner][_spender];\n    }\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
  "bytecode": "60806040526305f5e1006000556101f460019081556002805460ff1916909117905534801561002d57600080fd5b5060028054749f58eea92d1d1c6ec647d933c273830fa13231080061010060a860020a0319909116179081905560008054610100909204600160a060020a03168152600360205260409020556109a2806100886000396000f3006080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610105578063095ea7b31461018f5780630ced8c69146101c757806318160ddd146101dc5780632095f2d41461020357806323b872dd146102185780632a8092df14610242578063313ce567146102575780633eaaf86b146102825780635c07ac9414610297578063664e9704146102af5780636d1b229d146102c457806370a08231146102dc5780638da5cb5b146102fd57806395d89b411461032e578063a9059cbb14610343578063b4427263146100fb578063dd62ed3e14610367575b61010361038e565b005b34801561011157600080fd5b5061011a61045c565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015457818101518382015260200161013c565b50505050905090810190601f1680156101815780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019b57600080fd5b506101b3600160a060020a0360043516602435610493565b604080519115158252519081900360200190f35b3480156101d357600080fd5b5061011a6104f9565b3480156101e857600080fd5b506101f1610559565b60408051918252519081900360200190f35b34801561020f57600080fd5b5061010361055f565b34801561022457600080fd5b506101b3600160a060020a0360043581169060243516604435610587565b34801561024e57600080fd5b506101b36106f6565b34801561026357600080fd5b5061026c6106ff565b6040805160ff9092168252519081900360200190f35b34801561028e57600080fd5b506101f1610704565b3480156102a357600080fd5b5061010360043561070a565b3480156102bb57600080fd5b506101f161072b565b3480156102d057600080fd5b50610103600435610731565b3480156102e857600080fd5b506101f1600160a060020a03600435166107bf565b34801561030957600080fd5b506103126107da565b60408051600160a060020a039092168252519081900360200190f35b34801561033a57600080fd5b5061011a6107ee565b34801561034f57600080fd5b506101b3600160a060020a0360043516602435610825565b34801561037357600080fd5b506101f1600160a060020a03600435811690602435166108ff565b60025460009060ff1615156001141561045457600034116103ae57600080fd5b6001546103c290349063ffffffff61092a16565b336000908152600360205260409020549091506103e5908263ffffffff61095516565b3360009081526003602052604081209190915554610409908263ffffffff61095516565b6000908155600254604051600160a060020a0361010090920491909116913480156108fc02929091818181858888f1935050505015801561044e573d6000803e3d6000fd5b50610459565b600080fd5b50565b60408051808201909152600d81527f4575726f636f696e546f6b656e00000000000000000000000000000000000000602082015281565b336000818152600460209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b606060405190810160405280603781526020017f4575726f636f696e546f6b656e202d2020546f6b656e202d20204575726f636f81526020017f696e706179202d204f66696369616c204552433230202000000000000000000081525081565b60005490565b6002546101009004600160a060020a0316331461057b57600080fd5b6002805460ff19169055565b600160a060020a038316600090815260046020908152604080832033845290915281205482118015906105d25750600160a060020a0384166000908152600360205260409020548211155b80156105de5750600082115b15156105e957600080fd5b600160a060020a038416600090815260036020526040902054610612908363ffffffff61096416565b600160a060020a038086166000908152600360205260408082209390935590851681522054610647908363ffffffff61095516565b600160a060020a03808516600090815260036020908152604080832094909455918716815260048252828120338252909152205461068b908363ffffffff61096416565b600160a060020a03808616600081815260046020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60025460ff1681565b600081565b60005481565b6002546101009004600160a060020a0316331461072657600080fd5b600155565b60015481565b6002546101009004600160a060020a0316331461074d57600080fd5b33600090815260036020526040902054811180159061076c5750600081115b151561077757600080fd5b60005461078a908263ffffffff61096416565b6000908155338152600360205260409020546107ac908263ffffffff61096416565b3360009081526003602052604090205550565b600160a060020a031660009081526003602052604090205490565b6002546101009004600160a060020a031681565b60408051808201909152600381527f4543540000000000000000000000000000000000000000000000000000000000602082015281565b3360009081526003602052604081205482118015906108445750600082115b151561084f57600080fd5b3360009081526003602052604090205461086f908363ffffffff61096416565b3360009081526003602052604080822092909255600160a060020a038516815220546108a1908363ffffffff61095516565b600160a060020a0384166000818152600360209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b6000828202831580610946575082848281151561094357fe5b04145b151561094e57fe5b9392505050565b60008282018381101561094e57fe5b60008282111561097057fe5b509003905600a165627a7a72305820f3a01c9c5af18665bbf1240c8ff6827c7ac243070f0b6ebafc03337c7aaedd580029"
}