{
  "address": "0xf5adf32c8a23ce113b352009531dfdf06eab6619",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "StatementRegistery",
  "compilerVersion": "v0.5.3+commit.10d17f24",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-07\n*/\n\npragma solidity 0.5.3;\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n/**\n * @title Secondary\n * @dev A Secondary contract can only be used by its primary account (the one that created it)\n */\ncontract OwnableSecondary is Ownable {\n  address private _primary;\n\n  event PrimaryTransferred(\n    address recipient\n  );\n\n  /**\n   * @dev Sets the primary account to the one that is creating the Secondary contract.\n   */\n  constructor() internal {\n    _primary = msg.sender;\n    emit PrimaryTransferred(_primary);\n  }\n\n  /**\n   * @dev Reverts if called from any account other than the primary or the owner.\n   */\n   modifier onlyPrimaryOrOwner() {\n     require(msg.sender == _primary || msg.sender == owner(), \"not the primary user nor the owner\");\n     _;\n   }\n\n   /**\n    * @dev Reverts if called from any account other than the primary.\n    */\n  modifier onlyPrimary() {\n    require(msg.sender == _primary, \"not the primary user\");\n    _;\n  }\n\n  /**\n   * @return the address of the primary.\n   */\n  function primary() public view returns (address) {\n    return _primary;\n  }\n\n  /**\n   * @dev Transfers contract to a new primary.\n   * @param recipient The address of new primary.\n   */\n  function transferPrimary(address recipient) public onlyOwner {\n    require(recipient != address(0), \"new primary address is null\");\n    _primary = recipient;\n    emit PrimaryTransferred(_primary);\n  }\n}\n\n\n\n\n\n\ncontract ImmutableEternalStorageInterface is OwnableSecondary {\n  /********************/\n  /** PUBLIC - WRITE **/\n  /********************/\n  function createUint(bytes32 key, uint value) external;\n\n  function createString(bytes32 key, string calldata value) external;\n\n  function createAddress(bytes32 key, address value) external;\n\n  function createBytes(bytes32 key, bytes calldata value) external;\n\n  function createBytes32(bytes32 key, bytes32 value) external;\n\n  function createBool(bytes32 key, bool value) external;\n\n  function createInt(bytes32 key, int value) external;\n\n  /*******************/\n  /** PUBLIC - READ **/\n  /*******************/\n  function getUint(bytes32 key) external view returns(uint);\n\n  function uintExists(bytes32 key) external view returns(bool);\n\n  function getString(bytes32 key) external view returns(string memory);\n\n  function stringExists(bytes32 key) external view returns(bool);\n\n  function getAddress(bytes32 key) external view returns(address);\n\n  function addressExists(bytes32 key) external view returns(bool);\n\n  function getBytes(bytes32 key) external view returns(bytes memory);\n\n  function bytesExists(bytes32 key) external view returns(bool);\n\n  function getBytes32(bytes32 key) external view returns(bytes32);\n\n  function bytes32Exists(bytes32 key) external view returns(bool);\n\n  function getBool(bytes32 key) external view returns(bool);\n\n  function boolExists(bytes32 key) external view returns(bool);\n\n  function getInt(bytes32 key) external view returns(int);\n\n  function intExists(bytes32 key) external view returns(bool);\n}\n\n\n\n\n\ncontract StatementRegisteryInterface is OwnableSecondary {\n  /********************/\n  /** PUBLIC - WRITE **/\n  /********************/\n  function recordStatement(string calldata buildingPermitId, uint[] calldata statementDataLayout, bytes calldata statementData) external returns(bytes32);\n\n  /*******************/\n  /** PUBLIC - READ **/\n  /*******************/\n  function statementIdsByBuildingPermit(string calldata id) external view returns(bytes32[] memory);\n\n  function statementExists(bytes32 statementId) public view returns(bool);\n\n  function getStatementString(bytes32 statementId, string memory key) public view returns(string memory);\n\n  function getStatementPcId(bytes32 statementId) external view returns (string memory);\n\n  function getStatementAcquisitionDate(bytes32 statementId) external view returns (string memory);\n\n  function getStatementRecipient(bytes32 statementId) external view returns (string memory);\n\n  function getStatementArchitect(bytes32 statementId) external view returns (string memory);\n\n  function getStatementCityHall(bytes32 statementId) external view returns (string memory);\n\n  function getStatementMaximumHeight(bytes32 statementId) external view returns (string memory);\n\n  function getStatementDestination(bytes32 statementId) external view returns (string memory);\n\n  function getStatementSiteArea(bytes32 statementId) external view returns (string memory);\n\n  function getStatementBuildingArea(bytes32 statementId) external view returns (string memory);\n\n  function getStatementNearImage(bytes32 statementId) external view returns(string memory);\n\n  function getStatementFarImage(bytes32 statementId) external view returns(string memory);\n\n  function getAllStatements() external view returns(bytes32[] memory);\n}\n\n\n\ncontract StatementRegistery is StatementRegisteryInterface {\n  ImmutableEternalStorageInterface public dataStore;\n  string[] public buildingPermitIds;\n  mapping(bytes32 => uint) public statementCountByBuildingPermitHash;\n\n  event NewStatementEvent(string indexed buildingPermitId, bytes32 statementId);\n\n  /********************/\n  /** PUBLIC - WRITE **/\n  /********************/\n  constructor(address immutableDataStore) public {\n    require(immutableDataStore != address(0), \"null data store\");\n    dataStore = ImmutableEternalStorageInterface(immutableDataStore);\n  }\n\n  /* Only to be called by the Controller contract */\n  function recordStatement(\n    string calldata buildingPermitId,\n    uint[] calldata statementDataLayout,\n    bytes calldata statementData\n  ) external onlyPrimaryOrOwner returns(bytes32) {\n    bytes32 statementId = generateNewStatementId(buildingPermitId);\n\n    assert(!statementExists(statementId));\n\n    recordStatementKeyValues(statementId, statementDataLayout, statementData);\n\n    dataStore.createBool(keccak256(abi.encodePacked(statementId)), true);\n    updateStatementCountByBuildingPermit(buildingPermitId);\n\n    emit NewStatementEvent(buildingPermitId, statementId);\n\n    return statementId;\n  }\n\n  /*******************/\n  /** PUBLIC - READ **/\n  /*******************/\n  function statementIdsByBuildingPermit(string calldata buildingPermitId) external view returns(bytes32[] memory) {\n    uint nbStatements = statementCountByBuildingPermit(buildingPermitId);\n\n    bytes32[] memory res = new bytes32[](nbStatements);\n\n    while(nbStatements > 0) {\n      nbStatements--;\n      res[nbStatements] = computeStatementId(buildingPermitId,nbStatements);\n    }\n\n    return res;\n  }\n\n  function statementExists(bytes32 statementId) public view returns(bool) {\n    return dataStore.boolExists(keccak256(abi.encodePacked(statementId)));\n  }\n\n  function getStatementString(bytes32 statementId, string memory key) public view returns(string memory) {\n    return dataStore.getString(keccak256(abi.encodePacked(statementId, key)));\n  }\n\n  function getStatementPcId(bytes32 statementId) external view returns (string memory) {\n    return getStatementString(statementId, \"pcId\");\n  }\n\n  function getStatementAcquisitionDate(bytes32 statementId) external view returns (string memory) {\n    return getStatementString(statementId, \"acquisitionDate\");\n  }\n\n  function getStatementRecipient(bytes32 statementId) external view returns (string memory) {\n    return getStatementString(statementId, \"recipient\");\n  }\n\n  function getStatementArchitect(bytes32 statementId) external view returns (string memory) {\n    return getStatementString(statementId, \"architect\");\n  }\n\n  function getStatementCityHall(bytes32 statementId) external view returns (string memory) {\n    return getStatementString(statementId, \"cityHall\");\n  }\n\n  function getStatementMaximumHeight(bytes32 statementId) external view returns (string memory) {\n    return getStatementString(statementId, \"maximumHeight\");\n  }\n\n  function getStatementDestination(bytes32 statementId) external view returns (string memory) {\n    return getStatementString(statementId, \"destination\");\n  }\n\n  function getStatementSiteArea(bytes32 statementId) external view returns (string memory) {\n    return getStatementString(statementId, \"siteArea\");\n  }\n\n  function getStatementBuildingArea(bytes32 statementId) external view returns (string memory) {\n    return getStatementString(statementId, \"buildingArea\");\n  }\n\n  function getStatementNearImage(bytes32 statementId) external view returns(string memory) {\n    return getStatementString(statementId, \"nearImage\");\n  }\n\n  function getStatementFarImage(bytes32 statementId) external view returns(string memory) {\n    return getStatementString(statementId, \"farImage\");\n  }\n\n  function getAllStatements() external view returns(bytes32[] memory) {\n    uint nbStatements = 0;\n    for(uint idx = 0; idx < buildingPermitIds.length; idx++) {\n      nbStatements += statementCountByBuildingPermit(buildingPermitIds[idx]);\n    }\n\n    bytes32[] memory res = new bytes32[](nbStatements);\n\n    uint statementIdx = 0;\n    for(uint idx = 0; idx < buildingPermitIds.length; idx++) {\n      nbStatements = statementCountByBuildingPermit(buildingPermitIds[idx]);\n      while(nbStatements > 0){\n        nbStatements--;\n        res[statementIdx] = computeStatementId(buildingPermitIds[idx],nbStatements);\n        statementIdx++;\n      }\n    }\n\n    return res;\n  }\n\n  /**********************/\n  /** INTERNAL - WRITE **/\n  /**********************/\n  function updateStatementCountByBuildingPermit(string memory buildingPermitId) internal {\n    uint oldCount = statementCountByBuildingPermitHash[keccak256(abi.encodePacked(buildingPermitId))];\n\n    if(oldCount == 0) { // first record for this building permit id\n      buildingPermitIds.push(buildingPermitId);\n    }\n\n    uint newCount = oldCount + 1;\n    assert(newCount > oldCount);\n    statementCountByBuildingPermitHash[keccak256(abi.encodePacked(buildingPermitId))] = newCount;\n  }\n\n  function recordStatementKeyValues(\n    bytes32 statementId,\n    uint[] memory statementDataLayout,\n    bytes memory statementData) internal {\n    string[] memory infos = parseStatementStrings(statementDataLayout, statementData);\n\n    require(infos.length == 11, \"the statement key values array length is incorrect\");\n\n    /** enforce the rules given in the legal specifications **/\n    // required infos\n    require(!isEmpty(infos[0]) && !isEmpty(infos[1]), \"acquisitionDate and pcId are required\");\n    require(!isEmpty(infos[9]) && !isEmpty(infos[10]), \"missing image\");\n\n    // < 2 missing non required info\n    uint nbMissingNRIs = (isEmpty(infos[2]) ? 1 : 0) + (isEmpty(infos[3]) ? 1 : 0) + (isEmpty(infos[4]) ? 1 : 0) + (isEmpty(infos[7]) ? 1 : 0);\n    require(nbMissingNRIs <= 2, \"> 2 missing non required info\");\n\n    // mo missing mandatory info or one missing mandatory info and 0 missing non required info\n    uint nbMissingMIs = (isEmpty(infos[5]) ? 1 : 0) + (isEmpty(infos[6]) ? 1 : 0) + (isEmpty(infos[8]) ? 1 : 0);\n    require(nbMissingMIs == 0 || (nbMissingMIs == 1 && nbMissingNRIs == 0), \"missing mandatory info\");\n\n    recordStatementString(statementId, \"pcId\", infos[0]);\n    recordStatementString(statementId, \"acquisitionDate\", infos[1]);\n    if(!isEmpty(infos[2])) recordStatementString(statementId, \"recipient\", infos[2]);\n    if(!isEmpty(infos[3])) recordStatementString(statementId, \"architect\", infos[3]);\n    if(!isEmpty(infos[4])) recordStatementString(statementId, \"cityHall\", infos[4]);\n    if(!isEmpty(infos[5])) recordStatementString(statementId, \"maximumHeight\", infos[5]);\n    if(!isEmpty(infos[6])) recordStatementString(statementId, \"destination\", infos[6]);\n    if(!isEmpty(infos[7])) recordStatementString(statementId, \"siteArea\", infos[7]);\n    if(!isEmpty(infos[8])) recordStatementString(statementId, \"buildingArea\", infos[8]);\n    recordStatementString(statementId, \"nearImage\", infos[9]);\n    recordStatementString(statementId, \"farImage\", infos[10]);\n  }\n\n  function recordStatementString(bytes32 statementId, string memory key, string memory value) internal {\n    require(!dataStore.stringExists(keccak256(abi.encodePacked(statementId, key))), \"Trying to write an existing key-value string pair\");\n\n    dataStore.createString(keccak256(abi.encodePacked(statementId,key)), value);\n  }\n\n  /*********************/\n  /** INTERNAL - READ **/\n  /*********************/\n  function generateNewStatementId(string memory buildingPermitId) internal view returns (bytes32) {\n    uint nbStatements = statementCountByBuildingPermit(buildingPermitId);\n    return computeStatementId(buildingPermitId,nbStatements);\n  }\n\n  function statementCountByBuildingPermit(string memory buildingPermitId) internal view returns (uint) {\n    return statementCountByBuildingPermitHash[keccak256(abi.encodePacked(buildingPermitId))]; // mapping's default is 0\n  }\n\n  function computeStatementId(string memory buildingPermitId, uint statementNb) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(buildingPermitId,statementNb));\n  }\n\n  function parseStatementStrings(uint[] memory statementDataLayout, bytes memory statementData) internal pure returns(string[] memory) {\n    string[] memory res = new string[](statementDataLayout.length);\n    uint bytePos = 0;\n    uint resLength = res.length;\n    for(uint i = 0; i < resLength; i++) {\n      bytes memory strBytes = new bytes(statementDataLayout[i]);\n      uint strBytesLength = strBytes.length;\n      for(uint j = 0; j < strBytesLength; j++) {\n        strBytes[j] = statementData[bytePos];\n        bytePos++;\n      }\n      res[i] = string(strBytes);\n    }\n\n    return res;\n  }\n\n  function isEmpty(string memory s) internal pure returns(bool) {\n    return bytes(s).length == 0;\n  }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000927a6bcc1967f5c913bf19a6dc6d28450887ddf1"
}