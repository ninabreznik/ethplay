{
  "address": "0xf867a9bc367416f58845ac5ccb35e6bd93be2087",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SUTokenContract",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-12\n*/\n\npragma solidity ^0.4.21;\n \n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */ \ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    \n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n  \n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n    \n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\n \n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    require(_value <= balances[msg.sender]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply = totalSupply.sub(_value);\n    Burn(burner, _value);\n    Transfer(burner, address(0), _value);\n  }\n} \n \ncontract StandardToken is ERC20, BurnableToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    \n  address public owner;\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    require(newOwner != address(0));      \n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n    \n  event Mint(address indexed to, uint256 amount);\n  \n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will recieve the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n  \n}\n\ncontract SUCoin is MintableToken {\n    \n    string public constant name = \"SU Coin\";\n    \n    string public constant symbol = \"SUCoin\";\n    \n    uint32 public constant decimals = 18;\n    \n}\n\n\ncontract SUTokenContract is Ownable  {\n    using SafeMath for uint;\n    \n    event doiVerificationEvent(bytes32 _doiHash, bytes32 _hash);\n    \n    SUCoin public token = new SUCoin();\n    bool ifInit = true; \n    uint public tokenDec = 1000000000000000000; //18\n    address manager;\n    \n    \n    mapping (address => mapping (uint => bool)) idMap;\n    mapping(bytes32 => bool) hashMap;\n    mapping (uint => uint) mintInPeriod;\n    uint public mintLimit = tokenDec.mul(10000);\n    uint public period = 30 * 1 days; // 30 дней\n    uint public startTime = now;\n    \n    \n    function SUTokenContract(){\n        owner = msg.sender;\n        manager = msg.sender;\n        token = SUCoin(0x64734D2FEDCD1A208375b5Ea6dC14F4482b47D52);\n    }\n    \n    function initMinting() onlyOwner returns (bool) {\n        require(!ifInit);\n        require(token.mint(address(this), tokenDec.mul(50000)));\n        ifInit = true;\n        return true;\n    } \n    \n\n    function transferTokenOwnership(address _newOwner) onlyOwner {   \n        token.transferOwnership(_newOwner);\n    }\n    \n    function mint(address _to, uint _value) onlyOwner {\n        uint currPeriod = now.sub(startTime).div(period);\n        require(mintLimit>= _value.add(mintInPeriod[currPeriod]));\n        require(token.mint(_to, _value));\n        mintInPeriod[currPeriod] = mintInPeriod[currPeriod].add(_value);\n    }\n    \n    function burn(uint256 _value) onlyOwner {\n        token.burn(_value);\n    }\n    \n    function tokenTotalSupply() constant returns (uint256) {\n        return token.totalSupply();\n    }\n      \n    function tokenContractBalance() constant returns (uint256) {\n        return token.balanceOf(address(this));\n    }   \n    \n    function tokentBalance(address _address) constant returns (uint256) {\n        return token.balanceOf(_address);\n    }     \n    \n    \n    function transferToken(address _to, uint _value) onlyOwner returns (bool) {\n        return token.transfer(_to,  _value);\n    }    \n    \n    function allowance( address _spender) constant returns (uint256 remaining) {\n        return token.allowance(address(this),_spender);\n    }\n    \n    function allowanceAdd( address _spender, uint _value ) onlyOwner  returns (bool) {\n        uint currAllowance = allowance( _spender);\n        require(token.approve( _spender, 0));\n        require(token.approve( _spender, currAllowance.add(_value)));\n        return true;\n    } \n    \n    function allowanceSub( address _spender, uint _value ) onlyOwner  returns (bool) {\n        uint currAllowance = allowance( _spender);\n        require(currAllowance>=_value);\n        require(token.approve( _spender, 0));\n        require(token.approve( _spender, currAllowance.sub(_value)));\n        return true;\n    }\n    \n    function allowanceSubId( address _spender, uint _value,   uint _id) onlyOwner  returns (bool) {\n        uint currAllowance = allowance( _spender);\n        require(currAllowance>=_value);\n        require(token.approve( _spender, 0));\n        require(token.approve( _spender, currAllowance.sub(_value)));\n        idMap[_spender][_id] = true;\n        return true;\n    }    \n\n  function storeId(address _address, uint _id) onlyOwner {\n    idMap[_address][_id] = true;\n  } \n  \n  function storeHash(bytes32 _hash) onlyOwner {\n    hashMap[_hash] = true;\n  } \n  \n  function storeDoi(bytes32 _doiHash, bytes32 _hash) onlyOwner {\n    doiVerificationEvent( _doiHash, _hash);\n    storeHash(_hash);\n  }  \n     \n    \n  function idVerification(address _address, uint _id) constant returns (bool) {\n    return idMap[_address][_id];\n  } \n  \n  function hashVerification(bytes32 _hash) constant returns (bool) {\n    return hashMap[_hash];\n  } \n  \n  function mintInPeriodCount(uint _period) constant returns (uint) {\n    return mintInPeriod[_period];\n  }   \n  \n  function mintInCurrPeriodCount() constant returns (uint) {\n    uint currPeriod = now.sub(startTime).div(period);\n    return mintInPeriod[currPeriod];\n  }\n  \n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"initMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"mintInPeriodCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"hashVerification\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"storeId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"allowanceSubId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"storeHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"allowanceAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"allowanceSub\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintInCurrPeriodCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"tokentBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"idVerification\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDec\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_doiHash\",\"type\":\"bytes32\"},{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"storeDoi\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_doiHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"doiVerificationEvent\",\"type\":\"event\"}]",
  "bytecode": "606060405261000c610123565b604051809103906000f080151561002257600080fd5b6001805460a060020a60ff0219600160a060020a0393909316600160a060020a0319909116179190911674010000000000000000000000000000000000000000179055670de0b6b3a7640000600281905561008c90612710640100000000610ea86100f882021704565b60075562278d006008554260095534156100a557600080fd5b60008054600160a060020a033316600160a060020a0319918216811782168117909255600380548216909217909155600180549091167364734d2fedcd1a208375b5ea6dc14f4482b47d52179055610133565b6000828202831580610114575082848281151561011157fe5b04145b151561011c57fe5b9392505050565b6040516109fc8061107983390190565b610f37806101426000396000f3006060604052600436106101395763ffffffff60e060020a600035041662dee43f811461013e5780631072cbea1461016557806319e5d0cb1461018757806321e6b53d146101af5780633e5beab9146101d057806340c10f19146101ef57806342966c681461021157806370387c5914610227578063767000c01461023d57806378e979251461025f5780637b6c0492146102725780637fe88885146102975780638da5cb5b146102ad57806394ae7ac3146102dc57806395b4b88d146102fe578063996517cf14610320578063ae5adac714610333578063ae7ba09a14610346578063c149259914610365578063dd791ce514610387578063e38da1a11461039a578063e4403507146103b3578063ef78d4fd146103c6578063f2fde38b146103d9578063f7abab9e146103f8578063fc0c546a1461040b575b600080fd5b341561014957600080fd5b61015161041e565b604051901515815260200160405180910390f35b341561017057600080fd5b610151600160a060020a036004351660243561052c565b341561019257600080fd5b61019d6004356105bb565b60405190815260200160405180910390f35b34156101ba57600080fd5b6101ce600160a060020a03600435166105cd565b005b34156101db57600080fd5b61019d600160a060020a036004351661064b565b34156101fa57600080fd5b6101ce600160a060020a03600435166024356106c2565b341561021c57600080fd5b6101ce6004356107e1565b341561023257600080fd5b610151600435610844565b341561024857600080fd5b6101ce600160a060020a0360043516602435610859565b341561026a57600080fd5b61019d6108a4565b341561027d57600080fd5b610151600160a060020a03600435166024356044356108aa565b34156102a257600080fd5b6101ce600435610a1b565b34156102b857600080fd5b6102c0610a51565b604051600160a060020a03909116815260200160405180910390f35b34156102e757600080fd5b610151600160a060020a0360043516602435610a60565b341561030957600080fd5b610151600160a060020a0360043516602435610b94565b341561032b57600080fd5b61019d610c65565b341561033e57600080fd5b61019d610c6b565b341561035157600080fd5b61019d600160a060020a0360043516610c9e565b341561037057600080fd5b610151600160a060020a0360043516602435610cf1565b341561039257600080fd5b61019d610d1c565b34156103a557600080fd5b6101ce600435602435610d22565b34156103be57600080fd5b61019d610d84565b34156103d157600080fd5b61019d610df2565b34156103e457600080fd5b6101ce600160a060020a0360043516610df8565b341561040357600080fd5b61019d610e57565b341561041657600080fd5b6102c0610e99565b6000805433600160a060020a0390811691161461043a57600080fd5b60015474010000000000000000000000000000000000000000900460ff161561046257600080fd5b600154600254600160a060020a03909116906340c10f1990309061048e9061c35063ffffffff610ea816565b60405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156104d157600080fd5b5af115156104de57600080fd5b5050506040518051905015156104f357600080fd5b506001805474ff000000000000000000000000000000000000000019167401000000000000000000000000000000000000000017815590565b6000805433600160a060020a0390811691161461054857600080fd5b600154600160a060020a031663a9059cbb848460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561059e57600080fd5b5af115156105ab57600080fd5b5050506040518051949350505050565b60009081526006602052604090205490565b60005433600160a060020a039081169116146105e857600080fd5b600154600160a060020a031663f2fde38b8260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b151561063857600080fd5b5af1151561064557600080fd5b50505050565b600154600090600160a060020a031663dd62ed3e308460405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b15156106a657600080fd5b5af115156106b357600080fd5b50505060405180519392505050565b6000805433600160a060020a039081169116146106de57600080fd5b6107056008546106f960095442610ed390919063ffffffff16565b9063ffffffff610ee516565b60008181526006602052604090205490915061072890839063ffffffff610efc16565b600754101561073657600080fd5b600154600160a060020a03166340c10f19848460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561078c57600080fd5b5af1151561079957600080fd5b5050506040518051905015156107ae57600080fd5b6000818152600660205260409020546107cd908363ffffffff610efc16565b600091825260066020526040909120555050565b60005433600160a060020a039081169116146107fc57600080fd5b600154600160a060020a03166342966c688260405160e060020a63ffffffff84160281526004810191909152602401600060405180830381600087803b151561063857600080fd5b60009081526005602052604090205460ff1690565b60005433600160a060020a0390811691161461087457600080fd5b600160a060020a03909116600090815260046020908152604080832093835292905220805460ff19166001179055565b60095481565b60008054819033600160a060020a039081169116146108c857600080fd5b6108d18561064b565b9050838110156108e057600080fd5b600154600160a060020a031663095ea7b386600060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561093757600080fd5b5af1151561094457600080fd5b50505060405180519050151561095957600080fd5b600154600160a060020a031663095ea7b38661097b848863ffffffff610ed316565b60405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156109be57600080fd5b5af115156109cb57600080fd5b5050506040518051905015156109e057600080fd5b600160a060020a03851660009081526004602090815260408083208684529091529020805460ff191660019081179091559150509392505050565b60005433600160a060020a03908116911614610a3657600080fd5b6000908152600560205260409020805460ff19166001179055565b600054600160a060020a031681565b60008054819033600160a060020a03908116911614610a7e57600080fd5b610a878461064b565b600154909150600160a060020a031663095ea7b385600060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610ae157600080fd5b5af11515610aee57600080fd5b505050604051805190501515610b0357600080fd5b600154600160a060020a031663095ea7b385610b25848763ffffffff610efc16565b60405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610b6857600080fd5b5af11515610b7557600080fd5b505050604051805190501515610b8a57600080fd5b5060019392505050565b60008054819033600160a060020a03908116911614610bb257600080fd5b610bbb8461064b565b905082811015610bca57600080fd5b600154600160a060020a031663095ea7b385600060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610c2157600080fd5b5af11515610c2e57600080fd5b505050604051805190501515610c4357600080fd5b600154600160a060020a031663095ea7b385610b25848763ffffffff610ed316565b60075481565b600080610c896008546106f960095442610ed390919063ffffffff16565b60009081526006602052604090205492915050565b600154600090600160a060020a03166370a082318360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156106a657600080fd5b600160a060020a03919091166000908152600460209081526040808320938352929052205460ff1690565b60025481565b60005433600160a060020a03908116911614610d3d57600080fd5b7f95e2ef554cea3ced6a1ea07e3492667e448adcf02a15d1000b9f700034fd0e24828260405191825260208201526040908101905180910390a1610d8081610a1b565b5050565b600154600090600160a060020a03166370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610dd757600080fd5b5af11515610de457600080fd5b505050604051805191505090565b60085481565b60005433600160a060020a03908116911614610e1357600080fd5b600160a060020a0381161515610e2857600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600154600090600160a060020a03166318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610dd757600080fd5b600154600160a060020a031681565b6000828202831580610ec45750828482811515610ec157fe5b04145b1515610ecc57fe5b9392505050565b600082821115610edf57fe5b50900390565b6000808284811515610ef357fe5b04949350505050565b600082820183811015610ecc57fe00a165627a7a72305820430baeaa10f01bc43477c5d62ebb1568353e8d93e15eb5de06ca4550661719040029606060405260038054600160a860020a03191633600160a060020a03161790556109ce8061002e6000396000f3006060604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146100df57806306fdde0314610106578063095ea7b31461019057806318160ddd146101b257806323b872dd146101d7578063313ce567146101ff57806340c10f191461022b57806342966c681461024d57806370a08231146102655780637d64bcb4146102845780638da5cb5b1461029757806395d89b41146102c6578063a9059cbb146102d9578063dd62ed3e146102fb578063f2fde38b14610320575b600080fd5b34156100ea57600080fd5b6100f261033f565b604051901515815260200160405180910390f35b341561011157600080fd5b610119610360565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561015557808201518382015260200161013d565b50505050905090810190601f1680156101825780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019b57600080fd5b6100f2600160a060020a0360043516602435610397565b34156101bd57600080fd5b6101c561043d565b60405190815260200160405180910390f35b34156101e257600080fd5b6100f2600160a060020a0360043581169060243516604435610443565b341561020a57600080fd5b610212610544565b60405163ffffffff909116815260200160405180910390f35b341561023657600080fd5b6100f2600160a060020a0360043516602435610549565b341561025857600080fd5b610263600435610655565b005b341561027057600080fd5b6101c5600160a060020a036004351661073d565b341561028f57600080fd5b6100f2610758565b34156102a257600080fd5b6102aa6107dd565b604051600160a060020a03909116815260200160405180910390f35b34156102d157600080fd5b6101196107ec565b34156102e457600080fd5b6100f2600160a060020a0360043516602435610823565b341561030657600080fd5b6101c5600160a060020a03600435811690602435166108d0565b341561032b57600080fd5b610263600160a060020a03600435166108fb565b60035474010000000000000000000000000000000000000000900460ff1681565b60408051908101604052600781527f535520436f696e00000000000000000000000000000000000000000000000000602082015281565b60008115806103c95750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b15156103d457600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b600160a060020a03808416600090815260026020908152604080832033851684528252808320549386168352600190915281205490919061048a908463ffffffff61095a16565b600160a060020a0380861660009081526001602052604080822093909355908716815220546104bf908463ffffffff61097016565b600160a060020a0386166000908152600160205260409020556104e8818463ffffffff61097016565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616916000805160206109838339815191529086905190815260200160405180910390a3506001949350505050565b601281565b60035460009033600160a060020a0390811691161461056757600080fd5b60035474010000000000000000000000000000000000000000900460ff161561058f57600080fd5b6000546105a2908363ffffffff61095a16565b6000908155600160a060020a0384168152600160205260409020546105cd908363ffffffff61095a16565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a03831660006000805160206109838339815191528460405190815260200160405180910390a350600192915050565b600160a060020a03331660009081526001602052604081205482111561067a57600080fd5b5033600160a060020a03811660009081526001602052604090205461069f9083610970565b600160a060020a038216600090815260016020526040812091909155546106cc908363ffffffff61097016565b600055600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a26000600160a060020a0382166000805160206109838339815191528460405190815260200160405180910390a35050565b600160a060020a031660009081526001602052604090205490565b60035460009033600160a060020a0390811691161461077657600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600354600160a060020a031681565b60408051908101604052600681527f5355436f696e0000000000000000000000000000000000000000000000000000602082015281565b600160a060020a03331660009081526001602052604081205461084c908363ffffffff61097016565b600160a060020a033381166000908152600160205260408082209390935590851681522054610881908363ffffffff61095a16565b600160a060020a0380851660008181526001602052604090819020939093559133909116906000805160206109838339815191529085905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a0390811691161461091657600080fd5b600160a060020a038116151561092b57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282018381101561096957fe5b9392505050565b60008282111561097c57fe5b509003905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820f1bc9d7a1bbf22c2ed7bb9e514ca5ab636cc1b1058ae8c519c45e2ccfba84efc0029"
}