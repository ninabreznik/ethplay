{
  "address": "0xfa9b1a80421dc6cb4dbe2ec7cbefbcc6aabf9809",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PEF",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-25\n*/\n\npragma solidity ^0.4.18;\n\n\ncontract owned {\n    address public owner;\n    address public ownerCandidate;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n\n    modifier onlyOwnerCandidate() {\n        assert(msg.sender == ownerCandidate);\n        _;\n    }\n\n    function transferOwnership(address candidate) external onlyOwner {\n        ownerCandidate = candidate;\n    }\n\n    function acceptOwnership() external onlyOwnerCandidate {\n        owner = ownerCandidate;\n        ownerCandidate = 0x0;\n    }\n}\n\n\n\ncontract SafeMath {\n    function safeMul(uint a, uint b) pure internal returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint a, uint b) pure internal returns (uint) {\n        uint c = a / b;\n        assert(b == 0);\n        return c;\n    }\n\n    function safeSub(uint a, uint b) pure internal returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint a, uint b) pure internal returns (uint) {\n        uint c = a + b;\n        assert(c >= a && c >= b);\n        return c;\n    }\n}\n\n\ncontract PEF is SafeMath, owned {\n\n    string public name = \"PEFToken\";        //  token name\n    string public symbol = \"PEF\";      //  token symbol\n    uint public decimals = 8;           //  token digit\n\n    mapping (address => uint) public balanceOf;\n    mapping (address => mapping (address => uint)) public allowance;\n\n    uint public totalSupply = 0;\n\n\n    // 团队地址\n    address private addressTeam = 0xa011fddeF6c8814eC1D0e1554688BCa03D80086d;\n\n    // 基金地址\n    address private addressFund = 0x253Efa56305E127E1c3861465cD112370Ab303e0;\n\n    // 推广钱包\n    address private addressPopular = 0x41Ef8D2A4C81Faa552aaDCE0C8A4835a0968C7ce;\n\n    // 私募钱包\n    address private addressVip = 0x2160D166f33FD3C0750f6b57325f16df993D9CBc;\n\n    //持仓总量\n    uint constant valueTotal = 10 * 10000 * 10000 * 10 ** 8;  //总量 10E\n    uint constant valueTeam = valueTotal / 100 * 20;   // 团队 20% 2E\n    uint constant valueFund = valueTotal / 100 * 30; //基金 30% 3E\n    uint constant valuePopular = valueTotal / 100 * 20; //平台新用户奖励及推广营销2E\n    uint constant valueSale = valueTotal / 100 * 20;  // ICO 20% 2E\n    uint constant valueVip = valueTotal / 100 * 10;   // 私募 10% 1E\n\n\n    // 是否停止销售\n    bool public saleStopped = false;\n\n    // 阶段\n    uint private constant BEFORE_SALE = 0;\n    uint private constant IN_SALE = 1;\n    uint private constant FINISHED = 2;\n\n    // ICO最小以太值\n    uint public minEth = 0.1 ether;\n\n    // ICO最大以太值\n    uint public maxEth = 1000 ether;\n\n    // 开始时间 2018-02-26 00:00:00\n    uint public openTime = 1519574400;\n    // 结束时间 2018-03-25 00:00:00\n    uint public closeTime = 1521907200;\n\n    // 价格\n    uint public price = 50000;\n\n    // 已卖出代币数量\n    uint public saleQuantity = 0;\n\n    // 收入的ETH数量\n    uint public ethQuantity = 0;\n\n    // 提现的代币数量\n    uint public withdrawQuantity = 0;\n\n\n    modifier validAddress(address _address) {\n        assert(0x0 != _address);\n        _;\n    }\n\n    modifier validEth {\n        assert(msg.value >= minEth && msg.value <= maxEth);\n        _;\n    }\n\n    modifier validPeriod {\n        assert(now >= openTime && now < closeTime);\n        _;\n    }\n\n    modifier validQuantity {\n        assert(valueSale >= saleQuantity);\n        _;\n    }\n\n    modifier validStatue {\n        assert(saleStopped == false);\n        _;\n    }\n\n    function setOpenTime(uint newOpenTime) public onlyOwner {\n        openTime = newOpenTime;\n    }\n\n    function setCloseTime(uint newCloseTime) public onlyOwner {\n        closeTime = newCloseTime;\n    }\n\n    function PEF()\n        public\n    {\n        owner = msg.sender;\n        totalSupply = valueTotal;\n\n        // ICO\n        balanceOf[this] = valueSale;\n        Transfer(0x0, this, valueSale);\n\n        // Simu\n        balanceOf[addressVip] = valueVip;\n        Transfer(0x0, addressVip, valueVip);\n\n        // Found\n        balanceOf[addressFund] = valueFund;\n        Transfer(0x0, addressFund, valueFund);\n\n        // valuePopular\n        balanceOf[addressPopular] = valuePopular;\n        Transfer(0x0, addressPopular, valuePopular);\n\n        // 团队\n        balanceOf[addressTeam] = valueTeam;\n        Transfer(0x0, addressTeam, valueTeam);\n    }\n\n    function transfer(address _to, uint _value)\n        public\n        validAddress(_to)\n        returns (bool success)\n    {\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(validTransfer(_value));\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferInner(address _to, uint _value)\n        private\n        returns (bool success)\n    {\n        balanceOf[this] -= _value;\n        balanceOf[_to] += _value;\n        Transfer(this, _to, _value);\n        return true;\n    }\n\n\n    function transferFrom(address _from, address _to, uint _value)\n        public\n        validAddress(_from)\n        validAddress(_to)\n        returns (bool success)\n    {\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(allowance[_from][msg.sender] >= _value);\n        require(validTransfer(_value));\n        balanceOf[_to] += _value;\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    //批量转账\n    function batchtransfer(address[] _to, uint256[] _amount) public returns(bool success) {\n        for(uint i = 0; i < _to.length; i++){\n            require(transfer(_to[i], _amount[i]));\n        }\n        return true;\n    }\n\n    function approve(address _spender, uint _value)\n        public\n        validAddress(_spender)\n        returns (bool success)\n    {\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function validTransfer(uint _value)\n        pure private\n        returns (bool)\n    {\n        if (_value == 0)\n            return false;\n\n        return true;\n    }\n\n    function ()\n        public\n        payable\n    {\n        buy();\n    }\n\n    function buy()\n        public\n        payable\n        validEth        // 以太是否在允许范围\n        validPeriod     // 是否在ICO期间\n        validQuantity   // 代币是否已卖完\n        validStatue     // 售卖是否已经主动结束\n    {\n        uint eth = msg.value;\n\n        // 计算代币数量\n        uint quantity = eth * price / 10 ** 10;\n\n        // 是否超出剩余代币\n        uint leftQuantity = safeSub(valueSale, saleQuantity);\n        if (quantity > leftQuantity) {\n            quantity = leftQuantity;\n        }\n\n        saleQuantity = safeAdd(saleQuantity, quantity);\n        ethQuantity = safeAdd(ethQuantity, eth);\n\n        // 发送代币\n        require(transferInner(msg.sender, quantity));\n\n        // 生成日志\n        Buy(msg.sender, eth, quantity);\n\n    }\n\n    function stopSale()\n        public\n        onlyOwner\n        returns (bool)\n    {\n        assert(!saleStopped);\n        saleStopped = true;\n        StopSale();\n        return true;\n    }\n\n    function getPeriod()\n        public\n        constant\n        returns (uint)\n    {\n        if (saleStopped) {\n            return FINISHED;\n        }\n\n        if (now < openTime) {\n            return BEFORE_SALE;\n        }\n\n        if (valueSale == saleQuantity) {\n            return FINISHED;\n        }\n\n        if (now >= openTime && now < closeTime) {\n            return IN_SALE;\n        }\n\n        return FINISHED;\n    }\n\n    //从合约提Eth\n    function withdraw(uint amount)\n        public\n        onlyOwner\n    {\n        uint period = getPeriod();\n        require(period == FINISHED);\n\n        require(this.balance >= amount);\n        msg.sender.transfer(amount);\n    }\n\n    // 从合约提token 一定要公募结束才可以提\n    function withdrawToken(uint amount)\n        public\n        onlyOwner\n    {\n        uint period = getPeriod();\n        require(period == FINISHED);\n\n        withdrawQuantity += safeAdd(withdrawQuantity, amount);\n        require(transferInner(msg.sender, amount));\n    }\n\n\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n    event Buy(address indexed sender, uint eth, uint token);\n    event StopSale();\n}",
  "bytecode": "60606040526040805190810160405280600881526020017f504546546f6b656e0000000000000000000000000000000000000000000000008152506002908051906020019062000051929190620007dc565b506040805190810160405280600381526020017f5045460000000000000000000000000000000000000000000000000000000000815250600390805190602001906200009f929190620007dc565b506008600455600060075573a011fddef6c8814ec1d0e1554688bca03d80086d600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073253efa56305e127e1c3861465cd112370ab303e0600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507341ef8d2a4c81faa552aadce0c8a4835a0968c7ce600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550732160d166f33fd3c0750f6b57325f16df993d9cbc600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600b60146101000a81548160ff02191690831515021790555067016345785d8a0000600c55683635c9adc5dea00000600d55635a92dd80600e55635ab67600600f5561c35060105560006011556000601255600060135534156200026357600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555067016345785d8a00006007819055506014606467016345785d8a00008115156200030957fe5b0402600560003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6014606467016345785d8a00008115156200039f57fe5b04026040518082815260200191505060405180910390a3600a606467016345785d8a0000811515620003cd57fe5b040260056000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600a606467016345785d8a0000811515620004a757fe5b04026040518082815260200191505060405180910390a3601e606467016345785d8a0000811515620004d557fe5b040260056000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef601e606467016345785d8a0000811515620005af57fe5b04026040518082815260200191505060405180910390a36014606467016345785d8a0000811515620005dd57fe5b040260056000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6014606467016345785d8a0000811515620006b757fe5b04026040518082815260200191505060405180910390a36014606467016345785d8a0000811515620006e557fe5b040260056000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6014606467016345785d8a0000811515620007bf57fe5b04026040518082815260200191505060405180910390a36200088b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200081f57805160ff191683800117855562000850565b8280016001018555821562000850579182015b828111156200084f57825182559160200191906001019062000832565b5b5090506200085f919062000863565b5090565b6200088891905b80821115620008845760008160009055506001016200086a565b5090565b90565b611ab2806200089b6000396000f300606060405260043610610180576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461018a578063095ea7b31461021857806318160ddd146102725780631ed241951461029b57806323b872dd146102c45780632e1a7d4d1461033d578063313ce567146103605780633be3a3f514610389578063456c8cac146103ac57806350baa622146103d957806354fc85ac146103fc5780635f504a8214610425578063619cf5f91461047a578063627749e61461052c57806370a082311461055557806374eb936b146105a257806379ba5097146105cb5780638da5cb5b146105e057806395d89b4114610635578063a035b1fe146106c3578063a6f2ae3a146106ec578063a9059cbb146106f6578063b425688814610750578063dd62ed3e14610779578063de1eb2d0146107e5578063e336e01d1461080e578063e36b0b3714610837578063f1fb3ace14610864578063f2fde38b1461088d578063f60ba338146108c6575b6101886108e9565b005b341561019557600080fd5b61019d610a48565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101dd5780820151818401526020810190506101c2565b50505050905090810190601f16801561020a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561022357600080fd5b610258600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ae6565b604051808215151515815260200191505060405180910390f35b341561027d57600080fd5b610285610c93565b6040518082815260200191505060405180910390f35b34156102a657600080fd5b6102ae610c99565b6040518082815260200191505060405180910390f35b34156102cf57600080fd5b610323600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d1f565b604051808215151515815260200191505060405180910390f35b341561034857600080fd5b61035e600480803590602001909190505061107b565b005b341561036b57600080fd5b610373611158565b6040518082815260200191505060405180910390f35b341561039457600080fd5b6103aa600480803590602001909190505061115e565b005b34156103b757600080fd5b6103bf6111c0565b604051808215151515815260200191505060405180910390f35b34156103e457600080fd5b6103fa60048080359060200190919050506111d3565b005b341561040757600080fd5b61040f61127a565b6040518082815260200191505060405180910390f35b341561043057600080fd5b610438611280565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561048557600080fd5b610512600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506112a6565b604051808215151515815260200191505060405180910390f35b341561053757600080fd5b61053f611312565b6040518082815260200191505060405180910390f35b341561056057600080fd5b61058c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611318565b6040518082815260200191505060405180910390f35b34156105ad57600080fd5b6105b5611330565b6040518082815260200191505060405180910390f35b34156105d657600080fd5b6105de611336565b005b34156105eb57600080fd5b6105f3611435565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561064057600080fd5b61064861145a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561068857808201518184015260208101905061066d565b50505050905090810190601f1680156106b55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156106ce57600080fd5b6106d66114f8565b6040518082815260200191505060405180910390f35b6106f46108e9565b005b341561070157600080fd5b610736600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506114fe565b604051808215151515815260200191505060405180910390f35b341561075b57600080fd5b61076361171f565b6040518082815260200191505060405180910390f35b341561078457600080fd5b6107cf600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611725565b6040518082815260200191505060405180910390f35b34156107f057600080fd5b6107f861174a565b6040518082815260200191505060405180910390f35b341561081957600080fd5b610821611750565b6040518082815260200191505060405180910390f35b341561084257600080fd5b61084a611756565b604051808215151515815260200191505060405180910390f35b341561086f57600080fd5b610877611817565b6040518082815260200191505060405180910390f35b341561089857600080fd5b6108c4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061181d565b005b34156108d157600080fd5b6108e760048080359060200190919050506118b9565b005b6000806000600c5434101580156109025750600d543411155b151561090a57fe5b600e54421015801561091d5750600f5442105b151561092557fe5b6011546014606467016345785d8a000081151561093e57fe5b04021015151561094a57fe5b60001515600b60149054906101000a900460ff16151514151561096957fe5b3492506402540be400601054840281151561098057fe5b0491506109a66014606467016345785d8a000081151561099c57fe5b040260115461191b565b9050808211156109b4578091505b6109c060115483611934565b6011819055506109d260125484611934565b6012819055506109e2338361195e565b15156109ed57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167f1cbc5ab135991bd2b6a4b034a04aa2aa086dac1371cb9b16b8b5e2ed6b036bed8484604051808381526020018281526020019250505060405180910390a2505050565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ade5780601f10610ab357610100808354040283529160200191610ade565b820191906000526020600020905b815481529060010190602001808311610ac157829003601f168201915b505050505081565b6000828073ffffffffffffffffffffffffffffffffffffffff16600014151515610b0c57fe5b6000831480610b9757506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515610ba257600080fd5b82600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505092915050565b60075481565b6000600b60149054906101000a900460ff1615610cb95760029050610d1c565b600e54421015610ccc5760009050610d1c565b6011546014606467016345785d8a0000811515610ce557fe5b04021415610cf65760029050610d1c565b600e544210158015610d095750600f5442105b15610d175760019050610d1c565b600290505b90565b6000838073ffffffffffffffffffffffffffffffffffffffff16600014151515610d4557fe5b838073ffffffffffffffffffffffffffffffffffffffff16600014151515610d6957fe5b83600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610db757600080fd5b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110151515610e4657600080fd5b83600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610ed157600080fd5b610eda84611a69565b1515610ee557600080fd5b83600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555083600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555083600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a36001925050509392505050565b60003373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156110d557fe5b6110dd610c99565b90506002811415156110ee57600080fd5b813073ffffffffffffffffffffffffffffffffffffffff16311015151561111457600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050151561115457600080fd5b5050565b60045481565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156111b657fe5b80600f8190555050565b600b60149054906101000a900460ff1681565b60003373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561122d57fe5b611235610c99565b905060028114151561124657600080fd5b61125260135483611934565b60136000828254019250508190555061126b338361195e565b151561127657600080fd5b5050565b600d5481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600090505b8351811015611307576112ef84828151811015156112c857fe5b9060200190602002015184838151811015156112e057fe5b906020019060200201516114fe565b15156112fa57600080fd5b80806001019150506112ae565b600191505092915050565b600f5481565b60056020528060005260406000206000915090505481565b60125481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561138f57fe5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114f05780601f106114c5576101008083540402835291602001916114f0565b820191906000526020600020905b8154815290600101906020018083116114d357829003601f168201915b505050505081565b60105481565b6000828073ffffffffffffffffffffffffffffffffffffffff1660001415151561152457fe5b82600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561157257600080fd5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015151561160157600080fd5b61160a83611a69565b151561161557600080fd5b82600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b600e5481565b6006602052816000526040600020602052806000526040600020600091509150505481565b60135481565b60115481565b60003373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156117b057fe5b600b60149054906101000a900460ff161515156117c957fe5b6001600b60146101000a81548160ff0219169083151502179055507f7944875bc330dfe56647ffb581e05b83c164c16fdef772625f6dfa284872921060405160405180910390a16001905090565b600c5481565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561187557fe5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561191157fe5b80600e8190555050565b600082821115151561192957fe5b818303905092915050565b600080828401905083811015801561194c5750828110155b151561195457fe5b8091505092915050565b600081600560003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600080821415611a7c5760009050611a81565b600190505b9190505600a165627a7a72305820b7de46461d7dbddb5e4196c16e75c37865978f3ec3aa63765e1ed7a634fbb0980029"
}