{
  "address": "0x93c97cf022ded4fb437c5c15bdb8ad5fce1eceb3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AllPointPay",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-07\n*/\n\npragma solidity ^0.4.18;\n\ninterface ERC20 {\n    function transferFrom(address _from, address _to, uint _value) external returns (bool);\n    function approve(address _spender, uint _value) external returns (bool);\n    function allowance(address _owner, address _spender) external constant returns (uint);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ninterface ERC223 {\n    function transfer(address _to, uint _value, bytes _data) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n}\n\ncontract ERC223ReceivingContract {\n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\ncontract Token {\n    string internal _symbol;\n    string internal _name;\n    uint8 internal _decimals;\n    uint internal _totalSupply = 100000000000000000;\n    mapping (address => uint) internal _balanceOf;\n    mapping (address => mapping (address => uint)) internal _allowances;\n    \n    constructor(string symbol, string name, uint8 decimals, uint totalSupply) public {\n        _symbol = symbol;\n        _name = name;\n        _decimals = decimals;\n        _totalSupply = totalSupply;\n    }\n    \n    function name() public constant returns (string) {\n        return _name;\n    }\n    \n    function symbol() public constant returns (string) {\n        return _symbol;\n    }\n    \n    function decimals() public constant returns (uint8) {\n        return _decimals;\n    }\n    \n    function totalSupply() public constant returns (uint) {\n        return _totalSupply;\n    }\n    \n    function balanceOf(address _addr) public constant returns (uint);\n    function transfer(address _to, uint _value) public returns (bool);\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract AllPointPay is Token(\"APP\", \"AllPointPay\", 8, 100000000000000000), ERC20, ERC223 {\n    using SafeMath for uint;\n\n    constructor() public {\n        _balanceOf[msg.sender] = _totalSupply;\n    }\n    \n    function totalSupply() public constant returns (uint) {\n        return _totalSupply;\n    }\n    \n    function balanceOf(address _addr) public constant returns (uint) {\n        return _balanceOf[_addr];\n    }\n\n    function transfer(address _to, uint _value) public returns (bool) {\n        if (_value > 0 && \n            _value <= _balanceOf[msg.sender] &&\n            !isContract(_to)) {\n            _balanceOf[msg.sender] -= _value;\n            _balanceOf[_to] += _value;\n            emit Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        return false;\n    }\n\n    function transfer(address _to, uint _value, bytes _data) external returns (bool) {\n        if (_value > 0 && \n            _value <= _balanceOf[msg.sender] &&\n            isContract(_to)) {\n            _balanceOf[msg.sender] -= _value;\n            _balanceOf[_to] += _value;\n            ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\n                _contract.tokenFallback(msg.sender, _value, _data);\n            emit Transfer(msg.sender, _to, _value, _data);\n            return true;\n        }\n        return false;\n    }\n\n    function isContract(address _addr) public view returns (bool) {\n        uint codeSize;\n        assembly {\n            codeSize := extcodesize(_addr)\n        }\n        return codeSize > 0;\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n        if (_allowances[_from][msg.sender] > 0 &&\n            _value > 0 &&\n            _allowances[_from][msg.sender] >= _value &&\n            _balanceOf[_from] >= _value) {\n            _balanceOf[_from] -= _value;\n            _balanceOf[_to] += _value;\n            _allowances[_from][msg.sender] -= _value;\n            emit Transfer(_from, _to, _value);\n            return true;\n        }\n        return false;\n    }\n    \n    function approve(address _spender, uint _value) public returns (bool) {\n        _allowances[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) public constant returns (uint) {\n        return _allowances[_owner][_spender];\n    }\n}",
  "bytecode": "608060405267016345785d8a000060035534801561001c57600080fd5b50604080518082018252600381527f415050000000000000000000000000000000000000000000000000000000000060208083019182528351808501909452600b84527f416c6c506f696e7450617900000000000000000000000000000000000000000090840152815191929160089167016345785d8a0000916100a2916000916100e9565b5082516100b69060019060208601906100e9565b506002805460ff191660ff9390931692909217909155600381905533600090815260046020526040902055506101849050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012a57805160ff1916838001178555610157565b82800160010185558215610157579182015b8281111561015757825182559160200191906001019061013c565b50610163929150610167565b5090565b61018191905b80821115610163576000815560010161016d565b90565b6107e9806101936000396000f3006080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100b3578063095ea7b31461013d578063162790551461017557806318160ddd1461019657806323b872dd146101bd578063313ce567146101e757806370a082311461021257806395d89b4114610233578063a9059cbb14610248578063be45fd621461026c578063dd62ed3e1461029d575b600080fd5b3480156100bf57600080fd5b506100c86102c4565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101025781810151838201526020016100ea565b50505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014957600080fd5b50610161600160a060020a0360043516602435610359565b604080519115158252519081900360200190f35b34801561018157600080fd5b50610161600160a060020a03600435166103c0565b3480156101a257600080fd5b506101ab6103c8565b60408051918252519081900360200190f35b3480156101c957600080fd5b50610161600160a060020a03600435811690602435166044356103ce565b3480156101f357600080fd5b506101fc6104eb565b6040805160ff9092168252519081900360200190f35b34801561021e57600080fd5b506101ab600160a060020a03600435166104f4565b34801561023f57600080fd5b506100c861050f565b34801561025457600080fd5b50610161600160a060020a0360043516602435610570565b34801561027857600080fd5b5061016160048035600160a060020a031690602480359160443591820191013561061d565b3480156102a957600080fd5b506101ab600160a060020a0360043581169060243516610792565b60018054604080516020601f6002600019610100878916150201909516949094049384018190048102820181019092528281526060939092909183018282801561034f5780601f106103245761010080835404028352916020019161034f565b820191906000526020600020905b81548152906001019060200180831161033257829003601f168201915b5050505050905090565b336000818152600560209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b6000903b1190565b60035490565b600160a060020a0383166000908152600560209081526040808320338452909152812054811080156104005750600082115b801561042f5750600160a060020a03841660009081526005602090815260408083203384529091529020548211155b80156104535750600160a060020a0384166000908152600460205260409020548211155b156104e057600160a060020a0380851660008181526004602090815260408083208054889003905593871680835284832080548801905583835260058252848320338452825291849020805487900390558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060016104e4565b5060005b9392505050565b60025460ff1690565b600160a060020a031660009081526004602052604090205490565b60008054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561034f5780601f106103245761010080835404028352916020019161034f565b600080821180156105905750336000908152600460205260409020548211155b80156105a257506105a0836103c0565b155b156106145733600081815260046020908152604080832080548790039055600160a060020a03871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060016103ba565b50600092915050565b60008060008511801561063f5750336000908152600460205260409020548511155b801561064f575061064f866103c0565b15610784575033600081815260046020819052604080832080548990039055600160a060020a03891680845292819020805489019055517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081529081018381526024820188905260606044830190815260648301879052899463c0ee0b8a9390928a928a928a929190608401848480828437820191505095505050505050600060405180830381600087803b15801561070757600080fd5b505af115801561071b573d6000803e3d6000fd5b50505050838360405180838380828437604080519190930181900381208b82529251929550600160a060020a038c1694503393507fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1692908190036020019150a460019150610789565b600091505b50949350505050565b600160a060020a039182166000908152600560209081526040808320939094168252919091522054905600a165627a7a72305820868fc17ce1ce037edd8fe4130cd12470a77de980e60a20408771f7f8de41491f0029"
}