{
  "address": "0x2bb362a97f2bbb87af4cfe4faa6e3f049a5e364f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DoctorChainToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-21\n*/\n\npragma solidity ^0.4.20;\n\n//*************** SafeMath ***************\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\n      uint256 c = a * b;\n      assert(a == 0 || c / a == b);\n      return c;\n  }\n  function div(uint256 a, uint256 b) internal pure  returns (uint256) {\n      assert(b > 0);\n      uint256 c = a / b;\n      return c;\n  }\n  function sub(uint256 a, uint256 b) internal pure  returns (uint256) {\n      assert(b <= a);\n      return a - b;\n  }\n  function add(uint256 a, uint256 b) internal pure  returns (uint256) {\n      uint256 c = a + b;\n      assert(c >= a);\n      return c;\n  }\n}\n\n//*************** Ownable ***************\n\ncontract Ownable {\n  address public owner;\n\n  function Ownable() public {\n      owner = msg.sender;\n  }\n  modifier onlyOwner() {\n      require(msg.sender == owner);\n      _;\n  }\n  function transferOwnership(address newOwner)public onlyOwner {\n      if (newOwner != address(0)) {\n        owner = newOwner;\n      }\n  }\n}\n\n//************* ERC20 ***************\n\ncontract ERC20 {\n  function balanceOf(address who)public constant returns (uint256);\n  function transfer(address to, uint256 value)public returns (bool);\n  function transferFrom(address from, address to, uint256 value)public returns (bool);\n  function allowance(address owner, address spender)public constant returns (uint256);\n  function approve(address spender, uint256 value)public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n//************* DoctorChain Token *************\n\ncontract DoctorChainToken is ERC20,Ownable {\n\tusing SafeMath for uint256;\n\n\t// Token Info.\n\tstring public name;\n\tstring public symbol;\n\tuint256 public totalSupply;\n\tuint256 public constant decimals = 18;\n\taddress[] private walletArr;\n\tuint walletIdx = 0;\n\tmapping (address => uint256) public balanceOf;\n\tmapping (address => mapping (address => uint256)) allowed;\n\tevent FundTransfer(address fundWallet, uint256 amount);\n\tfunction DoctorChainToken( ) public {\n\t\tname=\"DoctorChain\";\n\t\tsymbol=\"DCH\";\n\t\ttotalSupply = 1000000000*(10**decimals);\n\t\tbalanceOf[msg.sender] = totalSupply;\n\t\twalletArr.push(0x5Db3F5FD3081Eb6ADdc873ac79B6A7139422d168);\n\t}\n\tfunction balanceOf(address _who)public constant returns (uint256 balance) {\n\t    return balanceOf[_who];\n\t}\n\tfunction _transferFrom(address _from, address _to, uint256 _value)  internal {\n\t    require(_to != 0x0);\n\t    require(balanceOf[_from] >= _value);\n\t    require(balanceOf[_to] + _value >= balanceOf[_to]);\n\t    uint256 previousBalances = balanceOf[_from] + balanceOf[_to];\n\t    balanceOf[_from] = balanceOf[_from].sub(_value);\n\t    balanceOf[_to] = balanceOf[_to].add(_value);\n\t    emit Transfer(_from, _to, _value);\n\t    assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\t}\n\tfunction transfer(address _to, uint256 _value) public returns (bool){\n\t    _transferFrom(msg.sender,_to,_value);\n\t    return true;\n\t}\n\tfunction ()public payable {\n\t    _tokenPurchase( msg.value);\n\t}\n\tfunction _tokenPurchase( uint256 _value) internal {\n\t    require(_value >= 0.1 ether);\n\t    address wallet = walletArr[walletIdx];\n\t    walletIdx = (walletIdx+1) % walletArr.length;\n\t    wallet.transfer(msg.value);\n\t    emit FundTransfer(wallet, msg.value);\n\t}\n\tfunction supply()  internal constant  returns (uint256) {\n\t    return balanceOf[owner];\n\t}\n\tfunction allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n\t    return allowed[_owner][_spender];\n\t}\n\tfunction approve(address _spender, uint256 _value)public returns (bool) {\n\t    allowed[msg.sender][_spender] = _value;\n\t    emit Approval(msg.sender, _spender, _value);\n\t    return true;\n\t}\n\tfunction transferFrom(address _from, address _to, uint256 _value)public returns (bool) {\n\t    require(_value > 0);\n\t    require (allowed[_from][msg.sender] >= _value);\n\t    require(_to != 0x0);\n\t    require(balanceOf[_from] >= _value);\n\t    require(balanceOf[_to] + _value >= balanceOf[_to]);\n\t    balanceOf[_from] = balanceOf[_from].sub(_value);\n\t    balanceOf[_to] = balanceOf[_to].add(_value);\n\t    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\t    emit Transfer(_from, _to, _value);\n\t    return true;\n\t  }\n}",
  "bytecode": "608060405260006005553480156200001657600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600b81526020017f446f63746f72436861696e00000000000000000000000000000000000000000081525060019080519060200190620000a4929190620001ca565b506040805190810160405280600381526020017f444348000000000000000000000000000000000000000000000000000000000081525060029080519060200190620000f2929190620001ca565b506012600a0a633b9aca0002600381905550600354600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506004735db3f5fd3081eb6addc873ac79b6a7139422d16890806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000279565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020d57805160ff19168380011785556200023e565b828001600101855582156200023e579182015b828111156200023d57825182559160200191906001019062000220565b5b5090506200024d919062000251565b5090565b6200027691905b808211156200027257600081600090555060010162000258565b5090565b90565b61127b80620002896000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100ba578063095ea7b31461014a57806318160ddd146101af57806323b872dd146101da578063313ce5671461025f57806370a082311461028a5780638da5cb5b146102e157806395d89b4114610338578063a9059cbb146103c8578063dd62ed3e1461042d578063f2fde38b146104a4575b6100b8346104e7565b005b3480156100c657600080fd5b506100cf610610565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561010f5780820151818401526020810190506100f4565b50505050905090810190601f16801561013c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015657600080fd5b50610195600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106ae565b604051808215151515815260200191505060405180910390f35b3480156101bb57600080fd5b506101c46107a0565b6040518082815260200191505060405180910390f35b3480156101e657600080fd5b50610245600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107a6565b604051808215151515815260200191505060405180910390f35b34801561026b57600080fd5b50610274610bed565b6040518082815260200191505060405180910390f35b34801561029657600080fd5b506102cb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bf2565b6040518082815260200191505060405180910390f35b3480156102ed57600080fd5b506102f6610c3b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561034457600080fd5b5061034d610c60565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561038d578082015181840152602081019050610372565b50505050905090810190601f1680156103ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103d457600080fd5b50610413600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cfe565b604051808215151515815260200191505060405180910390f35b34801561043957600080fd5b5061048e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d15565b6040518082815260200191505060405180910390f35b3480156104b057600080fd5b506104e5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d9c565b005b600067016345785d8a0000821015151561050057600080fd5b600460055481548110151561051157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060048054905060016005540181151561055357fe5b066005819055508073ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156105a0573d6000803e3d6000fd5b507f97c35397cb6acebd9df368c206404479fc4c80dd6034d1b28943aaf5826318708134604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106a65780601f1061067b576101008083540402835291602001916106a6565b820191906000526020600020905b81548152906001019060200180831161068957829003601f168201915b505050505081565b600081600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60035481565b600080821115156107b657600080fd5b81600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561084157600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff161415151561086757600080fd5b81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156108b557600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015151561094457600080fd5b61099682600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e7190919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a2b82600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e8a90919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610afd82600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e7190919063ffffffff16565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cf65780601f10610ccb57610100808354040283529160200191610cf6565b820191906000526020600020905b815481529060010190602001808311610cd957829003601f168201915b505050505081565b6000610d0b338484610ea8565b6001905092915050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610df757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610e6e57806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000828211151515610e7f57fe5b818303905092915050565b6000808284019050838110151515610e9e57fe5b8091505092915050565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515610ecf57600080fd5b81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610f1d57600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110151515610fac57600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905061108182600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e7190919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061111682600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e8a90919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a380600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540114151561124957fe5b505050505600a165627a7a723058203059f6ff496f07ff54f14e0e97c7b661de64a87a07ee2194725595d73992b7790029"
}