{
  "address": "0xee90e0a3accca4e8f7adc032d220268b6611083d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "XetherToken",
  "compilerVersion": "v0.5.5+commit.47a71e8f",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-06\n*/\n\npragma solidity 0.5.5;\n\n// * xether.io - is a gambling ecosystem, which makes a difference by caring about its users.\n// Itâ€™s our passion for perfection, as well as finding and creating neat solutions,\n// that keeps us driven towards our goals.\n//\n// * Uses hybrid commit-reveal + block hash random number generation that is immune\n//   to tampering by players, house and miners. Apart from being fully transparent,\n//   this also allows arbitrarily high bets.\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed{\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n\n  constructor (string memory name, string memory symbol, uint8 decimals) public {\n      _name = name;\n      _symbol = symbol;\n      _decimals = decimals;\n  }\n\n  /**\n   * @return the name of the token.\n   */\n  function name() public view returns (string memory) {\n      return _name;\n  }\n\n  /**\n   * @return the symbol of the token.\n   */\n  function symbol() public view returns (string memory) {\n      return _symbol;\n  }\n\n  /**\n   * @return the number of decimals of the token.\n   */\n  function decimals() public view returns (uint8) {\n      return _decimals;\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n  mapping (address => mapping (address => uint256)) private _allowed;\n  uint256 private _totalSupply;\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Total number of tokens in existence\n   */\n  function totalSupply() public view returns (uint256) {\n      return _totalSupply;\n  }\n\n  /**\n   * @dev Gets the balance of the specified address.\n   * @param owner The address to query the balance of.\n   * @return A uint256 representing the amount owned by the passed address.\n   */\n  function balanceOf(address owner) public view returns (uint256) {\n      return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address owner, address spender) public view returns (uint256) {\n      return _allowed[owner][spender];\n  }\n\n  /**\n   * @dev Transfer token to a specified address\n   * @param to The address to transfer to.\n   * @param value The amount to be transferred.\n   */\n  function transfer(address to, uint256 value) public returns (bool) {\n      _transfer(msg.sender, to, value);\n      return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n      _approve(msg.sender, spender, value);\n      return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another.\n   * Note that while this function emits an Approval event, this is not required as per the specification,\n   * and other compliant implementations may not emit the event.\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\n      _transfer(from, to, value);\n      _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n      return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * Emits an Approval event.\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n      _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n      return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * Emits an Approval event.\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n      _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n      return true;\n  }\n\n  /**\n   * @dev Transfer token for a specified addresses\n   * @param from The address to transfer from.\n   * @param to The address to transfer to.\n   * @param value The amount to be transferred.\n   */\n  function _transfer(address from, address to, uint256 value) internal {\n      require(to != address(0));\n\n      _balances[from] = _balances[from].sub(value);\n      _balances[to] = _balances[to].add(value);\n      emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n      require(account != address(0));\n\n      _totalSupply = _totalSupply.add(value);\n      _balances[account] = _balances[account].add(value);\n      emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n      require(account != address(0));\n\n      _totalSupply = _totalSupply.sub(value);\n      _balances[account] = _balances[account].sub(value);\n      emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Approve an address to spend another addresses' tokens.\n   * @param owner The address that owns the tokens.\n   * @param spender The address that will spend the tokens.\n   * @param value The number of tokens that can be spent.\n   */\n  function _approve(address owner, address spender, uint256 value) internal {\n      require(spender != address(0));\n      require(owner != address(0));\n\n      _allowed[owner][spender] = value;\n      emit Approval(owner, spender, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * Emits an Approval event (reflecting the reduced allowance).\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n      _burn(account, value);\n      _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n  }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param value The amount of token to be burned.\n   */\n  function burn(uint256 value) public {\n    _burn(msg.sender, value);\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param from address The address which you want to send tokens from\n   * @param value uint256 The amount of token to be burned\n   */\n  function burnFrom(address from, uint256 value) public {\n    _burnFrom(from, value);\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\nlibrary Percent {\n  // Solidity automatically throws when dividing by 0\n  struct percent {\n    uint num;\n    uint den;\n  }\n\n  // storage\n  function mul(percent storage p, uint a) internal view returns (uint) {\n    if (a == 0) {\n      return 0;\n    }\n    return a*p.num/p.den;\n  }\n\n  function div(percent storage p, uint a) internal view returns (uint) {\n    return a/p.num*p.den;\n  }\n\n  function sub(percent storage p, uint a) internal view returns (uint) {\n    uint b = mul(p, a);\n    if (b >= a) {\n      return 0;\n    }\n    return a - b;\n  }\n\n  function add(percent storage p, uint a) internal view returns (uint) {\n    return a + mul(p, a);\n  }\n\n  function toMemory(percent storage p) internal view returns (Percent.percent memory) {\n    return Percent.percent(p.num, p.den);\n  }\n\n  // memory\n  function mmul(percent memory p, uint a) internal pure returns (uint) {\n    if (a == 0) {\n      return 0;\n    }\n    return a*p.num/p.den;\n  }\n\n  function mdiv(percent memory p, uint a) internal pure returns (uint) {\n    return a/p.num*p.den;\n  }\n\n  function msub(percent memory p, uint a) internal pure returns (uint) {\n    uint b = mmul(p, a);\n    if (b >= a) {\n      return 0;\n    }\n    return a - b;\n  }\n\n  function madd(percent memory p, uint a) internal pure returns (uint) {\n    return a + mmul(p, a);\n  }\n}\n\n/**\n* @title XetherToken is a basic ERC20 Token\n*/\ncontract XetherToken is ERC20Detailed(\"XetherEcosystemToken\", \"XEET\", 18), ERC20Burnable, Ownable {\n  /**\n  * Modifiers\n  */\n  modifier onlyParticipant {\n    require(showMyTokens() > 0);\n    _;\n  }\n\n  modifier hasDividends {\n    require(showMyDividends(true) > 0);\n    _;\n  }\n\n  /**\n  * Events\n  */\n  event onTokenBuy(\n    address indexed customerAddress,\n    uint256 incomeEth,\n    uint256 tokensCreated,\n    address indexed ref,\n    uint timestamp,\n    uint256 startPrice,\n    uint256 newPrice\n  );\n\n  event onTokenSell(\n    address indexed customerAddress,\n    uint256 tokensBurned,\n    uint256 earnedEth,\n    uint timestamp,\n    uint256 startPrice,\n    uint256 newPrice\n  );\n\n  event onReinvestment(\n    address indexed customerAddress,\n    uint256 reinvestEth,\n    uint256 tokensCreated\n  );\n\n  event onWithdraw(\n    address indexed customerAddress,\n    uint256 withdrawEth\n  );\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 tokens\n  );\n\n  using Percent for Percent.percent;\n  using SafeMath for *;\n\n  /**\n  * @dev percents\n  */\n  Percent.percent private inBonus_p  = Percent.percent(10, 100);           //   10/100  *100% = 10%\n  Percent.percent private outBonus_p  = Percent.percent(4, 100);           //   4/100  *100% = 4%\n  Percent.percent private refBonus_p = Percent.percent(30, 100);           //   30/100  *100% = 30%\n  Percent.percent private transferBonus_p = Percent.percent(1, 100);       //   1/100  *100% = 1%\n\n  /**\n  * @dev initial variables\n  */\n  address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n  address public marketingAddress = DUMMY_ADDRESS;\n  uint256 constant internal tokenPriceInitial = 0.00005 ether;\n  uint256 constant internal tokenPriceIncremental = 0.0000000001 ether;\n  uint256 internal profitPerToken = 0;\n  uint256 internal decimalShift = 1e18;\n  uint256 internal currentTotalDividends = 0;\n\n  mapping(address => int256) internal payoutsTo;\n  mapping(address => uint256) internal refBalance;\n  mapping(address => address) internal referrals;\n\n  uint256 public actualTokenPrice = tokenPriceInitial;\n  uint256 public refMinBalanceReq = 50e18;\n\n  /**\n  * @dev Event to notify if transfer successful or failed\n  * after account approval verified\n  */\n  event TransferSuccessful(address indexed from_, address indexed to_, uint256 amount_);\n  event TransferFailed(address indexed from_, address indexed to_, uint256 amount_);\n  \n  /**\n  * @dev fallback function, buy tokens\n  */\n  function() payable external {\n    buyTokens(msg.sender, msg.value, referrals[msg.sender]);\n  }\n\n  /**\n  * Public\n  */\n  function setMarketingAddress(address newMarketingAddress) external onlyOwner {\n    marketingAddress = newMarketingAddress;\n  }\n\n  function ecosystemDividends() payable external {\n    uint dividends = msg.value;\n    uint256 toMarketingAmount = inBonus_p.mul(dividends);\n    uint256 toShareAmount = SafeMath.sub(dividends, toMarketingAmount);\n\n    buyTokens(marketingAddress, toMarketingAmount, address(0));\n    profitPerToken = profitPerToken.add(toShareAmount.mul(decimalShift).div(totalSupply()));\n  }\n\n  /**\n  * @dev main function to get/buy tokens\n  * @param _ref address of referal\n  */\n  function buy(address _ref) public payable returns (uint256) {\n    referrals[msg.sender] = _ref;\n    buyTokens(msg.sender, msg.value, _ref);\n  }\n\n  /**\n  * @dev main function to get/buy tokens\n  * @param _inRawTokens address of referal\n  */\n  function sell(uint256 _inRawTokens) onlyParticipant public {\n    sellTokens(_inRawTokens);\n  }\n\n  /**\n  * @dev function to withdraw balance\n  */\n  function withdraw() hasDividends public {\n    address payable _customerAddress = msg.sender;\n    uint256 _dividends = showMyDividends(false);\n\n    payoutsTo[_customerAddress] += (int256) (_dividends);\n    _dividends = _dividends.add(refBalance[_customerAddress]);\n    refBalance[_customerAddress] = 0;\n\n    _customerAddress.transfer(_dividends);\n\n    emit onWithdraw(_customerAddress, _dividends);\n  }\n\n  function transfer(address to, uint256 value) public returns (bool) {\n    address _customerAddress = msg.sender;\n    require(value <= balanceOf(_customerAddress));\n    require(to != address(0));\n\n    if (showMyDividends(true) > 0) {\n      withdraw();\n    }\n\n    uint256 _tokenFee = transferBonus_p.mul(value);\n    uint256 _taxedTokens = value.sub(_tokenFee);\n    uint256 _dividends = 0;\n    _dividends = tokensToEth(_tokenFee);\n\n    _transfer(msg.sender, to, _taxedTokens);\n\n    payoutsTo[_customerAddress] -= (int256) (profitPerToken.mul(value));\n    payoutsTo[to] += (int256) (profitPerToken.mul(_taxedTokens));\n    profitPerToken = profitPerToken.add(_dividends.div(totalSupply()));\n\n    emit TransferSuccessful(_customerAddress, to, value);\n\n    return true;\n  }\n\n  function transferFrom(address from, address to, uint256 value)\n    public\n    returns (bool)\n  {\n    uint256 _tokenFee = transferBonus_p.mul(value);\n    uint256 _taxedTokens = value.sub(_tokenFee);\n    uint256 _dividends = 0;\n\n    ERC20.transferFrom(from, to, _taxedTokens);\n\n    _dividends = tokensToEth(_tokenFee);\n    if (showMyDividends(true) > 0) {\n      withdraw();\n    }\n\n    payoutsTo[from] -= (int256) (profitPerToken.mul(value));\n    payoutsTo[to] += (int256) (profitPerToken.mul(_taxedTokens));\n    profitPerToken = profitPerToken.add(_dividends.div(totalSupply()));\n\n    emit TransferSuccessful(from, to, value);\n\n    return true;\n  }\n\n  /**\n  * @dev function to sell all tokens and withdraw balance\n  */\n  function exit() public {\n    address _customerAddress = msg.sender;\n    uint256 _tokens = balanceOf(_customerAddress);\n\n    if (_tokens > 0) sell(_tokens);\n\n    withdraw();\n  }\n\n  /**\n  * @dev function to reinvest of dividends\n  */\n  function reinvest() onlyParticipant public {\n    uint256 _dividends = showMyDividends(false);\n    address _customerAddress = msg.sender;\n\n    payoutsTo[_customerAddress] += (int256) (_dividends);\n    _dividends = _dividends.add(refBalance[_customerAddress]);\n    refBalance[_customerAddress] = 0;\n\n    uint256 _tokens = buyTokens(_customerAddress, _dividends, address(0));\n\n    emit onReinvestment(_customerAddress, _dividends, _tokens);\n  }\n\n  /**\n  * @dev show actual tokens price\n  */\n  function getActualTokenPrice() public view returns (uint256) {\n    return actualTokenPrice;\n  }\n\n  /**\n  * @dev show owner dividents\n  * @param _includeReferralBonus true/false\n  */\n  function showMyDividends(bool _includeReferralBonus) public view returns (uint256) {\n    address _customerAddress = msg.sender;\n    return _includeReferralBonus ? dividendsOf(_customerAddress).add(refBalance[_customerAddress]) : dividendsOf(_customerAddress) ;\n  }\n\n  /**\n  * @dev show owner tokens\n  */\n  function showMyTokens() public view returns (uint256) {\n      address _customerAddress = msg.sender;\n      return balanceOf(_customerAddress);\n  }\n\n  /**\n  * @dev show address dividents\n  * @param _customerAddress address to show dividends for\n  */\n  function dividendsOf(address _customerAddress) public view returns (uint256) {\n    return (uint256) ((int256) (profitPerToken.mul(balanceOf(_customerAddress)).div(decimalShift)) - payoutsTo[_customerAddress]);\n  }\n\n  /**\n * @dev function to show ether/tokens ratio\n * @param _eth eth amount\n */\n function showEthToTokens(uint256 _eth) public view returns (uint256 _tokensReceived, uint256 _newTokenPrice) {\n   uint256 b = actualTokenPrice.mul(2).sub(tokenPriceIncremental);\n   uint256 c = _eth.mul(2);\n   uint256 d = SafeMath.add(b**2, tokenPriceIncremental.mul(4).mul(c));\n\n   // d = b**2 + 4 * a * c;\n   // (-b + Math.sqrt(d)) / (2*a)\n   _tokensReceived = SafeMath.div(sqrt(d).sub(b).mul(decimalShift), tokenPriceIncremental.mul(2));\n   _newTokenPrice = actualTokenPrice.add(SafeMath.mul(_tokensReceived.div(1e18), tokenPriceIncremental));\n }\n\n /**\n * @dev function to show tokens/ether ratio\n * @param _tokens tokens amount\n */\n function showTokensToEth(uint256 _tokens) public view returns (uint256 _eth, uint256 _newTokenPrice) {\n   // (2 * a1 - delta * (n - 1)) / 2 * n\n   _eth = SafeMath.sub(actualTokenPrice.mul(2), tokenPriceIncremental.mul(_tokens.sub(1e18)).div(decimalShift)).div(2).mul(_tokens).div(decimalShift);\n   _newTokenPrice = actualTokenPrice.sub(SafeMath.mul(_tokens.div(1e18), tokenPriceIncremental));\n }\n\n function sqrt(uint x) pure private returns (uint y) {\n    uint z = (x + 1) / 2;\n    y = x;\n    while (z < y) {\n        y = z;\n        z = (x / z + z) / 2;\n    }\n }\n\n  /**\n  * Internals\n  */\n\n  /**\n  * @dev function to buy tokens, calculate bonus, dividends, fees\n  * @param _inRawEth eth amount\n  * @param _ref address of referal\n  */\n  function buyTokens(address customerAddress, uint256 _inRawEth, address _ref) internal returns (uint256) {\n      address _customerAddress = customerAddress;\n      uint256 _dividends = inBonus_p.mul(_inRawEth);\n      uint256 _inEth = _inRawEth.sub(_dividends);\n      uint256 _tokens = 0;\n      uint256 startPrice = actualTokenPrice;\n\n      _tokens = ethToTokens(_inEth);\n\n      require(_tokens > 0);\n\n      if (_ref != address(0) && _ref != _customerAddress && balanceOf(_ref) >= refMinBalanceReq) {\n        uint256 _refBonus = refBonus_p.mul(_dividends);\n        _dividends = _dividends.sub(_refBonus);\n        refBalance[_ref] = refBalance[_ref].add(_refBonus);\n      }\n\n      uint256 _totalTokensSupply = totalSupply();\n\n      if (_totalTokensSupply > 0) {\n        profitPerToken = profitPerToken.add(_dividends.mul(decimalShift).div(_totalTokensSupply));\n        _totalTokensSupply = _totalTokensSupply.add(_tokens);\n      } else {\n        _totalTokensSupply = _tokens;\n      }\n\n      _mint(_customerAddress, _tokens);\n      payoutsTo[_customerAddress] += (int256) (profitPerToken.mul(_tokens).div(decimalShift));\n\n      emit onTokenBuy(_customerAddress, _inEth, _tokens, _ref, now, startPrice, actualTokenPrice);\n\n      return _tokens;\n  }\n\n  /**\n  * @dev function to buy tokens, calculate bonus, dividends, fees\n  * @param _inRawTokens eth amount\n  */\n  function sellTokens(uint256 _inRawTokens) internal returns (uint256) {\n    address _customerAddress = msg.sender;\n    require(_inRawTokens <= balanceOf(_customerAddress));\n    uint256 _tokens = _inRawTokens;\n    uint256 _eth = 0;\n    uint256 startPrice = actualTokenPrice;\n\n    _eth = tokensToEth(_tokens);\n    _burn(_customerAddress, _tokens);\n\n    uint256 _dividends = outBonus_p.mul(_eth);\n    uint256 _ethTaxed = _eth.sub(_dividends);\n    int256 unlockPayout = (int256) (_ethTaxed.add((profitPerToken.mul(_tokens)).div(decimalShift)));\n\n    payoutsTo[_customerAddress] -= unlockPayout;\n    profitPerToken = profitPerToken.add(_dividends.mul(decimalShift).div(totalSupply()));\n\n    emit onTokenSell(_customerAddress, _tokens, _eth, now, startPrice, actualTokenPrice);\n  }\n\n  /**\n  * @dev function to calculate ether/tokens ratio\n  * @param _eth eth amount\n  */\n  function ethToTokens(uint256 _eth) internal returns (uint256 _tokensReceived) {\n    uint256 _newTokenPrice;\n    (_tokensReceived, _newTokenPrice) = showEthToTokens(_eth);\n    actualTokenPrice = _newTokenPrice;\n  }\n\n  /**\n  * @dev function to calculate tokens/ether ratio\n  * @param _tokens tokens amount\n  */\n  function tokensToEth(uint256 _tokens) internal returns (uint256 _eth) {\n    uint256 _newTokenPrice;\n    (_eth, _newTokenPrice) = showTokensToEth(_tokens);\n    actualTokenPrice = _newTokenPrice;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showMyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"showEthToTokens\",\"outputs\":[{\"name\":\"_tokensReceived\",\"type\":\"uint256\"},{\"name\":\"_newTokenPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"actualTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refMinBalanceReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ecosystemDividends\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMarketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getActualTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"showTokensToEth\",\"outputs\":[{\"name\":\"_eth\",\"type\":\"uint256\"},{\"name\":\"_newTokenPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"showMyDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_inRawTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomeEth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensCreated\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"ref\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"onTokenBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"earnedEth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reinvestEth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensCreated\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withdrawEth\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from_\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to_\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"TransferSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from_\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to_\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"TransferFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": ""
}