{
  "address": "0x41bd2dac002b683de9f69c4961ee3beb39590639",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EtherBrosMaker",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-05\n*/\n\n// File: node_modules\\zeppelin-solidity\\contracts\\ownership\\Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC721\\ERC721Basic.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic {\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId) public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public;\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC721\\ERC721.sol\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC721Basic {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\n  function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n  function name() public view returns (string _name);\n  function symbol() public view returns (string _symbol);\n  function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\AddressUtils.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   *  as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\n    return size > 0;\n  }\n\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\math\\SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC721\\ERC721Receiver.sol\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n *  from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   *  after a `safetransfer`. This function MAY throw to revert and reject the\n   *  transfer. This function MUST use 50,000 gas or less. Return of other\n   *  than the magic value MUST result in the transaction being reverted.\n   *  Note: the contract address is always the message sender.\n   * @param _from The sending address\n   * @param _tokenId The NFT identifier which is being transfered\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n   */\n  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC721\\ERC721BasicToken.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721BasicToken is ERC721Basic {\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) internal tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) internal ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  /**\n   * @dev Guarantees msg.sender is owner of the given token\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n   */\n  modifier onlyOwnerOf(uint256 _tokenId) {\n    require(ownerOf(_tokenId) == msg.sender);\n    _;\n  }\n\n  /**\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n   * @param _tokenId uint256 ID of the token to validate\n   */\n  modifier canTransfer(uint256 _tokenId) {\n    require(isApprovedOrOwner(msg.sender, _tokenId));\n    _;\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(_owner != address(0));\n    return ownedTokensCount[_owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param _tokenId uint256 ID of the token to query the existance of\n   * @return whether the token exists\n   */\n  function exists(uint256 _tokenId) public view returns (bool) {\n    address owner = tokenOwner[_tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * @dev The zero address indicates there is no approved address.\n   * @dev There can only be one approved address per token at a given time.\n   * @dev Can only be called by the token owner or an approved operator.\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId) public {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n      tokenApprovals[_tokenId] = _to;\n      emit Approval(owner, _to, _tokenId);\n    }\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for a the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param _to operator address to set the approval\n   * @param _approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address _to, bool _approved) public {\n    require(_to != msg.sender);\n    operatorApprovals[msg.sender][_to] = _approved;\n    emit ApprovalForAll(msg.sender, _to, _approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n    return operatorApprovals[_owner][_operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * @dev Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\n    require(_from != address(0));\n    require(_to != address(0));\n\n    clearApproval(_from, _tokenId);\n    removeTokenFrom(_from, _tokenId);\n    addTokenTo(_to, _tokenId);\n\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\n   *  which is called upon a safe transfer, and return the magic value\n   *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\n   *  the transfer is reverted.\n   * @dev Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\n   *  which is called upon a safe transfer, and return the magic value\n   *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\n   *  the transfer is reverted.\n   * @dev Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    transferFrom(_from, _to, _tokenId);\n    // solium-disable-next-line arg-overflow\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\n    address owner = ownerOf(_tokenId);\n    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * @dev Reverts if the given token ID already exists\n   * @param _to The address that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addTokenTo(_to, _tokenId);\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * @dev Reverts if the token does not exist\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    clearApproval(_owner, _tokenId);\n    removeTokenFrom(_owner, _tokenId);\n    emit Transfer(_owner, address(0), _tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * @dev Reverts if the given address is not indeed the owner of the token\n   * @param _owner owner of the token\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function clearApproval(address _owner, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _owner);\n    if (tokenApprovals[_tokenId] != address(0)) {\n      tokenApprovals[_tokenId] = address(0);\n      emit Approval(_owner, address(0), _tokenId);\n    }\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _from);\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n    tokenOwner[_tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * @dev The call is not executed if the target address is not a contract\n   * @param _from address representing the previous owner of the given token ID\n   * @param _to target address that will receive the tokens\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallSafeTransfer(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_to.isContract()) {\n      return true;\n    }\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\n    return (retval == ERC721_RECEIVED);\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC721\\ERC721Token.sol\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Token is ERC721, ERC721BasicToken {\n  // Token name\n  string internal name_;\n\n  // Token symbol\n  string internal symbol_;\n\n  // Mapping from owner to list of owned token IDs\n  mapping (address => uint256[]) internal ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) internal ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] internal allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) internal allTokensIndex;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) internal tokenURIs;\n\n  /**\n   * @dev Constructor function\n   */\n  function ERC721Token(string _name, string _symbol) public {\n    name_ = _name;\n    symbol_ = _symbol;\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() public view returns (string) {\n    return name_;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() public view returns (string) {\n    return symbol_;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * @dev Throws if the token ID does not exist. May return an empty string.\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string) {\n    require(exists(_tokenId));\n    return tokenURIs[_tokenId];\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param _owner address owning the tokens list to be accessed\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\n    require(_index < balanceOf(_owner));\n    return ownedTokens[_owner][_index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * @dev Reverts if the index is greater or equal to the total number of tokens\n   * @param _index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\n    require(_index < totalSupply());\n    return allTokens[_index];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * @dev Reverts if the token ID does not exist\n   * @param _tokenId uint256 ID of the token to set its URI\n   * @param _uri string URI to assign\n   */\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n    require(exists(_tokenId));\n    tokenURIs[_tokenId] = _uri;\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    super.addTokenTo(_to, _tokenId);\n    uint256 length = ownedTokens[_to].length;\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    super.removeTokenFrom(_from, _tokenId);\n\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n    ownedTokens[_from][lastTokenIndex] = 0;\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokens[_from].length--;\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * @dev Reverts if the given token ID already exists\n   * @param _to address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    super._mint(_to, _tokenId);\n\n    allTokensIndex[_tokenId] = allTokens.length;\n    allTokens.push(_tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * @dev Reverts if the token does not exist\n   * @param _owner owner of the token to burn\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    super._burn(_owner, _tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\n      delete tokenURIs[_tokenId];\n    }\n\n    // Reorg all tokens array\n    uint256 tokenIndex = allTokensIndex[_tokenId];\n    uint256 lastTokenIndex = allTokens.length.sub(1);\n    uint256 lastToken = allTokens[lastTokenIndex];\n\n    allTokens[tokenIndex] = lastToken;\n    allTokens[lastTokenIndex] = 0;\n\n    allTokens.length--;\n    allTokensIndex[_tokenId] = 0;\n    allTokensIndex[lastToken] = tokenIndex;\n  }\n\n}\n\n// File: contracts\\Integers.sol\n\n/**\n * Integers Library\n *\n * In summary this is a simple library of integer functions which allow a simple\n * conversion to and from strings\n *\n * @author James Lockhart <[email protected]>\n */\nlibrary Integers {\n    /**\n     * Parse Int\n     *\n     * Converts an ASCII string value into an uint as long as the string\n     * its self is a valid unsigned integer\n     *\n     * @param _value The ASCII string to be converted to an unsigned integer\n     * @return uint The unsigned value of the ASCII string\n     */\n    function parseInt(string _value)\n        public\n        returns (uint _ret) {\n        bytes memory _bytesValue = bytes(_value);\n        uint j = 1;\n        for(uint i = _bytesValue.length-1; i >= 0 && i < _bytesValue.length; i--) {\n            assert(_bytesValue[i] >= 48 && _bytesValue[i] <= 57);\n            _ret += (uint(_bytesValue[i]) - 48)*j;\n            j*=10;\n        }\n    }\n\n    /**\n     * To String\n     *\n     * Converts an unsigned integer to the ASCII string equivalent value\n     *\n     * @param _base The unsigned integer to be converted to a string\n     * @return string The resulting ASCII string value\n     */\n    function toString(uint _base)\n        internal\n        returns (string) {\n        bytes memory _tmp = new bytes(32);\n        uint i;\n        for(i = 0;_base > 0;i++) {\n            _tmp[i] = byte((_base % 10) + 48);\n            _base /= 10;\n        }\n        bytes memory _real = new bytes(i--);\n        for(uint j = 0; j < _real.length; j++) {\n            _real[j] = _tmp[i--];\n        }\n        return string(_real);\n    }\n\n    /**\n     * To Byte\n     *\n     * Convert an 8 bit unsigned integer to a byte\n     *\n     * @param _base The 8 bit unsigned integer\n     * @return byte The byte equivalent\n     */\n    function toByte(uint8 _base)\n        public\n        returns (byte _ret) {\n        assembly {\n            let m_alloc := add(msize(),0x1)\n            mstore8(m_alloc, _base)\n            _ret := mload(m_alloc)\n        }\n    }\n\n    /**\n     * To Bytes\n     *\n     * Converts an unsigned integer to bytes\n     *\n     * @param _base The integer to be converted to bytes\n     * @return bytes The bytes equivalent\n     */\n    function toBytes(uint _base)\n        internal\n        returns (bytes _ret) {\n        assembly {\n            let m_alloc := add(msize(),0x1)\n            _ret := mload(m_alloc)\n            mstore(_ret, 0x20)\n            mstore(add(_ret, 0x20), _base)\n        }\n    }\n}\n\n// File: contracts\\Strings.sol\n\n/**\n * Strings Library\n *\n * In summary this is a simple library of string functions which make simple\n * string operations less tedious in solidity.\n *\n * Please be aware these functions can be quite gas heavy so use them only when\n * necessary not to clog the blockchain with expensive transactions.\n *\n * @author James Lockhart <[email protected]>\n */\nlibrary Strings {\n\n    /**\n     * Concat (High gas cost)\n     *\n     * Appends two strings together and returns a new value\n     *\n     * @param _base When being used for a data type this is the extended object\n     *              otherwise this is the string which will be the concatenated\n     *              prefix\n     * @param _value The value to be the concatenated suffix\n     * @return string The resulting string from combinging the base and value\n     */\n    function concat(string _base, string _value)\n        internal\n        returns (string) {\n        bytes memory _baseBytes = bytes(_base);\n        bytes memory _valueBytes = bytes(_value);\n\n        assert(_valueBytes.length > 0);\n\n        string memory _tmpValue = new string(_baseBytes.length +\n            _valueBytes.length);\n        bytes memory _newValue = bytes(_tmpValue);\n\n        uint i;\n        uint j;\n\n        for(i = 0; i < _baseBytes.length; i++) {\n            _newValue[j++] = _baseBytes[i];\n        }\n\n        for(i = 0; i<_valueBytes.length; i++) {\n            _newValue[j++] = _valueBytes[i];\n        }\n\n        return string(_newValue);\n    }\n\n    /**\n     * Index Of\n     *\n     * Locates and returns the position of a character within a string\n     *\n     * @param _base When being used for a data type this is the extended object\n     *              otherwise this is the string acting as the haystack to be\n     *              searched\n     * @param _value The needle to search for, at present this is currently\n     *               limited to one character\n     * @return int The position of the needle starting from 0 and returning -1\n     *             in the case of no matches found\n     */\n    function indexOf(string _base, string _value)\n        internal\n        returns (int) {\n        return _indexOf(_base, _value, 0);\n    }\n\n    /**\n     * Index Of\n     *\n     * Locates and returns the position of a character within a string starting\n     * from a defined offset\n     *\n     * @param _base When being used for a data type this is the extended object\n     *              otherwise this is the string acting as the haystack to be\n     *              searched\n     * @param _value The needle to search for, at present this is currently\n     *               limited to one character\n     * @param _offset The starting point to start searching from which can start\n     *                from 0, but must not exceed the length of the string\n     * @return int The position of the needle starting from 0 and returning -1\n     *             in the case of no matches found\n     */\n    function _indexOf(string _base, string _value, uint _offset)\n        internal\n        returns (int) {\n        bytes memory _baseBytes = bytes(_base);\n        bytes memory _valueBytes = bytes(_value);\n\n        assert(_valueBytes.length == 1);\n\n        for(uint i = _offset; i < _baseBytes.length; i++) {\n            if (_baseBytes[i] == _valueBytes[0]) {\n                return int(i);\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Length\n     *\n     * Returns the length of the specified string\n     *\n     * @param _base When being used for a data type this is the extended object\n     *              otherwise this is the string to be measured\n     * @return uint The length of the passed string\n     */\n    function length(string _base)\n        internal\n        returns (uint) {\n        bytes memory _baseBytes = bytes(_base);\n        return _baseBytes.length;\n    }\n\n    /**\n     * Sub String\n     *\n     * Extracts the beginning part of a string based on the desired length\n     *\n     * @param _base When being used for a data type this is the extended object\n     *              otherwise this is the string that will be used for\n     *              extracting the sub string from\n     * @param _length The length of the sub string to be extracted from the base\n     * @return string The extracted sub string\n     */\n    function substring(string _base, int _length)\n        internal\n        returns (string) {\n        return _substring(_base, _length, 0);\n    }\n\n    /**\n     * Sub String\n     *\n     * Extracts the part of a string based on the desired length and offset. The\n     * offset and length must not exceed the lenth of the base string.\n     *\n     * @param _base When being used for a data type this is the extended object\n     *              otherwise this is the string that will be used for\n     *              extracting the sub string from\n     * @param _length The length of the sub string to be extracted from the base\n     * @param _offset The starting point to extract the sub string from\n     * @return string The extracted sub string\n     */\n    function _substring(string _base, int _length, int _offset)\n        internal\n        returns (string) {\n        bytes memory _baseBytes = bytes(_base);\n\n        assert(uint(_offset+_length) <= _baseBytes.length);\n\n        string memory _tmp = new string(uint(_length));\n        bytes memory _tmpBytes = bytes(_tmp);\n\n        uint j = 0;\n        for(uint i = uint(_offset); i < uint(_offset+_length); i++) {\n          _tmpBytes[j++] = _baseBytes[i];\n        }\n\n        return string(_tmpBytes);\n    }\n\n    /**\n     * String Split (Very high gas cost)\n     *\n     * Splits a string into an array of strings based off the delimiter value.\n     * Please note this can be quite a gas expensive function due to the use of\n     * storage so only use if really required.\n     *\n     * @param _base When being used for a data type this is the extended object\n     *               otherwise this is the string value to be split.\n     * @param _value The delimiter to split the string on which must be a single\n     *               character\n     * @return string[] An array of values split based off the delimiter, but\n     *                  do not container the delimiter.\n     */\n    function split(string _base, string _value)\n        internal\n        returns (string[] storage splitArr) {\n        bytes memory _baseBytes = bytes(_base);\n        uint _offset = 0;\n\n        while(_offset < _baseBytes.length-1) {\n\n            int _limit = _indexOf(_base, _value, _offset);\n            if (_limit == -1) {\n                _limit = int(_baseBytes.length);\n            }\n\n            string memory _tmp = new string(uint(_limit)-_offset);\n            bytes memory _tmpBytes = bytes(_tmp);\n\n            uint j = 0;\n            for(uint i = _offset; i < uint(_limit); i++) {\n                _tmpBytes[j++] = _baseBytes[i];\n            }\n            _offset = uint(_limit) + 1;\n            splitArr.push(string(_tmpBytes));\n        }\n        return splitArr;\n    }\n\n    /**\n     * Compare To\n     *\n     * Compares the characters of two strings, to ensure that they have an\n     * identical footprint\n     *\n     * @param _base When being used for a data type this is the extended object\n     *               otherwise this is the string base to compare against\n     * @param _value The string the base is being compared to\n     * @return bool Simply notates if the two string have an equivalent\n     */\n    function compareTo(string _base, string _value)\n        internal\n        returns (bool) {\n        bytes memory _baseBytes = bytes(_base);\n        bytes memory _valueBytes = bytes(_value);\n\n        if (_baseBytes.length != _valueBytes.length) {\n            return false;\n        }\n\n        for(uint i = 0; i < _baseBytes.length; i++) {\n            if (_baseBytes[i] != _valueBytes[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Compare To Ignore Case (High gas cost)\n     *\n     * Compares the characters of two strings, converting them to the same case\n     * where applicable to alphabetic characters to distinguish if the values\n     * match.\n     *\n     * @param _base When being used for a data type this is the extended object\n     *               otherwise this is the string base to compare against\n     * @param _value The string the base is being compared to\n     * @return bool Simply notates if the two string have an equivalent value\n     *              discarding case\n     */\n    function compareToIgnoreCase(string _base, string _value)\n        internal\n        returns (bool) {\n        bytes memory _baseBytes = bytes(_base);\n        bytes memory _valueBytes = bytes(_value);\n\n        if (_baseBytes.length != _valueBytes.length) {\n            return false;\n        }\n\n        for(uint i = 0; i < _baseBytes.length; i++) {\n            if (_baseBytes[i] != _valueBytes[i] &&\n                _upper(_baseBytes[i]) != _upper(_valueBytes[i])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Upper\n     *\n     * Converts all the values of a string to their corresponding upper case\n     * value.\n     *\n     * @param _base When being used for a data type this is the extended object\n     *              otherwise this is the string base to convert to upper case\n     * @return string\n     */\n    function upper(string _base)\n        internal\n        returns (string) {\n        bytes memory _baseBytes = bytes(_base);\n        for (uint i = 0; i < _baseBytes.length; i++) {\n            _baseBytes[i] = _upper(_baseBytes[i]);\n        }\n        return string(_baseBytes);\n    }\n\n    /**\n     * Lower\n     *\n     * Converts all the values of a string to their corresponding lower case\n     * value.\n     *\n     * @param _base When being used for a data type this is the extended object\n     *              otherwise this is the string base to convert to lower case\n     * @return string\n     */\n    function lower(string _base)\n        internal\n        returns (string) {\n        bytes memory _baseBytes = bytes(_base);\n        for (uint i = 0; i < _baseBytes.length; i++) {\n            _baseBytes[i] = _lower(_baseBytes[i]);\n        }\n        return string(_baseBytes);\n    }\n\n    /**\n     * Upper\n     *\n     * Convert an alphabetic character to upper case and return the original\n     * value when not alphabetic\n     *\n     * @param _b1 The byte to be converted to upper case\n     * @return bytes1 The converted value if the passed value was alphabetic\n     *                and in a lower case otherwise returns the original value\n     */\n    function _upper(bytes1 _b1)\n        private\n        constant\n        returns (bytes1) {\n\n        if (_b1 >= 0x61 && _b1 <= 0x7A) {\n            return bytes1(uint8(_b1)-32);\n        }\n\n        return _b1;\n    }\n\n    /**\n     * Lower\n     *\n     * Convert an alphabetic character to lower case and return the original\n     * value when not alphabetic\n     *\n     * @param _b1 The byte to be converted to lower case\n     * @return bytes1 The converted value if the passed value was alphabetic\n     *                and in a upper case otherwise returns the original value\n     */\n    function _lower(bytes1 _b1)\n        private\n        constant\n        returns (bytes1) {\n\n        if (_b1 >= 0x41 && _b1 <= 0x5A) {\n            return bytes1(uint8(_b1)+32);\n        }\n\n        return _b1;\n    }\n}\n\n// File: contracts\\EtherBrosMaker.sol\n\ncontract EtherBrosMaker is Ownable, ERC721Token {\n    using Strings for string;\n    using Integers for uint;\n\n    event AuctionCreated(uint256 tokenId, uint256 price);\n    event AuctionSuccessful(uint256 tokenId, uint256 price, address buyer);\n    event AuctionCancelled(uint256 tokenId);\n\n    struct Auction {\n        address seller;\n        uint128 price;\n    }\n\n    mapping (uint256 => Auction) public tokenIdToAuction;\n    mapping (uint256 => string) public tokenImage;\n\n    uint128 public mintingFee = 0.001 ether;\n    uint8 prefix = 1;\n    string preURI = \"https://enigmatic-castle-32612.herokuapp.com/api/meta?tokenId=\";\n    string image = \"http://app.givinglog.com/game/ether-bros-maker/img/Etherbro\";\n    uint private nonce = 0;\n    uint16[] public etherBros;\n    uint128 ownerCut = 100;\n\n    function EtherBrosMaker () ERC721Token(\"EtherBrosMaker\" ,\"EBM\") public {\n\n    }\n\n    /*** Owner Action ***/\n    function withdraw() public onlyOwner {\n        owner.transfer(this.balance);\n    }\n\n    function setPrefix(uint8 _prefix) external onlyOwner {\n        require(prefix > 0);\n        prefix = _prefix;\n    }\n\n    function setPreURI(string _preURI) external onlyOwner {\n        preURI = _preURI;\n    }\n\n    function _createEtherBro(uint16 _genes,address _owner) internal returns (uint32){\n        uint32 newEtherBroId = uint32(etherBros.push(_genes) - 1);\n        _mint(_owner, newEtherBroId);\n        string memory _uri = preURI.concat(uint(_genes).toString());\n        tokenImage[newEtherBroId] = image.concat(uint(_genes).toString()).concat(\".png\");\n        _setTokenURI(newEtherBroId, _uri);\n        return newEtherBroId;\n    }\n\n    function _gensGenerate() internal returns(uint16){\n        uint16 result = prefix * 10000;\n        uint8 _randam1 = rand();\n        uint8 _randam2 = rand();\n        uint8 _randam3 = rand();\n        uint8 _randam4 = rand();\n\n        if (_randam1 > 0 && _randam1 <4){\n            result = result + 1000;\n        } else if (_randam1 > 3 && _randam1 <7){\n            result = result + 2000;\n        } else if (_randam1 > 6){\n            result = result + 3000;\n        }\n\n        if (_randam2 > 0 && _randam2 <4){\n            result = result + 100;\n        } else if (_randam2 > 3 && _randam2 <7){\n            result = result + 200;\n        } else if (_randam2 > 6){\n            result = result + 300;\n        }\n\n        if (_randam3 > 0 && _randam3 <4){\n            result = result + 10;\n        } else if (_randam3 > 3 && _randam3 <7){\n            result = result + 20;\n        } else if (_randam3 > 6){\n            result = result + 30;\n        }\n\n        if (_randam4 > 0 && _randam4 <4){\n            result = result + 1;\n        } else if (_randam4 > 3 && _randam4 <7){\n            result = result + 2;\n        } else if (_randam4 > 6){\n            result = result + 3;\n        }\n\n        return result;\n    }\n\n\n    function mintEtherBro () public {\n        _createEtherBro(_gensGenerate(),msg.sender);\n    }\n\n    function mintPromoEtherBro (uint16 _gens) public onlyOwner {\n        uint16 _promoGens = prefix * 10000 + _gens;\n        _createEtherBro(_promoGens, msg.sender);\n    }\n\n    function rand() internal returns (uint8){\n        nonce++;\n        return uint8(uint256(keccak256(nonce))%10);\n    }\n\n    function myEtherBros(address _owner) public view returns (uint256[]) {\n        return ownedTokens[_owner];\n    }\n\n    function myEtherBrosCount(address _owner) public view returns (uint256) {\n        return ownedTokensCount[_owner];\n    }\n\n    function returnIdImage(uint32 _id) public view returns (uint32, string){\n        return (_id, tokenImage[_id]);\n    }\n\n\n//  function addEtherBroAuction(uint256 _tokenId, uint128 _price) public returns (bool) {\n    function addEtherBroAuction(uint256 _tokenId, uint128 _price) public {\n        require(ownerOf(_tokenId) == msg.sender);\n        require(tokenIdToAuction[_tokenId].seller == address(0));\n        require(_price >= 0);\n\n        Auction memory _auction = Auction(msg.sender, _price);\n        tokenIdToAuction[_tokenId] = _auction;\n\n        approve(address(this), _tokenId);\n        transferFrom(msg.sender, address(this), _tokenId);\n\n        AuctionCreated(uint256(_tokenId), uint256(_auction.price));\n\n    }\n\n    function cancelEtherBroAuction(uint256 _tokenId) public {\n        require(tokenIdToAuction[_tokenId].seller == msg.sender);\n        this.transferFrom(address(this), tokenIdToAuction[_tokenId].seller, _tokenId);\n        delete tokenIdToAuction[_tokenId];\n        AuctionCancelled(_tokenId);\n    }\n\n    function purchase(uint256 _tokenId) public payable {\n        require(tokenIdToAuction[_tokenId].seller != address(0));\n        require(tokenIdToAuction[_tokenId].seller != msg.sender);\n        require(tokenIdToAuction[_tokenId].price == msg.value);\n\n        Auction memory auction = tokenIdToAuction[_tokenId];\n\n        if (auction.price > 0) {\n            uint128 actualOwnerCut = _computeOwnerCut(auction.price);\n            uint128 proceeds = auction.price - actualOwnerCut;\n            auction.seller.transfer(proceeds);\n        }\n        delete tokenIdToAuction[_tokenId];\n        this.transferFrom(address(this), msg.sender, _tokenId);\n        AuctionSuccessful(_tokenId, auction.price, msg.sender);\n    }\n\n    /*** Tools ***/\n    function _computeOwnerCut(uint128 _price) internal view returns (uint128) {\n        return _price * ownerCut / 10000;\n    }\n\n}",
  "bytecode": "608060405266038d7ea4c68000600e60006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506001600e60106101000a81548160ff021916908360ff160217905550606060405190810160405280603e81526020017f68747470733a2f2f656e69676d617469632d636173746c652d33323631322e6881526020017f65726f6b756170702e636f6d2f6170692f6d6574613f746f6b656e49643d0000815250600f9080519060200190620000d49291906200027d565b50606060405190810160405280603b81526020017f687474703a2f2f6170702e676976696e676c6f672e636f6d2f67616d652f657481526020017f6865722d62726f732d6d616b65722f696d672f457468657262726f000000000081525060109080519060200190620001499291906200027d565b5060006011556064601360006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055503480156200019657600080fd5b506040805190810160405280600e81526020017f457468657242726f734d616b65720000000000000000000000000000000000008152506040805190810160405280600381526020017f45424d0000000000000000000000000000000000000000000000000000000000815250336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600590805190602001906200025b9291906200027d565b508060069080519060200190620002749291906200027d565b5050506200032c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002c057805160ff1916838001178555620002f1565b82800160010185558215620002f1579182015b82811115620002f0578251825591602001919060010190620002d3565b5b50905062000300919062000304565b5090565b6200032991905b80821115620003255760008160009055506001016200030b565b5090565b90565b613c79806200033c6000396000f3006080604052600436106101a1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101a6578063081812fc14610236578063095ea7b3146102a357806318160ddd146102f0578063222cfe941461031b57806323b872dd146103725780632c84ffcc146103df5780632f745c59146104285780633ccfd60b146104895780633d6bc807146104a057806342842e0e146104cd578063461fd83b1461053a5780634ad5a68c146105d25780634f558e79146106915780634f6ccce7146106d65780635a64ad95146107175780636352211e1461076657806370a08231146107d35780637563113b1461082a5780637e2663851461085b5780638da5cb5b1461088b57806395d89b41146108e2578063a22cb46514610972578063a85aba19146109c1578063b88d4fde146109fc578063c87b56dd14610aaf578063cf34842514610b55578063e3b1475714610bfb578063e985e9c514610c93578063ecc91c2814610d0e578063efef39a114610d57578063f2fde38b14610d77578063fa48b4bf14610dba575b600080fd5b3480156101b257600080fd5b506101bb610dd1565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101fb5780820151818401526020810190506101e0565b50505050905090810190601f1680156102285780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024257600080fd5b5061026160048036038101908080359060200190929190505050610e73565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102af57600080fd5b506102ee600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610eb0565b005b3480156102fc57600080fd5b50610305611076565b6040518082815260200191505060405180910390f35b34801561032757600080fd5b5061035c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611083565b6040518082815260200191505060405180910390f35b34801561037e57600080fd5b506103dd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110cc565b005b3480156103eb57600080fd5b5061040a600480360381019080803590602001909291905050506111e3565b604051808261ffff1661ffff16815260200191505060405180910390f35b34801561043457600080fd5b50610473600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061121a565b6040518082815260200191505060405180910390f35b34801561049557600080fd5b5061049e611291565b005b3480156104ac57600080fd5b506104cb6004803603810190808035906020019092919050505061136d565b005b3480156104d957600080fd5b50610538600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061159c565b005b34801561054657600080fd5b5061057b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115d4565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156105be5780820151818401526020810190506105a3565b505050509050019250505060405180910390f35b3480156105de57600080fd5b50610603600480360381019080803563ffffffff16906020019092919050505061166b565b604051808363ffffffff1663ffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561065557808201518184015260208101905061063a565b50505050905090810190601f1680156106825780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561069d57600080fd5b506106bc6004803603810190808035906020019092919050505061172e565b604051808215151515815260200191505060405180910390f35b3480156106e257600080fd5b50610701600480360381019080803590602001909291905050506117a0565b6040518082815260200191505060405180910390f35b34801561072357600080fd5b5061072c6117d8565b60405180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561077257600080fd5b50610791600480360381019080803590602001909291905050506117fa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107df57600080fd5b50610814600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611878565b6040518082815260200191505060405180910390f35b34801561083657600080fd5b50610859600480360381019080803561ffff1690602001909291905050506118fc565b005b34801561086757600080fd5b50610889600480360381019080803560ff169060200190929190505050611983565b005b34801561089757600080fd5b506108a0611a1d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108ee57600080fd5b506108f7611a42565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561093757808201518184015260208101905061091c565b50505050905090810190601f1680156109645780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561097e57600080fd5b506109bf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611ae4565b005b3480156109cd57600080fd5b506109fa600480360381019080803590602001908201803590602001919091929391929390505050611c20565b005b348015610a0857600080fd5b50610aad600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611c91565b005b348015610abb57600080fd5b50610ada60048036038101908080359060200190929190505050611cd0565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b1a578082015181840152602081019050610aff565b50505050905090810190601f168015610b475780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610b6157600080fd5b50610b8060048036038101908080359060200190929190505050611d99565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610bc0578082015181840152602081019050610ba5565b50505050905090810190601f168015610bed5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610c0757600080fd5b50610c2660048036038101908080359060200190929190505050611e49565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b348015610c9f57600080fd5b50610cf4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ea9565b604051808215151515815260200191505060405180910390f35b348015610d1a57600080fd5b50610d556004803603810190808035906020019092919080356fffffffffffffffffffffffffffffffff169060200190929190505050611f3d565b005b610d7560048036038101908080359060200190929190505050612165565b005b348015610d8357600080fd5b50610db8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506125d8565b005b348015610dc657600080fd5b50610dcf61272d565b005b606060058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e695780601f10610e3e57610100808354040283529160200191610e69565b820191906000526020600020905b815481529060010190602001808311610e4c57829003601f168201915b5050505050905090565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610ebb826117fa565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610ef857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610f385750610f378133611ea9565b5b1515610f4357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16610f6483610e73565b73ffffffffffffffffffffffffffffffffffffffff16141580610fb45750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b1561107157826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a35b505050565b6000600980549050905090565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b806110d73382612741565b15156110e257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561111e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561115a57600080fd5b61116484836127d6565b61116e848361293f565b6111788383612b57565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050565b6012818154811015156111f257fe5b9060005260206000209060109182820401919006600202915054906101000a900461ffff1681565b600061122583611878565b8210151561123257600080fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561127e57fe5b9060005260206000200154905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112ec57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015801561136a573d6000803e3d6000fd5b50565b3373ffffffffffffffffffffffffffffffffffffffff16600c600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156113dd57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff166323b872dd30600c600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156114ea57600080fd5b505af11580156114fe573d6000803e3d6000fd5b50505050600c6000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a8154906fffffffffffffffffffffffffffffffff021916905550507f2809c7e17bf978fbc7194c0a694b638c4215e9140cacc6c38ca36010b45697df816040518082815260200191505060405180910390a150565b806115a73382612741565b15156115b257600080fd5b6115ce8484846020604051908101604052806000815250611c91565b50505050565b6060600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561165f57602002820191906000526020600020905b81548152602001906001019080831161164b575b50505050509050919050565b6000606082600d60008563ffffffff168152602001908152602001600020808054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561171e5780601f106116f35761010080835404028352916020019161171e565b820191906000526020600020905b81548152906001019060200180831161170157829003601f168201915b5050505050905091509150915091565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b60006117aa611076565b821015156117b757600080fd5b6009828154811015156117c657fe5b90600052602060002001549050919050565b600e60009054906101000a90046fffffffffffffffffffffffffffffffff1681565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561186f57600080fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156118b557600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561195957600080fd5b81612710600e60109054906101000a900460ff1660ff160201905061197e8133612c2e565b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119de57600080fd5b6000600e60109054906101000a900460ff1660ff161115156119ff57600080fd5b80600e60106101000a81548160ff021916908360ff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ada5780601f10611aaf57610100808354040283529160200191611ada565b820191906000526020600020905b815481529060010190602001808311611abd57829003601f168201915b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611b1f57600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c7b57600080fd5b8181600f9190611c8c929190613aba565b505050565b81611c9c3382612741565b1515611ca757600080fd5b611cb28585856110cc565b611cbe85858585612e97565b1515611cc957600080fd5b5050505050565b6060611cdb8261172e565b1515611ce657600080fd5b600b60008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d8d5780601f10611d6257610100808354040283529160200191611d8d565b820191906000526020600020905b815481529060010190602001808311611d7057829003601f168201915b50505050509050919050565b600d6020528060005260406000206000915090508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e415780601f10611e1657610100808354040283529160200191611e41565b820191906000526020600020905b815481529060010190602001808311611e2457829003601f168201915b505050505081565b600c6020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a90046fffffffffffffffffffffffffffffffff16905082565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611f45613b3a565b3373ffffffffffffffffffffffffffffffffffffffff16611f65846117fa565b73ffffffffffffffffffffffffffffffffffffffff16141515611f8757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600c600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611ff857600080fd5b6000826fffffffffffffffffffffffffffffffff161015151561201a57600080fd5b60408051908101604052803373ffffffffffffffffffffffffffffffffffffffff168152602001836fffffffffffffffffffffffffffffffff16815250905080600c600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050506121003084610eb0565b61210b3330856110cc565b7fe00a2da3a0f34a566402a244ab7ec63f8ab7472591cb18edf3269aa00461a4108382602001516fffffffffffffffffffffffffffffffff16604051808381526020018281526020019250505060405180910390a1505050565b61216d613b3a565b600080600073ffffffffffffffffffffffffffffffffffffffff16600c600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156121e257600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16600c600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561225357600080fd5b34600c600086815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff161415156122a557600080fd5b600c60008581526020019081526020016000206040805190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815250509250600083602001516fffffffffffffffffffffffffffffffff1611156123fa576123918360200151613085565b9150818360200151039050826000015173ffffffffffffffffffffffffffffffffffffffff166108fc826fffffffffffffffffffffffffffffffff169081150290604051600060405180830381858888f193505050501580156123f8573d6000803e3d6000fd5b505b600c6000858152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a8154906fffffffffffffffffffffffffffffffff021916905550503073ffffffffffffffffffffffffffffffffffffffff166323b872dd3033876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561253157600080fd5b505af1158015612545573d6000803e3d6000fd5b505050507f4fcc30d90a842164dd58501ab874a101a3749c3d4747139cefe7c876f4ccebd28484602001513360405180848152602001836fffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a150505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561263357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561266f57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61273e6127386130ce565b33612c2e565b50565b60008061274d836117fa565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806127bc57508373ffffffffffffffffffffffffffffffffffffffff166127a484610e73565b73ffffffffffffffffffffffffffffffffffffffff16145b806127cd57506127cc8185611ea9565b5b91505092915050565b8173ffffffffffffffffffffffffffffffffffffffff166127f6826117fa565b73ffffffffffffffffffffffffffffffffffffffff1614151561281857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561293b5760006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b600080600061294e85856132ab565b600860008581526020019081526020016000205492506129ba6001600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506133da90919063ffffffff16565b9150600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515612a0857fe5b9060005260206000200154905080600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481101515612a6257fe5b90600052602060002001819055506000600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481101515612abe57fe5b9060005260206000200181905550600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480919060019003612b1e9190613b7c565b50600060086000868152602001908152602001600020819055508260086000838152602001908152602001600020819055505050505050565b6000612b6383836133f3565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050906001820390600052602060002001600090919290919091505550806008600084815260200190815260200160002081905550505050565b60008060606001601286908060018154018082558091505090600182039060005260206000209060109182820401919006600202909192909190916101000a81548161ffff021916908361ffff160217905550039150612c94848363ffffffff1661354d565b612d4d612ca48661ffff166135a4565b600f8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612d3a5780601f10612d0f57610100808354040283529160200191612d3a565b820191906000526020600020905b815481529060010190602001808311612d1d57829003601f168201915b505050505061378090919063ffffffff16565b9050612e4f6040805190810160405280600481526020017f2e706e6700000000000000000000000000000000000000000000000000000000815250612e41612d988861ffff166135a4565b60108054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612e2e5780601f10612e0357610100808354040283529160200191612e2e565b820191906000526020600020905b815481529060010190602001808311612e1157829003601f168201915b505050505061378090919063ffffffff16565b61378090919063ffffffff16565b600d60008463ffffffff1681526020019081526020016000209080519060200190612e7b929190613ba8565b50612e8c8263ffffffff168261395a565b819250505092915050565b600080612eb98573ffffffffffffffffffffffffffffffffffffffff1661399a565b1515612ec8576001915061307c565b8473ffffffffffffffffffffffffffffffffffffffff1663f0b9e5ba8786866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612f8a578082015181840152602081019050612f6f565b50505050905090810190601f168015612fb75780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015612fd857600080fd5b505af1158015612fec573d6000803e3d6000fd5b505050506040513d602081101561300257600080fd5b8101908080519060200190929190505050905063f0b9e5ba7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505b50949350505050565b6000612710601360009054906101000a90046fffffffffffffffffffffffffffffffff1683026fffffffffffffffffffffffffffffffff168115156130c657fe5b049050919050565b600080600080600080612710600e60109054906101000a900460ff1660ff160294506130f86139ad565b93506131026139ad565b925061310c6139ad565b91506131166139ad565b905060008460ff1611801561312e575060048460ff16105b1561313f576103e88501945061317c565b60038460ff16118015613155575060078460ff16105b15613166576107d08501945061317b565b60068460ff16111561317a57610bb8850194505b5b5b60008360ff16118015613192575060048360ff16105b156131a2576064850194506131de565b60038360ff161180156131b8575060078360ff16105b156131c85760c8850194506131dd565b60068360ff1611156131dc5761012c850194505b5b5b60008260ff161180156131f4575060048260ff16105b1561320457600a8501945061323f565b60038260ff1611801561321a575060078260ff16105b1561322a5760148501945061323e565b60068260ff16111561323d57601e850194505b5b5b60008160ff16118015613255575060048160ff16105b15613265576001850194506132a0565b60038160ff1611801561327b575060078160ff16105b1561328b5760028501945061329f565b60068160ff16111561329e576003850194505b5b5b849550505050505090565b8173ffffffffffffffffffffffffffffffffffffffff166132cb826117fa565b73ffffffffffffffffffffffffffffffffffffffff161415156132ed57600080fd5b6133406001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546133da90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008282111515156133e857fe5b818303905092915050565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561346157600080fd5b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506135066001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546139ee90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6135578282613a0a565b600980549050600a60008381526020019081526020016000208190555060098190806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b60608060006060600060206040519080825280601f01601f1916602001820160405280156135e15781602001602082028038833980820191505090505b509350600092505b600086111561367e576030600a8781151561360057fe5b06017f010000000000000000000000000000000000000000000000000000000000000002848481518110151561363257fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8681151561366e57fe5b04955082806001019350506135e9565b82806001900393506040519080825280601f01601f1916602001820160405280156136b85781602001602082028038833980820191505090505b509150600090505b8151811015613774578383806001900394508151811015156136de57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002828281518110151561373757fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506136c0565b81945050505050919050565b60608060608060606000808895508794506000855111151561379e57fe5b84518651016040519080825280601f01601f1916602001820160405280156137d55781602001602082028038833980820191505090505b509350839250600091505b85518210156138935785828151811015156137f757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838280600101935081518110151561385657fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535081806001019250506137e0565b600091505b845182101561394b5784828151811015156138af57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838280600101935081518110151561390e57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180600101925050613898565b82965050505050505092915050565b6139638261172e565b151561396e57600080fd5b80600b60008481526020019081526020016000209080519060200190613995929190613ba8565b505050565b600080823b905060008111915050919050565b6000601160008154809291906001019190505550600a601154604051808281526020019150506040518091039020600190048115156139e857fe5b06905090565b60008183019050828110151515613a0157fe5b80905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515613a4657600080fd5b613a508282612b57565b8173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613afb57803560ff1916838001178555613b29565b82800160010185558215613b29579182015b82811115613b28578235825591602001919060010190613b0d565b5b509050613b369190613c28565b5090565b6040805190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b815481835581811115613ba357818360005260206000209182019101613ba29190613c28565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613be957805160ff1916838001178555613c17565b82800160010185558215613c17579182015b82811115613c16578251825591602001919060010190613bfb565b5b509050613c249190613c28565b5090565b613c4a91905b80821115613c46576000816000905550600101613c2e565b5090565b905600a165627a7a723058207109a95f9c624429de77a139a3a3f74035da169bee692b1968a02f5ecae6ce500029"
}