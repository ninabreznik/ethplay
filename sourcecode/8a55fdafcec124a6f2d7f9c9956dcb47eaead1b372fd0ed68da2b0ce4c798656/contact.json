{
  "address": "0x34bd421c7948bc16f826fd99f9b785929b121633",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DarknodeRegistry",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-04\n*/\n\npragma solidity 0.4.25;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\ncontract RepublicToken is PausableToken, BurnableToken {\n\n    string public constant name = \"Republic Token\";\n    string public constant symbol = \"REN\";\n    uint8 public constant decimals = 18;\n    uint256 public constant INITIAL_SUPPLY = 1000000000 * 10**uint256(decimals);\n\n    /// @notice The RepublicToken Constructor.\n    constructor() public {\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n    }\n\n    function transferTokens(address beneficiary, uint256 amount) public onlyOwner returns (bool) {\n        /* solium-disable error-reason */\n        require(amount > 0);\n\n        balances[owner] = balances[owner].sub(amount);\n        balances[beneficiary] = balances[beneficiary].add(amount);\n        emit Transfer(owner, beneficiary, amount);\n\n        return true;\n    }\n}\n\n/**\n * @notice LinkedList is a library for a circular double linked list.\n */\nlibrary LinkedList {\n\n    /*\n    * @notice A permanent NULL node (0x0) in the circular double linked list.\n    * NULL.next is the head, and NULL.previous is the tail.\n    */\n    address public constant NULL = 0x0;\n\n    /**\n    * @notice A node points to the node before it, and the node after it. If\n    * node.previous = NULL, then the node is the head of the list. If\n    * node.next = NULL, then the node is the tail of the list.\n    */\n    struct Node {\n        bool inList;\n        address previous;\n        address next;\n    }\n\n    /**\n    * @notice LinkedList uses a mapping from address to nodes. Each address\n    * uniquely identifies a node, and in this way they are used like pointers.\n    */\n    struct List {\n        mapping (address => Node) list;\n    }\n\n    /**\n    * @notice Insert a new node before an existing node.\n    *\n    * @param self The list being used.\n    * @param target The existing node in the list.\n    * @param newNode The next node to insert before the target.\n    */\n    function insertBefore(List storage self, address target, address newNode) internal {\n        require(!isInList(self, newNode), \"already in list\");\n        require(isInList(self, target) || target == NULL, \"not in list\");\n\n        // It is expected that this value is sometimes NULL.\n        address prev = self.list[target].previous;\n\n        self.list[newNode].next = target;\n        self.list[newNode].previous = prev;\n        self.list[target].previous = newNode;\n        self.list[prev].next = newNode;\n\n        self.list[newNode].inList = true;\n    }\n\n    /**\n    * @notice Insert a new node after an existing node.\n    *\n    * @param self The list being used.\n    * @param target The existing node in the list.\n    * @param newNode The next node to insert after the target.\n    */\n    function insertAfter(List storage self, address target, address newNode) internal {\n        require(!isInList(self, newNode), \"already in list\");\n        require(isInList(self, target) || target == NULL, \"not in list\");\n\n        // It is expected that this value is sometimes NULL.\n        address n = self.list[target].next;\n\n        self.list[newNode].previous = target;\n        self.list[newNode].next = n;\n        self.list[target].next = newNode;\n        self.list[n].previous = newNode;\n\n        self.list[newNode].inList = true;\n    }\n\n    /**\n    * @notice Remove a node from the list, and fix the previous and next\n    * pointers that are pointing to the removed node. Removing anode that is not\n    * in the list will do nothing.\n    *\n    * @param self The list being using.\n    * @param node The node in the list to be removed.\n    */\n    function remove(List storage self, address node) internal {\n        require(isInList(self, node), \"not in list\");\n        if (node == NULL) {\n            return;\n        }\n        address p = self.list[node].previous;\n        address n = self.list[node].next;\n\n        self.list[p].next = n;\n        self.list[n].previous = p;\n\n        // Deleting the node should set this value to false, but we set it here for\n        // explicitness.\n        self.list[node].inList = false;\n        delete self.list[node];\n    }\n\n    /**\n    * @notice Insert a node at the beginning of the list.\n    *\n    * @param self The list being used.\n    * @param node The node to insert at the beginning of the list.\n    */\n    function prepend(List storage self, address node) internal {\n        // isInList(node) is checked in insertBefore\n\n        insertBefore(self, begin(self), node);\n    }\n\n    /**\n    * @notice Insert a node at the end of the list.\n    *\n    * @param self The list being used.\n    * @param node The node to insert at the end of the list.\n    */\n    function append(List storage self, address node) internal {\n        // isInList(node) is checked in insertBefore\n\n        insertAfter(self, end(self), node);\n    }\n\n    function swap(List storage self, address left, address right) internal {\n        // isInList(left) and isInList(right) are checked in remove\n\n        address previousRight = self.list[right].previous;\n        remove(self, right);\n        insertAfter(self, left, right);\n        remove(self, left);\n        insertAfter(self, previousRight, left);\n    }\n\n    function isInList(List storage self, address node) internal view returns (bool) {\n        return self.list[node].inList;\n    }\n\n    /**\n    * @notice Get the node at the beginning of a double linked list.\n    *\n    * @param self The list being used.\n    *\n    * @return A address identifying the node at the beginning of the double\n    * linked list.\n    */\n    function begin(List storage self) internal view returns (address) {\n        return self.list[NULL].next;\n    }\n\n    /**\n    * @notice Get the node at the end of a double linked list.\n    *\n    * @param self The list being used.\n    *\n    * @return A address identifying the node at the end of the double linked\n    * list.\n    */\n    function end(List storage self) internal view returns (address) {\n        return self.list[NULL].previous;\n    }\n\n    function next(List storage self, address node) internal view returns (address) {\n        require(isInList(self, node), \"not in list\");\n        return self.list[node].next;\n    }\n\n    function previous(List storage self, address node) internal view returns (address) {\n        require(isInList(self, node), \"not in list\");\n        return self.list[node].previous;\n    }\n\n}\n\n/// @notice This contract stores data and funds for the DarknodeRegistry\n/// contract. The data / fund logic and storage have been separated to improve\n/// upgradability.\ncontract DarknodeRegistryStore is Ownable {\n    string public VERSION; // Passed in as a constructor parameter.\n\n    /// @notice Darknodes are stored in the darknode struct. The owner is the\n    /// address that registered the darknode, the bond is the amount of REN that\n    /// was transferred during registration, and the public key is the\n    /// encryption key that should be used when sending sensitive information to\n    /// the darknode.\n    struct Darknode {\n        // The owner of a Darknode is the address that called the register\n        // function. The owner is the only address that is allowed to\n        // deregister the Darknode, unless the Darknode is slashed for\n        // malicious behavior.\n        address owner;\n\n        // The bond is the amount of REN submitted as a bond by the Darknode.\n        // This amount is reduced when the Darknode is slashed for malicious\n        // behavior.\n        uint256 bond;\n\n        // The block number at which the Darknode is considered registered.\n        uint256 registeredAt;\n\n        // The block number at which the Darknode is considered deregistered.\n        uint256 deregisteredAt;\n\n        // The public key used by this Darknode for encrypting sensitive data\n        // off chain. It is assumed that the Darknode has access to the\n        // respective private key, and that there is an agreement on the format\n        // of the public key.\n        bytes publicKey;\n    }\n\n    /// Registry data.\n    mapping(address => Darknode) private darknodeRegistry;\n    LinkedList.List private darknodes;\n\n    // RepublicToken.\n    RepublicToken public ren;\n\n    /// @notice The contract constructor.\n    ///\n    /// @param _VERSION A string defining the contract version.\n    /// @param _ren The address of the RepublicToken contract.\n    constructor(\n        string _VERSION,\n        RepublicToken _ren\n    ) public {\n        VERSION = _VERSION;\n        ren = _ren;\n    }\n\n    /// @notice Instantiates a darknode and appends it to the darknodes\n    /// linked-list.\n    ///\n    /// @param _darknodeID The darknode's ID.\n    /// @param _darknodeOwner The darknode's owner's address\n    /// @param _bond The darknode's bond value\n    /// @param _publicKey The darknode's public key\n    /// @param _registeredAt The time stamp when the darknode is registered.\n    /// @param _deregisteredAt The time stamp when the darknode is deregistered.\n    function appendDarknode(\n        address _darknodeID,\n        address _darknodeOwner,\n        uint256 _bond,\n        bytes _publicKey,\n        uint256 _registeredAt,\n        uint256 _deregisteredAt\n    ) external onlyOwner {\n        Darknode memory darknode = Darknode({\n            owner: _darknodeOwner,\n            bond: _bond,\n            publicKey: _publicKey,\n            registeredAt: _registeredAt,\n            deregisteredAt: _deregisteredAt\n        });\n        darknodeRegistry[_darknodeID] = darknode;\n        LinkedList.append(darknodes, _darknodeID);\n    }\n\n    /// @notice Returns the address of the first darknode in the store\n    function begin() external view onlyOwner returns(address) {\n        return LinkedList.begin(darknodes);\n    }\n\n    /// @notice Returns the address of the next darknode in the store after the\n    /// given address.\n    function next(address darknodeID) external view onlyOwner returns(address) {\n        return LinkedList.next(darknodes, darknodeID);\n    }\n\n    /// @notice Removes a darknode from the store and transfers its bond to the\n    /// owner of this contract.\n    function removeDarknode(address darknodeID) external onlyOwner {\n        uint256 bond = darknodeRegistry[darknodeID].bond;\n        delete darknodeRegistry[darknodeID];\n        LinkedList.remove(darknodes, darknodeID);\n        require(ren.transfer(owner, bond), \"bond transfer failed\");\n    }\n\n    /// @notice Updates the bond of the darknode. If the bond is being\n    /// decreased, the difference is sent to the owner of this contract.\n    function updateDarknodeBond(address darknodeID, uint256 bond) external onlyOwner {\n        uint256 previousBond = darknodeRegistry[darknodeID].bond;\n        darknodeRegistry[darknodeID].bond = bond;\n        if (previousBond > bond) {\n            require(ren.transfer(owner, previousBond - bond), \"cannot transfer bond\");\n        }\n    }\n\n    /// @notice Updates the deregistration timestamp of a darknode.\n    function updateDarknodeDeregisteredAt(address darknodeID, uint256 deregisteredAt) external onlyOwner {\n        darknodeRegistry[darknodeID].deregisteredAt = deregisteredAt;\n    }\n\n    /// @notice Returns the owner of a given darknode.\n    function darknodeOwner(address darknodeID) external view onlyOwner returns (address) {\n        return darknodeRegistry[darknodeID].owner;\n    }\n\n    /// @notice Returns the bond of a given darknode.\n    function darknodeBond(address darknodeID) external view onlyOwner returns (uint256) {\n        return darknodeRegistry[darknodeID].bond;\n    }\n\n    /// @notice Returns the registration time of a given darknode.\n    function darknodeRegisteredAt(address darknodeID) external view onlyOwner returns (uint256) {\n        return darknodeRegistry[darknodeID].registeredAt;\n    }\n\n    /// @notice Returns the deregistration time of a given darknode.\n    function darknodeDeregisteredAt(address darknodeID) external view onlyOwner returns (uint256) {\n        return darknodeRegistry[darknodeID].deregisteredAt;\n    }\n\n    /// @notice Returns the encryption public key of a given darknode.\n    function darknodePublicKey(address darknodeID) external view onlyOwner returns (bytes) {\n        return darknodeRegistry[darknodeID].publicKey;\n    }\n}\n\n/// @notice DarknodeRegistry is responsible for the registration and\n/// deregistration of Darknodes.\ncontract DarknodeRegistry is Ownable {\n    string public VERSION; // Passed in as a constructor parameter.\n\n    /// @notice Darknode pods are shuffled after a fixed number of blocks.\n    /// An Epoch stores an epoch hash used as an (insecure) RNG seed, and the\n    /// blocknumber which restricts when the next epoch can be called.\n    struct Epoch {\n        uint256 epochhash;\n        uint256 blocknumber;\n    }\n\n    uint256 public numDarknodes;\n    uint256 public numDarknodesNextEpoch;\n    uint256 public numDarknodesPreviousEpoch;\n\n    /// Variables used to parameterize behavior.\n    uint256 public minimumBond;\n    uint256 public minimumPodSize;\n    uint256 public minimumEpochInterval;\n    address public slasher;\n\n    /// When one of the above variables is modified, it is only updated when the\n    /// next epoch is called. These variables store the values for the next epoch.\n    uint256 public nextMinimumBond;\n    uint256 public nextMinimumPodSize;\n    uint256 public nextMinimumEpochInterval;\n    address public nextSlasher;\n\n    /// The current and previous epoch\n    Epoch public currentEpoch;\n    Epoch public previousEpoch;\n\n    /// Republic ERC20 token contract used to transfer bonds.\n    RepublicToken public ren;\n\n    /// Darknode Registry Store is the storage contract for darknodes.\n    DarknodeRegistryStore public store;\n\n    /// @notice Emitted when a darknode is registered.\n    /// @param _darknodeID The darknode ID that was registered.\n    /// @param _bond The amount of REN that was transferred as bond.\n    event LogDarknodeRegistered(address _darknodeID, uint256 _bond);\n\n    /// @notice Emitted when a darknode is deregistered.\n    /// @param _darknodeID The darknode ID that was deregistered.\n    event LogDarknodeDeregistered(address _darknodeID);\n\n    /// @notice Emitted when a refund has been made.\n    /// @param _owner The address that was refunded.\n    /// @param _amount The amount of REN that was refunded.\n    event LogDarknodeOwnerRefunded(address _owner, uint256 _amount);\n\n    /// @notice Emitted when a new epoch has begun.\n    event LogNewEpoch();\n\n    /// @notice Emitted when a constructor parameter has been updated.\n    event LogMinimumBondUpdated(uint256 previousMinimumBond, uint256 nextMinimumBond);\n    event LogMinimumPodSizeUpdated(uint256 previousMinimumPodSize, uint256 nextMinimumPodSize);\n    event LogMinimumEpochIntervalUpdated(uint256 previousMinimumEpochInterval, uint256 nextMinimumEpochInterval);\n    event LogSlasherUpdated(address previousSlasher, address nextSlasher);\n\n    /// @notice Only allow the owner that registered the darknode to pass.\n    modifier onlyDarknodeOwner(address _darknodeID) {\n        require(store.darknodeOwner(_darknodeID) == msg.sender, \"must be darknode owner\");\n        _;\n    }\n\n    /// @notice Only allow unregistered darknodes.\n    modifier onlyRefunded(address _darknodeID) {\n        require(isRefunded(_darknodeID), \"must be refunded or never registered\");\n        _;\n    }\n\n    /// @notice Only allow refundable darknodes.\n    modifier onlyRefundable(address _darknodeID) {\n        require(isRefundable(_darknodeID), \"must be deregistered for at least one epoch\");\n        _;\n    }\n\n    /// @notice Only allowed registered nodes without a pending deregistration to\n    /// deregister\n    modifier onlyDeregisterable(address _darknodeID) {\n        require(isDeregisterable(_darknodeID), \"must be deregisterable\");\n        _;\n    }\n\n    /// @notice Only allow the Slasher contract.\n    modifier onlySlasher() {\n        require(slasher == msg.sender, \"must be slasher\");\n        _;\n    }\n\n    /// @notice The contract constructor.\n    ///\n    /// @param _VERSION A string defining the contract version.\n    /// @param _renAddress The address of the RepublicToken contract.\n    /// @param _storeAddress The address of the DarknodeRegistryStore contract.\n    /// @param _minimumBond The minimum bond amount that can be submitted by a\n    ///        Darknode.\n    /// @param _minimumPodSize The minimum size of a Darknode pod.\n    /// @param _minimumEpochInterval The minimum number of blocks between\n    ///        epochs.\n    constructor(\n        string _VERSION,\n        RepublicToken _renAddress,\n        DarknodeRegistryStore _storeAddress,\n        uint256 _minimumBond,\n        uint256 _minimumPodSize,\n        uint256 _minimumEpochInterval\n    ) public {\n        VERSION = _VERSION;\n\n        store = _storeAddress;\n        ren = _renAddress;\n\n        minimumBond = _minimumBond;\n        nextMinimumBond = minimumBond;\n\n        minimumPodSize = _minimumPodSize;\n        nextMinimumPodSize = minimumPodSize;\n\n        minimumEpochInterval = _minimumEpochInterval;\n        nextMinimumEpochInterval = minimumEpochInterval;\n\n        currentEpoch = Epoch({\n            epochhash: uint256(blockhash(block.number - 1)),\n            blocknumber: block.number\n        });\n        numDarknodes = 0;\n        numDarknodesNextEpoch = 0;\n        numDarknodesPreviousEpoch = 0;\n    }\n\n    /// @notice Register a darknode and transfer the bond to this contract. The\n    /// caller must provide a public encryption key for the darknode as well as\n    /// a bond in REN. The bond must be provided as an ERC20 allowance. The dark\n    /// node will remain pending registration until the next epoch. Only after\n    /// this period can the darknode be deregistered. The caller of this method\n    /// will be stored as the owner of the darknode.\n    ///\n    /// @param _darknodeID The darknode ID that will be registered.\n    /// @param _publicKey The public key of the darknode. It is stored to allow\n    ///        other darknodes and traders to encrypt messages to the trader.\n    /// @param _bond The bond that will be paid. It must be greater than, or\n    ///        equal to, the minimum bond.\n    function register(address _darknodeID, bytes _publicKey, uint256 _bond) external onlyRefunded(_darknodeID) {\n        // REN allowance\n        require(_bond >= minimumBond, \"insufficient bond\");\n        // require(ren.allowance(msg.sender, address(this)) >= _bond);\n        require(ren.transferFrom(msg.sender, address(this), _bond), \"bond transfer failed\");\n        ren.transfer(address(store), _bond);\n\n        // Flag this darknode for registration\n        store.appendDarknode(\n            _darknodeID,\n            msg.sender,\n            _bond,\n            _publicKey,\n            currentEpoch.blocknumber + minimumEpochInterval,\n            0\n        );\n\n        numDarknodesNextEpoch += 1;\n\n        // Emit an event.\n        emit LogDarknodeRegistered(_darknodeID, _bond);\n    }\n\n    /// @notice Deregister a darknode. The darknode will not be deregistered\n    /// until the end of the epoch. After another epoch, the bond can be\n    /// refunded by calling the refund method.\n    /// @param _darknodeID The darknode ID that will be deregistered. The caller\n    ///        of this method store.darknodeRegisteredAt(_darknodeID) must be\n    //         the owner of this darknode.\n    function deregister(address _darknodeID) external onlyDeregisterable(_darknodeID) onlyDarknodeOwner(_darknodeID) {\n        // Flag the darknode for deregistration\n        store.updateDarknodeDeregisteredAt(_darknodeID, currentEpoch.blocknumber + minimumEpochInterval);\n        numDarknodesNextEpoch -= 1;\n\n        // Emit an event\n        emit LogDarknodeDeregistered(_darknodeID);\n    }\n\n    /// @notice Progress the epoch if it is possible to do so. This captures\n    /// the current timestamp and current blockhash and overrides the current\n    /// epoch.\n    function epoch() external {\n        if (previousEpoch.blocknumber == 0) {\n            // The first epoch must be called by the owner of the contract\n            require(msg.sender == owner, \"not authorized (first epochs)\");\n        }\n\n        // Require that the epoch interval has passed\n        require(block.number >= currentEpoch.blocknumber + minimumEpochInterval, \"epoch interval has not passed\");\n        uint256 epochhash = uint256(blockhash(block.number - 1));\n\n        // Update the epoch hash and timestamp\n        previousEpoch = currentEpoch;\n        currentEpoch = Epoch({\n            epochhash: epochhash,\n            blocknumber: block.number\n        });\n\n        // Update the registry information\n        numDarknodesPreviousEpoch = numDarknodes;\n        numDarknodes = numDarknodesNextEpoch;\n\n        // If any update functions have been called, update the values now\n        if (nextMinimumBond != minimumBond) {\n            minimumBond = nextMinimumBond;\n            emit LogMinimumBondUpdated(minimumBond, nextMinimumBond);\n        }\n        if (nextMinimumPodSize != minimumPodSize) {\n            minimumPodSize = nextMinimumPodSize;\n            emit LogMinimumPodSizeUpdated(minimumPodSize, nextMinimumPodSize);\n        }\n        if (nextMinimumEpochInterval != minimumEpochInterval) {\n            minimumEpochInterval = nextMinimumEpochInterval;\n            emit LogMinimumEpochIntervalUpdated(minimumEpochInterval, nextMinimumEpochInterval);\n        }\n        if (nextSlasher != slasher) {\n            slasher = nextSlasher;\n            emit LogSlasherUpdated(slasher, nextSlasher);\n        }\n\n        // Emit an event\n        emit LogNewEpoch();\n    }\n\n    /// @notice Allows the contract owner to transfer ownership of the\n    /// DarknodeRegistryStore.\n    /// @param _newOwner The address to transfer the ownership to.\n    function transferStoreOwnership(address _newOwner) external onlyOwner {\n        store.transferOwnership(_newOwner);\n    }\n\n    /// @notice Allows the contract owner to update the minimum bond.\n    /// @param _nextMinimumBond The minimum bond amount that can be submitted by\n    ///        a darknode.\n    function updateMinimumBond(uint256 _nextMinimumBond) external onlyOwner {\n        // Will be updated next epoch\n        nextMinimumBond = _nextMinimumBond;\n    }\n\n    /// @notice Allows the contract owner to update the minimum pod size.\n    /// @param _nextMinimumPodSize The minimum size of a pod.\n    function updateMinimumPodSize(uint256 _nextMinimumPodSize) external onlyOwner {\n        // Will be updated next epoch\n        nextMinimumPodSize = _nextMinimumPodSize;\n    }\n\n    /// @notice Allows the contract owner to update the minimum epoch interval.\n    /// @param _nextMinimumEpochInterval The minimum number of blocks between epochs.\n    function updateMinimumEpochInterval(uint256 _nextMinimumEpochInterval) external onlyOwner {\n        // Will be updated next epoch\n        nextMinimumEpochInterval = _nextMinimumEpochInterval;\n    }\n\n    /// @notice Allow the contract owner to update the DarknodeSlasher contract\n    /// address.\n    /// @param _slasher The new slasher address.\n    function updateSlasher(address _slasher) external onlyOwner {\n        nextSlasher = _slasher;\n    }\n\n    /// @notice Allow the DarknodeSlasher contract to slash half of a darknode's\n    /// bond and deregister it. The bond is distributed as follows:\n    ///   1/2 is kept by the guilty prover\n    ///   1/8 is rewarded to the first challenger\n    ///   1/8 is rewarded to the second challenger\n    ///   1/4 becomes unassigned\n    /// @param _prover The guilty prover whose bond is being slashed\n    /// @param _challenger1 The first of the two darknodes who submitted the challenge\n    /// @param _challenger2 The second of the two darknodes who submitted the challenge\n    function slash(address _prover, address _challenger1, address _challenger2)\n        external\n        onlySlasher\n    {\n        uint256 penalty = store.darknodeBond(_prover) / 2;\n        uint256 reward = penalty / 4;\n\n        // Slash the bond of the failed prover in half\n        store.updateDarknodeBond(_prover, penalty);\n\n        // If the darknode has not been deregistered then deregister it\n        if (isDeregisterable(_prover)) {\n            store.updateDarknodeDeregisteredAt(_prover, currentEpoch.blocknumber + minimumEpochInterval);\n            numDarknodesNextEpoch -= 1;\n            emit LogDarknodeDeregistered(_prover);\n        }\n\n        // Reward the challengers with less than the penalty so that it is not\n        // worth challenging yourself\n        ren.transfer(store.darknodeOwner(_challenger1), reward);\n        ren.transfer(store.darknodeOwner(_challenger2), reward);\n    }\n\n    /// @notice Refund the bond of a deregistered darknode. This will make the\n    /// darknode available for registration again. Anyone can call this function\n    /// but the bond will always be refunded to the darknode owner.\n    ///\n    /// @param _darknodeID The darknode ID that will be refunded. The caller\n    ///        of this method must be the owner of this darknode.\n    function refund(address _darknodeID) external onlyRefundable(_darknodeID) {\n        address darknodeOwner = store.darknodeOwner(_darknodeID);\n\n        // Remember the bond amount\n        uint256 amount = store.darknodeBond(_darknodeID);\n\n        // Erase the darknode from the registry\n        store.removeDarknode(_darknodeID);\n\n        // Refund the owner by transferring REN\n        ren.transfer(darknodeOwner, amount);\n\n        // Emit an event.\n        emit LogDarknodeOwnerRefunded(darknodeOwner, amount);\n    }\n\n    /// @notice Retrieves the address of the account that registered a darknode.\n    /// @param _darknodeID The ID of the darknode to retrieve the owner for.\n    function getDarknodeOwner(address _darknodeID) external view returns (address) {\n        return store.darknodeOwner(_darknodeID);\n    }\n\n    /// @notice Retrieves the bond amount of a darknode in 10^-18 REN.\n    /// @param _darknodeID The ID of the darknode to retrieve the bond for.\n    function getDarknodeBond(address _darknodeID) external view returns (uint256) {\n        return store.darknodeBond(_darknodeID);\n    }\n\n    /// @notice Retrieves the encryption public key of the darknode.\n    /// @param _darknodeID The ID of the darknode to retrieve the public key for.\n    function getDarknodePublicKey(address _darknodeID) external view returns (bytes) {\n        return store.darknodePublicKey(_darknodeID);\n    }\n\n    /// @notice Retrieves a list of darknodes which are registered for the\n    /// current epoch.\n    /// @param _start A darknode ID used as an offset for the list. If _start is\n    ///        0x0, the first dark node will be used. _start won't be\n    ///        included it is not registered for the epoch.\n    /// @param _count The number of darknodes to retrieve starting from _start.\n    ///        If _count is 0, all of the darknodes from _start are\n    ///        retrieved. If _count is more than the remaining number of\n    ///        registered darknodes, the rest of the list will contain\n    ///        0x0s.\n    function getDarknodes(address _start, uint256 _count) external view returns (address[]) {\n        uint256 count = _count;\n        if (count == 0) {\n            count = numDarknodes;\n        }\n        return getDarknodesFromEpochs(_start, count, false);\n    }\n\n    /// @notice Retrieves a list of darknodes which were registered for the\n    /// previous epoch. See `getDarknodes` for the parameter documentation.\n    function getPreviousDarknodes(address _start, uint256 _count) external view returns (address[]) {\n        uint256 count = _count;\n        if (count == 0) {\n            count = numDarknodesPreviousEpoch;\n        }\n        return getDarknodesFromEpochs(_start, count, true);\n    }\n\n    /// @notice Returns whether a darknode is scheduled to become registered\n    /// at next epoch.\n    /// @param _darknodeID The ID of the darknode to return\n    function isPendingRegistration(address _darknodeID) external view returns (bool) {\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\n        return registeredAt != 0 && registeredAt > currentEpoch.blocknumber;\n    }\n\n    /// @notice Returns if a darknode is in the pending deregistered state. In\n    /// this state a darknode is still considered registered.\n    function isPendingDeregistration(address _darknodeID) external view returns (bool) {\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        return deregisteredAt != 0 && deregisteredAt > currentEpoch.blocknumber;\n    }\n\n    /// @notice Returns if a darknode is in the deregistered state.\n    function isDeregistered(address _darknodeID) public view returns (bool) {\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        return deregisteredAt != 0 && deregisteredAt <= currentEpoch.blocknumber;\n    }\n\n    /// @notice Returns if a darknode can be deregistered. This is true if the\n    /// darknodes is in the registered state and has not attempted to\n    /// deregister yet.\n    function isDeregisterable(address _darknodeID) public view returns (bool) {\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        // The Darknode is currently in the registered state and has not been\n        // transitioned to the pending deregistration, or deregistered, state\n        return isRegistered(_darknodeID) && deregisteredAt == 0;\n    }\n\n    /// @notice Returns if a darknode is in the refunded state. This is true\n    /// for darknodes that have never been registered, or darknodes that have\n    /// been deregistered and refunded.\n    function isRefunded(address _darknodeID) public view returns (bool) {\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        return registeredAt == 0 && deregisteredAt == 0;\n    }\n\n    /// @notice Returns if a darknode is refundable. This is true for darknodes\n    /// that have been in the deregistered state for one full epoch.\n    function isRefundable(address _darknodeID) public view returns (bool) {\n        return isDeregistered(_darknodeID) && store.darknodeDeregisteredAt(_darknodeID) <= previousEpoch.blocknumber;\n    }\n\n    /// @notice Returns if a darknode is in the registered state.\n    function isRegistered(address _darknodeID) public view returns (bool) {\n        return isRegisteredInEpoch(_darknodeID, currentEpoch);\n    }\n\n    /// @notice Returns if a darknode was in the registered state last epoch.\n    function isRegisteredInPreviousEpoch(address _darknodeID) public view returns (bool) {\n        return isRegisteredInEpoch(_darknodeID, previousEpoch);\n    }\n\n    /// @notice Returns if a darknode was in the registered state for a given\n    /// epoch.\n    /// @param _darknodeID The ID of the darknode\n    /// @param _epoch One of currentEpoch, previousEpoch\n    function isRegisteredInEpoch(address _darknodeID, Epoch _epoch) private view returns (bool) {\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        bool registered = registeredAt != 0 && registeredAt <= _epoch.blocknumber;\n        bool notDeregistered = deregisteredAt == 0 || deregisteredAt > _epoch.blocknumber;\n        // The Darknode has been registered and has not yet been deregistered,\n        // although it might be pending deregistration\n        return registered && notDeregistered;\n    }\n\n    /// @notice Returns a list of darknodes registered for either the current\n    /// or the previous epoch. See `getDarknodes` for documentation on the\n    /// parameters `_start` and `_count`.\n    /// @param _usePreviousEpoch If true, use the previous epoch, otherwise use\n    ///        the current epoch.\n    function getDarknodesFromEpochs(address _start, uint256 _count, bool _usePreviousEpoch) private view returns (address[]) {\n        uint256 count = _count;\n        if (count == 0) {\n            count = numDarknodes;\n        }\n\n        address[] memory nodes = new address[](count);\n\n        // Begin with the first node in the list\n        uint256 n = 0;\n        address next = _start;\n        if (next == 0x0) {\n            next = store.begin();\n        }\n\n        // Iterate until all registered Darknodes have been collected\n        while (n < count) {\n            if (next == 0x0) {\n                break;\n            }\n            // Only include Darknodes that are currently registered\n            bool includeNext;\n            if (_usePreviousEpoch) {\n                includeNext = isRegisteredInPreviousEpoch(next);\n            } else {\n                includeNext = isRegistered(next);\n            }\n            if (!includeNext) {\n                next = store.next(next);\n                continue;\n            }\n            nodes[n] = next;\n            next = store.next(next);\n            n += 1;\n        }\n        return nodes;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_darknodeID\",\"type\":\"address\"}],\"name\":\"isPendingRegistration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numDarknodesNextEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_darknodeID\",\"type\":\"address\"},{\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"name\":\"_bond\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextMinimumBond\",\"type\":\"uint256\"}],\"name\":\"updateMinimumBond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numDarknodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_darknodeID\",\"type\":\"address\"}],\"name\":\"getDarknodeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextSlasher\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_darknodeID\",\"type\":\"address\"}],\"name\":\"isPendingDeregistration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_start\",\"type\":\"address\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getPreviousDarknodes\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextMinimumEpochInterval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumEpochInterval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_prover\",\"type\":\"address\"},{\"name\":\"_challenger1\",\"type\":\"address\"},{\"name\":\"_challenger2\",\"type\":\"address\"}],\"name\":\"slash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_darknodeID\",\"type\":\"address\"}],\"name\":\"isRefundable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"previousEpoch\",\"outputs\":[{\"name\":\"epochhash\",\"type\":\"uint256\"},{\"name\":\"blocknumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextMinimumBond\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextMinimumEpochInterval\",\"type\":\"uint256\"}],\"name\":\"updateMinimumEpochInterval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextMinimumPodSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numDarknodesPreviousEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"name\":\"epochhash\",\"type\":\"uint256\"},{\"name\":\"blocknumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_darknodeID\",\"type\":\"address\"}],\"name\":\"isRegisteredInPreviousEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_darknodeID\",\"type\":\"address\"}],\"name\":\"isDeregistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextMinimumPodSize\",\"type\":\"uint256\"}],\"name\":\"updateMinimumPodSize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_darknodeID\",\"type\":\"address\"}],\"name\":\"deregister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_darknodeID\",\"type\":\"address\"}],\"name\":\"getDarknodePublicKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ren\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"epoch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumBond\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"slasher\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_slasher\",\"type\":\"address\"}],\"name\":\"updateSlasher\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_darknodeID\",\"type\":\"address\"}],\"name\":\"getDarknodeBond\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferStoreOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_darknodeID\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumPodSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_darknodeID\",\"type\":\"address\"}],\"name\":\"isDeregisterable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_start\",\"type\":\"address\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getDarknodes\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_darknodeID\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_darknodeID\",\"type\":\"address\"}],\"name\":\"isRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_VERSION\",\"type\":\"string\"},{\"name\":\"_renAddress\",\"type\":\"address\"},{\"name\":\"_storeAddress\",\"type\":\"address\"},{\"name\":\"_minimumBond\",\"type\":\"uint256\"},{\"name\":\"_minimumPodSize\",\"type\":\"uint256\"},{\"name\":\"_minimumEpochInterval\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_darknodeID\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_bond\",\"type\":\"uint256\"}],\"name\":\"LogDarknodeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_darknodeID\",\"type\":\"address\"}],\"name\":\"LogDarknodeDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogDarknodeOwnerRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogNewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousMinimumBond\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nextMinimumBond\",\"type\":\"uint256\"}],\"name\":\"LogMinimumBondUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousMinimumPodSize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nextMinimumPodSize\",\"type\":\"uint256\"}],\"name\":\"LogMinimumPodSizeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousMinimumEpochInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nextMinimumEpochInterval\",\"type\":\"uint256\"}],\"name\":\"LogMinimumEpochIntervalUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousSlasher\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nextSlasher\",\"type\":\"address\"}],\"name\":\"LogSlasherUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000408e41876cccdc0f92210600ef50372656052a3800000000000000000000000006df0657ba5e8f5339e742212669f6e7ee3c505700000000000000000000000000000000000000000000152d02c7e14af6800000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000013880000000000000000000000000000000000000000000000000000000000000005312e302e32000000000000000000000000000000000000000000000000000000"
}