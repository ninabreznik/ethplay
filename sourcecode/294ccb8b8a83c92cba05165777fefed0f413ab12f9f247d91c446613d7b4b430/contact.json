{
  "address": "0x17d7feb01444ab1ef6ee2643756b4740ae0140c7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OurERC20",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-08\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n\n/// Buy OurERC20 don't miss the oportunity\ncontract OurERC20 {\n\n  using SafeMath for uint256;\n  string _name;\n  string _symbol;\n  mapping (address => uint256) _balances;\n  uint256 _totalSupply;\n  uint8 private _decimals;\n  event Transfer(address indexed from, address indexed to, uint tokens);\n  \n  constructor() public {\n    _name = \"HOLA\";\n    _symbol = \"HL\";\n    _decimals = 0;\n  }\n  \n  function decimals() public view returns(uint8) {\n      return _decimals;\n  }\n  \n  function totalSupply() public view returns (uint256) {\n      return _totalSupply;\n  }\n  \n  function name() public view returns (string memory) {\n     return _name;\n  }\n  \n  function symbol() public view returns (string memory) {\n     return _symbol;\n  }\n  \n  function mint(uint256 amount) public payable {\n      require(msg.value == amount.mul(0.006 ether));\n      _balances[msg.sender] = _balances[msg.sender].add(amount);\n      _totalSupply = _totalSupply + amount;\n  }\n  \n  function burn(uint256 amount) public {\n      require(_balances[msg.sender] == amount);\n      _balances[msg.sender] = _balances[msg.sender].sub(amount);\n      msg.sender.transfer(amount.mul(0.006 ether));\n      _totalSupply = _totalSupply - amount;\n  }\n  \n  function transfer(address _to, uint256 value) public returns (bool success) {\n      require(_balances[msg.sender] >= value);\n      _balances[msg.sender] = _balances[msg.sender].sub(value);\n      _balances[_to] = _balances[_to].add(value);\n      emit Transfer(msg.sender, _to, value);      \n      return true;\n  }\n  \n  \n  \n  \n  \n  \n}",
  "bytecode": "608060405234801561001057600080fd5b506040805190810160405280600481526020017f484f4c41000000000000000000000000000000000000000000000000000000008152506000908051906020019061005c9291906100ca565b506040805190810160405280600281526020017f484c000000000000000000000000000000000000000000000000000000000000815250600190805190602001906100a89291906100ca565b506000600460006101000a81548160ff021916908360ff16021790555061016f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010b57805160ff1916838001178555610139565b82800160010185558215610139579182015b8281111561013857825182559160200191906001019061011d565b5b509050610146919061014a565b5090565b61016c91905b80821115610168576000816000905550600101610150565b5090565b90565b610a508061017e6000396000f3fe60806040526004361061007d576000357c01000000000000000000000000000000000000000000000000000000009004806306fdde031461008257806318160ddd14610112578063313ce5671461013d57806342966c681461016e57806395d89b41146101a9578063a0712d6814610239578063a9059cbb14610267575b600080fd5b34801561008e57600080fd5b506100976102da565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100d75780820151818401526020810190506100bc565b50505050905090810190601f1680156101045780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561011e57600080fd5b5061012761037c565b6040518082815260200191505060405180910390f35b34801561014957600080fd5b50610152610386565b604051808260ff1660ff16815260200191505060405180910390f35b34801561017a57600080fd5b506101a76004803603602081101561019157600080fd5b810190808035906020019092919050505061039d565b005b3480156101b557600080fd5b506101be6104ed565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101fe5780820151818401526020810190506101e3565b50505050905090810190601f16801561022b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102656004803603602081101561024f57600080fd5b810190808035906020019092919050505061058f565b005b34801561027357600080fd5b506102c06004803603604081101561028a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610659565b604051808215151515815260200191505060405180910390f35b606060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103725780601f1061034757610100808354040283529160200191610372565b820191906000526020600020905b81548152906001019060200180831161035557829003601f168201915b5050505050905090565b6000600354905090565b6000600460009054906101000a900460ff16905090565b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415156103ea57600080fd5b61043c81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461084290919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc6104b3661550f7dca70000846108cd90919063ffffffff16565b9081150290604051600060405180830381858888f193505050501580156104de573d6000803e3d6000fd5b50806003540360038190555050565b606060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105855780601f1061055a57610100808354040283529160200191610585565b820191906000526020600020905b81548152906001019060200180831161056857829003601f168201915b5050505050905090565b6105a9661550f7dca70000826108cd90919063ffffffff16565b341415156105b657600080fd5b61060881600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461099a90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806003540160038190555050565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156106a957600080fd5b6106fb82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461084290919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061079082600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461099a90919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60008282111515156108bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b600082840390508091505092915050565b6000808314156108e05760009050610994565b600082840290508284828115156108f357fe5b0414151561098f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f81526020017f770000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b809150505b92915050565b6000808284019050838110151515610a1a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b809150509291505056fea165627a7a723058203637907014f819a25c567fe101ae246f372ce929e33779668d97bc84a45c72bb0029"
}